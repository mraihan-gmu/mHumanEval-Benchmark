task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,nus_Latn,rb,"pek in ca ŋun.Guic mi̱ te rɛy nämbäri̱ ti̱ ca ŋun, ɛni̱ nämbäri̱ rɛw ti̱ thia̱k kɛ rɔ̱ kä # >>> has_close_elements.call([1.0, 2.0, 3.0], 0.5)
# false
# >>> has_close_elements.call([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
# true
def has_close_elements(numbers, threshold)
","def has_close_elements(numbers, threshold)
  numbers.combination(2).any? { |a, b| (a - b).abs < threshold }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_has_close_elements
    candidate = method(:has_close_elements)
    assert_equal(true, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3))
    assert_equal(false, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05))
    assert_equal(true, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.95))
    assert_equal(false, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.8))
    assert_equal(true, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1))
    assert_equal(true, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 1.0))
    assert_equal(false, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5))
  end
end
"
HumanEval_1,nus_Latn,rb,"/Cu wargakni̱ tin te kamdiɛn rɛy inpuɔɔth i̱thti̱riŋä.Bun ti̱ gööl la kɛn rɔ̱ laa pa̱a̱rkɛ (kä bi̱ ramɔ rɔ gaŋ kɛ mi̱ caa rɔ̱ yiath piny) kä /ci̱kɛ rɔ̱ laa mat kɛɛl.la̱thkɛ buɔ̱n ɛ tɔ̱ kä bi̱kɛ te gööli̱ kä bi̱kɛ cu loc ɛ la matdiɛn.Input kä pa̱ŋciin ɛmɛ ɛ la̱t mi̱ tekɛ bun ti̱ ŋuan ti̱ ca mat kɛ parenthesethni̱.# >>> separate_paren_groups.call(""( ) (( )) (( )( ))"")
# [""()"", ""(())"", ""(()())""]
def separate_paren_groups(paren_string)
","def separate_paren_groups(paren_string)
  # Remove spaces from the string
  paren_string = paren_string.gsub("" "", """")
  
  result = []
  current_group = """"
  balance = 0

  paren_string.each_char do |char|
    current_group += char
    balance += 1 if char == '('
    balance -= 1 if char == ')'

    if balance == 0 && !current_group.empty?
      result << current_group
      current_group = """"
    end
  end

  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_separate_paren_groups
    candidate = method(:separate_paren_groups)
    assert_equal([""(()())"", ""((()))"", ""()"", ""((())()())""], candidate.call(""(()()) ((())) () ((())()())""))
    assert_equal([""()"", ""(())"", ""((()))"", ""(((())))""], candidate.call(""() (()) ((())) (((())))""))
    assert_equal([""(()(())((())))""], candidate.call(""(()(())((())))""))
    assert_equal([""()"", ""(())"", ""(()())""], candidate.call(""( ) (( )) (( )( ))""))
  end
end
"
HumanEval_2,nus_Latn,rb,"Lɔ̱a̱rkɛ pek in ca ŋun ɛ nämbär.(cu tha̱a̱ŋdɛ min ci̱ duɔth ɛ mi̱ tɔt ni̱ ciaaŋ mi̱ kuiy ni̱ jɛn kä 1).kä inteji̱ɛr (inteji̱ɛr in di̱tni̱ jɛn kä kuiy ni̱ jɛn kä nämbär in ca ŋun) kɛnɛ deci̱malni̱ Mi̱ ca ŋun kä ɣöö bɛ tekɛ puɔ̱thi̱tip pi̱löthömin puɔɔmpömin, jɛn ba da̱a̱k piny ɛ la # >>> truncate_number.call(3.5)
# 0.5
def truncate_number(number)
","def truncate_number(number)
  number - number.to_i
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_truncate_number
    candidate = method(:truncate_number)
    assert_equal(0.5, candidate.call(3.5))
    assert_equal(0.25, candidate.call(1.25))
    assert_equal(0.0, candidate.call(123.0))
  end
end
"
HumanEval_3,nus_Latn,rb,"kä ɛn gua̱a̱th ɛmɔ pa̱ŋciin bɛ yi̱k loc i̱ thuɔ̱k. mi̱ /ci̱ mɔ ɛ jɛn bɛ yi̱k loc i̱ kac.kä mi̱ ci̱ thöp-du-piny ɛ ɣöö bi̱ ji̱ek mi̱ ci̱ thöp-du-piny ɛ wä piny kä dhɛrö, kä Ji̱n caa ji̱ moc pek mi̱ göl kɛ ɣöö bi̱ yio̱w kuëŋ kä bi̱ kɛ woc kɛ pek yio̱o̱ni̱ tin tä kɛ kɛ kä ba̱nk kɛ ɣöö bi̱ kɛ ku lɛ tä kɛ # >>> below_zero.call([1, 2, 3])
# false
# >>> below_zero.call([1, 2, -4, 5])
# true
def below_zero(operations)
","def below_zero(operations)
  balance = 0
  operations.each do |operation|
    balance += operation
    return true if balance < 0
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_below_zero
    candidate = method(:below_zero)
    assert_equal(false, candidate.call([]))
    assert_equal(false, candidate.call([1, 2, -3, 1, 2, -3]))
    assert_equal(true, candidate.call([1, 2, -4, 5, 6]))
    assert_equal(false, candidate.call([1, -1, 2, -2, 5, -5, 4, -4]))
    assert_equal(true, candidate.call([1, -1, 2, -2, 5, -5, 4, -5]))
    assert_equal(true, candidate.call([1, -2, 2, -2, 5, -5, 4, -4]))
  end
end
"
HumanEval_4,nus_Latn,rb,"MAD = average.  -     ɛlɛmɛni̱ kɛnɛ däär (rɛy kä mɛmɛ): Mean Absolute Deviation ɛ jɛn in te dääk kamdiɛn kɛ gua̱th mi̱ ci̱e̱e̱ kɛ gua̱th in tä databɛt thi̱n.Kɛ kui̱ kä mi̱ ca ŋun kä mat nämbäri̱ tin ca la̱th thi̱n, ba Mean Absolute Deviation (mi̱ cɛ te thi̱n) duäc.# >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])
# 1.0
def mean_absolute_deviation(numbers)
","def mean_absolute_deviation(numbers)
  mean = numbers.sum.to_f / numbers.size
  deviations = numbers.map { |num| (num - mean).abs }
  deviations.sum / numbers.size
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_mean_absolute_deviation
    candidate = method(:mean_absolute_deviation)
    assert_equal(0.5, candidate.call([1.0, 2.0]))
    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))
    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))
  end
end
"
HumanEval_5,nus_Latn,rb,"Kuɛ la ɣöö ba nämbär mi̱ ""delimɛtɛr"" kam kä ɛlɛmɛni̱ rɛw tin guɔ̱rkɛ rɔ̱ kä inpuut array ∀numbers"" # >>> intersperse.call([], 4)
# []
# >>> intersperse.call([1, 2, 3], 4)
# [1, 4, 2, 4, 3]
def intersperse(numbers, delimeter)
","def intersperse(numbers, delimeter)
  return numbers if numbers.empty?
  result = []
  numbers.each_with_index do |num, index|
    result << num
    result << delimeter unless index == numbers.size - 1
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_intersperse
    candidate = method(:intersperse)
    assert_equal([], candidate.call([], 7))
    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))
    assert_equal([2, 2, 2, 2, 2], candidate.call([2, 2, 2], 2))
  end
end
"
HumanEval_6,nus_Latn,rb,"C.d. (() (()) tekɛ ti̱ ŋuan ti̱ ŋuan ti̱ ci̱ rɔ̱ mat gua̱th kɛl kä ((())) tekɛ diɔ̱k. Kɛ kui̱ bunä kɛl, ka̱m raar ni̱bɛl in te piny ɛlɔ̱ŋ kä ca la̱th kɛ kam pa̱rkɛthɛthä.Input kä pa̱ŋciin ɛmɛ ɛ la̱t mi̱ cuŋ ɛ la mi̱ ca la̱t ɛ bun ti̱ ŋuan kɛ kui̱ kä tin ca la̱th rɛy pa̱rɛndhɛthni̱ tin ca da̱a̱k ɛ kamni̱kiɛn.# >>> parse_nested_parens.call(""(()()) ((())) () ((())()())"")
# [2, 3, 1, 3]
def parse_nested_parens(paren_string)
","def parse_nested_parens(paren_string)
  paren_string.split.map do |group|
    max_depth = current_depth = 0
    group.chars.each do |char|
      if char == '('
        current_depth += 1
        max_depth = [max_depth, current_depth].max
      elsif char == ')'
        current_depth -= 1
      end
    end
    max_depth
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_parse_nested_parens
    candidate = method(:parse_nested_parens)
    assert_equal([2, 3, 1, 3], candidate.call(""(()()) ((())) () ((())()())""))
    assert_equal([1, 2, 3, 4], candidate.call(""() (()) ((())) (((())))""))
    assert_equal([4], candidate.call(""(()(())((())))""))
  end
end
"
HumanEval_7,nus_Latn,rb,"Filter ɛ la mi̱ la̱thkɛ rɛy matdä kä thärkdɛ kärɔa kɛ kui̱ kä tin te rɛy thärkdä min ca ŋun # >>> filter_by_substring.call([], ""a"")
# []
# >>> filter_by_substring.call([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
# [""abc"", ""bacd"", ""array""]
def filter_by_substring(strings, substring)
","def filter_by_substring(strings, substring)
  strings.select { |string| string.include?(substring) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_by_substring
    candidate = method(:filter_by_substring)
    assert_equal([], candidate.call([], ""john""))
    assert_equal([""xxx"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""))
    assert_equal([""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""))
    assert_equal([""grunt"", ""prune""], candidate.call([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""))
  end
end
"
HumanEval_8,nus_Latn,rb,"Ɛni̱ mi̱/thiɛl luɔt bɛ dhil pa̱a̱r kɛ 0 kɛnɛ ɣöö bi̱ min ca nööŋ ɛ mi̱/thiɛl luɔt bɛ dhil pa̱a̱r kɛ 1.Kɛ kui̱ intejeri̱ diaal tin ca ŋun, locni̱ nämbäri̱ tin ca mat kä matkɛ kɛnɛ min ca la̱t kä intejeri̱ diaal rɛy arrayä.# >>> sum_product.call([])
# [0, 1]
# >>> sum_product.call([1, 2, 3, 4])
# [10, 24]
def sum_product(numbers)
","def sum_product(numbers)
  sum = numbers.reduce(0, :+)
  product = numbers.reduce(1, :*)
  [sum, product]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_product
    candidate = method(:sum_product)
    assert_equal([0, 1], candidate.call([]))
    assert_equal([3, 1], candidate.call([1, 1, 1]))
    assert_equal([100, 0], candidate.call([100, 0]))
    assert_equal([15, 105], candidate.call([3, 5, 7]))
    assert_equal([10, 10], candidate.call([10]))
  end
end
"
HumanEval_9,nus_Latn,rb,"kɛ gua̱th mi̱ ci̱ rɔ̱ lot.Ɛni̱ mi̱ ca ŋun kä intɛrjiɛr array, la̱t kɛ jɛ ɛ la array duŋ rooliŋ ɛlɛmɛni̱ tin di̱tni̱kɛn tin ca jiek ɛ wä ni̱ kä min ca ŋun.# >>> rolling_max.call([1, 2, 3, 2, 3, 4, 2])
# [1, 2, 3, 3, 3, 4, 4]
def rolling_max(numbers)
","def rolling_max(numbers)
  max_so_far = numbers.first
  numbers.map do |num|
    max_so_far = [max_so_far, num].max
  end
end

# Example usage:
# puts rolling_max([1, 2, 3, 2, 3, 4, 2]).inspect","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rolling_max
    candidate = method(:rolling_max)
    assert_equal([], candidate.call([]))
    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))
    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))
    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))
  end
end
"
HumanEval_10,nus_Latn,rb,"- Ji̱n bi̱ yi̱k la̱th kä guutdɛ kɛ min ca la̱t ɛ la mi̱ ci̱ rɔ gɛɛr kä bi̱ ben ɛ la mi̱ ci̱ rɔ gɛɛr kä bi̱ ben ɛ la palindromic suffix.- Ji̱n bi postfix in bäär kä ci̱ duɔth ɛ la palindrɔm jek.Alɣo̱ri̱thi̱m cärɛ ɛ mi̱ thi̱a̱k: Ji̱n bi palindrɔm in tɔt jek mi̱ tokɛ kɛ mi̱ ca ŋun ɛ la i̱thti̱ri̱d.# >>> make_palindrome.call("""")
# """"
# >>> make_palindrome.call(""cat"")
# ""catac""
# >>> make_palindrome.call(""cata"")
# ""catac""
def make_palindrome(string)
","def make_palindrome(string)
  return string if string.empty?

  def is_palindrome?(s)
    s == s.reverse
  end

  (0...string.length).reverse_each do |i|
    if is_palindrome?(string[i..-1])
      return string + string[0...i].reverse
    end
  end

  string
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_make_palindrome
    candidate = method(:make_palindrome)
    assert_equal("""", candidate.call(""""))
    assert_equal(""x"", candidate.call(""x""))
    assert_equal(""xyzyx"", candidate.call(""xyz""))
    assert_equal(""xyx"", candidate.call(""xyx""))
    assert_equal(""jerryrrej"", candidate.call(""jerry""))
  end
end
"
HumanEval_11,nus_Latn,rb,"Lätni̱ bainäri̱ XOR kä tin ca la̱th kä bi̱ ben raar ɛ la ti̱ ca gɔ̱r ɛ la ti̱ ŋuan.Input ɛ rɛw ti̱ la̱tkɛ ɛ a kɛnɛ b tin tekɛ 1 kɛnɛ 0 kärɔ̱.# >>> string_xor.call(""010"", ""110"")
# ""100""
def string_xor(a, b)
","def string_xor(a, b)
  result = """"
  a.length.times do |i|
    result << (a[i] == b[i] ? ""0"" : ""1"")
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_xor
    candidate = method(:string_xor)
    assert_equal(""010010"", candidate.call(""111000"", ""101010""))
    assert_equal(""0"", candidate.call(""1"", ""1""))
    assert_equal(""0101"", candidate.call(""0101"", ""0000""))
  end
end
"
HumanEval_12,nus_Latn,rb,"Mi̱ ci̱ inpuut array te̱e̱ /thiɛl mi̱ te thi̱n, bi̱ yi̱o̱w ni̱ nil.Ɛni̱ mi̱ tekɛ ti̱ ŋuan, locni̱ min te kui̱c ɛ wä nhiam.# >>> longest.call([])
# nil
# >>> longest.call([""a"", ""b"", ""c""])
# ""a""
# >>> longest.call([""a"", ""bb"", ""ccc""])
# ""ccc""
def longest(strings)
","def longest(strings)
  return nil if strings.empty?
  strings.max_by(&:length)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_longest
    candidate = method(:longest)
    assert_equal(nil, candidate.call([]))
    assert_equal(""x"", candidate.call([""x"", ""y"", ""z""]))
    assert_equal(""zzzz"", candidate.call([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]))
  end
end
"
HumanEval_13,nus_Latn,rb,"Lätdɛ ɛ la min di̱tni̱ jɛn kä dääkdiɛn kä intejeri̱ rɛw a kɛnɛ b # >>> greatest_common_divisor.call(3, 5)
# 1
# >>> greatest_common_divisor.call(25, 15)
# 5
def greatest_common_divisor(a, b)
","def greatest_common_divisor(a, b)
  while b != 0
    a, b = b, a % b
  end
  a
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_greatest_common_divisor
    candidate = method(:greatest_common_divisor)
    assert_equal(1, candidate.call(3, 7))
    assert_equal(5, candidate.call(10, 15))
    assert_equal(7, candidate.call(49, 14))
    assert_equal(12, candidate.call(144, 60))
  end
end
"
HumanEval_14,nus_Latn,rb,"Lɔ̱a̱rkɛ ni̱ matrikni̱ diaal tin caa kuëŋ kä inpi̱o̱t thärk ɛ wɔ̱ ni̱ kä min tɔt ɛ wɔ̱ ni̱ kä min bäär.# >>> all_prefixes.call(""abc"")
# [""a"", ""ab"", ""abc""]
def all_prefixes(string)
","def all_prefixes(string)
  (1..string.length).map { |i| string[0, i] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_all_prefixes
    candidate = method(:all_prefixes)
    assert_equal([], candidate.call(""""))
    assert_equal([""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""], candidate.call(""asdfgh""))
    assert_equal([""W"", ""WW"", ""WWW""], candidate.call(""WWW""))
  end
end
"
HumanEval_15,nus_Latn,rb,"Lɔ̱a̱rkɛ ni̱ string mi̱ tekɛ nämbäri̱ ti̱ ca gɛɛr ɛ wä kä 0 ɛ wä kä n amääni̱ kɛndial.# >>> string_sequence.call(0)
# ""0""
# >>> string_sequence.call(5)
# ""0 1 2 3 4 5""
def string_sequence(n)
","def string_sequence(n)
  (0..n).to_a.join(' ')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_sequence
    candidate = method(:string_sequence)
    assert_equal(""0"", candidate.call(0))
    assert_equal(""0 1 2 3"", candidate.call(3))
    assert_equal(""0 1 2 3 4 5 6 7 8 9 10"", candidate.call(10))
  end
end
"
HumanEval_16,nus_Latn,rb,"Mi̱ ca thärkdɛ ŋun, görɛ jɛ i̱ ɛ pek in di̱tni̱jɛn (/ci̱kɛ bi̱ te thi̱n) kä bi̱ kɛn rɔ̱ mat thi̱n.# >>> count_distinct_characters.call(""xyzXYZ"")
# 3
# >>> count_distinct_characters.call(""Jerry"")
# 4
def count_distinct_characters(string)
","def count_distinct_characters(string)
  string.downcase.chars.uniq.count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_distinct_characters
    candidate = method(:count_distinct_characters)
    assert_equal(0, candidate.call(""""))
    assert_equal(5, candidate.call(""abcde""))
    assert_equal(5, candidate.call(""abcdecadeCADE""))
    assert_equal(1, candidate.call(""aaaaAAAAaaaa""))
    assert_equal(5, candidate.call(""Jerry jERRY JeRRRY""))
  end
end
"
HumanEval_17,nus_Latn,rb,"'Hajɛ' - quater note, bɛ thɛm kɛ gua̱a̱th mi̱ tɔt.'o Saji' - tha̱a̱ŋ no̱o̱tni̱, la duɔthkɛ ni̱ kä rɛw.'o' - no̱o̱ŋ kɛɛliw, bɛ ŋot kɛ mi̱ cɛ wɔ̱ ni̱ kä ŋuaan.Nɛmɛ ɛ jɛn ruac ëë wal:/ci̱kɛ jɔak.La̱tdu ɛ ɣöö bi̱ kɛ kuɛn kä bi̱ kɛ ku lɛ loc ni̱ nämbäri̱ tin ca mat kä bi̱ kɛ kuɛn ɛ la pek in bi̱ kɛ wɔ̱ kɛ jɛ kɛrɔ̱Input kä pa̱ŋciin ɛmɛ ɛ thi̱ŋ mi̱ cuŋ kɛ kui̱ no̱o̱ŋni̱ kɛ ca̱a̱p ASCII ti̱ rɛlrɔ̱.# >>> parse_music.call(""o o| .| o| o| .| .| .| .| o o"")
# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
def parse_music(music_string)
","def parse_music(music_string)
  # Split the input string into individual notes.
  notes = music_string.split

  # Map each note to its corresponding number of beats.
  notes.map do |note|
    case note
    when 'o'
      4
    when 'o|'
      2
    when '.|'
      1
    else
      0
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_parse_music
    candidate = method(:parse_music)
    assert_equal([], candidate.call(""""))
    assert_equal([4, 4, 4, 4], candidate.call(""o o o o""))
    assert_equal([1, 1, 1, 1], candidate.call("".| .| .| .|""))
    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(""o| o| .| .| o o o o""))
    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(""o| .| o| .| o o| o o|""))
  end
end
"
HumanEval_18,nus_Latn,rb,"Jiekɛ pek in derɛ jek ni̱ duɔ̱ɔ̱r mi̱ caa ŋun kä thäp-thäp in nhiam. Kuɛn ni̱ tin ci̱ rɔ̱ mat gua̱th kɛl.# >>> how_many_times.call("""", ""a"")
# 0
# >>> how_many_times.call(""aaa"", ""a"")
# 3
# >>> how_many_times.call(""aaaa"", ""aa"")
# 3
def how_many_times(string, substring)
","def how_many_times(string, substring)
  return 0 if substring.empty?
  count = 0
  i = 0
  while i <= string.length - substring.length
    if string[i, substring.length] == substring
      count += 1
    end
    i += 1
  end
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_how_many_times
    candidate = method(:how_many_times)
    assert_equal(0, candidate.call("""", ""x""))
    assert_equal(4, candidate.call(""xyxyxyx"", ""x""))
    assert_equal(4, candidate.call(""cacacacac"", ""cac""))
    assert_equal(1, candidate.call(""john doe"", ""john""))
  end
end
"
HumanEval_19,nus_Latn,rb,"Lätdɛ jɔk kä nämbäri̱ ti̱ ca riali̱kä kä tin tɔatni̱ ɛ wɔ̱ ni̱ kä tin di̱t Thurɛ tin lät kɛn kɛ 'dhɛrö', 'kɛl', ' rɛw', 'diɔ̱k', 'ŋuaan', 'li̱e̱c', 'dath', ' bärɔw', 'bärɔw' kɛnɛ 'ŋuɔ̱k'.Input ɛ mi̱ la thi̱rpëth-mi̱ ca da̱a̱k-kä-ciɛrɛn duŋ nämbäri̱ni̱ kä 'dhɛrö' ɛ wä kä 'näbɛ'.# >>> sort_numbers.call(""three one five"")
# ""one three five""
def sort_numbers(numbers)
","def sort_numbers(numbers)
  numeral_map = {
    'zero' => 0,
    'one' => 1,
    'two' => 2,
    'three' => 3,
    'four' => 4,
    'five' => 5,
    'six' => 6,
    'seven' => 7,
    'eight' => 8,
    'nine' => 9
  }

  number_words = numbers.split
  sorted_numbers = number_words.sort_by { |word| numeral_map[word] }
  sorted_numbers.join(' ')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_numbers
    candidate = method(:sort_numbers)
    assert_equal("""", candidate.call(""""))
    assert_equal(""three"", candidate.call(""three""))
    assert_equal(""three five nine"", candidate.call(""three five nine""))
    assert_equal(""zero four five seven eight nine"", candidate.call(""five zero four seven nine eight""))
    assert_equal(""zero one two three four five six"", candidate.call(""six five four three two one zero""))
  end
end
"
HumanEval_20,nus_Latn,rb,"Kä cu kɛn tin kɔ̱ŋ cu loc kɛ duɔ̱ɔ̱p mi̱ (mi̱ tɔt, mi̱ di̱i̱t).Ɛ rɛy nämbäri̱ ti̱ ca ŋun (ti̱ bäär ɛlɔ̱ŋ kä rɛw) kuany kɛnɛ locni̱ rɛw tin thia̱k kɛ kɛl # >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
# [2.0, 2.2]
# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
# [2.0, 2.0]
def find_closest_elements(numbers)
","def find_closest_elements(numbers)
  sorted_numbers = numbers.sort
  closest_pair = [sorted_numbers[0], sorted_numbers[1]]
  min_difference = (sorted_numbers[1] - sorted_numbers[0]).abs

  (1...(sorted_numbers.length - 1)).each do |i|
    current_difference = (sorted_numbers[i + 1] - sorted_numbers[i]).abs
    if current_difference < min_difference
      min_difference = current_difference
      closest_pair = [sorted_numbers[i], sorted_numbers[i + 1]]
    end
  end

  closest_pair
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_find_closest_elements
    candidate = method(:find_closest_elements)
    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))
    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))
    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))
    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))
    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))
  end
end
"
HumanEval_21,nus_Latn,rb,"kɛ ɣöö bi̱ nämbär in kuiy ni̱ jɛn kä bɛc bɛ ben ɛ 0 kɛnɛ ɣöö bi̱ nämbär in di̱t ni̱ jɛn bɛ ben ɛ 1 Mi̱ ca ŋun ɛ la mi̱ caa mat kä nämbäri̱ (kɛ ɛlɛmɛni̱ rɛw), la̱tdɛ kɛ li̱ni̱e̱e̱r tra̱ni̱thpɔrmi̱ kɛ jɛn matrɛy ɛmɔ, # >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])
# [0.0, 0.25, 0.5, 0.75, 1.0]
def rescale_to_unit(numbers)
","def rescale_to_unit(numbers)
  min = numbers.min
  max = numbers.max
  range = max - min
  return numbers.map { |num| (num - min) / range.to_f }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rescale_to_unit
    candidate = method(:rescale_to_unit)
    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))
    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))
    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))
    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))
    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))
  end
end
"
HumanEval_22,nus_Latn,rb,"Filter mi̱ ca ŋun ɛ la mi̱ ca mat ɛ rbthɔn mi̱ tekɛ luɔt mi̱ la intejeri̱ kärɔ̱ # >>> filter_integers.call([""a"", 3.14, 5])
# [5]
# >>> filter_integers.call([1, 2, 3, ""abc"", {}, []])
# [1, 2, 3]
def filter_integers(values)
","def filter_integers(values)
  values.select { |value| value.is_a?(Integer) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_integers
    candidate = method(:filter_integers)
    assert_equal([], candidate.call([]))
    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, ""adasd""]))
    assert_equal([3, 3, 3], candidate.call([3, ""c"", 3, 3, ""a"", ""b""]))
  end
end
"
HumanEval_23,nus_Latn,rb,"Lätdɛ kɛ pek in ca ŋun kä thärkɛn# >>> strlen.call("""")
# 0
# >>> strlen.call(""abc"")
# 3
def strlen(string)
","strlen = lambda do |string|
  string.length
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_strlen
    candidate = method(:strlen)
    assert_equal(0, candidate.call(""""))
    assert_equal(1, candidate.call(""x""))
    assert_equal(9, candidate.call(""asdasnakj""))
  end
end
"
HumanEval_24,nus_Latn,rb,"Kɛ kui̱ nämbäri̱ ti̱ ca ŋun, n, jiekɛ nämbär in di̱tni̱ jɛn min dääk n ɛ päär, mi̱ kuiy ni̱ jɛn kä n # >>> largest_divisor.call(15)
# 5
def largest_divisor(n)
","def largest_divisor(n)
  (n - 1).downto(1) do |i|
    return i if n % i == 0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_divisor
    candidate = method(:largest_divisor)
    assert_equal(1, candidate.call(3))
    assert_equal(1, candidate.call(7))
    assert_equal(5, candidate.call(10))
    assert_equal(50, candidate.call(100))
    assert_equal(7, candidate.call(49))
  end
end
"
HumanEval_25,nus_Latn,rb,"Input number ba päär kɛ min ca pith kä ŋɔak diaal tin ca la̱t Kɛn ŋɔak diaal tin la nyinkiɛn ba kɛ la̱th gua̱thkiɛn ti̱ ŋuan ti̱ päär kɛ pek in ci̱kɛ jɔɔc rɛy pi̱tɛri̱dhi̱öm.Lätdɛ kɛ prɔmithɛr kɛ ɣöö bɛ pek mi̱ tɔt kä min di̱i̱t kulɛ wä kä min tɔt.# >>> factorize.call(8)
# [2, 2, 2]
# >>> factorize.call(25)
# [5, 5]
# >>> factorize.call(70)
# [2, 5, 7]
def factorize(n)
","def factorize(n)
  factors = []
  divisor = 2
  while n > 1
    while n % divisor == 0
      factors << divisor
      n /= divisor
    end
    divisor += 1
  end
  factors
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_factorize
    candidate = method(:factorize)
    assert_equal([2], candidate.call(2))
    assert_equal([2, 2], candidate.call(4))
    assert_equal([2, 2, 2], candidate.call(8))
    assert_equal([3, 19], candidate.call(57))
    assert_equal([3, 3, 19, 19], candidate.call(3249))
    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))
    assert_equal([3, 19, 19, 19], candidate.call(20577))
    assert_equal([2, 3, 3], candidate.call(18))
  end
end
"
HumanEval_26,nus_Latn,rb,"Guic ni̱ min ca la̱t kɛ kui̱ kä tin ca la̱th piny.Ɛni̱ intɛrjiɛr array, wuɔcɛ ŋɔaani̱ diaal tin la tuɔɔk kä ti̱ ŋuan kä wɔ̱kɛ kä kɛɛl.# >>> remove_duplicates.call([1, 2, 3, 2, 4])
# [1, 3, 4]
def remove_duplicates(numbers)
","def remove_duplicates(numbers)
  numbers.select { |num| numbers.count(num) == 1 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_remove_duplicates
    candidate = method(:remove_duplicates)
    assert_equal([], candidate.call([]))
    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))
    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))
  end
end
"
HumanEval_27,nus_Latn,rb,"Kɛ ɣöö ba thärkdɛ min ca ŋun, bi̱ min ca gɔ̱r ɛ la min tɔt ɛ nyɔk kɛ ɣöö bi̱ min tɔt ɛ nyɔk kɛ ɣöö bi̱ min tɔt ɛ nyɔk kɛ ɣöö bi̱ min tɔt ɛ nyɔk kɛ ɣöö bi̱ min tɔt ɛ nyɔk kɛ luɔc.# >>> flip_case.call(""Hello"")
# ""hELLO""
def flip_case(string)
","def flip_case(string)
  string.swapcase
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_flip_case
    candidate = method(:flip_case)
    assert_equal("""", candidate.call(""""))
    assert_equal(""hELLO!"", candidate.call(""Hello!""))
    assert_equal(""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"", candidate.call(""These violent delights have violent ends""))
  end
end
"
HumanEval_28,nus_Latn,rb,"Mi̱ ca mat kä ca̱a̱p ti̱ ŋuan ɛ la mi̱ ci̱ rɔ̱ mat kä ci̱kɛ rɔ̱ mat kɛɛl# >>> concatenate.call([])
# """"
# >>> concatenate.call([""a"", ""b"", ""c""])
# ""abc""
def concatenate(strings)
","def concatenate(strings)
  strings.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_concatenate
    candidate = method(:concatenate)
    assert_equal("""", candidate.call([]))
    assert_equal(""xyz"", candidate.call([""x"", ""y"", ""z""]))
    assert_equal(""xyzwk"", candidate.call([""x"", ""y"", ""z"", ""w"", ""k""]))
  end
end
"
HumanEval_29,nus_Latn,rb,"Filter ɛ la mi̱ la̱thkɛ rɛy matdä kä bi̱ kɛn ɛ la̱th kä tin bi̱ rɔ̱ tok kɛ mi̱ ca ŋun ɛ la mi̱ ca ŋun.# >>> filter_by_prefix.call([], ""a"")
# []
# >>> filter_by_prefix.call([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
# [""abc"", ""array""]
def filter_by_prefix(strings, prefix)
","def filter_by_prefix(strings, prefix)
  strings.select { |string| string.start_with?(prefix) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_filter_by_prefix
    candidate = method(:filter_by_prefix)
    assert_equal([], candidate.call([], ""john""))
    assert_equal([""xxx"", ""xxxAAA"", ""xxx""], candidate.call([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""))
  end
end
"
HumanEval_30,nus_Latn,rb,"La locni̱ nämbäri̱ tin te kɛɛl kärɔ̱ rɛy arɛthi̱.# >>> get_positive.call([-1, 2, -4, 5, 6])
# [2, 5, 6]
# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# [5, 3, 2, 3, 9, 123, 1]
def get_positive(l)
","get_positive = lambda do |l|
  l.select { |num| num > 0 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_positive
    candidate = method(:get_positive)
    assert_equal([4, 5, 6], candidate.call([-1, -2, 4, 5, 6]))
    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))
    assert_equal([], candidate.call([-1, -2]))
    assert_equal([], candidate.call([]))
  end
end
"
HumanEval_31,nus_Latn,rb,"Lɔ̱nyɛ thuɔ̱k mi̱ ca ŋun ɛ nämbär ɛ la praam, kɛnɛ kac mi̱ dɔ̱ŋ.# >>> is_prime.call(6)
# false
# >>> is_prime.call(101)
# true
# >>> is_prime.call(11)
# true
# >>> is_prime.call(13441)
# true
# >>> is_prime.call(61)
# true
# >>> is_prime.call(4)
# false
# >>> is_prime.call(1)
# false
def is_prime(n)
","is_prime = lambda do |n|
  return false if n <= 1
  return true if n == 2
  return false if n.even?

  max_divisor = Math.sqrt(n).to_i
  (3..max_divisor).step(2).each do |i|
    return false if n % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_prime
    candidate = method(:is_prime)
    assert_equal(false, candidate.call(6))
    assert_equal(true, candidate.call(101))
    assert_equal(true, candidate.call(11))
    assert_equal(true, candidate.call(13441))
    assert_equal(true, candidate.call(61))
    assert_equal(false, candidate.call(4))
    assert_equal(false, candidate.call(1))
    assert_equal(true, candidate.call(5))
    assert_equal(true, candidate.call(11))
    assert_equal(true, candidate.call(17))
    assert_equal(false, candidate.call(85))
    assert_equal(false, candidate.call(77))
    assert_equal(false, candidate.call(255379))
  end
end
"
HumanEval_33,nus_Latn,rb,"Kä cua kɛ la̱th kä ta̱a̱ in ca lat ɛ la mi̱ ca mat kä indi̱i̱ci̱ni̱ tin ca mat kä l, duŋni̱ ɣöö cua kɛ da̱a̱k.l' päärɛ kɛ l kä indi̱ci̱ni̱ tin /ca de da̱a̱k ɛ diɔ̱k, kä bi̱ tin te thi̱n kä indi̱ci̱ni̱ tin de da̱a̱k ɛ diɔ̱k pa̱a̱r.La̱t ɛmɛ naŋɛ arrɛy l kä locɛ arrɛy l' mi̱ ce̱tkɛ jɛn i̱ # >>> sort_third.call([1, 2, 3])
# [1, 2, 3]
# >>> sort_third.call([5, 6, 3, 4, 8, 9, 2])
# [2, 6, 3, 4, 8, 9, 5]
def sort_third(l)
","def sort_third(l)
  divisible_by_three = l.each_with_index.select { |_, idx| idx % 3 == 0 }.map(&:first).sort
  l.each_with_index.map { |val, idx| idx % 3 == 0 ? divisible_by_three.shift : val }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_third
    candidate = method(:sort_third)
    assert_equal([2, 6, 3, 4, 8, 9, 5], candidate.call([5, 6, 3, 4, 8, 9, 2]))
    assert_equal([2, 8, 3, 4, 6, 9, 5], candidate.call([5, 8, 3, 4, 6, 9, 2]))
    assert_equal([2, 6, 9, 4, 8, 3, 5], candidate.call([5, 6, 9, 4, 8, 3, 2]))
    assert_equal([2, 6, 3, 4, 8, 9, 5, 1], candidate.call([5, 6, 3, 4, 8, 9, 2, 1]))
  end
end
"
HumanEval_34,nus_Latn,rb,"Lätdɛ kɛ ti̱ ca da̱a̱k ti̱ ca riali̱kä rɛy arɛtdä# >>> unique.call([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [0, 2, 3, 5, 9, 123]
def unique(l)
","def unique(l)
  l.uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_unique
    candidate = method(:unique)
    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5, 3, 5, 2, 3, 3, 9, 0, 123]))
  end
end
"
HumanEval_35,nus_Latn,rb,"Mi̱ ci̱kɛ luɔ̱c jɔk ɛ la ti̱ ŋuan ɛlɔ̱ŋ rɛy arɛthi̱.# >>> max_element.call([1, 2, 3])
# 3
# >>> max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# 123
def max_element(l)
","def max_element(l)
  l.max
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_max_element
    candidate = method(:max_element)
    assert_equal(3, candidate.call([1, 2, 3]))
    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]))
  end
end
"
HumanEval_36,nus_Latn,rb,"Lätdɛ kɛ pek gua̱th in ci̱ di̱jit 7 jɔɔc rɛy intejeri̱ tin kuiyni̱kɛn kä n tin de da̱a̱k ɛ 11 kiɛ 13.# >>> fizz_buzz.call(50)
# 0
# >>> fizz_buzz.call(78)
# 2
# >>> fizz_buzz.call(79)
# 3
def fizz_buzz(n)
","def fizz_buzz(n)
  count = 0
  (1...n).each do |i|
    if i % 11 == 0 || i % 13 == 0
      count += i.to_s.count('7')
    end
  end
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fizz_buzz
    candidate = method(:fizz_buzz)
    assert_equal(0, candidate.call(50))
    assert_equal(2, candidate.call(78))
    assert_equal(3, candidate.call(79))
    assert_equal(3, candidate.call(100))
    assert_equal(6, candidate.call(200))
    assert_equal(192, candidate.call(4000))
    assert_equal(639, candidate.call(10000))
    assert_equal(8026, candidate.call(100000))
  end
end
"
HumanEval_37,nus_Latn,rb,"Kä ɛni̱ mi̱ ca riali̱kä ɛ la mi̱ ca mat kä ɛni̱ mi̱ ca mat kä ɛni̱ mi̱ te kɛɛl kä ɛni̱ mi̱ te kɛɛl.l' päärɛ kɛ l kä indi̱ci̱ni̱ tin /ci̱ tɔt, niɛ gua̱a̱ mɔ bi̱ tin te thi̱n kä indi̱ci̱ni̱ tin /ci̱ tɔt päär La̱t ɛmɛ naŋɛ arrɛy l kä locɛ arrɛy l' mi̱ ce̱tkɛ jɛn i̱ # >>> sort_even.call([1, 2, 3])
# [1, 2, 3]
# >>> sort_even.call([5, 6, 3, 4])
# [3, 6, 5, 4]
def sort_even(l)
","def sort_even(l)
  even_indices = l.each_index.select { |i| i.even? }
  even_values = even_indices.map { |i| l[i] }.sort
  
  even_index = 0
  l.each_with_index.map do |value, index|
    if index.even?
      even_values[even_index].tap { even_index += 1 }
    else
      value
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_even
    candidate = method(:sort_even)
    assert_equal([1, 2, 3], candidate.call([1, 2, 3]))
    assert_equal([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert_equal([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10], candidate.call([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
  end
end
"
HumanEval_39,nus_Latn,rb,"prime_fib la̱tdɛ ɛ nämbär n-th min la nämbär Fi̱böna̱ci kä jɛn bä ɛ praam.# >>> prime_fib.call(1)
# 2
# >>> prime_fib.call(2)
# 3
# >>> prime_fib.call(3)
# 5
# >>> prime_fib.call(4)
# 13
# >>> prime_fib.call(5)
# 89
def prime_fib(n)
","def prime_fib(n)
  require 'prime'
  
  fibs = Enumerator.new do |y|
    a, b = 0, 1
    loop do
      a, b = b, a + b
      y << b
    end
  end
  
  prime_fibs = fibs.lazy.select { |fib| Prime.prime?(fib) }
  prime_fibs.first(n).last
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prime_fib
    candidate = method(:prime_fib)
    assert_equal(2, candidate.call(1))
    assert_equal(3, candidate.call(2))
    assert_equal(5, candidate.call(3))
    assert_equal(13, candidate.call(4))
    assert_equal(89, candidate.call(5))
    assert_equal(233, candidate.call(6))
    assert_equal(1597, candidate.call(7))
    assert_equal(28657, candidate.call(8))
    assert_equal(514229, candidate.call(9))
    assert_equal(433494437, candidate.call(10))
  end
end
"
HumanEval_40,nus_Latn,rb,"matkɛ ni̱ dhɛrö, kɛnɛ ɣöö baa kɛ matkɛ ni̱ kac.ɛ loc ɛ thuɔ̱k mi̱ tëëkɛ ɛlɛmɛni̱ da̱ŋ diɔ̱k ti̱ gööl rɛy arɛthi̱ min bi̱ triples_sum_to_zero naŋɛ intejeri̱ ti̱ ŋuan ɛ la tin la̱thkɛ thi̱n.# >>> triples_sum_to_zero.call([1, 3, 5, 0])
# false
# >>> triples_sum_to_zero.call([1, 3, -2, 1])
# true
# >>> triples_sum_to_zero.call([1, 2, 3, 7])
# false
# >>> triples_sum_to_zero.call([2, 4, -5, 3, 9, 7])
# true
# >>> triples_sum_to_zero.call([1])
# false
def triples_sum_to_zero(l)
","def triples_sum_to_zero(l)
  n = l.length
  (0...n-2).each do |i|
    ((i+1)...n-1).each do |j|
      ((j+1)...n).each do |k|
        return true if l[i] + l[j] + l[k] == 0
      end
    end
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triples_sum_to_zero
    candidate = method(:triples_sum_to_zero)
    assert_equal(false, candidate.call([1, 3, 5, 0]))
    assert_equal(false, candidate.call([1, 3, 5, -1]))
    assert_equal(true, candidate.call([1, 3, -2, 1]))
    assert_equal(false, candidate.call([1, 2, 3, 7]))
    assert_equal(false, candidate.call([1, 2, 5, 7]))
    assert_equal(true, candidate.call([2, 4, -5, 3, 9, 7]))
    assert_equal(false, candidate.call([1]))
    assert_equal(false, candidate.call([1, 3, 5, -100]))
    assert_equal(false, candidate.call([100, 3, 5, -100]))
  end
end
"
HumanEval_41,nus_Latn,rb,"Ɛn pa̱ŋciin ɛmɛ bɛ pek in ci̱ ben raar kä tin ci̱ rɔ̱ röm thi̱n nööŋ.kɛ duɔ̱ɔ̱p in ci̱ kɛ wɔ̱ kɛ jɛ, ce̱tkɛ mi̱ /ken kɛn rɔ̱ ku lɛ röm.Duŋdɛ ɣöö, kɛn thurbiɛli̱ tin la̱tkɛ ɛ naath bumɛ ɛlɔ̱ŋ, kä ɛ jɛn in jak kɛ kä jälkɛ.Mi̱ ci̱ thurbil mi̱ jäl caam kä cuec bɛ röm kɛ thurbil mi̱ jäl cuec kä caam.Kɛn thurbiɛli̱ diaal jälkɛ kɛ pek mi̱ päär. Kɛn thurbiɛli̱ da̱ŋ rɛw la kɛn a la̱tkɛ ɛ la ti̱ bi̱ rɔ̱ kuɛl.Ɛn ɣöö baa kɛ kulɛ woc ɛ la̱a̱t tin kɔ̱ŋ tin laa jäl kɛ kui̱i̱ ca̱ŋ ɛ la tin kɔ̱ŋ.Ɛn thurbil n bɛ wä caam kä bɛ wä cuëëc; kɛ jɛn gua̱a̱th ɛmɔ, bi̱ thurbilni̱ ti̱ ŋuan ti̱ gööl rɔ̱ cu tok.Ti̱e̱c duɔ̱p mi̱ cuŋ ɛ la duɔ̱ɔ̱p mi̱ /thiɛl pek.def car_race_collision(n)
","def car_race_collision(n)
  n
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_car_race_collision
    candidate = method(:car_race_collision)
    assert_equal(4, candidate.call(2))
    assert_equal(9, candidate.call(3))
    assert_equal(16, candidate.call(4))
    assert_equal(64, candidate.call(8))
    assert_equal(100, candidate.call(10))
  end
end
"
HumanEval_42,nus_Latn,rb,"Lɔ̱a̱rkɛ ɛri̱i̱th kɛ elɛmɛni̱ tin caa rëp kɛ 1.# >>> incr_list.call([1, 2, 3])
# [2, 3, 4]
# >>> incr_list.call([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [6, 4, 6, 3, 4, 4, 10, 1, 124]
def incr_list(l)
","def incr_list(l)
  l.map { |x| x + 1 }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_incr_list
    candidate = method(:incr_list)
    assert_equal([], candidate.call([]))
    assert_equal([4, 3, 2], candidate.call([3, 2, 1]))
    assert_equal([6, 3, 6, 3, 4, 4, 10, 1, 124], candidate.call([5, 2, 5, 2, 3, 3, 9, 0, 123]))
  end
end
"
HumanEval_43,nus_Latn,rb,"matkɛ ni̱ dhɛrö, kɛnɛ ɣöö baa kɛ matkɛ ni̱ kac.ɛ loc ɛ thuɔ̱k mi̱ tekɛ ɛlɛmɛni̱ rɛw ti̱ gööl rɛy arɛthi̱ min bi̱ pairs_sum_to_zero la̱thkɛ ɛ la mi̱ ca mat ɛ la intejeri̱ ti̱ ŋuan.# >>> pairs_sum_to_zero.call([1, 3, 5, 0])
# false
# >>> pairs_sum_to_zero.call([1, 3, -2, 1])
# false
# >>> pairs_sum_to_zero.call([1, 2, 3, 7])
# false
# >>> pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])
# true
# >>> pairs_sum_to_zero.call([1])
# false
def pairs_sum_to_zero(l)
","def pairs_sum_to_zero(l)
  num_set = l.to_set
  l.each do |num|
    return true if num != 0 && num_set.include?(-num)
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_pairs_sum_to_zero
    candidate = method(:pairs_sum_to_zero)
    assert_equal(false, candidate.call([1, 3, 5, 0]))
    assert_equal(false, candidate.call([1, 3, -2, 1]))
    assert_equal(false, candidate.call([1, 2, 3, 7]))
    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))
    assert_equal(false, candidate.call([1]))
    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 30]))
    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))
    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))
    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))
  end
end
"
HumanEval_44,nus_Latn,rb,"pek in te piny kä 10locni̱ min ca la̱t kɛ kui̱ kä min ca locni̱kɛ.Gɛɛr nämerikal ba̱th duŋ inpuɔɔ nämbärä x kɛ ba̱th.# >>> change_base.call(8, 3)
# ""22""
# >>> change_base.call(8, 2)
# ""1000""
# >>> change_base.call(7, 2)
# ""111""
def change_base(x, base)
","def change_base(x, base)
  return '0' if x == 0
  digits = []
  while x > 0
    digits << (x % base).to_s
    x /= base
  end
  digits.reverse.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_change_base
    candidate = method(:change_base)
    assert_equal(""22"", candidate.call(8, 3))
    assert_equal(""100"", candidate.call(9, 3))
    assert_equal(""11101010"", candidate.call(234, 2))
    assert_equal(""10000"", candidate.call(16, 2))
    assert_equal(""1000"", candidate.call(8, 2))
    assert_equal(""111"", candidate.call(7, 2))
    assert_equal(""2"", candidate.call(2, 3))
    assert_equal(""3"", candidate.call(3, 4))
    assert_equal(""4"", candidate.call(4, 5))
    assert_equal(""5"", candidate.call(5, 6))
    assert_equal(""6"", candidate.call(6, 7))
    assert_equal(""7"", candidate.call(7, 8))
  end
end
"
HumanEval_45,nus_Latn,rb,"Mi̱ ca ŋun ɛ la bäär gua̱a̱th in bi̱ ben kɛ jɔk kɛnɛ gua̱a̱th in bi̱ locni̱kɛ rɔ̱ thi̱n kɛ kui̱ kä tin ci̱ rɔ̱ loc.# >>> triangle_area.call(5, 3)
# 7.5
def triangle_area(a, h)
","def triangle_area(a, h)
  (a * h) / 2.0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triangle_area
    candidate = method(:triangle_area)
    assert_equal(7.5, candidate.call(5, 3))
    assert_equal(2.0, candidate.call(2, 2))
    assert_equal(40.0, candidate.call(10, 8))
  end
end
"
HumanEval_46,nus_Latn,rb,"Gɔ̱r pa̱ŋciin mi̱ bi̱ lät kɛ ɣöö ba pek ɛ la n-th kä ɛlɛmɛni̱ kä fib4 nämbäri̱ tin guɔ̱ɔ̱rkɛ rɔ̱. /Cu rɔ̱ nyɔk kɛ lätni̱.fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).fib4(3) -> 0 fib4(2) -> 2 fib4(1) -> 0 fib4(0) -> 0 Kä Fib4 nämbär thekuɛnthi̱ ɛ thekuɛnthi̱ mi̱ cäät kɛ Fibbonacci thekuɛnthi̱ min ca lat i̱:# >>> fib4.call(5)
# 4
# >>> fib4.call(6)
# 8
# >>> fib4.call(7)
# 14
def fib4(n)
","def fib4(n)
  return 0 if n == 0 || n == 1 || n == 3
  return 2 if n == 2

  fib4_seq = [0, 0, 2, 0]
  (4..n).each do |i|
    fib4_seq[i] = fib4_seq[i-1] + fib4_seq[i-2] + fib4_seq[i-3] + fib4_seq[i-4]
  end
  fib4_seq[n]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fib4
    candidate = method(:fib4)
    assert_equal(4, candidate.call(5))
    assert_equal(28, candidate.call(8))
    assert_equal(104, candidate.call(10))
    assert_equal(386, candidate.call(12))
  end
end
"
HumanEval_47,nus_Latn,rb,"Lɔ̱a̱rkɛ median kä elɛmɛni̱ rɛy arɛthi̱ l. # >>> median.call([3, 1, 2, 4, 5])
# 3
# >>> median.call([-10, 4, 6, 1000, 10, 20])
# 15.0
def median(l)
","def median(l)
  sorted = l.sort
  len = sorted.length
  if len.odd?
    sorted[len / 2]
  else
    (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_median
    candidate = method(:median)
    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))
    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))
    assert_equal(5, candidate.call([5]))
    assert_equal(5.5, candidate.call([6, 5]))
    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))
  end
end
"
HumanEval_48,nus_Latn,rb,"Jakɛ kä ba ŋa̱c mi̱ ca ŋun ɛ la pa̱li̱ndrɔm# >>> is_palindrome.call("""")
# true
# >>> is_palindrome.call(""aba"")
# true
# >>> is_palindrome.call(""aaaaa"")
# true
# >>> is_palindrome.call(""zbcd"")
# false
def is_palindrome(text)
","is_palindrome = lambda do |text|
  text == text.reverse
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_palindrome
    candidate = method(:is_palindrome)
    assert_equal(true, candidate.call(""""))
    assert_equal(true, candidate.call(""aba""))
    assert_equal(true, candidate.call(""aaaaa""))
    assert_equal(false, candidate.call(""zbcd""))
    assert_equal(true, candidate.call(""xywyx""))
    assert_equal(false, candidate.call(""xywyz""))
    assert_equal(false, candidate.call(""xywzx""))
  end
end
"
HumanEval_49,nus_Latn,rb,"Lɔ̱a̱ 2^n modulo p (luɔ̱c ni̱ nämerikni̱).# >>> modp.call(3, 5)
# 3
# >>> modp.call(1101, 101)
# 2
# >>> modp.call(0, 101)
# 1
# >>> modp.call(3, 11)
# 8
# >>> modp.call(100, 101)
# 1
def modp(n, p)
","def modp(n, p)
  return 1 if p == 1
  2.pow(n, p)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_modp
    candidate = method(:modp)
    assert_equal(3, candidate.call(3, 5))
    assert_equal(2, candidate.call(1101, 101))
    assert_equal(1, candidate.call(0, 101))
    assert_equal(8, candidate.call(3, 11))
    assert_equal(1, candidate.call(100, 101))
    assert_equal(4, candidate.call(30, 5))
    assert_equal(3, candidate.call(31, 5))
  end
end
"
HumanEval_51,nus_Latn,rb,"remove_vowels ɛ mi̱ la̱t mi̱ naŋkɛ ni̱ kɛn i̱thtirŋ kɛnɛ ɣöö bɛ loc ni̱ kɛn i̱thtirŋ mi̱ thiɛl jɔw.# >>> remove_vowels.call("""")
# """"
# >>> remove_vowels.call(""abcdef"")
# ""bcdf""
# >>> remove_vowels.call(""aaaaa"")
# """"
# >>> remove_vowels.call(""aaBAA"")
# ""B""
# >>> remove_vowels.call(""zbcd"")
# ""zbcd""
def remove_vowels(text)
","def remove_vowels(text)
  text.delete('aeiouAEIOU')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_remove_vowels
    candidate = method(:remove_vowels)
    assert_equal("""", candidate.call(""""))
    assert_equal(""bcdf
ghjklm"", candidate.call(""abcdef
ghijklm""))
    assert_equal(""fdcb"", candidate.call(""fedcba""))
    assert_equal("""", candidate.call(""eeeee""))
    assert_equal(""cB"", candidate.call(""acBAA""))
    assert_equal(""cB"", candidate.call(""EcBOO""))
    assert_equal(""ybcd"", candidate.call(""ybcd""))
  end
end
"
HumanEval_52,nus_Latn,rb,"Mi̱ ci̱ nämbäri̱ diaal rɛy arɛtdä l ɛ piny kä pek in ca ŋun t, bɛ loc ni̱ thuɔ̱k.# >>> below_threshold.call([1, 2, 4, 10], 100)
# true
# >>> below_threshold.call([1, 20, 4, 10], 5)
# false
def below_threshold(l, t)
","def below_threshold(l, t)
  l.all? { |num| num < t }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_below_threshold
    candidate = method(:below_threshold)
    assert_equal(true, candidate.call([1, 2, 4, 10], 100))
    assert_equal(false, candidate.call([1, 20, 4, 10], 5))
    assert_equal(true, candidate.call([1, 20, 4, 10], 21))
    assert_equal(true, candidate.call([1, 20, 4, 10], 22))
    assert_equal(true, candidate.call([1, 8, 4, 10], 11))
    assert_equal(false, candidate.call([1, 8, 4, 10], 10))
  end
end
"
HumanEval_53,nus_Latn,rb,"Mat nämbäri̱ rɛw x kɛnɛ y # >>> add.call(2, 3)
# 5
# >>> add.call(5, 7)
# 12
def add(x, y)
","add = ->(x, y) { x + y }","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add
    candidate = method(:add)
    assert_equal(1, candidate.call(0, 1))
    assert_equal(1, candidate.call(1, 0))
    assert_equal(5, candidate.call(2, 3))
    assert_equal(12, candidate.call(5, 7))
    assert_equal(12, candidate.call(7, 5))
  end
end
"
HumanEval_54,nus_Latn,rb,"Guic mi̱ kɛn rie̱e̱t da̱ŋ rɛw tekɛ kɛ luɔt mi̱ cäät.# >>> same_chars.call(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
# true
# >>> same_chars.call(""abcd"", ""dddddddabc"")
# true
# >>> same_chars.call(""dddddddabc"", ""abcd"")
# true
# >>> same_chars.call(""eabcd"", ""dddddddabc"")
# false
# >>> same_chars.call(""abcd"", ""dddddddabce"")
# false
# >>> same_chars.call(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
# false
def same_chars(s0, s1)
","def same_chars(s0, s1)
  s0.chars.uniq.all? { |char| s1.include?(char) } &&
  s1.chars.uniq.all? { |char| s0.include?(char) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_same_chars
    candidate = method(:same_chars)
    assert_equal(true, candidate.call(""eabcdzzzz"", ""dddzzzzzzzddeddabc""))
    assert_equal(true, candidate.call(""abcd"", ""dddddddabc""))
    assert_equal(true, candidate.call(""dddddddabc"", ""abcd""))
    assert_equal(false, candidate.call(""eabcd"", ""dddddddabc""))
    assert_equal(false, candidate.call(""abcd"", ""dddddddabcf""))
    assert_equal(false, candidate.call(""eabcdzzzz"", ""dddzzzzzzzddddabc""))
    assert_equal(false, candidate.call(""aabb"", ""aaccc""))
  end
end
"
HumanEval_55,nus_Latn,rb,"Lɔ̱a̱ni̱ nämbär n-th Pi̱i̱bɔnaki̱.# >>> fib.call(10)
# 55
# >>> fib.call(1)
# 1
# >>> fib.call(8)
# 21
def fib(n)
","def fib(n)
  return n if n <= 1
  fib(n - 1) + fib(n - 2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fib
    candidate = method(:fib)
    assert_equal(55, candidate.call(10))
    assert_equal(1, candidate.call(1))
    assert_equal(21, candidate.call(8))
    assert_equal(89, candidate.call(11))
    assert_equal(144, candidate.call(12))
  end
end
"
HumanEval_56,nus_Latn,rb,"loc ni̱ thuɔ̱k mi̱ ci̱kɛ rɔ̱ tok kɛ mi̱ ci̱kɛ rɔ̱ tok kɛ mi̱ ci̱kɛ rɔ̱ tok kɛ mi̱ ci̱kɛ rɔ̱ tok.Kɛn parɛketni̱ ɛ kɛn ci̱o̱k kä ""<"" kɛnɛ "">"". # >>> correct_bracketing.call(""<"")
# false
# >>> correct_bracketing.call(""<>"")
# true
# >>> correct_bracketing.call(""<<><>>"")
# true
# >>> correct_bracketing.call(""><<>"")
# false
def correct_bracketing(brackets)
","def correct_bracketing(brackets)
  balance = 0
  brackets.chars.each do |char|
    if char == '<'
      balance += 1
    elsif char == '>'
      balance -= 1
    end
    return false if balance < 0
  end
  balance == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_correct_bracketing
    candidate = method(:correct_bracketing)
    assert_equal(true, candidate.call(""<>""))
    assert_equal(true, candidate.call(""<<><>>""))
    assert_equal(true, candidate.call(""<><><<><>><>""))
    assert_equal(true, candidate.call(""<><><<<><><>><>><<><><<>>>""))
    assert_equal(false, candidate.call(""<<<><>>>>""))
    assert_equal(false, candidate.call(""><<>""))
    assert_equal(false, candidate.call(""<""))
    assert_equal(false, candidate.call(""<<<<""))
    assert_equal(false, candidate.call("">""))
    assert_equal(false, candidate.call(""<<>""))
    assert_equal(false, candidate.call(""<><><<><>><>><<>""))
    assert_equal(false, candidate.call(""<><><<><>><>>><>""))
  end
end
"
HumanEval_57,nus_Latn,rb,"Lɔ̱a̱rkɛ thuɔ̱k ɛ kɛn elɛmɛni̱ nyin arrɛy kɛn kɛ ti̱ ŋuan kiɛ kuiydiɛn.# >>> monotonic.call([1, 2, 4, 20])
# true
# >>> monotonic.call([1, 20, 4, 10])
# false
# >>> monotonic.call([4, 1, 0, -10])
# true
def monotonic(l)
","def monotonic(l)
  increasing = true
  decreasing = true

  (0...l.length - 1).each do |i|
    if l[i] < l[i + 1]
      decreasing = false
    elsif l[i] > l[i + 1]
      increasing = false
    end
  end

  increasing || decreasing
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_monotonic
    candidate = method(:monotonic)
    assert_equal(true, candidate.call([1, 2, 4, 10]))
    assert_equal(true, candidate.call([1, 2, 4, 20]))
    assert_equal(false, candidate.call([1, 20, 4, 10]))
    assert_equal(true, candidate.call([4, 1, 0, -10]))
    assert_equal(true, candidate.call([4, 1, 1, 0]))
    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))
    assert_equal(true, candidate.call([9, 9, 9, 9]))
  end
end
"
HumanEval_58,nus_Latn,rb,"Lɔ̱a̱rkɛ ni̱ dääk kä tin ca da̱a̱k kä ca mat kä ɛlɛmɛni̱ rɛw.# >>> common.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
# [1, 5, 653]
# >>> common.call([5, 3, 2, 8], [3, 2])
# [2, 3]
def common(l1, l2)
","def common(l1, l2)
  (l1 & l2).uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_common
    candidate = method(:common)
    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))
    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))
    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))
    assert_equal([], candidate.call([4, 3, 2, 8], []))
  end
end
"
HumanEval_59,nus_Latn,rb,"Läthni̱ prämik paktɔr in di̱tni̱ jɛn kä n. Ɣɔɔri̱ n > 1 kä /ci̱ɛɛ prämik. # >>> largest_prime_factor.call(13195)
# 29
# >>> largest_prime_factor.call(2048)
# 2
def largest_prime_factor(n)
","def largest_prime_factor(n)
  factor = 2
  while factor * factor <= n
    if n % factor == 0
      n /= factor
    else
      factor += 1
    end
  end
  n
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_prime_factor
    candidate = method(:largest_prime_factor)
    assert_equal(5, candidate.call(15))
    assert_equal(3, candidate.call(27))
    assert_equal(7, candidate.call(63))
    assert_equal(11, candidate.call(330))
    assert_equal(29, candidate.call(13195))
  end
end
"
HumanEval_60,nus_Latn,rb,"sum_to_n ɛ pa̱ŋcin mi̱ la mat nämbäri̱ kä 1 ɛ wä kä n.# >>> sum_to_n.call(30)
# 465
# >>> sum_to_n.call(100)
# 5050
# >>> sum_to_n.call(5)
# 15
# >>> sum_to_n.call(10)
# 55
# >>> sum_to_n.call(1)
# 1
def sum_to_n(n)
","def sum_to_n(n)
  (1..n).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_to_n
    candidate = method(:sum_to_n)
    assert_equal(1, candidate.call(1))
    assert_equal(21, candidate.call(6))
    assert_equal(66, candidate.call(11))
    assert_equal(465, candidate.call(30))
    assert_equal(5050, candidate.call(100))
  end
end
"
HumanEval_61,nus_Latn,rb,"loc ni̱ thuɔ̱k mi̱ ci̱kɛ rɔ̱ tok kɛ mi̱ ci̱kɛ rɔ̱ tok kɛ mi̱ ci̱kɛ rɔ̱ tok kɛ mi̱ ci̱kɛ rɔ̱ tok.ɛ mi̱ la la̱t kɛ ""("" kɛnɛ "")"".# >>> correct_bracketing.call(""("")
# false
# >>> correct_bracketing.call(""()"")
# true
# >>> correct_bracketing.call(""(()())"")
# true
# >>> correct_bracketing.call("")(()"")
# false
def correct_bracketing(brackets)
","def correct_bracketing(brackets)
  balance = 0
  brackets.each_char do |char|
    if char == '('
      balance += 1
    elsif char == ')'
      balance -= 1
    end
    return false if balance < 0
  end
  balance == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_correct_bracketing
    candidate = method(:correct_bracketing)
    assert_equal(true, candidate.call(""()""))
    assert_equal(true, candidate.call(""(()())""))
    assert_equal(true, candidate.call(""()()(()())()""))
    assert_equal(true, candidate.call(""()()((()()())())(()()(()))""))
    assert_equal(false, candidate.call(""((()())))""))
    assert_equal(false, candidate.call("")(()""))
    assert_equal(false, candidate.call(""(""))
    assert_equal(false, candidate.call(""((((""))
    assert_equal(false, candidate.call("")""))
    assert_equal(false, candidate.call(""(()""))
    assert_equal(false, candidate.call(""()()(()())())(()""))
    assert_equal(false, candidate.call(""()()(()())()))()""))
  end
end
"
HumanEval_62,nus_Latn,rb,"Lätdɛ kɛ deri̱ba̱t duŋ pöli̱nömial ɛmɛ rɛy ta̱a̱dɛ mi̱ päär.xs[0] + xs[1] * x + xs[2] * x^2 + .... Xs cuŋkɛ ɛ la nyin pöli̱nömial.# >>> derivative.call([3, 1, 2, 4, 5])
# [1, 4, 12, 20]
# >>> derivative.call([1, 2, 3])
# [2, 6]
def derivative(xs)
","def derivative(xs)
  return [] if xs.length < 2
  xs.each_with_index.map { |coef, index| coef * index }[1..-1]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_derivative
    candidate = method(:derivative)
    assert_equal([1, 4, 12, 20], candidate.call([3, 1, 2, 4, 5]))
    assert_equal([2, 6], candidate.call([1, 2, 3]))
    assert_equal([2, 2], candidate.call([3, 2, 1]))
    assert_equal([2, 2, 0, 16], candidate.call([3, 2, 1, 0, 4]))
    assert_equal([], candidate.call([1]))
  end
end
"
HumanEval_63,nus_Latn,rb,"Gɔ̱r pa̱ŋciin mi̱ bi̱ lät kɛ ɣöö ba pek ɛ la n-th kä ɛlɛmɛni̱ kä fib-bi̱d nämbäri̱ tin guɔ̱lkɛ rɔ̱.fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). fib fib ((2) == 1 fib fib ((1) == 0 fib fib ((0) == 0 Kä FibFib nämbär thekuɛnthi̱ ɛ thekuɛnthi̱ mi̱ cäät kɛ Fibbonacci thekuɛnthi̱ min ca lat i̱ ɛ jɛn i̱nɔ:# >>> fibfib.call(1)
# 0
# >>> fibfib.call(5)
# 4
# >>> fibfib.call(8)
# 24
def fibfib(n)
","def fibfib(n)
  return 0 if n == 0 || n == 1
  return 1 if n == 2

  a, b, c = 0, 0, 1
  (3..n).each do
    a, b, c = b, c, a + b + c
  end
  c
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fibfib
    candidate = method(:fibfib)
    assert_equal(1, candidate.call(2))
    assert_equal(0, candidate.call(1))
    assert_equal(4, candidate.call(5))
    assert_equal(24, candidate.call(8))
    assert_equal(81, candidate.call(10))
    assert_equal(274, candidate.call(12))
    assert_equal(927, candidate.call(14))
  end
end
"
HumanEval_64,nus_Latn,rb,"Cäät: Vowel, duŋdɛ ɣöö jɛn kärɔa mi̱ jɛn te rɛy guutdä ri̱e̱e̱t in ca ŋun.Kɛn jɔw-kɛl tin caa la̱t ɛ mɛ ɛ 'a', 'e', 'i', 'o', 'u'.Ɛn riet ɛ mɔ ɛ mi̱ caa kuëŋ kä bɛ pek in tä kɛ jɔw rɛy rie̱tdä kulɛ loc.Gɔ̱rkɛ pa̱ŋciin mi̱ cɔali̱ vowels_count mi̱ naŋɛ thärk mi̱ cuŋkɛ ɛ la # >>> vowels_count.call(""abcde"")
# 2
# >>> vowels_count.call(""ACEDY"")
# 3
def vowels_count(s)
","def vowels_count(s)
  vowels = ['a', 'e', 'i', 'o', 'u']
  count = 0
  
  s.chars.each_with_index do |char, index|
    if vowels.include?(char.downcase)
      count += 1
    elsif char.downcase == 'y' && index == s.length - 1
      count += 1
    end
  end
  
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_vowels_count
    candidate = method(:vowels_count)
    assert_equal(2, candidate.call(""abcde""))
    assert_equal(3, candidate.call(""Alone""))
    assert_equal(2, candidate.call(""key""))
    assert_equal(1, candidate.call(""bye""))
    assert_equal(2, candidate.call(""keY""))
    assert_equal(1, candidate.call(""bYe""))
    assert_equal(3, candidate.call(""ACEDY""))
  end
end
"
HumanEval_65,nus_Latn,rb,"Mi̱ ci̱ shift > nämbär di̱ji̱tni̱, bi̱ di̱ji̱tni̱ loc jɔk.kä luɔ̱c min ca jiek ɛ la mi̱ la ri̱e̱t.Ciɛrkä min ca mat kä intɛrjɛr x,ciɛrkä min ca mat kä cuŋ ɛ wä kui̱c ɛ wä kui̱c# >>> circular_shift.call(12, 1)
# ""21""
# >>> circular_shift.call(12, 2)
# ""12""
def circular_shift(x, shift)
","def circular_shift(x, shift)
  digits = x.to_s.chars
  num_digits = digits.length

  if shift > num_digits
    return digits.reverse.join
  else
    shift = shift % num_digits
    shifted_digits = digits.rotate(-shift)
    return shifted_digits.join
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_circular_shift
    candidate = method(:circular_shift)
    assert_equal(""001"", candidate.call(100, 2))
    assert_equal(""12"", candidate.call(12, 2))
    assert_equal(""79"", candidate.call(97, 8))
    assert_equal(""21"", candidate.call(12, 1))
    assert_equal(""11"", candidate.call(11, 101))
  end
end
"
HumanEval_66,nus_Latn,rb,"Cäätni̱: Kɔɔdni̱ ASCII.Gɔ̱r pa̱ŋciin mi̱ naŋkɛ thärk ɛ la inpuut kä locni̱ mat kä tin di̱t kärɔ̱' La̱t # >>> digitSum.call("""")
# 0
# >>> digitSum.call(""abAB"")
# 131
# >>> digitSum.call(""abcCd"")
# 67
# >>> digitSum.call(""helloE"")
# 69
# >>> digitSum.call(""woArBld"")
# 131
# >>> digitSum.call(""aAaaaXa"")
# 153
def digitSum(s)
","def digitSum(s)
  s.chars.select { |char| char =~ /[A-Z]/ }.map(&:ord).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_digitSum
    candidate = method(:digitSum)
    assert_equal(0, candidate.call(""""))
    assert_equal(131, candidate.call(""abAB""))
    assert_equal(67, candidate.call(""abcCd""))
    assert_equal(69, candidate.call(""helloE""))
    assert_equal(131, candidate.call(""woArBld""))
    assert_equal(153, candidate.call(""aAaaaXa""))
    assert_equal(151, candidate.call("" How are yOu?""))
    assert_equal(327, candidate.call(""You arE Very Smart""))
  end
end
"
HumanEval_67,nus_Latn,rb,"kɛ kui̱ kä min ca lat: rɛy tharbët (basket) la̱tdɛ nämbär kä dɛy Mango rɛy tharbët.kä yua̱a̱r kɛnɛ tuɔm kɛnɛ intejeri̱ tin cuŋkɛ kɛ pek in matkɛ kä dɛy Kɛn gua̱th tin laa kuɛɛ laa täth kɛ dɛy, laa täth kɛ dɛy, laa täth kɛ dɛy, laa täth kɛ dɛy, laa täth kɛ dɛy, laa täth kɛ dɛy, laa täth kɛ dɛy.tin caa da̱a̱k rɛy thärkä mi̱ tä dɛw thi̱nRɛy la̱t ɛmɛ, ba ji̱ ka̱m tha̱a̱ŋ thurɛkä min bi̱ nämbär duŋ tuɔp kɛnɛ aplan nyoth.# >>> fruit_distribution.call(""5 apples and 6 oranges"", 19)
# 8
# >>> fruit_distribution.call(""0 apples and 1 oranges"", 3)
# 2
# >>> fruit_distribution.call(""2 apples and 3 oranges"", 100)
# 95
# >>> fruit_distribution.call(""100 apples and 1 oranges"", 120)
# 19
def fruit_distribution(s, n)
","def fruit_distribution(s, n)
  numbers = s.scan(/\d+/).map(&:to_i)
  apples = numbers[0]
  oranges = numbers[1]
  total_fruits = n
  mangos = total_fruits - (apples + oranges)
  mangos
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fruit_distribution
    candidate = method(:fruit_distribution)
    assert_equal(8, candidate.call(""5 apples and 6 oranges"", 19))
    assert_equal(10, candidate.call(""5 apples and 6 oranges"", 21))
    assert_equal(2, candidate.call(""0 apples and 1 oranges"", 3))
    assert_equal(2, candidate.call(""1 apples and 0 oranges"", 3))
    assert_equal(95, candidate.call(""2 apples and 3 oranges"", 100))
    assert_equal(0, candidate.call(""2 apples and 3 oranges"", 5))
    assert_equal(19, candidate.call(""1 apples and 100 oranges"", 120))
  end
end
"
HumanEval_68,nus_Latn,rb,"Cäät 1: Mi̱ thiɛlɛ mi̱ ca mat ɛ päär kiɛ mi̱ ca mat ɛ la mi̱ thiɛl luɔt, locni̱ [].Kä no̱o̱p in ca jiek ba yi̱k loc rɛy arrɛy, [tha̱mälthti̱_ba̱li̱ö, ɛ indi̱dhɛthdɛ], Mi̱ ca nändöni̱ ti̱ ŋuan jiek ti̱ tekɛ pe̱k mi̱ tɔt mi̱ päär, loc ni̱ nändö min te indi̱th in tɔt ni̱ jɛn.Kä nɔ̱ɔ̱l in ca ji̱ek ba yi̱k ɛ nɔ̱ɔ̱l mi̱ tɔt mi̱ te pek mi̱ tɔt mi̱ päär.la̱tdu ɛ ɣöö bi̱ ji̱n kɛl kä nyin duëli̱ kä bi̱ kɛ loc jɔk.""Mi̱ ca ŋun ɛ la arrɛy mi̱ cuŋ kɛ kui̱ karä jiath in tekɛ nämbäri̱ ti̱ /ci̱ tɔ̱ a nämbäri̱ ti̱ rɛlrɔ̱ # >>> pluck.call([4, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 2:
# >>> pluck.call([1, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 3:
# >>> pluck.call([])
# []
# Example 4:
# >>> pluck.call([5, 0, 3, 0, 4, 2])
# [0, 1]
# Explanation: 0 is the smallest value, but  there are two zeros,
# so we will choose the first zero, which has the smallest index.
# Constraints:
# * 1 <= nodes.length <= 10000
# * 0 <= node.value
def pluck(arr)
","def pluck(arr)
  smallest_even = nil
  smallest_index = nil
  
  arr.each_with_index do |value, index|
    if value.even?
      if smallest_even.nil? || value < smallest_even
        smallest_even = value
        smallest_index = index
      end
    end
  end

  smallest_even.nil? ? [] : [smallest_even, smallest_index]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_pluck
    candidate = method(:pluck)
    assert_equal([2, 1], candidate.call([4, 2, 3]))
    assert_equal([2, 1], candidate.call([1, 2, 3]))
    assert_equal([], candidate.call([]))
    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))
    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))
    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))
    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))
    assert_equal([], candidate.call([7, 9, 7, 1]))
  end
end
"
HumanEval_69,nus_Latn,rb,"Cäätni̱: Mi̱ thiɛlɛ mi̱ ce̱tkɛ ba̱li̱öm ɛmɔ, bɛ loc ɛ la -1.Kä pek in te intejiɛr thi̱n ɛ pek in ci̱ jɔɔc rɛy arrɛy.ɛ dhɛrö, kɛnɛ ɣöö jɛn tëkɛ prekuɛnthi̱ min di̱tni̱ jɛn kiɛ päär kɛ min ca ŋun ɛ intejeri̱ kärɔa.Ji̱n ca ji̱ ka̱m matrik mi̱ /ci̱ puɔthtip intejeri̱ bi̱ lɛ wɔ̱ liny ɛ la intejeri̱ tin di̱t ni̱ kɛn kä # >>> search.call([4, 1, 2, 2, 3, 1])
# 2
# >>> search.call([1, 2, 2, 3, 3, 3, 4, 4, 4])
# 3
# >>> search.call([5, 5, 4, 4, 4])
# -1
def search(lst)
","def search(lst)
  freq_hash = lst.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }
  valid_numbers = freq_hash.select { |num, freq| freq >= num }.keys
  valid_numbers.empty? ? -1 : valid_numbers.max
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_search
    candidate = method(:search)
    assert_equal(1, candidate.call([5, 5, 5, 5, 1]))
    assert_equal(4, candidate.call([4, 1, 4, 1, 4, 4]))
    assert_equal(-1, candidate.call([3, 3]))
    assert_equal(8, candidate.call([8, 8, 8, 8, 8, 8, 8, 8]))
    assert_equal(2, candidate.call([2, 3, 3, 2, 2]))
    assert_equal(1, candidate.call([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]))
    assert_equal(2, candidate.call([3, 2, 8, 2]))
    assert_equal(1, candidate.call([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]))
    assert_equal(-1, candidate.call([8, 8, 3, 6, 5, 6, 4]))
    assert_equal(1, candidate.call([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]))
    assert_equal(1, candidate.call([1, 9, 10, 1, 3]))
    assert_equal(5, candidate.call([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]))
    assert_equal(1, candidate.call([1]))
    assert_equal(4, candidate.call([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]))
    assert_equal(2, candidate.call([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]))
    assert_equal(1, candidate.call([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]))
    assert_equal(4, candidate.call([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]))
    assert_equal(4, candidate.call([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]))
    assert_equal(2, candidate.call([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]))
    assert_equal(-1, candidate.call([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]))
    assert_equal(-1, candidate.call([10]))
    assert_equal(2, candidate.call([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]))
    assert_equal(1, candidate.call([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]))
    assert_equal(1, candidate.call([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]))
    assert_equal(-1, candidate.call([3, 10, 10, 9, 2]))
  end
end
"
HumanEval_70,nus_Latn,rb,"Cäätni̱: Kä min di̱tni̱ jɛn kä intɛrjiɛri̱ tin ci̱ duɔth, kä min kuiyni̱ jɛn kä tin kɔ̱kiɛn.Mi̱ ci̱ duɔ̱ɔ̱r tok kɛ mi̱ tɔt, bi̱ kɛ cu tok kɛ mi̱ tɔt.Mi̱ ca ŋun ɛ la mi̱ ca mat ɛ la intejeri̱, bi̱ loc ɛ la mi̱ ca mat ɛ la mi̱ /ci̱ rɔ bi̱ mat.# >>> strange_sort_list.call([1, 2, 3, 4])
# [1, 4, 2, 3]
# >>> strange_sort_list.call([5, 5, 5, 5])
# [5, 5, 5, 5]
# >>> strange_sort_list.call([])
# []
def strange_sort_list(lst)
","def strange_sort_list(lst)
  result = []
  lst.sort!
  until lst.empty?
    result << lst.shift
    result << lst.pop unless lst.empty?
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_strange_sort_list
    candidate = method(:strange_sort_list)
    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))
    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))
    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))
    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))
    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))
    assert_equal([], candidate.call([]))
    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))
    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))
    assert_equal([111111], candidate.call([111111]))
  end
end
"
HumanEval_71,nus_Latn,rb,"Cäät: Kä min diɔ̱ɔ̱kdiɛn ɛ jɛn kui̱c.Tha̱a̱ŋ diɔ̱k ti̱ ca̱a̱t ɛ la̱tdiɛn ɛ mi̱ ca kɛ mat ɛ kɛn gua̱th da̱ŋ rɛw tin di̱t.Mi̱ /ci̱ ɛ jɛn, bi̱ loc ni̱ -1 kä di̱ri̱kali̱ ɛ mi̱ ca riali̱kä ɛ wä kä 2 decimal pöthi̱ni̱ mi̱ ci̱ thärkäl ɛ la di̱ri̱kali̱ mi̱ tekɛ kui̱c mi̱ ro̱ŋ.Mi̱ ca pek ɛ wä kä kui̱c in diɔ̱k kä ki̱li̱öthä mi̱ ci̱ rɔ rɛl, bi̱ kɛnɛ loc ɛ la pi̱e̱l # >>> triangle_area.call(3, 4, 5)
# 6.0
# >>> triangle_area.call(1, 2, 10)
# -1
def triangle_area(a, b, c)
","def triangle_area(a, b, c)
  # Check for valid triangle
  if a + b > c && a + c > b && b + c > a
    # Calculate the semi-perimeter
    s = (a + b + c) / 2.0
    # Calculate the area using Heron's formula
    area = Math.sqrt(s * (s - a) * (s - b) * (s - c))
    # Round to 2 decimal points
    return area.round(2)
  else
    return -1
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_triangle_area
    candidate = method(:triangle_area)
    assert_equal(6.0, candidate.call(3, 4, 5))
    assert_equal(-1, candidate.call(1, 2, 10))
    assert_equal(8.18, candidate.call(4, 8, 5))
    assert_equal(1.73, candidate.call(2, 2, 2))
    assert_equal(-1, candidate.call(1, 2, 3))
    assert_equal(16.25, candidate.call(10, 5, 7))
    assert_equal(-1, candidate.call(2, 6, 3))
    assert_equal(0.43, candidate.call(1, 1, 1))
    assert_equal(-1, candidate.call(2, 2, 10))
  end
end
"
HumanEval_72,nus_Latn,rb,"Cäät: Kä duɔ̱ɔ̱r q bɛ rɔ̱ cu jiɛc mi̱ cɛ päär (ɛ pa̱li̱ndrɔmik arrɛy) kɛnɛ ɣöö bi̱ mat ŋɔaani̱kɛ cu kuɛ̈ɛ̈ kiɛ päär kɛ pek in di̱tni̱ jɛn kä de rɔ lot w.Gɔ̱r pa̱ŋciin mi̱ locrɔ ɛ thuɔ̱k mi̱ ci̱ duɔ̱ɔ̱r q bi̱ jiɛɛn, kɛnɛ ɣöö bi̱ min dɔ̱ŋ cu tekɛ kac.# >>> will_it_fly.call([1, 2], 5)
# false
# # 1+2 is less than the maximum possible weight, but it's unbalanced.
# >>> will_it_fly.call([3, 2, 3], 1)
# false
# # it's balanced, but 3+2+3 is more than the maximum possible weight.
# >>> will_it_fly.call([3, 2, 3], 9)
# true
# # 3+2+3 is less than the maximum possible weight, and it's balanced.
# >>> will_it_fly.call([3], 5)
# true
# # 3 is less than the maximum possible weight, and it's balanced.
def will_it_fly(q, w)
","def will_it_fly(q, w)
  is_palindrome = q == q.reverse
  total_weight = q.sum
  is_balanced_and_under_weight = is_palindrome && total_weight <= w
  is_balanced_and_under_weight
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_will_it_fly
    candidate = method(:will_it_fly)
    assert_equal(true, candidate.call([3, 2, 3], 9))
    assert_equal(false, candidate.call([1, 2], 5))
    assert_equal(true, candidate.call([3], 5))
    assert_equal(false, candidate.call([3, 2, 3], 1))
    assert_equal(false, candidate.call([1, 2, 3], 6))
    assert_equal(true, candidate.call([5], 5))
  end
end
"
HumanEval_73,nus_Latn,rb,"Ciee cäät ɛmɛ: Ɛ jɛn min kuɛnkɛ ɛ päärɛ jɔk kɛnɛ nhiam. kɛ duɔ̱ɔ̱p kɛl, deri duɔ̱ɔ̱r gɛr kä duɔ̱ɔ̱r mi̱ dɔ̱ŋ.ɛ mi̱ go̱o̱r ɣöö ba gɛr kɛ ɣöö ba matrik palindrɔmik. Palindrɔmik matrik ɛ matrik mi̱ bi̱ Mi̱ ca ŋun ɛ la mi̱ caa mat kä arr duŋ intejeri̱, jiekɛ nämbär in kuiyni̱ jɛn kä elɛmɛni̱ tin bi̱ # >>> smallest_change.call([1, 2, 3, 5, 4, 7, 9, 6])
# 4
# >>> smallest_change.call([1, 2, 3, 4, 3, 2, 2])
# 1
# >>> smallest_change.call([1, 2, 3, 2, 1])
# 0
def smallest_change(arr)
","def smallest_change(arr)
  changes = 0
  left = 0
  right = arr.length - 1

  while left < right
    if arr[left] != arr[right]
      changes += 1
    end
    left += 1
    right -= 1
  end

  changes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_smallest_change
    candidate = method(:smallest_change)
    assert_equal(4, candidate.call([1, 2, 3, 5, 4, 7, 9, 6]))
    assert_equal(1, candidate.call([1, 2, 3, 4, 3, 2, 2]))
    assert_equal(1, candidate.call([1, 4, 2]))
    assert_equal(1, candidate.call([1, 4, 4, 2]))
    assert_equal(0, candidate.call([1, 2, 3, 2, 1]))
    assert_equal(0, candidate.call([3, 1, 1, 3]))
    assert_equal(0, candidate.call([1]))
    assert_equal(1, candidate.call([0, 1]))
  end
end
"
HumanEval_74,nus_Latn,rb,"Cäätni̱ Mi̱ ci̱ matiri̱ rɛw tekɛ kɛ nämbär mi̱ päär kä kar, locni̱ matiri̱ in nhiam.pek in matkɛ nyin thärkäli̱ diaal kä matrikni̱ tin kɔ̱ŋ ɛ kuiy ni̱ jɛn kä matrik in dɔ̱ŋ.Gɔ̱rkɛ pa̱ŋcin mi̱ bi̱ matni̱ rɛw ti̱ ca gɔ̱r kɛ ɣöö bi̱ kɛn ku lɛ loc ɛ la mi̱ tekɛ # >>> total_match.call([], [])
# []
# >>> total_match.call([""hi"", ""admin""], [""hI"", ""Hi""])
# [""hI"", ""Hi""]
# >>> total_match.call([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
# [""hi"", ""admin""]
# >>> total_match.call([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
# [""hI"", ""hi"", ""hi""]
# >>> total_match.call([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
# [""4""]
def total_match(lst1, lst2)
","def total_match(lst1, lst2)
  total_chars1 = lst1.map(&:length).sum
  total_chars2 = lst2.map(&:length).sum

  if total_chars1 < total_chars2
    lst1
  elsif total_chars2 < total_chars1
    lst2
  else
    lst1
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_total_match
    candidate = method(:total_match)
    assert_equal([], candidate.call([], []))
    assert_equal([""hi"", ""hi""], candidate.call([""hi"", ""admin""], [""hi"", ""hi""]))
    assert_equal([""hi"", ""admin""], candidate.call([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]))
    assert_equal([""4""], candidate.call([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]))
    assert_equal([""hI"", ""Hi""], candidate.call([""hi"", ""admin""], [""hI"", ""Hi""]))
    assert_equal([""hI"", ""hi"", ""hi""], candidate.call([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]))
    assert_equal([""hi"", ""admin""], candidate.call([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]))
    assert_equal([], candidate.call([], [""this""]))
    assert_equal([], candidate.call([""this""], []))
  end
end
"
HumanEval_75,nus_Latn,rb,"Cäät: Mi̱ ŋa̱cnɛ i̱ (a) ɛ kuiy ni̱ jɛn kä 100.kä kac kɛ min dɔ̱ŋ.Gɔ̱r pa̱ŋcin mi̱ locrɔ i̱ ɛ thuɔ̱k mi̱ ca ŋun ɛ nämbär mi̱ ca loc ɛ la mälti̱pli̱kecin duŋ 3 praim nämbäri̱ # >>> is_multiply_prime.call(30)
# true
# 30 = 2 * 3 * 5
def is_multiply_prime(a)
","require 'prime'

def is_multiply_prime(a)
  return false if a >= 100
  prime_factors = a.prime_division
  return true if prime_factors.size == 3 && prime_factors.all? { |_, exponent| exponent == 1 }
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_multiply_prime
    candidate = method(:is_multiply_prime)
    assert_equal(false, candidate.call(5))
    assert_equal(true, candidate.call(30))
    assert_equal(true, candidate.call(8))
    assert_equal(false, candidate.call(10))
    assert_equal(true, candidate.call(125))
    assert_equal(true, candidate.call(105))
    assert_equal(false, candidate.call(126))
    assert_equal(false, candidate.call(729))
    assert_equal(false, candidate.call(891))
    assert_equal(true, candidate.call(1001))
  end
end
"
HumanEval_76,nus_Latn,rb,"Ciee cäät ɛmɛ: x ɛ mi̱ ca la̱t ɛ thi̱a̱k kä n mi̱ n**int=x kä buɔ̱m duŋ n kɛnɛ kac rɛy gua̱thni̱ kɔ̱kiɛn.La̱tdu ɛ ɣöö bi̱ la̱tdiɛn kulɛ ben ɛ la thuɔ̱k mi̱ ci̱ nämbär ɛ la x ɛ thi̱mpil # >>> is_simple_power.call(1, 4)
# true
# >>> is_simple_power.call(2, 2)
# true
# >>> is_simple_power.call(8, 2)
# true
# >>> is_simple_power.call(3, 2)
# false
# >>> is_simple_power.call(3, 1)
# false
# >>> is_simple_power.call(5, 3)
# false
def is_simple_power(x, n)
","def is_simple_power(x, n)
  return false if x <= 0 || n <= 1
  return true if x == 1

  power = n
  while power <= x
    return true if power == x
    power *= n
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_simple_power
    candidate = method(:is_simple_power)
    assert_equal(true, candidate.call(16, 2))
    assert_equal(false, candidate.call(143214, 16))
    assert_equal(true, candidate.call(4, 2))
    assert_equal(true, candidate.call(9, 3))
    assert_equal(true, candidate.call(16, 4))
    assert_equal(false, candidate.call(24, 2))
    assert_equal(false, candidate.call(128, 4))
    assert_equal(false, candidate.call(12, 6))
    assert_equal(true, candidate.call(1, 1))
    assert_equal(true, candidate.call(1, 12))
  end
end
"
HumanEval_77,nus_Latn,rb,"Cäätni̱: Note: deri̱ jɛ car i̱ ɛn min ca la̱th rɛy la̱t ɛ mi̱ la thuɔ̱k ni̱ ciaŋ.Mi̱ ca inegɛra̱th ɛmɛ cuub duŋ intejeri̱ ti̱ ŋuan.Gɔ̱rkɛ pa̱ŋcin mi̱ naŋ intejiɛr a kä locni̱ thuɔ̱k # >>> iscube.call(1)
# true
# >>> iscube.call(2)
# false
# >>> iscube.call(-1)
# true
# >>> iscube.call(64)
# true
# >>> iscube.call(0)
# true
# >>> iscube.call(180)
# false
def iscube(a)
","def iscube(a)
  cube_root = a.abs**(1.0/3)
  cube_root.round**3 == a
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_iscube
    candidate = method(:iscube)
    assert_equal(true, candidate.call(1))
    assert_equal(false, candidate.call(2))
    assert_equal(true, candidate.call(-1))
    assert_equal(true, candidate.call(64))
    assert_equal(false, candidate.call(180))
    assert_equal(true, candidate.call(1000))
    assert_equal(true, candidate.call(0))
    assert_equal(false, candidate.call(1729))
  end
end
"
HumanEval_78,nus_Latn,rb,"Cäätni̱: kä bi̱ thi̱i̱mbuɔli̱ A,B,C,D,E,F ni̱ ciaaŋ la gɔ̱rkɛ kɛ wargak mi̱ di̱i̱t.Nöth: deri̱ jɛ car i̱ ɛn inpuut bɛ ni̱ ciaaŋ la thuɔ̱k kiɛ bɛ te baaŋ, B (= decimal 11), D (= decimal 13). Mi̱ ci̱i̱ jɛ la̱t, bi̱ kɛ lɛ be̱n go̱r ɛn ɣöö bi̱ kɛ ɛ nämbär mi̱ de̱e̱ kɛ wä kä di̱jitni̱ ti̱ti̱: 2, 3, 5, 7, Präm nämbäri̱ kɛn kɛ 2, 3, 5, 7, 11, 13, 17,...Hexadecimal digits ɛ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. min di̱tni̱ jɛn kä 1 min /ci̱kɛ la pi̱löd duŋ näci̱ral nämbäri̱ rɛw tin kuiyni̱kɛn).Di̱jitni̱ tin la praam nämbäri̱ (praam nämbär, kiɛ praam, ɛ näci̱ral nämbär Ɛ ɣɛkdathedhimal nämbär ɛ la thärkɛn kä kuɛnɛ nämbär ɣɛkdathedhimal Ca ji̱ la̱t ɣöö bi̱ la̱t mi̱ bi̱ ji̱ luäk kulɛ gɔ̱r.# >>> hex_key.call(""AB"")
# 1
# >>> hex_key.call(""1077E"")
# 2
# >>> hex_key.call(""ABED1A33"")
# 4
# >>> hex_key.call(""123456789ABCDEF0"")
# 6
# >>> hex_key.call(""2020"")
# 2
def hex_key(num)
","def hex_key(num)
  prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']
  num.chars.count { |digit| prime_hex_digits.include?(digit) }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_hex_key
    candidate = method(:hex_key)
    assert_equal(1, candidate.call(""AB""))
    assert_equal(2, candidate.call(""1077E""))
    assert_equal(4, candidate.call(""ABED1A33""))
    assert_equal(2, candidate.call(""2020""))
    assert_equal(6, candidate.call(""123456789ABCDEF0""))
    assert_equal(12, candidate.call(""112233445566778899AABBCCDDEEFF00""))
  end
end
"
HumanEval_79,nus_Latn,rb,"Cäätni̱: Kɛn wargakni̱ tin ca mat thi̱n kɛ ɣöö bi̱ kɛ wɔ̱ a gɔaa.Bi̱ tekɛ kaar ti̱ ŋuan ti̱ ba gɔ̱r i̱ 'db' kä tukdɛ kɛnɛ guutdɛ kä thëm.Kä bi̱ ramɔ kä biɛl rɛy thi̱rɛndä bi̱ kɛnɛ '0' kiɛ '1'.la̱t bi̱ kɛnɛ yi̱k loc kä bi̱ la̱t ɛmɔ ɛ la mi̱ bi̱ la̱t mi̱ bi̱ la̱t ɛ la binary.Ba ji̱ moc nämbär rɛy thurɛ decimal kä la̱tdu ɛ ɣöö bi̱ jɛ loc kä # >>> decimal_to_binary.call(15)
# ""db1111db""
# >>> decimal_to_binary.call(32)
# ""db100000db""
def decimal_to_binary(decimal)
","def decimal_to_binary(decimal)
  ""db"" + decimal.to_s(2) + ""db""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_decimal_to_binary
    candidate = method(:decimal_to_binary)
    assert_equal(""db0db"", candidate.call(0))
    assert_equal(""db100000db"", candidate.call(32))
    assert_equal(""db1100111db"", candidate.call(103))
    assert_equal(""db1111db"", candidate.call(15))
  end
end
"
HumanEval_80,nus_Latn,rb,"Ciee cäät ɛmɛ: Ɛ thi̱ri̱nd mi̱ la haprb mi̱ jɛn bäärɛ ɛ mi̱ kuiy ni̱ jɛn kä 3 kɛnɛ ɣöö kɛn i̱thti̱ri̱ni̱ diaal tin guɔ̱rkɛ rɔ̱ kɛrɔ̱ tekɛ dääk La̱tdu ɛ ɣöö bi̱ ji̱n ɛ ŋa̱c i̱ ɛ i̱thtrind ɛ mi̱ lotrɔ kiɛ /cɛ lotrɔ.Ji̱n caa ji̱ moc yi̱k mi̱ bi̱ rɔ ri̱t.# >>> is_happy.call(""a"")
# false
# >>> is_happy.call(""aa"")
# false
# >>> is_happy.call(""abcd"")
# true
# >>> is_happy.call(""aabb"")
# false
# >>> is_happy.call(""adb"")
# true
# >>> is_happy.call(""xyy"")
# false
def is_happy(s)
","def is_happy(s)
  return false if s.length < 3
  
  (0..s.length - 3).each do |i|
    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]
  end
  
  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_happy
    candidate = method(:is_happy)
    assert_equal(false, candidate.call(""a""))
    assert_equal(false, candidate.call(""aa""))
    assert_equal(true, candidate.call(""abcd""))
    assert_equal(false, candidate.call(""aabb""))
    assert_equal(true, candidate.call(""adb""))
    assert_equal(false, candidate.call(""xyy""))
    assert_equal(true, candidate.call(""iopaxpoi""))
    assert_equal(false, candidate.call(""iopaxioi""))
  end
end
"
HumanEval_81,nus_Latn,rb,"Cäät: 0.0 E > 0.0 D- > 0.7 D > 1.0 D+ > 1.3 C- > 1.7 C > 2.0 C+ > 2.3 B- > 2.7 B > 3.0 B+ > 3.3 A- > 3.7 A 4.0 A+ GPA. Letter grade. GPA. Letter grade.la̱t mi̱ de nyothni̱ mi̱ ca mat kä di̱t kä di̱t kä wargak kɛ la̱tdɛ kɛ gua̱th in te thi̱n: Cɛ ji̱ moc GPA ti̱ ŋuan kɛ kui̱i̱ tha̱a̱ŋ gɔ̱a̱a̱ri̱ kä bi̱ ji̱n ɛ gɔ̱a̱r piny.Kä riɛk kärɔa, jɛn cuɛ thiɛl kɔd min la̱tdɛ kɛ ɣöö bɛ di̱l ɛ la̱t.Ŋi̱i̱cdɛ ɛn ɣöö bɛ gɔ̱a̱r ɛ la ram mi̱ bi̱ naath jakä ŋa̱ckɛ tin gɔ̱rkɛ.Ɛ jɛn juɔk in jɔak kä thɛmthɛmer kä ŋi̱i̱c bɛ ji̱ ŋieec ka̱m ŋieec # >>> grade_equation.call([4.0, 3, 1.7, 2, 3.5])
# [""A+"", ""B"", ""C-"", ""C"", ""A-""]
def numerical_letter_grade(grades)
","def numerical_letter_grade(grades)
  grades.map do |gpa|
    case 
    when gpa == 4.0
      ""A+""
    when gpa > 3.7
      ""A""
    when gpa > 3.3
      ""A-""
    when gpa > 3.0
      ""B+""
    when gpa > 2.7
      ""B""
    when gpa > 2.3
      ""B-""
    when gpa > 2.0
      ""C+""
    when gpa > 1.7
      ""C""
    when gpa > 1.3
      ""C-""
    when gpa > 1.0
      ""D+""
    when gpa > 0.7
      ""D""
    when gpa > 0.0
      ""D-""
    else
      ""E""
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_numerical_letter_grade
    candidate = method(:numerical_letter_grade)
    assert_equal([""A+"", ""B"", ""C-"", ""C"", ""A-""], candidate.call([4.0, 3, 1.7, 2, 3.5]))
    assert_equal([""D+""], candidate.call([1.2]))
    assert_equal([""D-""], candidate.call([0.5]))
    assert_equal([""E""], candidate.call([0.0]))
    assert_equal([""D"", ""D-"", ""C-"", ""B"", ""B+""], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))
    assert_equal([""E"", ""D-""], candidate.call([0.0, 0.7]))
  end
end
"
HumanEval_82,nus_Latn,rb,"Cäätni̱ pekdɛ ɛ mi̱ la praam nämbär kiɛ ɛ kac ɛ mi̱ dɔ̱ŋ Gɔ̱r pa̱ŋcin mi̱ naŋkɛ thärkdɛ kä loc ni̱ thuɔ̱k mi̱ ci̱ thärkdɛ rɔ lot.# >>> prime_length.call(""Hello"")
# true
# >>> prime_length.call(""abcdcba"")
# true
# >>> prime_length.call(""kittens"")
# true
# >>> prime_length.call(""orange"")
# false
def prime_length(string)
","def prime_length(string)
  length = string.length
  return false if length < 2

  (2..Math.sqrt(length)).each do |i|
    return false if length % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prime_length
    candidate = method(:prime_length)
    assert_equal(true, candidate.call(""Hello""))
    assert_equal(true, candidate.call(""abcdcba""))
    assert_equal(true, candidate.call(""kittens""))
    assert_equal(false, candidate.call(""orange""))
    assert_equal(true, candidate.call(""wow""))
    assert_equal(true, candidate.call(""world""))
    assert_equal(true, candidate.call(""MadaM""))
    assert_equal(true, candidate.call(""Wow""))
    assert_equal(false, candidate.call(""""))
    assert_equal(true, candidate.call(""HI""))
    assert_equal(true, candidate.call(""go""))
    assert_equal(false, candidate.call(""gogo""))
    assert_equal(false, candidate.call(""aaaaaaaaaaaaaaa""))
    assert_equal(true, candidate.call(""Madam""))
    assert_equal(false, candidate.call(""M""))
    assert_equal(false, candidate.call(""0""))
  end
end
"
HumanEval_83,nus_Latn,rb,"Puɔ̱thitib intjerni̱ tin tokɛ kiɛ thukɛ kɛ 1.Mi̱ ca ŋun ɛ la mi̱ tekɛ puɔthtip intejiɛr n, locni̱ nämbäri̱ tin te kä n-dhi̱jit def starts_one_ends(n)
","def starts_one_ends(n)
  return 0 if n <= 0

  # Count numbers starting with 1
  start_with_1 = 9 ** (n - 1)

  # Count numbers ending with 1
  end_with_1 = 9 ** (n - 1)

  # Adjust for double counting the number that both starts and ends with 1
  both_start_and_end_with_1 = 9 ** (n - 2) if n > 1
  
  start_with_1 + end_with_1 - (both_start_and_end_with_1 || 0)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_starts_one_ends
    candidate = method(:starts_one_ends)
    assert_equal(1, candidate.call(1))
    assert_equal(18, candidate.call(2))
    assert_equal(180, candidate.call(3))
    assert_equal(1800, candidate.call(4))
    assert_equal(18000, candidate.call(5))
  end
end
"
HumanEval_84,nus_Latn,rb,"Cäät Mi̱ ca ŋun ɛ la mi̱ tekɛ puɔthtip intejiɛr N, locni̱ mat di̱jitni̱kɛ rɛy bainairi̱.# >>> solve.call(1000)
# ""1""
# >>> solve.call(150)
# ""110""
# >>> solve.call(147)
# ""1100""
# Variables:
# @N integer
# Constraints: 0 ≤ N ≤ 10000.
# Output:
# a string of binary number
def solve(n)
","def solve(n)
  sum_of_digits = n.to_s.chars.map(&:to_i).sum
  sum_of_digits.to_s(2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solve
    candidate = method(:solve)
    assert_equal(""1"", candidate.call(1000))
    assert_equal(""110"", candidate.call(150))
    assert_equal(""1100"", candidate.call(147))
    assert_equal(""1001"", candidate.call(333))
    assert_equal(""10010"", candidate.call(963))
  end
end
"
HumanEval_85,nus_Latn,rb,"Cäätni̱: Mi̱ ca ŋun ɛ la mi̱ /ci̱ te baaŋ kä intɛrjiɛr lst, matkɛ ɛlɛmɛni̱ paat tin te kä indi̱dhɛni̱ ti̱ /ci̱ tɔt.# >>> add.call([4, 2, 6, 7])
# 2
def add(lst)
","def add(lst)
  lst.each_with_index.select { |num, index| index.odd? && num.even? }.map(&:first).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add
    candidate = method(:add)
    assert_equal(88, candidate.call([4, 88]))
    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))
    assert_equal(0, candidate.call([4, 0, 6, 7]))
    assert_equal(12, candidate.call([4, 4, 6, 8]))
  end
end
"
HumanEval_86,nus_Latn,rb,"Ciee cäät ɛmɛ: Ruacni ti̱ti̱: Ji̱n bi̱ kɛ dhil la̱t kɛ duɔ̱ɔ̱p in ci̱kɛ la̱t kɛ jɛ kɛnɛ gua̱th tin ci̱kɛ la̱t kɛ jɛ.kä min wä nhial kä min wä nhial kä min ca la̱th kä ɣɛkpi̱ri̱mɛni̱.ɛ mi̱ la̱tkɛ ɛ riet mi̱ pay tuɔɔk mi̱ bi̱ kɛn ciɛŋ diaal tin caa riali̱kä rɛy Mi̱ ca riali̱kä kä ca̱p in ca gɔ̱r, ɛ mi̱ la rie̱t diaal (tin ca da̱a̱k ɛ kam)Gɔ̱r la̱t mi̱ naŋkɛ thärkdɛ kä locni̱kɛ ɛ la mi̱ ca riali̱kä.# >>> anti_shuffle.call(""Hi"")
# ""Hi""
# >>> anti_shuffle.call(""hello"")
# ""ehllo""
# >>> anti_shuffle.call(""Hello World!!!"")
# ""Hello !!!Wdlor""
def anti_shuffle(s)
","def anti_shuffle(s)
  s.split(/(\s+)/).map { |word| word.chars.sort.join }.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_anti_shuffle
    candidate = method(:anti_shuffle)
    assert_equal(""Hi"", candidate.call(""Hi""))
    assert_equal(""ehllo"", candidate.call(""hello""))
    assert_equal(""bemnru"", candidate.call(""number""))
    assert_equal(""abcd"", candidate.call(""abcd""))
    assert_equal(""Hello !!!Wdlor"", candidate.call(""Hello World!!!""))
    assert_equal("""", candidate.call(""""))
    assert_equal("".Hi My aemn is Meirst .Rboot How aer ?ouy"", candidate.call(""Hi. My name is Mister Robot. How are you?""))
  end
end
"
HumanEval_87,nus_Latn,rb,"Cäätni̱: Ɛ nyɔk bä, ca̱a̱t kɛ min ca mat kä röm ɛ la kɔlömni̱ kɛ ɣöö bɛ wä piny.Thɔ̱rbi̱ri̱ni̱ tin caa la̱t kɛ nhiam kɛ duɔ̱ɔ̱p mi̱ wä nhial.kä matrik ɛ mi̱ la kɔrdi̱nɛt - (rɛw, kɔlömni̱), ɛ tokɛ kä 0.kä locni̱ array duŋ arrayni̱, [(x1, y1), (x2, y2) ...] ce̱tkɛ mi̱ cie jɛn Mi̱ ca lst, kɛnɛ intejer x, jiek intejeri̱ x rɛy array, kä ri̱w kɛl dɔ̱ŋ bɛ tekɛ nämbär mi̱ göl kä kɔlömni̱.min cät kɛ matrik, duŋni̱ ɣöö, /cɛ cät kɛ matrikni̱, Ji̱n ca ji̱ ka̱m data ni̱ ti̱ 2 dimɛncinal, cie mi̱ ɛ näthti̱d ari̱i̱, # >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
# >>> get_row.call([], 1)
# []
# >>> get_row.call([[], [1], [1, 2, 3]], 3)
# [[2, 2]]
def get_row(lst, x)
","def get_row(lst, x)
  result = []

  lst.each_with_index do |row, i|
    row.each_with_index do |value, j|
      result << [i, j] if value == x
    end
  end

  result.sort_by { |coord| [coord[0], -coord[1]] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_row
    candidate = method(:get_row)
    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))
    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))
    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))
    assert_equal([], candidate.call([], 1))
    assert_equal([], candidate.call([[1]], 2))
    assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))
  end
end
"
HumanEval_88,nus_Latn,rb,"Cäätni̱: * /cuɛ matdiɛn gɛr. Nöt: kiɛ dääkdɛ kɛ jɛ kɛ min wä piny mi̱ ci̱ mat ((kä min nhiam kä indi̱i̱th ba̱li̱öm, kä min jɔak kä indi̱i̱th ba̱li̱öm) ɛ pa̱r.bi̱ ji̱n matni̱ kɛ gua̱th mi̱ ci̱ rɔ re̱p mi̱ ci̱ mat ((kä index in nhiam, kä index in jɔak) ɛ mi̱ /ci̱ rɔ bi̱ mat, Mi̱ ca ŋun ɛ la mi̱ ca mat ɛ la mi̱ /ci̱ mɔ a nägëtib intejeri̱, locni̱kɛ ɛ la kɔrb mi̱ ca ŋun ɛ la mi̱ ca mat ɛ la mi̱ ca thɔɔri̱, # >>> sort_array.call([])
# []
# >>> sort_array.call([5])
# [5]
# >>> sort_array.call([2, 4, 3, 0, 1, 5])
# [0, 1, 2, 3, 4, 5]
# >>> sort_array.call([2, 4, 3, 0, 1, 5, 6])
# [6, 5, 4, 3, 2, 1, 0]
def sort_array(array)
","def sort_array(array)
  return array if array.empty? || array.size == 1

  if (array.first + array.last).odd?
    array.sort
  else
    array.sort.reverse
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_array
    candidate = method(:sort_array)
    assert_equal([], candidate.call([]))
    assert_equal([5], candidate.call([5]))
    assert_equal([0, 1, 2, 3, 4, 5], candidate.call([2, 4, 3, 0, 1, 5]))
    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2, 4, 3, 0, 1, 5, 6]))
    assert_equal([1, 2], candidate.call([2, 1]))
    assert_equal([0, 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))
    assert_equal([23, 21, 14, 11], candidate.call([21, 14, 23, 11]))
  end
end
"
HumanEval_89,nus_Latn,rb,"Ciee cäät ɛmɛ: kɛ rɛw ti̱ ŋuan kɛ gua̱th rɛw.Ɛn aljɛbi̱t ba yi̱k loc kɛ duɔ̱ɔ̱p mi̱ bi̱ lɛ̈t ɛ la la loc ɛ la mi̱ ca gɔ̱r ɛ la ki̱i̱thtɛr mi̱ ca rɔ̱ gɛr kä alpabet.Ca̱p in ca lätdɛ kä bɛ kuɛn ɛ la mi̱ bi̱ rɔ ku lɛ naŋ ɛ la mi̱ bi̱ rɔ ku lɛ naŋ ɛ la mi̱ bi̱ rɔ ku lɛ naŋ ɛ la mi̱ bi̱ rɔ ku lɛ naŋ.# >>> encrypt.call(""hi"")
# ""lm""
# >>> encrypt.call(""asdfghjkl"")
# ""ewhjklnop""
# >>> encrypt.call(""gf"")
# ""kj""
# >>> encrypt.call(""et"")
# ""ix""
def encrypt(s)
","def encrypt(s)
  s.chars.map do |char|
    if char =~ /[a-z]/
      ((char.ord - 'a'.ord + 4) % 26 + 'a'.ord).chr
    elsif char =~ /[A-Z]/
      ((char.ord - 'A'.ord + 4) % 26 + 'A'.ord).chr
    else
      char
    end
  end.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_encrypt
    candidate = method(:encrypt)
    assert_equal(""lm"", candidate.call(""hi""))
    assert_equal(""ewhjklnop"", candidate.call(""asdfghjkl""))
    assert_equal(""kj"", candidate.call(""gf""))
    assert_equal(""ix"", candidate.call(""et""))
    assert_equal(""jeiajeaijeiak"", candidate.call(""faewfawefaewg""))
    assert_equal(""lippsqcjvmirh"", candidate.call(""hellomyfriend""))
    assert_equal(""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"", candidate.call(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""))
    assert_equal(""e"", candidate.call(""a""))
  end
end
"
HumanEval_90,nus_Latn,rb,"Mi̱ thiɛlɛ mi̱ ce̱tkɛ ɛlɛmɛni̱, bɛ loc ni̱nill.Gɔ̱r ni̱ pa̱ŋciin in dɔ̱ŋ min kuiyni̱jɛn kä 2 min locni̱ ɛlɛmɛni̱ tin tɔatni̱ kä array.Ji̱n ca ji̱ moc nämbäri̱ ti̱ ŋuan ti̱ /ci̱kɛ thuɔ̱k.# >>> next_smallest.call([1, 2, 3, 4, 5])
# 2
# >>> next_smallest.call([5, 1, 4, 3, 2])
# 2
# >>> next_smallest.call([])
# nil
# >>> next_smallest.call([1, 1])
# nil
def next_smallest(lst)
","def next_smallest(lst)
  unique_sorted = lst.uniq.sort
  unique_sorted.length >= 2 ? unique_sorted[1] : nil
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_next_smallest
    candidate = method(:next_smallest)
    assert_equal(2, candidate.call([1, 2, 3, 4, 5]))
    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))
    assert_equal(nil, candidate.call([]))
    assert_equal(nil, candidate.call([1, 1]))
    assert_equal(1, candidate.call([1, 1, 1, 1, 0]))
    assert_equal(nil, candidate.call([1, 1]))
    assert_equal(-35, candidate.call([-35, 34, 12, -45]))
  end
end
"
HumanEval_91,nus_Latn,rb,"Ciee cäät ɛmɛ: Thënci̱ni̱ ba kɛ yiath piny ɛ la '.', '?' kiɛ '!'.Ɛn ""boredom"" ɛ mi̱ la tuk rie̱tdä kä ""I"".Bi̱ ji̱ moc rieet ti̱ ŋuan, kä bi̱ la̱tdu ɛ ɣöö bi̱ pekdiɛn kuɛn.# >>> is_bored.call(""Hello world"")
# 0
# >>> is_bored.call(""The sky is blue. The sun is shining. I love this weather"")
# 1
def is_bored(s)
","def is_bored(s)
  sentences = s.split(/(?<=[.?!])/)
  sentences.count { |sentence| sentence.strip.start_with?('I') }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_bored
    candidate = method(:is_bored)
    assert_equal(0, candidate.call(""Hello world""))
    assert_equal(0, candidate.call(""Is the sky blue?""))
    assert_equal(1, candidate.call(""I love It !""))
    assert_equal(0, candidate.call(""bIt""))
    assert_equal(2, candidate.call(""I feel good today. I will be productive. will kill It""))
    assert_equal(0, candidate.call(""You and I are going for a walk""))
  end
end
"
HumanEval_92,nus_Latn,rb,"Cäätni̱ Lätdɛ ɛ kac rɛy kä ti̱ kɔ̱kiɛn.La loc ɛ thuɔ̱k mi̱ kɛl kä nämbäri̱ ɛ mi̱ päär kɛ mat nämbäri̱ rɛw tin kɔ̱kiɛn, kɛnɛ nämbäri̱ diaal tin te rɛy intejeri̱.Lätni̱ pa̱ŋciin mi̱ naŋkɛ nämbäri̱ da̱ŋ diɔ̱k.# >>> any_int.call(5, 2, 7)
# true
# >>> any_int.call(3, 2, 2)
# false
# >>> any_int.call(3, -2, 1)
# true
# >>> any_int.call(3.6, -2.2, 2)
# false
def any_int(x, y, z)
","def any_int(x, y, z)
  if [x, y, z].all? { |n| n.is_a?(Integer) }
    x == y + z || y == x + z || z == x + y
  else
    false
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_any_int
    candidate = method(:any_int)
    assert_equal(true, candidate.call(2, 3, 1))
    assert_equal(false, candidate.call(2.5, 2, 3))
    assert_equal(false, candidate.call(1.5, 5, 3.5))
    assert_equal(false, candidate.call(2, 6, 2))
    assert_equal(true, candidate.call(4, 2, 2))
    assert_equal(false, candidate.call(2.2, 2.2, 2.2))
    assert_equal(true, candidate.call(-4, 6, 2))
    assert_equal(true, candidate.call(2, 1, 1))
    assert_equal(true, candidate.call(3, 4, 7))
    assert_equal(false, candidate.call(3.0, 4, 7))
  end
end
"
HumanEval_93,nus_Latn,rb,"Cäätni̱: Lätni̱ wargakni̱ kärɔ̱.Ɛn vowel rɛy Liŋli̱th alpabet.Ɛn wargak mi̱ caa gɔ̱r ɛ mi̱ tä gua̱a̱th da̱ŋ rɛw nhiamdɛƐn duɔ̱ɔ̱p in laa jɛ laa gɛrkɛ ɛ la mi̱ laa gɔ̱a̱rkɛ kɛ gua̱a̱th warɛgakni̱ diaal, laa jɛ laa gɛrkɛ ɛ la mi̱ laa gɔ̱rkɛ kɛ gua̱a̱th kɛl.Gɔ̱r ni̱ pa̱ŋcin mi̱ naŋɛ ruac, kä bɛ jɛ kuëŋ rɛy kä mi̱ cie # >>> encode.call(""test"")
# ""TGST""
# >>> encode.call(""This is a message"")
# ""tHKS KS C MGSSCGG""
def encode(message)
","def encode(message)
  vowels = 'aeiou'
  swap_vowels = {'a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'w'}
  
  encoded_message = message.chars.map do |char|
    if vowels.include?(char.downcase)
      new_char = swap_vowels[char.downcase]
      char == char.upcase ? new_char.upcase : new_char.downcase
    else
      char == char.upcase ? char.downcase : char.upcase
    end
  end

  encoded_message.join
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_encode
    candidate = method(:encode)
    assert_equal(""tgst"", candidate.call(""TEST""))
    assert_equal(""mWDCSKR"", candidate.call(""Mudasir""))
    assert_equal(""ygs"", candidate.call(""YES""))
    assert_equal(""tHKS KS C MGSSCGG"", candidate.call(""This is a message""))
    assert_equal(""k dQnT kNqW wHcT Tq wRkTg"", candidate.call(""I DoNt KnOw WhAt tO WrItE""))
  end
end
"
HumanEval_94,nus_Latn,rb,"Cäätni̱: Ji̱n go̱o̱ri ɣöö bi̱ min di̱tni̱ jɛn kä prɔmmi̱ɛr mi̱ cɛ di̱t kä bi̱ loc ni̱ dääri̱ di̱jitädɛ.Ji̱n ca ji̱ moc nämbäri̱ ti̱ ŋuan ti̱ /ci̱kɛ thuɔ̱k.# >>> skjkasdkd.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
# 10
# >>> skjkasdkd.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
# 25
# >>> skjkasdkd.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
# 13
# >>> skjkasdkd.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
# 11
# >>> skjkasdkd.call([0, 81, 12, 3, 1, 21])
# 3
# >>> skjkasdkd.call([0, 8, 1, 2, 1, 7])
# 7
def skjkasdkd(lst)
","def skjkasdkd(lst)
  require 'prime'

  # Find the largest prime number in the array
  largest_prime = lst.select { |num| Prime.prime?(num) }.max
  
  # Return 0 if no prime number is found
  return 0 if largest_prime.nil?

  # Calculate the sum of digits of the largest prime number
  largest_prime.to_s.chars.map(&:to_i).sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_skjkasdkd
    candidate = method(:skjkasdkd)
    assert_equal(10, candidate.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))
    assert_equal(25, candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))
    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))
    assert_equal(11, candidate.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))
    assert_equal(3, candidate.call([0, 81, 12, 3, 1, 21]))
    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))
    assert_equal(19, candidate.call([8191]))
    assert_equal(19, candidate.call([8191, 123456, 127, 7]))
    assert_equal(10, candidate.call([127, 97, 8192]))
  end
end
"
HumanEval_95,nus_Latn,rb,"Cäätni̱: Kä pa̱ŋciin bɛ yi̱k loc i̱ mi̱ ɛ thuɔ̱k ɛ jɛn i̱thtëm ɛ mi̱ te lɔ̱ŋ.Kä mi̱ ca gɔ̱r ɛ la case kiɛ bi̱kɛ diaal ɛ la ti̱ ŋuan ti̱ caa gɔ̱r ɛ la uppercase, mi̱ /ci̱kɛ bi̱ ben ɛ la false.Mi̱ ca ŋun ɛ la mi̱ ca ŋun, bɛ loc ni̱ thuɔ̱k mi̱ ci̱ ki̱i̱ni̱ diaal ɛ ti̱ te kä ci̱ rɔ̱ mat kɛ min kuiyni̱ jɛn.# >>> check_dict_case.call({""a"" => ""apple"", ""b"" => ""banana""})
# true
# >>> check_dict_case.call({""a"" => ""apple"", ""A"" => ""banana"", ""B"" => ""banana""})
# false
# >>> check_dict_case.call({""a"" => ""apple"", 8 => ""banana"", ""a"" => ""apple""})
# false
# >>> check_dict_case.call({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""})
# false
# >>> check_dict_case.call({""STATE"" => ""NC"", ""ZIP"" => ""12345""})
# true
def check_dict_case(dict)
","def check_dict_case(dict)
  return false if dict.empty?

  lowercase_keys = dict.keys.all? { |key| key.is_a?(String) && key == key.downcase }
  uppercase_keys = dict.keys.all? { |key| key.is_a?(String) && key == key.upcase }

  lowercase_keys || uppercase_keys
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_check_dict_case
    candidate = method(:check_dict_case)
    assert_equal(true, candidate.call({""p"" => ""pineapple"", ""b"" => ""banana""}))
    assert_equal(false, candidate.call({""p"" => ""pineapple"", ""A"" => ""banana"", ""B"" => ""banana""}))
    assert_equal(false, candidate.call({""p"" => ""pineapple"", ""5"" => ""banana"", ""a"" => ""apple""}))
    assert_equal(false, candidate.call({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""}))
    assert_equal(true, candidate.call({""STATE"" => ""NC"", ""ZIP"" => ""12345""}))
    assert_equal(true, candidate.call({""fruit"" => ""Orange"", ""taste"" => ""Sweet""}))
    assert_equal(false, candidate.call({}))
  end
end
"
HumanEval_96,nus_Latn,rb,"cäätdɛ: intejeri̱ tin la praam nämbäri̱ kɛnɛ tin kuiyni̱kɛn kä n.Lätdɛ kɛ pa̱ŋcin mi̱ naŋkɛ ni̱ nämbär mi̱ /ci̱ negative kä locni̱ nämbäri̱ tin nhiam kä n # >>> count_up_to.call(5)
# [2, 3]
# >>> count_up_to.call(11)
# [2, 3, 5, 7]
# >>> count_up_to.call(0)
# []
# >>> count_up_to.call(20)
# [2, 3, 5, 7, 11, 13, 17, 19]
# >>> count_up_to.call(1)
# []
# >>> count_up_to.call(18)
# [2, 3, 5, 7, 11, 13, 17]
def count_up_to(n)
","def count_up_to(n)
  return [] if n <= 2
  primes = []
  (2...n).each do |num|
    is_prime = true
    (2..Math.sqrt(num)).each do |i|
      if num % i == 0
        is_prime = false
        break
      end
    end
    primes << num if is_prime
  end
  primes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_up_to
    candidate = method(:count_up_to)
    assert_equal([2, 3], candidate.call(5))
    assert_equal([2, 3, 5], candidate.call(6))
    assert_equal([2, 3, 5], candidate.call(7))
    assert_equal([2, 3, 5, 7], candidate.call(10))
    assert_equal([], candidate.call(0))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19], candidate.call(22))
    assert_equal([], candidate.call(1))
    assert_equal([2, 3, 5, 7, 11, 13, 17], candidate.call(18))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43], candidate.call(47))
    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], candidate.call(101))
  end
end
"
HumanEval_97,nus_Latn,rb,"Cäätni̱: Lätdɛ jɛ i̱ ɛn inpuut bɛ te lät ni̱ ciaaŋ.kä min la matkɛ ɛ nämbäri̱ yunitni̱kiɛn.Mi̱ ci̱ la̱t ɛ wä kä intɛrjiɛri̱ rɛw kä locni̱kɛ # >>> multiply.call(148, 412)
# 16
# >>> multiply.call(19, 28)
# 72
# >>> multiply.call(2020, 1851)
# 0
# >>> multiply.call(14, -15)
# 20
def multiply(a, b)
","def multiply(a, b)
  a_unit_digit = a.abs % 10
  b_unit_digit = b.abs % 10
  a_unit_digit * b_unit_digit
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_multiply
    candidate = method(:multiply)
    assert_equal(16, candidate.call(148, 412))
    assert_equal(72, candidate.call(19, 28))
    assert_equal(0, candidate.call(2020, 1851))
    assert_equal(20, candidate.call(14, -15))
    assert_equal(42, candidate.call(76, 67))
    assert_equal(49, candidate.call(17, 27))
    assert_equal(0, candidate.call(0, 1))
    assert_equal(0, candidate.call(0, 0))
  end
end
"
HumanEval_98,nus_Latn,rb,"Ciee cäät ɛmɛ: Mi ca thärkdɛ ŋun, kuɛn nämbär in ca gɔ̱r kɛ i̱ capital vowels in kuɛnkɛ kä indi̱th.# >>> count_upper.call(""aBCdEf"")
# 1
# >>> count_upper.call(""abcdefg"")
# 0
# >>> count_upper.call(""dBBE"")
# 0
def count_upper(s)
","def count_upper(s)
  vowels = ['A', 'E', 'I', 'O', 'U']
  count = 0

  s.chars.each_with_index do |char, index|
    if index.even? && vowels.include?(char)
      count += 1
    end
  end

  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_upper
    candidate = method(:count_upper)
    assert_equal(1, candidate.call(""aBCdEf""))
    assert_equal(0, candidate.call(""abcdefg""))
    assert_equal(0, candidate.call(""dBBE""))
    assert_equal(0, candidate.call(""B""))
    assert_equal(1, candidate.call(""U""))
    assert_equal(0, candidate.call(""""))
    assert_equal(2, candidate.call(""EEEE""))
  end
end
"
HumanEval_99,nus_Latn,rb,"Cäätni̱ Kä ɛni̱ intejeri̱ rɛw, ba kɛ cu riali̱kä ɛ wä kä dhɛrö.Kä cuɛ loc ni̱ intejiɛr in thi̱a̱k ɛlɔ̱ŋ kɛ jɛ. Mi̱ jɛn nämbär ɛ päär gua̱a̱th in te thi̱n.Lätdɛ kɛ pa̱ŋciin mi̱ naŋkɛ ba̱li̱ö (thtiring) mi̱ cuŋkɛ ɛ la nämbär # >>> closest_integer.call(""10"")
# 10
# >>> closest_integer.call(""15.3"")
# 15
# Note:
# Rounding away from zero means that if the given number is equidistant
# from two integers, the one you should return is the one that is the
# farthest from zero. For example closest_integer(""14.5"") should
# return 15 and closest_integer(""-14.5"") should return -15.
def closest_integer(value)
","def closest_integer(value)
  number = value.to_f
  if number > 0
    (number + 0.5).floor
  else
    (number - 0.5).ceil
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_closest_integer
    candidate = method(:closest_integer)
    assert_equal(10, candidate.call(""10""))
    assert_equal(15, candidate.call(""14.5""))
    assert_equal(-16, candidate.call(""-15.5""))
    assert_equal(15, candidate.call(""15.3""))
    assert_equal(0, candidate.call(""0""))
  end
end
"
HumanEval_100,nus_Latn,rb,"Cäätni̱: i ɛ nämbär pämni̱ rɛy kä ti̱e̱c (i+1).Lätdɛ kɛ pek pämni̱ rɛy kä röm in te kɛrɔ̱, gua̱th in bi̱ ɛlɛmɛni̱ ɛ wɔ̱ kä indi̱th - kä nämbär in dɔ̱ŋ ɛ päär mi̱ n ɛ päär.- kä nämbär in dɔ̱ŋ mi̱ /ci̱ päär mi̱ n ɛ mi̱ /ci̱ päär.Kä pek päämni̱ tin te rɛy la̱t in dɔ̱ŋ ɛ: Kä min nhiamdiɛn ɛ mi̱ tekɛ pääm n.Mi̱ ca ŋun ɛ la mi̱ tekɛ nämbär puɔthtip intejiɛr n, bi̱ ji̱n ɛ la̱t kɛ pääm ti̱ tekɛ n i̱thki̱e̱li̱.# >>> make_a_pile.call(3)
# [3, 5, 7]
def make_a_pile(n)
","def make_a_pile(n)
  result = []
  current_stones = n
  n.times do
    result << current_stones
    current_stones += 2
  end
  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_make_a_pile
    candidate = method(:make_a_pile)
    assert_equal([3, 5, 7], candidate.call(3))
    assert_equal([4, 6, 8, 10], candidate.call(4))
    assert_equal([5, 7, 9, 11, 13], candidate.call(5))
    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))
    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))
  end
end
"
HumanEval_101,nus_Latn,rb,"Ciee cäät ɛmɛ: kɛ däkdɛ kä rieet kɛnɛ locdɛ kɛ rieet ti̱ ŋuan.Bi̱ ji̱n ɛ ji̱n bi̱ ruac mi̱ bi̱ rɔ da̱a̱k kɛ kɔma kiɛ i̱thpëth.# >>> words_string.call(""Hi, my name is John"")
# [""Hi"", ""my"", ""name"", ""is"", ""John""]
# >>> words_string.call(""One, two, three, four, five, six"")
# [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
def words_string(s)
","def words_string(s)
  s.split(/[\s,]+/)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_words_string
    candidate = method(:words_string)
    assert_equal([""Hi"", ""my"", ""name"", ""is"", ""John""], candidate.call(""Hi, my name is John""))
    assert_equal([""One"", ""two"", ""three"", ""four"", ""five"", ""six""], candidate.call(""One, two, three, four, five, six""))
    assert_equal([""Hi"", ""my"", ""name""], candidate.call(""Hi, my name""))
    assert_equal([""One"", ""two"", ""three"", ""four"", ""five"", ""six""], candidate.call(""One,, two, three, four, five, six,""))
    assert_equal([], candidate.call(""""))
    assert_equal([""ahmed"", ""gamal""], candidate.call(""ahmed     , gamal""))
  end
end
"
HumanEval_102,nus_Latn,rb,"Ciee cäät ɛmɛ: /Thiɛlɛ nämbär mi̱ ce̱tkɛ nɔ, kä ba pa̱ŋcin loc ɛ -1ɛ jɛn in di̱tni̱jɛn kä pek in te rɛy gua̱th in te (x,y) thi̱n ɛ matkɛ jɛ.La̱t ɛmɛ naŋɛ nämbäri̱ rɛw ti̱ puci̱tip (positive) x kɛnɛ y kä loc ɛ # >>> choose_num.call(12, 15)
# 14
# >>> choose_num.call(13, 12)
# -1
def choose_num(x, y)
","def choose_num(x, y)
  return -1 if x > y
  # Start looking from the largest number
  max_even = y.even? ? y : y - 1
  # Iterate downwards to find the biggest even number
  max_even.downto(x) do |n|
    return n if n.even?
  end
  -1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_choose_num
    candidate = method(:choose_num)
    assert_equal(14, candidate.call(12, 15))
    assert_equal(-1, candidate.call(13, 12))
    assert_equal(12354, candidate.call(33, 12354))
    assert_equal(-1, candidate.call(5234, 5233))
    assert_equal(28, candidate.call(6, 29))
    assert_equal(-1, candidate.call(27, 10))
    assert_equal(-1, candidate.call(7, 7))
    assert_equal(546, candidate.call(546, 546))
  end
end
"
HumanEval_103,nus_Latn,rb,"Cäät: Mi̱ n ɛ mi̱ di̱tni̱ jɛn kä m, loc -1.Kä cu thöbdɛ cu thia̱k kä intejeri̱ kä cua loc ɛ la baynɛri̱.Mi̱ cɛ wä kä n ɛ wä kä m (amäni̱ n kɛnɛ m)Ji̱n ca ji̱ ka̱m intejeri̱ rɛw ti̱ puci̱tib n kɛnɛ m, kä la̱tdu ɛ ɣöö bi̱ ji̱n ɛ ŋa̱c i̱ ɛ # >>> rounded_avg.call(1, 5)
# ""0b11""
# >>> rounded_avg.call(7, 5)
# -1
# >>> rounded_avg.call(10, 20)
# ""0b1111""
# >>> rounded_avg.call(20, 33)
# ""0b11010""
def rounded_avg(n, m)
","def rounded_avg(n, m)
  return -1 if n > m

  sum = (n..m).reduce(:+)
  count = m - n + 1
  average = (sum.to_f / count).round
  ""0b"" + average.to_i.to_s(2)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_rounded_avg
    candidate = method(:rounded_avg)
    assert_equal(""0b11"", candidate.call(1, 5))
    assert_equal(""0b1010"", candidate.call(7, 13))
    assert_equal(""0b1111001010"", candidate.call(964, 977))
    assert_equal(""0b1111100100"", candidate.call(996, 997))
    assert_equal(""0b1011000010"", candidate.call(560, 851))
    assert_equal(""0b101101110"", candidate.call(185, 546))
    assert_equal(""0b110101101"", candidate.call(362, 496))
    assert_equal(""0b1001110010"", candidate.call(350, 902))
    assert_equal(""0b11010111"", candidate.call(197, 233))
    assert_equal(-1, candidate.call(7, 5))
    assert_equal(-1, candidate.call(5, 1))
    assert_equal(""0b101"", candidate.call(5, 5))
  end
end
"
HumanEval_104,nus_Latn,rb,"Ciee cäät ɛmɛ: Nötar: Array min ca luɔ̱c ba yi̱k la̱th kɛ duɔ̱ɔ̱p mi̱ reep rɔ.ɛlɛmɛni̱ tin thiɛl ɛni̱ pari̱ dijit.Mi̱ ca ŋun ɛ la mi̱ ca mat ɛ la mi̱ tekɛ puɔthtip intejeri̱ x. bi̱ locni̱ mi̱ ca riali̱kä ɛ la mi̱ ca mat ɛ la mi̱ tekɛ # >>> unique_digits.call([15, 33, 1422, 1])
# [1, 15, 33]
# >>> unique_digits.call([152, 323, 1422, 10])
# []
def unique_digits(x)
","def unique_digits(x)
  x.select { |num| num.to_s.chars.none? { |digit| digit.to_i.even? } }.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_unique_digits
    candidate = method(:unique_digits)
    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))
    assert_equal([], candidate.call([152, 323, 1422, 10]))
    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))
    assert_equal([31, 135], candidate.call([135, 103, 31]))
  end
end
"
HumanEval_105,nus_Latn,rb,"Ciee cäät ɛmɛ: ""Kɛl"", ""Kä rɛw"", ""Kä Diɔ̱ɔ̱k"", ""Kä Ŋuaan"", ""Kä Bädäk"", ""Kä Bäkɛl"", ""Kä bärɔw"", ""Kä Bädäk"", ""Kä Däk"".la̱thkɛ ni̱ kä min ci̱ ben raar, kä kɛ kɔrɛ la̱thkɛ ni̱ di̱jit kɛl kɛ ciötdɛ min lot rɔ kä Mi̱ ca ŋun ɛ la mi̱ caa mat ɛ la intejeri̱, ba intejeri̱ tin te kam 1 kɛnɛ 9 cu mat, # >>> by_length.call([2, 1, 1, 4, 5, 8, 2, 3])
# [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
# If the array is empty, return an empty array:
# >>> by_length.call([])
# []
# If the array has any strange number ignore it:
# >>> by_length.call([1, -1, 55])
# [""One""]
def by_length(arr)
","def by_length(arr)
  number_names = {
    1 => ""One"",
    2 => ""Two"",
    3 => ""Three"",
    4 => ""Four"",
    5 => ""Five"",
    6 => ""Six"",
    7 => ""Seven"",
    8 => ""Eight"",
    9 => ""Nine""
  }

  filtered_sorted_reversed = arr.select { |x| x.between?(1, 9) }.sort.reverse
  filtered_sorted_reversed.map { |num| number_names[num] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_by_length
    candidate = method(:by_length)
    assert_equal([""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], candidate.call([2, 1, 1, 4, 5, 8, 2, 3]))
    assert_equal([], candidate.call([]))
    assert_equal([""One""], candidate.call([1, -1, 55]))
    assert_equal([""Three"", ""Two"", ""One""], candidate.call([1, -1, 3, 2]))
    assert_equal([""Nine"", ""Eight"", ""Four""], candidate.call([9, 4, 8]))
  end
end
"
HumanEval_106,nus_Latn,rb,"Cäät: Kä paktɔriɔl duŋ i ɛ mi̱ la di̱tni̱ jɛn kä nämbäri̱ tin la̱tkɛ ɛ 1 ɛ wä kä i (1 * 2 * ... * i).i bɛ tok kä 1. kiɛ mat nämbäri̱ kä 1 ɛ wä kä i mi̱ dɔ̱ŋ.kä cuɛ loc ɛ la mi̱ ca mat kä di̱i̱t n, ce̱tkɛ mi̱ ɛ jɛn ba̱li̱öm duŋ elɛmɛni̱ kä indi̱dhɛth i ɛ jɛn paktɔri̱al duŋ i mi̱ i ɛ pa̱r.Lätdɛ kɛ pa̱ŋciin f min naŋ n cie parami̱tɛr, # >>> f.call(5)
# [1, 2, 6, 24, 15]
def f(n)
","def f(n)
  (1..n).map do |i|
    if i.even?
      (1..i).inject(:*) || 1
    else
      (1..i).inject(:+)
    end
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_f
    candidate = method(:f)
    assert_equal([1, 2, 6, 24, 15], candidate.call(5))
    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))
    assert_equal([1], candidate.call(1))
    assert_equal([1, 2, 6], candidate.call(3))
  end
end
"
HumanEval_107,nus_Latn,rb,"Cäät 1: intejiɛr palindrɔmi̱ tin la pɛn rɛy gua̱th in te ((1, n), ɛ matkɛ.Mi̱ ca ŋun ɛ la mi̱ tekɛ puɔthtip intejiɛr n, locni̱ array mi̱ tekɛ nämbär duŋ pari̱ kɛnɛ pa̱r # >>> even_odd_palindrome.call(3)
# [1, 2]
# Explanation:
# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
# Example 2:
# >>> even_odd_palindrome.call(12)
# [4, 6]
# Explanation:
# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
# Note:
# 1. 1 <= n <= 10^3
# 2. returned array has the number of even and odd integer palindromes respectively.
def even_odd_palindrome(n)
","def even_odd_palindrome(n)
  even_count = 0
  odd_count = 0

  (1..n).each do |num|
    if num.to_s == num.to_s.reverse
      if num.even?
        even_count += 1
      else
        odd_count += 1
      end
    end
  end

  [even_count, odd_count]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_even_odd_palindrome
    candidate = method(:even_odd_palindrome)
    assert_equal([8, 13], candidate.call(123))
    assert_equal([4, 6], candidate.call(12))
    assert_equal([1, 2], candidate.call(3))
    assert_equal([6, 8], candidate.call(63))
    assert_equal([5, 6], candidate.call(25))
    assert_equal([4, 6], candidate.call(19))
    assert_equal([4, 5], candidate.call(9))
    assert_equal([0, 1], candidate.call(1))
  end
end
"
HumanEval_108,nus_Latn,rb,"c.d. -123 cɛ di̱jitni̱ -1, 2, kɛnɛ 3.Mi̱ ci̱ nämbär ɛ mi̱negɛtib, kä ɛn di̱jit in nhiam in ca la̱th thi̱n bɛ cu te ni̱negɛtib: Kä nämbäri̱ ɛlɛmɛni̱ tin tekɛ dääkä di̱ji̱tni̱ > 0.Gɔ̱r la̱t mi̱ cɔali̱ count_nums min naŋɛ ni̱ intɛrjiɛrni̱ ti̱ ŋuan kä locni̱kɛ # >>> count_nums.call([])
# 0
# >>> count_nums.call([-1, 11, -11])
# 1
# >>> count_nums.call([1, 1, 2])
# 3
def count_nums(arr)
","def count_nums(arr)
  arr.count do |num|
    num.to_s.chars.map(&:to_i).sum > 0
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_count_nums
    candidate = method(:count_nums)
    assert_equal(0, candidate.call([]))
    assert_equal(0, candidate.call([-1, -2, 0]))
    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))
    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))
    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))
    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))
    assert_equal(1, candidate.call([0, 1]))
    assert_equal(1, candidate.call([1]))
  end
end
"
HumanEval_109,nus_Latn,rb,"Ciee cäät ɛmɛ: Nötar: Kä matrik ɛ ca ŋun i̱ bɛ tekɛ ɛlɛmɛni̱ ti̱ gööl.Mi̱ ca ŋun ɛ la mi̱ /thiɛl luɔt kä matrɛy bɛ loc ni̱ thuɔ̱k.mi̱ ci̱kɛ thuɔ̱k, bi̱kɛ loc ɛ la kac.Mi̱ jɛn lotdɛ rɔ kɛ ɣöö ba mat kä mi̱ ca riali̱kä ɛ la̱t ɛ te nhial ɛ la̱t in te nhial.Kä gua̱th in tokɛ rɔ thi̱n rɛy arɛthi̱ min la 0th indi̱dhɛth.Kä ɛlɛmɛni̱ tin jɔak kä arrɛy ba kɛ naŋ kä Mi̱ ci̱ duɔ̱ɔ̱r rɔ gɛɛr ɛ wä kui̱c ɛ la ɣöö bi̱ kɛn ɛlɛmɛni̱ diaal rɔ̱ gɛɛr ɛ la kɛl.Deri̱ la̱t mi̱ ci̱e̱ mi̱ ci̱e̱ mi̱ ci̱e̱ mi̱ ci̱e̱ mi̱ ci̱e̱ mi̱ ci̱e̱ mi̱ ci̱e̱ mi̱ ci̱e̱ mi̱ ci̱e̱.Kä la̱t in ba la̱t kä matkɛ: ɛ jɛn min dë jiek kɛ ɣöö ba mat ɛ la mi̱ ca riali̱kä rɛy kä mi̱ /ci̱ rɔ bi̱ kuɛ̈ɛ̈ kɛ läthdɛ lät Näkni̱ nämbäri̱ rɛy arrɛy ba kɛ riali̱kä kɛ duɔ̱ɔ̱p mi̱ ca kɔn riali̱kä.Ta̱nɛ kɛ matrik 'arr' duŋ N intejeri̱ arr[1], arr[2], ..., arr[N].# >>> move_one_ball.call([3, 4, 5, 1, 2])
# true
# Explanation: By performin 2 right shift operations, non-decreasing order can
# be achieved for the given array.
# >>> move_one_ball.call([3, 5, 4, 1, 2])
# false
# Explanation:It is not possible to get non-decreasing order for the given
# array by performing any number of right shift operations.
def move_one_ball(arr)
","def move_one_ball(arr)
  return true if arr.empty?

  n = arr.size
  count_rotation_point = 0
  rotation_index = -1

  (0...n).each do |i|
    next_index = (i + 1) % n
    if arr[i] > arr[next_index]
      count_rotation_point += 1
      rotation_index = next_index
    end
  end

  count_rotation_point <= 1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_move_one_ball
    candidate = method(:move_one_ball)
    assert_equal(true, candidate.call([3, 4, 5, 1, 2]))
    assert_equal(true, candidate.call([3, 5, 10, 1, 2]))
    assert_equal(false, candidate.call([4, 3, 1, 2]))
    assert_equal(false, candidate.call([3, 5, 4, 1, 2]))
    assert_equal(true, candidate.call([]))
  end
end
"
HumanEval_110,nus_Latn,rb,"Ciee cäät ɛmɛ: Mi̱ /ci̱ ɛ jɛn, locni̱ ""ƔËË"".Kä ɛni̱ elɛmɛni̱ diaal kä lst1 kɛ ɣöö ba pa̱a̱r, luɔ̱c ""YƐƐ"".Mi̱ ca rɔ lot kɛ ɣöö ba ŋɔaani̱ gɛɛr kam lst1 kɛnɛ lst2 kɛ ɣöö ba kɛ la̱t /Thiɛlɛ mi̱ ca thɛm kä nämbär in ba la̱th thi̱n kam lst1 kɛnɛ lst2.Kä kɛ kɔrɛ, ɛni̱ mi̱ ca mat kä ɛni̱ nämbäri̱ tin te kɛɛl kärɔ̱.kä bɛ ji̱ek mi̱ de rɔ lot kɛ ɣöö ba la̱t ɛ la̱t mi̱ ci̱ rɔ gɛr kɛ tin kɔ̱ŋ Rɛy ri̱e̱e̱tni̱ ti̱ti̱, bi̱ ji̱n lät kɛ pa̱ŋcin mi̱ naŋɛ nämbäri̱ rɛw ti̱ ca mat, # >>> exchange.call([1, 2, 3, 4], [1, 2, 3, 4])
# ""YES""
# >>> exchange.call([1, 2, 3, 4], [1, 5, 3, 4])
# ""NO""
# It is assumed that the input arrays will be non-empty.
def exchange(lst1, lst2)
","def exchange(lst1, lst2)
  # Check if lst1 already consists solely of even numbers
  return ""YES"" if lst1.all?(&:even?)

  # Check if there are at least as many even numbers in lst2
  # as there are odd numbers in lst1
  odd_count_lst1 = lst1.count(&:odd?)
  even_count_lst2 = lst2.count(&:even?)

  odd_count_lst1 <= even_count_lst2 ? ""YES"" : ""NO""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_exchange
    candidate = method(:exchange)
    assert_equal(""YES"", candidate.call([1, 2, 3, 4], [1, 2, 3, 4]))
    assert_equal(""NO"", candidate.call([1, 2, 3, 4], [1, 5, 3, 4]))
    assert_equal(""YES"", candidate.call([1, 2, 3, 4], [2, 1, 4, 3]))
    assert_equal(""YES"", candidate.call([5, 7, 3], [2, 6, 4]))
    assert_equal(""NO"", candidate.call([5, 7, 3], [2, 6, 3]))
    assert_equal(""NO"", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))
    assert_equal(""YES"", candidate.call([100, 200], [200, 200]))
  end
end
"
HumanEval_111,nus_Latn,rb,"Cäät: Mi̱ ci̱ warɛgakni̱ ti̱ ŋuan te kɛɛl, locni̱kɛ diaal.Kä wargak in caa loc ni̱ ciaaŋ kä tä kɛ pek in lot rɔ.Mi̱ ca ŋun ɛ la i̱thtiring mi̱ cuŋkɛ ɛ la i̱thti̱ri̱ tin tɔatni̱ tin caa da̱a̱k ɛ kam, locni̱ ɣash # >>> histogram.call(""a b c"")
# {""a"" => 1, ""b"" => 1, ""c"" => 1}
# >>> histogram.call(""a b b a"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram.call(""a b c a b"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram.call(""b b b b a"")
# {""b"" => 4}
# >>> histogram.call("""")
# {}
def histogram(test)
","def histogram(test)
  return {} if test.empty?

  count = Hash.new(0)

  test.split.each do |char|
    count[char] += 1
  end

  max_count = count.values.max
  count.select { |_, value| value == max_count }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_histogram
    candidate = method(:histogram)
    assert_equal({""a"" => 2, ""b"" => 2}, candidate.call(""a b b a""))
    assert_equal({""a"" => 2, ""b"" => 2}, candidate.call(""a b c a b""))
    assert_equal({""a"" => 1, ""b"" => 1, ""c"" => 1, ""d"" => 1, ""g"" => 1}, candidate.call(""a b c d g""))
    assert_equal({""r"" => 1, ""t"" => 1, ""g"" => 1}, candidate.call(""r t g""))
    assert_equal({""b"" => 4}, candidate.call(""b b b b a""))
    assert_equal({""r"" => 1, ""t"" => 1, ""g"" => 1}, candidate.call(""r t g""))
    assert_equal({}, candidate.call(""""))
    assert_equal({""a"" => 1}, candidate.call(""a""))
  end
end
"
HumanEval_112,nus_Latn,rb,"Cäät Bi̱di̱i̱ bi̱ yi̱k loc ɛ la arrɛy mi̱ te kä min bi̱ ben raar kä bi̱ thuɔ̱k/ji̱ääk kɛ kui̱ thëm.Ɛ thi̱ri̱ndɛr cɔalɛ palindrɔm mi̱ jɛn kuɛnɛ ni̱ duɔ̱ɔ̱p kɛl mi̱ päär kɛ min ca gɔ̱r jɔkdɛ kɛnɛ nhiamdɛ.Kä kɛ kɔrɛ ba guic mi̱ ci̱ min bi̱ ben raar ɛ pa̱li̱ndrɔm.Kɔn ka̱mnɛ ni̱ käl rɛw ti̱ cɔali̱ s kɛnɛ c, bi̱ kɔn ɛ dhil woc kä käl tin tä kä s tin päärkɛ kɛ käl tin tä kä c.La̱t # >>> reverse_delete.call(""abcde"", ""ae"")
# [""bcd"", false]
# >>> reverse_delete.call(""abcdef"", ""b"")
# [""acdef"", false]
# >>> reverse_delete.call(""abcdedcba"", ""ab"")
# [""cdedc"", true]
def reverse_delete(s, c)
","def reverse_delete(s, c)
  # Remove all characters in c from s
  filtered_string = s.delete(c)
  
  # Check if the filtered string is a palindrome
  is_palindrome = filtered_string == filtered_string.reverse
  
  # Return the result array
  [filtered_string, is_palindrome]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_reverse_delete
    candidate = method(:reverse_delete)
    assert_equal([""bcd"", false], candidate.call(""abcde"", ""ae""))
    assert_equal([""acdef"", false], candidate.call(""abcdef"", ""b""))
    assert_equal([""cdedc"", true], candidate.call(""abcdedcba"", ""ab""))
    assert_equal([""dik"", false], candidate.call(""dwik"", ""w""))
    assert_equal(["""", true], candidate.call(""a"", ""a""))
    assert_equal([""abcdedcba"", true], candidate.call(""abcdedcba"", """"))
    assert_equal([""abcdedcba"", true], candidate.call(""abcdedcba"", ""v""))
    assert_equal([""abba"", true], candidate.call(""vabba"", ""v""))
    assert_equal(["""", true], candidate.call(""mamma"", ""mia""))
  end
end
"
HumanEval_113,nus_Latn,rb,"Kä ɛni̱ di̱jitni̱ tin /ci̱ tɔt rɛy i̱thtring kä inpuut.Kä i̱thti̱riŋ i̱thti̱riŋ in caa kuëŋ thi̱n. "" gua̱th in bi̱ i̱thti̱riŋni̱ diaal cua kɛ gɛr ɛ nämbär Ɛlɛmɛni̱ tin la̱tkɛ raar i bi̱ kɛnɛ nämbär ɛlɛmɛni̱ tin /ci̱ tɔ̱ a kɛl rɛy Mi̱ ca ŋun ɛ la mi̱ ca mat ɛ la mi̱ ca la̱t kɛ kuur, gua̱th in bi̱ kuur ɛ naŋ ni̱ di̱jitni̱ kärɔ̱, bi̱ loc ɛ la mi̱ ca mat ɛ la kuur.# >>> odd_count.call([""1234567""])
# [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
# >>> odd_count.call([""3"", ""11111111""])
# [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
def odd_count(lst)
","def odd_count(lst)
  lst.map do |num_str|
    count = num_str.count('13579')
    ""the number of odd elements #{count}n the str#{count}ng #{count} of the #{count}nput.""
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_odd_count
    candidate = method(:odd_count)
    assert_equal([""the number of odd elements 4n the str4ng 4 of the 4nput.""], candidate.call([""1234567""]))
    assert_equal([""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], candidate.call([""3"", ""11111111""]))
    assert_equal([""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""], candidate.call([""271"", ""137"", ""314""]))
  end
end
"
HumanEval_114,nus_Latn,rb,"Cäät ɛ nums. Mi̱ ca ŋun ɛ la mi̱ caa mat kä intɛrjiɛrni̱, ji̱n bi̱ min tɔt kä tin /ci̱ te baaŋ kä matkɛ ɛ jek.# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])
# 1
# >>> minSubArraySum.call([-1, -2, -3])
# -6
def minSubArraySum(nums)
","def minSubArraySum(nums)
  min_sum = nums[0]
  current_sum = 0
  nums.each do |num|
    if current_sum > 0
      current_sum = num
    else
      current_sum += num
    end
    min_sum = [min_sum, current_sum].min
  end
  min_sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_minSubArraySum
    candidate = method(:minSubArraySum)
    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))
    assert_equal(-6, candidate.call([-1, -2, -3]))
    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))
    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))
    assert_equal(0, candidate.call([0, 10, 20, 1000000]))
    assert_equal(-6, candidate.call([-1, -2, -3, 10, -5]))
    assert_equal(-6, candidate.call([100, -1, -2, -3, 10, -5]))
    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))
    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))
    assert_equal(-10, candidate.call([-10]))
    assert_equal(7, candidate.call([7]))
    assert_equal(-1, candidate.call([1, -1]))
  end
end
"
HumanEval_115,nus_Latn,rb,"Cäät 1: Nyoth pek in go̱o̱ri kɛ ɣöö bi̱ ji̱o̱mni̱ tin la̱tkɛ kɛ bi̱ɛl wä piny.La̱tdu ɛ ɣöö bi̱ ji̱th tin te rɛy yiëër diaal luäŋ kɛ pi̱eth.Kä kɛn dha̱a̱ri̱ diaal tekɛ kɛ lua̱ŋ mi̱ päär.Gua̱th pi̱i̱ni̱ diaal tekɛ kɛ mi̱ la̱tkɛ kɛ kui̱ pi̱i̱ni̱ tin dëë ka̱m raar thi̱n,kä 1 ɛ kɛl rɛy la̱t ɛ nyothɛ yunit kɛl mi̱ la pi̱w.Ji̱n caa ji̱ moc kɛ gua̱a̱th mi̱ cuŋ ɛ la mi̱ ca la̱th gua̱a̱thdɛ.# >>> max_fill.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
# 6
# Example 2:
# >>> max_fill.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
# 5
# Example 3:
# >>> max_fill.call([[0, 0, 0], [0, 0, 0]], 5)
# 0
# Constraints:
# * all wells have the same length
# * 1 <= grid.length <= 10^2
# * 1 <= grid[:,1].length <= 10^2
# * grid[i][j] -> 0 | 1
# * 1 <= capacity <= 10
def max_fill(grid, capacity)
","def max_fill(grid, capacity)
  total_water_units = grid.flatten.sum
  (total_water_units.to_f / capacity).ceil
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_max_fill
    candidate = method(:max_fill)
    assert_equal(6, candidate.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))
    assert_equal(5, candidate.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2))
    assert_equal(0, candidate.call([[0, 0, 0], [0, 0, 0]], 5))
    assert_equal(4, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 2))
    assert_equal(2, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 9))
  end
end
"
HumanEval_116,nus_Latn,rb,"Jɛn ba yi̱k la̱t kɛ duɔ̱ɔ̱p ɛmɛ:Kɛ kui̱ nämbäri̱ ti̱ cäät kä kɛl, ba kɛ da̱a̱k kɛ ɣöö ba pek decimal kulɛ jiek.pek in tekɛ kɛl rɛy bainäri̱diɛn kɛ ɣöö bɛ rɔ re̱p.Rɛy kä Kata, bi̱ ji̱n ɛ go̱r i̱ bi̱ ji̱n ɛ la mi̱ /ci̱ te rɛy negɛtib intejeri̱ kɛ duɔ̱ɔ̱p mi̱ ci̱e̱ # >>> sort_array.call([1, 5, 2, 3, 4])
# [1, 2, 3, 4, 5]
# >>> sort_array.call([-2, -3, -4, -5, -6])
# [-6, -5, -4, -3, -2]
# >>> sort_array.call([1, 0, 2, 3, 4])
# [0, 1, 2, 3, 4]
def sort_array(arr)
","def sort_array(arr)
  arr.sort_by { |n| [n.to_s(2).count('1'), n] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sort_array
    candidate = method(:sort_array)
    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))
    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))
    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))
    assert_equal([], candidate.call([]))
    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))
    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))
    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))
    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))
  end
end
"
HumanEval_117,nus_Latn,rb,"Cäätni̱: Nöth: deri̱ jɛ car i̱ kɛn inpuɔɔ thi̱nrɛdni̱ tekɛ kɛɛ wargakni̱ kɛnɛ i̱thpëthni̱ kärɔ̱.Mi̱ ci̱ ki̱rɛnd s te baaŋ kä bi̱ pa̱ŋciin ɛ nyɔk kɛ loc ɛ la mi̱ thiɛl ba̱li̱.n kɛ̈l kɛ̈ɛ̈li̱, kɛ ɣöö bi̱ kɛn rieet ti̱ti̱ jɔɔc rɛy thärkälä s. la̱t mi̱ locni̱ rie̱t diaal kä ci̱ɛrkä s tin tekɛ ɛ päär Mi̱ ca ŋun ɛ la thärkdɛ (string) kɛnɛ näci̱ral nämbär (natural number), bi̱ ji̱n ɛ la̱t kɛ ɣöö bi̱ la̱t ɛ mɔ la̱t.# >>> select_words.call(""Mary had a little lamb"", 4)
# [""little""]
# >>> select_words.call(""Mary had a little lamb"", 3)
# [""Mary"", ""lamb""]
# >>> select_words.call(""simple white space"", 2)
# []
# >>> select_words.call(""Hello world"", 4)
# [""world""]
# >>> select_words.call(""Uncle sam"", 3)
# [""Uncle""]
def select_words(s, n)
","def select_words(s, n)
  vowels = ""aeiouAEIOU""
  words = s.split
  words.select do |word|
    consonant_count = word.chars.count { |char| !vowels.include?(char) }
    consonant_count == n
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_select_words
    candidate = method(:select_words)
    assert_equal([""little""], candidate.call(""Mary had a little lamb"", 4))
    assert_equal([""Mary"", ""lamb""], candidate.call(""Mary had a little lamb"", 3))
    assert_equal([], candidate.call(""simple white space"", 2))
    assert_equal([""world""], candidate.call(""Hello world"", 4))
    assert_equal([""Uncle""], candidate.call(""Uncle sam"", 3))
    assert_equal([], candidate.call("""", 4))
    assert_equal([""b"", ""c"", ""d"", ""f""], candidate.call(""a b c d e f"", 1))
  end
end
"
HumanEval_118,nus_Latn,rb,"Cäät: Deri jɛ car i̱ ɛn thärk in ca ŋun bɛ tekɛ lɛt Ji̱ Liŋli̱th kärɔa.jekni min la jɔc ɛ te thi̱n kä min ca lat ɛ nhial.Mi̱ ci̱ i̱thkuɛrni̱ te rɛy tukädɛ kɛnɛ guutdɛ /ca bi̱ kuɛn. Mi̱ ci̱ i̱thkuɛrni̱ te jɔ̱ɔ̱r, bi̱ kɛ cu loc ɛ la i̱thkuɛrni̱ ti̱ thiɛl luɔt.Kɛn gua̱th da̱ŋ rɛw tin te kamdiɛn ɛ wä kui̱c cuëëc kä ri̱e̱t (kä cɛrika in di̱t).Ji̱n ca ji̱ moc riet. La̱tdu ɛ ɣöö bi riet mi̱ thia̱k jek mi̱ te kamdiɛn.# >>> get_closest_vowel.call(""yogurt"")
# ""u""
# >>> get_closest_vowel.call(""FULL"")
# ""U""
# >>> get_closest_vowel.call(""quick"")
# """"
# >>> get_closest_vowel.call(""ab"")
# """"
def get_closest_vowel(word)
","def get_closest_vowel(word)
  vowels = ""aeiouAEIOU""
  (1...word.length - 1).reverse_each do |i|
    if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])
      return word[i]
    end
  end
  return """"
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_closest_vowel
    candidate = method(:get_closest_vowel)
    assert_equal(""u"", candidate.call(""yogurt""))
    assert_equal(""u"", candidate.call(""full""))
    assert_equal("""", candidate.call(""easy""))
    assert_equal("""", candidate.call(""eAsy""))
    assert_equal("""", candidate.call(""ali""))
    assert_equal(""a"", candidate.call(""bad""))
    assert_equal(""o"", candidate.call(""most""))
    assert_equal("""", candidate.call(""ab""))
    assert_equal("""", candidate.call(""ba""))
    assert_equal("""", candidate.call(""quick""))
    assert_equal(""i"", candidate.call(""anime""))
    assert_equal("""", candidate.call(""Asia""))
    assert_equal(""o"", candidate.call(""Above""))
  end
end
"
HumanEval_119,nus_Latn,rb,"Cäätni̱: Lɔ̱k 'Ɣɔ̱ɔ̱n' mi̱ tëëkɛ duɔ̱ɔ̱p mi̱ ba la̱t ɛ la mi̱ gɔaa, kä lɔ̱k '/Cɛ' mi̱ dɔ̱ŋ."" (()) "" /ciɛ jɛn.ɛ ti̱ caa pa̱a̱r. Cäätdɛ: ɛn thärkɛn '(()))) ɛ mi̱ gɔaa, kä thärkɛn Ɛ thi̱rɛnd S caar jɛ i̱ de gɔaa mi̱ kɛnɛ ɛni̱ mi̱ kɛn parenteethethethni̱ diaal rɛy S tha̱a̱ŋ la̱t, min bi̱ ben raar bɛ a mi̱ gɔaa.La̱tdu ɛ ɣöö bi̱ ji̱n ɛ ŋa̱c i̱ de rɔ lot kɛ ɣöö bi̱ kɛn rɛw ti̱ti̱ mat kɛɛl rɛy gua̱th in ci̱kɛ thuɔ̱k.kɛ kamni̱ tin te "" (() "" kiɛ kamni̱ tin te "") "" kärɔ̱.Ji̱n caa ji̱ moc kɛ mat kä ti̱ ŋuan ti̱ caa la̱t ɛ kɛn rɛw, kɛn rɛw ti̱ti̱ laa kɛ laa lɛpkɛ.# >>> match_parens.call([""()("", "")""])
# ""Yes""
# >>> match_parens.call(["")"", "")""])
# ""No""
def match_parens(lst)
","def match_parens(lst)
  a, b = lst

  # Define a helper method to check if a string is balanced
  def balanced?(s)
    count = 0
    s.each_char do |c|
      count += 1 if c == '('
      count -= 1 if c == ')'
      return false if count < 0
    end
    count == 0
  end

  # Check if either concatenation forms a good string
  if balanced?(a + b) || balanced?(b + a)
    ""Yes""
  else
    ""No""
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_match_parens
    candidate = method(:match_parens)
    assert_equal(""Yes"", candidate.call([""()("", "")""]))
    assert_equal(""No"", candidate.call(["")"", "")""]))
    assert_equal(""No"", candidate.call([""(()(())"", ""())())""]))
    assert_equal(""Yes"", candidate.call(["")())"", ""(()()(""]))
    assert_equal(""Yes"", candidate.call([""(())))"", ""(()())((""]))
    assert_equal(""No"", candidate.call([""()"", ""())""]))
    assert_equal(""Yes"", candidate.call([""(()("", ""()))()""]))
    assert_equal(""No"", candidate.call([""(((("", ""((())""]))
    assert_equal(""No"", candidate.call(["")(()"", ""(()(""]))
    assert_equal(""No"", candidate.call(["")("", "")(""]))
    assert_equal(""Yes"", candidate.call([""("", "")""]))
    assert_equal(""Yes"", candidate.call(["")"", ""(""]))
  end
end
"
HumanEval_120,nus_Latn,rb,"Cäät 1: kä räthdɛ kä k kä ɛ mi̱ di̱i̱t kä k nämbäri̱ rɛy arr.Mi̱ ca ŋun ɛ la array arr duŋ intejeri̱ kɛnɛ puɔ̱thi̱tip intejeri̱ k, locni̱ thortdä array # >>> maximum.call([-3, -4, 5], 3)
# [-4, -3, 5]
# Example 2:
# >>> maximum.call([4, -4, 4], 2)
# [4, 4]
# Example 3:
# >>> maximum.call([-3, 2, 1, 2, -1, -2, 1], 1)
# [2]
# Note:
# 1. The length of the array will be in the range of [1, 1000].
# 2. The elements in the array will be in the range of [-1000, 1000].
# 3. 0 <= k <= len(arr)
def maximum(arr, k)
","def maximum(arr, k)
  arr.sort.last(k).sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_maximum
    candidate = method(:maximum)
    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))
    assert_equal([4, 4], candidate.call([4, -4, 4], 2))
    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))
    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))
    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))
    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))
    assert_equal([3, 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))
    assert_equal([5], candidate.call([1, 0, 5, -7], 1))
    assert_equal([-4, 4], candidate.call([4, -4], 2))
    assert_equal([-10, 10], candidate.call([-10, 10], 2))
    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0], 0))
  end
end
"
HumanEval_121,nus_Latn,rb,"Cäätni̱ Mi̱ ca ŋun ɛ la mi̱ /ci̱ te baaŋ kä intɛrjiɛr, locni̱ mat kä ɛlɛmɛni̱ diaal tin /ci̱ tɔ̱a̱a̱ tɔ̱a̱a̱diɛn kä tekɛ gua̱th ti̱ päär.# >>> solution.call([5, 8, 7, 1])
# 12
# >>> solution.call([3, 3, 3, 3, 3])
# 9
# >>> solution.call([30, 13, 24, 321])
# 0
def solution(lst)
","def solution(lst)
  lst.each_with_index.reduce(0) do |sum, (val, idx)|
    (idx.even? && val.odd?) ? sum + val : sum
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solution
    candidate = method(:solution)
    assert_equal(12, candidate.call([5, 8, 7, 1]))
    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))
    assert_equal(0, candidate.call([30, 13, 24, 321]))
    assert_equal(5, candidate.call([5, 9]))
    assert_equal(0, candidate.call([2, 4, 8]))
    assert_equal(23, candidate.call([30, 13, 23, 32]))
    assert_equal(3, candidate.call([3, 13, 2, 9]))
  end
end
"
HumanEval_122,nus_Latn,rb,"Cäät: Kä mat ŋɔaani̱ tin tekɛ di̱jitni̱ rɛw ɛlɔ̱ŋ kä kɛn tin nhiam k tin te kä arr.Mi̱ ca ŋun ɛ la mi̱ /ci̱ la duŋ intɛrjiɛr arr kɛnɛ intɛrjiɛr k, locni̱ # >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
# 24
# Constraints:
# 1. 1 <= len(arr) <= 100
# 2. 1 <= k <= len(arr)
def add_elements(arr, k)
","def add_elements(arr, k)
  arr.first(k).select { |num| num.abs.to_s.length <= 2 }.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_add_elements
    candidate = method(:add_elements)
    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))
    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))
    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))
    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))
    assert_equal(1, candidate.call([1], 1))
  end
end
"
HumanEval_123,nus_Latn,rb,"get_odd_collatz(5) locni̱ [1, 5] # Kä collatz thekuɛnthi̱ kɛ kui̱ 5 ɛ [5, 16, 8, 4, 2, 1], kɛ kui̱c ɛmɔ nämbäri̱ tin /ci̱ tɔ̱ a kɛl ɛ 1, kɛnɛ 5. Ciee cäät ɛmɛ: 2. cu kɛnɛ loc ɛ la mi̱ ca riali̱kä kɛ ɣöö bi̱ kɛ rɔ̱ rep.1. Collatz ((1) ɛ [1]. Nöt: Kä kɔnjeciɛr ɛ jɛn i̱ ɛni̱ mi̱ tekɛ luɔt kä n, bi̱ thi̱kuɛnthi̱ ni̱ ciaaŋ cop 1.Mi̱ ci̱ ci̱öl ëë nhiam ɛ mi̱ /ci̱ päär, bi̱ ci̱öl in dɔ̱ŋ ɛ mi̱ ca loc ɛ 3 kä ci̱öl ëë nhiam.kɛ kɔr kä mi̱ ci̱kɛ te kɛɛl, bi̱ kɛ cu te kɛɛl ɛ la nuth kä cetkɛ min ba lat: tokɛ kɛ pek mi̱ tekɛ thuɔ̱k mi̱ ca mat ɛ la intejeri̱ n. Kä kɛ kɔrɛ ba mi̱ ca mat ɛ la mi̱ ji̱o̱li̱kɛn ɛ jiek kä Kä Köllatdh kɔnjeciɛr ɛ kɔnjeciɛr rɛy mɛthä min ruac kɛ kui̱ kä min ca lat kä thi̱kuɛnthi̱ Mi̱ ca ŋun ɛ la mi̱ tekɛ puɔthtip intejiɛr n, locni̱ thortdä ari̱i̱ min tekɛ nämbäri̱ ti̱ ji̱di̱tni̱ rɛy kɔla̱tdh thekuɛnthi̱.# >>> get_odd_collatz.call(5)
# [1, 5]
def get_odd_collatz(n)
","def get_odd_collatz(n)
  collatz_sequence = []
  while n != 1
    collatz_sequence << n if n.odd?
    if n.even?
      n = n / 2
    else
      n = 3 * n + 1
    end
  end
  collatz_sequence << 1 if n == 1

  collatz_sequence.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_odd_collatz
    candidate = method(:get_odd_collatz)
    assert_equal([1, 5, 7, 11, 13, 17], candidate.call(14))
    assert_equal([1, 5], candidate.call(5))
    assert_equal([1, 3, 5], candidate.call(12))
    assert_equal([1], candidate.call(1))
  end
end
"
HumanEval_124,nus_Latn,rb,"4.Ɛ cäŋ ɛmɔ ba̱rɛ ɛ mi̱ ca la̱t kɛ ca̱p mi̱ cie: mm-dd-yyyy 3. Kä päth /ci̱kɛ bi̱ te piny 1 kiɛ bi̱ di̱t ni̱ kä 12.2. /Ci̱ pek ni̱ni̱ tɔ̱tɔ̱ bi̱ kuɛ̈ɛ̈ ni̱ kä 1 kiɛ bi̱kɛ di̱t ni̱ kä 31 kɛ päth 1,3,5,7,8,10,12. /Ci̱ pek ni̱ni̱ tɔ̱tɔ̱ bi̱ kuɛ̈ɛ̈ ni̱ kä 1 kiɛ bi̱kɛ di̱t ni̱ kä 30 kɛ päth 4,6,9,11. /Ci̱ pek ni̱ni̱ tɔ̱tɔ̱ bi̱ kuɛ̈ɛ̈ ni̱ kä 1 kiɛ bi̱kɛ di̱t ni̱ kä 29 kɛ päth 2.1. Kä cäŋ ɛ/ciɛɛ mi̱ te jɔ̱ɔ̱r.Ɛn cäŋ ɛ mi̱ la thuɔ̱k mi̱ caa ŋuɔ̱t ti̱ti̱ diaal la̱th thi̱n:loc ni thuɔ̱k mi ca cäŋ ɛ thuɔ̱k mi ci mɔ a kac.Ji̱n bi̱ la̱t mi̱ bi̱ la̱t mi̱ ca ŋun kä bi̱ cäŋ ɛ ci̱ ben kä bi̱ # >>> valid_date.call(""03-11-2000"")
# true
# >>> valid_date.call(""15-01-2012"")
# false
# >>> valid_date.call(""04-0-2040"")
# false
# >>> valid_date.call(""06-04-2020"")
# true
# >>> valid_date.call(""06/04/2020"")
# false
def valid_date(date)
","def valid_date(date)
  return false if date.nil? || date.empty?
  
  # Check if the date format is correct
  match = date.match(/^(\d{2})-(\d{2})-(\d{4})$/)
  return false unless match
  
  month, day, year = match.captures.map(&:to_i)
  
  # Check if month is valid
  return false if month < 1 || month > 12
  
  # Check if day is valid according to the month
  case month
  when 1, 3, 5, 7, 8, 10, 12
    return day >= 1 && day <= 31
  when 4, 6, 9, 11
    return day >= 1 && day <= 30
  when 2
    return day >= 1 && day <= 29
  else
    return false
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_valid_date
    candidate = method(:valid_date)
    assert_equal(true, candidate.call(""03-11-2000""))
    assert_equal(false, candidate.call(""15-01-2012""))
    assert_equal(false, candidate.call(""04-0-2040""))
    assert_equal(true, candidate.call(""06-04-2020""))
    assert_equal(true, candidate.call(""01-01-2007""))
    assert_equal(false, candidate.call(""03-32-2011""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""04-31-3000""))
    assert_equal(true, candidate.call(""06-06-2005""))
    assert_equal(false, candidate.call(""21-31-2000""))
    assert_equal(true, candidate.call(""04-12-2003""))
    assert_equal(false, candidate.call(""04122003""))
    assert_equal(false, candidate.call(""20030412""))
    assert_equal(false, candidate.call(""2003-04""))
    assert_equal(false, candidate.call(""2003-04-12""))
    assert_equal(false, candidate.call(""04-2003""))
  end
end
"
HumanEval_125,nus_Latn,rb,"Cäätni̱ alphabet, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 mi̱ ca da̱a̱k kä kɔma ',' mi̱ thiɛlɛ kɔma i̱thpethi̱, bi̱ ji̱n yi̱k luɔ̱c pek in ca gɔ̱r piny ɛ la li̱ter tin tɔatni̱ kɛ ɣöö bi̱kɛ te kɛɛl rɛy kä Mi̱ ca ŋun ɛ la mi̱ caa lɛy, locni̱ rie̱e̱t ti̱ caa da̱a̱k kä caa kɛ da̱a̱k kɛ kam ti̱ bo̱o̱r, mi̱ /thiɛlɛ kam ti̱ bo̱o̱r rɛy ruac in ca ŋun ɛ ji̱ # >>> split_words.call(""Hello world!"")
# [""Hello"", ""world!""]
# >>> split_words.call(""Hello,world!"")
# [""Hello"", ""world!""]
# >>> split_words.call(""abcdef"")
# 3
def split_words(txt)
","def split_words(txt)
  if txt.include?(' ')
    return txt.split(' ')
  elsif txt.include?(',')
    return txt.split(',')
  else
    odd_count = txt.chars.count { |char| ('a'..'z').include?(char) && (char.ord - 'a'.ord).odd? }
    return odd_count
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_split_words
    candidate = method(:split_words)
    assert_equal([""Hello"", ""world!""], candidate.call(""Hello world!""))
    assert_equal([""Hello"", ""world!""], candidate.call(""Hello,world!""))
    assert_equal([""Hello"", ""world,!""], candidate.call(""Hello world,!""))
    assert_equal([""Hello,Hello,world"", ""!""], candidate.call(""Hello,Hello,world !""))
    assert_equal(3, candidate.call(""abcdef""))
    assert_equal(2, candidate.call(""aaabb""))
    assert_equal(1, candidate.call(""aaaBb""))
    assert_equal(0, candidate.call(""""))
  end
end
"
HumanEval_126,nus_Latn,rb,"Cäätni̱ Nömber, locni̱ mi̱ la kac. /Cuɛ naŋni̱ nämbäri̱ ti̱ jiek kä ɛ intejeri̱ kärɔ̱.Mi̱ ci̱ matrik tekɛ ti̱ ŋuan ti̱ cäät ti̱ cäät kɛ kɛ, bi̱ kɛn cu te kɛɛl kɛ matrik.Mi̱ ca ŋun ɛ la mi̱ caa mat kä nämbäri̱, bɛ loc ɛ la mi̱ ca kɛ da̱a̱k kiɛ /ka̱n kɛ da̱a̱k.# >>> is_sorted.call([5])
# true
# >>> is_sorted.call([1, 2, 3, 4, 5])
# true
# >>> is_sorted.call([1, 3, 2, 4, 5])
# false
# >>> is_sorted.call([1, 2, 3, 4, 5, 6])
# true
# >>> is_sorted.call([1, 2, 3, 4, 5, 6, 7])
# true
# >>> is_sorted.call([1, 3, 2, 4, 5, 6, 7])
# false
# >>> is_sorted.call([1, 2, 2, 3, 3, 4])
# true
# >>> is_sorted.call([1, 2, 2, 2, 3, 4])
# false
def is_sorted(lst)
","def is_sorted(lst)
  lst.each_cons(2).with_index do |(a, b), index|
    return false if a > b
    return false if index < lst.length - 2 && a == b && lst[index + 2] == b
  end
  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_sorted
    candidate = method(:is_sorted)
    assert_equal(true, candidate.call([5]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))
    assert_equal(false, candidate.call([1, 3, 2, 4, 5]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))
    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))
    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))
    assert_equal(true, candidate.call([]))
    assert_equal(true, candidate.call([1]))
    assert_equal(false, candidate.call([3, 2, 1]))
    assert_equal(false, candidate.call([1, 2, 2, 2, 3, 4]))
    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))
    assert_equal(true, candidate.call([1, 2, 2, 3, 3, 4]))
    assert_equal(true, candidate.call([1, 2, 3, 4]))
  end
end
"
HumanEval_127,nus_Latn,rb,"[input/output] samples: Mi̱ ci̱ kamni̱ da̱ŋ rɛw /ci̱kɛ bi̱ te kɛɛl, bi̱ loc ni̱ ""ƔE"".mi̱ /ci̱e jɛn, locni̱ ""ƔËY"".Mi̱ ci̱ pek in ci̱ rɔ röm ɛ mi̱ la praam nämbär, locni̱ ""YƐƐ"", Kä min la bäärɛ ɛ 1, min /ci̱kɛ la praam nämbär.Cäätdɛ, ɛn kam kamni̱ gua̱th in te kam (1, 3), (2, 4) ɛ (2, 3) Kä gua̱th ɛ la nämbär präm.La̱tdu ɛ ɣöö bi̱ ji̱n ɛ ŋa̱c i̱ ɛ pek in ci̱ kamdiɛn rɔ̱ röm kɛ kɛn rɛw ti̱ti̱ Kɛ gua̱th in ca ŋun, jɛn ba naŋ i̱ jɛn tukdɛ ɛ kuiy kiɛ päärkɛ kɛ guutdɛ.matkɛ tuk kɛnɛ guut.Kä gua̱th tin ca ŋun tëkɛ mi̱ ca gäk min lotni̱ ɣöö gua̱th (ka̱m raar, guut)gua̱th in bi̱ kamni̱ diaal ɛ la pek mi̱ matkɛ ɛ la intejeri̱. Cäät, kamni̱ = (ka̱m raar, guut) = (1, 2).Ji̱n caa ji̱ moc gua̱th da̱ŋ rɛw, # >>> intersection.call([1, 2], [2, 3])
# ""NO""
# >>> intersection.call([-1, 1], [0, 4])
# ""NO""
# >>> intersection.call([-3, -1], [-5, 5])
# ""YES""
def intersection(interval1, interval2)
","def intersection(interval1, interval2)
  start1, end1 = interval1
  start2, end2 = interval2

  intersection_start = [start1, start2].max
  intersection_end = [end1, end2].min

  if intersection_start > intersection_end
    return ""NO""
  end

  intersection_length = intersection_end - intersection_start + 1

  return ""YES"" if prime?(intersection_length)

  ""NO""
end

def prime?(n)
  return false if n <= 1
  return true if n == 2 || n == 3

  (2..Math.sqrt(n).to_i).each do |i|
    return false if n % i == 0
  end

  true
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_intersection
    candidate = method(:intersection)
    assert_equal(""NO"", candidate.call([1, 2], [2, 3]))
    assert_equal(""NO"", candidate.call([-1, 1], [0, 4]))
    assert_equal(""YES"", candidate.call([-3, -1], [-5, 5]))
    assert_equal(""YES"", candidate.call([-2, 2], [-4, 0]))
    assert_equal(""NO"", candidate.call([-11, 2], [-1, -1]))
    assert_equal(""NO"", candidate.call([1, 2], [3, 5]))
    assert_equal(""NO"", candidate.call([1, 2], [1, 2]))
    assert_equal(""NO"", candidate.call([-2, -2], [-3, -2]))
  end
end
"
HumanEval_128,nus_Latn,rb,"Cäät: No̱o̱ŋ: lökɛ ni̱l kɛ kui̱ arrɛ mi̱ /thiɛl luɔt.Kä nämbäri̱ diaal tin te rɛy arrɛy, ca kɛ nyoth ɛ 1, -1 kiɛ 0.Kɛn matdiɛn kɛn nyin intejeri̱ tin di̱t tin ca pi̱e̱e̱l ɛ la tin ca la̱t ɛ kɛn tin la nyuuthni̱kɛ diaal.Ji̱n ca ji̱ ka̱m arrɛy mi̱ te intejeri̱ kä bi̱ ji̱ dhil locni̱kɛ.# >>> prod_signs.call([1, 2, 2, -4])
# 9
# >>> prod_signs.call([0, 1])
# 0
# >>> prod_signs.call([])
# nil
def prod_signs(arr)
","def prod_signs(arr)
  return nil if arr.empty?
  
  product_signs = arr.reduce(1) { |prod, num| prod * num <=> 0 }
  sum_magnitudes = arr.map(&:abs).sum
  
  product_signs * sum_magnitudes
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_prod_signs
    candidate = method(:prod_signs)
    assert_equal(-9, candidate.call([1, 2, 2, -4]))
    assert_equal(0, candidate.call([0, 1]))
    assert_equal(-10, candidate.call([1, 1, 1, 2, 3, -1, 1]))
    assert_equal(nil, candidate.call([]))
    assert_equal(20, candidate.call([2, 4, 1, 2, -1, -1, 9]))
    assert_equal(4, candidate.call([-1, 1, -1, 1]))
    assert_equal(-4, candidate.call([-1, 1, 1, 1]))
    assert_equal(0, candidate.call([-1, 1, 1, 0]))
  end
end
"
HumanEval_129,nus_Latn,rb,"Cäätni̱: Lɔ̱a̱rkɛ ni̱ mi̱ ca riali̱kä kä ba̱ri̱ kä thëlli̱ min bi̱ min tɔt kä dup dup dupni̱ wä kɛ jɛ.Jɛn cua ŋun i̱ luɔcdɛ bɛ a kɛl kärɔa.lst_A[j] = lst_B[j]. cetkɛ lst_A[i] < lst_B[i] kɛnɛ j (1 <= j < i) mi̱ tekɛ kä lst_B, kɛ rie̱t ti̱ kɔ̱kiɛn, tëkɛ intejeri̱ indi̱dhɛth i (1 <= i <= k) kɛ (nɛy kɛ ciöt i̱ lst_A kɛnɛ lst_B), lst_A ɛ mi̱ kuiy kä kɛ̈l kɛ̈ɛ̈li̱Kɛ kɔr kä mëë ca riali̱kä kɛ kui̱ kä tin ca la̱th kä ba̱ri̱ kä ba̱li̱öni̱ tin wä A kɛnɛ B Ɛn duɔ̱ɔ̱p A (mi̱ bäärkɛ k) ba naŋ i̱ kuiy ni̱ jɛn kä duɔ̱ɔ̱p B (mi̱ bäärkɛ k) mi̱ /Ci̱ rɔ bi̱ lot ɛn ɣöö bi̱ ji̱n rɔ bath kä ji̱n./Ci̱kɛ bi̱ lɛ dääk).Titdɛ ɛn ɣöö duɔ̱ɔ̱p mi̱ bäär k lotdɛ ni̱ ɣöö ba thëlli̱ k wä thi̱n (/ci̱kɛ thɛl. kɛ rieet ti kɔ̱ŋ, deri wä kä thëlli̱ tin nyuak yi̱k kɛ ji̱ ɛntäämɛ kä thëlli̱, kä kɛ duɔ̱ɔ̱p kɛl, deri̱ wä kä thëlli̱ tin thieek kɛ ji̱, Ji̱n bi̱ yi̱k duɔ̱ɔ̱p mi̱ tɔt mi̱ bi̱ jɔɔc kä k rɛy gua̱th in ca ji̱ yi̱k yi̱k yi̱k yi̱k yi̱k.inclusive bɛ jɔɔc ɛ la kɛl kärɔa kä thëlli̱ kä gi̱ri̱d.Kä thëlli̱ diaal kä gi̱ri̱d tekɛ kɛ ba̱li̱ö. ɛ intejeri̱ diaal rɛy gua̱th in te [1, N * N] Mi̱ ca ŋun ɛ la gi̱ri̱d mi̱ tekɛ N ri̱i̱wni̱ kɛnɛ N kɔlömni̱ (N >= 2) kɛnɛ ɣöö ɛ mi̱ tekɛ puci̱tip intejer k, # >>> minPath.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
# [1, 2, 1]
# >>> minPath.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
# [1]
def minPath(grid, k)
","def minPath(grid, k)
  n = grid.size
  directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]
  min_path = nil

  n.times do |i|
    n.times do |j|
      queue = [[[i, j], [grid[i][j]]]]
      until queue.empty?
        position, path = queue.shift
        if path.size == k
          min_path = path if min_path.nil? || path < min_path
          next
        end
        directions.each do |dx, dy|
          x, y = position[0] + dx, position[1] + dy
          if x.between?(0, n-1) && y.between?(0, n-1)
            queue.push([[x, y], path + [grid[x][y]]])
          end
        end
      end
    end
  end
  min_path
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_minPath
    candidate = method(:minPath)
    assert_equal([1, 2, 1], candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))
    assert_equal([1], candidate.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))
    assert_equal([1, 2, 1, 2], candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4))
    assert_equal([1, 10, 1, 10, 1, 10, 1], candidate.call([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7))
    assert_equal([1, 7, 1, 7, 1], candidate.call([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5))
    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1], candidate.call([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9))
    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6], candidate.call([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12))
    assert_equal([1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8))
    assert_equal([1, 5, 1, 5, 1, 5, 1, 5], candidate.call([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8))
    assert_equal([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], candidate.call([[1, 2], [3, 4]], 10))
    assert_equal([1, 3, 1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[1, 3], [3, 2]], 10))
  end
end
"
HumanEval_130,nus_Latn,rb,"Cäätni̱: N + 1 tin nhiam kä Tri̱bönatci̱ thi̱kuɛnthi̱.Ji̱n ca ji̱ moc nämbär mi̱ /ci̱ mɔ a nämbär mi̱ lotrɔ kä n, ji̱n bi̱ yi̱k loc ni̱ nämbär mi̱ lotrɔ kä = 2 + 3 + 3 = 8 Tri ((3) = tri ((2) + tri ((1) + tri ((4) trɛ ((4) = 3 tri(2) = 1 + (2 / 2) = 2 Ciee cäät ɛmɛ: trɛ (n) = trɛ (n - 1) + trɛ (n - 2) + trɛ (n + 1), mi̱ n ɛ mi̱ /ci̱ mɔ a kɛl.trithn) = 1 + n / 2, mi̱ n ɛ päär.tri(1) = 3 Tribönaki̱ thi̱kuɛnthi̱ ɛ mi̱ la latkɛ ɛ la mi̱ ci̱ rɔ nyɔk kɛ luɔ̱c:Kä min /ca ŋäc ɛ nɛy diaal ɛ jɛn Tribönaki̱ thi̱kuɛnthi̱.Nɛy diaal ŋa̱ckɛ pe̱k in la Fibönatci, jɛn cua ŋi̱e̱e̱c ɛlɔ̱ŋ ɛ mɛthemati̱ciani̱ rɛy # >>> tri.call(3)
# [1, 3, 2, 8]
def tri(n)
","def tri(n)
  sequence = [1, 3]
  
  (2..n).each do |i|
    if i.even?
      sequence[i] = 1 + i / 2
    else
      sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] rescue 0
    end
  end
  
  sequence[0..n]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_tri
    candidate = method(:tri)
    assert_equal([1, 3, 2, 8], candidate.call(3))
    assert_equal([1, 3, 2, 8, 3], candidate.call(4))
    assert_equal([1, 3, 2, 8, 3, 15], candidate.call(5))
    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35], candidate.call(9))
    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))
    assert_equal([1], candidate.call(0))
    assert_equal([1, 3], candidate.call(1))
  end
end
"
HumanEval_131,nus_Latn,rb,"Ciee cäät ɛmɛ: Lɔ̱a̱r 0 mi̱ ci̱ digitni̱ diaal ɛ pari̱.Mi̱ ca ŋun ɛ la mi̱ tekɛ puɔthtip intejiɛr n, locni̱ pröda̱k duŋ di̱jitni̱ tin /ci̱ tɔt.# >>> digits.call(1)
# 1
# >>> digits.call(4)
# 0
# >>> digits.call(235)
# 15
def digits(n)
","def digits(n)
  odd_digits = n.to_s.chars.map(&:to_i).select { |digit| digit.odd? }
  return 0 if odd_digits.empty?
  odd_digits.reduce(:*)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_digits
    candidate = method(:digits)
    assert_equal(5, candidate.call(5))
    assert_equal(5, candidate.call(54))
    assert_equal(1, candidate.call(120))
    assert_equal(5, candidate.call(5014))
    assert_equal(315, candidate.call(98765))
    assert_equal(2625, candidate.call(5576543))
    assert_equal(0, candidate.call(2468))
  end
end
"
HumanEval_132,nus_Latn,rb,"gua̱th in bi̱ kɛ rɔ̱ mat thi̱n ɛ la kɛl kä bi̱kɛ rɔ̱ mat thi̱n.Kä pa̱ŋciin bɛ yi̱k loc i̱ thuɔ̱k mi̱ kɛnɛ kärɔa mi̱ ɛ jɛn i̱thti̱p mi̱ tekɛ ba̱li̱d thɛkbi̱rɛkciin duŋ paraketni̱ Lätdɛ kɛ pa̱ŋciin mi̱ naŋkɛ i̱thti̱riŋ mi̱ te i̱thkuɛr paraketni̱ kärɔ̱.# >>> is_nested.call(""[[]]"")
# true
# >>> is_nested.call(""[]]]]]]][[[[[]"")
# false
# >>> is_nested.call(""[][]"")
# false
# >>> is_nested.call(""[]"")
# false
# >>> is_nested.call(""[[][]]"")
# true
# >>> is_nested.call(""[[]][["")
# true
def is_nested(string)
","def is_nested(string)
  stack = []
  has_nested = false

  string.each_char do |char|
    if char == '['
      stack.push(char)
    elsif char == ']'
      if stack.empty?
        return false
      end
      stack.pop
      has_nested = true if stack.any?
    end
  end

  has_nested
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_nested
    candidate = method(:is_nested)
    assert_equal(true, candidate.call(""[[]]""))
    assert_equal(false, candidate.call(""[]]]]]]][[[[[]""))
    assert_equal(false, candidate.call(""[][]""))
    assert_equal(false, candidate.call(""[]""))
    assert_equal(true, candidate.call(""[[[[]]]]""))
    assert_equal(false, candidate.call(""[]]]]]]]]]]""))
    assert_equal(true, candidate.call(""[][][[]]""))
    assert_equal(false, candidate.call(""[[]""))
    assert_equal(false, candidate.call(""[]]""))
    assert_equal(true, candidate.call(""[[]][[""))
    assert_equal(true, candidate.call(""[[][]]""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""[[[[[[[[""))
    assert_equal(false, candidate.call(""]]]]]]]]""))
  end
end
"
HumanEval_133,nus_Latn,rb,"Cäätni̱: Kä ɛlɛmɛni̱ diaal tin te rɛy arɛthi̱ ɛ mi̱ ca thärkäl ɛ la tin te nhial kä int (thil) kɛ nhiam.Ji̱n bi̱ yi̱k loc ni̱ pek nämbäri̱ tin ca kuëŋ kä i̱thkuɛr rɛy arrayä min ca ŋun, Ji̱n ca ji̱ moc nämbäri̱ ti̱ ŋuan.# >>> lst.call([1.0, 2.0, 3.0])
# 14
# >>> lst.call([1.0, 4.0, 9.0])
# 98
# >>> lst.call([1.0, 3.0, 5.0, 7.0])
# 84
# >>> lst.call([1.4, 4.2, 0.0])
# 29
# >>> lst.call([-2.4, 1.0, 1.0])
# 6
def sum_squares(lst)
","def sum_squares(lst)
  lst.map { |num| (num.ceil)**2 }.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_squares
    candidate = method(:sum_squares)
    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))
    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))
    assert_equal(84, candidate.call([1.0, 3.0, 5.0, 7.0]))
    assert_equal(29, candidate.call([1.4, 4.2, 0.0]))
    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))
    assert_equal(10230, candidate.call([100.0, 1.0, 15.0, 2.0]))
    assert_equal(200000000, candidate.call([10000.0, 10000.0]))
    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))
    assert_equal(1086, candidate.call([-1.4, 17.9, 18.9, 19.9]))
    assert_equal(0, candidate.call([0.0]))
    assert_equal(1, candidate.call([-1.0]))
    assert_equal(2, candidate.call([-1.0, 1.0, 0.0]))
  end
end
"
HumanEval_134,nus_Latn,rb,"Cäätni̱: Nöb: ""Ruac"" ɛ buɔ̱n kä tin ca da̱a̱k ɛ kam.ɛ tha̱a̱ŋ ruac, kä kac ɛ mi̱ dɔ̱ŋ.kä min ca ŋun kä thi̱rŋ ɛ alpabetik kä /ci̱ɛ Lätdɛ mi̱ la thuɔ̱k mi̱ ca nyoth ɛ la mi̱ ci̱ jɔak kä bi̱ jɔɔc ɛ la mi̱ ci̱ jɔak.# >>> check_if_last_char_is_a_letter.call(""apple pie"")
# false
# >>> check_if_last_char_is_a_letter.call(""apple pi e"")
# true
# >>> check_if_last_char_is_a_letter.call(""apple pi e "")
# false
# >>> check_if_last_char_is_a_letter.call("""")
# false
def check_if_last_char_is_a_letter(txt)
","check_if_last_char_is_a_letter = ->(txt) {
  return false if txt.strip.empty?
  words = txt.strip.split(' ')
  last_word = words.last
  return false if last_word.empty?
  last_char = last_word[-1]

  last_char =~ /[a-zA-Z]/ && (words.size == 1 || txt[txt.rindex(last_char) - 1] == ' ')
}","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_check_if_last_char_is_a_letter
    candidate = method(:check_if_last_char_is_a_letter)
    assert_equal(false, candidate.call(""apple""))
    assert_equal(true, candidate.call(""apple pi e""))
    assert_equal(false, candidate.call(""eeeee""))
    assert_equal(true, candidate.call(""A""))
    assert_equal(false, candidate.call(""Pumpkin pie ""))
    assert_equal(false, candidate.call(""Pumpkin pie 1""))
    assert_equal(false, candidate.call(""""))
    assert_equal(false, candidate.call(""eeeee e ""))
    assert_equal(false, candidate.call(""apple pie""))
    assert_equal(false, candidate.call(""apple pi e ""))
  end
end
"
HumanEval_135,nus_Latn,rb,"Cäätni̱: duplikɛtni̱ ba̱li̱öni̱./thiɛlɛ mi̱ ce̱tkɛ ɛlɛmɛni̱ ti̱ te thi̱n ɛn wa̱nɔ bɛ loc ni̱ -1. Kä arɛt min ca ŋun bɛ thiɛl /ci̱kɛ di̱tni̱ kɛn kiɛ päärkɛ kɛ ɛlɛmɛni̱ tin te thi̱n ni̱ wän.Lätdɛ kɛ pa̱ŋciin min locni̱ indi̱th in di̱tni̱ jɛn kä elɛmɛni̱ tin ca lɛl# >>> can_arrange.call([1, 2, 4, 3, 5])
# 3
# >>> can_arrange.call([1, 2, 3])
# -1
def can_arrange(arr)
","def can_arrange(arr)
  (1...arr.length).reverse_each do |i|
    return i if arr[i] < arr[i - 1]
  end
  -1
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_can_arrange
    candidate = method(:can_arrange)
    assert_equal(3, candidate.call([1, 2, 4, 3, 5]))
    assert_equal(-1, candidate.call([1, 2, 4, 5]))
    assert_equal(2, candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))
    assert_equal(4, candidate.call([4, 8, 5, 7, 3]))
    assert_equal(-1, candidate.call([]))
  end
end
"
HumanEval_136,nus_Latn,rb,"Cäätni̱: Mi̱ thiɛlɛ negɛtib kiɛ puɔ̱thi̱tip intejeri̱, lockɛ kɛ cie nil.Kä min ca la̱t ɛ la mi̱ ca mat kä puci̱tip intejeri̱ rɛy array.Kä min di̱tni̱ jɛn kä min ca mat ɛ mi̱ /ci̱ gɔaa, kä b ɛ mi̱ tɔt kä kɛndial.Lätdɛ kɛ pa̱ŋciin mi̱ loc ɛ la ari̱ (a, b), gua̱th in bi̱ 'a' ɛ # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])
# [nil, 1]
# >>> largest_smallest_integers.call([])
# [nil, nil]
# >>> largest_smallest_integers.call([0])
# [nil, nil]
def largest_smallest_integers(lst)
","def largest_smallest_integers(lst)
  largest_negative = nil
  smallest_positive = nil
  
  lst.each do |num|
    if num < 0
      largest_negative = num if largest_negative.nil? || num > largest_negative
    elsif num > 0
      smallest_positive = num if smallest_positive.nil? || num < smallest_positive
    end
  end
  
  [largest_negative, smallest_positive]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_largest_smallest_integers
    candidate = method(:largest_smallest_integers)
    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7]))
    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7, 0]))
    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5, 6, -2]))
    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))
    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))
    assert_equal([nil, nil], candidate.call([]))
    assert_equal([nil, nil], candidate.call([0]))
    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))
    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6, 0]))
    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, 1]))
    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100, 1]))
  end
end
"
HumanEval_137,nus_Latn,rb,"Nöt: Mi̱ ɛ nämbär ri̱i̱l ɛ mi̱ ca nyoth cie ɛ thi̱rɛnd, kä bi̱ pöth in jäl dɔ̱ŋ bɛ cu te . kiɛ , Mi̱ ci̱ value-ni̱ päär, bɛ loc ni̱ nil.real nämbäri̱, kɛnɛ locdɛ kä min di̱tni̱ jɛn kä ba̱riabɔl rɛy ba̱riabɔl ta̱a̱dɛ min ca ŋun.Ta̱a̱ in lät kɛ jɛ ɛ mi̱ naŋ intejeri̱, pi̱o̱o̱tni̱, kiɛ thärkithni̱ tin cuŋkɛ ɛ la # >>> compare_one.call(1, 2.5)
# 2.5
# >>> compare_one.call(1, ""2,3"")
# ""2,3""
# >>> compare_one.call(""5,1"", ""6"")
# ""6""
# >>> compare_one.call(""1"", 1)
# nil
def compare_one(a, b)
","def compare_one(a, b)
  a = a.to_s.tr(',', '.').to_f if a.is_a?(String) && a.include?(',')
  b = b.to_s.tr(',', '.').to_f if b.is_a?(String) && b.include?(',')

  if a.is_a?(String) && b.is_a?(String)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(Float)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(Integer)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(Float)
    a = a.to_f
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(Integer)
    b = b.to_f
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(String) && b.is_a?(Float)
    b = b.to_s # Only supporting variable type comparison, retain original types
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Float) && b.is_a?(String)
    a = a.to_s # Only supporting variable type comparison, retain original types
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(String) && b.is_a?(Integer)
    return nil if a == b
    return a > b ? a : b
  elsif a.is_a?(Integer) && b.is_a?(String)
    return nil if a == b
    return a > b ? a : b
  else
    return nil
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_compare_one
    candidate = method(:compare_one)
    assert_equal(2, candidate.call(1, 2))
    assert_equal(2.5, candidate.call(1, 2.5))
    assert_equal(3, candidate.call(2, 3))
    assert_equal(6, candidate.call(5, 6))
    assert_equal(""2,3"", candidate.call(1, ""2,3""))
    assert_equal(""6"", candidate.call(""5,1"", ""6""))
    assert_equal(""2"", candidate.call(""1"", ""2""))
    assert_equal(nil, candidate.call(""1"", 1))
  end
end
"
HumanEval_138,nus_Latn,rb,"Cäät Lätdɛ kɛ ɣöö ba ŋa̱c mi̱ ca ŋun i̱ nämbär n de gɔ̱r ɛ la mat nämbäri̱ ti̱ ŋuan ti̱ pa̱a̱r.# >>> is_equal_to_sum_even.call(4)
# false
# >>> is_equal_to_sum_even.call(6)
# false
# >>> is_equal_to_sum_even.call(8)
# true
def is_equal_to_sum_even(n)
","def is_equal_to_sum_even(n)
  return false if n < 8
  n.even?
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_is_equal_to_sum_even
    candidate = method(:is_equal_to_sum_even)
    assert_equal(false, candidate.call(4))
    assert_equal(false, candidate.call(6))
    assert_equal(true, candidate.call(8))
    assert_equal(true, candidate.call(10))
    assert_equal(false, candidate.call(11))
    assert_equal(true, candidate.call(12))
    assert_equal(false, candidate.call(13))
    assert_equal(true, candidate.call(16))
  end
end
"
HumanEval_139,nus_Latn,rb,"Ciee cäät ɛmɛ: gua̱th in n > 0 brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! Kä Brazil ɛ mi̱ la̱tkɛ ɛ la̱t ɛ latdɛ i̱: # >>> special_factorial.call(4)
# 288
# The function will receive an integer as input and should return the special
# factorial of this integer.
def special_factorial(n)
","def special_factorial(n)
  return 1 if n <= 1
  (1..n).inject(1) { |product, i| product * factorial(i) }
end

def factorial(num)
  return 1 if num <= 1
  (2..num).inject(1, :*)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_special_factorial
    candidate = method(:special_factorial)
    assert_equal(288, candidate.call(4))
    assert_equal(34560, candidate.call(5))
    assert_equal(125411328000, candidate.call(7))
    assert_equal(1, candidate.call(1))
  end
end
"
HumanEval_140,nus_Latn,rb,"kä bɛ kamni̱ diaal tin guɔ̱rkɛ rɔ̱ gɛr kɛ - kä mi̱ ci̱ thärkdɛ tekɛ gua̱th ti̱ ŋuan ti̱ läny 2 ti̱ guɔ̱rkɛ rɔ̱, Mi ca ji̱ moc kɛ thok mi gɔa, loc kamni̱ diaal kɛ ci̱öt ti̱ te piny, # >>> fix_spaces.call("" Example"")
# ""Example""
# >>> fix_spaces.call("" Example 1"")
# ""Example_1""
# >>> fix_spaces.call("" Example 2"")
# ""_Example_2""
# >>> fix_spaces.call("" Example 3"")
# ""_Example-3""
def fix_spaces(text)
","def fix_spaces(text)
  text.strip.gsub(/\s{3,}/, '-').gsub(' ', '_')
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_fix_spaces
    candidate = method(:fix_spaces)
    assert_equal(""Example"", candidate.call(""Example""))
    assert_equal(""Mudasir_Hanif_"", candidate.call(""Mudasir Hanif ""))
    assert_equal(""Yellow_Yellow__Dirty__Fellow"", candidate.call(""Yellow Yellow  Dirty  Fellow""))
    assert_equal(""Exa-mple"", candidate.call(""Exa   mple""))
    assert_equal(""-Exa_1_2_2_mple"", candidate.call(""   Exa 1 2 2 mple""))
  end
end
"
HumanEval_141,nus_Latn,rb,"Cäätni̱: - Kä thöp-thɛrn in guur dot ba yi̱k la kɛl kä ti̱ti̱: ['txt', 'exe', 'dll'] kä Latin alphabet ('a'-'z' kɛnɛ 'A'-'Z').- Kä thöp-thɛrn ɛ ŋot /cɛ bi̱ te baaŋ, kä jɛn bɛ tok kɛ wargak mi̱ bëë kä - Kä ciöt in ca gɔ̱r thi̱n ɛ mi̱ tekɛ dot kɛl '.' - /Ci̱kɛ bi̱ tekɛ di̱jitni̱ ti̱ ŋuan kä diɔ̱k ('0'-'9') rɛy ci̱ötdä kɛ kui̱ kä min ca gɔ̱r.caa kɛ luäŋ: Ɛn ciöt in caa gɔ̱r ɛ la mi̱ lot rɔdɛ kä tin diaal tin caa lat piny ɛ mɛ.""Ɣɔ̱ɔ̱n"" mi̱ ci̱ ciöt in ca gɔ̱r ɛ thuɔ̱k, kä luɔcɛ ""/Cɛ"" mi̱ dɔ̱ŋ.Lätdɛ kɛ mi̱ la̱t kɛ ɣöö bɛ mi̱ ci̱ rɔ lot kɛ ciöt kɛ ɣöö bɛ luɔ̱c jɔk.# >>> file_name_check.call(""example.txt"")
# ""Yes""
# >>> file_name_check.call(""1example.dll"")
# ""No""
def file_name_check(file_name)
","def file_name_check(file_name)
  # Check if there's exactly one dot in the filename
  return 'No' unless file_name.count('.') == 1
  
  # Split the filename into the name and extension
  name, extension = file_name.split('.')
  
  # Check if the name part starts with a letter
  return 'No' if name.empty? || !name[0].match?(/[a-zA-Z]/)
  
  # Check if the extension is valid
  return 'No' unless ['txt', 'exe', 'dll'].include?(extension)
  
  # Count digits in the file name
  digit_count = file_name.count(""0-9"")
  
  # Check if digits are more than three
  return 'No' if digit_count > 3
  
  'Yes'
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_file_name_check
    candidate = method(:file_name_check)
    assert_equal(""Yes"", candidate.call(""example.txt""))
    assert_equal(""No"", candidate.call(""1example.dll""))
    assert_equal(""No"", candidate.call(""s1sdf3.asd""))
    assert_equal(""Yes"", candidate.call(""K.dll""))
    assert_equal(""Yes"", candidate.call(""MY16FILE3.exe""))
    assert_equal(""No"", candidate.call(""His12FILE94.exe""))
    assert_equal(""No"", candidate.call(""_Y.txt""))
    assert_equal(""No"", candidate.call(""?aREYA.exe""))
    assert_equal(""No"", candidate.call(""/this_is_valid.dll""))
    assert_equal(""No"", candidate.call(""this_is_valid.wow""))
    assert_equal(""Yes"", candidate.call(""this_is_valid.txt""))
    assert_equal(""No"", candidate.call(""this_is_valid.txtexe""))
    assert_equal(""No"", candidate.call(""#this2_i4s_5valid.ten""))
    assert_equal(""No"", candidate.call(""@this1_is6_valid.exe""))
    assert_equal(""No"", candidate.call(""this_is_12valid.6exe4.txt""))
    assert_equal(""No"", candidate.call(""all.exe.txt""))
    assert_equal(""Yes"", candidate.call(""I563_No.exe""))
    assert_equal(""Yes"", candidate.call(""Is3youfault.txt""))
    assert_equal(""Yes"", candidate.call(""no_one#knows.dll""))
    assert_equal(""No"", candidate.call(""1I563_Yes3.exe""))
    assert_equal(""No"", candidate.call(""I563_Yes3.txtt""))
    assert_equal(""No"", candidate.call(""final..txt""))
    assert_equal(""No"", candidate.call(""final132""))
    assert_equal(""No"", candidate.call(""_f4indsartal132.""))
    assert_equal(""No"", candidate.call("".txt""))
    assert_equal(""No"", candidate.call(""s.""))
  end
end
"
HumanEval_142,nus_Latn,rb,"Cäätni̱: Ɛn pa̱ŋciin bɛ kulɛ loc ni̱ min ca mat kä tin caa mat rɛy arrɛy min /ci̱kɛ bi̱ ŋuan kɛ 3 kiɛ 4.ɛ mi̱ la ti̱ ŋuan kä 3 kä bi̱ cubi̱ la̱t intejeri̱ mi̱ ci̱ i̱ndɛkdɛ ɛ mi̱ la ti̱ ŋuan kä 4 kä /ci̱ɛɛ mi̱ la ti̱ ŋuan kä 3.La̱t ɛmɛ bɛ naŋ ni̱ intɛrjɛr arrɛy (mi̱ ca mat kɛɛl) kä kɛn i̱thti̱ri̱ diaal rɛy arrɛy, la̱t bɛ i̱thti̱ri̱ in ci̱ wä i̱thkuɛr i̱thti̱ri̱ mi̱ ɛ indi̱dhɛthdɛ ɛ ""  Kä# >>> lst
# [1, 2, 3]
# >>> lst
# []
# >>> lst
# [-1, -5, 2, -1, -5]
def sum_squares(lst)
","def sum_squares(lst)
  lst.map.with_index do |num, index|
    if index % 3 == 0
      num ** 2
    elsif index % 4 == 0
      num ** 3
    else
      num
    end
  end.sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sum_squares
    candidate = method(:sum_squares)
    assert_equal(6, candidate.call([1, 2, 3]))
    assert_equal(14, candidate.call([1, 4, 9]))
    assert_equal(0, candidate.call([]))
    assert_equal(9, candidate.call([1, 1, 1, 1, 1, 1, 1, 1, 1]))
    assert_equal(-3, candidate.call([-1, -1, -1, -1, -1, -1, -1, -1, -1]))
    assert_equal(0, candidate.call([0]))
    assert_equal(-126, candidate.call([-1, -5, 2, -1, -5]))
    assert_equal(3030, candidate.call([-56, -99, 1, 0, -2]))
    assert_equal(0, candidate.call([-1, 0, 0, 0, 0, 0, 0, 0, -1]))
    assert_equal(-14196, candidate.call([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]))
    assert_equal(-1448, candidate.call([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]))
  end
end
"
HumanEval_143,nus_Latn,rb,"Cäät 1: kä min ca lat kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot kä ci̱ rɔ lot.min bäärɛ ɛ mi̱ la praam nämbäri̱, kä bi̱ ji̱n ɛ loc i̱thtiring mi̱ te rieetkɛ thi̱n kä thënci̱ɛr in nhiam, ɛn thanyni̱ tëkɛ rieet ti̱ caa da̱a̱k ɛ kam, Ji̱n caa ji̱ moc bi̱ɛl mi̱ cuŋ kɛ kui̱ ŋii̱cä, # >>> words_in_sentence.call(""This is a test"")
# ""is""
# Example 2:
# >>> words_in_sentence.call(""lets go for swimming"")
# ""go for""
# Constraints:
# * 1 <= len(sentence) <= 100
# * sentence contains only letters
def words_in_sentence(sentence)
","def words_in_sentence(sentence)
  def is_prime?(num)
    return false if num <= 1
    (2..Math.sqrt(num)).none? { |i| num % i == 0 }
  end
  
  words = sentence.split("" "")
  prime_length_words = words.select { |word| is_prime?(word.length) }
  prime_length_words.join("" "")
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_words_in_sentence
    candidate = method(:words_in_sentence)
    assert_equal(""is"", candidate.call(""This is a test""))
    assert_equal(""go for"", candidate.call(""lets go for swimming""))
    assert_equal(""there is no place"", candidate.call(""there is no place available here""))
    assert_equal(""Hi am Hussein"", candidate.call(""Hi I am Hussein""))
    assert_equal(""go for it"", candidate.call(""go for it""))
    assert_equal("""", candidate.call(""here""))
    assert_equal(""is"", candidate.call(""here is""))
  end
end
"
HumanEval_144,nus_Latn,rb,"Deri jɛ car i̱ x, kɛnɛ n kɛn kɛ pi̱rɛkciɔni̱ ti̱ la̱tkɛ, kä /ci̱kɛ la̱tkɛ ɛ dhɛrö.<numerator>/<denominator> gua̱th in bi̱ kɛn da̱ŋ rɛw ɛ la nämerɛtɔr kɛnɛ denominɛtɔr ɛ la puɔ̱thitib nämbäri̱ ti̱ rɛlrɔ̱.Kɛn x kɛnɛ n, kɛn kɛ rɛw ti̱ cuŋkɛ ɛ la ti̱ ca ŋun, kä tekɛ kɛ ta̱a̱ in guur, x * n. La̱t ɛ nyɔk kɛ loc ɛ la thuɔ̱k mi̱ x * n ɛ mi̱ ca pekdɛ ŋa̱c kä ɛ mi̱ la thuɔ̱k kä ɛ mi̱ /ci̱ thuɔ̱k.La̱tdu ɛ ɣöö bi̱ la̱t ɛ lät kɛ ɣöö bɛ min bi̱ jɔɔc ɛ la̱t ɛ thi̱a̱k.# >>> simplify.call(""1/5"", ""5/1"")
# true
# >>> simplify.call(""1/6"", ""2/1"")
# false
# >>> simplify.call(""7/10"", ""10/2"")
# false
def simplify(x, n)
","def simplify(x, n)
  # Convert x and n to numerators and denominators
  num_x, den_x = x.split('/').map(&:to_i)
  num_n, den_n = n.split('/').map(&:to_i)

  # Multiply fractions: (num_x * num_n) / (den_x * den_n)
  numerator = num_x * num_n
  denominator = den_x * den_n

  # Check if the result is a whole number
  numerator % denominator == 0
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_simplify
    candidate = method(:simplify)
    assert_equal(true, candidate.call(""1/5"", ""5/1""))
    assert_equal(false, candidate.call(""1/6"", ""2/1""))
    assert_equal(true, candidate.call(""5/1"", ""3/1""))
    assert_equal(false, candidate.call(""7/10"", ""10/2""))
    assert_equal(true, candidate.call(""2/10"", ""50/10""))
    assert_equal(true, candidate.call(""7/2"", ""4/2""))
    assert_equal(true, candidate.call(""11/6"", ""6/1""))
    assert_equal(false, candidate.call(""2/3"", ""5/2""))
    assert_equal(false, candidate.call(""5/2"", ""3/5""))
    assert_equal(true, candidate.call(""2/4"", ""8/4""))
    assert_equal(true, candidate.call(""2/4"", ""4/2""))
    assert_equal(true, candidate.call(""1/5"", ""5/1""))
    assert_equal(false, candidate.call(""1/5"", ""1/5""))
  end
end
"
HumanEval_145,nus_Latn,rb,"Ciee cäät ɛmɛ: la̱thkɛ kɛ kä indexdiɛn rɛy in thuɔ̱k in ca la̱t.No̱o̱ŋ: mi̱ tëë kɛ ti̱ ŋuan ti̱ te kɛɛl kɛ pek mi̱ cäät kä di̱jitni̱kiɛn, kɛ räthdiɛn nhial kɛ duɔ̱ɔ̱p in wä nhial kɛ pek di̱jitni̱kiɛn.Gɔ̱r pa̱ŋcin min bi̱ nyoth i̱ ɛ intejeri̱ ti̱ ca ŋun.# >>> order_by_points.call([1, 11, -1, -11, -12])
# [-1, -11, 1, -12, 11]
# >>> order_by_points.call([])
# []
def order_by_points(nums)
","def order_by_points(nums)
  nums.sort_by.with_index do |num, index|
    [num.to_s.chars.map(&:to_i).sum.abs, index]
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_order_by_points
    candidate = method(:order_by_points)
    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))
    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))
    assert_equal([], candidate.call([]))
    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))
    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))
    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))
  end
end
"
HumanEval_146,nus_Latn,rb,"Ciee cäät ɛmɛ: ɛni̱ di̱jitni̱ tin nhiam kɛnɛ tin jɔak kä nämbär ɛ la tin /ci̱ rɔ̱ pa̱a̱r (1, 3, 5, 7, 9).Kä nämbäri̱ elɛmɛni̱ rɛy arrɛy min di̱tni̱ jɛn kä 10 kɛnɛ rɛw Gɔ̱rkɛ pa̱ŋcin mi̱ naŋkɛ nämbäri̱ ti̱ ŋuan ɛ la inpuut kɛnɛ ɣöö bɛ locni̱kɛ.# >>> specialFilter.call([15, -73, 14, -15])
# 1
# >>> specialFilter.call([33, -2, -3, 45, 21, 109])
# 2
def specialFilter(nums)
","def specialFilter(nums)
  nums.count do |num|
    num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_specialFilter
    candidate = method(:specialFilter)
    assert_equal(0, candidate.call([5, -2, 1, -5]))
    assert_equal(1, candidate.call([15, -73, 14, -15]))
    assert_equal(2, candidate.call([33, -2, -3, 45, 21, 109]))
    assert_equal(4, candidate.call([43, -12, 93, 125, 121, 109]))
    assert_equal(3, candidate.call([71, -2, -33, 75, 21, 19]))
    assert_equal(0, candidate.call([1]))
    assert_equal(0, candidate.call([]))
  end
end
"
HumanEval_147,nus_Latn,rb,"Cäät: kä a[i] + a[j] + a[k] ɛ mi̱ ca loc ɛ 3.Lätdɛ kɛ nämbär kä diɔ̱k (a[i], a[j], a[k]) kä a gua̱th in i < j < k, Kɛ i̱thkuɛr i̱thkuɛrä (1 ≤ i ≤ n), kä ba̱li̱ö duŋ a[i] = i * i - i + 1. Ji̱n ca ji̱ ka̱m intejiɛr mi̱ puɔ̱thittip n. Ji̱n ba yi̱k la̱t intejiɛr array mi̱ tekɛ pe̱k mi̱ bäär n.# >>> get_max_triples.call(5)
# 1
# Explanation: 
# a = [1, 3, 7, 13, 21]
# The only valid triple is (1, 7, 13).
def get_max_triples(n)
","def get_max_triples(n)
  a = Array.new(n) { |i| (i + 1) * (i + 1) - (i + 1) + 1 }
  count = 0
  
  (0...n).each do |i|
    (i+1...n).each do |j|
      (j+1...n).each do |k|
        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0
      end
    end
  end
  
  count
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_get_max_triples
    candidate = method(:get_max_triples)
    assert_equal(1, candidate.call(5))
    assert_equal(4, candidate.call(6))
    assert_equal(36, candidate.call(10))
    assert_equal(53361, candidate.call(100))
  end
end
"
HumanEval_148,nus_Latn,rb,"Cäätni̱ /ci̱kɛ ci̱ööt planɛtni̱ ti̱ cuŋ.Kä pa̱ŋciin bɛ yi̱k loc ɛ la mi̱ thiɛl mi̱ ca mat ɛ planɛt1 kiɛ planɛt2 Kä min thia̱k kɛ cäŋ.Mi̱ ca jiek ɛ kam ɣɔrbita̱ni̱ planɛt 1 kɛnɛ ɣɔrbita̱ni̱ planɛt 2, cua kɛ da̱a̱k ɛ Kä pa̱ŋciin bɛ yi̱k loc ɛ la arrɛy mi̱ tekɛ planɛtni̱ diaal tin te ɣarbiti̱ni̱kiɛn Gɔ̱r ni̱ pa̱ŋcin mi̱ bi̱ ku lɛ naŋ ni̱ ciööt planɛtni̱ rɛw cie ɛ kɛn i̱thti̱ri̱ni̱ planɛt1 kɛnɛ planɛt2.Urɛnuth, Nɛptuni̱.ɛ Merkury, min dɔ̱ŋ ɛ Kuɛli̱, kä ɛ jɛn Wecmuɔ̱ɔ̱n, Ma̱ri̱, Ji̱o̱pitar, Tha̱turn,Cuɛ tekɛ ɣɔw da̱ŋ bädäk rɛy thölar thi̱thtɛmädan: min cu thi̱ääk ɛlɔ̱ŋ kɛ Cäŋ.# >>> bf.call(""Jupiter"", ""Neptune"")
# [""Saturn"", ""Uranus""]
# >>> bf.call(""Earth"", ""Mercury"")
# ""Venus""
# >>> bf.call(""Mercury"", ""Uranus"")
# [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
def bf(planet1, planet2)
","def bf(planet1, planet2)
  planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
  
  idx1 = planets.index(planet1)
  idx2 = planets.index(planet2)
  
  return [] if idx1.nil? || idx2.nil?

  start_idx, end_idx = [idx1, idx2].sort
  
  planets[(start_idx + 1)...end_idx]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_bf
    candidate = method(:bf)
    assert_equal([""Saturn"", ""Uranus""], candidate.call(""Jupiter"", ""Neptune""))
    assert_equal([""Venus""], candidate.call(""Earth"", ""Mercury""))
    assert_equal([""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""], candidate.call(""Mercury"", ""Uranus""))
    assert_equal([""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""], candidate.call(""Neptune"", ""Venus""))
    assert_equal([], candidate.call(""Earth"", ""Earth""))
    assert_equal([], candidate.call(""Mars"", ""Earth""))
    assert_equal([], candidate.call(""Jupiter"", ""Makemake""))
  end
end
"
HumanEval_149,nus_Latn,rb,"Ciee cäät ɛmɛ: Deri̱ jɛ car i̱ kɛn rie̱e̱t diaal bi̱ kɛ tekɛ pe̱k mi̱ päär.Kä pa̱ŋciin bɛ yi̱k loc ni̱ ta̱a̱ mi̱ ca riali̱kä kä ca la̱th kɛ duɔ̱ɔ̱p mi̱ ca riali̱kä.Mi̱ ci̱ rie̱e̱t da̱ŋ rɛw tekɛ kɛ pek mi̱ päär, bi̱ kɛn rɔ̱ da̱a̱k kɛ duɔ̱ɔ̱p alpɛbi̱tik.bi̱ yi̱k loc ni̱ mi̱ ca riali̱kä kɛ ŋuɔ̱t ɛmɔ.Kä min ca riali̱kä ɛ ba rɔ re̱e̱p kɛ pek rie̱tdä, kä bi̱ ji̱n ɛ go̱r i̱ bi̱ kulɛ wä nhial.kä derɛ tekɛ duplikɛtni̱.Ɛn arrɛy ɛ mi̱ la matkɛ ni̱ nyin thärkithni̱ kä /ci̱ɛɛ mat nämbäri̱, kä cuɛ min ca jiek loc ɛ la mi̱ ca riali̱kä kɛ duɔ̱ɔ̱p mi̱ ca riali̱kä, la̱thkɛ ni̱ thɛrndni̱ tin tekɛ pe̱k ti̱ na̱n kɛ jɛ, Gɔ̱r ni̱ pa̱ŋciin mi̱ bi̱ mat kä bi̱ kɛn ɛ la paramederi̱, # >>> list_sort.call([""aa"", ""a"", ""aaa""])
# [""aa""]
# >>> list_sort.call([""ab"", ""a"", ""aaa"", ""cd""])
# [""ab"", ""cd""]
def sorted_list_sum(lst)
","def list_sort(arr)
  arr.select { |s| s.length.even? }
     .sort_by { |s| [s.length, s] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_sorted_list_sum
    candidate = method(:sorted_list_sum)
    assert_equal([""aa""], candidate.call([""aa"", ""a"", ""aaa""]))
    assert_equal([""AI"", ""asdf"", ""school""], candidate.call([""school"", ""AI"", ""asdf"", ""b""]))
    assert_equal([], candidate.call([""d"", ""b"", ""c"", ""a""]))
    assert_equal([""abcd"", ""dcba""], candidate.call([""d"", ""dcba"", ""abcd"", ""a""]))
    assert_equal([""AI"", ""ai"", ""au""], candidate.call([""AI"", ""ai"", ""au""]))
    assert_equal([], candidate.call([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]))
    assert_equal([""cc"", ""dd"", ""aaaa"", ""bbbb""], candidate.call([""aaaa"", ""bbbb"", ""dd"", ""cc""]))
  end
end
"
HumanEval_150,nus_Latn,rb,"Cäätni̱: ɛ prɔmjɛr nämbär kä bi̱ yi̱o̱w luɔ̱c kä ba̱li̱ö duŋ y mi̱ dɔ̱ŋ.Ɛ prɔgram mi̱ thi̱a̱k mi̱ bi̱ luɔ̱c i̱thpethi̱ duŋ x mi̱ n ɛ # >>> x_or_y.call(7, 34, 12)
# 34
# >>> x_or_y.call(15, 8, 5)
# 5
def x_or_y(n, x, y)
","def x_or_y(n, x, y)
  require 'prime'
  n.prime? ? x : y
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_x_or_y
    candidate = method(:x_or_y)
    assert_equal(34, candidate.call(7, 34, 12))
    assert_equal(5, candidate.call(15, 8, 5))
    assert_equal(33, candidate.call(3, 33, 5212))
    assert_equal(3, candidate.call(1259, 3, 52))
    assert_equal(-1, candidate.call(7919, -1, 12))
    assert_equal(583, candidate.call(3609, 1245, 583))
    assert_equal(129, candidate.call(91, 56, 129))
    assert_equal(1234, candidate.call(6, 34, 1234))
    assert_equal(0, candidate.call(1, 2, 0))
    assert_equal(2, candidate.call(2, 2, 0))
  end
end
"
HumanEval_151,nus_Latn,rb,"Kä matkɛ nämbäri̱ tin /ci̱ te kɛɛl rɛy arrɛy min la pe̱kdiɛn. /Cuɛ la̱th rɛy nämbäri̱ tin /ci̱ te kɛɛl kiɛ tin /ci̱ te kɛɛl.Mi̱ ca ŋun ɛ nämbäri̱, locni̱ nämbäri̱ i̱thkuɛrɛn i̱thkuɛrɛn# >>> double_the_difference.call([1, 3, 2, 0])
# 10
# >>> double_the_difference.call([-1, -2, 0])
# 0
# >>> double_the_difference.call([9, -2])
# 81
# >>> double_the_difference.call([0])
# 0
# If the input array is empty, return 0.
def double_the_difference(lst)
","def double_the_difference(lst)
  lst.select { |n| n.is_a?(Integer) && n.odd? && n >= 0 }
     .map { |n| n ** 2 }
     .sum
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_double_the_difference
    candidate = method(:double_the_difference)
    assert_equal(0, candidate.call([]))
    assert_equal(25, candidate.call([5.0, 4.0]))
    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))
    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))
    assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))
    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))
    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))
  end
end
"
HumanEval_152,nus_Latn,rb,"cäät: Kä ba̱li̱öm ɛ 0, kä mi̱ /ci̱ jɛn ba̱li̱öm ɛ dääk mi̱ thuɔ̱k kam guäc kɛnɛ pek in ca ŋun.Lɔ̱a̱r ɛni̱ arrɛy mi̱ päär bäärɛ min nyoth pek in ci̱ rɔ rɛl kä tin ca ŋa̱c. Mi̱ ca ŋa̱c ɛ gɔaa, Ji̱n caa ji̱ moc kɛ mat kä rɛw ti̱ caa pekdiɛn pa̱a̱r, gua̱th in bi̱ index in kɛl ɛ nyoth ɛ päär.La̱tdu ɛ ɣöö bi̱ ji̱n ɛ ŋa̱c i̱ mi̱ ci̱ raan ɛ ŋa̱c i̱ de pek in ci̱ ben raar kä matni̱kɛ thuɔ̱k.Ɛ mi̱ gɔaa i̱ dëë kuɛn kä dëë pa̱a̱r.Ɛn min ci̱ tuɔɔk kä ji̱ ɛ min ci̱ tuɔɔk kä nɛy diaal tin te rɛy wec.Cä jɛ car ɛn ɣöö bi̱ nɛy diaal ɛ tim ɛn ɣöö ci̱ kɔn tekɛ mi̱ ci̱ tuɔɔk mi̱ ci̱ kɔn ɛ go̱r kɛ gua̱a̱th mi̱ bäär.# >>> compare.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
# [0, 0, 0, 0, 3, 3]
# >>> compare.call([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
# [4, 4, 1, 0, 0, 6]
def compare(game, guess)
","def compare(game, guess)
  game.zip(guess).map { |score, prediction| (score - prediction).abs }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_compare
    candidate = method(:compare)
    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))
    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))
    assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))
    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))
  end
end
"
HumanEval_153,nus_Latn,rb,"Cäät: (kä buɔ̱mdɛ ɛ -1).locni̱ 'Slices.SErviNGSliCes' ni̱ mëë 'SErviNGSliCes' ɛ jɛn in bumni̱jɛn kä repni̱kɛ mi̱ ci̱kɛ lɛ be̱n gɔ̱r: ['SErviNGSliCes', 'Cheese', 'StuFfed'] bi̱ kɛ ku lɛ gɔ̱r i̱ Cäätdɛ, mi ca ji̱ ka̱m ""Slices"" cie mi̱ ɛ ki̱lɛth kɛnɛ array duŋ mɛk ni min bi̱ ben kɛ nhiam rɛy arɛthi̱.Mi̱ tëë kɛ rɛw kiɛ ti̱ ŋuan ti̱ ci̱ rɔ̱ re̱p kɛ buɔ̱m mi̱ päär, bi̱ ji̱n rɔ bi̱ lɛ luäŋ kɛ ɣöö bi̱ kɛ kuëŋ.format: ClassName.StrongestExtensionName. Ji̱n bi̱ yi̱k ji̱ek kɛ ɣöö bi̱ ji̱ek mi̱ di̱i̱t kä bi̱ yi̱k loc ɛ la mi̱ te rɛy kä nɛmɛ.kä ciöt in caa lɛp, ɛn buɔ̱m in caa ka̱m ji̱kɛ ɛ CAP - SM. wargakni̱ rɛy ciöt in ca gɔ̱r ɛ nɛy ti̱ ŋuan, kɛnɛ ɣöö SM ɛ nämbär wargakni̱ tin tɔatni̱ Kä buɔ̱m in ca ŋun ɛ mi̱ cie min ba lat: Mi̱ ca CAP la̱th kä nämbäri̱ tin ca gɔ̱r kɛ ci̱öt mi̱ di̱i̱t Kä repdiɛn ba la̱t kɛ ɣöö ba la̱th kɛ kɔ̱kiɛn tin ba mat rɛy ki̱lɛthä.Ba ji̱ ka̱m ciöt ki̱lɛthä (thtiring) kɛnɛ mat kä tin ca rep.# >>> Strongest_Extension.call(""my_class"", [""AA"", ""Be"", ""CC""])
# ""my_class.AA""
def Strongest_Extension(class_name, extensions)
","def Strongest_Extension(class_name, extensions)
  strongest_extension = extensions.max_by do |extension|
    cap_count = extension.count('A-Z')
    sm_count = extension.count('a-z')
    cap_count - sm_count
  end
  ""#{class_name}.#{strongest_extension}""
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_Strongest_Extension
    candidate = method(:Strongest_Extension)
    assert_equal(""Watashi.eIGHt8OKe"", candidate.call(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]))
    assert_equal(""Boku123.YEs.WeCaNe"", candidate.call(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]))
    assert_equal(""__YESIMHERE.NuLl__"", candidate.call(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]))
    assert_equal(""K.TAR"", candidate.call(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]))
    assert_equal(""__HAHA.123"", candidate.call(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]))
    assert_equal(""YameRore.okIWILL123"", candidate.call(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]))
    assert_equal(""finNNalLLly.WoW"", candidate.call(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]))
    assert_equal(""_.Bb"", candidate.call(""_"", [""Bb"", ""91245""]))
    assert_equal(""Sp.671235"", candidate.call(""Sp"", [""671235"", ""Bb""]))
  end
end
"
HumanEval_154,nus_Latn,rb,"Ji̱n ba ji̱ ka̱m rie̱t da̱ŋ rɛw. Ji̱n bi̱ yi̱k loc ni̱ thuɔ̱k mi̱ ci̱ riet in rɛwdɛ kiɛ mi̱ ci̱kɛ rɔ̱ loc ɛ la mi̱ te rɛy rie̱tdä min nhiam.# >>> cycpattern_check.call(""abcd"", ""abd"")
# false
# >>> cycpattern_check.call(""hello"", ""ell"")
# true
# >>> cycpattern_check.call(""whassup"", ""psus"")
# false
# >>> cycpattern_check.call(""abab"", ""baa"")
# true
# >>> cycpattern_check.call(""efef"", ""eeff"")
# false
# >>> cycpattern_check.call(""himenss"", ""simen"")
# true
def cycpattern_check(a, b)
","def cycpattern_check(a, b)
  (0...b.length).each do |i|
    rotated_b = b[i..-1] + b[0...i]
    return true if a.include?(rotated_b)
  end
  false
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_cycpattern_check
    candidate = method(:cycpattern_check)
    assert_equal(false, candidate.call(""xyzw"", ""xyw""))
    assert_equal(true, candidate.call(""yello"", ""ell""))
    assert_equal(false, candidate.call(""whattup"", ""ptut""))
    assert_equal(true, candidate.call(""efef"", ""fee""))
    assert_equal(false, candidate.call(""abab"", ""aabb""))
    assert_equal(true, candidate.call(""winemtt"", ""tinem""))
  end
end
"
HumanEval_155,nus_Latn,rb,"Cäät: Mi̱ ca ŋun ɛ la intejeri̱, bɛ yi̱k loc ɛ la arrɛy min tekɛ nämbär duŋ pari̱ kɛnɛ pa̱r dijitni̱ kɛrɔ̱.# >>> even_odd_count.call(-12)
# [1, 1]
# >>> even_odd_count.call(123)
# [1, 2]
def even_odd_count(num)
","def even_odd_count(num)
  num.to_s.chars.map(&:to_i).select { |digit| digit != 0 }.partition(&:even?).map(&:count)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_even_odd_count
    candidate = method(:even_odd_count)
    assert_equal([0, 1], candidate.call(7))
    assert_equal([1, 1], candidate.call(-78))
    assert_equal([2, 2], candidate.call(3452))
    assert_equal([3, 3], candidate.call(346211))
    assert_equal([3, 3], candidate.call(-345821))
    assert_equal([1, 0], candidate.call(-2))
    assert_equal([2, 3], candidate.call(-45347))
    assert_equal([1, 0], candidate.call(0))
  end
end
"
HumanEval_156,nus_Latn,rb,"Cäätni̱: Ri̱thääcni̱: 1 <= num <= 1000 kä luɔ̱c jɛ kɛ gɔ̱r piny.Mi̱ ca ŋun ɛ la mi̱ tekɛ puɔ̱thitib intejer, ba Roman nämbäri̱dɛ mi̱ päärkɛ jiek cie mi̱ ɛ thi̱ri̱n, # >>> int_to_mini_roman.call(19)
# ""xix""
# >>> int_to_mini_roman.call(152)
# ""clii""
# >>> int_to_mini_roman.call(426)
# ""cdxxvi""
def int_to_mini_roman(number)
","def int_to_mini_roman(number)
  values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
  numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']

  result = ''
  values.each_with_index do |value, index|
    while number >= value
      number -= value
      result += numerals[index]
    end
  end

  result
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_int_to_mini_roman
    candidate = method(:int_to_mini_roman)
    assert_equal(""xix"", candidate.call(19))
    assert_equal(""clii"", candidate.call(152))
    assert_equal(""ccli"", candidate.call(251))
    assert_equal(""cdxxvi"", candidate.call(426))
    assert_equal(""d"", candidate.call(500))
    assert_equal(""i"", candidate.call(1))
    assert_equal(""iv"", candidate.call(4))
    assert_equal(""xliii"", candidate.call(43))
    assert_equal(""xc"", candidate.call(90))
    assert_equal(""xciv"", candidate.call(94))
    assert_equal(""dxxxii"", candidate.call(532))
    assert_equal(""cm"", candidate.call(900))
    assert_equal(""cmxciv"", candidate.call(994))
    assert_equal(""m"", candidate.call(1000))
  end
end
"
HumanEval_157,nus_Latn,rb,"Cäät: 90 di̱gri̱i̱. Ɛ rektha̱ŋgi̱li̱ ɛ jɛn rektha̱ŋgi̱li̱ mi̱ tekɛ ɛlɛmɛni̱ ti̱ cuŋ ɛ la rektha̱ŋgi̱li̱ kiɛ ɛlɛmɛni̱ ti̱ cuŋ.Kä kui̱c ɛni̱ duɔ̱ɔ̱r, jɛn bɛ a kac.Mi̱ ca pek ɛ wä kä kui̱c in diɔ̱k kä kui̱c in diɔ̱kdiɛn kä triangle ka̱m ɛ la thuɔ̱k mi̱ ci̱ kɛn diɔ̱k ɛ wä kä kui̱c in diɔ̱kdiɛn# >>> right_angle_triangle.call(3, 4, 5)
# true
# >>> right_angle_triangle.call(1, 2, 3)
# false
def right_angle_triangle(a, b, c)
","def right_angle_triangle(a, b, c)
  sides = [a, b, c].sort
  sides[0]**2 + sides[1]**2 == sides[2]**2
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_right_angle_triangle
    candidate = method(:right_angle_triangle)
    assert_equal(true, candidate.call(3, 4, 5))
    assert_equal(false, candidate.call(1, 2, 3))
    assert_equal(true, candidate.call(10, 6, 8))
    assert_equal(false, candidate.call(2, 2, 2))
    assert_equal(true, candidate.call(7, 24, 25))
    assert_equal(false, candidate.call(10, 5, 7))
    assert_equal(true, candidate.call(5, 12, 13))
    assert_equal(true, candidate.call(15, 8, 17))
    assert_equal(true, candidate.call(48, 55, 73))
    assert_equal(false, candidate.call(1, 1, 1))
    assert_equal(false, candidate.call(2, 2, 10))
  end
end
"
HumanEval_158,nus_Latn,rb,"kä bi̱ ram min ci̱ ben nhiam ɛ wɔ̱ nhiam kä leksikɔgrapi̱kal.Mi̱ ci̱ la̱t ɛ ŋuan kä bi̱ kɛn tekɛ nämbär mi̱ di̱i̱t kä bi̱ kɛn tekɛ dääk.Kä arrɛy tëkɛ rie̱e̱t ti̱ gööl. Lätdɛ riet kɛ pek in di̱tni̱ jɛn kä nämbär Gɔ̱r ni̱ pa̱ŋcin mi̱ bi̱ mat kä bi̱ kɛn ɛ la̱t kɛ kuur ti̱ ŋuan.# >>> find_max.call([""name"", ""of"", ""string""])
# ""string""
# >>> find_max.call([""name"", ""enam"", ""game""])
# ""enam""
# >>> find_max.call([""aaaaaaa"", ""bb"", ""cc""])
# ""aaaaaaa""
def find_max(words)
","def find_max(words)
  # Helper function to count unique characters
  def unique_char_count(word)
    word.chars.uniq.size
  end

  words.max_by { |word| [unique_char_count(word), -word] }
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_find_max
    candidate = method(:find_max)
    assert_equal(""string"", candidate.call([""name"", ""of"", ""string""]))
    assert_equal(""enam"", candidate.call([""name"", ""enam"", ""game""]))
    assert_equal(""aaaaaaa"", candidate.call([""aaaaaaa"", ""bb"", ""cc""]))
    assert_equal(""abc"", candidate.call([""abc"", ""cba""]))
    assert_equal(""footbott"", candidate.call([""play"", ""this"", ""game"", ""of"", ""footbott""]))
    assert_equal(""gonna"", candidate.call([""we"", ""are"", ""gonna"", ""rock""]))
    assert_equal(""nation"", candidate.call([""we"", ""are"", ""a"", ""mad"", ""nation""]))
    assert_equal(""this"", candidate.call([""this"", ""is"", ""a"", ""prrk""]))
    assert_equal(""b"", candidate.call([""b""]))
    assert_equal(""play"", candidate.call([""play"", ""play"", ""play""]))
  end
end
"
HumanEval_159,nus_Latn,rb,"Cäät: Mi̱ /thiɛlɛ karɔ̱a̱m ti̱ ro̱ŋ ti̱ ci̱ duɔth, bi̱ ji̱n karɔ̱a̱m diaal tin ci̱ duɔth cam, duŋni̱ ɣöö bi̱ ji̱n ŋot kɛ mi̱ näk ji̱ buɔth.pek in ci̱ duɔth kä karɔ̱tni̱ kɛ kɔr mi̱ethdu] bi dhil locni mi [ pek in ca cam kɛ kɔr mieth, Kä ɛn täämɛ, bi̱diöö ɛ tɔ̱tɔ̱ go̱o̱rɛ ɣöö bi̱diöö in bi̱ raan ɛ cam kɛ jɛn cäŋ ɛmɔ kɛɛliw.Ji̱n ɛ ji̱n muul mi̱ näk buɔth ɛ, kä ci̱ ji̱n mi̱th ni̱ karɔa ti̱ ŋuan, # >>> eat.call(5, 6, 10)
# [11, 4]
# >>> eat.call(4, 8, 9)
# [12, 1]
# >>> eat.call(1, 10, 10)
# [11, 0]
# >>> eat.call(2, 11, 5)
# [7, 0]
# Variables:
# @number : integer
# the number of carrots that you have eaten.
# @need : integer
# the number of carrots that you need to eat.
# @remaining : integer
# the number of remaining carrots thet exist in stock
# Constrain:
# * 0 <= number <= 1000
# * 0 <= need <= 1000
# * 0 <= remaining <= 1000
# Have fun :)
def eat(number, need, remaining)
","def eat(number, need, remaining)
  total_eaten = number + [need, remaining].min
  carrots_left = [remaining - need, 0].max
  [total_eaten, carrots_left]
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_eat
    candidate = method(:eat)
    assert_equal([11, 4], candidate.call(5, 6, 10))
    assert_equal([12, 1], candidate.call(4, 8, 9))
    assert_equal([11, 0], candidate.call(1, 10, 10))
    assert_equal([7, 0], candidate.call(2, 11, 5))
    assert_equal([9, 2], candidate.call(4, 5, 7))
    assert_equal([5, 0], candidate.call(4, 5, 1))
  end
end
"
HumanEval_160,nus_Latn,rb,"Operɛtɔr array tëkɛ ɛni̱ operator kɛl, kɛnɛ operand array tëkɛ operandi̱ rɛw.Operand ɛ mi̱ la matdiɛn ɛ la nyin nämbäri̱ ti̱ /ci̱kɛ negɛtib.Kä bäär in te kä operɛtɔr ɛ mi̱ päär kɛ bäär in te kä operand ɛ mi̱ naŋkɛ kɛl.Nöt: => luɔc = 9 kä min bɛ nööŋ bɛ a 2 + 3 * 4 - 5 matrik = [2, 3, 4, 5] la̱t['+', '*', '-'] Cäät: Ɛkpönɛnti̱eciɔn (**) Kä dääk piny ( //) Mälti̱pli̱këcin (*) Thɔ̱kciɔn ( - ) Matkɛ (+) Kä aljɛbra min la̱tkɛ ni̱ wän:Ɛn expression kɛnɛ return ɛ la mi̱ la̱tkɛ kä expression.Kä matrik in rɛwdɛ ɛ matrik intejeri̱. La̱tdɛ kɛ matrikni̱ da̱ŋ rɛw tin ca ŋun kɛ ɣöö ba aljɛbri̱ka la̱t.Mi̱ ca ŋun ɛ la rɛw ti̱ la̱tkɛ ɛ la̱t matrik, kɛnɛ operandi̱. Matrik in nhiam tekɛ aljɛbra min la̱tkɛ, kɛnɛ def do_algebra(operator, operand)
","def do_algebra(operator, operand)
  expression = operand[0].to_s
  operator.each_with_index do |op, index|
    if op == '//'
      expression += ' / ' + operand[index + 1].to_s
    else
      expression += ' ' + op + ' ' + operand[index + 1].to_s
    end
  end
  eval(expression)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_do_algebra
    candidate = method(:do_algebra)
    assert_equal(37, candidate.call([""**"", ""*"", ""+""], [2, 3, 4, 5]))
    assert_equal(9, candidate.call([""+"", ""*"", ""-""], [2, 3, 4, 5]))
    assert_equal(8, candidate.call([""//"", ""*""], [7, 3, 4]))
  end
end
"
HumanEval_161,nus_Latn,rb,"Cäätni̱ Kä pa̱ŋciin bɛ yi̱k loc ni̱ min ca nööŋ ɛ la thärk.Mi̱ thiɛlɛ ci̱öt ti̱ te rɛy thärkäl, bi̱ thärkäl loc jɔk.mi̱ /ci̱ mɔ ɛ jɛn, titdɛ jɛ i̱ ɛ jɛn.mi̱ ci̱ s[i] ɛ wargak, la̱thdɛ jɔk kä piny ɛ wä nhial kiɛ mi̱ caa loc jɔk, Ji̱n caa ji̱ moc yi̱k mi̱ bi̱ rɔ ri̱t.# >>> solve.call(""1234"")
# ""4321""
# >>> solve.call(""ab"")
# ""AB""
# >>> solve.call(""#a@C"")
# ""#A@c""
def solve(s)
","def solve(s)
  if s =~ /[a-zA-Z]/
    s.chars.map { |char| char =~ /[a-zA-Z]/ ? char.swapcase : char }.join
  else
    s.reverse
  end
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_solve
    candidate = method(:solve)
    assert_equal(""aSdF"", candidate.call(""AsDf""))
    assert_equal(""4321"", candidate.call(""1234""))
    assert_equal(""AB"", candidate.call(""ab""))
    assert_equal(""#A@c"", candidate.call(""#a@C""))
    assert_equal(""#aSDFw^45"", candidate.call(""#AsdfW^45""))
    assert_equal(""2@6#"", candidate.call(""#6@2""))
    assert_equal(""#$A^d"", candidate.call(""#$a^D""))
    assert_equal(""#CCC"", candidate.call(""#ccc""))
  end
end
"
HumanEval_162,nus_Latn,rb,"Mi̱ ci̱ 'thuɔ̱r' ɛ mi̱ thiɛl luɔt, loc ni̱l.Mi ca thärkdɛ ŋun 'text', bi̱ yi̱kdɛ loc kä md5 mi̱ päär kɛ thärkdɛ.# >>> string_to_md5.call(""Hello world"")
# ""3e25960a79dbc69b674cd4ec67a72c62""
def string_to_md5(text)
","require 'digest'

def string_to_md5(text)
  return nil if text.empty?
  Digest::MD5.hexdigest(text)
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_string_to_md5
    candidate = method(:string_to_md5)
    assert_equal(""3e25960a79dbc69b674cd4ec67a72c62"", candidate.call(""Hello world""))
    assert_equal(nil, candidate.call(""""))
    assert_equal(""0ef78513b0cb8cef12743f5aeb35f888"", candidate.call(""A B C""))
    assert_equal(""5f4dcc3b5aa765d61d8327deb882cf99"", candidate.call(""password""))
  end
end
"
HumanEval_163,nus_Latn,rb,"Ciee cäät ɛmɛ: kä b, kɛ räthdɛ nhial.Mi̱ ca ŋun ɛ la rɛw ti̱ puci̱tip intejeri̱ a kɛnɛ b, locni̱ ɛni̱ dhi̱ji̱tni̱ kam a # >>> generate_integers.call(2, 8)
# [2, 4, 6, 8]
# >>> generate_integers.call(8, 2)
# [2, 4, 6, 8]
# >>> generate_integers.call(10, 14)
# []
def generate_integers(a, b)
","def generate_integers(a, b)
  (a..b).to_a.concat((b..a).to_a).select { |num| num.even? }.uniq.sort
end","require 'test/unit'
class TestHumanEval < Test::Unit::TestCase
  def test_generate_integers
    candidate = method(:generate_integers)
    assert_equal([2, 4, 6, 8], candidate.call(2, 10))
    assert_equal([2, 4, 6, 8], candidate.call(10, 2))
    assert_equal([2, 4, 6, 8], candidate.call(132, 2))
    assert_equal([], candidate.call(17, 89))
  end
end
"
