task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,taq_Tfng,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""ⵔⵣⵣⵓ ⴳ ⵡⴰⵔⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⴼⴽⴰⵏ, ⵉⵍⵍⴰ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⵉⵏ ⵢⴰⴹⵏ ⵢⵓⴳⵔⵏ ⵢⴰⵏ ⵙ ⵡⴰⵢⵢⴰⴹ ⵓⴳⴳⴰⵔ ⵏ ⵓⴱⵕⵥ ⵏ ⵡⴰⵜⵉⴳ ⵉⵜⵜⵓⴼⴽⴰⵏ. ⴰⵎⴷⵢⴰ: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,taq_Tfng,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⴽⵛⵎ ⵓⵡⵜⵜⴰⵙ ⴰⴷ ⴳ ⵢⴰⵜ ⵜⵉⴼⵔⴽⵜ ⴳ ⵍⵍⴰⵏⵜ ⴽⵉⴳⴰⵏ ⵏ ⵜⵔⵓⴱⴱⴰ ⵏ ⵉⵃⵏⵊⵉⵔⵏ ⵉⵎⵣⴷⴰⵖⵏ. ⴰⵡⵜⵜⴰⵙ ⵏⵏⴽ ⵉⴳⴰ ⴰⴷ ⵜⴱⴹⵓ ⵜⵔⴰⴱⴱⵓⵜ ⴰⴷ ⴳ ⵜⵉⴼⵔⴽⵉⵏ ⵉⵎⵣⴷⴰⵖⵏ ⴷ ⴰⴷ ⵜⵕⵓⵃ ⵜⵍⴳⴰⵎⵜ ⵏ ⵡⵉⵏⵏⴰ. ⴷⴰ ⵜⵜⵓⵙⵎⵙⴰⵙⴰⵏ ⵜⵔⵓⴱⴱⴰ ⵉⵎⵣⴷⴰⵖⵏ (ⵢⴰⵜ ⵜⴰⴳⴳⴰⵢⵜ ⵉⵕⵥⵎⵏ ⴷⴰ ⵜⵜⵓⵙⴽⵛⵎ ⵙ ⵜⵖⴰⵔⴰⵙⵜ ⵉⵅⵚⵚⴰⵏ) ⴷ ⵓⵔ ⴷⴰ ⵜⵜⵓⵙⴽⵛⵎ ⴳ ⵓⴳⵏⵙⵓ ⵏ ⵡⵉⵢⵢⴰⴹ. ⵙⵙⵓⴷⴷⵓⵙ ⴽⵔⴰ ⵏ ⵡⴰⵏⵙⴰ ⴳ ⵜⵉⴼⵔⴽⵜ ⵏ ⵓⵡⵜⵜⴰⵙ. ⴰⵎⴷⵢⴰ: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) (())))""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,taq_Tfng,python,"

def truncate_number(number: float) -> float:
    """"""ⵉⵖ ⵏⴰⴽⴽⴰ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⴱⵔⵉⴷ""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,taq_Tfng,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⵎⴳⴳⵉⵜⵉⵏ ⵏ ⵓⵙⵙⴰⵔⵓ ⴷ ⵓⵙⵙⴰⵢ ⴳ ⵓⵎⵉⴹⴰⵏ ⵏ ⵍⴱⴰⵏⴽ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⵙ ⵓⵎⵢⴰ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵏ ⵉⵙ ⴳ ⴽⵔⴰ ⵏ ⵜⵉⵣⵉ ⴷⴰ ⵢⴰⴽⵡⵣ ⵓⵎⵉⴹⴰⵏ ⵏ ⵓⵎⵉⴹⴰⵏ ⵏ ⵓⴽⵓⵏⵟ, ⴷ ⴳ ⵜⵉⵣⵉ ⵏⵏⴰⵖ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⵉⴷⵜ. ⵎⴽ ⵓⵔ ⵜⵔⴰⵔ ⵜⵉⴷⵜ. ⴰⵎⴷⵢⴰ: >>> ⴷⴷⴰⵡ_ⴰⵎⵢⴰ (([1, 2, 3]) False >>> ⴷⴷⴰⵡ_ⴰⵎⵢⴰ (([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,taq_Tfng,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""ⵉ ⵜⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ, ⵙⵏⵓⵎⵎⵍ ⴰⵎⵏⵣⴰⵢ ⴰⵎⵙⵜⴰⵔ ⴰⵖⵣⵓⵔⴰⵏ ⴳ ⵓⵏⴰⵎⴽ ⵏ ⵜⵔⴰⴱⴱⵓⵜ ⵏ ⵉⵙⵎⵎⴰⵍⵏ ⴰⴷ. ⴰⵎⵏⵣⴰⵢ ⴰⵎⵙⵜⴰⵔ ⴰⵖⵣⵓⵔⴰⵏ ⵉⴳⴰ ⴰⵎⵣⴰⵔⴰⵢ ⴰⵎⵙⵜⴰⵔ ⴰⵖⵣⵓⵔⴰⵏ ⴳⵔ ⴽⵓ ⵉⴼⵔⴷⵉⵙ ⴷ ⵜⵏⵇⵇⵉⴹⵜ ⵜⴰⵏⴰⵎⵎⴰⵙⵜ (ⴰⵎⵏⵣⴰⵢ ⴳ ⵡⴰⴷⴷⴰⴷ ⴰⴷ: MAD = average ∙ x - x_mean ∙ ⴰⵎⴷⵢⴰ: >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,taq_Tfng,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""ⴰⵛⵛⵉⵍ ⵏ ⵓⵟⵟⵓⵏ ""ⴷⵉⵍⵉⵜⵉⵎⴰⵜⵔ"" ⴳⵔ ⴽⵓ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴷⴰⵢⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵓⴽⵛⵛⵓⵎ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,taq_Tfng,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⴽⵛⵎ ⵓⵡⵡⵓⵔ ⴰⴷ ⴳ ⵢⴰⵜ ⵜⵉⴼⵔⴽⵜ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⵔⵓⴱⴱⴰ ⵉ ⵜⴱⵕⴰⵏⴽⵉⵙⵜⵉⵏ ⵉⵜⵜⵓⵙⵏⵖⵍⵏ ⵏⵏⴰ ⵉⴱⴹⴰⵏ ⵙ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⵉ ⴽⵓ ⵜⴰⵔⴰⴱⴱⵓⵜ, ⵙⵙⵓⴼⵖ ⴰⵙⵡⵉⵔ ⴰⵛⵇⵇⴰⵏ ⵏ ⵓⵙⵏⵖⵍ ⵏ ⵜⴱⵕⴰⵏⴽⵉⵙⵜⵉⵏ. ⵙ ⵓⵎⴷⵢⴰ (() (()) ⵖⵓⵔⵙ ⵙⵉⵏ ⵉⵙⵡⵉⵔⵏ ⵏ ⵓⵙⵏⵖⵍ ⴳ ⵜⵉⵣⵉ ⵏⵏⴰ ⵖⵓⵔⵙ ((())) ⴽⵕⴰⴹ. >>> parse_nested_parens (('((()) ((())) () (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,taq_Tfng,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⵏⴼⵍ ⵓⵎⵙⴳⵎⴹ ⵏ ⵉⵙⵉⴹⵏ ⵏ ⵓⵙⴽⵛⵎ ⵖⴰⵙ ⵅⴼ ⵡⵉⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵙⵉⴹⵏ ⵏ ⵓⵙⴽⵛⵎ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,taq_Tfng,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""ⵉ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⴽⵛⵎ ⵜⴰⴱⵍⵜ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵓⵏⵖⴰ ⴷ ⵓⵙⴼⴰⵔ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵜⵓⵏⵖⴰ ⵜⴰⵣⴳⵣⴰⵡⵜ 0 ⴷ ⵓⵙⴼⴰⵔ ⴰⵥⵕⴼⴰⵏ ⵉⴳ 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,taq_Tfng,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⴳⴳⴰⵔ ⵏ ⵓⴽⵙⴰⵢ ⵉⵜⵜⵢⴰⴼⴰⵏ ⴰⵔ ⵜⵉⵣⵉ ⵉⵜⵜⵢⴰⴼⴰⵏ ⴳ ⵓⵙⵓⵔⵙ. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,taq_Tfng,python,"

def is_palindrome(string: str) -> bool:
    """"""ⴹⴼⵔ ⴰⵎⵣⵔⵓⵢ ⵏ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⵙ ⵓⵡⵜⵜⵓ ⵏ ⵜⵉⴼⵉⵏⴰⵖ. ⵜⴰⵡⵏⴳⵉⵎⵜ ⵏ ⴰⵍⴳⵓⵔⵉⵜⵎ ⵜⴳⴰ ⵜⵓⵏⵙⵉ: - ⴹⴼⵔ ⴰⵎⵣⵔⵓⵢ ⵏ ⵓⵡⵜⵜⵓ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⵉⴳⴰⵏ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ. - ⵔⵏⵓ ⴳ ⵜⴳⵉⵔⴰ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵜⴰⴳⴰⵍⵜ ⵏ ⵓⵡⵜⵜⵓ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⴷⴰⵜ ⵏ ⵓⵡⵜⵜⵓ ⵏ ⵜⵉⴼⵉⵏⴰⵖ. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('catac') ' >>> make_palindrome ((('catac') ' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""ⴰⵣⵣⵔⴰⵢ ⵎⴽ ⵜⴳⴰ ⵜⵕⵉⵏⴳ ⵜⴰⵡⴰⵍⵜ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵜ""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,taq_Tfng,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⵉⵙⵉⴹⵏⵏ ⵏ ⵓⵙⴽⵛⵎ a ⴷ b ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ 1 ⴷ 0 ⵅⴰⵙ. ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔ XOR ⴱⵉⵏⴰⵔⵉ ⵅⴼ ⵉⵙⵉⴹⵏⵏ ⴰⴷ ⴷ ⴷⴰ ⵜⵜⵓⵢⴰⴽⴽⴰ ⵜⵢⴰⴼⵓⵜ ⴰⵡⴷ ⵏⵜⵜⴰⵜ ⴰⵎⵎ ⵉⵙⵉⴹⵏ. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,taq_Tfng,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵜⵉⴼⵔⵉⵙⵉⵏ, ⵙⵓⵍⵍ ⵜⵉⵣⵉ ⵜⴰⵖⵣⵉⴼⵜ. ⵙⵓⵍⵍ ⵜⵉⵣⵉ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ ⴳ ⵡⴰⴷⴷⴰⴷ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵏ ⵜⵉⵖⵣⵉ ⵢⴰⴽⵙⵓⵍⵏ. ⵙⵓⵍⵍ ⵓⵍⴰ ⴳ ⵡⴰⴷⴷⴰⴷ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵓⴽⵛⵛⵓⵎ ⵉⴳⴰⵏ ⵜⵍⵍⵉⵜ. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,taq_Tfng,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵓⵎⵟⵟⵓ ⴰⵎⵢⵉⵡⵏ ⴰⵅⴰⵜⴰⵔ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ a ⴷ b >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,taq_Tfng,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵓⵎⵙⵎⵉⵍ ⵏ ⴽⵓⵍⵍⵓ ⵉⵙⵏⴼⴰⵔⵏ ⵙⴳ ⵓⵥⵥⵉⵢⵏ ⴰⵔ ⵓⵣⵣⵓⵢⵏ ⴳ ⵜⵉⴼⵔⴽⵜ ⵏ ⵓⵙⴽⵛⵎ >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,taq_Tfng,python,"

def string_sequence(n: int) -> str:
    """"""ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵢⴰⵏ ⵓⵙⵏⴼⵍⵓⵍ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵜⵜⵓⵙⵏⴱⴹⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ ⵙⴳ 0 ⴰⵔ n ⵙ ⵜⵓⵎⵔⵜ. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,taq_Tfng,python,"

def count_distinct_characters(string: str) -> int:
    """"""ⵙ ⵜⵉⴼⵔⵜ ⵏ ⵜⵉⴼⵉⵏⴰⵖ, ⵙⵙⵏⵏⵉ ⵎⵏⵛⴽ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ (ⵡⴰⵍⴰ ⵏ ⵡⴰⴷⴷⴰⴷ), ⵜⵍⵍⴰ ⴳ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('ⵊⵔⵉ') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,taq_Tfng,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""""ⴰⵛⵛⴰⵔⴻⵎ ⵏ ⵜⴰⵍⴻⵎⵙⴰ ⵜⴰ-ⴰ ⴻⵈⵈⴰⵍ ⴰⵛⴰⵔⴻⵎ ⵉⵙⴰⵍⴰⵏ ⵏ ⵎⵓⵙⵉⴾ ⴷⴰⵗ ⵜⴰⵍⴻⵎⵙⴰ ⵜⴰ-ⴰⵙⵛⵉⵉ. ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⴻⵜ ⵜⴰⵈⵈⴰⵍ ⴰⴾⴰⵉⴰⴷ ⵏ ⴰⵛⴰⵔⴻⵎ ⵏ ⵉⵙⴰⵍⴰⵏ ⵏ ⵉⵎⵓⵣⴰⵔⴰⵏ ⵉⵋⵋⴰⵏⴻⵏ ⵉ ⵜⵉⴾⴰⵔⵙⴰⵉ ⴰⵋⵋⵓⵜⵏⴻⵏ. ⴻⵂⴰⵏ ⴰⴾⴰⵜⴰⴱ: """"o""""- ⵏⵓⵜ, ⵓⵉ ⴰⵔⴰⴾⴰⵏⴻⵏ ⴰⴾⴾⵓⵣ ⵏ ⵜⵉⴾⴰⵔⵙⴰⵉ """"o""""- ⵏⵓⵜ, ⵓⵉ ⴰⵔⴰⴾⴰⵏⴻⵏ ⵙⴰⵏⴰⵜ ⵜⵉⴾⴰⵔⵙⴰⵉⴻⵏ """"o""""- ⵏ ⵜⵉⴾⴰⵔⵙⴰⵉ, ⵓⵉ ⴰⵔⴰⴾⴰⵏⴻⵏ ⵙⴰⵏⴰⵜ ⵜⵉⴾⴰⵔⵙⴰⵉⴻⵏ """"o""""- ⵏ ⵜⵉⴾⴰⵔⵙⴰⵉ, ⵓⵉ ⴰⵔⴰⴾⴰⵏⴻⵏ ⵜⴰⴾⴰⵔⵙⴰⵉ, ⵓⵉ ⴰⵔⴰⴾⴰⵏⴻⵏ ⵜⴰⴾⴰⵔⵙⴰⵉ >>> parse_music"""" o"""" .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,taq_Tfng,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""ⵔⵥⵎ ⵎⴰⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⵉⵖⵢ ⴰⴷ ⵜⵜⵢⴰⴼⴰ ⵢⴰⵏ ⵓⵡⵜⵉⵍ ⴰⵎⵥⵍⴰⵢ ⴳ ⵓⵡⵜⵉⵍ ⴰⵎⵣⵡⴰⵔⵓ. ⵔⵥⵎ ⵉⵙⴽⴽⵉⵏⵏ ⵉⵎⵙⴳⴷⴰⵍⵏ. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,taq_Tfng,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""""ⵉⴽⴽⵉ ⵉⴳⴰⵜ ⵜⵉⴼⵔⴽⵜ ⵏ ⵉⵎⴹⴰⵏ ⵙⴳ ""ⵙⵢⴰ"" ⴰⵔ ""ⵜⵥⴰ"". ⵉⵙⵜⴰⵢⵏ ⵉⵣⵔⴼⴰⵏ ⴳⴰⵏ ""ⵙⵢⴰ"", ""ⵢⴰⵏ"", "" ⵙⵉⵏ"", "" ⴽⵕⴰⴹ"", ""ⴽⴽⴽⵓⵥ"", ""ⵎⵎⵓⵙ"", ""ⵚⴹⵉⵚ"", ""ⴰⵙⵙⴰ"", ""ⵜⴰⵎⵔⴰⵡ"" ⴷ ""ⵜⵥⴰ"". ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵔⴽⵜ ⵙ ⵉⵎⴹⴰⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙⴳ ⵉⵎⵥⵥⵉⵏ ⴰⵔ ⵉⵎⵇⵇⵓⵔⵏ >>> sort_numbers (((' ⴽⵕⴰⴹ ⵢⴰⵏ ⵙⵎⵎⵓⵙ') ' ⵢⴰⵏ ⴽⵕⴰⴹ ⵙⵎⵎⵓⵙ' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,taq_Tfng,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⵢⴰⴽⴽⴰⵏ (ⵙ ⵜⵉⵖⵣⵉ ⵏ ⵙⵉⵏ ⵓⴳⴳⴰⵔ) ⵙⵜⴰⵢ ⴷ ⵙⵉⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⴰ ⵢⵓⴳⵔⵏ ⴽⵓ ⵢⴰⵏ ⵙ ⵡⴰⵏⴰⵡ ⵏⵏⵙ ⴷ ⵙⵙⵓⴷⵙ ⵏⵏⵙⵏ ⵙ ⵓⵙⵓⴷⵙ (ⵉⴹ ⴰⵎⵥⵥⵢⴰⵏ, ⵓⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,taq_Tfng,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""ⵙ ⵜⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏ (ⵙ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⴷⴳⴳⵡⴰⵔ), ⵙⵙⵎⵔⵙⵏ ⴰⵙⵏⴼⵍ ⴰⵎⵉⵔⵉⵡ ⴳ ⵜⵍⴳⴰⵎⵜ ⴰⴷ, ⵙ ⵎⴰⵏⵉ ⵔⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵥⵥⵢⴰⵏ 0 ⴷ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵇⵔⴰⵏ 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,taq_Tfng,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""ⴰⴼⵉⵍⵜⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⴽⵓ ⵡⴰⵜⵉⴳⵏ ⵏ ⴱⵉⵜⵓⵏ ⵉ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,taq_Tfng,python,"

def strlen(string: str) -> int:
    """"""ⵜⵉⵖⵣⵉ ⵏ ⵓⴽⵛⵛⵓⵎ ⵏ ⵜⵉⴼⵉⵏⴰⵖ >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,taq_Tfng,python,"

def largest_divisor(n: int) -> int:
    """"""ⵉ ⵓⵎⴹⴰⵏ n, ⴷⴼⴽ ⴰⵎⴹⴰⵏ ⴰⵅⴰⵜⴰⵔ ⵏⵏⴰ ⵉⵜⵜⴱⴹⵓⵏ n ⵙ ⵜⴰⴳⴷⴰⵣⴰⵍⵜ, ⴷ ⵡⵉⵏⵏⴰ ⵎⵥⵥⵉⵢⵏ ⵙⴳ n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,taq_Tfng,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""ⴷⴰ ⵉⵜⵜⵓⵖⵓⵍ ⵓⵙⴼⵙⵔ ⵏ ⵉⵎⴳⴳⵉⵜⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⵙⴳ ⵉⵎⵥⵥⵉⵏ ⴰⵔ ⵉⵎⵇⵇⵔⴰⵏ. ⴽⵓ ⵢⴰⵏ ⴳ ⵉⵎⴳⴳⵉⵜⵏ ⴰⴷ ⵉⵜⵜⵓⵙⵏⵓⵎⵎⵍ ⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⵉⵣⴷⵉⵏ ⴷ ⵡⴰⵏⵏⴰⵢ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴷⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ ⴳ ⵓⵙⴼⵙⵔ. ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⵙⴽⵛⵎ ⴰⵎⵢⴰⵖ ⵏ ⵉⵎⴳⴳⵉⵜⵏ ⴰⴽⴽⵡ >>> ⵉⵙⴼⵙⵔ ((8) [2, 2, 2] >>> ⵉⵙⴼⵙⵔ ((25) [5, 5] >>> ⵉⵙⴼⵙⵔ ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,taq_Tfng,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""ⵙⴳ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴼⵖ ⵉⴼⵔⴷⵉⵙⵏ ⴰⴽⴽⵡ ⵏⵏⴰ ⵉⵜⵜⵊⵕⵓⵏ ⵓⴳⴳⴰⵔ ⵏ ⵢⴰⵜ ⵜⵉⴽⴽⵍⵜ. ⵃⴹⵓ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⵇⵇⵉⵎⵏ ⴰⵎⵎ ⵡⵉⵏⵏⴰ ⵉⵜⵜⵓⵣⵎⵎⴻⵎⵏ ⴳ ⵓⵙⴽⵛⵎ. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,taq_Tfng,python,"

def flip_case(string: str) -> str:
    """"""ⵉ ⵢⴰⵏ ⵓⵙⵏⴼⵍ ⵏ ⵜⵉⴼⵉⵏⴰⵖ, ⵙⵙⵓⵜⵍ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵥⵥⵉⵏ ⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵇⵔⴰⵏⵏ ⴷ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵇⵔⴰⵏⵏ ⵙ ⵉⵙⴽⴽⵉⵍⵏ ⵉⵎⵥⵥⵉⵏⵏ. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,taq_Tfng,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵙⴽⴽⵉⵍⵏ ⵏ ⵜⵉⵙⵉⴹⴼⴰⵏ ⴳ ⵢⴰⵏ ⵓⵙⴽⴽⵉⵍ >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,taq_Tfng,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⵏⴼⵍ ⵓⵎⵙⴳⵎⴹ ⵏ ⵉⵙⵉⵍⵉⵡⵏ ⵏ ⵓⵙⴽⵛⵎ ⵖⴰⵙ ⵉ ⵡⵉⵏⵏⴰ ⵉⵙⵙⵏⵜⵉⵢⵏ ⵙ ⵢⴰⵏ ⵓⵣⵡⵍ ⵉⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,taq_Tfng,python,"

def get_positive(l: list):
    """"""ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵉⵎⴹⴰⵏ ⵉⵏⴰⵎⵓⵔⵏ ⵖⴰⵙ ⴳ ⵜⵍⴳⴰⵎⵜ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,taq_Tfng,python,"

def is_prime(n):
    """"""ⴰⵔ ⵉⵜⵜⴰⵍⵙ ⵜⵉⴷⵜ ⵉⵖ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⴽⴽⵡ ⴰⵎⵣⵡⴰⵔⵓ, ⴷ ⵜⵉⴷⵜ ⵉⵖ ⵓⵔ ⵉⴳⵉ. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,taq_Tfng,python,"import math


def poly(xs: list, x: float):
    """"""xs ⴳⴰⵏ ⵉⵎⴳⴳⵉⵜⵏ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵙⴽⴽⵉⵍⵏ. find_zero ⵔⴰⴷ ⵢⴰⴼ x ⵣⵓⵏⴷ poly(x) = 0. find_zero ⵔⴰⴷ ⵢⴰⴽⴽⴰ ⵖⴰⵙ ⵜⵏⵇⵇⵉⴹⵜ ⵏ ⵓⵎⵢⴰ, ⴰⵡⴷ ⵉⵖ ⴳⴰⵏ ⴽⵉⴳⴰⵏ. ⵓⴳⴳⴰⵔ ⵏ ⵡⴰⵢⴰ, find_zero ⵔⴰⴷ ⵢⴰⵙⵉ ⵍⵉⵙⵜ ⵏ xs ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵢⴰ ⵏ ⵉⵎⴳⴳⵉⵜⵏ ⴷ ⵓⵎⴳⴳⵉⵜ ⴰⵎⵇⵇⵔⴰⵏ ⵓⵔ ⵉⴳⵉⵏ ⵓⵎⵢⴰ ⴰⵛⴽⵓ ⵔⴰⴷ ⵢⴰⵙⵉ ⴰⴼⵙⵙⴰⵢ. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⵜⴰⵍ ⴱⵓⵍⵉⵏⵓⵎⵉⴰⵍ ⵙ ⵉⵎⴳⴳⵉⵜⵏ xs ⴳ ⵜⵏⵇⵇⵉⵟ x. ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,taq_Tfng,python,"

def sort_third(l: list):
    """"""ⴷⴰ ⵜⵜⴰⵙⵉ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⴰⵍⴳⴰⵎⵜ l ⴰⵔ ⵜⵙⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ l' ⵣⵓⵏⴷ ⵎⴰⵙ ⵜⴳⴰ l ⵜⴰⵎⴷⴷⴰⴷⵜ ⴷ l ⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵎⴹⴰⴽⴰⵕⵏ ⵙ ⴽⵕⴰⴹ, ⵎⴰⵛⴰ ⵜⵉⵜⵉⴳⵉⵏ ⵏⵏⵙ ⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⴹⴰⴽⴰⵕⵏ ⵙ ⴽⵕⴰⴹ ⴳⴰⵏ ⵜⵉⵜⵉⴳⵉⵏ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏ l, ⵎⴰⵛⴰ ⵜⵜⵓⵙⵎⵉⵍⵏⵜ. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,taq_Tfng,python,"

def unique(l: list):
    """"""ⴰⵔ ⵉⵜⵜⴰⴷⴼ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵥⵍⴰⵢⵏ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⴳ ⵜⵍⴳⴰⵎⵜ >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,taq_Tfng,python,"

def max_element(l: list):
    """"""ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵓⵎⵙⴽⴰⵔ ⴰⵎⵇⵔⴰⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,taq_Tfng,python,"

def fizz_buzz(n: int):
    """"""ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵉⵜⵜⴼⴼⵖ ⵓⵟⵟⵓⵏ 7 ⴳ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵥⵥⵉⵏ ⵏⵏⴰ ⵓⵔ ⵢⴰⴳⴳⵓⴳⵏ ⵏ n ⵏⵏⴰ ⵉⵜⵜⵓⵢⴱⴹⴰⵏ ⵙ 11 ⵏⵖⴷ 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,taq_Tfng,python,"

def sort_even(l: list):
    """"""ⴷⴰ ⵜⵜⴰⵙⵉ ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⴰⵍⴳⴰⵎⵜ l ⴰⵔ ⵜⵙⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ l' ⵣⵓⵏⴷ ⵎⴰⵙ ⵜⴳⴰ l' ⵜⴰⵎⴷⵢⴰⵣⵜ ⴷ l ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ, ⵎⴰⵛⴰ ⵜⵉⵜⵉⴳⵉⵏ ⵏⵏⵙ ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳⴰⵏ ⵜⵉⵜⵉⴳⵉⵏ ⵏ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏ l, ⵎⴰⵛⴰ ⵜⵜⵓⵙⵎⵉⵍⵏ. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,taq_Tfng,python,"

def encode_cyclic(s: str):
    """"""ⴷⴰ ⵉⵜⵜⴰⵎⵥ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ ⵙ ⵜⵎⵔⵙⵜ encode_cyclic. ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵔⴽⵜ ⵉⵜⵜⵓⵙⵏⵎⴽⵜⴰⵏ ⵙ ⵜⵔⵓⴱⴱⴰ ⵏ ⵓⵙⵉⴽⵍ ⵏ ⴽⵕⴰⴹ ⵉⵙⴽⴽⵉⵍⵏ.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,taq_Tfng,python,"

def prime_fib(n: int):
    """"""ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ prime_fib ⵓⵟⵟⵓⵏ ⵏ ⵡⵉⵙⵙ ⵏ- ⵏⵏⴰ ⵉⴳⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ, ⴷ ⵉⴳⴰ ⴰⵡⴷ ⴰⵎⵣⵡⴰⵔⵓ. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,taq_Tfng,python,"

def triples_sum_to_zero(l: list):
    """"""ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⴰⵏ ⴽⵕⴰⴹ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵏⵏ ⵙ ⵓⵎⵢⴰ, ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ. >>> ⵜⵉⴷⵜ ⵏ ⵜⴽⵍⵉⵜ_ⵜⵉⵎⵉⴹⵉ_ⵙⴳ_ⴰⵎⵢⴰ (([1, 3, 5, 0]) ⵜⵉⴷⵜ >>> ⵜⵉⴷⵜ ⵏ ⵜⴽⵍⵉⵜ_ⵜⵉⵎⵉⴹⵉ_ⵙⴳ_ⴰⵎⵢⴰ (([1, 3, -2, 1]) ⵜⵉⴷⵜ >>> ⵜⵉⴷⵜ ⵏ ⵜⴽⵍⵉⵜ_ⵜⵉⵎⵉⴹⵉ_ⵙⴳ_ⴰⵎⵢⴰ (([1, 2, 3, 7]) ⵜⵉⴷⵜ >>> ⵜⵉⴷⵜ ⵏ ⵜⴽⵍⵉⵜ_ⵜⵉⵎⵉⴹⵉ_ⵙⴳ_ⴰⵎⵢⴰ (([2, 4, -5, 3, 9, 7]) ⵜⵉⴷⵜ >>> ⵜⵉⴷⵜ ⵏ ⵜⴽⵍⵉⵜ_ⵜⵉⵎⵉⴹⵉ_ⵙⴳ_ⴰⵎⵢⴰ[1]) ⵜⵉⴷⵜ """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,taq_Tfng,python,"

def car_race_collision(n: int):
    """"""ⴰⴷⴰⵍⵉⵎⴰⵍ ⴰⴱⴰⵔⴰ ⵓⴰ ⵢⵈⴰⵍ ⴰⵉⴾⴰⴷⴰⴱⴰⵏ ⵓⴰⵔⵢⵏ ⴰⵎⵓⵜⵜⵉ. ⵏⴰⴾⴰⵍ ⴰⴾⴰⵉⴰⴷⴰⵏ ⵙⵓⵍⵓ ⵙⴰⵔⴰⵜ ⵙⵓⵍⵓ; ⴷⴰⴶⵂ ⴰⵣⵣⴰⵎⴰⵏ ⵉⵉⵉⴰⵏ, ⵜⴰⵈⵈⵉⵎⵜ ⵏ ⵏⴰⴾⴰⵍ ⴰⴾⴰⵉⴰⴷⴰⵏ ⵙⵓⵍⵓ ⵙⴰⵔⴰⵜ ⵙⵓⵍⵓ. ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⵏⴰⴾⴰⵍ ⵜⴰⵏ ⴰⴾⴰⵉⴰⴷⴰⵏ ⴰⵈⴰⵍⴰⵏ ⴰⵉⴾⴰⴷⴰⴱⴰⵏ ⴰⵋⵓⵜⵏⵢⵏ ⴷⴰⵗ ⵉⵉⵉⴰⵏ. ⴾⵓⵍ ⴰⴾⴰⵉⴰⴷⴰⵏ ⴰⴾⴰⵉⴰⴷⴰⵏ ⴷⴰⵗ ⵜⴰⵣⵓⵍⵉ. ⵙⴰⵏⴰⵜⴰⵜ ⵏⴰⴾⴰⵍ ⵜⴰⵏ ⴰⵈⴰⵍⴰⵏ ⴰⵉⴾⴰⴷⴰⴱⴰⵏ ⴰⵍⵓⴰⵈ ⵓⴰ ⵉⴷⴰⵍⴰⴾⴰⵍ ⵏⴰⴾⴰⵍ ⵙⴰⵔⴰⵜ ⵙⵓⵍⵓ ⵉⴾⴰⵉⴰⴷⴰⵏ ⵙⴰⵔⴰⵜ ⵙⵓⵍⵓ. ⵎⴰⵛⴰⵏ, ⴰⴾⴰⵉⴰⴷⴰⵏ ⴰⵈⴰⵍⴰⵏ ⴰⵉⴾⴰⴷⴰⴱⴰⵏ ⴰⴷ ⵉⴾⵉⴰⴷⴰⵏ; ⴷⴰⵗ ⴰⵓⵢⵏ, ⴰⴾⴰⵉⴰⴷⴰⵏ ⴷⴰⵗ ⵜⴰⴱⴰⵔⴰⵜ ⵏⴰⵙⴰⵏ ⵛⵓⵏⴷ ⴰⵙ ⵓⴰⵔ ⴰⴾⴰⵉⴰⴷⴰⵏ.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,taq_Tfng,python,"

def incr_list(l: list):
    """"""ⴷⴰ ⵉⵜⵜⵓⵖⵓⵍ ⵓⵙⵎⵉⵍ ⵙ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ ⵙ 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,taq_Tfng,python,"

def pairs_sum_to_zero(l):
    """"""ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ True ⵎⴽ ⵍⵍⴰⵏ ⵙⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵏⵏ ⵙ ⵓⵎⵢⴰ, ⴷ False ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,taq_Tfng,python,"

def change_base(x: int, base: int):
    """"""ⵙⵏⴼⵍ ⵜⴰⵙⵉⵍⴰ ⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ x ⵙ ⵜⴰⵙⵉⵍⴰ. ⵙⵏⴼⵍ ⴰⵙⵎⴷⵢⴰ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵏⴼⵍ. ⵉⵎⴹⴰⵏ ⵏ ⵜⵙⵉⵍⴰ ⴷⵔⵓⵙⵏ ⵙⴳ 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,taq_Tfng,python,"

def triangle_area(a, h):
    """"""ⴷⴰ ⵉⵜⵜⵓⴼⴽⴰ ⵓⵣⵣⵓⵣⵔ ⵏ ⵜⵙⴳⴰ ⴷ ⵢⵉⴳⵔ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⵎⵇⵔⴰⵏ ⵉ ⵜⵔⵉⴰⵏⴳⵉⵍ. >>> triangle_area{5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,taq_Tfng,python,"

def fib4(n: int):
    """"""ⵜⴰⵍⵖⴰ ⵏ ⵉⵎⴹⴰⵏ ⵏ Fib4 ⵜⴳⴰ ⵜⴰⵍⵖⴰ ⵢⴰⴽⵙⵓⵍⵏ ⵉ ⵜⴰⵍⵖⴰ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ ⵓⵎⴽ ⴰⴷ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵉ ⵓⵙⵉⴹⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵜⵉⵙⵉⴹ ⵏ ⵓⵎⴹⴰⵏ ⵏ fib4. ⵓⵔ ⵜⵙⵙⵎⵔⵙ ⵜⵉⴽⵍⵜ ⵏ ⵓⵙⵏⴼⵍ. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,taq_Tfng,python,"

def median(l: list):
    """"""ⴷⴰ ⵉⵜⵜⵓⵖⵓⵍ ⵡⴰⵎⵎⴰⵙ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵜⵍⴳⴰⵎⵜ l. >>> ⵡⴰⵎⵎⴰⵙ (([3, 1, 2, 4, 5]) 3 >>> ⵡⴰⵎⵎⴰⵙ (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,taq_Tfng,python,"

def is_palindrome(text: str):
    """"""ⴷⴰ ⵉⵜⵜⵉⵔⵉ ⵎⴰⵙⴷ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵜⴰⵡⴰⵜⴰⵢⵜ ⵜⴳⴰ ⵜⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎ >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,taq_Tfng,python,"

def modp(n: int, p: int):
    """"""ⴰⵔ ⵉⵜⵜⴰⵍⵙ 2^n ⵎⵓⴷⵓⵍⵓ p (ⴰⴷ ⵏⵙⵙⴽⵜⵉ ⵙ ⵡⵓⵟⵟⵓⵏ). >>> ⵎⵓⴷⴱ ((3, 5) 3 >>> ⵎⵓⴷⴱ ((1101, 101) 2 >>> ⵎⵓⴷⴱ ((0, 101) 1 >>> ⵎⵓⴷⴱ ((3, 11) 8 >>> ⵎⵓⴷⴱ ((100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,taq_Tfng,python,"

def encode_shift(s: str):
    """"""ⴷⴰ ⵉⵜⵜⴰⵎⵥ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ ⵙ ⵜⵎⵔⵙⵜ encode_shift. ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵉⵏⴰⵖ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵜⵉⴼⵔⴽⵜ ⵜⴰⵎⵙⴷⵏⴰⵏⵜ ⵙ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⴽⵓ ⵉⵙⴽⴽⵉⵍ ⵙ 5 ⴳ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵉⴼⵉⵏⴰⵖ.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,taq_Tfng,python,"

def remove_vowels(text):
    """"""remove_vowels ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⵜⵉⴼⵉⵏⴰⵖ ⴷ ⴰⵔ ⵢⴰⴽⴽⴰ ⵜⵉⴼⵉⵏⴰⵖ ⴱⵍⴰ ⵉⵎⵏⵉⵍⵏ. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,taq_Tfng,python,"

def below_threshold(l: list, t: int):
    """"""ⴰⵔ ⵉⵜⵜⴰⴷⴼ ⵜⵉⴷⵜ ⵎⴽ ⴳⴰⵏ ⵉⵎⴹⴰⵏ ⴰⴽⴽⵡ ⴳ ⵜⵍⴳⴰⵎⵜ ⵍ ⴷⴷⴰⵡ ⵏ ⵓⴱⵕⵕⴰⵣ t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,taq_Tfng,python,"

def add(x: int, y: int):
    """"""ⵙⵔⵓⵏ ⵙⵏⴰⵜ ⵏ ⵡⵓⵟⵟⵓⵏ x ⴷ y >>> ⵙⵔⵓⵏ ((2, 3) 5 >>> ⵙⵔⵓⵏ ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,taq_Tfng,python,"

def same_chars(s0: str, s1: str):
    """"""<string name=""new_chars_{""eabcdzzzz"", 'dddzzzzzzzddeddabc"") </string> <string name=""new_chars_{""abcd"", 'dddddddddabc"") <string name=""new_chars_{""dddddddddabc"", 'abcd"") <string name=""new_chars_{""eabcd"", 'dddddddddabc"") <string name=""new_chars_{""eabcd"", 'dddddddddabc"") <string name=""new_chars_{""abcd"", 'dddddddddabddce"") <string name=""new_chars_{""abcdzzzz"", 'dddzzzzzzzddabc"") <string name=""new_chars_{""abcdzzzz"", 'dddddddddddddddddddddabc"") <string name=""new_chars_{""abcdzzzz"", 'ddddddddddddddddddddddddddddabc"") <string name=""new_chars_{""abcd_chars_{""abcd_chars_{""abcd_d_chars_{""abc_d_d_chars_chars_{""abc_chars_chars_chars_{""abc_chars_chars_chars_chars_chars_chars_{""abc_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars""abc_chars""abc_chars""abc_chars""abc_chars""abc_chars""abc_ch_ch_chars""_ch_ch_ch_ch_chars""_ch_chars""_ch_ch_chars""_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch_ch""""""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,taq_Tfng,python,"

def fib(n: int):
    """"""ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⵓⵏⴰⵛⵉ ⵡⵉⵙⵙ n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,taq_Tfng,python,"

def correct_bracketing(brackets: str):
    """"""brackets ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵜⵜⵓ ⵏ ""<"" ⴷ "">"". return True ⵉⵖ ⴷⴰⵔ ⴽⵓ bracket ⵉⵕⵥⵎⵏ ⵢⴰⵏ bracket ⵉⵇⵇⵏ. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,taq_Tfng,python,"

def monotonic(l: list):
    """"""Return True ⵉⴳⴰⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵜⵍⴳⴰⵎⵜ ⴷⴰ ⵙⵙⵓⴷⵓⵏ ⵙ ⵓⵖⵍⵉ ⵏⵖⴷ ⵙ ⵓⵙⵙⵎⵎⵉⴹ. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,taq_Tfng,python,"

def common(l1: list, l2: list):
    """"""ⴷⴰ ⵉⵜⵜⴰⵊⵊⴰ ⴰⴷ ⵜⵜⵓⵙⵎⵉⵍⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵢⵉⵡⵏ ⵉⵎⵢⵉⵡⵏⵏ ⵉⵛⵛⴰⵔⵏ ⵉ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,taq_Tfng,python,"

def largest_prime_factor(n: int):
    """"""ⴰⵔⵏ ⵉⴽⴽⴰ ⵓⵎⴳⴳⴰⵔⵓ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵅⴰⵜⴰⵔ ⵏ n. ⵏⵙⵙⵉⵏ ⵉⵙ n > 1 ⴷ ⵓⵔ ⵉⴳⵉ ⴰⵎⵣⵡⴰⵔⵓ. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,taq_Tfng,python,"

def sum_to_n(n: int):
    """"""sum_to_n ⵜⴳⴰ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵎⵓⵏⵏ ⵉⵎⴹⴰⵏ ⵙⴳ 1 ⴰⵔ n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,taq_Tfng,python,"

def correct_bracketing(brackets: str):
    """"""brackets ⵉⴳⴰ ⵢⴰⵏ ⵓⵡⵜⵜⵓ ⵏ ""("" ⴷ "")"". return true ⵉⵖ ⴷⴰⵔ ⴽⵓ ⴰⴱⵔⴰⴽⵉⵜ ⵏ ⵓⵕⵥⵥⵓⵎ ⵢⴰⵏ ⴰⴱⵔⴰⴽⵉⵜ ⵏ ⵓⵇⵇⵏ ⵉⵣⴷⵉⵏ. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""())) True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,taq_Tfng,python,"

def derivative(xs: list):
    """"""xs ⴷⴰ ⵉⵙⵎⴷⵢⴰ ⵉⵎⴳⴳⵉⵜⵏ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵡⵜⵜⴰ. xs[0] + xs[1] * x + xs[2] * x^2 + .... ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⵓⵎⵏⵣⴰⵢ ⵏ ⴽⵉⴳⴰⵏ ⵏ ⵉⵡⵜⵜⴰ ⵙ ⵢⴰⵜ ⵜⴰⵍⵖⴰ. >>> ⵓⵎⵏⵣⴰⵢ (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ⵓⵎⵏⵣⴰⵢ (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,taq_Tfng,python,"

def fibfib(n: int):
    """"""ⵜⴰⵍⵖⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⴱⵓⴱⵉⴱ ⵜⴳⴰ ⵜⴰⵍⵖⴰ ⵢⴰⴽⵙⵓⵍⵏ ⵉ ⵜⴰⵍⵖⴰ ⵏ ⴼⵉⴱⴱⵓⵏⴰⵛⵛⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ: ⴼⵉⴱⴱⵓⴱⵉⴱ ((0) == 0 ⴼⵉⴱⴱⵓⴱⵉⴱ ((1) == 0 ⴼⵉⴱⴱⴱⵉⴱ ((2) == 1 ⴼⵉⴱⴱⴱ ((n) == ⴼⵉⴱⴱⴱ ((n-1) + ⴼⵉⴱⴱⴱ ((n-2) + ⴼⵉⴱⴱⴱ ((n-3). ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏ ⵓⵙⵉⴹⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⴼⵉⴱⴱⵓⴱⵉⴱ ⵙ ⵢⴰⵜ ⵜⵖⴰⵔⴰⵙⵜ ⵉⴼⵓⵍⴽⵉⵏ. >>> ⴼⵉⴱⴱⴱ ((1) 0 >>> ⴼⵉⴱⴱ ((5) 4 >>> ⴼⵉⴱⴱ ((8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,taq_Tfng,python,"
FIX = """"""ⵔⵔⴰⵎ ⵜⴰⵡⵓⵔⵉ vowels_count ⵏⵏⴰ ⵉⵙⵏⵓⵎⵎⵍⵏ ⵜⴰⴳⵓⵔⵉ ⵙ ⵡⴰⵏⴰⵡ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⵔ ⵉⵙⵙⴽⵛⵎ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵓⵙⵙⵓⵜⵏ ⴳ ⵜⴳⵓⵔⵉ. ⵉⵎⵓⵙⵙⵓⵜⵏ ⴳ ⵡⴰⴷⴷⴰⴷ ⴰⴷ ⴳⴰⵏ 'a', 'e', 'i', 'o', 'u'. ⴷⵖⴰ, 'y' ⵉⴳⴰ ⴰⵡⴷ ⵢⴰⵏ ⵉⵎⵓⵙⵙⵓⵜⵏ, ⵎⴰⴽⴰ ⴷⴰ ⵉⵜⵜⵉⵍⵉ ⵖ ⵜⴳⵉⵔⴰ ⵏ ⵜⴳⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ. ⴰⵎⴷⵢⴰ: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""ⴰⴶⵓⴷⵉⵉⴰⵏ ⵉⵔⵉⴰⵏ ⵓⵉ ⵉⴰⴷⵏⵢⵏ""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,taq_Tfng,python,"
def circular_shift(x, shift):
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⵏⴼⵍ ⵓⵙⵏⵎⵍⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ x, ⴷⴰ ⵉⵜⵜⵓⵙⵏⴼⵍ ⵓⵟⵟⵓⵏ ⵙ ⵓⵢⴼⴼⴰⵙ ⵙ ⵓⵙⵏⴼⵍ ⴷ ⴷⴰ ⵉⵜⵜⴰⵊⵊⴰ ⵜⴰⵢⴰⴼⵓⵜ ⴰⴷ ⵜⴳ ⵢⴰⵜ ⵜⵉⴼⵔⵜ. ⵉⴳ ⵉⴳⴰ ⵓⵙⵏⴼⵍ > ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ, ⴷⴰ ⵉⵜⵜⴰⵊⵊⴰ ⵡⵓⵟⵟⵓⵏⵏ ⴰⴷ ⵙ ⵓⵎⵏⵉⴷ. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,taq_Tfng,python,"
def digitSum(s):
    """"""ⵜⴰⵡⵓⵔⵉ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵢⴰⵜ ⵜⵎⵔⵙⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵖⵕⴹⵉ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⴰⴳⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⴼⵍⵍⴰ ⴷⴰⵢ' ⵉⵙⴽⵉⴷⵏ ⵏ ASCII. ⵉⵎⴷⵢⴰⵜⵏ: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,taq_Tfng,python,"
def fruit_distribution(s,n):
    """"""ⴳ ⵜⵎⵙⴰⵔⵜ ⴰⴷ, ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵢⴰⵜ ⵜⵉⴼⵔⵜ ⵉⵙⵎⴷⵢⴰⵏ ⴰⵎⴹⴰⵏ ⵏ ⵜⴱⵔⵣⵉⵣⵉⵏ ⴷ ⵜⴱⵕⴰⵏⵊⵉⵏ ⵉⵜⵜⵓⵣⵟⵟⴰⵢⵏ ⴳ ⵢⴰⵜ ⵜⴽⵕⴹⴰ ⵏ ⵉⴼⴰⵔⵙⵏ ⵉⵍⵍⴰ ⴳ ⵜⴽⵕⴹⴰ ⴰⴷ ⵜⵉⴼⵔⵣⵉⵣⵉⵏ ⴷ ⵜⴱⵕⴰⵏⵊⵉⵏ ⴷ ⵉⴼⴰⵔⵙⵏ ⵏ ⵍⵎⴰⵏⴳⵓ. ⴷⴼⴼⵉⵔ ⵏ ⵜⵉⴼⵔⵜ ⵉⵙⵎⴷⵢⴰⵏ ⴰⵎⴹⴰⵏ ⴰⴽⴽⵡ ⵏ ⵜⴱⵕⴰⵏⵊⵉⵏ ⴷ ⵜⴱⵔⵣⵉⵣⵉⵏ ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵙⵎⴷⵢⴰⵏ ⴰⵎⴹⴰⵏ ⴰⴽⴽⵡ ⵏ ⵉⴼⴰⵔⵙⵏ ⴳ ⵜⴽⵕⴹⴰ, ⵙⵙⴽⵔ ⴰⵎⴹⴰⵏ ⵏ ⵉⴼⴰⵔⵙⵏ ⵏ ⵍⵎⴰⵏⴳⵓ ⴳ ⵜⴽⵕⴹⴰ. ⵙ ⵓⵎⴷⵢⴰ: fruit_distribution""5(ⴱⵔⵣⵉⵣⵏ ⴷ 6 ⵜⴱⵕⴰⵏⵊⵉⵏ"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 ⵜⵉⴼⵔⵣⵉⵣⵉⵏ ⴷ 1 ⵜⴱⵕⴰⵏⵊⵜ"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 ⵜⵉⴼⵔⵣⵉⵣⵉⵏ ⴷ 3 ⵜⴱⵕⴰⵏⵊⵉⵏ"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 ⵜⵉⴼⵔⵣⵉⵣⵉⵏ ⴷ 1 ⵜⴱⵕⴰⵏⵊⵜ"") "",1 -> 120 - 100 - 100 - 1 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,taq_Tfng,python,"
def pluck(arr):
    """"""""ⵙⴳ ⵓⵎⵙⴰⵙⴰ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏ ⵜⴰⴳⵓⵜ ⵏ ⵜⵙⴽⵍⴰ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⵓⵏⵖⵉⵍⵉⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵃⵍⵉⵏ, ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴽⵜⵔ ⵢⴰⵜ ⵜⵓⵏⵖⵉⵍⵜ ⴷ ⴰⴷ ⵜⵙⵙⴽⵜⵔ. ⵜⵓⵏⵖⵉⵍⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵙⴽⵜⵔ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⴳ ⵜⵓⵏⵖⵉⵍⵜ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ ⴰⵎⵎ ⵡⴰⴹ. ⵎⴽ ⵜⵜⵢⴰⴼⴰⵏ ⴽⵉⴳⴰⵏ ⵏ ⵜⵓⵏⵖⵉⵍⵉⵏ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ ⴰⵎⵎ ⵡⴰⴹ, ⵙⴽⵜⵔ ⵜⵓⵏⵖⵉⵍⵜ ⵏⵏⴰ ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ ⴰⵎⵎ ⵡⴰⵜⵉⴳ. ⵜⵓⵏⵖⵉⵍⵜ ⵏⵏⴰ ⵉⵜⵜⵓⵙⴽⵜⵔ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵜⵓⵙⴽⵜⵔ ⴳ ⵜⵍⴳⴰ, [smallest_value, its index], ⵎⴽ ⵓⵔ ⵍⵍⵉⵏ ⵡⴰⵜⵉⴳⵏ ⵉⵎⵎ ⵡⴰⴹ ⵏⵖⴷ ⵉⴳ ⵓⵎⵙⴰⵙⴰ ⵏⵏⴰ ⵉⵜⵜⵓⴼⴽⴰⵏ ⵉⴳⴰ ⵡⴰⵔⵔⴰ, ⵙⴽⵜⵔ []. ⴰⵎⴷⵢⴰ: ⴰⵎⵙⴽⵛⵓⵎ: [4,2,3] ⴰⵎⵙⴽⵛⵓⵎ: [2, 1] ⴰⵙⴼⵍ: 2 ⵖⵓⵔ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵎ ⵡⴰⴹ, ⴷ 2 ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵢⴰⵏ, ⴷ 2 ⵖⵓⵔ ⵉⵍⵍⴰ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵎ ⵡⴰⴹ. ⴰⵎⴷⵢⴰ: ⴰⵎⵙⴽⵜⵔ: ⴰⵎⵙⴽⵛⵓⵎ: ⴰⵎⵙⴽⵜⵔ: ⴰⵎⵙⴽⵜⵔ: ⴰⵎⵙⴽⵛⵓⵎ ⴰⵎⵙⴰⵔ: ⴰⵎⵙⴰⵙⴰ ⴰⵎⵙⴰⵔ ⴰⵎⵙⴰⵔ ⴰⵎⵙⴰⵔ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ ⴰⵎⵥⵢⴰⵏ, ⴰⵎⵢⴰ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎⵙⴰⵔ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ, ⴰⵎ""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,taq_Tfng,python,"
def search(lst):
    '''ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵓⵔ ⵉⴳⵉⵏ ⵜⵍⵍⴰⵍⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵔⴰⴷ ⵏⵔⴰⵔ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵅⴰⵜⴰⵔ ⴰⴽⴽⵡ ⵏⵏⴰ ⵢⵓⴳⵔⵏ ⵊⴰⵔ ⵏ ⵓⵔⵢⴰ, ⴷ ⵖⵓⵔⵙ ⵜⴰⴳⴳⴰⵍⵜ ⵜⴰⵅⴰⵜⴰⵔⵜ ⵏⵖⴷ ⵜⴰⴳⵜⵉⴳⵜ ⵏ ⵡⴰⵜⵉⴳ ⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵙ ⵉⵅⴼ ⵏⵏⵙ. ⵜⴰⴳⴳⴰⵍⵜ ⵏ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵜⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵜⵉⴽⴽⴰⵍ ⵏⵏⴰ ⴳ ⵢⵓⴼⴰ ⴳ ⵜⵍⴳⴰⵎⵜ. ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵜⵉⴳ ⴰⴷ, ⵔⴰⴷ ⵏⵔⴰⵔ -1. ⵉⵎⴷⵢⴰⵜⵏ: ⵔⵣⵣⵓ (([4, 1, 2, 2, 3, 3, 4, 4]) == 2 ⵔⵣⵣⵓ (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 ⵔⵣⵣⵓ (([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,taq_Tfng,python,"
def strange_sort_list(lst):
    '''ⴷⴰ ⵉⵜⵜⵓⵙⴽⴰⵔ ⵓⵙⵎⵙⴰⵙⴰ ⴰⵎⵢⴰⵏⴰⵡⴰⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷⴰ ⵉⵜⵜⵓⵙⴽⴰⵔ ⵓⵙⵎⵙⴰⵙⴰ ⴰⵎⵢⴰⵏⴰⵡⴰⵏ ⴳ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵢⴰⵏⴰⵡⴰⵏ. ⴰⵙⵎⵙⴰⵙⴰ ⴰⵎⵢⴰⵏⴰⵡⴰⵏ, ⵉⴳ ⴷⴰ ⵜⵜⴱⴷⵓⴷ ⵙ ⵡⴰⵜⵉⴳ ⴰⵎⵥⵥⵢⴰⵏ, ⴷⴼⴼⵉⵔ ⵓⴳⴳⴰⵔ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵇⵇⵉⵎⵏ, ⴷⴼⴼⵉⵔ ⵓⴳⴳⴰⵔ ⵏ ⵡⴰⵜⵉⴳ ⴰⵎⵢⴰⵏⴰⵡⴰⵏ, ⴷ ⴰⵢⴰⴷ. ⵉⵎⴷⵢⴰⵜⵏ: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,taq_Tfng,python,"
def triangle_area(a, b, c):
    '''ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⵉⵖⵣⵉ ⵏ ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴳⵣⵉⵔⵉⵏ. ⴷⴰ ⵜⵜⵓⵙⵙⴽⵡⴼⵍ ⵜⵎⵏⴰⴹⵜ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴳⵣⵉⵔⵉⵏ ⵙ ⵙⵏⴰⵜ ⵏ ⵜⵏⵇⵇⵉⴹⵉⵏ ⵜⵉⵎⵔⴰⵡⵉⵏ ⵎⴽ ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⴽⵕⴰⴹⵜ ⵏ ⵜⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴳⵣⵉⵔⵉⵏ. ⵎⴽ ⵓⵔ ⵉⴳⵉ ⴷⴰ ⵜⵜⵓⵙⵙⴽⵡⴼⵍ -1 ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴳⵣⵉⵔⵉⵏ ⵉⵖ ⵜⴳⴰ ⵜⵓⵏⵖⴰ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵓⴳⴳⴰⵔ ⵏ ⵜⴼⵓⵍⵜ ⵜⵉⵙⵙ ⴽⵕⴰⴹⵜ. ⴰⵎⴷⵢⴰ: ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ ⵏ ⴽⵕⴰⴹ'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,taq_Tfng,python,"
def will_it_fly(q,w):
    '''ⵔⵉⵜⵓⵔⵏ ⵜⵀⵔⵢ ⵎⵓ ⵢⴱⵓⵊⵢⵛⵜ ⵇ ⴹⴰ ⵢⴼⵍⵉ, ⴷ ⴼⵓⵍⵙ ⵢoⵓⵔ ⵢoⵓⵔ ⵢoⵓⵔ ⵢoⵓⵔ ⵢⵙⵜ. ⵜⵀⵔⵢ ⴱⵓⵊⵢⵛⵜ ⵇ ⴹⴰ ⵢⴼⵍⵉ ⵎⵓ ⵢⵙⵜ ⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉⵛ ⵍⵉⵙⵜ) ⴷ ⵜⵀⵉⵙⵎⵜ ⵏ ⵢⵉⵍⵎⴻⵏⵜⵙ ⵢoⵓⵔ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎⵓⵙⵜ ⵎ'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,taq_Tfng,python,"
def smallest_change(arr):
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⴽⴰⵔ ⵢⴰⵏ ⵓⵙⵏⴼⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷ ⴷⴰ ⵉⵜⵜⵓⵙⴽⴰⵔ ⵓⵟⵟⵓⵏ ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⵉⵅⵚⵚⴰ ⴰⴷ ⵉⵜⵜⵓⵙⵏⴼⵍ ⴰⴼⴰⴷ ⴰⴷ ⵉⴳ ⵓⵙⵏⴼⵍ ⵏ ⵓⵙⵏⴼⵍ ⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉ. ⴰⵙⵏⴼⵍ ⴰⴱⴰⵍⵉⵏⴷⵔⵓⵎⵉ ⵉⴳⴰ ⴰⵙⵏⴼⵍ ⵏⵏⴰ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ ⵙ ⵢⴰⵜ ⵜⵖⴰⵔⴰⵙⵜ ⵉⵎⵎⵔⵡⴰⵙⵏ ⵙ ⵓⵎⵣⵏⵣ ⴷ ⵙ ⵓⵎⵣⵏⵣ. ⴳ ⵢⴰⵏ ⵓⵙⵏⴼⵍ, ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⴼⵍ ⵢⴰⵏ ⵉⴼⵔⴷⵉⵙ ⵙ ⴽⵔⴰ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵢⴰⴹⵏ. ⵙ ⵓⵎⴷⵢⴰ: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,taq_Tfng,python,"
def total_match(lst1, lst2):
    '''ⵔⴻⵛⴻⵜⴻⵔ ⵜⴰⵏ ⵓⵉ ⴰⴾⵏⴰⵏⴻⵏ ⵙⵉⵏ ⵍⵉⵙⵜⵔⴻⵏⴷⵙ ⵏ ⵛⵂⵔⵉⵏⴶⵙ ⴰⴷ ⵉⴾⴼⴰⵏ ⵍⵉⵙⵜⵔⴻ ⵉⵍⴰⵏⴻⵏ ⴰⴾⴾⵓⵣ ⵏ ⵛⵂⴰⵔⵙ ⴷⴰⵗ ⵍⵉⵙⵜⵔⴻⵏⴷⵙ ⵏ ⵍⵉⵙⵜⵔⴻ ⵓⴰⵔ ⵏ ⴰⵈⵈⴻⵍ ⵓⵉ ⵉⴰⴷⵏⴻⵏ. ⴰ ⴼⴰⵍ ⵍⵉⵙⵜⵔⴻ ⵜⴰⵏ ⵓⵉⵏ ⵙⴰⵏⴰⵜ ⵉⵍⴰⵏ ⴰⴾⴾⵓⵣ ⵏ ⵛⵂⴰⵔⵙ, ⵉⴾⴼⴰⵏ ⵍⵉⵙⵜⵔⴻ ⵓⴰ ⴻⵣⵣⴰⵔⴰⵏ. ⴰⵍⵎⵉⵜⴰⵍⴻⵏ total_match([], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'_match['], ['4', ['1', ['2', '3', '4', '5', [' 4])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,taq_Tfng,python,"
def is_multiply_prime(a):
    """"""ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵉⵜⵜⵓⴼⴽⴰⵏ ⴰⵙⵎⵓⵜⵜⵉ ⵏ 3 ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⵏⵙⵙⵏ ⵎⴰⵙⴷ (ⴰ) ⴷⵔⵓⵙ ⵙⴳ 100. ⴰⵎⴷⵢⴰ: is_multiply_prime(30) == ⵜⵉⴷⵜ 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,taq_Tfng,python,"
def is_simple_power(x, n):
    """"""ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⴰⵔⵔⴰ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵟⵟⵓⵏ x ⵜⴰⵣⵎⵔⵜ ⵜⴰⵎⵢⵉⵡⴰⵏⵜ ⵏ n ⴷ ⵜⵉⴱⵔⵙⴳⴳⵡⴰⴷⵜ ⴳ ⵡⴰⴷⴷⴰⴷⵏ ⵢⴰⴹⵏ. x ⵜⴳⴰ ⵜⴰⵣⵎⵔⵜ ⵜⴰⵎⵢⵉⵡⴰⵏⵜ ⵏ n ⵎⴽ n**int=x ⵙ ⵓⵎⴷⵢⴰ: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,taq_Tfng,python,"
def iscube(a):
    '''ⵔⵉⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ a ⴰⵔ ⵉⵜⵜⴰⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵎⴹⴰⵏ ⴰⴷ ⴰⵎⴷⴷⴰⴷ ⴰⵎⴷⴷⴰⴷ ⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵜⴰⵏⵏⴰⵢⵜ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⵎⴽⵍ ⵉⵙ ⵉⴳⴰ ⵡⴰⵏⵙⴰ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⵀⴰ ⵉⴳⴰ ⵡⵉⵏ ⵜⴷⵓⵙⵉ. ⵉⵎⴷⵢⴰⵜⵏ: iscube ((1) ==> true iscube ((2) ==> false iscube ((-1) ==> true iscube ((64) ==> true iscube ((0) ==> true iscube ((180) ==> false '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,taq_Tfng,python,"
def hex_key(num):
    """"""ⴰⵜⵓⴰⵣⴰⵣⴰⵍ ⵉⵢ ⴰⴷⴰⵔⵉⵓⴰⵏ ⵉⵢ ⵜⴰⵔⵂⴰ ⵜⴰⵜⵓⴰⴶⴰⵣⴰⵏ ⴰⵏ ⵎⴰⴷⵉⵏⴰⵏ ⵓⵉ ⵂⵢⵆⴰⴷⵢⵛⵉⵎⴰⵍ ⴷⴰⵗ ⵜⴰⵂⵔⵉⴾⵢ ⴰⴷ ⴰⵜⵓⴰⵣⴰⵣⴰⵣⴰⵣⴰⵏ ⴰⵏ ⵎⴰⴷⵉⵏⴰⵏ ⵓⵉ ⵂⵢⵆⴰⴷⵢⵛⵉⵎⴰⵍ ⵓⵉ ⴰⵈⴰⵍⴰⵏ ⴰⵜⵓⴰⴶⴰⵣⴰⵏ (ⴰⵓⴰ ⴰⵈⴰⵍⴰⵏ ⴰⵜⵓⴰⴶⴰⵣⴰⵏ, ⵎⵢⵗ ⴰⵎⵉⴾⴰⵏ ⵓⴰ ⵂⵢⵆⴰⴷⵢⵛⵉⵎⴰⵍ, ⴰⵎⵓⵙ ⵎⴰⴷⵉⵏⴰⵏ ⵓⵉ ⵎⴰⵈⴰⵔⴰⵏ ⵓⵉ 1 ⵓⴰⵔⴰⵏ ⴰⴾⴰⵔⵓⵙ ⴰⵏ ⵎⴰⴷⵉⵏⴰⵏ ⵓⵉ ⵎⴰⴷⵔⵓⵉⵏⵢⵏ). ⵎⴰⴷⵉⵏⴰⵏ ⵓⵉ ⵂⵢⵆⴰⴷⵢⵛⵉⵎⴰⵍ ⵓⵉⵏ 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, A, B, C, D, D, C, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,taq_Tfng,python,"
def decimal_to_binary(decimal):
    """"""ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉⴽⴹ ⴳ ⵜⴰⵍⵖⴰ ⵏ ⵓⴽⵛⵛⵓⵎ ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵏⴼⵍ ⴳ ⵜⴰⵍⵖⴰ ⵏ ⵓⴽⵛⵛⵓⵎ. ⵔⴰⴷ ⵜⵕⵓⵡⴰⵍ ⵜⴰⵡⵓⵔⵉ ⵜⴰⵡⵔⵉⵔⵜ, ⴷ ⴽⵓ ⴰⴽⴽⵡ ⵉⵙⵎⴷⵢⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ. ⴽⵓ ⴰⴽⴽⵡ ⵉⵙⵎⴷⵢⴰⵏ ⴳ ⵜⴰⵍⵖⴰ ⵔⴰⴷ ⵉⴳ '0' ⵏⵖ '1'. ⵔⴰⴷ ⵉⵍⵉⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵛⵛⵓⵎ 'db' ⴳ ⵜⵉⵣⵡⵉⵔⵉ ⴷ ⵜⴳⵉⵔⴰ ⵏ ⵜⴰⵍⵖⴰ. ⵔⴰⴷ ⵉⵍⵉⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⴼⴰⴷ ⴰⴷ ⵜⵜⵓⵙⵡⵓⴷⴷⵓ ⵜⵍⵖⴰ. ⵉⵎⴷⵢⴰⵜⵏ: decimal_to_binary ((15) # ⴰⵔ ⵜⵙⵙⴽⵛⵎ ""db1111db"" decimal_to_binary32) # ⴰⵔ ⵜⵙⵙⴽⵛⵎ ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,taq_Tfng,python,"
def is_happy(s):
    """"""ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔ ⵜⴰⵖⴹⴼⵜ s. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵥⵕ ⵉⵙ ⵜⴳⴰ ⵜⴰⵖⴹⴼⵜ ⵜⵓⵎⵍⵉⵍⵜ ⵏⵖ ⵓⵔ ⵜⵓⵎⵍⵉⵍⵜ. ⵜⴰⵖⴹⴼⵜ ⵜⵓⵎⵍⵉⵍⵜ ⵉⴳ ⵜⵉⵖⵣⵉ ⵏⵏⵙ ⵓⵔ ⵜⴽⵡⵡⵡⵉⵔ 3 ⴷ ⴽⵓ 3 ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵙ ⵓⵎⴷⵢⴰ: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,taq_Tfng,python,"
def numerical_letter_grade(grades):
    """"""ⴷⴻⵗ ⵉⵎⴰⵔⴰⵓ ⵓⴰ ⴷⴰⵔⴰⵜ ⴰⵏ ⵙⴻⵎⴻⵙⵜⴻⵔ ⴰⴷ ⵜⴰⵍⵎⴰⴷⵜ ⵉⵍⴰ ⴰⴷⴰⴾⴰⵍ ⵉⴻ ⴰⴷⵉⵏⴰⵜ. ⵜⴰⵍⵎⴰⴷⵜ ⵜⴰⴶⴰ ⴰⵍⴶⵓⵔⵉⵜⵂⵎ ⴰⵏⴻⵙ ⵉⴻ ⵜⴰⴶⴰⵛⵜ. ⴰⵛⴰⴾⵉⵍ ⵓⴰ ⵉⵜⴰⵓⴰⵏ ⴻⵈⴰⵍ ⴰⵙ ⵜⴰⴾⴼⴰ ⵜⴰⴾⵓⴰⴷⵜ ⵜⴰ ⵜⴰⴶⴰⵛⵜ. ⵜⴰⴾⴼⴰ-ⴰⵙ ⴰⵍⴾⴰⴷ ⴰⵏ ⴶⴱⴰ ⵉⴻ ⴰⴷⵉⵏⴰⵜ ⵉⵉⴰⴷ ⴰⴷ ⵉⵍⴰ ⴰⴷⴰⴾⴰⵍ ⵉⴻ ⵜⴰⵛⴰⵛⵜ ⵜⴰⴶⴰⵛⴰⵜ ⵜⴰⴾⴼⴰ ⵜⴰⴾⴰⵍⵜ: ⴶⴱⴰ ⴶⴱⴰ ⴶⵔⴻⵜⴻⵔ ⴶⵔⴻⵜⴻⵔ 4.0 ⴰ+ > 3.7 ⴰ > 3.3 ⴰ- > 3.0 ⴱ+ > 2.7 ⴱ- > 2.3 ⴱ- > 2.0 ⵛ+ > 1.7 ⵛ > 1.3 ⵛ- > 1.0 ⴷ+ > 0.7 ⴷ > 0.0 ⴷ- 0.0 ⴻ: ⴰⵍⵎⵉⵜⴰⵍ ⵏⴰⴾⴰⵍ_ⴰⴾⵓⴰⵛⵜ ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,taq_Tfng,python,"
def prime_length(string):
    """"""ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵖⵉⵍⵓⴼ ⴰⵔ ⵉⵜⵜⴰⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵓⵖⵉⵍⵓⴼ ⵓⵖⵣⵉⴼ ⴰⵎⵉⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ ⵏⵖⴷ ⵜⵉⴽⵕⴹⵉ ⵎⴽ ⵓⵔ ⵉⴳⵉ ⴰⵎⴷⵢⴰ prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,taq_Tfng,python,"
def starts_one_ends(n):
    """"""ⴳ ⵓⵎⵉⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵙⵏⵓⵍⴼⵓ ⴰⵎⴹⴰⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵏⵉⴳⵏ ⵉⵎⵏⵉⴳⵏ ⵏ n ⵡⵓⵟⵟⵓⵏ ⵏⵏⴰ ⵉⵜⵜⴱⴷⴰⴷⵏ ⵏⵖⴷ ⵉⵜⵜⵎⵜⵉⵏ ⵙ 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,taq_Tfng,python,"
def solve(N):
    """"""ⵉⴳ ⴷⴰⵔⴽ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⴷⵉ N, ⵙⵙⴽⵛⵎ ⵜⴰⴳⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴳ ⵜⴱⵉⵏⴰⵔⵉⵜ. ⴰⵎⴷⵢⴰ: ⴳ N = 1000, ⵔⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ 1 ⵔⴰⴷ ⵉⴳ ⵜⵢⴰⴼⵓⵜ ""1"". ⴳ N = 150, ⵔⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ 6 ⵔⴰⴷ ⵉⴳ ⵜⵢⴰⴼⵓⵜ ""110"". ⴳ N = 147, ⵔⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵟⵟⵓⵏ 12 ⵔⴰⴷ ⵉⴳ ⵜⵢⴰⴼⵓⵜ ""1100"". ⵉⵎⵙⵏⴼⴰⵍⵏ: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. ⵜⵢⴰⴼⵓⵜ: ⵜⴰⴷⴷⴰⵔⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⴱⵉⵏⴰⵔⵉⵜ """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,taq_Tfng,python,"
def add(lst):
    """"""ⴳ ⵓⵎⴷⵢⴰ ⵏ ⵜⵍⴳⴰⵎⵜ ⵓⵔ ⵉⴳⵉⵏ ⵜⵍⵍⴰⵍⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⵏⴼⵓⵏ ⵉⵎⵔⵙⴰⵍ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⵉⵎⴷⵢⴰⵜⵏ: ⵙⵙⵓⵏⴼⵓⵏ (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,taq_Tfng,python,"
def anti_shuffle(s):
    """"""ⵔⴻⴱⴻⵔ ⵜⴰⵏⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⵏ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⴰⴾⵔⴰⴱⴰⵜ ⵜⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ-ⴰ""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,taq_Tfng,python,"
def get_row(lst, x):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⵏⵖⵎⵉⵙⵏ ⵏ ⵙⵉⵏ ⵡⵓⴳⴳⵓⴳⵏ, ⴰⵎⵎ ⵜⵍⴳⴰⵎⵉⵏ ⵉⵜⵜⵓⵙⵎⵓⵏⵏ, ⵏⵏⴰ ⵢⵓⵙⴰⵏ ⴷ ⵜⵎⵜⵜⵉ, ⵎⴰⵛⴰ, ⵓⵔ ⵢⵓⵙⵉ ⴷ ⵜⵎⵜⵜⵉ, ⴽⵓ ⵜⴰⵡⵔⵉⵔⵜ ⵜⵣⵎⵔ ⴰⴷ ⵜⵍⵍⴰ ⴳ ⵓⵟⵟⵓⵏ ⵏ ⵜⵔⵙⴰⵍ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⴷⴰⵜ ⵏ lst, ⴷ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ x, ⵉⵔⵣⵣⵓ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ x ⴳ ⵜⵍⴳⴰⵎⵜ, ⴷ ⵜⵔⴰⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴱⵍⵍⵉⵜⵉⵏ, [(x1, y1), (x2, y2) ...] ⴰⵢⵏⵏⴰ ⵉⵙ ⵉⴳⴰ ⴽⵓ ⵜⴰⴱⵍⵉⵜ ⵢⴰⵜ ⵜⵎⵢⴰⵇⵇⴰⵏⵜ - (ⵜⴰⵙⵉⴹ, ⵜⵔⵙⴰⵍ), ⵏⵏⴰ ⵉⵙⵙⵏⵜⵉⵢⵏ ⵙ 0. ⵙⵙⵓⴷⵙ ⵉⴽⵓⵓⵔⴷⵉⵢⵏⴰⵜⵏ ⴳ ⵜⵉⵣⵡⵉⵔⵉ ⵙ ⵜⵔⵙⴰⵍ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵍⴽⵡⴰⵏ. ⴰⵡⴷ, ⵙⵙⵓⴷⵙ ⵉⴽⵓⵓⵔⴷⵉⵢⵏⴰⵜⵏ ⵏ ⵜⵔⵙⴰⵍ ⵙ ⵜⵔⵙⴰⵍ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵍⴽⵡⴰⵏ. ⵉⵎⴷⵢⴰⵏ: get_row[1,2,3,4,5,6], [1,2,3,4,1,1,6], [1,2,3,4,1,2,3,4,3,4,5,1], 1) ==[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,4,0,1], 2,0], (2,0,0,0,0,0,1,1,2,2,1,3,0,1,2,2,2,2,3,3,3,3,2,2,2,2,3]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,taq_Tfng,python,"
def sort_array(array):
    """"""ⴷⴰ ⵉⵜⵜⵓⴼⴽⴰ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵔⵉⵏ, ⴷ ⴷⴰ ⵉⵜⵜⴰⵊⵊⴰ ⴰⴷ ⵜⵜⵓⵙⵏⵙⵍ ⵢⴰⵜ ⵜⵓⵏⵖⵉⵍⵜ ⵏ ⵓⵙⵏⵙⵍ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵏⵙⵍ, ⵔⴰⴷ ⵜⵙⵙⵓⴷⵙ ⴰⵙⵏⵙⵍ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵔⵏⵉⵡ ⵉⵖ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵣⵡⴰⵔⵓ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵓⴷⵙ ⴰⵎⴳⴳⴰⵔⵓ, ⵏⵖⴷ ⴰⴷ ⵜⵙⵙⵓⴷⵙ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⴳⴳⴰⵔⵓ ⵉⵖ ⵉⴳⴰ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵣⵡⴰⵔⵓ ⴷ ⵡⴰⵜⵉⴳ ⵏ ⵓⵙⵙⵓⴷⵙ ⴰⵎⴳⴳⴰⵔⵓ. ⵜⵓⵏⵖⵉⵍⵜ: * ⵓⵔ ⵜⵙⵙⵏⴼⵍ ⴰⵙⵏⵙⵍ. ⵉⵎⴷⵢⴰⵜⵏ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 2, 3, 4, 5] => [0, 1, 2, 3, 0, 1, 5, 6]) [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,taq_Tfng,python,"
def encrypt(s):
    """"""ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏ encrypt ⵏⵏⴰ ⵉⵙⴽⴰⵔⵏ ⵜⴰⵡⵉⵍⴰ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⴰⵎⵎ ⵓⵎⵏⵣⴰⵢ ⴰⵔ ⴷⴰ ⵉⵜⵜⴰⵊⵊⴰ ⴰⵙⵏⴼⵍ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵙ ⵓⵙⵎⵓⵜⵜⴳ ⵏ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵉⴼⵉⵏⴰⵖ. ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⵜⵜⴰⵊⵊⴰ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵙ ⵜⵖⴰⵔⴰⵙⵜ ⵏⵏⴰ ⵉⵙⵏⴼⵍⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵙ ⵙⵏⴰⵜ ⵙ ⵙⵏⴰⵜ ⵏ ⵡⴰⵏⵙⴰ. ⵙ ⵓⵎⴷⵢⴰ: encrypt (('hi') ⴰⵔ ⵉⵜⵜⴰⵊⵊⴰ 'lm' encrypt (('asdfghjkl') ⴰⵔ ⵉⵜⵜⴰⵊⵊⴰ 'ewhjklnop' encrypt (('gf') ⴰⵔ ⵉⵜⵜⴰⵊⵊⴰ 'kj' encrypt (('et') ⴰⵔ ⵉⵜⵜⴰⵊⵊⴰ 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,taq_Tfng,python,"
def next_smallest(lst):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ next_smallest (() ⵏⵏⴰ ⵉⵙⴽⵔⵏ ⴰⵙⴽⴽⵉⵍ ⵡⵉⵙⵙ ⵙⵉⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. ⴷⴰ ⵉⵜⵜⵔⴰⵔ None ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵓⵙⴽⴽⵉⵍ ⴰⴷ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,taq_Tfng,python,"
def is_bored(S):
    """"""""ⴰⴷ ⴰⵜⵓⴰⵣⴰⵣⴰⵍ ⵓⴰⵔⴷ ⵢⵈⵢⵍ ⴰⵉⴾⵏⴰⵏ ⴰⴾⴰⵍ, ⴰⴷ ⴰⵜⵓⴰⵣⴰⵍ ⵓⴰⵔⴷ ⵢⵈⵢⵍ ⴰⵉⴾⵏⴰⵏ ⴰⴾⴰⵍ. ⴰⴾⴰⵍ ⵢⵈⴰⵍ ⵜⴰⴷⴰⴱⵉⵜ ⵜⴰⴱⴷⴰⵏ ⵙ ⵉⵙⵉⵎ ⵓⴰⵏ """"ⵉ"""". ⵜⴰⴷⴰⴱⵉⵜ ⴰⵜⵉⵓⴰⵣⴰⵍ ⵙ """""", """" ⵎⵢⵗ """"!"""" ⵙⵓⵏⴷ: >>> ⴰⵜⵓⴰⵣⴰⵍ""""""""ⵂⴰⵍⵓ ⵓⵓⵔⵍⴷ"") 0 >>> ⴰⵜⵓⴰⵣⴰⵍ""""""""ⴰⴾⴰⵍ ⵢⵈⴰⵍ ⴰⴾⴰⵍ. ⴰⵂⴰⵍⴰⵉ ⴰⵜⵓⴰⵣⴰⵍ. ⴰⵂⴰⵍⴰⵉ ⴰⵂⴰⵍⴰⵉ ⴰⵂⴰⵍⴰⵉ"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,taq_Tfng,python,"
def any_int(x, y, z):
    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵢⵓⵎⵥⵏ 3 ⵏ ⵡⵓⵟⵟⵓⵏ. ⴷⴰ ⵢⴰⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵎⵎ ⵓⵖⵣⵓⵔ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ⵢⴰⴹⵏⵉⵏ, ⴷ ⵡⵓⵟⵟⵓⵏⵏ ⴰⴽⴽⵡ ⴳⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⴷⴰ ⵢⴰⴽⴽⴰ ⵜⵉⴷⵜ ⴳ ⴽⵔⴰ ⵏ ⵡⴰⴷⴷⴰⴷⵏ ⵢⴰⴹⵏ. ⵉⵎⴷⵢⴰⵜⵏ ⴽⴰ_ⵜⴰⵏⵜ{5, 2, 7}: -> ⵜⵉⴷⵜ ⴽⴰ_ⵜⴰⵏⵜ{3, 2, 2}: -> ⵜⵉⴷⵜ ⴽⴰ_ⵜⴰⵏⵜ{3, -2, 1): -> ⵜⵉⴷⵜ ⴽⴰ_ⵜⴰⵏⵜ{3.6, -2.2, 2): -> ⵜⵉⴷⵜ '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,taq_Tfng,python,"
def encode(message):
    """"""ⵔⵔⴰⵢ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵜ ⵜⴱⵔⴰⵜ, ⴰⵔ ⵜⵙⵙⵓⴷⵙ ⵙ ⵜⵖⴰⵔⴰⵙⵜ ⵏⵏⴰ ⵉⵙⵏⴼⵍⵏ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⴰⴽⴽⵡ, ⴰⵔ ⵉⵙⵎⴷⵢⴰ ⵉⵎⴽⴽⴰⵍⵓⵜⵏ ⴰⴽⴽⵡ ⴳ ⵜⴱⵔⴰⵜ ⵙ ⵡⴰⵔⵔⴰ ⵏⵏⴰ ⵉⵜⵜⵉⵍⵉⵏ ⵙ ⵙⵉⵏ ⵡⴰⵏⵙⴰ ⴷⴰⵜ ⵏ ⵓⵎⴽⴽⴰⵍⵓ ⴳ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⴼⵉⵏⴰⵖ. ⵙⵙⵓⵎⵔ ⴷⴰⵢ ⵉⵎⴽⴽⴰⵍⵓⵜⵏ. ⵉⵎⴷⵢⴰⵜⵏ: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,taq_Tfng,python,"

def skjkasdkd(lst):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⴷⴰ ⵜⵜⴰⵔⴰⵏ ⴰⴷ ⵜⴰⴼⴷ ⴰⵜⵉⴳ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵅⴰⵜⴰⵔ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴳⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,32,4,4,3] ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 10 ⵉ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 25 ⵉ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 13 ⵉ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 11 ⵉ lst = [0,81,12,3,21,21] ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 3 ⵉ lst = [0,1,8,2,1,7] ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,taq_Tfng,python,"
def check_dict_case(dict):
    """"""ⵉⴳ ⴷⴰⵔⴽ ⵉⵙⵎⴽⵉⵍ, ⴷⴷⵔⵖ ⵜⵉⴷⵜ ⵎⴽ ⴳⴰⵏ ⴽⵓⵍⵍⵓ ⵉⵙⵍⴽⵉⵏ ⵜⵉⵙⵉⴹⴼⴰⵏ ⴳ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ ⵏ ⵜⵉⵔⵔⴰ""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,taq_Tfng,python,"
def count_up_to(n):
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⵎⵔⵙ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵓⵔ ⵉⴳⵉⵏ ⴰⵎⵏⴳⴰⵍ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵢⴰⵏ ⵓⵎⵙⴳⴷⴰⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵣⵡⵓⵔⴰ ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ ⴷ ⵡⵉⵏ ⵡⴰⵔ n. ⵙ ⵓⵎⴷⵢⴰ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,taq_Tfng,python,"
def multiply(a, b):
    """"""ⵔⵎⴹ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⵜⴰⵢⴰⴼⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⴰⴳⵣⵣⵓⵎⵜ ⵏⵏⵙⵏ. ⵏⵙⵙⵏ ⵉⵙ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⵙⴽⵛⵎ ⴰⵀⴰ ⵉⵖⵓⴷⴰⵏ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉⵎⵎⵔⴽⵙ ((148, 412) ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵢⴰⴽⴽⴰ 16. ⵉⵎⵎⵔⴽⵙ ((19, 28) ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵢⴰⴽⴽⴰ 72. ⵉⵎⵎⵔⴽⵙ ((2020, 1851) ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵢⴰⴽⴽⴰ 0. ⵉⵎⵎⵔⴽⵙ ((14,-15) ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵢⴰⴽⴽⴰ 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,taq_Tfng,python,"
def count_upper(s):
    """"""ⵙ ⵜⴱⵔⵉⴷⵜ ⵏ ⵓⵙⴽⴽⵉⵍ s, ⴰⵟⵟⴰⵚ ⵏ ⵉⵎⵓⴽⴽⴰⵙⵏ ⵉⵎⵙⵍⵉⵢⵏ ⵉⵅⴰⵜⴰⵔⵏ ⴳ ⵉⵙⵏⴼⴰⵔⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⵙ ⵓⵎⴷⵢⴰ: count_upper (('aBCdEf') ⴷⴰ ⵢⴰⴽⴽⴰ 1 count_upper (('abcdefg') ⴷⴰ ⵢⴰⴽⴽⴰ 0 count_upper (('dBBE') ⴷⴰ ⵢⴰⴽⴽⴰ 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,taq_Tfng,python,"
def closest_integer(value):
    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵡⴰⵜⵉⴳ (ⵜⵉⵔⵉⵜ) ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏⵏ ⴰⵎⴹⴰⵏ ⴰⵔ ⵉⵜⵜⴰⴽⴽⴰ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⵏⵏⴰ ⵢⵓⴳⴳⵔⵏ ⵉ ⵡⴰⵏⵏⴰⵢ. ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵣⴰⵔⴰⵢ ⴳⵔ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴷⵓⵏ ⴰⵙ ⵙⴳ ⵓⵎⵢⴰ. ⵉⵎⴷⵢⴰⵜⵏ >>> closest_integer (((""10"") 10 >>> closest_integer ((""15.3"") 15 ⴰⵙⵖⵍ: ⴰⵙⵎⴷ ⵏ ⵓⵙⵎⴷ ⵏ ⵓⵎⴹⴰⵏ ⵙⴳ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴳⵔ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵡⴰⵏⵏⴰⵢ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵜⵓⵙⵓⵖⵓⵍ ⵉⴳⴰ ⵡⴰⵏⵏⴰⵢ ⵢⵓⴳⴳⵔⵏ ⵙⴳ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ. ⴳ ⵓⵎⴷⵢⴰ, closest_integer "" ((14.5"") ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⵜⵜⴰⴽⴽⴰ 15 ⴷ closest_integer "" ((-14.5"") ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⵜⵜⴰⴽⴽⴰ -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,taq_Tfng,python,"
def make_a_pile(n):
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⴽⴰⵔ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵜⵓⵙⴽⴰⵔ ⵢⴰⵜ ⵜⵔⴱⴰⵜ ⵏ n ⵉⵙⵡⵉⵔⵏ ⵏ ⵉⵅⵅⴰⵏ. ⴰⵙⵡⵉⵔ ⴰⵎⵣⵡⴰⵔⵓ ⵖⵓⵔⵙ n ⵉⵅⵅⴰⵏ. ⴰⵎⴹⴰⵏ ⵏ ⵉⵅⵅⴰⵏ ⴳ ⵓⵙⵡⵉⵔ ⴰⴹⵏⵉⵏ ⵉⴳⴰ: - ⵓⵟⵟⵓⵏ ⴰⵎⵣⴰⵔⴰⵢ ⴰⴹⵏⵉⵏ ⵉⵖ ⵉⴳⴰ n ⴰⵎⵣⴰⵔⴰⵢ. - ⵓⵟⵟⵓⵏ ⴰⵎⵣⴰⵔⴰⵢ ⴰⴹⵏⵉⵏ ⵉⵖ ⵉⴳⴰ n ⴰⵎⵣⴰⵔⴰⵢ. ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵓⵟⵟⵓⵏ ⵏ ⵉⵅⵅⴰⵏ ⴳ ⴽⵓ ⴰⵙⵡⵉⵔ ⴳ ⵜⵍⴳⴰⵎⵜ, ⴳ ⵉⵍⵍⴰ ⵓⵏⴰⴼⵙⵓ ⴳ i ⵉⵙⵎⴷⵢⴰⵏ ⵓⵟⵟⵓⵏ ⵏ ⵉⵅⵅⴰⵏ ⴳ ⵓⵙⵡⵉⵔ (ⵉ+1). ⵉⵎⴷⵢⴰⵜⵏ: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,taq_Tfng,python,"
def words_string(s):
    """"""ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵛⵛⵓⵎⵏ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵜⵜⵓⵢⴼⴼⵖⵏ ⵙ ⵜⵉⴼⵉⵏⴰⵖ ⵏⵖⴷ ⵜⵉⴼⵔⴽⵉⵏ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⴱⴹⵓ ⵜⵉⴽⵛⵓⵎⵏ ⵙ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴳⵔⵔⴰⵢⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ. ⵙ ⵓⵎⴷⵢⴰ: words_string ((""ⵙⵍⵉⵎ, ⵉⵙⵎ ⵉⵏⵓ ⵢⵓⵏ"") == [""ⵙⵍⵉⵎ"", ""ⵙⵍⵉⵎ"", ""ⵉⵙⵎ"", ""ⵉⵙ"", ""ⵊⵓⵏ""] words_string ((""ⵢⴰⵏ, ⵙⵉⵏ, ⴽⵕⴰⴹ, ⴽⴽⵓⵥ, ⵙⵎⵎⵓⵙ, ⵚⴹⵉⵚ"") == [""ⵢⴰⵏ"", ""ⵙⵉⵏ"", "" ⴽⵕⴰⴹ"", ""ⴽⵓⵥ"", ""ⵎⵎⵓⵙ"", ""ⵚⴹⵉⵚ""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,taq_Tfng,python,"
def choose_num(x, y):
    """"""ⴷⴰ ⵜⴽⴽⴰ ⵜⵎⵔⵙⵜ ⴰⴷ ⵙⵉⵏ ⵡⵓⵟⵟⵓⵏ ⵉⴳⴳⵓⴷⵉⵏ x ⴷ y ⴰⵔ ⵜⵙⵙⴽⵛⵎ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵇⵇⵔⴰⵏ ⴳ ⵓⵙⵏⵙⵍ [x, y] ⴳ ⵓⵎⵎⴰⵙ. ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⵓⵟⵟⵓⵏ ⴰⴷ, ⵇⴰⴷ ⵜⵙⵙⴽⵛⵎ ⵜⵎⵔⵙⵜ -1. ⵙ ⵓⵎⴷⵢⴰ: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,taq_Tfng,python,"
def rounded_avg(n, m):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵉⴷⵏ n ⴷ m, ⴷ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⵉⵟⵏ ⴰⵎⵎⴰⵙ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙⴳ n ⴰⵔ m (ⵙⴳ ⴳⴰⵏ n ⴷ m). ⵙⵙⵓⴷⵓⵏ ⵜⴰⵔⴰⵔⵓⵜ ⵖⵔ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⴽⴽⵡ ⵢⵓⵙⵉⵏ ⴷ ⵜⵙⵏⴼⵍ ⵖⵔ ⴱⵉⵏⴰⵔⵉ. ⵎⴽ ⵉⴳⴰ n ⴰⵅⴰⵜⴰⵔ ⵙⴳ m, ⵙⵙⵓⴷⵓⵏ -1. ⴰⵎⴷⵢⴰ: rounded_avg(1, 5) => ""0b11"" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => ""0b11"" rounded_avg(20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,taq_Tfng,python,"
def unique_digits(x):
    """"""ⴷⴰ ⵉⵜⵜⵓⴼⴽⴰ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⴷⵉⵢⵏ x. ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⵢⴰⵏ ⵓⵙⵎⵉⵍ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴰⴽⴽⵡ ⵓⵔ ⵉⵍⵉⵏ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵎⵉⵙ. ⵜⴰⵏⵏⴰⵢⵜ: ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⵜⵜⵔⴰⵔ ⵓⵙⵎⵉⵍ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⵢⵓⴳⴳⴰⵏ. ⵙ ⵓⵎⴷⵢⴰ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,taq_Tfng,python,"
def by_length(arr):
    """"""ⴳ ⵓⵙⵔⵔⵓⵙ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⵙⵙⵓⴷⵙ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳⵔ 1 ⴷ 9 ⴳ ⵜⴰⵎⵓⵏ, ⵙⵙⵓⴷⵙ ⴰⵙⵔⵔⵓⵙ ⵏ ⵓⵙⵔⵔⵓⵙ, ⴷ ⴷⴼⴼⵉⵔ ⴰⴷ ⵙⵙⵎⴷⵍ ⴽⵓ ⵓⵟⵟⵓⵏ ⵙ ⵢⵉⵙⵎ ⵏⵏⵙ ⵙⴳ ""ⵢⴰⵏ"", "" ⵙⵉⵏ"", "" ⴽⵕⴰⴹ"", "" ⴽⴽⵓⵥ"", "" ⵙⵎⵎⵓⵙ"", "" ⵚⴹⵉⵚ"", "" ⵙⴰ"", "" ⵙⵎⵎⵓⵙ"", "" ⵙⵎⵎⵓⵙ"", ""ⵜⵥⴰ"", "" ⵜⵥⴰ"". ⵙ ⵓⵎⴷⵢⴰ: arr = [2, 1, 1, 1, 4, 5, 8, 2, 3] -> ⵙⵙⵓⴷⵙ arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ⵙⵙⵓⴷⵙ arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""ⵜⵥⴰ"", "" ⴽⴽⵓⵥ"", "" ⵙⵉⵏ"", "" ⵙⵉⵏ"", "" ⵙⵉⵏ"", "" ⵢⴰⵏ"", "" ⵢⴰⵏ""] ⵎⴽ ⵉⴳⴰ ⵓⵙⵔⵔⵓⵙ ⴰⵣⴳⵏ, ⵙⵙⵓⴷⵙ ⴰⵙⵔⵔⵓⵙ: arr = [] return [] ⵎⴽ ⵉⴳⴰ ⵓⵙⵔⵓⵙ ⴽⵔⴰ ⵏ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵣⴳⴰⵔ: arr = [1, 1 , 1 , 55] -> arr -> arr-1, [1, 1], arr -> 55 -> arr -> reverse arr -> [55, arr = 1] return - 'One' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,taq_Tfng,python,"
def f(n):
    """"""ⵙⵙⵎⵔⵙ ⵜⴰⵡⵓⵔⵉ f ⵏⵏⴰ ⵢⵓⵎⵥⵏ n ⴰⵎⵎ ⵓⵎⵙⴽⴰⵔ, ⴰⵔ ⵉⵙⴽⵔ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏ n, ⵣⵓⵏⴷ ⴰⵜⵉⴳ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵙⵖⵍ ⵏ i ⵉⴳⴰ ⵜⴰⴳⴳⴰⵢⵜ ⵏ i ⵉⴳ ⵉⴳⴰ i ⴰⵎⵎ ⵓⵎⵢⴰⵖ ⵏⵖⴷ ⴰⵎⵔⵔⵓⴽ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ 1 ⴰⵔ i ⵎⴽ ⵓⵔ ⵉⴳⵉ. i ⴷⴰ ⵉⵜⵜⴱⴷⵓ ⵙⴳ 1. ⵜⴰⴳⴳⴰⵢⵜ ⵏ i ⵜⴳⴰ ⵜⴰⴳⴳⴰⵢⵜ ⵏ ⵓⴽⴼⵓⴷ ⵏ ⵡⵓⵟⵟⵓⵏ ⵙⴳ 1 ⴰⵔ i (1 * 2 * ... * i). ⴰⵎⴷⵢⴰ: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,taq_Tfng,python,"
def even_odd_palindrome(n):
    """"""ⴳ ⵓⵎⵉⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵙⵙⴽⵛⵎ ⵜⴰⴱⵍⵜ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵓⵎⵎⴰⵙ ⵏ ⵓⵙⵏⵙⵍ ((1, n), ⵙ ⵓⴽⵛⵛⵓⵎ. ⴰⵎⴷⵢⴰ1: ⴰⵙⴽⵛⵎ: 3 ⴰⵙⵓⴼⵖ: (1, 2) ⴰⵙⴼⵔⵓ: ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳⴰⵏ 1, 2, 3. ⵢⴰⵏ ⴳⵉⵙⵏ ⵉⴳⴰ ⴰⵎⴷⴷⴰⴷ, ⴷ ⵙⵉⵏ ⴳⵉⵙⵏ ⴳⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵎⴷⴷⴰⴷⵏ. ⴰⵎⴷⵢⴰ2: ⴰⵙⴽⵛⵎ: 12 ⴰⵙⴼⵔⵓ: (4, 6) ⴰⵙⴼⵔⵓ: ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴳⴰⵏ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ⴽⴽⵓⵥ ⴳⵉⵙⵏ ⴳⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷ 6 ⴳⵉⵙⵏ ⴳⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⵎⴷⴷⴰⴷⵏ. ⵜⴰⵏⵏⴰⵢⵜ: 1. 1 <= n <= 10^3 2. ⵜⴱⵍⵜ ⵙⵙⴽⵎ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⵎⴷⴷⴰⴷⵏⵉⴳⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵉⵎⴷⴷⴰⴷⵏ ⴳⴰⵏ. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,taq_Tfng,python,"
def count_nums(arr):
    """"""ⵔⵔⴰⵎ ⵜⴰⵡⵓⵔⵉ count_nums ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⴰⵎⵙⴳⴷⴰⵍ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⴷⴰ ⵢⴰⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵓⵖⵣⵓⵔ ⵏ ⵡⵓⵟⵟⵓⵏ > 0. ⵎⴽ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⴰⵎⴳⵓⵔⴰⵏ, ⵔⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⵣⵡⴰⵔⵓ ⴰⵎⴳⵓⵔⴰⵏ ⴰⵎⴳⵓⵔⴰⵏ: ⵙ ⵓⵎⴷⵢⴰ -123 ⵉⵍⴰ ⵡⵓⵟⵟⵓⵏⵏ ⵉⵎⴳⵓⵔⴰⵏ -1,2, ⴷ 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,taq_Tfng,python,"
def move_one_ball(arr):
    """"""ⵏⵍⵍⵉ ⵜⴰⵔⴰⴱⴱⵓⵜ 'ⴰⵔⵔ' ⵏ N ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ arr[1], arr[2], ..., arr[N]. ⴷⴰ ⵜⵜⵓⵙⵏⵎⴰⵍⴰⵏ ⵉⵎⴹⴰⵏ ⴳ ⵜⴰⵔⴰⴱⴱⵓⵜ ⵙ ⵓⵙⴽⵙⵍ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵙⴽⵙⵍ ⵎⴰⵢⴷ ⵉⵖⵢ ⴰⴷ ⵜⵜⵓⵙⵏⵎⴰⵍⴰ ⵜⴰⵔⴰⴱⴱⵓⵜ ⵙ ⵓⵙⵙⵓⴷⵙ ⵓⵔ ⵢⴰⴽⴽⵉⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⵙ ⵜⴳⴳⴰⵍⵉⵏ ⵏ ⵜⵎⵀⵍⴰ ⴰⴷ: ⵉⵖⵢ ⴰⴷ ⵜⵜⵓⵙⴽⵙⵍ ⵜⵎⵀⵍⴰ ⵏ ⵓⵙⵙⴼⵍⴷ ⵙ ⵓⵥⵍⵎⴰⴹ ⴽⵉⴳⴰⵏ ⵏ ⵜⵉⴽⴽⴰⵍ. ⵜⵎⵀⵍⴰ ⵏ ⵓⵙⵙⴼⵍⴷ ⵙ ⵓⵥⵍⵎⴰⴹ ⵢⴰⵜⵜ ⵜⴱⵔⵉⴷⵜ ⵏ ⵓⵙⵙⴼⵍⴷ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵜⴰⵔⴰⴱⴱⵓⵜ ⵙ ⵢⴰⵏ ⵓⴷⵖⴰⵔ ⴳ ⵓⵙⵙⵓⴷⵙ ⵏ ⵓⵙⵙⴼⵍⴷ ⵙ ⵓⵥⵍⵎⴰⴹ. ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵜⴰⵔⴰⴱⴱⵓⵜ ⵏ ⵓⵙⵙⴼⵍⴷ ⵙ ⵓⴷⵖⴰⵔ ⴰⵎⵣⵡⴰⵔⵓ ⴳ ⵜⴰⵔⴰⴱⴱⴱⵓⵜ ⵏ ⵓⵙⴽⵙⵍ ⵙ ⵓⵙⵙⵓⴷⵙ ⵓⵔ ⵢⴰⴽⴽⵉⵏ ⵙ ⵓⵙⵙⴼⵍⴷ ⵏ ⵓⵙⵙⴼⵍⴷ.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,taq_Tfng,python,"
def exchange(lst1, lst2):
    """"""ⴳ ⵜⵎⵓⴽⵔⵉⵙⵜ ⴰⴷ, ⵔⴰⴷ ⵜⵙⵙⴽⵔ ⵢⴰⵜ ⵜⵎⵔⵙⵜ ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵡⵓⵟⵟⵓⵏ, ⴷ ⴰⵔ ⵉⵙⵜⵉⵏ ⵉⵙ ⵉⵖⵉⵢ ⴰⴷ ⵉⵜⵜⵓⵙⵏⴼⵍ ⵉⴼⵔⴷⵉⵙⵏ ⴳⵔⵙⵏ ⴰⴼⴰⴷ ⴰⴷ ⵉⴳ lst1 ⵢⴰⵏ ⵓⵍⴳⴰⵎ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵎⵔⴽⵙⵏ. ⵓⵔ ⵉⵍⵍⵉ ⵓⵜⵜⵓ ⵅⴼ ⵡⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵜⵜⵓⵙⵏⴼⵍⵏ ⴳⵔ lst1 ⴷ lst2. ⵉⵖ ⵉⵖⵉⵢ ⴰⴷ ⵉⵜⵜⵓⵙⵏⴼⵍ ⵉⴼⵔⴷⵉⵙⵏ ⴳⵔ lst1 ⴷ lst2 ⴰⴼⴰⴷ ⴰⴷ ⴳⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ lst1 ⵉⵎⵎⵔⴽⵙⵏ, ⵙⵙⴽⵔ ""YES"". ⵎⴽ ⵓⵔ ⵢⵓⴼ ⴰⴷ ⵉⵜⵜⵓⵙⵏⴼⵍ ""NO"". ⵙ ⵓⵎⴷⵢⴰ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" ⴷⴰ ⵉⵜⵜⵓⵙⴽⴰⵔ ⵎⴰⵙ ⵔⴰⴷ ⵓⵔ ⴳⵉⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏ ⵓⴽⵛⵛⵓⵎ. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,taq_Tfng,python,"
def histogram(test):
    """"""ⴰ ⴼⴰⵍ ⵉⵋⵋⴰ ⵙⵜⵔⵉⵏⴶ ⵢⵈⵈⴰⵍ ⵏ ⴰⵍⴾⵉⵜⵜⴰⴱⴰⵏ ⵓⵉ ⵎⴰⴷⵔⵓⵉⵏⵢⵏ ⵉⵋⵋⴰⵏⵢⵏ ⵜⵉⵣⵍⴰⵉⴰⵏ ⵙ ⵙⴱⵢⵛⵢⵔ, ⴰⴷ ⵢⵔⵢⵎ ⵢⴼⵢⵙ ⵏ ⴰⵍⴾⵉⵜⵜⴰⴱ ⵙ ⵉⵋⵋⵉⵜ ⵏ ⴰⵙⵉⵓⵉⵍ ⵜⵓⵍⴰⵙ ⵉⵍⴰ ⵉⴷⴷⵉⴾⵓⴷ ⵏ ⴰⵙⵉⵓⵉⵍ ⵓⴰ ⵉⵋⵋⴰⵏ ⴼⴰⵍ ⴰⵓⵢⵏ. ⴰ ⴼⴰⵍ ⵉⵍⴰⵏ ⴰⵍⴾⵉⵜⵜⴰⴱⴰⵏ ⴰⵋⵋⵓⵜⵏⵢⵏ ⵉⵍⴰⵏⵢⵏ ⵉⵋⵋⵉⵜ ⵓⵍⴰⵂⴰⵏ, ⴰⴷ ⵢⵔⵢⵎ ⴼⵓⴾ ⵏⴰⵙⴰⵏ ⴰⵍⵎⵉⵜⴰⵍ: ⵂⵉⵙⵜⵓⴶⵔⴰⵎ ((ⴰ ⴱ ⵛ) == {'ⴰ': 1, 'ⴱ': 1, 'ⵛ': 1} ⵂⵉⵙⵜⵓⴶⵔⴰⵎ ((ⴰ ⴱ ⴱ ⴱ ⴰ') == {'ⴰ': 2, 'ⴱ': 2} ⵂⵉⵙⵜⵓⴶⵔⴰⵎ ((ⴰ ⴱ ⵛ ⴰ ⴱ') == {'ⴰ': 2, 'ⴱ': 2} ⵂⵉⵙⵜⵓⴶⵔⴰⵎ ((ⴰ ⴱ ⴱ ⴱ ⴰ') == {'ⴱ 4}: ⵂⵉⵙⵜⵓⴶⵔⴰⵎ (('ⴰ') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,taq_Tfng,python,"
def reverse_delete(s,c):
    """"""ⵜⴰⵣⴰⵔⵜ ⵏⵜⵜⴰ ⵜⵜⵓⴼⴽⴰ ⵙⵉⵏ ⵉⵙⴽⴽⵉⵍⵏ s ⴷ c, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵙⵙⴽⵛⵎ ⴽⵓⵍⵍⵓ ⵉⵙⴽⴽⵉⵍⵏ ⴳ s ⵏⵏⴰ ⵉⴳⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴷ ⴽⵓ ⵉⵙⴽⴽⵉⵍ ⴳ c ⴷ ⴰⴷ ⵜⵥⵕ ⵉⵙ ⵉⴳⴰ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵢⴰⴼⵓⵜ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ. ⵉⵙⵎ ⵏ ⵓⵙⴽⴽⵉⵍ ⴱⴰⵍⵉⵏⴷⵔⵓⵎ ⵉⴳ ⴷⴰ ⵢⴰⴽⴽⴰ ⵜⵉⵔⵔⴰ ⵙ ⵓⵎⵣⴰⵖ ⴷ ⵓⵎⵣⴰⵖ. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔⵉ ⵢⴰⵜ ⵜⴱⴰⴱⵍⵜ ⵏⵏⴰ ⴳ ⵉⵍⵍⴰ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵢⴰⴼⵓⵜ ⴷ True/False ⵉ ⵓⵣⵣⵔⴰⵢ. ⴰⵎⴷⵢⴰ: s = ""abcde"", c = ""ae"", ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵢⴰⴼⵓⵜ ('bcd', False) ⵙ s = ""abcdef"", c = ""b"" ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵢⴰⴼⵓⵜ ('acdef', False) ⵙ s = ""abcdedcba"", c = ""ab"", ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵢⴰⴼⵓⵜ ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,taq_Tfng,python,"
def odd_count(lst):
    """""""" ⴽⵓ ⵉⴼⵔⴷⵉⵙ i ⵏ ⵜⵏⴰⴼⵓⵜ ⵉⵇⵇⴰⵏ ⴰⴷ ⵉⴳ "" ⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵏⴰⴼⵓⵜ i ⵏ ⵓⵙⴽⵛⵎ. "" ⴳ ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵜⵓⵙⵏⴼⴰⵍⵏ ⴽⵓⵍⵍⵓ i ⵙ ⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵜⵏⴰⴼⵓⵜ i ⵜⵉⵙⵙ ⴽⵕⴰⴹ. >>> odd_count['1234567']) ["" ⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ 4n str4ng 4 ⵏ 4nput.""] >>> odd_count['3',""111111""]) ["" ⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ 1n str1ng 1 ⵏ 1nput. "", "" ⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ 8n str8ng 8 ⵏ 8nput. ""]""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,taq_Tfng,python,"
def minSubArraySum(nums):
    """"""ⴳ ⵓⵙⴰⵜⵉ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷⴼⵔ ⴰⵙⵖⵍ ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⴽⵔⴰ ⵏ ⵓⵙⴰⵜⵉ ⴰⵎⵥⵥⵢⴰⵏ ⵓⵔ ⵉⴳⵉⵏ ⵓⵎⵥⵥⵢⴰⵏ. ⴰⵎⴷⵢⴰ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,taq_Tfng,python,"
def max_fill(grid, capacity):
    import math
    """"""ⴰⵜⵓⴰⵣⴰⵉⴰⵏ ⵜⴰⵗⴰⵍⴰⵉⵜ ⵜⴰⴾⴰⵔⴰⵜ ⵏ ⵉⵗⴰⵍⴰⵉⴰⵏ. ⴰⴾⴰⵍ ⴼⵓⴾ ⵢⵈⵈⴰⵍ ⵉⵗⴰⵍⴰⵉ ⵉⵉⵉⴰⵏ, ⴷ ⵂⴰⵔⴰⵜ ⴼⵓⴾ ⴷⴰⵗ ⴰⴾⴰⵍ ⵢⵈⵈⴰⵍ ⵢⴷⴰⴶ ⵏ ⴰⵎⴰⵏ ⵉⵉⵉⴰⵏ. ⵉⵗⴰⵍⴰⵉ ⴼⵓⴾ ⵉⵍⴰ ⴱⵓⵢⵜⵢⵔ ⵉⵋⵋⴰⵏ ⴰⴷⴷⵓⴱⴰⵜ ⵏ ⴰⵙⵉⵓⴰⴷ ⵏ ⴰⵎⴰⵏ ⴷⴰⵗ ⵢⴷⴰⴶ ⵓⵢⵏ, ⴷ ⴱⵓⵢⵜⵢⵔ ⵜⴰⵏ ⴼⵓⴾ ⵉⵍⴰⵏⴰⵜ ⵜⴰⵣⵓⵏⵜ ⵉⵉⵉⴰⵜ. ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⵢⵜ ⵜⴰⵈⵈⴰⵍ ⴰⵆⴰⴷⴰⵎ ⵏ ⴱⵓⵢⵜⵢⵔ ⵜⴰⵏ ⵉ ⴰⵙⵉⵓⴰⴷ ⵏ ⵉⵗⴰⵍⴰⵉⴰⵏ. ⴰⴾⴰⵉⴰⴷ ⵏ ⵜⵉⵓⵉⵜ ⵏ ⴰⵍⵓⴰⵈ ⵓⴰ ⵉⴷ ⵉⵋⵋⴰ ⴰⴾⴰⵉⴰⴷ: ⴰⴾⴰⵍ: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] ⴱⵓⵢⵜⵢⵔ_ⴾⴰⴱⴰⵙⵉⵜ: 1 ⴰⴾⴰⵉⴰⴷ: 6 ⴰⴾⴰⵉⴰⴷ: ⴰⴾⴰⵍ: ⴰⴾⴰⵍ: [[0,0,1,1], [0,0,0,0,0,0,0,0], [1,1,1], [0,1,1] ⴰⴾⴰⵉⴰⴷ: 5 ⴰⴾⴰⵉⴰⴷ: 0 * ⴰⴾⴰⵉⴰⴷ: 0 * ⴰⴾⴰⵉⴰⴷ: 1 * ⴰⴾⴰⵉⴰⴷ: 1 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,taq_Tfng,python,"
def sort_array(arr):
    """"""ⴳ ⴽⴰⵜⴰ ⴰⴷ, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵙⵙⵓⴷⵙⴷ ⵜⴰⴳⵔⵓⵎⵎⴰ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵏⴰⴼⴳⴰⵏ ⵖⴼ ⵓⵟⵟⵓⵏ ⵏ ⵉⵎⵢⴰⴳⵏ ⴳ ⵓⵙⵎⴷⵢⴰ ⵏⵏⵙⵏ ⴰⴱⵉⵏⴰⵔⵉ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ. ⵉ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵎⵢⴰⴳⵏ ⵏ ⵉⵎⵢⴰⴳⵏ, ⵙⵙⵓⴷⵙⴷ ⵖⴼ ⵡⴰⵜⵉⴳ ⴰⵎⵔⴰⵡ. ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵉⵜⵜⵓⵙⵎⵔⵙ ⵣⵓⵏⴷ ⴰⴷ: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,taq_Tfng,python,"
def select_words(s, n):
    """"""ⵎⴽ ⴷⴰⵔⴽ ⴰⵙ ⵓⵡⵔⵉⴽ s ⴷ ⵓⵟⵟⵓⵏ ⴰⴳⴰⵎⴰⵏ n, ⵜⵜⵓⵣⵔⴰⴽ ⴰⴷ ⵜⵙⵏⵙⵉ ⵢⴰⵜ ⵜⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴰⴽⴽⵡ ⵙⴳ ⵓⵡⵔⵉⴽ s ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵎⵏⵉⵍⵏ ⵏ ⵓⵖⵔⵉⴽ n, ⴰⴼⴰⴷ ⴰⴷ ⵜⵜⵉⵍⵉⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴰⴷ ⴳ ⵓⵡⵔⵉⴽ s. ⵎⴽ ⵜⴳⴰ ⵓⵡⵔⵉⴽ s ⵜⵍⵍⵉⵜ, ⵇⴰⴷ ⵜⵔⴰⵔ ⵜⵡⵓⵔⵉ ⵜⴰⵍⴳⴰⵎⵜ ⵜⵍⵍⵉⵜ. ⵜⴰⵏⵏⴰⵢⵜ: ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⴽⵜⵉ ⵉⵙ ⵓⵡⵔⵉⴽ ⵏ ⵓⴽⵛⵛⵓⵎ ⴳⵉⵙ ⵜⵉⵔⵔⴰ ⴷ ⵉⵙⴰⵢⵔⴰⵔⵏ. ⵉⵎⴷⵢⴰⵜⵏ: select_words (((""ⵎⴰⵔⵉ ⵖⵓⵔⵙ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⵔⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳⴳⴰ ⵜⴰⴳ""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,taq_Tfng,python,"
def get_closest_vowel(word):
    """"""ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔ ⵜⴰⴳⵓⵔⵉ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⴰⴼⴷ ⵓⵡⵉⴽⵉⵍ ⴰⵎⵉⴽⴽⵙ ⵏⵏⴰ ⵉⵜⵜⴷⴷⵓⵏ ⴳⵔ ⵙⵉⵏ ⵉⵎⵏⵉⵍⵏ ⵙⴳ ⵜⵙⴳⴰ ⵏ ⵡⴰⴷⴷⵓⵔ ⵏ ⵜⴳⵓⵔⵉ (ⴰⵙⵙⴼⵍⴷ ⵏ ⵡⴰⴷⴷⴰⴷ ⵏ ⵡⴰⴷⴷⴰⴷ). ⵓⵔ ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⵉⵎⵏⵉⵍⵏ ⴳ ⵜⵉⵣⵡⵉⵔⵉ ⴷ ⵜⴳⵉⵔⴰ. ⵔⴰⵏⵜⵔ ⵜⵔⴳⴳⴰ ⵜⴰⵅⵍⴰⴼⵜ ⵉⵖ ⵓⵔ ⵜⵢⴰⴼⴰ ⴽⵔⴰ ⵏ ⵓⵡⵉⴽⵉⵍ ⵏⵏⴰ ⵉⵇⵇⵏⵏ ⵙ ⵡⴰⴷⴷⴰⴷ ⵏ ⴰⴼⵍⵍⴰ. ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⵎⴽⵜⵉ ⵉⵙ ⵜⵔⴳⴳⴰ ⵜⴰⵡⵡⵉⴽⵉⵍⵜ ⵜⵍⵍⴰ ⵖⴰⵙ ⵜⵉⵔⵔⴰ ⵜⴰⵏⴳⵍⵉⵣⵜ. ⴰⵎⴷⵢⴰ: get_closest_vowel (((""ⵉⵖⵓⵟ"") ==> ""u"" get_closest_vowel (((""F"") ==> ""UULL"" get_closest_vowel (((""quick"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,taq_Tfng,python,"
def match_parens(lst):
    '''ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵙⵉⵏ ⵉⵙⵉⴹⵏ, ⵙⵉⵏ ⵉⵙⵉⴹⵏ ⴳⴰⵏ ⵉⵏⴳⵔⵔⴰⵜⵏ ⵉⵕⵥⵎⵏ '(' ⵏⵖⴷ ⵉⵏⴳⵔⵔⴰⵜⵏ ⵉⵕⵥⵎⵏ ') '. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵥⵕ ⵉⵙ ⵉⵖⵢ ⴰⴷ ⵜⵜⵓⵙⵎⵓⵏ ⵙⵉⵏ ⵉⵙⵉⴹⵏ ⴳ ⴽⵔⴰ ⵏ ⵓⴽⵓⴷ, ⵎⴰⵙ ⴷ ⵉⵙⵉⴹⵏ ⵉⵜⵜⵓⵙⵢⴰⴼⴰⵏ ⴰⴷ ⵉⴳ ⵉⵖⵓⴷⴰⵏ. ⴷⴰ ⵉⵜⵜⵓⵙⵎⴽⵍ ⵓⵙⵉⴹⵏ S ⵙ ⵉⵙ ⵉⴳⴰ ⵉⵖⵓⴷⴰⵏ ⵉⴳ ⴷ ⴽⵓⵍⵍⵓ ⵉⵏⴳⵔⵔⴰⵜⵏ ⴳ S ⴳⴰⵏ ⵉⵎⵙⴰⵙⴰⵏ. ⵙ ⵓⵎⴷⵢⴰ: ⵉⵙⵉⴹⵏ '((()) ' ⵉⵖⵓⴷⴰⵏ, ⵎⴰⵛ ⴰⵙⵉⴹⵏ '()) ' ⵓⵔ ⵉⴳⵉ. ⴷⴰ ⵉⵜⵜⴰⴽⵍ 'ⵢⴰ' ⵉⴳ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴱⵔⵉⴷ ⵏ ⵓⵙⴽⴰⵔ ⵏ ⵓⵙⵉⴹⵏ ⵉⵖⵓⴷⴰⵏ, ⴷ ⴷⴰ ⵉⵜⵜⴰⴽⵍ 'ⵓ' ⴳ ⵡⴰⴷⴷⴰⴷ ⵢⴰⴹⵏ. ⵉⵎⴷⵢⴰⵜⵏ: match_parens[('(() ', ') ']) == 'Yes' match_parens[''''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,taq_Tfng,python,"
def maximum(arr, k):
    """"""ⴰⵙⵎⵓⵜⵜⴳ ⵏ ⵓⵎⵙⴳⵏⴰⴼ arr ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴷ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⴷⵉ k, ⵙⵙⵓⴼⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⵉⵖⵣⵉ k ⵙ ⵓⴳⴳⴰⵔ ⵏ k ⵉⵎⴹⴰⵏ ⴳ arr. ⴰⵎⴷⵢⴰ1: ⴰⵙⵎⵓⵜⵜⴳ: arr = [-3, -4, 5], k = 3 ⴰⵙⵎⵓⵜⵜⴳ: [-4, -3, 5] ⴰⵎⴷⵢⴰ2: ⴰⵙⵎⵓⵜⵜⴳ: arr = [4, -4, 4], k = 2 ⴰⵙⵎⵓⵜⵜⴳ: [4, 4] ⴰⵎⴷⵢⴰ3: ⴰⵙⵎⵓⵜⵜⴳ: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ⴰⵙⵎⵓⵜⵜⴳ: [2] ⴰⵙⴳⵏⴰⴼ: 1. ⵜⵉⵖⵣⵉ ⵏ ⵓⵎⵙⴳⵏⴰⴼ ⵔⴰⴷ ⵜⵍⴽⵎ ⴳ ⵓⵙⵏⴼⵍ ⵏ [1, 1000]. 2. ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵎⵙⴳⵏⴰⴼ ⵔⴰⴷ ⵜⵜⵍⴽⵎⵏ ⴳ ⵓⵙⵏⴼⵍ ⵏ [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,taq_Tfng,python,"
def solution(lst):
    """"""ⵙ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⵅⵡⴰⵏ, ⵙⵙⴽⵛⵎ ⵜⴰⴳⵓⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⴳ ⵡⴰⵏⵙⴰ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⵉⵎⴷⵢⴰⵜⵏ ⵏ ⵓⴼⵙⵙⴰⵢ (([5, 8, 7, 1]) ==> 12 ⵓⴼⵙⵙⴰⵢ (([3, 3, 3, 3, 3]) ==> 9 ⵓⴼⵙⵙⴰⵢ (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,taq_Tfng,python,"
def add_elements(arr, k):
    """"""ⵉⴳ ⵏⴰⴽⴽⴰ ⴰⵙⵔⴷⴰⵙ ⵓⵔ ⵉⴳⵉⵏ ⵓⵎⵥⵥⵢ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ arr ⴷ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ k, ⵙⵙⴽⵛⵎ ⵜⴰⴳⵓⵜ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵙⵏⴰⵜ ⵜⵓⵙⴽⵉⵡⵉⵏ ⴳ ⵓⴳⴳⴰⵔ ⵙⴳ ⵉⴼⵔⴷⵉⵙⵏ ⵉⵎⵣⵡⵓⵔⴰ k ⵏ arr. ⴰⵎⴷⵢⴰ: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,taq_Tfng,python,"
def get_odd_collatz(n):
    """"""ⵉⴳ ⵏⵉⵜ ⵉⵍⵍⴰ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴷ n, ⵙⵙⵓⴼⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵉⵎⴹⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⴳ ⵓⵙⵏⵙⵍ ⵏ ⴽⵓⵍⴰⵜⵣ. ⵜⴰⵔⴳⴰⵍⵜ ⵏ ⴽⵓⵍⴰⵜⵣ ⵜⴳⴰ ⵜⴰⵔⴳⴰⵍⵜ ⴳ ⵜⵓⵙⵏⴰⴽⵜ ⵏⵏⴰ ⵉⵥⵍⵉⵏ ⵙ ⵓⵙⵏⵙⵍ ⵉⵜⵜⵓⵙⵏⵎⵍⵏ ⵙ ⵓⵎⴽ ⴰⴷ: ⵙⵙⵏⵜⵉ ⵙ ⴽⵓ ⵉⵎⴹⴰⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ ⵉⵎⵏⵉⴷⵏ n. ⴷⴼⴼⵉⵔ ⴰⴷ ⴷⴰ ⵜⵜⵓⵢⴰⵡⵙ ⴽⵓ ⵉⵎⵉⵔⵉ ⵙⴳ ⵉⵎⵉⵔⵉ ⵉⵣⵔⵉⵏ ⵙ ⵓⵎⴽ ⴰⴷ: ⵉⵖ ⵉⴳⴰ ⵓⵎⵉⵔⵉ ⵉⵣⵔⵉⵏ ⴰⵎⵎ ⵡⵉⵙⵙ, ⵉⵎⵉⵔⵉ ⴰⴷ ⵢⵓⵛⴽⴰⵏ ⵉⴳⴰ ⵓⵣⴳⵏ ⵏ ⵉⵎⵉⵔⵉ ⵉⵣⵔⵉⵏ. ⵉⵖ ⵉⴳⴰ ⵓⵎⵉⵔⵉ ⵉⵣⵔⵉⵏ ⴰⵎⵎ ⵡⵉⵙⵙ ⴰⵎⵣⴰⵔⴰⵢⵏ, ⵉⵎⵉⵔⵉ ⴰⴷ ⵢⵓⵛⴽⴰⵏ ⵉⴳⴰ 3 ⵏ ⵜⵉⴽⴽⴰⵍ ⵏ ⵉⵎⵉⵔⵉ ⵉⵣⵔⵉⵏ ⵓⴳⴳⴰⵔ 1. ⵜⴰⵔⴳⴰⵍⵜ ⵜⴳⴰ ⵎⴰⵙ ⵓⵔ ⵉⵥⵍⵉ ⵙ ⵡⴰⵜⵉⴳⵏ ⵏ n, ⵔⴰⴷ ⵜⵍⴽⵎ ⴰⵀⴰ 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,taq_Tfng,python,"
def valid_date(date):
    """"""ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵏⴰⵔⵉ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵎⴽⵍⵏ ⵜⵉⴼⵔⴽⵜ ⵏ ⵡⴰⵙⵙ ⴷ ⵜⵉⴷⵜ ⵉⵖ ⵉⴳⴰ ⵡⴰⵙⵙ ⴰⵣⵔⴼⴰⵏ ⵎⴽⵍⵍⵉ ⵉⴳⴰ ⵡⴰⵍⴰ ⵜⵉⴼⵔⴽⵜ. ⴷⴰ ⵉⵜⵜⵓⵙⵎⴽⵍ ⵡⴰⵙⵙ ⵉⵖ ⴳⴰⵏ ⴽⵓⵍⵍⵓ ⵉⵍⵓⴳⴰⵏⵏ ⴰⴷ: 1. ⵓⵔ ⵉⴳⵉ ⵓⵡⵜⵜⵓ ⵏ ⵡⴰⵙⵙ ⴰⵣⵔⴼⴰⵏ ⴰⵣⵔⴼⴰⵏ. 2. ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 31 ⵏ ⵡⵓⵙⵙⴰⵏ ⵉ ⵡⴰⵢⵢⵓⵔⵏ 1,3,5,7,8,10,12. ⴷ ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 30 ⵏ ⵡⵓⵙⵙⴰⵏ ⵉ ⵡⴰⵢⵢⵓⵔⵏ 4,6,9,11. ⴷ ⵓⵔ ⵉⴳⵉ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⵓⵙⵙⴰⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 29 ⵉ ⵡⴰⵢⵢⵓⵔ 2. 3. ⵓⵔ ⵉⵇⵇⵏ ⴰⴷ ⵉⴳ ⵡⵓⵟⵟⵓⵏ ⵏ ⵡⴰⵢⵢⵓⵔⵏ ⵓⴳⴳⴰⵔ ⵏ 1 ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ 12. 4. ⵉⵇⵇⵏ ⵡⴰⵙⵙ ⴰⴷ ⵉⴳ ⴳ ⵜⴰⵍⵖⴰ: mm-dd-yyyy-ⵙ ⵓⵎⴷⵢⴰ: valid_date (('03-11-2000') => true_valid_date ((15-01-2012) => false_valid_date ((((04-2040') => false_valid_date (((06-04-2020) => true_date=valid_date=valid_date=06/06/04/2020)""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,taq_Tfng,python,"
def split_words(txt):
    '''ⵎⴽ ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵢⴰⵏ ⵓⵙⵏⴼⵍⵓⵍ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ, ⵙⵙⴽⵛⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵙ ⵜⴱⴹⴰⵢⵜ ⵅⴼ ⵡⴰⵢⴷⴰ, ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵢⴷⴰ ⴳ ⵓⴹⵕⵉⵚ, ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⴱⴹⴰⵢⵜ ⵅⴼ ⵡⴰⵢⴷⴰ ',' ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵡⴰⵢⴷⴰ, ⵉⵇⵇⴰⵏ ⴰⴷ ⵜⵙⵙⴽⵛⵎ ⵓⵟⵟⵓⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵥⵥⵢⴰⵏⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵢⵉⵡⴰⵏ ⴳ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵉⴼⵉⵏⴰⵖ, ord ((('a') = 0, ord ((('b') = 1, ... ord ((('z') = 25 ⵉⵎⴷⵢⴰⵜⵏ split_words (((""Hello world!"") â -> [""Hello"", ""world!""] split_words (((""Hello,world!"") â -> [""Hello"", ""world!"" split_words (((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,taq_Tfng,python,"
def is_sorted(lst):
    '''ⵉⴳ ⴷⴰⵔⴽ ⵉⵍⵍⴰ ⵓⵎⴹⴰⵏ ⵏ ⵉⵎⴹⴰⵏ, ⵙⵙⵓⴼⵖ ⵉⵙ ⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵓⵍⵖⵓ ⵏ ⵓⴽⵙⴰⵢ ⵏⵖ ⵓⵔ ⵉⴳⵉ. ⵉⵖ ⴷⴰⵔⴽ ⵉⵍⵍⴰ ⵓⴳⴳⴰⵔ ⵏ 1 ⵓⵎⴹⴰⵏ ⴰⵎⵎ ⵢⴰⵏ, ⵙⵙⵓⴼⵖ False. ⵓⵔ ⵉⵍⵍⵉ ⵉⵎⴹⴰⵏ ⵉⵔⵉⵏⵉⵏ ⴷ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵉⵎⴷⵢⴰⵜⵏ is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,taq_Tfng,python,"
def intersection(interval1, interval2):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵙⵉⵏ ⵉⵏⴱⵔⴰⵍⵏ, ⴳ ⴽⵓ ⵉⵏⴱⵔⴰⵍ ⵉⴳⴰ ⵢⴰⵏ ⵓⴽⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙ ⵓⵎⴷⵢⴰ, ⵉⵏⴱⵔⴰⵍ = (ⵜⴱⴷⴰⴷⵜ, ⵜⴳⵉⵔⴰ) = (1, 2). ⵉⵏⴱⵔⴰⵍⵏ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ ⴳⴰⵏ ⵉⵇⵇⵏⵏ, ⵎⴰⵢⴰⴷ ⵉⴳⴰⵏ ⵉⵙ ⴷⴰ ⵢⴰⵎⵓ ⵉⵏⴱⵔⴰⵍ (ⵜⴱⴷⴰⴷⵜ, ⵜⴳⵉⵔⴰ) ⴳ ⵜⵉⵣⵡⵉⵔⵉ ⴷ ⵜⴳⵉⵔⴰ. ⴳ ⴽⵓ ⵉⵏⴱⵔⴰⵍ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ, ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔ ⵎⴰⵙ ⵉⴳⴰ ⵓⵣⵡⵉⵔⵉ ⵏⵏⵙ ⵉⵎⵥⵥⵉⵢⵏ ⵏⵖⴷ ⵉⵎⵣⴷⴰⵢⵏ ⴷ ⵜⴳⵉⵔⴰ ⵏⵏⵙ. ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵏⵙⵙⵖⵓⴷⵓ ⵎⴰⵙⴷ ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⵎⴽⵍ ⵏ ⵉⵏⴱⵔⴰⵍⵏ ⴰⴷ ⵙⵉⵏ ⵜⴳⴰ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ. ⴰⵎⴷⵢⴰ, ⴰⵙⵎⴽⵍ ⵏ ⵉⵏⴱⵔⴰⵍⵏ (1, 3), (2, 4) ⵉⴳⴰ (2, 3) ⵏⵏⴰ ⴷ ⵜⵉⵖⵣⵉ ⵏⵏⵙ ⵜⴳⴰ 1, ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ. ⵉⴳ ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⵎⴽⵍ ⵉⴳⴰ ⵢⴰⵏ ⵓⵟⵟⵓⵏ ⴰⵎⵣⵡⴰⵔⵓ, ⴷⴷ ⵜⵉⵖⵣⵉ ⵏ ⵓⵙⵎⴽⵍ ""ⵀⴰ"", ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⵎⴽ ⵓⵔ ⴷⴰ ⵜⵜⵓⴽⴽⵉⵏ ⵉⵏⴱⵔⴰⵔⵏ ⵙⵉⵏ ⵉⵏⴱⵔⴰⵍⵏ.""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,taq_Tfng,python,"
def prod_signs(arr):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵙⵉⵡⵏ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷ ⵉⵇⵇⴰⵏⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴳⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵎⵓⵜⵜⵔⵏ ⵙ ⵜⵢⴰⴼⵓⵜ ⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⴽⵓ ⵓⵟⵟⵓⵏ ⴳ ⵓⵎⴹⴰⵏ, ⵏⵏⴰ ⵉⵜⵜⵓⵙⵎⴷⵢⴰⵏ ⵙ 1, -1 ⵏⵖⴷ 0. ⵜⴰⵏⵏⴰⵢⵜ: ⵓⵔ ⴷⴰ ⵉⵜⵜⵔⴰⵔ ⴽⵔⴰ ⵉⴽⵙⵉⵡⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⴰⵎⴷⵢⴰ: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) ==  ⵓⵔ ⵜⵍⵍⵉ ⴽⵔⴰ""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,taq_Tfng,python,"
def minPath(grid, k):
    """"""ⵉⵖ ⵏⴰⴽⴽⴰ ⵜⴰⵡⵔⵉⵔⵜ ⵙ N ⵜⵉⴼⵔⴽⵉⵏ ⴷ N ⵜⵉⵔⵙⴰⵍ (N >= 2) ⴷ ⴽⵓ ⵜⴰⵖⵔⴰⵙⵜ ⵏ ⵜⴱⵔⵉⴷⵜ ⴷⴰⵔⵙ ⵢⴰⵏ ⵡⴰⵜⵉⴳ. ⴽⵓ ⵜⴰⵖⵔⴰⵙⵜ ⴳ ⵓⵎⵏⵉⴷ [1, N * N] ⵉⵍⵍⴰ ⴽⵓ ⵢⴰⵏ ⴳ ⵡⴰⵜⵉⴳⵏ ⴳ ⵜⴱⵔⵉⴷⵜ. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵏⴰⴼ ⴰⴱⵔⵉⴷ ⴰⵎⵥⵥⵢⴰⵏ ⵏ ⵜⵉⵖⵣⵉ k ⴳ ⵜⴱⵔⵉⴷⵜ. ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⴱⴷⵓ ⵙⴳ ⴽⵓ ⵜⴰⵖⵔⴰⵙⵜ, ⴷ ⴳ ⴽⵓ ⵜⵉⴽⵍⵉⵜ ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵣⵣⵉⴳⵉⵣⴷ ⵖⵔ ⴽⵓ ⵜⴰⵖⵔⴰⵙⵉⵏ ⵜⵉⵎⴰⴷⴷⵓⴽⴰⵍⵉⵏ, ⵙ ⵜⴳⵓⵔⵉ ⵢⴰⴹⵏ, ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵣⵣⵉⴳⵉⵣⴷ ⵖⵔ ⵜⴰⵖⵔⴰⵙⵉⵏ ⵏⵏⴰ ⴷⴰⵔⵙ ⴰⴳⴰⴼⴰ ⴰⴽⴷ ⵜⴰⵖⵔⴰⵙⵜ ⵜⴰⵜⵔⴰⵔⵜ. ⵓⵔ ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵣⵣⵉⴳⵉⵣⴷ ⵙⴳ ⵜⴱⵔⵉⴷⵜ. ⴰⴱⵔⵉⴷ A (ⵙ ⵜⵉⵖⵣⵉ ⵏ k) ⵉⴳⴰ ⵡⴰⵜⵉⴳⵔ B (ⵙ ⵜⵉⵖⵣⵉⴳⵉⵣⵏ ⵏ ⵜⴱⵔⵉⴷⵜ) ⵉⵖ ⴷⴼⴼⵉⵔ ⵏ ⵓⵙⵓⴷ ⵏ ⵡⴰⵜⵉⴳⵏ ⴳ ⵜⴱⵔⵉⴷⵉⵏ ⵏⵏⴰ ⴳ ⵜⵣⵔⵉⴷⵏ A ⴷ B (ⴰⴷ ⵏⵜⵜⴰⵖ ⴰⵙⵏ ⴰⵙⵏ ⵜⵉⴱⵔⵉⴷⵜ ⴷ ⵜⵉⴱⵔⵉⴷⵜ ⵜⵉⴱⵔⵉⴷⵜ ⴷ ⵜⵉⴱⵔⵉⴷⵜ), ⴷⴰ ⵜⵣⵎⵔⵔⴰⵙⵜ ⵜⴰⵡⵔⴰⵙⵜ ⴳ ⵓⴳⴳⵡⵜ ⵏ ⵜⴱⵔⵉⴷⵜ, ⵜⴳⴰ ⵡⴰⵜ ⵏⵜⵜ ⴷ ⵜⵉⴱⵔⵉⴷⵜⵔⴰⵜ ⵏ ⵜⴱⵔⵉⴷⵜ, ⴷ ⵜⵉⴱⵔⵉⴷⴰⵜ ⵏ ⵜⴱⵔⵉⴷⵜⵔⵉⴷⵜⵔⴰⵜ, ⵓⴳⴳⵡⵜ ⵏ ⵜⴱⵔⴰⵜ ⵏ ⵜⴱⵔⴰⵜ ⵏ ⵜⴱⵔⴰⵜ ⴳ ⵓⴳⴳⴰⵔ, ⴷ ⵜⵉⴱⵔⴰⵜⵔⴰⵜ ⵏ ⵜⴱⵔⴰⵜⵔⴰⵜ, ⴷ ⵜⵉⴱⵔⴰⵜⵔⴰⵜ, ⴷ ⵜⵉⴱⵔⴰⵜⵔⴰⵜⵔⴰⵜ, ⴳ ⵜⴱⵔⴰⵜ, ⴳ ⵡⴰⵏ, ⴳ ⵡⴰⵏ ⵡⴰⵏ, ⴳ ⵡⴰⵏ, ⴳ ⵡⴰⵏ, ⴳ ⵡⴰⵏ, ⴳ ⵡⴰⵏ, ⴳ ⵡⴰⵏ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ, ⴳ""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,taq_Tfng,python,"
def tri(n):
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⵏⵎⵍ ⵓⵙⵏⵙⵍ ⵏ ⵟⵔⵉⴱⵓⵏⴰⵛⵉ ⵙ ⵓⵙⵏⴼⵍⵓⵍ ⵏ ⵜⵉⴽⵍⵉⵜ: tri(1) = 3 tri(n) = 1 + n / 2, ⵉⴳ n ⵉⴳⴰ ⴰⵎⵢⴰⴳ. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ⵉⴳ n ⵉⴳⴰ ⴰⵎⵢⴰⴳ. ⵙ ⵓⵎⴷⵢⴰ: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵟⵟⴰⵍ ⵏ ⵉⵎⴹⴰⵏ ⵓⵔ ⵉⴳⵉⵏ ⵉⴽⵟⵟⴰⵍⵏ, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔⵉⵖ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵏ ⵜⵉⴽⵍⵉⵜ ⵏ ⵟⵔⵉⴱⵓⵏⴰⵛⵉ ⴰⵎⵣⵡⴰⵔⵓ n + 1 ⵏ ⵓⵙⵏⵙⵍ ⵏ ⵟⵔⵉⴱⵓⵏⴰⵛⵉ. ⵉⵎⴷⵢⴰⵜⵏ: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,taq_Tfng,python,"
def digits(n):
    """"""ⵉⴳ ⵏⵙⴽⵔ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ ⴰⵎⵏⵉⴳ n, ⵏⵙⵙⴽⵔ ⴰⵙⴼⴰⵔ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⵏⵙⵙⴽⵔ 0 ⵎⴽ ⴳⴰⵏ ⵡⵓⵟⵟⵓⵏ ⴰⴽⴽⵡ ⵉⵎⵣⴰⵔⴰⵢⵏ. ⵙ ⵓⵎⴷⵢⴰ: ⵡⵓⵟⵟⵓⵏ ((1) == 1 ⵡⵓⵟⵟⵓⵏ ((4) == 0 ⵡⵓⵟⵟⵓⵏ ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,taq_Tfng,python,"
def is_nested(string):
    '''ⴰⵗⵏⵓ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵢⵂⴰ ⵙⵜⵔⵉⵏⴶ ⵛⵂⵓⵏⴷ ⵉⵏⵜⴰⵋ ⵓⴰ ⵉⵍⴰⵏ ⴱⵔⴰⵛⴻⵜⵙ ⵛⵓⴰⵔⴻ. ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵉⵋⵋⴰ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵉⴾⴼ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰⵏ ⵜⵂⵔⴻ ⴰ ⴼⴰⵍ ⴷ ⵉⵋⵋⴰ ⵗⴰⵙ ⴰ ⴼⴰⵍ ⵉⵍⵍⴰ ⵙⵓⴱⵙⵛⵢⵛⵢⵏⵛⵢ ⵏ ⴱⵔⴰⵛⴻⵜⵙ ⵓⴰ ⵉⴷ ⵉⵍⴰ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵉⵉⵉⴰⵜ ⴷⴰⵗ ⵙⵓⴱⵙⵛⵢⵛⵢⵏⵛⵢ ⵜⴰⵈⵈⴰⵍ ⴰ ⵓⵂⴰⵔⴰⵏ. ⴰ ⵓⵂⴰⵔⴰⵏ'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,taq_Tfng,python,"

def sum_squares(lst):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵡⵓⵟⵟⵓⵏ. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⵎⵙⴷ ⵜⴰⴳⵓⵜ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵓⴱⴰⵕ ⴳ ⵜⵍⴳⴰⵎⵜ ⵉⵜⵜⵓⴼⴽⴰⵏ, ⵜⴱⵔⵔⵔⴽ ⴽⵓ ⵉⴼⵔⴷⵉⵙ ⴳ ⵜⵍⴳⴰⵎⵜ ⵙ ⵡⵓⵟⵟⵓⵏ ⵏ ⵓⴽⵓⴱⴰⵕ ⵏ ⵓⴼⵍⵍⴰ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉ lst = [1,2,3] ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 14 ⵉ lst = [1,4,9] ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 98 ⵉ lst = [1,3,5,7] ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 84 ⵉ lst = [1.4,4.2,0] ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 29 ⵉ lst = [-2.4,1,1] ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵍ 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,taq_Tfng,python,"
def check_if_last_char_is_a_letter(txt):
    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⵉⴷⵜ ⵎⴽ ⵉⴳⴰ ⵡⴰⵏⵙⴰ ⴰⵎⴳⴳⴰⵔⵓ ⵏ ⵓⵖⵉⵍ ⵏ ⵜⵉⴼⵉⵏⴰⵖ ⵢⴰⵏ ⵓⴽⵔⵉⴽ ⴰⴱⴰⵢⵢⵓⵔⴰⵏ ⵓⵔ ⵉⴳⵉ ⴰⴳⵣⵣⵓⵎ ⵏ ⵜⴳⵓⵔⵉ, ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⵜⴰⵏⵏⴰⵢⵜ: ""ⵜⴳⵓⵔⵉ"" ⵜⴳⴰ ⵜⴰⵔⴰⴱⴱⵓⵜ ⵏ ⵡⴰⵏⵙⴰⵢⵏ ⵏⵏⴰ ⵉⴱⴹⴰⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ. ⵉⵎⴷⵢⴰⵜⵏ: check_if_last_char_is_a_letter (((""ⴱⴰⵢ ⵏ ⵜⴱⵔⵣⴰ"") â -> False check_if_last_char_is_a_letter (((""ⴱⴰⵢ ⵏ ⵜⴱⵔⵣⴰ e"") â -> True check_if_last_char_is_a_letter (((""ⴱⴰⵢ ⵏ ⵜⴱⵔⵣⴰ e "") â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,taq_Tfng,python,"
def can_arrange(arr):
    """"""ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⴰⵎⵉⴹⴰⵏ ⴰⵎⵇⵔⴰⵏ ⵏ ⵢⴰⵏ ⵉⴼⵔⴷⵉⵙ ⵓⵔ ⵢⴰⴳⴳⵓⴳⵏ ⵏⵖ ⵓⵔ ⵉⵎⴽⵉⵏ ⵉⴼⵔⴷⵉⵙ ⵏⵏⴰ ⴷ ⵢⵓⵛⴽⴰⵏ ⴷⴰⵜ ⵏⵏⵙ. ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⴽⵔⴰ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵣⵓⵏⴷ ⴰⴷ, ⵙⴽⵔ -1. ⵓⵔ ⴷⴰ ⵉⵜⵜⵉⵍⵉ ⵡⴰⵜⵉⴳⵏ ⵉⵎⵢⴰⵍⵍⴰⵏ ⴳ ⵓⵎⵙⴳⵏⴰⴼ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ. ⵉⵎⴷⵢⴰⵜⵏ: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,taq_Tfng,python,"
def largest_smallest_integers(lst):
    '''ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⴰⴽⴽⴰⵏ ⵜⴰⴱⵍⵓⵜ (ⴰ, ⴱ), ⴳ ⵉⴳⴰ 'ⴰ' ⴰⵎⵇⵇⵔⴰⵏ ⴳ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵔⵉⵏⵉⵏ, ⴷ 'ⴱ' ⴰⵎⵥⵥⵢⴰⵏ ⴳ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵔⵉⵏⵉⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. ⵎⴽ ⵓⵔ ⵉⵍⵍⵉ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵔⵉⵏⵉⵏ ⵏⵖ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵔⵉⵏⵉⵏ, ⵙⵙⴽⵔ-ⴷ ⵉⵎⴹⴰⵏⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⴰⵎⵎ None. ⵉⵎⴷⵢⴰⵜⵏ: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,taq_Tfng,python,"
def compare_one(a, b):
    """"""ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵖⴷ ⵉⵎⴹⴰⵏ ⵉⵎⵎⵓⴷⴷⵓⵏ ⵏⵖⴷ ⵜⵉⴼⵔⵉⵙⵉⵏ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏ ⵉⵎⴹⴰⵏ ⵏ ⵜⵉⴷⵜ, ⴰⵔ ⵉⵙⵙⴽⵛⵎ ⴰⵎⵙⵏⴼⵍⵓⵍ ⴰⵅⴰⵜⴰⵔ ⴳ ⵡⴰⵏⴰⵡ ⵏ ⵉⵎⵙⵏⴼⵍⵓⵍⵏ ⵏⵏⴰ ⵢⵓⵡⵉⵏ. ⵓⵔ ⴷⴰ ⵉⵜⵜⴰⴽⴽⴰ ⴽⵔⴰ ⵎⴽ ⵜⴳⴰ ⵜⵉⵏⴷⵉⵔⵉⵏ ⵜⵉⴳⴷⴰⵣⴰⵍⵉⵏ. ⵜⴰⵏⵏⴰⵜ: ⵎⴽ ⵉⵜⵜⵓⵙⵎⴷⵢ ⵓⵎⴹⴰⵏ ⵏ ⵜⵉⴷⵜ ⵙ ⵜⵉⴼⵔⵉⵙⵜ ⵏ ⵜⵉⴼⵔⵉⵙⵜ, ⵉⵖⵢ ⴰⴷ ⵉⴳ ⵓⵙⴽⴽⵉⵍ ⵏ ⵜⵏⵇⵇⵉⴹⵜ ⵜⴰⵎⵎⵓⴷⴷⵓⵜ . ⵏⵖⴷ , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,taq_Tfng,python,"
def is_equal_to_sum_even(n):
    """"""ⴰⵜⵉⴳ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵣⵎⵎⴰⵔ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ ⵏ ⵓⴹⴼⴰⵕ""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,taq_Tfng,python,"
def special_factorial(n):
    """"""ⴷⴰ ⵉⵜⵜⵓⵙⵏⵎⵍ ⵓⴼⴰⴽⵜⵓⵔⴰⵍ ⴰⴱⵕⴰⵣⵉⵍⵉ ⵙ: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! ⴳ ⵉⵍⵍⴰ n > 0 ⵙ ⵓⵎⴷⵢⴰ: >>> special_factorial ((4) 288 ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⵓⵎⵥ ⴰⵎⵉⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⴽ ⵜⵔⴰ ⴰⴷ ⵜⵔⴰⵔ ⴰⴼⴰⴽⵜⵓⵔⴰⵍ ⴰⵎⴷⴷⴰⴷ ⵏ ⵓⵎⵉⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⴷ. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,taq_Tfng,python,"
def fix_spaces(text):
    """"""_ⴰⵎⴷⵢⴰ-3 ⵜⵉⴼⵉⵏⴰⵖ, ⵙⵏⴼⵍ ⴰⴽⴽⵡ ⵉⵙⴰⵢⵔⴰⵔⵏ ⴳⵉⵙ ⵙ ⵉⵙⴰⵢⵔⴰⵔⵏ ⵏ ⴷⴷⴰⵡ, ⴷ ⵉⵖ ⴷⴰⵔ ⵜⵉⴼⵉⵏⴰⵖ ⵓⴳⴳⴰⵔ ⵏ 2 ⵉⵙⴰⵢⵔⴰⵔⵏ ⵉⵎⵣⴷⴰⵢⵏ, ⵙⵏⴼⵍ ⴰⴽⴽⵡ ⵉⵙⴰⵢⵔⴰⵔⵏ ⵉⵎⵣⴷⴰⵢⵏ ⵙ - fix_spaces (((""ⴰⵎⴷⵢⴰ"") == ""ⴰⵎⴷⵢⴰ"" fix_spaces (((""ⴰⵎⴷⵢⴰ1"") == ""ⴰⵎⴷⵢⴰ1"" fix_spaces (((""ⴰⵎⴷⵢⴰ2"") == ""_ⴰⵎⴷⵢⴰ2"" fix_spaces (((""ⴰⵎⴷⵢⴰ 3"") == ""_ⴰⵎⴷⵢⴰ-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,taq_Tfng,python,"
def file_name_check(file_name):
    """"""ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵜⴰⵡⵉⵍⴰ ⵏⵏⴰ ⵉⵙⵎⴷⵢⴰⵏ ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ, ⴰⵔ ⵉⵙⵙⴽⵛⵎ ""ⵢⴰⵀ"" ⵉⴳ ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⵉⴳⴰ ⵜ ⵢⵓⵙⴰⵏ, ⴰⵔ ⵉⵙⵙⴽⵛⵎ ""ⵓⵅⴰ"" ⴳ ⵡⴰⵏⵙⴰ ⵢⴰⴹⵏ. ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⴰⵔ ⵉⵜⵜⵓⵙⴽⵛⵎ ⵖⴰⵙ ⵉⵖ ⵜⵜⵓⵙⵎⵔⴰⵙⵏ ⴽⵓⵍⵍⵓ ⵜⵎⵙⴰⵔⵉⵏ ⴰⴷ: - ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵉⵍⵉⵏ ⴽⵕⴰⴹ ⵏ ⵡⵓⵟⵟⵓⵏⵏ ('0'-'9') ⴳ ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ. - ⵉⵙⵎ ⵏ ⵓⵖⵎⵉⵙ ⵉⵍⵍⴰ ⴳⵉⵙ ⵢⴰⵏ ⵓⴽⵡⵜⵜⴰⵢ '.' - ⵓⵔ ⵉⵅⵚⵚⴰ ⴰⴷ ⵜⴳ ⵜⵉⵡⵉⵍⴰ ⵜⴰⴷⵙⵍⴰⵏⵜ ⴷⴰⵜ ⵏ ⵓⴽⵡⵜⵜⴰⵢ, ⴷ ⵜⴱⴷⴰ ⵙ ⵓⴽⵡⵜⵜⴰⵢ ⵙⴳ ⵡⴰⵔⵔⴰⵜⵏ ⵏ ⵍⵍⴰⵜⵉⵏ ('a'-'z' ⴷ 'A'-Z'). - ⵉⵅⵚⵚⴰ ⴰⴷ ⵜⴳ ⵜⵉⵡⵉⵍⴰ ⵜⴰⴷⵙⵍⴰⵏⵜ ⴷⴼⴼⵉⵔ ⵏ ⵓⴽⵡⵜⵜⴰⵢ ⵢⴰⵜ ⵙⴳ ⵜⵉⵡⵉⵍⴰⵜⵉⵏ ⴰⴷ: ['txt', 'exe', 'll'] ⵉⵎⴷⵢⴰⵜⵏ: file_name_check""{example.txt.txt"") # => 'ⵢⴰⵀ' file_name_check""{example.dll1}""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,taq_Tfng,python,"


def sum_squares(lst):
    """""""" ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵔⴰⴷ ⵜⵕⵥⵎ ⵜⴰⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵉ ⴽⵓⵍⵍⵓ ⵜⵉⴽⵛⵛⵓⵎⵉⵏ ⴳ ⵜⵍⴳⴰⵎⵜ, ⵔⴰⴷ ⵜⴽⴽⵡⵙ ⵜⴰⵡⵓⵔⵉ ⴳ ⵓⵙⴽⴽⵉⵏ ⵏ ⵜⴽⵛⵓⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵖ ⵉⴳⴰⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⴳⴳⵓⴷ ⵏ 3 ⴷ ⵔⴰⴷ ⵜⴽⵙⵓ ⵜⴽⵛⵓⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵖ ⵉⴳⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⴳⴳⵓⴷ ⵏ 4 ⴷ ⵓⵔ ⵉⴳⵉ ⴰⵎⴳⴳⵓⴷ ⵏ 3. ⵔⴰⴷ ⵓⵔ ⵜⵙⵏⴼⵍ ⵜⴰⵡⵓⵔⵉ ⵜⵉⴽⵛⵓⵎⵉⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙ ⴰⵎⴳⴳⵓⴷ ⵏ 3 ⵏⵖⴷ 4. ⵔⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵡⵓⵔⵉ ⵜⴰⴳⵓⵜ ⵏ ⵜⴽⵛⵓⵎⵉⵏ ⴰⴽⴽⵡ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉ lst = [1,2,3] ⵔⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵏ 6 ⵉ lst = [] ⵔⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵏ 0 ⵉ lst = [-1,-5,2,-1,-5] ⵔⴰⴷ ⵉⴳ ⵓⵙⵓⵖⵏ -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,taq_Tfng,python,"
def words_in_sentence(sentence):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵛⵛⵓⵎⵏ ⵉⵙⵎⴷⵢⴰⵏⵏ ⵏ ⵜⴳⵓⵔⵉ, ⴳ ⵜⴳⵓⵔⵉ ⵍⵍⴰⵏⵜ ⴽⵔⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵉⵜⵜⵓⵢⴼⴼⴹⵏ ⵙ ⵓⵙⴰⵢⵔⴰⵔ, ⴷ ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴽⵛⵛⵓⵎⵜ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏⵜ ⵜⴳⵓⵔⵉⵡⵉⵏ ⵙⴳ ⵜⴳⵓⵔⵉ ⵏ ⵜⵉⵣⵡⵉⵔⵉ, ⵏⵏⴰ ⵉⴳⴰⵏ ⵜⵉⵖⵣⵉ ⵏⵏⵙ ⵉⵎⴹⴰⵏ ⵉⵎⵣⵡⵓⵔⴰ, ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⴳ ⵜⵉⵔⵔⴰ ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ ⴳ ⵜⴽⵛⵛⵓⵎⵜ ⵜⴰⵎⴰⵢⵏⵓⵜ ⴰⵎⵎ ⵜⵉⴽⵛⵛⵓⵎⵜ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ. ⴰⵎⴷⵢⴰ1: ⴰⵙⴽⵛⵎ: ⵜⴳⵓⵔⵉ = ""ⴰⴷ ⵜⴳⴰ ⵜⵉⵔⵎⵉⵜ"" ⴰⵙⴽⵛⵎ: ""ⵉⵙ"" ⴰⵎⴷⵢⴰ2: ⴰⵙⴽⵛⵎ: ⵜⴳⵓⵔⵉ = ""ⴰⴷ ⵏⴽⵛⵎ ⵉ ⵡⴰⵎⴰⵏ"" ⴰⵙⴽⵛⵎ: ""ⴰⴷ ⵏⴽⵛⵎ ⵉ"" ⵜⵉⵍⴳⴰⵡⵉⵏ: * 1 <= len(sentence) <= 100 * ⵜⴳⵓⵔⵉ ⵜⵍⵍⴰ ⵖⴰⵙ ⵙ ⵡⴰⵔⵔⴰⵜⵉⵏ """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,taq_Tfng,python,"
def simplify(x, n):
    """"""ⵜⴰⵡⵓⵔⵉ ⵏⵏⴽ ⵜⴳⴰ ⴰⴷ ⵜⵙⵎⵔⵙ ⵜⴰⵡⵡⵓⵔⵉ ⵏⵏⴰ ⵔⴰⴷ ⵉⵙⴱⴷⵉⴷ ⴰⵙⵏⵓⵎⵎⵍ ⵏ x * n. ⴷⴰ ⵜⵙⴽⵔ ⵜⴰⵡⵡⵓⵔⵉ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⵉ ⵔⴰⴷ ⵉⵙⵎⵓⵜⵜⵓ x * n ⵙ ⵓⵟⵟⵓⵏ ⴰⵎⴷⴷⴰⴷ ⴷ ⵜⵉⴷⵜ ⵎⴽ ⵍⵍⵉ ⵓⵔ ⵉⴳⵉ. ⵙⵡⴰ x ⴷ n, ⴳⴰⵏ ⴰⵙⵎⴷⵢⴰ ⵏ ⵜⵉⵙⴳⵏⵉⵜ ⵏ ⵜⴳⵣⵣⴰⵢⵜ, ⴷ ⵖⵓⵔⵙⵏ ⵜⴰⵍⵖⴰ ⴷ ⵢⵓⵛⴽⴰⵏ, <numerator>/<denominator> ⴳⴰⵏ ⵙⵡⴰ ⴰⵎⴹⴰⵏ ⴷ ⵓⵎⵙⵙⴰⵖ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵜⵣⵎⵔⴷ ⴰⴷ ⵜⵙⵙⵏⵎⴽ ⵎⴰⵙ ⴷ x ⴷ n ⴳⴰⵏ ⵉⵙⴳⵏⵉⵜⵏ ⵉⵎⴷⴷⴰⴷⵏ, ⴷ ⵓⵔ ⵖⵓⵔⵙⵏ ⴰⵎⵢⴰ ⴰⵎⵙⵙⴰⵖ. ⵙⵙⴱⴷⵉⴷ (((""1/5"", ""5/1"") = True (((ⵙⴱⴷⵉⴷ""1/6"", ""2/1"") = False (((""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,taq_Tfng,python,"
def order_by_points(nums):
    """"""ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵓⵟⵟⵓⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵓⵟⵟⵓⵏ. ⴰⵖⵕⴹⵉ: ⵉⵖ ⵉⵍⵍⴰ ⴽⵉⴳⴰⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵎ ⵡⵉⵢⴰⴹ ⵏ ⵡⵓⵟⵟⵓⵏ ⵏⵏⵙⵏ, ⵙⵙⵓⴷⵙ ⵜⵜ ⵙ ⵓⵙⵙⵓⴷⵙ ⵏⵏⵙⵏ ⴳ ⵜⵍⴳⴰⵎⵜ ⵜⴰⵢⵙⴽⴰⵔⵜ. ⵙ ⵓⵎⴷⵢⴰ: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,taq_Tfng,python,"
def specialFilter(nums):
    """"""ⵙⵔⵙⵏ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵉⵜⵜⵓⵎⵥⵏ ⵢⴰⵏ ⵓⵙⵏⵙⵍ ⵏ ⵡⵓⵟⵟⵓⵏ ⴰⵎⵎ ⵓⴽⵛⵛⵓⵎ ⴰⵔ ⵉⵙⵙⴽⵛⵎ ⵓⵟⵟⵓⵏ ⵏ ⵉⴼⵔⴷⵉⵙⵏ ⴳ ⵓⵙⵏⵙⵍ ⵏⵏⴰ ⵢⵓⴳⵔⵏ 10 ⴷ ⵡⴰⵏⵏⴰⵢ ⴰⵎⵣⵡⴰⵔⵓ ⴷ ⵡⴰⵏⵏⴰⵢ ⴰⵎⴳⴳⴰⵔⵓ ⵏ ⵡⵓⵟⵟⵓⵏ ⴳⴰⵏ ⵉⵎⵉⴹ (1, 3, 5, 7, 9). ⵙ ⵓⵎⴷⵢⴰ: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,taq_Tfng,python,"
def get_max_triples(n):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉ ⴽⵓ ⵉⵎⵉⴹ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ n. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵜⵓⵙⴽⴰⵔ ⵢⴰⵜ ⵜⵎⵙⴷⴰⵍⵜ ⵏ ⵉⵎⵉⴹⵏ ⵉⵎⴷⴷⴰⴷⵏ a ⵏ ⵜⵉⵖⵣⵉ n. ⵉ ⴽⵓ i (1 â‰¤ i â‰¤ n), ⴰⵜⵉⴳ ⵏ a[i] = i * i - i + 1. ⴷⴰ ⵜⵜⵓⴽⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⵔⴱⵉⵍⵉⵏ (a[i], a[j], a[k]) ⵏ a ⴳ i < j < k, ⴷ a[i] + a[j] + a[k] ⵉⴳⴰ ⴰⵎⴳⴳⴰⵔⵓ ⵏ 3. ⴰⵎⴷⵢⴰ: Input: n = 5 Output: 1 ⴰⵙⴼⵔⵓ: a = [1, 3, 7, 13, 21] ⵜⵔⴱⵉⵍⵉⵏ ⵜⵉⵙ ⴽⵕⴰⴹⵜ ⵜⵓⵙⴷⵉⴷⵉⵏ ⴳⴰⵏ (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,taq_Tfng,python,"
def bf(planet1, planet2):
    '''ⵍⵍⴰⵏ 8 ⵏ ⵉⵜⵔⴰⵏ ⴳ ⵓⵏⴳⵔⴰⵡ ⵏ ⵜⴰⴼⵓⴽⵜ ⵏⵏⵖ: ⵡⴰⵏⵏⴰ ⵢⵓⴳⵔⵏ ⵉ ⵜⴰⴼⵓⴽⵜ ⵉⴳⴰ ⵎⵉⵔⴽⵓⵔⵉ, ⵡⴰⵏⵏⴰ ⵢⵓⴹⵏ ⵉⴳⴰ ⴼⵉⵏⵓⵙ, ⴷⴼⴼⵉⵔ ⵏ ⵓⵢⴰ ⵉⴳⴰ ⵡⴰⴽⴰⵍ, ⵎⴰⵕⵙ, ⵊⵓⴱⵉⵜⵔ, ⵙⴰⵜⵓⵔⵏ, ⵓⵕⴰⵏⵓⵙ, ⵏⵉⴱⵜⵓⵏ. ⵙⴽⵔ ⵜⴰⵡⵓⵔⵉ ⵏⵏⴰ ⵢⵓⵎⵥⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⵉⵜⵔⴰⵏ ⵙⵉⵏ ⵉⵙⵎⴰⵡⵏ ⵏ ⵉⵜⵔⴰⵏ ⵣⵓⵏⴷ ⵜⵉⵙⵉⴹⴼⵕⵉⵏ ⵉⵜⵔⴰⵏ1 ⴷ ⵉⵜⵔⴰⵏ2. ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴱⴱⵉⵍⵜ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⴰⴽⴽⵡ ⵉⵜⵔⴰⵏ ⵏⵏⴰ ⵉⵍⵍⴰⵏ ⵜⵉⵙⵉⴹⴼⵕⵉⵏ ⵏⵏⵙ ⴳⵔ ⵜⴰⴱⵉⵍⵜ ⵏ ⵉⵜⵔⴰⵏ1 ⴷ ⵜⴰⴱⵉⵍⵜ ⵏ ⵉⵜⵔⴰⵏ2, ⵉⵜⵜⵓⵙⵎⵉⵍⵏ ⵙ ⵜⴰⵎⴰ ⵏ ⵜⴰⴼⵓⴽⵜ. ⵜⴰⵡⵓⵔⵉ ⴰⴷ ⵜⵔⴰⵔ ⵜⴰⴱⴱⵉⵍⵜ ⵜⴰⵅⵅⴰⵔⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ ⵉⵜⵔⴰⵏ1 ⵏⵖⴷ ⵉⵜⵔⴰⵏ2 ⵉⵙⵎⴰⵡⵏ ⵏ ⵉⵜⵔⴰⵏ ⵉⴽⵓⴷⴰⵏ. ⵉⵎⴷⵢⴰⵜⵏ bf""{""}"", ""ⵏⵢⵓⴱⵉⵜⵔ"", ""ⵏⵢⵓⵏ"") ==> (""ⵙⵜⵓⵔⵏ"", ""ⵓⵔⴰⵏⵓⵙ""), bf{""}"", ""ⵎⵉⵔⴽⵓⴷⴰⵏ"") ==>'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,taq_Tfng,python,"
def sorted_list_sum(lst):
    """"""ⵔⵢⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵉⴾⴼ-ⴰⵏ ⴰⵍⴾⴰⴷ ⵏ ⵜⵉⴼⵢⵔⵜ ⵛⵂⵓⵏⴷ ⴱⴰⵔⴰⵎⴰⵜⵢⵔ, ⵜⴰⴾⴼ-ⴰ ⵜⵉⴼⵢⵔⵜ ⵜⵉⵏ ⵓⴰⵔ ⵏ ⵓⵍⴰⵂ ⵉⴷ ⵜⵉⵓⵉⵜ ⵏⴰⵙⵏⴰⵜ, ⵜⵓⵍⴰⵙ ⵜⴰⵔⵜⴰⵉ ⴰⵍⴾⴰⴷ ⵓⴰ ⵉⵋⵔⴰⵓⴰⵏ ⵙ ⴰⵍⴾⴰⴷ ⵉⴾⵏⴰⵏ, ⴰⵍⴾⴰⴷ ⵢⵈⵈⴰⵍ ⴰ ⵂⴰⵔⴾⵓⴾ ⴰⵍⴾⴰⴷ ⵏ ⵜⵉⴼⵢⵔⵜ ⵓⴰⵔ ⵢⵈⵈⵢⵍ ⴰⴾⴰⵔⵓⵙ ⵏ ⴾⵓⴷ ⵜⵓⵍⴰⵙ ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵢⵂⵢ ⴷⵓⴱⵍⵉⵛⴰⵜⵉⵓⵏ. ⴰⵍⴾⴰⴷ ⵏ ⴰⵍⴾⴰⴷ ⵉⵋⵋⴰ ⴰⴾⴾⵓⵣⴰⵏ ⵙ ⵜⵉⵓⵉⵜ ⵏ ⴰⵓⴰⴷⴰⵎ ⴼⵓⴾ ⵜⵓⵍⴰⵙ ⵉⵋⵋⴰ ⴰⵍⴾⴰⴷ ⵙ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰⵏ. ⴰⵍⵆⵉⴷⵎⴰⵜ ⵉⵋⵋⴰ ⴰⵍⴾⴰⴷ ⵏ ⵜⵉⴼⵢⵔⵜ ⵙ ⴰⵍⴾⴰⴷ ⵉⴾⵏⴰⵏ. ⴰⴷⴷⵓⴱⴰⵜ ⴰⴷ ⵜⴰⴾⴼ-ⴰ ⴰⵍⴾⴰⴷ ⵉⵍⴰⵏ ⵜⵉⵓⵉⵜ ⵏⴰⵙⵏⴰⵜ ⵜⵉⵓⵉⵜ ⵙ ⵜⵉⵓⵉⵜ ⵏⵢⵜ ⴰⵍⵎⵉⵜⴰⵍ: ⴰⵍⵎⵉⵜⴰⵍ: assert_list_sort[""aa"", ""a"", ""aaa""]) => assert_list_sort[ab"", ""a"", ""aaa"", ""cd"" => ""cd"")""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,taq_Tfng,python,"
def x_or_y(n, x, y):
    """"""ⴰⵖⴰⵡⴰⵙ ⴰⵎⵙⴷⵓⵙ ⵏⵏⴰ ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ ⵡⴰⵜⵉⴳ ⵏ x ⵎⴽ ⵉⴳⴰ n ⴰⵎⴹⴰⵏ ⴰⵎⵣⵡⴰⵔⵓ, ⴷ ⵉⵇⵇⴰⵏ ⴰⴷ ⵢⴰⴽⴽⴰ ⵡⴰⵜⵉⴳ ⵏ y ⵎⴽ ⵓⵔ ⵉⴳⵉ ⵡⴰⵜⵉⴳ ⴰⴷ ⴰⵎⵣⵡⴰⵔⵓ. ⵉⵎⴷⵢⴰⵜⵏ: ⵉ x_or_y{7, 34, 12) == 34 ⵉ x_or_y{15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,taq_Tfng,python,"
def double_the_difference(lst):
    '''ⴷⴰ ⵉⵜⵜⵓⴼⴽⴰ ⵢⴰⵏ ⵓⵙⵍⴳⵏ ⵏ ⵡⵓⵟⵟⵓⵏ, ⴷⴰ ⵉⵜⵜⴰⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏ ⵜⴽⵓⴷⴰⵕⵉⵏ ⵏ ⵡⵓⵟⵟⵓⵏ ⴳ ⵓⵙⵍⴳⵏ ⵏⵏⴰ ⵓⵔ ⵉⵎⵙⴰⵙⴰⵏ. ⴷⴰ ⵉⵜⵜⴰⴽⴰ ⵡⵓⵟⵟⵓⵏ ⵏⵏⴰ ⵓⵔ ⵉⴳⵉⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵏⵖⴷ ⵡⵉⵏ ⵓⵎⴳⵉⵏ. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 ⵎⴽ ⵉⴳⴰ ⵓⵙⵍⴳⵏ ⵏ ⵓⴽⵛⵛⵓⵎ ⴰⵣⴳⵏ, ⴷⴰ ⵉⵜⵜⴰⴽⴰ 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,taq_Tfng,python,"
def compare(game,guess):
    """"""ⵆⵢⵍ ⴰⵙ ⵏⴰⵙⵉⵎⴰⵏ ⴼⵓⴾ ⵏⴰⵏⴰⵂⴰⵋ ⵓⴰ ⴰⵍⵓⴰⵈ ⵓⴰ ⵉⴷ ⴰⴷⴷⵓⴱⴰⵜ ⴰⵛⵂⴰⵔⵢⵗⴰ ⵏ ⵂⴰⵔⴰⵜ ⵉⵋⵋⴰⵏ ⴰⵣⵣⴰⵎⴰⵏ ⴰⵋⵋⵓⵜⵏⵢⵏ ⴰⴷ ⵉⵋⵔⴰⵓ ⵜⵓⵎⴰⵙⵜ. ⴰⵍⵆⵉⴷⵎⴰⵜ ⵏⵢⵜ ⵜⴰⵈⵈⴰⵍ ⴰⴾⴰⵉⴰⴷ ⴰⵙ ⴰⵓⴰⴷⵉⵎ ⵉⵋⵋⴰ ⴰⵛⵂⴰⵔⵢⵗⴰ ⵏ ⴰⵛⵂⴰⵔⵢⵗⴰ ⵏ ⵉⴾⴰⵉⴰⴷⴰⵏ ⴰⵋⵋⵓⵜⵏⵢⵏ. ⴰⵂⴰⵏⴰⵜ ⴰⵙⵉⴾⵏⴰ ⵏ ⴰⵙ ⴰⵓⴰⴷⵉⵎ ⵉⵋⵋⴰ ⴰⵛⵂⴰⵔⵢⵗⴰ ⵏ ⵉⴾⴰⵉⴰⴷⴰⵏ ⴰⵋⵋⵓⵜⵏⵢⵏ. ⴰⵂⴰⵏⴰⵜ ⴰⵙ ⵙⴰⵏⴰⵜⴰⵜⴰⵜ ⵜⴰⵗⴰⵛⵉⵍⵢⵏ ⵏ ⵉⴾⴰⵉⴰⴷⴰⵏ ⴷ ⵉⴾⴰⵉⴰⴷⴰⵏ ⵏ ⵜⵉⵛⵉⵋⵔⵉⵜ ⵏ ⵉⴾⴰⵉⴰⴷ ⴼⵓⴾ ⵉⴾⵉⴰⴷⴰⵏ. ⴰⵂⴰⵏⴰⵜ ⴰⵙ ⵉⵋⵋⴰ ⴰⵛⵂⴰⵔⵢⵗⴰ ⵓⵢⵏ ⴰⵈⵈⴰⵍ 0, ⴷ ⴰ ⴼⴰⵍ ⵓⴰⵔ ⵢⵈⵈⵢ, ⴰⵛⵂⴰⵔⵢⵗⴰ ⵜⴰⵈⵈⴰⵍ ⴰⵏⵎⵉⵣⵍⴰⵉ ⵓⵍⴰⵗⴰⵏ ⵋⵉⵔ ⵉⴾⴰⵉⴰⴷ ⴷ ⵉⴾⴰⵉⴰⴷ""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,taq_Tfng,python,"
def Strongest_Extension(class_name, extensions):
    """"""ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⵢⵉⵙⵎ ⵏ ⵜⵔⵎⵉⵜ (ⵜⵔⵎⵉⵜ) ⴷ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵙⵖⵣⵏ. ⵉⵙⵖⵣⵏⵏ ⵔⴰⴷ ⵜⵜⵓⵙⵎⵔⴰⵙⵏ ⵉ ⵓⵙⵙⴽⵛⵎ ⵏ ⵜⵔⵎⵉⵜⵉⵏ ⵢⴰⴹⵏⵉⵏ ⵙ ⵜⵔⵎⵉⵜ. ⵜⴰⴷⵓⵙⵉ ⵏ ⵓⵙⵖⵣⵏ ⵜⴳⴰ ⵣⵓⵏⴷ ⴰⵢⴰⴷ: ⴰⴷ ⵜⴳ CAP ⵓⵟⵟⵓⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵇⵔⴰⵏⵏ ⴳ ⵢⵉⵙⵎ ⵏ ⵓⵙⵖⵣⵏ, ⴷ ⴰⴷ ⵜⴳ SM ⵓⵟⵟⵓⵏ ⵏ ⵡⴰⵔⵔⴰⵜⵏ ⵉⵎⵥⵥⵉⵏ ⴳ ⵢⵉⵙⵎ ⵏ ⵓⵙⵖⵣⵏ, ⵜⴰⴷⵓⵙⵉ ⵜⵜⵓⴼⴽⴰ ⵙ ⵜⵔⵎⵉⵜ CAP - SM. ⵔⴰⴷ ⵜⵜⵓⴼⴽⴰ ⴰⵙⵖⵣⵏ ⵉⴷⵓⵙⵏ ⴷ ⵓⵙⵡⴰⵍ ⵏ ⵜⵔⵎⵉⵜ ⴳ ⵜⵍⵖⴰ ⴰⴷ: ClassName.StrongestExtensionName. ⵉⵖ ⴳⴰⵏ ⵙⵉⵏ ⵉⵙⵖⵣⵏⵏ ⵏ ⵜⵔⵎⵉⵜ ⵏⵖ ⵓⴳⴳⴰⵔ ⵏ ⵜⴷⵓⵙⵉ ⵢⴰⴽⴽⴰⵏ, ⵔⴰⴷ ⵜⵜⵓⵙⵜⴰⵢⵏ ⵡⴰⵏⵏⴰ ⵢⵓⵛⴽⴰⵏ ⴳ ⵜⵍⴳⴰⵎⵜ. ⵙ ⵓⵎⴷⵢⴰ, ⵉⵖ ⵜⵜⵓⴼⴽⴰ ""ⵙⵍⴰⵢⵙ"" ⴰⵎⵎⵉⵍⵙ ⴷ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵙⵖⵣⵏ: ['SEviviCliNGliCliCliCliCes', 'Cheese', 'Stufed'FFF'] ⴹⴼ ⴰⴷ ⵜⵔⵎⴽⴰⴷ 'SliCliCliCliCliSliSliCliCliSliSliSliCliSliCliSliSliSliSliNG.SE' ⵉⴷⴷⵓⵙⵉ 'SliCliSliCliSliSliCliSliSliSliCliSliSliSliSliCliSliSliCliCliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSli""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,taq_Tfng,python,"
def cycpattern_check(a , b):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ 2 ⵏ ⵜⴳⵓⵔⵉⵡⵉⵏ. ⵉⵇⵇⴰⵏ ⴷ ⴰⴷ ⵜⵔⴰⵔ ⵜⵉⴷⵜ ⵎⴽ ⵜⴳⴰ ⵜⴳⵓⵔⵉ ⵜⵉⵙⵙ ⵙⵏⴰⵜ ⵏⵖ ⴽⵔⴰ ⵏ ⵜⵙⵓⵜⵍⵜ ⵏⵏⵙ ⵜⴰⴳⵓⵔⵉ ⵜⴰⴷⵙⵍⴰⵏⵜ ⴳ ⵜⴳⵓⵔⵉ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ cycpattern_check{""abcd"",""abd"") => False cycpattern_check{""hello"",""ell"") => True cycpattern_check{""whassup"",""psus"") => False cycpattern_check{""abab"",""baa"") => True cycpattern_check{""efef"",""eeff"") => False cycpattern_check{""hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,taq_Tfng,python,"
def even_odd_count(num):
    """"""ⵉⴳ ⵏⵙⴽⵔ ⴰⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ, ⵏⵙⵙⴽⵛⵎ ⵜⴰⴱⵍⵍⵜ ⵏⵏⴰ ⴳ ⵍⵍⴰⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵎⵓⴹⵏ ⴷ ⵡⵉⵏ ⵡⵉⵏ ⵡⴰⵔ ⴰⵎⴹⴰⵏ ⵙ ⵓⵎⵣⴷⴰⵢ. ⴰⵎⴷⵢⴰ: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,taq_Tfng,python,"
def int_to_mini_roman(number):
    """"""ⵉⴳ ⴷⴰⵔⴽ ⵓⵎⴹⴰⵏ ⴰⵎⴷⴷⴰⴷ ⴰⵎⵏⵉⴳ, ⴷⴷⵓ ⵏ ⵓⴽⵙⴰⵢ ⵏ ⵡⵓⵟⵟⵓⵏ ⵉⵕⵓⵎⵉⵢⵏ ⴰⵎⵎ ⵜⴰⴳⵔⵓⵎⵎⴰ, ⴷ ⵙⵙⵓⴼⵖ ⵙ ⵡⵓⵟⵟⵓⵏ ⵉⵎⵥⵥⵢⴰⵏⵏ. ⵜⵉⵎⵥⴰⴳⵉⵏ: 1 <= num <= 1000 ⵉⵎⴷⵢⴰⵜⵏ: >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,taq_Tfng,python,"
def right_angle_triangle(a, b, c):
    '''ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵜⵉⵖⵣⵉ ⵏ ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴳⵎⵉⵍⵉⵏ. ⴷⴰ ⵜⵜⵓⴽⴽⴰ ⵜⵉⴷⵜ ⵎⴽ ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⴽⵕⴰⴹ ⵏ ⵜⴼⵓⵍⵉⵏ ⵏ ⴽⵕⴰⴹⵜ ⵜⵉⴳⵎⵉⵍⵉⵏ ⵜⵉⴷⵙⵜ, ⵜⵉⴱⵔⵙⴳⴳⵡⴰⴷⵜ ⵎⴽ ⵓⵔ ⵉⴳⵉ. ⴽⵕⴰⴹⵜ ⵜⵉⴳⵎⵉⵍⵉⵏ ⵜⵉⴷⵙⵜ ⵜⴳⴰ ⴽⵕⴰⴹⵜ ⵜⵉⴳⵎⵉⵍⵉⵏ ⴳ ⵉⵍⵍⴰ ⵢⴰⵏ ⵓⴽⵡⵜⴰⵢ ⵏ 90 ⵏ ⵜⵙⴽⵡⵜ. ⴰⵎⴷⵢⴰ: right_angle_triangle ((3, 4, 5) == true right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,taq_Tfng,python,"
def find_max(words):
    """"""ⴰⴾⵜⴰⴱ ⵏ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰ ⵉⴾⴼ-ⴰⵏ ⴰⵍⴾⴰⴷ ⵏ ⵜⵉⴼⵢⵔⵜ. ⴰⵍⴾⴰⴷ ⵉⵍⴰ ⵉⵙⵎⴰⵓⴰⵏ ⵉⵣⵍⴰⵉⵏⵢⵏ. ⴰⴾⴼ-ⴰⵏ ⵉⵙⵉⵎ ⵙ ⵉⴷⴷⵉⴾⵓⴷ ⵓⴰ ⵎⴰⵈⵈⵓⵔⴰⵏ ⵏ ⵉⴾⴰⵔⵓⵙⴰⵏ ⵓⵉⵏ ⴰⵍⴰⵙⴰⵍ. ⴰ ⴼⴰⵍ ⵜⵉⴼⵢⵔⵜ ⴰⵋⵋⵓⵜⵏⵢⵏ ⵉⵍⴰⵏ ⵜⵉ ⵉⴷⴷⵉⴾⵓⴷ ⵓⴰ ⵎⴰⵈⵈⵓⵔⴰⵏ ⵏ ⵉⴾⴰⵔⵓⵙⴰⵏ ⵓⵉⵏ ⴰⵍⴰⵙⴰⵍ, ⴰⴾⴼ-ⴰⵏ ⵓⴰ ⵢⵣⵣⴰⵔⴰⵏ ⴷⴰⵗ ⴰⵍⵆⵉⴷⵎⴰⵜ ⵜⴰⵏ ⵜⵉⴼⵢⵔⵜ.ⴰⴼⵉⵏ_ⵎⴰⵆ ({""ⵉⵙⵉⵎ"", ""ⵉ"", ""ⵜⴼⵢⵔⵜ""]) == ""ⵜⴼⵢⵔⵜ"" ⴼⵉⵏ_ⵎⴰⵆ ({""ⵉⵙⵉⵎ"", ""ⵢⵏⴰⵎ"", ""ⴶⵢⵎ""]) == ""ⵢⵏⴰⵎ"" ⴼⵉⵏ_ⵎⴰⵆ ({""ⴰⴰⴰⴰⴰ"", ""ⴱⴱⴱ"" , ""ⵛⵛ""]) == """"ⴰⴰⴰⴰⴰⴰⴰⴰ""""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,taq_Tfng,python,"
def eat(number, need, remaining):
    """"""ⵏⴻⵛⵛⴰⵍ ⵏⴻⵜ ⴰⵛⵛⴻⵛⴰⵍ, ⴷⴻⵗ ⴰⵛⵛⴻⵛⴰⵍ ⵏⴻⵜ ⴰⵋⴻⵏ ⵏ ⵉⵛⴰⵔⴻⵜⴰⵏ, ⵎⴰⵛⴰⵏ ⴷⴰⵔⵂⴰ ⴰⴷ ⴰⵛⴻⵛ ⴰⵋⴻⵏ ⵏ ⵉⵛⴰⵔⴻⵜⴰⵏ ⵉ ⴰⴷ ⴰⴾⴻⵜⴻⵏ ⴰⵍⵛⵉⵎⴰⵜⴻⵏ ⵏ ⴰⵛⴰⵍ. ⴰⴷ ⵉⴾⴼⴻⵜ ⴰⵔⵉ ⵏ [ ⴰⵋⴻⵏ ⵏ ⵉⵛⴰⵔⴻⵜⴰⵏ ⵓⵉ ⴰⵛⵛⴻⵛⴰⵍⵏⴻⵏ ⴷⴰⵔⴰⵜ ⴰⵍⵛⵉⵎⴰⵜⴻⵏ ⵏⴻⵜ, ⴰⵋⴻⵏ ⵏ ⵉⵛⴰⵔⴻⵜⴰⵏ ⵓⵉ ⴰⵣⵣⴰⵔⴰⵏ ⴷⴰⵔⴰⵜ ⴰⵍⵛⵉⵎⴰⵜⴻⵏ ⵏⴻⵜ ] ⴰ ⴼⴰⵍ ⵓⴰⵔ ⵉⵍⵍⴻⵏ ⵉⵛⴰⵔⴻⵜⴰⵏ ⵓⵉ ⵉⵛⴰⵔⴻⵏ, ⴰⴷ ⴰⵛⴻⵛ ⴰⵋⴻⵏ ⵏ ⵉⵛⴰⵔⴻⵜⴰⵏ ⵓⵉ ⵉⵛⴰⵔⴻⵏ, ⵎⴰⵛⴰⵏ ⴰⴷ ⴰⵛⴻⵛ ⴰⵍⵛⵉⵎⴰⵜ. ⴰⵍⵎⵉⵜⴰⵍ: * ⴰⵛⵛⴻⵛⴰⵍ ⵏ (ⵙⴻ) 5, 6, 10) -> [11, 4] * ⴰⵛⴻⵛⴻⵛⴰⵍ ⵏ (ⵙⴻ) 4, 8, 9) -> [12, 1] * ⴰⵛⴻⵛⴻⵛⴻⵛⴰⵍ ⵏ (ⵙ), 10 -> [11, 0] * ⴰⵛⴻⵛⴻⵛⴻⵛⴻⵛⴰⵍ ⵏ (ⵙ) 2, 11, 5) -> [7, 0] ⵉⵎⵓⵜⴰⵔⴰⵏ: @number: ⴰⵎⵓⴾ ⵏ ⵉⵛⴰⵔⴻⵜⴰⵏ ⵏ ⵉⵛⴰⵔⴻⵜⴰⵏ ⵓⵉⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵜⴰⵏ. @need: ⴰⵛⵛⵛⵛⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵍ ⵏⴻⵛⴰⵔⴻⵜⴰⵏ: ⴰⵎⵓ: ⴰⵎⵓⴾⵍ ⵏ ⵉⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵜⴰⵏ ⵓⵉⵛⴰⵔⴻⵛⴰⵔⴻⵜⴰⵏ ⵓⵉⵛⴰⵔⴻⵜⴰⵏ ⵉⵛⴰⵔⴻⵛⴰⵔⴻⵜⴰⵏ. @need: ⴰⵎⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⴻⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛⴰⵔⴻⵛ""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,taq_Tfng,python,"
def do_algebra(operator, operand):
    """"""ⴷⴰ ⵜⵜⵓⵙⴽⴰⵔⵏ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵏ ⵓⵎⵙⴽⴰⵔ ⴷ ⵓⵎⵙⴽⴰⵔ. ⵜⵍⴳⴰⵎⵜ ⵜⴰⵎⵣⵡⴰⵔⵓⵜ ⵖⵓⵔⵙ ⵜⵉⴳⴳⵉⵜⵉⵏ ⵏ ⵍⵊⵉⴱⵔ ⵜⵉⴷⵙⵍⴰⵏⵉⵏ, ⴷ ⵜⵍⴳⴰⵎⵜ ⵜⵉⵙⵙ ⵙⵏⴰⵜ ⵜⴳⴰ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ. ⵙⵙⵎⵔⴰⵙⵏⵜ ⵙⵏⴰⵜ ⵜⵍⴳⴰⵎⵉⵏ ⵉⵜⵜⵓⵙⴽⴰⵔⵏ ⵉ ⵓⵙⴽⴰⵔ ⵏ ⵜⴳⵓⵔⵉ ⵏ ⵍⵊⵉⴱⵔ ⴷ ⵓⵙⵡⴰⵍⴰ ⵏ ⵓⵙⵜⵉⴳ ⵏ ⵜⴳⵓⵔⵉ ⴰⴷ. ⵜⵉⴳⴳⵉⵜⵉⵏ ⵏ ⵍⵊⵉⴱⵔ ⵜⵉⴷⵙⵍⴰⵏⵉⵏ: ⴰⵙⵎⵓⵏ (+) ⴰⵙⵏⵣⴳⵉ (-)) ⴰⵙⴼⵙⵔ (*) ⵜⴰⵣⵓⵏⵉ ⵏ ⵜⴷⵓⵍⵉ (//) ⴰⵙⴼⵙⵔ (**) ⴰⵎⴷⵢⴰ: ⵓⵎⵙⴽⴰⵔ['+', '*', '-'] ⴰⵙⵔⵔⴰⵙ = [2, 3, 4, 5] ⵜⵢⴰⴼⵓⵜ = 2 + 3 * 4 - 5 => ⵜⵢⴰⴼⵓⵜ = 9 ⵜⴰⵏⵏⴰⵢⵜ: ⵜⵉⵖⵣⵉ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴽⴰⵔ ⵉⵎⵣⴷⴰⴷⵏ ⴷ ⵜⵉⵖⵣⵉ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏⴳⵉⵏ. ⵉⵎⵙⴽⴰⵔ ⵖⵓⵔ ⵖⵓⵔⵙ ⵢⴰⵏ ⵓⵎⵙⴽⴰⵔ, ⴷ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴽⴰⵔ ⵖⵓⵔ ⵙⵏⴰⵜ ⵏ ⵜⵍⴳⴰⵎⵜ ⵏ ⵉⵎⵙⴽⴰⵔ.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,taq_Tfng,python,"
def solve(s):
    """"""ⴷⴰ ⵜⵜⵓⴼⴽⴰ ⵉⴽⵛⵛⵓⵎⵏ s. ⵉⵖ ⵉⴳⴰ s[i] ⴰⵙⴽⴽⵉⵍ, ⵙⵙⵓⵜⵔ ⵜⴰⵖⴰⵔⴰⵙⵜ ⵏⵏⵙ ⵙⴳ ⴷⴷⴰⵡ ⴰⵔ ⴰⴼⵍⵍⴰ ⵏⵖⴷ ⵙ ⵓⴱⵔⴰⵔⵓⵣ, ⵎⴽ ⵓⵔ ⵉⴳⵉ ⵀⴰⵜ ⵃⴹⵓ ⴰⵎⴽ ⵉⵍⵍⴰ. ⵉⵖ ⵓⵔ ⵉⵍⵍⵉ ⴳ ⵓⴽⵛⵛⵓⵎ ⴽⵔⴰ ⵏ ⵉⵙⴽⴽⵉⵍⵏ, ⵙⵙⵓⵜⵔ ⵉⴽⵛⵛⵓⵎⵏ. ⵇⴰⴷ ⵜⵔⴰⵔ ⵜⴰⵡⵓⵔⵉ ⵜⴰⴽⵛⵛⵓⵎⵜ ⵉⵜⵜⵓⵢⴰⴼⴰ. ⵉⵎⴷⵢⴰⵜⵏ solve{""1234"") = ""4321""{""ab"") = ""AB""{""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,taq_Tfng,python,"
def string_to_md5(text):
    """"""ⵉⴳ ⴷⴰⵔⴽ ⵜⴰⵡⵉⵍⴰ 'text', ⵙⵓⵍ ⵜⵔⴰⵔ ⵜⴰⵡⵉⵍⴰ ⵏ ⵓⵙⵙⵉⴼⵙⵉ ⵏ md5 ⵏⵏⵙ. ⵉⴳ 'text' ⵜⴳⴰ ⵜⴰⵡⵉⵍⴰ ⵜⴰⵅⵅⴰⵔⵜ, ⵙⵓⵍ ⵜⵔⴰⵔ None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,taq_Tfng,python,"
def generate_integers(a, b):
    """"""ⵙ ⵜⵉⴽⴽⵉ ⵏ ⵙⵉⵏ ⵉⵎⴹⴰⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⴷⴷⴰⴷⵏ ⵉⵎⵏⵖⴰⵏⵏ a ⴷ b, ⵙⵙⴽⵛⵎ ⵉⵎⴹⴰⵏ ⵉⵎⵎⵔⵡⵉⵏ ⴳⵔ a ⴷ b, ⵙ ⵓⵙⵙⵓⴷⵙ ⴰⵎⵇⵔⴰⵏ. ⵙ ⵓⵎⴷⵢⴰ: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
