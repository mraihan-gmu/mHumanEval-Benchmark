[{"task_id":"HumanEval_0","nl":"oci_Latn","pl":"pl","prompt":"# lo tèrme donat.# Verifiquetz se dins un array de nombres donat, i a dos nombres mai pròches l'un de l'autre que # >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n# \"\"\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# 1\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n","canonical_solution":"sub has_close_elements {\n    my($numbers, $threshold) = @_;\n    \n    for my $i (0 .. @$numbers - 2) {\n        for my $j ($i + 1 .. @$numbers - 1) {\n            if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n        }\n    }\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_1","nl":"oci_Latn","pl":"pl","prompt":"# Ignorar los espacis dins la cadena d'entrada.# Los grops separats son equilibrats (cada braç dobèrt es plan tancat) e pas imbricats los uns dins los autres.# Separa aqueles grop en cadenas separadas e torna l'arrondiment d'aqueles.# L'intrada d'aquesta foncion es una cadena contenent de grops multiples de parentèsis imbricadas.# >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\nsub separate_paren_groups {\n    my($paren_string) = @_;\n","canonical_solution":"sub separate_paren_groups {\n    my ($paren_string) = @_;\n    $paren_string =~ s\/\\s+\/\/g;  # Remove all spaces\n    my @groups;\n    my $balance = 0;\n    my $current_group = \"\";\n    \n    foreach my $char (split \/\/, $paren_string) {\n        if ($char eq '(') {\n            $balance++;\n        }\n        if ($char eq ')') {\n            $balance--;\n        }\n        $current_group .= $char;\n        if ($balance == 0 && $current_group ne \"\") {\n            push @groups, $current_group;\n            $current_group = \"\";\n        }\n    }\n    \n    return \\@groups;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&separate_paren_groups;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[\"(()(())((())))\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_2","nl":"oci_Latn","pl":"pl","prompt":"# Torna la partida decimala del nombre.# (la partida rèsta sempre mai pichona que 1).# e partida entièra (mai grand entièr mai pichon que lo nombre donat) e decimals # Donat un nombre de ponch flotant positiu, se pòt descompausar en # >>> truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n","canonical_solution":"sub truncate_number {\n    my($number) = @_;\n    my $integer_part = int($number);\n    my $decimal_part = $number - $integer_part;\n    return $decimal_part;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_3","nl":"oci_Latn","pl":"pl","prompt":"# en aquel punt la foncion deu tornar 1. En cas contrari deu tornar \"\".# Vos cal detectar se a un moment lo saldo del compte cai en dejós de zèro, e # Vos es donat una seria d'operacions de depaus e de retiradas sus un compte bancari que comença per # >>> below_zero([1, 2, 3])\n# \"\"\n# >>> below_zero([1, 2, -4, 5])\n# 1\nsub below_zero {\n    my($operations) = @_;\n","canonical_solution":"sub below_zero {\n    my ($operations) = @_;\n    my $balance = 0;\n    \n    for my $operation (@$operations) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return 1;\n        }\n    }\n    \n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_4","nl":"oci_Latn","pl":"pl","prompt":"# MAD = mejana. x - x_mejan.# element e un punt central (mejana dins aqueste cas): # La desviacion absoluda mejana es la diferéncia absoluda mejana entre cada # A l'entorn de la mejana d'aqueste ensemble de donadas.# Per un array donat de nombres d'intrada, calcular la desviacion absoluda mejana.# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n","canonical_solution":"sub mean_absolute_deviation {\n    my ($numbers) = @_;\n    my $n = scalar @$numbers;\n    return 0 if $n == 0;\n\n    # Calculate mean\n    my $sum = 0;\n    $sum += $_ for @$numbers;\n    my $mean = $sum \/ $n;\n\n    # Calculate mean absolute deviation\n    my $total_deviation = 0;\n    $total_deviation += abs($_ - $mean) for @$numbers;\n    return $total_deviation \/ $n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_5","nl":"oci_Latn","pl":"pl","prompt":"# Introdurre un numèro \"delimitator\" entre cada dos elements consecutius del matritz d'entrada ∀numèros\" # >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n","canonical_solution":"my @result;\n    for (my $i = 0; $i < @$numbers; $i++) {\n        push @result, $numbers->[$i];\n        push @result, $delimeter if $i < @$numbers - 1;\n    }\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersperse;\n        if(eq_deeply($candidate->([], 7),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_6","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple (() (()) a dos nivèls de nidificacion al maximum alara que ((())) n'a tres. # Per cada grop, produire lo nivèl mai prigond de l'incrust de parentèsis.# L'intrada d'aquesta foncion es una cadena representada per de grops multiples per de parentèsis imbricadas separadas per d'espacis.# >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\nsub parse_nested_parens {\n    my($paren_string) = @_;\n","canonical_solution":"sub parse_nested_parens {\n    my($paren_string) = @_;\n    my @groups = split \/ \/, $paren_string;\n    my @depths;\n\n    foreach my $group (@groups) {\n        my $max_depth = 0;\n        my $current_depth = 0;\n        foreach my $char (split \/\/, $group) {\n            if ($char eq '(') {\n                $current_depth++;\n                if ($current_depth > $max_depth) {\n                    $max_depth = $current_depth;\n                }\n            } elsif ($char eq ')') {\n                $current_depth--;\n            }\n        }\n        push @depths, $max_depth;\n    }\n    \n    return \\@depths;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_7","nl":"oci_Latn","pl":"pl","prompt":"# Filtrar un array d'intrada de cadenas solament per las que contenon una soscadena donada# >>> filter_by_substring([], \"a\")\n# []\n# >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\nsub filter_by_substring {\n    my($strings, $substring) = @_;\n","canonical_solution":"sub filter_by_substring {\n    my ($strings, $substring) = @_;\n    my @filtered = grep { index($_, $substring) != -1 } @$strings;\n    return \\@filtered;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_substring;\n        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_8","nl":"oci_Latn","pl":"pl","prompt":"# La soma buida deu èsser egala a 0 e lo produch buid deu èsser egala a 1.# Per un array donat de entièrs, torna un array consistissent d'una soma e un produch de totes los entièrs dins un array.# >>> sum_product([])\n# [0, 1]\n# >>> sum_product([1, 2, 3, 4])\n# [10, 24]\nsub sum_product {\n    my($numbers) = @_;\n","canonical_solution":"sub sum_product {\n    my ($numbers) = @_;\n    my $sum = 0;\n    my $product = 1;\n    \n    foreach my $num (@$numbers) {\n        $sum += $num;\n        $product *= $num;\n    }\n    \n    return [$sum, $product];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n        if(eq_deeply($candidate->([]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 0]),[100, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_9","nl":"oci_Latn","pl":"pl","prompt":"# dins la sequéncia.# A partir d'un array de nombres entièrs, generar un array d'elements maximals trobats fins a un moment donat.# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\nsub rolling_max {\n    my($numbers) = @_;\n","canonical_solution":"sub rolling_max {\n    my ($numbers) = @_;\n    my @result;\n    my $max = $numbers->[0];\n    \n    for my $num (@$numbers) {\n        $max = $num if $num > $max;\n        push @result, $max;\n    }\n    \n    return \\@result;\n}\n\n# Example usage\nmy $result = rolling_max([1, 2, 3, 2, 3, 4, 2]);\nprint \"@$result\\n\";  # Outputs: 1 2 3 3 3 4 4","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_10","nl":"oci_Latn","pl":"pl","prompt":"# - Apondre a la fin de la cadena reversa d'un prefixe de cadena que ven abans lo sufixe palindromic.# - Trobar lo postfix mai long de la cadena fornida qu'es un palindròma. # L'idèa de l'algoritme es simpla:# Trobar lo palindròma mai cort que comença amb una cadena donada.# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome {\n    my($string) = @_;\n","canonical_solution":"sub make_palindrome {\n    my($string) = @_;\n\n    # Helper function to check if a substring is a palindrome\n    sub is_palindrome {\n        my ($sub) = @_;\n        return $sub eq reverse $sub;\n    }\n\n    # If the whole string is a palindrome, return it\n    if (is_palindrome($string)) {\n        return $string;\n    }\n\n    # Check for the longest palindromic suffix\n    my $length = length($string);\n    for (my $i = $length; $i >= 0; $i--) {\n        my $suffix = substr($string, $i);\n        if (is_palindrome($suffix)) {\n            my $prefix = substr($string, 0, $i);\n            return $string . reverse($prefix);\n        }\n    }\n\n    # If no palindromic suffix is found, append the reverse of entire string minus the first character\n    return $string . reverse(substr($string, 1));\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_11","nl":"oci_Latn","pl":"pl","prompt":"# Permet de realizar un XOR binari sus aquelas intradas e de tornar lo resultat tanben coma una cadena.# Las entradas son doas cadenas a e b que consistisson solament d'1 e 0.# >>> string_xor(\"010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n","canonical_solution":"my @a_bits = split \/\/, $a;\n    my @b_bits = split \/\/, $b;\n    my $result = '';\n\n    for my $i (0 .. $#a_bits) {\n        $result .= $a_bits[$i] ^ $b_bits[$i];\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"1\"),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_12","nl":"oci_Latn","pl":"pl","prompt":"# Torna undef se l'arrèst d'entrada es void.# Retornarà lo primièr en cas de multiplas.# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n    my($strings) = @_;\n","canonical_solution":"sub longest {\n    my ($strings) = @_;\n    return undef if !@$strings;\n\n    my $longest = $strings->[0];\n    foreach my $string (@$strings) {\n        if (length($string) > length($longest)) {\n            $longest = $string;\n        }\n    }\n    return $longest;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_13","nl":"oci_Latn","pl":"pl","prompt":"# Retornèt lo mai grand comun divisor de dos entièrs a e b # >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n","canonical_solution":"sub greatest_common_divisor {\n    my ($a, $b) = @_;\n    while ($b != 0) {\n        my $t = $b;\n        $b = $a % $b;\n        $a = $t;\n    }\n    return $a;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&greatest_common_divisor;\n        if(eq_deeply($candidate->(3, 7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 15),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49, 14),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(144, 60),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_14","nl":"oci_Latn","pl":"pl","prompt":"# Torna un array de totes los prefixes del mai cort al mai long de la cadena d'entrada # >>> all_prefixes(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\nsub all_prefixes {\n    my($string) = @_;\n","canonical_solution":"my($string) = @_;\n    my @prefixes;\n    for my $i (1 .. length($string)) {\n        push @prefixes, substr($string, 0, $i);\n    }\n    return @prefixes;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\", \"WW\", \"WWW\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_15","nl":"oci_Latn","pl":"pl","prompt":"# Retorn una cadena contenent de nombres delimitats per l'espaci començant per 0 fins a n inclus. # >>> string_sequence(0)\n# \"0\"\n# >>> string_sequence(5)\n# \"0 1 2 3 4 5\"\nsub string_sequence {\n    my($n) = @_;\n","canonical_solution":"sub string_sequence {\n    my($n) = @_;\n    return join ' ', 0..$n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n        if(eq_deeply($candidate->(0),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"0 1 2 3 4 5 6 7 8 9 10\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_16","nl":"oci_Latn","pl":"pl","prompt":"# Donada una cadena, descobrissètz de quants caractèrs diferents (coma que siá la cassa) se compausa # >>> count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters(\"Jerry\")\n# 4\nsub count_distinct_characters {\n    my($string) = @_;\n","canonical_solution":"sub count_distinct_characters {\n    my($string) = @_;\n    my %chars;\n    $string = lc $string;  # Convert the string to lowercase\n    $chars{$_} = 1 for split \/\/, $string;  # Add each character to the hash\n    return scalar keys %chars;  # Return the number of distinct keys\n}\n\n# Example usage:\nprint count_distinct_characters(\"xyzXYZ\"), \"\\n\";  # Output: 3\nprint count_distinct_characters(\"Jerry\"), \"\\n\";   # Output: 4","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_17","nl":"oci_Latn","pl":"pl","prompt":"# 'Hacetz' - nota de quart, dura un bat.# 'o Sausèt' - mitat de nota, dura dos còps.# 'o' - nota entièra, dura quatre batèus # Aquí una legenda:# pas la darrièra.# Vos cal analizar aquesta cadena e tornar una matritz de nombres entièrs correspondent a la quantitat de batiments que cada un fa.# L'intrada d'aquesta foncion es una cadena representant de nòtas musicalas dins un format ASCII especial.# >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nsub parse_music {\n    my($music_string) = @_;\n","canonical_solution":"sub parse_music {\n    my ($music_string) = @_;\n    my @notes = split ' ', $music_string;\n    my @beats;\n\n    foreach my $note (@notes) {\n        if ($note eq 'o') {\n            push @beats, 4;\n        } elsif ($note eq 'o|') {\n            push @beats, 2;\n        } elsif ($note eq '.|') {\n            push @beats, 1;\n        }\n    }\n\n    return @beats;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_music;\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o o o o\"),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".| .| .| .|\"),[1, 1, 1, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_18","nl":"oci_Latn","pl":"pl","prompt":"# Trobar quantes còps una soscadena donada se pòt trobar dins la cadena originala.# >>> how_many_times(\"\", \"a\")\n# 0\n# >>> how_many_times(\"aaa\", \"a\")\n# 3\n# >>> how_many_times(\"aaaa\", \"aa\")\n# 3\nsub how_many_times {\n    my($string, $substring) = @_;\n","canonical_solution":"sub how_many_times {\n    my ($string, $substring) = @_;\n    return 0 if $substring eq '';\n    my $count = 0;\n    while ($string =~ \/(?=$substring)\/g) {\n        $count++;\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&how_many_times;\n        if(eq_deeply($candidate->(\"\", \"x\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyxyxyx\", \"x\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"cacacacac\", \"cac\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"john doe\", \"john\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_19","nl":"oci_Latn","pl":"pl","prompt":"# Torna la cadena amb de nombres ordenats de mai pichon a mai grand # Las opcions validas son \"zèro\", \"un\", \"dos\", \"tres\", \"quatre\", \"cinc\", \"seis\", \"set\", \"uèit\" e \"nòu\". # L'intrada es una cadena espaciala de numèros de \"zèro\" a \"nòu\".# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers {\n    my($numbers) = @_;\n","canonical_solution":"sub sort_numbers {\n    my ($numbers) = @_;\n    my %word_to_num = (\n        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n        'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six'   => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n    );\n    my %num_to_word = reverse %word_to_num;\n    my @sorted_numbers = \n        map { $num_to_word{$_} } \n        sort { $a <=> $b } \n        map { $word_to_num{$_} } \n        split ' ', $numbers;\n    return join ' ', @sorted_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_20","nl":"oci_Latn","pl":"pl","prompt":"# lo nombre mai pichon, lo nombre mai grand).# D'un array de nombres (de longor al mens dos) causís e torna dos que son mai pròches de cadun # >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0, 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n","canonical_solution":"sub find_closest_elements {\n    my ($numbers) = @_;\n    my @sorted_numbers = sort { $a <=> $b } @$numbers;\n    my $min_diff = undef;\n    my @closest_pair;\n\n    for my $i (0 .. $#sorted_numbers - 1) {\n        my $diff = $sorted_numbers[$i + 1] - $sorted_numbers[$i];\n        if (!defined($min_diff) || $diff < $min_diff) {\n            $min_diff = $diff;\n            @closest_pair = ($sorted_numbers[$i], $sorted_numbers[$i + 1]);\n        }\n    }\n\n    return @closest_pair;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_21","nl":"oci_Latn","pl":"pl","prompt":"# atal que lo mai pichon nombre serà 0 e lo mai grand serà 1 # Donat un array de nombres (de dos elements al mens), aplicatz una transformacion lineara a aqueste array, # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\nsub rescale_to_unit {\n    my($numbers) = @_;\n","canonical_solution":"sub rescale_to_unit {\n    my($numbers) = @_;\n    my $min = min(@$numbers);\n    my $max = max(@$numbers);\n    my @rescaled = map { ($_ - $min) \/ ($max - $min) } @$numbers;\n    return \\@rescaled;\n}\n\nsub min {\n    my(@list) = @_;\n    my $min = $list[0];\n    foreach my $num (@list) {\n        if ($num < $min) {\n            $min = $num;\n        }\n    }\n    return $min;\n}\n\nsub max {\n    my(@list) = @_;\n    my $max = $list[0];\n    foreach my $num (@list) {\n        if ($num > $max) {\n            $max = $num;\n        }\n    }\n    return $max;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rescale_to_unit;\n        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_22","nl":"oci_Latn","pl":"pl","prompt":"# Filtra donada array de totas las valors plthon sonque pels entièrs # >>> filter_integers([\"a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1, 2, 3]\nsub filter_integers {\n    my($values) = @_;\n","canonical_solution":"sub filter_integers {\n    my ($values) = @_;\n    return [grep { \/^-?\\d+$\/ && !ref($_) } @$values];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_23","nl":"oci_Latn","pl":"pl","prompt":"# Tornar la longor de la cadena donada# >>> strlen(\"\")\n# 0\n# >>> strlen(\"abc\")\n# 3\nsub strlen {\n    my($string) = @_;\n","canonical_solution":"sub strlen {\n    my($string) = @_;\n    return length($string);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdasnakj\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_24","nl":"oci_Latn","pl":"pl","prompt":"# Per un nombre donat n, trobar lo mai grand nombre que divisa n egalament, mai pichon que n # >>> largest_divisor(15)\n# 5\nsub largest_divisor {\n    my($n) = @_;\n","canonical_solution":"sub largest_divisor {\n    my($n) = @_;\n    for (my $i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n    return undef; # In case n is 1, there is no divisor less than n\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n        if(eq_deeply($candidate->(3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_25","nl":"oci_Latn","pl":"pl","prompt":"# Lo nombre d'entrada deu èsser egal al produch de totes los factors.# Cada factor deu èsser plaçat en òrdre de còps correspondent a lo nombre de còps qu'apareis dins la factorizacion.# Retorna un array de factors primièrs d'un entièr donat dins l'òrdre del mai pichon al mai grand.# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\nsub factorize {\n    my($n) = @_;\n","canonical_solution":"sub factorize {\n    my ($n) = @_;\n    my @factors;\n    for my $i (2 .. int(sqrt($n))) {\n        while ($n % $i == 0) {\n            push @factors, $i;\n            $n \/= $i;\n        }\n    }\n    push @factors, $n if $n > 1;\n    return @factors;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n        if(eq_deeply($candidate->(2),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3, 3, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3, 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_26","nl":"oci_Latn","pl":"pl","prompt":"# Manténer l'òrdre dels elements a esquèrra coma dins l'intrada.# D'un array d'entièrs, retira totes los elements qu'apareisson mai d'un còp.# >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n","canonical_solution":"sub remove_duplicates {\n    my ($numbers) = @_;\n    my %count;\n    $count{$_}++ for @$numbers;\n    return [grep { $count{$_} == 1 } @$numbers];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_27","nl":"oci_Latn","pl":"pl","prompt":"# Per una cadena donada, virar los caractèrs minusculs cap a majuscul e maiusculs cap a minuscul. # >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string) = @_;\n","canonical_solution":"sub flip_case {\n    my($string) = @_;\n    $string =~ tr\/A-Za-z\/a-zA-Z\/;\n    return $string;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_28","nl":"oci_Latn","pl":"pl","prompt":"# Concatenar una seria de cadenas en una sola cadena.# >>> concatenate([])\n# \"\"\n# >>> concatenate([\"a\", \"b\", \"c\"])\n# \"abc\"\nsub concatenate {\n    my($strings) = @_;\n","canonical_solution":"sub concatenate {\n    my($strings) = @_;\n    return join('', @$strings);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate;\n        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"xyz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_29","nl":"oci_Latn","pl":"pl","prompt":"# Filtrar un array d'intrada de cadenas solament per las que començan amb un prefixe donat.# >>> filter_by_prefix([], \"a\")\n# []\n# >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n","canonical_solution":"sub filter_by_prefix {\n    my ($strings, $prefix) = @_;\n    return [grep { \/^\\Q$prefix\\E\/ } @$strings];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_30","nl":"oci_Latn","pl":"pl","prompt":"# Torna solament de nombres positius dins l'arrèst.# >>> get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n","canonical_solution":"sub get_positive {\n    my($l) = @_;\n    my @positive_numbers = grep { $_ > 0 } @$l;\n    return \\@positive_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_31","nl":"oci_Latn","pl":"pl","prompt":"# Retorn true se un nombre donat es primièr, e false autrament.# >>> is_prime(6)\n# \"\"\n# >>> is_prime(101)\n# 1\n# >>> is_prime(11)\n# 1\n# >>> is_prime(13441)\n# 1\n# >>> is_prime(61)\n# 1\n# >>> is_prime(4)\n# \"\"\n# >>> is_prime(1)\n# \"\"\nsub is_prime {\n    my($n) = @_;\n","canonical_solution":"sub is_prime {\n    my($n) = @_;\n    return \"\" if $n <= 1;\n    return 1 if $n == 2;\n    return \"\" if $n % 2 == 0;\n    for (my $i = 3; $i * $i <= $n; $i += 2) {\n        return \"\" if $n % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_33","nl":"oci_Latn","pl":"pl","prompt":"# a las valors dels indicis correspondents de l, mas ordenats.# l' es identic a l dins los indicis que son pas divisibles per tres, alara que sas valors dins los indicis que son divisibles per tres son egalas # Aquesta foncion pren un array l e torna un array l' tal que # >>> sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\nsub sort_third {\n    my($l) = @_;\n","canonical_solution":"sub sort_third {\n    my ($l) = @_;\n    my @to_sort = map { $l->[$_] } grep { $_ % 3 == 0 } 0..$#$l;\n    @to_sort = sort { $a <=> $b } @to_sort;\n    my @result = @$l;\n    my $index = 0;\n\n    foreach my $i (0..$#{$l}) {\n        if ($i % 3 == 0) {\n            $result[$i] = $to_sort[$index++];\n        }\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_third;\n        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_34","nl":"oci_Latn","pl":"pl","prompt":"# Tornar los elements unics ordenats dins un tablèu# >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n","canonical_solution":"sub unique {\n    my ($l) = @_;\n    my %seen;\n    my @unique_sorted = sort { $a <=> $b } grep { !$seen{$_}++ } @$l;\n    return \\@unique_sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_35","nl":"oci_Latn","pl":"pl","prompt":"# Torna l'element maxim dins l'arrèst.# >>> max_element([1, 2, 3])\n# 3\n# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element {\n    my($l) = @_;\n","canonical_solution":"sub max_element {\n    my($l) = @_;\n    my $max = $l->[0];\n    foreach my $value (@$l) {\n        if ($value > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n        if(eq_deeply($candidate->([1, 2, 3]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_36","nl":"oci_Latn","pl":"pl","prompt":"# Retornèt lo nombre de còps que la chifra 7 apareis dins de nombres entièrs mens de n que son divisibles per 11 o 13. # >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\nsub fizz_buzz {\n    my($n) = @_;\n","canonical_solution":"sub fizz_buzz {\n    my($n) = @_;\n    my $count = 0;\n    for my $i (1 .. $n-1) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $count++ if $i =~ \/7\/;\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fizz_buzz;\n        if(eq_deeply($candidate->(50),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(78),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(79),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4000),192)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10000),639)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100000),8026)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_37","nl":"oci_Latn","pl":"pl","prompt":"# a las valors dels indicis par de l, mas ordenats.# l' es identic a l dins los indicis impars, alara que sas valors dins los indicis parits son egalas # Aquesta foncion pren un array l e torna un array l' tal que # >>> sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\nsub sort_even {\n    my($l) = @_;\n","canonical_solution":"sub sort_even {\n    my($l) = @_;\n    my @even_indices;\n\n    for (my $i = 0; $i < @$l; $i += 2) {\n        push @even_indices, $l->[$i];\n    }\n\n    @even_indices = sort { $a <=> $b } @even_indices;\n\n    my @result = @$l;\n    \n    for (my $i = 0; $i < @even_indices; $i++) {\n        $result[$i * 2] = $even_indices[$i];\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_even;\n        if(eq_deeply($candidate->([1, 2, 3]),[1, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_39","nl":"oci_Latn","pl":"pl","prompt":"# prime_fib torna lo n-n nombre qu'es un nombre de Fibonacci e qu'es tanben primièr. # >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nsub prime_fib {\n    my($n) = @_;\n","canonical_solution":"sub is_prime {\n    my($num) = @_;\n    return 0 if $num < 2;\n    for my $i (2 .. sqrt($num)) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub prime_fib {\n    my($n) = @_;\n    my ($a, $b) = (1, 1);\n    my $count = 0;\n\n    while (1) {\n        my $fib = $a + $b;\n        $a = $b;\n        $b = $fib;\n        if (is_prime($fib)) {\n            $count++;\n            return $fib if $count == $n;\n        }\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n        if(eq_deeply($candidate->(1),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_40","nl":"oci_Latn","pl":"pl","prompt":"# La soma a zèro, e '' autrament.# Torna 1 se i a tres elements diferents dins l'arrèst que # triples_sum_to_zero pren un array de nombres entièrs coma una entrada.# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero {\n    my($l) = @_;\n","canonical_solution":"sub triples_sum_to_zero {\n    my($l) = @_;\n    my $n = scalar @$l;\n    for my $i (0 .. $n-3) {\n        for my $j ($i+1 .. $n-2) {\n            for my $k ($j+1 .. $n-1) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_41","nl":"oci_Latn","pl":"pl","prompt":"# Aquesta foncion balha lo nombre d'aquelas collisions.# dins lor trajectòria coma se s'èran pas batuts.# Pasmens, las veituras son infinidament robustas e fòrtas; per aquò, contunhan de se desplaçar.# quand una veitura que se desplaça d'esquèrra a drecha impausa una veitura que se desplaça de drecha a esquèrra.# Totes los carris se desplaçan a la meteissa velocitat.# Los dos parelhs de veituras començan d'èsser fòrça luènh de la linha de camin de fèrre.# n veituras son en rotacion d'esquèrra cap a drecha; simultanèament, un autre ensems de n veituras # Imaginatz una rota que siá una linha perfèctament drecha infinidament longa.sub car_race_collision {\n    my($n) = @_;\n","canonical_solution":"sub car_race_collision {\n    my($n) = @_;\n    return $n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n        if(eq_deeply($candidate->(2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_42","nl":"oci_Latn","pl":"pl","prompt":"# Torna array amb d'elements incrementats per 1.# >>> incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n","canonical_solution":"sub incr_list {\n    my($l) = @_;\n    return [map { $_ + 1 } @$l];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_43","nl":"oci_Latn","pl":"pl","prompt":"# La soma a zèro, e '' autrament.# Torna 1 se i a dos elements diferents dins l'arrèst que # pairs_sum_to_zero pren un array de nombres entièrs coma una entrada.# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1, 3, -2, 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero {\n    my($l) = @_;\n","canonical_solution":"sub pairs_sum_to_zero {\n    my ($l) = @_;\n    my %seen;\n    for my $num (@$l) {\n        if ($seen{-1 * $num}) {\n            return 1;\n        }\n        $seen{$num} = 1;\n    }\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_44","nl":"oci_Latn","pl":"pl","prompt":"# los nombres de basa son mens de 10.# tornar la representacion de la cadena après la conversion.# Cambiar la basa numerica del nombre d'entrada x per la basa.# >>> change_base(8, 3)\n# \"22\"\n# >>> change_base(8, 2)\n# \"1000\"\n# >>> change_base(7, 2)\n# \"111\"\nsub change_base {\n    my($x, $base) = @_;\n","canonical_solution":"sub change_base {\n    my ($x, $base) = @_;\n    my $result = '';\n    \n    if ($base < 2 || $base > 9) {\n        die \"Base must be between 2 and 9\";\n    }\n\n    while ($x > 0) {\n        my $remainder = $x % $base;\n        $result = $remainder . $result;\n        $x = int($x \/ $base);\n    }\n\n    return $result eq '' ? '0' : $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n        if(eq_deeply($candidate->(8, 3),\"22\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234, 2),\"11101010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 2),\"10000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 2),\"111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),\"4\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),\"5\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 8),\"7\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_45","nl":"oci_Latn","pl":"pl","prompt":"# Donada longor d'un costat e granda superfícia de retorn per un triangle.# >>> triangle_area(5, 3)\n# 7.5\nsub triangle_area {\n    my($a, $h) = @_;\n","canonical_solution":"sub triangle_area {\n    my ($a, $h) = @_; \n    return 0.5 * $a * $h;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(5, 3),7.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2),2.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 8),40.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_46","nl":"oci_Latn","pl":"pl","prompt":"# Escriu una foncion per calcular lo n-n element de la sequéncia de nombres fib4.# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).# fib4(3) -> 0 # fib4(2) -> 2 # fib4(1) -> 0 # fib4(0) -> 0 # La sequéncia de nombres Fib4 es una sequéncia similara a la sequéncia de Fibbonacci que se definís coma seguent: # >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n","canonical_solution":"sub fib4 {\n    my ($n) = @_;\n    return 0 if $n == 0 || $n == 1 || $n == 3;\n    return 2 if $n == 2;\n    \n    my @fib4 = (0, 0, 2, 0);\n    \n    for my $i (4 .. $n) {\n        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n    }\n    \n    return $fib4[$n];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_47","nl":"oci_Latn","pl":"pl","prompt":"# Tornar la mediana dels elements dins l'arrèst l. # >>> median([3, 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) = @_;\n","canonical_solution":"sub median {\n    my($l) = @_;\n    my @sorted = sort { $a <=> $b } @$l;\n    my $len = @sorted;\n    if ($len % 2 == 1) {\n        return $sorted[int($len\/2)];\n    } else {\n        return ($sorted[$len\/2 - 1] + $sorted[$len\/2]) \/ 2;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_48","nl":"oci_Latn","pl":"pl","prompt":"# Verifica se la cadena donada es un palindròma# >>> is_palindrome(\"\")\n# 1\n# >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n","canonical_solution":"sub is_palindrome {\n    my ($text) = @_;\n    return $text eq reverse($text) ? 1 : \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_49","nl":"oci_Latn","pl":"pl","prompt":"# Torna 2^n modulo p (èsser conscient dels numèris).# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n","canonical_solution":"sub modp {\n    my($n, $p) = @_;\n    return (2 ** $n) % $p;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_51","nl":"oci_Latn","pl":"pl","prompt":"# remove_vowels es una foncion que pren de cadena e torna de cadena sens vocalas. # >>> remove_vowels(\"\")\n# \"\"\n# >>> remove_vowels(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels(\"aaaaa\")\n# \"\"\n# >>> remove_vowels(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels(\"zbcd\")\n# \"zbcd\"\nsub remove_vowels {\n    my($text) = @_;\n","canonical_solution":"sub remove_vowels {\n    my($text) = @_;\n    $text =~ s\/[aeiouAEIOU]\/\/g;\n    return $text;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"),\"bcdf\nghjklm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"acBAA\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"),\"ybcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_52","nl":"oci_Latn","pl":"pl","prompt":"# Retorna 1 se totes los nombres dins l'arrèst l son en dejós del tèrme t. # >>> below_threshold([1, 2, 4, 10], 100)\n# 1\n# >>> below_threshold([1, 20, 4, 10], 5)\n# \"\"\nsub below_threshold {\n    my($l, $t) = @_;\n","canonical_solution":"sub below_threshold {\n    my($l, $t) = @_;\n    foreach my $num (@$l) {\n        return \"\" if $num >= $t;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_threshold;\n        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_53","nl":"oci_Latn","pl":"pl","prompt":"# Ajustar dos nombres x e y.# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\nsub add {\n    my($x, $y) = @_;\n","canonical_solution":"return $x + $y;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->(0, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 7),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_54","nl":"oci_Latn","pl":"pl","prompt":"# Verifiqui se dos mots an los meteis caractèrs.# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# 1\n# >>> same_chars(\"abcd\", \"dddddddabc\")\n# 1\n# >>> same_chars(\"dddddddabc\", \"abcd\")\n# 1\n# >>> same_chars(\"eabcd\", \"dddddddabc\")\n# \"\"\n# >>> same_chars(\"abcd\", \"dddddddabce\")\n# \"\"\n# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# \"\"\nsub same_chars {\n    my($s0, $s1) = @_;\n","canonical_solution":"sub same_chars {\n    my($s0, $s1) = @_;\n    \n    my %chars_s0 = map { $_ => 1 } split \/\/, $s0;\n    my %chars_s1 = map { $_ => 1 } split \/\/, $s1;\n\n    foreach my $char (keys %chars_s0) {\n        return \"\" unless exists $chars_s1{$char};\n    }\n\n    foreach my $char (keys %chars_s1) {\n        return \"\" unless exists $chars_s0{$char};\n    }\n\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&same_chars;\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dddddddabc\", \"abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcd\", \"dddddddabc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabcf\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\", \"aaccc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_55","nl":"oci_Latn","pl":"pl","prompt":"# Torna lo nombre de Fibonacci n.# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n","canonical_solution":"sub fib {\n    my ($n) = @_;\n    return $n if $n <= 1;\n    my ($a, $b) = (0, 1);\n    for (2..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $b;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_56","nl":"oci_Latn","pl":"pl","prompt":"# retornar 1 se cada parentèsis d'obertura a una parentèsis de tancament correspondenta. # los parentèsis es una cadena de \"<\" e \">\". # >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n","canonical_solution":"sub correct_bracketing {\n    my($brackets) = @_;\n    my $balance = 0;\n\n    foreach my $char (split \/\/, $brackets) {\n        if ($char eq '<') {\n            $balance++;\n        } elsif ($char eq '>') {\n            $balance--;\n            if ($balance < 0) {\n                return \"\";\n            }\n        }\n    }\n    \n    return $balance == 0 ? 1 : \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_57","nl":"oci_Latn","pl":"pl","prompt":"# Retorn 1 es que los elements de la matritz son monotonicament aumentant o diminuissent.# >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n# >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n","canonical_solution":"sub monotonic {\n    my($l) = @_;\n    return 1 if @$l <= 1;\n    \n    my $increasing = 1;\n    my $decreasing = 1;\n    \n    for my $i (1 .. $#$l) {\n        if ($l->[$i] > $l->[$i - 1]) {\n            $decreasing = 0;\n        } elsif ($l->[$i] < $l->[$i - 1]) {\n            $increasing = 0;\n        }\n    }\n    \n    return $increasing || $decreasing ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_58","nl":"oci_Latn","pl":"pl","prompt":"# Torna los elements comuns ordenats unicament per dos matrices.# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n","canonical_solution":"sub common {\n    my($l1, $l2) = @_;\n    my %count;\n    $count{$_}++ for @$l1;\n    $count{$_}++ for grep { exists $count{$_} } @$l2;\n    return [ sort { $a <=> $b } grep { $count{$_} > 1 } keys %count ];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_59","nl":"oci_Latn","pl":"pl","prompt":"# Torna lo factor primièr mai grand de n. Assumís n > 1 e es pas un primièr. # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\nsub largest_prime_factor {\n    my($n) = @_;\n","canonical_solution":"sub largest_prime_factor {\n    my($n) = @_;\n    my $largest_factor = 1;\n    my $factor = 2;\n\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n            $largest_factor = $factor;\n            $n \/= $factor;\n        } else {\n            $factor++;\n        }\n    }\n    \n    return $largest_factor;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_60","nl":"oci_Latn","pl":"pl","prompt":"# la soma_a_n es una foncion que soma de nombres de 1 a n.# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\nsub sum_to_n {\n    my($n) = @_;\n","canonical_solution":"sub sum_to_n {\n    my ($n) = @_;\n    return $n * ($n + 1) \/ 2;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_61","nl":"oci_Latn","pl":"pl","prompt":"# retornar 1 se cada parentèsis d'obertura a una parentèsis de tancament correspondenta. # los parentèsis es una cadena de \"(\" e \")\".# >>> correct_bracketing(\"(\")\n# \"\"\n# >>> correct_bracketing(\"()\")\n# 1\n# >>> correct_bracketing(\"(()())\")\n# 1\n# >>> correct_bracketing(\")(()\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n","canonical_solution":"sub correct_bracketing {\n    my ($brackets) = @_;\n    my $balance = 0;\n\n    foreach my $char (split \/\/, $brackets) {\n        if ($char eq '(') {\n            $balance++;\n        } elsif ($char eq ')') {\n            $balance--;\n        }\n        # If balance is negative, it means there's a closing bracket without a matching opening\n        if ($balance < 0) {\n            return '';\n        }\n    }\n\n    # If balance is zero, all brackets are correctly matched\n    return $balance == 0 ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((()())))\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((((\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())())(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_62","nl":"oci_Latn","pl":"pl","prompt":"# Torna la derivada d'aquel polinòmi dins la meteissa forma.# xs[0] + xs[1] * x + xs[2] * x^2 + .... # xs representa los coeficients d'un polinòmi.# >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n# [2, 6]\nsub derivative {\n    my($xs) = @_;\n","canonical_solution":"sub derivative {\n    my($xs) = @_;\n    my @derivative;\n    \n    for my $i (1 .. $#{$xs}) {\n        push @derivative, $xs->[$i] * $i;\n    }\n    \n    return \\@derivative;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_63","nl":"oci_Latn","pl":"pl","prompt":"# Escriu una foncion per calcular lo n-n element de la sequéncia de nombres fibfib.# fib fib (n) == fib fib (n-1) + fib (n-2) + fib (n-3). # Fibfib ((2) == 1 # fib fib ((1) == 0 # fib fib ((0) == 0 # La sequéncia de nombres FibFib es una sequéncia similara a la sequéncia de Fibbonacci que se definís coma seguent: # >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n    my($n) = @_;\n","canonical_solution":"sub fibfib {\n    my($n) = @_;\n    return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n\n    my @fibfib = (0, 0, 1);\n    for my $i (3..$n) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_64","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # la vocala, mas solament quand es a la fin del mot donat.# Las vocalas dins aqueste cas son \"a\", \"e\", \"i\", \"o\", \"u\". Aquí, \"y\" es tanben un # Un mot coma entrada e torna lo nombre de vocalas dins la cadena.# Escriu una foncion vowels_count que pren una cadena representant # >>> vowels_count(\"abcde\")\n# 2\n# >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n","canonical_solution":"sub vowels_count {\n    my($s) = @_;\n    my $count = 0;\n    my @chars = split \/\/, lc $s;\n    my $length = scalar @chars;\n\n    for my $i (0..$#chars) {\n        if ($chars[$i] =~ \/[aeiou]\/ || ($chars[$i] eq 'y' && $i == $length - 1)) {\n            $count++;\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n        if(eq_deeply($candidate->(\"abcde\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"key\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bye\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bYe\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ACEDY\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_65","nl":"oci_Latn","pl":"pl","prompt":"# Se desplaçar > nombre de chifras, tornar las chifras inversadas.# e torna lo resultat coma una cadena. # Circular desplaçament de las chifras de l'entèr x, desplaçament de las chifras a drecha per desplaçament.# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n# \"12\"\nsub circular_shift {\n    my($x, $shift) = @_;\n","canonical_solution":"sub circular_shift {\n    my($x, $shift) = @_;\n    my $digits = length($x);\n    \n    if ($shift > $digits) {\n        return reverse $x;\n    }\n    \n    $shift = $shift % $digits;\n    my $shifted = substr($x, -$shift) . substr($x, 0, $digits - $shift);\n    \n    return $shifted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n        if(eq_deeply($candidate->(100, 2),\"001\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97, 8),\"79\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 1),\"21\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_66","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Còdes ASCII.# Escriu una foncion que pren una cadena coma entrada e torna la soma dels caractèrs superiors solament' # Tasca # >>> digitSum(\"\")\n# 0\n# >>> digitSum(\"abAB\")\n# 131\n# >>> digitSum(\"abcCd\")\n# 67\n# >>> digitSum(\"helloE\")\n# 69\n# >>> digitSum(\"woArBld\")\n# 131\n# >>> digitSum(\"aAaaaXa\")\n# 153\nsub digitSum {\n    my($s) = @_;\n","canonical_solution":"sub digitSum {\n    my($s) = @_;\n    my $sum = 0;\n    foreach my $char (split \/\/, $s) {\n        if ($char =~ \/[A-Z]\/) {\n            $sum += ord($char);\n        }\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digitSum;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abAB\"),131)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcCd\"),67)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"helloE\"),69)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"woArBld\"),131)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aAaaaXa\"),153)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" How are yOu?\"),151)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You arE Very Smart\"),327)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_67","nl":"oci_Latn","pl":"pl","prompt":"# per examble: # dins lo còrb torna lo nombre de fruchs de mango dins lo còrb. # las naranjas e las pomas e un entièr que representa lo nombre total dels fruchs # las pomas, las naranjas, e los fruchs de mango.# que son distribuits dins un còrb de frucha aqueste còrb conten # Dins aquesta tasca, vos serà balhada una cadena que representa un nombre de pomas e d'aranjas.# >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n# 19\nsub fruit_distribution {\n    my($s, $n) = @_;\n","canonical_solution":"sub fruit_distribution {\n    my($s, $n) = @_;\n    \n    # Extract numbers from the input string\n    my ($apples, $oranges) = $s =~ \/(\\d+) apples and (\\d+) oranges\/;\n    \n    # Calculate total apples and oranges\n    my $total_apples_oranges = $apples + $oranges;\n    \n    # Calculate number of mangoes\n    my $mangoes = $n - $total_apples_oranges;\n    \n    return $mangoes;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 21),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 0 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_68","nl":"oci_Latn","pl":"pl","prompt":"# Exemple 1: # Se i a pas de valors par o l'arrèst donat es void, tornar [].# Lo nos que foguèt trencat deu èsser tornat dins un array, [ smalest_value, son index ], # Se se trapa de nòdes multiples amb la meteissa valor parèla mai pichona, torna lo nòde qu'a l'indici mai pichon. # Lo nos que se pren deu èsser lo nos amb la valor par mai pichona.# vòstra tòca es de levar un dels noses e lo tornar.# \"Dat un array representant una branca d'un arbre qu'a de noses entièrs non negatius # >>> pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck([])\n# []\n# Example 4:\n# >>> pluck([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n    my($arr) = @_;\n","canonical_solution":"sub pluck {\n    my ($arr) = @_;\n    my $min_even_value = undef;\n    my $min_index = undef;\n\n    for my $i (0 .. @$arr - 1) {\n        my $value = $arr->[$i];\n        if ($value % 2 == 0) {\n            if (!defined($min_even_value) || $value < $min_even_value) {\n                $min_even_value = $value;\n                $min_index = $i;\n            }\n        }\n    }\n\n    return defined($min_even_value) ? [$min_even_value, $min_index] : [];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 7, 1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_69","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Se existís pas, torna -1.# La frequéncia d'un entièr es lo nombre de còps qu'apareis dins l'arrèst.# zero, e a una frequéncia mai granda o egala a la valor del quite entièr.# Vos es donat un array non vuèg de entièrs positius. Torna lo mai grand entièr que siá mai grand que # >>> search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> search([5, 5, 4, 4, 4])\n# -1\nsub search {\n    my($lst) = @_;\n","canonical_solution":"sub search {\n    my($lst) = @_;\n    my %frequency;\n\n    foreach my $num (@$lst) {\n        $frequency{$num}++;\n    }\n\n    my $result = -1;\n    foreach my $num (keys %frequency) {\n        if ($num > 0 && $frequency{$num} >= $num) {\n            if ($num > $result) {\n                $result = $num;\n            }\n        }\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_70","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # puèi lo maxim dels entièrs restants, puèi lo minim e atal.# L'òrdre estranh, es quand començas amb la valor minima, # Donat un array de nombres entièrs, retorn de l'arrèst dins un òrdre estranh.# >>> strange_sort_list([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list([])\n# []\nsub strange_sort_list {\n    my($lst) = @_;\n","canonical_solution":"sub strange_sort_list {\n    my($lst) = @_;\n    my @result;\n    my @sorted = sort {$a <=> $b} @$lst;\n    \n    while (@sorted) {\n        push @result, shift @sorted;\n        push @result, pop @sorted if @sorted;\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_71","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # que lo tresen costat.# Tres costats fan un triangle valid quand la soma de dos costats es mai granda.# Se non, torna -1 # lo triangle arrondit a 2 punts decimals se los tres costats forman un triangle valid. # Donadas las longors dels tres costats d'un triangle, tornatz l'airal de # >>> triangle_area(3, 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\nsub triangle_area {\n    my($a, $b, $c) = @_;\n","canonical_solution":"sub triangle_area {\n    my($a, $b, $c) = @_;\n    \n    # Check if the sides form a valid triangle\n    unless ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        return -1;\n    }\n    \n    # Calculate the semi-perimeter\n    my $s = ($a + $b + $c) \/ 2;\n    \n    # Calculate the area using Heron's formula\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    \n    # Return the area rounded to 2 decimal points\n    return sprintf(\"%.2f\", $area);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(3, 4, 5),6.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 5),8.18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),1.73)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),16.25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 3),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),0.43)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_72","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # L'objècte q volarà se es equilibrat (es un array palindromic) e la soma dels seus elements es mens o egala al pes maxim possible w.# Escriu una foncion que torna 1 se l'objècte q vòl, e '' se vòl pas.# >>> will_it_fly([1, 2], 5)\n# \"\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly([3, 2, 3], 1)\n# \"\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly([3, 2, 3], 9)\n# 1\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly([3], 5)\n# 1\n# # 3 is less than the maximum possible weight, and it's balanced.\nsub will_it_fly {\n    my($q, $w) = @_;\n","canonical_solution":"sub will_it_fly {\n    my($q, $w) = @_;\n    # Check if the array is palindromic\n    my @reversed = reverse @$q;\n    return '' unless \"@$q\" eq \"@reversed\";\n\n    # Check if the sum of elements is within weight limit\n    my $sum = 0;\n    $sum += $_ for @$q;\n    return $sum <= $w ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3], 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], 6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_73","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Es legit de la meteissa manièra cap al revèrs e cap al davant.# Cal cambiar per far lo palindrom.# Donat un array arr de entièrs, trobar lo nombre minim d'elements que # >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> smallest_change([1, 2, 3, 2, 1])\n# 0\nsub smallest_change {\n    my($arr) = @_;\n","canonical_solution":"sub smallest_change {\n    my($arr) = @_;\n    my $count = 0;\n    my $n = scalar @$arr;\n    \n    for my $i (0 .. int($n \/ 2) - 1) {\n        if ($arr->[$i] != $arr->[$n - $i - 1]) {\n            $count++;\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&smallest_change;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 4, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 1, 1, 3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_74","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # se los dos arrays an lo meteis nombre de caractèrs, torna lo primièr array.# lo nombre total de caractèrs dins las cadenas de l'arrèsta es mens que l'autre.# Escriu una foncion qu'accepta dos matrices de cadenas e torna l'arrèst qu'a # >>> total_match([], [])\n# []\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\nsub total_match {\n    my($lst1, $lst2) = @_;\n","canonical_solution":"sub total_match {\n    my ($lst1, $lst2) = @_;\n    \n    my $len1 = sum_chars($lst1);\n    my $len2 = sum_chars($lst2);\n\n    return $len1 <= $len2 ? $lst1 : $lst2;\n}\n\nsub sum_chars {\n    my ($array) = @_;\n    my $total = 0;\n    foreach my $string (@$array) {\n        $total += length($string);\n    }\n    return $total;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&total_match;\n        if(eq_deeply($candidate->([], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], [\"this\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\"], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_75","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # Sabent que (a) es mens de 100.# e fals autrament.# Escriu una foncion que torna vertadièr se lo nombre donat es la multiplicacion de 3 nombres primièrs # >>> is_multiply_prime(30)\n# 1\n# 30 = 2 * 3 * 5\nsub is_multiply_prime {\n    my($a) = @_;\n","canonical_solution":"sub is_multiply_prime {\n    my($a) = @_;\n\n    return 0 if $a >= 100;\n\n    my @primes = grep { is_prime($_) } 2..int($a\/2);\n\n    for my $i (0..$#primes) {\n        for my $j ($i..$#primes) {\n            for my $k ($j..$#primes) {\n                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nsub is_prime {\n    my($n) = @_;\n    return 0 if $n < 2;\n    for my $i (2..sqrt($n)) {\n        return 0 if $n % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_multiply_prime;\n        if(eq_deeply($candidate->(5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(105),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(126),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(729),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(891),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1001),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_76","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # x es una poténcia simpla de n se n**int=x # poder de n e fals dins los autres cases.# Vos cal escriure una foncion que torna true se un nombre x es un simple # >>> is_simple_power(1, 4)\n# 1\n# >>> is_simple_power(2, 2)\n# 1\n# >>> is_simple_power(8, 2)\n# 1\n# >>> is_simple_power(3, 2)\n# \"\"\n# >>> is_simple_power(3, 1)\n# \"\"\n# >>> is_simple_power(5, 3)\n# \"\"\nsub is_simple_power {\n    my($x, $n) = @_;\n","canonical_solution":"sub is_simple_power {\n    my($x, $n) = @_;\n    \n    return 0 if $n <= 0;\n    return \"\" if $x < 1;\n    \n    if ($x == 1) {\n        return 1;\n    }\n\n    while ($x > 1) {\n        if ($x % $n != 0) {\n            return \"\";\n        }\n        $x \/= $n;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n        if(eq_deeply($candidate->(16, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(128, 4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_77","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Nota: podètz assumir que l'intrada es sempre valida.# se aqueste ingeger es un cube d'un nombre entièr.# Escriu una foncion que pren un entièr a e torna 1 # >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n# \"\"\nsub iscube {\n    my($a) = @_;\n","canonical_solution":"sub iscube {\n    my($a) = @_;\n    my $cube_root = int($a ** (1\/3));\n    return 1 if $cube_root ** 3 == $a;\n    return 1 if ($cube_root + 1) ** 3 == $a; # handle small floating-point errors\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_78","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # e los simbòls A,B,C,D,E,F son sempre mai grands.# Nota: podètz assumir que l'intrada es sempre corrècta o es una cadena buida, # B (= decimal 11), D (= decimal 13). # Cal donc determinar un nombre de las chifras seguentas: 2, 3, 5, 7, # Los nombres primièrs son 2, 3, 5, 7, 11, 13, 17,...# Las chifras hexadecimalas son 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.# mai grand qu'1, qu'es pas lo produch de dos nombres naturals mai pichons).# las chifras que son primas (un nombre primièr, o un nombre primièr, es un nombre natural)# un nombre exadecimal coma una cadena e compta lo nombre d'exadecimal # Vos an demandat d'escriure una foncion que recep # >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\")\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n","canonical_solution":"sub hex_key {\n    my($num) = @_;\n    my %prime_hex_digits = map { $_ => 1 } ('2', '3', '5', '7', 'B', 'D');\n    my $prime_count = 0;\n    \n    foreach my $char (split \/\/, $num) {\n        $prime_count++ if exists $prime_hex_digits{$char};\n    }\n    \n    return $prime_count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_79","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Los caractèrs suplementaris son per ajudar al format.# I aurà un parelh de caractèrs suplementaris 'db' al començament e a la fin de la cadena.# Cada caractèr dins la cadena serà \"0\" o \"1\".# lo format binari. La foncion deu tornar una cadena, amb cada caractèr representant un binari # Vos serà balhat un nombre en forma decimala e vòstra tòca es de lo convertir en # >>> decimal_to_binary(15)\n# \"db1111db\"\n# >>> decimal_to_binary(32)\n# \"db100000db\"\nsub decimal_to_binary {\n    my($decimal) = @_;\n","canonical_solution":"sub decimal_to_binary {\n    my($decimal) = @_;\n    my $binary = sprintf(\"%b\", $decimal);\n    return \"db\" . $binary . \"db\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(0),\"db0db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),\"db100000db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(103),\"db1100111db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),\"db1111db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_80","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Una cadena es bona se sa longor es al mens 3 e cada 3 letras consecutivas son diferentas.# Vos cal verificar se la cadena es bona o pas.# Vos es donada una cadena s.# >>> is_happy(\"a\")\n# \"\"\n# >>> is_happy(\"aa\")\n# \"\"\n# >>> is_happy(\"abcd\")\n# 1\n# >>> is_happy(\"aabb\")\n# \"\"\n# >>> is_happy(\"adb\")\n# 1\n# >>> is_happy(\"xyy\")\n# \"\"\nsub is_happy {\n    my($s) = @_;\n","canonical_solution":"sub is_happy {\n    my($s) = @_;\n    return \"\" if length($s) < 3;\n    for my $i (0 .. length($s) - 3) {\n        my $substr = substr($s, $i, 3);\n        my %chars;\n        $chars{$_}++ for split \/\/, $substr;\n        return \"\" if keys(%chars) != 3;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_81","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # 0.0 E # > 0,0 D- # > 0,7 D # > 1,0 D+ # > 1,3 C- # > 1,7 C # > 2,0 C+ # > 2.3 B- # > 2,7 B # > 3,0 B+ # > 3.3 A- # > 3,7 A # 4.0 A+ # GPA. Grada de letras.# una foncion que pòt produire un array de grades de letras utilizant la taula seguenta: # Vos a donat una seria de GPA per qualques escolans e vos cal escriure .# Lo sol problèma es qu'a perdut lo còdi qu'utilizava per la classificacion.# L'ensenhaire a creat son algoritme per la notacion.# Es la darrièra setmana del semestre e lo professor deu donar las notas .# >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nsub numerical_letter_grade {\n    my($grades) = @_;\n","canonical_solution":"sub numerical_letter_grade {\n    my ($gpas) = @_;\n    my @letters;\n\n    foreach my $gpa (@$gpas) {\n        if ($gpa == 4.0) {\n            push @letters, 'A+';\n        } elsif ($gpa > 3.7) {\n            push @letters, 'A';\n        } elsif ($gpa > 3.3) {\n            push @letters, 'A-';\n        } elsif ($gpa > 3.0) {\n            push @letters, 'B+';\n        } elsif ($gpa > 2.7) {\n            push @letters, 'B';\n        } elsif ($gpa > 2.3) {\n            push @letters, 'B-';\n        } elsif ($gpa > 2.0) {\n            push @letters, 'C+';\n        } elsif ($gpa > 1.7) {\n            push @letters, 'C';\n        } elsif ($gpa > 1.3) {\n            push @letters, 'C-';\n        } elsif ($gpa > 1.0) {\n            push @letters, 'D+';\n        } elsif ($gpa > 0.7) {\n            push @letters, 'D';\n        } elsif ($gpa > 0.0) {\n            push @letters, 'D-';\n        } else {\n            push @letters, 'E';\n        }\n    }\n\n    return \\@letters;\n}\n\nmy $gpas = [4.0, 3, 1.7, 2, 3.5];\nmy $letter_grades = numerical_letter_grade($gpas);\nprint join(\", \", @$letter_grades);","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0, 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_82","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # la longor es un nombre primièr o ' ' autrament # Escriu una foncion que pren una cadena e torna 1 se la cadena # >>> prime_length(\"Hello\")\n# 1\n# >>> prime_length(\"abcdcba\")\n# 1\n# >>> prime_length(\"kittens\")\n# 1\n# >>> prime_length(\"orange\")\n# \"\"\nsub prime_length {\n    my($string) = @_;\n","canonical_solution":"sub prime_length {\n    my ($string) = @_;\n    my $length = length($string);\n\n    return '' if $length < 2;\n    for my $i (2 .. sqrt($length)) {\n        return '' if $length % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n        if(eq_deeply($candidate->(\"Hello\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"kittens\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"orange\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"world\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MadaM\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"HI\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gogo\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"M\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_83","nl":"oci_Latn","pl":"pl","prompt":"# Los entièrs positius que començan o finisson per 1.# Donat un entièr positiu n, tornatz lo nombre dels nombres de n chifras sub starts_one_ends {\n    my($n) = @_;\n","canonical_solution":"sub starts_one_ends {\n    my($n) = @_;\n    \n    # If n is 1, the numbers are 1, 2, 3, ..., 9 (single digit numbers starting\n    # or ending with 1), hence return 1 (only the number 1).\n    return 1 if $n == 1;\n\n    # Calculate the count of numbers starting with 1\n    # Numbers from 1..9 (n-1 zeros) give us 10^(n-1) choices\n    my $start_one_count = 10 ** ($n - 1);\n\n    # Calculate the count of numbers ending with 1\n    # Numbers from 10..10^(n-1) give us 10^(n-1) choices\n    my $end_one_count = 10 ** ($n - 1);\n\n    # However, numbers that both start and end with 1 (like 111...1)\n    # are counted twice so we need to add them in only once.\n    my $both_count = 1; # There's exactly one such number: 10^(n-1) + 1\n\n    # Total unique count\n    my $total_count = $start_one_count + $end_one_count - $both_count;\n\n    return $total_count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_84","nl":"oci_Latn","pl":"pl","prompt":"# Exemple # Donat un entièr positiu N, torna la soma totala de sas chifras en binari. # >>> solve(1000)\n# \"1\"\n# >>> solve(150)\n# \"110\"\n# >>> solve(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 ≤ N ≤ 10000.\n# Output:\n# a string of binary number\nsub solve {\n    my($N) = @_;\n","canonical_solution":"sub solve {\n    my($N) = @_;\n    my $sum = 0;\n    $sum += $_ for split \/\/, $N;\n    return sprintf(\"%b\", $sum);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(1000),\"1\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(150),\"110\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(147),\"1100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(333),\"1001\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(963),\"10010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_85","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Donat un array non-void d'entièrs, primièrament, ajustar los elements par que son a indicis impars.# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n    my($lst) = @_;\n","canonical_solution":"sub add {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    for (my $i = 1; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_86","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Nota: Deves gardar l'òrdre dels mots e dels espacis en blanc dins la frasa.# Ordre ascendent basat sus la valor ascii.# son remplaçats per un mot novèl ont totes los caractèrs ordenats en # Una version ordenada de cadena, es una cadena ont totes los mots (separats per espaci) # Escriu una foncion que pren una cadena e ne torna una version ordenada.# >>> anti_shuffle(\"Hi\")\n# \"Hi\"\n# >>> anti_shuffle(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\nsub anti_shuffle {\n    my($s) = @_;\n","canonical_solution":"sub anti_shuffle {\n    my($s) = @_;\n    $s =~ s\/(\\S+)\/join('', sort split \/\/, $1)\/ge;\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&anti_shuffle;\n        if(eq_deeply($candidate->(\"Hi\"),\"Hi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hello\"),\"ehllo\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"number\"),\"bemnru\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),\"abcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello World!!!\"),\"Hello !!!Wdlor\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_87","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # E mai, triar las coordenadas de la fila per las colomnas en òrdre descendent.# Ordenar las coordenadas d'en primièr per rengs en òrdre ascendent.# Cada matritz es una coordenada - (redaccion, colomnas), començant per 0.# e tornar array dels arrays, [(x1, y1), (x2, y2) ...] tal que # Donat lst, e entièr x, trobar los entièrs x dins l'arrèsta, # cada reng pòt conténer un nombre diferent de colomnas.# Es semblable a la matritz, pasmens, al contrari de las matriças,# Se vos donan de donadas bidimensionalas, coma un encastrat de matritz, # >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row([], 1)\n# []\n# >>> get_row([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\nsub get_row {\n    my($lst, $x) = @_;\n","canonical_solution":"sub get_row {\n    my ($lst, $x) = @_;\n    my @result;\n\n    for my $i (0 .. @$lst - 1) {\n        my @row_result;\n        for my $j (0 .. @{$lst->[$i]} - 1) {\n            if ($lst->[$i][$j] == $x) {\n                push @row_result, [$i, $j];\n            }\n        }\n        # Sort the coordinates of the row by columns in descending order\n        @row_result = sort { $b->[1] <=> $a->[1] } @row_result;\n        push @result, @row_result;\n    }\n\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_row;\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], 1),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1]], 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[], [1], [1, 2, 3]], 3),[[2, 2]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_88","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # * cambiatz pas lo sistèma donat.# Nota: # o lo triar en òrdre descendent se la soma (la primièra valor d'indici, la darrièra valor d'indici) es parièra. # Se la soma (la primièra valor d'indèx, la darrièra valor d'indèx) es impairada, ordenatz l'arrèst donat en òrdre ascendent, # Donat un array d'entièrs non negatius, tornatz un copl de l'array donat après triar, # >>> sort_array([])\n# []\n# >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    my($array) = @_;\n","canonical_solution":"sub sort_array {\n    my ($array) = @_;\n    return [] if !@$array;  # Return empty array if input is empty\n\n    my $first = $array->[0];\n    my $last = $array->[-1];\n    my $sum = $first + $last;\n\n    if ($sum % 2 == 0) {\n        # Sort in descending order if the sum is even\n        return [sort { $b <=> $a } @$array];\n    } else {\n        # Sort in ascending order if the sum is odd\n        return [sort { $a <=> $b } @$array];\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_89","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # cambiam en bas per dos multiplicat per dos luòcs.# L'alfabet deu èsser rotat d'un biais que las letras # torna una cadena encriptada amb l'alfabet en rotacion.# Crear una foncion que pren una cadena coma argument e # >>> encrypt(\"hi\")\n# \"lm\"\n# >>> encrypt(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt(\"gf\")\n# \"kj\"\n# >>> encrypt(\"et\")\n# \"ix\"\nsub encrypt {\n    my($s) = @_;\n","canonical_solution":"sub encrypt {\n    my($s) = @_;\n    my $shift = 2 * 2;  # Alphabet shifted by two multiplied by two places (4 places)\n    $s =~ tr\/a-zA-Z\/n-za-mN-ZA-M\/;  # Perform a Caesar cipher with a shift of 13 places\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n        if(eq_deeply($candidate->(\"hi\"),\"lm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"ewhjklnop\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gf\"),\"kj\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"faewfawefaewg\"),\"jeiajeaijeiak\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),\"e\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_90","nl":"oci_Latn","pl":"pl","prompt":"# Torna undef se n'i a pas d'aquel element.# Escriu una foncion next_smallest que torna lo segond element mai pichon de l'arrèst.# Vos es donat un array de nombres entièrs.# >>> next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest([5, 1, 4, 3, 2])\n# 2\n# >>> next_smallest([])\n# undef\n# >>> next_smallest([1, 1])\n# undef\nsub next_smallest {\n    my($lst) = @_;\n","canonical_solution":"sub next_smallest {\n    my($lst) = @_;\n    \n    # Return undef if the list has less than two elements\n    return undef unless @$lst >= 2;\n    \n    # Sort the unique elements of the list\n    my @sorted_unique = sort { $a <=> $b } keys %{{ map { $_ => 1 } @$lst }};\n    \n    # If there is only one unique element, return undef, else return the second smallest\n    return @sorted_unique >= 2 ? $sorted_unique[1] : undef;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_91","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Las frasas son delimitats per \"\"., \"?' o \"!\". # Una nuèch es una frasa que comença amb lo mot \"I\".# Vos serà balhat una cadena de mots, e vòstra tòca es de comptar lo nombre.# >>> is_bored(\"Hello world\")\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\nsub is_bored {\n    my($S) = @_;\n","canonical_solution":"my($S) = @_;\n    my $count = 0;\n    my @sentences = split \/(?<=[.?!])\\s*\/, $S;\n    foreach my $sentence (@sentences) {\n        $sentence =~ s\/^\\s+|\\s+$\/\/g;\n        $count++ if $sentence =~ \/^I\\b\/i;\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_bored;\n        if(eq_deeply($candidate->(\"Hello world\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is the sky blue?\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I love It !\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bIt\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I feel good today. I will be productive. will kill It\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You and I are going for a walk\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_92","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # Torna false dins totes los autres cases.# Retorna true se un dels nombres es egal a la soma dels autres dos, e totes los nombres son entièrs.# Crear una foncion que pren 3 nombres.# >>> any_int(5, 2, 7)\n# 1\n# >>> any_int(3, 2, 2)\n# \"\"\n# >>> any_int(3, -2, 1)\n# 1\n# >>> any_int(3.6, -2.2, 2)\n# \"\"\nsub any_int {\n    my($x, $y, $z) = @_;\n","canonical_solution":"sub any_int {\n    my($x, $y, $z) = @_;\n    \n    # Check if all inputs are integers\n    return \"\" unless defined $x && defined $y && defined $z;\n    return \"\" unless $x =~ \/^-?\\d+$\/ && $y =~ \/^-?\\d+$\/ && $z =~ \/^-?\\d+$\/;\n    \n    # Check if any number is the sum of the other two\n    return 1 if $x == $y + $z;\n    return 1 if $y == $x + $z;\n    return 1 if $z == $x + $y;\n    \n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&any_int;\n        if(eq_deeply($candidate->(2, 3, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.5, 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.5, 5, 3.5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.2, 2.2, 2.2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-4, 6, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 1, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4, 7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3.0, 4, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_93","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Assumís solament de letras.# Vocala dins l'alfabet anglés.# lo messatge amb la letra que apareis 2 plaças abans aquela # De biais qu'escambièt la cassa de totas las letras, remplaça totas las vocalas en # Escriu una foncion que pren un messatge, e l'encòda dins un tal # >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n","canonical_solution":"sub encode {\n    my($message) = @_;\n    $message =~ tr\/A-Za-z\/N-ZA-Mn-za-m\/;\n    $message =~ tr\/aeiouAEIOU\/cgkqwCGKQW\/;\n    return $message;\n}\n\n# Example usage\nprint encode(\"test\"), \"\\n\";       # Output: TGST\nprint encode(\"This is a message\"), \"\\n\"; # Output: tHKS KS C MGSSCGG","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_94","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Cal trobar la valor primièra mai granda e tornar la soma de sas chifras.# Vos es donat un array de nombres entièrs.# >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n# 7\nsub skjkasdkd {\n    my($lst) = @_;\n","canonical_solution":"sub skjkasdkd {\n    my ($lst) = @_;\n\n    # Helper function to determine if a number is prime\n    sub is_prime {\n        my ($num) = @_;\n        return 0 if $num < 2;\n        for my $i (2 .. sqrt($num)) {\n            return 0 if $num % $i == 0;\n        }\n        return 1;\n    }\n\n    # Find the largest prime in the array\n    my $largest_prime = -1;\n    foreach my $num (@$lst) {\n        if (is_prime($num)) {\n            $largest_prime = $num if $num > $largest_prime;\n        }\n    }\n\n    # Return the sum of the digits of the largest prime\n    if ($largest_prime > 0) {\n        my $sum_of_digits = 0;\n        $sum_of_digits += $_ for split \/\/, $largest_prime;\n        return $sum_of_digits;\n    }\n\n    return 0;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([127, 97, 8192]),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_95","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # La foncion deu tornar '' es lo hash donat es void.# cas o totas las claus son de cadenas en majuscula, autrament torna \"\".# Donat un hash, torna 1 se totas las claus son de cadenas en inferior # >>> check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>> check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case {\n    my($dict) = @_;\n","canonical_solution":"sub check_dict_case {\n    my($dict) = @_;\n    return '' unless %$dict;\n\n    my $all_lower = 1;\n    my $all_upper = 1;\n\n    for my $key (keys %$dict) {\n        if ($key !~ \/^[a-z]+$\/) {\n            $all_lower = 0;\n        }\n        if ($key !~ \/^[A-Z]+$\/) {\n            $all_upper = 0;\n        }\n    }\n    \n    return ($all_lower || $all_upper) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_96","nl":"oci_Latn","pl":"pl","prompt":"# per exemple: # Los entièrs que son de nombres prims e mens que n.# Implementar una foncion que pren un entièr non negatiu e torna un array del primièr n # >>> count_up_to(5)\n# [2, 3]\n# >>> count_up_to(11)\n# [2, 3, 5, 7]\n# >>> count_up_to(0)\n# []\n# >>> count_up_to(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> count_up_to(1)\n# []\n# >>> count_up_to(18)\n# [2, 3, 5, 7, 11, 13, 17]\nsub count_up_to {\n    my($n) = @_;\n","canonical_solution":"sub count_up_to {\n    my($n) = @_;\n    my @primes;\n    for my $num (2 .. $n - 1) {\n        my $is_prime = 1;\n        for my $div (2 .. sqrt($num)) {\n            if ($num % $div == 0) {\n                $is_prime = 0;\n                last;\n            }\n        }\n        push @primes, $num if $is_prime;\n    }\n    return @primes;\n}\n\n# Example usage:\n# my @result = count_up_to(11);\n# print \"@result\\n\";  # Output: 2 3 5 7","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_up_to;\n        if(eq_deeply($candidate->(5),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[2, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[2, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),[2, 3, 5, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_97","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Suposi que l'intrada es sempre valida.# lo produch de lors chifras d'unitat. # Completa la foncion que pren dos entièrs e torna # >>> multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n# 0\n# >>> multiply(14, -15)\n# 20\nsub multiply {\n    my($a, $b) = @_;\n","canonical_solution":"sub multiply {\n    my($a, $b) = @_;\n    my $unit_digit_a = abs($a) % 10;\n    my $unit_digit_b = abs($b) % 10;\n    return $unit_digit_a * $unit_digit_b;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n        if(eq_deeply($candidate->(148, 412),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020, 1851),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14, -15),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 27),49)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_98","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Donada una cadena s, comptatz lo nombre de vocalas majusculas dins los indicis par. # >>> count_upper(\"aBCdEf\")\n# 1\n# >>> count_upper(\"abcdefg\")\n# 0\n# >>> count_upper(\"dBBE\")\n# 0\nsub count_upper {\n    my($s) = @_;\n","canonical_solution":"sub count_upper {\n    my($s) = @_;\n    my $count = 0;\n    my @chars = split \/\/, $s;\n    \n    for (my $i = 0; $i < @chars; $i += 2) {\n        if ($chars[$i] =~ \/[AEIOU]\/) {\n            $count++;\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n        if(eq_deeply($candidate->(\"aBCdEf\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dBBE\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"B\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EEEE\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_99","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # de dos entièrs, arrondissèm a l'entorn de zèro.# e torna l'entèr mai pròche.# Crear una foncion que pren una valor (cadena) representant un nombre # >>> closest_integer(\"10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nsub closest_integer {\n    my($value) = @_;\n","canonical_solution":"sub closest_integer {\n    my($value) = @_;\n    \n    # Convert the string value to a number\n    my $number = 0 + $value;\n    \n    # Compute the floor and ceiling of the number\n    my $floor = int($number);\n    my $ceiling = $number > $floor ? $floor + 1 : $floor;\n    \n    # Determine the integer to round to\n    if ($number < 0) {\n        # For negative numbers, closer to zero means returning the lower number\n        return ($number - $floor <= $ceiling - $number) ? $floor : $ceiling;\n    } else {\n        # For positive numbers, closer to zero means returning the lower number\n        return ($ceiling - $number <= $number - $floor) ? $ceiling : $floor;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_100","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # i representa lo nombre de pèiras dins lo nivèl (i+1).# Retorn lo nombre de pèiras dins cada nivèl d'un array, ont element a index # - lo nombre par seguent se n es par. # - lo nombre impaire seguent se n es impaire. # Lo nombre de pèiras dins lo nivèl seguent es: # Lo primièr nivèl ten n pèiras.# Donat un entièr positiu n, cal far una pila de n nivèls de pèiras.# >>> make_a_pile(3)\n# [3, 5, 7]\nsub make_a_pile {\n    my($n) = @_;\n","canonical_solution":"sub make_a_pile {\n    my ($n) = @_;\n    my @pile;\n    my $current_stones = $n;\n    \n    for my $level (1..$n) {\n        push @pile, $current_stones;\n        if ($n % 2 == 0) {\n            $current_stones += 2;  # Increment by next even number\n        } else {\n            $current_stones += 2;  # Increment by next odd number (which is also +2)\n        }\n    }\n    \n    return @pile;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n        if(eq_deeply($candidate->(3),[3, 5, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_101","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # per partejar la cadena en mots e tornar un array de mots.# Vos serà balhat una cadena de mots separats per de coma o d'espacis.# >>> words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> words_string(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nsub words_string {\n    my($s) = @_;\n","canonical_solution":"sub words_string {\n    my ($s) = @_;\n    my @words = split \/[,\\s]+\/, $s;\n    return \\@words;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_102","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # I a pas de tal nombre, alara la foncion deu tornar -1.# Lo mai grand nombre entièr par que siá dins la gama [x, y] inclús.# Aquesta foncion pren dos nombres positius x e y e torna # >>> choose_num(12, 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nsub choose_num {\n    my($x, $y) = @_;\n","canonical_solution":"sub choose_num {\n    my($x, $y) = @_;\n    return -1 if $x > $y;\n    \n    # Swap x and y if x is greater than y\n    ($x, $y) = ($y, $x) if $x > $y;\n    \n    for (my $i = $y; $i >= $x; $i--) {\n        return $i if $i % 2 == 0;\n    }\n    return -1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n        if(eq_deeply($candidate->(12, 15),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33, 12354),12354)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5234, 5233),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 7),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_103","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # Se n es mai grand que m, retornar -1.# Redondeja la responsa a l'entèr mai prèp e converti aquò en binari.# la mejana dels entièrs de n a m (inclusent n e m).# Vos donan dos entièrs positius n e m, e vòstra tòca es de calcular lo # >>> rounded_avg(1, 5)\n# \"0b11\"\n# >>> rounded_avg(7, 5)\n# -1\n# >>> rounded_avg(10, 20)\n# \"0b1111\"\n# >>> rounded_avg(20, 33)\n# \"0b11010\"\nsub rounded_avg {\n    my($n, $m) = @_;\n","canonical_solution":"sub rounded_avg {\n    my ($n, $m) = @_;\n    \n    return -1 if $n > $m;\n    \n    my $sum = 0;\n    my $count = $m - $n + 1;\n    \n    for my $i ($n .. $m) {\n        $sum += $i;\n    }\n    \n    my $average = int(($sum \/ $count) + 0.5);\n    return sprintf(\"0b%b\", $average);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rounded_avg;\n        if(eq_deeply($candidate->(1, 5),\"0b11\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 13),\"0b1010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(964, 977),\"0b1111001010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(996, 997),\"0b1111100100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(560, 851),\"0b1011000010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185, 546),\"0b101101110\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(362, 496),\"0b110101101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(350, 902),\"0b1001110010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(197, 233),\"0b11010111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 1),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 5),\"0b101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_104","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Nota: L'arrondiment retornada deu èsser ordenat en aument.# Los elements que n'an pas cap de chifra parièra.# Donat un array de entièrs positius x. Torna un array ordenat de totes # >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits {\n    my($x) = @_;\n","canonical_solution":"sub unique_digits {\n    my ($x) = @_;\n    my @result;\n\n    foreach my $num (@$x) {\n        if ($num !~ \/[02468]\/) {\n            push @result, $num;\n        }\n    }\n    \n    return sort { $a <=> $b } @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_105","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # \"Un\", \"Dos\", \"Tres\", \"Quatre\", \"Cinqu\", \"Sèis\", \"Sèt\", \"Uèit\", \"Nòu\".# Inversar l'arrèl resultant, e remplaçar cada chifra per son nom correspondent de # Donat un array de entièrs, triar los entièrs que son entre 1 e 9 inclus, # >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length([])\n# []\n# If the array has any strange number ignore it:\n# >>> by_length([1, -1, 55])\n# [\"One\"]\nsub by_length {\n    my($arr) = @_;\n","canonical_solution":"sub by_length {\n    my ($arr) = @_;\n    my @names = qw(Zero One Two Three Four Five Six Seven Eight Nine);\n    \n    my @filtered_sorted_reversed = reverse sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @result = map { $names[$_] } @filtered_sorted_reversed;\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 55]),[\"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_106","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # Lo factorial de i es la multiplicacion dels nombres de 1 a i (1 * 2 * ... * i).# Comença per 1.# o la soma dels nombres de 1 a i.# e torna un array de talha n, tal que la valor de l'element a l'indèx i es lo factorial de i se i es parièr # Implementar la foncion f que pren n coma paramètre, # >>> f(5)\n# [1, 2, 6, 24, 15]\nsub f {\n    my($n) = @_;\n","canonical_solution":"sub f {\n    my($n) = @_;\n    my @result;\n\n    for my $i (1..$n) {\n        if ($i % 2 == 0) {\n            my $factorial = 1;\n            $factorial *= $_ for 1..$i;\n            push @result, $factorial;\n        } else {\n            my $sum = 0;\n            $sum += $_ for 1..$i;\n            push @result, $sum;\n        }\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_107","nl":"oci_Latn","pl":"pl","prompt":"# Exemple 1: # de palindròms entièrs que se tròban dins la gama ((1, n), inclús. # Donat un entièr positiu n, tornatz un array qu'a lo nombre de par e impar # >>> even_odd_palindrome(3)\n# [1, 2]\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd integer palindromes respectively.\nsub even_odd_palindrome {\n    my($n) = @_;\n","canonical_solution":"sub even_odd_palindrome {\n    my($n) = @_;\n    my $even_count = 0;\n    my $odd_count = 0;\n    for my $i (1..$n) {\n        if ($i == reverse $i) {\n            if ($i % 2 == 0) {\n                $even_count++;\n            } else {\n                $odd_count++;\n            }\n        }\n    }\n    return [$even_count, $odd_count];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n        if(eq_deeply($candidate->(123),[8, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_108","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple -123 a signat los chifres -1, 2 e 3.# Se un nombre es negatiu, alara sa primièra chifra signada serà negativa: # lo nombre d'elements que la soma de las chifras es > 0. # Escriu una foncion count_nums que pren un array de nombres entièrs e torna # >>> count_nums([])\n# 0\n# >>> count_nums([-1, 11, -11])\n# 1\n# >>> count_nums([1, 1, 2])\n# 3\nsub count_nums {\n    my($arr) = @_;\n","canonical_solution":"sub count_nums {\n    my($arr) = @_;\n    my $count = 0;\n\n    foreach my $num (@$arr) {\n        my $sum_of_digits = 0;\n        my @digits = split \/\/, $num;\n        $sum_of_digits += shift @digits; # add the signed digit\n        $sum_of_digits += $_ for @digits;\n        $count++ if $sum_of_digits > 0;\n    }\n\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_nums;\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 2, -2, 3, 4, 5]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 100, 98, -7, 1, -1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_109","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Nota: L'arrondiment donat es garantit per aver d'elements unics.# Se l'array donat es void, torna 1.# puèi tornar 1 o tornar ''.# Se es possible d'obtenir l'arrondiment ordenat en fasent l'operacion çai dessús # la posicion de començament dins l'arrondiment, es a dire l'indici 0°.# Lo darrièr element de l'arròs serà desplaçat cap a # Un desplaçament cap a drecha significa desplaçar totes los elements de l'arrondiment per un.# Se pòt realizar d'operacions de cambiament de drecha mai d'un còp.# l'operacion seguenta sus l'arrèsta donada: # es possible d'obtenir un array ordenat en òrdre non descreissent fasent # Los nombres dins l'arrondiment seràn ordenats a l'azard.# Avèm un array 'arr' de N entièrs arr[1], arr[2], ..., arr[N].# >>> move_one_ball([3, 4, 5, 1, 2])\n# 1\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> move_one_ball([3, 5, 4, 1, 2])\n# \"\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\nsub move_one_ball {\n    my($arr) = @_;\n","canonical_solution":"sub move_one_ball {\n    my ($arr) = @_;\n    my $n = scalar @$arr;\n    return 1 if $n == 0;\n\n    for my $i (0 .. $n - 1) {\n        my @shifted = (@$arr[$i .. $n - 1], @$arr[0 .. $i - 1]);\n        if (is_sorted(\\@shifted)) {\n            return 1;\n        }\n    }\n    return '';\n}\n\nsub is_sorted {\n    my ($arr) = @_;\n    for my $i (0 .. $#$arr - 1) {\n        return 0 if $arr->[$i] > $arr->[$i + 1];\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_110","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # En cas contrari, tornar \"NÒ\".# totes los elements de lst1 per èsser par, tornar \"YES\".# Se es possible d'escambiar d'elements entre lst1 e lst2 per far # I a pas cap de limita al nombre d'elements escambiats entre lst1 e lst2.# entre eles per far de lst1 un array de nombres parels.# e determina se es possible de realizar un escambi d' elements # Dins aqueste problèma, vos caldrà implementar una foncion que pren dos matrices de nombres, # >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\nsub exchange {\n    my($lst1, $lst2) = @_;\n","canonical_solution":"sub exchange {\n    my ($lst1, $lst2) = @_;\n    \n    # Check if lst1 is already all-even\n    my $all_even = 1;\n    foreach my $num (@$lst1) {\n        if ($num % 2 != 0) {\n            $all_even = 0;\n            last;\n        }\n    }\n    return \"YES\" if $all_even;\n\n    # Check if there is at least one even number in lst2\n    my $can_exchange = 0;\n    foreach my $num (@$lst2) {\n        if ($num % 2 == 0) {\n            $can_exchange = 1;\n            last;\n        }\n    }\n\n    # Calculate the count of odd numbers in lst1\n    my $odd_count_lst1 = 0;\n    foreach my $num (@$lst1) {\n        $odd_count_lst1++ if ($num % 2 != 0);\n    }\n\n    # If there are even numbers in lst2 and odd numbers in lst1, we can exchange\n    if ($can_exchange && $odd_count_lst1 > 0) {\n        return \"YES\";\n    }\n\n    return \"NO\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200, 200]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_111","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # Se mai d'una letra a la meteissa ocurréncia, las tornar totas.# de la letra amb mai de repeticions e contenent lo nombre correspondent.# Donada una cadena representant una letra minúscula separada per un espaci, tornatz un hash # >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n","canonical_solution":"sub histogram {\n    my ($test) = @_;\n    my %count;\n\n    # Split the input string by spaces and count occurrences of each letter\n    $count{$_}++ for split ' ', $test;\n\n    # Determine the maximum count\n    my $max_count = 0;\n    $max_count = $count{$_} > $max_count ? $count{$_} : $max_count for keys %count;\n\n    # Collect all letters with the maximum count\n    my %result = map { $_ => $count{$_} } grep { $count{$_} == $max_count } keys %count;\n\n    return \\%result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_112","nl":"oci_Latn","pl":"pl","prompt":"# Exemple # Vos cal tornar un array contenent la cadena de resultat e 1\/' per la verificacion.# Una cadena es nomenada palindròma se se legís al revèrs coma en avant.# puèi verificatz se la cadena de resultat es palindròma.# Nos donan doas cadenas s e c, cal suprimir totes los caractèrs de s que son egals a quin que siá caractèr de c.# Tasca # >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n","canonical_solution":"sub reverse_delete {\n    my($s, $c) = @_;\n    \n    # Create a hash of characters to be deleted for quick lookup\n    my %chars_to_delete = map { $_ => 1 } split \/\/, $c;\n    \n    # Remove characters that need to be deleted\n    $s =~ s\/[$c]\/\/g;\n    \n    # Check if the resulting string is a palindrome\n    my $is_palindrome = ($s eq reverse $s) ? 1 : '';\n\n    # Return the resulting string and palindrome check\n    return [$s, $is_palindrome];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_113","nl":"oci_Latn","pl":"pl","prompt":"# de chifras imparas dins la cadena i'th de l'entrada.# la cadena i de l'intrada. \" ont totes los i deurián èsser remplaçats pel nombre # Cada element i de la sortida deu èsser lo nombre d'elements impars dins la sequéncia.# Donat un array de cadenas, ont cada cadena consistís de solament de chifres, torna un array.# >>> odd_count([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nsub odd_count {\n    my($lst) = @_;\n","canonical_solution":"sub odd_count {\n    my ($lst) = @_;\n    my @output;\n    foreach my $str (@$lst) {\n        my $odd_count = 0;\n        $odd_count++ while $str =~ \/[13579]\/g;\n        push @output, \"the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput.\";\n    }\n    return \\@output;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_count;\n        if(eq_deeply($candidate->([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_114","nl":"oci_Latn","pl":"pl","prompt":"# Exemple # de nums.# Donat un array d'entièrs nums, trobar la soma minimala de tot sosarray non-buòu # >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n# 1\n# >>> minSubArraySum([-1, -2, -3])\n# -6\nsub minSubArraySum {\n    my($nums) = @_;\n","canonical_solution":"sub minSubArraySum {\n    my($nums) = @_;\n    my $minSum = $nums->[0];\n    my $currentSum = 0;\n    \n    foreach my $num (@$nums) {\n        $currentSum += $num;\n        if ($currentSum < $minSum) {\n            $minSum = $currentSum;\n        }\n        if ($currentSum > 0) {\n            $currentSum = 0;\n        }\n    }\n    \n    return $minSum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minSubArraySum;\n        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_115","nl":"oci_Latn","pl":"pl","prompt":"# Exemple 1: # Donar lo nombre de còps que cal per baissar los cubèrtas.# Vos cal utilizar los balcons per bufar los potz.# e totes los cubèrtas an la meteissa capacitat.# Cada potz a un cubèrt correspondent que se pòt utilizar per extraire l'aiga d'aquel, # e cada 1 dins una fila representa una unitat d'aiga.# Se vos dona una grilla rectangulara de potz. Cada reng representa un sol potz, # >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\nsub max_fill {\n    my($grid, $capacity) = @_;\n","canonical_solution":"sub max_fill {\n    my($grid, $capacity) = @_;\n    my $total_water_units = 0;\n    \n    for my $row (@$grid) {\n        for my $unit (@$row) {\n            $total_water_units += $unit;\n        }\n    }\n    \n    my $bucket_uses = int(($total_water_units + $capacity - 1) \/ $capacity);\n    return $bucket_uses;\n}\n\n# Examples\nprint max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) . \"\\n\"; # 6\nprint max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) . \"\\n\"; # 5\nprint max_fill([[0, 0, 0], [0, 0, 0]], 5) . \"\\n\"; # 0","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_fill;\n        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_116","nl":"oci_Latn","pl":"pl","prompt":"# Se deu aplicar coma aquò:# Per un nombre similar d'unes, triar en foncion de la valor decimala.# Lo nombre d'unes dins lor representacion binària en òrdre ascendent.# Dins aqueste kata, cal ordenar un array d'entièrs non negatius segon # >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n","canonical_solution":"sub sort_array {\n    my($arr) = @_;\n    return [sort { sprintf(\"%b\", $a) =~ tr\/1\/\/ <=> sprintf(\"%b\", $b) =~ tr\/1\/\/ || $a <=> $b } @$arr];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_117","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Nota: podètz assumir que la cadena d'entrada conten solament de letras e d'espacis.# Se la cadena s es buida alara la foncion deu tornar un array buid.# n consonantas, perque aqueles mots apareisson dins la cadena s. # una foncion que torna un array de totes los mots de la cadena s que contenon exactament # Donada una cadena s e un nombre natural n, vos an mandat d'implementar # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n","canonical_solution":"sub select_words {\n    my($s, $n) = @_;\n    return [] if $s eq '';\n    \n    my @words = split(\/\\s+\/, $s);\n    my @result;\n    \n    foreach my $word (@words) {\n        my $consonant_count = () = $word =~ \/[^aeiouAEIOU]\/g;\n        push @result, $word if $consonant_count == $n;\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_118","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # Podètz presumir que la cadena donada conten solament de letras en anglés.# trobar una vocala que satisfasca la condicion de mai sus.# Las vocalas al començament e a la fin comptan pas. Torna la cadena void se l'as pas fach.# doas consonantas del costat drech del mot (senssiu de la cassa).# Vos es donat un mot. Vos es de trobar la vocal mai pròcha que se trapa entre # >>> get_closest_vowel(\"yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel {\n    my($word) = @_;\n","canonical_solution":"sub get_closest_vowel {\n    my($word) = @_;\n    my @chars = split \/\/, $word;\n    my $vowel = '';\n    my @vowels = qw(a e i o u A E I O U);\n    my %vowel_hash = map { $_ => 1 } @vowels;\n\n    for (my $i = $#chars - 1; $i > 0; $i--) {\n        if ($vowel_hash{$chars[$i]} && !$vowel_hash{$chars[$i - 1]} && !$vowel_hash{$chars[$i + 1]}) {\n            $vowel = $chars[$i];\n            last;\n        }\n    }\n\n    return $vowel;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_119","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Torna \"Yes\" se i a un biais de far una bona cadena, e torna \"No\" autrament.# \" (()) \" es pas.# son equilibrats. Per exemple: la cadena '(()))) es bona, alara que la cadena # Una cadena S es considerada bona se e solament se totas las parentèsis dins S # Un òrdre, que la cadena resultant serà bona.# Vos cal verificar se es possible de concatenar las doas còrdas.# los parentèsis \" ((\" o parentèsis pròchas \")) \".# Vos es donat un array de doas cadenas, ambedoas cadenas son de cadenas obèrtas.# >>> match_parens([\"()(\", \")\"])\n# \"Yes\"\n# >>> match_parens([\")\", \")\"])\n# \"No\"\nsub match_parens {\n    my($lst) = @_;\n","canonical_solution":"sub match_parens {\n    my($lst) = @_;\n    my ($a, $b) = @$lst;\n    \n    # Helper to check if a string is good (i.e., parentheses balanced)\n    sub is_good {\n        my ($str) = @_;\n        my $balance = 0;\n        for my $ch (split \/\/, $str) {\n            $balance++ if $ch eq '(';\n            $balance-- if $ch eq ')';\n            return 0 if $balance < 0; # Too many closing parens\n        }\n        return $balance == 0; # Balanced if zero\n    }\n    \n    # Check both combinations\n    return \"Yes\" if is_good($a . $b) || is_good($b . $a);\n    return \"No\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \")\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")())\", \"(()()(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"()\", \"())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"((((\", \"((())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(\", \")(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \"(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_120","nl":"oci_Latn","pl":"pl","prompt":"# Exemple 1: # de longor k amb lo maxim k nombres en arr.# Donat un array arr de entièrs e un entièr positiu k, torna un array ordenat # >>> maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr, $k) = @_;\n","canonical_solution":"sub maximum {\n    my($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;  # Sort in descending order\n    my @result = sort { $a <=> $b } @sorted[0..$k-1];  # Take first k elements and sort them\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_121","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # Donat un array non-buòu d'entièrs, tornatz la soma de totes los elements impars que son en posicions par. # >>> solution([5, 8, 7, 1])\n# 12\n# >>> solution([3, 3, 3, 3, 3])\n# 9\n# >>> solution([30, 13, 24, 321])\n# 0\nsub solution {\n    my($lst) = @_;\n","canonical_solution":"sub solution {\n    my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 0; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 != 0;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n        if(eq_deeply($candidate->([5, 8, 7, 1]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 24, 321]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 9]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 23, 32]),23)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 13, 2, 9]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_122","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # la soma dels elements amb al mai doas chifras dels primièrs k elements d'arr. # Donat un array non void d'entièrs arr e un entièr k, retornar # >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\nsub add_elements {\n    my($arr, $k) = @_;\n","canonical_solution":"sub add_elements {\n    my ($arr, $k) = @_;\n    my $sum = 0;\n    for my $i (0..$k-1) {\n        $sum += $arr->[$i] if $arr->[$i] >= -99 && $arr->[$i] <= 99;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_elements;\n        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1], 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_123","nl":"oci_Latn","pl":"pl","prompt":"# get_odd_collatz(5) torna [1, 5] # La sequéncia de collatz per 5 es [5, 16, 8, 4, 2, 1], doncas los nombres impars son sonque 1, e 5. # Per exemple: # 2. retornèt array ordenat en aumentant.# 1. Collatz ((1) es [1]. # Nota: # Lo tèrme mai 1. La conjectura es que quina que siá la valor de n, la sequéncia sempre arribarà a 1.# Se lo tèrme precedent es impar, lo tèrme seguent es 3 còps lo tèrme precedent.# lo tèrme precedent coma seguent: se lo tèrme precedent es par, lo tèrme seguent es la mitat de # coma seguent: començar amb un entièr positiu n.# La conjectura de Collatz es una conjectura en matematicas que concernís una sequéncia definida.# Donat un entièr positiu n, tornatz un array ordenat qu'a los nombres impars dins la sequéncia de collatz.# >>> get_odd_collatz(5)\n# [1, 5]\nsub get_odd_collatz {\n    my($n) = @_;\n","canonical_solution":"sub get_odd_collatz {\n    my ($n) = @_;\n    my %odd_numbers;\n    \n    while ($n != 1) {\n        $odd_numbers{$n} = 1 if $n % 2 != 0;\n        if ($n % 2 == 0) {\n            $n = $n \/ 2;\n        } else {\n            $n = 3 * $n + 1;\n        }\n    }\n    $odd_numbers{1} = 1;\n    \n    return sort { $a <=> $b } keys %odd_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_odd_collatz;\n        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[1, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_124","nl":"oci_Latn","pl":"pl","prompt":"# 4. La data deu èsser dins lo format: mm-dd-yyyy # 3. Los meses devon pas èsser mens d'1 e mai de 12.# 2. Lo nombre de jorns es pas mens de 1 o mai de 31 jorns pels meses 1,3,5,7,8,10,12. E lo nombre de jorns es pas mens de 1 o mai de 30 jorns pels meses 4,6,9,11. E, lo nombre de jorns es pas mens de 1 o mai de 29 pel mes 2.# 1. La cadena de data es pas buida.# La data es valida se totas las règlas seguentas son respectadas: # torna 1 se la data es valida autrament \"'. # Vos cal escriure una foncion que valida una cadena de data donada e # >>> valid_date(\"03-11-2000\")\n# 1\n# >>> valid_date(\"15-01-2012\")\n# \"\"\n# >>> valid_date(\"04-0-2040\")\n# \"\"\n# >>> valid_date(\"06-04-2020\")\n# 1\n# >>> valid_date(\"06\/04\/2020\")\n# \"\"\nsub valid_date {\n    my($date) = @_;\n","canonical_solution":"sub valid_date {\n    my ($date) = @_;\n    \n    # Check if date is empty\n    return '' if !$date;\n    \n    # Date pattern for mm-dd-yyyy\n    if ($date =~ \/^(\\d{2})-(\\d{2})-(\\d{4})$\/) {\n        my ($month, $day, $year) = ($1, $2, $3);\n        \n        # Check month validity\n        return '' if $month < 1 || $month > 12;\n        \n        # Check day validity based on the month\n        my %days_in_month = (\n            1 => 31, 2 => 29, 3 => 31, 4 => 30,\n            5 => 31, 6 => 30, 7 => 31, 8 => 31,\n            9 => 30, 10 => 31, 11 => 30, 12 => 31\n        );\n        \n        return '' if $day < 1 || $day > $days_in_month{$month};\n        \n        # If all conditions are satisfied, return 1\n        return 1;\n    }\n    \n    # If date does not match the pattern, return ''\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n        if(eq_deeply($candidate->(\"03-11-2000\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-0-2040\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-04-2020\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"03-32-2011\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-06-2005\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"21-31-2000\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04122003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"20030412\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04-12\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-2003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_125","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # alfabet, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 # se deu devesir sus las coma ',' se existís pas cap de coma se deu tornar lo nombre de letras minusculas amb òrdre impaire dins la # Donat una cadena de mots, torna un array de mots divisats sus espacis, se pas d'espacis existís dins lo tèxte que volètz.# >>> split_words(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"abcdef\")\n# 3\nsub split_words {\n    my($txt) = @_;\n","canonical_solution":"sub split_words {\n    my($txt) = @_;\n    \n    # Check if whitespace exists in the string\n    if ($txt =~ \/\\s\/) {\n        my @words = split(\/\\s+\/, $txt);\n        return \\@words;\n    }\n    # If no whitespace, check for commas\n    elsif ($txt =~ \/,\/) {\n        my @words = split(\/,\/, $txt);\n        return \\@words;\n    }\n    # If neither whitespace nor commas exist, calculate odd ordered lowercase letters\n    else {\n        my @chars = split(\/\/, $txt);\n        my $count = 0;\n        foreach my $char (@chars) {\n            if ($char ge 'a' && $char le 'z' && (ord($char) - ord('a')) % 2 == 0) {\n                $count++;\n            }\n        }\n        return $count;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_words;\n        if(eq_deeply($candidate->(\"Hello world!\"),[\"Hello\", \"world!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,world!\"),[\"Hello\", \"world!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world,!\"),[\"Hello\", \"world,!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaabb\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaBb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_126","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # Numèro, torna \"'. Assumís pas de nombres negatius e sonque entièrs.# Se l'arrèl a mai d'un duplicat del meteis.# Donat un array de nombres, torna se son ordenats o pas.# >>> is_sorted([5])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5])\n# \"\"\n# >>> is_sorted([1, 2, 3, 4, 5, 6])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n# \"\"\n# >>> is_sorted([1, 2, 2, 3, 3, 4])\n# 1\n# >>> is_sorted([1, 2, 2, 2, 3, 4])\n# \"\"\nsub is_sorted {\n    my($lst) = @_;\n","canonical_solution":"sub is_sorted {\n    my($lst) = @_;\n    my %count;\n    \n    for (my $i = 0; $i < @$lst; $i++) {\n        $count{$lst->[$i]}++;\n        \n        # Check for more than one duplicate\n        if ($count{$lst->[$i]} > 2) {\n            return '';\n        }\n        \n        # Check if the array is not sorted\n        if ($i > 0 && $lst->[$i] < $lst->[$i - 1]) {\n            return '';\n        }\n    }\n    \n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n        if(eq_deeply($candidate->([5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_127","nl":"oci_Latn","pl":"pl","prompt":"# [intrada\/sortida] mòstras: # Se los dos intervals se crosan pas, torna \"NO\".# En cas contrari, tornar \"NO\".# Se la longor de l'interseccion es un nombre primièr, torna \"YES\", # que sa longor es 1, qu'es pas un nombre primièr.# Exemple, l'interseccion dels intervals (1, 3), (2, 4) es (2, 3) # Los intervals son un nombre primièr.# Vos cal determinar se la longor de l'interseccion d'aqueles dos# Per cada interval donat, se supausa que son començament es mens o egal a sa fin.# compren lo començament e la fin.# Los intervals donats son tancats çò que significa que l'interval (començament, fin) # ont cada interval es un parelh de nombres entièrs. Per exemple, interval = (començament, fin) = (1, 2).# Vos donan dos intervals, # >>> intersection([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection([-1, 1], [0, 4])\n# \"NO\"\n# >>> intersection([-3, -1], [-5, 5])\n# \"YES\"\nsub intersection {\n    my($interval1, $interval2) = @_;\n","canonical_solution":"sub is_prime {\n    my $num = shift;\n    return 0 if $num <= 1;\n    for my $i (2 .. sqrt($num)) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub intersection {\n    my ($interval1, $interval2) = @_;\n\n    my $start1 = $interval1->[0];\n    my $end1 = $interval1->[1];\n    my $start2 = $interval2->[0];\n    my $end2 = $interval2->[1];\n\n    my $intersection_start = ($start1 > $start2) ? $start1 : $start2;\n    my $intersection_end = ($end1 < $end2) ? $end1 : $end2;\n\n    if ($intersection_start <= $intersection_end) {\n        my $intersection_length = $intersection_end - $intersection_start;\n        return is_prime($intersection_length) ? \"YES\" : \"NO\";\n    }\n\n    return \"NO\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1], [0, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, 2], [-4, 0]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 5]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -2], [-3, -2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_128","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # Nota: tornar undef per arr void. # de cada nombre dins l'arrondiment, representat per 1, -1 o 0. # soma de magnituds dels entièrs multiplicada per lo produch de totes los signes # Vos es balhat un array arr de entièrs e vos cal tornar # >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n# 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n","canonical_solution":"sub prod_signs {\n    my($arr) = @_;\n    return undef if scalar(@$arr) == 0;\n\n    my $sum_magnitudes = 0;\n    my $product_signs = 1;\n\n    for my $num (@$arr) {\n        $sum_magnitudes += abs($num);\n        \n        if ($num > 0) {\n            $product_signs *= 1;\n        } elsif ($num < 0) {\n            $product_signs *= -1;\n        } else {\n            $product_signs *= 0;\n        }\n    }\n\n    return $sum_magnitudes * $product_signs;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_129","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Retorn una matritz ordenada de las valors de las cellulas que lo camin minim passa.# Es garantit que la responsa es unica.# lst_A[j] = lst_B[j].# tal que lst_A[i] < lst_B[i] e per tot j (1 <= j < i) avèm # que lst_B, en d'autres mots, existís un indici entièr i (1 <= i <= k) # A travèrs (callem-los lst_A e lst_B), lst_A es lexicograficament mens # Après aver fach los matrices ordenats de las valors de las cellulas que A e B an # Un camin A (de longor k) es considerat mens long qu'un camin B (de longor k) se # Podètz pas anar fòra de la ret.# necessàriament distinctas).# Notatz qu'un camin de longor k significa visitar exactament k cellulas (pas # cellula. # En d'autres mots, podètz anar a de cellulas que partejan un bòrd amb vòstre corrent.# De cada cellula, e a cada pas, podètz passar a las cellulas vesinas,# Cal trobar lo camin minim de longor k dins la grilla.# inclús apareis exactament un còp sus las cellulas de la grilla.# Cada cellula de la grilla conten una valor. Cada entièr dins l'interval [1, N * N] # Donada una grelha amb N rengs e N colomnas (N >= 2) e un entièr positiu k, # >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    my($grid, $k) = @_;\n","canonical_solution":"sub minPath {\n    my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\n    # Create direction vectors for up, down, left, right moves\n    my @directions = ([0, 1], [1, 0], [0, -1], [-1, 0]);\n\n    # Priority queue to store paths using a lexicographically ordered array\n    my @queue;\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n            push @queue, [[$grid->[$i][$j]], $i, $j];\n        }\n    }\n\n    # Sort the initial cells based on their values to start with minimum paths\n    @queue = sort { $a->[0][0] <=> $b->[0][0] } @queue;\n\n    # Implement a breadth-first search that continues until we have a path of length k\n    while (@queue) {\n        my $current = shift @queue;\n        my ($path, $x, $y) = @$current;\n\n        # Return the first path of length k since paths are checked in lexicographical order\n        return @$path if scalar @$path == $k;\n\n        # Explore neighboring cells\n        for my $direction (@directions) {\n            my ($dx, $dy) = @$direction;\n            my ($nx, ny) = ($x + $dx, $y + $dy);\n            \n            # Check for valid cell\n            if ($nx >= 0 && $nx < $n && $ny >= 0 && $ny < $n) {\n                my @new_path = (@$path, $grid->[$nx][$ny]);\n                push @queue, [\\@new_path, $nx, $ny];\n            }\n        }\n        # Keep the queue ordered by lexicographical order of paths\n        @queue = sort { \n            my ($a_path, $b_path) = ($a->[0], $b->[0]);\n            for my $i (0..$#$a_path) {\n                return $a_path->[$i] <=> $b_path->[$i] if $a_path->[$i] != $b_path->[$i];\n            }\n        } @queue;\n    }\n}\n\n# Example usage:\n#print join(\", \", minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)), \"\\n\";  # [1, 2, 1]\n#print join(\", \", minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)), \"\\n\";  # [1]","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_130","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # los primièrs n + 1 nombres de la sequéncia de Tribonacci.# Se vos donèt un nombre entièr non negatiu n, vos cal tornar un array de # = 2 + 3 + 3 = 8 # tri(3) = tri(2) + tri(1) + tri(4) # tri(4) = 3 # tri(2) = 1 + (2 \/ 2) = 2 # Per exemple: # tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), se n es impar. # tri (n) = 1 + n \/ 2, se n es par.# tri(1) = 3 # La sequéncia de Tribonacci es definida per la recidiva: # Pasmens, çò que la gent sap pas es la sequéncia de Tribonacci.# Tot lo monde coneis la sequéncia de Fibonacci, foguèt estudiada prigondament pels matematicians en # >>> tri(3)\n# [1, 3, 2, 8]\nsub tri {\n    my($n) = @_;\n","canonical_solution":"sub tri {\n    my ($n) = @_;\n    my @sequence = (3);  # starting with tri(1) = 3\n\n    for my $i (1 .. $n) {\n        if ($i % 2 == 0) {\n            push @sequence, 1 + $i \/ 2;\n        } else {\n            my $val = $sequence[$i - 1] + $sequence[$i - 2] + ($i + 1 <= $n ? (1 + ($i + 1) \/ 2) : 0);\n            push @sequence, $val;\n        }\n    }\n\n    return @sequence;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n        if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_131","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Torna 0 se totas las chifras son parelh.# Donat un entièr positiu n, tornatz lo produch dels chifres impausats. # >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n","canonical_solution":"my @digits = split \/\/, $n;\n    my $product = 1;\n    my $has_odd = 0;\n\n    foreach my $digit (@digits) {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n            $has_odd = 1;\n        }\n    }\n\n    return $has_odd ? $product : 0;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_132","nl":"oci_Latn","pl":"pl","prompt":"# ont al mens un parallèl dins la sossequéncia es imbricat.# La foncion deu tornar 1 se e solament se i a una sossequéncia valida de parentèsis # Crear una foncion que pren una cadena coma entrada que conten solament de parentèsis carrats.# >>> is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"[][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n# 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n","canonical_solution":"sub is_nested {\n    my ($string) = @_;\n    my @stack;\n\n    for my $char (split \/\/, $string) {\n        if ($char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ']') {\n            if (@stack && $stack[-1] eq '[') {\n                pop @stack;\n                return 1 if @stack; # Check for nesting\n            } else {\n                return \"\"; # Unbalanced brackets\n            }\n        }\n    }\n\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n        if(eq_deeply($candidate->(\"[[]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]][[\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_133","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Enrotlar cada element dins l'arrondiment cap al naut int ((Ceiling) primièr.# Cal tornar la soma dels nombres al carrat dins l'arrondiment donat, # Vos es donat un ensems de nombres.# >>> lst([1.0, 2.0, 3.0])\n# 14\n# >>> lst([1.0, 4.0, 9.0])\n# 98\n# >>> lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst([1.4, 4.2, 0.0])\n# 29\n# >>> lst([-2.4, 1.0, 1.0])\n# 6\nsub sum_squares {\n    my($lst) = @_;\n","canonical_solution":"sub sum_squares {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        my $ceil_num = int($num) + ($num > int($num) ? 1 : 0);\n        $sum += $ceil_num ** 2;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_134","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Nota: \"mot\" es un grop de caractèrs separats per un espaci.# una partida d'un mot, e '' autrament.# d'una cadena donada es un caractèr alfabetic e es pas # Crear una foncion que retorne 1 se lo darrièr caractèr # >>> check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n","canonical_solution":"sub check_if_last_char_is_a_letter {\n    my ($txt) = @_;\n    $txt =~ s\/\\s+$\/\/; # Trim trailing spaces\n    return '' if $txt eq ''; \n\n    if ($txt =~ \/([^a-zA-Z])([a-zA-Z])$\/ && $1 eq ' ') {\n        return 1;\n    }\n    \n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_135","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Valors duplicadas.# pas cap d'element existís alara torna -1. Lo tablèu donat contendrà pas # es pas mai grand o egal a l'element immediatament precedent.# Crear una foncion que retorne l'indici mai grand d'un element que # >>> can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange([1, 2, 3])\n# -1\nsub can_arrange {\n    my($arr) = @_;\n","canonical_solution":"sub can_arrange {\n    my ($arr) = @_;\n    for my $i (1 .. $#$arr) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n            return $i;\n        }\n    }\n    return -1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_136","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Se i a pas de nombres entièrs negatius o positius, los torna coma undef.# de entièrs positius dins un array.# lo mai grand dels entièrs negatius, e \"b\" es lo mai pichon # Crear una foncion que torna un array (a, b), ont 'a' es # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n# [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers {\n    my($lst) = @_;\n","canonical_solution":"sub largest_smallest_integers {\n    my ($lst) = @_;\n    my ($largest_neg, $smallest_pos);\n\n    foreach my $num (@$lst) {\n        if ($num < 0) {\n            $largest_neg = $num if !defined($largest_neg) || $num > $largest_neg;\n        } elsif ($num > 0) {\n            $smallest_pos = $num if !defined($smallest_pos) || $num < $smallest_pos;\n        }\n    }\n    \n    return ($largest_neg, $smallest_pos);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),[undef, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_137","nl":"oci_Latn","pl":"pl","prompt":"# Nota: Se un nombre real es representat coma una cadena, lo ponch flotant pòt èsser . o , # Retorn undef se las valors son egalas. # numerò real, e torna la variabla mai granda dins son tipe de variabla donat.# Crear una foncion que pren de nombres entièrs, floats, o de cadenas representant # >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one(\"1\", 1)\n# undef\nsub compare_one {\n    my($a, $b) = @_;\n","canonical_solution":"sub compare_one {\n    my ($a, $b) = @_;\n\n    # Convert potential string numbers with ',' into float representation\n    $a =~ s\/,\/.\/g if $a =~ \/,\/;\n    $b =~ s\/,\/.\/g if $b =~ \/,\/;\n\n    # Auto-detect type by checking if string has non-numeric parts\n    my $a_is_num = $a =~ \/^\\d+(\\.\\d+)?$\/;\n    my $b_is_num = $b =~ \/^\\d+(\\.\\d+)?$\/;\n\n    if ($a_is_num && $b_is_num) {\n        # Compare as numbers\n        if ($a < $b) {\n            return $b;\n        } elsif ($a > $b) {\n            return $a;\n        } else {\n            return undef;\n        }\n    } else {\n        # Compare as strings\n        if ($a lt $b) {\n            return $b;\n        } elsif ($a gt $b) {\n            return $a;\n        } else {\n            return undef;\n        }\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare_one;\n        if(eq_deeply($candidate->(1, 2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2.5),2.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, \"2,3\"),\"2,3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5,1\", \"6\"),\"6\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"2\"),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", 1),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_138","nl":"oci_Latn","pl":"pl","prompt":"# Exemple # Evalua se lo nombre donat n pòt èsser escrich coma la soma de 4 nombres parels positius exactament.# >>> is_equal_to_sum_even(4)\n# \"\"\n# >>> is_equal_to_sum_even(6)\n# \"\"\n# >>> is_equal_to_sum_even(8)\n# 1\nsub is_equal_to_sum_even {\n    my($n) = @_;\n","canonical_solution":"sub is_equal_to_sum_even {\n    my($n) = @_;\n\n    # A number can be expressed as the sum of four positive even numbers\n    # if and only if it is greater than or equal to 8 and is even\n    if ($n >= 8 && $n % 2 == 0) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_equal_to_sum_even;\n        if(eq_deeply($candidate->(4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_139","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # ont n > 0 # (n) = n! * (n-1)! * (n-2)! * ... * 1! # Lo factorial brasilièr es definit coma: # >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\nsub special_factorial {\n    my($n) = @_;\n","canonical_solution":"sub special_factorial {\n    my($n) = @_;\n    my $result = 1;\n    \n    for my $i (1 .. $n) {\n        $result *= factorial($i);\n    }\n    \n    return $result;\n}\n\nsub factorial {\n    my($num) = @_;\n    my $fact = 1;\n\n    for my $i (1 .. $num) {\n        $fact *= $i;\n    }\n\n    return $fact;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_140","nl":"oci_Latn","pl":"pl","prompt":"# puèi remplaçar totes los espacis consecutius per - # e se una cadena a mai de 2 espacis consecutius, # Donada una cadena de tèxte, remplaçar totes los espacis amb soslinhs, # >>> fix_spaces(\" Example\")\n# \"Example\"\n# >>> fix_spaces(\" Example 1\")\n# \"Example_1\"\n# >>> fix_spaces(\" Example 2\")\n# \"_Example_2\"\n# >>> fix_spaces(\" Example 3\")\n# \"_Example-3\"\nsub fix_spaces {\n    my($text) = @_;\n","canonical_solution":"sub fix_spaces {\n    my($text) = @_;\n    $text =~ s\/ {3,}\/-\/g;   # Replace 3 or more spaces with a hyphen\n    $text =~ s\/ \/_\/g;       # Replace remaining spaces with underscores\n    return $text;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fix_spaces;\n        if(eq_deeply($candidate->(\"Example\"),\"Example\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir Hanif \"),\"Mudasir_Hanif_\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Exa   mple\"),\"Exa-mple\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_141","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # - La soscadena aprèp lo punt deu èsser una d'aquelas: ['txt', 'exe', 'dll'] # l'alfabet latin (\"a\" - \"z\" e \"A\" - \"Z\").# - La soscadena abans lo punt deu pas èsser buida, e comença amb una letra de # - Lo nom del fichièr conten exactament un punt '.' # - Lo nom del fichièr deu pas èsser mai de tres chifras ('0'-'9'). # son atenguts: # Un nom de fichièr es considerat coma valid se e solament se totas las condicions seguentas son reüssidas:# \"Yes\" se lo nom del fichièr es valid, e torna \"No\" se lo nom es valid.# Crear una foncion que pren una cadena representant lo nom d'un fichièr, e torna # >>> file_name_check(\"example.txt\")\n# \"Yes\"\n# >>> file_name_check(\"1example.dll\")\n# \"No\"\nsub file_name_check {\n    my($file_name) = @_;\n","canonical_solution":"sub file_name_check {\n    my($file_name) = @_;\n    \n    # Check if there's exactly one dot and split the string\n    my @parts = split(\/\\.\/, $file_name);\n    return 'No' unless scalar(@parts) == 2;\n\n    # Extract the name and the extension\n    my ($name, $extension) = @parts;\n\n    # Check if the extension is valid\n    return 'No' unless $extension =~ \/^(txt|exe|dll)$\/;\n\n    # Check if the name starts with a letter\n    return 'No' unless $name =~ \/^[a-zA-Z]\/;\n\n    # Check the number of digits in the name\n    my $digit_count = () = $name =~ \/[0-9]\/g;\n    return 'No' if $digit_count > 3;\n\n    # If all conditions are met, return 'Yes'\n    return 'Yes';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&file_name_check;\n        if(eq_deeply($candidate->(\"example.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1example.dll\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s1sdf3.asd\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K.dll\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MY16FILE3.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"His12FILE94.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_Y.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"?aREYA.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\/this_is_valid.dll\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.wow\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txtexe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#this2_i4s_5valid.ten\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"@this1_is6_valid.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_12valid.6exe4.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"all.exe.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_No.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is3youfault.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"no_one#knows.dll\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1I563_Yes3.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_Yes3.txtt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final..txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final132\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_f4indsartal132.\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s.\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_142","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # cambiarà las entradas dins l'arrèst que los indicis son pas un multiple de 3 o 4. La foncion retornarà la soma de totas las entradas.# multiple de 3 e cubirà l'intrada entièra se son indici es multiple de 4 e non pas multiple de 3. La foncion serà pas # Aquesta foncion pren un array de entièrs. Per totas las entradas dins l'array, la foncion cal carrar l'intrada entièr se son indici es a # \" # >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\nsub sum_squares {\n    my($lst) = @_;\n","canonical_solution":"sub sum_squares {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    for my $i (0 .. @$lst - 1) {\n        if ($i % 3 == 0) {\n            $sum += $lst->[$i] ** 2;\n        } elsif ($i % 4 == 0) {\n            $sum += $lst->[$i] ** 3;\n        } else {\n            $sum += $lst->[$i];\n        }\n    }\n\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1, 2, 3]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 9]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_143","nl":"oci_Latn","pl":"pl","prompt":"# Exemple 1: # l'òrdre dels mots dins la cadena novèla deu èsser lo meteis que l'original.# que las longors son de nombres prims, # e cal tornar una cadena que conten los mots de la frasa originala, # la frasa conten qualques mots separats per un espaci, # Se vos dona una cadena que representa una frasa,# >>> words_in_sentence(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> words_in_sentence(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\nsub words_in_sentence {\n    my($sentence) = @_;\n","canonical_solution":"sub words_in_sentence {\n    my($sentence) = @_;\n    \n    # Function to check if a number is prime\n    sub is_prime {\n        my $num = shift;\n        return 0 if $num < 2;\n        for (my $i = 2; $i * $i <= $num; ++$i) {\n            return 0 if $num % $i == 0;\n        }\n        return 1;\n    }\n    \n    my @words = split(' ', $sentence);\n    my @prime_length_words;\n    \n    foreach my $word (@words) {\n        my $length = length($word);\n        if (is_prime($length)) {\n            push(@prime_length_words, $word);\n        }\n    }\n    \n    return join(' ', @prime_length_words);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_in_sentence;\n        if(eq_deeply($candidate->(\"This is a test\"),\"is\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lets go for swimming\"),\"go for\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"there is no place available here\"),\"there is no place\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi I am Hussein\"),\"Hi am Hussein\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go for it\"),\"go for it\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here is\"),\"is\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_144","nl":"oci_Latn","pl":"pl","prompt":"# Podètz assumir que x, e n son de fraccions validas, e an pas zèro coma denominator.# <numerator>\/<denominator> ont lo numerator e lo denominator son de nombres entièrs positius.# X e n son de representacions de cadena d'una fraccion, e an lo format seguent, # x * n. La foncion torna 1 se x * n es un nombre entièr e ' ' # Vos cal implementar una foncion que simplifiquèt l'expression # >>> simplify(\"1\/5\", \"5\/1\")\n# 1\n# >>> simplify(\"1\/6\", \"2\/1\")\n# \"\"\n# >>> simplify(\"7\/10\", \"10\/2\")\n# \"\"\nsub simplify {\n    my($x, $n) = @_;\n","canonical_solution":"sub simplify {\n    my ($x, $n) = @_;\n    \n    # Parse the fractions\n    my ($x_num, $x_den) = split('\/', $x);\n    my ($n_num, $n_den) = split('\/', $n);\n    \n    # Cross-multiply to find the product of the fractions\n    # x * n = (x_num * n_num) \/ (x_den * n_den)\n    my $prod_num = $x_num * $n_num;\n    my $prod_den = $x_den * $n_den;\n    \n    # Check if the product is a whole number\n    return ($prod_num % $prod_den == 0) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n        if(eq_deeply($candidate->(\"1\/5\", \"5\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/6\", \"2\/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5\/1\", \"3\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7\/10\", \"10\/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/10\", \"50\/10\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7\/2\", \"4\/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11\/6\", \"6\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/3\", \"5\/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5\/2\", \"3\/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/4\", \"8\/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/4\", \"4\/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/5\", \"5\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/5\", \"1\/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_145","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # los ordenar en foncion de lor index dins l'arrondiment original.# Nota: s'i a mai d'un element amb una soma similara de lors chifras, # en òrdre ascendent segon la soma de lors chifras.# Escriu una foncion qu'òrde l'arrondiment donat dels entièrs # >>> order_by_points([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n    my($nums) = @_;\n","canonical_solution":"sub order_by_points {\n    my ($nums) = @_;\n    \n    # Function to calculate the sum of the digits of a number\n    sub digit_sum {\n        my $num = shift;\n        my $sum = 0;\n        $sum += $_ for split \/\/, abs($num);\n        return $sum;\n    }\n\n    # Sort the array first by sum of digits, then by index for ties\n    my @sorted = sort {\n        digit_sum($a) <=> digit_sum($b) ||\n        $a <=> $b\n    } @$nums;\n\n    return \\@sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_146","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # las primièras e darrièras chifras d'un nombre son imparas (1, 3, 5, 7, 9).# lo nombre d'elements dins l'arrèst que son mai grands que 10 e ambedos # Escriu una foncion que pren un array de nombres coma entrada e torna # >>> specialFilter([15, -73, 14, -15])\n# 1\n# >>> specialFilter([33, -2, -3, 45, 21, 109])\n# 2\nsub specialFilter {\n    my($nums) = @_;\n","canonical_solution":"sub specialFilter {\n    my($nums) = @_;\n    my $count = 0;\n    foreach my $num (@$nums) {\n        if ($num > 10) {\n            my $str_num = abs($num) . \"\";\n            my $first_digit = substr($str_num, 0, 1);\n            my $last_digit = substr($str_num, -1, 1);\n            if ($first_digit % 2 != 0 && $last_digit % 2 != 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&specialFilter;\n        if(eq_deeply($candidate->([5, -2, 1, -5]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, -73, 14, -15]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_147","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # e a[i] + a[j] + a[k] es un multiple de 3.# Retorn lo nombre de triples (a[i], a[j], a[k]) de a ont i < j < k, # Per cada i (1 ≤ i ≤ n), la valor de a[i] = i * i - i + 1. # Vos es donat un entièr positiu n. Vos cal crear un array entièr a de longor n.# >>> get_max_triples(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\nsub get_max_triples {\n    my($n) = @_;\n","canonical_solution":"sub get_max_triples {\n    my($n) = @_;\n    my @a;\n    \n    # Generate the array a\n    for my $i (1..$n) {\n        $a[$i - 1] = $i * $i - $i + 1;\n    }\n    \n    my $count = 0;\n    \n    # Check all triples (a[i], a[j], a[k]) where i < j < k\n    for my $i (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_148","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # son pas de noms de planetas corrèctes.# La foncion deu tornar un array void se planet1 o planet2 # la proximitat al solelh.# situadas entre l'orbita de la planeta 1 e l'orbita de la planeta 2, ordenadas per # La foncion deu tornar un array contenent totas las planetas que lors orbitas son # Escriu una foncion que pren dos noms de planetas coma de cadenas planet1 e planet2.# Uranus, Neptun.# es Mercuri, lo seguent es Vènus, puèi Tèrra, Mart, Jupitèr, Saturne,# Existís uèch planetas dins lo nòstre sistèma solar: las pus pròchas del Solelh.# >>> bf(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nsub bf {\n    my($planet1, $planet2) = @_;\n","canonical_solution":"sub bf {\n    my ($planet1, $planet2) = @_;\n    my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\n    my %planet_indices = map { $planets[$_] => $_ } (0..$#planets);\n\n    return [] unless exists $planet_indices{$planet1} && exists $planet_indices{$planet2};\n\n    my ($start, $end) = ($planet_indices{$planet1}, $planet_indices{$planet2});\n\n    ($start, $end) = ($end, $start) if $start > $end;\n\n    return [@planets[$start+1 .. $end-1]];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n        if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Mercury\"),[\"Venus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jupiter\", \"Makemake\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_149","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # Podètz pensar que totes los mots auràn la meteissa longor.# La foncion deu tornar un array de cadenas en òrdre ordenat.# Se dos mots an la meteissa longor, ordenatz l'arrondiment alfabeticament.# devriá tornar l'arrondiment ordenat per aquela règla.# L'òrdre de l'arrondiment deuriá èsser ascendent per longor de cada mot, e tu.# e pòt conténer de duplicats.# L'array es sempre un array de cadenas e jamai un array de nombres, # e torna l'arrondiment resultant amb un òrdre ordenat, # suprimís las cadenas que son de longors imparas, # Escriu una foncion qu'accepta un array de cadenas coma paramètre, # >>> list_sort([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\nsub sorted_list_sum {\n    my($lst) = @_;\n","canonical_solution":"sub list_sort {\n    my ($lst) = @_;\n\n    # Filter out strings with odd length\n    my @filtered = grep { length($_) % 2 == 0 } @$lst;\n\n    # Sort strings first by length, then alphabetically\n    my @sorted = sort { length($a) <=> length($b) || $a cmp $b } @filtered;\n\n    return \\@sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"b\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_150","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # un nombre primièr e deu tornar la valor de y autrament.# Un programa simple que deu tornar la valor de x se n es # >>> x_or_y(7, 34, 12)\n# 34\n# >>> x_or_y(15, 8, 5)\n# 5\nsub x_or_y {\n    my($n, $x, $y) = @_;\n","canonical_solution":"sub is_prime {\n    my $num = shift;\n    return 0 if $num < 2;\n    for (my $i = 2; $i * $i <= $num; $i++) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub x_or_y {\n    my ($n, $x, $y) = @_;\n    return is_prime($n) ? $x : $y;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&x_or_y;\n        if(eq_deeply($candidate->(7, 34, 12),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 5),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 33, 5212),33)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1259, 3, 52),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7919, -1, 12),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3609, 1245, 583),583)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(91, 56, 129),129)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 34, 1234),1234)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 0),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_151","nl":"oci_Latn","pl":"pl","prompt":"# Ignorar los nombres negatius o non entièrs.# Donat un array de nombres, tornatz la soma dels carrats dels nombres.# >>> double_the_difference([1, 3, 2, 0])\n# 10\n# >>> double_the_difference([-1, -2, 0])\n# 0\n# >>> double_the_difference([9, -2])\n# 81\n# >>> double_the_difference([0])\n# 0\n# If the input array is empty, return 0.\nsub double_the_difference {\n    my($lst) = @_;\n","canonical_solution":"sub double_the_difference {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    foreach my $num (@$lst) {\n        if ($num =~ \/^\\d+$\/ && $num % 2 != 0) {\n            $sum += $num ** 2;\n        }\n    }\n    \n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_152","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # la valor es 0, e se non, la valor es la diferéncia absoluda entre la devinh e la marca.# Torna un array de la meteissa longor que denota la distància de cada ipotèsi.# Se vos donan dos matrices de punts e d'idèas de longor egala, ont cada indici mòstra una correspondéncia.# Vos cal determinar se una persona a devinat corrèctament los resultats d'un nombre de partidas.# Definitivament val la pena de notar e de comparar.# Los sentiments e las pensadas qu'avètz en aquel moment son# Pensi que totes se sovenèm d' aquel sentiment quand lo resultat d' un long esperat# >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\nsub compare {\n    my($game, $guess) = @_;\n","canonical_solution":"sub compare {\n    my($game, $guess) = @_;\n    my @result;\n    \n    for my $i (0..$#$game) {\n        my $difference = abs($game->[$i] - $guess->[$i]);\n        push @result, $difference;\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_153","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # (la siá fòrça es -1).# tornar \"Slices.SErviNGSliCes\" perque \"SErviNGSliCes\" es l'extension mai fòrta # las extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] alara vos cal # Per exemple, se vos donan \"Slices\" coma la classa e un array de # causir la primièra dins l'arrondiment.# Se i a doas o mai extensions amb la meteissa fòrça, vos cal far lo test.# format: Nom de la classa. Nom de l'extension mai fòrta. # Vos cal trobar l'extension mai fòrta e tornar una cadena dins aquesta .# dins lo nom de l'extension, la fòrça es donada per la fraccion CAP - SM. # letras dins lo nom de l'extension, e SM serà lo nombre de letras minusculas # La fòrça de l'extension es la seguenta: Que CAP siá lo nombre de la majuscula # Las extensions son d'utilizar per cargar de classas suplementàrias a la classa.# Vos serà donat lo nom d'una classa (una cadena) e un array d'extensions.# >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n","canonical_solution":"sub Strongest_Extension {\n    my ($class_name, $extensions) = @_;\n    my $strongest = '';\n    my $max_strength = -1e9;\n\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n        my $sm = 0;\n\n        foreach my $char (split \/\/, $extension) {\n            if ($char =~ \/[A-Z]\/) {\n                $cap++;\n            } elsif ($char =~ \/[a-z]\/) {\n                $sm++;\n            }\n        }\n\n        my $strength = $cap - $sm;\n        \n        if ($strength > $max_strength) {\n            $max_strength = $strength;\n            $strongest = $extension;\n        }\n    }\n\n    return \"$class_name.$strongest\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_154","nl":"oci_Latn","pl":"pl","prompt":"# Vos son donats 2 mots. Vos cal tornar 1 se lo segond mot o una de sas rotacions es una soscadena del primièr mot.# >>> cycpattern_check(\"abcd\", \"abd\")\n# \"\"\n# >>> cycpattern_check(\"hello\", \"ell\")\n# 1\n# >>> cycpattern_check(\"whassup\", \"psus\")\n# \"\"\n# >>> cycpattern_check(\"abab\", \"baa\")\n# 1\n# >>> cycpattern_check(\"efef\", \"eeff\")\n# \"\"\n# >>> cycpattern_check(\"himenss\", \"simen\")\n# 1\nsub cycpattern_check {\n    my($a, $b) = @_;\n","canonical_solution":"sub cycpattern_check {\n    my($a, $b) = @_;\n    my $len = length($b);\n\n    for my $i (0 .. $len - 1) {\n        my $rotation = substr($b, $i) . substr($b, 0, $i);\n        return 1 if index($a, $rotation) != -1;\n    }\n\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cycpattern_check;\n        if(eq_deeply($candidate->(\"xyzw\", \"xyw\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"yello\", \"ell\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"whattup\", \"ptut\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"efef\", \"fee\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abab\", \"aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"winemtt\", \"tinem\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_155","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # Donat un entièr, torna un array qu'a lo nombre de chifras par e impar respectivament.# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n# [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n","canonical_solution":"my $evens = 0;\n    my $odds = 0;\n    $num = abs($num); # Handle negative numbers\n    foreach my $digit (split \/\/, $num) {\n        if ($digit % 2 == 0) {\n            $evens++;\n        } else {\n            $odds++;\n        }\n    }\n    return [$evens, $odds];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_156","nl":"oci_Latn","pl":"pl","prompt":"# Exemples: # Restriccions: 1 <= num <= 1000 # e lo tornar en minusculas.# Donat un entièr positiu, obtenguèt son equivalent en numèros romans coma una cadena, # >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number) = @_;\n","canonical_solution":"my @roman_numerals = (\n        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i'],\n    );\n\n    my $result = '';\n\n    for my $pair (@roman_numerals) {\n        my ($value, $roman) = @$pair;\n        while ($number >= $value) {\n            $result .= $roman;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n        if(eq_deeply($candidate->(19),\"xix\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"ccli\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"cdxxvi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(500),\"d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"iv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"xliii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"xc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"xciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"dxxxii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(900),\"cm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"m\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_157","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # 90 graus.# Un triangle rectangle es un triangle que l'un dels angles es drech o # los costats forman un triangle rectangle, \" \" autrament.# Donada la longor dels tres costats d'un triangle, torna 1 se los tres # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n","canonical_solution":"sub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    # Sort the sides to identify the potential hypotenuse\n    my @sides = sort { $a <=> $b } ($a, $b, $c);\n    # Check if the triangle satisfies Pythagorean theorem\n    return ($sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_158","nl":"oci_Latn","pl":"pl","prompt":"# Los caractèrs, tornan lo que ven primièr dins l'òrdre lexicografic.# Se mai d'una cadena a un nombre maxim de caractèrs unic # Lo matritz conten de mots diferents. Torna lo mot amb lo nombre maxim # Escriu una foncion qu'accepta un array de cadenas.# >>> find_max([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> find_max([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\nsub find_max {\n    my($words) = @_;\n","canonical_solution":"sub find_max {\n    my ($words) = @_;\n    my $max_word = '';\n    my $max_unique_chars = 0;\n    \n    foreach my $word (@$words) {\n        my %unique_chars = map { $_ => 1 } split \/\/, $word;\n        my $unique_count = keys %unique_chars;\n        \n        if ($unique_count > $max_unique_chars || ($unique_count == $max_unique_chars && $word lt $max_word)) {\n            $max_word = $word;\n            $max_unique_chars = $unique_count;\n        }\n    }\n    \n    return $max_word;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_159","nl":"oci_Latn","pl":"pl","prompt":"# Exemple: # se i a pas pro de ròcas, manjaràs totas las ròcas, mas auràs encara fam.# lo nombre de zèbras que vos demòran après los repaisses ] # vos cal tornar un arbre de [ nombre total de zèbras manjatas après vòstre manjar, # Mas ara vos cal manjar mai de zèbras per completar los repaisses de la jornada.# Sètz un conilh famós, e avètz ja manjat un cèrt nombre de zèbres,# >>> eat(5, 6, 10)\n# [11, 4]\n# >>> eat(4, 8, 9)\n# [12, 1]\n# >>> eat(1, 10, 10)\n# [11, 0]\n# >>> eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number, $need, $remaining) = @_;\n","canonical_solution":"sub eat {\n    my($number, $need, $remaining) = @_;\n    my $total_eaten = $number + $need;\n    if ($remaining >= $need) {\n        $remaining -= $need;\n    } else {\n        $total_eaten = $number + $remaining;\n        $remaining = 0;\n    }\n    return [$total_eaten, $remaining];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n        if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 10, 10),[11, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 1),[5, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_160","nl":"oci_Latn","pl":"pl","prompt":"# L'arrondiment d'operator a al mens un operator, e l'arrondiment d'operand a al mens dos operands.# L'operand es un array d'entièrs non negatius.# La longor de la matritz dels operators es egala a la longor de la matritz dels operands mens un.# Nota: # => resultat = 9 # Lo resultat = 2 + 3 * 4 - 5 # array = [2, 3, 4, 5] # lo operator['+', '*', '-'] # Exemple: # Exponenciacion (**) # Division del sòl ( \/\/) # Multiplicacion (*) # Subtraccion ( - ) # Adicion ( +) # Las operacions d'algebra de basa:# l'expression e tornar l'evaluacion d'aquela expression.# Lo segond array es un array de nombres entièrs. Utilizatz los dos arrays donats per bastir l'algèbra.# Donat dos operator de matritz, e un operand.sub do_algebra {\n    my($operator, $operand) = @_;\n","canonical_solution":"sub do_algebra {\n    my ($operator, $operand) = @_;\n    my $expression = $operand->[0];\n    \n    for my $i (0 .. $#$operator) {\n        my $op = $operator->[$i];\n        my $num = $operand->[$i + 1];\n        \n        if ($op eq '\/\/') {\n            $expression = \"int($expression \/ $num)\";\n        } else {\n            $expression .= \" $op $num\";\n        }\n    }\n    \n    return eval $expression;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&do_algebra;\n        if(eq_deeply($candidate->([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\/\/\", \"*\"], [7, 3, 4]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_161","nl":"oci_Latn","pl":"pl","prompt":"# Exemples # La foncion deu tornar la cadena resultanta.# Se la cadena conten pas cap de letras, invertir la cadena.# autrament lo gardatz coma es.# se s[i] es una letra, invertir lo cas de bas cap a naut o vice versa, # Vos es donada una cadena s.# >>> solve(\"1234\")\n# \"4321\"\n# >>> solve(\"ab\")\n# \"AB\"\n# >>> solve(\"#a@C\")\n# \"#A@c\"\nsub solve {\n    my($s) = @_;\n","canonical_solution":"sub solve {\n    my($s) = @_;\n    if ($s =~ \/[a-zA-Z]\/) {\n        $s =~ s\/([a-z])|([A-Z])\/defined $1 ? uc($1) : lc($2)\/ge;\n    } else {\n        $s = reverse($s);\n    }\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_162","nl":"oci_Latn","pl":"pl","prompt":"# Se 'text' es una cadena voida, torna undef. # Donada una cadena 'text', tornatz sa cadena d'equivaléncia de hash md5. # >>> string_to_md5(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\nsub string_to_md5 {\n    my($text) = @_;\n","canonical_solution":"use Digest::MD5 qw(md5_hex);\n\n    if ($text eq '') {\n        return undef;\n    }\n\n    return md5_hex($text);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_md5;\n        if(eq_deeply($candidate->(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_163","nl":"oci_Latn","pl":"pl","prompt":"# Per exemple: # e b, dins l'òrdre ascendent.# Donat dos entièrs positius a e b, tornatz las chifras parentas entre a e b.# >>> generate_integers(2, 8)\n# [2, 4, 6, 8]\n# >>> generate_integers(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers(10, 14)\n# []\nsub generate_integers {\n    my($a, $b) = @_;\n","canonical_solution":"sub generate_integers {\n    my($a, $b) = @_;\n    my @result;\n    my ($start, $end) = $a < $b ? ($a, $b) : ($b, $a);\n    \n    for my $i ($start..$end) {\n        push @result, $i if $i % 2 == 0;\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&generate_integers;\n        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 89),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"}]