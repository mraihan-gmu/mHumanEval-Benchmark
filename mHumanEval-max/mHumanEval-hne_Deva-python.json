[
    {
        "task_id": "HumanEval/0",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"जांचें कि संख्याओं के दी गइस सूची में, दी गइस सीमा के तुलना में एक-दूसर के करीब कोई दो संख्याएं हैं। उदाहरणः >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) गलत >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) सच \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ए फ़ंक्शन बर इनपुट एक स्ट्रिंग हवय जेमा नेस्टेड कोष्ठक के कईठन समूह हंवय । आपहर लक्ष्य ओ समूह ल अलग-अलग स्ट्रिंग्स में अलग करना हवय अउ ओके सूची ल वापस करना हवय । अलग-अलग समूह संतुलित हंवय (प्रत्येक खुला ब्रैकेट ठीक ले बंद हवय) अउ एक दूसर के भीतर नेस्टेड नी हंवय । इनपुट स्ट्रिंग में काखरो घलो जगह ल अनदेखा करव । उदाहरण: >>> अलग_पैरन_ग्रुप्सn",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"एक सकारात्मक फ्लोटिंग पॉइंट संख्या दिए गए हवय, एला पूर्णांक भाग (दिले गए संख्या ले छोटे सबले बडखा पूर्णांक) अउ दशमलव (बाकी भाग हमेशा 1 ले छोटे) में विभाजित करे जा सकत हवय। संख्या के दशमलव भाग ल लौटाएं। उदाहरण: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"आपके करा एक बैंक खाता म जमा अउ निकासी संचालन के एक सूची दिए जात हवय जेहर शून्य शेष राशि के साथ शुरू होत हवय। आपके काम एहर पता लगाना हवय कि काखरो घलो बिंदु म खाता शेष शून्य ले नीचे गिर जात हवय, अउ ओ बिंदु म फ़ंक्शन ल सत्य लौटा देना चाहि। अन्यथा एला झूठा लौटा देना चाहि। उदाहरण: >>> below_zero([1, 2, 3]) झूठा >>> below_zero([1, 2, -4, 5]) सत्य \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"इनपुट संख्याओं की एक दी गइस सूची बर, इ डेटासेट के माध्य के आसपास औसत पूर्ण विचलन की गणना करें। औसत पूर्ण विचलन प्रत्येक तत्व अउ एक केंद्र बिंदु (इस मामले में औसत) के बीच औसत पूर्ण अंतर हावे: एमएडी = औसत। एक्स - एक्स_मध्यम। उदाहरणः >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"इनपुट सूची के हर दुठन क्रमिक तत्वमन के बीच एक संख्या 'डिलिमीटर' डालें `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] ।\"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"इ फ़ंक्शन बर इनपुट एक स्ट्रिंग हवय जेहर अंतराल ले अलग करे गए कंस के लिए कईठन समूहमन के प्रतिनिधित्व करत हवय। समूह के प्रत्येक बर, कंस के गहरे स्तर के आउटपुट। उदाहरण बर (())) म अधिकतम दो स्तर होत हवय जबकि ((())) म तीन होत हवय। >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"स्ट्रिंग्स के एक इनपुट सूची ल केवल ओ मनखेमन बर फ़िल्टर करव जेमा दिए गए सबस्ट्रिंग >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] शामिल हवय ।\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"पूर्णांक के एक दिए गए सूची बर, एक सूची में जम्मो पूर्णांक के योग अउ उत्पाद के एक ट्यूपल लौटाएं। खाली योग 0 के बराबर होना चाहि अउ खाली उत्पाद 1 के बराबर होना चाहि। >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) ।\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांक के एक दिखीस सूची ले, अनुक्रम में दिए गए समय तक पाए गए अधिकतम तत्व के एक सूची उत्पन्न करव। >>> रोलिंग_मैक्स (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"सबले छोटे पालिंड्रोम खोजें जेहर एक आपूर्ति के स्ट्रिंग के साथ शुरू होत हवय। एल्गोरिदम विचार सरल हवय: - आपूर्ति के स्ट्रिंग के सबले लंबा पोस्टफिक्स खोजें जेहर एक पालिंड्रोम हवय। - स्ट्रिंग रिवर्स के स्ट्रिंग उपसर्ग के अंत में संलग्न करें जेहर पालिंड्रोमिक प्रत्यय ले पहली आता हवय। >>> make_palindrome ((('') ' ' >>> make_palindrome ((('catac') ' >>> make_palindrome ((('catac') ' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"परीक्षण यदि दिए गए स्ट्रिंग एक पालिंड्रोम हवय ।\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"इनपुट दु स्ट्रिंग ए अउ बी हवय जेमा केवल 1 अउ 0 शामिल हंवय । ए इनपुट म बाइनरी एक्सओआर निष्पादित करव अउ परिणाम ल स्ट्रिंग के रूप में घलो लौटाएं। >>> स्ट्रिंग_क्सोर (('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"स्ट्रिंग्स के सूची ले, सबले लंबा ल वापिस करही। एक ही लंबाई के कई स्ट्रिंग के मामले म पहला ल वापिस करही। इनपुट सूची खाली होए के मामले म कोई नी लहुटही। >>> सबले लंबा (([]) >>> सबले लंबा ((['ए', 'बी', 'सी']) 'ए' >>> सबले लंबा ((['ए', 'बीबी', 'सीसीसी']) 'सीसीसी' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"दो पूर्णांक ए अउ बी के सबले बडखा सामान्य विभाजक ल वापस करव >>> सबले बडखा_सामान्य_विभाजक ((3, 5) 1 >>> सबले बडखा_सामान्य_विभाजक ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"इनपुट स्ट्रिंग के सबले छोटे ले सबले लंबा तक के जम्मो उपसर्ग के सूची ल लौटाता हवय >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"0 ले शुरू होए वाले स्पेस-सीमित संख्या वाले स्ट्रिंग ल वापस करत हवय। >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"एक स्ट्रिंग दिए गए, पता लगाएं कि कितने विशिष्ट वर्ण (केस के बावजूद) एमे >>> count_distinct_characters ((('xyzXYZ') 3 >>> count_distinct_characters ((('जेरी') 4 शामिल हवय ।\"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"इ फ़ंक्शन में इनपुट एक स्ट्रिंग हवय जो एक विशेष एएससीआईआई प्रारूप में संगीत नोट्स के प्रतिनिधित्व करत हवय। आपके काम एहर हवय कि कई बीट्स के अनुरूप पूर्णांक स्ट्रिंग सूची के पार्स करना हवय: 'ओ' नोट, आखिरी चार बीट्स 'ओबीसी' - आधा नोट, आखिरी दो बीट्स 'ओबीसी' - क्वार्टर नोट, आखिरी एक बीट्स >>> पार्स_म्यूजिक 'ओ' ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसीओ ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीओ ओएससीओ ओएससीआईसीओ ओएससीओ ओएससीओ ओएससीओओ ओएससीओओ ओएससीओओ ओएससीओसीओसीओसी ओएससीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओ\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"मूल स्ट्रिंग में दिए गए सबस्ट्रिंग के कती बार मिल सकत हवय। ओवरलैपिंग केस के गिनती करव। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"इनपुट 'शून्य' ले 'नौ' तक संख्याओं के एक अंतरिक्ष-सीमित स्ट्रिंग हवय। वैध विकल्प 'शून्य', 'एक', 'दू', 'तीन', 'चार', 'पांच', 'छह', 'सात', 'आठ' अउ 'नौ' हवय। संख्याओं के साथ स्ट्रिंग ल छोटे ले सबले बड़े तक क्रमबद्ध करके लौटाएं >>> sort_numbers ((('तीन एक पांच') 'एक तीन पांच' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"संख्याओं के एक आपूर्ति की गई सूची ले (लंबाई में कम से कम दो) दो का चयन करें अउ एक दूसरे के करीब दो लौटाएं अउ उन्हें क्रम में लौटाएं (छोटी संख्या, बड़ी संख्या) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) ।\"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"संख्याओं की सूची दी गइस हावे (कम से कम दो तत्वों की), उस सूची में एक रैखिक परिवर्तन लागू करव, ताकि सबसे छोटी संख्या 0 बन जाए अउ सबसे बड़ी 1 बन जाए >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] ।\"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"केवल पूर्णांक बर कन्हु पायथन मानों के सूची के फिल्टर >>> फिल्टर_इंटरजेस ((['ए', 3.14, 5]) [5] >>> फिल्टर_इंटरजेस (([1, 2, 3, 'एबीसी', {}, []]) [1, 2, 3] ।\"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"दिए गए स्ट्रिंग के वापसी लंबाई >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"एक दिए गए संख्या एन बर, सबले बडखा संख्या के खोज करव जेहर एन के बराबर विभाजित करत हवय, एन ले छोटे >>> सबले बडखा_डिवायर ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"दिए गए पूर्णांक के प्रमुख कारकमन के सूची ल छोटे ले सबले बड़े क्रम में लौटाएं। प्रत्येक कारक ल कारककरण में कतका बार प्रकट होए के अनुरूप संख्या के संख्या के सूचीबद्ध करे जाना चाहि। इनपुट संख्या के जम्मो कारकमन के उत्पाद के बराबर होना चाहि >>> कारक करे [2, 2, 2] >>> कारक करे [25], [5, 5] >>> कारक करे [2, 5, 7] ।\"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांक के सूची ले, जम्मो तत्वमन के हटाएं जेहर एक ले ज्यादा बार उत्पन्न होत हंवय । इनपुट में तत्वमन के क्रम के समान रखें। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4]\"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"एक दिए गए स्ट्रिंग बर, छोटे अक्षर ल अपरकेस अउ अपरकेस ल लीनर म फ्लिप करव। >>> flip_case ((('हैलो') 'हैलो' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"स्ट्रिंग के सूची ल एक स्ट्रिंग म संयोजित करव >>> संयोजित करव (([]) ' ' >>> संयोजित करव ((['ए', 'बी', 'सी']) 'एबीसी' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"केवल उन स्ट्रिंग्स बर एक इनपुट सूची के फ़िल्टर करव जेहर दिए गए उपसर्ग के साथ शुरू होत हंवय । >>> उपसर्ग द्वारा फ़िल्टर_फिल्टर_फिल्टर{\", \"बीसीडी\", \"सीडीई\", \"सरणी\", \"ए\") ।\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"सूची में केवल सकारात्मक संख्यामन ल लौटाएं। >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) [5, 3, 2, 3, 9, 123, 1] ।\"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"यदि दिए गए संख्या प्राइम हवय, त सच ल लौटाएं, अउ आने रहिस गलत। >>> प्राइम हवय () 6) गलत >>> प्राइम हवय () 101) सच >>> प्राइम हवय () 11) सच >>> प्राइम हवय () 13441) सच >>> प्राइम हवय () 61) सच >>> प्राइम हवय () 4) गलत >>> प्राइम हवय () 1) गलत ।\"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"एक्स एक बहुपद के गुणांक हंवय । जेमा पॉली (x) = 0 हवय। जेमा शून्य केवल शून्य बिंदु ल वापस करत हवय, भले ही बहुत ज्यादा हों। एखर अलावा, जेनो केवल गुणांक के संख्या अउ सबले बडखा गैर-शून्य गुणांक के साथ सूचीबद्ध करत हवय काबरकि ए समाधान के गारंटी देत हवय। >>> गोल (x) = 1 + 2x -0.5 >>> गोल (x) = 6, 11, -6, 1), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3 1.0 \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"बिंदु एक्स में गुणांक एक्स के साथ बहुपद का मूल्यांकन करता है। वापसी एक्सएस [0] + एक्सएस [1] * एक्स + एक्सएस [1] * एक्स ^ 2 + .... एक्सएस [एन] * एक्स ^ एन \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"इ फ़ंक्शन एक सूची ल लेता हावे अउ एक सूची ल वापस करत हावे जैसे कि एल 'एल के समान हावे जो तीन से विभाजित नी होत हावे, जबकि तीन से विभाजित होत हावे, लेकिन क्रमबद्ध होत हावे। >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] ।\"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"सूची म छांटे गए अद्वितीय तत्व ल वापस करव >>> अद्वितीय (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"सूची में अधिकतम तत्व लौटाएं। >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"संख्या 7 के पूर्णांक में प्रकट होए के संख्या ल लौटाएं जेहर 11 या 13 से विभाजित हंवय । >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"इ फ़ंक्शन एक सूची लेता हावे अउ एक सूची ल वापस करत हावे जैसे कि 'ल' विषम सूचकांकों में 'ल' के समान हावे, जबकि यहां तक कि सूचकांकों में इके मूल्यों ल 'ल' के यहां तक कि सूचकांकों के मूल्यों के बराबर हावे, लेकिन क्रमबद्ध। >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"इनपुट स्ट्रिंग के रूप में ले जात हवय जेला एन्कोड_साइक्लिक फ़ंक्शन के साथ एन्कोड करे जात हवय। डिकोड स्ट्रिंग ल वापस करत हवय।\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"तीन वर्णों के चक्र समूहों द्वारा एन्कोडेड स्ट्रिंग ल लौटाता हवय।\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib एक फाइबोनैचि संख्या के एन-वें संख्या ल वापस करत हवय अउ एहर भी प्राइम हवय। >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero पूर्णांक के सूची ल इनपुट के रूप में लेता हवय। ए सच ल लौटाता हवय यदि सूची में तीन अलग-अलग तत्व हंवय जेहर शून्य के योग हंवय, अउ अन्यथा गलत हवय। >>> triples_sum_to_zero([1, 3, 5, 0]) गलत >>> triples_sum_to_zero[(1, 3, -2, 1]) सच >>> triples_sum_to_zero([1, 2, 3, 7]) गलत >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) सच >>> triples_sum_to_zero[1]) गलत \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"एक सड़क के कल्पना करव जऊन एक पूरा तरह ले सीधा अनंत लम्बा रेखा हे. n कार बाये ले दहिने चलत हें; एकेच बखत, n कार के एक अलग सेट दाये ले बाये चलत हें. कार के दु सेट एक दूसर ले अब्बड दूरिहा होके सुरू होथें. सब कार एक समान गति म चले जाथे. दु कार के टक्कर तब होथे जब एक कार जऊन बाये ले दहिने चलत हे एक कार ल टक्कर देथे जऊन दाये ले बाये चलत हे. हालांकि, कार अनगिनत रूप ले मजबूत अऊ मजबूत हे; नतीजतन, ओ अपन चाल म चलत रहिथे मानो ओ टक्कर नइ देय हे. ए फंक्शन ह अइसन टक्कर के संख्या ल आउटपुट करथे.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"1. के साथ तत्वों के साथ सूची लौटाएं >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"जोड़े_सम_टू_शून्य पूर्णांक के सूची ल इनपुट के रूप में लेता हवय। ए सच ल वापस करत हवय यदि सूची में दु अलग-अलग तत्व हंवय जेहर शून्य के योग हंवय, अउ अन्यथा गलत हवय। >>> जोड़े_सम_टू_शून्य (([1, 3, 5, 0]) गलत >>> जोड़े_सम_टू_शून्य (([1, 3, -2, 1]) गलत >>> जोड़े_सम_टू_शून्य (([1, 2, 3, 7]) गलत >>> जोड़े_सम_टू_शून्य (([2, 4, -5, 3, 5, 7]) सच >>> जोड़े_सम_टू_शून्य [1]) गलत \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"रूपांतरण के बाद स्ट्रिंग प्रतिनिधित्व लौटाएं। आधार संख्या 10 ले कम हवय। >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"एक त्रिकोण बर एक पक्ष अउ उच्च वापसी क्षेत्र के लंबाई दी गइस हवय। >>> त्रिकोण_क्षेत्र\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"एफआईबी 4 संख्या अनुक्रम एक अनुक्रम हवय जेहर फिबोनैकी अनुक्रम के समान हवय जेला निम्नानुसार परिभाषित करे गए हवय: एफआईबी 4 ((0) -> 0 एफआईबी 4 ((1) -> 0 एफआईबी 4 ((2) -> 2 एफआईबी 4 ((3) -> 0 एफआईबी 4 ((एन) -> एफआईबी 4 ((एन -1) + एफआईबी 4 ((एन -2) + एफआईबी 4 ((एन -3) + एफआईबी 4 ((एन -4)) का उपयोग करके एफआईबी 4 संख्या अनुक्रम के एन-वें तत्व के गणना करे बर एक फ़ंक्शन लिखें। रिकर्सन के उपयोग झन करव। >>> एफआईबी 4 ((5) 4 >>> एफआईबी 4 ((6) >>> 8 एफआईबी 4 ((7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"सूची में तत्वों के मध्यवर्ती वापसी l. >>> मध्यवर्ती (([3, 1, 2, 4, 5]) 3 >>> मध्यवर्ती (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"जांचता हवय कि काय दिए गए स्ट्रिंग एक पालिंड्रोम हवय >>> is_palindrome (('') सच हवय >>> is_palindrome (('अबा') सच हवय >>> is_palindrome (('अअअआआ') सच हवय >>> is_palindrome (('ज़बसीडी') गलत हवय ।\"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"वापसी 2 ^ n मॉडुलो पी (संख्याओं के बारे में जागरूक रहें) । >>> मॉडप (३, ५) 3 >>> मॉडप (१०१, १०१) २ >>> मॉडप (०, १०१) १ >>> मॉडप (३, ११) ८ >>> मॉडप (१००, १०१) १ ।\"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"एन्कोड_शिफ्ट फ़ंक्शन के साथ इनपुट स्ट्रिंग के रूप में एन्कोड करे जात हवय। डिकोड स्ट्रिंग ल वापस करत हवय।\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"वर्णमाला में हर वर्ण के 5 ले स्थानांतरित करके एन्कोडेड स्ट्रिंग ल लौटाता हवय।\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels एक फ़ंक्शन हवय जेहर स्ट्रिंग ल लेता हवय अउ बिना स्वर के स्ट्रिंग ल वापस करत हवय। >>> remove_vowels ((') ' ' >>> remove_vowels ((') 'abcdef \\ nghijklm') 'bcdf \\ nghjklm' >>> remove_vowels ((') 'abcdef') 'bcdf' >>> remove_vowels ((') 'aaaaa') ' ' >>> remove_vowels ((') 'aaBAA') ' B' >>> remove_vowels ((') 'zbcd') 'zbcd '\"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"यदि सूची में जम्मो संख्याएं दहलीज के नीचे हवय तो सच ल लौटाएं। >>> नीचे_थ्रेसहोल्ड{1, 2, 4, 10], 100) सच >>> नीचे_थ्रेसहोल्ड{1, 20, 4, 10], 5) गलत ।\"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"दो संख्याओं के जोड़ें x अउ y >>> जोड़ें ((2, 3) 5 >>> जोड़ें ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"जांचें कि क्या दो शब्दों में समान वर्ण हैं। >>> same_chars ((('eabcdzzzz', 'dddzzzzzzdeddabc') सच >>> same_chars ((('abcd', 'dddddddddabc') सच >>> same_chars ((('dddddddabc', 'abcd') सच >>> same_chars ((('eabcd', 'dddddddddabc') गलत >>> same_chars ((('abcd', 'dddddddabddce') गलत >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') गलत \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"एन-थ फिबोनाची संख्या ल लौटाएं। >>> फाइब 10 55 >>> फाइब 1 1 >>> फाइब 8 21\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"ब्रैकेट \"<\" अउ \">\" के स्ट्रिंग हवय। यदि प्रत्येक ओपनिंग ब्रैकेट में एक संबंधित क्लोजिंग ब्रैकेट हवय तो सही ल लौटाएं। >>> सही_ब्रेकेटिंग ({\"<\") गलत >>> सही_ब्रेकेटिंग ({\"<>\") सच >>> सही_ब्रेकेटिंग ({\"<>) सच >>> सही_ब्रेकेटिंग ({\"<>) गलत \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"रिटर्न सही एहर सूची तत्वमन ल मोनोटोनिक रूप ले बढ़त या घटत हवय। >>> मोनोटोनिक (([1, 2, 4, 20]) सही >>> मोनोटोनिक (([1, 20, 4, 10]) गलत >>> मोनोटोनिक (([4, 1, 0, -10)) सच \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"दो सूचियों बर क्रमबद्ध अद्वितीय सामान्य तत्व ल लौटाओ। >>> सामान्य ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> सामान्य ([5, 3, 2, 8], [3, 2]) [2, 3] ।\"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"एन के सबले बडखा प्राइम फैक्टर ल वापस कर दिस। एन > 1 मान लें अउ प्राइम नी हवय। >>> सबले बडखा_प्राइम_फैक्टर ((१३१९५) २९ >>> सबले बडखा_प्राइम_फैक्टर ((२०४८) २ \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n एक फ़ंक्शन हवय जेहर 1 ले n तक के संख्यामन के योग हवय। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 ।\"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets \"(\" अउ \"\") के स्ट्रिंग हवय। यदि प्रत्येक ओपनिंग ब्रैकेट में एक संबंधित क्लोजिंग ब्रैकेट हवय तो सही लौटाएं। >>> सही_ब्रेकेटिंग ((\"(\") गलत >>> सही_ब्रेकेटिंग ((\")) सच >>> सही_ब्रेकेटिंग ((\"() सही >>> सही_ब्रेकेटिंग ((\") गलत \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"एक्स एक बहुपद के गुणांक के प्रतिनिधित्व करत हवय। एक्सएस [0] + एक्सएस [1] * एक्स + एक्सएस [2] * एक्स ^ 2 + .... ए बहुपद के व्युत्पन्न ल उसी रूप में लौटाएं। >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"फिबफिब नंबर अनुक्रम फिबोनैकी अनुक्रम के समान एक अनुक्रम हवय जेला निम्नानुसार परिभाषित करे गए हवय: फाइबफिब (०) == 0 फाइबफिब (०) == 0 फाइबफिब (१) == 0 फाइबफिब (२) == 1 फाइबफिब (एन) == फाइबफिब (एन -1) + फाइबफिब (एन -2) + फाइबफिब (एन -3) । कृपया एक फ़ंक्शन लिखें ताकि फाइबफिब नंबर अनुक्रम के एन-वें तत्व के कुशलतापूर्वक गणना करे जा सके। >>> फाइबफिब (१) (१) 0 >>> फाइबफिब (५) 4 >>> फाइबफिब (८) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"एक फ़ंक्शन लिखें जो इनपुट के रूप में एक शब्द का प्रतिनिधित्व करे वाली स्ट्रिंग लेता है और स्ट्रिंग में स्वरों की संख्या लौटाता है। इस मामले में स्वर 'ए', 'ई', 'आई', 'ओ', 'यू' हैं। यहां, 'वाई' भी एक स्वर है, लेकिन केवल जब यह दिए गए शब्द के अंत में होता है। उदाहरणः >>> स्वरों की गिनती (अ) (एबीसीडी) 2 >>> स्वरों की गिनती (एसीडीई) 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"अउ जादा टेस्ट केस जोड़े।\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"परिपत्र पूर्णांक x के अंकों के स्थानांतरित करव, स्थानांतरित करके अंकों के दाईं ओर स्थानांतरित करव अउ परिणाम ल स्ट्रिंग के रूप में लौटाएं। यदि स्थानांतरण > अंकों के संख्या, अंकों के उल्टा लौटाएं। >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"कार्य एक फ़ंक्शन लिखें जेहर इनपुट के रूप में स्ट्रिंग लेता हवय अउ केवल शीर्ष वर्णों के योग ल वापस करत हवय 'एएससीआईआई कोड। उदाहरणः digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"इ कार्य में, आप ल एक स्ट्रिंग दी जाही जो सेब अउ संतरा के संख्या के प्रतिनिधित्व करत हावे जो फल की एक टोकरी में वितरित की जात हावे इ टोकरी में सेब, संतरा अउ आम के फल शामिल हावें। स्ट्रिंग के दिए गए जो संतरा अउ सेब के कुल संख्या का प्रतिनिधित्व करत हावे अउ टोकरी में फल की कुल संख्या का प्रतिनिधित्व करत हावे टोकरी में आम के फल की संख्या लौटाओ। उदाहरण बरः fruit_distribution\"5(सेब अउ 6 संतरा\", 19) -> 19 - 5 - 6 = 8 फल_वितरण\"0 सेब अउ 1 संतरा\", 3) -> 3 - 0 - 1 = 2 फल_वितरण\"2 सेब अउ 3 संतरा\", 100) -> 100 - 2 - 3 = 95 फल_वितरण\"100 सेब अउ 1 संतरा\", 1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"एक सरणी के प्रतिनिधित्व करत होए जेहर एक पेड़ के शाखा के प्रतिनिधित्व करत हवय जेमा गैर-नकारात्मक पूर्णांक नोड्स हंवय , आपके काम नोड्स में ले एक ल चुनना हवय अउ एला वापस करना हवय। चुनए गए नोड सबले छोटे सम मूल्य के साथ नोड होना चाहि। यदि एकेच्च सबले छोटे सम मूल्य के साथ कईठन नोड्स पाए जात हंवय , तो नोड ल लौटाए जात हवय जेमा सबले छोटे इंडेक्स हवय। चुनए गए नोड ल एक सूची में लौटाए जाना चाहि, [smallest_value, इके इंडेक्स ], यदि कोई भी मूल्मन नी हंवय या दिए गए सरणी खाली हवय, तो लौटाए जात हवय []। उदाहरण 1: इनपुटः [4,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 के सबले छोटे सम मूल्य हवय, अउ 2 के सबले छोटे इंडेक्स हवय। उदाहरण 2: इनपुटः [1,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 के सबले छोटे मूल्य हवय, अउ 2 के सबले छोटे इंडेक्स हवय। उदाहरण 3: इनपुटः [] आउटपुटः [] इनपुटः [4,5, 3, 4,] आउटपुटः 0, 1 आउटपुटः 0, आउटपुटः 1 निर्दिष्ट नोड ल सबले छोटे सूचक के साथ लौटाए जात हवय, लेकिन दू शून्य मान हवय। उदाहरणः * लंबाई = शून्य, लेकिन सबले छोटे नोड हवय, जेमा शून्य हवय। * सबले छोटे नोडः 1 * शून्य, लेकिन शून्य मान हवय।\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''आपके करा धनात्मक पूर्णांक के एक गैर-खाली सूची हवय। सबले बडखा पूर्णांक ल लौटाएं जेहर शून्य ले ज्यादा हवय, अउ पूर्णांक के मूल्य के बराबर या उससे अधिक आवृत्ति हवय। एक पूर्णांक के आवृत्ति सूची में आहर के संख्या हवय। यदि ऐसा कोई मूल्य मौजूद नी हवय, तो -1 लौटाएं। उदाहरणः खोजें: (([4, 1, 2, 2, 3, 1]) == 2 खोजें ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 खोजें ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''पूर्णांक के सूची दिए गए, अजीब क्रम में सूची लौटाएं। अजीब सॉर्टिंग, जब आप न्यूनतम मूल्य के साथ शुरू करते हैं, तो शेष पूर्णांक के अधिकतम, फिर न्यूनतम, आदि। उदाहरण: अजीब_सॉर्ट_लिस्ट (([1, 2, 3, 4]) == [1, 4, 2, 3] अजीब_सॉर्ट_लिस्ट (([5, 5, 5, 5]) == [5, 5, 5, 5] अजीब_सॉर्ट_लिस्ट (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''एक त्रिकोण के तीन किनारों के लंबाई ल देखते हुए। यदि तीन पक्ष एक वैध त्रिकोण बनाते हावें तो त्रिकोण के क्षेत्रफल ल 2 दशमलव बिंदुओं तक गोल करिस जाए। अन्यथा -1 लहुटाना तीन पक्ष एक वैध त्रिकोण बनाते हावें जब काखरो भी दो पक्षों का योग तीसरी पक्ष ले अधिक होत हावे। उदाहरण: त्रिकोण_क्षेत्र (३,४,५) == 6.00 त्रिकोण_क्षेत्र (१,२,१०) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''एक फ़ंक्शन लिखें जेहर सच ल वापस करत हवय यदि ऑब्जेक्ट क्यू उड़ही, अउ अन्यथा गलत हवय। ऑब्जेक्ट क्यू उड़ही यदि एहर संतुलित हवय (एहर एक पालिंड्रोमिक सूची हवय) अउ एखर तत्वमन के योग अधिकतम संभव वजन डब्ल्यू ले कम या बराबर हवय। उदाहरण: will_it_fly (([1, 2], 5) â -> गलत # 1 + 2 अधिकतम संभव वजन ले कम हवय, लेकिन एहर असंतुलित हवय। will_it_fly (([3, 2, 3], 1) â -> गलत # एहर संतुलित हवय, लेकिन 3 + 2 + 3 अधिकतम संभव वजन ले ज्यादा हवय। will_it_fly (([3, 2, 3], 9) â -> सच # 3 + 2 3 अधिकतम संभव वजन ले कम हवय, अउ एहर संतुलित हवय। will_it_fly ((([3], 5) â -> सच # 3 अधिकतम संभव वजन ले कम हवय, अउ एहर संतुलित हवय।'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"पूर्णांक के एक सरणी एआर दिए गए हवय, ए तत्वमन के न्यूनतम संख्या के पता लगावव कि सरणी पालिंड्रोमिक बनइन बर काय बदले के जरूरत हवय। एक पालिंड्रोमिक सरणी एक सरणी हवय जेला पाछू अउ आघु समान पढ़ा जात हवय। एक बदलाव में, आप एक तत्व ल काखरो घलो दूसर तत्व में बदल सकत हंवय । उदाहरण बर: smallest_change ([1,2,3,5,4,7,9,6]) == 4 smallest_change ([1,2,3,4,3,2,2]) == 1 smallest_change ([1,2,3,2,1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''एक फ़ंक्शन लिखें जेहर स्ट्रिंग के दु सूचीमन ल स्वीकार करत हवय अउ सूची ल वापस करत हवय जेमा सूची के जम्मो स्ट्रिंग में दूसर सूची ले कम संख्या में वर्ण होत हंवय । यदि दुनों सूची में वर्ण के समान संख्या हवय, तो पहली सूची ल वापस कर दिस । उदाहरण कुल_मच ({\\\\displaystyle {\\\\sqrt {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"एक फ़ंक्शन लिखें जेहर सच ल वापस करत हवय यदि दिखीस संख्या 3 प्राइम नंबरों के गुणा हवय अउ आने रहिस गलत हवय। जानकार हवय कि (ए) 100 ले कम हवय। उदाहरण: is_multiply_prime(30) == सच 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"आपके काम ए फंक्शन लिखे बर हवय जेहर सच ल वापस करत हवय यदि कोई संख्या एक्स एन के एक साधारण शक्ति हवय अउ आने मामलामन में गलत हवय। एक्स एन के एक साधारण शक्ति हवय यदि एन ** इंट = एक्स उदाहरण बर: is_simple_power (१, ४) => सच is_simple_power (२, २) => सच is_simple_power (८, २) => सच is_simple_power (३, २) => गलत is_simple_power (३, १) => गलत is_simple_power (५, ३) => गलत \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''एक फ़ंक्शन लिखें जेहर एक पूर्णांक ए लेता हवय अउ सच ल वापस करत हवय यदि एहर इंजेगर कुछु पूर्णांक संख्या के घन हवय। नोटः आप एहर मान सकत हंवय कि इनपुट हमेशा मान्य होत हवय। उदाहरणः इस्क्यूब (क) ==> सच इस्क्यूब (क) ==> गलत इस्क्यूब (क) -1 (क) ==> सच इस्क्यूब (क) 64) ==> सच इस्क्यूब (क) 0 (क) ==> सच इस्क्यूब (क) 180 (क) गलत '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"आप ल एक फ़ंक्शन लिखे बर काम करे गए हवय जेहर एक हेक्साडेसिमल संख्या ल स्ट्रिंग के रूप में प्राप्त करत हवय अउ हेक्साडेसिमल अंकों के संख्या के गिनती करत हवय जेहर प्राइम होत हंवय (प्राइम नंबर, या एक प्राइम, 1 ले ज्यादा प्राकृतिक संख्या हवय जेहर दुठन छोटे प्राकृतिक संख्या के उत्पाद नी होए) । हेक्साडेसिमल अंकों के 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ए, बी, सी, डी, ई, एफ होत हंवय । प्राइम नंबर 2, 3, 5, 7, 11, 13, 17 ..., ए हवय। तो आप ल एहर निम्नलिखित अंकों के संख्या निर्धारित करना होत हवय: 2, 3, 5, 7, बी (= दशमलव 11), डी (= दशमलव 13) । नोटः आप एहर मान सकत हंवय कि इनपुट हमेशा सही या खाली स्ट्रिंग हवय, अउ प्रतीक ए, बी, सीडी, ईएफ, एबी हमेशा अपरकेस होत हंवय । उदाहरण: नमः \"एबी\" आउटपुट के लिए नमः 1. बर \"एबी\" आउटपुट बर 1 होना चाहि। \"एबी\" आउटपुट बर 2 होना चाहि। \"एबी\" आउटपुट बर नमः 1. बर \"एबी\" आउटपुट बर 1 होना चाहि। \"एबी\" आउटपुट बर 2 होना चाहि। \"एबी\" आउटपुट बर 2 होना चाहि। \"एबी\" आउटपुट बर 2।\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"आपके करा दशमलव रूप में एक संख्या दी जा रही हवय अउ आपके कार्य एला द्विआधारी प्रारूप में परिवर्तित करना हवय। फ़ंक्शन के एक स्ट्रिंग लौटाए जाना चाहि, प्रत्येक वर्ण के साथ एक द्विआधारी संख्या के प्रतिनिधित्व करना चाहि। स्ट्रिंग में प्रत्येक वर्ण '0' या '1' होही। स्ट्रिंग के शुरुआत में अउ अंत में वर्णों के एक अतिरिक्त जोड़ी 'db' होही। अतिरिक्त वर्ण प्रारूप के साथ मदद करे बर वहां हंवय। उदाहरणः दशमलव_टू_बाइनरी ((15) # \"db1111db\" ल लौटाता हवय दशमलव_टू_बाइनरी (32)) # \"db100000db\" ल लौटाता हवय\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"आप ल एक स्ट्रिंग एस दिए जात हवय। आपके काम ए जांचना हवय कि स्ट्रिंग खुश हवय या नी। एक स्ट्रिंग खुश हवय यदि एखर लंबाई कम ले कम 3 हवय अउ प्रत्येक 3 लगातार अक्षर अलग हवय उदाहरण बर: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (e) => False is_happy (f) => False is_happy (x) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ए सेमेस्टर के आखिरी हफ्ता हे अऊ शिक्षक ल छात्र मन ल ग्रेड देना हे। शिक्षक ह ग्रेडिंग बर अपन खुद के एल्गोरिथ्म बनात हे। एक ठन समस्या हे कि, ओ ह ग्रेडिंग बर उपयोग करे गे कोड ल भुला गे हे। ओ ह तोला कुछू छात्र बर जीपीए के सूची देहे हे अऊ तोला एक फंक्शन लिखे बर हे जऊन ह निम्नलिखित तालिका के उपयोग करके लेटर ग्रेड के सूची ल आउटपुट कर सकथे: जीपीए । लेटर ग्रेड 4.0 ए+ > 3.7 ए > 3.3 ए- > 3.0 बी+ > 2.7 बी > 2.3 बी- > 2.3 बी+ > 2.0 सी+ > 1.7 सी > 1.3 सी- > 1.0 डी+ > 0.7 डी > 0.0 डी- 0.0 ई उदाहरण: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['ए+', 'बी', 'सी-', 'सी', 'ए'] -'\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"एक फ़ंक्शन लिखें जेहर स्ट्रिंग लेता हवय अउ यदि स्ट्रिंग लंबाई एक प्रमुख संख्या हवय तो सत्य ल वापस करत हवय या अन्यथा गलत उदाहरण prime_length{\"हैलो\") == True prime_length{\"एबीसीडीसीबीए\") == True prime_length{\"किट\") == True prime_length{\"ऑरेंज\") == गलत \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"एक सकारात्मक पूर्णांक एन दिए गए, एन-डिजिट सकारात्मक पूर्णांक के संख्या के गिनती ल वापस करत हवय जेहर 1 के साथ शुरू या समाप्त होत हवय।\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"उदाहरण बर एन = 1000 बर, अंकों के योग 1 होही आउटपुट \"1\" होना चाहि। एन = 150 बर, अंकों के योग 6 होही आउटपुट \"110\" होना चाहि। एन = 147 बर, अंकों के योग 12 होही आउटपुट \"1100\" होना चाहि। चरः @ एन पूर्णांक बाधाओं: 0 â‰¤ एन â‰¤ 10000. आउटपुटः बाइनरी संख्या के एक स्ट्रिंग \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"पूर्णांक के एक गैर-खाली सूची के कारण, सम तत्वों के जोड़ें जो विषम सूचकांक में हावें। उदाहरणः add (([4, 2, 6, 7]) ==> 2 ।\"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"एक फ़ंक्शन लिखें जेहर एक स्ट्रिंग लेता हवय अउ एखर एक आदेशित संस्करण ल वापस करत हवय। स्ट्रिंग के आदेशित संस्करण, एक स्ट्रिंग हवय जहां जम्मो शब्द (स्पेस द्वारा अलग) एक नवा शब्द द्वारा प्रतिस्थापित करे जात हवय जहां जम्मो वर्णों ल एएससीआई मूल्य के आधार म आरोही क्रम में व्यवस्थित करे जात हवय। नोट: आप ल वाक्य में शब्दों अउ रिक्त स्थान के क्रम रखना चाहि। उदाहरण बर: एंटी_शफ्ल ((('हाय') रिटर्न 'हाय' एंटी_शफ्ल ((('हैलो') रिटर्न 'एलोलो' एंटी_शफ्ल (('हैलो वर्ल्ड! !! ')) रिटर्न 'हैलो ! डलर '\"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"आप ल एक 2 आयामी डेटा, एक नेस्टेड सूची के रूप में, जो मैट्रिक्स के समान हवय, हालांकि, मैट्रिक्स के विपरीत, प्रत्येक पंक्ति में कॉलम के एक अलग संख्या हो सकत हवय। lst, अउ पूर्णांक x दिए गए, सूची में पूर्णांक एक्स ढूंढें, अउ ट्यूपल के सूची ल वापस कर दें, [(x1, y1), (x2, y2) ...] ए तरह कि प्रत्येक टपल एक निर्देशांक हवय - (पंक्ति, कॉलम), 0 ले शुरू होत हवय। क्रमबद्ध निर्देशांक शुरुआत में पंक्तियों के क्रम में क्रमबद्ध। उदाहरणः प्राप्त_पंक्ति [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), 2 (0, 0), 1 (), 1 (), 1 (), 1 (), 1 (), 1 (), 2 ()) == पंक्ति ([0, 1, 1, 2, 3, 2, 3) ] == 2, 2, 2 ())\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"गैर-नकारात्मक पूर्णांक के एक सरणी दिए गए हवय, सॉर्टिंग के बाद दिए गए सरणी के एक प्रति लौटाओ, आप दिए गए सरणी ल आरोही क्रम में सॉर्ट करहू यदि योग (पहला इंडेक्स मूल्य, आखिरी इंडेक्स मूल्य) विषम हवय, या एला अवरोही क्रम में सॉर्ट करहू यदि योग (पहला इंडेक्स मूल्य, आखिरी इंडेक्स मूल्य) सम हवय। नोटः * दिए गए सरणी ल न बदलें। उदाहरणः * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"एक फ़ंक्शन एन्क्रिप्ट बनाएँ जेहर एक स्ट्रिंग ल तर्क के रूप में लेत हवय अउ वर्णमाला ल घुमाए के साथ एक स्ट्रिंग के एन्क्रिप्टेड ल वापस करत हवय। वर्णमाला ल ए तरह ले घुमाया जाना चाहि कि अक्षरों ल दो स्थानों म गुणा करे बर नीचे ले जाया जाना चाहि। उदाहरण बर: एन्क्रिप्ट (ए) 'आई') 'एलएम' एन्क्रिप्ट (एएसडीएफजीजीजेकेएल) 'ईडब्ल्यूजेकेएल' एन्क्रिप्ट (जीएफ) 'केजे' एन्क्रिप्ट (ईटी) 'आईएक्स' ल वापस करत हवय।\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"आप ल पूर्णांक के एक सूची दिए जात हवय। एक फ़ंक्शन लिखें next_smallest () जेहर सूची के दूसर सबले छोटे तत्व ल वापस करत हवय। यदि ए तरह के कोई तत्व नी हवय तो कोई घलो नी लौटाए। next_smallestn",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"आप ल सब्द के एक स्ट्रिंग दिस जाही, अऊ आप के काम बोरडॉम्स के संख्या के गनना हे। एक बोरडॉम एक वाक्य हे जऊन \"आई\" शब्द ले सुरू होथे। वाक्य '.', '?' या '! ' ले अलग-अलग हो जाथे। उदाहरण बर: >>> is_bored(\"हैलो वर्ल्ड\") 0 >>> is_bored(\"आकाश नीला हे। सूरज चमकत हे। मोला ए मौसम पसंद हे\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''एक फ़ंक्शन बनाएँ जो 3 संख्याओं ल लेता हवय। यदि संख्याओं में ले एक अन्य दो के योग के बराबर हवय, तो सही लौटाता हवय, अउ जम्मो संख्या पूर्णांक होत हंवय। कन्हु भी अन्य मामला में गलत ल लौटाता हवय। उदाहरण के लिए कन्हु भी_इंट {5, 2, 7) -> सच कन्हु भी_इंट {3, 2, 2) -> गलत कन्हु भी_इंट {3, -2, 1) -> सच कन्हु भी_इंट {3, -6, -2, 2) -> गलत '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"एक फ़ंक्शन लिखें जेहर एक संदेश लेथे, अउ ए तरह ले एन्कोड करत हवय कि एहर जम्मो अक्षरों के केस ल बदल देत हवय, संदेश म जम्मो स्वरमन ल पत्र के साथ बदल देत हवय जेहर अंग्रेजी वर्णमाला म ओ स्वर के आघू 2 स्थानों म दिखाई देत हवय। केवल अक्षरमन ल मान लें। उदाहरणः >>> एन्कोड 'परीक्षण') 'टीजीएसटी' >>> एन्कोड 'एहर एक संदेश हवय') 'टीएचकेएस केएस सी एमजीएससीजीजी' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"आप ल पूर्णांक के एक सूची दिए गए हवय। आप ल सबले बडखा प्राइम मान ढूंढना चाहि अउ अपन अंकों के योग ल वापस करना चाहि। उदाहरणः बर lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] आउटपुट 10 होना चाहि बर lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] आउटपुट 25 होना चाहि बर lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] आउटपुट 13 होना चाहि बर lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] आउटपुट 11 होना चाहि बर lst = [0,81,12,31,21] आउटपुट 3 होना चाहि बर lst = [0,1,8,1,2,7] आउटपुट 7 होना चाहि।\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"एक शब्दकोश दिए गए हवय, यदि जम्मो कुंजी छोटे अक्षर म स्ट्रिंग हंवय या जम्मो कुंजी बड़े अक्षर म स्ट्रिंग हंवय, तो वापस सत्य, अन्यथा वापस गलत. फ़ंक्शन ल वापस करना चाहि गलत ए दिखीस शब्दकोश खाली हवय। उदाहरणः चेक_डिक्ट_केस{\"ए\":\"एप्पल\", \"बी\":\" केला\"}) ल वापस करना चाहि सत्य. चेक_डिक्ट_केस{\"ए\":\"एप्पल\", \"ए\":\" केला\", \"बी\":\" केला\"}) ल वापस करना चाहि गलत. चेक_डिक्ट_केस{\"ए\":\"एप्पल\", \"8:\" केला\", \"ए\":\"एप्पल\"}) ल वापस करना चाहि गलत. चेक_डिक्ट_केस{\"नाम\", \"जॉन\", \"आयु\", \"36\", \"शहर\", \"ह्यूस्टन\"}) ल वापस करना चाहि गलत. चेक_डिक्ट_केस{\"एनसी\":\"स्टेट\", \"जेड\":\"आईपी\"}) ल वापस करना चाहि सत्य।\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"एक फ़ंक्शन लागू करव जेहर एक गैर-नकारात्मक पूर्णांक लेता हवय अउ पहीली एन पूर्णांक के एक सरणी ल वापस करत हवय जेहर प्राइम नंबर अउ एन ले कम हंवय। उदाहरण बर: काउंटर_अप_टू (5) => [2,3] काउंटर_अप_टू (11) => [2,3,5,7] काउंटर_अप_टू (0) => [] काउंटर_अप_टू (20) => [2,3,5,7,11,13,17,19] काउंटर_अप_टू (1) => [] काउंटर_अप_टू (18) => [2,3,5,7,11,13,17] ।\"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"फ़ंक्शन के पूरा करे बर कि दू पूर्णांक ल लेथे अउ ओमनके इकाई अंकों के उत्पाद ल वापस कर देत हवय। मान लें कि इनपुट हमेशा वैध होत हवय। उदाहरणः गुणा करे बर 148, 412 ल 16. गुणा करे बर 19 , 28 ल वापस करना चाहि। गुणा करे बर 2020 , 1851 ल 0 ल वापस करना चाहि। गुणा करे बर 14 , 15 ल वापस करना चाहि।\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"स्ट्रिंग एस दिए गए, सम सूचकांकों में अपरकेस स्वरों के संख्या के गणना करव। उदाहरण बर: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 लहुटात हवय ।\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''एक फ़ंक्शन बनाएँ जेहर एक संख्या के प्रतिनिधित्व करे वाले मूल्य (स्ट्रिंग) लेता हवय अउ एखर निकटतम पूर्णांक ल वापस करत हवय। यदि संख्या दु पूर्णांक ले समान हवय, त एला शून्य ले दूर कर दे. उदाहरण >>> निकटतम_पूर्णांक ((\"10\") 10 >>> निकटतम_पूर्णांक ((\"15.3\") 15 नोट: शून्य ले दूर राउंडिंग के मतलब हवय कि यदि दिखीस संख्या दु पूर्णांक ले समान हवय, तो आप ल वापस करना चाहि ओहर ओहर हवय जेहर शून्य ले धुरिहा हवय। उदाहरण बर निकटतम_पूर्णांक \" (१४.५\") ल वापस करना चाहि अउ निकटतम_पूर्णांक \" (१४.५\") ल -15.  लौटा देना चाहि।'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"एक सकारात्मक पूर्णांक एन दिए गए हवय, तो आप पत्थर के एन स्तरों के एक ढेर बनाना हवय। पहीली स्तर में एन पत्थर हवय। अगले स्तर म पत्थर के संख्या एहर हवय: - अगली विषम संख्या यदि एन विषम हवय - अगली सम संख्या यदि एन सम हवय। एक सूची में प्रत्येक स्तर म पत्थर के संख्या ल लौटाएं, जहां सूचकांक में तत्व आई स्तर (आई + 1) म पत्थर के संख्या के प्रतिनिधित्व करत हवय। उदाहरणः >>> मेक_ए_पिल 3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"आप ल कॉमा या रिक्त स्थान ले अलग शब्दों के एक स्ट्रिंग दिए जाही। आपके काम स्ट्रिंग ल शब्दों म विभाजित करना हवय अउ शब्दों के एक सरणी ल वापस करना हवय। उदाहरण बर: words_string ((\"हाय, मोर नाम जॉन हवय\") == [\"हाय\", \"मेरे\", \"नाम\", \"हर\", \"जॉन\"] words_string ((\"एक, दो, तीन, चार, पांच, छह\") == [\"एक\", \"दू\", \"तीन\", \"चार\", \"पांच\", \"छः\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"इ फ़ंक्शन दुनो सकारात्मक संख्यामन के लेती हवय x अउ y अउ सबले बडखा सम पूर्णांक के लौटाता हवय जेहर कि सीमा में हवय [x, y] समावेशी। यदि ए तरह के कोई संख्या नी हवय, त फ़ंक्शन के -1 लौटाए जाना चाहि। उदाहरण बर: चुनें_नंबर 12 , 15 = 14 चुनें_नंबर 13 , 12 = -1 ।\"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"आपके करा दुनो सकारात्मक पूर्णांक एन अउ एम दिए गए हंवय , अउ आपके काम एन ले एम (एन अउ एम सहित) के माध्यम ले पूर्णांक के औसत के गणना करना हवय। निकटतम पूर्णांक तक उत्तर के गोल करे अउ एला बाइनरी में परिवर्तित करे। यदि एन एम ले ज्यादा हवय, तो -1 लौटाएं। उदाहरण: गोल_मध्यम (एवीजी) 1, 5) => \"0 बी 11\" गोल_मध्यम (एवीजी) 7, 5) => -1 गोल_मध्यम (एवीजी) 10, 20) => \"0 बी 11 11\" गोल_मध्यम (एवीजी) 20, 33) => \"0 बी 11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"सकारात्मक पूर्णांक के सूची दिए गए हवय। उन जम्मो तत्वों के एक क्रमबद्ध सूची ल लौटाएं जेमा कोई घलो अंक नी हवय। नोटः लौटाए गए सूची ल बढ़ते क्रम में क्रमबद्ध करे जाना चाहि। उदाहरण बर: >>> अद्वितीय_डिजिट (([15, 33, 1422, 1]) [1, 15, 33] >>> अद्वितीय_डिजिट (([152, 323, 1422, 10]) [] ।\"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"पूर्णांक के एक सरणी दिए गए हवय, पूर्णांक के क्रमबद्ध करें जेहर 1 अउ 9 के बीच हवय, परिणामी सरणी के उल्टा, अउ फिर प्रत्येक अंक के अपन संबंधित नाम ले प्रतिस्थापित करें \"एक\", \"दू\", \"तीन\", \"चार\", \"पांच\", \"छह\", \"सात\", \"आठ\", \"नौ\" उदाहरण बर: एआर = [2, 1, 1, 4, 5, 8, 2, 3] -> सॉर्ट एआर -> [1, 1, 2, 2, 3, 4, 5, 8] -> रिवर्स एआर -> [8, 5, 4, 3, 2, 2, 1, 1] वापसी [\"आठ\", \"चार\", \"तीन\", \"दू\", \"दू\", \"एक\", \"एक\"] यदि सरणी खाली हवय, एक रिक्त वापसी एआरआर = [] वापसी एआर = [] यदि एआरआर में कन्हु भी अजीब संख्या हवय, तो एला अनदेखा कर दें: एआर = [1, -1 , 55] -> एआर -1, 55 -> एआर -1, 55 -> एआर = [55, रिवर्स एआर = 1] - 'एक' वापसी \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"फ़ंक्शन लागू करव जेहर एक पैरामीटर के रूप में एन लेता हवय, अउ आकार एन के एक सूची ल वापस करत हवय, जैसे कि इंडेक्स म तत्व के मूल्य आई के फैक्टोरियल हवय यदि आई घलो हवय या 1 ले 1 तक के संख्या के योग हवय। मैं 1 ले शुरू होत हंवय। आई के फैक्टोरियल 1 ले आई तक के संख्या के गुणन हवय (1 * 2 * ... * आई) उदाहरण: एफ ((5) == [1, 2, 6, 24, 15] ।\"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"एक सकारात्मक पूर्णांक एन दिए गए, एक टपल ल वापस कर दिस जेमा संख्या अउ विषम पूर्णांक पालिंड्रोम के संख्या हवय जेहर रेंज म गिरती हवय: (1, 2) उदाहरणः इनपुटः 3 आउटपुटः (1, 2) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3 हवय, ओमनमे ले एक सम हवय, अउ ओमनमे ले दुनो विषम हंवय। उदाहरण 2: इनपुटः 12 आउटपुटः (4, 6) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हंवय। ओमनमे ले चार सम हंवय, अउ ओमनमे ले 6 विषम हंवय। नोटः 1 <= एन <= 10 ^ 3 2 टपल हर क्रमशः सम अउ विषम पूर्णांक पालिंड्रोम के संख्या ल वापस कर दिस हवय। \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"एक फ़ंक्शन लिखें count_nums जेहर पूर्णांक के एक सरणी लेता हवय अउ तत्वमन के संख्या ल वापस करत हवय जेमा अंकों के योग हवय > 0। यदि कोई संख्या नकारात्मक हवय, त एखर पहीली हस्ताक्षरित अंक नकारात्मक होही: उदाहरण बर -123 के अंकों -1, 2 अउ 3 के हस्ताक्षर करे गए हवय। >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"इ समस्या में, आप एक फ़ंक्शन लागू करही जो संख्याओं की दो सूचियों ल लेता हावे, अउ निर्धारित करत हावे कि क्या एलएसटी 1 के बीच केवल सम संख्याओं की एक सूची बनाए बर उनम के बीच तत्वों का आदान-प्रदान करना संभव हावे। एलएसटी 1 अउ एलएसटी 2 के बीच आदान-प्रदान तत्वों की संख्या पर कोई सीमा नी हावे। यदि एलएसटी 1 अउ एलएसटी 2 के बीच तत्वों का आदान-प्रदान करना संभव हावे ताकि एलएसटी 1 के सभी तत्वों ल भी बनाय जा सके, तो \"हां\" ल लौटाएं। अन्यथा, \"नहीं\" ल लौटाएं। उदाहरण बर: एक्सचेंज [1, 2, 3, 4], [1, 2, 3, 4]) => \"हां\" एक्सचेंज [1, 2, 3, 4], [1, 5, 3, 4]) => \"नहीं\" एहर माना जात हावे कि इनपुट सूचियां गैर-खाली होंगी। \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"एक स्ट्रिंग दिए गए हवय जेहर एक स्पेस अलग छोटे अक्षरों के प्रतिनिधित्व करत हवय, सबले अधिक पुनरावृत्ति के साथ अक्षर के एक शब्दकोश ल वापस करत हवय अउ संबंधित गिनती शामिल हवय। यदि कईठन अक्षरों के समान घटना होत हवय, तो ओमन जम्मो ल वापस कर दिस। उदाहरण: हिस्टोग्राम ((('ए बी सी') == {'ए': 1, 'बी': 1, 'सी': 1} हिस्टोग्राम ((('ए बी बी ए') == {'ए': 2, 'बी': 2} हिस्टोग्राम ((('ए बी सी ए बी') == {'ए': 2, 'बी': 2} हिस्टोग्राम ((('बी बी बी ए') == {'बी 4}': हिस्टोग्राम (((')) == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"कार्य हमन ल दु स्ट्रिंग्स एस अउ सी दिए गए हवय, आप ल एस म जम्मो वर्णों ल मिटा देना हवय जेहर सी म कन्हु भी चरित्र के बराबर होत हवय फेर जांच करव कि परिणाम स्ट्रिंग पालिंड्रोम हवय । एक स्ट्रिंग पालिंड्रोम कहा जात हवय यदि ए पाछू के रूप म समान पढ़ता हवय । आप ल परिणाम स्ट्रिंग अउ सच / गलत ल वापस करना चाहि । उदाहरण बर एस = \"एबीसीडीई\", सी = \"एई\", परिणाम होना चाहि ('बीसीडी', झूठा) एस = \"एबीसीडीईएफ\", सी = \"बी\" परिणाम होना चाहि ('एसीडीई', झूठा) एस = \"एबीसीडीईएफ\", सी = \"बी\" परिणाम होना चाहि ('एसीडीईएफ', झूठा) एस = \"एबीसीडीईसीबीए\", सी = \"एबी\", परिणाम होना चाहि ('सीडीसीईसी', सही) ।\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"स्ट्रिंग्स के एक सूची दिए गए हवय, जहां प्रत्येक स्ट्रिंग म केवल अंक होत हवय, एक सूची ल वापस करत हवय। आउटपुट के प्रत्येक तत्व \"इनपुट के स्ट्रिंग म विषम तत्वमन के संख्या होना चाहि। \" जहां जम्मो आई ल इनपुट के आई के स्ट्रिंग म विषम अंक के संख्या ले प्रतिस्थापित करे जाना चाहि। >>> विषम_कौंट ['1234567']) [\"4n के स्ट्रिंग 4 के विषम तत्वमन के संख्या 4n।\"] >>> विषम_कौंट ['3',\"111111\"]) [\"1n के स्ट्रिंग 1 के विषम तत्वमन के संख्या 1n।\", \"8n के स्ट्रिंग 8 के विषम तत्वमन के संख्या 8n।\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"पूर्णांक के सरणी के दिए गए, संख्याओं के कन्हु भी गैर-खाली उप-सरणी के न्यूनतम योग के पता लगावव। उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"आप ल कुओं के एक आयताकार ग्रिड दिस जात हवय। प्रत्येक पंक्ति एक कुएं के प्रतिनिधित्व करत हवय, अउ प्रत्येक पंक्ति म 1 पानी के एक इकाई के प्रतिनिधित्व करत हवय। प्रत्येक कुएं म एक संबंधित बाल्टी होत हवय जेखर उपयोग पानी ल निकाले बर करे जा सकत हवय, अउ जम्मो बाल्टी के समान क्षमता होत हवय। आपके काम कुओं ल खाली करे बर बाल्टी के उपयोग करना हवय। आउटपुट के संख्या के आप ल बाल्टी के कम करे के आवश्यकता होत हवय। उदाहरण 1: इनपुटः ग्रिडः [[0,0,1,0], [0,1,0,0], [1,1,1,1]] बाल्टी_कपेसिटीः 1 आउटपुटः 6 उदाहरण 2: इनपुटः ग्रिडः [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] बाल्टी_कपेसिटीः 2 आउटपुटः 5 उदाहरण 3: इनपुटः [[0,0,0], [0,0,0]] बाल्टी_कपेसिटीः 5 आउटपुट कुएंः 0 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 3 * 4 * 5 * 6 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ए काटा में, आप ल बाइनरी प्रतिनिधित्व में बढती क्रम में एक के संख्या के अनुसार गैर-ऋणात्मक पूर्णांक के एक सरणी ल सॉर्ट करना हवय। एक समान संख्या बर, दशमलव मूल्य के आधार म सॉर्ट करना हवय। एला ए तरह लागू करे जाना चाहि: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"स्ट्रिंग एस अउ एक प्राकृतिक संख्या एन दिए गए हवय, तो आप ल एक फ़ंक्शन लागू करे बर स्रहिसपित करे गए हवय जेमे स्ट्रिंग एस ले जम्मो शब्दों के एक सूची ल वापस कर दिस गए हवय जेमा सटीक एन व्यंजन होत हवय, ताकि ये शब्द स्ट्रिंग एस में दिखाई देवंय। यदि स्ट्रिंग एस खाली हवय तो फ़ंक्शन ल खाली सूची ल वापस करना चाहि। नोटः आप मान सकत हंवय कि इनपुट स्ट्रिंग में केवल अक्षर अउ रिक्त स्थान होत हवय। उदाहरणः चयनशब्दों (\"मैरी के एक छोटे मेमने रहिस\", 4) ==> [\"छोटे\"] चयनशब्दों (\"मैरी के एक छोटे मेमने रहिस\", 3) ==> [\"मैरी\", \"लैंब\"] चयनशब्दों (\"सरल सफेद जगह\", 2) ==> [] चयनशब्दों (\"हैलो दुनिया\", 4) ==> [\"विश्व\"] चयनशब्दों (\"अंकल सैम\", 3) ==> [\"अंकल\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"आप ल एक शब्द दे गे हे । आप के काम ए हे कि आप ल दू ठन व्यंजन के बीच म सबले निकट स्वर मिलही (अक्षर के संवेदी) । शुरुआत अऊ अंत म स्वर के गिनती नई करे जाय । यदि आप ल कोनो स्वर उपर बताय शर्त ल पूरा नई करे हे त खाली स्ट्रिंग ल वापिस कर दे । आप मान सकत हव कि दे गे स्ट्रिंग म सिरिफ अंगरेजी अक्षर हे । उदाहरण: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''आप ल दु स्ट्रिंग के एक सूची दिए जात हवय, दुनो स्ट्रिंग म केवल खुला कोष्ठक '(' या बंद कोष्ठक ') ' होत हवय। आपका काम ए जांचना हवय कि काय दु स्ट्रिंग ल कन्हु क्रम म संयोजित करना संभव हवय, कि परिणामी स्ट्रिंग अच्छा होही। एक स्ट्रिंग एस ल अच्छा माना जात हवय यदि अउ केवल यदि एस म जम्मो कोष्ठक संतुलित हंवय । उदाहरण बर: स्ट्रिंग '((()) 'अच्छा हवय, जबकि स्ट्रिंग '()) 'नहीं हवय। यदि एक अच्छा स्ट्रिंग बनाए के तरीका हवय, तो 'हां' ल वापस करव, अउ अन्यथा 'नहीं' ल वापस करव। उदाहरणः मैच_पेरेंस [('() ', ') ')) == 'हां' मैच_पेरेंस [(') ', ') ']) == 'नहीं' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"पूर्णांक अउ सकारात्मक पूर्णांक के एक सरणी एआर दिए गए हवय, एआर में अधिकतम के संख्या के साथ लंबाई के एक सॉर्ट की गई सूची लौटाएं। उदाहरण 1: इनपुटः एआर = [-3, -4, 5], के = 3 आउटपुटः [-4, -3, 5] उदाहरण 2: इनपुटः एआर = [4, -4, 4], के = 2 आउटपुटः [4, 4] उदाहरण 3: इनपुटः एआर = [-3, 2, 1, 2, -1, -2, 1], के = 1 आउटपुटः [2] नोटः 1. सरणी के लंबाई [1, 1000] के सीमा में होही। 2. सरणी में तत्व [-1000, 1000] के सीमा में होही। 3. 0 <= के <= लेन ((एआरआर) ।\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"पूर्णांक के एक गैर-खाली सूची दिए गए हवय, जम्मो विषम तत्वों के योग ल वापस करत हवय जेहर घलो स्थितिमन में हंवय । उदाहरण समाधान (([5, 8, 7, 1]) ==> 12 समाधान (([3, 3, 3, 3, 3]) ==> 9 समाधान (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"पूर्णांक arr अउ पूर्णांक के गैर-खाली सरणी के कारण, एआर के पहीली के तत्वों ले अधिकतम दु अंकों के साथ तत्वमन के योग ल लौटाएं। उदाहरण: इनपुटः एआरआर = [111,21,3,4000,5,6,7,8,9], के = 4 आउटपुटः 24 # 21 + 3 बाधाओं के योगः 1. 1 <= lenarr) <= 100 2 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"एक सकारात्मक पूर्णांक n दिए गए, एक क्रमबद्ध सूची ल वापस कर दिस जेमा कोलाट्ज़ अनुक्रम में विषम संख्या हवय। कोलाट्ज़ अनुमान गणित में एक अनुमान हवय जेमा ए तरह ले परिभाषित अनुक्रम ले संबंधित हवय: काखरो घलो सकारात्मक पूर्णांक एन के साथ शुरू करव। फिर प्रत्येक शब्द पिछले शब्द ले प्राप्त करे जात हवय: यदि पिछला शब्द सम हवय, तो अगला शब्द पिछले शब्द के आधा हवय। यदि पिछला शब्द विषम हवय, तो अगला शब्द 3 गुना पिछला शब्द प्लस 1 हवय। अनुमान ए हवय कि एन के काखरो घलो मूल्य के बावजूद, अनुक्रम हमेशा 1 तक पहुंच जाही। नोटः 1. कोलाट्ज़ ((1) [1] हवय। 2. क्रमबद्ध सूची ल वापस करे जात हवय। उदाहरण बर: get_odd_collatz ((5) रिटर्न [1, 5] 5 बर कोलाट्ज़ अनुक्रम हवय [5, 8, 16, 4, 2, 1], एखरबर विषम संख्या केवल 1 अउ 5 हवय। \"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"आप ल एक फंक्शन लिखे बर हे जऊन एक दिही गे दिनांक स्ट्रिंग ल मान्य करथे अऊ यदि दिनांक वैध हे त True ल वापिस करथे अन्यथा False. दिनांक वैध हे यदि निम्नलिखित नियम मन ल पूरा करथे: 1. दिनांक स्ट्रिंग खाली नई हे. 2. महीना 1,3,5,7,8,10,12 बर दिन के संख्या 1 ले कम या 31 दिन ले जादा नई हे अऊ महीना 4,6,9,11 बर दिन के संख्या 1 ले कम या 30 दिन ले जादा नई हे। अऊ, महीना 2 बर दिन के संख्या 1 ले कम या 29 ले जादा नई हे 3. महीना 1 ले कम या 12 ले जादा नई होना चाही। 4. दिनांक के प्रारूप होना चाही: mm-dd-yyyy उदाहरण बर: valid_date (('03-11-2000') => valid_date ((15-01-2012') => valid_date (('04-01-2040') => valid_date (((06-04-2020') => valid_date (((06/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''शब्द के एक स्ट्रिंग दिए गए हवय, रिक्त स्थान म विभाजित शब्दमन के एक सूची ल वापस करही, यदि टेक्स्ट म कोई रिक्त स्थान नी होए तो आपको कॉमा ',' म विभाजित करना चाहि यदि कोई कॉमा नी होए तो आपको वर्णमाला म विषम क्रम के साथ लोअर-लेटर अक्षरों के संख्या ल वापस करना चाहि, ऑर्ड 'ए') = 0, ऑर्ड 'बी') = 1, ... ऑर्ड 'जेड') = 25 उदाहरण स्प्लिट_वर्ड्स ((\"हैलो वर्ल्ड! \") â -> [\"हैलो\", \"वर्ल्ड! \"] स्प्लिट_वर्ड्स ((\"हैलो,वर्ल्ड! \") â -> [\"हैलो\", \"वर्ल्ड! \"] स्प्लिट_वर्ड्स ((\"एबीसीडीएफ\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''संख्याओं की एक सूची दी गई, चाहे वे आरोही क्रम में क्रमबद्ध हों या नहीं। यदि सूची में एक ही संख्या के 1 से अधिक डुप्लिकेट हों, तो गलत लौटाएं। कोई नकारात्मक संख्या अउ केवल पूर्णांक मान लें। उदाहरण is_sorted हैं) ।'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"आपके करा दु अंतराल दिए जात हवय, जहां प्रत्येक अंतराल पूर्णांक के एक जोड़ी हवय। उदाहरण बर, अंतराल = (शुरू, अंत) = (1, 2) । दिए गए अंतराल बंद होत हंवय जेखर अर्थ हवय कि अंतराल (शुरू, अंत) में शुरुआत अउ अंत दुनो शामिल हंवय । प्रत्येक अंतराल बर, एहर माना जात हवय कि एखर शुरुआत एखर अंत के बराबर हवय। आपके काम एहर निर्धारित करना हवय कि ए दुनो अंतराल के चौराहे के लंबाई एक प्रमुख संख्या हवय या नी। उदाहरण बर, अंतराल (1, 3), (2, 4) के चौराहे (2, 3) हवय, जेखर लंबाई 1 हवय, जेहर एक प्रमुख संख्या नी हवय। यदि चौराहे के लंबाई एक प्रमुख संख्या हवय, तो \"हां\" लहुटान, अन्यथा \"नहीं\" लहुटान। यदि दुनो अंतराल चौराहे नी करत हंवय , तो \"नहीं\" लहुटान। [इनपुट / आउटपुट] नमूनेः चौराहे {(1, 2), (2, 3) ==> \"चौराहे-1, 1), \"नहीं\" = \"नहीं\", \"चौराहे\", \"नहीं\", \"नहीं\", \"5, \"3, 5\", \"हां\" = \"नहीं\" = \"हां\"\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"आप ल पूर्णांक के एक सरणी दिए जात हवय अउ आप ल सरणी में प्रत्येक संख्या के जम्मो संकेतों के उत्पाद से गुणा पूर्णांक के परिणाम के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"ग्रिड के प्रत्येक सेल में एक मान होत हवय। रेंज में हर पूर्णांक ग्रिड के कोशिकाओं में ठीक एक बार दिखाई देत हवय। आप काखरो घलो सेल ले शुरू कर सकत हंवय, अउ प्रत्येक चरण में आप पड़ोसी केशिकामन में ले काखरो घलो म जा सकत हंवय , दूसर शब्दों में, आप काखरो घलो पड़ोसी केशिकामन में ले जा सकत हंवय जेहर आपके वर्तमान केशिका के साथ एक किनारा साझा करत हंवय । कृपया ध्यान दें कि के लंबाई के पथ के मतलब हवय कि बिल्कुल के कोशिकाओं (जरूरी रूप ले अलग नी) का दौरा करना । आप ग्रिड ले बाहर नी जा सकत हंवय । एक पथ ए (लंबाई के) ल पथ बी (लंबाई के) ले कम माना जात हवय यदि ए अउ बी (लौ हम ओमनला एल ए अउ एल ए के माध्यम ले जाए वाले मानमन के क्रमबद्ध सूचियों के बाद), एल ए ले कम लेक्सिक रूप ले कम हवय , दूसर शब्दों में, एक पूर्णांक के साथ, आप वर्तमान केशिका के साथ कन्हु भी सेल ले जा सकत हंवय । उदाहरणः [ए, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल,\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"हर कोई फाइबोनैचि अनुक्रम जानता हवय, एहरपिछले कुछ शताब्दियों में गणितज्ञों से गहराई ले अध्ययन करे गय रहिस। हालांकि, जो लोग नी जानते हंवय वह ट्राइबोनैचि अनुक्रम हवय। ट्राइबोनैचि अनुक्रम पुनरावृत्ति द्वारा परिभाषित करे जात हवय: tri(1) = 3 tri(n) = 1 + n / 2, यदि n सम हवय। tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), यदि n विषम हवय। उदाहरण बर: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 आप ल एक गैर-ऋणात्मक पूर्णांक संख्या n दी जात हवय, आप ल ट्राइबोनैचि अनुक्रम के पहली n + 1 संख्या के एक सूची वापस करना होत हवय। उदाहरणः tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"एक सकारात्मक पूर्णांक एन दिए गए, विषम अंकों के उत्पाद लौटाएं। 0 लौटाएं यदि सभी अंक सम हैं। उदाहरण बर: अंक (१) == 1 अंक (४) == 0 अंक (२३५) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''एक फ़ंक्शन बनाएँ जेहर इनपुट के रूप में स्ट्रिंग लेता हवय जेमा केवल स्क्वायर ब्रैकेट होत हवय। फ़ंक्शन ल True लौटाए बर चाहि यदि अउ केवल यदि ब्रैकेट के एक वैध उप-अनुक्रम होत हवय जहां कम ले कम एक ब्रैकेट उप-अनुक्रम में घिरा होइस हवय। is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]]]]] â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"आप ल संख्याओं की एक सूची दी गइस हावे। आप ल दी गइस सूची में स्क्वायर संख्याओं के योग ल वापस करे की आवश्यकता हावे, पहली सूची में प्रत्येक तत्व ल ऊपर के इंक तक गोल करे की आवश्यकता हावे। उदाहरणः इंक = [1,2,3] आउटपुट 14 होना चाहि इंक = [1,4,9] आउटपुट 98 होना चाहि इंक = [1,3,5,7] आउटपुट 84 होना चाहि इंक = [1.4,4.2,0] आउटपुट 29 होना चाहि इंक = [-2.4,1,1] आउटपुट 6 होना चाहि \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''एक फ़ंक्शन बनाएँ जेहर वापस सत्य लहुटात हवय यदि दिए गए स्ट्रिंग के अंतिम चरित्र एक वर्णमाला चरित्र हवय अउ शब्द के हिस्सा नी हवय, अउ अन्यथा गलत हवय। नोटः \"शब्द\" वर्णों के एक समूह हवय जेहर जगह ले अलग हवय। उदाहरणः चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((\"एप्पल पाई\") â -> फॉलस चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((एप्पल पाई ई\") â -> ट्रू चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((एप्पल पाई ई)) â -> फॉलस चेक_इफ_लास्ट_चार्_इस_ए_लेटर ((((\") â -> गलत '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"एक फ़ंक्शन बनाएँ जो एक तत्व के सबले बडखा सूचकांक ल वापस करत हवय जेहर एखर ले आघू के तत्व के बराबर या उससे ज्यादा नी होत हवय। यदि ए तरह के कोई तत्व मौजूद नी हवय तो -1 लौटाएं। दिए गए सरणी में डुप्लिकेट मान शामिल नी होही। उदाहरणः can_arrange (([1,2,4,3,5]) = 3 can_arrange ([1,2,3]) = -1 ।\"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''एक फ़ंक्शन बनाएँ जेहर एक टपल (ए, बी) ल वापस करत हवय, जहां 'ए' नकारात्मक पूर्णांक के सबले बडखा हवय, अउ 'बी' एक सूची में सकारात्मक पूर्णांक के सबले छोटे हवय। यदि कोई नकारात्मक या सकारात्मक पूर्णांक नी हवय, त ओमनला नो के रूप में लौटाएं। उदाहरणः सबले बडखा_सबसे छोटे_पूर्णांक[2, 4, 1, 3, 5, 7]) == (कोनो नी, 1) सबले बडखा_सबसे छोटे_पूर्णांक ({0}) == (कोनो नी, कोई नी) सबले बडखा_सबसे छोटे_पूर्णांक ({0}) == (कोनो नी, कोई नी) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"एक फ़ंक्शन बनाएँ जेहर पूर्णांक, फ्लोट्स, या स्ट्रिंग्स वास्तविक संख्यामन के प्रतिनिधित्व करत हवय, अउ अपन दिए गए चर प्रकार में बड़ा चर ल वापस करत हवय। यदि मान बराबर हंवय तो कोई घलो नी लहुटात हवय। नोट: यदि एक वास्तविक संख्या ल स्ट्रिंग के रूप में दर्शाया जात हवय, त फ्लोटिंग पॉइंट हो सकत हवय। या, तुलना_एक, 2.5) â -> 2.5 तुलना_एक, \"2,3\") â -> \"2,3\" तुलना_एक\", \"5,1\", \"6\") â -> \"6\" तुलना_एक, \"1, 1) â -> कोई नी \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"मूल्यांकन करें कि दिए गए संख्या n के 4 सकारात्मक संख्याओं के योग के रूप में लिखा जा सकत हवय उदाहरण is_equal_to_sum_even ()) == झूठा is_equal_to_sum_even ()) == झूठा is_equal_to_sum_even ()) == सच \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ब्राजीलियाई फैक्टोरियल के रूप में परिभाषित करे गए हवय: ब्राजीलियाई_फैक्टोरियल ((एन) = एन! * (एन -1))! * (एन -2))! * ... * 1! जहां एन > 0 उदाहरण बर: >>> विशेष_फैक्टोरियल ((4) 288 फ़ंक्शन इनपुट के रूप में एक पूर्णांक प्राप्त करेगा अउ ए पूर्णांक के विशेष फैक्टोरियल लौटा देगा। \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_उदाहरण-3दिए गए हवय, एमें जम्मो स्पेस ल अंडरस्कोर के साथ प्रतिस्थापित करव, अउ यदि स्ट्रिंग म 2 ले ज्यादा लगातार स्पेस हंवय , त फेर जम्मो लगातार स्पेस ल -fix_spaces के साथ प्रतिस्थापित करव (_उदाहरण) == \"उदाहरण\" fix_spaces (_उदाहरण1\") == \"उदाहरण1\" fix_spaces (_उदाहरण2\") == \"_उदाहरण2\" fix_spaces (_उदाहरण3\") == \"_उदाहरण-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"एक फ़ंक्शन बनावव जऊन एक स्ट्रिंग ल फाइल के नाम के प्रतिनिधित्व करत हे, अऊ यदि फाइल के नाम वैध हे, त 'हां' ल वापिस करथे, अऊ आने मामला म 'नइं' ल वापिस करथे. फाइल के नाम ल वैध माने जाथे यदि अऊ सिरिफ़ तभे, जब ये जम्मो शर्त ल पूरा करे गे हे: - फाइल के नाम म तीन अंकों ले जादा ('0'-'9') नइ होना चाही. - फाइल के नाम म ठीके एक बिंदु '.' हे. - बिंदु के पहिली सबस्ट्रिंग खाली नइ होना चाही, अऊ ए ह लातीनी अल्फा के एक अक्षर ले सुरू होवय ('a'-'z' अऊ 'A'Z'). - बिंदु के पाछू सबस्ट्रिंग एमन ले एक होना चाही: ['txt', 'exe', 'lld'] उदाहरन: file_name_check\"{example.txt.txt} # => 'हाँ' file_name_check\"{example.txt.tll.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.t.txt.txt.t.txt.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ए फ़ंक्शन पूर्णांक के एक सूची लेही। सूची में जम्मो प्रविष्टियों बर, फ़ंक्शन पूर्णांक प्रविष्टि ल वर्ग करेगा यदि एखर सूचकांक 3 का एक गुणक हवय अउ पूर्णांक प्रविष्टि ल घन करेगा यदि एखर सूचकांक 4 का एक गुणक हवय अउ 3 का एक गुणक नी हवय। फ़ंक्शन सूची में प्रविष्टियों ल बदल नी देगा, जेखर सूचकांक 3 या 4 का एक गुणक नी हवय। फ़ंक्शन तब जम्मो प्रविष्टियों के योग ल लौटाही। उदाहरणः lst = [1,2,3] बर आउटपुट 6 होना चाहि lst = [] बर आउटपुट 0 होना चाहि lst = [-1, -5, 2, -1, -5] बर आउटपुट होना चाहि -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"आप ल एक वाक्य के प्रतिनिधित्व करे वाली स्ट्रिंग दिए जात हवय , वाक्य में कुछु शब्द होत हवयं जेहर एकठन स्पेस से अलग होत हवयं, अउ आप ल एकठन स्ट्रिंग ल वापस करना होत हवय जेमा मूल वाक्य ले शब्द होत हवयं, जेखर लंबाई प्राइम नंबर होत हवय , नवा स्ट्रिंग म शब्दमन के क्रम मूल के समान होना चाहि। उदाहरण 1: इनपुटः वाक्य = \"एह एक परीक्षण हवय\" आउटपुटः \"एहर\" उदाहरण 2: इनपुटः वाक्य = \"लेट्स गो फॉर स्विमिंग\" आउटपुटः \"गो फॉर\" बाधाओं: * 1 <= len(सेंटेंस) <= 100 * वाक्य में केवल अक्षर होत हवयं \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"आपके काम एक फ़ंक्शन लागू करना हवय जेहर अभिव्यक्ति के सरलीकृत करही एक्स * एन। फ़ंक्शन सत्य ल वापस करत हवय यदि एक्स * एन एक पूर्णांक के मूल्यांकन करत हवय अउ अन्यथा गलत हवय। दुनो एक्स अउ एन, एक अंश के स्ट्रिंग प्रतिनिधित्व हंवय, अउ निम्नलिखित प्रारूप, <न्यूमेरर> / <नोमिनर> जहां दुनो नुमरेटर अउ नामकरण सकारात्मक पूर्णांक हंवय । आप मान सकत हंवय कि एक्स, अउ एन मान्य अंश हंवय, अउ शून्य के रूप में नोमिनरेटर नी हंवय । सरलीकृत \" 1/5\", \"5/1\") = सच सरलीकृत \" 1/6\", \"2/1\") = गलत सरलीकृत \" 7/10\", \"10/2\") = गलत \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"एक फ़ंक्शन लिखें जेहर पूर्णांक के दिगित सूची के क्रमबद्ध करत हवय, ओमनके अंकों के योग के अनुसार। नोट: यदि ओमनके अंकों के समान योग के साथ कईठन आइटम हंवय, त ओमनल मूल सूची में अपन सूचकांक के आधार म क्रमबद्ध करव। उदाहरण बर: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points ([]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"एक फ़ंक्शन लिखें जेहर इनपुट के रूप में संख्याओं के एक सरणी लेता हवय अउ सरणी में तत्वों के संख्या ल वापस करत हवय जेहर 10 ले ज्यादा हंवय अउ संख्या के पहली अउ अंतिम अंकों दुनो विषम (1, 3, 5, 7, 9) हंवय । उदाहरण बर: विशेष फ़िल्टर (([15, -73, 14, -15]) => 1 विशेष फ़िल्टर (([33, -2, -3, 45, 21, 109]) => 2 ।\"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"आप ल एक सकारात्मक पूर्णांक n दिए जात हवय। आप ल लंबाई के पूर्णांक सरणी बनाना होत हवय। प्रत्येक i (1 ‰¤ i ‰¤ n) बर, ए [आई] = आई * आई - आई + 1 के मूल्य। ए के ट्रिपल्स (ए [आई], ए [जे], ए [के]) के संख्या ल लौटाएं जहां आई < जे < के, अउ ए [आई] + ए [जे] + ए [के] 3 के गुणक हवय। उदाहरण: इनपुटः एन = 5 आउटपुटः 1 स्पष्टीकरणः ए = [1, 3, 7, 13, 21] एकमात्र वैध ट्रिपल (1, 7, 13) हवय।\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''सौर मंडल म आठ ग्रह हे: सूर्य के सबले निकट बुध हे, अगला शुक्र हे, फेर पृथ्वी, मंगल, बृहस्पति, शनि, यूरेनस, नेपच्यून हे। एक फंक्शन लिखव जेमा ग्रह1 अउ ग्रह2 के स्ट्रिंग के रूप म दुनो ग्रह के नाम ले जाथे। फंक्शन ल एक टपल ल वापस करना चाहि जेमा सूर्य के निकटता के आधार म पदानुक्रमित ग्रहों के जम्मो ग्रह होत हंवय जेखर कक्षा ग्रह 1 के कक्षा अउ ग्रह 2 के कक्षा के बीच स्थित हवय। फंक्शन ल एक खाली टपल ल वापस करना चाहि यदि ग्रह 1 या ग्रह 2 सही ग्रह नाम नी होए। उदाहरण: bf \"{\\\\displaystyle bf\"{\\displaystyle bf} , \"{\\\\displaystyle bf} , \"{\\\\displaystyle bf} , \"{\\\\displaystyle b} , \"{\\\\displaystyle b} , \"{\\\\displaystyle b} , \"{\\\\displaystyle b} , \"{\\\\displaystyle b} , \"{\\\\displaystyle b} , \"{\\\\displaystyle b} , \"{\\\\displaystyle b} , \"{\\\\displaystyle b} , \"}'''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"एक फ़ंक्शन लिखें जेहर स्ट्रिंग्स के सूची ल पैरामीटर के रूप में स्वीकार करत हवय, स्ट्रिंग्स ल हटा देत हवय जेमा विषम लंबाई होत हवय, अउ एक सॉर्ट के साथ परिणामी सूची ल वापस करत हवय। सूची हमेशा स्ट्रिंग्स के एक सूची होत हवय अउ कभु संख्याओं के सरणी नी होत हवय, अउ एमा डुप्लिकेट हो सकत हवय। सूची के क्रम हर शब्द के लंबाई के अनुसार बढ़त होना चाहि, अउ आप ल ओ नियम से सॉर्ट के गइस सूची ल वापस करना चाहि। यदि दु शब्द के एक ही लंबाई हवय, तो सूची ल वर्णमाला क्रम में सॉर्ट करव। फ़ंक्शन ल सॉर्ट के क्रम में स्ट्रिंग्स के एक सूची ल वापस करना चाहि। आप मान सकत हंवय कि जम्मो शब्दों के एक ही लंबाई होही। उदाहरण बर: asserts_list_sort[\"aa\", \"a\", \"aaa\"]) [\"aa\"] => assert_list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => [\"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"एक सरल कार्यक्रम जेला एक्स के मूल्य ल लौटा देना चाहि यदि एन एक प्रमुख संख्या हवय अउ अन्यथा वाई के मूल्य ल लौटा देना चाहि। उदाहरणः एक्स_या_वाई बर {7, 34, 12) == 34 एक्स_या_वाई बर {15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''संख्याओं की एक सूची दी गइस हावे, उन संख्याओं के वर्गों के योग ल लौटाएं जो सूची में विषम हावें। नकारात्मक या पूर्णांक नी हावें उन संख्याओं को अनदेखा करें। डबल_द_फरक (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 डबल_द_फरक (([-1, -2, 0]) == 0 डबल_द_फरक (([9, -2]) == 81 डबल_द_फरक (([0]) == 0 यदि इनपुट सूची खाली हावे, तो 0 लौटाएं। '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"मोर मानना हे कि हमन सबो ल वो भाव सुरता हे जब कोनो ल अब्बड़ दिन ले प्रतीक्षित घटना के नतीजा आखिर म पता चलथे। ओ समय आपके भावना अऊ बिचार ल जरूर नोट करे अऊ तुलना करे के जरूरत हे। तोर काम ए निर्धारित करना हे कि कोनो मनखे ह कतको मैच के नतीजा ल सही ढंग ले अनुमान लगाइस हे या नहीं। तोला दू ठन बराबर लम्बाई के स्कोर अऊ अनुमान के सरणी दे गे हे, जिहां हर इंडेक्स म एक मैच दिखथे। एक समान लम्बाई के सरणी ल वापिस कर दे, जऊन ह बताथे कि हर एक अनुमान कतका दूरिहा रहिस हे। यदि ओमन सही ढंग ले अनुमान लगाइस हे, त मान 0 हे, अऊ यदि नी, त मान ह अनुमान अऊ स्कोर के बीच निरपेक्ष अंतर हे। उदाहरण: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] तुलना[0,0,5,0,4],[0,4,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"आप ल एक वर्ग (एक स्ट्रिंग) अउ एक्सटेंशन के एक सूची के नाम दिस जाही। एक्सटेंशन के उपयोग वर्ग बर अतिरिक्त वर्ग लोड करे बर करे जाना हे। एक्सटेंशन के ताकत ए प्रकार हे: सीएपी ल एक्सटेंशन के नाम म अपरकेस अक्षर के संख्या, अऊ एसएम ल एक्सटेंशन के नाम म लोकरकेस अक्षर के संख्या, के ताकत अंश सीएपी - एसएम ले देहे जाथे. आप ल सबले मजबूत एक्सटेंशन ल ढूंढना चाहि अऊ ए प्रारूप म एक स्ट्रिंग ल वापिस करना चाहि: क्लासनाम.सबले मजबूत एक्सटेंशननाम. यदि एक ही ताकत के संग दु या दु ले जादा एक्सटेंशन हे, त आप ल सूची म पहिली आहर वाले ल चुनना चाहि. उदाहरण बर, यदि आप ल क्लास के रूप म \"स्लाइस\" अऊ एक्सटेंशन के एक सूची देहे जाथे: ['SEviviSliNGCes', 'Cheese', 'StuFfed'] त आप ल 'Slices.SEviSliNGCes' ल वापिस करना चाहि काबरकि 'SEviSliNGCes' 'mySliNGCes' (सबले मजबूत एक्सटेंशन हवय) ', उदाहरण बर 'AA' - '_Class' मजबूत एक्सटेंशन '_ (वर्ग: 'AA' = 'Strongest_class'); '{'}'}' बर मजबूत '{'}'}'\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"आप ल 2 शब्द दिए जात हवय । आप ल वापस करे के जरूरत हवय यदि दूसर शब्द या एखर कन्हु घलो रोटेशन पहला शब्द में एक सबस्ट्रिंग हवय cycpattern_check{\"abcd\",\"abd\") => गलत cycpattern_check{\"हैलो\",\"ell\") => सच cycpattern_check{\"व्हासअप\",\"प्सस\") => गलत cycpattern_check{\"अबाब\",\"बा\") => सच cycpattern_check{\"एफेफ\",\"ईफ\") => गलत cycpattern_check{\"हिमेंस\",\"सिमेंस\") => सच \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"एक पूर्णांक दिए गए हवय, एक टपल ल वापस करत हवय जेमा क्रमशः सम अउ विषम अंकों के संख्या होत हवय। उदाहरण: यहां तक कि_ओड_काउंट(-12) ==> (1, 1) यहां तक कि_ओड_काउंट(123) ==> (1, 2) ।\"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"एक सकारात्मक पूर्णांक दिए गए, एखर रोमन अंकों के समकक्ष एक स्ट्रिंग के रूप में प्राप्त करव, अउ एला लोअरकेस में लौटाएं। प्रतिबंधः 1 <= संख्या <= 1000 उदाहरणः >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''एक त्रिकोण के तीन किनारों के लंबाई ल देखते हुए। यदि तीन पक्ष एक समकोण त्रिभुज बनाते हावें तो सच लौटाएं, अन्यथा गलत। एक समकोण त्रिभुज एक त्रिभुज हावे जेमे एक कोण 90 डिग्री या 90 डिग्री हावे। उदाहरण: right_angle_triangle ((3, 4, 5) == सही right_angle_triangle ((1, 2, 3) == गलत '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"एक फ़ंक्शन लिखें जेहर स्ट्रिंग के सूची ल स्वीकार करत हवय। सूची में कईठन शब्द होत हंवय । अद्वितीय वर्ण के अधिकतम संख्या के साथ शब्द ल लौटाएं। यदि कईठन स्ट्रिंग में अद्वितीय वर्ण के अधिकतम संख्या हवय, तो शब्दकोश के क्रम में पहला आहर वाला ल लौटाएं।\"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"आप एक भूखे खरगोश हो, अउ आप पहीली ले ही एक निश्चित संख्या म गाजर खा चुके हो, लेकिन अब आप ल दिन के भोजन ल पूरा करे बर ज्यादा गाजर के खाए के जरूरत हे। आप ल एक सरणी ल वापस करना चाहि [आपके भोजन के बाद खाए गए गाजर के कुल संख्या, आपके भोजन के बाद बांचे गाजर के संख्या ] यदि पर्याप्त शेष गाजर नी हवय, त आप जम् मो शेष गाजर खाहू, लेकिन अभी भी भूखे होहू। उदाहरणः * खाओ (5, 6, 10) -> [11, 4] * खाओ (4, 8, 9) -> [12, 1] * खाओ (1, 10, 10) -> [11, 0] * खाओ (2, 11, 5) -> [7, 0] चरः @number: पूर्णांक संख्याः गाजर के संख्या आप खा चुके हावें। @need: पूर्णांक संख्याः गाजर के संख्या आप ल खाए के जरूरत हवय। @remaining: शेष संख्याः पूर्णांक संख्याः शेष गाजर के संख्या कन्स्ट्रैक्शन में मौजूद हवय: * 0 = <= 0 * 1000 <= 1000 * 0 = <= 1000 <= 1000 शेष संख्या मज़ाक होना चाहि <= 1000 = 1000 मज़ाक होना चाहिः\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"ऑपरेटर अउ ऑपरेन्ड के दू सूची दिए गए हवय। पहली सूची में बुनियादी बीजगणित संचालन हवय, अउ दूसर सूची पूर्णांक के एक सूची हवय। बीजगणितीय अभिव्यक्ति के निर्माण बर दू दिखीस सूची के उपयोग करव अउ इ अभिव्यक्ति के मूल्यांकन ल वापस कर दव। बुनियादी बीजगणित संचालन: अतिरिक्त (+) घटाव (-)) गुणा (*) फर्श विभाजन (//) एक्सपोनेंशियल (**) उदाहरणः ऑपरेटर ['+', '*', '-'] सरणी = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोटः ऑपरेटर के सूची के लंबाई ओपरेंड सूची के लंबाई के बराबर हवय। ऑपरेंड गैर-ऋणात्मक पूर्णांक के एक सूची हवय। ऑपरेटर के कम ले कम एक ऑपरेटर सूची हवय, अउ ऑपरेंड सूची में कम ले कम दु ऑपरेंड हवय। \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"आप ल एक स्ट्रिंग एस दिए जात हवय। यदि एस एक अक्षर हवय, तो अपन केस ल निचले ले ऊपरी या विसे वर्सा म उलट दें, अन्यथा एला एला ही रखें। यदि स्ट्रिंग म कोई अक्षर नी हवय, तो स्ट्रिंग ल उल्टा कर दें। फ़ंक्शन ल परिणामी स्ट्रिंग ल लौटा देना चाहि। उदाहरण हल करना ((\"1234\") = \"4321\" हल करना ((\"ab\") = \"एबी\" हल करना ((\"# ए @ सी\") = \"# ए @ सी\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"एक स्ट्रिंग 'टेक्स्ट' दिए गए, एखर एमडी 5 हैश समकक्ष स्ट्रिंग ल लौटाव। यदि 'टेक्स्ट' एक खाली स्ट्रिंग हवय, त लौटाविस कोई नी। >>> string_to_md5('हेलो दुनिया') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "hne_Deva",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"दू सकारात्मक पूर्णांक ए अउ बी दिए गए, ए अउ बी के बीच घलो अंकों के वापसी, उदाहरण बर: उत्पन्न_पूर्णांक (२, ८) => [२, ४, ६, ८] उत्पन्न_पूर्णांक (८, २) => [२, ४, ६, ८] उत्पन्न_पूर्णांक (१०, १४) => []\"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]