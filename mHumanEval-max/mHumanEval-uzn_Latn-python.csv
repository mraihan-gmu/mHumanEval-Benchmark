task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,uzn_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Berilgan raqamlar ro'yxatida, berilgan darajadan ko'ra bir-biriga yaqinroq ikkita raqam borligini tekshiring. Misol: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,uzn_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Ushbu funksiya uchun kirish - bu koʻp guruhli qavsli qavsli qator. Sizning maqsadingiz bu guruhlarni alohida qatorlarga ajratish va ularning roʻyxatini qaytarishdir. Alohida guruhlar muvozanatlangan (har bir ochiq qavs toʻgʻri yopilgan) va bir-biriga oʻrnashmagan. Kirish qatoridagi har qanday boʻsh joylarni eʼtiborsiz qoldiring. Misol: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ['() ', '(()) ', '(() ')) ]""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,uzn_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Ijobiy koʻrinadigan koʻrinadigan nuqta sonini hisobga olgan holda, uni butun qismga (eng katta butun raqam berilgan raqamdan kichik) va oʻnliklarga (qolgan qism har doim 1 dan kichik) ajratish mumkin. Sonning oʻnlik qismini qaytaring. Misol: >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,uzn_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Sizga bank hisobidagi depozit va pulni olish operatsiyalari ro'yxati beriladi, u nol balansdan boshlanadi. Sizning vazifangiz hisob balansining noldan pastga tushishini aniqlashdir va shu nuqtada funksiya True qaytarishi kerak. Aks holda u False qaytarishi kerak. Misol: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,uzn_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Berilgan kirish raqamlari ro'yxati uchun ushbu ma'lumotlar to'plamining o'rtacha qiymati atrofida o'rtacha mutlaq chetlanishni hisoblang. O'rtacha mutlaq chetlanish har bir element va markaz nuqtasi o'rtasidagi o'rtacha mutlaq farqdir (bu holatda o'rtacha): MAD = o'rtacha █ x - x_o'rta █ Misol: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,uzn_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Kirish ro'yxatining har ikki ketma-ket elementlari orasida ""bo'lim"" raqamini kiriting `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,uzn_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Ushbu funksiya uchun kirish - bu maydon bilan ajratilgan qavslar uchun bir nechta guruhlarni ifodalovchi qator. Har bir guruh uchun qavslarning eng chuqur darajasini chiqarib bering. Masalan (() (()) ning maksimal ikki darajasi bor, ammo ((())) uchta. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,uzn_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Kiritilgan qatorlar ro'yxatini faqat berilgan kichik qatorni o'z ichiga olganlar uchun filtrlang >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,uzn_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Toʻliq sonlar roʻyxati uchun, toʻplam va roʻyxatdagi barcha toʻliq sonlarning koʻpaytmasidan iborat tuple qaytaring. Boʻsh summa 0 ga teng boʻlishi kerak va boʻsh koʻpaytma 1 ga teng boʻlishi kerak. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,uzn_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Berilgan butun sonlar ro'yxatidan ketma-ketlikda berilgan daqiqagacha topilgan maksimal elementlar ro'yxatini yarating. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,uzn_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Berilgan qator bilan boshlanadigan eng qisqa palindromni toping. Algoritm g'oyasi oddiy: - Berilgan qatorning palindrom bo'lgan eng uzun postfiksini toping. - Stringning oxiriga palindromik sufiksdan oldin keladigan qator prefiksining teskari qismini qo'shing. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Berilgan satr palindrommi yoki yoʻqligini tekshirib koʻring .""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,uzn_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Kiritish faqat 1 va 0 dan iborat a va b ikkita qator. Ushbu kirishlarda ikkilik XORni bajaring va natijani ham qator sifatida qaytaring. >>> string_xor (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,uzn_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Qidiruv ro'yxati ichida eng uzunini qaytaring. Bir xil uzunlikdagi bir nechta qator mavjud bo'lsa, birinchi raqamni qaytaring. Kiritish ro'yxati bo'sh bo'lsa, hech narsa qaytarmang. >>> eng uzun (([]) >>> eng uzun ((['a', 'b', 'c']) 'a' >>> eng uzun ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,uzn_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Ikki butun son a va b ning eng katta umumiy boʻluvchilarini qaytaring >>> eng katta_umumiy_boʻluvchi ((3, 5) 1 >>> eng katta_umumiy_boʻluvchi ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,uzn_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Kirish satrining eng qisqaidan eng uzunligigacha boʻlgan barcha prefikslar roʻyxatini qaytaradi >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,uzn_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Boʻsh joy bilan chegaralangan sonlarni oʻz ichiga olgan stringni qaytaradi. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,uzn_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Berilgan qatorda, uning qancha alohida belgilardan iboratligini toping (katta yoki kichik harfdan qat'i nazar) >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,uzn_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Ushbu funksiya uchun maxsus ASCII formatida musiqa notalarini ifodalaydigan simni kiriting. Sizning vazifangiz ko'plab urishlarga mos keladigan butun simlar ro'yxatini tahlil qilishdir. Bu erda legend bor: 'o' notasi, so'nggi to'rt urish 'o'xod' - yarim notasi, so'nggi ikki urish 'o'xod' - to'rtlik notasi, so'nggi bir urish >>> parse_music '. 'o'xod . o'xod o'xod
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,uzn_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Berilgan substringni asl stringda necha marta topish mumkinligini toping. Bir-biriga yopishib qolgan holatlarni sanab oling. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,uzn_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Kiritish - bu ""null"" dan ""to'qqiz"" gacha bo'lgan raqamlar qatoridir. To'g'ri tanlovlar ""null"", ""bir"", ""ikki"", ""uch"", ""to'rt"", ""besh"", ""olti"", ""yetti"", ""sakkizta"" va ""to'qqiz""dir. Sonlar bilan tartiblangan qatorni qaytaring >>> sort_numbers ((('uch bir besh') 'bir uch besh' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,uzn_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Berilgan raqamlar ro'yxatidan (kamida ikki uzunligi) bir-biriga eng yaqin bo'lgan ikkita raqamni tanlang va qaytaring va ularni ketma-ket qaytaring (kamroq raqam, katta raqam). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,uzn_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Raqamlar ro'yxati berilgan (kamida ikki elementdan iborat), ushbu ro'yxatga chiziqli transformatsiyani qo'llang, shunda eng kichik raqam 0 ga, eng katta raqam esa 1 ga aylanadi >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,uzn_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter berilgan python qiymatlari ro'yxati faqat butun sonlar uchun >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,uzn_Latn,python,"

def strlen(string: str) -> int:
    """"""Berilgan stringning qaytarish uzunligi >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,uzn_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Berilgan n son uchun n ni teng boʻladigan, n dan kichik boʻlgan eng katta sonni toping >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,uzn_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Berilgan butun sonning boshlang'ich ko'paytuvchilarining ro'yxatini eng kichikidan eng kattagacha bo'lgan tartibda qaytaring. Har bir ko'paytuvchi ko'paytuvchilarda necha marta paydo bo'lishiga mos keladigan miqdorda ko'rsatilishi kerak. Kirish raqami barcha ko'paytuvchilarning ko'paytmasiga teng bo'lishi kerak >>> ko'paytuvchilarga ajratish ((8) [2, 2, 2] >>> ko'paytuvchilarga ajratish ((25) [5, 5] >>> ko'paytuvchilarga ajratish ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,uzn_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Butun sonlar ro'yxatidan bir martadan ko'proq uchraydigan barcha elementlarni olib tashlang. Elementlarning ketma-ketligini kiritilayotganda bir xil saqlang. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,uzn_Latn,python,"

def flip_case(string: str) -> str:
    """"""Berilgan qator uchun kichik harflarni katta harflarga va katta harflarni kichik harflarga aylantiring. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,uzn_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Bir qatordagi qatorlar ro'yxati >>> bir qatorda (concatenate) "" ' >>> bir qatorda (concatenate) "" ' (a', ""b"", ""c""]) ""abc"" """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,uzn_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Kiritilgan qatorlar ro'yxatini faqat berilgan prefiks bilan boshlanganlari uchun filtrlang. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,uzn_Latn,python,"

def get_positive(l: list):
    """"""Roʻyxatdagi faqat musbat sonlarni qaytaring. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,uzn_Latn,python,"

def is_prime(n):
    """"""Berilgan son birinchi bo'lsa, to'g'ri va boshqa holatda noto'g'ri. >>> birinchi bo'lsa, noto'g'ri.""""""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,uzn_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs - ko'phadlarning koeffitsiyentlari. find_zero xni toping, shunda poly ((x) = 0. find_zero faqat nol nuqtani qaytaradi, hatto ko'p bo'lsa ham. Bundan tashqari, find_zero faqat xs ro'yxatini oladi, u hatto koeffitsiyentlar soni va eng katta noldan tashqari koeffitsiyentga ega, chunki u echimni kafolatlaydi. >>> round (((find_zero[1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Koefficientlari xs boʻlgan koʻphadni x nuqtada aniqlaydi. qaytar xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,uzn_Latn,python,"

def sort_third(l: list):
    """"""Ushbu funksiya l roʻyxatini oladi va l'ni uchga boʻlinmaydigan indekslarda l bilan bir xil boʻlgan l' roʻyxatini qaytaradi, uchga boʻlinadigan indekslardagi qiymatlari esa l ning mos indekslari qiymatlariga teng, ammo tartiblangan. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,uzn_Latn,python,"

def unique(l: list):
    """"""Roʻyxatdagi saralab olingan noyob elementlarni qaytaradi >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,uzn_Latn,python,"

def max_element(l: list):
    """"""Roʻyxatdagi maksimal elementni qaytaradi. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,uzn_Latn,python,"

def fizz_buzz(n: int):
    """"""7 raqami 11 yoki 13 ga boʻlinadigan n dan kichik butun sonlarda koʻrinadigan sonni qaytaring. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,uzn_Latn,python,"

def sort_even(l: list):
    """"""Ushbu funksiya l roʻyxatini oladi va l' roʻyxatini shunday qaytaradiki, l' nontirarli indekslarda l bilan bir xil boʻladi, uning juft indekslardagi qiymatlari esa l ning juft indekslari qiymatlariga teng, lekin tartiblangan. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,uzn_Latn,python,"

def encode_cyclic(s: str):
    """"""kirish sifatida encode_cyclic funksiyasi bilan kodlangan qatorni qabul qiladi. Kodlangan qatorni qaytaradi. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""uchta belgilardan iborat tsikl guruhlari boʻyicha kodlangan qatorni qaytaradi. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,uzn_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib Fibonachi sonini n-chi son sifatida qaytaradi va u ham bir bosh raqamdir. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,uzn_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero butun sonlar ro'yxatini kiritish sifatida qabul qiladi. Agar ro'yxatda nolga teng bo'lgan uchta alohida element bo'lsa, True, aks holda False qaytaradi. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,uzn_Latn,python,"

def car_race_collision(n: int):
    """"""To'g'ri chiziq bo'lgan yo'lni tasavvur qiling. n ta mashina chapdan o'ngga harakatlanadi; bir vaqtning o'zida n ta mashina o'ngdan chapga harakatlanadi. Ikkala mashina bir-biridan juda uzoq bo'lgan holda boshlanadi. Barcha mashinalar bir xil tezlikda harakatlanadi. Chapdan o'ngga harakatlanayotgan mashina o'ngdan chapga harakatlanayotgan mashinaga tegsa, ikkita mashina to'qnashadi. Ammo, mashinalar cheksiz mustahkam va kuchli; natijada, ular to'qnashmagandek o'z trajektoriyasida harakatlanishda davom etadilar. Ushbu funksiya bunday to'qnashuvlar sonini chiqaradi. """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,uzn_Latn,python,"

def incr_list(l: list):
    """"""Elementlari 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] bilan koʻpaytirilgan elementlar bilan qaytadi.""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,uzn_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero butun sonlar ro'yxatini kiritish sifatida qabul qiladi. Agar ro'yxatda nolga teng bo'lgan ikkita alohida element bo'lsa, True, aks holda False qaytaradi. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,uzn_Latn,python,"

def change_base(x: int, base: int):
    """"""Kiritilgan x sonining sonli asosini asosga oʻzgartirish. ayirboshlashdan keyin stringni qaytarish. asos raqamlari 10-dan kam. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,uzn_Latn,python,"

def triangle_area(a, h):
    """"""Uchburchakning yon uzunligi va yuqori qaytish maydoni berilgan. >>> uchburchak_maydon ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,uzn_Latn,python,"

def fib4(n: int):
    """"""Fib4 sonlar ketma-ketligi Fibbonacci ketma-ketligiga o'xshash ketma-ketlik bo'lib, quyidagicha aniqlanadi: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Iltimos, fib4 sonlar ketma-ketligining n-chi elementini samarali hisoblash uchun funksiya yozing. Rekursiyani ishlatmang. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,uzn_Latn,python,"

def median(l: list):
    """"""Ro'yxatdagi elementlarning qaytarish mediani l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,uzn_Latn,python,"

def is_palindrome(text: str):
    """"""Berilgan qator palindrommi yoki yo'qligini tekshiradi >>> is_palindrom (('aba') Haq >>> is_palindrom (('aaaaa') Haq >>> is_palindrom (('zbcd') Yolg'on """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,uzn_Latn,python,"

def modp(n: int, p: int):
    """"""2^n modulo p (raqamlarni bilish) qaytaring. >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,uzn_Latn,python,"

def encode_shift(s: str):
    """"""encode_shift funksiyasi bilan kodlangan kirish satrini qabul qiladi. Kodlangan satrni qaytaradi. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""har bir belgi alfabetda 5 ga siljishi orqali kodlangan satrni qaytaradi.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,uzn_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels - bu rangni qabul qilib, rangni tovushsiz qaytaradigan funksiya. >>> remove_vowels (('') ' >>> remove_vowels ((""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,uzn_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Agar l roʻyxatidagi barcha raqamlar t darajasidan past boʻlsa, True ni qaytaradi. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,uzn_Latn,python,"

def add(x: int, y: int):
    """"""Ikki x va y sonini qoʻshing >>> qoʻshing ((2, 3) 5 >>> qoʻshing ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,uzn_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Ikki so'z bir xil belgilarga ega bo'lganligini tekshiring. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Haq >>> same_chars (('abcd', 'dddddddabc') Haq >>> same_chars (('dddddddabc', 'abcd') Haq >>> same_chars (('eabcd', 'dddddddabc') Yolg'on >>> same_chars (('abcddd', 'dddddddabce') Yolg'on >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') Yolg'on """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,uzn_Latn,python,"

def fib(n: int):
    """"""Fibonachi n-sonini qaytaring. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,uzn_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ""<"" va "">"" qatoridir. Agar har bir ochilish qavsida tegishli yopilish qavs bo'lsa, True qaytaring. >>> correct_bracketing ((""<"") False >>> correct_bracketing ((""<>"") True >>> correct_bracketing ((""<><>>"") True >>> correct_bracketing ((""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,uzn_Latn,python,"

def monotonic(l: list):
    """"""Qaytish Haq bo'lsa, ro'yxat elementlari monoton ravishda ko'payadi yoki kamayadi. >>> monoton (([1, 2, 4, 20]) Haq >>> monoton (([1, 20, 4, 10]) Soxta >>> monoton (([4, 1, 0, -10]) Haq """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,uzn_Latn,python,"

def common(l1: list, l2: list):
    """"""Ikki roʻyxat uchun saralab olingan yagona umumiy elementlarni qaytaring. >>> umumiy (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> umumiy (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,uzn_Latn,python,"

def largest_prime_factor(n: int):
    """"""n ning eng katta bos sonli koʻpaytuvchisini qaytaring. n > 1 va bos sonli boʻlmagan deb taxmin qiling. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,uzn_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n - 1 dan n gacha boʻlgan sonlarni yigʻadigan funksiya. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,uzn_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets - ""("" va """") qatoridir. Agar har bir ochilish qavsida tegishli yopilish qavs bo'lsa, True qaytaring. >>> correct_bracketing (((""("") False >>> correct_bracketing ((("")) True >>> correct_bracketing (((())) True >>> correct_bracketing ((("") ((()) False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,uzn_Latn,python,"

def derivative(xs: list):
    """"""xs koʻphadning koeffitsiyentlarini ifodalaydi. xs[0] + xs[1] * x + xs[2] * x^2 + .... Ushbu koʻphadning hosilasini bir xil shaklda qaytaring. >>> hosila (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> hosila ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,uzn_Latn,python,"

def fibfib(n: int):
    """"""FibFib raqamlar ketma-ketligi Fibbonacci ketma-ketligiga o'xshash ketma-ketlikdir, u quyidagicha aniqlanadi: fibfib ((0) == 0 fibfib ((1) == 0 fibfib ((2) == 1 fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). Iltimos, fibfib raqamlar ketma-ketligining n-chi elementini samarali hisoblash uchun funksiya yozing. >>> fibfib ((1) 0 >>> fib ((5) 4 >>> fib fib ((8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,uzn_Latn,python,"
FIX = """"""So'zni ifoda etuvchi zanjirni kirish sifatida qabul qilib, zanjirdagi tovushlar sonini qaytaradigan fonksiyani yozing. Bu holatdagi tovushlar 'a', 'e', 'i', 'o', 'u'. Bu erda 'y' ham tovushdir, lekin faqat berilgan so'z oxirida bo'lganda. Misol: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Ko'proq sinov holatlarini qo'shing. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,uzn_Latn,python,"
def circular_shift(x, shift):
    """"""Butun x sonining raqamlarini aylana bilan siljitib, raqamlarni oʻngga siljitib, natijani qator sifatida qaytaring. Agar shift > raqamlar soni boʻlsa, raqamlarni teskari qaytaring. >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,uzn_Latn,python,"
def digitSum(s):
    """"""Vazifa Qatlamni kirish sifatida qabul qiladigan va faqat yuqori belgilar yig'indisini ASCII kodlari sifatida qaytaradigan funksiya yozish. Misol: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,uzn_Latn,python,"
def fruit_distribution(s,n):
    """"""Ushbu vazifada sizga mevalar savatida taqsimlangan olma va apelsinlar sonini ifodalovchi qator beriladi. Ushbu savatda olma, apelsin va mango mevalari mavjud. Portekiz va olmalarning umumiy sonini ifodalovchi qator va savatdagi mevalarning umumiy sonini ifodalovchi butun son berilganda, savatdagi mango mevalarining sonini qaytaring. masalan: fruit_distribution""5(alma va 6 apelsin"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 olma va 1 apelsin"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 olma va 3 apelsin"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 olma va 1 apelsin"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,uzn_Latn,python,"
def pluck(arr):
    """"""""Negativ bo'lmagan butun sonli tugunlarga ega bo'lgan daraxtning bir shoxini ifodalovchi massivni ko'rib chiqib, sizning vazifangiz - bu tugunlardan birini tortib olish va uni qaytarishdir. Tortilgan tugun eng kichik juft qiymatga ega bo'lgan tugun bo'lishi kerak. Agar bir nechta eng kichik juft qiymatga ega bo'lgan tugunlar topilsa, eng kichik indeksga ega bo'lgan tugunni qaytaring. Tortilgan tugun ro'yxatda qaytarilishi kerak, [ smalest_value, uning indeksi ], Agar juft qiymat bo'lmasa yoki berilgan massiv bo'sh bo'lsa, qaytaring []. Misol: 1: Kirish: [4,2,3] Chiqish: [2, 1] Tushuntirish: 2 eng kichik juft qiymatga ega va 2 eng kichik indeksga ega. Misol 2: Kirish: [1,2,3] Chiqish: [2, 1] Tushuntirish: 2 eng kichik qiymatga ega va 2 eng kichik juft indeksga ega. Misol 3: Kirish: [] Chiqish: [] Kirish: [4: [5, 3, 4] Chiqish: [0, 1] Chiqish: 0: eng kichik tugunni qaytaring, eng kichik indeksga ega bo'lgan tugunni tanlang. Misol: * = 0, 1 * * birinchi nuqta, lekin eng kichik indeksga ega bo'lgan tugunni tanlaymiz, shuning uchun eng kichik nol qiymat mavjud.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,uzn_Latn,python,"
def search(lst):
    '''Sizga musbat butun sonlarning bo'sh bo'lmagan ro'yxati beriladi. Noldan katta bo'lgan va butun sonning qiymatiga teng yoki undan katta bo'lgan eng katta butun sonni qaytaring. Butun sonning chastoti bu ro'yxatda ko'rinadigan son. Agar bunday qiymat mavjud bo'lmasa, -1 qaytaring. Misollar: qidirish (([4, 1, 2, 2, 3, 1]) == 2 qidirish ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 qidirish ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,uzn_Latn,python,"
def strange_sort_list(lst):
    '''To'liq sonlar ro'yxati berilganda, ro'yxatni g'alati tartibda qaytaring. G'alati tartiblash, siz minimal qiymatdan boshlaganingizda, keyin qolgan butun sonlarning maksimal miqdoridan, keyin minimal va hokazo. Misollar: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,uzn_Latn,python,"
def triangle_area(a, b, c):
    '''Uchburchakning uch tomoni uzunligi berilgan. Agar uchta tomon haqiqiy uchburchakni tashkil qilsa, uchburchak yuzasini 2 o'nli kasrgacha yaxlitlang. Aks holda, -1 qaytarish kerak. Agar har qanday ikkita tomonning yig'indisi uchinchi tomondan katta bo'lsa, uch tomon haqiqiy uchburchakni hosil qiladi. Misol: triangle_area ((3, 4, 5) == 6.00 triangle_area ((1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,uzn_Latn,python,"
def will_it_fly(q,w):
    '''Agar q ob'ekti uchsa, True, aks holda False funksiyasini yozing. Agar q ob'ekti muvozanatli bo'lsa (bu palindromik ro'yxat) va uning elementlari yig'indisi maksimal mumkin bo'lgan og'irlikdan kam yoki teng bo'lsa, u True. Misol: will_it_fly (([1, 2], 5) â -> False # 1+2 maksimal mumkin bo'lgan og'irlikdan kam, ammo u muvozanatsiz. will_it_fly (([3, 2, 3], 1) â -> False # muvozanatli, ammo 3+2+3 maksimal mumkin bo'lgan og'irlikdan ko'p. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 maksimal mumkin bo'lgan og'irlikdan kam va u muvozanatlidir. will_it_fly ((([3], â 5) -> True # 3 maksimal mumkin bo'lgan og'irlikdan kam va u muvozanatlidir.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,uzn_Latn,python,"
def smallest_change(arr):
    """"""To'liq sonlar qatorini ko'rib chiqaylik, masalani palindromik qilish uchun o'zgartirish kerak bo'lgan minimal elementlarni toping. Palindromik massiv - bu orqaga va oldinga bir xil o'qiladigan massiv. Bir o'zgarishda siz bir elementni boshqa elementga o'zgartira olasiz. Masalan: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,uzn_Latn,python,"
def total_match(lst1, lst2):
    '''Ikki qatorni qabul qiladigan va barcha qatorlarda umumiy belgilar soni boshqa ro'yxatdan kam bo'lgan ro'yxatni qaytaradigan funksiya yozing. agar ikkita ro'yxatda belgilar soni bir xil bo'lsa, birinchi ro'yxatni qaytaring. Misollar total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi'], 'hi'_match ((['4'], ['1'', '2'', '3'', '4'', '5']) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,uzn_Latn,python,"
def is_multiply_prime(a):
    """"""Agar berilgan son 3 ta yalpi sonni koʻpaytirsa va boshqa holatda notoʻgʻri boʻlsa, toʻgʻri boʻlgan funksiyani yozing. (a) 100 dan kichikligini bilish. Misol: is_multiply_prime ((30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,uzn_Latn,python,"
def is_simple_power(x, n):
    """"""Sizning vazifangiz x n ning oddiy darajasi bo'lsa, boshqa hollarda esa noto'g'ri bo'lgan funksiyani yozishdir. x n ning oddiy darajasi bo'lsa, n**int=x Masalan: is_simple_power ((1, 4) => true is_simple_power ((2, 2) => true is_simple_power ((8, 2) => true is_simple_power ((3, 2) => false is_simple_power ((3, 1) => false is_simple_power ((5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,uzn_Latn,python,"
def iscube(a):
    '''Agar bu ingeger ba'zi butun sonlarning kubini bo'lsa, to'g'ri deb qaytaradigan funksiyani yozing. Izoh: siz kiritilgan ma'lumotni har doim to'g'ri deb hisoblashingiz mumkin. Misol: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,uzn_Latn,python,"
def hex_key(num):
    """"""Sizdan oltmishli sonni ketma-ketlik sifatida qabul qiladigan va oltmishli son raqamlari sonini hisoblaydigan funksiya yozish vazifasi topshirildi (oltmishli son yoki oltmishli son - bu 1 dan katta bo'lgan va ikkita kichik tabiiy sonning ko'paytmasi bo'lmagan tabiiy son). Oltmishli raqamlar 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Oltmishli sonlar 2, 3, 5, 7, 11, 13, 17 ... . Shunday qilib, siz quyidagi raqamlarning sonini aniqlashingiz kerak: 2, 3, 5, 7, B (= o'nli son 11), D (= o'nli son 13). Izoh: siz kiritishni har doim to'g'ri yoki bo'sh deb hisoblashingiz mumkin, va A,B,C,D,E,F belgilari har doim katta harflarda. Misollar: ""AB"" uchun chiqish raqamlari 1. bo'lishi kerak ""AB"" uchun chiqish raqamlari 1. bo'lishi kerak ""1077E"" uchun chiqish raqamlari 2. bo'lishi kerak ""AB"" uchun chiqish raqamlari 1. bo'lishi kerak ""AB"" uchun chiqish raqamlari 4.331 bo'lishi kerak ""ABC"" uchun chiqish raqamlari 2. bo'lishi kerak ""ABC"" uchun chiqish raqamlari 6.01234567D ""2020"" bo'lishi kerak.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,uzn_Latn,python,"
def decimal_to_binary(decimal):
    """"""Sizga o'nli son shaklida raqam beriladi va sizning vazifangiz uni ikkilik formatga aylantirishdir. Funksiya har bir belgi ikkilik sonni ifodalaydigan qator qaytarishi kerak. Ushbu qatordagi har bir belgi '0' yoki '1' bo'ladi. Ushbu qatorning boshida va oxirida qo'shimcha bir nechta belgilar 'db' bo'ladi. Qo'shimcha belgilar formatga yordam berish uchun mavjud. Misol: o'nli_to_binary ((15) # qaytaradi ""db1111db"" o'nli_to_binary32) # qaytaradi ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,uzn_Latn,python,"
def is_happy(s):
    """"""Sizga s qator berilgan. Sizning vazifangiz - bu qator baxtli yoki baxtsizligini tekshirishdir. Agar uning uzunligi kamida 3 ta va har 3 ta ketma-ket harflar farq qilsa, u baxtli hisoblanadi. Masalan: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (b) => True is_happy (x) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,uzn_Latn,python,"
def numerical_letter_grade(grades):
    """"""Semestrning so'nggi haftasi va o'qituvchi o'quvchilarga baho berish kerak. O'qituvchi baho berish uchun o'z algoritmini yaratdi. Yagona muammo shundaki, u baho berish uchun ishlatilgan kodni yo'qotdi. U sizga ba'zi o'quvchilar uchun GPA ro'yxatini berdi va siz quyidagi jadval yordamida harf baholari ro'yxatini chiqarib beradigan funksiyani yozishingiz kerak: GPA. Xat darsi 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,uzn_Latn,python,"
def prime_length(string):
    """"""Stringni qabul qilib, String uzunligi bos son boʻlsa True yoki aks holda False funksiyasini yozing Misollar prime_length (('Salom') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,uzn_Latn,python,"
def starts_one_ends(n):
    """"""Ijobiy butun son n berilgan boʻlsa, 1 bilan boshlangan yoki tugaydigan n raqamli ijobiy butun sonlar sonini qaytaring. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,uzn_Latn,python,"
def solve(N):
    """"""N = 1000 uchun raqamlar yig'indisi 1 bo'ladi, chiqish ""1"" bo'lishi kerak. N = 150 uchun raqamlar yig'indisi 6 bo'ladi, chiqish ""110"" bo'lishi kerak. N = 147 uchun raqamlar yig'indisi 12 bo'ladi, chiqish ""1100"" bo'lishi kerak. O'zgaruvchilar: @N butun sonlar cheklovlari: 0 â‰¤ N â‰¤ 10000. Chiqish: ikkilik sonlar qator """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,uzn_Latn,python,"
def add(lst):
    """"""To'g'ri sonlar bo'lmagan ro'yxat berilganda lst. toq sonli elementlarni qo'shing. Misol: qo'shing (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,uzn_Latn,python,"
def anti_shuffle(s):
    """"""Stringni qabul qilib, uning tartiblangan versiyasini qaytaradigan funksiya yozing. Stringning tartiblangan versiyasi, barcha so'zlar (bo'shliq bilan ajratilgan) yangi so'z bilan almashtirilgan bo'lib, unda barcha belgilar ascii qiymatiga asoslangan holda o'sib boruvchi tartibda joylashtirilgan. Izoh: Siz so'zlar va bo'sh joylarning tartibini gapda saqlab qolishingiz kerak. Masalan: anti_shuffle ((('Hi') qaytaradi 'Hi' anti_shuffle ((('salom') qaytaradi 'ehllo' anti_shuffle (('Salom dunyo!!!') qaytaradi 'Salom !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,uzn_Latn,python,"
def get_row(lst, x):
    """"""Sizga matritsaga o'xshash, o'ralgan ro'yxat sifatida 2 o'lchovli ma'lumotlar berilgan, ammo matritsalardan farqli o'laroq, har bir satrda ustunlar soni turlicha bo'lishi mumkin. lst va butun x berilgan bo'lsa, ro'yxatda x butun sonlarini toping va tuplelar ro'yxati qaytaring, [(x1, y1), (x2, y2) ...] shundayki, har bir tuple koordinata - (satr, ustunlar), 0 dan boshlanadi. Boshida koordinatalarni ustunlar bo'yicha o'sib boruvchi tartibda saralash. Shuningdek, satr koordinatalarini ustunlar bo'yicha tushadigan tartibda saralash. Misollar: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0) get_(], 1) [] == [_[ satr, 1, 2, 3, 2], [] == [2, 3] """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,uzn_Latn,python,"
def sort_array(array):
    """"""Salbiy bo'lmagan butun sonlar qatorini ko'rib chiqaylik, sozlashdan so'ng berilgan qatorning nusxasini qaytaring, agar summa ((birinchi indeks qiymati, oxirgi indeks qiymati) toq bo'lsa, berilgan qatorni ko'tarilish tartibida yoki agar summa ((birinchi indeks qiymati, oxirgi indeks qiymati) juft bo'lsa, uni tushish tartibida saralash. Izoh: * berilgan qatorni o'zgartirmang. Misollar: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,uzn_Latn,python,"
def encrypt(s):
    """"""Bir qatorni argument sifatida qabul qiladigan va alifbo aylantirilayotgan holda shifrlangan qatorni qaytaradigan encrypt funksiyasini yarating. Alifbo shunday aylantirilishi kerakki, harflar ikki marta ikki joyga ko'paytirilgan holda pastga siljishi kerak. Masalan: encrypt (('hi') 'lm' encrypt (('asdfghjkl') 'ewhjklnop' encrypt (('gf') 'kj' encrypt (('et') 'ix' qaytaradi.""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,uzn_Latn,python,"
def next_smallest(lst):
    """"""Sizga butun sonlar ro'yxati berilgan. Ro'yxatning eng kichik ikkinchi elementini qaytaradigan next_smallest () funksiyasini yozing. Agar bunday element bo'lmasa, Noneni qaytaring. next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == next_smallest () == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,uzn_Latn,python,"
def is_bored(S):
    """"""Sizga bir qator so'zlar beriladi va sizning vazifangiz zerikishlarni hisoblashdir. zerikish - bu ""I"" so'zi bilan boshlanadigan jumla. Jumlalar """", ""?"" yoki ""! "" bilan chegaralanadi. Masalan: >>> zerikadi (((""Salom dunyo"") 0 >>> zerikadi ((""Osmon ko'k. Quyosh porlaydi. Men bu ob-havoga sevaman"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,uzn_Latn,python,"
def any_int(x, y, z):
    '''3 ta sonni qabul qiladigan funksiya yarating. Agar sonlardan biri ikkinchisining yig'indisiga teng bo'lsa va barcha sonlar butun sonlar bo'lsa, u to'g'ri javobni qaytaradi. Boshqa har qanday holatlarda noto'g'ri javobni qaytaradi. Misollar: har qanday_int{5, 2, 7} -> Haqiqiy har qanday_int{3, 2, 2} -> Haqsiz har qanday_int{3, -2, 1) -> Haqiqiy har qanday_int{3.6, -2.2, 2) -> Haqsiz '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,uzn_Latn,python,"
def encode(message):
    """"""Xabarni qabul qiladigan va barcha harflarning katta harflarini almashtiradigan, xabardagi barcha tovushlarni ingliz alifbosida ushbu tovushdan 2 o'rin oldinda ko'rinadigan harf bilan almashtiradigan funksiyani yozing. Faqat harflarni qabul qiling. Misollar: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,uzn_Latn,python,"

def skjkasdkd(lst):
    """"""Sizga butun sonlar ro'yxati berilgan. Siz eng katta bos sonni topishingiz va uning raqamlari yig'indisini qaytarishingiz kerak. Misol: Agar lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] bo'lsa, chiqish 10 bo'lishi kerak Agar lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] bo'lsa, chiqish 25 bo'lishi kerak Agar lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] bo'lsa, chiqish 13 bo'lishi kerak Agar lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] bo'lsa, chiqish 11 bo'lishi kerak Agar lst = [0,81,12,31,21] bo'lsa, chiqish 3 bo'lishi kerak Agar lst = [1,0,1,8,2,1,7] bo'lsa, chiqish 7 bo'lishi kerak""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,uzn_Latn,python,"
def check_dict_case(dict):
    """"""Agar hamma kalitlar kichik harflar bilan yozilgan yoki barcha kalitlar katta harflar bilan yozilgan bo'lsa, True qaytaradi. Aks holda False qaytaradi. Funksiya False qaytarishi kerak, agar berilgan lug'at bo'lsa. Misol: check_dict_case{""a"":""apple"", ""b"":""banana""}) True qaytarishi kerak. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) False qaytarishi kerak. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) False qaytarishi kerak. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) False qaytarishi kerak. check_dict_case{""NC"":""STATE"", ""ZIP"":""12345"" }) True qaytarishi kerak.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,uzn_Latn,python,"
def count_up_to(n):
    """"""Salbiy boʻlmagan butun sonni qabul qiladigan va n dan kichik boʻlgan birinchi n butun sonlar matrasini qaytaradigan funksiyani amalga oshiradi. Masalan: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,uzn_Latn,python,"
def multiply(a, b):
    """"""Ikki butun sonni qabul qilib, ularning birlik raqamlari ko'paytmasini qaytaradigan funksiyani to'ldiring. Kiritish har doim to'g'ri deb faraz qiling. Misollar: ko'paytirish ((148, 412) 16. ko'paytirish ((19, 28) 72. ko'paytirish ((2020, 1851) 0 qaytarishi kerak ko'paytirish ((14,-15) 20 qaytarishi kerak. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,uzn_Latn,python,"
def count_upper(s):
    """"""S qatorini hisobga olgan holda, katta harfli tovushlarning sonini teng koʻrsatkichlarda sanab chiqing. Masalan: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 qaytaradi """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,uzn_Latn,python,"
def closest_integer(value):
    '''Bir sonni ifodalaydigan qiymat (qator) ni oladigan va unga eng yaqin butun sonni qaytaradigan funksiya yarating. Agar son ikkita butun sondan teng boʻlsa, uni noldan uzoqlashtiring. Misollar >>> nearest_integer ((""10"") 10 >>> nearest_integer ((""15.3"") 15 Izoh: Noldan uzoqlashtirish shuni anglatadiki, agar berilgan son ikkita butun sondan teng boʻlsa, siz noldan eng uzoq boʻlganini qaytarishingiz kerak. Misol uchun nearest_integer "" ((14.5"") 15 va nearest_integer "" ((-14.5"") qaytarishi kerak -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,uzn_Latn,python,"
def make_a_pile(n):
    """"""Agar n musbat butun sonni hisobga olsak, n darajali toshlardan iborat to'plamni tuzishimiz kerak. Birinchi darajadagi toshlar n. Keyingi darajadagi toshlar soni: - n n bo'lsa, keyingi toq son. - n n bo'lsa, keyingi juft son. Har bir darajadagi toshlar sonini ro'yxatda qaytaring, bu erda indeks i dagi element darajadagi toshlar sonini ifodalaydi (i + 1). Misol: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,uzn_Latn,python,"
def words_string(s):
    """"""Sizga tovushlarni bo'laklar yoki bo'shliqlar bilan ajratilgan so'zlar ketma-ketligi beriladi. Sizning vazifangiz - bu ketmani so'zlarga bo'lish va so'zlarning massasini qaytarishdir. Masalan: words_string ((""Salom, mening ismim Jon"") == [""Salom"", ""mening"", ""nom"", ""is"", ""John""] words_string ((""Bir, ikki, uch, to'rt, besh, olti"") == [""Bir"", ""ikki"", ""uch"", ""to'rt"", ""besh"", ""olti""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,uzn_Latn,python,"
def choose_num(x, y):
    """"""Ushbu funksiya ikkita musbat sonni x va y oladi va [x, y] oralig'idagi eng katta juft sonni qaytaradi. Agar bunday raqam bo'lmasa, funksiya -1 ni qaytarishi kerak. Masalan: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,uzn_Latn,python,"
def rounded_avg(n, m):
    """"""Sizga n va m bo'lgan ikkita musbat butun sonlar berilgan va sizning vazifangiz n dan m gacha bo'lgan butun sonlarning o'rtacha miqdorini hisoblashdir. Javobni eng yaqin butun songa yaxlitlang va uni ikkilik songa aylantiring. Agar n m dan katta bo'lsa, -1 ni qaytaring. Misol: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,uzn_Latn,python,"
def unique_digits(x):
    """"""X. ning musbat butun sonlari ro'yxati berilganda, barcha elementlarning teng raqamlari bo'lmagan tartiblangan ro'yxatini qaytaradi. Izoh: Qaytarib berilgan ro'yxat o'sish tartibida tartiblanishi kerak. Masalan: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,uzn_Latn,python,"
def by_length(arr):
    """"""To'liq sonlar qatorini ko'rib chiqaylik, 1 va 9 o'rtasidagi to'liq sonlarni saralaymiz, natijada hosil bo'lgan qatorni orqaga buramiz, so'ngra har bir raqamni ""Bir"", ""Ikki"", ""Uch"", ""To'rt"", ""Besh"", ""Olti"", ""Yetti"", ""Sekkiz"", ""To'qqiz"" dan mos keladigan nom bilan almashtiramiz. Masalan: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> tartib arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> teskari arr -> [8, 5, 4, 3, 2, 2, 1, 1] qaytarish [""Sekkiz"", ""To'rt"", ""Uch"", ""Ikki"", ""Ikki"", ""Bir"", ""Bir""] Agar qator bo'sh bo'lsa, bo'sh qaytarish: arr = [] qaytarish [] Agar qatorda biron bir g'alati raqam bo'lsa, uni e'tiborsiz qoldiring: arr = [1, -1 , 55] -> arr -> [1, 55] -> teskari arr = [55,1] - ['One'] qaytarish ['] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,uzn_Latn,python,"
def f(n):
    """"""f funksiya n ni parametr sifatida qabul qiladi va n o'lchamli ro'yxatni qaytaradi, ya'ni i indeksidagi elementning qiymati i ning faktoriyali bo'ladi, agar i juft bo'lsa yoki 1 dan i gacha bo'lgan sonlarning yig'indisi bo'lsa. i 1 dan boshlanadi. i ning faktoriyali 1 dan i gacha bo'lgan sonlarning ko'paytmasi (1 * 2 * ... * i). Misol: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,uzn_Latn,python,"
def even_odd_palindrome(n):
    """"""Agar n musbat butun sonni bergan bo'lsak, unda ((1, n) oralig'idagi to'g'ri va toq sonli palindromlar soniga ega bo'lgan tuple qaytaring. Misol1: Kirish: 3 Chiqish: (1, 2) Tushuntirish: To'g'ri palindromlar 1, 2, 3. ulardan biri juft, ikkitasi esa toq. Misol2: Kirish: 12 Chiqish: (4, 6) Tushuntirish: To'g'ri palindromlar 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. to'rttasi juft, 6 tasi toq. Izoh: 1. 1 <= n <= 10^3 2. tuple tegishincha juft va toq sonli palindromlar sonini qaytardi. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,uzn_Latn,python,"
def count_nums(arr):
    """"""To'liq sonlar qatorini qabul qiladigan va raqamlar yig'indisi > 0 bo'lgan elementlar sonini qaytaradigan count_nums funksiyasini yozing. Agar raqam manfiy bo'lsa, unda uning birinchi imzolangan raqami manfiy bo'ladi: masalan, -123 raqamlari -1, 2 va 3 bilan imzolangan: >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,uzn_Latn,python,"
def move_one_ball(arr):
    """"""Bizda N butun raqamlardan iborat 'arr' massiv bor arr[1], arr[2], ..., arr[N].Massivdagi raqamlar tasodifiy tartibda tartiblanadi. Sizning vazifangiz quyidagi operatsiyani bajarish orqali massivni kamaymaydigan tartibda saralash mumkinligini aniqlashdir: Siz o'ngga siljish operatsiyasini istalgan miqdorda bajarishingiz mumkin. Bir o'ngga siljish operatsiyasi massivning barcha elementlarini o'ng yo'nalishda bir pozitsiyaga siljishni anglatadi. Massivning oxirgi elementi massivning boshlang'ich holatiga, ya'ni 0-indeksiga ko'chiriladi. Agar yuqoridagi operatsiyani bajarish orqali saralab olingan massivni olish mumkin bo'lsa, unda True qaytarilsa, boshqasi False qaytarilsa. Agar berilgan massiv bo'sh bo'lsa, unda True qaytarilsa. Izoh: Berilgan ro'yxatda noyob elementlar bo'lishi kafolatlanadi. Masalan: move_one_{(ball_[4, 3, 5, 2>======================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,uzn_Latn,python,"
def exchange(lst1, lst2):
    """"""Ushbu masala uchun siz ikkita raqamli ro'yxatni oladigan va lst1ni faqat juft sonli ro'yxatga aylantirish uchun elementlarni almashtirish mumkinligini aniqlaydigan funksiyani amalga oshirasiz. lst1 va lst2 o'rtasidagi almashtiriladigan elementlar soniga cheklov yo'q. Agar lst1 va lst2 o'rtasidagi elementlarni almashtirish mumkin bo'lsa, lst1 ning barcha elementlari juft bo'lishi uchun ""HA"" ni qaytaring. Aks holda, ""Yo'q"" ni qaytaring. Masalan: almashtirish [1, 2, 3, 4], [1, 2, 3, 4]) => ""HA"" almashtirish [1, 2, 3, 4], [1, 5, 3, 4]) => ""Yo'q"" Kirish ro'yxatlari bo'sh bo'lmasligi taxmin qilinadi. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,uzn_Latn,python,"
def histogram(test):
    """"""Bo'shliq bilan ajratilgan kichik harflarni ifodalovchi qator berilgan bo'lsa, eng ko'p takrorlangan harfning lug'atini qaytaring va tegishli hisobni o'z ichiga oling. Agar bir nechta harf bir xil bo'lsa, ularning barchasini qaytaring. Misol: histogramma ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogramma ((('a b b a') == {'a': 2, 'b': 2} histogramma ((('a b c a b') == {'a': 2, 'b': 2} histogramma ((('b b a b') == {'b 4}: histogramma (((')) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,uzn_Latn,python,"
def reverse_delete(s,c):
    """"""Vazifa Bizga s va c qatorlari berilgan, siz s dagi har qanday belgi bilan teng bo'lgan barcha belgilarni o'chirishingiz kerak, keyin natija qatorining palindrom bo'lganligini tekshiring. Agar u orqaga va oldinga bir xil o'qiladigan bo'lsa, stringa palindrom deyiladi. Siz natija qatorini o'z ichiga olgan tuple va tekshirish uchun True/False qaytarishingiz kerak. Misol uchun s = ""abcde"", c = ""ae"", natija bo'lishi kerak ('bcd', False) s = ""abcdef"", c = ""b"" natija bo'lishi kerak ('acdef', False) s = ""abcdedcba"", c = ""ab"", natija bo'lishi kerak ('cdedc', True) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,uzn_Latn,python,"
def odd_count(lst):
    """"""Har bir qator faqat raqamlardan iborat bo'lgan qatorlar ro'yxati berilganda, ro'yxatni qaytaring. Chiqarishning har bir elementi i ""kir i ning kiruvchi i qatoridagi toq elementlar soni"" bo'lishi kerak. bu erda barcha i lar kiruvchi i ning i'chi qatoridagi toq raqamlar soni bilan almashtirilishi kerak. >>> odd_count['1234567']) [""4n ning 4n ning str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4ng 4 str4n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n str8n""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,uzn_Latn,python,"
def minSubArraySum(nums):
    """"""To'liq sonlar qatorini ko'rib chiqing, n sonlarning bo'sh bo'lmagan har qanday kichik qatorining minimal summasini toping. Misol minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,uzn_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Sizga to'rtburchak shaklidagi quduqlar to'plami berilgan. Har bir qator bitta quduqni anglatadi, va har bir qatordagi 1 bitta suv birligini anglatadi. Har bir quduqdan suv olish uchun ishlatilishi mumkin bo'lgan tegishli kovga ega va barcha kovlar bir xil sig'imga ega. Sizning vazifangiz bu qutilarni bo'shatish uchun kovlardan foydalanishdir. Kovuqlarni tushirish uchun kerak bo'lgan sonni chiqarib bering. Misol 1: Kirish: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Chiqish: 6 Misol 2: Kirish: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Chiqish: 5 Misol 3: Kirish: [[0,0,0], [0,0,0]] bucket_capacity: 5 Chiqish
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,uzn_Latn,python,"
def sort_array(arr):
    """"""Ushbu Kata-da siz manfiy bo'lmagan butun sonlarni o'nli qiymatga asoslangan tartibda, ularning ikkilik ko'rinishidagi birlar soniga qarab saralashingiz kerak. Xuddi shunday birlar soni uchun o'nli qiymatga asoslangan holda saralash. U quyidagicha amalga oshirilishi kerak: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,uzn_Latn,python,"
def select_words(s, n):
    """"""Agar string s boʻlsa, funksiya boʻsh roʻyxatni qaytarishi kerak. Izoh: Siz kiritilgan stringda faqat harflar va boʻsh joylar bor deb taxmin qilishingiz mumkin. Misollar: select_words (""Mary had a little lamb"", 4) ==> [""little""] select_words (""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words (""Hello world"", 4) ==> [""world""] select_words (""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,uzn_Latn,python,"
def get_closest_vowel(word):
    """"""Sizga so'z berilgan. Sizning vazifangiz so'zning o'ng tomonidagi ikkita tovush o'rtasida turgan eng yaqin tovushni topishdir (katta harflarga mos keladi). Boshi va oxiridagi tovushlar hisobga olinmaydi. Agar yuqoridagi shartga mos keladigan hech qanday tovush topilmasa, bo'sh qatorni qaytaring. Berilgan qatorda faqat ingliz harfi bor deb taxmin qilishingiz mumkin. Misol: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,uzn_Latn,python,"
def match_parens(lst):
    '''Sizga ikkita qator berilgan, ikkala qator ham faqat '(' yoki ') ' ochiq qavslardan iborat. Sizning vazifangiz ikkita qatorni qandaydir tartibda birlashtirib olish mumkinligini tekshirishdir, natijada ketma-ketlik yaxshi bo'ladi. S qatorida barcha qavslar muvozanatli bo'lsa, S faqat yaxshi deb hisoblanadi. Masalan: ""((())) "" qator yaxshi, ""()) "" qator esa yo'q. Agar yaxshi qatorni yaratishning usuli bo'lsa, ""Ha"" ni qaytaring, aks holda esa ""Yo'q"" ni qaytaring. Misollar: match_parens[('() "", ') ']) == 'Ha' match_parens[(') ', ') ']) == 'Yo' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,uzn_Latn,python,"
def maximum(arr, k):
    """"""To'liq sonlar va musbat butun sonlar to'plamini berib, uzunligi k bo'lgan tartiblangan ro'yxatni maksimal k sonlar bilan qaytaring. Misol1: Kirish: arr = [-3, -4, 5], k = 3 Chiqish: [-4, -3, 5] Misol2: Kirish: arr = [4, -4, 4], k = 2 Chiqish: [4, 4] Misol3: Kirish: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Chiqish: [2] Izoh: 1. Matraning uzunligi [1, 1000] oralig'ida bo'ladi. 2. Matraning elementlari [-1000, 1000] oralig'ida bo'ladi. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,uzn_Latn,python,"
def solution(lst):
    """"""To'g'ri sonlar ro'yxati berilgan bo'lsa, barcha toq elementlarning yig'indisini qaytaring. Misollar yechimi (([5, 8, 7, 1]) ==> 12 yechimi (([3, 3, 3, 3]) ==> 9 yechimi (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,uzn_Latn,python,"
def add_elements(arr, k):
    """"""To'liq sonlar arr va k butun sonli bo'lmagan matrida berilgan bo'lsa, arrning birinchi k elementlaridan ko'pi bilan ikki raqamli elementlar yig'indisini qaytaring. Misol: Kirish: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Chiqish: 24 # 21 + 3 yig'indisi Cheklovlar: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,uzn_Latn,python,"
def get_odd_collatz(n):
    """"""Agar n musbat butun sonni bergan boʻlsak, n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n sonli n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,uzn_Latn,python,"
def valid_date(date):
    """"""Siz ma'lum bir sana zanjirini tasdiqlaydigan va agar sana haqiqiy bo'lsa Haq bo'lganini qaytaradigan funksiyani yozishingiz kerak. Aks holda, Haq bo'lganini qaytaradi. Agar quyidagi qoidalarning barchasi bajarilgan bo'lsa, sana haqiqiy bo'ladi: 1. Sana zanjiri bo'sh emas. 2. Kunlar soni 1,3,5,7,8,10,12 oylar uchun 1 dan kam bo'lmagan yoki 31 kundan ko'p bo'lmagan kunlar soni 4,6,9,11 oylar uchun 1 dan kam bo'lmagan yoki 30 kundan ko'p bo'lmagan kunlar soni. Va kunlar soni 1 dan kam bo'lmagan yoki 29 dan ko'p bo'lmagan kunlar soni 2. 3. Oyning soni 1 dan kam bo'lmagan yoki 12 dan ko'p bo'lmagan oylar. 4. Sana quyidagi formatda bo'lishi kerak, masalan: valid_date (('03-11-2000') => True_date (valid_date) => False valid_date (valid_date) => '04-01-2012') => False_date (valid_date) => '06-04-2020') => True_date (valid) => valid (date (valid) => '06/04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,uzn_Latn,python,"
def split_words(txt):
    '''So'zlarning qatorini ko'rib chiqsak, so'zlarning ro'yxatini bo'sh joyga bo'ling, agar matnda bo'sh joy bo'lmasa, siz ',' bo'sh joyni bo'lishingiz kerak, agar bo'sh joy bo'lmasa, siz alifbonda xilma-xil tartibdagi kichik harflar sonini qaytarishingiz kerak, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Misollar split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,uzn_Latn,python,"
def is_sorted(lst):
    '''Sonlar ro'yxati berilganda, ular o'sib boruvchi tartibda saralashilgan yoki bo'lmaganligini qaytaring. Agar ro'yxatda bir xil sonning 1 dan ortiq nusxasi bo'lsa, Yolg'on qaytaring. Salbiy sonlar yo'q va faqat butun sonlar deb taxmin qiling. Misollar is_sorted ((([5]) â -> Haq is_sorted (([1, 2, 3, 4, 5]) â -> Haq is_sorted (([1, 2, 3, 4, 5, 6]) â -> Yolg'on is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Haq is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Haq is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Yolg'on is_sorted (([1, 2, 2, 3, 3, 4]) â -> Haq is_sorted (([1, 2, 2, 2, 3, 4 -> Yolg'on ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,uzn_Latn,python,"
def intersection(interval1, interval2):
    """"""Sizga ikkita interval berilgan, har bir interval butun sonlar juftligidir. Masalan, interval = (boshlash, yakun) = (1, 2). Berilgan intervallar yopilgan, ya'ni interval (boshlash, yakun) bosh va oxiriga ham ega. Har bir interval uchun uning boshlanishi boshidan kichikroq yoki oxiriga teng deb hisoblanadi. Sizning vazifangiz bu ikki intervalning kesishmasi uzunligi bir bos sonmi yoki yo'qligini aniqlashdir. Masalan, intervallarning kesishmasi (1, 3), (2, 4) ning uzunligi 1 bo'lgan, bos son bo'lmagan (2, 3) ni aniqlang. Agar kesishma uzunligi bos son bo'lsa, ""HA"" ni qaytaring, aks holda ""YO'Q"" ni qaytaring. Agar ikki interval kesishmasa, ""YO'Q"" ni qaytaring. [input/output] namunalar: kesishmasi (((1, 2), (2, 3) ==> ""kesishmasi ("", 1) ""<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,uzn_Latn,python,"
def prod_signs(arr):
    """"""Sizga butun sonlar qatorini berishadi va siz butun sonlarning kattaliklarini yig'indisini matrida har bir sonning barcha belgilarining ko'paytmasi bilan ko'paytirib qaytarishingiz kerak, bu 1, -1 yoki 0 bilan ifodalanadi. Izoh: bo'sh arr uchun hech narsa qaytarilmaydi. Misol: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Hech narsa """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,uzn_Latn,python,"
def minPath(grid, k):
    """"""N qator va N ustun (N >= 2) va k musbat butun sonli tarmoqni hisobga olgan holda, tarmoqning har bir katakchasida qiymat mavjud. [1, N * N] oralig'idagi har bir butun son tarmoq katakchalarining katakchalarida aynan bir marta ko'rinadi. Siz tarmoqdagi k uzunligi bo'lgan minimal yo'lni topishingiz kerak. Siz har qanday katakchadan boshlashingiz mumkin va har bir bosqichda siz qo'shni katakchalarning har biriga o'tishingiz mumkin, boshqacha qilib aytganda, siz bilan hozirgi katakcha bilan chegarani bo'lishadigan katakchalarga o'tishingiz mumkin. Iltimos, shuni yodda tutingki, k uzunligi bo'lgan yo'l aynan k katakchalarni (alohida alohida bo'lmasligi kerak) tashrif buyurishni anglatadi. Siz tarmoqdan chiqolmaysiz. A (k uzunligi) yo'li B (k uzunligi) dan kichik deb hisoblanadi, agar A va B (ularni l_st va l_stA deb ataylik) katakchalaridagi qiymatlarning tartiblangan ro'yxatini tuzganingizdan so'ng, l_stA va l_stB (ularni aralashtirib oling), l_stA lexik jihatdan l_stA dan kichik bo'ladi.""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,uzn_Latn,python,"
def tri(n):
    """"""Fibonachi ketma-ketligi hamma uchun ma'lum, uni matematiklar oxirgi ikki asr davomida chuqur o'rganishgan. Ammo odamlar bilmagan narsa Tribonachi ketma-ketligi. Tribonachi ketma-ketligi takrorlanish bilan belgilanadi: tri(1) = 3 tri(n) = 1 + n / 2, agar n juft bo'lsa. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), agar n toq bo'lsa. Masalan: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Sizga n manfiy bo'lmagan butun son berilgan bo'lsa, siz Tribonachi ketma-ketligining birinchi n + 1 sonlari ro'yxatini qaytarishingiz kerak. Misol: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,uzn_Latn,python,"
def digits(n):
    """"""Agar n musbat butun sonni bergan boʻlsak, n sonli sonlarning koʻpaytmasini qaytaring. Agar barcha sonlar juft boʻlsa, 0 ni qaytaring. Masalan: sonlar ((1) == 1 son ((4) == 0 son ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,uzn_Latn,python,"
def is_nested(string):
    '''Faqat kvadrat qavslarni o'z ichiga olgan qatorni kirish sifatida oladigan funksiya yarating. Agar va faqatgina agar qavslarning kamida bitta qavs o'rnatilgan bo'lsa, funksiya True ni qaytarishi kerak. is_nested '[[]]') â -> True is_nested '[[]]]]]]][[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested '[[]]]]]] '[[') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,uzn_Latn,python,"

def sum_squares(lst):
    """"""Sizga raqamlar ro'yxati berilgan. Siz berilgan ro'yxatdagi kvadratdagi raqamlar yig'indisini qaytarishingiz kerak, ro'yxatdagi har bir elementni birinchi navbatda yuqoriga aylantiring. Misollar: lst = [1,2,3] uchun chiqish 14 bo'lishi kerak lst = [1,4,9] uchun chiqish 98 bo'lishi kerak lst = [1,3,5,7] uchun chiqish 84 bo'lishi kerak lst = [1.4,4.2,0] uchun chiqish 29 bo'lishi kerak lst = [-2.4,1,1] uchun chiqish 6 bo'lishi kerak """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,uzn_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Agar berilgan qatorning oxirgi belgisi alifbo belgisi boʻlsa va soʻzning bir qismi boʻlmasa, True va aks holda False funksiyasini yarating. Izoh: ""soʻz"" - boʻsh joy bilan ajratilgan belgilar guruhi. Misollar: check_if_last_char_is_a_letter ((""Apple pie"") â -> False check_if_last_char_is_a_letter ((""apple pi e"") â -> True check_if_last_char_is_a_letter ((""apple pi e"") â -> False check_if_last_char_is_a_letter"" (("") â -> False check_if_last_char_is_a_letter ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,uzn_Latn,python,"
def can_arrange(arr):
    """"""Agar bunday element mavjud bo'lmasa, -1 ni qaytaring. Berilgan matrida ikkilamchi qiymat bo'lmaydi. Misol: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,uzn_Latn,python,"
def largest_smallest_integers(lst):
    '''Funksiyani yarating, u tuple (a, b) ni qaytaradi, bu yerda 'a' manfiy butun sonlarning eng katta, 'b' esa ro'yxatdagi musbat butun sonlarning eng kichikidir. Agar manfiy yoki musbat butun sonlar bo'lmasa, ularni None sifatida qaytaring. Misollar: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,uzn_Latn,python,"
def compare_one(a, b):
    """"""Haqiqiy sonlarni ifodalovchi butun sonlarni, floatlarni yoki qatorlarni qabul qiladigan va berilgan o'zgaruvchi turida katta o'zgaruvchini qaytaradigan funksiya yarating. Agar qiymatlari teng bo'lsa, Noneni qaytaring. Izoh: Agar haqiqiy sonlar qator sifatida ifodalangan bo'lsa, ko'zgaruvchan nuqta bo'lishi mumkin . yoki , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,uzn_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Berilgan n sonini toʻgʻri 4 ta musbat juft sonlar yigʻindisi sifatida yozish mumkinligini baholash Misol is_equal_to_sum_even ((4) == Soxta is_equal_to_sum_even ((6) == Soxta is_equal_to_sum_even ((8) == Haq """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,uzn_Latn,python,"
def special_factorial(n):
    """"""Braziliyalik faktoriyal quyidagicha aniqlanadi: braziliyalik_faktorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! n > 0 Misol uchun: >>> special_factorial ((4) 288 Funksiya kirish sifatida butun sonni oladi va ushbu butun sonning maxsus faktoriyasini qaytarishi kerak. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,uzn_Latn,python,"
def fix_spaces(text):
    """"""_Nimadan oʻrganisherilgan boʻlsa, unda barcha boʻsh joylarni pastki belgisi bilan almashtiring va agar satrda ketma-ket 2 dan ortiq boʻsh joy boʻlsa, unda barcha ketma-ket boʻsh joylarni - fix_spaces ((""Misol"") bilan almashtiring. == ""Misol"" fix_spaces ((""Misol1"") == ""Misol_1"" fix_spaces (((""Misol2"") == ""_Misol_2"" fix_spaces ((""Misol 3"") == ""_Misol-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,uzn_Latn,python,"
def file_name_check(file_name):
    """"""Fayl nomini ifoda etuvchi qatorni oladigan va agar faylning nomi haqiqiy bo'lsa ""Ha""ni qaytaradigan va aks holda ""Yo'q""ni qaytaradigan funksiya yarating. Fayl nomi quyidagi shartlarning barchasi bajarilgan taqdirda va faqat shunday hollarda haqiqiy hisoblanadi: - Fayl nomida uchta raqamdan ('0'-'9') ko'p bo'lmasligi kerak. - Fayl nomida to'g'ri bitta nuqta ' bor. - Nuqta oldidagi kichik qator bo'sh bo'lmasligi kerak va u lotin alifbosining harfi bilan boshlanishi kerak ('a'-'z' va 'A'Z'). - Nuqta ortidan keladigan kichik qator quyidagilardan biri bo'lishi kerak: ['txt', 'exe', 'll'] Misollar: file_name_check""{example.txt.} # => 'Ha' => 'file_name_check""{example.dll1} # => 'Yo'q' (nom lotin alifbosidan boshlanishi kerak)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,uzn_Latn,python,"


def sum_squares(lst):
    """""""" Ushbu funksiya butun sonlar roʻyxatini oladi. Roʻyxatdagi barcha yozuvlar uchun funksiya toʻliq sonni kvadratga koʻtaradi, agar uning indeksi 3 ning koʻp sonli boʻlsa va toʻliq sonni kubga koʻtaradi, agar uning indeksi 4 ning koʻp sonli boʻlsa va 3 ning koʻp sonli boʻlmasa. Funksiya roʻyxatdagi yozuvlarni oʻzgartirmaydi, uning indekslari 3 yoki 4 ning koʻp sonli boʻlmasa. Funksiya keyin barcha yozuvlarning yigʻindisini qaytaradi. Misollar: lst = [1,2,3] uchun chiqish 6 boʻlishi kerak lst = [] uchun chiqish 0 boʻlishi kerak lst = [-1,-5,2,-1,-5] uchun chiqish -126 boʻlishi kerak """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,uzn_Latn,python,"
def words_in_sentence(sentence):
    """"""Sizga gapni ifodalaydigan qator berilgan, bu qatorda bo'shliq bilan ajratilgan so'zlar mavjud va siz o'z so'zlari bilan asl qatorni qaytarishingiz kerak, uning uzunligi bos sonlar bo'lishi kerak, yangi qatordagi so'zlarning tartibi asl qator bilan bir xil bo'lishi kerak. Misol1: Kirish: gap = ""Bu test"" Chiqish: ""is"" Misol2: Kirish: gap = ""let go for swimming"" Chiqish: ""go for"" Cheklovlar: * 1 <= len(sentence) <= 100 * gapda faqat harflar mavjud """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,uzn_Latn,python,"
def simplify(x, n):
    """"""Sizning vazifangiz x * n ifodani soddalashtiradigan funksiyani amalga oshirishdir. Funksiya x * n butun songa teng bo'lsa, True ni qaytaradi va aks holda False. X va n ikkalasi ham kasrning simli ifodasi bo'lib, quyidagi formatga ega, <numerator>/<denominator> bu erda ham numerator va maxraj musbat butun sonlardir. Siz x va n haqiqiy kasrlar deb hisoblashingiz mumkin va nol maxraj sifatida bo'lmaydi. soddalashtirish (((""1/5"", ""5/1"") = True (simplify""1/6"", ""2/1"") = False (simplify""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,uzn_Latn,python,"
def order_by_points(nums):
    """"""To'liq sonlar ro'yxatini raqamlari yig'indisi bo'yicha o'sish tartibida saralaydigan funksiya yozing. Izoh: agar raqamlari yig'indisi bir xil bo'lgan bir nechta elementlar mavjud bo'lsa, ularni asl ro'yxatdagi indekslari asosida tartibga soling. Masalan: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,uzn_Latn,python,"
def specialFilter(nums):
    """"""Bir qator sonlarni kiritish sifatida oladigan va 10 dan katta boʻlgan qatordagi elementlar sonini qaytaradigan va sonning birinchi va oxirgi raqamlari toq (1, 3, 5, 7, 9) boʻlgan funksiyani yozing. Masalan: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,uzn_Latn,python,"
def get_max_triples(n):
    """"""Sizga n musbat butun son berilgan. Siz uzunligi n bo'lgan a butun sonlar massasini yaratishingiz kerak. Har bir i (1 ‰¤ i ‰¤ n) uchun a[i] = i * i - i + 1 ning qiymati. a ning uchliklarini (a[i], a[j], a[k]) qaytaring, bu erda i < j < k, va a[i] + a[j] + a[k] 3 ning ko'pini beradi. Misol: Kirish: n = 5 Chiqish: 1 Tushuntirish: a = [1, 3, 7, 13, 21] Yagona haqiqiy uchlik (1, 7, 13) dir.""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,uzn_Latn,python,"
def bf(planet1, planet2):
    '''Quyosh tizimida sakkizta sayyora bor: Quyoshga eng yaqin sayyora - Merkuriy, keyingi sayyora - Venera, undan keyin Yer, Mars, Yupiter, Saturn, Uran, Neptun. Ikki sayyora nomini planet1 va planet2 qatorlari sifatida oladigan funksiya yozing. Funksiya sayyora1 va planet2 orbitalari orasidagi barcha sayyoralarni o'z ichiga olgan va quyoshga yaqinligi bo'yicha saralab olingan tupleni qaytarishi kerak. Agar sayyora1 yoki planet2 sayyora nomlari to'g'ri bo'lmasa, funksiya bo'sh tupleni qaytarishi kerak. Misol bf ""(Yupiter"", ""Neptun"") ==> (""Saturn"", ""Uran"") bf ((""Yer"", ""Merkur"") ==> (""Venus"") bf (""Merkur"", ""Uran"") ==> (""Venus"", ""Yer"", ""Mars"", ""Yupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,uzn_Latn,python,"
def sorted_list_sum(lst):
    """"""Qoidalar roʻyxatini parametr sifatida qabul qiladigan, unchalik uzun boʻlmagan qatorlarni oʻchirib tashlaydigan va natijada roʻyxatni tartiblangan tartibda qaytaradigan funksiya yozing. Roʻyxat har doim qatorlar roʻyxati va hech qachon raqamlar massividir va u takrorlanganlarni oʻz ichiga olishi mumkin. Roʻyxatning tartibi har bir soʻz uzunligi boʻyicha koʻtarilishi kerak va siz roʻyxatni ushbu qoidaga koʻra tartiblangan holda qaytarishingiz kerak. Agar ikkita soʻz bir xil uzunlikka ega boʻlsa, roʻyxatni alifbo boʻyicha saralash. Funksiya tartiblangan tartibda qatorlar roʻyxatini qaytarishi kerak. Siz barcha soʻzlar bir xil uzunlikka ega boʻlishini taxmin qilishingiz mumkin. Masalan: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,uzn_Latn,python,"
def x_or_y(n, x, y):
    """"""Agar n bos son boʻlsa x ning qiymatini qaytarishi va aks holda y ning qiymatini qaytarishi kerak boʻlgan oddiy dastur. Misollar: x_or_y(7, 34, 12) == 34 x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,uzn_Latn,python,"
def double_the_difference(lst):
    '''Raqamlar ro'yxati berilganda, ro'yxatdagi toq sonlarning kvadratlari yig'indisini qaytaring. Salbiy yoki butun sonlar bo'lmagan sonlarni e'tiborsiz qoldiring. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Agar kirish ro'yxati bo'sh bo'lsa, 0 qaytaring. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,uzn_Latn,python,"
def compare(game,guess):
    """"""O'ylaymanki, biz hammamiz uzoq kutilgan voqea natijasi nihoyat ma'lum bo'lganida, bu tuyg'uni eslaymiz. O'sha paytda sizda bo'lgan his-tuyg'ular va fikrlar, albatta, qayd etish va taqqoslashga arziydi. Sizning vazifangiz - bir kishi bir nechta o'yinlarning natijalarini to'g'ri taxmin qilganligini aniqlashdir. Sizga teng uzunlikdagi ikkita bal va taxminlar qatorlari beriladi, har bir indeks moslikni ko'rsatadi. Har bir taxmin qanchalik uzoqligini ko'rsatadigan bir xil uzunlikdagi matreni qaytaring. Agar ular to'g'ri taxmin qilgan bo'lsa, qiymat 0 bo'ladi, agar bo'lmasa, qiymat taxmin va bal o'rtasidagi mutlaq farqdir. misol: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4,0,1,0,2,4]) -> [4,0,4,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,uzn_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Sizga sinfning nomi (sinf) va kengaytmalar ro'yxati beriladi. kengaytmalar sinfga qo'shimcha sinflarni yuklash uchun ishlatiladi. kengaytmaning kuchini quyidagicha ko'rish mumkin: CAP kengaytmaning nomidagi katta harflar soni bo'lsin va SM kengaytmaning nomidagi kichik harflar soni bo'lsin, kuch CAP - SM kasrida beriladi. Siz eng kuchli kengaytmani topishingiz va quyidagi formatda bir qatorni qaytarishingiz kerak: ClassName.StrongestExtensionName. Agar bir xil kuchga ega ikkita yoki undan ortiq kengaytmalar bo'lsa, siz ro'yxatda birinchi bo'lganini tanlashingiz kerak. Masalan, sizga ""Slices"" sinf va kengaytmalar ro'yxati sifatida berilgan bo'lsa: ['SEviviSliNGCes', 'Cheese', 'StuFfed'] keyin siz 'Slices.SliNGCes.SliNGCes'ni qaytarishingiz kerak, chunki 'SliNGCes' (mySliNGCes') kengaytmasi eng kuchli (massiv: 'AA_Beats'), masalaning: 'AA_class' - ""Eng kuchli"" ({{Category_class_Beats}} Strongest}}) }).""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,uzn_Latn,python,"
def cycpattern_check(a , b):
    """"""Sizga 2 ta soʻz berilgan. Agar ikkinchi soʻz yoki uning har qanday aylanmasi birinchi soʻzdagi substring boʻlsa, True ni qaytarishingiz kerak cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""salom"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,uzn_Latn,python,"
def even_odd_count(num):
    """"""Toʻliq son berilgan. mos ravishda juft va toq raqamlar soniga ega boʻlgan tuple qaytaradi. Misol: juft_toʻgʻri_hisob_chiqindilar ((-12) ==> (1, 1) juft_toʻgʻri_hisob_chiqindilar ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,uzn_Latn,python,"
def int_to_mini_roman(number):
    """"""Ijobiy butun son berilganda, uning roman raqamlari ekvivalentini zanjir sifatida oling va uni kichik harflarda qaytaring. Cheklovlar: 1 <= num <= 1000 Misollar: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,uzn_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Uchburchakning uchta tomonining uzunligi berilgan. Agar uchta tomon to'g'ri burchakli uchburchakni hosil qilsa, True qaytaradi, aks holda False. To'g'ri burchakli uchburchak - bu uchburchakning bir burchagi to'g'ri burchak yoki 90 darajaga teng. Misol: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,uzn_Latn,python,"
def find_max(words):
    """"""Qo'shma matnli belgilar ro'yxati qabul qiladigan funksiya yozing. Ro'yxatda turli so'zlar mavjud. Maxsus belgilar soniga ega bo'lgan so'zni qaytaring. Agar bir nechta qatorda maxsus belgilar soni bo'lsa, leksikografik tartibda birinchi bo'lganini qaytaring.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,uzn_Latn,python,"
def eat(number, need, remaining):
    """"""Siz och quyonsiz va siz allaqachon ma'lum miqdordagi sabzavotlarni yegansiz, lekin endi kunlik ovqatni to'ldirish uchun ko'proq sabzavotlarni iste'mol qilishingiz kerak. siz [ ovqatdan keyin yegan sabzavotlarning umumiy soni, ovqatdan keyin qolgan sabzavotlar soni ] qatorini qaytarishingiz kerak agar yetarlicha sabzavot qolmagan bo'lsa, siz qolgan barcha sabzavotlarni yegan bo'lasiz, lekin hali ham och bo'lasiz. Misol: * ovqatlanish ((5, 6, 10) -> [11, 4] * ovqatlanish ((4, 8, 9) -> [12, 1] * ovqatlanish ((1, 10, 10) -> [11, 0] * ovqatlanish ((2, 11, 5) -> [7, 0] O'zgaruvchilar: @number: siz yegan sabzavotlar sonini to'ldiring. @need: siz iste'mol qilishingiz kerak bo'lgan sabzavotlar sonini to'ldiring. @remaining: saqlanayotgan sabzavotlar sonini to'ldiring.""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,uzn_Latn,python,"
def do_algebra(operator, operand):
    """"""Operator va operandni ikki ro'yxatga olish. Birinchi ro'yxatda asosiy algebra operatsiyalari mavjud, ikkinchi ro'yxat esa butun sonlar ro'yxati. Berilgan ikkita ro'yxatdan algebraik ifodani yaratish va ushbu ifodaning qiymatini qaytarish uchun foydalaning. Asosiy algebra operatsiyalari: Qo'shish ( +) O'chirib tashlash ( -) Ko'paytirish ( *) Floor bo'linish ( // ) Eksponentsiyalash ( ** Misol): operator['+', '*', '-'] matrik = [2, 3, 4, 5] natija = 2 + 3 * 4 - 5 => natija = 9 Izoh: Operatorlar ro'yxati uzunligi operand ro'yxati uzunligiga teng. Operand - bu manfiy bo'lmagan butun sonlar ro'yxati. Operatorning kamida bitta operatori bor, operand ro'yxati esa kamida ikkita operandi bor. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,uzn_Latn,python,"
def solve(s):
    """"""Agar s[i] harf boʻlsa, uning katta-kichik harfini pastdan yuqoriga yoki aksincha oʻzgartiring, aks holda u shunday boʻlsin. Agar string harflarsiz boʻlsa, stringni oʻzgartiring. Funksiya natijali stringni qaytarishi kerak. Misollar solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,uzn_Latn,python,"
def string_to_md5(text):
    """"""Agar matnli satr berilgan boʻlsa, uning md5 hash ekvivalentli satrini qaytaring. Agar matn boʻsh satr boʻlsa, None qaytaring. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,uzn_Latn,python,"
def generate_integers(a, b):
    """"""Ikki musbat butun a va b berilgan boʻlsa, a va b orasidagi juft raqamlarni oʻsayotgan tartibda qaytaring. Masalan: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
