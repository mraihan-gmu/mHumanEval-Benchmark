task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,khm_Khmr,ts,"//កម្រិតកំណត់។//ពិនិត្យមើលថា ក្នុងអារេនៃលេខដែលបានផ្តល់ជូន តើមានលេខពីរណាដែលជិតគ្នាជាង // >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
// false
// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
// true
function has_close_elements(numbers: number[], threshold: number): boolean {
","function has_close_elements(numbers: number[], threshold: number): boolean {
    for (let i = 0; i < numbers.length; i++) {
        for (let j = i + 1; j < numbers.length; j++) {
            if (Math.abs(numbers[i] - numbers[j]) < threshold) {
                return true;
            }
        }
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = has_close_elements;
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);
}

test();"
HumanEval_1,khm_Khmr,ts,"//សូមបំភ្លេចអគារដែលស្ថិតនៅក្នុង string input ។//ក្រុមដាច់ដោយឡែកត្រូវបានតុល្យភាព (ស្លាកស្នាមបើកនីមួយៗ ត្រូវបានបិទត្រឹមត្រូវ) និងមិនត្រូវបានបង្កប់គ្នាទៅវិញទៅមក។//បែងចែកក្រុមទាំងនោះទៅជាសរសៃដែកដាច់ដោយឡែក និងបញ្ជូន array របស់ពួកគេ។//Input ទៅកាន់ function នេះគឺជា string ដែលមានក្រុមច្រើននៃ parentheses ដែលមានកន្ទុយ។ គោលដៅរបស់អ្នកគឺដើម្បី // >>> separate_paren_groups(""( ) (( )) (( )( ))"")
// [""()"", ""(())"", ""(()())""]
function separate_paren_groups(paren_string: string): string[] {
","function separate_paren_groups(paren_string: string): string[] {
    const result: string[] = [];
    let currentGroup: string = """";
    let balance: number = 0;

    for (let char of paren_string) {
        if (char === ' ') {
            continue; // Ignore spaces
        }
        
        currentGroup += char;

        if (char === '(') {
            balance++;
        } else if (char === ')') {
            balance--;
        }

        if (balance === 0 && currentGroup.length > 0) {
            result.push(currentGroup);
            currentGroup = """";
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = separate_paren_groups;
  assert.deepEqual(candidate(""(()()) ((())) () ((())()())""),[""(()())"", ""((()))"", ""()"", ""((())()())""]);
  assert.deepEqual(candidate(""() (()) ((())) (((())))""),[""()"", ""(())"", ""((()))"", ""(((())))""]);
  assert.deepEqual(candidate(""(()(())((())))""),[""(()(())((())))""]);
  assert.deepEqual(candidate(""( ) (( )) (( )( ))""),[""()"", ""(())"", ""(()())""]);
}

test();"
HumanEval_2,khm_Khmr,ts,"//សូមត្រឡប់ទៅផ្នែកដប់នៃចំនួន។//(ភាគដែលនៅសល់គឺតូចជាង 1 ដដែល) ។//និងភាគគុណនៃចំនួនសរុប (ចំនួនសរុបធំជាងចំនួនដែលបានផ្តល់) និងតួលេខដប់ //ដោយបានផ្តល់ចំនួនពិន្ទុលេចធ្លាយវិជ្ជមានវាអាចត្រូវបានបំបែកទៅជា // >>> truncate_number(3.5)
// 0.5
function truncate_number(number: number): number {
","function truncate_number(number: number): number {
    const integerPart = Math.floor(number);
    return number - integerPart;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = truncate_number;
  assert.deepEqual(candidate(3.5),0.5);
  assert.deepEqual(candidate(1.25),0.25);
  assert.deepEqual(candidate(123.0),0.0);
}

test();"
HumanEval_3,khm_Khmr,ts,"//នៅចំណុចនោះ function គួរតែត្រឡប់ true វិញ បើមិនដូច្នេះទេវាគួរតែត្រឡប់ false វិញ។//សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់សល់//អ្នកត្រូវបានផ្តល់នូវការដាក់ប្រាក់ និងការដកប្រាក់ជាច្រើនទៅលើគណនីធនាគារ ដែលចាប់ផ្តើមដោយ // >>> below_zero([1, 2, 3])
// false
// >>> below_zero([1, 2, -4, 5])
// true
function below_zero(operations: number[]): boolean {
","function below_zero(operations: number[]): boolean {
    let balance = 0;
    
    for (let operation of operations) {
        balance += operation;
        if (balance < 0) {
            return true;
        }
    }
    
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = below_zero;
  assert.deepEqual(candidate([]),false);
  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);
  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);
  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);
  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);
  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);
}

test();"
HumanEval_4,khm_Khmr,ts,"//MAD = មធ្យម  x - x_mean //ចំណុច និង ចំណុចកណ្តាល (មធ្យមក្នុងករណីនេះ) ៖//Mean Absolute Deviation គឺជាការខុសគ្នារវាងទាំងពីរ។//នៅជុំវិញមធ្យមនៃតួលេខនេះ ។//សម្រាប់ការផ្តល់នូវលំដាប់នៃលេខចូល, គណនា Mean Absolute Deviation ។// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
// 1.0
function mean_absolute_deviation(numbers: number[]): number {
","function mean_absolute_deviation(numbers: number[]): number {
    const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;
    const absoluteDifferences = numbers.map(num => Math.abs(num - mean));
    const mad = absoluteDifferences.reduce((acc, diff) => acc + diff, 0) / numbers.length;
    return mad;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = mean_absolute_deviation;
  assert.deepEqual(candidate([1.0, 2.0]),0.5);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);
}

test();"
HumanEval_5,khm_Khmr,ts,"//បញ្ចូលលេខ ""ដកដង្ហើម"" រវាងតួទាំងពីរដងជាប់គ្នានៃ array input ∀numbers"" // >>> intersperse([], 4)
// []
// >>> intersperse([1, 2, 3], 4)
// [1, 4, 2, 4, 3]
function intersperse(numbers: number[], delimeter: number): number[] {
","function intersperse(numbers: number[], delimeter: number): number[] {
    if (numbers.length === 0) {
        return [];
    }

    let result: number[] = [];

    for (let i = 0; i < numbers.length; i++) {
        result.push(numbers[i]);
        if (i < numbers.length - 1) {
            result.push(delimeter);
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = intersperse;
  assert.deepEqual(candidate([], 7),[]);
  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);
  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);
}

test();"
HumanEval_6,khm_Khmr,ts,"//ឧទាហរណ៍ (() (()) មានកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិតកម្រិត//សម្រាប់ក្រុមនីមួយៗ បញ្ចេញកម្រិតជ្រៅបំផុតនៃការដាក់គំនុំ។//Input ទៅកាន់ function នេះគឺជា string តំណាងឱ្យក្រុមជាច្រើនសម្រាប់ parentheses nested បំបែកដោយ spaces ។// >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
// [2, 3, 1, 3]
function parse_nested_parens(paren_string: string): number[] {
","function parse_nested_parens(paren_string: string): number[] {
    return paren_string.split(' ').map(group => {
        let maxDepth = 0;
        let currentDepth = 0;

        for (const char of group) {
            if (char === '(') {
                currentDepth++;
                if (currentDepth > maxDepth) {
                    maxDepth = currentDepth;
                }
            } else if (char === ')') {
                currentDepth--;
            }
        }

        return maxDepth;
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = parse_nested_parens;
  assert.deepEqual(candidate(""(()()) ((())) () ((())()())""),[2, 3, 1, 3]);
  assert.deepEqual(candidate(""() (()) ((())) (((())))""),[1, 2, 3, 4]);
  assert.deepEqual(candidate(""(()(())((())))""),[4]);
}

test();"
HumanEval_7,khm_Khmr,ts,"//ការបាញ់ត្រីអារេនៃខ្សែបញ្ចូលសម្រាប់តែខ្សែបញ្ចូលដែលមានខ្សែសង្វាក់មួយដែលបានផ្តល់ជូន // >>> filter_by_substring([], ""a"")
// []
// >>> filter_by_substring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
// [""abc"", ""bacd"", ""array""]
function filter_by_substring(strings: string[], substring: string): string[] {
","function filter_by_substring(strings: string[], substring: string): string[] {
    return strings.filter(s => s.includes(substring));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_by_substring;
  assert.deepEqual(candidate([], ""john""),[]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""),[""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""]);
  assert.deepEqual(candidate([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""),[""grunt"", ""prune""]);
}

test();"
HumanEval_8,khm_Khmr,ts,"//លទ្ធផលសរុបគ្មានត្រូវជា 0 ហើយលទ្ធផល ផលិតផលគ្មានត្រូវជា 1 ។//សម្រាប់ array នៃចំនួនពេញមួយដែលត្រូវបានផ្តល់ជូន, សូមត្រឡប់ទៅ array ដែលមានចំនួន និងផលិតនៃចំនួនពេញទាំងអស់នៅក្នុង array ។ // >>> sum_product([])
// [0, 1]
// >>> sum_product([1, 2, 3, 4])
// [10, 24]
function sum_product(numbers: number[]): [number, number] {
","function sum_product(numbers: number[]): [number, number] {
    const sum = numbers.reduce((acc, curr) => acc + curr, 0);
    const product = numbers.reduce((acc, curr) => acc * curr, 1);
    return [sum, product];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_product;
  assert.deepEqual(candidate([]),[0, 1]);
  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);
  assert.deepEqual(candidate([100, 0]),[100, 0]);
  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);
  assert.deepEqual(candidate([10]),[10, 10]);
}

test();"
HumanEval_9,khm_Khmr,ts,"//ក្នុងលំដាប់។//ពី array នៃចំនួនពេញមួយដែលត្រូវបានផ្តល់ឱ្យបង្កើត array នៃ rolling ដែលមានអក្សរច្រើនបំផុតដែលត្រូវបានរកឃើញរហូតដល់ពេលកំណត់។// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
// [1, 2, 3, 3, 3, 4, 4]
function rolling_max(numbers: number[]): number[] {
","function rolling_max(numbers: number[]): number[] {
    let maxArray: number[] = [];
    let currentMax: number = Number.NEGATIVE_INFINITY;
    
    for (let i = 0; i < numbers.length; i++) {
        if (numbers[i] > currentMax) {
            currentMax = numbers[i];
        }
        maxArray.push(currentMax);
    }

    return maxArray;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rolling_max;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);
  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);
  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);
}

test();"
HumanEval_10,khm_Khmr,ts,"//- ត្រូវបន្ថែមទៅចុងនៃខ្សែប្រឆាំងនៃ prefix ខ្សែដែលមកមុននៃ suffix palindromic ។//- រក postfix ដែលមានរយៈពេលវែងបំផុតនៃ string ដែលបានផ្តល់ដែលជា palindrome ។//គំនិតអាល់ហ្សេរីទាំគឺងាយស្រួល: //រក palindrome ខ្លីបំផុតដែលចាប់ផ្តើមដោយខ្សែដែលផ្តល់ជូន។// >>> make_palindrome("""")
// """"
// >>> make_palindrome(""cat"")
// ""catac""
// >>> make_palindrome(""cata"")
// ""catac""
function make_palindrome(string: string): string {
","function make_palindrome(string: string): string {
    function isPalindrome(s: string): boolean {
        let left = 0;
        let right = s.length - 1;
        while (left < right) {
            if (s[left] !== s[right]) return false;
            left++;
            right--;
        }
        return true;
    }

    const n = string.length;
    let longestPalindromicPostfixIndex = n;

    for (let i = 0; i < n; i++) {
        if (isPalindrome(string.substring(i))) {
            longestPalindromicPostfixIndex = i;
            break;
        }
    }

    const prefix = string.substring(0, longestPalindromicPostfixIndex);
    const reversedPrefix = prefix.split('').reverse().join('');
    return string + reversedPrefix;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = make_palindrome;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""x""),""x"");
  assert.deepEqual(candidate(""xyz""),""xyzyx"");
  assert.deepEqual(candidate(""xyx""),""xyx"");
  assert.deepEqual(candidate(""jerry""),""jerryrrej"");
}

test();"
HumanEval_11,khm_Khmr,ts,"//អនុវត្ត XOR ជាគូលើការចូលទាំងនេះ និងត្រឡប់លទ្ធផលមកវិញជា string ។//Input គឺជា string a និង b ដែលមានតែ 1 និង 0 ប៉ុណ្ណោះ// >>> string_xor(""010"", ""110"")
// ""100""
function string_xor(a: string, b: string): string {
","function string_xor(a: string, b: string): string {
    let result = '';
    for (let i = 0; i < a.length; i++) {
        result += (a[i] === b[i] ? '0' : '1');
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_xor;
  assert.deepEqual(candidate(""111000"", ""101010""),""010010"");
  assert.deepEqual(candidate(""1"", ""1""),""0"");
  assert.deepEqual(candidate(""0101"", ""0000""),""0101"");
}

test();"
HumanEval_12,khm_Khmr,ts,"//return undefined ក្នុងករណីដែល array input គឺគ្មានអ្វី។//ក្នុងអារេនៃខ្សែ, សូមត្រឡប់ទៅខ្សែវែងបំផុត។ ត្រឡប់ទៅខ្សែវែងដំបូងក្នុងករណីមានច្រើន។// >>> longest([])
// undefined
// >>> longest([""a"", ""b"", ""c""])
// ""a""
// >>> longest([""a"", ""bb"", ""ccc""])
// ""ccc""
function longest(strings: string[]): string | undefined {
","function longest(strings: string[]): string | undefined {
    if (strings.length === 0) {
        return undefined;
    }

    let longestString = strings[0];

    for (const str of strings) {
        if (str.length > longestString.length) {
            longestString = str;
        }
    }

    return longestString;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = longest;
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([""x"", ""y"", ""z""]),""x"");
  assert.deepEqual(candidate([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]),""zzzz"");
}

test();"
HumanEval_13,khm_Khmr,ts,"//ត្រឡប់មកវិញនូវមធ្យមភាគរួមដ៏ធំបំផុតនៃចំនួនគត់ a និង b ។// >>> greatest_common_divisor(3, 5)
// 1
// >>> greatest_common_divisor(25, 15)
// 5
function greatest_common_divisor(a: number, b: number): number {
","function greatest_common_divisor(a: number, b: number): number {
    while (b !== 0) {
        let temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = greatest_common_divisor;
  assert.deepEqual(candidate(3, 7),1);
  assert.deepEqual(candidate(10, 15),5);
  assert.deepEqual(candidate(49, 14),7);
  assert.deepEqual(candidate(144, 60),12);
}

test();"
HumanEval_14,khm_Khmr,ts,"//ត្រឡប់មកវិញនូវ array នៃ prefixes ទាំងអស់ពី shortest ទៅ longest នៃ string input ។// >>> all_prefixes(""abc"")
// [""a"", ""ab"", ""abc""]
function all_prefixes(string: string): string[] {
","function all_prefixes(string: string): string[] {
    const result: string[] = [];
    for (let i = 1; i <= string.length; i++) {
        result.push(string.substring(0, i));
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = all_prefixes;
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""asdfgh""),[""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""]);
  assert.deepEqual(candidate(""WWW""),[""W"", ""WW"", ""WWW""]);
}

test();"
HumanEval_15,khm_Khmr,ts,"//បញ្ជូន string ដែលមានចំនួនកំណត់ដោយអវកាសចាប់ពី 0 រហូតដល់ n រួមបញ្ចូលគ្នា។ // >>> string_sequence(0)
// ""0""
// >>> string_sequence(5)
// ""0 1 2 3 4 5""
function string_sequence(n: number): string {
","function string_sequence(n: number): string {
    let result: string[] = [];
    for (let i = 0; i <= n; i++) {
        result.push(i.toString());
    }
    return result.join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_sequence;
  assert.deepEqual(candidate(0),""0"");
  assert.deepEqual(candidate(3),""0 1 2 3"");
  assert.deepEqual(candidate(10),""0 1 2 3 4 5 6 7 8 9 10"");
}

test();"
HumanEval_16,khm_Khmr,ts,"//ផ្តល់នូវសរសៃមួយ, រកមើលថា តើមានសញ្ញាបត្រខុសគ្នាប៉ុន្មាន (មិនគិតពី case) ដែលវាមានរួមបញ្ចូលគ្នា // >>> count_distinct_characters(""xyzXYZ"")
// 3
// >>> count_distinct_characters(""Jerry"")
// 4
function count_distinct_characters(string: string): number {
","function count_distinct_characters(inputString: string): number {
    const lowerCasedString = inputString.toLowerCase();
    const distinctCharacters = new Set<string>();

    for (const char of lowerCasedString) {
        distinctCharacters.add(char);
    }

    return distinctCharacters.size;
}

// Example usage:
console.log(count_distinct_characters(""xyzXYZ"")); // Output: 3
console.log(count_distinct_characters(""Jerry""));  // Output: 4","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_distinct_characters;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""abcde""),5);
  assert.deepEqual(candidate(""abcdecadeCADE""),5);
  assert.deepEqual(candidate(""aaaaAAAAaaaa""),1);
  assert.deepEqual(candidate(""Jerry jERRY JeRRRY""),5);
}

test();"
HumanEval_17,khm_Khmr,ts,"//""កំពូល"" - កំពូលតួ, មានរយៈពេលមួយដង//""o ""កម្រ"" - កន្លះតួ, មានរយៈពេលពីរដង//""O"" - តួទាំងមូល, មានរយៈពេលបួនដង//នេះគឺជារឿងនិទានមួយ://មិន មែន ចុង ក្រោយ ទេ ។//កិច្ចការរបស់អ្នកគឺដើម្បីកែសម្រួលសរសៃនេះ និងត្រឡប់មកវិញ array នៃចំនួនពេញដែលផ្ទៀងផ្ទាត់ទៅនឹងចំនួនដងដែលវាធ្វើរៀងៗ//Input ទៅកាន់ function នេះគឺជា string តំណាងឱ្យតួអក្សរចម្រៀងក្នុងទម្រង់ ASCII ពិសេស។// >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
function parse_music(music_string: string): number[] {
","function parse_music(music_string: string): number[] {
    const notes = music_string.split(' ');
    return notes.map(note => {
        switch (note) {
            case 'o':
                return 4;
            case 'o|':
                return 2;
            case '.|':
                return 1;
            default:
                return 0;
        }
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = parse_music;
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""o o o o""),[4, 4, 4, 4]);
  assert.deepEqual(candidate("".| .| .| .|""),[1, 1, 1, 1]);
  assert.deepEqual(candidate(""o| o| .| .| o o o o""),[2, 2, 1, 1, 4, 4, 4, 4]);
  assert.deepEqual(candidate(""o| .| o| .| o o| o o|""),[2, 1, 2, 1, 4, 2, 4, 2]);
}

test();"
HumanEval_18,khm_Khmr,ts,"//រកមើលថា តើមានប៉ុន្មានដងដែលខ្សែអក្សរមួយអាចត្រូវបានរកឃើញនៅក្នុងខ្សែអក្សរដើម។ រាប់បញ្ចូលករណីផ្ទុយគ្នា។ // >>> how_many_times("""", ""a"")
// 0
// >>> how_many_times(""aaa"", ""a"")
// 3
// >>> how_many_times(""aaaa"", ""aa"")
// 3
function how_many_times(string: string, substring: string): number {
","function how_many_times(string: string, substring: string): number {
    if (substring.length === 0) return 0;
    let count = 0;
    for (let i = 0; i <= string.length - substring.length; i++) {
        if (string.substring(i, i + substring.length) === substring) {
            count++;
        }
    }
    return count;
}

// Example usage:
// console.log(how_many_times(""aaa"", ""a"")); // Output: 3
// console.log(how_many_times(""aaaa"", ""aa"")); // Output: 3
// console.log(how_many_times("""", ""a"")); // Output: 0","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = how_many_times;
  assert.deepEqual(candidate("""", ""x""),0);
  assert.deepEqual(candidate(""xyxyxyx"", ""x""),4);
  assert.deepEqual(candidate(""cacacacac"", ""cac""),4);
  assert.deepEqual(candidate(""john doe"", ""john""),1);
}

test();"
HumanEval_19,khm_Khmr,ts,"//បញ្ជូនលេខដែលត្រូវបានរៀបចំនៃទំហំតូចបំផុតទៅធំបំផុត//ការជ្រើសរើសដែលត្រឹមត្រូវគឺ 'សូន្យ', 'មួយ', 'ពីរ', 'បី', 'បួន', 'ប្រាំ', 'ប្រាំមួយ', 'ប្រាំពីរ', 'ប្រាំបី' និង 'ប្រាំបួន' ។//Input គឺជា string ដែលមានអវកាសកំណត់នៃ numberals ពី 'សូន្យ' ទៅ 'ប្រាំមួយ' ។// >>> sort_numbers(""three one five"")
// ""one three five""
function sort_numbers(numbers: string): string {
","function sort_numbers(numbers: string): string {
    const numberWords = [
        'zero', 'one', 'two', 'three', 'four', 
        'five', 'six', 'seven', 'eight', 'nine'
    ];
    
    // Split the input string into an array of words
    const wordsArray = numbers.split(' ');

    // Sort the wordsArray based on the index of each word in numberWords
    wordsArray.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));

    // Join the sorted array back into a space-delimited string and return
    return wordsArray.join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_numbers;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""three""),""three"");
  assert.deepEqual(candidate(""three five nine""),""three five nine"");
  assert.deepEqual(candidate(""five zero four seven nine eight""),""zero four five seven eight nine"");
  assert.deepEqual(candidate(""six five four three two one zero""),""zero one two three four five six"");
}

test();"
HumanEval_20,khm_Khmr,ts,"//ទៀត ហើយ បញ្ជូន មក តាម លំដាប់ (ចំនួន តូច ជាង ចំនួន ធំ) ។//ពីតារាងចំនួនដែលផ្តល់ជូន (ដែលមានទំហំយ៉ាងហោចណាស់ពីរ) ជ្រើសរើសនិងត្រឡប់មកវិញចំនួនពីរដែលជិតបំផុតទៅនឹងម្នាក់ៗ// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
// [2.0, 2.2]
// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
// [2.0, 2.0]
function find_closest_elements(numbers: number[]): [number, number] {
","function find_closest_elements(numbers: number[]): [number, number] {
    if (numbers.length < 2) {
        throw new Error(""Array must contain at least two numbers"");
    }

    // Sort the array so that we can check consecutive elements
    numbers.sort((a, b) => a - b);

    let closestPair: [number, number] = [numbers[0], numbers[1]];
    let minDifference = Math.abs(numbers[1] - numbers[0]);

    for (let i = 1; i < numbers.length - 1; i++) {
        let currentDifference = Math.abs(numbers[i + 1] - numbers[i]);
        if (currentDifference < minDifference) {
            minDifference = currentDifference;
            closestPair = [numbers[i], numbers[i + 1]];
        }
    }

    return closestPair;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = find_closest_elements;
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);
}

test();"
HumanEval_21,khm_Khmr,ts,"//ដូច្នេះចំនួនតូចបំផុតនឹងក្លាយជា 0 ហើយចំនួនធំបំផុតនឹងក្លាយជា 1 ។//ដោយបានផ្តល់នូវ array នៃលេខ (យ៉ាងហោចណាស់មានពីរ element) សូមអនុវត្តការផ្លាស់ប្តូរ linear ទៅលើ array នោះ, // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
// [0.0, 0.25, 0.5, 0.75, 1.0]
function rescale_to_unit(numbers: number[]): number[] {
","function rescale_to_unit(numbers: number[]): number[] {
    if (numbers.length < 2) {
        throw new Error(""Array must contain at least two elements"");
    }

    const min = Math.min(...numbers);
    const max = Math.max(...numbers);
    const range = max - min;

    if (range === 0) {
        throw new Error(""All numbers are the same; rescale not possible"");
    }

    return numbers.map(num => (num - min) / range);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rescale_to_unit;
  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);
  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);
  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);
  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);
}

test();"
HumanEval_22,khm_Khmr,ts,"//ការបាញ់ត្រី array ដែលបានផ្តល់នូវតម្លៃ tsthon សម្រាប់ចំនួនគត់ប៉ុណ្ណោះ// >>> filter_integers([""a"", 3.14, 5])
// [5]
// >>> filter_integers([1, 2, 3, ""abc"", {}, []])
// [1, 2, 3]
function filter_integers(values: any[]): number[] {
","function filter_integers(values: any[]): number[] {
    return values.filter(value => Number.isInteger(value));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_integers;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([4, {}, [], 23.2, 9, ""adasd""]),[4, 9]);
  assert.deepEqual(candidate([3, ""c"", 3, 3, ""a"", ""b""]),[3, 3, 3]);
}

test();"
HumanEval_23,khm_Khmr,ts,"//ត្រឡប់មកវិញនៃខ្សែដែលបានផ្តល់ជូន// >>> strlen("""")
// 0
// >>> strlen(""abc"")
// 3
function strlen(string: string): number {
","function strlen(string: string): number {
    return string.length;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = strlen;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""x""),1);
  assert.deepEqual(candidate(""asdasnakj""),9);
}

test();"
HumanEval_24,khm_Khmr,ts,"//សម្រាប់ចំនួន n ដែលបានផ្តល់អោយ, រកចំនួនធំជាងគេដែលបែងចែក n បានស្មើគ្នា, តូចជាង n // >>> largest_divisor(15)
// 5
function largest_divisor(n: number): number {
","function largest_divisor(n: number): number {
    for (let i = n - 1; i > 0; i--) {
        if (n % i === 0) {
            return i;
        }
    }
    return 1; // By mathematical definition, 1 is a divisor of any integer.
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_divisor;
  assert.deepEqual(candidate(3),1);
  assert.deepEqual(candidate(7),1);
  assert.deepEqual(candidate(10),5);
  assert.deepEqual(candidate(100),50);
  assert.deepEqual(candidate(49),7);
}

test();"
HumanEval_25,khm_Khmr,ts,"//ចំនួន Input ត្រូវតែស្មើនឹង ផលិតផលនៃកត្តាទាំងអស់//កត្តានីមួយៗ ត្រូវរៀបចំជាលំដាប់ចំនួនដង ដែលទាក់ទងនឹងចំនួនដងដែលវាបង្ហាញនៅក្នុងការបំបែកជាកត្តា។//វិលត្រឡប់ array នៃភាគរយដើមនៃចំនួនគត់ដែលត្រូវបានផ្តល់ក្នុងលំដាប់ពីតូចបំផុតទៅធំបំផុត។// >>> factorize(8)
// [2, 2, 2]
// >>> factorize(25)
// [5, 5]
// >>> factorize(70)
// [2, 5, 7]
function factorize(n: number): number[] {
","function factorize(n: number): number[] {
    const factors: number[] = [];
    let divisor = 2;
    
    while (n >= 2) {
        if (n % divisor === 0) {
            factors.push(divisor);
            n /= divisor;
        } else {
            divisor++;
        }
    }

    return factors;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = factorize;
  assert.deepEqual(candidate(2),[2]);
  assert.deepEqual(candidate(4),[2, 2]);
  assert.deepEqual(candidate(8),[2, 2, 2]);
  assert.deepEqual(candidate(57),[3, 19]);
  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);
  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);
  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);
  assert.deepEqual(candidate(18),[2, 3, 3]);
}

test();"
HumanEval_26,khm_Khmr,ts,"//រក្សាលំដាប់នៃអំបិលនៅដដែលដូចក្នុងចំណូល។//ពី array នៃ integer, ដក element ទាំងអស់ ដែល កើតឡើង ច្រើនជាង មួយដង ។// >>> remove_duplicates([1, 2, 3, 2, 4])
// [1, 3, 4]
function remove_duplicates(numbers: number[]): number[] {
","function remove_duplicates(numbers: number[]): number[] {
    const frequencyMap: Map<number, number> = new Map();

    // Count the occurrences of each number
    for (const num of numbers) {
        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
    }

    // Filter out the numbers occurring more than once
    return numbers.filter(num => frequencyMap.get(num) === 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = remove_duplicates;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);
  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);
}

test();"
HumanEval_27,khm_Khmr,ts,"//សម្រាប់សេរ៊ីមួយដែលបានកំណត់ សូមបម្លែងអក្សរតូចទៅជាអក្សរធំ និងអក្សរធំទៅជាអក្សរតូច។// >>> flip_case(""Hello"")
// ""hELLO""
function flip_case(string: string): string {
","function flip_case(str: string): string {
    let flipped = '';
    for (let char of str) {
        if (char === char.toUpperCase()) {
            flipped += char.toLowerCase();
        } else {
            flipped += char.toUpperCase();
        }
    }
    return flipped;
}

// Example usage:
console.log(flip_case(""Hello"")); // Output: ""hELLO""","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = flip_case;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""Hello!""),""hELLO!"");
  assert.deepEqual(candidate(""These violent delights have violent ends""),""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"");
}

test();"
HumanEval_28,khm_Khmr,ts,"//ការបង្កើនតារាងនៃសរសៃវ៉ែនតានៅក្នុងសរសៃតែមួយ// >>> concatenate([])
// """"
// >>> concatenate([""a"", ""b"", ""c""])
// ""abc""
function concatenate(strings: string[]): string {
","function concatenate(strings: string[]): string {
    return strings.join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = concatenate;
  assert.deepEqual(candidate([]),"""");
  assert.deepEqual(candidate([""x"", ""y"", ""z""]),""xyz"");
  assert.deepEqual(candidate([""x"", ""y"", ""z"", ""w"", ""k""]),""xyzwk"");
}

test();"
HumanEval_29,khm_Khmr,ts,"//ការកាត់បន្ថយអត្រានៃខ្សែដែលចាប់ផ្តើមដោយអក្សរ prefix ណាមួយ// >>> filter_by_prefix([], ""a"")
// []
// >>> filter_by_prefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
// [""abc"", ""array""]
function filter_by_prefix(strings: string[], prefix: string): string[] {
","function filter_by_prefix(strings: string[], prefix: string): string[] {
    return strings.filter(str => str.startsWith(prefix));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_by_prefix;
  assert.deepEqual(candidate([], ""john""),[]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""]);
}

test();"
HumanEval_30,khm_Khmr,ts,"//វិលត្រឡប់មកវិញតែចំនួនវិជ្ជមាននៅក្នុង array ។// >>> get_positive([-1, 2, -4, 5, 6])
// [2, 5, 6]
// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
// [5, 3, 2, 3, 9, 123, 1]
function get_positive(l: number[]): number[] {
","function get_positive(l: number[]): number[] {
    return l.filter(num => num > 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_positive;
  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);
  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);
  assert.deepEqual(candidate([-1, -2]),[]);
  assert.deepEqual(candidate([]),[]);
}

test();"
HumanEval_31,khm_Khmr,ts,"//វិលត្រឡប់ true ប្រសិនបើចំនួនដែលបានផ្តល់គឺ prime ហើយ false បើមិនដូច្នេះទេ ។// >>> is_prime(6)
// false
// >>> is_prime(101)
// true
// >>> is_prime(11)
// true
// >>> is_prime(13441)
// true
// >>> is_prime(61)
// true
// >>> is_prime(4)
// false
// >>> is_prime(1)
// false
function is_prime(n: number): boolean {
","function is_prime(n: number): boolean {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_prime;
  assert.deepEqual(candidate(6),false);
  assert.deepEqual(candidate(101),true);
  assert.deepEqual(candidate(11),true);
  assert.deepEqual(candidate(13441),true);
  assert.deepEqual(candidate(61),true);
  assert.deepEqual(candidate(4),false);
  assert.deepEqual(candidate(1),false);
  assert.deepEqual(candidate(5),true);
  assert.deepEqual(candidate(11),true);
  assert.deepEqual(candidate(17),true);
  assert.deepEqual(candidate(85),false);
  assert.deepEqual(candidate(77),false);
  assert.deepEqual(candidate(255379),false);
}

test();"
HumanEval_33,khm_Khmr,ts,"//ទៅនឹងតម្លៃនៃតារាងពិន្ទុដែលពាក់ព័ន្ធនឹង l ប៉ុន្តែត្រូវបានជ្រើសរើស។//l' គឺដូចគ្នាទៅនឹង l នៅក្នុងតារាងដែលមិនអាចបែងចែកបានដោយបី ខណៈដែលតម្លៃរបស់វានៅតារាងដែលអាចបែងចែកបានដោយបីគឺស្មើគ្នា //តួអង្គនេះយក array l ហើយវិលត្រឡប់ array l' ដូចនេះថា // >>> sort_third([1, 2, 3])
// [1, 2, 3]
// >>> sort_third([5, 6, 3, 4, 8, 9, 2])
// [2, 6, 3, 4, 8, 9, 5]
function sort_third(l: number[]): number[] {
","function sort_third(l: number[]): number[] {
    const indicesDivByThree = l.map((_, i) => i).filter(i => i % 3 === 0);
    const valuesDivByThree = indicesDivByThree.map(i => l[i]).sort((a, b) => a - b);

    const result = l.slice();
    for (let i = 0; i < indicesDivByThree.length; i++) {
        result[indicesDivByThree[i]] = valuesDivByThree[i];
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_third;
  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);
  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);
  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);
  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);
}

test();"
HumanEval_34,khm_Khmr,ts,"//បញ្ជូនតួឯកឯកទេសដែលត្រូវបានជ្រើសរើសនៅក្នុង array មួយ// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
// [0, 2, 3, 5, 9, 123]
function unique(l: number[]): number[] {
","function unique(l: number[]): number[] {
    const uniqueSet = new Set(l);
    const uniqueArray = Array.from(uniqueSet);
    uniqueArray.sort((a, b) => a - b);
    return uniqueArray;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = unique;
  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);
}

test();"
HumanEval_35,khm_Khmr,ts,"//បញ្ជូនអក្សរអតិបរមានៅក្នុង array ។// >>> max_element([1, 2, 3])
// 3
// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
// 123
function max_element(l: number[]): number {
","function max_element(l: number[]): number {
    if (l.length === 0) {
        throw new Error(""Array is empty"");
    }
    let max = l[0];
    for (let i = 1; i < l.length; i++) {
        if (l[i] > max) {
            max = l[i];
        }
    }
    return max;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = max_element;
  assert.deepEqual(candidate([1, 2, 3]),3);
  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);
}

test();"
HumanEval_36,khm_Khmr,ts,"//ស្វែងរកចំនួនដងដែលតួ 7 លេចឡើងនៅក្នុងចំនួនគត់តិចជាង n ដែលអាចបែងចែកបានដោយ 11 ឬ 13 ។ // >>> fizz_buzz(50)
// 0
// >>> fizz_buzz(78)
// 2
// >>> fizz_buzz(79)
// 3
function fizz_buzz(n: number): number {
","function fizz_buzz(n: number): number {
    let count = 0;

    for (let i = 1; i < n; i++) {
        if (i % 11 === 0 || i % 13 === 0) {
            let numString = i.toString();
            for (let char of numString) {
                if (char === '7') {
                    count++;
                }
            }
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fizz_buzz;
  assert.deepEqual(candidate(50),0);
  assert.deepEqual(candidate(78),2);
  assert.deepEqual(candidate(79),3);
  assert.deepEqual(candidate(100),3);
  assert.deepEqual(candidate(200),6);
  assert.deepEqual(candidate(4000),192);
  assert.deepEqual(candidate(10000),639);
  assert.deepEqual(candidate(100000),8026);
}

test();"
HumanEval_37,khm_Khmr,ts,"//ទៅនឹងតម្លៃនៃសញ្ញាបត្រដែលស្មើនឹង l ប៉ុន្តែត្រូវបានរៀបចំ។//l' គឺដូចគ្នាទៅនឹង l នៅក្នុងតារាងមិនស្មើគ្នា ខណៈដែលតម្លៃរបស់វានៅតារាងស្មើគ្នាគឺស្មើគ្នា //តួអង្គនេះយក array l ហើយវិលត្រឡប់ array l' ដូចនេះថា // >>> sort_even([1, 2, 3])
// [1, 2, 3]
// >>> sort_even([5, 6, 3, 4])
// [3, 6, 5, 4]
function sort_even(l: number[]): number[] {
","function sort_even(l: number[]): number[] {
    const evenIndices: number[] = [];
    const result: number[] = [...l];

    // Collect values at even indices
    for (let i = 0; i < l.length; i += 2) {
        evenIndices.push(l[i]);
    }

    // Sort the collected even indices values
    evenIndices.sort((a, b) => a - b);

    // Place the sorted values back in their original even indices
    for (let i = 0; i < l.length; i += 2) {
        result[i] = evenIndices.shift()!;
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_even;
  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);
  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);
  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);
}

test();"
HumanEval_39,khm_Khmr,ts,"//prime_fib ផ្តល់នូវចំនួន n-th ដែលជាចំនួន Fibonacci ហើយវាក៏ជាចំនួនមួយ។ // >>> prime_fib(1)
// 2
// >>> prime_fib(2)
// 3
// >>> prime_fib(3)
// 5
// >>> prime_fib(4)
// 13
// >>> prime_fib(5)
// 89
function prime_fib(n: number): number {
","function isPrime(num: number): boolean {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 === 0 || num % 3 === 0) return false;
    for (let i = 5; i * i <= num; i += 6) {
        if (num % i === 0 || num % (i + 2) === 0) return false;
    }
    return true;
}

function* fibonacciGenerator(): Generator<number, void, unknown> {
    let a = 0, b = 1;
    while (true) {
        let current = a;
        a = b;
        b = current + b;
        yield current;
    }
}

function prime_fib(n: number): number {
    const fibGen = fibonacciGenerator();
    let primeFibs: number[] = [];
    let i = 0;
    while (primeFibs.length < n) {
        const fibNum = fibGen.next().value;
        if (isPrime(fibNum)) {
            primeFibs.push(fibNum);
        }
    }
    return primeFibs[n - 1];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prime_fib;
  assert.deepEqual(candidate(1),2);
  assert.deepEqual(candidate(2),3);
  assert.deepEqual(candidate(3),5);
  assert.deepEqual(candidate(4),13);
  assert.deepEqual(candidate(5),89);
  assert.deepEqual(candidate(6),233);
  assert.deepEqual(candidate(7),1597);
  assert.deepEqual(candidate(8),28657);
  assert.deepEqual(candidate(9),514229);
  assert.deepEqual(candidate(10),433494437);
}

test();"
HumanEval_40,khm_Khmr,ts,"//សរុបទៅជាសូន្យ ហើយខុសទៀត។//វានឹងវិលត្រឡប់ true ប្រសិនបើមានអំបិលខុសគ្នាបីនៅក្នុង array ដែល //triples_sum_to_zero ប្រើ array នៃ integer ជា Input ។// >>> triples_sum_to_zero([1, 3, 5, 0])
// false
// >>> triples_sum_to_zero([1, 3, -2, 1])
// true
// >>> triples_sum_to_zero([1, 2, 3, 7])
// false
// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
// true
// >>> triples_sum_to_zero([1])
// false
function triples_sum_to_zero(l: number[]): boolean {
","function triples_sum_to_zero(l: number[]): boolean {
    if (l.length < 3) {
        return false;
    }

    // Sort the array
    l.sort((a, b) => a - b);

    // Iterate through the array
    for (let i = 0; i < l.length - 2; i++) {
        let left = i + 1;
        let right = l.length - 1;

        // Use two pointers to find a pair that makes the sum zero with l[i]
        while (left < right) {
            const sum = l[i] + l[left] + l[right];
            if (sum === 0) {
                return true;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triples_sum_to_zero;
  assert.deepEqual(candidate([1, 3, 5, 0]),false);
  assert.deepEqual(candidate([1, 3, 5, -1]),false);
  assert.deepEqual(candidate([1, 3, -2, 1]),true);
  assert.deepEqual(candidate([1, 2, 3, 7]),false);
  assert.deepEqual(candidate([1, 2, 5, 7]),false);
  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);
  assert.deepEqual(candidate([1]),false);
  assert.deepEqual(candidate([1, 3, 5, -100]),false);
  assert.deepEqual(candidate([100, 3, 5, -100]),false);
}

test();"
HumanEval_41,khm_Khmr,ts,"//មុខងារនេះបញ្ចេញចំនួននៃការប៉ះទង្គិចបែបនេះ ។//នៅលើផ្លូវរបស់វា ដូចជាមិនប៉ះទង្គិចគ្នា។//ទោះជាយ៉ាងណាក៏ដោយ រថយន្តទាំងនោះមានភាពរឹងមាំ និងខ្លាំងណាស់ ដូច្នេះហើយពួកគេនៅតែបន្តដំណើរទៅមុខទៀត។//នៅពេលដែលរថយន្តដែលចល័តពីឆ្វេងទៅស្តាំ បុករថយន្តដែលចល័តពីស្តាំទៅឆ្វេង។//រថយន្តទាំងអស់ដើរក្នុងល្បឿនដូចគ្នា រថយន្តពីរគ្រឿងត្រូវបានគេនិយាយថា ប៉ះគ្នា//កំពុងបើកបរពីស្តាំទៅឆ្វេង រថយន្តទាំងពីរបានចាប់ផ្តើមនៅឆ្ងាយពីគ្នា//n រថយន្តកំពុងបើកឆ្វេងទៅស្តាំ; ស្របពេលជាមួយគ្នានោះ, រថយន្ត n ផ្សេងទៀត//សូមទស្សនាបង្ហាញផ្លូវមួយ ដែលមានលក្ខណៈត្រឹមត្រូវ ដោយគ្មានកម្រិត។function car_race_collision(n: number): number {
","function car_race_collision(n: number): number {
    // Since the cars move at the same speed and are infinitely strong,
    // each pair of a left-to-right car and a right-to-left car will ""collide"" at some point.
    // Therefore, every pair of cars from different sets will collide exactly once.
    
    // We need to find the number of such pairs, which is simply n * n.
    return n * n;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = car_race_collision;
  assert.deepEqual(candidate(2),4);
  assert.deepEqual(candidate(3),9);
  assert.deepEqual(candidate(4),16);
  assert.deepEqual(candidate(8),64);
  assert.deepEqual(candidate(10),100);
}

test();"
HumanEval_42,khm_Khmr,ts,"//ត្រឡប់ array ជាមួយនឹងតួដែលបង្កើនឡើងដោយ 1. // >>> incr_list([1, 2, 3])
// [2, 3, 4]
// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
// [6, 4, 6, 3, 4, 4, 10, 1, 124]
function incr_list(l: number[]): number[] {
","function incr_list(l: number[]): number[] {
    return l.map(num => num + 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = incr_list;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);
  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);
}

test();"
HumanEval_43,khm_Khmr,ts,"//សរុបទៅជាសូន្យ ហើយខុសទៀត។//វានឹងវិលត្រឡប់ true ប្រសិនបើមានអំបិលពីរផ្សេងគ្នានៅក្នុង array ដែល //pairs_sum_to_zero ប្រើ array នៃ integer ជា Input ។// >>> pairs_sum_to_zero([1, 3, 5, 0])
// false
// >>> pairs_sum_to_zero([1, 3, -2, 1])
// false
// >>> pairs_sum_to_zero([1, 2, 3, 7])
// false
// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
// true
// >>> pairs_sum_to_zero([1])
// false
function pairs_sum_to_zero(l: number[]): boolean {
","function pairs_sum_to_zero(l: number[]): boolean {
    const seen = new Set<number>();

    for (const num of l) {
        if (seen.has(-num)) {
            return true;
        }
        seen.add(num);
    }

    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = pairs_sum_to_zero;
  assert.deepEqual(candidate([1, 3, 5, 0]),false);
  assert.deepEqual(candidate([1, 3, -2, 1]),false);
  assert.deepEqual(candidate([1, 2, 3, 7]),false);
  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);
  assert.deepEqual(candidate([1]),false);
  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);
  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);
  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);
  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);
}

test();"
HumanEval_44,khm_Khmr,ts,"//ចំនួនមូលដ្ឋានគឺតិចជាង 10 ។//return string representation ក្រោយការបម្លែង។//ផ្លាស់ប្តូរមូលដ្ឋានចំនួននៃលេខ x ដែលចូលទៅជាមូលដ្ឋាន។// >>> change_base(8, 3)
// ""22""
// >>> change_base(8, 2)
// ""1000""
// >>> change_base(7, 2)
// ""111""
function change_base(x: number, base: number): string {
","function change_base(x: number, base: number): string {
    if (base < 2 || base > 9) {
        throw new Error(""Base must be between 2 and 9 inclusive"");
    }
    
    if (x === 0) return ""0"";

    let result: string = """";
    let number: number = x;

    while (number > 0) {
        const remainder = number % base;
        result = remainder.toString() + result;
        number = Math.floor(number / base);
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = change_base;
  assert.deepEqual(candidate(8, 3),""22"");
  assert.deepEqual(candidate(9, 3),""100"");
  assert.deepEqual(candidate(234, 2),""11101010"");
  assert.deepEqual(candidate(16, 2),""10000"");
  assert.deepEqual(candidate(8, 2),""1000"");
  assert.deepEqual(candidate(7, 2),""111"");
  assert.deepEqual(candidate(2, 3),""2"");
  assert.deepEqual(candidate(3, 4),""3"");
  assert.deepEqual(candidate(4, 5),""4"");
  assert.deepEqual(candidate(5, 6),""5"");
  assert.deepEqual(candidate(6, 7),""6"");
  assert.deepEqual(candidate(7, 8),""7"");
}

test();"
HumanEval_45,khm_Khmr,ts,"//ដោយបានផ្តល់នូវទទឹងនៃផ្នែកមួយ និងផ្ទៃនៃការវិលត្រឡប់ខ្ពស់សម្រាប់ត្រីកោណ។// >>> triangle_area(5, 3)
// 7.5
function triangle_area(a: number, h: number): number {
","function triangle_area(a: number, h: number): number {
    return 0.5 * a * h;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triangle_area;
  assert.deepEqual(candidate(5, 3),7.5);
  assert.deepEqual(candidate(2, 2),2.0);
  assert.deepEqual(candidate(10, 8),40.0);
}

test();"
HumanEval_46,khm_Khmr,ts,"//សូមសរសេរ function ដើម្បីធ្វើការគណនាប្រកបដោយប្រសិទ្ធភាពនៃ element n-th នៃ sequence number fib4 ។ កុំប្រើ recursion ។ //fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ។//fib4(3) -> 0 //fib4(2) -> 2 //fib4(1) -> 0 //fib4(0) -> 0 //លំដាប់លេខ Fib4 គឺជាលំដាប់ដែលស្រដៀងនឹងលំដាប់ Fibbonacci ដែលត្រូវបានកំណត់ដូចខាងក្រោម: // >>> fib4(5)
// 4
// >>> fib4(6)
// 8
// >>> fib4(7)
// 14
function fib4(n: number): number {
","function fib4(n: number): number {
    if (n === 0) return 0;
    if (n === 1) return 0;
    if (n === 2) return 2;
    if (n === 3) return 0;

    let fibNumbers = [0, 0, 2, 0];
    for (let i = 4; i <= n; i++) {
        const nextFib = fibNumbers[3] + fibNumbers[2] + fibNumbers[1] + fibNumbers[0];
        fibNumbers.shift();
        fibNumbers.push(nextFib);
    }
    return fibNumbers[3];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fib4;
  assert.deepEqual(candidate(5),4);
  assert.deepEqual(candidate(8),28);
  assert.deepEqual(candidate(10),104);
  assert.deepEqual(candidate(12),386);
}

test();"
HumanEval_47,khm_Khmr,ts,"//វិលត្រឡប់មកវិញនៃអក្សរធាតុនៅក្នុង array l ។ // >>> median([3, 1, 2, 4, 5])
// 3
// >>> median([-10, 4, 6, 1000, 10, 20])
// 15.0
function median(l: number[]): number {
","function median(l: number[]): number {
    const sorted = l.slice().sort((a, b) => a - b);
    const len = sorted.length;
    
    if (len % 2 === 0) {
        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;
    } else {
        return sorted[Math.floor(len / 2)];
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = median;
  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);
  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);
  assert.deepEqual(candidate([5]),5);
  assert.deepEqual(candidate([6, 5]),5.5);
  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);
}

test();"
HumanEval_48,khm_Khmr,ts,"//ត្រួតពិនិត្យថាតើ string ត្រូវបានផ្តល់ជា palindrome // >>> is_palindrome("""")
// true
// >>> is_palindrome(""aba"")
// true
// >>> is_palindrome(""aaaaa"")
// true
// >>> is_palindrome(""zbcd"")
// false
function is_palindrome(text: string): boolean {
","function is_palindrome(text: string): boolean {
    return text === text.split('').reverse().join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_palindrome;
  assert.deepEqual(candidate(""""),true);
  assert.deepEqual(candidate(""aba""),true);
  assert.deepEqual(candidate(""aaaaa""),true);
  assert.deepEqual(candidate(""zbcd""),false);
  assert.deepEqual(candidate(""xywyx""),true);
  assert.deepEqual(candidate(""xywyz""),false);
  assert.deepEqual(candidate(""xywzx""),false);
}

test();"
HumanEval_49,khm_Khmr,ts,"//សូមត្រឡប់ទៅ 2^n modulo p (ត្រូវដឹងអំពីតួអក្សរ) ។// >>> modp(3, 5)
// 3
// >>> modp(1101, 101)
// 2
// >>> modp(0, 101)
// 1
// >>> modp(3, 11)
// 8
// >>> modp(100, 101)
// 1
function modp(n: number, p: number): number {
","function modp(n: number, p: number): number {
    if (n === 0) return 1 % p;
    let result = 1;
    let base = 2;
    
    while (n > 0) {
        if (n % 2 === 1) {
            result = (result * base) % p;
        }
        base = (base * base) % p;
        n = Math.floor(n / 2);
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = modp;
  assert.deepEqual(candidate(3, 5),3);
  assert.deepEqual(candidate(1101, 101),2);
  assert.deepEqual(candidate(0, 101),1);
  assert.deepEqual(candidate(3, 11),8);
  assert.deepEqual(candidate(100, 101),1);
  assert.deepEqual(candidate(30, 5),4);
  assert.deepEqual(candidate(31, 5),3);
}

test();"
HumanEval_51,khm_Khmr,ts,"//remove_vowels គឺជាមុខងារដែលយក string ហើយបញ្ជូន string ដោយគ្មាន vowels ។ // >>> remove_vowels("""")
// """"
// >>> remove_vowels(""abcdef"")
// ""bcdf""
// >>> remove_vowels(""aaaaa"")
// """"
// >>> remove_vowels(""aaBAA"")
// ""B""
// >>> remove_vowels(""zbcd"")
// ""zbcd""
function remove_vowels(text: string): string {
","function remove_vowels(text: string): string {
    return text.replace(/[aeiouAEIOU]/g, '');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = remove_vowels;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""abcdef\nghijklm""),""bcdf\nghjklm"");
  assert.deepEqual(candidate(""fedcba""),""fdcb"");
  assert.deepEqual(candidate(""eeeee""),"""");
  assert.deepEqual(candidate(""acBAA""),""cB"");
  assert.deepEqual(candidate(""EcBOO""),""cB"");
  assert.deepEqual(candidate(""ybcd""),""ybcd"");
}

test();"
HumanEval_52,khm_Khmr,ts,"//ត្រឡប់មក true ប្រសិនបើចំនួនទាំងអស់នៅក្នុង array l ស្ថិតនៅក្រោមកម្រិត t ។ // >>> below_threshold([1, 2, 4, 10], 100)
// true
// >>> below_threshold([1, 20, 4, 10], 5)
// false
function below_threshold(l: number[], t: number): boolean {
","function below_threshold(l: number[], t: number): boolean {
    return l.every(num => num < t);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = below_threshold;
  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);
  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);
  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);
  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);
  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);
  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);
}

test();"
HumanEval_53,khm_Khmr,ts,"//បន្ថែមចំនួនពីរ x និង y // >>> add(2, 3)
// 5
// >>> add(5, 7)
// 12
function add(x: number, y: number): number {
","function add(x: number, y: number): number {
    return x + y;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add;
  assert.deepEqual(candidate(0, 1),1);
  assert.deepEqual(candidate(1, 0),1);
  assert.deepEqual(candidate(2, 3),5);
  assert.deepEqual(candidate(5, 7),12);
  assert.deepEqual(candidate(7, 5),12);
}

test();"
HumanEval_54,khm_Khmr,ts,"//ពិនិត្យមើលថាតើពាក្យពីរមានអក្សរដូចគ្នាឬអត់។// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
// true
// >>> same_chars(""abcd"", ""dddddddabc"")
// true
// >>> same_chars(""dddddddabc"", ""abcd"")
// true
// >>> same_chars(""eabcd"", ""dddddddabc"")
// false
// >>> same_chars(""abcd"", ""dddddddabce"")
// false
// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
// false
function same_chars(s0: string, s1: string): boolean {
","function same_chars(s0: string, s1: string): boolean {
    const charSet0: Set<string> = new Set(s0);
    const charSet1: Set<string> = new Set(s1);

    if (charSet0.size !== charSet1.size) {
        return false;
    }

    for (const char of charSet0) {
        if (!charSet1.has(char)) {
            return false;
        }
    }

    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = same_chars;
  assert.deepEqual(candidate(""eabcdzzzz"", ""dddzzzzzzzddeddabc""),true);
  assert.deepEqual(candidate(""abcd"", ""dddddddabc""),true);
  assert.deepEqual(candidate(""dddddddabc"", ""abcd""),true);
  assert.deepEqual(candidate(""eabcd"", ""dddddddabc""),false);
  assert.deepEqual(candidate(""abcd"", ""dddddddabcf""),false);
  assert.deepEqual(candidate(""eabcdzzzz"", ""dddzzzzzzzddddabc""),false);
  assert.deepEqual(candidate(""aabb"", ""aaccc""),false);
}

test();"
HumanEval_55,khm_Khmr,ts,"//សូមត្រឡប់មកលេខ Fibonacci លេខ n-th វិញ។// >>> fib(10)
// 55
// >>> fib(1)
// 1
// >>> fib(8)
// 21
function fib(n: number): number {
","function fib(n: number): number {
    if (n <= 0) {
        throw new Error(""Input should be a positive integer."");
    }
    if (n === 1) return 1;
    if (n === 2) return 1;

    let a = 1, b = 1;
    for (let i = 3; i <= n; i++) {
        const temp = a + b;
        a = b;
        b = temp;
    }
    return b;
}

// Example usage:
console.log(fib(10)); // 55
console.log(fib(1));  // 1
console.log(fib(8));  // 21","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fib;
  assert.deepEqual(candidate(10),55);
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(8),21);
  assert.deepEqual(candidate(11),89);
  assert.deepEqual(candidate(12),144);
}

test();"
HumanEval_56,khm_Khmr,ts,"//return true ប្រសិនបើក្របខ័ណ្ឌបើកមួយមានក្របខ័ណ្ឌបិទដែលស្របគ្នា។ //brackets គឺជាខ្សែនៃ ""<"" និង "">"" ។// >>> correct_bracketing(""<"")
// false
// >>> correct_bracketing(""<>"")
// true
// >>> correct_bracketing(""<<><>>"")
// true
// >>> correct_bracketing(""><<>"")
// false
function correct_bracketing(brackets: string): boolean {
","function correct_bracketing(brackets: string): boolean {
    let balance = 0;
    for (let char of brackets) {
        if (char === '<') {
            balance++;
        } else if (char === '>') {
            balance--;
        }
        if (balance < 0) {
            return false;
        }
    }
    return balance === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = correct_bracketing;
  assert.deepEqual(candidate(""<>""),true);
  assert.deepEqual(candidate(""<<><>>""),true);
  assert.deepEqual(candidate(""<><><<><>><>""),true);
  assert.deepEqual(candidate(""<><><<<><><>><>><<><><<>>>""),true);
  assert.deepEqual(candidate(""<<<><>>>>""),false);
  assert.deepEqual(candidate(""><<>""),false);
  assert.deepEqual(candidate(""<""),false);
  assert.deepEqual(candidate(""<<<<""),false);
  assert.deepEqual(candidate("">""),false);
  assert.deepEqual(candidate(""<<>""),false);
  assert.deepEqual(candidate(""<><><<><>><>><<>""),false);
  assert.deepEqual(candidate(""<><><<><>><>>><>""),false);
}

test();"
HumanEval_57,khm_Khmr,ts,"//Return true is អំបិលអារេមានភាពកើនឡើង ឬថយចុះដោយសាមញ្ញ។// >>> monotonic([1, 2, 4, 20])
// true
// >>> monotonic([1, 20, 4, 10])
// false
// >>> monotonic([4, 1, 0, -10])
// true
function monotonic(l: number[]): boolean {
","function monotonic(l: number[]): boolean {
    if (l.length <= 1) return true;
    
    let increasing = true;
    let decreasing = true;
    
    for (let i = 1; i < l.length; i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
        
        if (!increasing && !decreasing) return false;
    }
    
    return increasing || decreasing;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = monotonic;
  assert.deepEqual(candidate([1, 2, 4, 10]),true);
  assert.deepEqual(candidate([1, 2, 4, 20]),true);
  assert.deepEqual(candidate([1, 20, 4, 10]),false);
  assert.deepEqual(candidate([4, 1, 0, -10]),true);
  assert.deepEqual(candidate([4, 1, 1, 0]),true);
  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);
  assert.deepEqual(candidate([9, 9, 9, 9]),true);
}

test();"
HumanEval_58,khm_Khmr,ts,"//បញ្ជូនតួឯករួមតែមួយដែលត្រូវបានរៀបចំនូវតួឯកសម្រាប់ arrays ពីរ។// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
// [1, 5, 653]
// >>> common([5, 3, 2, 8], [3, 2])
// [2, 3]
function common(l1: number[], l2: number[]): number[] {
","function common(l1: number[], l2: number[]): number[] {
    const set1 = new Set(l1);
    const set2 = new Set(l2);
    const commonElements = Array.from(set1).filter(item => set2.has(item));
    return commonElements.sort((a, b) => a - b);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = common;
  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);
  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);
  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);
  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);
}

test();"
HumanEval_59,khm_Khmr,ts,"//សូមត្រឡប់ទៅកត្តាដំបូងដ៏ធំបំផុតនៃ n. សូមចាត់ទុកថា n > 1 ហើយមិនមែនជាចំនួនដំបូងទេ។ // >>> largest_prime_factor(13195)
// 29
// >>> largest_prime_factor(2048)
// 2
function largest_prime_factor(n: number): number {
","function largest_prime_factor(n: number): number {
    let largestFactor = 1;

    // Divide n by 2 until it becomes odd
    while (n % 2 === 0) {
        largestFactor = 2;
        n /= 2;
    }

    // Check for odd factors from 3 upwards
    for (let i = 3; i <= Math.sqrt(n); i += 2) {
        while (n % i === 0) {
            largestFactor = i;
            n /= i;
        }
    }

    // If n becomes a prime number greater than 2
    if (n > 2) {
        largestFactor = n;
    }

    return largestFactor;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_prime_factor;
  assert.deepEqual(candidate(15),5);
  assert.deepEqual(candidate(27),3);
  assert.deepEqual(candidate(63),7);
  assert.deepEqual(candidate(330),11);
  assert.deepEqual(candidate(13195),29);
}

test();"
HumanEval_60,khm_Khmr,ts,"//sum_to_n គឺជាមុខងារដែលសរុបចំនួនពី 1 ដល់ n ។ // >>> sum_to_n(30)
// 465
// >>> sum_to_n(100)
// 5050
// >>> sum_to_n(5)
// 15
// >>> sum_to_n(10)
// 55
// >>> sum_to_n(1)
// 1
function sum_to_n(n: number): number {
","function sum_to_n(n: number): number {
    return n * (n + 1) / 2;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_to_n;
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(6),21);
  assert.deepEqual(candidate(11),66);
  assert.deepEqual(candidate(30),465);
  assert.deepEqual(candidate(100),5050);
}

test();"
HumanEval_61,khm_Khmr,ts,"//return true ប្រសិនបើក្របខ័ណ្ឌបើកមួយមានក្របខ័ណ្ឌបិទដែលស្របគ្នា។ //brackets គឺជាខ្សែនៃ ""("" និង """") ។// >>> correct_bracketing(""("")
// false
// >>> correct_bracketing(""()"")
// true
// >>> correct_bracketing(""(()())"")
// true
// >>> correct_bracketing("")(()"")
// false
function correct_bracketing(brackets: string): boolean {
","function correct_bracketing(brackets: string): boolean {
    let balance = 0;

    for (let char of brackets) {
        if (char === '(') {
            balance++;
        } else if (char === ')') {
            balance--;
        }

        // If balance goes negative, there's a closing bracket without a matching opening one
        if (balance < 0) {
            return false;
        }
    }

    // If balance is zero, all opening brackets have matching closing brackets
    return balance === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = correct_bracketing;
  assert.deepEqual(candidate(""()""),true);
  assert.deepEqual(candidate(""(()())""),true);
  assert.deepEqual(candidate(""()()(()())()""),true);
  assert.deepEqual(candidate(""()()((()()())())(()()(()))""),true);
  assert.deepEqual(candidate(""((()())))""),false);
  assert.deepEqual(candidate("")(()""),false);
  assert.deepEqual(candidate(""(""),false);
  assert.deepEqual(candidate(""((((""),false);
  assert.deepEqual(candidate("")""),false);
  assert.deepEqual(candidate(""(()""),false);
  assert.deepEqual(candidate(""()()(()())())(()""),false);
  assert.deepEqual(candidate(""()()(()())()))()""),false);
}

test();"
HumanEval_62,khm_Khmr,ts,"//សូមត្រឡប់មកនូវដកចេញនៃពូជមាត្រនេះ ក្នុងទម្រង់ដូចគ្នា។//xs[0] + xs[1] * x + xs[2] * x^2 + .... //xs តំណាងឱ្យកម្រិតនៃពូជភាគ។// >>> derivative([3, 1, 2, 4, 5])
// [1, 4, 12, 20]
// >>> derivative([1, 2, 3])
// [2, 6]
function derivative(xs: number[]): number[] {
","function derivative(xs: number[]): number[] {
    return xs.slice(1).map((coef, index) => coef * (index + 1));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = derivative;
  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);
  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);
  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);
  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);
  assert.deepEqual(candidate([1]),[]);
}

test();"
HumanEval_63,khm_Khmr,ts,"//សូមសរសេរ function ដើម្បីធ្វើការគណនាប្រកបដោយប្រសិទ្ធភាពនៃ element n-th នៃ sequence number fibfib ។//fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3)) ។//fib fib ((2) == 1 //fib fib ((1)) == 0 //fib fib ((0) == 0 //លំដាប់លេខ FibFib គឺជាលំដាប់ដែលស្រដៀងនឹងលំដាប់ Fibbonacci ដែលត្រូវបានកំណត់ដូចខាងក្រោម: // >>> fibfib(1)
// 0
// >>> fibfib(5)
// 4
// >>> fibfib(8)
// 24
function fibfib(n: number): number {
","function fibfib(n: number): number {
    if (n === 0 || n === 1) return 0;
    if (n === 2) return 1;

    let a = 0;
    let b = 0;
    let c = 1;

    for (let i = 3; i <= n; i++) {
        let next = a + b + c;
        a = b;
        b = c;
        c = next;
    }

    return c;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fibfib;
  assert.deepEqual(candidate(2),1);
  assert.deepEqual(candidate(1),0);
  assert.deepEqual(candidate(5),4);
  assert.deepEqual(candidate(8),24);
  assert.deepEqual(candidate(10),81);
  assert.deepEqual(candidate(12),274);
  assert.deepEqual(candidate(14),927);
}

test();"
HumanEval_64,khm_Khmr,ts,"//ឧទាហរណ៍: //សម្លេងសូរ តែប៉ុណ្ណោះ នៅពេលដែលវាស្ថិតនៅចុងនៃពាក្យដែលបានផ្តល់។//Vowels នៅក្នុងករណីនេះគឺ 'a', 'e', 'i', 'o', 'u' ។នៅទីនេះ 'y' ក៏ជា a //ពាក្យជាចំណូល និងវិលត្រឡប់មកចំនួនសម្លេងនៅក្នុងខ្សែ។//សរសេរមុខងារ vowels_count ដែលប្រើខ្សែតំណាងអោយ // >>> vowels_count(""abcde"")
// 2
// >>> vowels_count(""ACEDY"")
// 3
function vowels_count(s: string): number {
","function vowels_count(s: string): number {
    let count = 0;
    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);
    const lowerCaseString = s.toLowerCase();

    for (let i = 0; i < lowerCaseString.length; i++) {
        if (vowels.has(lowerCaseString[i])) {
            count++;
        }
        if (i === lowerCaseString.length - 1 && lowerCaseString[i] === 'y') {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = vowels_count;
  assert.deepEqual(candidate(""abcde""),2);
  assert.deepEqual(candidate(""Alone""),3);
  assert.deepEqual(candidate(""key""),2);
  assert.deepEqual(candidate(""bye""),1);
  assert.deepEqual(candidate(""keY""),2);
  assert.deepEqual(candidate(""bYe""),1);
  assert.deepEqual(candidate(""ACEDY""),3);
}

test();"
HumanEval_65,khm_Khmr,ts,"//ប្រសិនបើ shift > ចំនួននៃលេខ, return លេខបកប្រែ។//និងបញ្ជូនលទ្ធផលមកជា string ។//ការផ្លាស់ប្តូររង្វង់នៃលេខនៃ integer x, ការផ្លាស់ប្តូរលេខខាងស្តាំដោយការផ្លាស់ប្តូរ // >>> circular_shift(12, 1)
// ""21""
// >>> circular_shift(12, 2)
// ""12""
function circular_shift(x: number, shift: number): string {
","function circular_shift(x: number, shift: number): string {
    const strNum = x.toString();
    const length = strNum.length;
    if (shift >= length) {
        return strNum.split('').reverse().join('');
    }
    const normalizedShift = shift % length;
    const splitIndex = length - normalizedShift;
    return strNum.slice(splitIndex) + strNum.slice(0, splitIndex);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = circular_shift;
  assert.deepEqual(candidate(100, 2),""001"");
  assert.deepEqual(candidate(12, 2),""12"");
  assert.deepEqual(candidate(97, 8),""79"");
  assert.deepEqual(candidate(12, 1),""21"");
  assert.deepEqual(candidate(11, 101),""11"");
}

test();"
HumanEval_66,khm_Khmr,ts,"//ឧទាហរណ៍: //កូដ ASCII ។//សរសេរមុខងារដែលយក string ជា Input ហើយត្រឡប់មកវិញនូវចំនួននៃតួអក្សរខាងលើតែប៉ុណ្ណោះ' //កិច្ចការ // >>> digitSum("""")
// 0
// >>> digitSum(""abAB"")
// 131
// >>> digitSum(""abcCd"")
// 67
// >>> digitSum(""helloE"")
// 69
// >>> digitSum(""woArBld"")
// 131
// >>> digitSum(""aAaaaXa"")
// 153
function digitSum(s: string): number {
","function digitSum(s: string): number {
    let sum = 0;
    for (const char of s) {
        if (char >= 'A' && char <= 'Z') {
            sum += char.charCodeAt(0);
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = digitSum;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""abAB""),131);
  assert.deepEqual(candidate(""abcCd""),67);
  assert.deepEqual(candidate(""helloE""),69);
  assert.deepEqual(candidate(""woArBld""),131);
  assert.deepEqual(candidate(""aAaaaXa""),153);
  assert.deepEqual(candidate("" How are yOu?""),151);
  assert.deepEqual(candidate(""You arE Very Smart""),327);
}

test();"
HumanEval_67,khm_Khmr,ts,"//សម្រាប់ examble: //ក្នុង កញ្ចប់ បង្ហាញ ចំនួន ផ្លែ ម្នាស់ ក្នុង កញ្ចប់ ។//ផ្លែប៉ោម និង ផ្លែប៉ោម និងចំនួនសរុបដែលតំណាងឱ្យចំនួនសរុបនៃផ្លែឈើ //ផ្លែប៉ោម, ផ្លែក្រូច និង ផ្លែឈើ មៀន ។ ដោយបាន ផ្តល់ នូវ ខ្សែ ដែល តំណាង ឲ្យ ចំនួន សរុប នៃ //ដែលត្រូវបានចែកចាយនៅក្នុងកញ្ចប់ផ្លែឈើ កញ្ចប់នេះមាន//ក្នុងកិច្ចការនេះ អ្នកនឹងទទួលបានខ្សែមួយដែលតំណាងឱ្យចំនួនផ្លែប៉ោម និងផ្លែប៉ោម។// >>> fruit_distribution(""5 apples and 6 oranges"", 19)
// 8
// >>> fruit_distribution(""0 apples and 1 oranges"", 3)
// 2
// >>> fruit_distribution(""2 apples and 3 oranges"", 100)
// 95
// >>> fruit_distribution(""100 apples and 1 oranges"", 120)
// 19
function fruit_distribution(s: string, n: number): number {
","function fruit_distribution(s: string, n: number): number {
    const regex = /(\d+) apples and (\d+) oranges/;
    const match = s.match(regex);
    
    if (!match) {
        throw new Error(""Invalid input format"");
    }
    
    const apples = parseInt(match[1], 10);
    const oranges = parseInt(match[2], 10);
    
    const totalApplesAndOranges = apples + oranges;
    return n - totalApplesAndOranges;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fruit_distribution;
  assert.deepEqual(candidate(""5 apples and 6 oranges"", 19),8);
  assert.deepEqual(candidate(""5 apples and 6 oranges"", 21),10);
  assert.deepEqual(candidate(""0 apples and 1 oranges"", 3),2);
  assert.deepEqual(candidate(""1 apples and 0 oranges"", 3),2);
  assert.deepEqual(candidate(""2 apples and 3 oranges"", 100),95);
  assert.deepEqual(candidate(""2 apples and 3 oranges"", 5),0);
  assert.deepEqual(candidate(""1 apples and 100 oranges"", 120),19);
}

test();"
HumanEval_68,khm_Khmr,ts,"//ឧទាហរណ៍ទី១://ប្រសិនបើគ្មានតម្លៃគូ ឬ array ដែលបានផ្តល់នោះគឺគ្មានអ្វីទេ, ត្រឡប់មកវិញ []. //កុងតឺន័រដែលត្រូវបានដកចេញត្រូវត្រូវបានបញ្ជូនមកក្នុងអារេ, [smallest_value, its index], //ប្រសិនបើមាន node ច្រើនដែលមានតម្លៃ even តូចបំផុតដូចគ្នានោះ return node ដែលមាន index តូចបំផុត។ //កុងតឺន័រដែលត្រូវបានដកចេញគួរតែជាកុងតឺន័រដែលមានតម្លៃស្មើតូចបំផុត។//កិច្ចការរបស់អ្នកគឺដើម្បីដកកំណាត់មួយ និងបញ្ជូនវាទៅវិញ។//""ដោយបានផ្តល់នូវ array ដែលតំណាងឱ្យសាខានៃដើមឈើដែលមាន node integer ដែលមិនមែនជាអវិជ្ជមាន // >>> pluck([4, 2, 3])
// [2, 1]
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 2:
// >>> pluck([1, 2, 3])
// [2, 1]
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 3:
// >>> pluck([])
// []
// Example 4:
// >>> pluck([5, 0, 3, 0, 4, 2])
// [0, 1]
// Explanation: 0 is the smallest value, but  there are two zeros,
// so we will choose the first zero, which has the smallest index.
// Constraints:
// * 1 <= nodes.length <= 10000
// * 0 <= node.value
function pluck(arr: number[]): number[] {
","function pluck(arr: number[]): number[] {
    let minEvenValue: number | null = null;
    let minIndex: number | null = null;

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] % 2 === 0) { // Check if the number is even
            if (minEvenValue === null || arr[i] < minEvenValue) {
                minEvenValue = arr[i];
                minIndex = i;
            }
        }
    }

    if (minEvenValue !== null && minIndex !== null) {
        return [minEvenValue, minIndex];
    } else {
        return [];
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = pluck;
  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);
  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);
  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);
  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);
  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);
  assert.deepEqual(candidate([7, 9, 7, 1]),[]);
}

test();"
HumanEval_69,khm_Khmr,ts,"//ឧទាហរណ៍: //ប្រសិនបើគ្មានតម្លៃបែបនេះទេ, ត្រឡប់មកវិញ -១ ។//លំដាប់នៃចំនួនគត់គឺចំនួនដងដែលវាបានបង្ហាញនៅក្នុង array ។//សូន្យ ហើយមានអត្រាខ្ពស់ជាង ឬស្មើនឹងតម្លៃនៃចំនួនសរុបផ្ទាល់ខ្លួន។//អ្នកបានទទួល array ដែលមិនមែនជាអង្រឹងនៃចំនួនពេញវិជ្ជមាន។ សូមត្រឡប់ទៅចំនួនពេញធំជាងគេដែលធំជាង // >>> search([4, 1, 2, 2, 3, 1])
// 2
// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])
// 3
// >>> search([5, 5, 4, 4, 4])
// -1
function search(lst: number[]): number {
","function search(lst: number[]): number {
    const frequencyMap: Map<number, number> = new Map();

    // Count frequencies of each integer in the array
    for (const num of lst) {
        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
    }

    let result = -1;

    // Determine the greatest integer that meets the condition
    for (const [num, freq] of frequencyMap.entries()) {
        if (freq >= num && num > result) {
            result = num;
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = search;
  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);
  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);
  assert.deepEqual(candidate([3, 3]),-1);
  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);
  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);
  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);
  assert.deepEqual(candidate([3, 2, 8, 2]),2);
  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);
  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);
  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);
  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);
  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);
  assert.deepEqual(candidate([1]),1);
  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);
  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);
  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);
  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);
  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);
  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);
  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);
  assert.deepEqual(candidate([10]),-1);
  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);
  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);
  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);
  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);
}

test();"
HumanEval_70,khm_Khmr,ts,"//ឧទាហរណ៍: //បន្ទាប់មកចំនួនពេញដែលនៅសល់ច្រើនបំផុត បន្ទាប់មកចំនួនតូចបំផុត និងដដែលៗ។//ការជ្រើសរើសខុសគ្នា គឺនៅពេលដែលអ្នកចាប់ផ្តើមដោយតម្លៃអប្បបរមា, //ដោយបានផ្តល់នូវ array នៃចំនួនពេញ, return array ក្នុងលំដាប់មិនធម្មតា។// >>> strange_sort_list([1, 2, 3, 4])
// [1, 4, 2, 3]
// >>> strange_sort_list([5, 5, 5, 5])
// [5, 5, 5, 5]
// >>> strange_sort_list([])
// []
function strange_sort_list(lst: number[]): number[] {
","function strange_sort_list(lst: number[]): number[] {
    const sorted = [...lst].sort((a, b) => a - b);
    const result: number[] = [];
    let left = 0;
    let right = sorted.length - 1;

    while (left <= right) {
        if (left === right) {
            result.push(sorted[left]);
        } else {
            result.push(sorted[left]);
            result.push(sorted[right]);
        }
        left++;
        right--;
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = strange_sort_list;
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);
  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);
  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);
  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);
  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);
  assert.deepEqual(candidate([111111]),[111111]);
}

test();"
HumanEval_71,khm_Khmr,ts,"//ឧទាហរណ៍: //ជាងខាងទីបី។//ផ្នែកទាំងបីបង្កើតជាត្រីកោណត្រឹមត្រូវ នៅពេលដែលចំនួននៃផ្នែកទាំងពីរណាធំជាង។//បើមិនដូច្នេះត្រឡប់មកវិញ -1 //ត្រីចក្រ ដែលបានពង្រឹងទៅ 2 ដឺស៊ីម៉ាល់ពិន្ទុ ប្រសិនបើភាគីទាំងបីបង្កើតជាត្រីចក្រត្រឹមត្រូវ។//ដោយបានផ្តល់នូវប្រវែងនៃភាគីទាំងបីនៃត្រីកោណ។ សូមត្រឡប់ទៅតំបន់នៃ // >>> triangle_area(3, 4, 5)
// 6.0
// >>> triangle_area(1, 2, 10)
// -1
function triangle_area(a: number, b: number, c: number): number {
","function triangle_area(a: number, b: number, c: number): number {
    // Check if the sides form a valid triangle
    if (a + b > c && a + c > b && b + c > a) {
        // Calculate the semi-perimeter
        const s = (a + b + c) / 2;
        // Calculate the area using Heron's formula
        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
        // Return the area rounded to 2 decimal places
        return Math.round(area * 100) / 100;
    }
    // Return -1 if the sides do not form a valid triangle
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triangle_area;
  assert.deepEqual(candidate(3, 4, 5),6.0);
  assert.deepEqual(candidate(1, 2, 10),-1);
  assert.deepEqual(candidate(4, 8, 5),8.18);
  assert.deepEqual(candidate(2, 2, 2),1.73);
  assert.deepEqual(candidate(1, 2, 3),-1);
  assert.deepEqual(candidate(10, 5, 7),16.25);
  assert.deepEqual(candidate(2, 6, 3),-1);
  assert.deepEqual(candidate(1, 1, 1),0.43);
  assert.deepEqual(candidate(2, 2, 10),-1);
}

test();"
HumanEval_72,khm_Khmr,ts,"//ឧទាហរណ៍: //វត្ថុ q នឹងហោះ បើវាមានតុល្យភាព (វាជា array palindromic) និងចំនួននៃអំបិលរបស់វាតិចជាងឬស្មើនឹងទម្ងន់ដែលអាចធ្វើបាន w ។//សរសេរ function ដែល return true ប្រសិនបើវត្ថុ q នឹង fly ហើយ false បើមិនដូច្នេះទេ// >>> will_it_fly([1, 2], 5)
// false
// # 1+2 is less than the maximum possible weight, but it's unbalanced.
// >>> will_it_fly([3, 2, 3], 1)
// false
// # it's balanced, but 3+2+3 is more than the maximum possible weight.
// >>> will_it_fly([3, 2, 3], 9)
// true
// # 3+2+3 is less than the maximum possible weight, and it's balanced.
// >>> will_it_fly([3], 5)
// true
// # 3 is less than the maximum possible weight, and it's balanced.
function will_it_fly(q: number[], w: number): boolean {
","function will_it_fly(q: number[], w: number): boolean {
    // Check if the array is balanced (palindromic)
    const isBalanced = (arr: number[]): boolean => {
        for (let i = 0; i < arr.length / 2; i++) {
            if (arr[i] !== arr[arr.length - 1 - i]) {
                return false;
            }
        }
        return true;
    };

    // Calculate the sum of the elements in the array
    const sumElements = q.reduce((acc, curr) => acc + curr, 0);

    // Check both conditions: balanced array and sum less than or equal to max weight
    return isBalanced(q) && sumElements <= w;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = will_it_fly;
  assert.deepEqual(candidate([3, 2, 3], 9),true);
  assert.deepEqual(candidate([1, 2], 5),false);
  assert.deepEqual(candidate([3], 5),true);
  assert.deepEqual(candidate([3, 2, 3], 1),false);
  assert.deepEqual(candidate([1, 2, 3], 6),false);
  assert.deepEqual(candidate([5], 5),true);
}

test();"
HumanEval_73,khm_Khmr,ts,"//ឧទាហរណ៍: //អាចអានដូចគ្នាទៅវិញទៅមក។ ក្នុងការផ្លាស់ប្តូរមួយអ្នកអាចផ្លាស់ប្តូរអក្សរមួយទៅអក្សរផ្សេងទៀត។//ត្រូវតែត្រូវបានផ្លាស់ប្តូរដើម្បីធ្វើឱ្យ array ជា palindromic array គឺជា array ដែល //ដោយបានផ្តល់នូវ array arr នៃចំនួនពេញ រកចំនួនអក្សរតិចបំផុតដែល // >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])
// 4
// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])
// 1
// >>> smallest_change([1, 2, 3, 2, 1])
// 0
function smallest_change(arr: number[]): number {
","function smallest_change(arr: number[]): number {
    let changes = 0;
    let left = 0;
    let right = arr.length - 1;

    while (left < right) {
        if (arr[left] !== arr[right]) {
            changes++;
        }
        left++;
        right--;
    }

    return changes;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = smallest_change;
  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);
  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);
  assert.deepEqual(candidate([1, 4, 2]),1);
  assert.deepEqual(candidate([1, 4, 4, 2]),1);
  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);
  assert.deepEqual(candidate([3, 1, 1, 3]),0);
  assert.deepEqual(candidate([1]),0);
  assert.deepEqual(candidate([0, 1]),1);
}

test();"
HumanEval_74,khm_Khmr,ts,"//ឧទាហរណ៍//ប្រសិនបើ arrays ទាំងពីរមានចំនួន chars ដូចគ្នា, សូមត្រឡប់ array ដំបូងវិញ។//ចំនួនសរុបនៃកា រ៉េ ក្នុងសរសៃទាំងអស់នៃ array តិចជាង array ផ្សេងទៀត។//សរសេរមុខងារដែលទទួលយក arrays នៃ string ពីរ និងវិលត្រឡប់ array ដែលមាន // >>> total_match([], [])
// []
// >>> total_match([""hi"", ""admin""], [""hI"", ""Hi""])
// [""hI"", ""Hi""]
// >>> total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
// [""hi"", ""admin""]
// >>> total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
// [""hI"", ""hi"", ""hi""]
// >>> total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
// [""4""]
function total_match(lst1: string[], lst2: string[]): string[] {
","function total_match(lst1: string[], lst2: string[]): string[] {
    const getTotalChars = (arr: string[]): number => {
        return arr.reduce((acc, str) => acc + str.length, 0);
    };

    const totalChars1 = getTotalChars(lst1);
    const totalChars2 = getTotalChars(lst2);

    if (totalChars1 < totalChars2) {
        return lst1;
    } else if (totalChars2 < totalChars1) {
        return lst2;
    } else {
        return lst1;
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = total_match;
  assert.deepEqual(candidate([], []),[]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hi"", ""hi""]),[""hi"", ""hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]),[""hi"", ""admin""]);
  assert.deepEqual(candidate([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]),[""4""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""Hi""]),[""hI"", ""Hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]),[""hI"", ""hi"", ""hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]),[""hi"", ""admin""]);
  assert.deepEqual(candidate([], [""this""]),[]);
  assert.deepEqual(candidate([""this""], []),[]);
}

test();"
HumanEval_75,khm_Khmr,ts,"//ឧទាហរណ៍: //ដោយដឹងថា (a) តិចជាង 100 ។//និងខុសពីគ្នា។//សរសេរ function ដែល return true ប្រសិនបើចំនួនដែលបានផ្តល់គឺការបូកនៃចំនួនដើម 3 ។// >>> is_multiply_prime(30)
// true
// 30 = 2 * 3 * 5
function is_multiply_prime(a: number): boolean {
","function is_multiply_prime(a: number): boolean {
    // Helper function to check if a number is prime
    function isPrime(n: number): boolean {
        if (n <= 1) return false;
        if (n <= 3) return true;
        if (n % 2 === 0 || n % 3 === 0) return false;
        for (let i = 5; i * i <= n; i += 6) {
            if (n % i === 0 || n % (i + 2) === 0) return false;
        }
        return true;
    }

    // Generate a list of primes less than 100
    const primes: number[] = [];
    for (let i = 2; i < 100; i++) {
        if (isPrime(i)) {
            primes.push(i);
        }
    }

    // Check if a can be expressed as a product of 3 distinct primes
    const primeCount = primes.length;
    for (let i = 0; i < primeCount - 2; i++) {
        for (let j = i + 1; j < primeCount - 1; j++) {
            for (let k = j + 1; k < primeCount; k++) {
                if (primes[i] * primes[j] * primes[k] === a) {
                    return true;
                }
            }
        }
    }
    
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_multiply_prime;
  assert.deepEqual(candidate(5),false);
  assert.deepEqual(candidate(30),true);
  assert.deepEqual(candidate(8),true);
  assert.deepEqual(candidate(10),false);
  assert.deepEqual(candidate(125),true);
  assert.deepEqual(candidate(105),true);
  assert.deepEqual(candidate(126),false);
  assert.deepEqual(candidate(729),false);
  assert.deepEqual(candidate(891),false);
  assert.deepEqual(candidate(1001),true);
}

test();"
HumanEval_76,khm_Khmr,ts,"//ឧទាហរណ៍: //x គឺជាជួរសាមញ្ញនៃ n ប្រសិនបើ n**int=x //នៃ n និង false នៅក្នុងករណីផ្សេងទៀត។//កិច្ចការរបស់អ្នកគឺសរសេរ function ដែលត្រឡប់ true ប្រសិនបើចំនួន x គឺជាលេខសាមញ្ញមួយ// >>> is_simple_power(1, 4)
// true
// >>> is_simple_power(2, 2)
// true
// >>> is_simple_power(8, 2)
// true
// >>> is_simple_power(3, 2)
// false
// >>> is_simple_power(3, 1)
// false
// >>> is_simple_power(5, 3)
// false
function is_simple_power(x: number, n: number): boolean {
","function is_simple_power(x: number, n: number): boolean {
    if (x < 1 || n < 1) return false;
    if (x === 1) return true; // n^0 is 1 for any n

    let power = 1;
    while (power < x) {
        power *= n;
    }
    
    return power === x;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_simple_power;
  assert.deepEqual(candidate(16, 2),true);
  assert.deepEqual(candidate(143214, 16),false);
  assert.deepEqual(candidate(4, 2),true);
  assert.deepEqual(candidate(9, 3),true);
  assert.deepEqual(candidate(16, 4),true);
  assert.deepEqual(candidate(24, 2),false);
  assert.deepEqual(candidate(128, 4),false);
  assert.deepEqual(candidate(12, 6),false);
  assert.deepEqual(candidate(1, 1),true);
  assert.deepEqual(candidate(1, 12),true);
}

test();"
HumanEval_77,khm_Khmr,ts,"//ឧទាហរណ៍: //កត់សម្គាល់: អ្នកអាចគិតថា input គឺមានប្រសិទ្ធភាពជានិច្ច។//បើសិនជា ingeger នេះជាគុម្ពនៃចំនួនគត់ណាមួយ។//សរសេរអក្សរ function ដែលយកចំនួនសរុប a ហើយវិលត្រឡប់ true វិញ// >>> iscube(1)
// true
// >>> iscube(2)
// false
// >>> iscube(-1)
// true
// >>> iscube(64)
// true
// >>> iscube(0)
// true
// >>> iscube(180)
// false
function iscube(a: number): boolean {
","function iscube(a: number): boolean {
    // Calculate the cube root of the absolute value of a
    const cubeRoot = Math.cbrt(Math.abs(a));
    // Check if the cube root is an integer
    return cubeRoot === Math.round(cubeRoot);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = iscube;
  assert.deepEqual(candidate(1),true);
  assert.deepEqual(candidate(2),false);
  assert.deepEqual(candidate(-1),true);
  assert.deepEqual(candidate(64),true);
  assert.deepEqual(candidate(180),false);
  assert.deepEqual(candidate(1000),true);
  assert.deepEqual(candidate(0),true);
  assert.deepEqual(candidate(1729),false);
}

test();"
HumanEval_78,khm_Khmr,ts,"//ឧទាហរណ៍: //និងសញ្ញាប័ត្រ A,B,C,D,E,F តែងតែមានអក្សរធំ។//កត់សម្គាល់: អ្នកអាចគិតថា input គឺត្រឹមត្រូវឬគ្មាន string, //B (= ដប់ដប់ 11), D (= ដប់ដប់ 13) ។//ដូច្នេះអ្នកត្រូវកំណត់ចំនួននៃលេខដូចខាងក្រោមនេះ: 2, 3, 5, 7, //ចំនួនសាមញ្ញគឺ 2, 3, 5, 7, 11, 13, 17...។//តួអក្សរ hexadecimal គឺ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F ។//ធំជាង 1 ដែលមិនមែនជាផលនៃចំនួនធម្មជាតិតូចជាង 2 នោះ) ។//តួដែលជាចំនួនសាមញ្ញ (ចំនួនសាមញ្ញ ឬ prime គឺជាចំនួនធម្មជាតិ)//ចំនួនដប់ដប់ជា string និងរាប់ចំនួនដប់ដប់ //អ្នកត្រូវបានបញ្ជាឱ្យសរសេរ function ដែលទទួល // >>> hex_key(""AB"")
// 1
// >>> hex_key(""1077E"")
// 2
// >>> hex_key(""ABED1A33"")
// 4
// >>> hex_key(""123456789ABCDEF0"")
// 6
// >>> hex_key(""2020"")
// 2
function hex_key(num: string): number {
","function hex_key(num: string): number {
    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);
    let count = 0;

    for (let digit of num) {
        if (primeHexDigits.has(digit)) {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = hex_key;
  assert.deepEqual(candidate(""AB""),1);
  assert.deepEqual(candidate(""1077E""),2);
  assert.deepEqual(candidate(""ABED1A33""),4);
  assert.deepEqual(candidate(""2020""),2);
  assert.deepEqual(candidate(""123456789ABCDEF0""),6);
  assert.deepEqual(candidate(""112233445566778899AABBCCDDEEFF00""),12);
}

test();"
HumanEval_79,khm_Khmr,ts,"//ឧទាហរណ៍: //តួអក្សរបន្ថែមមាននៅទីនោះដើម្បីជួយជាមួយទម្រង់។//នឹងមានតួអក្សរ ""db"" មួយចំនួនបន្ថែមនៅដើមនិងចុងនៃស្លាក។//តួអក្សរនីមួយៗ នៅក្នុងសេរីវាយនឹងមានចំនួន ""0"" ឬ ""1"" ។//រូបមន្តបៃតង Function គួរតែបញ្ជូនត្រីសងមួយ ដោយតួអក្សរនីមួយៗ តំណាងឱ្យបៃតង //អ្នកនឹងទទួលបានលេខនៅក្នុងទម្រង់ដប់ ហើយការងាររបស់អ្នកគឺបម្លែងវាទៅជា // >>> decimal_to_binary(15)
// ""db1111db""
// >>> decimal_to_binary(32)
// ""db100000db""
function decimal_to_binary(decimal: number): string {
","function decimal_to_binary(decimal: number): string {
    const binaryString = decimal.toString(2);
    return `db${binaryString}db`;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = decimal_to_binary;
  assert.deepEqual(candidate(0),""db0db"");
  assert.deepEqual(candidate(32),""db100000db"");
  assert.deepEqual(candidate(103),""db1100111db"");
  assert.deepEqual(candidate(15),""db1111db"");
}

test();"
HumanEval_80,khm_Khmr,ts,"//ឧទាហរណ៍: //ខ្សែអក្សរមានអក្សរបី ប្រសិនបើប្រវែងរបស់វាមានយ៉ាងហោចណាស់ 3 ហើយអក្សរទាំង 3 ជាប់គ្នាមានលក្ខណៈខុសគ្នា //កិច្ចការរបស់អ្នកគឺដើម្បីពិនិត្យមើលថាតើ string មានលក្ខណៈ hapts ឬមិន។//អ្នកត្រូវបានផ្តល់ string s ។// >>> is_happy(""a"")
// false
// >>> is_happy(""aa"")
// false
// >>> is_happy(""abcd"")
// true
// >>> is_happy(""aabb"")
// false
// >>> is_happy(""adb"")
// true
// >>> is_happy(""xyy"")
// false
function is_happy(s: string): boolean {
","function is_happy(s: string): boolean {
    if (s.length < 3) return false;

    for (let i = 0; i <= s.length - 3; i++) {
        const set = new Set(s.substring(i, i + 3));
        if (set.size !== 3) {
            return false;
        }
    }
    
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_happy;
  assert.deepEqual(candidate(""a""),false);
  assert.deepEqual(candidate(""aa""),false);
  assert.deepEqual(candidate(""abcd""),true);
  assert.deepEqual(candidate(""aabb""),false);
  assert.deepEqual(candidate(""adb""),true);
  assert.deepEqual(candidate(""xyy""),false);
  assert.deepEqual(candidate(""iopaxpoi""),true);
  assert.deepEqual(candidate(""iopaxioi""),false);
}

test();"
HumanEval_81,khm_Khmr,ts,"//ឧទាហរណ៍: //0.0 E //> 0.0 D- //> 0.7 D //> 1.0 D+ //> 1.3 C- //> 1.7 C //> 2.0 C+ //> 2.3 B- //> 2.7 B //> ៣.០ B+ //> 3.3 A- //> 3.7 A //4.0 A+ //GPA  សញ្ញាបត្រ //មុខងារដែលអាចបញ្ចេញ array នៃកម្រិតអក្សរដោយប្រើតារាងដូចខាងក្រោម: //នាងបានផ្តល់ឱ្យអ្នកនូវ GPA ជាច្រើនសម្រាប់សិស្សមួយចំនួន ហើយអ្នកត្រូវតែសរសេរ។//បញ្ហាតែមួយគត់គឺ នាងបានបាត់បង់កូដដែលនាងបានប្រើសម្រាប់ការវាយតម្លៃ។//គ្រូ បង្រៀន បាន បង្កើត អាល់ហ្ស៊ីម របស់ ខ្លួន សម្រាប់ ការ វាយ តម្លៃ។//វាជាសប្តាហ៍ចុងក្រោយនៃវស្សា ហើយគ្រូត្រូវផ្តល់ចំណាត់ថ្នាក់// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])
// [""A+"", ""B"", ""C-"", ""C"", ""A-""]
function numerical_letter_grade(grades: number[]): string[] {
","function numerical_letter_grade(grades: number[]): string[] {
    return grades.map(gpa => {
        if (gpa === 4.0) return ""A+"";
        if (gpa > 3.7) return ""A"";
        if (gpa > 3.3) return ""A-"";
        if (gpa > 3.0) return ""B+"";
        if (gpa > 2.7) return ""B"";
        if (gpa > 2.3) return ""B-"";
        if (gpa > 2.0) return ""C+"";
        if (gpa > 1.7) return ""C"";
        if (gpa > 1.3) return ""C-"";
        if (gpa > 1.0) return ""D+"";
        if (gpa > 0.7) return ""D"";
        if (gpa > 0.0) return ""D-"";
        return ""E"";
    });
}

// Example usage:
// console.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // [""A+"", ""B"", ""C-"", ""C"", ""A-""]","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = numerical_letter_grade;
  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[""A+"", ""B"", ""C-"", ""C"", ""A-""]);
  assert.deepEqual(candidate([1.2]),[""D+""]);
  assert.deepEqual(candidate([0.5]),[""D-""]);
  assert.deepEqual(candidate([0.0]),[""E""]);
  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[""D"", ""D-"", ""C-"", ""B"", ""B+""]);
  assert.deepEqual(candidate([0.0, 0.7]),[""E"", ""D-""]);
}

test();"
HumanEval_82,khm_Khmr,ts,"//ឧទាហរណ៍//length គឺជាចំនួនដើម ឬខុស បើមិនដូច្នេះទេ//សរសេរអក្សរ function ដែលយក string ហើយត្រឡប់ true វិញ ប្រសិនបើ string នោះ // >>> prime_length(""Hello"")
// true
// >>> prime_length(""abcdcba"")
// true
// >>> prime_length(""kittens"")
// true
// >>> prime_length(""orange"")
// false
function prime_length(string: string): boolean {
","function prime_length(string: string): boolean {
    const length = string.length;

    if (length < 2) return false;

    for (let i = 2; i * i <= length; i++) {
        if (length % i === 0) {
            return false;
        }
    }
    
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prime_length;
  assert.deepEqual(candidate(""Hello""),true);
  assert.deepEqual(candidate(""abcdcba""),true);
  assert.deepEqual(candidate(""kittens""),true);
  assert.deepEqual(candidate(""orange""),false);
  assert.deepEqual(candidate(""wow""),true);
  assert.deepEqual(candidate(""world""),true);
  assert.deepEqual(candidate(""MadaM""),true);
  assert.deepEqual(candidate(""Wow""),true);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""HI""),true);
  assert.deepEqual(candidate(""go""),true);
  assert.deepEqual(candidate(""gogo""),false);
  assert.deepEqual(candidate(""aaaaaaaaaaaaaaa""),false);
  assert.deepEqual(candidate(""Madam""),true);
  assert.deepEqual(candidate(""M""),false);
  assert.deepEqual(candidate(""0""),false);
}

test();"
HumanEval_83,khm_Khmr,ts,"//តួគ៌សរុបវិជ្ជមានដែលចាប់ផ្តើមឬបញ្ចប់ដោយ 1 ។//ដោយបានផ្តល់ចំនួនគត់វិជ្ជមាន n, សូមត្រឡប់មកវិញចំនួននៃចំនួននៃ n-លេខ function starts_one_ends(n: number): number {
","function starts_one_ends(n: number): number {
    if (n === 1) {
        return 1; // The number '1' is the only 1-digit number starting or ending with '1'
    }

    const totalNumbers = Math.pow(10, n - 1); // Total n-digit numbers starting with any digit from 1 to 9
    const startingWithOne = Math.pow(10, n - 1); // The n-digit numbers starting with '1'
    const endingWithOne = Math.pow(10, n - 1); // The n-digit numbers ending with '1'
    const startingAndEndingWithOne = Math.pow(10, n - 2); // The n-digit numbers starting and ending with '1' 

    // To find numbers that start or end with 1, add those starting with 1 
    // and those ending with 1, then subtract the overlap (those both starting and ending with 1).
    return startingWithOne + endingWithOne - startingAndEndingWithOne;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = starts_one_ends;
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(2),18);
  assert.deepEqual(candidate(3),180);
  assert.deepEqual(candidate(4),1800);
  assert.deepEqual(candidate(5),18000);
}

test();"
HumanEval_84,khm_Khmr,ts,"//ឧទាហរណ៍//ដោយបានផ្តល់ចំនួនគត់វិជ្ជមាន N, សូមត្រឡប់មកវិញចំនួនសរុបនៃតួខ្លួនរបស់វាជាគូ។ // >>> solve(1000)
// ""1""
// >>> solve(150)
// ""110""
// >>> solve(147)
// ""1100""
// Variables:
// @N integer
// Constraints: 0 ≤ N ≤ 10000.
// Output:
// a string of binary number
function solve(N: number): string {
","function solve(N: number): string {
    let sumOfDigits = 0;
    while (N > 0) {
        sumOfDigits += N % 10;
        N = Math.floor(N / 10);
    }
    return sumOfDigits.toString(2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solve;
  assert.deepEqual(candidate(1000),""1"");
  assert.deepEqual(candidate(150),""110"");
  assert.deepEqual(candidate(147),""1100"");
  assert.deepEqual(candidate(333),""1001"");
  assert.deepEqual(candidate(963),""10010"");
}

test();"
HumanEval_85,khm_Khmr,ts,"//ឧទាហរណ៍: //ដោយបានផ្តល់នូវ array ដែលមិនមែនជាលេខពេញលេញ លេខ lst. បន្ថែមនូវតួគណដែលនៅក្នុងអង់ដេសមិនសូវជាធម្មតា .. // >>> add([4, 2, 6, 7])
// 2
function add(lst: number[]): number {
","function add(lst: number[]): number {
    return lst.reduce((sum, num, index) => {
        if (index % 2 === 1 && num % 2 === 0) {
            return sum + num;
        }
        return sum;
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add;
  assert.deepEqual(candidate([4, 88]),88);
  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);
  assert.deepEqual(candidate([4, 0, 6, 7]),0);
  assert.deepEqual(candidate([4, 4, 6, 8]),12);
}

test();"
HumanEval_86,khm_Khmr,ts,"//ឧទាហរណ៍: //កត់សម្គាល់: អ្នកគួរតែរក្សានូវលំដាប់នៃពាក្យ និងកន្លែងបិទនៅក្នុងសំនួរ។//តាមលំដាប់ឡើងទៅលើតម្លៃ ASCII ។//ត្រូវបានជំនួសដោយពាក្យថ្មីមួយ ដែលមានសញ្ញាទាំងអស់រៀបចំឡើងនៅក្នុង //វីដេអូដែលត្រូវបានបញ្ជាដោយសរសៃ, គឺជាសរសៃដែលពាក្យទាំងអស់ (បែងចែកដោយអគារ) //សរសេរ function មួយ ដែល យក string មក និង បញ្ជូន វីដេអូ ដែល មាន លក្ខណៈ ជា ordered ។// >>> anti_shuffle(""Hi"")
// ""Hi""
// >>> anti_shuffle(""hello"")
// ""ehllo""
// >>> anti_shuffle(""Hello World!!!"")
// ""Hello !!!Wdlor""
function anti_shuffle(s: string): string {
","function anti_shuffle(s: string): string {
  return s.split(' ').map(word =>
    word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')
  ).join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = anti_shuffle;
  assert.deepEqual(candidate(""Hi""),""Hi"");
  assert.deepEqual(candidate(""hello""),""ehllo"");
  assert.deepEqual(candidate(""number""),""bemnru"");
  assert.deepEqual(candidate(""abcd""),""abcd"");
  assert.deepEqual(candidate(""Hello World!!!""),""Hello !!!Wdlor"");
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""Hi. My name is Mister Robot. How are you?""),"".Hi My aemn is Meirst .Rboot How aer ?ouy"");
}

test();"
HumanEval_87,khm_Khmr,ts,"//ឧទាហរណ៍: //ដូចគ្នាដែរ, ត្រូវរៀបចំតួអង្គនៃជួរតាមតួអង្គតាមលំដាប់ធ្លាក់ចុះ។//ប្រភេទតួអង្គដំបូងតាមជួរតាមលំដាប់ឡើង//array នីមួយៗ គឺជាតួអង្គ - (ជួរ, ជួរ) ចាប់ផ្តើមដោយ 0 ។//និងត្រឡប់មកវិញ array នៃ arrays, [(x1, y1), (x2, y2) ...] ដូចជាថា //ដោយបានផ្តល់ lst, និង integer x, រក integer x នៅក្នុង array, //កំណត់ត្រាដែលអាចត្រូវបានបែងចែកជាពីរ។//ដែលមានលក្ខណៈដូចទៅនឹង matrix ប៉ុន្តែមិនដូចទៅនឹង matrix ទេ ។//អ្នកបានទទួលទិន្នន័យ 2 ដីម៉ិនស្យុង ក្នុងទម្រង់ជា arrays ដែលមានកន្ទុយគ្នា// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
// >>> get_row([], 1)
// []
// >>> get_row([[], [1], [1, 2, 3]], 3)
// [[2, 2]]
function get_row(lst: number[][], x: number): [number, number][] {
","function get_row(lst: number[][], x: number): [number, number][] {
    const coordinates: [number, number][] = [];

    // Traverse the data matrix
    lst.forEach((row, rowIndex) => {
        row.forEach((value, colIndex) => {
            if (value === x) {
                coordinates.push([rowIndex, colIndex]);
            }
        });
    });

    // Sort the coordinates
    coordinates.sort(([row1, col1], [row2, col2]) => {
        if (row1 === row2) {
            // Sort by columns in descending order
            return col2 - col1;
        }
        // Sort by rows in ascending order
        return row1 - row2;
    });

    return coordinates;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_row;
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);
  assert.deepEqual(candidate([], 1),[]);
  assert.deepEqual(candidate([[1]], 2),[]);
  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);
}

test();"
HumanEval_88,khm_Khmr,ts,"//ឧទាហរណ៍: //* កុំផ្លាស់ប្តូរ array ដែលបានផ្តល់។ //កត់សម្គាល់: //ឬជម្រើសវាតាមលំដាប់ធ្លាក់ចុះ ប្រសិនបើចំនួន ((តម្លៃបញ្ជីដំបូង, តម្លៃបញ្ជីចុងក្រោយ) គឺស្មើគ្នា។ //អ្នកនឹងរៀបចំ array ដែលបានផ្តល់ឱ្យក្នុងលំដាប់ឡើងទៅ ប្រសិនបើចំនួន ((តម្លៃបញ្ជីដំបូង, តម្លៃបញ្ជីចុងក្រោយ) គឺមិនស្មើគ្នា, //ដោយបានផ្តល់នូវ array នៃចំនួនពេញមិនជាអវិជ្ជមាន, ត្រឡប់មកវិញ cots នៃ array ដែលបានផ្តល់បន្ទាប់ពីការរៀបចំ, // >>> sort_array([])
// []
// >>> sort_array([5])
// [5]
// >>> sort_array([2, 4, 3, 0, 1, 5])
// [0, 1, 2, 3, 4, 5]
// >>> sort_array([2, 4, 3, 0, 1, 5, 6])
// [6, 5, 4, 3, 2, 1, 0]
function sort_array(array: number[]): number[] {
","function sort_array(array: number[]): number[] {
    if (array.length === 0) {
        return [];
    }

    const firstValue = array[0];
    const lastValue = array[array.length - 1];
    const sum = firstValue + lastValue;

    const sortedArray = [...array].sort((a, b) => a - b);

    if (sum % 2 === 0) {
        return sortedArray.reverse();
    } else {
        return sortedArray;
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_array;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([5]),[5]);
  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);
  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);
  assert.deepEqual(candidate([2, 1]),[1, 2]);
  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);
  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);
}

test();"
HumanEval_89,khm_Khmr,ts,"//ឧទាហរណ៍: //ប្តូរទៅក្រោម ២ ដងចំនែកទៅលើ ២ កន្លែង។//អក្សរអក្សរត្រូវតែត្រូវបានបម្លែងតាមរបៀបដែលអក្សរ //ត្រឡប់មកវិញនូវ string ដែលត្រូវបានបិទដោយការផ្លាស់ប្តូរអក្សរអក្សរ។//បង្កើតតួប្រអប់ដែលយកសរសៃវែងជាអាភារៈ និង // >>> encrypt(""hi"")
// ""lm""
// >>> encrypt(""asdfghjkl"")
// ""ewhjklnop""
// >>> encrypt(""gf"")
// ""kj""
// >>> encrypt(""et"")
// ""ix""
function encrypt(s: string): string {
","function encrypt(s: string): string {
    const shift = 2 * 2; // Shift by 4 places
    const alphabetSize = 26;
    
    return s.split('').map(char => {
        const charCode = char.charCodeAt(0);
        
        // Check if the character is a lowercase letter
        if (charCode >= 97 && charCode <= 122) {
            let newCharCode = charCode + shift;
            
            // Wrap around if it goes past 'z'
            if (newCharCode > 122) {
                newCharCode = (newCharCode - 97) % alphabetSize + 97;
            }
            
            return String.fromCharCode(newCharCode);
        }

        // Return the character unchanged if it's not a lowercase letter
        return char;
    }).join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = encrypt;
  assert.deepEqual(candidate(""hi""),""lm"");
  assert.deepEqual(candidate(""asdfghjkl""),""ewhjklnop"");
  assert.deepEqual(candidate(""gf""),""kj"");
  assert.deepEqual(candidate(""et""),""ix"");
  assert.deepEqual(candidate(""faewfawefaewg""),""jeiajeaijeiak"");
  assert.deepEqual(candidate(""hellomyfriend""),""lippsqcjvmirh"");
  assert.deepEqual(candidate(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""),""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"");
  assert.deepEqual(candidate(""a""),""e"");
}

test();"
HumanEval_90,khm_Khmr,ts,"//ត្រឡប់មកវិញ undefined ប្រសិនបើគ្មានតម្រូវការដូច្នោះ។//សរសេរមុខងារ next_smallest ({}) ដែលវិលត្រឡប់មកវិញនូវអំបិលតូចជាងគេទី 2 នៃ array ។ //អ្នកបានទទួល array នៃចំនួនពេញ។// >>> next_smallest([1, 2, 3, 4, 5])
// 2
// >>> next_smallest([5, 1, 4, 3, 2])
// 2
// >>> next_smallest([])
// undefined
// >>> next_smallest([1, 1])
// undefined
function next_smallest(lst: number[]): number | undefined {
","function next_smallest(lst: number[]): number | undefined {
    if (lst.length < 2) {
        return undefined;
    }
    
    let first: number | undefined = undefined;
    let second: number | undefined = undefined;
    
    for (let num of lst) {
        if (first === undefined || num < first) {
            second = first;
            first = num;
        } else if (num > first && (second === undefined || num < second)) {
            second = num;
        }
    }

    return second;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = next_smallest;
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);
  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([1, 1]),undefined);
  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);
  assert.deepEqual(candidate([1, 1]),undefined);
  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);
}

test();"
HumanEval_91,khm_Khmr,ts,"//ឧទាហរណ៍: //ឃ្លាត្រូវបានបែងចែកដោយ '.', '?' ឬ '!'.//នៃការធុញទ្រាន់ ភាពធុញទ្រាន់គឺជាពាក្យមួយដែលចាប់ផ្តើមដោយពាក្យ ""I"" ។//អ្នកនឹងទទួលបានពាក្យជាច្រើន ហើយការងាររបស់អ្នកគឺរាប់ចំនួននោះ// >>> is_bored(""Hello world"")
// 0
// >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
// 1
function is_bored(S: string): number {
","function is_bored(S: string): number {
    // Split the string into sentences using '.', '?' or '!' as delimiters
    const sentences = S.split(/[.!?]/);

    // Filter sentences that start with ""I"" and count them
    const boredomCount = sentences.filter(sentence => sentence.trim().startsWith('I')).length;

    return boredomCount;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_bored;
  assert.deepEqual(candidate(""Hello world""),0);
  assert.deepEqual(candidate(""Is the sky blue?""),0);
  assert.deepEqual(candidate(""I love It !""),1);
  assert.deepEqual(candidate(""bIt""),0);
  assert.deepEqual(candidate(""I feel good today. I will be productive. will kill It""),2);
  assert.deepEqual(candidate(""You and I are going for a walk""),0);
}

test();"
HumanEval_92,khm_Khmr,ts,"//ឧទាហរណ៍ //វិលត្រឡប់មក false នៅក្នុងករណីផ្សេងទៀត។//វិលត្រឡប់ true ប្រសិនបើចំនួនមួយគឺស្មើនឹងចំនួនពីរផ្សេងទៀត ហើយចំនួនទាំងអស់គឺជាចំនួនគត់។//បង្កើតតួអង្គដែលយកចំនួន 3 ។// >>> any_int(5, 2, 7)
// true
// >>> any_int(3, 2, 2)
// false
// >>> any_int(3, -2, 1)
// true
// >>> any_int(3.6, -2.2, 2)
// false
function any_int(x: number, y: number, z: number): boolean {
","function any_int(x: number, y: number, z: number): boolean {
    // Check if all numbers are integers
    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {
        return false;
    }
    // Check if one of the numbers is the sum of the other two
    if (x === y + z || y === x + z || z === x + y) {
        return true;
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = any_int;
  assert.deepEqual(candidate(2, 3, 1),true);
  assert.deepEqual(candidate(2.5, 2, 3),false);
  assert.deepEqual(candidate(1.5, 5, 3.5),false);
  assert.deepEqual(candidate(2, 6, 2),false);
  assert.deepEqual(candidate(4, 2, 2),true);
  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);
  assert.deepEqual(candidate(-4, 6, 2),true);
  assert.deepEqual(candidate(2, 1, 1),true);
  assert.deepEqual(candidate(3, 4, 7),true);
  assert.deepEqual(candidate(3.0, 4, 7),false);
}

test();"
HumanEval_93,khm_Khmr,ts,"//ឧទាហរណ៍: //សូមសន្មតថាសញ្ញាបត្រតែប៉ុណ្ណោះ។//សម្លេង ក្នុង អក្សរ អង់គ្លេស ។//សារដែលមានអក្សរដែលបង្ហាញខ្លួន 2 កន្លែងមុននោះ//វាប្ដូរអក្សរទាំងអស់ ដោយប្ដូរអក្សរសម្លេងទាំងអស់នៅក្នុង //សរសេរ function ដែលយកសារមួយមក និងកូដនៅក្នុងប្រភេទនេះ// >>> encode(""test"")
// ""TGST""
// >>> encode(""This is a message"")
// ""tHKS KS C MGSSCGG""
function encode(message: string): string {
","function encode(message: string): string {
    const swapCase = (char: string): string => {
        if (char === char.toLowerCase()) {
            return char.toUpperCase();
        } else {
            return char.toLowerCase();
        }
    };

    const replaceVowel = (char: string): string => {
        const vowels = 'aeiou';
        const nextVowels = 'cgkqw';
        const index = vowels.indexOf(char.toLowerCase());
        if (index !== -1) {
            return char === char.toLowerCase() 
                ? nextVowels[index] 
                : nextVowels[index].toUpperCase();
        }
        return char;
    };

    return message
        .split('')
        .map(char => swapCase(replaceVowel(char)))
        .join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = encode;
  assert.deepEqual(candidate(""TEST""),""tgst"");
  assert.deepEqual(candidate(""Mudasir""),""mWDCSKR"");
  assert.deepEqual(candidate(""YES""),""ygs"");
  assert.deepEqual(candidate(""This is a message""),""tHKS KS C MGSSCGG"");
  assert.deepEqual(candidate(""I DoNt KnOw WhAt tO WrItE""),""k dQnT kNqW wHcT Tq wRkTg"");
}

test();"
HumanEval_94,khm_Khmr,ts,"//ឧទាហរណ៍: //អ្នកត្រូវរកតម្លៃដំបូងដ៏ធំជាងគេ ហើយត្រឡប់មកវិញនូវចំនួននៃតួខ្លួនរបស់វា។//អ្នកបានទទួល array នៃចំនួនពេញ។// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
// 10
// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
// 25
// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
// 13
// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
// 11
// >>> skjkasdkd([0, 81, 12, 3, 1, 21])
// 3
// >>> skjkasdkd([0, 8, 1, 2, 1, 7])
// 7
function skjkasdkd(lst: number[]): number {
","function isPrime(n: number): boolean {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}

function sumOfDigits(n: number): number {
    let sum = 0;
    while (n > 0) {
        sum += n % 10;
        n = Math.floor(n / 10);
    }
    return sum;
}

function skjkasdkd(lst: number[]): number {
    let maxPrime = -1;

    for (const num of lst) {
        if (isPrime(num) && num > maxPrime) {
            maxPrime = num;
        }
    }

    return maxPrime === -1 ? 0 : sumOfDigits(maxPrime);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = skjkasdkd;
  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);
  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);
  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);
  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);
  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);
  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);
  assert.deepEqual(candidate([8191]),19);
  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);
  assert.deepEqual(candidate([127, 97, 8192]),10);
}

test();"
HumanEval_95,khm_Khmr,ts,"//ឧទាហរណ៍: //មុខងារនេះគួរតែត្រឡប់មកវិញ false ប្រសិនបើវត្ថុដែលត្រូវបានផ្តល់គឺគ្មាន។//case ឬ key ទាំងអស់ជា string ក្នុង case ធំ, បើមិនដូច្នេះ return false ។//ដោយបានផ្តល់នូវវត្ថុមួយ, return true ប្រសិនបើគន្លឹះទាំងអស់ជា string នៅក្នុង lower // >>> check_dict_case({""a"": ""apple"", ""b"": ""banana""})
// true
// >>> check_dict_case({""a"": ""apple"", ""A"": ""banana"", ""B"": ""banana""})
// false
// >>> check_dict_case({""a"": ""apple"", 8: ""banana"", ""a"": ""apple""})
// false
// >>> check_dict_case({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""})
// false
// >>> check_dict_case({""STATE"": ""NC"", ""ZIP"": ""12345""})
// true
function check_dict_case(dict: {[key: string]: string}): boolean {
","function check_dict_case(dict: { [key: string]: string }): boolean {
    const keys = Object.keys(dict);
    if (keys.length === 0) return false;

    const allLowerCase = keys.every(key => key === key.toLowerCase());
    const allUpperCase = keys.every(key => key === key.toUpperCase());

    return allLowerCase || allUpperCase;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = check_dict_case;
  assert.deepEqual(candidate({""p"": ""pineapple"", ""b"": ""banana""}),true);
  assert.deepEqual(candidate({""p"": ""pineapple"", ""A"": ""banana"", ""B"": ""banana""}),false);
  assert.deepEqual(candidate({""p"": ""pineapple"", ""5"": ""banana"", ""a"": ""apple""}),false);
  assert.deepEqual(candidate({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""}),false);
  assert.deepEqual(candidate({""STATE"": ""NC"", ""ZIP"": ""12345""}),true);
  assert.deepEqual(candidate({""fruit"": ""Orange"", ""taste"": ""Sweet""}),true);
  assert.deepEqual(candidate({}),false);
}

test();"
HumanEval_96,khm_Khmr,ts,"//ឧទាហរណ៍: //integer ដែលជាចំនួនដើម និងតិចជាង n ។//អនុវត្តន៍តួដែលយកចំនួនសរុបមិនអវិជ្ជមាន និងវិលត្រឡប់មកវិញនូវ array នៃ n ដំបូង// >>> count_up_to(5)
// [2, 3]
// >>> count_up_to(11)
// [2, 3, 5, 7]
// >>> count_up_to(0)
// []
// >>> count_up_to(20)
// [2, 3, 5, 7, 11, 13, 17, 19]
// >>> count_up_to(1)
// []
// >>> count_up_to(18)
// [2, 3, 5, 7, 11, 13, 17]
function count_up_to(n: number): number[] {
","function count_up_to(n: number): number[] {
    function isPrime(num: number): boolean {
        if (num < 2) return false;
        for (let i = 2; i <= Math.sqrt(num); i++) {
            if (num % i === 0) return false;
        }
        return true;
    }

    const primes: number[] = [];
    for (let i = 2; i < n; i++) {
        if (isPrime(i)) {
            primes.push(i);
        }
    }

    return primes;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_up_to;
  assert.deepEqual(candidate(5),[2, 3]);
  assert.deepEqual(candidate(6),[2, 3, 5]);
  assert.deepEqual(candidate(7),[2, 3, 5]);
  assert.deepEqual(candidate(10),[2, 3, 5, 7]);
  assert.deepEqual(candidate(0),[]);
  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);
  assert.deepEqual(candidate(1),[]);
  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);
  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);
  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);
}

test();"
HumanEval_97,khm_Khmr,ts,"//ឧទាហរណ៍: //សូមចាត់ទុកថា Input គឺមានប្រសិទ្ធភាពជានិច្ច។//ផលនៃលេខអង្គភាពរបស់វា។//បំពេញតួអង្គដែលយកចំនួនគត់ពីរ និងវិលត្រឡប់មកវិញ // >>> multiply(148, 412)
// 16
// >>> multiply(19, 28)
// 72
// >>> multiply(2020, 1851)
// 0
// >>> multiply(14, -15)
// 20
function multiply(a: number, b: number): number {
","function multiply(a: number, b: number): number {
    const unitDigitA = Math.abs(a) % 10;
    const unitDigitB = Math.abs(b) % 10;
    return unitDigitA * unitDigitB;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = multiply;
  assert.deepEqual(candidate(148, 412),16);
  assert.deepEqual(candidate(19, 28),72);
  assert.deepEqual(candidate(2020, 1851),0);
  assert.deepEqual(candidate(14, -15),20);
  assert.deepEqual(candidate(76, 67),42);
  assert.deepEqual(candidate(17, 27),49);
  assert.deepEqual(candidate(0, 1),0);
  assert.deepEqual(candidate(0, 0),0);
}

test();"
HumanEval_98,khm_Khmr,ts,"//ឧទាហរណ៍: //ដោយបានផ្តល់នូវខ្សែ s, រាប់ចំនួននៃសម្លេងសាមញ្ញធំនៅក្នុងអក្សរគូ។ // >>> count_upper(""aBCdEf"")
// 1
// >>> count_upper(""abcdefg"")
// 0
// >>> count_upper(""dBBE"")
// 0
function count_upper(s: string): number {
","function count_upper(s: string): number {
    const uppercaseVowels = new Set(['A', 'E', 'I', 'O', 'U']);
    let count = 0;
    
    for (let i = 0; i < s.length; i += 2) {
        if (uppercaseVowels.has(s[i])) {
            count++;
        }
    }
    
    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_upper;
  assert.deepEqual(candidate(""aBCdEf""),1);
  assert.deepEqual(candidate(""abcdefg""),0);
  assert.deepEqual(candidate(""dBBE""),0);
  assert.deepEqual(candidate(""B""),0);
  assert.deepEqual(candidate(""U""),1);
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""EEEE""),2);
}

test();"
HumanEval_99,khm_Khmr,ts,"//ឧទាហរណ៍//ពីចំនួនគត់ពីរ, ស្វិតវាចេញពីសូន្យ។//និងវិលត្រឡប់ទៅចំនួនគត់ដែលជិតបំផុតវា ប្រសិនបើចំនួននោះមានចម្ងាយស្មើគ្នា//បង្កើតតួអង្គដែលទទួលយកតំលៃ (សរសៃ) តំណាងឱ្យចំនួនមួយ // >>> closest_integer(""10"")
// 10
// >>> closest_integer(""15.3"")
// 15
// Note:
// Rounding away from zero means that if the given number is equidistant
// from two integers, the one you should return is the one that is the
// farthest from zero. For example closest_integer(""14.5"") should
// return 15 and closest_integer(""-14.5"") should return -15.
function closest_integer(value: string): number {
","function closest_integer(value: string): number {
  const num = parseFloat(value);
  if (num > 0) {
    return Math.floor(num + 0.5);
  } else {
    return Math.ceil(num - 0.5);
  }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = closest_integer;
  assert.deepEqual(candidate(""10""),10);
  assert.deepEqual(candidate(""14.5""),15);
  assert.deepEqual(candidate(""-15.5""),-16);
  assert.deepEqual(candidate(""15.3""),15);
  assert.deepEqual(candidate(""0""),0);
}

test();"
HumanEval_100,khm_Khmr,ts,"//ឧទាហរណ៍: //i តំណាងឱ្យចំនួនថ្មនៅក្នុងកម្រិត (i+1) ។//បញ្ជូនចំនួនដុំថ្មក្នុងកម្រិតនីមួយៗ នៅក្នុង array ដែល element at index //- ចំនួនគូបន្ទាប់ ប្រសិនបើ n ជាគូ។//- ចំនួនមិនស្មើបន្ទាប់បន្សំប្រសិនបើ n ជាមិនស្មើ។//ចំនួនដុំថ្មនៅជាន់បន្ទាប់គឺ: //កម្រិតដំបូងមាន n ថ្ម។//ដោយបានផ្តល់ចំនួនគត់វិជ្ជមាន n, អ្នកត្រូវបង្កើតគំនរនៃ n កម្រិតនៃថ្ម។// >>> make_a_pile(3)
// [3, 5, 7]
function make_a_pile(n: number): number[] {
","function make_a_pile(n: number): number[] {
    const result: number[] = [];
    let currentStones = n;
    for (let i = 0; i < n; i++) {
        result.push(currentStones);
        if (currentStones % 2 === 0) {
            currentStones += 2; // next even number
        } else {
            currentStones += 2; // next odd number
        }
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = make_a_pile;
  assert.deepEqual(candidate(3),[3, 5, 7]);
  assert.deepEqual(candidate(4),[4, 6, 8, 10]);
  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);
  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);
  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);
}

test();"
HumanEval_101,khm_Khmr,ts,"//ឧទាហរណ៍: //ដើម្បីបំបែកសរសៃជាពាក្យ និងបញ្ជូន array នៃពាក្យ។//អ្នកនឹងទទួលបានពាក្យជាច្រើន ដែលបែងចែកដោយកាំបិត ឬអគារ។// >>> words_string(""Hi, my name is John"")
// [""Hi"", ""my"", ""name"", ""is"", ""John""]
// >>> words_string(""One, two, three, four, five, six"")
// [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
function words_string(s: string): string[] {
","function words_string(s: string): string[] {
    return s.split(/[\s,]+/).filter(word => word.length > 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = words_string;
  assert.deepEqual(candidate(""Hi, my name is John""),[""Hi"", ""my"", ""name"", ""is"", ""John""]);
  assert.deepEqual(candidate(""One, two, three, four, five, six""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""]);
  assert.deepEqual(candidate(""Hi, my name""),[""Hi"", ""my"", ""name""]);
  assert.deepEqual(candidate(""One,, two, three, four, five, six,""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""]);
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""ahmed     , gamal""),[""ahmed"", ""gamal""]);
}

test();"
HumanEval_102,khm_Khmr,ts,"//ឧទាហរណ៍: //គ្មានចំនួនបែបនេះទេ, ពេលនោះមុខងារគួរតែត្រឡប់មកវិញ -1.//ចំនួនគត់ធំបំផុតដែលស្ថិតនៅក្នុងចន្លោះ [x, y] រួមបញ្ចូលគ្នា។ ប្រសិនបើ //តួអង្គនេះយកចំនួនវិជ្ជមានពីរគឺ x និង y ហើយបញ្ជូន // >>> choose_num(12, 15)
// 14
// >>> choose_num(13, 12)
// -1
function choose_num(x: number, y: number): number {
","function choose_num(x: number, y: number): number {
    // Ensure x is less than or equal to y for proper range searching
    if (x > y) {
        [x, y] = [y, x];
    }
    
    // Start looking from the upper bound of the range
    for (let i = y; i >= x; i--) {
        if (i % 2 === 0) {
            return i;
        }
    }
    
    // If no even number is found in the range
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = choose_num;
  assert.deepEqual(candidate(12, 15),14);
  assert.deepEqual(candidate(13, 12),-1);
  assert.deepEqual(candidate(33, 12354),12354);
  assert.deepEqual(candidate(5234, 5233),-1);
  assert.deepEqual(candidate(6, 29),28);
  assert.deepEqual(candidate(27, 10),-1);
  assert.deepEqual(candidate(7, 7),-1);
  assert.deepEqual(candidate(546, 546),546);
}

test();"
HumanEval_103,khm_Khmr,ts,"//ឧទាហរណ៍: //ប្រសិនបើ n ធំជាង m, ត្រឡប់មកវិញ -1 ។//ចុចលើសញ្ញាបត្រគណនេយ្យ។//មធ្យមនៃចំនួនពេញពី n ដល់ m (រួមទាំង n និង m) ។//អ្នកបានទទួលចំនួនគត់វិជ្ជមាន n និង m ហើយការងាររបស់អ្នកគឺដើម្បីគិតគូរពី // >>> rounded_avg(1, 5)
// ""0b11""
// >>> rounded_avg(7, 5)
// -1
// >>> rounded_avg(10, 20)
// ""0b1111""
// >>> rounded_avg(20, 33)
// ""0b11010""
function rounded_avg(n: number, m: number): string | number {
","function rounded_avg(n: number, m: number): string | number {
    if (n > m) {
        return -1;
    }

    const count = m - n + 1;
    let sum = 0;
    
    for (let i = n; i <= m; i++) {
        sum += i;
    }

    const avg = sum / count;
    const roundedAvg = Math.round(avg);
    return ""0b"" + roundedAvg.toString(2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rounded_avg;
  assert.deepEqual(candidate(1, 5),""0b11"");
  assert.deepEqual(candidate(7, 13),""0b1010"");
  assert.deepEqual(candidate(964, 977),""0b1111001010"");
  assert.deepEqual(candidate(996, 997),""0b1111100100"");
  assert.deepEqual(candidate(560, 851),""0b1011000010"");
  assert.deepEqual(candidate(185, 546),""0b101101110"");
  assert.deepEqual(candidate(362, 496),""0b110101101"");
  assert.deepEqual(candidate(350, 902),""0b1001110010"");
  assert.deepEqual(candidate(197, 233),""0b11010111"");
  assert.deepEqual(candidate(7, 5),-1);
  assert.deepEqual(candidate(5, 1),-1);
  assert.deepEqual(candidate(5, 5),""0b101"");
}

test();"
HumanEval_104,khm_Khmr,ts,"//ឧទាហរណ៍: //កត់សម្គាល់: array ដែលត្រូវបានបញ្ជូនត្រឡប់មកវិញគួរតែត្រូវបានរៀបចំនូវលំដាប់កើនឡើង។//តួដែលគ្មានលេខគូណាមួយ។//ដោយបានផ្តល់នូវ array នៃចំនួនសរុបវិជ្ជមាន x. ត្រឡប់មកវិញ array ដែលត្រូវបានរៀបចំបើកនៃទាំងអស់ // >>> unique_digits([15, 33, 1422, 1])
// [1, 15, 33]
// >>> unique_digits([152, 323, 1422, 10])
// []
function unique_digits(x: number[]): number[] {
","function unique_digits(x: number[]): number[] {
    // Helper function to check if a number has any even digit
    const hasEvenDigit = (num: number): boolean => {
        while (num > 0) {
            const digit = num % 10;
            if (digit % 2 === 0) return true;
            num = Math.floor(num / 10);
        }
        return false;
    };

    // Filter out numbers without even digits and sort them
    return x.filter(num => !hasEvenDigit(num)).sort((a, b) => a - b);
}

// Example usage:
console.log(unique_digits([15, 33, 1422, 1])); // [1, 15, 33]
console.log(unique_digits([152, 323, 1422, 10])); // []","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = unique_digits;
  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);
  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);
  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);
  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);
}

test();"
HumanEval_105,khm_Khmr,ts,"//ឧទាហរណ៍: //""មួយ"" ""ពីរ"" ""បី"" ""បួន"" ""ប្រាំ"" ""ប្រាំពីរ"" ""ប្រាំពីរ"" ""ប្រាំបី"" ""ប្រាំបួន""//បកប្រែ array ដែលបានមកពី, ហើយបន្ទាប់មកប្តូរលេខនីមួយៗ ដោយឈ្មោះដែលពាក់ព័ន្ធពី //ដោយបានផ្តល់នូវ array នៃចំនួនពេញ, វាយលេខចំនួនពេញដែលស្ថិតនៅចន្លោះ 1 និង 9 រួមបញ្ចូលគ្នា, // >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])
// [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
// If the array is empty, return an empty array:
// >>> by_length([])
// []
// If the array has any strange number ignore it:
// >>> by_length([1, -1, 55])
// [""One""]
function by_length(arr: number[]): string[] {
","function by_length(arr: number[]): string[] {
    const numberNames: { [key: number]: string } = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    };

    return arr
        .filter(num => num >= 1 && num <= 9)
        .sort((a, b) => b - a)
        .map(num => numberNames[num]);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = by_length;
  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, -1, 55]),[""One""]);
  assert.deepEqual(candidate([1, -1, 3, 2]),[""Three"", ""Two"", ""One""]);
  assert.deepEqual(candidate([9, 4, 8]),[""Nine"", ""Eight"", ""Four""]);
}

test();"
HumanEval_106,khm_Khmr,ts,"//ឧទាហរណ៍: //កត្តានៃ i គឺជាការបង្កើនចំនួនពី 1 ទៅ i (1 * 2 * ... * i) ។//i ចាប់ផ្តើមពី 1 ។//ឬចំនួននៃចំនួនពី 1 ដល់ i បើមិនដូច្នេះទេ ។//និងវិលត្រឡប់មកវិញនូវ array នៃទំហំ n, ដូចជាតម្លៃនៃអាល់អេម៉ង់នៅ index i គឺជាកត្តានៃ i ប្រសិនបើ i ជាគូទ //អនុវត្តន៍មុខងារ f ដែលយក n ជាឧបករណ៍បញ្ជា, // >>> f(5)
// [1, 2, 6, 24, 15]
function f(n: number): number[] {
","function f(n: number): number[] {
    const result: number[] = [];
    for (let i = 1; i <= n; i++) {
        if (i % 2 === 0) {
            // Calculate factorial for even i
            let factorial = 1;
            for (let j = 1; j <= i; j++) {
                factorial *= j;
            }
            result.push(factorial);
        } else {
            // Calculate sum for odd i
            let sum = 0;
            for (let j = 1; j <= i; j++) {
                sum += j;
            }
            result.push(sum);
        }
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = f;
  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);
  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);
  assert.deepEqual(candidate(1),[1]);
  assert.deepEqual(candidate(3),[1, 2, 6]);
}

test();"
HumanEval_107,khm_Khmr,ts,"//ឧទាហរណ៍ទី១://palindromes ចំនួនពេញដែលស្ថិតនៅក្នុងចន្លោះ ((1, n), រួមបញ្ចូលគ្នា។ //ដោយបានផ្តល់ចំនួនគត់វិជ្ជមាន n, សូមត្រឡប់មកវិញនូវ array ដែលមានចំនួនគត់និងគត់ // >>> even_odd_palindrome(3)
// [1, 2]
// Explanation:
// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
// Example 2:
// >>> even_odd_palindrome(12)
// [4, 6]
// Explanation:
// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
// Note:
// 1. 1 <= n <= 10^3
// 2. returned array has the number of even and odd integer palindromes respectively.
function even_odd_palindrome(n: number): [number, number] {
","function isPalindrome(num: number): boolean {
    const str = num.toString();
    return str === str.split('').reverse().join('');
}

function even_odd_palindrome(n: number): [number, number] {
    let evenCount = 0;
    let oddCount = 0;

    for (let i = 1; i <= n; i++) {
        if (isPalindrome(i)) {
            if (i % 2 === 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
    }

    return [evenCount, oddCount];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = even_odd_palindrome;
  assert.deepEqual(candidate(123),[8, 13]);
  assert.deepEqual(candidate(12),[4, 6]);
  assert.deepEqual(candidate(3),[1, 2]);
  assert.deepEqual(candidate(63),[6, 8]);
  assert.deepEqual(candidate(25),[5, 6]);
  assert.deepEqual(candidate(19),[4, 6]);
  assert.deepEqual(candidate(9),[4, 5]);
  assert.deepEqual(candidate(1),[0, 1]);
}

test();"
HumanEval_108,khm_Khmr,ts,"//ឧទាហរណ៍ -123 មានសញ្ញាប័ត្រចំនួន -1, 2, និង 3 ។//ប្រសិនបើចំនួនមួយមានអវិជ្ជមាន, អក្សរដែលចុះហត្ថលេខាដំបូងរបស់វានឹងមានអវិជ្ជមាន: //ចំនួននៃអក្សរដែលមានចំនួននៃលេខ > 0 ។//សរសេរមុខងារ count_nums ដែលយក array នៃចំនួនពេញ និងវិលត្រឡប់មកវិញ // >>> count_nums([])
// 0
// >>> count_nums([-1, 11, -11])
// 1
// >>> count_nums([1, 1, 2])
// 3
function count_nums(arr: number[]): number {
","function count_nums(arr: number[]): number {
    function sumOfDigits(num: number): number {
        let sum = 0;
        let str = num.toString();
        for (let i = 0; i < str.length; i++) {
            let digit = parseInt(str[i]);
            if (i === 0 && str[i] === '-') {
                digit = -parseInt(str[i+1]);
                i++;
            }
            sum += digit;
        }
        return sum;
    }

    let count = 0;
    for (const num of arr) {
        if (sumOfDigits(num) > 0) {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_nums;
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([-1, -2, 0]),0);
  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);
  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);
  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);
  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);
  assert.deepEqual(candidate([0, 1]),1);
  assert.deepEqual(candidate([1]),1);
}

test();"
HumanEval_109,khm_Khmr,ts,"//ឧទាហរណ៍: //កត់សម្គាល់: array ដែលបានផ្តល់ជូនត្រូវបានធានាថាមានអក្សរតែមួយ។//ប្រសិនបើ array ដែលបានផ្តល់នោះគឺគ្មានអ្វីនោះ return true ។//បន្ទាប់មក return true ឬ return false ។//ប្រសិនបើវាអាចទទួលបាន array ដែលត្រូវបានរៀបចំនៃការអនុវត្តប្រតិបត្តិការខាងលើនេះ ។//ចំណុចចាប់ផ្តើមនៅក្នុង array គឺ 0th index ។//តួចុងក្រោយនៃ array នឹងត្រូវបានផ្លាស់ប្តូរទៅ //ប្រតិបត្តិការប្ដូរទៅខាងស្តាំមួយមានន័យថា ប្ដូរតួអក្សរទាំងអស់នៃ array ដោយមួយ។//អ្នកអាចធ្វើការផ្លាស់ប្តូរផ្លូវទៅខាងស្តាំបានច្រើនដង។//ប្រតិបត្តិការខាងក្រោមនេះនៅលើ array ដែលបានផ្តល់: //វាអាចរកបាន array ដែលត្រូវបានរៀបចំនៃលំដាប់មិនថយដោយអនុវត្ត //លេខនៅក្នុង array នឹងត្រូវបានបញ្ជាដោយចៃដន្យ។ កិច្ចការរបស់អ្នកគឺដើម្បីកំណត់ថាតើ //យើងមាន array 'arr' នៃចំនួនគត់ N arr[1], arr[2], ..., arr[N] ។ // >>> move_one_ball([3, 4, 5, 1, 2])
// true
// Explanation: By performin 2 right shift operations, non-decreasing order can
// be achieved for the given array.
// >>> move_one_ball([3, 5, 4, 1, 2])
// false
// Explanation:It is not possible to get non-decreasing order for the given
// array by performing any number of right shift operations.
function move_one_ball(arr: number[]): boolean {
","function move_one_ball(arr: number[]): boolean {
    if (arr.length === 0) return true;

    let countDecreases = 0;
    const n = arr.length;

    for (let i = 0; i < n; i++) {
        if (arr[i] > arr[(i + 1) % n]) {
            countDecreases++;
        }
        if (countDecreases > 1) {
            return false;
        }
    }

    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = move_one_ball;
  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);
  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);
  assert.deepEqual(candidate([4, 3, 1, 2]),false);
  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);
  assert.deepEqual(candidate([]),true);
}

test();"
HumanEval_110,khm_Khmr,ts,"//ឧទាហរណ៍: //បើមិនដូច្នេះទេ សូមឆ្លើយថា ""NO"" ។//គ្រប់អក្សរនៃ lst1 ត្រូវតែស្មើគ្នា, ត្រឡប់មកវិញ ""YES"" ។//ប្រសិនបើវាអាចផ្លាស់ប្តូរអាល់ម៉ង់រវាង lst1 និង lst2 ដើម្បីធ្វើឱ្យ //គ្មានការកំណត់លើចំនួននៃអំបិលដែលត្រូវបានផ្លាស់ប្តូររវាង lst1 និង lst2 ។//រវាងពួកគេដើម្បីធ្វើ lst1 ជា array នៃចំនួនគូតែប៉ុណ្ណោះ។//និងកំណត់ថាតើវាអាចធ្វើបានដើម្បីផ្លាស់ប្តូរអក្សរណាមួយឬអត់។//ក្នុងបញ្ហានេះ, អ្នកនឹងអនុវត្តមុខងារដែលយកចំនួនពីរ arrays, // >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])
// ""YES""
// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])
// ""NO""
// It is assumed that the input arrays will be non-empty.
function exchange(lst1: number[], lst2: number[]): string {
","function exchange(lst1: number[], lst2: number[]): string {
    const isEven = (num: number) => num % 2 === 0;
    
    // Count the odd numbers in lst1
    const oddCountInLst1 = lst1.reduce((count, num) => count + (isEven(num) ? 0 : 1), 0);

    // Count the even numbers in lst2
    const evenCountInLst2 = lst2.reduce((count, num) => count + (isEven(num) ? 1 : 0), 0);

    // Check if number of odd numbers in lst1 can be matched by even numbers in lst2
    return oddCountInLst1 <= evenCountInLst2 ? ""YES"" : ""NO"";
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = exchange;
  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),""YES"");
  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),""NO"");
  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),""YES"");
  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),""YES"");
  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),""NO"");
  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),""NO"");
  assert.deepEqual(candidate([100, 200], [200, 200]),""YES"");
}

test();"
HumanEval_111,khm_Khmr,ts,"//ឧទាហរណ៍: //ប្រសិនបើអក្សរជាច្រើនមានលក្ខណៈដូចគ្នា សូមបញ្ជូនទាំងអស់។//នៃអក្សរដែលមានការដកដង្ហើមច្រើនជាងគេ និងមានចំនួនសមស្រប។//ដោយបានផ្តល់នូវខ្សែសង្វាក់តំណាងឱ្យអក្សរតូចដែលបែងចែកដោយអគារ, ត្រឡប់ទៅ object // >>> histogram(""a b c"")
// {""a"": 1, ""b"": 1, ""c"": 1}
// >>> histogram(""a b b a"")
// {""a"": 2, ""b"": 2}
// >>> histogram(""a b c a b"")
// {""a"": 2, ""b"": 2}
// >>> histogram(""b b b b a"")
// {""b"": 4}
// >>> histogram("""")
// {}
function histogram(test: string): {[key: string]: number} {
","function histogram(test: string): { [key: string]: number } {
    if (test.trim() === """") {
        return {};
    }

    const letters = test.split("" "");
    const counts: { [key: string]: number } = {};

    for (const letter of letters) {
        if (letter in counts) {
            counts[letter]++;
        } else {
            counts[letter] = 1;
        }
    }

    let maxCount = 0;
    for (const count of Object.values(counts)) {
        if (count > maxCount) {
            maxCount = count;
        }
    }

    const result: { [key: string]: number } = {};
    for (const [letter, count] of Object.entries(counts)) {
        if (count === maxCount) {
            result[letter] = count;
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = histogram;
  assert.deepEqual(candidate(""a b b a""),{""a"": 2, ""b"": 2});
  assert.deepEqual(candidate(""a b c a b""),{""a"": 2, ""b"": 2});
  assert.deepEqual(candidate(""a b c d g""),{""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1});
  assert.deepEqual(candidate(""r t g""),{""r"": 1, ""t"": 1, ""g"": 1});
  assert.deepEqual(candidate(""b b b b a""),{""b"": 4});
  assert.deepEqual(candidate(""r t g""),{""r"": 1, ""t"": 1, ""g"": 1});
  assert.deepEqual(candidate(""""),{});
  assert.deepEqual(candidate(""a""),{""a"": 1});
}

test();"
HumanEval_112,khm_Khmr,ts,"//ឧទាហរណ៍//អ្នកគួរតែត្រឡប់ទៅ array ដែលមាន string លទ្ធផល និង true/false សម្រាប់ការពិនិត្យ។//String ត្រូវបានគេហៅថា Palindrome ប្រសិនបើវាមានលក្ខណៈដូចគ្នាពីក្រោយទៅមុខ។//បន្ទាប់មកចុចមើលថាតើលេខសញ្ញានៃលទ្ធផលគឺ palindrome ឬអត់។//យើងបានទទួលសរសៃពីរ s និង c, អ្នកត្រូវលុបអក្សរទាំងអស់នៅក្នុង s ដែលស្មើនឹងអក្សរណាមួយនៅក្នុង c //កិច្ចការ // >>> reverse_delete(""abcde"", ""ae"")
// [""bcd"", false]
// >>> reverse_delete(""abcdef"", ""b"")
// [""acdef"", false]
// >>> reverse_delete(""abcdedcba"", ""ab"")
// [""cdedc"", true]
function reverse_delete(s: string, c: string): [string, boolean] {
","function reverse_delete(s: string, c: string): [string, boolean] {
    // Create a Set of characters to delete for faster lookup
    const charsToDelete = new Set(c);

    // Filter out characters in 's' that are in 'c'
    const filteredString = s.split('').filter(char => !charsToDelete.has(char)).join('');

    // Check if the filtered string is a palindrome
    const isPalindrome = filteredString === filteredString.split('').reverse().join('');

    return [filteredString, isPalindrome];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = reverse_delete;
  assert.deepEqual(candidate(""abcde"", ""ae""),[""bcd"", false]);
  assert.deepEqual(candidate(""abcdef"", ""b""),[""acdef"", false]);
  assert.deepEqual(candidate(""abcdedcba"", ""ab""),[""cdedc"", true]);
  assert.deepEqual(candidate(""dwik"", ""w""),[""dik"", false]);
  assert.deepEqual(candidate(""a"", ""a""),["""", true]);
  assert.deepEqual(candidate(""abcdedcba"", """"),[""abcdedcba"", true]);
  assert.deepEqual(candidate(""abcdedcba"", ""v""),[""abcdedcba"", true]);
  assert.deepEqual(candidate(""vabba"", ""v""),[""abba"", true]);
  assert.deepEqual(candidate(""mamma"", ""mia""),["""", true]);
}

test();"
HumanEval_113,khm_Khmr,ts,"//នៃលេខមិនស្មើគ្នានៅក្នុង i'th string នៃការបញ្ចូល។//string i នៃការបញ្ចូល ""ដែល i ទាំងអស់ត្រូវត្រូវបានជំនួសដោយលេខ //កត្តា i នៃ output ត្រូវតែជាចំនួននៃកត្តា odd នៅក្នុង //ដោយបានផ្តល់នូវ array នៃ string ដែល string នីមួយៗ មានតែលេខប៉ុណ្ណោះ, សូមត្រឡប់ទៅ array ។// >>> odd_count([""1234567""])
// [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
// >>> odd_count([""3"", ""11111111""])
// [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
function odd_count(lst: string[]): string[] {
","function odd_count(lst: string[]): string[] {
    return lst.map(str => {
        // Count the number of odd digits in the string
        let oddCount = Array.from(str).reduce((count, char) => {
            let digit = parseInt(char, 10);
            return digit % 2 !== 0 ? count + 1 : count;
        }, 0);

        // Construct the result string
        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = odd_count;
  assert.deepEqual(candidate([""1234567""]),[""the number of odd elements 4n the str4ng 4 of the 4nput.""]);
  assert.deepEqual(candidate([""3"", ""11111111""]),[""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]);
  assert.deepEqual(candidate([""271"", ""137"", ""314""]),[""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""]);
}

test();"
HumanEval_114,khm_Khmr,ts,"//ឧទាហរណ៍//នៃ nums ។//ដោយបានផ្តល់នូវ array នៃ integer nums, រកចំនួនតិចបំផុតនៃ sub-array ដែលមិនមែនជាលំហ // >>> minSubArraySum([2, 3, 4, 1, 2, 4])
// 1
// >>> minSubArraySum([-1, -2, -3])
// -6
function minSubArraySum(nums: number[]): number {
","function minSubArraySum(nums: number[]): number {
    let minSum = nums[0];
    let currentSum = nums[0];
    
    for (let i = 1; i < nums.length; i++) {
        currentSum = Math.min(nums[i], currentSum + nums[i]);
        minSum = Math.min(minSum, currentSum);
    }
    
    return minSum;
}

// Example usage:
// console.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output: 1
// console.log(minSubArraySum([-1, -2, -3])); // Output: -6","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = minSubArraySum;
  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);
  assert.deepEqual(candidate([-1, -2, -3]),-6);
  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);
  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);
  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);
  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);
  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);
  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);
  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);
  assert.deepEqual(candidate([-10]),-10);
  assert.deepEqual(candidate([7]),7);
  assert.deepEqual(candidate([1, -1]),-1);
}

test();"
HumanEval_115,khm_Khmr,ts,"//ឧទាហរណ៍ទី១://បញ្ចេញចំនួនដងដែលអ្នកត្រូវការដើម្បីទម្លាក់ប៊ិច។//កិច្ចការរបស់អ្នកគឺប្រើអាងទឹក ដើម្បីបូមទឹកចេញពីអណ្ដូង។//ហើយអាងទាំងអស់មានសមត្ថភាពដូចគ្នា។//អណ្តូងទឹកនីមួយៗ មានបង្គន់មួយដែលអាចប្រើដើម្បីដកទឹកពីវា។//ហើយ 1 ក្នុង ជួរ នីមួយៗ តំណាង ឲ្យ ទឹក មួយ គ្រឿង ។//អ្នកត្រូវបានផ្តល់នូវក្របខ័ណ្ឌប្រអប់នៃអណ្តូងទឹក។ ជួរនីមួយៗ តំណាងឱ្យអណ្តូងតែមួយ។// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
// 6
// Example 2:
// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
// 5
// Example 3:
// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)
// 0
// Constraints:
// * all wells have the same length
// * 1 <= grid.length <= 10^2
// * 1 <= grid[:,1].length <= 10^2
// * grid[i][j] -> 0 | 1
// * 1 <= capacity <= 10
function max_fill(grid: number[][], capacity: number): number {
","function max_fill(grid: number[][], capacity: number): number {
    let totalBuckets = 0;

    for (let row of grid) {
        let waterUnits = row.reduce((sum, cell) => sum + cell, 0);
        totalBuckets += Math.ceil(waterUnits / capacity);
    }

    return totalBuckets;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = max_fill;
  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);
  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);
  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);
  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);
  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);
}

test();"
HumanEval_116,khm_Khmr,ts,"//វាត្រូវអនុវត្តដូចខាងក្រោមនេះ://សម្រាប់ចំនួនដដែលនៃចំនួនមួយ, ប្រភេទដោយផ្អែកលើតម្លៃដប់។//ចំនួននៃចំនួននៅក្នុងការតំណាង binary របស់ពួកគេនៅក្នុងបញ្ជីឡើង។//ក្នុង Kata នេះ អ្នកត្រូវរៀបចំ array នៃ integer ដែលមិនមែនជាអវិជ្ជមានតាម // >>> sort_array([1, 5, 2, 3, 4])
// [1, 2, 3, 4, 5]
// >>> sort_array([-2, -3, -4, -5, -6])
// [-6, -5, -4, -3, -2]
// >>> sort_array([1, 0, 2, 3, 4])
// [0, 1, 2, 3, 4]
function sort_array(arr: number[]): number[] {
","function sort_array(arr: number[]): number[] {
    return arr.sort((a, b) => {
        const countOnes = (n: number) => n.toString(2).replace(/0/g, """").length;
        const numOnesA = countOnes(a);
        const numOnesB = countOnes(b);

        if (numOnesA !== numOnesB) {
            return numOnesA - numOnesB;
        } else {
            return a - b;
        }
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_array;
  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);
  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);
  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);
  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);
  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);
  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);
}

test();"
HumanEval_117,khm_Khmr,ts,"//ឧទាហរណ៍: //កត់សម្គាល់: អ្នកអាចចាត់ទុកថា string input មានតែអក្សរ និងអគារប៉ុណ្ណោះ។//ប្រសិនបើ string s គឺគ្មានអ្វីនោះ អត្ថប្រយោជន៍ត្រូវតែវិលត្រឡប់ទៅជា array ដែលគ្មានអ្វី។//n សញ្ញា សាមញ្ញ, ដើម្បី ពាក្យ ទាំងនេះ បង្ហាញខ្លួន នៅក្នុង ខ្សែ s ។ //ជាមុខងារដែលវិលត្រឡប់មកវិញនូវ array នៃពាក្យទាំងអស់ពី string s ដែលមានត្រឹមតែ //ដោយបានផ្តល់នូវ string s និង natural number n អ្នកត្រូវបានបញ្ជាឱ្យអនុវត្ត // >>> select_words(""Mary had a little lamb"", 4)
// [""little""]
// >>> select_words(""Mary had a little lamb"", 3)
// [""Mary"", ""lamb""]
// >>> select_words(""simple white space"", 2)
// []
// >>> select_words(""Hello world"", 4)
// [""world""]
// >>> select_words(""Uncle sam"", 3)
// [""Uncle""]
function select_words(s: string, n: number): string[] {
","function select_words(s: string, n: number): string[] {
    const isConsonant = (char: string): boolean => {
        const vowels = 'aeiouAEIOU';
        return !vowels.includes(char) && /[a-zA-Z]/.test(char);
    };

    const words = s.split(' ');
    const result: string[] = [];

    for (const word of words) {
        const consonantCount = [...word].filter(isConsonant).length;
        if (consonantCount === n) {
            result.push(word);
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = select_words;
  assert.deepEqual(candidate(""Mary had a little lamb"", 4),[""little""]);
  assert.deepEqual(candidate(""Mary had a little lamb"", 3),[""Mary"", ""lamb""]);
  assert.deepEqual(candidate(""simple white space"", 2),[]);
  assert.deepEqual(candidate(""Hello world"", 4),[""world""]);
  assert.deepEqual(candidate(""Uncle sam"", 3),[""Uncle""]);
  assert.deepEqual(candidate("""", 4),[]);
  assert.deepEqual(candidate(""a b c d e f"", 1),[""b"", ""c"", ""d"", ""f""]);
}

test();"
HumanEval_118,khm_Khmr,ts,"//ឧទាហរណ៍: //អ្នកអាចគិតថា string ដែលបានផ្តល់មានអក្សរអង់គ្លេសតែប៉ុណ្ណោះ ។//រកឃើញថា សម្លេងណាដែលត្រូវនឹងលក្ខខណ្ឌខាងលើ។//សម្លេងនៅដើម និងចុងមិនរាប់ទេ Return empty string if you didn't //សញ្ញា សាមញ្ញ ពីរ ពី ខាង ស្តាំ នៃ ពាក្យ ( case sensitive) ។//អ្នកត្រូវបានផ្តល់ពាក្យមួយ។ ការងាររបស់អ្នកគឺដើម្បីរក vowel ដែលជិតបំផុតដែលស្ថិតនៅចន្លោះ // >>> get_closest_vowel(""yogurt"")
// ""u""
// >>> get_closest_vowel(""FULL"")
// ""U""
// >>> get_closest_vowel(""quick"")
// """"
// >>> get_closest_vowel(""ab"")
// """"
function get_closest_vowel(word: string): string {
","function get_closest_vowel(word: string): string {
    const vowels = new Set<string>(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);
    for (let i = word.length - 2; i > 0; i--) {
        if (vowels.has(word[i]) && !vowels.has(word[i - 1]) && !vowels.has(word[i + 1])) {
            return word[i];
        }
    }
    return '';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_closest_vowel;
  assert.deepEqual(candidate(""yogurt""),""u"");
  assert.deepEqual(candidate(""full""),""u"");
  assert.deepEqual(candidate(""easy""),"""");
  assert.deepEqual(candidate(""eAsy""),"""");
  assert.deepEqual(candidate(""ali""),"""");
  assert.deepEqual(candidate(""bad""),""a"");
  assert.deepEqual(candidate(""most""),""o"");
  assert.deepEqual(candidate(""ab""),"""");
  assert.deepEqual(candidate(""ba""),"""");
  assert.deepEqual(candidate(""quick""),"""");
  assert.deepEqual(candidate(""anime""),""i"");
  assert.deepEqual(candidate(""Asia""),"""");
  assert.deepEqual(candidate(""Above""),""o"");
}

test();"
HumanEval_119,khm_Khmr,ts,"//ឧទាហរណ៍: //សូមត្រឡប់មកវិញ 'Yes' ប្រសិនបើមានវិធីដើម្បីបង្កើតខ្សែល្អ ហើយត្រឡប់មកវិញ 'No' បើមិនដូច្នេះទេ ។//"" (()) "" មិនមែនជា។//មានតុល្យភាព ឧទាហរណ៍: ខ្សែ '(()))) ល្អ ខណៈពេលដែល ខ្សែ //ខ្សែ S ត្រូវបានចាត់ទុកថាមានគុណភាពល្អ ប្រសិនបើ និងតែប៉ុណ្ណោះ ប្រសិនបើក្រដាសទាំងអស់នៅក្នុង S //សំបុត្រដែលទទួលបាននឹងល្អ។//ការងាររបស់អ្នកគឺដើម្បីពិនិត្យមើលថាតើវាអាចបិទខ្សែទាំងពីរនៅក្នុង //គ្រាន់តែក្របខ័ណ្ឌ "" (() "" ឬក្របខ័ណ្ឌជិត "") "" ។//អ្នកបានទទួល array នៃខ្សែពីរ, ទាំងពីរខ្សែរួមមាន open // >>> match_parens([""()("", "")""])
// ""Yes""
// >>> match_parens(["")"", "")""])
// ""No""
function match_parens(lst: string[]): string {
","function match_parens(lst: string[]): string {
    const canFormGoodString = (s1: string, s2: string): boolean => {
        let balance = 0;

        // Check s1 followed by s2
        for (const char of s1 + s2) {
            if (char === '(') balance++;
            else if (char === ')') balance--;

            if (balance < 0) return false; // More closing than opening
        }
        if (balance === 0) return true; // Balanced

        balance = 0;
        // Check s2 followed by s1
        for (const char of s2 + s1) {
            if (char === '(') balance++;
            else if (char === ')') balance--;

            if (balance < 0) return false; // More closing than opening
        }

        return balance === 0; // Balanced
    };

    return canFormGoodString(lst[0], lst[1]) ? 'Yes' : 'No';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = match_parens;
  assert.deepEqual(candidate([""()("", "")""]),""Yes"");
  assert.deepEqual(candidate(["")"", "")""]),""No"");
  assert.deepEqual(candidate([""(()(())"", ""())())""]),""No"");
  assert.deepEqual(candidate(["")())"", ""(()()(""]),""Yes"");
  assert.deepEqual(candidate([""(())))"", ""(()())((""]),""Yes"");
  assert.deepEqual(candidate([""()"", ""())""]),""No"");
  assert.deepEqual(candidate([""(()("", ""()))()""]),""Yes"");
  assert.deepEqual(candidate([""(((("", ""((())""]),""No"");
  assert.deepEqual(candidate(["")(()"", ""(()(""]),""No"");
  assert.deepEqual(candidate(["")("", "")(""]),""No"");
  assert.deepEqual(candidate([""("", "")""]),""Yes"");
  assert.deepEqual(candidate(["")"", ""(""]),""Yes"");
}

test();"
HumanEval_120,khm_Khmr,ts,"//ឧទាហរណ៍ទី១://នៃកម្រិត k ដែលមានចំនួន k ក្នុង arr ។//ដោយបានផ្តល់នូវ array array នៃចំនួនពេញ និងចំនួនពេញវិជ្ជមាន k, ត្រឡប់មកវិញ array ដែលត្រូវបានរៀបចំបែប // >>> maximum([-3, -4, 5], 3)
// [-4, -3, 5]
// Example 2:
// >>> maximum([4, -4, 4], 2)
// [4, 4]
// Example 3:
// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)
// [2]
// Note:
// 1. The length of the array will be in the range of [1, 1000].
// 2. The elements in the array will be in the range of [-1000, 1000].
// 3. 0 <= k <= len(arr)
function maximum(arr: number[], k: number): number[] {
","function maximum(arr: number[], k: number): number[] {
    // Sort the array in descending order and then take the first k elements
    const sortedArr = arr.sort((a, b) => b - a);
    return sortedArr.slice(0, k).sort((a, b) => a - b);
}

// Example usage:
// console.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]
// console.log(maximum([4, -4, 4], 2)); // Output: [4, 4]
// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = maximum;
  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);
  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);
  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);
  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);
  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);
  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);
  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);
  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);
  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);
  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);
  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);
}

test();"
HumanEval_121,khm_Khmr,ts,"//ឧទាហរណ៍//ដោយបានផ្តល់នូវ array នៃ integer ដែលមិនមែនជាអាវុធ, សូមត្រឡប់មកវិញ នូវចំនួននៃតួឯកទាំងអស់ដែលស្ថិតនៅក្នុងតំណែងស្មើគ្នា។ // >>> solution([5, 8, 7, 1])
// 12
// >>> solution([3, 3, 3, 3, 3])
// 9
// >>> solution([30, 13, 24, 321])
// 0
function solution(lst: number[]): number {
","function solution(lst: number[]): number {
    let sum: number = 0;
    for (let i = 0; i < lst.length; i += 2) {  // Traverse even indices
        if (lst[i] % 2 !== 0) {  // Check if the element is odd
            sum += lst[i];
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solution;
  assert.deepEqual(candidate([5, 8, 7, 1]),12);
  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);
  assert.deepEqual(candidate([30, 13, 24, 321]),0);
  assert.deepEqual(candidate([5, 9]),5);
  assert.deepEqual(candidate([2, 4, 8]),0);
  assert.deepEqual(candidate([30, 13, 23, 32]),23);
  assert.deepEqual(candidate([3, 13, 2, 9]),3);
}

test();"
HumanEval_122,khm_Khmr,ts,"//ឧទាហរណ៍: //លេខនៃអក្សរដែលមានចំនួនពីរដងពីអក្សរដំបូង k នៃ arr ។//ដោយបានផ្តល់នូវ array ដែលមិនមែនជាលំហនៃចំនួនគត់ arr និងចំនួនគត់ k, return // >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
// 24
// Constraints:
// 1. 1 <= len(arr) <= 100
// 2. 1 <= k <= len(arr)
function add_elements(arr: number[], k: number): number {
","function add_elements(arr: number[], k: number): number {
    let sum = 0;
    for (let i = 0; i < k; i++) {
        if (arr[i] >= -99 && arr[i] <= 99) {
            sum += arr[i];
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add_elements;
  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);
  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);
  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);
  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);
  assert.deepEqual(candidate([1], 1),1);
}

test();"
HumanEval_123,khm_Khmr,ts,"//get_odd_collatz(5) វិលត្រឡប់មកវិញ [1, 5] # លំដាប់ collatz សម្រាប់ 5 គឺ [5, 16, 8, 4, 2, 1], ដូច្នេះចំនួនមិនធម្មតាមានតែ 1 និង 5 ប៉ុណ្ណោះ ។ //ឧទាហរណ៍: //2. return array sorted in increasing order. (ការត្រឡប់មកវិញនៃ array ត្រូវបានរៀបចំនូវលំដាប់កើនឡើង)//1. Collatz ((1) គឺ [1] ។//កត់សម្គាល់: //លក្ខខណ្ឌបន្ថែម 1. ការប៉ាន់ស្មានគឺថា មិនថាតម្លៃនៃ n អ្វីនោះទេ លំដាប់នឹងទទួលបាន 1 ។//លក្ខខណ្ឌមុន. ប្រសិនបើលក្ខខណ្ឌមុនគឺមិនសូវជា, លក្ខខណ្ឌបន្ទាប់គឺ 3 ដងមុន //លក្ខខណ្ឌមុនដូចខាងក្រោម: ប្រសិនបើលក្ខខណ្ឌមុនមានគូទ, លក្ខខណ្ឌបន្ទាប់គឺកន្លះនៃ //ដូចខាងក្រោម: ចាប់ផ្តើមដោយចំនួនសរុបវិជ្ជមាន n ។ បន្ទាប់មកពាក្យនីមួយៗ ត្រូវបានទទួលបានពី //ការស្រមៃរបស់ Collatz គឺជាការស្រមៃក្នុងគណិតវិទ្យាដែលពាក់ព័ន្ធនឹងការកំណត់លំដាប់លំដាប់ //ដោយបានផ្តល់ចំនួនគត់វិជ្ជមាន n, សូមត្រឡប់មកវិញនូវ array ដែលមានចំនួនមិនធម្មតានៅក្នុងជួរ collatz ។// >>> get_odd_collatz(5)
// [1, 5]
function get_odd_collatz(n: number): number[] {
","function get_odd_collatz(n: number): number[] {
    const collatzSequence: number[] = [];
    while (n !== 1) {
        if (n % 2 !== 0) {
            collatzSequence.push(n);
        }
        if (n % 2 === 0) {
            n = n / 2;
        } else {
            n = 3 * n + 1;
        }
    }
    // Include 1 in the sequence if it's odd, as per standard collatz sequence
    collatzSequence.push(1);
    return collatzSequence.sort((a, b) => a - b);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_odd_collatz;
  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);
  assert.deepEqual(candidate(5),[1, 5]);
  assert.deepEqual(candidate(12),[1, 3, 5]);
  assert.deepEqual(candidate(1),[1]);
}

test();"
HumanEval_124,khm_Khmr,ts,"//4. ថ្ងៃត្រូវមាននៅក្នុងទម្រង់: mm-dd-yyyy //3. ខែមិនគួរតិចជាង 1 ឬខ្ពស់ជាង 12 ទេ//2. ចំនួនថ្ងៃមិនតិចជាង 1 ឬខ្ពស់ជាង 31 ថ្ងៃសម្រាប់ខែ 1,3,5,7,8,10,12 និងចំនួនថ្ងៃមិនតិចជាង 1 ឬខ្ពស់ជាង 30 ថ្ងៃសម្រាប់ខែ 4,6,9,11 និងចំនួនថ្ងៃមិនតិចជាង 1 ឬខ្ពស់ជាង 29 សម្រាប់ខែ 2 ។//1. ខ្សែ Date មិន សូន្យ ទេ ។//ថ្ងៃនេះមានប្រសិទ្ធភាព ប្រសិនបើគ្រប់ច្បាប់ដូចខាងក្រោមត្រូវបានបំពេញ://ត្រឡប់មកវិញពិតប្រាកដប្រសិនបើថ្ងៃមានសុពលភាព បើមិនដូច្នេះទេ false ។ //អ្នកត្រូវសរសេរ function ដែល validates មួយ string ថ្ងៃដែលបានផ្តល់ជូននិង // >>> valid_date(""03-11-2000"")
// true
// >>> valid_date(""15-01-2012"")
// false
// >>> valid_date(""04-0-2040"")
// false
// >>> valid_date(""06-04-2020"")
// true
// >>> valid_date(""06/04/2020"")
// false
function valid_date(date: string): boolean {
","function valid_date(date: string): boolean {
    // Check if the date is empty
    if (date.trim() === """") return false;

    // Split the date string into components
    const dateParts = date.split(""-"");
    if (dateParts.length !== 3) return false;

    const [monthStr, dayStr, yearStr] = dateParts;

    // Validate each part of the date
    const month = parseInt(monthStr, 10);
    const day = parseInt(dayStr, 10);
    const year = parseInt(yearStr, 10);

    // Check if all parts are valid numbers
    if (isNaN(month) || isNaN(day) || isNaN(year)) return false;

    // Check the month range
    if (month < 1 || month > 12) return false;

    // Check the day range based on the month
    if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {
        if (day < 1 || day > 31) return false;
    } else if ([4, 6, 9, 11].includes(month)) {
        if (day < 1 || day > 30) return false;
    } else if (month === 2) {
        if (day < 1 || day > 29) return false;
    }

    // All checks passed
    return true;
}

// Example usage
console.log(valid_date(""03-11-2000"")); // true
console.log(valid_date(""15-01-2012"")); // false
console.log(valid_date(""04-0-2040""));  // false
console.log(valid_date(""06-04-2020"")); // true
console.log(valid_date(""06/04/2020"")); // false","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = valid_date;
  assert.deepEqual(candidate(""03-11-2000""),true);
  assert.deepEqual(candidate(""15-01-2012""),false);
  assert.deepEqual(candidate(""04-0-2040""),false);
  assert.deepEqual(candidate(""06-04-2020""),true);
  assert.deepEqual(candidate(""01-01-2007""),true);
  assert.deepEqual(candidate(""03-32-2011""),false);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""04-31-3000""),false);
  assert.deepEqual(candidate(""06-06-2005""),true);
  assert.deepEqual(candidate(""21-31-2000""),false);
  assert.deepEqual(candidate(""04-12-2003""),true);
  assert.deepEqual(candidate(""04122003""),false);
  assert.deepEqual(candidate(""20030412""),false);
  assert.deepEqual(candidate(""2003-04""),false);
  assert.deepEqual(candidate(""2003-04-12""),false);
  assert.deepEqual(candidate(""04-2003""),false);
}

test();"
HumanEval_125,khm_Khmr,ts,"//ឧទាហរណ៍//អក្សរ, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 //គួរបែកជាកំប៉ុង ',' ប្រសិនបើគ្មានកំប៉ុងទេ អ្នកគួរតែត្រឡប់មកវិញចំនួនអក្សរតូចដែលមានលំដាប់មិនធម្មតានៅក្នុង //ផ្តល់នូវខ្សែនៃពាក្យ, ត្រឡប់មកវិញនូវ array នៃពាក្យបែងចែកលើ white space, ប្រសិនបើគ្មាន white spaces នៅក្នុងអត្ថបទដែលអ្នកចង់បាន។// >>> split_words(""Hello world!"")
// [""Hello"", ""world!""]
// >>> split_words(""Hello,world!"")
// [""Hello"", ""world!""]
// >>> split_words(""abcdef"")
// 3
function split_words(txt: string): string[] | number {
","function split_words(txt: string): string[] | number {
    if (txt.includes("" "")) {
        return txt.split("" "");
    }
    if (txt.includes("","")) {
        return txt.split("","");
    }
    const oddOrderCount = [...txt].reduce((count, char) => {
        const charCode = char.charCodeAt(0) - 'a'.charCodeAt(0);
        if (char === char.toLowerCase() && charCode % 2 === 1) {
            return count + 1;
        }
        return count;
    }, 0);

    return oddOrderCount;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = split_words;
  assert.deepEqual(candidate(""Hello world!""),[""Hello"", ""world!""]);
  assert.deepEqual(candidate(""Hello,world!""),[""Hello"", ""world!""]);
  assert.deepEqual(candidate(""Hello world,!""),[""Hello"", ""world,!""]);
  assert.deepEqual(candidate(""Hello,Hello,world !""),[""Hello,Hello,world"", ""!""]);
  assert.deepEqual(candidate(""abcdef""),3);
  assert.deepEqual(candidate(""aaabb""),2);
  assert.deepEqual(candidate(""aaaBb""),1);
  assert.deepEqual(candidate(""""),0);
}

test();"
HumanEval_126,khm_Khmr,ts,"//ឧទាហរណ៍//លេខ, ត្រឡប់មកវិញ false. មិនមានលេខអវិជ្ជមានទេ ហើយគ្រាន់តែមានចំនួនពេញ។//ប្រសិនបើ array មានច្រើនជាង 1 ដងនៃដដែល //ដោយបានផ្តល់នូវ array នៃលេខ, ត្រឡប់មកវិញ ទោះបីជាពួកគេត្រូវបានរៀបចំឬមិនរៀបចំក៏ដោយ// >>> is_sorted([5])
// true
// >>> is_sorted([1, 2, 3, 4, 5])
// true
// >>> is_sorted([1, 3, 2, 4, 5])
// false
// >>> is_sorted([1, 2, 3, 4, 5, 6])
// true
// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])
// true
// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])
// false
// >>> is_sorted([1, 2, 2, 3, 3, 4])
// true
// >>> is_sorted([1, 2, 2, 2, 3, 4])
// false
function is_sorted(lst: number[]): boolean {
","function is_sorted(lst: number[]): boolean {
    for (let i = 0; i < lst.length - 1; i++) {
        if (lst[i] > lst[i + 1]) {
            return false;
        }
        if (lst[i] === lst[i + 1]) {
            let count = 1;
            while (lst[i + count] === lst[i]) {
                count++;
                if (count > 2) return false;
            }
        }
    }
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_sorted;
  assert.deepEqual(candidate([5]),true);
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);
  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);
  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);
  assert.deepEqual(candidate([]),true);
  assert.deepEqual(candidate([1]),true);
  assert.deepEqual(candidate([3, 2, 1]),false);
  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);
  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);
  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);
  assert.deepEqual(candidate([1, 2, 3, 4]),true);
}

test();"
HumanEval_127,khm_Khmr,ts,"//[ការបញ្ចូល/ការបញ្ចេញ] សំណាក: //ប្រសិនបើអន្តរកាលទាំងពីរមិនកាត់គ្នា សូមត្រឡប់មកវិញ ""NO"" ។//បើមិនដូច្នេះទេ សូមឆ្លើយថា ""NO"" ។//ប្រសិនបើប្រវែងនៃការកាត់ជាចំនួនដើម, ត្រឡប់មកវិញ ""YES"", //ដែលមានប្រវែងគឺ 1 ដែលមិនមែនជាចំនួនដើម។//ឧទាហរណ៍, ការកាត់នៃអន្តរកាល (1, 3), (2, 4) គឺ (2, 3) //អន្តរកាលគឺជាចំនួនដើម។//កិច្ចការរបស់អ្នកគឺដើម្បីកំណត់ថាតើប្រវែងនៃការកាត់នៃទាំងពីរនេះ //សម្រាប់អន្តរកាលណាមួយដែលត្រូវបានផ្តល់ឱ្យវាត្រូវបានគេយល់ថា ការចាប់ផ្តើមរបស់វាគឺតិចជាងឬស្មើនឹងចុងក្រោយរបស់វា ។//មានទាំងដើម និងចុង។//ចន្លោះពេលដែលត្រូវបានផ្តល់ឱ្យបានបិទមានន័យថាចន្លោះពេល (ចាប់ផ្តើម, បញ្ចប់)//ដែលអន្តរកាលនីមួយៗ គឺជាគូនៃចំនួនគត់។ ឧទាហរណ៍ថា អន្តរកាល = (ចាប់ផ្តើម, បញ្ចប់) = (1, 2) ។//អ្នកត្រូវបានផ្តល់នូវអន្តរកាលពីរ។// >>> intersection([1, 2], [2, 3])
// ""NO""
// >>> intersection([-1, 1], [0, 4])
// ""NO""
// >>> intersection([-3, -1], [-5, 5])
// ""YES""
function intersection(interval1: [number, number], interval2: [number, number]): string {
","function isPrime(num: number): boolean {
    if (num <= 1) return false;
    if (num <= 3) return true; // 2 and 3 are prime numbers
    if (num % 2 === 0 || num % 3 === 0) return false;
    for (let i = 5; i * i <= num; i += 6) {
        if (num % i === 0 || num % (i + 2) === 0) return false;
    }
    return true;
}

function intersection(interval1: [number, number], interval2: [number, number]): string {
    const start = Math.max(interval1[0], interval2[0]);
    const end = Math.min(interval1[1], interval2[1]);

    if (start > end) {
        return ""NO"";
    }

    const length = end - start;

    return isPrime(length) ? ""YES"" : ""NO"";
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = intersection;
  assert.deepEqual(candidate([1, 2], [2, 3]),""NO"");
  assert.deepEqual(candidate([-1, 1], [0, 4]),""NO"");
  assert.deepEqual(candidate([-3, -1], [-5, 5]),""YES"");
  assert.deepEqual(candidate([-2, 2], [-4, 0]),""YES"");
  assert.deepEqual(candidate([-11, 2], [-1, -1]),""NO"");
  assert.deepEqual(candidate([1, 2], [3, 5]),""NO"");
  assert.deepEqual(candidate([1, 2], [1, 2]),""NO"");
  assert.deepEqual(candidate([-2, -2], [-3, -2]),""NO"");
}

test();"
HumanEval_128,khm_Khmr,ts,"//ឧទាហរណ៍: //កត់សម្គាល់: return undefined សម្រាប់ arr ដែលគ្មានអ្វី។//នៃចំនួននីមួយៗ ក្នុងអារេ ដែលតំណាងដោយ 1, -1 ឬ 0 ។//លទ្ធផលនៃចំនួនគត់ដែលបង្កឡើងដោយ ផលិតផលនៃសញ្ញាទាំងអស់//អ្នកបានទទួល array array នៃចំនួនពេញ ហើយអ្នកត្រូវត្រឡប់មកវិញ។// >>> prod_signs([1, 2, 2, -4])
// 9
// >>> prod_signs([0, 1])
// 0
// >>> prod_signs([])
// undefined
function prod_signs(arr: number[]): number | undefined {
","function prod_signs(arr: number[]): number | undefined {
    if (arr.length === 0) return undefined;

    let sumOfMagnitudes = 0;
    let productOfSigns = 1;

    for (const num of arr) {
        sumOfMagnitudes += Math.abs(num);
        productOfSigns *= Math.sign(num);
    }

    return sumOfMagnitudes * productOfSigns;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prod_signs;
  assert.deepEqual(candidate([1, 2, 2, -4]),-9);
  assert.deepEqual(candidate([0, 1]),0);
  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);
  assert.deepEqual(candidate([-1, 1, -1, 1]),4);
  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);
  assert.deepEqual(candidate([-1, 1, 1, 0]),0);
}

test();"
HumanEval_129,khm_Khmr,ts,"//ឧទាហរណ៍: //បញ្ជូន array ដែលមានបញ្ជានៃតម្លៃនៅលើកោសិកាដែលផ្លូវតិចបំផុតឆ្លងកាត់។//វាត្រូវបានធានាថាចម្លើយគឺមានតែមួយ។//lst_A[j] = lst_B[j] ។//ដូចនេះ lst_A[i] < lst_B[i] និងសម្រាប់ j (1 <= j < i) យើងមាន //ជាង lst_B, ពាក្យផ្សេងទៀត, មានអិនធើអ៊ែរអិនឌិច i (1 <= i <= k) ។//តាមរយៈ (សូមហៅវាថា lst_A និង lst_B), lst_A មានន័យតិចជាង //បន្ទាប់ ពី ធ្វើ ការ រៀប ចំ ប្រភេទ នៃ តម្លៃ នៅ លើ កោសិកា ដែល A និង B ទៅ //ផ្លូវ A (ដែលមានប្រវែង k) ត្រូវបានចាត់ទុកថាមានទំហំតូចជាងផ្លូវ B (ដែលមានប្រវែង k) ប្រសិនបើ //អ្នកមិនអាចទៅក្រៅក្របខ័ណ្ឌបានទេ។//ជាការចាំបាច់ខុសគ្នា) ។//សូមបញ្ជាក់ថា ផ្លូវដែលមានកម្ពស់ k មានន័យថាបានទៅមើលកោសិកា k (មិនមែន //cell. //ម្យ៉ាងទៀត អ្នកអាចទៅរកកោសិកា ដែលមានចំណុចប្រហាក់ប្រហែលនឹងអ្នក។//ពីកោសិកាណាមួយ ហើយក្នុងជំហាននីមួយៗ អ្នកអាចផ្លាស់ទៅកោសិកាជិតខាងណាមួយបាន។//អ្នកត្រូវរកផ្លូវតូចបំផុតនៃកំណាត់ k នៅក្នុងក្រដាស។ អ្នកអាចចាប់ផ្តើមបាន។//inclusive បង្ហាញបានត្រឹមតែម្តងប៉ុណ្ណោះនៅលើកោសិកានៃក្រដាស។//កោសិកានីមួយៗ នៃក្រដាសមានតំលៃ។ តំលៃទាំងមូលទាំងអស់នៅក្នុងតំបន់ [1, N * N] //ដោយបានផ្តល់នូវក្រដាសដែលមានជួរ N និងជួរ N (N >= 2) និងចំនួនគត់វិជ្ជមាន k, // >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
// [1, 2, 1]
// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
// [1]
function minPath(grid: number[][], k: number): number[] {
","function minPath(grid: number[][], k: number): number[] {
    const N = grid.length;
    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    
    type State = {path: number[], x: number, y: number, len: number};
    
    // Compare two paths lexicographically
    const isLess = (a: number[], b: number[]): boolean => {
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) return a[i] < b[i];
        }
        return false;
    };

    let bestPath: number[] = new Array(k).fill(Number.MAX_VALUE);
    
    // DFS function to explore paths of length k
    function dfs(x: number, y: number, path: number[], len: number): void {
        if (len === k) {
            if (isLess(path, bestPath)) {
                bestPath = [...path];
            }
            return;
        }
        
        for (const [dx, dy] of directions) {
            const nx = x + dx;
            const ny = y + dy;
            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {
                dfs(nx, ny, [...path, grid[nx][ny]], len + 1);
            }
        }
    }
    
    // Try starting from each cell
    for (let i = 0; i < N; i++) {
        for (let j = 0; j < N; j++) {
            dfs(i, j, [grid[i][j]], 1);
        }
    }
    
    return bestPath;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = minPath;
  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);
  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);
  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);
  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);
  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);
  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);
  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);
  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);
  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);
  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);
  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);
}

test();"
HumanEval_130,khm_Khmr,ts,"//ឧទាហរណ៍: //លេខ n + 1 ដំបូង នៃ លំដាប់ Tribonacci ។//អ្នកបានទទួលចំនួនគត់ដែលមិនមែនជាអវិជ្ជមាន n, អ្នកត្រូវធ្វើការវិលត្រឡប់ array នៃ //= 2 + 3 + 3 = 8 //tri(3) = tri(2) + tri(1) + tri(4) //tri(4) = 3 //tri(2) = 1 + (2 / 2) = 2 //ឧទាហរណ៍: //tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ប្រសិនបើ n ជាគណិតមិនប្រក្រតី។ //tri (n) = 1 + n / 2 ប្រសិនបើ n ជាគូ។//tri(1) = 3 //កំណាត់ Tribonacci ត្រូវបានកំណត់ដោយការវិវត្ត: //ប៉ុន្តែអ្វីដែលមនុស្សមិនដឹងនោះគឺជួរទ្រីបូណាជី (Tribonacci) ។//មនុស្សគ្រប់គ្នាស្គាល់នូវទិស Fibonacci វាត្រូវបានសិក្សាយ៉ាងជ្រៅដោយអ្នកគណិតវិទ្យានៅក្នុង // >>> tri(3)
// [1, 3, 2, 8]
function tri(n: number): number[] {
","function tri(n: number): number[] {
    const tribonacci: number[] = [1, 3]; // Initialize with first two definite values

    function calculateTribonacci(index: number): number {
        if (index < tribonacci.length) {
            return tribonacci[index];
        }

        let result: number;
        if (index % 2 === 0) {
            result = 1 + index / 2;
        } else {
            result = calculateTribonacci(index - 1) + calculateTribonacci(index - 2) + calculateTribonacci(index + 1);
        }

        tribonacci[index] = result; // Memoize the result
        return result;
    }

    for (let i = 0; i <= n; i++) {
        calculateTribonacci(i);
    }

    return tribonacci.slice(0, n + 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = tri;
  assert.deepEqual(candidate(3),[1, 3, 2, 8]);
  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);
  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);
  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);
  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);
  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);
  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);
  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);
  assert.deepEqual(candidate(0),[1]);
  assert.deepEqual(candidate(1),[1, 3]);
}

test();"
HumanEval_131,khm_Khmr,ts,"//ឧទាហរណ៍: //ត្រឡប់ 0 ប្រសិនបើតួទាំងអស់គឺគូ។ //ដោយបានផ្តល់ចំនួនគត់វិជ្ជមាន n, សូមត្រឡប់មកវិញនូវ ផលិតផលនៃតួគោក។ // >>> digits(1)
// 1
// >>> digits(4)
// 0
// >>> digits(235)
// 15
function digits(n: number): number {
","function digits(n: number): number {
    let product = 1;
    let hasOdd = false;
    
    while (n > 0) {
        let digit = n % 10;
        if (digit % 2 !== 0) {
            product *= digit;
            hasOdd = true;
        }
        n = Math.floor(n / 10);
    }

    return hasOdd ? product : 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = digits;
  assert.deepEqual(candidate(5),5);
  assert.deepEqual(candidate(54),5);
  assert.deepEqual(candidate(120),1);
  assert.deepEqual(candidate(5014),5);
  assert.deepEqual(candidate(98765),315);
  assert.deepEqual(candidate(5576543),2625);
  assert.deepEqual(candidate(2468),0);
}

test();"
HumanEval_132,khm_Khmr,ts,"//ដែលមានយ៉ាងហោចណាស់មួយ bracket នៅក្នុង subsequence ត្រូវបាន nested ។//តួអង្គនេះត្រូវតែត្រឡប់ទៅ true ប្រសិនបើ និងតែបើមានអក្សរដែលត្រូវនៃក្របខ័ណ្ឌ //បង្កើតមុខងារដែលយក string ជាចំណូលដែលមានតែក្រដាសកាប៉េតប៉ុណ្ណោះ។// >>> is_nested(""[[]]"")
// true
// >>> is_nested(""[]]]]]]][[[[[]"")
// false
// >>> is_nested(""[][]"")
// false
// >>> is_nested(""[]"")
// false
// >>> is_nested(""[[][]]"")
// true
// >>> is_nested(""[[]][["")
// true
function is_nested(string: string): boolean {
","function is_nested(string: string): boolean {
    let depth = 0;
    let hasNesting = false;

    for (let char of string) {
        if (char === '[') {
            depth++;
            if (depth > 1) {
                hasNesting = true;
            }
        } else if (char === ']') {
            if (depth > 0) {
                depth--;
            } else {
                // More closing brackets than opening
                return false;
            }
        }
    }

    // Return true if there was at least one nested bracket and all brackets are matched
    return hasNesting && depth === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_nested;
  assert.deepEqual(candidate(""[[]]""),true);
  assert.deepEqual(candidate(""[]]]]]]][[[[[]""),false);
  assert.deepEqual(candidate(""[][]""),false);
  assert.deepEqual(candidate(""[]""),false);
  assert.deepEqual(candidate(""[[[[]]]]""),true);
  assert.deepEqual(candidate(""[]]]]]]]]]]""),false);
  assert.deepEqual(candidate(""[][][[]]""),true);
  assert.deepEqual(candidate(""[[]""),false);
  assert.deepEqual(candidate(""[]]""),false);
  assert.deepEqual(candidate(""[[]][[""),true);
  assert.deepEqual(candidate(""[[][]]""),true);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""[[[[[[[[""),false);
  assert.deepEqual(candidate(""]]]]]]]]""),false);
}

test();"
HumanEval_133,khm_Khmr,ts,"//ឧទាហរណ៍: //ចុចលើ element ទាំងអស់នៅក្នុង array ទៅលើ int ខ្ពស់បំផុតមុន។//អ្នកត្រូវត្រឡប់មកវិញនូវចំនួននៃលេខកូដទីពីរនៅក្នុង array ដែលបានផ្តល់ជូន, //អ្នកត្រូវបានផ្តល់នូវអារេនៃចំនួន។// >>> lst([1.0, 2.0, 3.0])
// 14
// >>> lst([1.0, 4.0, 9.0])
// 98
// >>> lst([1.0, 3.0, 5.0, 7.0])
// 84
// >>> lst([1.4, 4.2, 0.0])
// 29
// >>> lst([-2.4, 1.0, 1.0])
// 6
function sum_squares(lst: number[]): number {
","function sum_squares(lst: number[]): number {
    return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);
}

// Example usage:
// console.log(sum_squares([1.0, 2.0, 3.0])); // Output: 14
// console.log(sum_squares([1.0, 4.0, 9.0])); // Output: 98
// console.log(sum_squares([1.0, 3.0, 5.0, 7.0])); // Output: 84
// console.log(sum_squares([1.4, 4.2, 0.0])); // Output: 29
// console.log(sum_squares([-2.4, 1.0, 1.0])); // Output: 6","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_squares;
  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);
  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);
  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);
  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);
  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);
  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);
  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);
  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);
  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);
  assert.deepEqual(candidate([0.0]),0);
  assert.deepEqual(candidate([-1.0]),1);
  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);
}

test();"
HumanEval_134,khm_Khmr,ts,"//ឧទាហរណ៍: //កត់សម្គាល់: ""ពាក្យ"" គឺជាក្រុមតួអក្សរដែលបែងចែកដោយអគារ។//ជាផ្នែកមួយនៃពាក្យមួយ ហើយខុសពីការពិត។//នៃសរសៃដែលបានផ្តល់ជាអក្សរអក្សរលេខ ហើយមិនមែនជា //បង្កើតតួអង្គដែលវិលត្រឡប់ true ប្រសិនបើតួចុងក្រោយ // >>> check_if_last_char_is_a_letter(""apple pie"")
// false
// >>> check_if_last_char_is_a_letter(""apple pi e"")
// true
// >>> check_if_last_char_is_a_letter(""apple pi e "")
// false
// >>> check_if_last_char_is_a_letter("""")
// false
function check_if_last_char_is_a_letter(txt: string): boolean {
","function check_if_last_char_is_a_letter(txt: string): boolean {
    if (txt.trim() === """") return false; // Handle empty or whitespace strings

    // Trim the string to remove any trailing spaces
    txt = txt.trim();

    // Check if the last character is an alphabetical letter and ensure there's a space before it
    const lastChar = txt.charAt(txt.length - 1);
    const isAlpha = /[a-zA-Z]/.test(lastChar);

    return isAlpha && txt.lastIndexOf(' ') === txt.length - 2;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = check_if_last_char_is_a_letter;
  assert.deepEqual(candidate(""apple""),false);
  assert.deepEqual(candidate(""apple pi e""),true);
  assert.deepEqual(candidate(""eeeee""),false);
  assert.deepEqual(candidate(""A""),true);
  assert.deepEqual(candidate(""Pumpkin pie ""),false);
  assert.deepEqual(candidate(""Pumpkin pie 1""),false);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""eeeee e ""),false);
  assert.deepEqual(candidate(""apple pie""),false);
  assert.deepEqual(candidate(""apple pi e ""),false);
}

test();"
HumanEval_135,khm_Khmr,ts,"//ឧទាហរណ៍: //តម្លៃដងខ្លួន//គ្មានតំណាងដូចនេះទេនោះ return -1. array ដែលបានផ្តល់នឹងមិនមាន //មិនធំជាង ឬស្មើនឹងអក្សរដែលនៅមុនវាទេ ប្រសិនបើ//បង្កើតតួអង្គដែលត្រឡប់មកវិញនូវអិនឌិចធំជាងគេនៃអំបិលដែល // >>> can_arrange([1, 2, 4, 3, 5])
// 3
// >>> can_arrange([1, 2, 3])
// -1
function can_arrange(arr: number[]): number {
","function can_arrange(arr: number[]): number {
    for (let i = arr.length - 1; i > 0; i--) {
        if (arr[i] < arr[i - 1]) {
            return i;
        }
    }
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = can_arrange;
  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);
  assert.deepEqual(candidate([1, 2, 4, 5]),-1);
  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);
  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);
  assert.deepEqual(candidate([]),-1);
}

test();"
HumanEval_136,khm_Khmr,ts,"//ឧទាហរណ៍: //ប្រសិនបើគ្មានចំនួនគត់អវិជ្ជមាន ឬគត់វិជ្ជមានទេ សូមបញ្ជូនមកវិញជា undefined ។//នៃចំនួនសរុបវិជ្ជមាននៅក្នុង array ។//ធំជាងគេនៃចំនួនពេញអវិជ្ជមាន, និង ""b"" គឺជាតូចជាងគេ //បង្កើតមុខងារដែលវិលត្រឡប់ array (a, b) ដែល 'a' គឺជា // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])
// [undefined, 1]
// >>> largest_smallest_integers([])
// [undefined, undefined]
// >>> largest_smallest_integers([0])
// [undefined, undefined]
function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {
","function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {
    let largestNegative: number | undefined = undefined;
    let smallestPositive: number | undefined = undefined;

    for (let num of lst) {
        if (num < 0) {
            if (largestNegative === undefined || num > largestNegative) {
                largestNegative = num;
            }
        } else if (num > 0) {
            if (smallestPositive === undefined || num < smallestPositive) {
                smallestPositive = num;
            }
        }
    }

    return [largestNegative, smallestPositive];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_smallest_integers;
  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);
  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);
  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);
  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);
  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);
  assert.deepEqual(candidate([]),[undefined, undefined]);
  assert.deepEqual(candidate([0]),[undefined, undefined]);
  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);
  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);
  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);
  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);
}

test();"
HumanEval_138,khm_Khmr,ts,"//ឧទាហរណ៍//វាយតម្លៃថាតើចំនួន n ដែលបានផ្តល់អាចត្រូវបានសរសេរជាចំនួននៃចំនួនគូទវិជ្ជមានចំនួន 4 យ៉ាងត្រឹមត្រូវឬអត់។// >>> is_equal_to_sum_even(4)
// false
// >>> is_equal_to_sum_even(6)
// false
// >>> is_equal_to_sum_even(8)
// true
function is_equal_to_sum_even(n: number): boolean {
","function is_equal_to_sum_even(n: number): boolean {
    // The sum of 4 positive even numbers is always even and 8 is the smallest such sum (2 + 2 + 2 + 2).
    // Hence, if n is greater than or equal to 8 and even, n can be expressed as the sum of 4 positive even numbers.
    return (n >= 8) && (n % 2 === 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_equal_to_sum_even;
  assert.deepEqual(candidate(4),false);
  assert.deepEqual(candidate(6),false);
  assert.deepEqual(candidate(8),true);
  assert.deepEqual(candidate(10),true);
  assert.deepEqual(candidate(11),false);
  assert.deepEqual(candidate(12),true);
  assert.deepEqual(candidate(13),false);
  assert.deepEqual(candidate(16),true);
}

test();"
HumanEval_139,khm_Khmr,ts,"//ឧទាហរណ៍: //ដែល n > 0 //brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! //កត្តាប្រេស៊ីលត្រូវបានកំណត់ថា: // >>> special_factorial(4)
// 288
// The function will receive an integer as input and should return the special
// factorial of this integer.
function special_factorial(n: number): number {
","function factorial(n: number): number {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

function special_factorial(n: number): number {
    if (n <= 0) throw new Error(""Input must be a positive integer"");
    
    let result = 1;
    for (let i = n; i >= 1; i--) {
        result *= factorial(i);
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = special_factorial;
  assert.deepEqual(candidate(4),288);
  assert.deepEqual(candidate(5),34560);
  assert.deepEqual(candidate(7),125411328000);
  assert.deepEqual(candidate(1),1);
}

test();"
HumanEval_140,khm_Khmr,ts,"//បន្ទាប់មកប្តូរអក្សរចម្លងទាំងអស់ដោយ - //ហើយប្រសិនបើ string មានច្រើនជាង 2 spaces ជាប់គ្នា//ដោយបានផ្តល់នូវសន្លឹកអត្ថបទមួយ, សូមប្តូរកន្លែងទាំងអស់នៅក្នុងវាដោយស្លាកសញ្ញាក្រោម, // >>> fix_spaces("" Example"")
// ""Example""
// >>> fix_spaces("" Example 1"")
// ""Example_1""
// >>> fix_spaces("" Example 2"")
// ""_Example_2""
// >>> fix_spaces("" Example 3"")
// ""_Example-3""
function fix_spaces(text: string): string {
","function fix_spaces(text: string): string {
    // Trim leading and trailing spaces
    let trimmedText = text.trim();

    // Use a regular expression to replace all sequences of two or more spaces with ""-""
    let replacedText = trimmedText.replace(/ {2,}/g, '-');

    // Replace remaining single spaces with underscores
    replacedText = replacedText.replace(/ /g, '_');

    return replacedText;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fix_spaces;
  assert.deepEqual(candidate(""Example""),""Example"");
  assert.deepEqual(candidate(""Mudasir Hanif ""),""Mudasir_Hanif_"");
  assert.deepEqual(candidate(""Yellow Yellow  Dirty  Fellow""),""Yellow_Yellow__Dirty__Fellow"");
  assert.deepEqual(candidate(""Exa   mple""),""Exa-mple"");
  assert.deepEqual(candidate(""   Exa 1 2 2 mple""),""-Exa_1_2_2_mple"");
}

test();"
HumanEval_141,khm_Khmr,ts,"//ឧទាហរណ៍: //- ខ្សែអក្សរបន្ទាប់ពីពិន្ទុគួរតែជាមួយក្នុងចំណោមនេះ: ['txt', 'exe', 'dll'] //អក្សរ ឡាទីន (a-z និង A-Z) ។//- ខ្សែអក្សរបន្ទាប់ពីពិន្ទុមិនគួរតែមានខ្វះទេ ហើយវាចាប់ផ្តើមដោយអក្សរពី //- ឈ្មោះឯកសារមានពណ៌សំនួរតែមួយ '.'//- មិនគួរមានច្រើនជាងបីតួ (""0"" - ""9"") នៅក្នុងឈ្មោះឯកសារនោះទេ។//ត្រូវបានបំពេញ: //ឈ្មោះឯកសារត្រូវបានចាត់ទុកថាមានប្រសិទ្ធភាពប្រសិនបើ និងតែប្រសិនបើលក្ខខណ្ឌទាំងមូលដូចខាងក្រោមនេះ //""Yes"" បើសិនជាឈ្មោះរបស់ file មានភាពត្រឹមត្រូវ ហើយត្រឡប់មកវិញ ""No"" បើមិនដូច្នេះទេ ។//បង្កើតមុខងារមួយដែលយកខ្សែតំណាងឱ្យឈ្មោះឯកសារមួយ ហើយត្រឡប់មកវិញ // >>> file_name_check(""example.txt"")
// ""Yes""
// >>> file_name_check(""1example.dll"")
// ""No""
function file_name_check(file_name: string): string {
","function file_name_check(file_name: string): string {
    // Split the file name into name and extension based on the dot
    const parts = file_name.split('.');
    
    // Check if there's exactly one dot
    if (parts.length !== 2) {
        return 'No';
    }
    
    const [name, extension] = parts;
    
    // Check if the substring before the dot is not empty and starts with a latin letter
    if (name.length === 0 || !/^[a-zA-Z]/.test(name)) {
        return 'No';
    }
    
    // Check if the number of digits in the name is not more than three
    const digitCount = (name.match(/\d/g) || []).length;
    if (digitCount > 3) {
        return 'No';
    }
    
    // Check if the extension is one of the valid options
    const validExtensions = ['txt', 'exe', 'dll'];
    if (!validExtensions.includes(extension)) {
        return 'No';
    }
    
    // All conditions are met, the file name is valid
    return 'Yes';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = file_name_check;
  assert.deepEqual(candidate(""example.txt""),""Yes"");
  assert.deepEqual(candidate(""1example.dll""),""No"");
  assert.deepEqual(candidate(""s1sdf3.asd""),""No"");
  assert.deepEqual(candidate(""K.dll""),""Yes"");
  assert.deepEqual(candidate(""MY16FILE3.exe""),""Yes"");
  assert.deepEqual(candidate(""His12FILE94.exe""),""No"");
  assert.deepEqual(candidate(""_Y.txt""),""No"");
  assert.deepEqual(candidate(""?aREYA.exe""),""No"");
  assert.deepEqual(candidate(""/this_is_valid.dll""),""No"");
  assert.deepEqual(candidate(""this_is_valid.wow""),""No"");
  assert.deepEqual(candidate(""this_is_valid.txt""),""Yes"");
  assert.deepEqual(candidate(""this_is_valid.txtexe""),""No"");
  assert.deepEqual(candidate(""#this2_i4s_5valid.ten""),""No"");
  assert.deepEqual(candidate(""@this1_is6_valid.exe""),""No"");
  assert.deepEqual(candidate(""this_is_12valid.6exe4.txt""),""No"");
  assert.deepEqual(candidate(""all.exe.txt""),""No"");
  assert.deepEqual(candidate(""I563_No.exe""),""Yes"");
  assert.deepEqual(candidate(""Is3youfault.txt""),""Yes"");
  assert.deepEqual(candidate(""no_one#knows.dll""),""Yes"");
  assert.deepEqual(candidate(""1I563_Yes3.exe""),""No"");
  assert.deepEqual(candidate(""I563_Yes3.txtt""),""No"");
  assert.deepEqual(candidate(""final..txt""),""No"");
  assert.deepEqual(candidate(""final132""),""No"");
  assert.deepEqual(candidate(""_f4indsartal132.""),""No"");
  assert.deepEqual(candidate("".txt""),""No"");
  assert.deepEqual(candidate(""s.""),""No"");
}

test();"
HumanEval_142,khm_Khmr,ts,"//ឧទាហរណ៍: //កែប្រែចំណាត់ថ្នាក់ក្នុងអារេដែលអារេមិនជាចំនែកនៃ 3 ឬ 4 នោះមុខងារនឹងត្រឡប់មកវិញនូវចំនួននៃចំណាត់ថ្នាក់ទាំងអស់។//ជាចំនែកនៃ 3 ហើយនឹងធ្វើជាគូបនៃចំនួនគត់ ប្រសិនបើអិនឌិចរបស់វាជាចំនែកនៃ 4 និងមិនមែនជាចំនែកនៃ 3 នោះមុខងារនេះនឹងមិន //តួនាទីនេះនឹងយក array នៃចំនួនពេញ។ សម្រាប់ចំណាត់ថ្នាក់ទាំងអស់នៅក្នុង array នោះ, តួនាទីនឹងកែងចំណាត់ថ្នាក់ចំនួនពេញ ប្រសិនបើអិនឌីសរបស់វាគឺ a //"" // >>> lst
// [1, 2, 3]
// >>> lst
// []
// >>> lst
// [-1, -5, 2, -1, -5]
function sum_squares(lst: number[]): number {
","function sum_squares(lst: number[]): number {
    return lst.reduce((sum, value, index) => {
        if (index % 3 === 0) {
            return sum + (value * value);
        } else if (index % 4 === 0) {
            return sum + (value * value * value);
        } else {
            return sum + value;
        }
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_squares;
  assert.deepEqual(candidate([1, 2, 3]),6);
  assert.deepEqual(candidate([1, 4, 9]),14);
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);
  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);
  assert.deepEqual(candidate([0]),0);
  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);
  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);
  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);
  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);
  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);
}

test();"
HumanEval_143,khm_Khmr,ts,"//ឧទាហរណ៍ទី១://របៀបវារៈនៃពាក្យនៅក្នុងស្លាកថ្មីគួរតែដូចគ្នាទៅនឹងដើម។//ដែលមានប្រវែងជាចំនួនដើម, //ហើយអ្នកត្រូវបញ្ជូនត្រីដែលមានពាក្យពីចំនុចដើមមកវិញ //សំនួរមានពាក្យមួយចំនួនដែលបែងចែកដោយអចលនទ្រព្យ។//អ្នកត្រូវបានផ្តល់នូវខ្សែតំណាងឱ្យសំនួរមួយ, // >>> words_in_sentence(""This is a test"")
// ""is""
// Example 2:
// >>> words_in_sentence(""lets go for swimming"")
// ""go for""
// Constraints:
// * 1 <= len(sentence) <= 100
// * sentence contains only letters
function words_in_sentence(sentence: string): string {
","function isPrime(num: number): boolean {
    if (num < 2) return false;
    for (let i = 2; i * i <= num; i++) {
        if (num % i === 0) return false;
    }
    return true;
}

function words_in_sentence(sentence: string): string {
    return sentence
        .split(' ')
        .filter(word => isPrime(word.length))
        .join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = words_in_sentence;
  assert.deepEqual(candidate(""This is a test""),""is"");
  assert.deepEqual(candidate(""lets go for swimming""),""go for"");
  assert.deepEqual(candidate(""there is no place available here""),""there is no place"");
  assert.deepEqual(candidate(""Hi I am Hussein""),""Hi am Hussein"");
  assert.deepEqual(candidate(""go for it""),""go for it"");
  assert.deepEqual(candidate(""here""),"""");
  assert.deepEqual(candidate(""here is""),""is"");
}

test();"
HumanEval_144,khm_Khmr,ts,"//អ្នកអាចចាត់ទុកថា x, និង n គឺជាភាគហ៊ុនដែលត្រឹមត្រូវ ហើយមិនមានសូន្យជាសញ្ញាបត្រ។//<numerator>/<denominator> ដែលទាំង numerator និង denominator គឺជាចំនួនពេញជាវិជ្ជមាន។//ទាំង x និង n, គឺជាការតំណាងស្លាកនៃភាគហ៊ុន, និងមានទម្រង់ដូចខាងក្រោមនេះ, //x * n. តួអង្គនេះនឹងវិលត្រឡប់ true ប្រសិនបើ x * n វាយតម្លៃទៅជាចំនួនទាំងមូល និង false //កិច្ចការរបស់អ្នកគឺដើម្បីអនុវត្តមុខងារដែលនឹងបង្កើនភាពងាយស្រួលនៃពាក្យ // >>> simplify(""1/5"", ""5/1"")
// true
// >>> simplify(""1/6"", ""2/1"")
// false
// >>> simplify(""7/10"", ""10/2"")
// false
function simplify(x: string, n: string): boolean {
","function simplify(x: string, n: string): boolean {
    const parseFraction = (fraction: string): [number, number] => {
        const [numerator, denominator] = fraction.split('/').map(Number);
        return [numerator, denominator];
    };

    const [xNumerator, xDenominator] = parseFraction(x);
    const [nNumerator, nDenominator] = parseFraction(n);

    // Multiply the fractions: (a/b) * (c/d) = (a*c) / (b*d)
    const resultNumerator = xNumerator * nNumerator;
    const resultDenominator = xDenominator * nDenominator;

    // A product of fractions is a whole number if its numerator divided by denominator is an integer.
    return resultNumerator % resultDenominator === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = simplify;
  assert.deepEqual(candidate(""1/5"", ""5/1""),true);
  assert.deepEqual(candidate(""1/6"", ""2/1""),false);
  assert.deepEqual(candidate(""5/1"", ""3/1""),true);
  assert.deepEqual(candidate(""7/10"", ""10/2""),false);
  assert.deepEqual(candidate(""2/10"", ""50/10""),true);
  assert.deepEqual(candidate(""7/2"", ""4/2""),true);
  assert.deepEqual(candidate(""11/6"", ""6/1""),true);
  assert.deepEqual(candidate(""2/3"", ""5/2""),false);
  assert.deepEqual(candidate(""5/2"", ""3/5""),false);
  assert.deepEqual(candidate(""2/4"", ""8/4""),true);
  assert.deepEqual(candidate(""2/4"", ""4/2""),true);
  assert.deepEqual(candidate(""1/5"", ""5/1""),true);
  assert.deepEqual(candidate(""1/5"", ""1/5""),false);
}

test();"
HumanEval_145,khm_Khmr,ts,"//ឧទាហរណ៍: //បញ្ជាវានៅលើអិនឌីសរបស់វានៅក្នុងអារេដើម។//កត់សម្គាល់: ប្រសិនបើមានអត្ថបទជាច្រើនដែលមានចំនួនលេខដូចគ្នា//តាមលំដាប់កើនឡើងតាមចំនួនតួអក្សររបស់វា។//សរសេរ function ដែលរៀបចំ array នៃ integer // >>> order_by_points([1, 11, -1, -11, -12])
// [-1, -11, 1, -12, 11]
// >>> order_by_points([])
// []
function order_by_points(nums: number[]): number[] {
","function order_by_points(nums: number[]): number[] {
    const digitSum = (num: number): number => {
        let sum = 0;
        let value = Math.abs(num);
        while (value > 0) {
            sum += value % 10;
            value = Math.floor(value / 10);
        }
        return sum;
    };

    return nums
        .map((num, index) => ({ num, index, sumOfDigits: digitSum(num) }))
        .sort((a, b) => {
            if (a.sumOfDigits === b.sumOfDigits) {
                return a.index - b.index;
            }
            return a.sumOfDigits - b.sumOfDigits;
        })
        .map(item => item.num);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = order_by_points;
  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);
  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);
  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);
}

test();"
HumanEval_146,khm_Khmr,ts,"//ឧទាហរណ៍: //តួទីមួយ និងចុងក្រោយនៃចំនួនគឺមិនសាមញ្ញ (1, 3, 5, 7, 9) ។//ចំនួនអក្សរនៅក្នុង array ដែលមានច្រើនជាង 10 និងទាំងពីរ //សរសេរ function មួយ ដែល យក array នៃ លេខ ជា Input និង return // >>> specialFilter([15, -73, 14, -15])
// 1
// >>> specialFilter([33, -2, -3, 45, 21, 109])
// 2
function specialFilter(nums: number[]): number {
","function specialFilter(nums: number[]): number {
    const isOdd = (digit: number): boolean => digit % 2 !== 0;

    return nums.reduce((count, num) => {
        const absNumStr = Math.abs(num).toString();
        const firstDigit = parseInt(absNumStr[0]);
        const lastDigit = parseInt(absNumStr[absNumStr.length - 1]);

        if (num > 10 && isOdd(firstDigit) && isOdd(lastDigit)) {
            return count + 1;
        }

        return count;
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = specialFilter;
  assert.deepEqual(candidate([5, -2, 1, -5]),0);
  assert.deepEqual(candidate([15, -73, 14, -15]),1);
  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);
  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);
  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);
  assert.deepEqual(candidate([1]),0);
  assert.deepEqual(candidate([]),0);
}

test();"
HumanEval_147,khm_Khmr,ts,"//ឧទាហរណ៍: //ហើយ a[i] + a[j] + a[k] គឺជាចម្លើយនៃ 3 ។//ត្រឡប់មកវិញចំនួននៃ triples (a[i], a[j], a[k]) នៃ a ដែល i < j < k, //សម្រាប់ i (1 ≤ i ≤ n) នីមួយៗ តម្លៃនៃ a[i] = i * i - i + 1 ។//អ្នកបានទទួលចំនួនគត់វិជ្ជមាន n អ្នកត្រូវបង្កើត array ចំនួនគត់ a នៃកំណាត់ n ។// >>> get_max_triples(5)
// 1
// Explanation: 
// a = [1, 3, 7, 13, 21]
// The only valid triple is (1, 7, 13).
function get_max_triples(n: number): number {
","function get_max_triples(n: number): number {
    const a: number[] = [];

    for (let i = 1; i <= n; i++) {
        a[i - 1] = i * i - i + 1;
    }

    let count = 0;

    for (let i = 0; i < n - 2; i++) {
        for (let j = i + 1; j < n - 1; j++) {
            for (let k = j + 1; k < n; k++) {
                if ((a[i] + a[j] + a[k]) % 3 === 0) {
                    count++;
                }
            }
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_max_triples;
  assert.deepEqual(candidate(5),1);
  assert.deepEqual(candidate(6),4);
  assert.deepEqual(candidate(10),36);
  assert.deepEqual(candidate(100),53361);
}

test();"
HumanEval_149,khm_Khmr,ts,"//ឧទាហរណ៍: //អ្នកអាចគិតថាពាក្យទាំងអស់នឹងមានទំហំដូចគ្នា។//តួអង្គនេះត្រូវតែបញ្ជូន array នៃ string ក្នុងលំដាប់លំដាប់។//ប្រសិនបើពាក្យពីរមានកម្ពស់ដូចគ្នា សូមរៀបចំ array តាមអក្សរអក្សរ។//គួរតែបញ្ជូន array ដែលត្រូវបានរៀបចំតាមច្បាប់នោះ។//របៀបវារៈនៃ array គួរតែឡើងទៅតាមទំហំនៃពាក្យនីមួយៗ ហើយអ្នក//ហើយវាអាចមានផ្ទុកសារដងៗ//Array គឺជា array នៃ string ហើយមិនដែលជា array នៃលេខទេ,//និងបញ្ជូន array ដែលទទួលបានមកវិញ ជាមួយនឹងលំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់លំដាប់//លុបចោលខ្សែដែលមានទំហំមិនស្មើពីវា, //សរសេរ function មួយដែលទទួលយក array នៃ string ជា parameter, // >>> list_sort([""aa"", ""a"", ""aaa""])
// [""aa""]
// >>> list_sort([""ab"", ""a"", ""aaa"", ""cd""])
// [""ab"", ""cd""]
function sorted_list_sum(lst: string[]): string[] {
","function sorted_list_sum(lst: string[]): string[] {
    // Filter out strings with odd lengths
    const filtered = lst.filter(str => str.length % 2 === 0);
    // Sort the array by length, then alphabetically
    const sorted = filtered.sort((a, b) => {
        if (a.length === b.length) {
            return a.localeCompare(b);
        }
        return a.length - b.length;
    });
    return sorted;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sorted_list_sum;
  assert.deepEqual(candidate([""aa"", ""a"", ""aaa""]),[""aa""]);
  assert.deepEqual(candidate([""school"", ""AI"", ""asdf"", ""b""]),[""AI"", ""asdf"", ""school""]);
  assert.deepEqual(candidate([""d"", ""b"", ""c"", ""a""]),[]);
  assert.deepEqual(candidate([""d"", ""dcba"", ""abcd"", ""a""]),[""abcd"", ""dcba""]);
  assert.deepEqual(candidate([""AI"", ""ai"", ""au""]),[""AI"", ""ai"", ""au""]);
  assert.deepEqual(candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]),[]);
  assert.deepEqual(candidate([""aaaa"", ""bbbb"", ""dd"", ""cc""]),[""cc"", ""dd"", ""aaaa"", ""bbbb""]);
}

test();"
HumanEval_150,khm_Khmr,ts,"//ឧទាហរណ៍: //ជាចំនួនសាមញ្ញ ហើយត្រូវបញ្ជូនតម្លៃនៃ y បើមិនដូច្នេះទេ ។//កម្មវិធីសាមញ្ញមួយដែលត្រូវត្រឡប់មកវិញនូវតម្លៃនៃ x ប្រសិនបើ n គឺ // >>> x_or_y(7, 34, 12)
// 34
// >>> x_or_y(15, 8, 5)
// 5
function x_or_y(n: number, x: number, y: number): number {
","function x_or_y(n: number, x: number, y: number): number {
    function isPrime(num: number): boolean {
        if (num <= 1) return false;
        if (num <= 3) return true;
        
        if (num % 2 === 0 || num % 3 === 0) return false;
        
        for (let i = 5; i * i <= num; i += 6) {
            if (num % i === 0 || num % (i + 2) === 0) return false;
        }
        
        return true;
    }

    return isPrime(n) ? x : y;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = x_or_y;
  assert.deepEqual(candidate(7, 34, 12),34);
  assert.deepEqual(candidate(15, 8, 5),5);
  assert.deepEqual(candidate(3, 33, 5212),33);
  assert.deepEqual(candidate(1259, 3, 52),3);
  assert.deepEqual(candidate(7919, -1, 12),-1);
  assert.deepEqual(candidate(3609, 1245, 583),583);
  assert.deepEqual(candidate(91, 56, 129),129);
  assert.deepEqual(candidate(6, 34, 1234),1234);
  assert.deepEqual(candidate(1, 2, 0),0);
  assert.deepEqual(candidate(2, 2, 0),2);
}

test();"
HumanEval_151,khm_Khmr,ts,"//ក្នុង array ដែលជា odd. មើលរំលងចំនួនដែលអវិជ្ជមានឬមិនជា integer ។//ដោយបានផ្តល់នូវ array នៃចំនួន, សូមត្រឡប់មកវិញនូវចំនួននៃលេខនៃលេខ។// >>> double_the_difference([1, 3, 2, 0])
// 10
// >>> double_the_difference([-1, -2, 0])
// 0
// >>> double_the_difference([9, -2])
// 81
// >>> double_the_difference([0])
// 0
// If the input array is empty, return 0.
function double_the_difference(lst: number[]): number {
","function double_the_difference(lst: number[]): number {
    return lst
        .filter(num => Number.isInteger(num) && num > 0 && num % 2 !== 0)
        .reduce((sum, num) => sum + num * num, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = double_the_difference;
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([5.0, 4.0]),25);
  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);
  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);
  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);
  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);
  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);
}

test();"
HumanEval_152,khm_Khmr,ts,"//ឧទាហរណ៍: //តម្លៃគឺ 0 ហើយប្រសិនបើមិនពិតទេតម្លៃគឺការខុសគ្នារវាងការប៉ាន់ស្មាននិងលទ្ធផល។//បញ្ជូន array នៃកំណាត់ដដែលដែលដែលបង្ហាញថាតើការប៉ាន់ស្មានមួយណាមានចម្ងាយប៉ុន្មាន។ ប្រសិនបើពួកគេបានប៉ាន់ស្មានត្រឹមត្រូវ, //អ្នកត្រូវបានផ្តល់នូវតារាងចំនួនពីរនៃលទ្ធផល និងការប៉ាន់ស្មាននៃកម្ពស់ស្មើគ្នា ដែលក្នុងនោះតារាងបញ្ចូលគ្នានោះបង្ហាញថាមានលក្ខណៈស្របគ្នា។//កិច្ចការរបស់អ្នកគឺដើម្បីកំណត់ថាតើមនុស្សម្នាក់បានសន្និដ្ឋានលទ្ធផលនៃការប្រកួតជាច្រើនយ៉ាងត្រឹមត្រូវឬទេ។//គួរតែកត់សម្គាល់ និងប្រៀបធៀប។//ហេតុការណ៍នេះត្រូវបានគេដឹងជាទីបំផុត។ អារម្មណ៍ និងគំនិតដែលអ្នកមាននៅពេលនោះគឺ//ខ្ញុំគិតថាយើងទាំងអស់គ្នាចាំបាននូវអារម្មណ៍នោះ នៅពេលដែលលទ្ធផលនៃការរង់ចាំយូរៗ// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
// [0, 0, 0, 0, 3, 3]
// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
// [4, 4, 1, 0, 0, 6]
function compare(game: number[], guess: number[]): number[] {
","function compare(game: number[], guess: number[]): number[] {
    return game.map((score, index) => Math.abs(score - guess[index]));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = compare;
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);
  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);
  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);
  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);
}

test();"
HumanEval_153,khm_Khmr,ts,"//ឧទាហរណ៍: //(កម្លាំងរបស់វាគឺ -1) ។//return ""Slices.SErviNGSliCes"" ព្រោះថា ""SErviNGSliCes"" គឺជាការពង្រីកដ៏ខ្លាំងបំផុត//extension: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ពេលនោះអ្នកគួរតែ//ឧទាហរណ៍ប្រសិនបើអ្នកបានទទួល ""Slices"" ជាថ្នាក់និង array នៃ //ជ្រើសរើសមួយដែលមកមុនក្នុង array ។//ប្រសិនបើមានការពង្រីកពីរឬច្រើនជាងនេះដែលមានកម្លាំងដូចគ្នា, អ្នកគួរតែ//format: ClassName.StrongestExtensionName. //អ្នកត្រូវរកការពង្រីកដ៏ខ្លាំងបំផុត ហើយត្រឡប់ទៅសរសៃមួយនៅក្នុងនេះ//ក្នុងឈ្មោះនៃការពង្រីក, ភាពខ្លាំងត្រូវបានផ្តល់ដោយភាគ CAP - SM ។ //អក្សរនៅក្នុងឈ្មោះនៃ extension ហើយសូមអោយ SM ជាចំនួនអក្សរតូចៗ//ភាពខ្លាំងនៃការពង្រីកគឺដូចខាងក្រោម: CAP ត្រូវជាលេខនៃអក្សរធំ //ការពង្រីកនេះត្រូវបានប្រើដើម្បីផ្ទុកវគ្គបន្ថែមទៅលើវគ្គ។//អ្នកនឹងទទួលបានឈ្មោះនៃ class (a string) និង array នៃ extension ។// >>> Strongest_Extension(""my_class"", [""AA"", ""Be"", ""CC""])
// ""my_class.AA""
function Strongest_Extension(class_name: string, extensions: string[]): string {
","function Strongest_Extension(class_name: string, extensions: string[]): string {
    let strongestExtension = '';
    let maxStrength = -Infinity;

    extensions.forEach(extension => {
        const capCount = extension.split('').filter(char => char >= 'A' && char <= 'Z').length;
        const smCount = extension.split('').filter(char => char >= 'a' && char <= 'z').length;
        const strength = capCount - smCount;

        if (strength > maxStrength) {
            maxStrength = strength;
            strongestExtension = extension;
        }
    });

    return `${class_name}.${strongestExtension}`;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = Strongest_Extension;
  assert.deepEqual(candidate(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]),""Watashi.eIGHt8OKe"");
  assert.deepEqual(candidate(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]),""Boku123.YEs.WeCaNe"");
  assert.deepEqual(candidate(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]),""__YESIMHERE.NuLl__"");
  assert.deepEqual(candidate(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]),""K.TAR"");
  assert.deepEqual(candidate(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]),""__HAHA.123"");
  assert.deepEqual(candidate(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]),""YameRore.okIWILL123"");
  assert.deepEqual(candidate(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]),""finNNalLLly.WoW"");
  assert.deepEqual(candidate(""_"", [""Bb"", ""91245""]),""_.Bb"");
  assert.deepEqual(candidate(""Sp"", [""671235"", ""Bb""]),""Sp.671235"");
}

test();"
HumanEval_154,khm_Khmr,ts,"//អ្នកត្រូវបានផ្តល់ពាក្យ 2 ។ អ្នកត្រូវត្រឡប់ទៅ true ប្រសិនបើពាក្យទី 2 ឬការដូររបស់វាជាខ្សែសង្វាក់នៅពាក្យទី 1 ។// >>> cycpattern_check(""abcd"", ""abd"")
// false
// >>> cycpattern_check(""hello"", ""ell"")
// true
// >>> cycpattern_check(""whassup"", ""psus"")
// false
// >>> cycpattern_check(""abab"", ""baa"")
// true
// >>> cycpattern_check(""efef"", ""eeff"")
// false
// >>> cycpattern_check(""himenss"", ""simen"")
// true
function cycpattern_check(a: string, b: string): boolean {
","function cycpattern_check(a: string, b: string): boolean {
    for (let i = 0; i < b.length; i++) {
        const rotation = b.slice(i) + b.slice(0, i);
        if (a.includes(rotation)) {
            return true;
        }
    }
    return false;
}

// Test cases
console.log(cycpattern_check(""abcd"", ""abd"")); // false
console.log(cycpattern_check(""hello"", ""ell"")); // true
console.log(cycpattern_check(""whassup"", ""psus"")); // false
console.log(cycpattern_check(""abab"", ""baa"")); // true
console.log(cycpattern_check(""efef"", ""eeff"")); // false
console.log(cycpattern_check(""himenss"", ""simen"")); // true","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = cycpattern_check;
  assert.deepEqual(candidate(""xyzw"", ""xyw""),false);
  assert.deepEqual(candidate(""yello"", ""ell""),true);
  assert.deepEqual(candidate(""whattup"", ""ptut""),false);
  assert.deepEqual(candidate(""efef"", ""fee""),true);
  assert.deepEqual(candidate(""abab"", ""aabb""),false);
  assert.deepEqual(candidate(""winemtt"", ""tinem""),true);
}

test();"
HumanEval_155,khm_Khmr,ts,"//ឧទាហរណ៍: //ដោយបានផ្តល់ចំនួនគត់មួយ. return array ដែលមានចំនួនគត់ និងគត់ជារៀងរាល់។// >>> even_odd_count(-12)
// [1, 1]
// >>> even_odd_count(123)
// [1, 2]
function even_odd_count(num: number): [number, number] {
","function even_odd_count(num: number): [number, number] {
    const numStr = Math.abs(num).toString();
    let evenCount = 0;
    let oddCount = 0;

    for (let char of numStr) {
        const digit = parseInt(char);
        if (digit % 2 === 0) {
            evenCount++;
        } else {
            oddCount++;
        }
    }

    return [evenCount, oddCount];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = even_odd_count;
  assert.deepEqual(candidate(7),[0, 1]);
  assert.deepEqual(candidate(-78),[1, 1]);
  assert.deepEqual(candidate(3452),[2, 2]);
  assert.deepEqual(candidate(346211),[3, 3]);
  assert.deepEqual(candidate(-345821),[3, 3]);
  assert.deepEqual(candidate(-2),[1, 0]);
  assert.deepEqual(candidate(-45347),[2, 3]);
  assert.deepEqual(candidate(0),[1, 0]);
}

test();"
HumanEval_156,khm_Khmr,ts,"//ឧទាហរណ៍: //ការរឹតត្បិត: 1 <= num <= 1000 //ហើយសរសេរវាជាអក្សរតូច។//ដោយបានផ្តល់ចំនួនគត់វិជ្ជមាន, ទទួលបានលេខរ៉ូម៉ាំងស្មើនឹងវាជាខ្សែ, // >>> int_to_mini_roman(19)
// ""xix""
// >>> int_to_mini_roman(152)
// ""clii""
// >>> int_to_mini_roman(426)
// ""cdxxvi""
function int_to_mini_roman(number: number): string {
","function int_to_mini_roman(number: number): string {
    const romanNumerals: { [key: number]: string } = {
        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',
        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',
        5: 'v', 4: 'iv', 1: 'i'
    };
    
    let result = '';
    for (const value of Object.keys(romanNumerals).map(Number).sort((a, b) => b - a)) {
        while (number >= value) {
            result += romanNumerals[value];
            number -= value;
        }
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = int_to_mini_roman;
  assert.deepEqual(candidate(19),""xix"");
  assert.deepEqual(candidate(152),""clii"");
  assert.deepEqual(candidate(251),""ccli"");
  assert.deepEqual(candidate(426),""cdxxvi"");
  assert.deepEqual(candidate(500),""d"");
  assert.deepEqual(candidate(1),""i"");
  assert.deepEqual(candidate(4),""iv"");
  assert.deepEqual(candidate(43),""xliii"");
  assert.deepEqual(candidate(90),""xc"");
  assert.deepEqual(candidate(94),""xciv"");
  assert.deepEqual(candidate(532),""dxxxii"");
  assert.deepEqual(candidate(900),""cm"");
  assert.deepEqual(candidate(994),""cmxciv"");
  assert.deepEqual(candidate(1000),""m"");
}

test();"
HumanEval_157,khm_Khmr,ts,"//ឧទាហរណ៍: //90 ឌីជីថល//ត្រីកោណទិសត្រង់ គឺជាត្រីកោណដែលមានទិសមួយជាទិសត្រង់ ឬ //ផ្នែកទាំងពីរបង្កើតជាត្រីកោណទិសត្រង់, ខុសពីនេះ//បានផ្តល់នូវទទឹងនៃភាគីទាំងបីនៃត្រីកោណ។ ត្រឡប់ទៅ true ប្រសិនបើបី // >>> right_angle_triangle(3, 4, 5)
// true
// >>> right_angle_triangle(1, 2, 3)
// false
function right_angle_triangle(a: number, b: number, c: number): boolean {
","function right_angle_triangle(a: number, b: number, c: number): boolean {
    const sides = [a, b, c].sort((x, y) => x - y);
    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = right_angle_triangle;
  assert.deepEqual(candidate(3, 4, 5),true);
  assert.deepEqual(candidate(1, 2, 3),false);
  assert.deepEqual(candidate(10, 6, 8),true);
  assert.deepEqual(candidate(2, 2, 2),false);
  assert.deepEqual(candidate(7, 24, 25),true);
  assert.deepEqual(candidate(10, 5, 7),false);
  assert.deepEqual(candidate(5, 12, 13),true);
  assert.deepEqual(candidate(15, 8, 17),true);
  assert.deepEqual(candidate(48, 55, 73),true);
  assert.deepEqual(candidate(1, 1, 1),false);
  assert.deepEqual(candidate(2, 2, 10),false);
}

test();"
HumanEval_158,khm_Khmr,ts,"//តួអក្សរ, ត្រឡប់ទៅតួអក្សរដែលស្ថិតនៅលើកដំបូងក្នុងលំដាប់ lexicographical ។ //នៃអក្សរតែមួយគត់ ប្រសិនបើខ្សែជាច្រើនមានចំនួនអក្សរតែមួយគត់ //array មានពាក្យផ្សេងគ្នា។ បញ្ជូនពាក្យដែលមានចំនួនច្រើនបំផុត //សរសេរ function មួយដែលទទួលយក array នៃ string ។// >>> find_max([""name"", ""of"", ""string""])
// ""string""
// >>> find_max([""name"", ""enam"", ""game""])
// ""enam""
// >>> find_max([""aaaaaaa"", ""bb"", ""cc""])
// ""aaaaaaa""
function find_max(words: string[]): string {
","function find_max(words: string[]): string {
    function uniqueCharacterCount(word: string): number {
        const uniqueChars = new Set(word);
        return uniqueChars.size;
    }

    let maxWord = words[0];
    let maxUniqueCount = uniqueCharacterCount(maxWord);

    for (let i = 1; i < words.length; i++) {
        const currentUniqueCount = uniqueCharacterCount(words[i]);
        if (
            currentUniqueCount > maxUniqueCount ||
            (currentUniqueCount === maxUniqueCount && words[i] < maxWord)
        ) {
            maxWord = words[i];
            maxUniqueCount = currentUniqueCount;
        }
    }

    return maxWord;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = find_max;
  assert.deepEqual(candidate([""name"", ""of"", ""string""]),""string"");
  assert.deepEqual(candidate([""name"", ""enam"", ""game""]),""enam"");
  assert.deepEqual(candidate([""aaaaaaa"", ""bb"", ""cc""]),""aaaaaaa"");
  assert.deepEqual(candidate([""abc"", ""cba""]),""abc"");
  assert.deepEqual(candidate([""play"", ""this"", ""game"", ""of"", ""footbott""]),""footbott"");
  assert.deepEqual(candidate([""we"", ""are"", ""gonna"", ""rock""]),""gonna"");
  assert.deepEqual(candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]),""nation"");
  assert.deepEqual(candidate([""this"", ""is"", ""a"", ""prrk""]),""this"");
  assert.deepEqual(candidate([""b""]),""b"");
  assert.deepEqual(candidate([""play"", ""play"", ""play""]),""play"");
}

test();"
HumanEval_159,khm_Khmr,ts,"//ឧទាហរណ៍: //ប្រសិនបើគ្មានគ្រាប់ស្វាយចន្ទីសល់ច្រើនទេ អ្នកនឹងបរិភោគគ្រាប់ស្វាយចន្ទីសល់ទាំងអស់ ប៉ុន្តែនៅតែអត់ឃ្លាន។//ចំនួនគ្រាប់ស្វាយចន្ទីដែលនៅសល់ក្រោយពេលបរិភោគអាហាររបស់អ្នក ] //អ្នកគួរតែយកត្រីមួយប្រភេទ [ចំនួនសរុបនៃគ្រាប់កន្ទុយលេខដែលអ្នកបានបរិភោគបន្ទាប់ពីអាហាររបស់អ្នក]//ប៉ុន្តែ ឥឡូវ នេះ អ្នក ត្រូវ តែ បរិភោគ ស្វាយចន្ទី បន្ថែម ទៀត ដើម្បី បំពេញ អាហារ ក្នុង មួយ ថ្ងៃ ។//អ្នកជាចៀមដែលអត់ឃ្លាន ហើយអ្នកបានបរិភោគស្វាយមួយចំនួនរួចទៅហើយ// >>> eat(5, 6, 10)
// [11, 4]
// >>> eat(4, 8, 9)
// [12, 1]
// >>> eat(1, 10, 10)
// [11, 0]
// >>> eat(2, 11, 5)
// [7, 0]
// Variables:
// @number : integer
// the number of carrots that you have eaten.
// @need : integer
// the number of carrots that you need to eat.
// @remaining : integer
// the number of remaining carrots thet exist in stock
// Constrain:
// * 0 <= number <= 1000
// * 0 <= need <= 1000
// * 0 <= remaining <= 1000
// Have fun :)
function eat(number: number, need: number, remaining: number): number[] {
","function eat(number: number, need: number, remaining: number): number[] {
    const totalEaten = number + Math.min(need, remaining);
    const carrotsLeft = Math.max(remaining - need, 0);
    return [totalEaten, carrotsLeft];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = eat;
  assert.deepEqual(candidate(5, 6, 10),[11, 4]);
  assert.deepEqual(candidate(4, 8, 9),[12, 1]);
  assert.deepEqual(candidate(1, 10, 10),[11, 0]);
  assert.deepEqual(candidate(2, 11, 5),[7, 0]);
  assert.deepEqual(candidate(4, 5, 7),[9, 2]);
  assert.deepEqual(candidate(4, 5, 1),[5, 0]);
}

test();"
HumanEval_160,khm_Khmr,ts,"//Operator array មាន operator យ៉ាងហោចណាស់មួយ ហើយ operand array មាន operands យ៉ាងហោចណាស់ពីរ។//Operand គឺជា array នៃចំនួនពេញដែលមិនមែនជាអវិជ្ជមាន។//ប្រវែងនៃប្រព័ន្ធប្រតិបត្តិការគឺស្មើនឹងប្រវែងនៃប្រព័ន្ធប្រតិបត្តិការអូសមួយ។//កត់សម្គាល់: //=> លទ្ធផល = 9 //លទ្ធផល = 2 + 3 * 4 - 5 //array = [2, 3, 4, 5] //អ្នកប្រតិបត្តិ ['+', '*', '-'] //ឧទាហរណ៍: //ការបង្កើន (**)//ការបែងចែកជាន់ ( // ) //ការចម្លង (*) //ការដកចេញ ( - ) //ការបន្ថែម (+) //ប្រតិបត្តិការ Algebra មូលដ្ឋាន: //expression និង return ការវាយតម្លៃនៃ expression នេះ។//array ទីពីរគឺជា array នៃចំនួនពេញ ប្រើ array ពីរដែលបានផ្តល់ដើម្បីសាងសង់ algebraic //ដោយបានផ្តល់ operator arrays ពីរ និង operand array ដំបូងមានប្រតិបត្តិការ algebra មូលដ្ឋាន និង function do_algebra(operator: string[], operand: number[]): number {
","function do_algebra(operator: string[], operand: number[]): number {
    let expression = operand[0].toString();

    for (let i = 0; i < operator.length; i++) {
        expression += ` ${operator[i]} ${operand[i + 1]}`;
    }

    return Math.floor(eval(expression));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = do_algebra;
  assert.deepEqual(candidate([""**"", ""*"", ""+""], [2, 3, 4, 5]),37);
  assert.deepEqual(candidate([""+"", ""*"", ""-""], [2, 3, 4, 5]),9);
  assert.deepEqual(candidate([""//"", ""*""], [7, 3, 4]),8);
}

test();"
HumanEval_161,khm_Khmr,ts,"//ឧទាហរណ៍//តួអង្គនេះត្រូវតែបញ្ជូនលេខសញ្ញាបត្រដែលទទួលបាន។//ប្រសិនបើ string មិនមានអក្សរទេ, សូមបកប្រែ string ។//បើមិនដូច្នេះទេ ទុកវាដូចដែលវាមាន។//ប្រសិនបើ s[i] គឺជាអក្សរមួយ សូមបកប្រែ case របស់វាពីខាងក្រោមទៅខាងលើ ឬ vice versa ។//អ្នកត្រូវបានផ្តល់ string s ។// >>> solve(""1234"")
// ""4321""
// >>> solve(""ab"")
// ""AB""
// >>> solve(""#a@C"")
// ""#A@c""
function solve(s: string): string {
","function solve(s: string): string {
    let hasLetter = /[a-zA-Z]/.test(s);
    if (hasLetter) {
        return s.split('').map(char => {
            if (/[a-z]/.test(char)) {
                return char.toUpperCase();
            } else if (/[A-Z]/.test(char)) {
                return char.toLowerCase();
            } else {
                return char;
            }
        }).join('');
    } else {
        return s.split('').reverse().join('');
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solve;
  assert.deepEqual(candidate(""AsDf""),""aSdF"");
  assert.deepEqual(candidate(""1234""),""4321"");
  assert.deepEqual(candidate(""ab""),""AB"");
  assert.deepEqual(candidate(""#a@C""),""#A@c"");
  assert.deepEqual(candidate(""#AsdfW^45""),""#aSDFw^45"");
  assert.deepEqual(candidate(""#6@2""),""2@6#"");
  assert.deepEqual(candidate(""#$a^D""),""#$A^d"");
  assert.deepEqual(candidate(""#ccc""),""#CCC"");
}

test();"
HumanEval_162,khm_Khmr,ts,"//ប្រសិនបើ 'text' គឺជា string ដែលគ្មានអ្វីទេ, return undefined ។//ដោយបានផ្តល់នូវ string 'text', សូមត្រឡប់ទៅ string ស្មើនឹង md5 hash របស់វាវិញ។// >>> string_to_md5(""Hello world"")
// ""3e25960a79dbc69b674cd4ec67a72c62""
function string_to_md5(text: string): string | undefined {
","import * as crypto from 'crypto';

function string_to_md5(text: string): string | undefined {
    if (text === """") {
        return undefined;
    }
    return crypto.createHash('md5').update(text).digest('hex');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_to_md5;
  assert.deepEqual(candidate(""Hello world""),""3e25960a79dbc69b674cd4ec67a72c62"");
  assert.deepEqual(candidate(""""),undefined);
  assert.deepEqual(candidate(""A B C""),""0ef78513b0cb8cef12743f5aeb35f888"");
  assert.deepEqual(candidate(""password""),""5f4dcc3b5aa765d61d8327deb882cf99"");
}

test();"
HumanEval_163,khm_Khmr,ts,"//ឧទាហរណ៍: //និង b, ក្នុងលំដាប់កើនឡើង។//ដោយបានផ្តល់ចំនួនគត់វិជ្ជមានចំនួនពីរ a និង b, សូមត្រឡប់ទៅលេខគត់រវាង a // >>> generate_integers(2, 8)
// [2, 4, 6, 8]
// >>> generate_integers(8, 2)
// [2, 4, 6, 8]
// >>> generate_integers(10, 14)
// []
function generate_integers(a: number, b: number): number[] {
","function generate_integers(a: number, b: number): number[] {
    let result: number[] = [];
    
    // Get starting and ending points in sorted order
    let start = Math.min(a, b);
    let end = Math.max(a, b);
    
    // Loop through the range
    for (let i = start; i <= end; i++) {
        if (i % 2 === 0) {  // Check if the digit is even
            result.push(i);
        }
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = generate_integers;
  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);
  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);
  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);
  assert.deepEqual(candidate(17, 89),[]);
}

test();"
