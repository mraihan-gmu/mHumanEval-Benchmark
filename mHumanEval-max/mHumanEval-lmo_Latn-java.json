[{"task_id":"HumanEval_0","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ given threshold.     \/ Check if in given array list of numbers, are any two numbers closer to each other than  (Check if in given array list of numbers, are any two numbers closer to each other than )    \/\/ >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    \/\/ (false)\n    \/\/ >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    \/\/ (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n        if(numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Float> numbers1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f));\n        System.out.println(hasCloseElements(numbers1, 0.5f)); \/\/ Output: false\n\n        ArrayList<Float> numbers2 = new ArrayList<>(Arrays.asList(1.0f, 2.8f, 3.0f, 4.0f, 5.0f, 2.0f));\n        System.out.println(hasCloseElements(numbers2, 0.3f)); \/\/ Output: true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_1","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Ignorè i spazi in la stringa d'ingresso.     \/ I grup separàcc i è bilanciàcc (ogn bracc aprèss l'è pròpriamènt serràcc) e i è minga insèmma 'nter l'alter.    \/ separà quei grup in strings separà e restituì la lista di array di quei.     \/ Input a sta funziun l'è una stringa cont i grup de parentesi innestaa.    \/\/ >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n        ArrayList<String> groups = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                balance--;\n                currentGroup.append(c);\n            }\n\n            if (balance == 0 && currentGroup.length() > 0) {\n                groups.add(currentGroup.toString());\n                currentGroup.setLength(0);\n            }\n        }\n\n        return groups;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> result = separateParenGroups(\"( ) (( )) (( )( ))\");\n        System.out.println(result); \/\/ Output: [\"()\", \"(())\", \"(()())\"]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\")))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_2","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render la part decimal del numer.     \/ (la part restanta l'è semper püssee picia de 1).    \/ e part de intèr (intèr piö gràn piö püsè picen de 'l numer dat) e decimàli     \/ Dàt un nùmer a pont flùs positiv, al pò vèss scompòst in     \/\/ >>> truncateNumber((3.5f))\n    \/\/ (0.5f)\n    public static float truncateNumber(float number) {\n","canonical_solution":"int integerPart = (int) number;\n        return number - integerPart;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_3","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ in quel punt la funziun la dovariss tornà véra. altrimenti la dovariss tornà falsa.    \/ saldo zero. El tò compit l'è de scovà se a on quaj moment el saldo del conto el cala sòtta a zero, e     \/ Te gh'è dà una lista de operazion de depòsit e de ritirada in d'un cont bancari che la scumìcia con     \/\/ >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (false)\n    \/\/ >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l))))\n    \/\/ (true)\n    public static boolean belowZero(ArrayList<Long> operations) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static boolean belowZero(ArrayList<Long> operations) {\n        long balance = 0;\n        for (Long operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> operations1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));\n        System.out.println(belowZero(operations1)); \/\/ false\n\n        ArrayList<Long> operations2 = new ArrayList<Long>(Arrays.asList(1L, 2L, -4L, 5L));\n        System.out.println(belowZero(operations2)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(belowZero((new ArrayList<Long>(Arrays.asList()))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-3l, (long)1l, (long)2l, (long)-3l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l, (long)6l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-5l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_4","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ MAD = AVERAGE  x - x_mean     \/ element e un centerpoint (mean in this case):     \/ Mean Absolute Deviation l'è la media de la diferenza assoluta tra ogni     \/ intorna a la media de 'sto set de dati.     \/ Per una lista de matrices de numeri d'ingress, calcola la deviazion assoluta media     \/\/ >>> meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\n    \/\/ (1.0f)\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ For a given array list of input numbers, calculate Mean Absolute Deviation\n    \/\/ around the mean of this dataset.\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list should not be null or empty\");\n        }\n        \n        \/\/ Calculate mean\n        float sum = 0.0f;\n        for (float num : numbers) {\n            sum += num;\n        }\n        float mean = sum \/ numbers.size();\n        \n        \/\/ Calculate Mean Absolute Deviation\n        float madSum = 0.0f;\n        for (float num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n        \n        return madSum \/ numbers.size();\n    }\n\n    \/\/ A main method to demonstrate functionality\n    public static void main(String[] args) {\n        ArrayList<Float> numbers = new ArrayList<Float>();\n        numbers.add(1.0f);\n        numbers.add(2.0f);\n        numbers.add(3.0f);\n        numbers.add(4.0f);\n\n        float mad = meanAbsoluteDeviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + mad);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));\n    }\n\n}\n"},{"task_id":"HumanEval_5","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Insert a numer \"delimeter\" between every two consecutive elements of input array list `numbers'     \/\/ >>> intersperse((new ArrayList<Long>(Arrays.asList())), (4l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> intersperse((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Long> numbers1 = new ArrayList<>(Arrays.asList());\n        ArrayList<Long> result1 = intersperse(numbers1, 4L);\n        System.out.println(result1);\n\n        ArrayList<Long> numbers2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\n        ArrayList<Long> result2 = intersperse(numbers2, 4L);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intersperse((new ArrayList<Long>(Arrays.asList())), (7l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)2l))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)6l, (long)8l, (long)3l, (long)8l, (long)2l)))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)2l, (long)2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_6","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ E.g. (() (()) ha maxim 2 nivel de nidificacao enquanto ((())) tem 3 nivels.     \/ Per ognidün del grup, fà la sortida del livel piö profond de l'incrustasiù de parentesi.     \/ L'input de sta funziun l'è una stringa rapreentada de grup plü per parentesi anidada separada de spazi.     \/\/ >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        ArrayList<Long> depths = new ArrayList<>();\n\n        for (String group : groups) {\n            long currentDepth = 0;\n            long maxDepth = 0;\n\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth;\n                    }\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n\n            depths.add(maxDepth);\n        }\n\n        return depths;\n    }\n\n    public static void main(String[] args) {\n        String input = \"(()()) ((())) () ((())()())\";\n        System.out.println(parseNestedParens(input));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_7","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Filtrà una lista de matrices de input de strings solo per quelle che contènn la data substring     \/\/ >>> filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n","canonical_solution":"public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n        return strings.stream()\n                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"prune\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_8","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ La soma lìbera la dovrà ès 0 e 'l prodot lìber l'è 1.    \/ Per una lista di intreg de una serie data, torna una coppia che la consist de una somma e un prodot de tucc i intreg in una lista di intreg de una serie.     \/\/ >>> sumProduct((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (Pair.with(0l, 1l))\n    \/\/ >>> sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (Pair.with(10l, 24l))\n    public static Pair<Long, Long> sumProduct(ArrayList<Long> numbers) {\n","canonical_solution":"long sum = 0L;\n        long product = 1L;\n        \n        for (Long number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        return Pair.with(sum, product);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList()))).equals((Pair.with(0l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((Pair.with(3l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)100l, (long)0l)))).equals((Pair.with(100l, 0l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))).equals((Pair.with(15l, 105l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)10l)))).equals((Pair.with(10l, 10l))));\n    }\n\n}\n"},{"task_id":"HumanEval_9","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ in sequenza.     \/ Da na lista de entiers, genera na lista de entiers de element maxim che se à trové fin a un moment dat     \/\/ >>> rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ From a given array list of integers, generate an array list of rolling maximum element found until given moment\n    \/\/ in the sequence.\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            return result;\n        }\n        long currentMax = Long.MIN_VALUE;\n        for (Long number : numbers) {\n            currentMax = Math.max(currentMax, number);\n            result.add(currentMax);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> numbers = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 3L, 4L, 2L));\n        ArrayList<Long> rollingMaxNumbers = rollingMax(numbers);\n        System.out.println(rollingMaxNumbers); \/\/ Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_10","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ - Aggiungi a la fin de la stringa inversa de una stringa prefisso che vegn prima del sufisso palindrom.     \/ - Trova la postfix piö longa de la stringa fornida che l'è un palindrom.     \/ L'idea de l'algoritm l'è semplice:     \/ Trova el palindrom piö curto che 'l cumincia con una stringa fornida.     \/\/ >>> makePalindrome((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> makePalindrome((\"cat\"))\n    \/\/ (\"catac\")\n    \/\/ >>> makePalindrome((\"cata\"))\n    \/\/ (\"catac\")\n    public static String makePalindrome(String string) {\n","canonical_solution":"public static String makePalindrome(String string) {\n    if (string == null || string.length() <= 1) {\n        return string;\n    }\n\n    \/\/ Function to check if a given string is a palindrome\n    boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left++) != s.charAt(right--)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    \/\/ Find longest palindromic suffix\n    int n = string.length();\n    for (int i = n; i > 0; i--) {\n        if (isPalindrome(string.substring(0, i))) {\n            StringBuilder sb = new StringBuilder(string.substring(i));\n            sb.reverse();\n            return string + sb.toString();\n        }\n    }\n    \n    return string; \/\/ fallback should not be reached\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"},{"task_id":"HumanEval_11","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esegui XOR binari su questi input e restituisci anche come stringa.     \/ Input i è du string a e b che i è cumpòst de 1 e 0    \/\/ >>> stringXor((\"010\"), (\"110\"))\n    \/\/ (\"100\")\n    public static String stringXor(String a, String b) {\n","canonical_solution":"if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must have the same length.\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            \n            if (charA != '0' && charA != '1' || charB != '0' && charB != '1') {\n                throw new IllegalArgumentException(\"Input strings must consist only of '0' and '1'.\");\n            }\n            \n            \/\/ Perform XOR operation and append to the result\n            result.append(charA == charB ? '0' : '1');\n        }\n        \n        return result.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"},{"task_id":"HumanEval_12","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ strings of same length. Return null in case the input array list is empty.     \/ Out of array list of strings, return the longest one. Return the first one in case of multiple.    \/\/ >>> longest((new ArrayList<String>(Arrays.asList())))\n    \/\/ Optional.empty()\n    \/\/ >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    \/\/ Optional.of(\"a\")\n    \/\/ >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"bb\", (String)\"ccc\"))))\n    \/\/ Optional.of(\"ccc\")\n    public static Optional<String> longest(ArrayList<String> strings) {\n","canonical_solution":"if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length)\n                .thenComparing(Comparator.naturalOrder()));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"},{"task_id":"HumanEval_13","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Ritorna un maggiur comun divisor de duu intger a e b     \/\/ >>> greatestCommonDivisor((3l), (5l))\n    \/\/ (1l)\n    \/\/ >>> greatestCommonDivisor((25l), (15l))\n    \/\/ (5l)\n    public static long greatestCommonDivisor(long a, long b) {\n","canonical_solution":"if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_14","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Renderà l' elenco di matrici di tutti i prefissi dal più curto al più lungo della stringa di input     \/\/ >>> allPrefixes((\"abc\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))\n    public static ArrayList<String> allPrefixes(String string) {\n","canonical_solution":"ArrayList<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_15","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Rende una stringa contenente numeri delimitati da spazio che partono da 0 fino a n.     \/\/ >>> stringSequence((0l))\n    \/\/ (\"0\")\n    \/\/ >>> stringSequence((5l))\n    \/\/ (\"0 1 2 3 4 5\")\n    public static String stringSequence(long n) {\n","canonical_solution":"import java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\nclass Problem {\n    public static String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n)\n                         .mapToObj(Long::toString)\n                         .collect(Collectors.joining(\" \"));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"},{"task_id":"HumanEval_16","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Dàt una stringa, scuprìt quànti caràter distìngui (indipendènt de la cassa) i è cumpòst de     \/\/ >>> countDistinctCharacters((\"xyzXYZ\"))\n    \/\/ (3l)\n    \/\/ >>> countDistinctCharacters((\"Jerry\"))\n    \/\/ (4l)\n    public static long countDistinctCharacters(String string) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Given a string, find out how many distinct characters (regardless of case) does it consist of\n    public static long countDistinctCharacters(String string) {\n        \/\/ Convert the string to lowercase to ensure case-insensitivity\n        String lowerCaseString = string.toLowerCase();\n        \/\/ Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        \/\/ Iterate over each character in the string and add it to the set\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        \/\/ Return the size of the set, i.e., the number of distinct characters\n        return uniqueChars.size();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n"},{"task_id":"HumanEval_17","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \" 'Durèsa \" ' - nota de quart, dura un batt    \"O \" 'Hadji\" \" ' - mezza nota, dura due batt    \/ \"O\" - tuta la nota, dura quatter batt     \/ Chèsta l' è 'na léggena:    \/ no ultim.    \/ Vos compit a l'é de analizé chesta cadena e d'arreturné na lista d'intèr che a corispond a quanta batùdes a fa ognidun     \/ L'input de sta funziun l'è una stringa che la rappresenta i nòtt musicali in un format special ASCII.     \/\/ >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static ArrayList<Long> parseMusic(String music_string) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> beats = new ArrayList<>();\n        String[] notes = music_string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4L);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2L);\n            } else if (note.equals(\".|\")) {\n                beats.add(1L);\n            }\n        }\n        \n        return beats;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_18","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Trova quànta vòlta che 'na data sotstringa la se pò catà endèla stringa originàla.    \/\/ >>> howManyTimes((\"\"), (\"a\"))\n    \/\/ (0l)\n    \/\/ >>> howManyTimes((\"aaa\"), (\"a\"))\n    \/\/ (3l)\n    \/\/ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    \/\/ (3l)\n    public static long howManyTimes(String string, String substring) {\n","canonical_solution":"public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_19","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render la stringa con i numm ordinad da piö picen a piö grand     \/ Valide opzioni: \"zero\", \"uno\", \"due\", \"tre\", \"quattro\", \"cinque\", \"sei\", \"sette\", \"otto\" e \"nove\".     \/ Input a l'è una sequenza de numeral de \"zero\" a \"nove\" delimitaa in spazzi.    \/\/ >>> sortNumbers((\"three one five\"))\n    \/\/ (\"one three five\")\n    public static String sortNumbers(String numbers) {\n","canonical_solution":"public static String sortNumbers(String numbers) {\n        List<String> numeralList = Arrays.asList(numbers.split(\" \"));\n        Map<String, Integer> numeralToValue = new HashMap<>();\n        numeralToValue.put(\"zero\", 0);\n        numeralToValue.put(\"one\", 1);\n        numeralToValue.put(\"two\", 2);\n        numeralToValue.put(\"three\", 3);\n        numeralToValue.put(\"four\", 4);\n        numeralToValue.put(\"five\", 5);\n        numeralToValue.put(\"six\", 6);\n        numeralToValue.put(\"seven\", 7);\n        numeralToValue.put(\"eight\", 8);\n        numeralToValue.put(\"nine\", 9);\n\n        numeralList.sort(Comparator.comparingInt(numeralToValue::get));\n\n        return String.join(\" \", numeralList);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"},{"task_id":"HumanEval_20","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ altri e li restituisci in ordine (numero minore, numero maggiore).    \/ Da na lista de numer (de longhessa almanch dui) seleziona e restituisci doi che é i plu visin a ogni     \/\/ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    \/\/ (Pair.with(2.0f, 2.2f))\n    \/\/ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    \/\/ (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two numbers.\");\n        }\n\n        Collections.sort(numbers);\n        float minDiff = Float.MAX_VALUE;\n        Pair<Float, Float> closestPair = null;\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float current = numbers.get(i);\n            float next = numbers.get(i + 1);\n            float diff = Math.abs(current - next);\n\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Pair.with(current, next);\n            }\n        }\n\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Float> list1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.2f));\n        ArrayList<Float> list2 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.0f));\n        \n        System.out.println(findClosestElements(list1)); \/\/ Output: (2.0, 2.2)\n        System.out.println(findClosestElements(list2)); \/\/ Output: (2.0, 2.0)\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(3.9f, 4.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f)))).equals((Pair.with(5.0f, 5.9f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(2.0f, 2.2f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f)))).equals((Pair.with(2.0f, 2.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f)))).equals((Pair.with(2.2f, 3.1f))));\n    }\n\n}\n"},{"task_id":"HumanEval_21","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ tal che el nümer püsee piscinin el diventa 0 e el püsee grand el diventa 1     \/ Dàt l'elenc de matrices de numars (de almanch duu element), applicà ona trasformazion linear a quell'elenc de matrices,     \/\/ >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n    \/\/ (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given array list of numbers (of at least two elements), apply a linear transform to that array list,\n    \/\/ such that the smallest number will become 0 and the largest will become 1\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two elements.\");\n        }\n        \n        float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n        \n        for (float num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        \n        ArrayList<Float> rescaled = new ArrayList<>(numbers.size());\n        for (float num : numbers) {\n            float normalized = (num - min) \/ (max - min);\n            rescaled.add(normalized);\n        }\n        \n        return rescaled;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Float> numbers = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f));\n        ArrayList<Float> normalizedNumbers = rescaleToUnit(numbers);\n        System.out.println(normalizedNumbers); \/\/ Output should be [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"},{"task_id":"HumanEval_22","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Filter given array list of any javathon values only for integers     \/\/ >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)3.14f, (String)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    \/\/ >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Filter given array list of any javathon values only for integers\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                result.add((Long) value);\n            }\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, \"adasd\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l, \"c\", 3l, 3l, \"a\", \"b\")))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_23","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Ritorna lunghesa de la stringa data     \/\/ >>> stringLength((\"\"))\n    \/\/ (0l)\n    \/\/ >>> stringLength((\"abc\"))\n    \/\/ (3l)\n    public static long strlen(String string) {\n","canonical_solution":"\/\/ Check if the string is null\n        if (string == null) {\n            return 0L;\n        }\n        \/\/ Return the length of the string\n        return (long) string.length();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"},{"task_id":"HumanEval_24","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per un dato nùmer n, trova el nùmer piö gròss che divid n in manera ugualitàla, piö püssee picen de n     \/\/ >>> largestDivisor((15l))\n    \/\/ (5l)\n    public static long largestDivisor(long n) {\n","canonical_solution":"if (n <= 1) {\n            throw new IllegalArgumentException(\"n must be greater than 1\");\n        }\n        for (long i = n \/ 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; \/\/ This line is actually never reached if the function is used correctly\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"},{"task_id":"HumanEval_25","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Input number should be equal to the product of all factors  Input number should be equal to the product of all factors     \/ Ogni fattur al va listad in di numer de volt che corispond a quante volt che al vegn in la fatorizazion.    \/ Rende lista de matrices de fattur prim de un dato intèr in de l'òrdine dal piö picen al piö grand.     \/\/ >>> factorize((8l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n    \/\/ >>> factorize((25l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)))\n    \/\/ >>> factorize((70l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> factorize(long n) {\n        ArrayList<Long> factors = new ArrayList<>();\n        for (long factor = 2; factor * factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n \/= factor;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        \/\/ Example usage\n        System.out.println(factorize(8l));   \/\/ Output: [2, 2, 2]\n        System.out.println(factorize(25l));  \/\/ Output: [5, 5]\n        System.out.println(factorize(70l));  \/\/ Output: [2, 5, 7]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_26","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Keep order of elements left same as in the input.     \/ Da na lista de intèr de matriç, sbara tücc i elemënć che i se tröva püch de na olta.    \/\/ >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l)))\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\n\npublic class Problem {\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n        \/\/ Create a HashSet to keep track of duplicates\n        HashSet<Long> seen = new HashSet<>();\n        \/\/ Create a list for results\n        ArrayList<Long> result = new ArrayList<>();\n        \/\/ Create a temporary HashSet to track elements that are counted more than once\n        HashSet<Long> duplicates = new HashSet<>();\n\n        for (Long number : numbers) {\n            if (seen.contains(number)) {\n                \/\/ If already seen and not added to duplicates, add to duplicates\n                duplicates.add(number);\n            } else {\n                \/\/ Mark this number as seen\n                seen.add(number);\n            }\n        }\n\n        for (Long number : numbers) {\n            \/\/ Add only those numbers to result which are not in duplicates\n            if (!duplicates.contains(number)) {\n                result.add(number);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> input = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 4L));\n        ArrayList<Long> output = removeDuplicates(input);\n        System.out.println(output);  \/\/ Output: [1, 3, 4]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_27","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per una data stringa, girà i caratteri minuscol in maiuscol e maiuscol in minuscol.     \/\/ >>> flipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    public static String flipCase(String string) {\n","canonical_solution":"StringBuilder flipped = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                flipped.append(Character.toUpperCase(c));\n            } else {\n                flipped.append(c);\n            }\n        }\n        return flipped.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"},{"task_id":"HumanEval_28","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Concatenà l'elenco de strings in una stringa sola     \/\/ >>> concatenate((new ArrayList<String>(Arrays.asList())))\n    \/\/ (\"\")\n    \/\/ >>> concatenate((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    \/\/ (\"abc\")\n    public static String concatenate(ArrayList<String> strings) {\n","canonical_solution":"return String.join(\"\", strings);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(concatenate((new ArrayList<String>(Arrays.asList()))).equals((\"\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals((\"xyz\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\", (String)\"w\", (String)\"k\")))).equals((\"xyzwk\")));\n    }\n\n}\n"},{"task_id":"HumanEval_29","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Filtrà una lista de matrices de input de strings solo per quelle che cumincien con un prefiss dat.     \/\/ >>> filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n","canonical_solution":"return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_30","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Rende solo numeri positivi in lista di array.     \/\/ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l, (long)5l, (long)6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)6l)))\n    \/\/ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ Return only positive numbers in the array list.\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long> positives = new ArrayList<>();\n        for (Long number : l) {\n            if (number > 0) {\n                positives.add(number);\n            }\n        }\n        return positives;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_31","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render true se un dato nùmer l'è prim, e false altrimenti.     \/\/ >>> isPrime((6l))\n    \/\/ (false)\n    \/\/ >>> isPrime((101l))\n    \/\/ (true)\n    \/\/ >>> isPrime((11l))\n    \/\/ (true)\n    \/\/ >>> isPrime((13441l))\n    \/\/ (true)\n    \/\/ >>> isPrime((61l))\n    \/\/ (true)\n    \/\/ >>> isPrime((4l))\n    \/\/ (false)\n    \/\/ >>> isPrime((1l))\n    \/\/ (false)\n    public static boolean isPrime(long n) {\n","canonical_solution":"if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_33","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ al valōr di indici corispondènt di l, ma ordinà.    \/ l' l'è idèntica a l in di indici che i è minga divisìbil per tri, menter i sò valùr in di indici che i è divisìbil per tri i è uguali     \/ Questa funzione prende un array array list l e restituisce un array array list l ' tale che     \/\/ >>> sortThird((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    \/\/ >>> sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n        \/\/ Create a new list to store elements at indices divisible by three\n        ArrayList<Long> extracted = new ArrayList<>();\n\n        \/\/ Extract the elements at indices divisible by three\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                extracted.add(l.get(i));\n            }\n        }\n\n        \/\/ Sort the extracted elements\n        Collections.sort(extracted);\n\n        \/\/ Create a new list to store the resultant elements\n        ArrayList<Long> result = new ArrayList<>(l);\n\n        \/\/ Replace the original elements at indices divisible by three with the sorted ones\n        int sortedIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, extracted.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));\n        ArrayList<Long> result1 = sortThird(list1);\n        System.out.println(result1);\n\n        ArrayList<Long> list2 = new ArrayList<Long>(Arrays.asList(5L, 6L, 3L, 4L, 8L, 9L, 2L));\n        ArrayList<Long> result2 = sortThird(list2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l, (long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_34","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render sorted unique elements in an array array list     \/\/ >>> unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return sorted unique elements in an array array list\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n        return l.stream()\n                .distinct()\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> inputList = new ArrayList<>(Arrays.asList(5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L));\n        ArrayList<Long> uniqueSortedList = unique(inputList);\n        System.out.println(uniqueSortedList);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_35","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Rende l'elemènt màsimo de la lista de la matris.     \/\/ >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (3l)\n    \/\/ >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    \/\/ (123l)\n    public static long maxElement(ArrayList<Long> l) {\n","canonical_solution":"public static long maxElement(ArrayList<Long> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        long max = Long.MIN_VALUE;\n        for (Long num : l) {\n            max = Math.max(max, num);\n        }\n        return max;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l)))) == (124l));\n    }\n\n}\n"},{"task_id":"HumanEval_36","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render el numer de volt che la cifra 7 la se troeuva in di intger men de n che hinn divisibil per 11 o 13.     \/\/ >>> fizzBuzz((50l))\n    \/\/ (0l)\n    \/\/ >>> fizzBuzz((78l))\n    \/\/ (2l)\n    \/\/ >>> fizzBuzz((79l))\n    \/\/ (3l)\n    public static long fizzBuzz(long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    public static long fizzBuzz(long n) {\n        long count = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private static int countSevens(long number) {\n        int count = 0;\n        while (number > 0) {\n            if (number % 10 == 7) {\n                count++;\n            }\n            number \/= 10;\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"},{"task_id":"HumanEval_37","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ai valùr dei indici pari de l, ma ordinà.     \/ l' l'è idèntica a l in di indici dispari, menter i sò valur in di indici pari hinn uguali     \/ Questa funzione prende un array array list l e restituisce un array array list l ' tale che     \/\/ >>> sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    \/\/ >>> sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)5l, (long)4l)))\n    public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n","canonical_solution":"public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n        ArrayList<Long> evenIndicesValues = new ArrayList<>();\n        \n        \/\/ Collect values from even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndicesValues.add(l.get(i));\n        }\n        \n        \/\/ Sort values collected from even indices\n        Collections.sort(evenIndicesValues);\n        \n        \/\/ Create an iterator for sorted even values\n        Iterator<Long> iterator = evenIndicesValues.iterator();\n        \n        \/\/ Form the result list by setting sorted even values and copying odd values\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                \/\/ Set sorted values at even indices\n                l.set(i, iterator.next());\n            }\n            \/\/ Values at odd indices remain the same\n        }\n        \n        return l;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)5l, (long)0l, (long)9l, (long)1l, (long)123l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)-12l, (long)4l, (long)23l, (long)2l, (long)3l, (long)11l, (long)12l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-12l, (long)8l, (long)3l, (long)4l, (long)5l, (long)2l, (long)12l, (long)11l, (long)23l, (long)-10l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_39","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ prime_fib restituisce n-esimo numero che è un numero di Fibonacci e che è pure primo.     \/\/ >>> primeFib((1l))\n    \/\/ (2l)\n    \/\/ >>> primeFib((2l))\n    \/\/ (3l)\n    \/\/ >>> primeFib((3l))\n    \/\/ (5l)\n    \/\/ >>> primeFib((4l))\n    \/\/ (13l)\n    \/\/ >>> primeFib((5l))\n    \/\/ (89l)\n    public static long primeFib(long n) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    \/\/ Function to check if a number is prime\n    public static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true; \/\/ 2 and 3 are prime\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (long i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    \/\/ Function to get the n-th Fibonacci number that is also prime\n    public static long primeFib(long n) {\n        long count = 0;\n        long a = 0;\n        long b = 1;\n        \n        while (true) {\n            long next = a + b;\n            a = b;\n            b = next;\n            \n            if (isPrime(next)) {\n                count++;\n                if (count == n) {\n                    return next;\n                }\n            }\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"},{"task_id":"HumanEval_40","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum a zero, e false altrimenti.    \/ it returns true if there are three distinct elements in the array list that     \/ triples_sum_to_zero al fà 'n list de intèr de intèr come input.     \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    \/\/ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1, right = n - 1;\n            while (left < right) {\n                long sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_41","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Chësta funziun vëgnel metü fora le numer de chëstes collisiuns.     \/ in la so trajetüra come se no i s'aversass.    \/ Ma i vagon i è infinitament robus e forti; per quèst, i se cuntinua a spostàss.    \/ quand 'na màchina che la và da mancià a drèta la s'ciàpa 'na màchina che la và da drèta a mancià.    Tutt i car i se moven a la stesa velocità.    I du set de màchina i part a vèss pròppi luntàn de l'altra.    \/n cars are driving left to right; simultaneously, a different set of n cars     \/Imagina na stràda che l'è na linia perfètamènt drèta e infinìtamènt longa.    public static long carRaceCollision(long n) {\n","canonical_solution":"public static long carRaceCollision(long n) {\n    \/\/ Each car moving left to right will collide with each car moving right to left\n    \/\/ as they are infinitely far apart initially and moving towards each other.\n    \/\/ Therefore, the total number of collisions will be n * n.\n    return n * n;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"},{"task_id":"HumanEval_42","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render list de array con elements incrementados de 1.     \/\/ >>> incrList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))\n    \/\/ >>> incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return array list with elements incremented by 1.\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(incrList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l)))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)2l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)3l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_43","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum a zero, e false altrimenti.    \/ it returns true if there are two distinct elements in the array list that     \/ pairs_sum_to_zero al fà 'n list de intèr de intèr de intèr.    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    \/\/ (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.HashSet;\n\nclass Problem {\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>();\n\n        for (Long num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        \n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)30l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)31l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)30l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)31l)))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_44","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ i numm de base hinn men de 10.     \/ return string representation after the conversion.     \/ Change numerical base of input number x to base.                                                           \/\/ >>> changeBase((8l), (3l))\n    \/\/ (\"22\")\n    \/\/ >>> changeBase((8l), (2l))\n    \/\/ (\"1000\")\n    \/\/ >>> changeBase((7l), (2l))\n    \/\/ (\"111\")\n    public static String changeBase(long x, long base) {\n","canonical_solution":"StringBuilder result = new StringBuilder();\n    while (x > 0) {\n        result.append(x % base);\n        x \/= base;\n    }\n    return result.reverse().toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"},{"task_id":"HumanEval_45","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Data la lunghesa d'un fianch e l'area de ritorno alta per un triangol.    \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    public static float triangleArea(long a, long h) {\n","canonical_solution":"public class Problem {\n    \/\/ Given length of a side and height, return area for a triangle.\n    \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    public static float triangleArea(long a, long h) {\n        return (a * h) \/ 2.0f;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(5l, 3l)); \/\/ Output: 7.5\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_46","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Scriv una funziun per calculà in manera efetiva l'element n-es de la sequenza numerica fib4.    \/ fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).    \/ fib4(3) -> 0     \/ fib4(2) -> 2     \/ fib4(1) -> 0     \/ fib4(0) -> 0     La sequenza numerica Fib4 l'è una sequenza simile a quella de Fibbonacci che l'è definida inscì:    \/\/ >>> fib4((5l))\n    \/\/ (4l)\n    \/\/ >>> fib4((6l))\n    \/\/ (8l)\n    \/\/ >>> fib4((7l))\n    \/\/ (14l)\n    public static long fib4(long n) {\n","canonical_solution":"public static long fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"},{"task_id":"HumanEval_47","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Ritorna la mediana di elementi in l'elenco di matrici l.     \/\/ >>> median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (float)3l\n    \/\/ >>> median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))\n    \/\/ (15.0f)\n    public static float median(ArrayList<Long> l) {\n","canonical_solution":"Collections.sort(l);\n    int n = l.size();\n    if (n % 2 == 1) {\n        return l.get(n \/ 2);\n    } else {\n        return (float)(l.get(n \/ 2 - 1) + l.get(n \/ 2)) \/ 2;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"},{"task_id":"HumanEval_48","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Verifica se la stringa data l'è un palindrom     \/\/ >>> isPalindrome((\"\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aba\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aaaaa\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"zbcd\"))\n    \/\/ (false)\n    public static boolean isPalindrome(String text) {\n","canonical_solution":"if (text == null) {\n            return false;\n        }\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_49","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Rend 2^n modulo p (sottoscriv i numer).    \/\/ >>> modp((3l), (5l))\n    \/\/ (3l)\n    \/\/ >>> modp((1101l), (101l))\n    \/\/ (2l)\n    \/\/ >>> modp((0l), (101l))\n    \/\/ (1l)\n    \/\/ >>> modp((3l), (11l))\n    \/\/ (8l)\n    \/\/ >>> modp((100l), (101l))\n    \/\/ (1l)\n    public static long modp(long n, long p) {\n","canonical_solution":"import java.math.BigInteger;\n\npublic class Problem {\n    \/\/ Return 2^n modulo p (be aware of numerics).\n    public static long modp(long n, long p) {\n        BigInteger base = BigInteger.valueOf(2);\n        BigInteger exponent = BigInteger.valueOf(n);\n        BigInteger modulo = BigInteger.valueOf(p);\n        \n        return base.modPow(exponent, modulo).longValue();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(modp(3L, 5L)); \/\/ Output: 3\n        System.out.println(modp(1101L, 101L)); \/\/ Output: 2\n        System.out.println(modp(0L, 101L)); \/\/ Output: 1\n        System.out.println(modp(3L, 11L)); \/\/ Output: 8\n        System.out.println(modp(100L, 101L)); \/\/ Output: 1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_51","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ remove_vowels a l'è 'na funsiù che la piglia la stringa e la restituiss stringa senza vocale.     \/\/ >>> removeVowels((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"abcdef\"))\n    \/\/ (\"bcdf\")\n    \/\/ >>> removeVowels((\"aaaaa\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"aaBAA\"))\n    \/\/ (\"B\")\n    \/\/ >>> removeVowels((\"zbcd\"))\n    \/\/ (\"zbcd\")\n    public static String removeVowels(String text) {\n","canonical_solution":"public static String removeVowels(String text) {\n        return text.replaceAll(\"(?i)[aeiou]\", \"\");\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"},{"task_id":"HumanEval_52","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Return true if all numbers in the array list l are below threshold t.     \/\/ >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l))\n    \/\/ (true)\n    \/\/ >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l))\n    \/\/ (false)\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Return true if all numbers in the array list l are below threshold t.\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n        for (Long num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 2L, 4L, 10L)), 100L)); \/\/ true\n        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 20L, 4L, 10L)), 5L));  \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l)) == (false));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (21l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (22l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (11l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_53","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ S'aunt doi numer x e y     \/\/ >>> add((2l), (3l))\n    \/\/ (5l)\n    \/\/ >>> add((5l), (7l))\n    \/\/ (12l)\n    public static long add(long x, long y) {\n","canonical_solution":"return x + y;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(2L, 3L)); \/\/ Outputs: 5\n        System.out.println(add(5L, 7L)); \/\/ Outputs: 12\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_54","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Verifich se dü parol i gh'hann i stess personagg.     \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    \/\/ (false)\n    public static boolean sameChars(String s0, String s1) {\n","canonical_solution":"public static boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = s0.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());\n        Set<Character> set1 = s1.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); \/\/ true\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); \/\/ true\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); \/\/ true\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); \/\/ false\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); \/\/ false\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_55","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render n-th Fibonacci Number.     \/\/ >>> fib((10l))\n    \/\/ (55l)\n    \/\/ >>> fib((1l))\n    \/\/ (1l)\n    \/\/ >>> fib((8l))\n    \/\/ (21l)\n    public static long fib(long n) {\n","canonical_solution":"if (n <= 1) {\n            return n;\n        }\n        long a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"},{"task_id":"HumanEval_56","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ return true if each opening bracket has a corresponding closing bracket.   return true if each opening bracket has a corresponding closing bracket.  return true if each opening bracket has a corresponding closing bracket.     \/ parentesi è una stringa di \"<\" e \">\".     \/\/ >>> correctBracketing((\"<\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"<>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"<<><>>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"><<>\"))\n    \/\/ (false)\n    public static boolean correctBracketing(String brackets) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n\n    public static boolean correctBracketing(String brackets) {\n        int balance = 0;\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                balance++;\n            } else if (ch == '>') {\n                balance--;\n                if (balance < 0) {\n                    return false;\n                }\n            }\n        }\n        return balance == 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_57","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Return true is array list elements are monotonically increasing or decreasing.     \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))))\n    \/\/ (true)\n    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n    \/\/ (false)\n    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n    \/\/ (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ Return true if array list elements are monotonically increasing or decreasing.\n    public static boolean monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return true;\n        }\n        \n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 20L));\n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 20L, 4L, 10L));\n        ArrayList<Long> list3 = new ArrayList<>(Arrays.asList(4L, 1L, 0L, -10L));\n\n        System.out.println(monotonic(list1)); \/\/ true\n        System.out.println(monotonic(list2)); \/\/ false\n        System.out.println(monotonic(list3)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_58","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render sorted unique common elements for two array lists.     \/\/ >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    \/\/ >>> common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n","canonical_solution":"import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    \/\/ Return sorted unique common elements for two array lists.\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        \n        \/\/ Retain only the elements in set1 that are contained in set2\n        set1.retainAll(set2);\n        \n        \/\/ Convert to list and sort\n        ArrayList<Long> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_59","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Render el più grand fattur prim de n. Assumì che n > 1 e l'è minga un prim.     \/\/ >>> largestPrimeFactor((13195l))\n    \/\/ (29l)\n    \/\/ >>> largestPrimeFactor((2048l))\n    \/\/ (2l)\n    public static long largestPrimeFactor(long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long largestPrimeFactor(long n) {\n        long largestFactor = 1;\n        long factor = 2;\n        \n        \/\/ Test for number of 2s that divide n\n        while (n % factor == 0) {\n            largestFactor = factor;\n            n \/= factor;\n        }\n        \n        \/\/ n must be odd at this point, so a skip of 2 is used (i.e., 3, 5, 7, 9, ...)\n        factor = 3;\n        while (factor * factor <= n) {\n            while (n % factor == 0) {\n                largestFactor = factor;\n                n \/= factor;\n            }\n            factor += 2;\n        }\n        \n        \/\/ This condition checks if n is a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n        \n        return largestFactor;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"},{"task_id":"HumanEval_60","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum_to_n l'è 'na funziun che la soma i nümar da 1 a n.     \/\/ >>> sumToN((30l))\n    \/\/ (465l)\n    \/\/ >>> sumToN((100l))\n    \/\/ (5050l)\n    \/\/ >>> sumToN((5l))\n    \/\/ (15l)\n    \/\/ >>> sumToN((10l))\n    \/\/ (55l)\n    \/\/ >>> sumToN((1l))\n    \/\/ (1l)\n    public static long sumToN(long n) {\n","canonical_solution":"public static long sumToN(long n) {\n    return n * (n + 1) \/ 2;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n"},{"task_id":"HumanEval_61","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ return true if each opening bracket has a corresponding closing bracket.   return true if each opening bracket has a corresponding closing bracket.  return true if each opening bracket has a corresponding closing bracket.     \/ parentesi è una stringa di \"(\" e \")\".     \/\/ >>> correctBracketing((\"(\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"()\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"(()())\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\")(()\"))\n    \/\/ (false)\n    public static boolean correctBracketing(String brackets) {\n","canonical_solution":"public static boolean correctBracketing(String brackets) {\n    int balance = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '(') {\n            balance++;\n        } else if (brackets.charAt(i) == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_62","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Rend la derivada de 'sto polinomi in la stessa forma.     \/ xs[0] + xs[1] * x + xs[2] * x^2 + ....     \/ xs raprezentan coeficient de un polinomi.    \/\/ >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))\n    \/\/ >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    \/\/ xs represent coefficients of a polynomial.\n    \/\/ xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    \/\/ Return derivative of this polynomial in the same form.\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_63","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Scriv una funziun per calculà in manera efetiva l'element n-es de la sequenza numerica fibfib.     \/ fibfib{n} == fibfib{n-1} + fibfib{n-2} + fibfib{n-3}    \/ fib fib ((2) == 1     \/ fib fib ((1) == 0     \/ fib fib ((0) == 0     \/ La sequenza numerica FibFib l'è una sequenza simile a la sequenza de Fibbonacci che l'è definida inscì:     \/\/ >>> fibfib((1l))\n    \/\/ (0l)\n    \/\/ >>> fibfib((5l))\n    \/\/ (4l)\n    \/\/ >>> fibfib((8l))\n    \/\/ (24l)\n    public static long fibfib(long n) {\n","canonical_solution":"public static long fibfib(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        \n        long[] fibfibSequence = new long[(int) n + 1];\n        fibfibSequence[0] = 0;\n        fibfibSequence[1] = 0;\n        fibfibSequence[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibSequence[i] = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];\n        }\n        \n        return fibfibSequence[(int) n];\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"},{"task_id":"HumanEval_64","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ vocale, ma domà quand l'è a la fin de la parolla.    \/ Vocali in chèsto cazo i è \"a\", \"e\", \"i\", \"o\", \"u\". In chèsto cazo, \"y\" l'è anca a     \/ a word as input and returns the number of vowels in the string.     \/ Scriv una funziun vowels_count che la gh'ha ona stringa che la rappresenta     \/\/ >>> vowelsCount((\"abcde\"))\n    \/\/ (2l)\n    \/\/ >>> vowelsCount((\"ACEDY\"))\n    \/\/ (3l)\n    public static long vowelsCount(String s) {\n","canonical_solution":"if (s == null || s.isEmpty()) {\n            return 0L;\n        }\n\n        s = s.toLowerCase();\n        long count = 0L;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (\"aeiou\".indexOf(c) >= 0) {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_65","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Se shift > numm de cifre, torna i cifre inverse.    \/ e rend el risultà come una stringa.     \/ Circular shift i digits del intèr x, shift i digits right by shift     \/\/ >>> circularShift((12l), (1l))\n    \/\/ (\"21\")\n    \/\/ >>> circularShift((12l), (2l))\n    \/\/ (\"12\")\n    public static String circularShift(long x, long shift) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static String circularShift(long x, long shift) {\n        String numStr = Long.toString(x);\n        int len = numStr.length();\n\n        \/\/ If shift is greater than or equal to the number of digits, reverse the digits.\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n\n        \/\/ Otherwise, perform a circular shift.\n        int actualShift = (int)(shift % len);\n        StringBuilder shifted = new StringBuilder();\n        shifted.append(numStr.substring(len - actualShift));\n        shifted.append(numStr.substring(0, len - actualShift));\n\n        return shifted.toString();\n    }\n\n    public static void main(String[] args) {\n        \/\/ Test cases\n        System.out.println(circularShift(12L, 1L));  \/\/ Output: \"21\"\n        System.out.println(circularShift(12L, 2L));  \/\/ Output: \"12\"\n        System.out.println(circularShift(12345L, 3L));  \/\/ Output: \"34512\"\n        System.out.println(circularShift(12345L, 5L));  \/\/ Output: \"54321\"\n        System.out.println(circularShift(12345L, 7L));  \/\/ Output: \"54321\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"},{"task_id":"HumanEval_66","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ ASCII codes.     \/ Scriv una funziun che la piglia una stringa come input e la restituiss la soma dei caràter superiur domà'     \/ Task     \/\/ >>> digitSum((\"\"))\n    \/\/ (0l)\n    \/\/ >>> digitSum((\"abAB\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"abcCd\"))\n    \/\/ (67l)\n    \/\/ >>> digitSum((\"helloE\"))\n    \/\/ (69l)\n    \/\/ >>> digitSum((\"woArBld\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"aAaaaXa\"))\n    \/\/ (153l)\n    public static long digitSum(String s) {\n","canonical_solution":"public static long digitSum(String s) {\n        long sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (long) c;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"},{"task_id":"HumanEval_67","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ per l' examble:     \/ in the basket return the number of the mango fruits in the basket. \/ in the basket return the number of the mango fruits in the basket. \/ in the basket return the number of the mango fruits in the basket.     \/ i aranz e i poma e un nümer intèr che al rapreśenta al nümer total di früt     \/ pomme, arance e mango. data la stringa che rappresenta il numero totale di     \/ che i è distribuìi in d' un càsch de früt ch' al gh' è in chèsta càsch .    In questa tarea, ti vegnarà dada ona stringa che la rappresenta on numer de mele e arance.    \/\/ >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    \/\/ (8l)\n    \/\/ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    \/\/ (2l)\n    \/\/ >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    \/\/ (95l)\n    \/\/ >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    \/\/ (19l)\n    public static long fruitDistribution(String s, long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long fruitDistribution(String s, long n) {\n        String[] parts = s.split(\" \");\n        long apples = Long.parseLong(parts[0]);\n        long oranges = Long.parseLong(parts[3]);\n        long mangoes = n - (apples + oranges);\n        return mangoes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"},{"task_id":"HumanEval_68","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi 1:     \/ Se no gh'è nissun valor pari o la lista di array data l'è vuda, torna [].     \/ The plucked node should be returned in an array array list, [smallest_value, its index],     \/ Se i noeud a hinn di piö picin cun l'istess valur pari, torna el noeud che gh'ha l'indice piö picin.     \/ L'acuch de la s'è dovuu vèss el noeud con el valor pari püssee picin.    \/ tò compit a l'é 'd ciapé un dij nòrd e restituì-lo.     \/ \"Given an array array list representing a branch of a tree that has non-negative integer nodes     \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 2:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 3:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ Example 4:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))\n    \/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n    \/\/ so we will choose the first zero, which has the smallest index.\n    \/\/ Constraints:\n    \/\/ * 1 <= nodes.length <= 10000\n    \/\/ * 0 <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n","canonical_solution":"public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n        int index = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEvenValue) {\n                smallestEvenValue = value;\n                index = i;\n            }\n        }\n\n        if (index != -1) {\n            result.add(smallestEvenValue);\n            result.add((long) index);\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_69","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ If no such a value exists, return -1.     \/ La frequenza de un intèr l'è el nùmer de vòt che 'l vegn in de la lista de l'arègg.    \/ zero, e l'ha una frequenza püssee granda o uguale al valor del nümer intèrn propi.    \/ Te gh'è una lista de matrices de intreg pusitiiv che l'è minga vuda.    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    \/\/ (2l)\n    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    \/\/ (3l)\n    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l, (long)4l))))\n    \/\/ (-1l)\n    public static long search(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\n\nclass Problem {\n    public static long search(ArrayList<Long> lst) {\n        HashMap<Long, Integer> frequencyMap = new HashMap<>();\n\n        \/\/ Count frequencies of each number\n        for (Long num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        long result = -1;\n        \n        \/\/ Find the greatest integer that fulfills the condition\n        for (Long num : frequencyMap.keySet()) {\n            int frequency = frequencyMap.get(num);\n            if (frequency >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(4L, 1L, 2L, 2L, 3L, 1L)))); \/\/ 2L\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L)))); \/\/ 3L\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(5L, 5L, 4L, 4L, 4L)))); \/\/ -1L\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l, (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l, (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l, (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l, (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l, (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l, (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) == (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l, (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l, (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l, (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l, (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l, (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l, (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l, (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l, (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l, (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l, (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l, (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l, (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l, (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l, (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l, (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l, (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l, (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l, (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l, (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l)))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_70","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ al màssim di intèr restànt, al mínim e via.    \/ Strange sorting, l'è quand che te scumenci con el valor minimo,     \/ Given array list of integers, return array list in odd order.    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        boolean flag = true; \/\/ true indicates minimum, false indicates maximum\n        \n        while (left <= right) {\n            if (flag) {\n                result.add(lst.get(left));\n                left++;\n            } else {\n                result.add(lst.get(right));\n                right--;\n            }\n            flag = !flag;\n        }\n        \n        return result;\n    }\n    \n    \/\/ Main method for test purposes\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        System.out.println(strangeSortList(list1)); \/\/ Outputs: [1, 4, 2, 3]\n        \n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(5L, 5L, 5L, 5L));\n        System.out.println(strangeSortList(list2)); \/\/ Outputs: [5, 5, 5, 5]\n        \n        ArrayList<Long> list3 = new ArrayList<>();\n        System.out.println(strangeSortList(list3)); \/\/ Outputs: []\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_71","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ che la terza part.     \/ Trè later i fà un triàngol validu quand la soma di du later l'è püssee granda .    \/ Altrimenti ritorna -1     \/ el triangol arrotondà a 2 punt decimal se i trii lati i forma on triangol valid.     \/ Dàt i lunghi dei trè lati d'un triàngol.    \/\/ >>> triangleArea((3l), (4l), (5l))\n    \/\/ (6.0f)\n    \/\/ >>> triangleArea((1l), (2l), (10l))\n    \/\/ (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n","canonical_solution":"public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) \/ 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) \/ 100.0f;\n        } else {\n            return -1f;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); \/\/ Output: 6.0\n        System.out.println(triangleArea(1, 2, 10)); \/\/ Output: -1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == (float)-1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == (float)-1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == (float)-1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == (float)-1l);\n    }\n\n}\n"},{"task_id":"HumanEval_72","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ L'oget q volarà se l'è bilancià (l'è una lista palindroma) e la soma di sò element l'è men de o uguale al mass mass massìm pusìbil w.     \/ Scriv una funziun che la restituiss true se l'ogett q el voeur voeuj, e false se no.     \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l))\n    \/\/ (false)\n    \/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))\n    \/\/ (false)\n    \/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))\n    \/\/ (true)\n    \/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l))\n    \/\/ (true)\n    \/\/ # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n        if (!isPalindromic(q)) {\n            return false;\n        }\n        long sum = 0;\n        for (Long num : q) {\n            sum += num;\n        }\n        return sum <= w;\n    }\n\n    private static boolean isPalindromic(ArrayList<Long> q) {\n        int size = q.size();\n        for (int i = 0; i < size \/ 2; i++) {\n            if (!q.get(i).equals(q.get(size - i - 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(1L, 2L)), 5L)); \/\/ false\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 1L)); \/\/ false\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 9L)); \/\/ true\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L)), 5L)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))), (5l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_73","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ l'è lèst la stèssa vèrs e vèrs. 'N d'un cambiamènt, se pöl cambià 'n elemènt a n'alter elemènt.    \/ a gh'ha de vèss cambià per fà la lista de la matris palindroma.    \/ Dàt un array list array arr de intèr, tróa el nùmer minim de elemènt che     \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n    \/\/ (4l)\n    \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    \/\/ (1l)\n    \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l))))\n    \/\/ (0l)\n    public static long smallestChange(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given an array list arr of integers, finds the minimum number of changes\n    \/\/ to make the list palindromic.\n    public static long smallestChange(ArrayList<Long> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        long changes = 0;\n        \n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n        return changes;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L)))); \/\/ 4\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 4L, 3L, 2L, 2L)))); \/\/ 1\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 2L, 1L)))); \/\/ 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_74","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ se i duu list de matrizz han el stess numm de car, rend la prima lista de matrizz.     \/ total numar de caros in la stringa de la lista de l'array meno de l'altra lista de l'array.    \/ Scriv una funziun che accetta du list de strings e la restituiss la lista de strings che la gh'ha     \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList())))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"4\")))\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n","canonical_solution":"public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n        int charCount1 = lst1.stream().mapToInt(String::length).sum();\n        int charCount2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (charCount1 < charCount2) {\n            return lst1;\n        } else if (charCount2 < charCount1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_75","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ savend che (a) l'è minùra de 100.     \/ e fals se no.    \/ Scriv una funziun che la restituiss vera se el numer dat l'è la moltiplicazion de 3 numer prim     \/\/ >>> isMultiplyPrime((30l))\n    \/\/ (true)\n    \/\/ 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long a) {\n","canonical_solution":"if (a >= 2 && a < 8) return false;\n\n        List<Integer> primes = sieveOfEratosthenes(100);\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    long product = (long) primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true;\n                    }\n                    if (product > a) {\n                        break;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private static List<Integer> sieveOfEratosthenes(int limit) {\n        boolean[] isPrime = new boolean[limit + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n        for (int i = 2; i * i <= limit; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= limit; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= limit; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_76","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/x l'è una potenza de n se n**int=x     \/ potenza di n e false in altri casi.    \/ Vos dovè a scriv una funziun che la torna vera se un nümer x l'è un nümer simpl     \/\/ >>> isSimplePower((1l), (4l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((2l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((8l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((3l), (2l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((3l), (1l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((5l), (3l))\n    \/\/ (false)\n    public static boolean isSimplePower(long x, long n) {\n","canonical_solution":"public static boolean isSimplePower(long x, long n) {\n        if (x < 1 || n < 1) {\n            return false;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        long power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isSimplePower(1l, 4l)); \/\/ true\n        System.out.println(isSimplePower(2l, 2l)); \/\/ true\n        System.out.println(isSimplePower(8l, 2l)); \/\/ true\n        System.out.println(isSimplePower(3l, 2l)); \/\/ false\n        System.out.println(isSimplePower(3l, 1l)); \/\/ false\n        System.out.println(isSimplePower(5l, 3l)); \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_77","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Nota: te pöl assumì che l'input l'è semper valid.    \/ se 'sta ingeger l'è 'n cubo de 'n quaj numm de intèr.    \/ Scriv una funziun che la piglia un intèr a e la restituiss true     \/\/ >>> iscube((1l))\n    \/\/ (true)\n    \/\/ >>> iscube((2l))\n    \/\/ (false)\n    \/\/ >>> iscube((-1l))\n    \/\/ (true)\n    \/\/ >>> iscube((64l))\n    \/\/ (true)\n    \/\/ >>> iscube((0l))\n    \/\/ (true)\n    \/\/ >>> iscube((180l))\n    \/\/ (false)\n    public static boolean iscube(long a) {\n","canonical_solution":"public static boolean iscube(long a) {\n        if (a < 0) {\n            a = -a;\n        }\n        long cubeRoot = Math.round(Math.cbrt(a));\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_78","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ e i sìmbol A,B,C,D,E,F i è sèmper in maiuscola.     \/ Nota: se pò assumè che l'input l'è semper giust o stringa vuda,     \/ B (= decimal 11), D (= decimal 13).     \/ Alura al gh'à da determinà un nùmer di segónd díg: 2, 3, 5, 7,     \/ I nùmer prim i è 2, 3, 5, 7, 11, 13, 17,...     \/ I cifre esadecimale hinn 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.     \/ piö grann de 1 che l'è minga 'l prodot de duu nümar naturàl piö püssee piscinin).    \/ digits that are primes (a prim, or a prime, is a natural number)    \/ un numeral esadecimale come stringa e conta el numeral de numeral esadecimale     \/ Te gh'è staa dicc de scriv una funzion che la riceve     \/\/ >>> hexKey((\"AB\"))\n    \/\/ (1l)\n    \/\/ >>> hexKey((\"1077E\"))\n    \/\/ (2l)\n    \/\/ >>> hexKey((\"ABED1A33\"))\n    \/\/ (4l)\n    \/\/ >>> hexKey((\"123456789ABCDEF0\"))\n    \/\/ (6l)\n    \/\/ >>> hexKey((\"2020\"))\n    \/\/ (2l)\n    public static long hexKey(String num) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static long hexKey(String num) {\n        \/\/ Set of hexadecimal \"digits\" that are prime numbers.\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        \/\/ Count prime digits in the hexadecimal number.\n        long count = 0;\n        for (char ch : num.toCharArray()) {\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \/\/ You can include this main method for testing the function\n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\")); \/\/ Output: 1\n        System.out.println(hexKey(\"1077E\")); \/\/ Output: 2\n        System.out.println(hexKey(\"ABED1A33\")); \/\/ Output: 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); \/\/ Output: 6\n        System.out.println(hexKey(\"2020\")); \/\/ Output: 2\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_79","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ I carater extra i è lì per aiutà col format.     \/ A gh'è un par de carater \"db\" in di piö in de la stringa.    \/ numeral. Ogni carater in la stringa sarà \"0\" o \"1\".    \/ binary format. La funziun la dovariss rend una stringa, con ogni carater che la rapreentiss un binari     \/ Te vegnarà dà un numer in forma decimal e el tò compit a l'è de convertì in     \/\/ >>> decimalToBinary((15l))\n    \/\/ (\"db1111db\")\n    \/\/ >>> decimalToBinary((32l))\n    \/\/ (\"db100000db\")\n    public static String decimalToBinary(long decimal) {\n","canonical_solution":"public static String decimalToBinary(long decimal) {\n        \/\/ Convert the decimal number to binary string\n        String binaryStr = Long.toBinaryString(decimal);\n        \/\/ Add 'db' at the beginning and the end of the binary string\n        return \"db\" + binaryStr + \"db\";\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"},{"task_id":"HumanEval_80","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ Una stringa l'è hapjava se la sò longhesa l'è al men de 3 e ogni 3 letere consecutive hinn distinte     \/ Vos tâche est de vérifier si la stringa est hapjava ou pas.    \/ Te gh'è dà ona stringa de s.     \/\/ >>> isHappy((\"a\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"aa\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"aabb\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"adb\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"xyy\"))\n    \/\/ (false)\n    public static boolean isHappy(String s) {\n","canonical_solution":"public static boolean isHappy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_81","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ 0.0 E     \/ > 0.0 D-     \/ > 0,7 D     \/ > 1.0 D+     \/ > 1.3 C-     \/ > 1.7 C     \/ > 2.0 C+     \/ > 2.3 B-     \/ > 2.7 B     \/ > 3.0 B+     \/ > 3.3 A-     \/ > 3.7 A     \/ 4.0 A+     \/ GPA.  Letter grade     \/ a funziun che la pöl fà saltà 'na lista de grades de letere de 'na matris doprànd la tabèla chì:     \/ Te l' ha dàt na lista de la media de certi studenti e te gh' hai da scrivì    L'unic problema l'è che l'ha perdüü el codegh che l'ha druvaa per la valutazion.    \/ a i studënć. La maestra à fat sü süa pròpria algoritma por la notaziun.     \/ L'è l'ùrtima setèmber del semestre e la maestra la gh'ha de dà i not.    \/\/ >>> gradeEquation((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n        ArrayList<String> letterGrades = new ArrayList<>();\n        for (Float gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else if (gpa == 0.0) {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Float> gpas = new ArrayList<>();\n        gpas.add(4.0f);\n        gpas.add(3.0f);\n        gpas.add(1.7f);\n        gpas.add(2.0f);\n        gpas.add(3.5f);\n        ArrayList<String> grades = numericalLetterGrade(gpas);\n        System.out.println(grades);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"D-\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_82","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ lunghess a l'è un nümer prim o fals altrimenti     \/ Scriv una funziun che la piglia una stringa e la restituiss true se la stringa     \/\/ >>> primeLength((\"Hello\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"abcdcba\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"kittens\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"orange\"))\n    \/\/ (false)\n    public static boolean primeLength(String string) {\n","canonical_solution":"public static boolean primeLength(String string) {\n    int length = string.length();\n    if (length <= 1) return false;\n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_83","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ intèr positiv che scumìsen o finìssen cun 1.     \/ Dàt un intèrn pusìv n, riturnà el cuntadù di nùmer de n-ciàgra     public static long startsOneEnds(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ Given a positive integer n, return the count of the numbers of n-digit\n    \/\/ positive integers that start or end with 1.\n    public static long startsOneEnds(long n) {\n        if (n == 1) return 1; \/\/ Only the number '1' is a one-digit number that starts or ends with 1.\n\n        \/\/ Total numbers with n digits: 9 * (10^(n-1))\n        long totalNDigitNumbers = 9 * (long)Math.pow(10, n - 1);\n\n        \/\/ Numbers that start with 1 and are n-digits: 1 * (10^(n-1))\n        long startsWithOne = (long)Math.pow(10, n - 1);\n\n        \/\/ Numbers that end with 1: 9 * (10^(n-1))\/10\n        long endsWithOne = totalNDigitNumbers \/ 10;\n\n        \/\/ Since numbers starting and ending with 1 are counted twice, we subtract the overlap.\n        return startsWithOne + endsWithOne - 1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(startsOneEnds(1)); \/\/ Expected output: 1\n        System.out.println(startsOneEnds(2)); \/\/ Expected output: 19\n        System.out.println(startsOneEnds(3)); \/\/ Expected output: 190\n        System.out.println(startsOneEnds(4)); \/\/ Expected output: 1900\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"},{"task_id":"HumanEval_84","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ Dàt un intèr positiv N, rend la soma de i sò dígh in binari.     \/\/ >>> solve((1000l))\n    \/\/ (\"1\")\n    \/\/ >>> solve((150l))\n    \/\/ (\"110\")\n    \/\/ >>> solve((147l))\n    \/\/ (\"1100\")\n    \/\/ Variables:\n    \/\/ @N integer\n    \/\/ Constraints: 0 ≤ N ≤ 10000.\n    \/\/ Output:\n    \/\/ a string of binary number\n    public static String solve(long N) {\n","canonical_solution":"public static String solve(long N) {\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N \/= 10;\n        }\n        return Long.toBinaryString(sum);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"},{"task_id":"HumanEval_85","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Given a non-empty array list of integers lst. add the even elements that are at odd indices..     \/\/ >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))\n    \/\/ (2l)\n    public static long add(ArrayList<Long> lst) {\n","canonical_solution":"long sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)88l)))) == (88l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l, (long)8l)))) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_86","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ Nota: Te dovariss tegnì l'ordin de le paròle e i spazi bianch in de la frase.    \/ ordini ascendenti basati su valuri ASCII.    \/ i è sostituìcc de na paròla növa indöi tücc i caràter i è stacc in     \/ Ordenazion de stringa, l'è una stringa indova tutt i paroll (separàcc de spazzi)     \/ Scriv una funziun che la piglia una stringa e la restituiss una version ordenaa de la stringa.     \/\/ >>> antiShuffle((\"Hi\"))\n    \/\/ (\"Hi\")\n    \/\/ >>> antiShuffle((\"hello\"))\n    \/\/ (\"ehllo\")\n    \/\/ >>> antiShuffle((\"Hello World!!!\"))\n    \/\/ (\"Hello !!!Wdlor\")\n    public static String antiShuffle(String s) {\n","canonical_solution":"public static String antiShuffle(String s) {\n    StringBuilder result = new StringBuilder();\n    String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\");\n    \n    for (String word : words) {\n        if (word.trim().isEmpty()) {\n            result.append(word);\n        } else {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n        }\n    }\n    \n    return result.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"},{"task_id":"HumanEval_87","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Anca, ordinè i coordinà de la fila per colonne in ordine decrescent.    \/ Sortì i coordinà in primma per righe in ordine ascendente.    \/ ogni coppia l'è una coordinada - (riga, colonne), che la scumenza con 0.     \/ e torna l'elenco di coppie di array, [(x1, y1), (x2, y2) ...] tal che     \/ Given lst, and integer x, find integer x in the array list,     \/ ogni riga la pöl cuntènn un nümer diferent de colòne.    \/ che l'è simil a la matris, però, a differenza di matris,     \/ Te vegn dat na data 2 dimensional, com na lista de matrices anidadas,     \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))\n    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList()))\n    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n","canonical_solution":"public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\n        for (long i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get((int)i);\n            for (long j = 0; j < row.size(); j++) {\n                if (row.get((int)j) == x) {\n                    result.add(Pair.with(i, j));\n                }\n            }\n        }\n\n        result.sort(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                int rowComparison = Long.compare(p1.getValue0(), p2.getValue0());\n                if (rowComparison != 0) {\n                    return rowComparison;\n                } else {\n                    return Long.compare(p2.getValue1(), p1.getValue1());  \/\/ Descending order by column\n                }\n            }\n        });\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l), (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n    }\n\n}\n"},{"task_id":"HumanEval_88","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ * don't change the given array array list.     \/ Nota:     \/ o ordinà in ordine decrescente se la somma ((primo valore indice, ultimo valore indice) è pari.     \/ ti sares sortì la lista de matrices de matrices danta in ordinazion ascendenta se la soma (il prim valor de l'indice, l'ultim valor de l'indice) l'è dispari,     \/ Given an array array list of non-negative integers, return a cojava of the given array array list after sorting,     \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>(array);\n        }\n\n        long firstValue = array.get(0);\n        long lastValue = array.get(array.size() - 1);\n        long sum = firstValue + lastValue;\n\n        ArrayList<Long> result = new ArrayList<>(array);\n        \n        if (sum % 2 == 0) {\n            \/\/ Sort in descending order\n            result.sort(Collections.reverseOrder());\n        } else {\n            \/\/ Sort in ascending order\n            Collections.sort(result);\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l, (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_89","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ sposta giù per due moltiplicato per due posti.     \/ L'alfabet al dovariss vesser girad in manera che i leter     \/ rend una stringa crittografada con l'alfabet che l'è girad.     \/ Creà 'na funsiù criptàda che la piglia 'na strìnga come argumènt e     \/\/ >>> encrypt((\"hi\"))\n    \/\/ (\"lm\")\n    \/\/ >>> encrypt((\"asdfghjkl\"))\n    \/\/ (\"ewhjklnop\")\n    \/\/ >>> encrypt((\"gf\"))\n    \/\/ (\"kj\")\n    \/\/ >>> encrypt((\"et\"))\n    \/\/ (\"ix\")\n    public static String encrypt(String s) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Create a function encrypt that takes a string as an argument and returns\n    \/\/ a string encrypted with the alphabet being rotated by 2 * 2 = 4 places.\n    public static String encrypt(String s) {\n        StringBuilder encryptedString = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                char shifted = (char) ((c - 'a' + 4) % 26 + 'a');\n                encryptedString.append(shifted);\n            } else if (Character.isUpperCase(c)) {\n                char shifted = (char) ((c - 'A' + 4) % 26 + 'A');\n                encryptedString.append(shifted);\n            } else {\n                \/\/ If the character is not a letter, append it unchanged.\n                encryptedString.append(c);\n            }\n        }\n        return encryptedString.toString();\n    }\n\n    public static void main(String[] args) {\n        \/\/ Test examples\n        System.out.println(encrypt(\"hi\"));          \/\/ Output: lm\n        System.out.println(encrypt(\"asdfghjkl\"));   \/\/ Output: ewhjklnop\n        System.out.println(encrypt(\"gf\"));          \/\/ Output: kj\n        System.out.println(encrypt(\"et\"));          \/\/ Output: ix\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n"},{"task_id":"HumanEval_90","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Return null if there's no such element.     \/ Scriv una funziun next_smallest (() che la restituiss el segond element püssee piscinin de la lista de matrices.     \/ Te gh'è dà ona lista de intreg de array array.    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    \/\/ Optional.of(2l)\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))\n    \/\/ Optional.of(2l)\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Optional.empty()\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l))))\n    \/\/ Optional.empty()\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Set<Long> uniqueSet = new HashSet<>(lst);\n        List<Long> uniqueList = new ArrayList<>(uniqueSet);\n        if (uniqueList.size() < 2) {\n            return Optional.empty();\n        }\n\n        Collections.sort(uniqueList);\n        return Optional.of(uniqueList.get(1));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(1l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l, (long)34l, (long)12l, (long)-45l)))).equals(Optional.of(-35l)));\n    }\n\n}\n"},{"task_id":"HumanEval_91","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ I fras i è delimidàcc con \"\", \"?\" o \"!\"    La noia l'è una frasi che la scumìcia con la paròla \"I\".    \/ Te vegnarà dà una sequenza de parolle, e el tò compit l'è de contà el nümer.    \/\/ >>> isBored((\"Hello world\"))\n    \/\/ (0l)\n    \/\/ >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    \/\/ (1l)\n    public static long isBored(String S) {\n","canonical_solution":"long boredomCount = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_92","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ Render false in any other cases.     \/ Rende true se un di numer l'è ugua a la soma di alter duu, e tutt i numer hinn intger.     \/ Creà na funsiun ch'la piglia 3 nùmer.    \/\/ >>> anyInt((float)5l, (float)2l, (float)7l)\n    \/\/ (true)\n    \/\/ >>> anyInt((float)3l, (float)2l, (float)2l)\n    \/\/ (false)\n    \/\/ >>> anyInt((float)3l, (float)-2l, (float)1l)\n    \/\/ (true)\n    \/\/ >>> anyInt((3.6f), (-2.2f), (float)2l)\n    \/\/ (false)\n    public static boolean anyInt(float x, float y, float z) {\n","canonical_solution":"public static boolean anyInt(float x, float y, float z) {\n        \/\/ Check if any of the numbers is the sum of the other two\n        \/\/ To ensure all are integers, they must be equal to their integer counterpart\n        if (x == (int) x && y == (int) y && z == (int) z) {\n            \/\/ Convert numbers to integers\n            int xi = (int) x;\n            int yi = (int) y;\n            int zi = (int) z;\n            return (xi == yi + zi) || (yi == xi + zi) || (zi == xi + yi);\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(anyInt((float)2l, (float)3l, (float)1l) == (true));\n    assert(anyInt((2.5f), (float)2l, (float)3l) == (false));\n    assert(anyInt((1.5f), (float)5l, (3.5f)) == (false));\n    assert(anyInt((float)2l, (float)6l, (float)2l) == (false));\n    assert(anyInt((float)4l, (float)2l, (float)2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt((float)-4l, (float)6l, (float)2l) == (true));\n    assert(anyInt((float)2l, (float)1l, (float)1l) == (true));\n    assert(anyInt((float)3l, (float)4l, (float)7l) == (true));\n    assert(anyInt((3.0f), (float)4l, (float)7l) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_93","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Assumì sö le lètre.    \/ vocale in l'alfabet ingles.    \/ al messagg con la lettera che la vegn 2 post prima de quella     \/ in manera che la cambia cas de tüte le lèttere, la sostituiss tüte le vocale in     \/ Scriv una funziun che la piglia un messagg, e la la codifica in tal     \/\/ >>> encode((\"test\"))\n    \/\/ (\"TGST\")\n    \/\/ >>> encode((\"This is a message\"))\n    \/\/ (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n","canonical_solution":"public static String encode(String message) {\n    StringBuilder encodedMessage = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLetter(c)) {\n            \/\/ Swap case\n            char swappedCaseChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\n            \/\/ Replace vowels\n            if (\"AEIOUaeiou\".indexOf(c) != -1) {\n                \/\/ Determine the offset for vowel replacement\n                char replacementChar = (char) (swappedCaseChar + 2);\n                encodedMessage.append(replacementChar);\n            } else {\n                encodedMessage.append(swappedCaseChar);\n            }\n        }\n    }\n    return encodedMessage.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"},{"task_id":"HumanEval_94","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Bisogna trovà el valor prim piö gròss e rend la soma di sò cifre.     \/ Te gh'è dà ona lista de intreg de array array.    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l))))\n    \/\/ (10l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l))))\n    \/\/ (25l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l))))\n    \/\/ (13l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l))))\n    \/\/ (11l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l))))\n    \/\/ (3l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l))))\n    \/\/ (7l)\n    public static long skjkasdkd(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static boolean isPrime(long n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    public static long sumOfDigits(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n \/= 10;\n        }\n        return sum;\n    }\n\n    public static long skjkasdkd(ArrayList<Long> lst) {\n        long largestPrime = -1;\n\n        for (long num : lst) {\n            if (isPrime(num)) {\n                largestPrime = Math.max(largestPrime, num);\n            }\n        }\n\n        return largestPrime != -1 ? sumOfDigits(largestPrime) : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(skjkasdkd(new ArrayList<Long>(Arrays.asList(0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l)))) == (10l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l)))) == (25l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l)))) == (13l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l)))) == (11l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l)))) == (3l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l)))) == (7l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l, (long)123456l, (long)127l, (long)7l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)127l, (long)97l, (long)8192l)))) == (10l));\n    }\n\n}\n"},{"task_id":"HumanEval_95","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ La funziun la dovariss rendì false se la mappa hash data l'è föra.     \/ case or all keys are strings in upper case, else return false.     \/ Given a hash map, return true if all keys are strings in lower     \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n    \/\/ (true)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    \/\/ (true)\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n","canonical_solution":"import java.util.HashMap;\n\nclass Problem {\n    public static boolean checkDictCase(HashMap<String, String> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (String key : dict.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                allLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        HashMap<String, String> map1 = new HashMap<>(Map.of(\"a\", \"apple\", \"b\", \"banana\"));\n        HashMap<String, String> map2 = new HashMap<>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"));\n        HashMap<String, String> map3 = new HashMap<>(Map.of(\"a\", \"apple\", \"8\", \"banana\", \"A\", \"apple\"));\n        HashMap<String, String> map4 = new HashMap<>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"));\n        HashMap<String, String> map5 = new HashMap<>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"));\n\n        System.out.println(checkDictCase(map1)); \/\/ true\n        System.out.println(checkDictCase(map2)); \/\/ false\n        System.out.println(checkDictCase(map3)); \/\/ false\n        System.out.println(checkDictCase(map4)); \/\/ false\n        System.out.println(checkDictCase(map5)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_96","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ per esempiu:     \/ intèr che i è nùmer prim e minùri de n.     \/ Implementà una funziun che la piglia un nümer intèrn minga negativ e la restituiss una lista de matrices de matrices de la prima n     \/\/ >>> countUpTo((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    \/\/ >>> countUpTo((11l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))\n    \/\/ >>> countUpTo((0l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> countUpTo((20l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))\n    \/\/ >>> countUpTo((1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> countUpTo((18l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))\n    public static ArrayList<Long> countUpTo(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    \n    public static ArrayList<Long> countUpTo(long n) {\n        ArrayList<Long> primes = new ArrayList<>();\n        for (long i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n    \n    private static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (long i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countUpTo((5l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(countUpTo((6l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((7l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))));\n    assert(countUpTo((0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((22l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))));\n    assert(countUpTo((1l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(countUpTo((47l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l)))));\n    assert(countUpTo((101l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l, (long)47l, (long)53l, (long)59l, (long)61l, (long)67l, (long)71l, (long)73l, (long)79l, (long)83l, (long)89l, (long)97l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_97","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Assumì che l'input l'è semper valid.    \/ el prodot de i sò cifre unitari.     \/ Completà la funsiù che la piglia dò intèr e la torna     \/\/ >>> multiply((148l), (412l))\n    \/\/ (16l)\n    \/\/ >>> multiply((19l), (28l))\n    \/\/ (72l)\n    \/\/ >>> multiply((2020l), (1851l))\n    \/\/ (0l)\n    \/\/ >>> multiply((14l), (-15l))\n    \/\/ (20l)\n    public static long multiply(long a, long b) {\n","canonical_solution":"long unitDigitA = Math.abs(a % 10);\n        long unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_98","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ Dàt una stringa s, contà el nümer de vocale maiuscole in indici pari.     \/\/ >>> countUpper((\"aBCdEf\"))\n    \/\/ (1l)\n    \/\/ >>> countUpper((\"abcdefg\"))\n    \/\/ (0l)\n    \/\/ >>> countUpper((\"dBBE\"))\n    \/\/ (0l)\n    public static long countUpper(String s) {\n","canonical_solution":"long count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (\"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_99","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ da du intèr, arrotondàda via dal zér.     \/ e torna l'intèr piö visin a lü. Se l'è 'l nùmer equidistant     \/ Creà 'na funsiù che la ciappa 'n valor (string) che 'l rapreśenta 'n nùmer     \/\/ >>> closestInteger((\"10\"))\n    \/\/ (10l)\n    \/\/ >>> closestInteger((\"15.3\"))\n    \/\/ (15l)\n    \/\/ Note:\n    \/\/ Rounding away from zero means that if the given number is equidistant\n    \/\/ from two integers, the one you should return is the one that is the\n    \/\/ farthest from zero. For example closest_integer(\"14.5\") should\n    \/\/ return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long closestInteger(String value) {\n","canonical_solution":"public static long closestInteger(String value) {\n        double number = Double.parseDouble(value);\n        long rounded = Math.round(number);\n        if (Math.abs(number - rounded) == 0.5) {\n            \/\/ Rounding away from zero\n            if (number > 0) {\n                return rounded + 1;\n            } else {\n                return rounded - 1;\n            }\n        }\n        return rounded;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));   \/\/ 10\n        System.out.println(closestInteger(\"15.3\")); \/\/ 15\n        System.out.println(closestInteger(\"14.5\")); \/\/ 15\n        System.out.println(closestInteger(\"-14.5\"));\/\/ -15\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_100","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ i rappresenta el numer de piere in del livel (i+1).    \/ Rende il numero di pietra in ogni livello in un array array list, dove elemento a indice     \/ - l'è el pròssim nümer pari se n l'è pari.     \/ - l'è el pròssim nümer dispari se n l'è dispari.     \/ El nümer de piö de piö in del livel prosüm a l'è:     \/ Al prim livel al gh'ha n pié.    \/ Dàt un nùmer intèrn pusìv n, te gh'è de fà 'na pila de n livel de pèste.    \/\/ >>> makeAPile((3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))\n    public static ArrayList<Long> makeAPile(long n) {\n","canonical_solution":"public static ArrayList<Long> makeAPile(long n) {\n        ArrayList<Long> pile = new ArrayList<>();\n        long stones = n;\n        boolean isOdd = stones % 2 != 0;\n\n        for (int i = 0; i < n; i++) {\n            pile.add(stones);\n            if (isOdd) {\n                stones += 2; \/\/ Next odd number\n            } else {\n                stones += 2; \/\/ Next even number\n            }\n        }\n\n        return pile;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(makeAPile((3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))));\n    assert(makeAPile((4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)10l)))));\n    assert(makeAPile((5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)11l, (long)13l)))));\n    assert(makeAPile((6l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l)))));\n    assert(makeAPile((8l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)18l, (long)20l, (long)22l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_101","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ per spartì la stringa in paròle e rend una lista de paròle de array array.     \/ Te sarà dà na fila de paròle separàde da virgule o spazi.    \/\/ >>> wordsString((\"Hi, my name is John\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    \/\/ >>> wordsString((\"One, two, three, four, five, six\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.split(\"[,\\\\s]+\");\n        return new ArrayList<String>(Arrays.asList(words));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, my name is John\"));\n        System.out.println(wordsString(\"One, two, three, four, five, six\"));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(wordsString((\"Hi, my name is John\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"Hi, my name\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\")))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(wordsString((\"ahmed     , gamal\")).equals((new ArrayList<String>(Arrays.asList((String)\"ahmed\", (String)\"gamal\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_102","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ no gh'è minga quell numer, alura la funziun la dovariss rend -1.    \/ l'è el piö grand nümer intèrn pari che l'è in del interval [x, y] inclusif.    \/ Chesta funziun la piglia duu numer pusitif x e y e la restituiss el     \/\/ >>> chooseNum((12l), (15l))\n    \/\/ (14l)\n    \/\/ >>> chooseNum((13l), (12l))\n    \/\/ (-1l)\n    public static long chooseNum(long x, long y) {\n","canonical_solution":"if (x > y) {\n            return -1l;\n        }\n        \n        long maxEven = y % 2 == 0 ? y : y - 1;\n        if (maxEven >= x) {\n            return maxEven;\n        } else {\n            return -1l;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n"},{"task_id":"HumanEval_104","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ Nota: La lista de matrices tornada la va ordinada in ordin crescent.    \/ elements that don't have any even digit. \/    \/ Given an array array list of positive integers x. return a sorted array list of all     \/\/ >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))\n    \/\/ >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n","canonical_solution":"public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n        return x.stream()\n                .filter(num -> hasNoEvenDigits(num))\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static boolean hasNoEvenDigits(long num) {\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num \/= 10;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)12345l, (long)2033l, (long)111l, (long)151l)))).equals((new ArrayList<Long>(Arrays.asList((long)111l, (long)151l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)135l, (long)103l, (long)31l)))).equals((new ArrayList<Long>(Arrays.asList((long)31l, (long)135l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_105","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ \"Unu\", \"Due\", \"Trè\", \"Quattrè\", \"Cinque\", \"Sessè\", \"Sèt\", \"Otto\", \"Nove\".     \/ inversa la lista de matrices resultant, e pò sostituì ogni cifre col sò nomm corrispondent de     \/ Given an array array list of integers, sort the integers that are between 1 and 9 inclusive,     \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))\n    \/\/ If the array array list is empty, return an empty array array list:\n    \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ If the array array list has any strange number ignore it:\n    \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"One\")))\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n        List<String> names = Arrays.asList(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        ArrayList<Long> filtered = new ArrayList<>();\n\n        \/\/ Filter the numbers between 1 and 9\n        for (Long num : arr) {\n            if (num >= 1 && num <= 9) {\n                filtered.add(num);\n            }\n        }\n\n        \/\/ Sort the filtered numbers\n        Collections.sort(filtered);\n\n        \/\/ Reverse the sorted list\n        Collections.reverse(filtered);\n\n        \/\/ Replace each number with its corresponding name\n        ArrayList<String> result = new ArrayList<>();\n        for (Long num : filtered) {\n            result.add(names.get(num.intValue()));\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l)))).equals((new ArrayList<String>(Arrays.asList((String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)3l, (long)2l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Three\", (String)\"Two\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)9l, (long)4l, (long)8l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Nine\", (String)\"Eight\", (String)\"Four\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_106","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ el fatoriàl de i l'è la moltiplicaziù dei numer da 1 a i (1 * 2 * ... * i).    \/ i part dal 1.     \/ o la soma di nùmer dal 1 al i altrimenti.     \/ e torna una lista di array array de dimensiun n, tal che el valor de l'element in l'indice i l'è el fatorial de i se i l'è pari     \/ Implementè la funziun f che la piglia n come parameter,     \/\/ >>> f((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        \n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumUpTo(i));\n            }\n        }\n        \n        return result;\n    }\n\n    private static long factorial(long num) {\n        long result = 1;\n        for (long i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private static long sumUpTo(long num) {\n        return num * (num + 1) \/ 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(f(5));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(f((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))));\n    assert(f((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l, (long)720l, (long)28l)))));\n    assert(f((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(f((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_107","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi 1:     \/ intèr palindròm che i càpan drèto al ragg ((1, n), inclùśo.     \/ Given a positive integer n, return a pair that has the number of even and odd     \/\/ >>> evenOddPalindrome((3l))\n    \/\/ (Pair.with(1l, 2l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    \/\/ Example 2:\n    \/\/ >>> evenOddPalindrome((12l))\n    \/\/ (Pair.with(4l, 6l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    \/\/ Note:\n    \/\/ 1. 1 <= n <= 10^3\n    \/\/ 2. returned pair has the number of even and odd integer palindromes respectively.\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n        long evenCount = 0;\n        long oddCount = 0;\n        \n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        return Pair.with(evenCount, oddCount);\n    }\n    \n    private static boolean isPalindrome(long number) {\n        long original = number;\n        long reversed = 0;\n        \n        while (number > 0) {\n            long digit = number % 10;\n            reversed = reversed * 10 + digit;\n            number \/= 10;\n        }\n        \n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddPalindrome(3));  \/\/ Output: (Pair.with(1l, 2l))\n        System.out.println(evenOddPalindrome(12)); \/\/ Output: (Pair.with(4l, 6l))\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(evenOddPalindrome((123l)).equals((Pair.with(8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals((Pair.with(1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals((Pair.with(6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals((Pair.with(5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals((Pair.with(4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals((Pair.with(0l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_108","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ p.e. -123 l'ha i numer segnà -1, 2 e 3.     \/ Se un numer a l'è negativ, alura la sò prima cifara segna la sarà negativa:     \/ el numer de element che gh'ha la soma di cifre > 0.     \/ Scriv una funziun count_nums che la piglia una lista de matrices de interi e la torna     \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (0l)\n    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n    \/\/ (1l)\n    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l))))\n    \/\/ (3l)\n    public static long countNums(ArrayList<Long> arr) {\n","canonical_solution":"public static long countNums(ArrayList<Long> arr) {\n        return arr.stream().filter(num -> {\n            long sumOfDigits = 0;\n            long n = Math.abs(num);\n            while (n > 0) {\n                sumOfDigits += n % 10;\n                n \/= 10;\n            }\n            return (num < 0 ? sumOfDigits - 2 * (num % 10) : sumOfDigits) > 0;\n        }).count();\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> inputs1 = new ArrayList<Long>(Arrays.asList());\n        ArrayList<Long> inputs2 = new ArrayList<Long>(Arrays.asList(-1L, 11L, -11L));\n        ArrayList<Long> inputs3 = new ArrayList<Long>(Arrays.asList(1L, 1L, 2L));\n\n        System.out.println(countNums(inputs1)); \/\/ Output: 0\n        System.out.println(countNums(inputs2)); \/\/ Output: 1\n        System.out.println(countNums(inputs3)); \/\/ Output: 3\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_109","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ Nota: La lista de matrices dada la gh'ha garantitaa di element unic.    \/ If the given array array list is empty then return true.     \/ then return true else return false.     \/ Se l'è possibil de ottene la lista de matrices ordinada per fà l'operazion de sora     \/ la posizion de partenza in la lista di matrizz, cioè l'indice 0.    \/ posizion in la direzion giusta. L'ultim element de la lista de array array sarà spostà a     \/ Un'operaziun de spostament a drita la vol dì spostà tücc i element de la lista di matrici de matrici de un.    \/ Te ghè permès de fà l'operazion de spostament a destra on quai numer de volt.    \/ la seguenta operazion in la lista di matrizz:     \/ l'è pusibil de fà una lista de matrices ordinada in ordine no decrescent per fà     \/ numm in la lista di matrici de matrici i sarà ordinad a la casualità.    \/ We have an array array list 'arr' of N integers arr[1], arr[2], ..., arr[N].The     \/\/ >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\n    \/\/ (true)\n    \/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n    \/\/ be achieved for the given array array list.\n    \/\/ >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))\n    \/\/ (false)\n    \/\/ Explanation:It is not possible to get non-decreasing order for the given\n    \/\/ array array list by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        \n        int n = arr.size();\n        \n        \/\/ Find the number of increasing points\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                count++;\n            }\n        }\n        \n        \/\/ Check the end and start to be a breaking point\n        if (arr.get(n - 1) > arr.get(0)) {\n            count++;\n        }\n        \n        \/\/ If there is at most one such transition, it can be rotated\n        return count <= 1;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_110","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ Altrimenti, torna \"NO\".    \/ all elements of lst1 to be even, return \"YES\".     \/ Se l'è possibil scambià di element tra lst1 e lst2 per fà     \/ No gh'è minga on limit al nümer di element scambià tra lst1 e lst2.     \/ tra di lor per fà lst1 una lista di matrici di matrici di numari pari.    \/ e determina se l'è pusibil fà un scambi d'elementi     \/ In chèsto problema, ti te implemèntarè 'na funsiù che la ciappa dò list de matrici de nùmer,     \/\/ >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (\"YES\")\n    \/\/ >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l))))\n    \/\/ (\"NO\")\n    \/\/ It is assumed that the input array lists will be non-empty.\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n        \/\/ Check if all elements in lst1 are already even\n        boolean allEvenInLst1 = lst1.stream().allMatch(num -> num % 2 == 0);\n        if (allEvenInLst1) {\n            return \"YES\";\n        }\n\n        \/\/ Check if there is at least one even number in lst2\n        boolean hasEvenInLst2 = lst2.stream().anyMatch(num -> num % 2 == 0);\n        if (hasEvenInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        ArrayList<Long> lst2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        System.out.println(exchange(lst1, lst2));  \/\/ Output: \"YES\"\n\n        lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        lst2 = new ArrayList<>(Arrays.asList(1L, 5L, 3L, 4L));\n        System.out.println(exchange(lst1, lst2));  \/\/ Output: \"NO\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)6l, (long)1l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)5l, (long)1l, (long)1l, (long)1l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)100l, (long)200l))), (new ArrayList<Long>(Arrays.asList((long)200l, (long)200l)))).equals((\"YES\")));\n    }\n\n}\n"},{"task_id":"HumanEval_111","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Se plü leteres à la medema ocaziun, torna tüti.    \/ de la lettera con la maggior quantità di ripetizioni e che conteneva il conteggio corrispondente.    \/ Given a string representing a space separated lowercase letters, return a hash map     \/\/ >>> histogram((\"a b c\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l)))\n    \/\/ >>> histogram((\"a b b a\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    \/\/ >>> histogram((\"a b c a b\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    \/\/ >>> histogram((\"b b b b a\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"b\", 4l)))\n    \/\/ >>> histogram((\"\"))\n    \/\/ (new HashMap<String,Long>())\n    public static HashMap<String,Long> histogram(String test) {\n","canonical_solution":"import java.util.HashMap;\n\nclass Problem {\n    public static HashMap<String, Long> histogram(String test) {\n        HashMap<String, Long> countMap = new HashMap<>();\n        \n        if(test == null || test.isEmpty()) {\n            return countMap;\n        }\n        \n        String[] letters = test.split(\"\\\\s+\");\n        \n        long maxCount = 0;\n        \n        for(String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0L) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        HashMap<String, Long> result = new HashMap<>();\n        \n        for(Map.Entry<String, Long> entry : countMap.entrySet()) {\n            if(entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_112","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ You should return a pair containing the result string and true\/false for the check. \/ You should return a pair containing the result string and true\/false for the check. \/ You should return a pair containing the result string and true\/false for the check.     \/ Una stringa l'è ciamada palindrom se la lèze la stesa manera in avanti e in indree.    \/ then check if the result string is palindrome.     \/ A gh'è dò string s e c, bisogna cancellare tutti i caratteri in s che i è uguali a quai caratteri in c     \/ Task     \/\/ >>> reverseDelete((\"abcde\"), (\"ae\"))\n    \/\/ (Pair.with(\"bcd\", false))\n    \/\/ >>> reverseDelete((\"abcdef\"), (\"b\"))\n    \/\/ (Pair.with(\"acdef\", false))\n    \/\/ >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    \/\/ (Pair.with(\"cdedc\", true))\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        StringBuilder filteredString = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                filteredString.append(ch);\n            }\n        }\n        \n        String resultString = filteredString.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        return Pair.with(resultString, isPalindrome);\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals((Pair.with(\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals((Pair.with(\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals((Pair.with(\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals((Pair.with(\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals((Pair.with(\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals((Pair.with(\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals((Pair.with(\"\", true))));\n    }\n\n}\n"},{"task_id":"HumanEval_113","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ di cifre dispari in la stringa i'th de l'input.     \/ string i de l'input. \" indove che tücc i i's i devenn vess sostituìcc del numer     \/ Ogni element i de l'output el dovariss ess \"el numer de element dispari in la     \/ Given an array array list of strings, where each string consists of only digits, return an array array list.    \/\/ >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))\n    \/\/ >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n\n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    int digit = c - '0';\n                    if (digit % 2 != 0) {\n                        oddCount++;\n                    }\n                }\n            }\n\n            String output = \"the number of odd elements \" + oddCount +\n                            \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<String> input1 = new ArrayList<String>(Arrays.asList(\"1234567\"));\n        ArrayList<String> result1 = oddCount(input1);\n        System.out.println(result1);\n\n        ArrayList<String> input2 = new ArrayList<String>(Arrays.asList(\"3\", \"11111111\"));\n        ArrayList<String> result2 = oddCount(input2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"271\", (String)\"137\", (String)\"314\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (String)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_114","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ de numm.     \/ Dàt 'na lista de matrices de intèrn numàri, tróa la summa minima de 'na lista de matrices de sot-matrices minga véra     \/\/ >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))\n    \/\/ (1l)\n    \/\/ >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    \/\/ (-6l)\n    public static long minSubArraySum(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"The input list cannot be null or empty\");\n        }\n\n        long minSum = Long.MAX_VALUE;\n        long currentSum = 0;\n\n        for (Long num : nums) {\n            currentSum = Math.min(currentSum + num, num);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(2L, 3L, 4L, 1L, 2L, 4L))));\n        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(-1L, -2L, -3L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l, (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l)))) == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l)))) == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l)))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_115","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi 1:     \/ Output el nùmer de volt che te gh'è bisògn de scüssà i secch.     \/I tò compit a l'é d'usé ij bòch për svuoté ij poz.    \/ e tüti i cüch i gh'hann la stessa capacità.    \/ Ogni pozzo ha un secchio corrispondente che pu usà per estrar l'acqua da lu,     \/ e ogni 1 in fila rappresenta ona unità d'acqua.     \/ Te gh'è una griglia rettangolare de pozzi. \/ Ogni fila la rappresenta un pozzo singol,    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\n    \/\/ (6l)\n    \/\/ Example 2:\n    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\n    \/\/ (5l)\n    \/\/ Example 3:\n    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))\n    \/\/ (0l)\n    \/\/ Constraints:\n    \/\/ * all wells have the same length\n    \/\/ * 1 <= grid.length <= 10^2\n    \/\/ * 1 <= grid[:,1].length <= 10^2\n    \/\/ * grid[i][j] -> 0 | 1\n    \/\/ * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long totalWater = 0;\n        \n        for (ArrayList<Long> row : grid) {\n            for (Long cell : row) {\n                totalWater += cell;\n            }\n        }\n\n        return (long)Math.ceil((double)totalWater \/ capacity);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 0L)),\n            new ArrayList<>(Arrays.asList(0L, 1L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L))\n        ));\n        System.out.println(maxFill(grid1, 1L)); \/\/ Output: 6\n\n        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 1L)),\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L)),\n            new ArrayList<>(Arrays.asList(0L, 1L, 1L, 1L))\n        ));\n        System.out.println(maxFill(grid2, 2L)); \/\/ Output: 5\n\n        ArrayList<ArrayList<Long>> grid3 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L))\n        ));\n        System.out.println(maxFill(grid3, 5L)); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l)) == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_116","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ L'è dovràda metì in òpera inscì:     \/ Per un numer simil de un, ordinà in base al valor decimal.     \/ numm de i un in la so raprejentazion binaria in ordine ascendent.     \/ In chèsta kata, te gh'è de ordinà 'na lista de matrices de intèrn no-negativ segónt     \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-6l, (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\nclass Problem {\n\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n        Collections.sort(arr, (a, b) -> {\n            int countOnesA = Long.bitCount(a);\n            int countOnesB = Long.bitCount(b);\n            \n            if (countOnesA != countOnesB) {\n                return countOnesA - countOnesB;\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        return arr;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 5L, 2L, 3L, 4L))));\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(-2L, -3L, -4L, -5L, -6L))));\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 0L, 2L, 3L, 4L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_117","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Nota: se pò pensà che la stringa d'intrada la gh'ha domà letere e spazi.    \/ Se la stringa s l'è vuda, alura la funziun la dovariss rend una lista de matrices vuda.     \/n consonànte, in ordè che ste paròle i vegn in la stringa s.     \/ a funziun che la restituiss una lista de array de array de tucc i paroll de la stringa s che contenn pròpe     \/ Given a string s and a natural number n, you've been tasked to implement     \/\/ >>> selectWords((\"Mary had a little lamb\"), (4l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"little\")))\n    \/\/ >>> selectWords((\"Mary had a little lamb\"), (3l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n    \/\/ >>> selectWords((\"simple white space\"), (2l))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> selectWords((\"Hello world\"), (4l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"world\")))\n    \/\/ >>> selectWords((\"Uncle sam\"), (3l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null || s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        for (String word : words) {\n            long consonantCount = countConsonants(word);\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private static long countConsonants(String word) {\n        long count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private static boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_118","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Te pöl assumì che la stringa data la gh'ha sö letere ingleze.     \/ tröva 'na vocala che la cumplich la cundizion de chì de sora.     \/ Vocales in the beginning and end don't count. Return empty string if you didn't     \/ düc i consonant da la part drita de la parolla (sensibil a la cassa).     Te gh'è una paròla, e te gh'è de trovà la vocala piö vicina che la sta in tra    \/\/ >>> getClosestVowel((\"yogurt\"))\n    \/\/ (\"u\")\n    \/\/ >>> getClosestVowel((\"FULL\"))\n    \/\/ (\"U\")\n    \/\/ >>> getClosestVowel((\"quick\"))\n    \/\/ (\"\")\n    \/\/ >>> getClosestVowel((\"ab\"))\n    \/\/ (\"\")\n    public static String getClosestVowel(String word) {\n","canonical_solution":"public static String getClosestVowel(String word) {\n    String vowels = \"AEIOUaeiou\";\n    int len = word.length();\n    if (len < 3) {\n        return \"\";\n    }\n    \n    for (int i = len - 2; i > 0; i--) {\n        char currentChar = word.charAt(i);\n        if (vowels.indexOf(currentChar) != -1) {\n            char prevChar = word.charAt(i - 1);\n            char nextChar = word.charAt(i + 1);\n            if (vowels.indexOf(prevChar) == -1 && vowels.indexOf(nextChar) == -1) {\n                return String.valueOf(currentChar);\n            }\n        }\n    }\n    \n    return \"\";\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"},{"task_id":"HumanEval_119","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Render \"Yes\" se gh'è un manera de fà una bona stringa, e rend \"No\" altrimenti.    \/ \"()) \" l'è minga.    \/ i è equilibràcc. Per esempi: la stringa '(()))) ' l'è bèla, menter la stringa     \/ Una stringa S l'è cunsiderada bona se e domà se tücc i parentesi in S     \/ in quai ordin, che la stringa resultant la sarà bona.    \/ Vos tò laurà a l'é de verificé se a l'é pusìbil concatené le dò stringhe in     \/ parentesi \" ((\" o parentesi strette \")) \" solo.    \/ Te vegn dada una lista de matrices de du strings, dü i strings i consisten de  open    \/\/ >>> matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\"))))\n    \/\/ (\"Yes\")\n    \/\/ >>> matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\"))))\n    \/\/ (\"No\")\n    public static String matchParens(ArrayList<String> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String matchParens(ArrayList<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n\n        \/\/ Check s1 + s2\n        if (isBalanced(s1 + s2)) {\n            return \"Yes\";\n        }\n\n        \/\/ Check s2 + s1\n        if (isBalanced(s2 + s1)) {\n            return \"Yes\";\n        }\n\n        \/\/ None are balanced\n        return \"No\";\n    }\n    \n    private static boolean isBalanced(String str) {\n        int balance = 0;\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) { \n                return false; \n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> test1 = new ArrayList<>(Arrays.asList(\"()(\", \")\"));\n        System.out.println(matchParens(test1)); \/\/ Output: Yes\n\n        ArrayList<String> test2 = new ArrayList<>(Arrays.asList(\")\", \")\"));\n        System.out.println(matchParens(test2)); \/\/ Output: No\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"},{"task_id":"HumanEval_120","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi 1:     \/ de lunghezza k con i numeri massimi k in arr.     \/ Given an array array list arr of integers and a positive integer k, return a sorted array list     \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))\n    \/\/ Example 2:\n    \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))\n    \/\/ Example 3:\n    \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    \/\/ Note:\n    \/\/ 1. The length of the array array list will be in the range of [1, 1000].\n    \/\/ 2. The elements in the array array list will be in the range of [-1000, 1000].\n    \/\/ 3. 0 <= k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        \/\/ Sort the array list in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        \/\/ Prepare the result list to store the maximum k elements\n        ArrayList<Long> result = new ArrayList<Long>();\n\n        \/\/ Add the first k elements to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        \/\/ Sort the result in ascending order as per the problem statement\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        \/\/ Example 1\n        ArrayList<Long> example1 = new ArrayList<Long>();\n        Collections.addAll(example1, -3L, -4L, 5L);\n        System.out.println(maximum(example1, 3));\n\n        \/\/ Example 2\n        ArrayList<Long> example2 = new ArrayList<Long>();\n        Collections.addAll(example2, 4L, -4L, 4L);\n        System.out.println(maximum(example2, 2));\n\n        \/\/ Example 3\n        ArrayList<Long> example3 = new ArrayList<Long>();\n        Collections.addAll(example3, -3L, 2L, 1L, 2L, -1L, -2L, 1L);\n        System.out.println(maximum(example3, 1));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l, (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_121","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.     \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))\n    \/\/ (12l)\n    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l))))\n    \/\/ (9l)\n    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))\n    \/\/ (0l)\n    public static long solution(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.\n    public static long solution(ArrayList<Long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) { \/\/ Iterate over even indices (0-based)\n            long num = lst.get(i);\n            if (num % 2 != 0) { \/\/ Check if the element is odd\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    \/\/ Test the solution method\n    public static void main(String[] args) {\n        System.out.println(solution(new ArrayList<>(Arrays.asList(5L, 8L, 7L, 1L)))); \/\/ Expected output: 12\n        System.out.println(solution(new ArrayList<>(Arrays.asList(3L, 3L, 3L, 3L, 3L)))); \/\/ Expected output: 9\n        System.out.println(solution(new ArrayList<>(Arrays.asList(30L, 13L, 24L, 321L)))); \/\/ Expected output: 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l)))) == (9l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l)))) == (5l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)23l, (long)32l)))) == (23l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)13l, (long)2l, (long)9l)))) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_122","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ la soma di elementi con al massimo due cifre dai primi k elementi di arr.     \/ Given a non-empty array array list of integer arr and an integer k, return     \/\/ >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    \/\/ (24l)\n    \/\/ Constraints:\n    \/\/ 1. 1 <= len(arr) <= 100\n    \/\/ 2. 1 <= k <= len(arr)\n    public static long addElements(ArrayList<Long> arr, long k) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long addElements(ArrayList<Long> arr, long k) {\n        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            long element = arr.get(i);\n            if (element < 100) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))), (1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_123","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ get_odd_collatz(5) rend [1, 5] # La sequenza collatz per 5 l'è [5, 16, 8, 4, 2, 1], donca i numer dispari hinn domà 1, e 5.     \/ Per esempi:     \/ 2. l'è tornaa lista de matrices ordinada in ordin crescent.    \/ 1. Collatz ((1) è [1].     \/ Nota:     \/ tèrm + 1. La conjetüra l'è che, indipendentement de chì valor de n, la sequenza la gh'arrivarà semper a 1.    \/ l'è 'l tèrm prìma. Se l'è 'l tèrm prìma l'è dispari, l'è 'l tèrm pròssim 3 volt del tèrm prìma.    \/ tèrmin prév: se al tèrmin prév al è pari, al tèrmin proscimo al è la mità de     \/ come segue: cumincià cun qualsiasi interu pusitiv n. Alura ogni tèrm l'è ottenguu de la     \/ La conjetüra de Collatz a l'è una conjetüra in matemàtica che la riguarda una sequenza definida     \/ Dàt un intèrn pusìv n, rend una lista de matrices ordinàda che la gh'ha i nümar dispari in sequenza collatz.     \/\/ >>> getOddCollatz((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))\n    public static ArrayList<Long> getOddCollatz(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> getOddCollatz(long n) {\n        TreeSet<Long> oddNumbers = new TreeSet<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n \/ 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1L); \/\/ Adding 1 as it is always included in the sequence\n        return new ArrayList<>(oddNumbers);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(getOddCollatz(5)); \/\/ Example usage\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getOddCollatz((14l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(getOddCollatz((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))));\n    assert(getOddCollatz((12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));\n    assert(getOddCollatz((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_124","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ 4. la data la dovrà vèss in del formatt: mm-dd-aaaaaaaa     \/ 3. I mes a dovren minga vess meno de 1 o püsee de 12.    \/ 2. El nùmer de i dé l'è minga méntar de 1 o piö de 31 dé per i mes 1,3,5,7,8,10,12. E 'l nùmer de i dé l'è minga méntar de 1 o piö de 30 dé per i mes 4,6,9,11. E, 'l nùmer de i dé l'è minga méntar de 1 o piö de 29 dé per el mes 2.    \/ 1. La stringa de data a l'è minga vuda.    \/ La data l'è valida se hinn cumpleta i regolament chì:     \/ returns true if date is valid otherwise false.     \/ Te gh'è de scriv una funziun che la valida una data data data e     \/\/ >>> validDate((\"03-11-2000\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"15-01-2012\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"04-0-2040\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"06-04-2020\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"06\/04\/2020\"))\n    \/\/ (false)\n    public static boolean validDate(String date) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean validDate(String date) {\n        if (date == null || date.isEmpty() || date.length() != 10) {\n            return false;\n        }\n\n        \/\/ Check if format is mm-dd-yyyy\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n\n        try {\n            int month = Integer.parseInt(date.substring(0, 2));\n            int day = Integer.parseInt(date.substring(3, 5));\n            int year = Integer.parseInt(date.substring(6, 10));\n            \n            if (month < 1 || month > 12) {\n                return false;\n            }\n\n            boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n            int[] daysInMonth = {0, 31, (isLeapYear ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            \n            if (day < 1 || day > daysInMonth[month]) {\n                return false;\n            }\n            \n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_126","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ number, return false. Assume no negative numbers and only integers.     \/ in ordinazion ascendenta. Se la lista de matrices la gh'ha de piö de 1 duplicat de la stessa     \/ Given an array array list of numbers, return whether or not they are sorted     \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (false)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (false)\n    public static boolean isSorted(ArrayList<Long> lst) {\n","canonical_solution":"public static boolean isSorted(ArrayList<Long> lst) {\n        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n        int duplicateCount = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                duplicateCount++;\n                if (duplicateCount > 1) {\n                    return false;\n                }\n            } else {\n                duplicateCount = 0;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_127","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ [input\/output] samples:     \/ Se i duu interval no se incrocia, torna \"NO\".     \/ altrimenti, torna \"NO\".     \/ Se la lunghesa de l'intersezion l'è un nümer prim, torna \"Sì\",     \/ che la sò longhèzza l'è 1, che l'è minga un nümer prim.     \/ Esempi, l'intersezion di interval (1, 3), (2, 4) l'è (2, 3)     \/ intervals a prim num.    \/ Vos compit é de determiné se la longhëura de intersezion de chëstes düc     \/ Per ogni interval dat, a l'è presupost che el sò principi a sia men o ugua a la sò fin.    \/ include both start and end. \/ include both start and end. \/ include both start and end.    \/ I interval dat hinn chiusuu che vol dì che l'interval (comenzar, finir)     \/ indova ogni interval a l'è un per de intèr. Per esempi, interval = (comenzar, finì) = (1, 2).    \/ Te gh'è dàd dù interval,     \/\/ >>> intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l)))\n    \/\/ (\"YES\")\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n        long start1 = interval1.getValue0();\n        long end1 = interval1.getValue1();\n        long start2 = interval2.getValue0();\n        long end2 = interval2.getValue1();\n\n        long startIntersection = Math.max(start1, start2);\n        long endIntersection = Math.min(end1, end2);\n\n        if (startIntersection > endIntersection) {\n            return \"NO\";\n        }\n\n        long intersectionLength = endIntersection - startIntersection;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(long n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intersection(Pair.with(1L, 2L), Pair.with(2L, 3L))); \/\/ \"NO\"\n        System.out.println(intersection(Pair.with(-1L, 1L), Pair.with(0L, 4L))); \/\/ \"NO\"\n        System.out.println(intersection(Pair.with(-3L, -1L), Pair.with(-5L, 5L))); \/\/ \"YES\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"},{"task_id":"HumanEval_128","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Note: return null for empty arr.     \/ de ogni numer in la lista de matrices, raprezentada da 1, -1 o 0.     \/ Summa de magnitud de i nümar intèrn moltiplicàda per el prudüto de tücc i segn     \/ Te vegn dat na lista de matrices de matrices arr de intreg e te gh' hai de rend     \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l))))\n    \/\/ Optional.of(9l)\n    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l))))\n    \/\/ Optional.of(0l)\n    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Optional.empty()\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        long sumOfMagnitudes = 0;\n        long productOfSigns = 1;\n\n        for (Long num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            if (num < 0) {\n                productOfSigns *= -1;\n            } else if (num == 0) {\n                productOfSigns = 0;\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n    \n    public static void main(String[] args) {\n        \/\/ Test cases\n        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, -4L)))); \/\/ Optional[9]\n        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(0L, 1L)))); \/\/ Optional[0]\n        System.out.println(prodSigns(new ArrayList<Long>())); \/\/ Optional.empty\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l, (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n    }\n\n}\n"},{"task_id":"HumanEval_129","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Rend una lista de matrices ordenaa di valur de la cellula che la percorr la strada minima.     \/ L'è garantì che la risposta l'è unica.    \/ lst_A[j] = lst_B[j].    \/ tal che lst_A[i] < lst_B[i] e per ogni j (1 <= j < i) gh'emm     \/ che lst_B, in altre parolle, gh'è un indice intger i (1 <= i <= k)     \/ tra (chiamemli lst_A e lst_B), lst_A è lessicograficamente meno     \/ dòpo avè fàtt i lista de matrices ordinàde dei valùr de la cellula che A e B và     \/ Un camin A (de lunghezza k) l'è cunsiderad men che un camin B (de lunghezza k) se     \/ Te pöl minga andà via dal gril.    \/ necessariamente distinti).    \/ Per piacè notè che un percorso de lunghezza k significa visità esattamente k cellule (non     \/ cellulare.     \/ in alter parol, te pöl andà a celul che g'ha 'n canton con la tò corrent.    \/ da n'àutr celul, e a ogni pas ti podess passà a n'àutr celul vizin,     \/ Te gh'è de trovà el percors minim de longhesa k in la griglia. Te pòdet cumincià     \/ inclusif l'è apariiss giust una volta in di celul de la griglia.    \/ ogni cellula de la griglia contègn un valor. Ogni intèr in del interval [1, N * N]     \/ Given a grid with N rows and N columns (N >= 2) e a positive integer k,     \/\/ >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))\n    \/\/ >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l)))\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.PriorityQueue;\n\nclass Problem {\n\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n        int n = grid.size();\n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n\n        PriorityQueue<Path> pq = new PriorityQueue<>();\n        \/\/ Start from each cell and try to find the minimum path\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.add(new Path(i, j, k, grid.get(i).get(j)));\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            Path current = pq.poll();\n            if (current.k == 1) {\n                return current.path;\n            }\n            for (int dir = 0; dir < 4; dir++) {\n                int ni = current.x + dx[dir];\n                int nj = current.y + dy[dir];\n                if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n                    ArrayList<Long> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(ni).get(nj));\n                    pq.add(new Path(ni, nj, current.k - 1, newPath));\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    static class Path implements Comparable<Path> {\n        int x, y;\n        long k;\n        ArrayList<Long> path;\n\n        Path(int x, int y, long k, long value) {\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = new ArrayList<>();\n            this.path.add(value);\n        }\n\n        Path(int x, int y, long k, ArrayList<Long> path) {\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = path;\n        }\n\n        @Override\n        public int compareTo(Path other) {\n            for (int i = 0; i < this.path.size(); i++) {\n                int comparison = Long.compare(this.path.get(i), other.path.get(i));\n                if (comparison != 0) {\n                    return comparison;\n                }\n            }\n            return 0;\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>();\n        grid1.add(new ArrayList<>(Arrays.asList(1L, 2L, 3L)));\n        grid1.add(new ArrayList<>(Arrays.asList(4L, 5L, 6L)));\n        grid1.add(new ArrayList<>(Arrays.asList(7L, 8L, 9L)));\n        System.out.println(minPath(grid1, 3L));\n\n        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>();\n        grid2.add(new ArrayList<>(Arrays.asList(5L, 9L, 3L)));\n        grid2.add(new ArrayList<>(Arrays.asList(4L, 1L, 6L)));\n        grid2.add(new ArrayList<>(Arrays.asList(7L, 8L, 2L)));\n        System.out.println(minPath(grid2, 1L));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l, (long)10l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l, (long)7l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_130","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ primm n + 1 numer de la sequenza de Tribonacci.     \/ Te g'è dat un nümer intèr no-negatìf n, te gh'è de rend una lista de matrices de la     \/ = 2 + 3 + 3 = 8     \/ tri(3) = tri(2) + tri(1) + tri(4)     \/ tri(4) = 3     \/ tri(2) = 1 + (2 \/ 2) = 2     \/ Per esempi:     \/ tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), se n l'è dispari.     \/ tri (n) = 1 + n \/ 2, se n l'è pari.    \/ tri(1) = 3     \/ La sequenza de Tribonacci l'è definida de la ricorrenza:     Però, quel che la gent la sa minga l'è la sequenza de Tribonacci.    \/ Tüt i sa la sequenza de Fibonacci, l'è stada studada in profondità di matemàtich in     \/\/ >>> tri((3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Problem {\n    public static ArrayList<Long> tri(long n) {\n        \/\/ Return empty list if n is negative\n        if (n < 0) {\n            return new ArrayList<>();\n        }\n        \n        \/\/ Create an ArrayList to store the Tribonacci sequence\n        ArrayList<Long> tribonacci = new ArrayList<>();\n        \n        \/\/ Define the base cases\n        if (n >= 0) {\n            tribonacci.add(1L);  \/\/ tri(0)\n        }\n        if (n >= 1) {\n            tribonacci.add(3L);  \/\/ tri(1)\n        }\n        \n        \/\/ Calculate the values for the sequence from tri(2) to tri(n)\n        for (long i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i \/ 2);\n            } else {\n                long value = tribonacci.get((int)(i - 1)) \n                           + tribonacci.get((int)(i - 2)) \n                           + tribonacci.get((int)(i + 1 - 2)); \/\/ i+1-2 = i-1 (next i is processed)\n                tribonacci.add(value);\n            }\n        }\n        \n        return tribonacci;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(tri(3)); \/\/ Outputs: [1, 3, 2, 8]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_131","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ Render 0 if all digits are even.     \/ Dàt un intèrn pusìv n, rend el prudót di dígeti dispari.     \/\/ >>> digits((1l))\n    \/\/ (1l)\n    \/\/ >>> digits((4l))\n    \/\/ (0l)\n    \/\/ >>> digits((235l))\n    \/\/ (15l)\n    public static long digits(long n) {\n","canonical_solution":"public static long digits(long n) {\n        long product = 1;\n        boolean hasOddDigit = false;\n        \n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n \/= 10;\n        }\n        \n        return hasOddDigit ? product : 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_132","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ indova almenu una parentesi in la sottoseguenza l'è imbricada.    \/ La funziun la dovariss rendèr true se e domà se gh'è una sottoscuenza valida de parentesi     \/ Creà una funziun che la piglia una stringa come input che la gh'ha domà i parentesi quadrati.     \/\/ >>> isNested((\"[[]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[]]]]]]][[[[[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[][]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[[][]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[[]][[\"))\n    \/\/ (true)\n    public static boolean isNested(String string) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean isNested(String string) {\n        int openCount = 0;\n        boolean hasNested = false;\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                openCount++;\n            } else if (c == ']') {\n                if (openCount > 0) {\n                    openCount--;\n                    \/\/ If we find a pair and there was an unmatched '[' before this ']'\n                    \/\/ it means there was nesting.\n                    hasNested = true;\n                }\n                \n                if (openCount < 0) {\n                    \/\/ If at any point we have more closing brackets than opening ones,\n                    \/\/ it's invalid, so reset openCount.\n                    openCount = 0;\n                }\n            }\n        }\n        \n        return hasNested;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); \/\/ true\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); \/\/ false\n        System.out.println(isNested(\"[][]\")); \/\/ false\n        System.out.println(isNested(\"[]\")); \/\/ false\n        System.out.println(isNested(\"[[][]]\")); \/\/ true\n        System.out.println(isNested(\"[[]][[\")); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_133","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ arrondì ogni element in la lista di array al primm int ((Ceiling)     \/ You need to return the sum of squared numbers in the given array list,                          \/ Te gh'è dà ona lista de numeri de array array.    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n    \/\/ (14l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f, (float)9.0f))))\n    \/\/ (98l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f))))\n    \/\/ (84l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n    \/\/ (29l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f))))\n    \/\/ (6l)\n    public static long sumSquares(ArrayList<Float> lst) {\n","canonical_solution":"public static long sumSquares(ArrayList<Float> lst) {\n        return lst.stream()\n                  .mapToInt(f -> (int) Math.ceil(f))\n                  .map(i -> i * i)\n                  .sum();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f, (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_134","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Nota: \"parola\" l'è un grupp de caratter separàa de spazzi.    \/ a part of a word, and false otherwise. \/ \/ a part of a word, and false otherwise. \/    \/ de na stringa data l'è un carater alfabetegh e l'è minga     \/ Creà 'na funsiù che la restituiss true se l' ultem carater     \/\/ >>> checkIfLastCharIsALetter((\"apple pie\"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    \/\/ (true)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"\"))\n    \/\/ (false)\n    public static boolean checkIfLastCharIsALetter(String txt) {\n","canonical_solution":"public static boolean checkIfLastCharIsALetter(String txt) {\n    txt = txt.trim();\n    if (txt.isEmpty()) {\n        return false;\n    }\n    String[] words = txt.split(\" \");\n    String lastWord = words[words.length - 1];\n    if (lastWord.isEmpty()) {\n        return false;\n    }\n    char lastChar = lastWord.charAt(lastWord.length() - 1);\n    return Character.isLetter(lastChar);\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_135","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ duplicate values.     \/ no such element exists then return -1. The given array array list will not contain     \/ l'è minga püssee grann o uguaai a l'element immediatament precedent.    \/ Creà una funziun che la restituiss l'indici piö gròss de un element che     \/\/ >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\n    \/\/ (3l)\n    \/\/ >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (-1l)\n    public static long canArrange(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ Create a function which returns the largest index of an element which\n    \/\/ is not greater than or equal to the element immediately preceding it.\n    \/\/ If no such element exists then return -1. The given array list will not\n    \/\/ contain duplicate values.\n\n    public static long canArrange(ArrayList<Long> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 3L, 5L));\n        System.out.println(canArrange(list1)); \/\/ Output: 3\n        \n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\n        System.out.println(canArrange(list2)); \/\/ Output: -1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_136","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Se no gh'è nè negatif nè positif, i torna null.    \/ di intreg positiv in una lista di array array.    \/ l'è el piö gròss de i intèrn negatif, e \"b\" l'è el piö pisè picin     \/ Creà una funziun che la restituiss un par (a, b), indova \"a\" l'è     \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l))))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(1l))\n    \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l))))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long> smallestPositive = Optional.empty();\n\n        for (Long num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n        \n        return Pair.with(largestNegative, smallestPositive);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Optional.of(Pair.with(-2l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Optional.of(Pair.with(-7l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Optional.of(Pair.with(-9l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_138","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ Valuà se el numer n el pò vess scrivüü come la soma de 4 numer pari pusitiiv     \/\/ >>> isEqualToSumEven((4l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((6l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((8l))\n    \/\/ (true)\n    public static boolean isEqualToSumEven(long n) {\n","canonical_solution":"\/\/ Check if the number n is at least 8 since the smallest sum of 4 positive even numbers is 2+2+2+2=8\n        if (n < 8) {\n            return false;\n        }\n\n        \/\/ If n is divisible by 2 and n\/2 is even, then n can be expressed as the sum of 4 positive even numbers\n        return n % 2 == 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_139","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ WHERE n > 0     \/ brazilian_factorial{n) = n! * (n-1)! * (n-2)! * ... * 1!     \/ L'efet brasilian l'è definìcc cuma:     \/\/ >>> specialFactorial((4l))\n    \/\/ (288l)\n    \/\/ The function will receive an integer as input and should return the special\n    \/\/ factorial of this integer.\n    public static long specialFactorial(long n) {\n","canonical_solution":"import java.util.stream.LongStream;\n\npublic class Problem {\n    \/\/ The Brazilian factorial is defined as:\n    \/\/ brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    \/\/ where n > 0\n\n    public static long specialFactorial(long n) {\n        return LongStream.rangeClosed(1, n)\n                .map(Problem::factorial)\n                .reduce(1, (a, b) -> a * b);\n    }\n\n    private static long factorial(long num) {\n        return LongStream.rangeClosed(1, num)\n                .reduce(1, (a, b) -> a * b);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4)); \/\/ Output: 288\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_140","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ pò sostituì tüti i spazi consecutiv cun -     \/ e se na stringa la gh'ha de piö de 2 spazi consecutiv,     \/ Given a string text, replace all spaces in it with underscores,     \/\/ >>> fixSpaces((\" Example\"))\n    \/\/ (\"Example\")\n    \/\/ >>> fixSpaces((\" Example 1\"))\n    \/\/ (\"Example_1\")\n    \/\/ >>> fixSpaces((\" Example 2\"))\n    \/\/ (\"_Example_2\")\n    \/\/ >>> fixSpaces((\" Example 3\"))\n    \/\/ (\"_Example-3\")\n    public static String fixSpaces(String text) {\n","canonical_solution":"if (text == null || text.isEmpty()) {\n        return text;\n    }\n    \n    StringBuilder result = new StringBuilder();\n    int spaceCount = 0;\n    for (char c : text.toCharArray()) {\n        if (c == ' ') {\n            spaceCount++;\n        } else {\n            if (spaceCount == 1) {\n                result.append('_');\n            } else if (spaceCount > 1) {\n                result.append('-');\n            }\n            result.append(c);\n            spaceCount = 0;\n        }\n    }\n    \n    \/\/ Handle trailing spaces\n    if (spaceCount == 1) {\n        result.append('_');\n    } else if (spaceCount > 1) {\n        result.append('-');\n    }\n    \n    return result.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"},{"task_id":"HumanEval_141","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ - La sotstringa dòpo del punt el dovaria vess una de queste: ['txt', 'exe', 'dll']     \/ l'alfabet latin (\"a\" - \"z\" e \"A\" - \"Z\").     \/ - La sotstringa prima del puntin la dev minga vess vu, e la scomincia con una lettera de     \/ - Al nòm dal file al gh'à pròpi un punt '.'     \/ - L'intendiment del file el dovariss minga vèss de più de trii cifre ('0'-'9').     \/ i' son cumpëgn:     \/ Un nòm de file a l'è cunsiderà valid se e domà se tücc i cundizion chì sot     \/ 'Sì' se 'l nòm del file l'è vàlid, e el torna 'No' se l'è minga.    \/ Creà 'na funsiù che la ciappa 'na stringa che la rapreśenta 'l nòm 'd un file e la ritorna     \/\/ >>> fileNameCheck((\"example.txt\"))\n    \/\/ (\"Yes\")\n    \/\/ >>> fileNameCheck((\"1example.dll\"))\n    \/\/ (\"No\")\n    public static String fileNameCheck(String file_name) {\n","canonical_solution":"if (file_name == null || file_name.isEmpty()) {\n        return \"No\";\n    }\n    \n    \/\/ Split the file name into two parts: before and after the dot.\n    String[] parts = file_name.split(\"\\\\.\");\n    \n    \/\/ Check for exactly one dot and non-empty parts.\n    if (parts.length != 2 || parts[0].isEmpty() || parts[1].isEmpty()) {\n        return \"No\";\n    }\n    \n    \/\/ Check the extension validity.\n    Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n    if (!validExtensions.contains(parts[1])) {\n        return \"No\";\n    }\n\n    \/\/ Check that the first character before the dot is a letter.\n    if (!Character.isLetter(parts[0].charAt(0))) {\n        return \"No\";\n    }\n\n    \/\/ Count the number of digits in the part before the dot.\n    int digitCount = 0;\n    for (char c : parts[0].toCharArray()) {\n        if (Character.isDigit(c)) {\n            digitCount++;\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n    }\n\n    \/\/ All conditions are satisfied, return \"Yes\".\n    return \"Yes\";\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"},{"task_id":"HumanEval_142","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ cambià i entries in la lista di matrices i cui indici hinn minga un multiplich de 3 o 4. La funzion la restituiss la somma de tucc i entries.     \/ multiplo de 3 e el farà el cubo de l'entrata de l'entger se l'indice l'è un multiplo de 4 e minga un multiplo de 3. La funzion la farà minga     \/ Chësta funziun vëgnel metü a jì n listëia de nteres de n arëis.    \/ \"  L' è 'n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))\n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList())\n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l))\n    public static long sumSquares(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumSquares(ArrayList<Long> lst) {\n        long sum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            Long number = lst.get(i);\n            if (i % 3 == 0) {\n                sum += Math.pow(number, 2);\n            } else if (i % 4 == 0) {\n                sum += Math.pow(number, 3);\n            } else {\n                sum += number;\n            }\n        }\n\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l)))) == (14l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))) == (9l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l)))) == (-3l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)0l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l)))) == (-126l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-56l, (long)-99l, (long)1l, (long)0l, (long)-2l)))) == (3030l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)-1l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-16l, (long)-9l, (long)-2l, (long)36l, (long)36l, (long)26l, (long)-20l, (long)25l, (long)-40l, (long)20l, (long)-4l, (long)12l, (long)-26l, (long)35l, (long)37l)))) == (-14196l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)17l, (long)-1l, (long)-15l, (long)13l, (long)-1l, (long)14l, (long)-14l, (long)-12l, (long)-5l, (long)14l, (long)-14l, (long)6l, (long)13l, (long)11l, (long)16l, (long)16l, (long)4l, (long)10l)))) == (-1448l));\n    }\n\n}\n"},{"task_id":"HumanEval_143","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi 1:     \/ l'òrdine di paròle in la stringa növa al dovarès èser l'istèss de quèlla uriginale.     \/ che i sò lunghè i è i nùmer prim,     \/ e te gh'è de rend una stringa che la gh'ha i paroll de la frase originaria,     \/ la frase la gh'ha di paroll separàa de un spazzio,     \/ Te gh'è dà ona stringa che la rappresenta ona frase,     \/\/ >>> wordsInSentence((\"This is a test\"))\n    \/\/ (\"is\")\n    \/\/ Example 2:\n    \/\/ >>> wordsInSentence((\"lets go for swimming\"))\n    \/\/ (\"go for\")\n    \/\/ Constraints:\n    \/\/ * 1 <= len(sentence) <= 100\n    \/\/ * sentence contains only letters\n    public static String wordsInSentence(String sentence) {\n","canonical_solution":"public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        return String.join(\" \", primeLengthWords);\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"},{"task_id":"HumanEval_144","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Te pöl asumì che x, e n i è frazziun valid, e i gh'ha minga zéro come denominator.     \/ <numerator>\/<denominator> indova sia numerator che denominator hinn di nümer intèrn pusìv.     \/ altrimenti. Sia x che n, i è na raprezentasiù stringa de na frazion, e i gh'ha el format chì:     \/ x * n. La funziun la torna véra se x * n la valüra a un nümer intèr e fals     \/ Vos compit a l'é d'implementé na funzion ch'a simplificarà l'espression     \/\/ >>> simplify((\"1\/5\"), (\"5\/1\"))\n    \/\/ (true)\n    \/\/ >>> simplify((\"1\/6\"), (\"2\/1\"))\n    \/\/ (false)\n    \/\/ >>> simplify((\"7\/10\"), (\"10\/2\"))\n    \/\/ (false)\n    public static boolean simplify(String x, String n) {\n","canonical_solution":"public static boolean simplify(String x, String n) {\n    \/\/ Split the fractions into numerators and denominators\n    String[] fracX = x.split(\"\/\");\n    String[] fracN = n.split(\"\/\");\n    \n    \/\/ Parse numerators and denominators as integers\n    int numX = Integer.parseInt(fracX[0]);\n    int denX = Integer.parseInt(fracX[1]);\n    int numN = Integer.parseInt(fracN[0]);\n    int denN = Integer.parseInt(fracN[1]);\n\n    \/\/ Calculate the product of x * n\n    int productNumerator = numX * numN;\n    int productDenominator = denX * denN;\n\n    \/\/ Simplify the product fraction\n    int gcd = gcd(productNumerator, productDenominator);\n\n    \/\/ If the simplified denominator is 1, then it is a whole number\n    return productDenominator \/ gcd == 1;\n}\n\n\/\/ Helper method to calculate the greatest common divisor\nprivate static int gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/6\"), (\"2\/1\")) == (false));\n    assert(simplify((\"5\/1\"), (\"3\/1\")) == (true));\n    assert(simplify((\"7\/10\"), (\"10\/2\")) == (false));\n    assert(simplify((\"2\/10\"), (\"50\/10\")) == (true));\n    assert(simplify((\"7\/2\"), (\"4\/2\")) == (true));\n    assert(simplify((\"11\/6\"), (\"6\/1\")) == (true));\n    assert(simplify((\"2\/3\"), (\"5\/2\")) == (false));\n    assert(simplify((\"5\/2\"), (\"3\/5\")) == (false));\n    assert(simplify((\"2\/4\"), (\"8\/4\")) == (true));\n    assert(simplify((\"2\/4\"), (\"4\/2\")) == (true));\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/5\"), (\"1\/5\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_145","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ ordenali in base al loro indice in lista di array originale.    \/ Nota: se gh'è di partìcc con la summa di sò cifre,     \/ in ordini ascendenti in base alla somma dei loro numeri.    \/ Scriv una funziun che la ordena la lista de intreg de la matris     \/\/ >>> orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    \/\/ >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n        return nums.stream()\n            .sorted(Comparator.comparingLong(Problem::sumOfDigits).thenComparingLong(nums::indexOf))\n            .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static long sumOfDigits(Long num) {\n        num = Math.abs(num);\n        long sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num \/= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 11L, -1L, -11L, -12L));\n        ArrayList<Long> result1 = orderByPoints(list1);\n        System.out.println(result1);\n\n        ArrayList<Long> list2 = new ArrayList<>();\n        ArrayList<Long> result2 = orderByPoints(list2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_146","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ la prima e l'ultima cifre de un numer hinn dispari (1, 3, 5, 7, 9).     \/ al nùmer di elemènt in dla lista di matrici che i è piö gràndi dal 10 e i è tùti dò     \/ Scriv una funziun che la piglia una lista de numeri de una serie de serie come input e la torna     \/\/ >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l))))\n    \/\/ (1l)\n    \/\/ >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l))))\n    \/\/ (2l)\n    public static long specialFilter(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Function to check if a number has odd first and last digits\n    private static boolean hasOddFirstAndLastDigit(long num) {\n        num = Math.abs(num); \/\/ Consider absolute value to handle negative numbers\n\n        String numStr = Long.toString(num);\n\n        \/\/ Check first digit\n        char firstDigit = numStr.charAt(0);\n        if ((firstDigit - '0') % 2 == 0) {\n            return false;\n        }\n\n        \/\/ Check last digit\n        char lastDigit = numStr.charAt(numStr.length() - 1);\n        return (lastDigit - '0') % 2 != 0;\n    }\n\n    public static long specialFilter(ArrayList<Long> nums) {\n        return nums.stream()\n            .filter(num -> num > 10 && hasOddFirstAndLastDigit(num))\n            .count();\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> nums1 = new ArrayList<>(Arrays.asList(15L, -73L, 14L, -15L));\n        System.out.println(specialFilter(nums1)); \/\/ Output: 1\n\n        ArrayList<Long> nums2 = new ArrayList<>(Arrays.asList(33L, -2L, -3L, 45L, 21L, 109L));\n        System.out.println(specialFilter(nums2)); \/\/ Output: 2\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l, (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l, (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_147","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ e a[i] + a[j] + a[k] l'è un multiplo de 3.     \/ Render el numer de triplet (a[i], a[j], a[k]) de a indove i < j < k,     \/ Per ogni i (1 ≤ i ≤ n), el valor de a[i] = i * i - i + 1.     \/ Te gh'è un intèr positiv n. Te gh'è de creà un intèr array array list a de lunghesa n.     \/\/ >>> getMaxTriples((5l))\n    \/\/ (1l)\n    \/\/ Explanation: \n    \/\/ a = [1, 3, 7, 13, 21]\n    \/\/ The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static long getMaxTriples(long n) {\n        \/\/ Generate the array list a based on the given formula\n        int[] a = new int[(int) n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        \n        long count = 0;\n        \n        \/\/ Iterate through triple combinations and count those whose sum is a multiple of 3\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); \/\/ Example usage\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"},{"task_id":"HumanEval_148","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ l'è minga i nòm dei pianèti giust.    \/ La funziun la dovariss rend una paia vuda se planet1 o planet2     \/ la vicinanza al sol.     \/ situàda tra l'òrbita del pianeta 1 e l'òrbita del pianeta 2, ordinàda per     \/ La funziun la dovariss rend una para cont i pianètt che i gh'hann i urbit    \/ Scriv una funziun che la piglia dò nòm de pianeta come stringa planet1 e planet2.     \/ Uranus, Neptun.    \/ l'è Mercurio, l'alter l'è Vènere, po' la Tèra, Marte, Giove, Saturno,     \/ A gh' è otto pianètt in del nòst sistema solar: i piö vicin al Sol .    \/\/ >>> bf((\"Jupiter\"), (\"Neptune\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    \/\/ >>> bf((\"Earth\"), (\"Mercury\"))\n    \/\/ (ArrayList<String>(\"Venus\"))\n    \/\/ >>> bf((\"Mercury\"), (\"Uranus\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\npublic class Problem {\n    \/\/ There are eight planets in our solar system arranged by distance from the Sun\n    private static final List<String> PLANETS = Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public static Pair<ArrayList<String>, ArrayList<String>> bf(String planet1, String planet2) {\n        \/\/ Validate planet names\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return new Pair<>(new ArrayList<>(), new ArrayList<>());\n        }\n\n        \/\/ Find indices of the planets\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        \/\/ Sort the indices\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        \/\/ Extract planets between the given two planets\n        ArrayList<String> planetsBetween = new ArrayList<>(PLANETS.subList(start + 1, end));\n\n        return new Pair<>(planetsBetween, new ArrayList<>());\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_149","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ Te pöl pensà che tüte le paròle i gh'avarà la stesa longhesa.    \/ La funziun la dovariss rend una lista de strings in ordin ordinad.     \/ Se dü parol gh'hann la stesa lunghesa, ordinè la lista de matrices in ordine alfabetico.     \/ dovrà rendere l'elenco di array ordinato da quella regola.     \/ L'òrdine dla lista dla matriçia a dovrà esse ascendent par longhità ëd ciascheduna paròla, e ti     \/ e pò cuntènn duplicàcc.     \/ L'elenc de matrices l'è semper un elench de matrices de string e mai un elench de matrices de numeri,     \/ e torna la lista di array risultante con un ordine ordinato,     \/ scartà i string che gh'hann longhess dispari,     \/ Scriv una funziun che accetta una lista de strings de una matris de strings come parameter,     \/\/ >>> listSort((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"aa\")))\n    \/\/ >>> listSort((new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"a\", (String)\"aaa\", (String)\"cd\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"cd\")))\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n        \/\/ Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n\n        \/\/ Sort the remaining strings first by length, then alphabetically\n        lst.sort(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));\n\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> test1 = new ArrayList<String>(Arrays.asList(\"aa\", \"a\", \"aaa\"));\n        ArrayList<String> test2 = new ArrayList<String>(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"));\n\n        System.out.println(sortedListSum(test1)); \/\/ Output: [aa]\n        System.out.println(sortedListSum(test2)); \/\/ Output: [ab, cd]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\")))).equals((new ArrayList<String>(Arrays.asList((String)\"aa\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"school\", (String)\"AI\", (String)\"asdf\", (String)\"b\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"asdf\", (String)\"school\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"b\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"dcba\", (String)\"abcd\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"dcba\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\", (String)\"c\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aaaa\", (String)\"bbbb\", (String)\"dd\", (String)\"cc\")))).equals((new ArrayList<String>(Arrays.asList((String)\"cc\", (String)\"dd\", (String)\"aaaa\", (String)\"bbbb\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_150","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ a prim e dovrìa rendere el valor de y altrimenti.     \/ Un programm simpl che el dovariss rend el valor de x se n l'è     \/\/ >>> xOrY((7l), (34l), (12l))\n    \/\/ (34l)\n    \/\/ >>> xOrY((15l), (8l), (5l))\n    \/\/ (5l)\n    public static long xOrY(long n, long x, long y) {\n","canonical_solution":"import java.math.BigInteger;\n\npublic class Problem {\n    public static long xOrY(long n, long x, long y) {\n        \/\/ Check if n is prime\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0) return false;\n\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(xOrY(7L, 34L, 12L));  \/\/ Output: 34\n        System.out.println(xOrY(15L, 8L, 5L));  \/\/ Output: 5\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_151","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ in la lista di matrices che hinn dispari. Ignorè i numer che hinn negatiif o minga intreg.    \/ Given an array array list of numbers, return the sum of squares of the numbers     \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)0l))))\n    \/\/ (10l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))\n    \/\/ (0l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))\n    \/\/ (81l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))\n    \/\/ (0l)\n    \/\/ If the input array list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n        long sum = 0;\n        \n        for (Float number : lst) {\n            if (number != null && number >= 0 && number % 1 == 0) {\n                long num = number.longValue();\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        \n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList()))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f, (float)-20.0f, (float)-30.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f, (float)3.0f, (float)5.0f)))) == (34l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));\n    }\n\n}\n"},{"task_id":"HumanEval_152","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ esempiu:     \/ al valōr al è 0, e se al n è minga, al valōr al è la diferèinsa assolûta tra la sbaja e la punsiù.    \/ Render a array array list of the same length denoting how far off each guess was. If they've guessed correctly,     \/ Te vegn dàd dü list de scores e de indovin de longhessa eguale, indova ogni indici el mostra una coincidenza.    \/ Vos compit a l'é ëd determiné se na persona a l'ha giustà ij risultà ëd na serie ëd partìe.     \/ val sicurament la pena de notà e de paragonà.     I sentimènt e i pensamènt che t'hee in quel moment i è    \/ I think we all remember that feeling when the result of some long-awaited  (Me pareci che tutti ricordemo quella sensazion quand el risultad de qualchedun tant attesà )    \/\/ >>> compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))\n    \/\/ >>> compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Problem {\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> game1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 5L, 1L));\n        ArrayList<Long> guess1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 2L, -2L));\n        System.out.println(compare(game1, guess1));\n\n        ArrayList<Long> game2 = new ArrayList<>(Arrays.asList(0L, 5L, 0L, 0L, 0L, 4L));\n        ArrayList<Long> guess2 = new ArrayList<>(Arrays.asList(4L, 1L, 1L, 0L, 0L, -2L));\n        System.out.println(compare(game2, guess2));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)0l, (long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_153","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ (la sò forza l'è -1).     \/ return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension     \/ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should     \/ Per esempi, se te vegn dat \"Slices\" come la classe e una lista de matrices de la     \/ scelgi quella che la vegn prima in de la lista de la matrice.     Se gh'è du o piö estension con la stesa forza, te dovarès    \/ format: ClassName.StrongestExtensionName.     \/ Te dovarès trovà l' estension piö fòrta e rendì una stringa in questa .    \/ in del nomm de l'estensiun, la forza l'è dada de la frazion CAP - SM.     \/ lettere nel nome dell'estensione, e SM sia il numero di lettere minuscole     \/ la forza de l'estensiun l'è la seguente: CAP sia el numer de la majuscula     \/ L'estensiun é da usé por caré classes adizionales a la classe.    \/ Te vegnarà dà el nom de una classe (una stringa) e una lista de estension de array array.    \/\/ >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"CC\"))))\n    \/\/ (\"my_class.AA\")\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n","canonical_solution":"public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n        String strongestExtension = \"\";\n        double maxStrength = Double.NEGATIVE_INFINITY;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            double strength = capCount - smCount;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"},{"task_id":"HumanEval_154","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Te gh'è dàd 2 paròll. Te gh'è da rendèr true se la segonda paròlla o qualunque de i sò rotazion l'è una sotstringa de la prima paròlla     \/\/ >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    \/\/ (true)\n    public static boolean cycpatternCheck(String a, String b) {\n","canonical_solution":"public static boolean cycpatternCheck(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubledB = b + b;\n        \n        for (int i = 0; i < b.length(); i++) {\n            String rotation = doubledB.substring(i, i + b.length());\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_155","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Given an integer. return a pair that has the number of even and odd digits respectively.     \/\/ >>> evenOddCount((-12l))\n    \/\/ (Pair.with(1l, 1l))\n    \/\/ >>> evenOddCount((123l))\n    \/\/ (Pair.with(1l, 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n","canonical_solution":"long evenCount = 0;\n        long oddCount = 0;\n        num = Math.abs(num); \/\/ Handle negative numbers by taking the absolute value\n\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num \/= 10;\n        }\n\n        return Pair.with(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12L)); \/\/ Output: (1, 1)\n        System.out.println(evenOddCount(123L)); \/\/ Output: (1, 2)\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"},{"task_id":"HumanEval_156","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ Restrictions: 1 <= num <= 1000     \/ e la torna in minuscol.    \/ Dàt un intèr positiv, otèrv el sò equivalènt numèrich roman in na strìnga,     \/\/ >>> intToMiniRoman((19l))\n    \/\/ (\"xix\")\n    \/\/ >>> intToMiniRoman((152l))\n    \/\/ (\"clii\")\n    \/\/ >>> intToMiniRoman((426l))\n    \/\/ (\"cdxxvi\")\n    public static String intToMiniRoman(long number) {\n","canonical_solution":"String[] thousands = {\"\", \"m\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] units = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        \n        String roman = \"\";\n\n        roman += thousands[(int)(number \/ 1000)];\n        number %= 1000;\n        \n        roman += hundreds[(int)(number \/ 100)];\n        number %= 100;\n        \n        roman += tens[(int)(number \/ 10)];\n        number %= 10;\n        \n        roman += units[(int)(number)];\n        \n        return roman;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n"},{"task_id":"HumanEval_157","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ 90°.     \/ Un triàngol a vènt rètta l'è un triàngol indóe un vènt l'è vènt rètta o     \/ i lati i fà un triàngol rettangol, altrimenti è fals.     \/ Dato i lunghi dei tre lati de un triangol.    \/\/ >>> rightAngleTriangle((3l), (4l), (5l))\n    \/\/ (true)\n    \/\/ >>> rightAngleTriangle((1l), (2l), (3l))\n    \/\/ (false)\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n","canonical_solution":"public class Problem {\n    \/\/ Given the lengths of the three sides of a triangle. Return true if the three\n    \/\/ sides form a right-angled triangle, false otherwise.\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n        \/\/ Sort the sides so that c is always the largest one\n        long[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \/\/ Check the Pythagorean theorem: a^2 + b^2 == c^2\n        return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_158","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ characters, return the one that comes first in lexicographical order.                                                                                                                                                                                                                                             \/ di caratteri unici. Se strings plurali han el numm massim de caratteri unici     \/ La lista de la matria la gh'ha di paroll diferent.    \/ Scriv una funziun che accetta una lista de strings de una matrice.     \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"))))\n    \/\/ (\"string\")\n    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\"))))\n    \/\/ (\"enam\")\n    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    \/\/ (\"aaaaaaa\")\n    public static String findMax(ArrayList<String> words) {\n","canonical_solution":"import java.util.*;\n\npublic class UniqueCharacterFinder {\n\n    public static String findMax(ArrayList<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            int uniqueCount = (int) word.chars().distinct().count();\n            if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\")))); \/\/ Output: \"string\"\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\")))); \/\/ Output: \"enam\"\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\")))); \/\/ Output: \"aaaaaaa\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\")))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"},{"task_id":"HumanEval_159","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi:     \/ se gh'è minga abbastanza carote restant, te mangerè tüte le carote restant, ma te gh'avarè semper fame.    \/ el nùmer de caròtte che te gh' è restàde dòpo i mangiàde ]     \/ dovrai restituire un elenco di [numero totale di carote mangiate dopo i pasti,     \/ ma adess te gh'è da mangià de piö carotte per completà i mangià del dì.    \/Sei un cunìll famùs, e t'è già mangiàt un cert nùmer de càruche,    \/\/ >>> eat((5l), (6l), (10l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))\n    \/\/ >>> eat((4l), (8l), (9l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))\n    \/\/ >>> eat((1l), (10l), (10l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))\n    \/\/ >>> eat((2l), (11l), (5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))\n    \/\/ Variables:\n    \/\/ @number : integer\n    \/\/ the number of carrots that you have eaten.\n    \/\/ @need : integer\n    \/\/ the number of carrots that you need to eat.\n    \/\/ @remaining : integer\n    \/\/ the number of remaining carrots thet exist in stock\n    \/\/ Constrain:\n    \/\/ * 0 <= number <= 1000\n    \/\/ * 0 <= need <= 1000\n    \/\/ * 0 <= remaining <= 1000\n    \/\/ Have fun :)\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n        long totalEaten = number;\n        long carrotsToEat = Math.min(need, remaining);\n        totalEaten += carrotsToEat;\n        long carrotsLeft = remaining - carrotsToEat;\n        \n        return new ArrayList<Long>(Arrays.asList(totalEaten, carrotsLeft));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_160","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ L'elench de la matris de l'operador l'ha almanch on operador, e l'elench de la matris de l'operand l'ha almanch duu operand.     \/ L'operand a l'è un list de matrices de integer minga negatif.     \/ La lunghesa de la lista de la matria de l'operador l'è uguala a la lunghesa de la lista de la matria de l'operand meno un.     \/ Nota:     \/ => result = 9     \/ result = 2 + 3 * 4 - 5     \/ array list array = [2, 3, 4, 5]     \/ operator['+', '*', '-']     \/ Esempi:     \/ Exponentiation (**)     \/ Divisione del pavimento ( \/\/ )     \/ Multiplicazion (*)     \/ Sottrazion ( - )     \/ Addition ( +)     \/ I operazion de base de l'algebra:     \/ espressione e restituisce la valutazion de questa espressione.    \/ la segonda lista de matrices l'è una lista de matrices de intreg.    \/ Dàt dò operadùr de lista de matrices, e operand. La prima lista de matrices la gh'ha di operazion de base de l'algebra, e     public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (operand.isEmpty() || op.isEmpty() || operand.size() - 1 != op.size()) {\n            throw new IllegalArgumentException(\"Invalid input.\");\n        }\n\n        \/\/ Start with the first operand.\n        long result = operand.get(0);\n\n        \/\/ Apply the operators in sequence.\n        for (int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n            long nextOperand = operand.get(i + 1);\n\n            switch (operator) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"\/\/\":\n                    if (nextOperand == 0) {\n                        throw new ArithmeticException(\"Division by zero.\");\n                    }\n                    result \/= nextOperand;\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> operators = new ArrayList<>();\n        operators.add(\"+\");\n        operators.add(\"*\");\n        operators.add(\"-\");\n\n        ArrayList<Long> operands = new ArrayList<>();\n        operands.add(2L);\n        operands.add(3L);\n        operands.add(4L);\n        operands.add(5L);\n\n        System.out.println(doAlgebra(operators, operands));  \/\/ Output: 9\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\/\/\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n"},{"task_id":"HumanEval_161","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Esempi     \/ La funziun la dovariss rend la stringa resultant.     \/ Se la stringa la gh'ha minga de letere, inversa la stringa.    \/ altrimenti lassa che sia.    \/ se s[i] l'è 'na lètera, inversa la sò cassa da bas a su o viceversa,     \/ Te gh'è dà ona stringa de s.     \/\/ >>> solve((\"1234\"))\n    \/\/ (\"4321\")\n    \/\/ >>> solve((\"ab\"))\n    \/\/ (\"AB\")\n    \/\/ >>> solve((\"#a@C\"))\n    \/\/ (\"#A@c\")\n    public static String solve(String s) {\n","canonical_solution":"public static String solve(String s) {\n        boolean hasLetters = false;\n        StringBuilder result = new StringBuilder();\n        \n        \/\/ Check if the string contains any letters and process the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        \/\/ If no letters are present, reverse the string\n        if (!hasLetters) {\n            result.reverse();\n        }\n        \n        return result.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"},{"task_id":"HumanEval_162","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Se 'text' l'è ona stringa vuda, torna null.     \/ Given a string 'text', return its md5 hash equivalent string.     \/\/ >>> stringToMd5((\"Hello world\"))\n    \/\/ Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    public static Optional<String> stringToMd5(String text) {\n","canonical_solution":"import java.security.*;\nimport java.util.*;\n\nclass Problem {\n    public static Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : messageDigest) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n"},{"task_id":"HumanEval_163","nl":"lmo_Latn","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Per esempi:     \/ e b, in ordini ascendenti.    \/ Dàt dò intèrn pusìb a e b, ridà i dígeti pari tra a     \/\/ >>> generateIntegers((2l), (8l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    \/\/ >>> generateIntegers((8l), (2l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    \/\/ >>> generateIntegers((10l), (14l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Given two positive integers a and b, return the even digits between a\n    \/\/ and b, in ascending order.\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n        ArrayList<Long> result = new ArrayList<>();\n\n        \/\/ Ensure a is the smaller number and b is the larger number\n        long start = Math.min(a, b);\n        long end = Math.max(a, b);\n\n        \/\/ Find and add even numbers in the range [start, end] to the result list\n        for (long i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); \/\/ [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); \/\/ [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); \/\/ []\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(generateIntegers((2l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((10l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((132l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((17l), (89l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"}]