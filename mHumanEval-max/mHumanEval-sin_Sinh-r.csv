task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,sin_Sinh,r,"         අංක ලැයිස්තුවේ, ට වඩා එකිනෙකට සමීප අංක දෙකක් තියෙනවද කියලා බලන්න.# >>> has_close_elements(c(1.0, 2.0, 3.0), 0.5)
# FALSE
# >>> has_close_elements(c(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)
# TRUE
has_close_elements <- function(numbers, threshold) {","has_close_elements <- function(numbers, threshold) {
  for (i in seq_along(numbers)) {
    for (j in seq_along(numbers)) {
      if (i != j && abs(numbers[i] - numbers[j]) < threshold) {
        return(TRUE)
      }
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- has_close_elements
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0), 0.95), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0), 0.8), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1), 1.0), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1), 0.5), FALSE)))
}
test_humaneval()"
HumanEval_1,sin_Sinh,r,"ආදාන නූල තුල ඇති ඕනෑම අවකාශයක් නොසලකා හරින්න.වෙන් වෙන් කණ්ඩායම් සමබරව (සෑම විවෘත ආධාරකයක්ම නිසි ලෙස වසා ඇත) සහ එකිනෙකා තුළ කූඩු නොවී ඒ කණ්ඩායම වෙනම string වලට වෙන් කරලා ඒ ලැයිස්තුව ආපහු දෙන්න.මෙම ශ් රිතයට ආදානය වන්නේ බහු කණ්ඩායම් සහිත නයිට් රස් වලින් සමන්විත නූල් ය. ඔබේ ඉලක්කය වන්නේ # >>> separate_paren_groups('( ) (( )) (( )( ))')
# c('()', '(())', '(()())')
separate_paren_groups <- function(paren_string) {","separate_paren_groups <- function(paren_string) {
  # Remove spaces from the input string
  paren_string <- gsub("" "", """", paren_string)
  
  # Initialize variables for processing
  result <- c()
  current_group <- """"
  balance <- 0
  
  # Iterate through each character in the string
  for (char in strsplit(paren_string, """")[[1]]) {
    current_group <- paste0(current_group, char)
    if (char == ""("") {
      balance <- balance + 1
    } else if (char == "")"") {
      balance <- balance - 1
    }
    
    # If balance is zero, we found a complete group
    if (balance == 0 && nchar(current_group) > 0) {
      result <- c(result, current_group)
      current_group <- """"
    }
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- separate_paren_groups
    stopifnot(isTRUE(all.equal(candidate('(()()) ((())) () ((())()())'), c('(()())', '((()))', '()', '((())()())'))))
    stopifnot(isTRUE(all.equal(candidate('() (()) ((())) (((())))'), c('()', '(())', '((()))', '(((())))'))))
    stopifnot(isTRUE(all.equal(candidate('(()(())((())))'), c('(()(())((())))'))))
    stopifnot(isTRUE(all.equal(candidate('( ) (( )) (( )( ))'), c('()', '(())', '(()())'))))
}
test_humaneval()"
HumanEval_2,sin_Sinh,r,"අංකයේ දශම කොටස නැවත ලබා දෙන්න.(අතිරික්ත කොටස හැමවිටම 1 ට වඩා කුඩායි.)සහ සම්පූර්ණ සංඛ් යා කොටස (දී ඇති සංඛ් යාවට වඩා විශාලතම සම්පූර්ණ සංඛ් යාව) සහ දශම අංක ධනාත්මක පාවෙන අක්ෂාංකයක් ලබා දීලා, ඒක  බවට වෙන් කරන්න පුළුවන්.# >>> truncate_number(3.5)
# 0.5
truncate_number <- function(number) {","truncate_number <- function(number) {
  return(number - floor(number))
}","test_humaneval <- function() {
    candidate <- truncate_number
    stopifnot(isTRUE(all.equal(candidate(3.5), 0.5)))
    stopifnot(isTRUE(all.equal(candidate(1.25), 0.25)))
    stopifnot(isTRUE(all.equal(candidate(123.0), 0.0)))
}
test_humaneval()"
HumanEval_3,sin_Sinh,r,"ඒ අවස්ථාවෙදි function එක TRUE නැවත ලබාදිය යුතුයි. එහෙම නැත්නම් ඒක FALSE නැවත ලබාදිය යුතුයි.ඔබේ කාර්යය තමයි ඕනෑම අවස්ථාවක ගිණුමේ ශේෂය ශුන් යයට වඩා පහත වැටෙනවා නම් හඳුනාගන්න එක, සහ ඔයාට ලැබෙනවා  වලින් පටන් ගන්න බැංකු ගිණුමක තැන්පතු සහ මුදල් ආපසු ගැනීමේ මෙහෙයුම් ලැයිස්තුවක්.# >>> below_zero(c(1, 2, 3))
# FALSE
# >>> below_zero(c(1, 2, -4, 5))
# TRUE
below_zero <- function(operations) {","below_zero <- function(operations) {
  balance <- 0
  for (op in operations) {
    balance <- balance + op
    if (balance < 0) {
      return(TRUE)
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- below_zero
    stopifnot(isTRUE(all.equal(candidate(c()), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, -3, 1, 2, -3)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, -4, 5, 6)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 2, -2, 5, -5, 4, -4)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 2, -2, 5, -5, 4, -5)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, -2, 2, -2, 5, -5, 4, -4)), TRUE)))
}
test_humaneval()"
HumanEval_4,sin_Sinh,r,"MAD = සාමාන් ය ∙ x - x_mean ∙මූලද් රව් යයක් සහ කේන්ද් රයක් (මේ අවස්ථාවේදී සාමාන් යය):මධ් යම නිරපේක්ෂ අපගමනය කියන්නේ මේ දෙක අතර සාමාන් ය නිරපේක්ෂ වෙනස.මෙම දත්ත කට්ටලයේ මධ් යම අගය වටා.ලබා දී ඇති ආදාන සංඛ් යා ලැයිස්තුවක් සඳහා, මධ් යම නිරපේක්ෂ අපගමනය ගණනය කරන්න.# >>> mean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))
# 1.0
mean_absolute_deviation <- function(numbers) {","mean_absolute_deviation <- function(numbers) {
  x_mean <- mean(numbers)
  mad <- mean(abs(numbers - x_mean))
  return(mad)
}

# Example usage
mean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))","test_humaneval <- function() {
    candidate <- mean_absolute_deviation
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0)), 0.5)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0)), 1.0)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0)), 1.2)))
}
test_humaneval()"
HumanEval_5,sin_Sinh,r,"ආදාන ලැයිස්තුවේ සෑම අඛණ්ඩ අංග දෙකක් අතරම ""සීමා මායිම"" අංකයක් ඇතුළත් කරන්න `අංක' # >>> intersperse(c(), 4)
# c()
# >>> intersperse(c(1, 2, 3), 4)
# c(1, 4, 2, 4, 3)
intersperse <- function(numbers, delimeter) {","intersperse <- function(numbers, delimeter) {
  if (length(numbers) <= 1) {
    return(numbers)
  }
  result <- c()
  for (i in 1:(length(numbers) - 1)) {
    result <- c(result, numbers[i], delimeter)
  }
  result <- c(result, numbers[length(numbers)])
  return(result)
}","test_humaneval <- function() {
    candidate <- intersperse
    stopifnot(isTRUE(all.equal(candidate(c(), 7), c())))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 2), 8), c(5, 8, 6, 8, 3, 8, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 2, 2), 2), c(2, 2, 2, 2, 2))))
}
test_humaneval()"
HumanEval_6,sin_Sinh,r,"උදාහරණයක් ලෙස, (() (()) හි උපරිම වශයෙන් පැටවුන් බිහි කිරීමේ මට්ටම් දෙකක් ඇති අතර ((())) හි තුනක් ඇත. එක් එක් කණ්ඩායම සඳහා, කුටි වල ගැඹුරුම ස්ථානය ලබා දෙන්න.මෙම ශ් රිතයට ආදානය වන්නේ අවකාශයන්ගෙන් වෙන් කර ඇති කුටිවල බහු කණ්ඩායම් නියෝජනය කරන නූල් ය.# >>> parse_nested_parens('(()()) ((())) () ((())()())')
# c(2, 3, 1, 3)
parse_nested_parens <- function(paren_string) {","parse_nested_parens <- function(paren_string) {
  sapply(strsplit(paren_string, "" "")[[1]], function(group) {
    max_nesting <- 0
    current_nesting <- 0
    for (char in strsplit(group, """")[[1]]) {
      if (char == ""("") {
        current_nesting <- current_nesting + 1
        max_nesting <- max(max_nesting, current_nesting)
      } else if (char == "")"") {
        current_nesting <- current_nesting - 1
      }
    }
    return(max_nesting)
  })
}","test_humaneval <- function() {
    candidate <- parse_nested_parens
    stopifnot(isTRUE(all.equal(candidate('(()()) ((())) () ((())()())'), c(2, 3, 1, 3))))
    stopifnot(isTRUE(all.equal(candidate('() (()) ((())) (((())))'), c(1, 2, 3, 4))))
    stopifnot(isTRUE(all.equal(candidate('(()(())((())))'), c(4))))
}
test_humaneval()"
HumanEval_7,sin_Sinh,r,"සීමිත දත්ත ලැයිස්තුවක් සීමිත දත්ත ලැයිස්තුවක් සීමිත දත්ත ලැයිස්තුවක් සීමිත දත්ත ලැයිස්තුවක් සීමිත දත්ත ලැයිස්තුවක් සීමිත දත්ත ලැයිස්තුවක්# >>> filter_by_substring(c(), 'a')
# c()
# >>> filter_by_substring(c('abc', 'bacd', 'cde', 'array'), 'a')
# c('abc', 'bacd', 'array')
filter_by_substring <- function(strings, substring) {","filter_by_substring <- function(strings, substring) {
  return(strings[grepl(substring, strings)])
}","test_humaneval <- function() {
    candidate <- filter_by_substring
    stopifnot(isTRUE(all.equal(candidate(c(), 'john'), c())))
    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))))
    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'), 'xx'), c('xxx', 'aaaxxy', 'xxxAAA', 'xxx'))))
    stopifnot(isTRUE(all.equal(candidate(c('grunt', 'trumpet', 'prune', 'gruesome'), 'run'), c('grunt', 'prune'))))
}
test_humaneval()"
HumanEval_8,sin_Sinh,r,"හිස් එකතුව 0 ට සමාන විය යුතුයි, හිස් නිෂ්පාදනය 1 ට සමාන විය යුතුයි.දී ඇති සම්පූර්ණ සංඛ් යා ලැයිස්තුවක් සඳහා, ලැයිස්තුවක ඇති සියලුම සම්පූර්ණ සංඛ් යා වල එකතුවක් සහ ගුණයකින් සමන්විත ලැයිස්තුවක් ලබා දෙන්න.# >>> sum_product(c())
# c(0, 1)
# >>> sum_product(c(1, 2, 3, 4))
# c(10, 24)
sum_product <- function(numbers) {","sum_product <- function(numbers) {
  sum_val <- sum(numbers)
  prod_val <- ifelse(length(numbers) == 0, 1, prod(numbers))
  return(c(sum_val, prod_val))
}","test_humaneval <- function() {
    candidate <- sum_product
    stopifnot(isTRUE(all.equal(candidate(c()), c(0, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1)), c(3, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(100, 0)), c(100, 0))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 7)), c(15, 105))))
    stopifnot(isTRUE(all.equal(candidate(c(10)), c(10, 10))))
}
test_humaneval()"
HumanEval_9,sin_Sinh,r,"අනුපිළිවෙල අනුව.ලබා දී ඇති සම්පූර්ණ සංඛ් යා ලැයිස්තුවකින්, ලබා දී ඇති මොහොත දක්වා සොයාගත් උපරිම අංග ලැයිස්තුවක් ජනනය කරන්න.# >>> rolling_max(c(1, 2, 3, 2, 3, 4, 2))
# c(1, 2, 3, 3, 3, 4, 4)
rolling_max <- function(numbers) {","rolling_max <- function(numbers) {
  max_list <- c()
  current_max <- -Inf
  for (number in numbers) {
    current_max <- max(current_max, number)
    max_list <- c(max_list, current_max)
  }
  return(max_list)
}","test_humaneval <- function() {
    candidate <- rolling_max
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 1)), c(4, 4, 4, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3, 100, 3)), c(3, 3, 3, 100, 100))))
}
test_humaneval()"
HumanEval_10,sin_Sinh,r,"- අක්ෂර මාලාවේ අවසානයට අක්ෂර මාලාවේ පෙරනිමිති එකතු කරන්න.- ලබා දී ඇති නූලෙහි දීර්ඝතම පශ්චාත්-පරිවර්තනය සොයා ගන්න එය පාලින්ඩ් රෝමයකි.ඇල්ගොරිතම අදහස සරලයි.ලබා දී ඇති නූලකින් ආරම්භ වන කෙටිම පාලින්ඩ් රෝමය සොයා ගන්න.# >>> make_palindrome('')
# ''
# >>> make_palindrome('cat')
# 'catac'
# >>> make_palindrome('cata')
# 'catac'
make_palindrome <- function(string) {","make_palindrome <- function(string) {
  is_palindrome <- function(s) {
    return(s == stringi::stri_reverse(s))
  }
  
  n <- nchar(string)
  
  for (i in seq(n, 0, by = -1)) {
    suffix <- substr(string, i, n)
    if (is_palindrome(suffix)) {
      prefix <- substr(string, 1, i - 1)
      return(paste0(string, stringi::stri_reverse(prefix)))
    }
  }
  
  return(string) # for the empty string case
}","test_humaneval <- function() {
    candidate <- make_palindrome
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('x'), 'x')))
    stopifnot(isTRUE(all.equal(candidate('xyz'), 'xyzyx')))
    stopifnot(isTRUE(all.equal(candidate('xyx'), 'xyx')))
    stopifnot(isTRUE(all.equal(candidate('jerry'), 'jerryrrej')))
}
test_humaneval()"
HumanEval_11,sin_Sinh,r,"මෙම ආදාන මත ද්විමය XOR සිදුකර ප් රතිඵලය ද නූලක් ලෙස ලබා දෙන්න.ආදානය 1 සහ 0 වලින් පමණක් සමන්විත a සහ b නූල් දෙකක්.# >>> string_xor('010', '110')
# '100'
string_xor <- function(a, b) {","string_xor <- function(a, b) {
  xor_result <- mapply(function(x, y) { 
    ifelse(x == y, 0, 1) 
  }, strsplit(a, NULL)[[1]], strsplit(b, NULL)[[1]])
  return(paste(xor_result, collapse = """"))
}","test_humaneval <- function() {
    candidate <- string_xor
    stopifnot(isTRUE(all.equal(candidate('111000', '101010'), '010010')))
    stopifnot(isTRUE(all.equal(candidate('1', '1'), '0')))
    stopifnot(isTRUE(all.equal(candidate('0101', '0000'), '0101')))
}
test_humaneval()"
HumanEval_12,sin_Sinh,r,"ආදාන ලැයිස්තුව හිස් නම් NULL නැවත ලබා දෙන්න.ලැයිස්තුවෙන් දිගම string එක දෙන්න.# >>> longest(c())
# NULL
# >>> longest(c('a', 'b', 'c'))
# 'a'
# >>> longest(c('a', 'bb', 'ccc'))
# 'ccc'
longest <- function(strings) {","longest <- function(strings) {
  if (length(strings) == 0) return(NULL)
  longest_string <- strings[1]
  for (s in strings) {
    if (nchar(s) > nchar(longest_string)) {
      longest_string <- s
    }
  }
  return(longest_string)
}","test_humaneval <- function() {
    candidate <- longest
    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z')), 'x')))
    stopifnot(isTRUE(all.equal(candidate(c('x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc')), 'zzzz')))
}
test_humaneval()"
HumanEval_13,sin_Sinh,r,"a සහ b යන පූර්ණ සංඛ් යා දෙකක විශාලතම පොදු බෙදන්නා ලබා දෙන්න.# >>> greatest_common_divisor(3, 5)
# 1
# >>> greatest_common_divisor(25, 15)
# 5
greatest_common_divisor <- function(a, b) {","greatest_common_divisor <- function(a, b) {
  while (b != 0) {
    temp <- b
    b <- a %% b
    a <- temp
  }
  return(abs(a))
}","test_humaneval <- function() {
    candidate <- greatest_common_divisor
    stopifnot(isTRUE(all.equal(candidate(3, 7), 1)))
    stopifnot(isTRUE(all.equal(candidate(10, 15), 5)))
    stopifnot(isTRUE(all.equal(candidate(49, 14), 7)))
    stopifnot(isTRUE(all.equal(candidate(144, 60), 12)))
}
test_humaneval()"
HumanEval_14,sin_Sinh,r,"ආදාන නූලෙහි කෙටිම සිට දිගම දක්වා සියලුම පෙරනිමිති ලැයිස්තුවක් නැවත ලබා දෙන්න# >>> all_prefixes('abc')
# c('a', 'ab', 'abc')
all_prefixes <- function(string) {","all_prefixes <- function(string) {
  prefixes <- character(nchar(string))
  for (i in seq_along(prefixes)) {
    prefixes[i] <- substr(string, 1, i)
  }
  return(prefixes)
}","test_humaneval <- function() {
    candidate <- all_prefixes
    stopifnot(isTRUE(all.equal(candidate(''), c())))
    stopifnot(isTRUE(all.equal(candidate('asdfgh'), c('a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'))))
    stopifnot(isTRUE(all.equal(candidate('WWW'), c('W', 'WW', 'WWW'))))
}
test_humaneval()"
HumanEval_15,sin_Sinh,r,"0 සිට n දක්වා වූ අවකාශය සීමා වූ සංඛ් යා අඩංගු නූලක් නැවත ලබා දෙන්න.# >>> string_sequence(0)
# '0'
# >>> string_sequence(5)
# '0 1 2 3 4 5'
string_sequence <- function(n) {","string_sequence <- function(n) {
  return(paste(0:n, collapse = "" ""))
}","test_humaneval <- function() {
    candidate <- string_sequence
    stopifnot(isTRUE(all.equal(candidate(0), '0')))
    stopifnot(isTRUE(all.equal(candidate(3), '0 1 2 3')))
    stopifnot(isTRUE(all.equal(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')))
}
test_humaneval()"
HumanEval_16,sin_Sinh,r,"ඛණ්ඩයක් ලබා දීලා, ඒකෙ අක්ෂර ගණන (අකුරු අකුරු නොතකා) හොයාගන්න # >>> count_distinct_characters('xyzXYZ')
# 3
# >>> count_distinct_characters('Jerry')
# 4
count_distinct_characters <- function(string) {","count_distinct_characters <- function(string) {
  # Convert the string to lowercase to handle case insensitivity
  lower_string <- tolower(string)
  # Split the string into individual characters
  chars <- strsplit(lower_string, NULL)[[1]]
  # Find the unique characters and count them
  distinct_count <- length(unique(chars))
  return(distinct_count)
}","test_humaneval <- function() {
    candidate <- count_distinct_characters
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
    stopifnot(isTRUE(all.equal(candidate('abcde'), 5)))
    stopifnot(isTRUE(all.equal(candidate('abcdecadeCADE'), 5)))
    stopifnot(isTRUE(all.equal(candidate('aaaaAAAAaaaa'), 1)))
    stopifnot(isTRUE(all.equal(candidate('Jerry jERRY JeRRRY'), 5)))
}
test_humaneval()"
HumanEval_17,sin_Sinh,r,"'හයික්' - හතරේ නෝට් එකක්, එක beat එකක් පවතිනවා.'o sa' - අර්ධ නෝට් එකක්, පහර දෙකක් පවතිනවා.'O' - සම්පූර්ණ නෝට්ටුවක්, පහර හතරක් පවතිනවා.මෙන්න මේකයි පුරාවෘත්තය:අන්තිමයා නෙවෙයි.ඔයාගේ වැඩේ තමයි මේ string එක parse කරලා ඒකෙන් එන integers list එක ආපහු දෙන්න එක එක බීට් වලට ගැලපෙන විදියට.මේ ෆන්ක්ශන් එකේ ආදානය තමයි සංගීත නෝට්ටු විශේෂ ASCII ආකෘතියකින් නියෝජනය කරන නූල්.# >>> parse_music('o o| .| o| o| .| .| .| .| o o')
# c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)
parse_music <- function(music_string) {","parse_music <- function(music_string) {
  # Split the input string by spaces to get individual notes
  notes <- strsplit(music_string, "" "")[[1]]
  
  # Map each note to its corresponding beat duration
  beats <- sapply(notes, function(note) {
    if (note == 'o') {
      return(4)
    } else if (note == 'o|') {
      return(2)
    } else if (note == '.|') {
      return(1)
    } else {
      stop(""Invalid note"")
    }
  })
  
  return(beats)
}

# Example usage:
# parse_music('o o| .| o| o| .| .| .| .| o o')
# c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)","test_humaneval <- function() {
    candidate <- parse_music
    stopifnot(isTRUE(all.equal(candidate(''), c())))
    stopifnot(isTRUE(all.equal(candidate('o o o o'), c(4, 4, 4, 4))))
    stopifnot(isTRUE(all.equal(candidate('.| .| .| .|'), c(1, 1, 1, 1))))
    stopifnot(isTRUE(all.equal(candidate('o| o| .| .| o o o o'), c(2, 2, 1, 1, 4, 4, 4, 4))))
    stopifnot(isTRUE(all.equal(candidate('o| .| o| .| o o| o o|'), c(2, 1, 2, 1, 4, 2, 4, 2))))
}
test_humaneval()"
HumanEval_18,sin_Sinh,r,"මුල් නූලෙහි දී ලබා දී ඇති උප නූල කී වතාවක් සොයාගත හැකිදැයි සොයා ගන්න. # >>> how_many_times('', 'a')
# 0
# >>> how_many_times('aaa', 'a')
# 3
# >>> how_many_times('aaaa', 'aa')
# 3
how_many_times <- function(string, substring) {","how_many_times <- function(string, substring) {
  if (nchar(substring) == 0) {
    return(0)
  }
  
  count <- 0
  for (i in seq(nchar(string) - nchar(substring) + 1)) {
    if (substr(string, i, i + nchar(substring) - 1) == substring) {
      count <- count + 1
    }
  }
  
  return(count)
}","test_humaneval <- function() {
    candidate <- how_many_times
    stopifnot(isTRUE(all.equal(candidate('', 'x'), 0)))
    stopifnot(isTRUE(all.equal(candidate('xyxyxyx', 'x'), 4)))
    stopifnot(isTRUE(all.equal(candidate('cacacacac', 'cac'), 4)))
    stopifnot(isTRUE(all.equal(candidate('john doe', 'john'), 1)))
}
test_humaneval()"
HumanEval_19,sin_Sinh,r,"ෙම් අංකය ෙපරපෙළ සිට විශාලතම අංකය දක්වා ෙයොමු කර ෙගන යන්නවලංගු විකල්පයන් වන්නේ '0', '1', '2', '3', '4', '5', '6', '7', '8' සහ '9' යන්නයි.ආදානය යනු '0' සිට '9' දක්වා අංක වලින් යුත් අවකාශය විසින් සීමා කරන ලද නූල් ය.# >>> sort_numbers('three one five')
# 'one three five'
sort_numbers <- function(numbers) {","sort_numbers <- function(numbers) {
  words_to_numbers <- c(
    ""zero"" = 0, ""one"" = 1, ""two"" = 2, ""three"" = 3, ""four"" = 4, 
    ""five"" = 5, ""six"" = 6, ""seven"" = 7, ""eight"" = 8, ""nine"" = 9
  )
  
  number_list <- strsplit(numbers, "" "")[[1]]
  sorted_numbers <- number_list[order(sapply(number_list, function(word) words_to_numbers[word]))]
  return(paste(sorted_numbers, collapse = "" ""))
}","test_humaneval <- function() {
    candidate <- sort_numbers
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('three'), 'three')))
    stopifnot(isTRUE(all.equal(candidate('three five nine'), 'three five nine')))
    stopifnot(isTRUE(all.equal(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')))
    stopifnot(isTRUE(all.equal(candidate('six five four three two one zero'), 'zero one two three four five six')))
}
test_humaneval()"
HumanEval_20,sin_Sinh,r,"අනිත් ඒවා පිළිවෙලට දෙන්න (අඩු ගාන, වැඩි ගාන).ලබා දී ඇති අංක ලැයිස්තුවෙන් (අවම වශයෙන් දෙකක්) එක් එක් අංකයට ආසන්නතම අංක දෙක තෝරාගෙන නැවත ලබා දෙන්න.# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))
# c(2.0, 2.2)
# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))
# c(2.0, 2.0)
find_closest_elements <- function(numbers) {","find_closest_elements <- function(numbers) {
  sorted_numbers <- sort(numbers)
  min_diff <- Inf
  closest_pair <- c()

  for (i in 1:(length(sorted_numbers) - 1)) {
    diff <- sorted_numbers[i + 1] - sorted_numbers[i]
    if (diff < min_diff) {
      min_diff <- diff
      closest_pair <- c(sorted_numbers[i], sorted_numbers[i + 1])
    }
  }

  return(closest_pair)
}","test_humaneval <- function() {
    candidate <- find_closest_elements
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)), c(3.9, 4.0))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0)), c(5.0, 5.9))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)), c(2.0, 2.2))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)), c(2.0, 2.0))))
    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1)), c(2.2, 3.1))))
}
test_humaneval()"
HumanEval_21,sin_Sinh,r,"එතකොට පොඩිම අංකය 0 වෙනවා, ලොකුම එක 1 වෙනවා.සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත (අවම වශයෙන් මූලද් රව් ය දෙකක), එම ලැයිස්තුවට රේඛීය පරිවර්තනයක් යොදන්න, # >>> rescale_to_unit(c(1.0, 2.0, 3.0, 4.0, 5.0))
# c(0.0, 0.25, 0.5, 0.75, 1.0)
rescale_to_unit <- function(numbers) {","rescale_to_unit <- function(numbers) {
  min_val <- min(numbers)
  max_val <- max(numbers)
  (numbers - min_val) / (max_val - min_val)
}","test_humaneval <- function() {
    candidate <- rescale_to_unit
    stopifnot(isTRUE(all.equal(candidate(c(2.0, 49.9)), c(0.0, 1.0))))
    stopifnot(isTRUE(all.equal(candidate(c(100.0, 49.9)), c(1.0, 0.0))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0)), c(0.0, 0.25, 0.5, 0.75, 1.0))))
    stopifnot(isTRUE(all.equal(candidate(c(2.0, 1.0, 5.0, 3.0, 4.0)), c(0.25, 0.0, 1.0, 0.5, 0.75))))
    stopifnot(isTRUE(all.equal(candidate(c(12.0, 11.0, 15.0, 13.0, 14.0)), c(0.25, 0.0, 1.0, 0.5, 0.75))))
}
test_humaneval()"
HumanEval_22,sin_Sinh,r,"ලබා දී ඇති rthon අගයන් සෝදා හරින්න# >>> filter_integers(list('a', 3.14, 5))
# c(5)
# >>> filter_integers(list(1, 2, 3, 'abc', list(), c()))
# c(1, 2, 3)
filter_integers <- function(values) {","filter_integers <- function(values) {
  return(unlist(Filter(is.integer, values)))
}","test_humaneval <- function() {
    candidate <- filter_integers
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(list(4, list(), c(), 23.2, 9, 'adasd')), c(4, 9))))
    stopifnot(isTRUE(all.equal(candidate(list(3, 'c', 3, 3, 'a', 'b')), c(3, 3, 3))))
}
test_humaneval()"
HumanEval_23,sin_Sinh,r,"ලබා දී ඇති string එකක දිග # >>> strlen('')
# 0
# >>> strlen('abc')
# 3
strlen <- function(string) {","strlen <- function(string) {
  return(nchar(string))
}","test_humaneval <- function() {
    candidate <- strlen
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
    stopifnot(isTRUE(all.equal(candidate('x'), 1)))
    stopifnot(isTRUE(all.equal(candidate('asdasnakj'), 9)))
}
test_humaneval()"
HumanEval_24,sin_Sinh,r,"ලබා දී ඇති n සංඛ් යාවක් සඳහා, n ට වඩා කුඩා, n සමානව බෙදන විශාලතම සංඛ් යාව සොයා ගන්න # >>> largest_divisor(15)
# 5
largest_divisor <- function(n) {","largest_divisor <- function(n) {
  for (i in (n-1):1) {
    if (n %% i == 0) {
      return(i)
    }
  }
}","test_humaneval <- function() {
    candidate <- largest_divisor
    stopifnot(isTRUE(all.equal(candidate(3), 1)))
    stopifnot(isTRUE(all.equal(candidate(7), 1)))
    stopifnot(isTRUE(all.equal(candidate(10), 5)))
    stopifnot(isTRUE(all.equal(candidate(100), 50)))
    stopifnot(isTRUE(all.equal(candidate(49), 7)))
}
test_humaneval()"
HumanEval_25,sin_Sinh,r,"ආදාන අංකය සියලුම සාධකවල ගුණයට සමාන විය යුතුයි.එක් එක් සාධකය සාධකකරණය තුළ ඇති වාර ගණනට අනුරූපව ලැයිස්තුගත කළ යුතුය.ලබා දී ඇති පූර්ණ සංඛ් යාවක ප් රථම සාධක ලැයිස්තුව කුඩාම සිට විශාලතම දක්වා පිළිවෙලට ලබා දෙන්න.# >>> factorize(8)
# c(2, 2, 2)
# >>> factorize(25)
# c(5, 5)
# >>> factorize(70)
# c(2, 5, 7)
factorize <- function(n) {","factorize <- function(n) {
  if (n < 2) {
    return(c())
  }
  factors <- c()
  divisor <- 2
  
  while (n > 1) {
    while (n %% divisor == 0) {
      factors <- c(factors, divisor)
      n <- n / divisor
    }
    divisor <- divisor + 1
  }
  
  return(factors)
}","test_humaneval <- function() {
    candidate <- factorize
    stopifnot(isTRUE(all.equal(candidate(2), c(2))))
    stopifnot(isTRUE(all.equal(candidate(4), c(2, 2))))
    stopifnot(isTRUE(all.equal(candidate(8), c(2, 2, 2))))
    stopifnot(isTRUE(all.equal(candidate(57), c(3, 19))))
    stopifnot(isTRUE(all.equal(candidate(3249), c(3, 3, 19, 19))))
    stopifnot(isTRUE(all.equal(candidate(185193), c(3, 3, 3, 19, 19, 19))))
    stopifnot(isTRUE(all.equal(candidate(20577), c(3, 19, 19, 19))))
    stopifnot(isTRUE(all.equal(candidate(18), c(2, 3, 3))))
}
test_humaneval()"
HumanEval_26,sin_Sinh,r,"අංගයන්ගේ පිළිවෙල ඇතුලත් කරන ආකාරයටම තියන්න.සම්පූර්ණ සංඛ් යා ලැයිස්තුවෙන්, එක වතාවකට වඩා ඇති සියලුම අංග ඉවත් කරන්න.# >>> remove_duplicates(c(1, 2, 3, 2, 4))
# c(1, 3, 4)
remove_duplicates <- function(numbers) {","remove_duplicates <- function(numbers) {
  unique_numbers <- numbers[!duplicated(numbers) & !duplicated(numbers, fromLast = TRUE)]
  return(unique_numbers)
}","test_humaneval <- function() {
    candidate <- remove_duplicates
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 4, 3, 5)), c(1, 4, 5))))
}
test_humaneval()"
HumanEval_27,sin_Sinh,r,"                                 # >>> flip_case('Hello')
# 'hELLO'
flip_case <- function(string) {","flip_case <- function(string) {
  chars <- strsplit(string, NULL)[[1]]
  flipped_chars <- sapply(chars, function(c) {
    if (grepl(""[a-z]"", c)) {
      return(toupper(c))
    } else if (grepl(""[A-Z]"", c)) {
      return(tolower(c))
    } else {
      return(c)
    }
  })
  return(paste(flipped_chars, collapse = """"))
}","test_humaneval <- function() {
    candidate <- flip_case
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('Hello!'), 'hELLO!')))
    stopifnot(isTRUE(all.equal(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')))
}
test_humaneval()"
HumanEval_28,sin_Sinh,r,"තනි නූලකට නූල් ලැයිස්තුවක් සවි කරන්න# >>> concatenate(c())
# ''
# >>> concatenate(c('a', 'b', 'c'))
# 'abc'
concatenate <- function(strings) {","concatenate <- function(strings) {
  paste(strings, collapse = """")
}","test_humaneval <- function() {
    candidate <- concatenate
    stopifnot(isTRUE(all.equal(candidate(c()), '')))
    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z')), 'xyz')))
    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z', 'w', 'k')), 'xyzwk')))
}
test_humaneval()"
HumanEval_29,sin_Sinh,r,"ලබා දී ඇති පෙරනිමිත්තකින් ආරම්භ වන නූල් සඳහා පමණක් ආදාන ලැයිස්තුවක් පෙරහන් කරන්න.# >>> filter_by_prefix(c(), 'a')
# c()
# >>> filter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')
# c('abc', 'array')
filter_by_prefix <- function(strings, prefix) {","filter_by_prefix <- function(strings, prefix) {
  return(strings[startsWith(strings, prefix)])
}","test_humaneval <- function() {
    candidate <- filter_by_prefix
    stopifnot(isTRUE(all.equal(candidate(c(), 'john'), c())))
    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))))
}
test_humaneval()"
HumanEval_30,sin_Sinh,r,"ලැයිස්තුවේ ඇති ධනාත්මක සංඛ් යා පමණක් නැවත ලබා දෙන්න.# >>> get_positive(c(-1, 2, -4, 5, 6))
# c(2, 5, 6)
# >>> get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
# c(5, 3, 2, 3, 9, 123, 1)
get_positive <- function(l) {","get_positive <- function(l) {
  return(l[l > 0])
}","test_humaneval <- function() {
    candidate <- get_positive
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, 4, 5, 6)), c(4, 5, 6))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)), c(5, 3, 2, 3, 3, 9, 123, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2)), c())))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
}
test_humaneval()"
HumanEval_31,sin_Sinh,r,"ලබා දී ඇති අංකය ප් රයිම් නම් true නැවත ලබා දෙන්න, එසේ නොමැති නම් false.# >>> is_prime(6)
# FALSE
# >>> is_prime(101)
# TRUE
# >>> is_prime(11)
# TRUE
# >>> is_prime(13441)
# TRUE
# >>> is_prime(61)
# TRUE
# >>> is_prime(4)
# FALSE
# >>> is_prime(1)
# FALSE
is_prime <- function(n) {","is_prime <- function(n) {
  if (n <= 1) {
    return(FALSE)
  }
  if (n <= 3) {
    return(TRUE)
  }
  if (n %% 2 == 0 || n %% 3 == 0) {
    return(FALSE)
  }
  i <- 5
  while (i * i <= n) {
    if (n %% i == 0 || n %% (i + 2) == 0) {
      return(FALSE)
    }
    i <- i + 6
  }
  return(TRUE)
}","test_humaneval <- function() {
    candidate <- is_prime
    stopifnot(isTRUE(all.equal(candidate(6), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(101), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(11), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(13441), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(61), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(4), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(5), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(11), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(17), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(85), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(77), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(255379), FALSE)))
}
test_humaneval()"
HumanEval_33,sin_Sinh,r,"                                    l' යනු l හා සමාන වේ දර්ශකවල එය තුනෙන් බෙදිය නොහැකි අතර එහි අගයන් දර්ශකවල එය සමාන වේ මෙම ශ් රිතය ලැයිස්තුවක් ගන්නවා l සහ ලැයිස්තුවක් ලබා දෙනවා l' එවැනි # >>> sort_third(c(1, 2, 3))
# c(1, 2, 3)
# >>> sort_third(c(5, 6, 3, 4, 8, 9, 2))
# c(2, 6, 3, 4, 8, 9, 5)
sort_third <- function(l) {","sort_third <- function(l) {
  # Find the indices that are divisible by three
  indices_div_by_3 <- seq(3, length(l), by = 3)
  
  # Extract the elements at those indices and sort them
  elements_to_sort <- l[indices_div_by_3]
  sorted_elements <- sort(elements_to_sort)
  
  # Replace the original elements at those indices with sorted ones
  l[indices_div_by_3] <- sorted_elements
  
  return(l)
}","test_humaneval <- function() {
    candidate <- sort_third
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 4, 8, 9, 2)), c(2, 6, 3, 4, 8, 9, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 8, 3, 4, 6, 9, 2)), c(2, 8, 3, 4, 6, 9, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 9, 4, 8, 3, 2)), c(2, 6, 9, 4, 8, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 4, 8, 9, 2, 1)), c(2, 6, 3, 4, 8, 9, 5, 1))))
}
test_humaneval()"
HumanEval_34,sin_Sinh,r,"ලැයිස්තුවක ඇති අද්විතීය අංගයන් නැවත ලබාදෙයි# >>> unique(c(5, 3, 5, 2, 3, 3, 9, 0, 123))
# c(0, 2, 3, 5, 9, 123)
unique <- function(l) {","unique <- function(l) {
  return(sort(unique(l)))
}","test_humaneval <- function() {
    candidate <- unique
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, 5, 2, 3, 3, 9, 0, 123)), c(0, 2, 3, 5, 9, 123))))
}
test_humaneval()"
HumanEval_35,sin_Sinh,r,"ලැයිස්තුවේ ඇති උපරිම අංගය නැවත ලබා දෙන්න.# >>> max_element(c(1, 2, 3))
# 3
# >>> max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
# 123
max_element <- function(l) {","max_element <- function(l) {
  return(max(l))
}","test_humaneval <- function() {
    candidate <- max_element
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)), 124)))
}
test_humaneval()"
HumanEval_36,sin_Sinh,r,"11 හෝ 13 න් බෙදිය හැකි n ට අඩු නිඛිල සංඛ් යා වල 7 අංකය දිස්වන වාර ගණන නැවත ලබා දෙන්න.# >>> fizz_buzz(50)
# 0
# >>> fizz_buzz(78)
# 2
# >>> fizz_buzz(79)
# 3
fizz_buzz <- function(n) {","fizz_buzz <- function(n) {
  count <- 0
  for (i in 1:(n-1)) {
    if (i %% 11 == 0 || i %% 13 == 0) {
      count <- count + sum(unlist(strsplit(as.character(i), """")) == ""7"")
    }
  }
  return(count)
}","test_humaneval <- function() {
    candidate <- fizz_buzz
    stopifnot(isTRUE(all.equal(candidate(50), 0)))
    stopifnot(isTRUE(all.equal(candidate(78), 2)))
    stopifnot(isTRUE(all.equal(candidate(79), 3)))
    stopifnot(isTRUE(all.equal(candidate(100), 3)))
    stopifnot(isTRUE(all.equal(candidate(200), 6)))
    stopifnot(isTRUE(all.equal(candidate(4000), 192)))
    stopifnot(isTRUE(all.equal(candidate(10000), 639)))
    stopifnot(isTRUE(all.equal(candidate(100000), 8026)))
}
test_humaneval()"
HumanEval_37,sin_Sinh,r,"l හි සම දර්ශකවල අගයන් වෙත, නමුත් වර්ග කර ඇත.l' අමුතු දර්ශක වලදී l හා සමාන වන අතර, සම දර්ශක වලදී එහි අගයන් සමාන වේ මෙම ශ් රිතය ලැයිස්තුවක් ගන්නවා l සහ ලැයිස්තුවක් ලබා දෙනවා l' එවැනි # >>> sort_even(c(1, 2, 3))
# c(1, 2, 3)
# >>> sort_even(c(5, 6, 3, 4))
# c(3, 6, 5, 4)
sort_even <- function(l) {","sort_even <- function(l) {
  even_indices <- seq(2, length(l), by=2)
  l[even_indices] <- sort(l[even_indices])
  return(l)
}","test_humaneval <- function() {
    candidate <- sort_even
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(1, 2, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)), c(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)), c(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10))))
}
test_humaneval()"
HumanEval_39,sin_Sinh,r,"prime_fib නැවත n- වන සංඛ් යාවක් ලබා දෙයි එය ෆිබොනාච්චි සංඛ් යාවක් වන අතර එය ප් රාථමික වේ. # >>> prime_fib(1)
# 2
# >>> prime_fib(2)
# 3
# >>> prime_fib(3)
# 5
# >>> prime_fib(4)
# 13
# >>> prime_fib(5)
# 89
prime_fib <- function(n) {","prime_fib <- function(n) {
  is_prime <- function(num) {
    if (num < 2) return(FALSE)
    for (i in 2:sqrt(num)) {
      if (num %% i == 0) return(FALSE)
    }
    return(TRUE)
  }
  
  fibonacci <- function() {
    a <- 0
    b <- 1
    while (TRUE) {
      yield <- a + b
      a <<- b
      b <<- yield
      yield
    }
  }
  
  fib_gen <- fibonacci()
  count <- 0
  repeat {
    current_fib <- fib_gen()
    if (is_prime(current_fib)) {
      count <- count + 1
      if (count == n) return(current_fib)
    }
  }
}","test_humaneval <- function() {
    candidate <- prime_fib
    stopifnot(isTRUE(all.equal(candidate(1), 2)))
    stopifnot(isTRUE(all.equal(candidate(2), 3)))
    stopifnot(isTRUE(all.equal(candidate(3), 5)))
    stopifnot(isTRUE(all.equal(candidate(4), 13)))
    stopifnot(isTRUE(all.equal(candidate(5), 89)))
    stopifnot(isTRUE(all.equal(candidate(6), 233)))
    stopifnot(isTRUE(all.equal(candidate(7), 1597)))
    stopifnot(isTRUE(all.equal(candidate(8), 28657)))
    stopifnot(isTRUE(all.equal(candidate(9), 514229)))
    stopifnot(isTRUE(all.equal(candidate(10), 433494437)))
}
test_humaneval()"
HumanEval_40,sin_Sinh,r,"අංකය 0 ට සමානයි, නැත්නම් FALSE.එය TRUE ලෙස ප් රතිස්ථාපනය කරයි ලැයිස්තුවේ triples_sum_to_zero, සම්පූර්ණ සංඛ් යා ලැයිස්තුවක් ආදානයක් ලෙස ගනී.# >>> triples_sum_to_zero(c(1, 3, 5, 0))
# FALSE
# >>> triples_sum_to_zero(c(1, 3, -2, 1))
# TRUE
# >>> triples_sum_to_zero(c(1, 2, 3, 7))
# FALSE
# >>> triples_sum_to_zero(c(2, 4, -5, 3, 9, 7))
# TRUE
# >>> triples_sum_to_zero(c(1))
# FALSE
triples_sum_to_zero <- function(l) {","triples_sum_to_zero <- function(l) {
  n <- length(l)
  if (n < 3) {
    return(FALSE)
  }
  for (i in 1:(n - 2)) {
    for (j in (i + 1):(n - 1)) {
      for (k in (j + 1):n) {
        if (l[i] + l[j] + l[k] == 0) {
          return(TRUE)
        }
      }
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- triples_sum_to_zero
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, 0)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, -1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, -2, 1)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 7)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 5, 7)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, -5, 3, 9, 7)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, -100)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(100, 3, 5, -100)), FALSE)))
}
test_humaneval()"
HumanEval_41,sin_Sinh,r,"මෙම ශ් රිතය එවැනි ගැටීම් ගණන ප් රතිදානය කරයි.හරියට ඔවුන් එකිනෙකාට ගැටෙන්නෑ වගේ.කෙසේ වෙතත්, වාහන අනන්තවත් ශක්තිමත් සහ ශක්තිමත්; එහි ප් රතිඵලයක් ලෙස, ඔවුන් දිගටම ගමන් කරනවා වමට දකුණට යන කාර් එකක් වමට දකුණට යන කාර් එකකට හැප්පෙනව.හැම කාර් එකක්ම එකම වේගයෙන් යනවා. කාර් දෙකක් ගැටෙනවා කියලා කියනවා.වාහන දෙකක යුගලය ආරම්භ වෙන්නේ කාර් n ක් වමේ සිට දකුණට ධාවනය කරනවා. එකවරම, කාර් n ක වෙනස් කට්ටලයක් හිතන්න පාරක් තියෙනවා කියලා ඒක කෙලින්ම, අනන්ත දිග රේඛාවක් කියලා.car_race_collision <- function(n) {","car_race_collision <- function(n) {
  # Each car moving left to right will eventually collide with each car moving right to left
  return(n)
}","test_humaneval <- function() {
    candidate <- car_race_collision
    stopifnot(isTRUE(all.equal(candidate(2), 4)))
    stopifnot(isTRUE(all.equal(candidate(3), 9)))
    stopifnot(isTRUE(all.equal(candidate(4), 16)))
    stopifnot(isTRUE(all.equal(candidate(8), 64)))
    stopifnot(isTRUE(all.equal(candidate(10), 100)))
}
test_humaneval()"
HumanEval_42,sin_Sinh,r,"1 කින් වැඩි කරන ලද අංග සහිත ආපසු පැමිණීමේ ලැයිස්තුව.# >>> incr_list(c(1, 2, 3))
# c(2, 3, 4)
# >>> incr_list(c(5, 3, 5, 2, 3, 3, 9, 0, 123))
# c(6, 4, 6, 3, 4, 4, 10, 1, 124)
incr_list <- function(l) {","incr_list <- function(l) {
  return(l + 1)
}","test_humaneval <- function() {
    candidate <- incr_list
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), c(4, 3, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 2, 5, 2, 3, 3, 9, 0, 123)), c(6, 3, 6, 3, 4, 4, 10, 1, 124))))
}
test_humaneval()"
HumanEval_43,sin_Sinh,r,"අංකය 0 ට සමානයි, නැත්නම් FALSE.එය TRUE ලෙස ප් රතිස්ථාපනය කරයි ලැයිස්තුවේ pairs_sum_to_zero, මුලද් රණය ලෙස පූර්ණ සංඛ් යා ලැයිස්තුවක් ගනී.# >>> pairs_sum_to_zero(c(1, 3, 5, 0))
# FALSE
# >>> pairs_sum_to_zero(c(1, 3, -2, 1))
# FALSE
# >>> pairs_sum_to_zero(c(1, 2, 3, 7))
# FALSE
# >>> pairs_sum_to_zero(c(2, 4, -5, 3, 5, 7))
# TRUE
# >>> pairs_sum_to_zero(c(1))
# FALSE
pairs_sum_to_zero <- function(l) {","pairs_sum_to_zero <- function(l) {
  n <- length(l)
  if (n < 2) return(FALSE)
  
  for (i in 1:(n-1)) {
    for (j in (i+1):n) {
      if (l[i] + l[j] == 0) {
        return(TRUE)
      }
    }
  }
  
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- pairs_sum_to_zero
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, 0)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, -2, 1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 7)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, -5, 3, 5, 7)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 3, 2, 30)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 3, 2, 31)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 4, 2, 30)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 4, 2, 31)), FALSE)))
}
test_humaneval()"
HumanEval_44,sin_Sinh,r,"මූලික සංඛ් යා 10 ට වඩා අඩුයි.පරිවර්තනයෙන් පසු string නියෝජනය නැවත ලබා දෙන්න.ආදාන අංකය x හි සංඛ් යා පදනම පදනම බවට වෙනස් කරන්න.# >>> change_base(8, 3)
# '22'
# >>> change_base(8, 2)
# '1000'
# >>> change_base(7, 2)
# '111'
change_base <- function(x, base) {","change_base <- function(x, base) {
  if (x == 0) return('0')
  result <- ''
  while (x > 0) {
    remainder <- x %% base
    result <- paste0(remainder, result)
    x <- x %/% base
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- change_base
    stopifnot(isTRUE(all.equal(candidate(8, 3), '22')))
    stopifnot(isTRUE(all.equal(candidate(9, 3), '100')))
    stopifnot(isTRUE(all.equal(candidate(234, 2), '11101010')))
    stopifnot(isTRUE(all.equal(candidate(16, 2), '10000')))
    stopifnot(isTRUE(all.equal(candidate(8, 2), '1000')))
    stopifnot(isTRUE(all.equal(candidate(7, 2), '111')))
    stopifnot(isTRUE(all.equal(candidate(2, 3), '2')))
    stopifnot(isTRUE(all.equal(candidate(3, 4), '3')))
    stopifnot(isTRUE(all.equal(candidate(4, 5), '4')))
    stopifnot(isTRUE(all.equal(candidate(5, 6), '5')))
    stopifnot(isTRUE(all.equal(candidate(6, 7), '6')))
    stopifnot(isTRUE(all.equal(candidate(7, 8), '7')))
}
test_humaneval()"
HumanEval_45,sin_Sinh,r,"ත් රිකෝණයක දිග සහ ඉහළ ප් රදේශය ලබා දී ඇත.# >>> triangle_area(5, 3)
# 7.5
triangle_area <- function(a, h) {","triangle_area <- function(a, h) {
  return(0.5 * a * h)
}","test_humaneval <- function() {
    candidate <- triangle_area
    stopifnot(isTRUE(all.equal(candidate(5, 3), 7.5)))
    stopifnot(isTRUE(all.equal(candidate(2, 2), 2.0)))
    stopifnot(isTRUE(all.equal(candidate(10, 8), 40.0)))
}
test_humaneval()"
HumanEval_46,sin_Sinh,r,"කරුණාකර fib4 අංක අනුක් රමයේ n වන අංගය කාර්යක්ෂමව ගණනය කිරීමට ශ් රිතයක් ලියන්න. පුනරාවර්තනය භාවිතා නොකරන්න.fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). - මම දන්නවා.- මම දන්නවා.- මම දන්නවා.fib4(0) -> 0 Fib4 අංක අනුක් රමය ෆිබොනාච්චි අනුක් රමය හා සමාන අනුක් රමයකි එය පහත පරිදි අර්ථ දක්වා ඇත:# >>> fib4(5)
# 4
# >>> fib4(6)
# 8
# >>> fib4(7)
# 14
fib4 <- function(n) {","fib4 <- function(n) {
  if (n == 0) return(0)
  if (n == 1) return(0)
  if (n == 2) return(2)
  if (n == 3) return(0)
  
  fib_seq <- c(0, 0, 2, 0) # Initialize with base cases
  for (i in 4:n) {
    fib_seq[i] <- fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4]
  }
  return(fib_seq[n])
}","test_humaneval <- function() {
    candidate <- fib4
    stopifnot(isTRUE(all.equal(candidate(5), 4)))
    stopifnot(isTRUE(all.equal(candidate(8), 28)))
    stopifnot(isTRUE(all.equal(candidate(10), 104)))
    stopifnot(isTRUE(all.equal(candidate(12), 386)))
}
test_humaneval()"
HumanEval_47,sin_Sinh,r,"ලැයිස්තුවේ ඇති මූලද් රව් යයන්ගේ නැවත පැමිණීමේ මධ් යම අගය l.# >>> median(c(3, 1, 2, 4, 5))
# 3
# >>> median(c(-10, 4, 6, 1000, 10, 20))
# 15.0
median <- function(l) {","median <- function(l) {
  return(median(l))
}","test_humaneval <- function() {
    candidate <- median
    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 2, 4, 5)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(-10, 4, 6, 1000, 10, 20)), 8.0)))
    stopifnot(isTRUE(all.equal(candidate(c(5)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(6, 5)), 5.5)))
    stopifnot(isTRUE(all.equal(candidate(c(8, 1, 3, 9, 9, 2, 7)), 7)))
}
test_humaneval()"
HumanEval_48,sin_Sinh,r,"ලබා දී ඇති string එක palindrome එකක්ද කියලා පරීක්ෂා කරනවා.# >>> is_palindrome('')
# TRUE
# >>> is_palindrome('aba')
# TRUE
# >>> is_palindrome('aaaaa')
# TRUE
# >>> is_palindrome('zbcd')
# FALSE
is_palindrome <- function(text) {","is_palindrome <- function(text) {
  return(text == paste(rev(unlist(strsplit(text, NULL))), collapse = """"))
}","test_humaneval <- function() {
    candidate <- is_palindrome
    stopifnot(isTRUE(all.equal(candidate(''), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('aba'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('aaaaa'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('zbcd'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('xywyx'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('xywyz'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('xywzx'), FALSE)))
}
test_humaneval()"
HumanEval_49,sin_Sinh,r,"2^n modulo p නැවත ලබා දෙන්න (අංක ගැන සැලකිලිමත් වන්න).# >>> modp(3, 5)
# 3
# >>> modp(1101, 101)
# 2
# >>> modp(0, 101)
# 1
# >>> modp(3, 11)
# 8
# >>> modp(100, 101)
# 1
modp <- function(n, p) {","modp <- function(n, p) {
  result <- 1
  base <- 2
  
  while (n > 0) {
    if (n %% 2 == 1) {
      result <- (result * base) %% p
    }
    base <- (base * base) %% p
    n <- n %/% 2
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- modp
    stopifnot(isTRUE(all.equal(candidate(3, 5), 3)))
    stopifnot(isTRUE(all.equal(candidate(1101, 101), 2)))
    stopifnot(isTRUE(all.equal(candidate(0, 101), 1)))
    stopifnot(isTRUE(all.equal(candidate(3, 11), 8)))
    stopifnot(isTRUE(all.equal(candidate(100, 101), 1)))
    stopifnot(isTRUE(all.equal(candidate(30, 5), 4)))
    stopifnot(isTRUE(all.equal(candidate(31, 5), 3)))
}
test_humaneval()"
HumanEval_51,sin_Sinh,r,"remove_vowels කියන්නේ ස්වර නැති string එකක් ගන්න සහ ස්වර නැති string එකක් ලබා දෙන function එකක්.# >>> remove_vowels('')
# ''
# >>> remove_vowels('abcdef')
# 'bcdf'
# >>> remove_vowels('aaaaa')
# ''
# >>> remove_vowels('aaBAA')
# 'B'
# >>> remove_vowels('zbcd')
# 'zbcd'
remove_vowels <- function(text) {","remove_vowels <- function(text) {
  gsub(""[aeiouAEIOU]"", """", text)
}","test_humaneval <- function() {
    candidate <- remove_vowels
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')))
    stopifnot(isTRUE(all.equal(candidate('fedcba'), 'fdcb')))
    stopifnot(isTRUE(all.equal(candidate('eeeee'), '')))
    stopifnot(isTRUE(all.equal(candidate('acBAA'), 'cB')))
    stopifnot(isTRUE(all.equal(candidate('EcBOO'), 'cB')))
    stopifnot(isTRUE(all.equal(candidate('ybcd'), 'ybcd')))
}
test_humaneval()"
HumanEval_52,sin_Sinh,r,"ලැයිස්තුවේ ඇති සියලුම අංකයන් t අගය යටතේ තිබේ නම් TRUE ලෙස ලබා දෙන්න.# >>> below_threshold(c(1, 2, 4, 10), 100)
# TRUE
# >>> below_threshold(c(1, 20, 4, 10), 5)
# FALSE
below_threshold <- function(l, t) {","below_threshold <- function(l, t) {
  return(all(l < t))
}","test_humaneval <- function() {
    candidate <- below_threshold
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 10), 100), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 5), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 21), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 22), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 8, 4, 10), 11), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 8, 4, 10), 10), FALSE)))
}
test_humaneval()"
HumanEval_53,sin_Sinh,r,"x සහ y අංක දෙක එකතු කරන්න.# >>> add(2, 3)
# 5
# >>> add(5, 7)
# 12
add <- function(x, y) {","add <- function(x, y) {
  return(x + y)
}","test_humaneval <- function() {
    candidate <- add
    stopifnot(isTRUE(all.equal(candidate(0, 1), 1)))
    stopifnot(isTRUE(all.equal(candidate(1, 0), 1)))
    stopifnot(isTRUE(all.equal(candidate(2, 3), 5)))
    stopifnot(isTRUE(all.equal(candidate(5, 7), 12)))
    stopifnot(isTRUE(all.equal(candidate(7, 5), 12)))
}
test_humaneval()"
HumanEval_54,sin_Sinh,r,"වචන දෙකක එකම අකුරු තියෙනවද කියලා බලන්න.# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
# TRUE
# >>> same_chars('abcd', 'dddddddabc')
# TRUE
# >>> same_chars('dddddddabc', 'abcd')
# TRUE
# >>> same_chars('eabcd', 'dddddddabc')
# FALSE
# >>> same_chars('abcd', 'dddddddabce')
# FALSE
# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
# FALSE
same_chars <- function(s0, s1) {","same_chars <- function(s0, s1) {
  return(identical(sort(unique(unlist(strsplit(s0, """")))), sort(unique(unlist(strsplit(s1, """"))))))
}","test_humaneval <- function() {
    candidate <- same_chars
    stopifnot(isTRUE(all.equal(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('abcd', 'dddddddabc'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('dddddddabc', 'abcd'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('eabcd', 'dddddddabc'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('abcd', 'dddddddabcf'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('aabb', 'aaccc'), FALSE)))
}
test_humaneval()"
HumanEval_55,sin_Sinh,r,"නැවත n- වන ෆිබොනාච්චි අංකය ලබා දෙන්න.# >>> fib(10)
# 55
# >>> fib(1)
# 1
# >>> fib(8)
# 21
fib <- function(n) {","fib <- function(n) {
  if (n <= 1) {
    return(n)
  }
  a <- 0
  b <- 1
  for (i in 2:n) {
    temp <- b
    b <- a + b
    a <- temp
  }
  return(b)
}","test_humaneval <- function() {
    candidate <- fib
    stopifnot(isTRUE(all.equal(candidate(10), 55)))
    stopifnot(isTRUE(all.equal(candidate(1), 1)))
    stopifnot(isTRUE(all.equal(candidate(8), 21)))
    stopifnot(isTRUE(all.equal(candidate(11), 89)))
    stopifnot(isTRUE(all.equal(candidate(12), 144)))
}
test_humaneval()"
HumanEval_56,sin_Sinh,r,"සෑම විවෘත කිරීමේ කොටු සඳහාම අනුරූප වසා දැමීමේ කොටු තිබේ නම් TRUE නැවත ලබා දෙන්න. brackets කියන්නේ ""<"" සහ "">"" කියන string එකක්.# >>> correct_bracketing('<')
# FALSE
# >>> correct_bracketing('<>')
# TRUE
# >>> correct_bracketing('<<><>>')
# TRUE
# >>> correct_bracketing('><<>')
# FALSE
correct_bracketing <- function(brackets) {","correct_bracketing <- function(brackets) {
  count <- 0
  for (char in strsplit(brackets, NULL)[[1]]) {
    if (char == ""<"") {
      count <- count + 1
    } else if (char == "">"") {
      count <- count - 1
    }
    if (count < 0) {
      return(FALSE)
    }
  }
  return(count == 0)
}","test_humaneval <- function() {
    candidate <- correct_bracketing
    stopifnot(isTRUE(all.equal(candidate('<>'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('<<><>>'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('<><><<<><><>><>><<><><<>>>'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('<<<><>>>>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('><<>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<<<<'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<<>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>><<>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>>><>'), FALSE)))
}
test_humaneval()"
HumanEval_57,sin_Sinh,r,"TRUE නැවත ලබා දෙයි නම් ලැයිස්තුවේ අංග ඒකාකාරී ලෙස වැඩි වීම හෝ අඩු වීම සිදු වේ.# >>> monotonic(c(1, 2, 4, 20))
# TRUE
# >>> monotonic(c(1, 20, 4, 10))
# FALSE
# >>> monotonic(c(4, 1, 0, -10))
# TRUE
monotonic <- function(l) {","monotonic <- function(l) {
  is_increasing <- all(diff(l) >= 0)
  is_decreasing <- all(diff(l) <= 0)
  return(is_increasing || is_decreasing)
}","test_humaneval <- function() {
    candidate <- monotonic
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 10)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 20)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 0, -10)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 1, 0)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 5, 60)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 60)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(9, 9, 9, 9)), TRUE)))
}
test_humaneval()"
HumanEval_58,sin_Sinh,r,"ලැයිස්තු දෙකක් සඳහා වර්ග කළ අද්විතීය පොදු මූලද් රව් යයන් නැවත ලබා දෙන්න.# >>> common(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))
# c(1, 5, 653)
# >>> common(c(5, 3, 2, 8), c(3, 2))
# c(2, 3)
common <- function(l1, l2) {","common <- function(l1, l2) {
  common_elements <- intersect(l1, l2)
  sorted_unique_common <- sort(unique(common_elements))
  return(sorted_unique_common)
}","test_humaneval <- function() {
    candidate <- common
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 8), c()), c())))
}
test_humaneval()"
HumanEval_59,sin_Sinh,r,"n හි විශාලතම ප් රථම සාධකය ලබා දෙන්න. n > 1 යැයි උපකල්පනය කර ප් රථම අංකයක් නොවේ. # >>> largest_prime_factor(13195)
# 29
# >>> largest_prime_factor(2048)
# 2
largest_prime_factor <- function(n) {","largest_prime_factor <- function(n) {
  # Initialize the largest prime factor
  largest_prime <- -1
  
  # Remove factors of 2
  while (n %% 2 == 0) {
    largest_prime <- 2
    n <- n / 2
  }
  
  # Try odd factors from 3 upwards
  factor <- 3
  while (factor * factor <= n) {
    while (n %% factor == 0) {
      largest_prime <- factor
      n <- n / factor
    }
    factor <- factor + 2
  }
  
  # If n is a prime number greater than 2
  if (n > 2) {
    largest_prime <- n
  }
  
  # Return the largest prime factor found
  return(largest_prime)
}","test_humaneval <- function() {
    candidate <- largest_prime_factor
    stopifnot(isTRUE(all.equal(candidate(15), 5)))
    stopifnot(isTRUE(all.equal(candidate(27), 3)))
    stopifnot(isTRUE(all.equal(candidate(63), 7)))
    stopifnot(isTRUE(all.equal(candidate(330), 11)))
    stopifnot(isTRUE(all.equal(candidate(13195), 29)))
}
test_humaneval()"
HumanEval_60,sin_Sinh,r,"sum_to_n කියන්නේ 1 සිට n දක්වා අංක එකතු කරන ශ් රිතයක්.# >>> sum_to_n(30)
# 465
# >>> sum_to_n(100)
# 5050
# >>> sum_to_n(5)
# 15
# >>> sum_to_n(10)
# 55
# >>> sum_to_n(1)
# 1
sum_to_n <- function(n) {","sum_to_n <- function(n) {
  return(sum(1:n))
}","test_humaneval <- function() {
    candidate <- sum_to_n
    stopifnot(isTRUE(all.equal(candidate(1), 1)))
    stopifnot(isTRUE(all.equal(candidate(6), 21)))
    stopifnot(isTRUE(all.equal(candidate(11), 66)))
    stopifnot(isTRUE(all.equal(candidate(30), 465)))
    stopifnot(isTRUE(all.equal(candidate(100), 5050)))
}
test_humaneval()"
HumanEval_61,sin_Sinh,r,"සෑම විවෘත කිරීමේ කොටු සඳහාම අනුරූප වසා දැමීමේ කොටු තිබේ නම් TRUE නැවත ලබා දෙන්න. බ් රැන්කෙස් කියන්නේ ""("" සහ """") යන අකුරු වලින් යුත් නූලක්.# >>> correct_bracketing('(')
# FALSE
# >>> correct_bracketing('()')
# TRUE
# >>> correct_bracketing('(()())')
# TRUE
# >>> correct_bracketing(')(()')
# FALSE
correct_bracketing <- function(brackets) {","correct_bracketing <- function(brackets) {
  balance <- 0
  for (char in strsplit(brackets, NULL)[[1]]) {
    if (char == ""("") {
      balance <- balance + 1
    } else if (char == "")"") {
      balance <- balance - 1
    }
    if (balance < 0) {
      return(FALSE)
    }
  }
  return(balance == 0)
}","test_humaneval <- function() {
    candidate <- correct_bracketing
    stopifnot(isTRUE(all.equal(candidate('()'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('(()())'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('()()(()())()'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('()()((()()())())(()()(()))'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('((()())))'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(')(()'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('('), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('(((('), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(')'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('(()'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('()()(()())())(()'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('()()(()())()))()'), FALSE)))
}
test_humaneval()"
HumanEval_62,sin_Sinh,r,"මෙම බහුපදයේ ෙද්ශකය නැවත ලබාදෙන්නxs[0] + xs[1] * x + xs[2] * x^2 + .... xs යනු බහුපදයක සංගුණකයන්.# >>> derivative(c(3, 1, 2, 4, 5))
# c(1, 4, 12, 20)
# >>> derivative(c(1, 2, 3))
# c(2, 6)
derivative <- function(xs) {","derivative <- function(xs) {
  n <- length(xs)
  if (n <= 1) return(numeric(0))  # Derivative of a constant is zero
  
  deriv <- numeric(n - 1)
  for (i in 2:n) {
    deriv[i - 1] <- xs[i] * (i - 1)
  }
  return(deriv)
}","test_humaneval <- function() {
    candidate <- derivative
    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 2, 4, 5)), c(1, 4, 12, 20))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(2, 6))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), c(2, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1, 0, 4)), c(2, 2, 0, 16))))
    stopifnot(isTRUE(all.equal(candidate(c(1)), c())))
}
test_humaneval()"
HumanEval_63,sin_Sinh,r,"කරුණාකරලා ෆිෆිෆි අංක පෙළේ n වන අංගය කාර්යක්ෂමව ගණනය කරන්න ක් රියාකාරකමක් ලියන්න.fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3). මෘදුකාංගයමෘදුකාංගය0 0 0FibFib අංක අනුක් රමය ෆිබොනාච්චි අනුක් රමය හා සමාන අනුක් රමයකි එය පහත පරිදි අර්ථ දක්වා ඇත: # >>> fibfib(1)
# 0
# >>> fibfib(5)
# 4
# >>> fibfib(8)
# 24
fibfib <- function(n) {","fibfib <- function(n) {
  # Base cases
  if (n == 0) return(0)
  if (n == 1) return(0)
  if (n == 2) return(1)

  # Initialize the first three values
  fibfib_values <- c(0, 0, 1)
  
  # Compute fibfib for the rest using iteration
  for (i in 3:n) {
    fibfib_values[i + 1] <- fibfib_values[i] + fibfib_values[i - 1] + fibfib_values[i - 2]
  }
  # Return the nth value
  return(fibfib_values[n + 1])
}","test_humaneval <- function() {
    candidate <- fibfib
    stopifnot(isTRUE(all.equal(candidate(2), 1)))
    stopifnot(isTRUE(all.equal(candidate(1), 0)))
    stopifnot(isTRUE(all.equal(candidate(5), 4)))
    stopifnot(isTRUE(all.equal(candidate(8), 24)))
    stopifnot(isTRUE(all.equal(candidate(10), 81)))
    stopifnot(isTRUE(all.equal(candidate(12), 274)))
    stopifnot(isTRUE(all.equal(candidate(14), 927)))
}
test_humaneval()"
HumanEval_64,sin_Sinh,r,"උදාහරණය:ඒකාකාරී, නමුත් එය ලබා දී ඇති වචනයේ අවසානයේදී පමණි.මෙහිදී ස්වරය 'අ', 'ඊ', 'අයි', 'ඕ', 'යූ' ලෙස හැඳින්වේ. මෙහිදී 'ය' යනු 'අ' ලෙසද හැඳින්වේ.වචනයක් ආදානය කරලා ඒකෙ තියෙන ස්වර ගණන ආපහු එවනවා. නියෝජනය කරන නූලක් ගන්නා function vowels_count එකක් ලියන්න# >>> vowels_count('abcde')
# 2
# >>> vowels_count('ACEDY')
# 3
vowels_count <- function(s) {","vowels_count <- function(s) {
  s <- tolower(s)
  n <- nchar(s)
  count <- sum(unlist(strsplit(s, NULL)) %in% c('a', 'e', 'i', 'o', 'u'))
  if (n > 0 && substr(s, n, n) == 'y') {
    count <- count + 1
  }
  return(count)
}","test_humaneval <- function() {
    candidate <- vowels_count
    stopifnot(isTRUE(all.equal(candidate('abcde'), 2)))
    stopifnot(isTRUE(all.equal(candidate('Alone'), 3)))
    stopifnot(isTRUE(all.equal(candidate('key'), 2)))
    stopifnot(isTRUE(all.equal(candidate('bye'), 1)))
    stopifnot(isTRUE(all.equal(candidate('keY'), 2)))
    stopifnot(isTRUE(all.equal(candidate('bYe'), 1)))
    stopifnot(isTRUE(all.equal(candidate('ACEDY'), 3)))
}
test_humaneval()"
HumanEval_65,sin_Sinh,r,"shift > ඉලක්කම් ගණන නම්, ඉලක්කම් ආපසු හරවන්න.ඵලයක් ලෙස string එකක් ලබා දෙන්න.සර්කියුලර් x හි ඉලක්කම් මාරු කරන්න, ඉලක්කම් මාරු කිරීමෙන් දකුණට මාරු කරන්න.# >>> circular_shift(12, 1)
# '21'
# >>> circular_shift(12, 2)
# '12'
circular_shift <- function(x, shift) {","circular_shift <- function(x, shift) {
  digits <- as.character(x)
  n <- nchar(digits)
  
  if (shift > n) {
    return(paste0(rev(unlist(strsplit(digits, """"))), collapse = """"))
  }
  
  shift <- shift %% n
  if (shift == 0) {
    return(digits)
  }
  
  right_part <- substr(digits, n - shift + 1, n)
  left_part <- substr(digits, 1, n - shift)
  result <- paste0(right_part, left_part)
  
  return(result)
}","test_humaneval <- function() {
    candidate <- circular_shift
    stopifnot(isTRUE(all.equal(candidate(100, 2), '001')))
    stopifnot(isTRUE(all.equal(candidate(12, 2), '12')))
    stopifnot(isTRUE(all.equal(candidate(97, 8), '79')))
    stopifnot(isTRUE(all.equal(candidate(12, 1), '21')))
    stopifnot(isTRUE(all.equal(candidate(11, 101), '11')))
}
test_humaneval()"
HumanEval_66,sin_Sinh,r,"උදාහරණ:ASCII කේතයශ් රිතයක් ආදානයක් ලෙස ගන්නා සහ ඉහළ අකුරු වල එකතුව පමණක් ලබා දෙන ශ් රිතයක් ලියන්න.කාර්යය # >>> digitSum('')
# 0
# >>> digitSum('abAB')
# 131
# >>> digitSum('abcCd')
# 67
# >>> digitSum('helloE')
# 69
# >>> digitSum('woArBld')
# 131
# >>> digitSum('aAaaaXa')
# 153
digitSum <- function(s) {","digitSum <- function(s) {
  sum(sapply(unlist(strsplit(s, """")), function(x) {
    if (grepl(""[A-Z]"", x)) {
      return(as.integer(charToRaw(x)))
    } else {
      return(0)
    }
  }))
}","test_humaneval <- function() {
    candidate <- digitSum
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
    stopifnot(isTRUE(all.equal(candidate('abAB'), 131)))
    stopifnot(isTRUE(all.equal(candidate('abcCd'), 67)))
    stopifnot(isTRUE(all.equal(candidate('helloE'), 69)))
    stopifnot(isTRUE(all.equal(candidate('woArBld'), 131)))
    stopifnot(isTRUE(all.equal(candidate('aAaaaXa'), 153)))
    stopifnot(isTRUE(all.equal(candidate(' How are yOu?'), 151)))
    stopifnot(isTRUE(all.equal(candidate('You arE Very Smart'), 327)))
}
test_humaneval()"
HumanEval_67,sin_Sinh,r,"විසිරීම සඳහා:කූඩයේ අල ගෙඩි ගණන නැවත ලබා දෙන්න.තැඹිලි සහ ඇපල් සහ ඵලවල මුළු සංඛ් යාව නියෝජනය කරන සම්පූර්ණ සංඛ් යාවක් ඇපල්, තැඹිලි, සහ මැංගු පලතුරු.                             මේ වැඩේට, ඔයාට දෙනව ඇපල් සහ තැඹිලි ගණන් නියෝජනය කරන නූලක්.# >>> fruit_distribution('5 apples and 6 oranges', 19)
# 8
# >>> fruit_distribution('0 apples and 1 oranges', 3)
# 2
# >>> fruit_distribution('2 apples and 3 oranges', 100)
# 95
# >>> fruit_distribution('100 apples and 1 oranges', 120)
# 19
fruit_distribution <- function(s, n) {","fruit_distribution <- function(s, n) {
  # Extract numbers using regular expressions
  matches <- regmatches(s, gregexpr(""\\d+"", s))
  # Convert extracted number strings to integers
  fruits_count <- as.integer(unlist(matches))
  # Total fruits described in the string
  total_apples_oranges <- sum(fruits_count)
  # Calculate mangoes
  mangoes <- n - total_apples_oranges
  return(mangoes)
}","test_humaneval <- function() {
    candidate <- fruit_distribution
    stopifnot(isTRUE(all.equal(candidate('5 apples and 6 oranges', 19), 8)))
    stopifnot(isTRUE(all.equal(candidate('5 apples and 6 oranges', 21), 10)))
    stopifnot(isTRUE(all.equal(candidate('0 apples and 1 oranges', 3), 2)))
    stopifnot(isTRUE(all.equal(candidate('1 apples and 0 oranges', 3), 2)))
    stopifnot(isTRUE(all.equal(candidate('2 apples and 3 oranges', 100), 95)))
    stopifnot(isTRUE(all.equal(candidate('2 apples and 3 oranges', 5), 0)))
    stopifnot(isTRUE(all.equal(candidate('1 apples and 100 oranges', 120), 19)))
}
test_humaneval()"
HumanEval_68,sin_Sinh,r,"උදාහරණය 1:අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්, අංකය 0 නම්අහුලන ලද නෝඩය ලැයිස්තුවක් තුල නැවත ලබා දිය යුතුයි, [smallest_value, එහි දර්ශකය ], එකම කුඩාම අගය සහිත නෝඩ් ගණනාවක් සොයාගනු ලැබුවහොත් කුඩාම දර්ශකය සහිත නෝඩ් එක නැවත ලබා දෙන්න. අහුලන ලද නෝඩය කුඩාම සම අගය සහිත නෝඩය විය යුතුයි.ඔයාගේ වැඩේ තමයි එක නෝඩයක් අයින් කරලා ඒක ආපහු ගෙනියන එක.""නො-නොසෘජු පූර්ණ සංඛ් යා නෝඩ් ඇති ගසක ශාඛාවක් නියෝජනය කරන දෛශිකයක් ලබා දී ඇත # >>> pluck(c(4, 2, 3))
# c(2, 1)
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 2:
# >>> pluck(c(1, 2, 3))
# c(2, 1)
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 3:
# >>> pluck(c())
# c()
# Example 4:
# >>> pluck(c(5, 0, 3, 0, 4, 2))
# c(0, 1)
# Explanation: 0 is the smallest value, but  there are two zeros,
#              so we will choose the first zero, which has the smallest index.
# Constraints:
#     * 1 <= nodes.length <= 10000
#     * 0 <= node.value
pluck <- function(arr) {","pluck <- function(arr) {
  # Find indices for even numbers in the array
  even_indices <- which(arr %% 2 == 0)
  
  # If no even numbers are found, return an empty list
  if (length(even_indices) == 0) {
    return(c())
  }
  
  # Extract even numbers
  even_values <- arr[even_indices]
  
  # Find the smallest even value
  min_even_value <- min(even_values)
  
  # Find the index of the first occurrence of the smallest even value
  min_index <- even_indices[which.min(even_values)]
  
  # Return the smallest even value and its index (0-based index)
  return(c(min_even_value, min_index - 1))
}","test_humaneval <- function() {
    candidate <- pluck
    stopifnot(isTRUE(all.equal(candidate(c(4, 2, 3)), c(2, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(2, 1))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(5, 0, 3, 0, 4, 2)), c(0, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 0, 5, 3)), c(0, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 4, 8, 4, 8)), c(4, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(7, 6, 7, 1)), c(6, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(7, 9, 7, 1)), c())))
}
test_humaneval()"
HumanEval_69,sin_Sinh,r,"උදාහරණ:එවැනි අගයක් නොමැති නම්, -1 නැවත ලබා දෙන්න.පූර්ණ සංඛ් යාතයක සංඛ් යාතය යනු එය ලැයිස්තුවේ ඇති වාර ගණනයි.ශුන් ය, සහ සංඛ් යාතය සම්පූර්ණ සංඛ් යාවේ අගයකට වඩා වැඩි හෝ සමාන වේ.ඔබට ධනාත්මක පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත.  ට වඩා විශාලතම පූර්ණ සංඛ් යාව නැවත ලබා දෙන්න# >>> search(c(4, 1, 2, 2, 3, 1))
# 2
# >>> search(c(1, 2, 2, 3, 3, 3, 4, 4, 4))
# 3
# >>> search(c(5, 5, 4, 4, 4))
# -1
search <- function(lst) {","search <- function(lst) {
  # Calculate the frequency table
  freq_table <- table(lst)
  
  # Convert to a data frame for easier processing
  freq_df <- as.data.frame(freq_table)
  
  # Rename columns for convenience
  names(freq_df) <- c(""value"", ""frequency"")
  
  # Filter the values where the frequency is greater than or equal to the value itself
  valid_values <- freq_df[freq_df$value <= freq_df$frequency, ""value""]
  
  # If no valid values exist, return -1
  if (length(valid_values) == 0) {
    return(-1)
  }
  
  # Otherwise, return the greatest valid value
  return(max(valid_values))
}","test_humaneval <- function() {
    candidate <- search
    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 5, 5, 1)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 4, 1, 4, 4)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 3)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 8, 8, 8, 8, 8, 8)), 8)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 3, 3, 2, 2)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 8, 2)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 3, 6, 5, 6, 4)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 9, 10, 1, 3)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(10)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 10, 10, 9, 2)), -1)))
}
test_humaneval()"
HumanEval_70,sin_Sinh,r,"උදාහරණ:ඊලඟට ඉතුරු ඉලක්කම් වලින් උපරිම එක, ඊලඟට අවම එක, ආදී වශයෙන්.අමුතු වර්ග කිරීම, ඔයා පටන් ගන්නව අවම අගය, සම්පූර්ණ සංඛ් යා ලැයිස්තුවක් දීලා, අමුතු පිළිවෙලකට ලැයිස්තුවක් ලබා දෙනවා.# >>> strange_sort_list(c(1, 2, 3, 4))
# c(1, 4, 2, 3)
# >>> strange_sort_list(c(5, 5, 5, 5))
# c(5, 5, 5, 5)
# >>> strange_sort_list(c())
# c()
strange_sort_list <- function(lst) {","strange_sort_list <- function(lst) {
  result <- c()
  while (length(lst) > 0) {
    # Find and append the minimum of the list
    min_val <- min(lst)
    result <- c(result, min_val)
    lst <- lst[lst != min_val]
    
    # Check if list is not empty before finding maximum
    if (length(lst) > 0) {
      # Find and append the maximum of the list
      max_val <- max(lst)
      result <- c(result, max_val)
      lst <- lst[lst != max_val]
    }
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- strange_sort_list
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 4, 2, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 7, 8, 9)), c(5, 9, 6, 8, 7))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), c(1, 5, 2, 4, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 7, 8, 9, 1)), c(1, 9, 5, 8, 6, 7))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 5, 5)), c(5, 5, 5, 5))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7, 8)), c(1, 8, 2, 7, 3, 6, 4, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(0, 2, 2, 2, 5, 5, -5, -5)), c(-5, 5, -5, 5, 0, 2, 2, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(111111)), c(111111))))
}
test_humaneval()"
HumanEval_71,sin_Sinh,r,"උදාහරණය:තුන්වෙනි පැත්තට වඩා.ත් රිකෝණයේ පැති තුනක් වලංගු ත් රිකෝණයක් බවට පත් වෙනවා ඕනෑම පැති දෙකක එකතුව වැඩි නම්.එහෙම නැත්නම්, ආපසු යන්න -1 ත් රිකෝණය දශම අගයන් 2 දක්වා වටකර ඇත.ත් රිකෝණයක පැති තුනක දිග ලබා දීලා,                                # >>> triangle_area(3, 4, 5)
# 6.0
# >>> triangle_area(1, 2, 10)
# -1
triangle_area <- function(a, b, c) {","triangle_area <- function(a, b, c) {
  if (a + b > c && a + c > b && b + c > a) {
    # Using Heron's formula
    s <- (a + b + c) / 2
    area <- sqrt(s * (s - a) * (s - b) * (s - c))
    return(round(area, 2))
  } else {
    return(-1)
  }
}","test_humaneval <- function() {
    candidate <- triangle_area
    stopifnot(isTRUE(all.equal(candidate(3, 4, 5), 6.0)))
    stopifnot(isTRUE(all.equal(candidate(1, 2, 10), -1)))
    stopifnot(isTRUE(all.equal(candidate(4, 8, 5), 8.18)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 2), 1.73)))
    stopifnot(isTRUE(all.equal(candidate(1, 2, 3), -1)))
    stopifnot(isTRUE(all.equal(candidate(10, 5, 7), 16.25)))
    stopifnot(isTRUE(all.equal(candidate(2, 6, 3), -1)))
    stopifnot(isTRUE(all.equal(candidate(1, 1, 1), 0.43)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 10), -1)))
}
test_humaneval()"
HumanEval_72,sin_Sinh,r,"උදාහරණය:q වස්තුව පියාඹයි එය සමබර නම් (එය පැලින්ඩ් රෝමික් ලැයිස්තුවක්) සහ එහි මූලද් රව් යවල එකතුව උපරිම හැකි බර w ට වඩා අඩු හෝ සමාන වේ.Q වස්තුව පියාසර කරන්නේ නම් TRUE සහ වෙනත් ආකාරයකින් FALSE ලබා දෙන ශ් රිතයක් ලියන්න.# >>> will_it_fly(c(1, 2), 5)
# FALSE
# # 1+2 is less than the maximum possible weight, but it's unbalanced.
# >>> will_it_fly(c(3, 2, 3), 1)
# FALSE
# # it's balanced, but 3+2+3 is more than the maximum possible weight.
# >>> will_it_fly(c(3, 2, 3), 9)
# TRUE
# # 3+2+3 is less than the maximum possible weight, and it's balanced.
# >>> will_it_fly(c(3), 5)
# TRUE
# # 3 is less than the maximum possible weight, and it's balanced.
will_it_fly <- function(q, w) {","will_it_fly <- function(q, w) {
  is_palindromic <- function(lst) {
    return(all(lst == rev(lst)))
  }
  
  is_balanced <- is_palindromic(q)
  sum_elements <- sum(q)
  
  return(is_balanced && (sum_elements <= w))
}","test_humaneval <- function() {
    candidate <- will_it_fly
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3), 9), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2), 5), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(3), 5), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3), 1), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3), 6), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(5), 5), TRUE)))
}
test_humaneval()"
HumanEval_73,sin_Sinh,r,"උදාහරණයක් විදියට:එක වෙනස් කිරීමකින්, ඔබට එක අංගයක් වෙනත් අංගයකට වෙනස් කළ හැකිය. සංඛ් යාතය වෙනස් කිරීමෙන්  සංඛ් යාතය පාලිද් රෝමීය බවට පත් කළ හැකිය.පූර්ණ සංඛ් යා වල arr දෛශිකයක් ලබා දීලා,                                  # >>> smallest_change(c(1, 2, 3, 5, 4, 7, 9, 6))
# 4
# >>> smallest_change(c(1, 2, 3, 4, 3, 2, 2))
# 1
# >>> smallest_change(c(1, 2, 3, 2, 1))
# 0
smallest_change <- function(arr) {","smallest_change <- function(arr) {
  n <- length(arr)
  changes <- 0
  
  for (i in 1:(n %/% 2)) {
    if (arr[i] != arr[n - i + 1]) {
      changes <- changes + 1
    }
  }
  
  return(changes)
}","test_humaneval <- function() {
    candidate <- smallest_change
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 5, 4, 7, 9, 6)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 3, 2, 2)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 2)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 4, 2)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 1, 3)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 1)))
}
test_humaneval()"
HumanEval_74,sin_Sinh,r,"උදාහරණ ලැයිස්තු දෙකේම එකම අක්ෂර සංඛ් යාවක් තිබේ නම්, පළමු ලැයිස්තුව නැවත ලබා දෙන්න.ලැයිස්තුවේ සියලුම නූල් වල ඇති මුළු අක්ෂර ගණන අනෙක් ලැයිස්තුවට වඩා අඩුය.ලැයිස්තු දෙකක් පිළිගන්නා සහ  ඇති ලැයිස්තුව නැවත ලබාදෙන ශ් රිතයක් ලියන්න# >>> total_match(c(), c())
# c()
# >>> total_match(c('hi', 'admin'), c('hI', 'Hi'))
# c('hI', 'Hi')
# >>> total_match(c('hi', 'admin'), c('hi', 'hi', 'admin', 'project'))
# c('hi', 'admin')
# >>> total_match(c('hi', 'admin'), c('hI', 'hi', 'hi'))
# c('hI', 'hi', 'hi')
# >>> total_match(c('4'), c('1', '2', '3', '4', '5'))
# c('4')
total_match <- function(lst1, lst2) {","total_match <- function(lst1, lst2) {
  chars_count <- function(lst) {
    sum(nchar(lst))
  }
  
  count1 <- chars_count(lst1)
  count2 <- chars_count(lst2)
  
  if (count1 < count2) {
    return(lst1)
  } else if (count1 > count2) {
    return(lst2)
  } else {
    return(lst1)
  }
}","test_humaneval <- function() {
    candidate <- total_match
    stopifnot(isTRUE(all.equal(candidate(c(), c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hi', 'hi')), c('hi', 'hi'))))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hi', 'hi', 'admin', 'project')), c('hi', 'admin'))))
    stopifnot(isTRUE(all.equal(candidate(c('4'), c('1', '2', '3', '4', '5')), c('4'))))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'Hi')), c('hI', 'Hi'))))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'hi', 'hi')), c('hI', 'hi', 'hi'))))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'hi', 'hii')), c('hi', 'admin'))))
    stopifnot(isTRUE(all.equal(candidate(c(), c('this')), c())))
    stopifnot(isTRUE(all.equal(candidate(c('this'), c()), c())))
}
test_humaneval()"
HumanEval_75,sin_Sinh,r,"උදාහරණය:අපි දන්නවා a 100 ට වඩා අඩු බව.ඒ වගේම බොරු.ලබා දී ඇති අංකය ප් රාථමික අංක 3 ක ගුණ කිරීමක් නම් true ලෙස ප් රතිඵල දෙන ශ් රිතයක් ලියන්න.# >>> is_multiply_prime(30)
# TRUE
# 30 = 2 * 3 * 5
is_multiply_prime <- function(a) {","is_multiply_prime <- function(a) {
  is_prime <- function(n) {
    if (n <= 1) return(FALSE)
    if (n <= 3) return(TRUE)
    if (n %% 2 == 0 || n %% 3 == 0) return(FALSE)
    i <- 5
    while (i * i <= n) {
      if (n %% i == 0 || n %% (i + 2) == 0) return(FALSE)
      i <- i + 6
    }
    return(TRUE)
  }

  if (a >= 100) return(FALSE)
  
  primes <- c()
  for (i in 2:a) {
    if (is_prime(i)) {
      primes <- c(primes, i)
    }
  }
  
  for (i in 1:length(primes)) {
    for (j in i:length(primes)) {
      for (k in j:length(primes)) {
        if (primes[i] * primes[j] * primes[k] == a) {
          return(TRUE)
        }
      }
    }
  }
  
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- is_multiply_prime
    stopifnot(isTRUE(all.equal(candidate(5), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(30), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(8), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(10), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(125), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(105), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(126), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(729), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(891), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1001), TRUE)))
}
test_humaneval()"
HumanEval_76,sin_Sinh,r,"උදාහරණයක් විදියට:x යනු n හි සරල බලයකි n**int=x n වල බලය සහ false වෙනත් අවස්ථාවලදී.ඔබේ කාර්යය තමයි අංකයක් x සරල නම් true නැවත ලබා දෙන ශ් රිතයක් ලිවීම # >>> is_simple_power(1, 4)
# TRUE
# >>> is_simple_power(2, 2)
# TRUE
# >>> is_simple_power(8, 2)
# TRUE
# >>> is_simple_power(3, 2)
# FALSE
# >>> is_simple_power(3, 1)
# FALSE
# >>> is_simple_power(5, 3)
# FALSE
is_simple_power <- function(x, n) {","is_simple_power <- function(x, n) {
  if (x == 1) return(TRUE)
  power <- 1
  while (power < x) {
    power <- power * n
    if (power == x) return(TRUE)
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- is_simple_power
    stopifnot(isTRUE(all.equal(candidate(16, 2), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(143214, 16), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(4, 2), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(9, 3), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(16, 4), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(24, 2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(128, 4), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(12, 6), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1, 1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(1, 12), TRUE)))
}
test_humaneval()"
HumanEval_77,sin_Sinh,r,"උදාහරණ:සටහන: ඔබ ඇතුලත් කිරීම සෑම විටම වලංගු වේ යැයි උපකල්පනය කළ හැකිය.මේ ඉංජර් එක යම්කිසි නිඛිල සංඛ් යාවක ඝනකයක් නම්.a සම්පූර්ණ සංඛ් යාවක් ලබාගෙන TRUE  ලෙස ප් රතිදානය කරන ශ් රිතයක් ලියන්න# >>> iscube(1)
# TRUE
# >>> iscube(2)
# FALSE
# >>> iscube(-1)
# TRUE
# >>> iscube(64)
# TRUE
# >>> iscube(0)
# TRUE
# >>> iscube(180)
# FALSE
iscube <- function(a) {","iscube <- function(a) {
  if (a == 0) return(TRUE)
  root <- round(abs(a)^(1/3))
  return(root^3 == abs(a))
}","test_humaneval <- function() {
    candidate <- iscube
    stopifnot(isTRUE(all.equal(candidate(1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(-1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(64), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(180), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1000), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(0), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(1729), FALSE)))
}
test_humaneval()"
HumanEval_78,sin_Sinh,r,"උදාහරණ:A,B,C,D,E,F හැමතිස්සෙම ලොකු අකුරෙන් ලියල තියනව.සටහන: ඔබ උපකල්පනය කල හැකියි ආදානය සෑම විටම නිවැරදි හෝ හිස් නූලකි, B (= දශම අංක 11), D (= දශම අංක 13).ඉතින් ඔයාලට පහත අංක වලින් එකක් හොයාගන්න වෙනවා. 2, 3, 5, 7, ප් රථම සංඛ් යා නම් 2, 3, 5, 7, 11, 13, 17...හෙක්සඩෙසීමල් අංක 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. 1 ට වඩා වැඩි නම් එය කුඩා ස්වාභාවික සංඛ් යා දෙකක ගුණයක් නොවේ).ප් රයිම් අංකය, ප් රයිම් අංකය, ස්වාභාවික අංකයක්.හෙක්සඩෙසීමල් අංකයක් ලෙස string එකක් ලෙසට ගණනය කරනවා.ඔයාට ලැබෙනවා කියන ශ් රිතයක් ලියන්න කියලා කිව්වා.# >>> hex_key('AB')
# 1
# >>> hex_key('1077E')
# 2
# >>> hex_key('ABED1A33')
# 4
# >>> hex_key('123456789ABCDEF0')
# 6
# >>> hex_key('2020')
# 2
hex_key <- function(num) {","hex_key <- function(num) {
  # Define the set of prime hexadecimal digits
  prime_hex_digits <- c('2', '3', '5', '7', 'B', 'D')
  
  # Initialize a counter
  count <- 0
  
  # Convert the input string to a list of characters
  chars <- strsplit(num, NULL)[[1]]
  
  # Loop over each character in the list
  for (char in chars) {
    # Check if the character is in the list of prime hexadecimal digits
    if (char %in% prime_hex_digits) {
      # Increment the count
      count <- count + 1
    }
  }
  
  # Return the count
  return(count)
}","test_humaneval <- function() {
    candidate <- hex_key
    stopifnot(isTRUE(all.equal(candidate('AB'), 1)))
    stopifnot(isTRUE(all.equal(candidate('1077E'), 2)))
    stopifnot(isTRUE(all.equal(candidate('ABED1A33'), 4)))
    stopifnot(isTRUE(all.equal(candidate('2020'), 2)))
    stopifnot(isTRUE(all.equal(candidate('123456789ABCDEF0'), 6)))
    stopifnot(isTRUE(all.equal(candidate('112233445566778899AABBCCDDEEFF00'), 12)))
}
test_humaneval()"
HumanEval_79,sin_Sinh,r,"උදාහරණ:අතිරේක අක්ෂර ආකෘතියට උදව් කරන්න.අක්ෂර මාලාවේ මුල සහ අවසානයේ අක්ෂර දෙකක් එකතු වෙනවා.අංකය. string එකේ හැම අක්ෂරයක්ම 0 හෝ 1 වෙයි.ද්විමය ආකෘතිය. ශ් රිතය ද්විමය සංඛ් යාවක් නියෝජනය කරන සෑම අක්ෂරයක්ම සහිත නූලක් ආපසු ලබා දිය යුතුය.ඔයාට දශම අංකයක් ලැබෙනවා. ඔයාගේ වැඩේ තමයි ඒක  බවට පරිවර්තනය කිරීම.# >>> decimal_to_binary(15)
# 'db1111db'
# >>> decimal_to_binary(32)
# 'db100000db'
decimal_to_binary <- function(decimal) {","decimal_to_binary <- function(decimal) {
  binary_string <- as.character(intToBits(decimal))
  binary_clean <- paste0(rev(binary_string), collapse = """")
  binary_trimmed <- sub(""^0+"", """", binary_clean)
  return(paste0(""db"", binary_trimmed, ""db""))
}","test_humaneval <- function() {
    candidate <- decimal_to_binary
    stopifnot(isTRUE(all.equal(candidate(0), 'db0db')))
    stopifnot(isTRUE(all.equal(candidate(32), 'db100000db')))
    stopifnot(isTRUE(all.equal(candidate(103), 'db1100111db')))
    stopifnot(isTRUE(all.equal(candidate(15), 'db1111db')))
}
test_humaneval()"
HumanEval_80,sin_Sinh,r,"උදාහරණයක් විදියට:ඛණ්ඩයක් hapr නම් එහි දිග අවම වශයෙන් 3 ක් නම් සහ සෑම අකුරු 3 ක්ම එකිනෙකට වෙනස් නම් ඔයාගේ වැඩේ තමයි string එක හරිද වැරදිද කියලා පරීක්ෂා කරන එක.ඔයාට string එකක් ලැබෙනවා.# >>> is_happy('a')
# FALSE
# >>> is_happy('aa')
# FALSE
# >>> is_happy('abcd')
# TRUE
# >>> is_happy('aabb')
# FALSE
# >>> is_happy('adb')
# TRUE
# >>> is_happy('xyy')
# FALSE
is_happy <- function(s) {","is_happy <- function(s) {
  n <- nchar(s)
  if (n < 3) {
    return(FALSE)
  }
  for (i in 1:(n - 2)) {
    if (length(unique(substring(s, i, i + 2))) != 3) {
      return(FALSE)
    }
  }
  return(TRUE)
}","test_humaneval <- function() {
    candidate <- is_happy
    stopifnot(isTRUE(all.equal(candidate('a'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('aa'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('abcd'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('aabb'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('adb'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('xyy'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('iopaxpoi'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('iopaxioi'), FALSE)))
}
test_humaneval()"
HumanEval_81,sin_Sinh,r,"උදාහරණය:0.0 E > 0.0 ඩී> 0.7 ඩී > 1.0 ඩී+ > 1.3 සී- සීතලම උෂ්ණත්වය> 2.0 C+ > 2.3 B- > 2.7 බී > 3.0 B+ > 3.3 A- > 3.7 A 4.0 A+ සාමාන් ය අගය. අකුරු අගය.පහත වගුව භාවිතා කරමින් අකුරු ශ් රේණිගත කිරීම් ලැයිස්තුවක් ප් රතිදානය කළ හැකි ශ් රිතයක්: ඇය ඔයාට ලැයිස්තුවක් දුන්නා සමහර ශිෂ් යයන්ගේ සාමාන් ය ලැයිස්තුවක් ඔයා ලියන්න ඕනේ.එකම ප් රශ්නේ තමයි, එයාට අගය කරන්න පාවිච්චි කරපු කේතය නැති වෙලා.ගුරුවරයා තමන්ගේම ඇල්ගොරිතමයක් හදලා තියෙනවා ශ් රේණිගත කිරීම සඳහා.මේ සති අන්තයේ ගුරුවරයා ලකුණු දෙන්න ඕන.# >>> grade_equation(c(4.0, 3, 1.7, 2, 3.5))
# c('A+', 'B', 'C-', 'C', 'A-')
numerical_letter_grade <- function(grades) {","numerical_letter_grade <- function(grades) {
  letter_grades <- sapply(grades, function(gpa) {
    if (gpa == 4.0) {
      ""A+""
    } else if (gpa > 3.7) {
      ""A""
    } else if (gpa > 3.3) {
      ""A-""
    } else if (gpa > 3.0) {
      ""B+""
    } else if (gpa > 2.7) {
      ""B""
    } else if (gpa > 2.3) {
      ""B-""
    } else if (gpa > 2.0) {
      ""C+""
    } else if (gpa > 1.7) {
      ""C""
    } else if (gpa > 1.3) {
      ""C-""
    } else if (gpa > 1.0) {
      ""D+""
    } else if (gpa > 0.7) {
      ""D""
    } else if (gpa > 0.0) {
      ""D-""
    } else {
      ""E""
    }
  })
  return(letter_grades)
}","test_humaneval <- function() {
    candidate <- numerical_letter_grade
    stopifnot(isTRUE(all.equal(candidate(c(4.0, 3, 1.7, 2, 3.5)), c('A+', 'B', 'C-', 'C', 'A-'))))
    stopifnot(isTRUE(all.equal(candidate(c(1.2)), c('D+'))))
    stopifnot(isTRUE(all.equal(candidate(c(0.5)), c('D-'))))
    stopifnot(isTRUE(all.equal(candidate(c(0.0)), c('E'))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 0.3, 1.5, 2.8, 3.3)), c('D', 'D-', 'C-', 'B', 'B+'))))
    stopifnot(isTRUE(all.equal(candidate(c(0.0, 0.7)), c('E', 'D-'))))
}
test_humaneval()"
HumanEval_82,sin_Sinh,r,"උදාහරණ length ප් රථම අංකයක් නම් හෝ FALSE නම් string එකක් අරගෙන TRUE එකක් දෙන function එකක් ලියන්න# >>> prime_length('Hello')
# TRUE
# >>> prime_length('abcdcba')
# TRUE
# >>> prime_length('kittens')
# TRUE
# >>> prime_length('orange')
# FALSE
prime_length <- function(string) {","prime_length <- function(string) {
  is_prime <- function(n) {
    if (n <= 1) return(FALSE)
    if (n <= 3) return(TRUE)
    if (n %% 2 == 0 || n %% 3 == 0) return(FALSE)
    
    i <- 5
    while (i * i <= n) {
      if (n %% i == 0 || n %% (i + 2) == 0) return(FALSE)
      i <- i + 6
    }
    
    return(TRUE)
  }
  
  string_length <- nchar(string)
  return(is_prime(string_length))
}","test_humaneval <- function() {
    candidate <- prime_length
    stopifnot(isTRUE(all.equal(candidate('Hello'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('abcdcba'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('kittens'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('orange'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('wow'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('world'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('MadaM'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('Wow'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('HI'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('go'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('gogo'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('aaaaaaaaaaaaaaa'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('Madam'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('M'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('0'), FALSE)))
}
test_humaneval()"
HumanEval_83,sin_Sinh,r,"ධනාත්මක සම්පූර්ණ සංඛ් යා 1 න් පටන් ගන්න හෝ අවසන් වෙන්න.ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී, n-ඉලක්කම් සංඛ් යා ගණනය කරන්න starts_one_ends <- function(n) {","starts_one_ends <- function(n) {
  if (n == 1) {
    return(1)
  } else {
    return(9 * (10^(n-2)) * 2)
  }
}","test_humaneval <- function() {
    candidate <- starts_one_ends
    stopifnot(isTRUE(all.equal(candidate(1), 1)))
    stopifnot(isTRUE(all.equal(candidate(2), 18)))
    stopifnot(isTRUE(all.equal(candidate(3), 180)))
    stopifnot(isTRUE(all.equal(candidate(4), 1800)))
    stopifnot(isTRUE(all.equal(candidate(5), 18000)))
}
test_humaneval()"
HumanEval_84,sin_Sinh,r,"උදාහරණය ධනාත්මක පූර්ණ සංඛ් යාවක් N ලබා දී එහි ඉලක්කම්වල මුළු එකතුව ද්විමය අකුරින් ලබා දෙන්න. # >>> solve(1000)
# '1'
# >>> solve(150)
# '110'
# >>> solve(147)
# '1100'
# Variables:
#     @N integer
#          Constraints: 0 ≤ N ≤ 10000.
# Output:
#      a string of binary number
solve <- function(N) {","solve <- function(N) {
  # Sum the digits of the number
  digit_sum <- sum(as.numeric(unlist(strsplit(as.character(N), """"))))
  # Convert the sum to binary and return as a string
  return(as.character(as.binary(digit_sum)))
}

# Helper function to convert number to binary
as.binary <- function(number) {
  if (number == 0) return(""0"")
  binary <- """"
  while (number > 0) {
    binary <- paste0(number %% 2, binary)
    number <- number %/% 2
  }
  return(binary)
}","test_humaneval <- function() {
    candidate <- solve
    stopifnot(isTRUE(all.equal(candidate(1000), '1')))
    stopifnot(isTRUE(all.equal(candidate(150), '110')))
    stopifnot(isTRUE(all.equal(candidate(147), '1100')))
    stopifnot(isTRUE(all.equal(candidate(333), '1001')))
    stopifnot(isTRUE(all.equal(candidate(963), '10010')))
}
test_humaneval()"
HumanEval_85,sin_Sinh,r,"උදාහරණ:ඉලක්කම් ලැයිස්තුවක් දීලා lst. අමු අංක තියෙන සම අංග එකතු කරන්න.# >>> add(c(4, 2, 6, 7))
# 2
add <- function(lst) {","add <- function(lst) {
  # Select elements at odd indices (which are even positions)
  elements_at_odd_indices <- lst[seq(2, length(lst), by=2)]
  # Keep only the even elements
  even_elements <- elements_at_odd_indices[elements_at_odd_indices %% 2 == 0]
  # Sum the even elements
  sum(even_elements)
}","test_humaneval <- function() {
    candidate <- add
    stopifnot(isTRUE(all.equal(candidate(c(4, 88)), 88)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 5, 6, 7, 2, 122)), 122)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 0, 6, 7)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 4, 6, 8)), 12)))
}
test_humaneval()"
HumanEval_86,sin_Sinh,r,"උදාහරණයක් විදියට:සටහන: ඔබ වාක් යයේ වචන සහ හිස් අවකාශයන්හි අනුපිළිවෙල තබා ගත යුතුය.අගය මත පදනම්ව ඉහළ යන පිළිවෙල.නව වචනයක් මගින් ප් රතිස්ථාපනය කරනු ලැබේ. එහිදී සියලුම අක්ෂර  තුළට සකසා ඇත.නූල් වල අනුපිළිවෙල අනුව, සියලුම වචන (අතුරු අවකාශයකින් වෙන් කර ඇති) අක්ෂර මාලාවක් අරගෙන ඒකේ පිළිවෙලට තියෙන අනුවාදයක් ලබාදෙන ශ් රිතයක් ලියන්න.# >>> anti_shuffle('Hi')
# 'Hi'
# >>> anti_shuffle('hello')
# 'ehllo'
# >>> anti_shuffle('Hello World!!!')
# 'Hello !!!Wdlor'
anti_shuffle <- function(s) {","anti_shuffle <- function(s) {
  words <- strsplit(s, ""(\\s+)"", perl = TRUE)[[1]]
  sorted_words <- sapply(words, function(word) {
    if (word == """") return(word)
    chars <- unlist(strsplit(word, split = """"))
    return(paste0(sort(chars), collapse = """"))
  })
  return(paste0(sorted_words, collapse = """"))
}","test_humaneval <- function() {
    candidate <- anti_shuffle
    stopifnot(isTRUE(all.equal(candidate('Hi'), 'Hi')))
    stopifnot(isTRUE(all.equal(candidate('hello'), 'ehllo')))
    stopifnot(isTRUE(all.equal(candidate('number'), 'bemnru')))
    stopifnot(isTRUE(all.equal(candidate('abcd'), 'abcd')))
    stopifnot(isTRUE(all.equal(candidate('Hello World!!!'), 'Hello !!!Wdlor')))
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')))
}
test_humaneval()"
HumanEval_87,sin_Sinh,r,"උදාහරණ:ඒ වගේම පේළියේ සහ තීරු වල ඛණ්ඩාංක පහළ යන පිළිවෙලට වෙන් කරන්න.️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️සෑම ලැයිස්තුවක්ම ඛණ්ඩාංකයක් - (පේළි, තීරු), 0 වලින් ආරම්භ වේ.සහ ලැයිස්තු ලැයිස්තුවක් ආපසු ලබා දෙන්න, [(x1, y1), (x2, y2) ...] එවැනි lst, සහ සම්පූර්ණ සංඛ් යාව x ලබා දීලා, සම්පූර්ණ සංඛ් යාව x හොයාගන්න, එක් එක් පේළියක කොළම් ගණන වෙනස් විය හැක.ඒකත් මැට් රික්ස් වලට සමානයි, නමුත් මැට් රික්ස් වලට වඩා වෙනස්,ඔයාට දෙමාන දත්ත ලබා දෙනවා, ඒක කූඩු ලැයිස්තුවක් වගේ,# >>> get_row(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1)
# list(c(0, 0), c(1, 4), c(1, 0), c(2, 5), c(2, 0))
# >>> get_row(c(), 1)
# c()
# >>> get_row(list(c(), c(1), c(1, 2, 3)), 3)
# list(c(2, 2))
get_row <- function(lst, x) {","get_row <- function(lst, x) {
  result <- list()
  for (i in seq_along(lst)) {
    row <- lst[[i]]
    cols <- which(row == x)
    for (col in rev(sort(cols - 1))) {
      result <- append(result, list(c(i - 1, col)))
    }
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- get_row
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1), list(c(0, 0), c(1, 4), c(1, 0), c(2, 5), c(2, 0)))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6)), 2), list(c(0, 1), c(1, 1), c(2, 1), c(3, 1), c(4, 1), c(5, 1)))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 1, 3, 4, 5, 6), c(1, 2, 1, 4, 5, 6), c(1, 2, 3, 1, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1), list(c(0, 0), c(1, 0), c(2, 1), c(2, 0), c(3, 2), c(3, 0), c(4, 3), c(4, 0), c(5, 4), c(5, 0), c(6, 5), c(6, 0)))))
    stopifnot(isTRUE(all.equal(candidate(c(), 1), c())))
    stopifnot(isTRUE(all.equal(candidate(list(c(1)), 2), c())))
    stopifnot(isTRUE(all.equal(candidate(list(c(), c(1), c(1, 2, 3)), 3), list(c(2, 2)))))
}
test_humaneval()"
HumanEval_88,sin_Sinh,r,"උදාහරණ:* ලබා දී ඇති දෛශිකය වෙනස් කරන්න එපා.සටහන:හෝ එය පහළ යන පිළිවෙලට වර්ග කරන්න.ඔයා මේ දෛශිකය වර්ධනාත්මකව වර්ග කරනවා, එකතුව (පළමු දර්ශක අගය, අවසාන දර්ශක අගය) අමුතු නම්,ණ නොවන පූර්ණ සංඛ් යා වල දෛශිකයක් ලබා දී ඇති විට, ණකරනයෙන් පසු ලබා දී ඇති දෛශිකයේ cor එකක් ලබා දෙන්න,# >>> sort_array(c())
# c()
# >>> sort_array(c(5))
# c(5)
# >>> sort_array(c(2, 4, 3, 0, 1, 5))
# c(0, 1, 2, 3, 4, 5)
# >>> sort_array(c(2, 4, 3, 0, 1, 5, 6))
# c(6, 5, 4, 3, 2, 1, 0)
sort_array <- function(array) {","sort_array <- function(array) {
  if (length(array) <= 1) {
    return(array)
  }
  
  first_value <- array[1]
  last_value <- array[length(array)]
  sum_values <- first_value + last_value
  
  if (sum_values %% 2 == 1) {
    return(sort(array))
  } else {
    return(sort(array, decreasing = TRUE))
  }
}","test_humaneval <- function() {
    candidate <- sort_array
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(5)), c(5))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 3, 0, 1, 5)), c(0, 1, 2, 3, 4, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 3, 0, 1, 5, 6)), c(6, 5, 4, 3, 2, 1, 0))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 1)), c(1, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(15, 42, 87, 32, 11, 0)), c(0, 11, 15, 32, 42, 87))))
    stopifnot(isTRUE(all.equal(candidate(c(21, 14, 23, 11)), c(23, 21, 14, 11))))
}
test_humaneval()"
HumanEval_89,sin_Sinh,r,"උදාහරණයක් විදියට:පහළට යන්න.අක්ෂර මාලාව භ් රමණය විය යුත්තේ අකුරු අක්ෂර මාලාව හරවා කේතනය කල නූලක් නැවත ලබා දෙයි.අංකය තර්කයක් ලෙස ගන්නා ශ් රිතයක් නිර්මාණය කරන්න# >>> encrypt('hi')
# 'lm'
# >>> encrypt('asdfghjkl')
# 'ewhjklnop'
# >>> encrypt('gf')
# 'kj'
# >>> encrypt('et')
# 'ix'
encrypt <- function(s) {","encrypt <- function(s) {
  alphabet <- letters
  shift <- 2 * 2
  encrypted <- sapply(strsplit(s, NULL)[[1]], function(char) {
    if (char %in% alphabet) {
      new_index <- (match(char, alphabet) + shift - 1) %% 26 + 1
      alphabet[new_index]
    } else {
      char
    }
  })
  paste(encrypted, collapse = """")
}","test_humaneval <- function() {
    candidate <- encrypt
    stopifnot(isTRUE(all.equal(candidate('hi'), 'lm')))
    stopifnot(isTRUE(all.equal(candidate('asdfghjkl'), 'ewhjklnop')))
    stopifnot(isTRUE(all.equal(candidate('gf'), 'kj')))
    stopifnot(isTRUE(all.equal(candidate('et'), 'ix')))
    stopifnot(isTRUE(all.equal(candidate('faewfawefaewg'), 'jeiajeaijeiak')))
    stopifnot(isTRUE(all.equal(candidate('hellomyfriend'), 'lippsqcjvmirh')))
    stopifnot(isTRUE(all.equal(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')))
    stopifnot(isTRUE(all.equal(candidate('a'), 'e')))
}
test_humaneval()"
HumanEval_90,sin_Sinh,r,"එවැනි අංගයක් නොමැති නම් NULL නැවත ලබා දෙන්න.ලැයිස්තුවේ දෙවන කුඩාම අංගය ලබා දෙන next_smallest () ශ් රිතයක් ලියන්න.ඔයාට මුළු සංඛ් යා ලැයිස්තුවක් ලැබෙනවා.# >>> next_smallest(c(1, 2, 3, 4, 5))
# 2
# >>> next_smallest(c(5, 1, 4, 3, 2))
# 2
# >>> next_smallest(c())
# NULL
# >>> next_smallest(c(1, 1))
# NULL
next_smallest <- function(lst) {","next_smallest <- function(lst) {
  # Sort the list and remove duplicates
  unique_sorted_lst <- sort(unique(lst))
  
  # Check if list contains at least two distinct elements
  if (length(unique_sorted_lst) < 2) {
    return(NULL)
  }
  
  # Return the second smallest element
  return(unique_sorted_lst[2])
}","test_humaneval <- function() {
    candidate <- next_smallest
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 1, 4, 3, 2)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1)), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 1, 0)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1)), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c(-35, 34, 12, -45)), -35)))
}
test_humaneval()"
HumanEval_91,sin_Sinh,r,"උදාහරණයක් විදියට:වාක් යයන් සීමා වන්නේ '.', '?' හෝ '!'.කම්මැලි කම කියන්නෙ ""I"" කියන වචනයෙන් පටන් ගන්න වාක් යයක්.ඔයාට වචන පෙළක් දෙනව, ඔයාගේ වැඩේ තමයි අංකය ගණන් කරන එක.# >>> is_bored('Hello world')
# 0
# >>> is_bored('The sky is blue. The sun is shining. I love this weather')
# 1
is_bored <- function(S) {","is_bored <- function(S) {
  # Split the string into sentences using '.', '?', and '!' as delimiters
  sentences <- unlist(strsplit(S, split = ""[.?!]""))
  
  # Trim leading and trailing whitespace from each sentence
  sentences <- trimws(sentences)
  
  # Count the number of sentences that start with ""I""
  boredom_count <- sum(startsWith(sentences, ""I""))
  
  return(boredom_count)
}","test_humaneval <- function() {
    candidate <- is_bored
    stopifnot(isTRUE(all.equal(candidate('Hello world'), 0)))
    stopifnot(isTRUE(all.equal(candidate('Is the sky blue?'), 0)))
    stopifnot(isTRUE(all.equal(candidate('I love It !'), 1)))
    stopifnot(isTRUE(all.equal(candidate('bIt'), 0)))
    stopifnot(isTRUE(all.equal(candidate('I feel good today. I will be productive. will kill It'), 2)))
    stopifnot(isTRUE(all.equal(candidate('You and I are going for a walk'), 0)))
}
test_humaneval()"
HumanEval_92,sin_Sinh,r,"උදාහරණ වෙනත් ඕනෑම අවස්ථාවක false නැවත ලබා දෙයි.එක අංකයක් අනෙක් දෙකේ එකතුවට සමාන නම් සහ සියලුම අංක පූර්ණ සංඛ් යා නම් true නැවත ලබාදෙනවා.අංක 3ක් ගන්න පුළුවන් ෆන්ෂන් එකක් හදන්න.# >>> any_int(5, 2, 7)
# TRUE
# >>> any_int(3, 2, 2)
# FALSE
# >>> any_int(3, -2, 1)
# TRUE
# >>> any_int(3.6, -2.2, 2)
# FALSE
any_int <- function(x, y, z) {","any_int <- function(x, y, z) {
  if (is.integer(x) && is.integer(y) && is.integer(z)) {
    return(x == y + z || y == x + z || z == x + y)
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- any_int
    stopifnot(isTRUE(all.equal(candidate(2, 3, 1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2.5, 2, 3), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1.5, 5, 3.5), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(2, 6, 2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(4, 2, 2), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2.2, 2.2, 2.2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(-4, 6, 2), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2, 1, 1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(3, 4, 7), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(3.0, 4, 7), FALSE)))
}
test_humaneval()"
HumanEval_93,sin_Sinh,r,"උදාහරණ:අකුරු විතරක් හිතන්න.ඉංග් රීසි අක්ෂර මාලාවේ ස්වරය.පණිවිඩය සහ අකුර ඒ අකුරෙන් ස්ථාන දෙකක ඉදිරියෙන්.ඒකෙන් හැම අකුරක්ම වෙනස් වෙනවා, හැම ස්වරයක්ම වෙනස් වෙනවා.පණිවිඩයක් අරගෙන එයින් කේතනය කරන ක් රියාකාරකමක් ලියන්න.# >>> encode('test')
# 'TGST'
# >>> encode('This is a message')
# 'tHKS KS C MGSSCGG'
encode <- function(message) {","encode <- function(message) {
  # Function to swap case of letters
  swap_case <- function(char) {
    if (grepl(""[A-Za-z]"", char)) {
      if (char %in% LETTERS) {
        return(tolower(char))
      } else {
        return(toupper(char))
      }
    } else {
      return(char)
    }
  }
  
  # Vowel replacement rules
  vowel_replacement <- function(char) {
    vowels <- c(""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U"")
    replacements <- c(""c"", ""g"", ""k"", ""q"", ""w"", ""C"", ""G"", ""K"", ""Q"", ""W"")
    if (char %in% vowels) {
      index <- match(char, vowels)
      return(replacements[index])
    } else {
      return(char)
    }
  }
  
  # Splitting the message into its characters
  message_chars <- strsplit(message, """")[[1]]
  
  # Apply swap case and vowel replacement
  encoded_chars <- sapply(message_chars, function(x) vowel_replacement(swap_case(x)))
  
  # Combine the characters back into a single string
  return(paste(encoded_chars, collapse = """"))
}","test_humaneval <- function() {
    candidate <- encode
    stopifnot(isTRUE(all.equal(candidate('TEST'), 'tgst')))
    stopifnot(isTRUE(all.equal(candidate('Mudasir'), 'mWDCSKR')))
    stopifnot(isTRUE(all.equal(candidate('YES'), 'ygs')))
    stopifnot(isTRUE(all.equal(candidate('This is a message'), 'tHKS KS C MGSSCGG')))
    stopifnot(isTRUE(all.equal(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')))
}
test_humaneval()"
HumanEval_94,sin_Sinh,r,"උදාහරණ:ඔයා හොයාගන්න ඕන ලොකුම ප් රයිම් අගය සහ ඒකේ අංක වල එකතුව.ඔයාට මුළු සංඛ් යා ලැයිස්තුවක් ලැබෙනවා.# >>> skjkasdkd(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))
# 10
# >>> skjkasdkd(c(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))
# 25
# >>> skjkasdkd(c(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))
# 13
# >>> skjkasdkd(c(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))
# 11
# >>> skjkasdkd(c(0, 81, 12, 3, 1, 21))
# 3
# >>> skjkasdkd(c(0, 8, 1, 2, 1, 7))
# 7
skjkasdkd <- function(lst) {","skjkasdkd <- function(lst) {
  is_prime <- function(n) {
    if (n <= 1) return(FALSE)
    if (n == 2) return(TRUE)
    if (n %% 2 == 0) return(FALSE)
    for (i in 3:sqrt(n)) {
      if (n %% i == 0) return(FALSE)
    }
    return(TRUE)
  }
  
  prime_values <- lst[sapply(lst, is_prime)]
  if (length(prime_values) == 0) return(0)
  
  largest_prime <- max(prime_values)
  
  sum_of_digits <- function(n) {
    sum(as.numeric(unlist(strsplit(as.character(n), """"))))
  }
  
  return(sum_of_digits(largest_prime))
}","test_humaneval <- function() {
    candidate <- skjkasdkd
    stopifnot(isTRUE(all.equal(candidate(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)), 10)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)), 25)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)), 13)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)), 11)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 81, 12, 3, 1, 21)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 8, 1, 2, 1, 7)), 7)))
    stopifnot(isTRUE(all.equal(candidate(c(8191)), 19)))
    stopifnot(isTRUE(all.equal(candidate(c(8191, 123456, 127, 7)), 19)))
    stopifnot(isTRUE(all.equal(candidate(c(127, 97, 8192)), 10)))
}
test_humaneval()"
HumanEval_95,sin_Sinh,r,"උදාහරණ:ලබා දී ඇති නම් ලැයිස්තුව හිස් නම්, ශ් රිතය FALSE නැවත ලබා දිය යුතුය.අකුරු විශාල හෝ සියලුම යතුරු අකුරු විශාල නම්, එසේ නොමැති නම් FALSE නැවත ලබා දෙන්න.නම් ලැයිස්තුවක් ලබා දීලා, සියලුම යතුරු lower  අකුරු වලින් string එකක් නම් TRUE නැවත දෙන්න.# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))
# TRUE
# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))
# FALSE
# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))
# FALSE
# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))
# FALSE
# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))
# TRUE
check_dict_case <- function(dict) {","check_dict_case <- function(dict) {
  if (length(dict) == 0) return(FALSE)
  
  keys <- names(dict)
  
  all_lower <- all(keys == tolower(keys))
  all_upper <- all(keys == toupper(keys))
  
  return(all_lower || all_upper)
}","test_humaneval <- function() {
    candidate <- check_dict_case
    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(list()), FALSE)))
}
test_humaneval()"
HumanEval_96,sin_Sinh,r,"උදාහරණයක් විදියට:ප් රාථමික සංඛ් යා සහ n ට වඩා අඩු සම්පූර්ණ සංඛ් යා.ණ නොවන පූර්ණ සංඛ් යාවක් ලබාගෙන පළමු n හි දෛශිකයක් ලබා දෙන ශ් රිතයක් ක් රියාත්මක කරන්න.# >>> count_up_to(5)
# c(2, 3)
# >>> count_up_to(11)
# c(2, 3, 5, 7)
# >>> count_up_to(0)
# c()
# >>> count_up_to(20)
# c(2, 3, 5, 7, 11, 13, 17, 19)
# >>> count_up_to(1)
# c()
# >>> count_up_to(18)
# c(2, 3, 5, 7, 11, 13, 17)
count_up_to <- function(n) {","count_up_to <- function(n) {
  is_prime <- function(num) {
    if (num <= 1) return(FALSE)
    if (num == 2) return(TRUE)
    if (num %% 2 == 0) return(FALSE)
    for (i in 3:sqrt(num)) {
      if (num %% i == 0) return(FALSE)
    }
    return(TRUE)
  }
  
  primes_below_n <- c()
  for (i in 2:(n-1)) {
    if (is_prime(i)) {
      primes_below_n <- c(primes_below_n, i)
    }
  }
  
  return(primes_below_n)
}","test_humaneval <- function() {
    candidate <- count_up_to
    stopifnot(isTRUE(all.equal(candidate(5), c(2, 3))))
    stopifnot(isTRUE(all.equal(candidate(6), c(2, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(7), c(2, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(10), c(2, 3, 5, 7))))
    stopifnot(isTRUE(all.equal(candidate(0), c())))
    stopifnot(isTRUE(all.equal(candidate(22), c(2, 3, 5, 7, 11, 13, 17, 19))))
    stopifnot(isTRUE(all.equal(candidate(1), c())))
    stopifnot(isTRUE(all.equal(candidate(18), c(2, 3, 5, 7, 11, 13, 17))))
    stopifnot(isTRUE(all.equal(candidate(47), c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43))))
    stopifnot(isTRUE(all.equal(candidate(101), c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))))
}
test_humaneval()"
HumanEval_97,sin_Sinh,r,"උදාහරණ:ආදානය හැමවිටම වලංගුයි කියලා උපකල්පනය කරන්න.ඒකක අංකවල ගුණය.සම්පූර්ණ කරන්න  පූර්ණ සංඛ් යා දෙකක් ගන්නා සහ  නැවත ලබා දෙන ශ් රිතය# >>> multiply(148, 412)
# 16
# >>> multiply(19, 28)
# 72
# >>> multiply(2020, 1851)
# 0
# >>> multiply(14, -15)
# 20
multiply <- function(a, b) {","multiply <- function(a, b) {
  unit_digit_a <- abs(a) %% 10
  unit_digit_b <- abs(b) %% 10
  return(unit_digit_a * unit_digit_b)
}","test_humaneval <- function() {
    candidate <- multiply
    stopifnot(isTRUE(all.equal(candidate(148, 412), 16)))
    stopifnot(isTRUE(all.equal(candidate(19, 28), 72)))
    stopifnot(isTRUE(all.equal(candidate(2020, 1851), 0)))
    stopifnot(isTRUE(all.equal(candidate(14, -15), 20)))
    stopifnot(isTRUE(all.equal(candidate(76, 67), 42)))
    stopifnot(isTRUE(all.equal(candidate(17, 27), 49)))
    stopifnot(isTRUE(all.equal(candidate(0, 1), 0)))
    stopifnot(isTRUE(all.equal(candidate(0, 0), 0)))
}
test_humaneval()"
HumanEval_98,sin_Sinh,r,"උදාහරණයක් විදියට:S අකුරු පෙළක් දීලා, ඒකාකාර දර්ශක වල ඇති ලොකු අකුරු වල ස්වර ගණන ගණන් කරන්න.# >>> count_upper('aBCdEf')
# 1
# >>> count_upper('abcdefg')
# 0
# >>> count_upper('dBBE')
# 0
count_upper <- function(s) {","count_upper <- function(s) {
  # Define uppercase vowels
  uppercase_vowels <- c('A', 'E', 'I', 'O', 'U')
  
  # Initialize counter
  count <- 0
  
  # Iterate over string indices
  for (i in seq(1, nchar(s), by=2)) {
    # Check if character at even index is an uppercase vowel
    if (substr(s, i, i) %in% uppercase_vowels) {
      count <- count + 1
    }
  }
  
  return(count)
}","test_humaneval <- function() {
    candidate <- count_upper
    stopifnot(isTRUE(all.equal(candidate('aBCdEf'), 1)))
    stopifnot(isTRUE(all.equal(candidate('abcdefg'), 0)))
    stopifnot(isTRUE(all.equal(candidate('dBBE'), 0)))
    stopifnot(isTRUE(all.equal(candidate('B'), 0)))
    stopifnot(isTRUE(all.equal(candidate('U'), 1)))
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
    stopifnot(isTRUE(all.equal(candidate('EEEE'), 2)))
}
test_humaneval()"
HumanEval_99,sin_Sinh,r,"උදාහරණ ඉලක්කම් දෙකකින්, ඒක ශුන් යයෙන් වට කරන්න. ඒ අංකය සමස්ථ දුරින් නම් අංකයක් නිරූපණය කරන අගයක් (string) ගන්නා ශ් රිතයක් සාදන්න# >>> closest_integer('10')
# 10
# >>> closest_integer('15.3')
# 15
# Note:
# Rounding away from zero means that if the given number is equidistant
# from two integers, the one you should return is the one that is the
# farthest from zero. For example closest_integer(""14.5"") should
# return 15 and closest_integer(""-14.5"") should return -15.
closest_integer <- function(value) {","closest_integer <- function(value) {
  num <- as.numeric(value)
  if (num %% 1 == 0.5 || num %% 1 == -0.5) {
    return(ifelse(num > 0, ceiling(num), floor(num)))
  } else {
    return(round(num))
  }
}","test_humaneval <- function() {
    candidate <- closest_integer
    stopifnot(isTRUE(all.equal(candidate('10'), 10)))
    stopifnot(isTRUE(all.equal(candidate('14.5'), 15)))
    stopifnot(isTRUE(all.equal(candidate('-15.5'), -16)))
    stopifnot(isTRUE(all.equal(candidate('15.3'), 15)))
    stopifnot(isTRUE(all.equal(candidate('0'), 0)))
}
test_humaneval()"
HumanEval_100,sin_Sinh,r,"උදාහරණ:i කියන්නෙ මට්ටමේ ගල් ගණන (i+1).ලැයිස්තුවක ඇති එක් එක් මට්ටමේ ඇති ගල් ගණන නැවත ලබා දෙන්න, එහිදී ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින් ෙලසින්- ඊලඟ සම සංඛ් යාව n සම නම්.- ඊලඟ අංකය අංකය නම් n අංකය අංකය නම්.ඊලඟ මට්ටමේ ගල් ගණන:පළමු මට්ටමේ ගල් n ක් තියෙනවා.ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී, ඔබ ගල් මට්ටම් n කින් යුත් ගොඩක් සෑදිය යුතුයි.# >>> make_a_pile(3)
# c(3, 5, 7)
make_a_pile <- function(n) {","make_a_pile <- function(n) {
  stones <- numeric(n)
  stones[1] <- n
  for (i in 2:n) {
    if (n %% 2 == 0) {
      stones[i] <- stones[i - 1] + 2
    } else {
      stones[i] <- stones[i - 1] + 2
    }
  }
  return(stones)
}","test_humaneval <- function() {
    candidate <- make_a_pile
    stopifnot(isTRUE(all.equal(candidate(3), c(3, 5, 7))))
    stopifnot(isTRUE(all.equal(candidate(4), c(4, 6, 8, 10))))
    stopifnot(isTRUE(all.equal(candidate(5), c(5, 7, 9, 11, 13))))
    stopifnot(isTRUE(all.equal(candidate(6), c(6, 8, 10, 12, 14, 16))))
    stopifnot(isTRUE(all.equal(candidate(8), c(8, 10, 12, 14, 16, 18, 20, 22))))
}
test_humaneval()"
HumanEval_101,sin_Sinh,r,"උදාහරණයක් විදියට:වචන වලට string එක බෙදලා වචන වල vector එකක් ආපහු දෙන්න.ඔයාට වචන පෙළක් ලැබේවි කොමා හෝ අවකාශයකින් වෙන් කරලා.# >>> words_string('Hi, my name is John')
# c('Hi', 'my', 'name', 'is', 'John')
# >>> words_string('One, two, three, four, five, six')
# c('One', 'two', 'three', 'four', 'five', 'six')
words_string <- function(s) {","words_string <- function(s) {
  s <- gsub("","", "" "", s)
  words <- unlist(strsplit(s, ""\\s+""))
  words <- words[words != """"]
  return(words)
}","test_humaneval <- function() {
    candidate <- words_string
    stopifnot(isTRUE(all.equal(candidate('Hi, my name is John'), c('Hi', 'my', 'name', 'is', 'John'))))
    stopifnot(isTRUE(all.equal(candidate('One, two, three, four, five, six'), c('One', 'two', 'three', 'four', 'five', 'six'))))
    stopifnot(isTRUE(all.equal(candidate('Hi, my name'), c('Hi', 'my', 'name'))))
    stopifnot(isTRUE(all.equal(candidate('One,, two, three, four, five, six,'), c('One', 'two', 'three', 'four', 'five', 'six'))))
    stopifnot(isTRUE(all.equal(candidate(''), c())))
    stopifnot(isTRUE(all.equal(candidate('ahmed     , gamal'), c('ahmed', 'gamal'))))
}
test_humaneval()"
HumanEval_102,sin_Sinh,r,"උදාහරණයක් විදියට:එහෙම අංකයක් නෑ, එහෙනම් මේ function එක -1 ආපහු දෙන්න ඕන.[x, y] ඇතුලත් පරාසයේ ඇති විශාලතම සම පූර්ණ සංඛ් යාව නම්.මෙම ශ් රිතය ධනාත්මක සංඛ් යා දෙකක් ගනී x සහ y සහ # >>> choose_num(12, 15)
# 14
# >>> choose_num(13, 12)
# -1
choose_num <- function(x, y) {","choose_num <- function(x, y) {
  if (x > y) {
    return(-1)
  }
  
  for (num in seq(y, x, by = -1)) {
    if (num %% 2 == 0) {
      return(num)
    }
  }
  
  return(-1)
}","test_humaneval <- function() {
    candidate <- choose_num
    stopifnot(isTRUE(all.equal(candidate(12, 15), 14)))
    stopifnot(isTRUE(all.equal(candidate(13, 12), -1)))
    stopifnot(isTRUE(all.equal(candidate(33, 12354), 12354)))
    stopifnot(isTRUE(all.equal(candidate(5234, 5233), -1)))
    stopifnot(isTRUE(all.equal(candidate(6, 29), 28)))
    stopifnot(isTRUE(all.equal(candidate(27, 10), -1)))
    stopifnot(isTRUE(all.equal(candidate(7, 7), -1)))
    stopifnot(isTRUE(all.equal(candidate(546, 546), 546)))
}
test_humaneval()"
HumanEval_103,sin_Sinh,r,"උදාහරණය:n m ට වඩා වැඩි නම්, -1 නැවත දෙන්න.පිළිතුර ළඟම සම්පූර්ණ සංඛ් යාවට වට කරලා ඒක ද්විමය සංඛ් යාවට හරවන්න.n සිට m දක්වා වූ සම්පූර්ණ සංඛ් යා වල සාමාන් යය (n සහ m ඇතුළුව).ඔබට ධනාත්මක පූර්ණ සංඛ් යා n සහ m දෙකක් ලබා දී ඇත, ඔබේ කාර්යය වන්නේ # >>> rounded_avg(1, 5)
# '0b11'
# >>> rounded_avg(7, 5)
# -1
# >>> rounded_avg(10, 20)
# '0b1111'
# >>> rounded_avg(20, 33)
# '0b11010'
rounded_avg <- function(n, m) {","rounded_avg <- function(n, m) {
  if (n > m) {
    return(-1)
  }
  avg <- mean(n:m)
  rounded_avg <- round(avg)
  binary_avg <- as.character(as.binary(rounded_avg))
  return(paste0(""0b"", binary_avg))
}

as.binary <- function(num) {
  if (num == 0) {
    return(""0"")
  }
  binary <- """"
  while (num > 0) {
    binary <- paste0(num %% 2, binary)
    num <- num %/% 2
  }
  return(binary)
}","test_humaneval <- function() {
    candidate <- rounded_avg
    stopifnot(isTRUE(all.equal(candidate(1, 5), '0b11')))
    stopifnot(isTRUE(all.equal(candidate(7, 13), '0b1010')))
    stopifnot(isTRUE(all.equal(candidate(964, 977), '0b1111001010')))
    stopifnot(isTRUE(all.equal(candidate(996, 997), '0b1111100100')))
    stopifnot(isTRUE(all.equal(candidate(560, 851), '0b1011000010')))
    stopifnot(isTRUE(all.equal(candidate(185, 546), '0b101101110')))
    stopifnot(isTRUE(all.equal(candidate(362, 496), '0b110101101')))
    stopifnot(isTRUE(all.equal(candidate(350, 902), '0b1001110010')))
    stopifnot(isTRUE(all.equal(candidate(197, 233), '0b11010111')))
    stopifnot(isTRUE(all.equal(candidate(7, 5), -1)))
    stopifnot(isTRUE(all.equal(candidate(5, 1), -1)))
    stopifnot(isTRUE(all.equal(candidate(5, 5), '0b101')))
}
test_humaneval()"
HumanEval_104,sin_Sinh,r,"උදාහරණයක් විදියට:සටහන: ආපසු ලබාදෙන ලැයිස්තුව වර්ධනය වන අනුපිළිවෙල අනුව වර්ග කළ යුතුය.ඒකකයේ කිසිම සංඛ් යාවක් නැති අංගයක්.ධනාත්මක පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත x. සියලු # >>> unique_digits(c(15, 33, 1422, 1))
# c(1, 15, 33)
# >>> unique_digits(c(152, 323, 1422, 10))
# c()
unique_digits <- function(x) {","unique_digits <- function(x) {
  has_no_even_digit <- function(num) {
    digits <- as.numeric(strsplit(as.character(num), """")[[1]])
    return(all(digits %% 2 != 0))
  }
  
  result <- Filter(has_no_even_digit, x)
  return(sort(result))
}","test_humaneval <- function() {
    candidate <- unique_digits
    stopifnot(isTRUE(all.equal(candidate(c(15, 33, 1422, 1)), c(1, 15, 33))))
    stopifnot(isTRUE(all.equal(candidate(c(152, 323, 1422, 10)), c())))
    stopifnot(isTRUE(all.equal(candidate(c(12345, 2033, 111, 151)), c(111, 151))))
    stopifnot(isTRUE(all.equal(candidate(c(135, 103, 31)), c(31, 135))))
}
test_humaneval()"
HumanEval_105,sin_Sinh,r,"උදාහරණයක් විදියට:එකයි, දෙකයි, තුනයි, හතරයි, පහයි, හයයි, හතයි, අටයි, නවයි.ඵලදායි දෛශිකය ආපසු හරවා, පසුව න් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය් ෙය්සම්පූර්ණ සංඛ් යා වල දෛශිකයක් ලබා දීලා, 1 ත් 9 ත් අතර සම්පූර්ණ සංඛ් යා වර්ග කරන්න,# >>> by_length(c(2, 1, 1, 4, 5, 8, 2, 3))
# c('Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One')
#   If the vector is empty, return an empty vector:
# >>> by_length(c())
# c()
#   If the vector has any strange number ignore it:
# >>> by_length(c(1, -1, 55))
# c('One')
by_length <- function(arr) {","by_length <- function(arr) {
  # Filter numbers between 1 and 9
  valid_nums <- arr[arr >= 1 & arr <= 9]
  # Sort the numbers
  sorted_nums <- sort(valid_nums, decreasing = TRUE)
  # Map numbers to their names
  num_to_name <- c(""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"")
  result <- num_to_name[sorted_nums]
  return(result)
}","test_humaneval <- function() {
    candidate <- by_length
    stopifnot(isTRUE(all.equal(candidate(c(2, 1, 1, 4, 5, 8, 2, 3)), c('Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 55)), c('One'))))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 3, 2)), c('Three', 'Two', 'One'))))
    stopifnot(isTRUE(all.equal(candidate(c(9, 4, 8)), c('Nine', 'Eight', 'Four'))))
}
test_humaneval()"
HumanEval_106,sin_Sinh,r,"උදාහරණය:i හි සාධකය 1 සිට i දක්වා සංඛ් යා ගුණ කිරීමයි (1 * 2 * ... * i).මම පටන් ගන්නේ 1 න්.නැත්නම් 1 සිට i දක්වා අංකවල එකතුව.සහ n ප් රමාණයේ ලැයිස්තුවක් ලබා දෙයි, එනම් i හි දර්ශකයේ ඇති මූලද් රව් යයේ අගය i හි සාධක වේ නම් i f යනු n ලෙස සලකන ලද, # >>> f(5)
# c(1, 2, 6, 24, 15)
f <- function(n) {","f <- function(n) {
  result <- numeric(n)  # Initialize a numeric vector of length n
  for (i in 1:n) {
    if (i %% 2 == 0) {  # Check if i is even
      result[i] <- factorial(i)
    } else {
      result[i] <- sum(1:i)
    }
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- f
    stopifnot(isTRUE(all.equal(candidate(5), c(1, 2, 6, 24, 15))))
    stopifnot(isTRUE(all.equal(candidate(7), c(1, 2, 6, 24, 15, 720, 28))))
    stopifnot(isTRUE(all.equal(candidate(1), c(1))))
    stopifnot(isTRUE(all.equal(candidate(3), c(1, 2, 6))))
}
test_humaneval()"
HumanEval_107,sin_Sinh,r,"උදාහරණය 1:අංකය ඇතුලත් පරාසය තුළට වැටෙන පූර්ණ සංඛ් යා පාලින්ඩ් රෝම්.ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දීලා, ඒකාකාර සහ අමුතු සංඛ් යාවන්  ඇති ලැයිස්තුවක් ලබා දෙන්න.# >>> even_odd_palindrome(3)
# c(1, 2)
#     Explanation:
#     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
# Example 2:
# >>> even_odd_palindrome(12)
# c(4, 6)
#     Explanation:
#     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
# Note:
#     1. 1 <= n <= 10^3
#     2. returned list has the number of even and odd integer palindromes respectively.
even_odd_palindrome <- function(n) {","even_odd_palindrome <- function(n) {
  is_palindrome <- function(x) {
    str_x <- as.character(x)
    return(str_x == paste(rev(unlist(strsplit(str_x, """"))), collapse = """"))
  }
  
  even_count <- 0
  odd_count <- 0
  
  for (i in 1:n) {
    if (is_palindrome(i)) {
      if (i %% 2 == 0) {
        even_count <- even_count + 1
      } else {
        odd_count <- odd_count + 1
      }
    }
  }
  
  return(c(even_count, odd_count))
}","test_humaneval <- function() {
    candidate <- even_odd_palindrome
    stopifnot(isTRUE(all.equal(candidate(123), c(8, 13))))
    stopifnot(isTRUE(all.equal(candidate(12), c(4, 6))))
    stopifnot(isTRUE(all.equal(candidate(3), c(1, 2))))
    stopifnot(isTRUE(all.equal(candidate(63), c(6, 8))))
    stopifnot(isTRUE(all.equal(candidate(25), c(5, 6))))
    stopifnot(isTRUE(all.equal(candidate(19), c(4, 6))))
    stopifnot(isTRUE(all.equal(candidate(9), c(4, 5))))
    stopifnot(isTRUE(all.equal(candidate(1), c(0, 1))))
}
test_humaneval()"
HumanEval_108,sin_Sinh,r,"උදාහරණයක් ලෙස, -123 අංකයට -1, 2, සහ 3 අත්සන් කරලා තියෙනවා.සංඛ් යාවක් ණ නම්, එහි පළමු අත්සන් කළ ඉලක්කම් ණ වේ:අංකවල එකතුව 0 ට වඩා වැඩි වන මූලද් රව් ය ගණන.ගණනය කරන්න_nums කියන ශ් රිතය ලියන්න. ඒකෙන් ගන්නා සම්පූර්ණ සංඛ් යා වල දෛශිකය සහ නැවත ලබා දෙන # >>> count_nums(c())
# 0
# >>> count_nums(c(-1, 11, -11))
# 1
# >>> count_nums(c(1, 1, 2))
# 3
count_nums <- function(arr) {","count_nums <- function(arr) {
  # Helper function to calculate sum of digits
  sum_of_digits <- function(num) {
    digits <- as.numeric(unlist(strsplit(as.character(num), """")))
    return(sum(digits, na.rm = TRUE))
  }
  
  # Apply the sum_of_digits function and count numbers with sum > 0
  return(sum(sapply(arr, sum_of_digits) > 0))
}","test_humaneval <- function() {
    candidate <- count_nums
    stopifnot(isTRUE(all.equal(candidate(c()), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, 0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 2, -2, 3, 4, 5)), 6)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 6, 9, -6, 0, 1, 5)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 100, 98, -7, 1, -1)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(12, 23, 34, -45, -56, 0)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), 1)))
}
test_humaneval()"
HumanEval_109,sin_Sinh,r,"උදාහරණයක් ලෙස:සටහන: ලබා දී ඇති ලැයිස්තුවේ අද්විතීය අංග ඇති බවට සහතික වේ.ලබා දී ඇති දෛශිකය හිස් නම් TRUE නැවත ලබා දෙන්න. එහෙනම් TRUE දෙන්න. නැත්තම් FALSE දෙන්න.ඉහත ක් රියාව සිදු කිරීමෙන් වර්ග කළ දෛශිකය ලබා ගත හැකි නම් ආරම්භක ස්ථානය, එනම් 0 වන දර්ශකය.ෙවෙක්ටරයේ අවසාන අංගය ෙවනස්කරනවාඑක දකුණට මාරුවීමේ ක් රියාවලියකින් අදහස් කරන්නේ දෛශිකයේ සියලුම අංග එකකින් මාරු කිරීමයි.ඔබට ඕනෑම වාර ගණනක් දකුණට මාරුවීමේ මෙහෙයුම සිදු කිරීමට අවසර ඇත.පහත දැක්වෙන ක් රියාවලිය ලබා දී ඇති දෛශිකය මත සිදු කරයි:  ක් රියාත්මක කිරීමෙන් නොවැඩිවන අනුපිළිවෙලකින් වර්ග කළ හැකි වේක්ටරයක් ලබා ගත හැකියඛණ්ඩාංකය අහඹු ලෙස සකස් කර ඇත.අපට N පූර්ණ සංඛ් යා arr[1], arr[2], ..., arr[N] කින් සමන්විත 'arr' දෛශිකයක් ඇත.# >>> move_one_ball(c(3, 4, 5, 1, 2))
# TRUE
# Explanation: By performin 2 right shift operations, non-decreasing order can
#              be achieved for the given vector.
# >>> move_one_ball(c(3, 5, 4, 1, 2))
# FALSE
# Explanation:It is not possible to get non-decreasing order for the given
#             vector by performing any number of right shift operations.
move_one_ball <- function(arr) {","move_one_ball <- function(arr) {
  if (length(arr) == 0) {
    return(TRUE)
  }
  
  n <- length(arr)
  for (i in 1:n) {
    shifted_arr <- c(tail(arr, n - i), head(arr, i))
    if (all(diff(shifted_arr) >= 0)) {
      return(TRUE)
    }
  }
  
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- move_one_ball
    stopifnot(isTRUE(all.equal(candidate(c(3, 4, 5, 1, 2)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 10, 1, 2)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 1, 2)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 4, 1, 2)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c()), TRUE)))
}
test_humaneval()"
HumanEval_110,sin_Sinh,r,"උදාහරණයක් විදියට:එහෙම නැත්නම්, ""නැහැ"" කියලා දෙන්න.lst1 හි සියලුම අංග සම නම්, ""YES"" නැවත දෙන්න.lst1 සහ lst2 අතර අංග හුවමාරු කර ගැනීමට හැකි නම්lst1 සහ lst2 අතර හුවමාරු වන මූලද් රව් ය ගණන සීමා කර නැත. සංඛ් යා ලැයිස්තුවක් හදන්න.සහ ඒකාබද්ධ කිරීමේ ක් රියාවලියක් සිදු කළ හැකිද යන්න තීරණය කරයි.මේ ප් රශ්නයේදී, ඔයා ක් රියාත්මක කරන්නේ සංඛ් යා ලැයිස්තු දෙකක් ගන්න, # >>> exchange(c(1, 2, 3, 4), c(1, 2, 3, 4))
# 'YES'
# >>> exchange(c(1, 2, 3, 4), c(1, 5, 3, 4))
# 'NO'
# It is assumed that the input lists will be non-empty.
exchange <- function(lst1, lst2) {","exchange <- function(lst1, lst2) {
  # Identify even and odd numbers in lst1
  lst1_even <- lst1[lst1 %% 2 == 0]
  lst1_odd <- lst1[lst1 %% 2 != 0]
  
  # Identify even numbers in lst2
  lst2_even <- lst2[lst2 %% 2 == 0]
  
  # Check if the number of odd elements in lst1 can be replaced with even elements from lst2
  if (length(lst1_odd) <= length(lst2_even)) {
    return(""YES"")
  } else {
    return(""NO"")
  }
}","test_humaneval <- function() {
    candidate <- exchange
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(1, 2, 3, 4)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(1, 5, 3, 4)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(2, 1, 4, 3)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(5, 7, 3), c(2, 6, 4)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(5, 7, 3), c(2, 6, 3)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 6, 1, 8, 9), c(3, 5, 5, 1, 1, 1)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(100, 200), c(200, 200)), 'YES')))
}
test_humaneval()"
HumanEval_111,sin_Sinh,r,"උදාහරණය:අකුරු කිහිපයක එකම සිදුවීම නම්, ඒවා සියල්ලම නැවත ලබා දෙන්න.අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකය අනුව අකුරු අංකයඅවකාශයෙන් වෙන්වූ කුඩා අකුරු නියෝජනය කරන නූලක් ලබා දී ඇති විට, නම් ලැයිස්තුවක් ආපසු ලබා දෙන්න.# >>> histogram('a b c')
# list('a' = 1, 'b' = 1, 'c' = 1)
# >>> histogram('a b b a')
# list('a' = 2, 'b' = 2)
# >>> histogram('a b c a b')
# list('a' = 2, 'b' = 2)
# >>> histogram('b b b b a')
# list('b' = 4)
# >>> histogram('')
# list()
histogram <- function(test) {","histogram <- function(test) {
  # Split the string into individual letters.
  letters <- unlist(strsplit(test, "" ""))
  
  # Create a table to count the occurrences of each letter.
  count_table <- table(letters)
  
  # Find the maximum frequency of occurrences.
  max_count <- max(count_table, na.rm = TRUE)
  
  # Find all letters that have the maximum frequency.
  max_letters <- names(count_table[count_table == max_count])
  
  # Create a named list with letters as names and their max occurrences as values.
  result <- setNames(as.list(rep(max_count, length(max_letters))), max_letters)
  
  return(result)
}","test_humaneval <- function() {
    candidate <- histogram
    stopifnot(isTRUE(all.equal(candidate('a b b a'), list('a' = 2, 'b' = 2))))
    stopifnot(isTRUE(all.equal(candidate('a b c a b'), list('a' = 2, 'b' = 2))))
    stopifnot(isTRUE(all.equal(candidate('a b c d g'), list('a' = 1, 'b' = 1, 'c' = 1, 'd' = 1, 'g' = 1))))
    stopifnot(isTRUE(all.equal(candidate('r t g'), list('r' = 1, 't' = 1, 'g' = 1))))
    stopifnot(isTRUE(all.equal(candidate('b b b b a'), list('b' = 4))))
    stopifnot(isTRUE(all.equal(candidate('r t g'), list('r' = 1, 't' = 1, 'g' = 1))))
    stopifnot(isTRUE(all.equal(candidate(''), list())))
    stopifnot(isTRUE(all.equal(candidate('a'), list('a' = 1))))
}
test_humaneval()"
HumanEval_112,sin_Sinh,r,"උදාහරණය ඔබ නැවත ලබා දිය යුතුයි ලැයිස්තුවක් එහි ප් රතිඵල පෙළ සහ TRUE/FALSE පරීක්ෂණය සඳහා.ඛණ්ඩයක් පැලින්ඩ් රෝම් ලෙස හැඳින්වෙන්නේ එය ඉදිරියට හා පසුපසට සමාන නම්.ඉන්පසු ප් රතිඵලයේ අකුරු පෙළ පාලින්ඩ් රෝම් එකක්ද කියලා පරීක්ෂා කරන්න.අපිට S සහ C කියන නූල් දෙකක් දීලා තියෙනවා, ඔයා S වල තියෙන ඕනම අකුරක් C වල තියෙන ඕනම අකුරකට සමාන නම්, ඔයා ඒ අකුරු දෙක මකලා දාන්න ඕනේ.කාර්යය # >>> reverse_delete('abcde', 'ae')
# list('bcd', FALSE)
# >>> reverse_delete('abcdef', 'b')
# list('acdef', FALSE)
# >>> reverse_delete('abcdedcba', 'ab')
# list('cdedc', TRUE)
reverse_delete <- function(s, c) {","reverse_delete <- function(s, c) {
  # Remove characters in 'c' from 's'
  for (char in strsplit(c, '')[[1]]) {
    s <- gsub(char, """", s)
  }
  
  # Check if the resultant string is a palindrome
  is_palindrome <- s == paste(rev(strsplit(s, NULL)[[1]]), collapse = """")
  
  # Return the resultant string and the palindrome check result
  return(list(s, is_palindrome))
}","test_humaneval <- function() {
    candidate <- reverse_delete
    stopifnot(isTRUE(all.equal(candidate('abcde', 'ae'), list('bcd', FALSE))))
    stopifnot(isTRUE(all.equal(candidate('abcdef', 'b'), list('acdef', FALSE))))
    stopifnot(isTRUE(all.equal(candidate('abcdedcba', 'ab'), list('cdedc', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('dwik', 'w'), list('dik', FALSE))))
    stopifnot(isTRUE(all.equal(candidate('a', 'a'), list('', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('abcdedcba', ''), list('abcdedcba', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('abcdedcba', 'v'), list('abcdedcba', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('vabba', 'v'), list('abba', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('mamma', 'mia'), list('', TRUE))))
}
test_humaneval()"
HumanEval_113,sin_Sinh,r,"අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකයමෙහිදී i අකුරු සියල්ලම  අංකය මගින් ප් රතිස්ථාපනය කල යුතුය.ඵලයේ සෑම i අංගයක්ම ඵලයේ අමුතු අංග ගණන විය යුතුයි.අංක වලින් පමණක් සමන්විත නූල් ලැයිස්තුවක් ලබා දී ඇති විට, ලැයිස්තුවක් නැවත ලබා දෙන්න.# >>> odd_count(c('1234567'))
# c('the number of odd elements 4n the str4ng 4 of the 4nput.')
# >>> odd_count(c('3', '11111111'))
# c('the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.')
odd_count <- function(lst) {","odd_count <- function(lst) {
  sapply(lst, function(x) {
    odd_digits <- sum(as.numeric(unlist(strsplit(x, """"))) %% 2 == 1)
    sprintf(""the number of odd elements %dn the str%2$sing %1$d of the %3$nput."", odd_digits, odd_digits, odd_digits)
  })
}

# Example usage
print(odd_count(c('1234567')))
print(odd_count(c('3', '11111111')))","test_humaneval <- function() {
    candidate <- odd_count
    stopifnot(isTRUE(all.equal(candidate(c('1234567')), c('the number of odd elements 4n the str4ng 4 of the 4nput.'))))
    stopifnot(isTRUE(all.equal(candidate(c('3', '11111111')), c('the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'))))
    stopifnot(isTRUE(all.equal(candidate(c('271', '137', '314')), c('the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'))))
}
test_humaneval()"
HumanEval_114,sin_Sinh,r,"උදාහරණය  සංඛ් යානිඛිල සංඛ් යා වල දෛශිකයක් ලබා දීලා, හිස් නොවන ඕනෑම උප දෛශිකයක අවම එකතුව සොයාගන්න # >>> minSubArraySum(c(2, 3, 4, 1, 2, 4))
# 1
# >>> minSubArraySum(c(-1, -2, -3))
# -6
minSubArraySum <- function(nums) {","minSubArraySum <- function(nums) {
  min_sum <- nums[1]
  current_sum <- 0
  
  for (num in nums) {
    if (current_sum > 0) {
      current_sum <- 0
    }
    current_sum <- current_sum + num
    if (current_sum < min_sum) {
      min_sum <- current_sum
    }
  }
  
  return(min_sum)
}","test_humaneval <- function() {
    candidate <- minSubArraySum
    stopifnot(isTRUE(all.equal(candidate(c(2, 3, 4, 1, 2, 4)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3)), -6)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3, 2, -10)), -14)))
    stopifnot(isTRUE(all.equal(candidate(c(-9999999999999999)), -9999999999999999)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 10, 20, 1000000)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3, 10, -5)), -6)))
    stopifnot(isTRUE(all.equal(candidate(c(100, -1, -2, -3, 10, -5)), -6)))
    stopifnot(isTRUE(all.equal(candidate(c(10, 11, 13, 8, 3, 4)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(100, -33, 32, -1, 0, -2)), -33)))
    stopifnot(isTRUE(all.equal(candidate(c(-10)), -10)))
    stopifnot(isTRUE(all.equal(candidate(c(7)), 7)))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1)), -1)))
}
test_humaneval()"
HumanEval_115,sin_Sinh,r,"උදාහරණය 1:බාල්දි පහලට දාන්න ඕන වාර ගණනක් දෙන්න.ඔයාගේ වැඩේ තමයි මේ බාල්දි පාවිච්චි කරලා ළිං හිස් කරන එක.හැම බාල්දියකම එකම ධාරිතාවක් තියෙනවා.සෑම ළිඳකටම ජලය ලබා ගැනීමට භාවිතා කළ හැකි අනුරූප බාල්දියක් ඇත,ඒ වගේම පේළියේ තියෙන හැම 1 ක්ම නියෝජනය කරන්නේ තනි ජල ඒකකයක්.ඔබට ලැබෙනවා සිරස් කෝණයේ කුහර ජාලයක්.# >>> max_fill(list(c(0, 0, 1, 0), c(0, 1, 0, 0), c(1, 1, 1, 1)), 1)
# 6
# Example 2:
# >>> max_fill(list(c(0, 0, 1, 1), c(0, 0, 0, 0), c(1, 1, 1, 1), c(0, 1, 1, 1)), 2)
# 5
# Example 3:
# >>> max_fill(list(c(0, 0, 0), c(0, 0, 0)), 5)
# 0
# Constraints:
#     * all wells have the same length
#     * 1 <= grid.length <= 10^2
#     * 1 <= grid[:,1].length <= 10^2
#     * grid[i][j] -> 0 | 1
#     * 1 <= capacity <= 10
max_fill <- function(grid, capacity) {","max_fill <- function(grid, capacity) {
  total_water <- sum(unlist(grid))
  num_buckets_needed <- ceiling(total_water / capacity)
  return(num_buckets_needed)
}","test_humaneval <- function() {
    candidate <- max_fill
    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 1, 0), c(0, 1, 0, 0), c(1, 1, 1, 1)), 1), 6)))
    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 1, 1), c(0, 0, 0, 0), c(1, 1, 1, 1), c(0, 1, 1, 1)), 2), 5)))
    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 0), c(0, 0, 0)), 5), 0)))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 1, 1, 1), c(1, 1, 1, 1)), 2), 4)))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 1, 1, 1), c(1, 1, 1, 1)), 9), 2)))
}
test_humaneval()"
HumanEval_116,sin_Sinh,r,"ඒක ක් රියාත්මක කරන්න ඕන මේ විදියට:සමාන අංකයක් සඳහා දශම අගය මත පදනම්ව වර්ග කරන්න.ඒකක ගණන ඒවායේ ද්විමය නිරූපණයේ ඉහළ යන පිළිවෙලට.මේ කතාවේදී, ඔයා ණ නොවන සම්පූර්ණ සංඛ් යා වල දෛශිකයක්  අනුව වර්ග කරන්න ඕනේ.# >>> sort_array(c(1, 5, 2, 3, 4))
# c(1, 2, 3, 4, 5)
# >>> sort_array(c(-2, -3, -4, -5, -6))
# c(-6, -5, -4, -3, -2)
# >>> sort_array(c(1, 0, 2, 3, 4))
# c(0, 1, 2, 3, 4)
sort_array <- function(arr) {","sort_array <- function(arr) {
  # Filter out negative numbers and sort them directly
  negative_numbers <- sort(arr[arr < 0])
  
  # Process non-negative numbers
  non_negative_numbers <- arr[arr >= 0]
  
  # Sort non-negative numbers based on number of 1s in binary representation, then by decimal value
  sorted_non_negative_numbers <- non_negative_numbers[order(sapply(non_negative_numbers, function(x) {
    sum(as.integer(intToBits(x)))
  }), non_negative_numbers)]
  
  # Combine sorted negative and non-negative numbers
  c(negative_numbers, sorted_non_negative_numbers)
}","test_humaneval <- function() {
    candidate <- sort_array
    stopifnot(isTRUE(all.equal(candidate(c(1, 5, 2, 3, 4)), c(1, 2, 4, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(-2, -3, -4, -5, -6)), c(-4, -2, -6, -5, -3))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 2, 3, 4)), c(0, 1, 2, 4, 3))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)), c(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 6, 44, 12, 32, 5)), c(32, 3, 5, 6, 12, 44))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8, 16, 32)), c(2, 4, 8, 16, 32))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8, 16, 32)), c(2, 4, 8, 16, 32))))
}
test_humaneval()"
HumanEval_117,sin_Sinh,r,"උදාහරණ:සටහන: ඔබ උපකල්පනය කල හැකියි ආදාන නූලෙහි ඇත්තේ අකුරු සහ අවකාශයන් පමණක් බව.s අකුරු පෙළ හිස් නම්, ශ් රිතය හිස් ලැයිස්තුවක් ලබා දිය යුතුය.n ඛණ්ඩ, මෙම වචන පේළියේ ඇති පිළිවෙලට s.                         S අකුරක් සහ n ස්වාභාවික සංඛ් යාවක් ලබා දීලා, ඔයාට # >>> select_words('Mary had a little lamb', 4)
# c('little')
# >>> select_words('Mary had a little lamb', 3)
# c('Mary', 'lamb')
# >>> select_words('simple white space', 2)
# c()
# >>> select_words('Hello world', 4)
# c('world')
# >>> select_words('Uncle sam', 3)
# c('Uncle')
select_words <- function(s, n) {","select_words <- function(s, n) {
  vowels <- c('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
  words <- strsplit(s, "" "")[[1]]
  result <- sapply(words, function(word) {
    consonants_count <- nchar(gsub(paste(vowels, collapse = ""|""), """", word))
    if (consonants_count == n) return(word)
    else return(NULL)
  })
  result <- result[!sapply(result, is.null)]
  unname(result)
}","test_humaneval <- function() {
    candidate <- select_words
    stopifnot(isTRUE(all.equal(candidate('Mary had a little lamb', 4), c('little'))))
    stopifnot(isTRUE(all.equal(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))))
    stopifnot(isTRUE(all.equal(candidate('simple white space', 2), c())))
    stopifnot(isTRUE(all.equal(candidate('Hello world', 4), c('world'))))
    stopifnot(isTRUE(all.equal(candidate('Uncle sam', 3), c('Uncle'))))
    stopifnot(isTRUE(all.equal(candidate('', 4), c())))
    stopifnot(isTRUE(all.equal(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))))
}
test_humaneval()"
HumanEval_118,sin_Sinh,r,"උදාහරණය:ඔයා හිතනව ඇති ඒ string එකේ තියෙන්නේ ඉංග් රීසි අකුරු විතරයි කියලා.ඉහත කොන්දේසි වලට ගැලපෙන ඕනෑම ස්වරයක් සොයා ගන්න.ආරම්භයේ සහ අවසානයේ ඇති ස්වර ගණන් ගන්නෙ නෑ.වචනයේ දකුණු පැත්තෙන් අක්ෂර දෙකක් (අකුරු සංවේදී).ඔයාට වචනයක් දීලා තියෙනවා. ඔයාගේ වැඩේ තමයි  අතර තියෙන ලංවෙන ස්වරය හොයාගන්න එක.# >>> get_closest_vowel('yogurt')
# 'u'
# >>> get_closest_vowel('FULL')
# 'U'
# >>> get_closest_vowel('quick')
# ''
# >>> get_closest_vowel('ab')
# ''
get_closest_vowel <- function(word) {","get_closest_vowel <- function(word) {
  vowels <- c('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
  n <- nchar(word)
  
  # Iterate from the second to last position to the second position
  for (i in (n-1):2) {
    if (substr(word, i, i) %in% vowels) {
      if (!substr(word, i-1, i-1) %in% vowels && !substr(word, i+1, i+1) %in% vowels) {
        return(substr(word, i, i))
      }
    }
  }
  
  # Return empty string if no vowel is found
  return('')
}","test_humaneval <- function() {
    candidate <- get_closest_vowel
    stopifnot(isTRUE(all.equal(candidate('yogurt'), 'u')))
    stopifnot(isTRUE(all.equal(candidate('full'), 'u')))
    stopifnot(isTRUE(all.equal(candidate('easy'), '')))
    stopifnot(isTRUE(all.equal(candidate('eAsy'), '')))
    stopifnot(isTRUE(all.equal(candidate('ali'), '')))
    stopifnot(isTRUE(all.equal(candidate('bad'), 'a')))
    stopifnot(isTRUE(all.equal(candidate('most'), 'o')))
    stopifnot(isTRUE(all.equal(candidate('ab'), '')))
    stopifnot(isTRUE(all.equal(candidate('ba'), '')))
    stopifnot(isTRUE(all.equal(candidate('quick'), '')))
    stopifnot(isTRUE(all.equal(candidate('anime'), 'i')))
    stopifnot(isTRUE(all.equal(candidate('Asia'), '')))
    stopifnot(isTRUE(all.equal(candidate('Above'), 'o')))
}
test_humaneval()"
HumanEval_119,sin_Sinh,r,"උදාහරණ:හොඳ string එකක් හදන්න පුළුවන් නම් 'Yes' කියලා දෙන්න, නැතිනම් 'No' කියලා දෙන්න.""()) "" කියලා නැහැ.උදාහරණයක් ලෙස: '(()))) ' නූල හොඳයි,  නූල S අක්ෂර මාලාවක් හොඳ යැයි සලකනු ලබන්නේ, S හි ඇති සියලුම කුටි වල සමහර නියෝග, ඒ නිසා ඇතිවන නූල් හොඳ වෙයි.ඔයාගේ වැඩේ තමයි ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ඔයාගේ වැඩේ තමයි ∙∙∙∙ ∙∙∙ ∙∙∙ පරීක්ෂා කිරීම ∙කුටි "" (() "" හෝ සමීප කුටි "") "" පමණක්.ඔයාලට දෙන්නම් ලැයිස්තුවක්, ඒ දෙකම විවෘතයි.# >>> match_parens(c('()(', ')'))
# 'Yes'
# >>> match_parens(c(')', ')'))
# 'No'
match_parens <- function(lst) {","match_parens <- function(lst) {
  is_balanced <- function(s) {
    balance <- 0
    for (ch in strsplit(s, """")[[1]]) {
      if (ch == '(') {
        balance <- balance + 1
      } else {
        balance <- balance - 1
      }
      if (balance < 0) return(FALSE)
    }
    return(balance == 0)
  }
  
  s1 <- lst[1]
  s2 <- lst[2]
  
  if (is_balanced(paste0(s1, s2)) || is_balanced(paste0(s2, s1))) {
    return('Yes')
  } else {
    return('No')
  }
}","test_humaneval <- function() {
    candidate <- match_parens
    stopifnot(isTRUE(all.equal(candidate(c('()(', ')')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c(')', ')')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c('(()(())', '())())')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c(')())', '(()()(')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c('(())))', '(()())((')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c('()', '())')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c('(()(', '()))()')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c('((((', '((())')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c(')(()', '(()(')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c(')(', ')(')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c('(', ')')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c(')', '(')), 'Yes')))
}
test_humaneval()"
HumanEval_120,sin_Sinh,r,"උදාහරණය 1:දිග k සහිත උපරිම k සංඛ් යා arr පූර්ණ සංඛ් යා arr සහ ධනාත්මක පූර්ණ සංඛ් යාව k ලබා දී ඇති විට, වර්ග කළ ලැයිස්තුවක් ලබා දෙන්න # >>> maximum(c(-3, -4, 5), 3)
# c(-4, -3, 5)
# Example 2:
# >>> maximum(c(4, -4, 4), 2)
# c(4, 4)
# Example 3:
# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)
# c(2)
# Note:
#     1. The length of the vector will be in the range of [1, 1000].
#     2. The elements in the vector will be in the range of [-1000, 1000].
#     3. 0 <= k <= len(arr)
maximum <- function(arr, k) {","maximum <- function(arr, k) {
  return(sort(tail(sort(arr), k)))
}","test_humaneval <- function() {
    candidate <- maximum
    stopifnot(isTRUE(all.equal(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(4, -4, 4), 2), c(4, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 2, 1, 2, -1, -2, 1), 1), c(2))))
    stopifnot(isTRUE(all.equal(candidate(c(123, -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))))
    stopifnot(isTRUE(all.equal(candidate(c(-123, 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 5, -7), 1), c(5))))
    stopifnot(isTRUE(all.equal(candidate(c(4, -4), 2), c(-4, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(-10, 10), 2), c(-10, 10))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, -23, 243, -400, 0), 0), c())))
}
test_humaneval()"
HumanEval_121,sin_Sinh,r,"උදාහරණ හිස් නොවන පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දීලා, සම ස්ථානවල ඇති සියලුම අමුද් රව් යවල එකතුව ලබා දෙන්න.# >>> solution(c(5, 8, 7, 1))
# 12
# >>> solution(c(3, 3, 3, 3, 3))
# 9
# >>> solution(c(30, 13, 24, 321))
# 0
solution <- function(lst) {","solution <- function(lst) {
  sum(lst[seq(2, length(lst), by = 2)][lst[seq(2, length(lst), by = 2)] %% 2 != 0])
}","test_humaneval <- function() {
    candidate <- solution
    stopifnot(isTRUE(all.equal(candidate(c(5, 8, 7, 1)), 12)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 3, 3, 3, 3)), 9)))
    stopifnot(isTRUE(all.equal(candidate(c(30, 13, 24, 321)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 9)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(30, 13, 23, 32)), 23)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 13, 2, 9)), 3)))
}
test_humaneval()"
HumanEval_122,sin_Sinh,r,"උදාහරණය:arr හි පළමු k මූලද් රව් යයන්ගෙන් ඉහලම අංක දෙකකින් යුත් මූලද් රව් යයන්ගේ එකතුව. පූර්ණ සංඛ් යා arr හා පූර්ණ සංඛ් යා k හි හිස් නොවන දෛශිකයක් ලබා දී, නැවත # >>> add_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)
# 24
# Constraints:
#     1. 1 <= len(arr) <= 100
#     2. 1 <= k <= len(arr)
add_elements <- function(arr, k) {","add_elements <- function(arr, k) {
  sum(arr[1:k][nchar(abs(arr[1:k])) <= 2])
}","test_humaneval <- function() {
    candidate <- add_elements
    stopifnot(isTRUE(all.equal(candidate(c(1, -2, -3, 41, 57, 76, 87, 88, 99), 3), -4)))
    stopifnot(isTRUE(all.equal(candidate(c(111, 121, 3, 4000, 5, 6), 2), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(11, 21, 3, 90, 5, 6, 7, 8, 9), 4), 125)))
    stopifnot(isTRUE(all.equal(candidate(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4), 24)))
    stopifnot(isTRUE(all.equal(candidate(c(1), 1), 1)))
}
test_humaneval()"
HumanEval_123,sin_Sinh,r,"get_odd_collatz(5) නැවත ලබා දෙන්නේ [1, 5] # 5 සඳහා වන collatz අනුක් රමය [5, 16, 8, 4, 2, 1], එබැවින් අමුතු සංඛ් යා වන්නේ 1 සහ 5 පමණි. උදාහරණයක් විදියට:2. ආපසු ලබා දුන් ලැයිස්තුව වර්ධනය වන අනුපිළිවෙල අනුව වර්ග කර ඇත.Collatz(1) යනු [1] වේ.සටහන:අනුමානය නම් n හි අගය කුමක් වුවත් අනුක් රමය සැමවිටම 1 දක්වා ළඟා වනු ඇත.කලින් පදය අමුතු නම් ඊලඟ පදය කලින් පදය මෙන් 3 ගුණයක් වෙනවාපෙර පදය ඊලඟට පහත පරිදි: ඕනෑම ධනාත්මක පූර්ණ සංඛ් යාවක් n වලින් ආරම්භ කරන්න. එවිට සෑම පදයක්ම                                                                  කොලාට්ස් අනුමානය යනු ගණිතයේ අනුමානයකි. එය අර්ථ දක්වා ඇති අනුක් රමයක් ගැන සැලකිලිමත් වේ.ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇති විට, අමුතු සංඛ් යා collatz අනුක් රමයෙන් ඇති වර්ග කළ ලැයිස්තුවක් නැවත ලබා දෙන්න. # >>> get_odd_collatz(5)
# c(1, 5)
get_odd_collatz <- function(n) {","get_odd_collatz <- function(n) {
  collatz_sequence <- function(n) {
    sequence <- c(n)
    while (n != 1) {
      if (n %% 2 == 0) {
        n <- n / 2
      } else {
        n <- 3 * n + 1
      }
      sequence <- c(sequence, n)
    }
    return(sequence)
  }
  
  sequence <- collatz_sequence(n)
  odd_numbers <- unique(sequence[sequence %% 2 != 0])
  return(sort(odd_numbers))
}","test_humaneval <- function() {
    candidate <- get_odd_collatz
    stopifnot(isTRUE(all.equal(candidate(14), c(1, 5, 7, 11, 13, 17))))
    stopifnot(isTRUE(all.equal(candidate(5), c(1, 5))))
    stopifnot(isTRUE(all.equal(candidate(12), c(1, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(1), c(1))))
}
test_humaneval()"
HumanEval_124,sin_Sinh,r,"දිනය විය යුත්තේ: mm-dd-yyyy මාසය 1 ට අඩු හෝ 12 ට වැඩි නොවිය යුතුයි.මාස 1,3,5,7,8,10,12 සඳහා දින ගණන 1 ට අඩු හෝ 31 ට වැඩි නොවන අතර මාස 4,6,9,11 සඳහා දින ගණන 1 ට අඩු හෝ 30 ට වැඩි නොවන අතර මාසය සඳහා දින ගණන 1 ට අඩු හෝ 29 ට වැඩි නොවේ.දිනය හිස් නැහැ.පහත සඳහන් නීති සියල්ලම අනුගමනය කර ඇත්නම් දිනය වලංගු වේ: දිනය වලංගු නම් TRUE ලබා දෙයි. එසේ නොමැති නම් FALSE ලබා දෙයි.ඔයාලාට ලියන්න වෙනවා අරාවෙ තියෙන දිනය සහ # >>> valid_date('03-11-2000')
# TRUE
# >>> valid_date('15-01-2012')
# FALSE
# >>> valid_date('04-0-2040')
# FALSE
# >>> valid_date('06-04-2020')
# TRUE
# >>> valid_date('06/04/2020')
# FALSE
valid_date <- function(date) {","valid_date <- function(date) {
  # Check if the date is not empty
  if (date == """") {
    return(FALSE)
  }
  
  # Check the format of the date
  if (!grepl(""^\\d{2}-\\d{2}-\\d{4}$"", date)) {
    return(FALSE)
  }
  
  # Extract the month, day, and year
  parts <- unlist(strsplit(date, ""-""))
  month <- as.numeric(parts[1])
  day <- as.numeric(parts[2])
  year <- as.numeric(parts[3])
  
  # Check if the month is valid
  if (month < 1 || month > 12) {
    return(FALSE)
  }
  
  # Check if the day is valid
  if (month %in% c(1, 3, 5, 7, 8, 10, 12) && (day < 1 || day > 31)) {
    return(FALSE)
  }
  
  if (month %in% c(4, 6, 9, 11) && (day < 1 || day > 30)) {
    return(FALSE)
  }
  
  if (month == 2 && (day < 1 || day > 29)) {
    return(FALSE)
  }
  
  return(TRUE)
}","test_humaneval <- function() {
    candidate <- valid_date
    stopifnot(isTRUE(all.equal(candidate('03-11-2000'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('15-01-2012'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('04-0-2040'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('06-04-2020'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('01-01-2007'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('03-32-2011'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('04-31-3000'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('06-06-2005'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('21-31-2000'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('04-12-2003'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('04122003'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('20030412'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('2003-04'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('2003-04-12'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('04-2003'), FALSE)))
}
test_humaneval()"
HumanEval_125,sin_Sinh,r,"උදාහරණ අක්ෂර මාලාව, අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකය අංකයකොමාස් මත බෙදිය යුතුද? කොමාස් නොමැති නම්, ඔබ  හි අමුතු අනුපිළිවෙලකින් කුඩා අකුරු ගණන ආපසු ලබා දිය යුතුය.වචන පෙළක් ලබා දී, ඔබ ෙතෘකාව තුළ කිසිදු සුදු අවකාශයන් පවතින නම්, හිස් අවකාශය මත බෙදී වචන ලැයිස්තුවක් ආපසු # >>> split_words('Hello world!')
# c('Hello', 'world!')
# >>> split_words('Hello,world!')
# c('Hello', 'world!')
# >>> split_words('abcdef')
# 3
split_words <- function(txt) {","split_words <- function(txt) {
  if (grepl(""\\s"", txt)) {
    return(strsplit(txt, ""\\s+"")[[1]])
  } else if (grepl("","", txt)) {
    return(strsplit(txt, "","")[[1]])
  } else {
    odd_order_count <- sum(
      sapply(unlist(strsplit(txt, """")), function(x) {
        ord <- utf8ToInt(tolower(x)) - utf8ToInt(""a"")
        ord %% 2 == 1
      })
    )
    return(odd_order_count)
  }
}","test_humaneval <- function() {
    candidate <- split_words
    stopifnot(isTRUE(all.equal(candidate('Hello world!'), c('Hello', 'world!'))))
    stopifnot(isTRUE(all.equal(candidate('Hello,world!'), c('Hello', 'world!'))))
    stopifnot(isTRUE(all.equal(candidate('Hello world,!'), c('Hello', 'world,!'))))
    stopifnot(isTRUE(all.equal(candidate('Hello,Hello,world !'), c('Hello,Hello,world', '!'))))
    stopifnot(isTRUE(all.equal(candidate('abcdef'), 3)))
    stopifnot(isTRUE(all.equal(candidate('aaabb'), 2)))
    stopifnot(isTRUE(all.equal(candidate('aaaBb'), 1)))
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
}
test_humaneval()"
HumanEval_126,sin_Sinh,r,"උදාහරණ                                             ලැයිස්තුවේ එකකට වඩා වැඩි නම්, එකම පිටපතක් අංක ලැයිස්තුවක් දීලා, ඒවා වර්ග කළත් නැතත්, ආපසු දෙන්න.# >>> is_sorted(c(5))
# TRUE
# >>> is_sorted(c(1, 2, 3, 4, 5))
# TRUE
# >>> is_sorted(c(1, 3, 2, 4, 5))
# FALSE
# >>> is_sorted(c(1, 2, 3, 4, 5, 6))
# TRUE
# >>> is_sorted(c(1, 2, 3, 4, 5, 6, 7))
# TRUE
# >>> is_sorted(c(1, 3, 2, 4, 5, 6, 7))
# FALSE
# >>> is_sorted(c(1, 2, 2, 3, 3, 4))
# TRUE
# >>> is_sorted(c(1, 2, 2, 2, 3, 4))
# FALSE
is_sorted <- function(lst) {","is_sorted <- function(lst) {
  if (length(lst) <= 1) {
    return(TRUE)
  }
  
  # Check for duplicates more than once
  tbl <- table(lst)
  if (any(tbl > 2)) {
    return(FALSE)
  }
  
  # Check if the list is sorted in ascending order
  for (i in 2:length(lst)) {
    if (lst[i] < lst[i - 1]) {
      return(FALSE)
    }
  }
  
  return(TRUE)
}","test_humaneval <- function() {
    candidate <- is_sorted
    stopifnot(isTRUE(all.equal(candidate(c(5)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5, 6, 7)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c()), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, 2, 3, 4)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 3, 3, 4)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, 3, 3, 4)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), TRUE)))
}
test_humaneval()"
HumanEval_127,sin_Sinh,r,"[ආදාන/ප් රතිදාන] සාම්පල: පරතරයන් දෙක එකිනෙකට සමපාත නොවුනොත්, ""NO"" දෙන්න.එහෙම නැත්නම්, ""NO"" කියලා දෙන්න.මෙම හරස්කඩ දිග ප් රථම සංඛ් යාවක් නම්, ""YES"" නැවත ලබා දෙන්න.ඒකෙ දිග 1 ක්, ඒක ප් රථම අංකයක් නෙවෙයි.උදාහරණය, පරතරයන්ගේ හරස්පදය (1, 3), (2, 4) (2, 3) පරතරය ප් රථම අංකයක්.ඔබේ කාර්යය තමයි මේ දෙකේ ඛණ්ඩනය සෑම කාල පරාසයකම, එහි ආරම්භය එහි අවසානයට වඩා අඩු හෝ සමාන යැයි උපකල්පනය කෙරේ.ආරම්භය සහ අවසානය යන දෙකම ඇතුළත් වේ.ලබා දී ඇති කාල පරාසය වසා ඇත, එයින් අදහස් වන්නේ කාල පරාසය (ආරම්භය, අවසානය) මෙහිදී සෑම පරතරයක්ම පූර්ණ සංඛ් යා යුගලයක් වේ. උදාහරණයක් ලෙස, පරතරය = (ආරම්භය, අවසානය) = (1, 2).ඔයාට කාල පරතර දෙකක් ලැබෙනවා,# >>> intersection(c(1, 2), c(2, 3))
# 'NO'
# >>> intersection(c(-1, 1), c(0, 4))
# 'NO'
# >>> intersection(c(-3, -1), c(-5, 5))
# 'YES'
intersection <- function(interval1, interval2) {","intersection <- function(interval1, interval2) {
  start1 <- interval1[1]
  end1 <- interval1[2]
  start2 <- interval2[1]
  end2 <- interval2[2]
  
  # Determine the start and end of the intersection
  intersection_start <- max(start1, start2)
  intersection_end <- min(end1, end2)
  
  # Calculate the length of the intersection
  length_of_intersection <- intersection_end - intersection_start
  
  # If there's no intersection, return ""NO""
  if (length_of_intersection < 0) {
    return('NO')
  }
  
  # Check if the length is a prime number
  is_prime <- function(num) {
    if (num <= 1) {
      return(FALSE)
    }
    for (i in 2:sqrt(num)) {
      if (num %% i == 0) {
        return(FALSE)
      }
    }
    return(TRUE)
  }
  
  # Return ""YES"" if the length is prime, otherwise ""NO""
  if (is_prime(length_of_intersection)) {
    return('YES')
  } else {
    return('NO')
  }
}","test_humaneval <- function() {
    candidate <- intersection
    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(2, 3)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 1), c(0, 4)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(-3, -1), c(-5, 5)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(-2, 2), c(-4, 0)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(-11, 2), c(-1, -1)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(3, 5)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(1, 2)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(-2, -2), c(-3, -2)), 'NO')))
}
test_humaneval()"
HumanEval_128,sin_Sinh,r,"උදාහරණය:සටහන: හිස් arr සඳහා NULL නැවත ලබා දෙන්න. ෙවෙක්ටරයේ සෑම අංකයකම, 1, -1 හෝ 0 මගින් නිරූපණය කර ඇත.මුළු සංඛ් යා වල ප් රමාණයේ එකතුවක්, සියලු සංඥා වල ගුණයකින් ගුණ කිරීම ඔබට පූර්ණ සංඛ් යා වල දෛශික arr එකක් ලබා දීලා තියෙනවා. ඔබට ආපසු යන්න වෙනවා.# >>> prod_signs(c(1, 2, 2, -4))
# 9
# >>> prod_signs(c(0, 1))
# 0
# >>> prod_signs(c())
# NULL
prod_signs <- function(arr) {","prod_signs <- function(arr) {
  if (length(arr) == 0) {
    return(NULL)
  }
  magnitude_sum <- sum(abs(arr))
  sign_product <- prod(sign(arr))
  return(magnitude_sum * sign_product)
}","test_humaneval <- function() {
    candidate <- prod_signs
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, -4)), -9)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)))
    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 2, -1, -1, 9)), 20)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, -1, 1)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, 1, 1)), -4)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, 1, 0)), 0)))
}
test_humaneval()"
HumanEval_129,sin_Sinh,r,"උදාහරණ:අවම මාර්ගය හරහා යන කොටස් වල අගයන් අනුපිළිවෙලකට ලැයිස්තුවක් නැවත ලබා දෙන්න.ඒකෙන් සහතික වෙනවා උත්තරය අද්විතීයයි කියලා.lst_A[j] = lst_B[j]  අංකය අනුවlst_A[i] < lst_B[i] සහ ඕනෑම j (1 <= j < i) සඳහා අපට lst_B ට වඩා, වෙනත් වචන වලින් කිවහොත්, i (1 <= i <= k)  නම් පූර්ණ සංඛ් යා දර්ශකයක් පවතී.(අපි ඒවාට lst_A සහ lst_B කියමු), lst_A වදන් මාලාවේ අඩුයි A සහ B යන කොටස් වල අගයන් ලැයිස්තුගත කිරීමෙන් පසුව,A (දිග k) මාර්ගයක් B (දිග k) මාර්ගයකට වඩා කුඩා ලෙස සලකනු ලබන්නේ නම් ඔයාට පද්ධතියෙන් අයින් වෙන්න බෑ.අනිවාර්යයෙන්ම වෙනස්).කරුණාකර සටහන් කරන්න k දිගින් යුත් මාර්ගයක් යන්නෙන් අදහස් කරන්නේ හරියටම k සෛල වලට (නැත සෛල වෙනත් වචනවලින් කියනවා නම්, ඔයාට පුළුවන් සෛල වලට යන්න, ඒකේ කෙළවරක් තියෙනවා.ඕනම සෛලයක ඉදන්, හැම පියවරකදිම ඔයාට පුළුවන් ඕනම අසල්වැසි සෛලයක් වෙත යන්න,ඔයාලට හොයාගන්න වෙනවා පද්ධතියේ k දිගේ අවම මාර්ගය.ඇතුලත් කිරීම හරියටම එක් වරක් දැල් කොටු වල දිස්වේ.ජාලකයේ සෑම කොටුවකම අගයක් අඩංගු වේ. [1, N * N] පරාසයේ සෑම පූර්ණ සංඛ් යාවක්ම පේළි N ක් සහ තීරු N ක් සහිත ජාලයක් ලබා දී ඇත (N >= 2) සහ ධනාත්මක පූර්ණ සංඛ් යාවක් k, # >>> minPath(list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)), 3)
# c(1, 2, 1)
# >>> minPath(list(c(5, 9, 3), c(4, 1, 6), c(7, 8, 2)), 1)
# c(1)
minPath <- function(grid, k) {","minPath <- function(grid, k) {
  N <- length(grid)
  directions <- list(c(0, 1), c(1, 0), c(0, -1), c(-1, 0))
  
  is_valid <- function(x, y) {
    return(x >= 1 && x <= N && y >= 1 && y <= N)
  }
  
  # DFS to find all paths
  dfs <- function(x, y, path) {
    if (length(path) == k) {
      paths <<- append(paths, list(path))
      return()
    }
    
    for (direction in directions) {
      nx <- x + direction[1]
      ny <- y + direction[2]
      if (is_valid(nx, ny)) {
        dfs(nx, ny, c(path, grid[[nx]][[ny]]))
      }
    }
  }
  
  paths <- list()
  
  # Start from every cell
  for (i in 1:N) {
    for (j in 1:N) {
      dfs(i, j, c(grid[[i]][[j]]))
    }
  }
  
  # Find and return the lexicographically smallest path
  min_path <- paths[[1]]
  for (path in paths) {
    if (path < min_path) {
      min_path <- path
    }
  }
  
  return(min_path)
}","test_humaneval <- function() {
    candidate <- minPath
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)), 3), c(1, 2, 1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(5, 9, 3), c(4, 1, 6), c(7, 8, 2)), 1), c(1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4), c(5, 6, 7, 8), c(9, 10, 11, 12), c(13, 14, 15, 16)), 4), c(1, 2, 1, 2))))
    stopifnot(isTRUE(all.equal(candidate(list(c(6, 4, 13, 10), c(5, 7, 12, 1), c(3, 16, 11, 15), c(8, 14, 9, 2)), 7), c(1, 10, 1, 10, 1, 10, 1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(8, 14, 9, 2), c(6, 4, 13, 15), c(5, 7, 1, 12), c(3, 10, 11, 16)), 5), c(1, 7, 1, 7, 1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(11, 8, 7, 2), c(5, 16, 14, 4), c(9, 3, 15, 6), c(12, 13, 10, 1)), 9), c(1, 6, 1, 6, 1, 6, 1, 6, 1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(12, 13, 10, 1), c(9, 3, 15, 6), c(5, 16, 14, 4), c(11, 8, 7, 2)), 12), c(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6))))
    stopifnot(isTRUE(all.equal(candidate(list(c(2, 7, 4), c(3, 1, 5), c(6, 8, 9)), 8), c(1, 3, 1, 3, 1, 3, 1, 3))))
    stopifnot(isTRUE(all.equal(candidate(list(c(6, 1, 5), c(3, 8, 9), c(2, 7, 4)), 8), c(1, 5, 1, 5, 1, 5, 1, 5))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2), c(3, 4)), 10), c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 3), c(3, 2)), 10), c(1, 3, 1, 3, 1, 3, 1, 3, 1, 3))))
}
test_humaneval()"
HumanEval_130,sin_Sinh,r,"උදාහරණ:ට් රිබොනාච්චි අනුක් රමයේ පළමු n + 1 අංක.ඔයාට ණ නොවන සම්පූර්ණ සංඛ් යාවක් n ලැබෙනවා, ඔයාට a නැවත ලබාදෙන්න වෙනවා = 2 + 3 + 3 = 8 ත් රිත්වය = ත් රිත්වය + ත් රිත්වය + ත් රිත්වයත් රිත්වය 4) = 3 tri(2) = 1 + (2 / 2) = 2 උදාහරණයක් විදියට:tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1), n අමුතු නම්.tri (n) = 1 + n / 2, n සම නම්.ත් රිත්වය 1) = 3 ට් රිබොනාකි අනුක් රමය නැවත ඇතිවීම මගින් අර්ථ දක්වනු ලබයි:කෙසේ වෙතත්, මිනිස්සු දන්නේ නැහැ ට් රිබොනාච්චි අනුක් රමය කියලා.හැමෝම ෆිබොනාච්චි අනුක් රමය දන්නවා, එය ගැඹුරින් අධ් යයනය කරලා තියෙනවා ගණිතඥයන් විසින් # >>> tri(3)
# c(1, 3, 2, 8)
tri <- function(n) {","tri <- function(n) {
  if (n == 0) return(c(3))
  
  tribonacci <- numeric(n + 1)
  tribonacci[1] <- 3
  
  for (i in 2:(n + 1)) {
    if (i %% 2 == 0) {
      tribonacci[i] <- 1 + i / 2
    } else {
      if (i == 3) {
        tribonacci[i] <- tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]  # tri(3) requires tri(4)
      } else {
        # When i > 3 and i is odd, dependencies are always available
        tribonacci[i] <- tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3 + 2]  # i + 1 becomes i - 3 + 2
      }
    }
  }
  
  return(tribonacci)
}","test_humaneval <- function() {
    candidate <- tri
    stopifnot(isTRUE(all.equal(candidate(3), c(1, 3, 2, 8))))
    stopifnot(isTRUE(all.equal(candidate(4), c(1, 3, 2, 8, 3))))
    stopifnot(isTRUE(all.equal(candidate(5), c(1, 3, 2, 8, 3, 15))))
    stopifnot(isTRUE(all.equal(candidate(6), c(1, 3, 2, 8, 3, 15, 4))))
    stopifnot(isTRUE(all.equal(candidate(7), c(1, 3, 2, 8, 3, 15, 4, 24))))
    stopifnot(isTRUE(all.equal(candidate(8), c(1, 3, 2, 8, 3, 15, 4, 24, 5))))
    stopifnot(isTRUE(all.equal(candidate(9), c(1, 3, 2, 8, 3, 15, 4, 24, 5, 35))))
    stopifnot(isTRUE(all.equal(candidate(20), c(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11))))
    stopifnot(isTRUE(all.equal(candidate(0), c(1))))
    stopifnot(isTRUE(all.equal(candidate(1), c(1, 3))))
}
test_humaneval()"
HumanEval_131,sin_Sinh,r,"උදාහරණයක් විදියට:සියලුම ඉලක්කම් සම නම් 0 නැවත දෙන්න.ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී අමු ඉලක්කම් වල ගුණය ලබා දෙන්න.# >>> digits(1)
# 1
# >>> digits(4)
# 0
# >>> digits(235)
# 15
digits <- function(n) {","digits <- function(n) {
  # Convert the number to a character vector
  digits_vector <- unlist(strsplit(as.character(n), """"))
  
  # Convert the character vector back to numeric
  digits_vector <- as.numeric(digits_vector)
  
  # Filter out the odd digits
  odd_digits <- digits_vector[digits_vector %% 2 != 0]
  
  # If all digits are even, return 0
  if (length(odd_digits) == 0) {
    return(0)
  }
  
  # Calculate and return the product of odd digits
  return(prod(odd_digits))
}","test_humaneval <- function() {
    candidate <- digits
    stopifnot(isTRUE(all.equal(candidate(5), 5)))
    stopifnot(isTRUE(all.equal(candidate(54), 5)))
    stopifnot(isTRUE(all.equal(candidate(120), 1)))
    stopifnot(isTRUE(all.equal(candidate(5014), 5)))
    stopifnot(isTRUE(all.equal(candidate(98765), 315)))
    stopifnot(isTRUE(all.equal(candidate(5576543), 2625)))
    stopifnot(isTRUE(all.equal(candidate(2468), 0)))
}
test_humaneval()"
HumanEval_132,sin_Sinh,r,"මෙහිදී අඩුම තරමින් එක් අංශයක්වත් අනුපිළිවෙලෙහි අන්තර්ගත වේ.මෙම ශ් රිතය TRUE ප් රතිදානය කල යුත්තේ, වලංගු කුටි අනුපිළිවෙලක් තිබේ නම් සහ එසේ නම් පමණි.චතුරස්රාකාර කොටු වලින් පමණක් සමන්විත නූලක් ආදානය ලෙස ගන්නා ශ් රිතයක් නිර්මාණය කරන්න.# >>> is_nested('[[]]')
# TRUE
# >>> is_nested('[]]]]]]][[[[[]')
# FALSE
# >>> is_nested('[][]')
# FALSE
# >>> is_nested('[]')
# FALSE
# >>> is_nested('[[][]]')
# TRUE
# >>> is_nested('[[]][[')
# TRUE
is_nested <- function(string) {","is_nested <- function(string) {
  open_count <- 0
  for (char in unlist(strsplit(string, """"))) {
    if (char == ""["") {
      open_count <- open_count + 1
    } else if (char == ""]"") {
      if (open_count > 1) {
        return(TRUE)
      }
      open_count <- open_count - 1
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- is_nested
    stopifnot(isTRUE(all.equal(candidate('[[]]'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('[]]]]]]][[[[[]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[][]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[[[[]]]]'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('[]]]]]]]]]]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[][][[]]'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('[[]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[]]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[[]][['), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('[[][]]'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[[[[[[[['), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(']]]]]]]]'), FALSE)))
}
test_humaneval()"
HumanEval_133,sin_Sinh,r,"උදාහරණ:ලැයිස්තුවේ ඇති සෑම අංගයක්ම ඉහලම ඉලක්කම් අගය දක්වා වට කරන්න.ඔයා ආපහු දෙන්න ඕන දෙගුණ කරන ලද සංඛ් යා වල එකතුව, ඔයාට අංක ලැයිස්තුවක් ලැබෙනවා.# >>> lst(c(1.0, 2.0, 3.0))
# 14
# >>> lst(c(1.0, 4.0, 9.0))
# 98
# >>> lst(c(1.0, 3.0, 5.0, 7.0))
# 84
# >>> lst(c(1.4, 4.2, 0.0))
# 29
# >>> lst(c(-2.4, 1.0, 1.0))
# 6
sum_squares <- function(lst) {","sum_squares <- function(lst) {
  sum(ceiling(lst)^2)
}","test_humaneval <- function() {
    candidate <- sum_squares
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0)), 14)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0)), 14)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 3.0, 5.0, 7.0)), 84)))
    stopifnot(isTRUE(all.equal(candidate(c(1.4, 4.2, 0.0)), 29)))
    stopifnot(isTRUE(all.equal(candidate(c(-2.4, 1.0, 1.0)), 6)))
    stopifnot(isTRUE(all.equal(candidate(c(100.0, 1.0, 15.0, 2.0)), 10230)))
    stopifnot(isTRUE(all.equal(candidate(c(10000.0, 10000.0)), 200000000)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.4, 4.6, 6.3)), 75)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.4, 17.9, 18.9, 19.9)), 1086)))
    stopifnot(isTRUE(all.equal(candidate(c(0.0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.0)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.0, 1.0, 0.0)), 2)))
}
test_humaneval()"
HumanEval_134,sin_Sinh,r,"උදාහරණ:සටහන: ""word"" යනු අවකාශයකින් වෙන් කරන ලද අක්ෂර සමූහයකි.වචනයක කොටසක්, සහ FALSE වෙනත් ආකාරයකින්. යනු අක්ෂර මාලාවක අක්ෂරයක් මිස  නොවේ.අවසාන අක්ෂරය  නම් TRUE ලෙස ප් රතිස්ථාපනය කරන ශ් රිතයක් සාදන්න# >>> check_if_last_char_is_a_letter('apple pie')
# FALSE
# >>> check_if_last_char_is_a_letter('apple pi e')
# TRUE
# >>> check_if_last_char_is_a_letter('apple pi e ')
# FALSE
# >>> check_if_last_char_is_a_letter('')
# FALSE
check_if_last_char_is_a_letter <- function(txt) {","check_if_last_char_is_a_letter <- function(txt) {
  # Trim any trailing whitespace
  trimmed_txt <- trimws(txt, which = ""right"")
  
  # If the trimmed text is empty, return FALSE
  if (nchar(trimmed_txt) == 0) {
    return(FALSE)
  }
  
  # Get the last character
  last_char <- substr(trimmed_txt, nchar(trimmed_txt), nchar(trimmed_txt))
  
  # Check if the last character is an alphabetical character
  if (grepl(""[a-zA-Z]"", last_char)) {
    # Split the text by spaces
    words <- strsplit(trimmed_txt, "" "")[[1]]
    # Get the last word
    last_word <- tail(words, n = 1)
    # If last character is the only character in the last ""word"", return TRUE
    # Otherwise, it is part of a word, return FALSE
    return(nchar(last_word) == 1)
  }
  
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- check_if_last_char_is_a_letter
    stopifnot(isTRUE(all.equal(candidate('apple'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('apple pi e'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('eeeee'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('A'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('Pumpkin pie '), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('Pumpkin pie 1'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('eeeee e '), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('apple pie'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('apple pi e '), FALSE)))
}
test_humaneval()"
HumanEval_135,sin_Sinh,r,"උදාහරණ:දෙවරක් අගය කරනවා.එවැනි කිසිදු අංගයක් නොමැති නම්, ආපසු -1. ලබා දී ඇති දෛශිකය  ඇතුළත් නොවේ.එය ඊළඟට ඇති මූලද් රව් යයට වඩා වැඩි හෝ සමාන නොවේ. න් යාය පත් රය # >>> can_arrange(c(1, 2, 4, 3, 5))
# 3
# >>> can_arrange(c(1, 2, 3))
# -1
can_arrange <- function(arr) {","can_arrange <- function(arr) {
  for (i in seq(length(arr) - 1, 1)) {
    if (arr[i] > arr[i + 1]) {
      return(i)
    }
  }
  return(-1)
}","test_humaneval <- function() {
    candidate <- can_arrange
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 3, 5)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 5)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 2, 5, 6, 7, 8, 9, 10)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 8, 5, 7, 3)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c()), -1)))
}
test_humaneval()"
HumanEval_136,sin_Sinh,r,"උදාහරණ:ණ හෝ ධනාත්මක නිඛිල සංඛ් යා නොමැති නම්, ඒවා NULL ලෙස ලබා දෙන්න.ධනාත්මක සම්පූර්ණ සංඛ් යා ලැයිස්තුවක් තුල.ණ නිරන්තර සංඛ් යා අතරින් විශාලතම සංඛ් යාව, සහ 'b' කුඩාම සංඛ් යාව ලැයිස්තුවක් ලබාදෙන ශ් රිතයක් නිර්මාණය කරන්න (a, b), එහිදී 'a' # >>> largest_smallest_integers(c(2, 4, 1, 3, 5, 7))
# list(NULL, 1)
# >>> largest_smallest_integers(c())
# list(NULL, NULL)
# >>> largest_smallest_integers(c(0))
# list(NULL, NULL)
largest_smallest_integers <- function(lst) {","largest_smallest_integers <- function(lst) {
  negatives <- lst[lst < 0]
  positives <- lst[lst > 0]
  
  largest_negative <- if(length(negatives) > 0) max(negatives) else NULL
  smallest_positive <- if(length(positives) > 0) min(positives) else NULL
  
  list(largest_negative, smallest_positive)
}","test_humaneval <- function() {
    candidate <- largest_smallest_integers
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 3, 5, 7)), list(NULL, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 3, 5, 7, 0)), list(NULL, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5, 6, -2)), c(-2, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(4, 5, 3, 6, 2, 7, -7)), c(-7, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(7, 3, 8, 4, 9, 2, 5, -9)), c(-9, 2))))
    stopifnot(isTRUE(all.equal(candidate(c()), list(NULL, NULL))))
    stopifnot(isTRUE(all.equal(candidate(c(0)), list(NULL, NULL))))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, -5, -6)), list(-1, NULL))))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, -5, -6, 0)), list(-1, NULL))))
    stopifnot(isTRUE(all.equal(candidate(c(-6, -4, -4, -3, 1)), c(-3, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(-6, -4, -4, -3, -100, 1)), c(-3, 1))))
}
test_humaneval()"
HumanEval_137,sin_Sinh,r,"සටහන: සැබෑ සංඛ් යාවක් නූලක් ලෙස නිරූපණය කරන්නේ නම්, පාවෙන ලක්ෂ් යය විය හැකිය . හෝ , අගයන් සමාන නම් NULL නැවත ලබා දෙන්න.ත් රිමාණ අංකය, සහ එහි දී ඇති විචල් ය වර්ගයේ විශාල විචල් යය නැවත ලබා දෙයි.න් යාය පථයක් නිර්මාණය කරන්න# >>> compare_one(1, 2.5)
# 2.5
# >>> compare_one(1, '2,3')
# '2,3'
# >>> compare_one('5,1', '6')
# '6'
# >>> compare_one('1', 1)
# NULL
compare_one <- function(a, b) {","compare_one <- function(a, b) {
  to_number <- function(x) {
    if (is.character(x)) {
      x <- gsub("","", ""."", x)
      as.numeric(x)
    } else {
      as.numeric(x)
    }
  }
  
  a_num <- to_number(a)
  b_num <- to_number(b)
  
  if (a_num == b_num) {
    return(NULL)
  } else if (a_num > b_num) {
    return(a)
  } else {
    return(b)
  }
}","test_humaneval <- function() {
    candidate <- compare_one
    stopifnot(isTRUE(all.equal(candidate(1, 2), 2)))
    stopifnot(isTRUE(all.equal(candidate(1, 2.5), 2.5)))
    stopifnot(isTRUE(all.equal(candidate(2, 3), 3)))
    stopifnot(isTRUE(all.equal(candidate(5, 6), 6)))
    stopifnot(isTRUE(all.equal(candidate(1, '2,3'), '2,3')))
    stopifnot(isTRUE(all.equal(candidate('5,1', '6'), '6')))
    stopifnot(isTRUE(all.equal(candidate('1', '2'), '2')))
    stopifnot(isTRUE(all.equal(candidate('1', 1), NULL)))
}
test_humaneval()"
HumanEval_138,sin_Sinh,r,"උදාහරණය ලබා දී ඇති n අංකය හරියටම ධනාත්මක සම සංඛ් යා 4 ක එකතුවක් ලෙස ලිවිය හැකිදැයි තක්සේරු කරන්න.# >>> is_equal_to_sum_even(4)
# FALSE
# >>> is_equal_to_sum_even(6)
# FALSE
# >>> is_equal_to_sum_even(8)
# TRUE
is_equal_to_sum_even <- function(n) {","is_equal_to_sum_even <- function(n) {
  if (n <= 0 || n %% 2 != 0 || n < 8) {
    return(FALSE)
  }
  remaining_sum <- n
  count <- 0
  for (i in seq(2, n, by = 2)) {
    if (remaining_sum - i >= 2 * (4 - count - 1)) {
      remaining_sum <- remaining_sum - i
      count <- count + 1
    }
    if (count == 4) {
      return(TRUE)
    }
  }
  return(FALSE)
}

# Examples
is_equal_to_sum_even(4)   # FALSE
is_equal_to_sum_even(6)   # FALSE
is_equal_to_sum_even(8)   # TRUE","test_humaneval <- function() {
    candidate <- is_equal_to_sum_even
    stopifnot(isTRUE(all.equal(candidate(4), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(6), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(8), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(10), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(11), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(12), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(13), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(16), TRUE)))
}
test_humaneval()"
HumanEval_139,sin_Sinh,r,"උදාහරණයක් විදියට:මෙහිදී n > 0 බ් රසීලියානු_සාධක (n) = n! * (n-1)! * (n-2)! * ... * 1! බ් රසීලියානු සාධකය ලෙස අර්ථ දැක්වෙන්නේ:# >>> special_factorial(4)
# 288
# The function will receive an integer as input and should return the special
# factorial of this integer.
special_factorial <- function(n) {","special_factorial <- function(n) {
  result <- 1
  for (i in 1:n) {
    result <- result * factorial(i)
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- special_factorial
    stopifnot(isTRUE(all.equal(candidate(4), 288)))
    stopifnot(isTRUE(all.equal(candidate(5), 34560)))
    stopifnot(isTRUE(all.equal(candidate(7), 125411328000)))
    stopifnot(isTRUE(all.equal(candidate(1), 1)))
}
test_humaneval()"
HumanEval_140,sin_Sinh,r,"ඊට පස්සේ, අංකය ඇතුලත් කරන හැම අවකාශයක්ම, -  වලින් මාරු කරන්න.සහ අකුරු පෙළක එක දිගට අවකාශයන් දෙකක් තියෙනවා නම්,පෙළ පෙළක් ලබා දී ඇති විට, එහි ඇති සියලුම අවකාශයන් යටින් ඇති අකුරු මගින් ප් රතිස්ථාපනය කරන්න,# >>> fix_spaces(' Example')
# 'Example'
# >>> fix_spaces(' Example 1')
# 'Example_1'
# >>> fix_spaces(' Example 2')
# '_Example_2'
# >>> fix_spaces(' Example 3')
# '_Example-3'
fix_spaces <- function(text) {","fix_spaces <- function(text) {
  # Trim leading and trailing spaces
  text <- trimws(text)
  # Replace 3 or more consecutive spaces with a dash
  text <- gsub("" {3,}"", ""-"", text)
  # Replace remaining spaces with underscores
  text <- gsub("" "", ""_"", text)
  return(text)
}","test_humaneval <- function() {
    candidate <- fix_spaces
    stopifnot(isTRUE(all.equal(candidate('Example'), 'Example')))
    stopifnot(isTRUE(all.equal(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')))
    stopifnot(isTRUE(all.equal(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')))
    stopifnot(isTRUE(all.equal(candidate('Exa   mple'), 'Exa-mple')))
    stopifnot(isTRUE(all.equal(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')))
}
test_humaneval()"
HumanEval_141,sin_Sinh,r,"උදාහරණ:- තිතෙන් පස්සේ තියෙන උප අකුරු මේවගෙන් එකක් වෙන්න ඕනේ: ['txt', 'exe', 'dll'] ලතින් අක්ෂර මාලාව ('a'-'z' සහ 'A'-'Z').- තිතට කලින් තියෙන උප අකුරු හිස් නොවිය යුතුයි, ඒවගේම ඒක පටන් ගන්නේ  අකුරකින්.- ෆයිල් එකේ නමේ එක තිතක් තියෙනවා.- ගොනුවේ නම අංක තුනකට වඩා වැඩි නොවිය යුතුය ('0'-'9').මේ ගැන කතා කරන්න:පහත සඳහන් කොන්දේසි සියල්ලම සපුරා ඇත්නම් සහ සපුරා තිබියහොත් පමණක් ගොනු නාමයක් වලංගු යැයි සැලකේ.ගොනුවේ නම වලංගු නම් 'ඔව්' යළි ලබා දෙයි, එසේ නොමැති නම් 'නැත' යළි ලබා දෙයි.ෆයිල් එකක නමක් තියෙන string එකක් අරගෙන ආපහු  කියන function එකක් හදන්න.# >>> file_name_check('example.txt')
# 'Yes'
# >>> file_name_check('1example.dll')
# 'No'
file_name_check <- function(file_name) {","file_name_check <- function(file_name) {
  # Split the file name into the name part and the extension part
  parts <- strsplit(file_name, ""\\."", fixed = TRUE)[[1]]
  
  # Check there is exactly one dot
  if (length(parts) != 2) {
    return('No')
  }
  
  # Extract the name and extension
  name_part <- parts[1]
  ext_part <- parts[2]
  
  # Check the extension is valid
  if (!(ext_part %in% c('txt', 'exe', 'dll'))) {
    return('No')
  }
  
  # Check the name part is not empty and starts with a letter
  if (nchar(name_part) == 0 || !grepl(""^[A-Za-z]"", name_part)) {
    return('No')
  }
  
  # Count digits in the name part
  digit_count <- nchar(gsub(""[^0-9]"", """", name_part))
  
  # Check there are no more than three digits
  if (digit_count > 3) {
    return('No')
  }
  
  return('Yes')
}","test_humaneval <- function() {
    candidate <- file_name_check
    stopifnot(isTRUE(all.equal(candidate('example.txt'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('1example.dll'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('s1sdf3.asd'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('K.dll'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('MY16FILE3.exe'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('His12FILE94.exe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('_Y.txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('?aREYA.exe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('/this_is_valid.dll'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('this_is_valid.wow'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('this_is_valid.txt'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('this_is_valid.txtexe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('#this2_i4s_5valid.ten'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('@this1_is6_valid.exe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('this_is_12valid.6exe4.txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('all.exe.txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('I563_No.exe'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('Is3youfault.txt'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('no_one#knows.dll'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('1I563_Yes3.exe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('I563_Yes3.txtt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('final..txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('final132'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('_f4indsartal132.'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('.txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('s.'), 'No')))
}
test_humaneval()"
HumanEval_142,sin_Sinh,r,"උදාහරණ:ලැයිස්තුවේ ඇති 3 හෝ 4 හි ගුණයක් නොවන ලැයිස්තුවේ සටහන් වෙනස් කරන්න. එවිට ශ් රිතය සියලුම සටහන් වල එකතුව නැවත ලබා දෙයි.3 ක ගුණයක් සහ එහි දර්ශකය 4 ක ගුණයක් මිස 3 ක ගුණයක් නොවේ නම්, මෙම ශ් රිතය පූර්ණ සංඛ් යා ලැයිස්තුවක් ගනී. ලැයිස්තුවේ ඇති සියලුම ප් රවේශයන් සඳහා, ශ් රිතය එහි දර්ශකය a නම් පූර්ණ සංඛ් යා ප් රවේශය වර්ග කළ යුතුය."" # >>> lst
# c(1, 2, 3)
# >>> lst
# c()
# >>> lst
# c(-1, -5, 2, -1, -5)
sum_squares <- function(lst) {","sum_squares <- function(lst) {
  lst <- sapply(seq_along(lst), function(i) {
    if (i %% 3 == 0) {
      return(lst[i]^2)
    } else if (i %% 4 == 0) {
      return(lst[i]^3)
    } else {
      return(lst[i])
    }
  })
  return(sum(lst))
}","test_humaneval <- function() {
    candidate <- sum_squares
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), 6)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 9)), 14)))
    stopifnot(isTRUE(all.equal(candidate(c()), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 1, 1, 1, 1, 1, 1)), 9)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -1, -1, -1, -1, -1, -1, -1, -1)), -3)))
    stopifnot(isTRUE(all.equal(candidate(c(0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -5, 2, -1, -5)), -126)))
    stopifnot(isTRUE(all.equal(candidate(c(-56, -99, 1, 0, -2)), 3030)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 0, 0, 0, 0, 0, 0, 0, -1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)), -14196)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)), -1448)))
}
test_humaneval()"
HumanEval_143,sin_Sinh,r,"උදාහරණය 1:නව නූලෙහි වචන අනුපිළිවෙල මුල් නූලෙහි වචන අනුපිළිවෙල හා සමාන විය යුතුය.ප් රථම අංක වලින් යුක්තයි,ඔයා ආපහු දෙන්න ඕනේ මුල් වාක් යයේ වචන අඩංගු නූලක්,වාක් යයේ ඇතැම් වචන අතර පරතරයක් ඇත,ඔයාට වාක් යයක් නියෝජනය කරන නූලක් ලැබෙනවා,# >>> words_in_sentence('This is a test')
# 'is'
# Example 2:
# >>> words_in_sentence('lets go for swimming')
# 'go for'
# Constraints:
#     * 1 <= len(sentence) <= 100
#     * sentence contains only letters
words_in_sentence <- function(sentence) {","words_in_sentence <- function(sentence) {
  is_prime <- function(n) {
    if (n <= 1) return(FALSE)
    if (n == 2) return(TRUE)
    for (i in 2:sqrt(n)) {
      if (n %% i == 0) return(FALSE)
    }
    return(TRUE)
  }
  
  words <- strsplit(sentence, "" "")[[1]]
  prime_words <- words[sapply(words, function(word) is_prime(nchar(word)))]
  return(paste(prime_words, collapse = "" ""))
}","test_humaneval <- function() {
    candidate <- words_in_sentence
    stopifnot(isTRUE(all.equal(candidate('This is a test'), 'is')))
    stopifnot(isTRUE(all.equal(candidate('lets go for swimming'), 'go for')))
    stopifnot(isTRUE(all.equal(candidate('there is no place available here'), 'there is no place')))
    stopifnot(isTRUE(all.equal(candidate('Hi I am Hussein'), 'Hi am Hussein')))
    stopifnot(isTRUE(all.equal(candidate('go for it'), 'go for it')))
    stopifnot(isTRUE(all.equal(candidate('here'), '')))
    stopifnot(isTRUE(all.equal(candidate('here is'), 'is')))
}
test_humaneval()"
HumanEval_144,sin_Sinh,r,"ඔබට උපකල්පනය කරන්න පුළුවන් x, සහ n වලංගු අංශු කියලා, සහ 0 න්මිකරු ලෙස නැහැ.මෙහිදී අංකකය සහ නාමකය යන දෙකම ධනාත්මක සම්පූර්ණ සංඛ් යා වේ.x සහ n යන දෙකම, අංශුවක නියෝජනය වන අතර, පහත දැක්වෙන ආකෘතිය ඇත,x * n. x * n සම්පූර්ණ සංඛ් යාවක් ලෙස ගණනය කර FALSE  ලෙස ගණනය කර ඇත්නම්, මෙම ශ් රිතය TRUE ලෙස ලබා දෙයි.ඔබේ කාර්යය තමයි ක් රියාවලියක් ක් රියාත්මක කිරීම ඒකෙන් ප් රකාශනය සරල වෙනවා # >>> simplify('1/5', '5/1')
# TRUE
# >>> simplify('1/6', '2/1')
# FALSE
# >>> simplify('7/10', '10/2')
# FALSE
simplify <- function(x, n) {","simplify <- function(x, n) {
  parse_fraction <- function(fraction) {
    parts <- strsplit(fraction, ""/"")[[1]]
    return(as.numeric(parts[1]) / as.numeric(parts[2]))
  }
  
  x_value <- parse_fraction(x)
  n_value <- parse_fraction(n)
  
  product <- x_value * n_value
  
  # Check if the product is a whole number
  return(product == floor(product))
}","test_humaneval <- function() {
    candidate <- simplify
    stopifnot(isTRUE(all.equal(candidate('1/5', '5/1'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('1/6', '2/1'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('5/1', '3/1'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('7/10', '10/2'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('2/10', '50/10'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('7/2', '4/2'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('11/6', '6/1'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('2/3', '5/2'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('5/2', '3/5'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('2/4', '8/4'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('2/4', '4/2'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('1/5', '5/1'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('1/5', '1/5'), FALSE)))
}
test_humaneval()"
HumanEval_145,sin_Sinh,r,"උදාහරණයක් විදියට:මුල් ලැයිස්තුවේ ඇති දර්ශකය අනුව ඒවා ඇණවුම් කරන්න.සටහන: අංක එකතුව සමාන වන විවිධ අයිතම තිබේ නම්, අංකවල එකතුව අනුව ඉහළ යන පිළිවෙලට.සම්පූර්ණ සංඛ් යා ලැයිස්තුව වර්ග කරන ශ් රිතයක් ලියන්න.# >>> order_by_points(c(1, 11, -1, -11, -12))
# c(-1, -11, 1, -12, 11)
# >>> order_by_points(c())
# c()
order_by_points <- function(nums) {","order_by_points <- function(nums) {
  # Helper function to calculate the sum of digits
  sum_of_digits <- function(n) {
    sum(as.integer(unlist(strsplit(as.character(abs(n)), """"))))
  }
  
  # Order the numbers based on the sum of their digits first, 
  # and then by their original index
  indices <- seq_along(nums)
  nums[order(sapply(nums, sum_of_digits), indices)]
}","test_humaneval <- function() {
    candidate <- order_by_points
    stopifnot(isTRUE(all.equal(candidate(c(1, 11, -1, -11, -12)), c(-1, -11, 1, -12, 11))))
    stopifnot(isTRUE(all.equal(candidate(c(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)), c(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, -11, -32, 43, 54, -98, 2, -3)), c(-3, -32, -98, -11, 1, 2, 43, 54))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)), c(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9))))
    stopifnot(isTRUE(all.equal(candidate(c(0, 6, 6, -76, -21, 23, 4)), c(-76, -21, 0, 4, 23, 6, 6))))
}
test_humaneval()"
HumanEval_146,sin_Sinh,r,"උදාහරණයක් විදියට:අංකයක පළමු හා අවසාන ඉලක්කම් අමුතුයි (1, 3, 5, 7, 9).දෛශිකයේ 10 ට වඩා වැඩි අංග ගණන සහ දෙකම සංඛ් යා වල දෛශිකයක් ආදාන ලෙස ගෙන නැවත ලබා දෙන ශ් රිතයක් ලියන්න.# >>> specialFilter(c(15, -73, 14, -15))
# 1
# >>> specialFilter(c(33, -2, -3, 45, 21, 109))
# 2
specialFilter <- function(nums) {","specialFilter <- function(nums) {
  # Helper function to check if both first and last digits are odd
  are_first_last_digits_odd <- function(x) {
    str_num <- as.character(abs(x))
    first_digit <- as.numeric(substr(str_num, 1, 1))
    last_digit <- as.numeric(substr(str_num, nchar(str_num), nchar(str_num)))
    first_digit %% 2 == 1 && last_digit %% 2 == 1
  }

  # Filter numbers greater than 10 with both first and last digits odd
  filtered_nums <- nums[nums > 10 & sapply(nums, are_first_last_digits_odd)]
  
  # Return the count of such numbers
  length(filtered_nums)
}","test_humaneval <- function() {
    candidate <- specialFilter
    stopifnot(isTRUE(all.equal(candidate(c(5, -2, 1, -5)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(15, -73, 14, -15)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(33, -2, -3, 45, 21, 109)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(43, -12, 93, 125, 121, 109)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(71, -2, -33, 75, 21, 19)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c()), 0)))
}
test_humaneval()"
HumanEval_147,sin_Sinh,r,"උදාහරණය:ඒ වගේම a[i] + a[j] + a[k] කියන්නේ 3 ක ගුණයක්.a හි ත් රිත්ව සංඛ් යාව (a[i], a[j], a[k]) නැවත ලබා දෙන්න i < j < k, සෑම i (1 ≤ i ≤ n) සඳහාම, a[i] = i * i - i + 1 හි අගය. ඔබට ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇත. ඔබට n දිගින් යුත් පූර්ණ සංඛ් යා දෛශිකයක් නිර්මාණය කිරීමට සිදුවේ.#     >>> get_max_triples(5)
#     1
# Explanation: 
# a = [1, 3, 7, 13, 21]
# The only valid triple is (1, 7, 13).
get_max_triples <- function(n) {","get_max_triples <- function(n) {
  # Create the vector a according to the given rule
  a <- sapply(1:n, function(i) i * i - i + 1)
  
  # Initialize the count of valid triples
  count <- 0
  
  # Iterate over all possible triples (i, j, k) with i < j < k
  for (i in 1:(n-2)) {
    for (j in (i+1):(n-1)) {
      for (k in (j+1):n) {
        # Check if the sum of the selected triple is a multiple of 3
        if ((a[i] + a[j] + a[k]) %% 3 == 0) {
          count <- count + 1
        }
      }
    }
  }
  
  # Return the count of valid triples
  return(count)
}","test_humaneval <- function() {
    candidate <- get_max_triples
    stopifnot(isTRUE(all.equal(candidate(5), 1)))
    stopifnot(isTRUE(all.equal(candidate(6), 4)))
    stopifnot(isTRUE(all.equal(candidate(10), 36)))
    stopifnot(isTRUE(all.equal(candidate(100), 53361)))
}
test_humaneval()"
HumanEval_148,sin_Sinh,r,"උදාහරණ ඒවා නිවැරදි ග් රහලෝක නම් නෙවෙයි.මෙම ශ් රිතය හිස් ලැයිස්තුවක් ලබා දිය යුතුය.සූර්යයාගේ සමීපත්වය.ග් රහලෝක 1 සහ ග් රහලෝක 2 අතර පිහිටා ඇති මෙම ශ් රිතය මගින් ග් රහලෝක නම් දෙකක් ග් රහලෝක 1 සහ ග් රහලෝක 2 ලෙස ගන්නා ශ් රිතයක් ලියන්න.යුරේනස්, නෙප්චූන්.අඟහරු, ඊලඟට සිකුරු, පෘථිවිය, අඟහරු, බ් රහස්පති, සෙනසුරු,අපේ සෞරග් රහ මණ්ඩලයේ ග් රහලෝක අටක් තියෙනවා.# >>> bf('Jupiter', 'Neptune')
# c('Saturn', 'Uranus')
# >>> bf('Earth', 'Mercury')
# 'Venus'
# >>> bf('Mercury', 'Uranus')
# c('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')
bf <- function(planet1, planet2) {","bf <- function(planet1, planet2) {
  planets <- c('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
  if (!(planet1 %in% planets) || !(planet2 %in% planets)) {
    return(c())
  }
  
  index1 <- which(planets == planet1)
  index2 <- which(planets == planet2)
  
  if (index1 < index2) {
    return(planets[(index1 + 1):(index2 - 1)])
  } else if (index2 < index1) {
    return(planets[(index2 + 1):(index1 - 1)])
  } else {
    return(c())
  }
}","test_humaneval <- function() {
    candidate <- bf
    stopifnot(isTRUE(all.equal(candidate('Jupiter', 'Neptune'), c('Saturn', 'Uranus'))))
    stopifnot(isTRUE(all.equal(candidate('Earth', 'Mercury'), c('Venus'))))
    stopifnot(isTRUE(all.equal(candidate('Mercury', 'Uranus'), c('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'))))
    stopifnot(isTRUE(all.equal(candidate('Neptune', 'Venus'), c('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'))))
    stopifnot(isTRUE(all.equal(candidate('Earth', 'Earth'), c())))
    stopifnot(isTRUE(all.equal(candidate('Mars', 'Earth'), c())))
    stopifnot(isTRUE(all.equal(candidate('Jupiter', 'Makemake'), c())))
}
test_humaneval()"
HumanEval_149,sin_Sinh,r,"උදාහරණයක් විදියට:ඔයා හිතනවා ඇති හැම වචනයක්ම එකම දිගයි කියලා.ශ් රිතය විසින් ශ් රේණිගත කිරීමේ පිළිවෙලට නූල් ලැයිස්තුවක් ලබා දිය යුතුය.වචන දෙකක දිග සමාන නම්, අක්ෂර වින් යාසය අනුව ලැයිස්තුව වර්ග කරන්න.ඒ නීතිය අනුව වර්ග කළ ලැයිස්තුව ආපසු ලබා දිය යුතුයි.ලැයිස්තුවේ පිළිවෙල උඩු යටිකුරු විය යුතුයි, සෑම වචනයකම දිග අනුව, සහ ඔබ එය අනුපිටපත් අඩංගු විය හැකියි.ලැයිස්තුව හැමවිටම string ලැයිස්තුවක් මිස සංඛ් යා වල vector එකක් නොවේ,සහ ඵලදායි ලැයිස්තුව නැවත ලබා දෙයි, අමුතු දිග තියෙන නූල් මකනවා,string ලැයිස්තුවක් පරාමිතියක් ලෙස පිළිගන්නා function එකක් ලියන්න,# >>> list_sort(c('aa', 'a', 'aaa'))
# c('aa')
# >>> list_sort(c('ab', 'a', 'aaa', 'cd'))
# c('ab', 'cd')
sorted_list_sum <- function(lst) {","list_sort <- function(lst) {
  # Filter out strings with odd lengths
  filtered_list <- lst[nchar(lst) %% 2 == 0]
  
  # Sort the list first by length, then alphabetically
  sorted_list <- filtered_list[order(nchar(filtered_list), filtered_list)]
  
  return(sorted_list)
}","test_humaneval <- function() {
    candidate <- sorted_list_sum
    stopifnot(isTRUE(all.equal(candidate(c('aa', 'a', 'aaa')), c('aa'))))
    stopifnot(isTRUE(all.equal(candidate(c('school', 'AI', 'asdf', 'b')), c('AI', 'asdf', 'school'))))
    stopifnot(isTRUE(all.equal(candidate(c('d', 'b', 'c', 'a')), c())))
    stopifnot(isTRUE(all.equal(candidate(c('d', 'dcba', 'abcd', 'a')), c('abcd', 'dcba'))))
    stopifnot(isTRUE(all.equal(candidate(c('AI', 'ai', 'au')), c('AI', 'ai', 'au'))))
    stopifnot(isTRUE(all.equal(candidate(c('a', 'b', 'b', 'c', 'c', 'a')), c())))
    stopifnot(isTRUE(all.equal(candidate(c('aaaa', 'bbbb', 'dd', 'cc')), c('cc', 'dd', 'aaaa', 'bbbb'))))
}
test_humaneval()"
HumanEval_150,sin_Sinh,r,"උදාහරණ:ප් රයිම් අංකයක් නම්, y අගය නැවත ලබා දෙන්න.සරල වැඩසටහනක්, n  නම් x හි අගය නැවත ලබා දිය යුතුයි.# >>> x_or_y(7, 34, 12)
# 34
# >>> x_or_y(15, 8, 5)
# 5
x_or_y <- function(n, x, y) {","x_or_y <- function(n, x, y) {
  is_prime <- function(num) {
    if (num <= 1) {
      return(FALSE)
    }
    for (i in 2:sqrt(num)) {
      if (num %% i == 0) {
        return(FALSE)
      }
    }
    return(TRUE)
  }
  
  if (is_prime(n)) {
    return(x)
  } else {
    return(y)
  }
}","test_humaneval <- function() {
    candidate <- x_or_y
    stopifnot(isTRUE(all.equal(candidate(7, 34, 12), 34)))
    stopifnot(isTRUE(all.equal(candidate(15, 8, 5), 5)))
    stopifnot(isTRUE(all.equal(candidate(3, 33, 5212), 33)))
    stopifnot(isTRUE(all.equal(candidate(1259, 3, 52), 3)))
    stopifnot(isTRUE(all.equal(candidate(7919, -1, 12), -1)))
    stopifnot(isTRUE(all.equal(candidate(3609, 1245, 583), 583)))
    stopifnot(isTRUE(all.equal(candidate(91, 56, 129), 129)))
    stopifnot(isTRUE(all.equal(candidate(6, 34, 1234), 1234)))
    stopifnot(isTRUE(all.equal(candidate(1, 2, 0), 0)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 0), 2)))
}
test_humaneval()"
HumanEval_151,sin_Sinh,r,"ණ හෝ සම්පූර්ණ සංඛ් යා නොවන සංඛ් යා නොසලකා හරින්න.අංක ලැයිස්තුවක් දීලා, අංකවල වර්ගවල එකතුව ලබා දෙන්න.# >>> double_the_difference(c(1, 3, 2, 0))
# 10
# >>> double_the_difference(c(-1, -2, 0))
# 0
# >>> double_the_difference(c(9, -2))
# 81
# >>> double_the_difference(c(0))
# 0
# If the input list is empty, return 0.
double_the_difference <- function(lst) {","double_the_difference <- function(lst) {
  # Filter out non-positive, non-integer, and non-odd numbers
  lst <- lst[lst > 0 & lst %% 1 == 0 & lst %% 2 == 1]
  # Calculate the sum of squares of remaining numbers
  sum(lst^2)
}","test_humaneval <- function() {
    candidate <- double_the_difference
    stopifnot(isTRUE(all.equal(candidate(c()), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(5.0, 4.0)), 25)))
    stopifnot(isTRUE(all.equal(candidate(c(0.1, 0.2, 0.3)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-10.0, -20.0, -30.0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.0, -2.0, 8.0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(0.2, 3.0, 5.0)), 34)))
    stopifnot(isTRUE(all.equal(candidate(c(-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)), 165)))
}
test_humaneval()"
HumanEval_152,sin_Sinh,r,"උදාහරණය:අගය 0 වේ, එසේ නොවේ නම්, අගය යනු අනුමානය සහ ලකුණු අතර පරම වෙනසයි.ඔවුන් නිවැරදිව අනුමාන කලොත්, ඔබට ලකුණු සහ අනුමාන කිරීම් වල දෛශික දෙකක් ලබා දී ඇත, සෑම දර්ශකයක්ම ගැලපීමක් පෙන්වයි.ඔයාගේ වැඩේ තමයි මේ පුද්ගලයා නිවැරදිව අනුමාන කලාද කියලා තරග කීපයක ප් රතිඵල.අනිවාර්යයෙන්ම සටහන් කරලා සංසන්දනය කරන්න වටිනවා.අවසානයේදී සිදුවීම දැනගන්නවා. ඒ මොහොතේ ඔබට ඇති හැඟීම් සහ සිතුවිලි මම හිතන්නේ අපි හැමෝටම මතකයි ඒ හැඟීම... ...කාලයක් තිස්සේ බලා සිටි ඵලයක්...# >>> compare(c(1, 2, 3, 4, 5, 1), c(1, 2, 3, 4, 2, -2))
# c(0, 0, 0, 0, 3, 3)
# >>> compare(c(0, 5, 0, 0, 0, 4), c(4, 1, 1, 0, 0, -2))
# c(4, 4, 1, 0, 0, 6)
compare <- function(game, guess) {","compare <- function(game, guess) {
  abs(game - guess)
}","test_humaneval <- function() {
    candidate <- compare
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 1), c(1, 2, 3, 4, 2, -2)), c(0, 0, 0, 0, 3, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0)), c(0, 0, 0, 0, 0, 0))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3), c(-1, -2, -3)), c(2, 4, 6))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 5), c(-1, 2, 3, 4)), c(2, 0, 0, 1))))
}
test_humaneval()"
HumanEval_153,sin_Sinh,r,"උදාහරණය:(එහි ශක්තිය -1)ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ ෙපරහැරීමේ['SERVINGSliCes', 'Cheese', 'StuFfed'] එහෙනම් ඔයාලා උදාහරණයක් විදියට, ඔයාට ""Slices"" කියන ක්ලාස් එක ලැබෙනවා නම්,ලැයිස්තුවේ පළවෙනියට එන එක තෝරන්න.එකම ශක්තියෙන් යුත් දිගු දෙකක් හෝ වැඩි ගණනක් තිබේ නම්, ඔබ ආකෘතිය: ClassName.StrongestExtensionName.  පන්ති නාමය. ශක්තිමත්ම දිගුව නම.ඔයා හොයාගන්න ඕනේ ශක්තිමත්ම දිගුව සහ මේකේ string එකක් මෙම ව් යාප්තියේ නමෙහි, ශක්තිය ලබා දී ඇත්තේ CAP - SM අංශකය මගිනි.අකුරු නම, සහ SM කුඩා අකුරු ගණන මෙම ව් යාප්තියේ ශක්තිය පහත පරිදි වේ: CAP යනු විශාල අකුරු වල අංකය වේවා මෙම දිගු කිරීම් භාවිතා කරන්නේ අතිරේක පන්ති පටවා ගැනීමටයි.ඔබට පන්තියක නම (string එකක්) සහ දිගු ලැයිස්තුවක් ලබා දෙනු ඇත.# >>> Strongest_Extension('my_class', c('AA', 'Be', 'CC'))
# 'my_class.AA'
Strongest_Extension <- function(class_name, extensions) {","Strongest_Extension <- function(class_name, extensions) {
  # Function to calculate the strength of an extension
  extension_strength <- function(ext) {
    cap_count <- sum(grepl(""[A-Z]"", strsplit(ext, """")[[1]]))
    sm_count <- sum(grepl(""[a-z]"", strsplit(ext, """")[[1]]))
    return(cap_count - sm_count)
  }
  
  # Calculate strength for each extension and find the strongest one
  strengths <- sapply(extensions, extension_strength)
  max_strength_index <- which.max(strengths)
  
  # Construct the result string
  return(paste0(class_name, ""."", extensions[max_strength_index]))
}","test_humaneval <- function() {
    candidate <- Strongest_Extension
    stopifnot(isTRUE(all.equal(candidate('Watashi', c('tEN', 'niNE', 'eIGHt8OKe')), 'Watashi.eIGHt8OKe')))
    stopifnot(isTRUE(all.equal(candidate('Boku123', c('nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg')), 'Boku123.YEs.WeCaNe')))
    stopifnot(isTRUE(all.equal(candidate('__YESIMHERE', c('t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321')), '__YESIMHERE.NuLl__')))
    stopifnot(isTRUE(all.equal(candidate('K', c('Ta', 'TAR', 't234An', 'cosSo')), 'K.TAR')))
    stopifnot(isTRUE(all.equal(candidate('__HAHA', c('Tab', '123', '781345', '-_-')), '__HAHA.123')))
    stopifnot(isTRUE(all.equal(candidate('YameRore', c('HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-')), 'YameRore.okIWILL123')))
    stopifnot(isTRUE(all.equal(candidate('finNNalLLly', c('Die', 'NowW', 'Wow', 'WoW')), 'finNNalLLly.WoW')))
    stopifnot(isTRUE(all.equal(candidate('_', c('Bb', '91245')), '_.Bb')))
    stopifnot(isTRUE(all.equal(candidate('Sp', c('671235', 'Bb')), 'Sp.671235')))
}
test_humaneval()"
HumanEval_154,sin_Sinh,r,"ඔයාට වචන දෙකක් දෙනවා. ඔයා TRUE ආපහු දෙන්න ඕන දෙවෙනි වචනය හරි ඒකෙ ඕනම එකක් හරි පළමු වචනයේ උප අකුරක් නම්.# >>> cycpattern_check('abcd', 'abd')
# FALSE
# >>> cycpattern_check('hello', 'ell')
# TRUE
# >>> cycpattern_check('whassup', 'psus')
# FALSE
# >>> cycpattern_check('abab', 'baa')
# TRUE
# >>> cycpattern_check('efef', 'eeff')
# FALSE
# >>> cycpattern_check('himenss', 'simen')
# TRUE
cycpattern_check <- function(a, b) {","cycpattern_check <- function(a, b) {
  n <- nchar(b)
  # Check all rotations of b
  for (i in 0:(n-1)) {
    # Rotate the string b by i characters
    rotated_b <- substring(b, i+1, n) %/% substring(b, 1, i)
    # Check if the rotated string is a substring of a
    if (grepl(rotated_b, a)) {
      return(TRUE)
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- cycpattern_check
    stopifnot(isTRUE(all.equal(candidate('xyzw', 'xyw'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('yello', 'ell'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('whattup', 'ptut'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('efef', 'fee'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('abab', 'aabb'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('winemtt', 'tinem'), TRUE)))
}
test_humaneval()"
HumanEval_155,sin_Sinh,r,"උදාහරණය:පූර්ණ සංඛ් යාවක් ලබා දී ඇත. ඒකාකාරව අංක සහ අංක අංක ඇති ලැයිස්තුවක් නැවත ලබා දෙන්න.#     >>> even_odd_count(-12)
#     c(1, 1)
#     >>> even_odd_count(123)
#     c(1, 2)
even_odd_count <- function(num) {","even_odd_count <- function(num) {
  # Handle negative numbers by taking the absolute value
  num <- abs(num)
  
  # Convert the number to a character vector to access digits
  digits <- unlist(strsplit(as.character(num), """"))
  
  # Convert character vector back to integer
  digits <- as.integer(digits)
  
  # Count even digits
  even_count <- sum(digits %% 2 == 0)
  
  # Count odd digits
  odd_count <- length(digits) - even_count
  
  # Return a vector with even and odd counts
  return(c(even_count, odd_count))
}","test_humaneval <- function() {
    candidate <- even_odd_count
    stopifnot(isTRUE(all.equal(candidate(7), c(0, 1))))
    stopifnot(isTRUE(all.equal(candidate(-78), c(1, 1))))
    stopifnot(isTRUE(all.equal(candidate(3452), c(2, 2))))
    stopifnot(isTRUE(all.equal(candidate(346211), c(3, 3))))
    stopifnot(isTRUE(all.equal(candidate(-345821), c(3, 3))))
    stopifnot(isTRUE(all.equal(candidate(-2), c(1, 0))))
    stopifnot(isTRUE(all.equal(candidate(-45347), c(2, 3))))
    stopifnot(isTRUE(all.equal(candidate(0), c(1, 0))))
}
test_humaneval()"
HumanEval_156,sin_Sinh,r,"උදාහරණ:සීමාවන්: 1 <= අංකය <= 1000 ඒක ආපහු පොඩි අකුරෙන් ලියන්න.ධනාත්මක පූර්ණ සංඛ් යාවක් ලබා දී එහි රෝමානු සංඛ් යා සමාන අංකයක් ලෙස ලබා ගන්න, # >>> int_to_mini_roman(19)
# 'xix'
# >>> int_to_mini_roman(152)
# 'clii'
# >>> int_to_mini_roman(426)
# 'cdxxvi'
int_to_mini_roman <- function(number) {","int_to_mini_roman <- function(number) {
  values <- c(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)
  numerals <- c(""m"", ""cm"", ""d"", ""cd"", ""c"", ""xc"", ""l"", ""xl"", ""x"", ""ix"", ""v"", ""iv"", ""i"")
  
  result <- """"
  remainder <- number
  
  for (i in seq_along(values)) {
    while (remainder >= values[i]) {
      result <- paste0(result, numerals[i])
      remainder <- remainder - values[i]
    }
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- int_to_mini_roman
    stopifnot(isTRUE(all.equal(candidate(19), 'xix')))
    stopifnot(isTRUE(all.equal(candidate(152), 'clii')))
    stopifnot(isTRUE(all.equal(candidate(251), 'ccli')))
    stopifnot(isTRUE(all.equal(candidate(426), 'cdxxvi')))
    stopifnot(isTRUE(all.equal(candidate(500), 'd')))
    stopifnot(isTRUE(all.equal(candidate(1), 'i')))
    stopifnot(isTRUE(all.equal(candidate(4), 'iv')))
    stopifnot(isTRUE(all.equal(candidate(43), 'xliii')))
    stopifnot(isTRUE(all.equal(candidate(90), 'xc')))
    stopifnot(isTRUE(all.equal(candidate(94), 'xciv')))
    stopifnot(isTRUE(all.equal(candidate(532), 'dxxxii')))
    stopifnot(isTRUE(all.equal(candidate(900), 'cm')))
    stopifnot(isTRUE(all.equal(candidate(994), 'cmxciv')))
    stopifnot(isTRUE(all.equal(candidate(1000), 'm')))
}
test_humaneval()"
HumanEval_157,sin_Sinh,r,"උදාහරණය:අංශක 90 යි.ජු කෝණ ත් රිකෝණයක් කියන්නේ ජු කෝණ ත් රිකෝණයක් කියන්නේ ජු කෝණ ත් රිකෝණයක් කියන්නේ ජු කෝණ ත් රිකෝණයක් කියන්නේ ජු කෝණ ත් රිකෝණයක් කියන්නේ ජු කෝණ ත් රිකෝණයක් කියන්නේ ජු කෝණ ත් රිකෝණයක් කියන්නේත් රිකෝණයේ දෙපසින් කකුල් දෙකම කෙළින් වන්නට ඇත, එසේ නොමැති නම් අසත් යය.ත් රිකෝණයක පැති තුනක දිග ලබා දීලා. TRUE නැවත ලබා දෙන්න ත් රිකෝණයේ ත් රිකෝණ තුන # >>> right_angle_triangle(3, 4, 5)
# TRUE
# >>> right_angle_triangle(1, 2, 3)
# FALSE
right_angle_triangle <- function(a, b, c) {","right_angle_triangle <- function(a, b, c) {
  # Sort the sides to easily compare the largest side
  sides <- sort(c(a, b, c))
  
  # Check if the sum of squares of the two smaller sides equals the square of the largest side
  return(sides[1]^2 + sides[2]^2 == sides[3]^2)
}","test_humaneval <- function() {
    candidate <- right_angle_triangle
    stopifnot(isTRUE(all.equal(candidate(3, 4, 5), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(1, 2, 3), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(10, 6, 8), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(7, 24, 25), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(10, 5, 7), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(5, 12, 13), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(15, 8, 17), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(48, 55, 73), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(1, 1, 1), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 10), FALSE)))
}
test_humaneval()"
HumanEval_158,sin_Sinh,r,"අක්ෂර, වදන් මාලාවේ පළමු අක්ෂරය නැවත ලබා දෙන්න.ඒකීය අක්ෂර ගණනක් තියෙනවා නම්, ඒකීය අක්ෂර ගණනක් තියෙනවා නම්,ලැයිස්තුවේ විවිධ වචන අඩංගුයි. උපරිම අංකය සහිත වචනය නැවත ලබා දෙන්න.ලැයිස්තුවක් පිළිගන්නා ශ් රිතයක් ලියන්න.# >>> find_max(c('name', 'of', 'string'))
# 'string'
# >>> find_max(c('name', 'enam', 'game'))
# 'enam'
# >>> find_max(c('aaaaaaa', 'bb', 'cc'))
# 'aaaaaaa'
find_max <- function(words) {","find_max <- function(words) {
  max_unique_chars <- 0
  result <- """"
  
  for (word in words) {
    unique_chars_count <- length(unique(strsplit(word, NULL)[[1]]))
    
    if (unique_chars_count > max_unique_chars ||
       (unique_chars_count == max_unique_chars && word < result)) {
      max_unique_chars <- unique_chars_count
      result <- word
    }
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- find_max
    stopifnot(isTRUE(all.equal(candidate(c('name', 'of', 'string')), 'string')))
    stopifnot(isTRUE(all.equal(candidate(c('name', 'enam', 'game')), 'enam')))
    stopifnot(isTRUE(all.equal(candidate(c('aaaaaaa', 'bb', 'cc')), 'aaaaaaa')))
    stopifnot(isTRUE(all.equal(candidate(c('abc', 'cba')), 'abc')))
    stopifnot(isTRUE(all.equal(candidate(c('play', 'this', 'game', 'of', 'footbott')), 'footbott')))
    stopifnot(isTRUE(all.equal(candidate(c('we', 'are', 'gonna', 'rock')), 'gonna')))
    stopifnot(isTRUE(all.equal(candidate(c('we', 'are', 'a', 'mad', 'nation')), 'nation')))
    stopifnot(isTRUE(all.equal(candidate(c('this', 'is', 'a', 'prrk')), 'this')))
    stopifnot(isTRUE(all.equal(candidate(c('b')), 'b')))
    stopifnot(isTRUE(all.equal(candidate(c('play', 'play', 'play')), 'play')))
}
test_humaneval()"
HumanEval_159,sin_Sinh,r,"උදාහරණය:ඉතිරි කැරට් මදි නම්, ඔයා ඉතිරි කැරට් ඔක්කොම කනවා, ඒත් ඔයාට තාම බඩගිනි දැනෙනවා.කෑමෙන් පස්සේ ඉතුරු වෙන කැරට් ගාන.ඔයා ආපහු එන්න ඕන [ආහාරයෙන් පසු කාපු කැරට් ප් රමාණය, ඒත් දැන් ඔයාට දවසට කෑම ඉවර කරන්න තව කැරට් කන්න වෙනවා.ඔයා බඩගිනි හාවෙක්, ඔයා දැනටමත් කැරට් ටිකක් කාලා ඉවරයි,# >>> eat(5, 6, 10)
# c(11, 4)
# >>> eat(4, 8, 9)
# c(12, 1)
# >>> eat(1, 10, 10)
# c(11, 0)
# >>> eat(2, 11, 5)
# c(7, 0)
# Variables:
# @number : integer
#     the number of carrots that you have eaten.
# @need : integer
#     the number of carrots that you need to eat.
# @remaining : integer
#     the number of remaining carrots thet exist in stock
# Constrain:
# * 0 <= number <= 1000
# * 0 <= need <= 1000
# * 0 <= remaining <= 1000
# Have fun :)
eat <- function(number, need, remaining) {","eat <- function(number, need, remaining) {
  total_eaten <- number + min(need, remaining)
  remaining_carrots <- max(0, remaining - need)
  return(c(total_eaten, remaining_carrots))
}","test_humaneval <- function() {
    candidate <- eat
    stopifnot(isTRUE(all.equal(candidate(5, 6, 10), c(11, 4))))
    stopifnot(isTRUE(all.equal(candidate(4, 8, 9), c(12, 1))))
    stopifnot(isTRUE(all.equal(candidate(1, 10, 10), c(11, 0))))
    stopifnot(isTRUE(all.equal(candidate(2, 11, 5), c(7, 0))))
    stopifnot(isTRUE(all.equal(candidate(4, 5, 7), c(9, 2))))
    stopifnot(isTRUE(all.equal(candidate(4, 5, 1), c(5, 0))))
}
test_humaneval()"
HumanEval_160,sin_Sinh,r,"ක් රියාකරු ලැයිස්තුවේ අවම වශයෙන් එක් ක් රියාකරුවෙකු සහ ඔපරන්ඩ් ලැයිස්තුවේ අවම වශයෙන් ඔපරන්ඩ් දෙකක් තිබේ.ඔපරේන්ඩ් කියන්නෙ ණ නොවන සම්පූර්ණ සංඛ් යා ලැයිස්තුවක්.ක් රියාකාරක ලැයිස්තුවේ දිග සමාන වේ මෙහෙයුම් ලැයිස්තුවේ දිග අඩු එකකි.සටහන:=> ප් රතිඵලය = 9 ප් රතිඵලය = 2 + 3 * 4 - 5 දෛශිකය = [2, 3, 4, 5] ක් රියාකරු['+', '*', '-'] උදාහරණය:ෂධීයකරණය (**) බිම් කොටස් (//) ගුණ කිරීම (*) අඩු කිරීම ( - ) එකතු කිරීම (+) මූලික ඇල්ජිබ් රා මෙහෙයුම්: මෙම ප් රකාශනයේ අගය නැවත ලබා දෙන්න.දෙවෙනි ලැයිස්තුව සම්පූර්ණ සංඛ් යා ලැයිස්තුවක්.ලැයිස්තු දෙකක් දීලා තියෙනවා, මෙහෙයුම්කරු සහ මෙහෙයුම් නියෝජිතයා. පළමු ලැයිස්තුවේ මූලික ඇල්ජිබ් රා මෙහෙයුම් තියෙනවා, සහ do_algebra <- function(operator, operand) {","do_algebra <- function(operator, operand) {
  if (length(operator) != length(operand) - 1) {
    stop(""The length of operator list must be equal to the length of operand list minus one."")
  }
  
  # Initialize the result with the first operand
  result <- operand[1]
  
  # Iterate through the operators and operands
  for (i in 1:length(operator)) {
    op <- operator[i]
    num <- operand[i + 1]
    
    # Apply the appropriate operation
    if (op == '+') {
      result <- result + num
    } else if (op == '-') {
      result <- result - num
    } else if (op == '*') {
      result <- result * num
    } else if (op == '//') {
      result <- result %/% num
    } else if (op == '**') {
      result <- result ^ num
    } else {
      stop(""Unsupported operation"")
    }
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- do_algebra
    stopifnot(isTRUE(all.equal(candidate(c('**', '*', '+'), c(2, 3, 4, 5)), 37)))
    stopifnot(isTRUE(all.equal(candidate(c('+', '*', '-'), c(2, 3, 4, 5)), 9)))
    stopifnot(isTRUE(all.equal(candidate(c('//', '*'), c(7, 3, 4)), 8)))
}
test_humaneval()"
HumanEval_161,sin_Sinh,r,"උදාහරණ               අකුරු නැතිනම්, අකුරු හරවන්න.එහෙම නැත්නම් ඒක මේ විදිහටම තියන්න.s[i] අකුරක් නම්, එහි කේස් එක පහළ සිට ඉහළට හෝ අනෙක් අතට හරවන්න, ඔයාට string එකක් ලැබෙනවා.# >>> solve('1234')
# '4321'
# >>> solve('ab')
# 'AB'
# >>> solve('#a@C')
# '#A@c'
solve <- function(s) {","solve <- function(s) {
  if (grepl(""[a-zA-Z]"", s)) {
    return(chartr(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",
                  ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"", s))
  } else {
    return(intToUtf8(rev(utf8ToInt(s))))
  }
}","test_humaneval <- function() {
    candidate <- solve
    stopifnot(isTRUE(all.equal(candidate('AsDf'), 'aSdF')))
    stopifnot(isTRUE(all.equal(candidate('1234'), '4321')))
    stopifnot(isTRUE(all.equal(candidate('ab'), 'AB')))
    stopifnot(isTRUE(all.equal(candidate('#a@C'), '#A@c')))
    stopifnot(isTRUE(all.equal(candidate('#AsdfW^45'), '#aSDFw^45')))
    stopifnot(isTRUE(all.equal(candidate('#6@2'), '2@6#')))
    stopifnot(isTRUE(all.equal(candidate('#$a^D'), '#$A^d')))
    stopifnot(isTRUE(all.equal(candidate('#ccc'), '#CCC')))
}
test_humaneval()"
HumanEval_162,sin_Sinh,r,"'text' හිස් නූලක් නම්, NULL නැවත ලබා දෙන්න.'text' කියන string එකක් දුන්නොත්, ඒකෙ md5 hash සමාන string එක ආපහු දෙන්න.# >>> string_to_md5('Hello world')
# '3e25960a79dbc69b674cd4ec67a72c62'
string_to_md5 <- function(text) {","string_to_md5 <- function(text) {
  if (text == """") {
    return(NULL)
  } else {
    return(digest::digest(text, algo = ""md5"", serialize = FALSE))
  }
}

# Ensure the required library is loaded
if(!requireNamespace(""digest"", quietly = TRUE)) {
  install.packages(""digest"")
}

# Load the digest library
library(digest)","test_humaneval <- function() {
    candidate <- string_to_md5
    stopifnot(isTRUE(all.equal(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')))
    stopifnot(isTRUE(all.equal(candidate(''), NULL)))
    stopifnot(isTRUE(all.equal(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')))
    stopifnot(isTRUE(all.equal(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')))
}
test_humaneval()"
HumanEval_163,sin_Sinh,r,"උදාහරණයක් විදියට:සහ b, ඉහළ යන පිළිවෙලට.ධනාත්මක පූර්ණ සංඛ් යා දෙකක් ලබා දී a සහ b, a  අතර ඇති සම අංක නැවත ලබා දෙන්න# >>> generate_integers(2, 8)
# c(2, 4, 6, 8)
# >>> generate_integers(8, 2)
# c(2, 4, 6, 8)
# >>> generate_integers(10, 14)
# c()
generate_integers <- function(a, b) {","generate_integers <- function(a, b) {
  start <- min(a, b)
  end <- max(a, b)
  even_digits <- seq(start, end)[seq(start, end) %% 2 == 0 & seq(start, end) <= 8]
  return(even_digits)
}","test_humaneval <- function() {
    candidate <- generate_integers
    stopifnot(isTRUE(all.equal(candidate(2, 10), c(2, 4, 6, 8))))
    stopifnot(isTRUE(all.equal(candidate(10, 2), c(2, 4, 6, 8))))
    stopifnot(isTRUE(all.equal(candidate(132, 2), c(2, 4, 6, 8))))
    stopifnot(isTRUE(all.equal(candidate(17, 89), c())))
}
test_humaneval()"
