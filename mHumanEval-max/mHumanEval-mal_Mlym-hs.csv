task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,mal_Mlym,hs,"--ഒരു നിശ്ചിത തുക.--∙∙∙നമ്പറുകളുടെ പട്ടികയിൽ, ∙∙∙--  >>> hasCloseElements [1.0,2.0,3.0] 0.5
--  False
--  >>> hasCloseElements [1.0,2.8,3.0,4.0,5.0,2.0] 0.3
--  True
hasCloseElements :: [Float] -> Float -> Bool
hasCloseElements numbers threshold =","hasCloseElements :: [Float] -> Float -> Bool
hasCloseElements numbers threshold = any (\(x,y) -> abs (x - y) < threshold) [(a, b) | a <- numbers, b <- numbers, a /= b]","
main :: IO ()
main = do
  let candidate = hasCloseElements
  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] 0.3 == True then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] 0.05 == False then pure () else error ""assertion failed""
  if candidate [1.0,2.0,5.9,4.0,5.0] 0.95 == True then pure () else error ""assertion failed""
  if candidate [1.0,2.0,5.9,4.0,5.0] 0.8 == False then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0,2.0] 0.1 == True then pure () else error ""assertion failed""
  if candidate [1.1,2.2,3.1,4.1,5.1] 1.0 == True then pure () else error ""assertion failed""
  if candidate [1.1,2.2,3.1,4.1,5.1] 0.5 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_1,mal_Mlym,hs,"--ഇൻപുട്ട് സ്ട്രിങ്ങിലെ സ്പെയ്സുകളെ അവഗണിക്കുക.--പ്രത്യേക ഗ്രൂപ്പുകള് സന്തുലിതമാണ് (ഓരോ തുറന്ന ബ്രേസും ശരിയായി അടച്ചിരിക്കുന്നു) പരസ്പരം കൂടിച്ചേർന്നിട്ടില്ല.--ആ ഗ്രൂപ്പുകളെ പ്രത്യേക സ്ട്രിങ്ങുകളാക്കി വേർതിരിച്ച് അവയുടെ ലിസ്റ്റ് തിരികെ നൽകുക.--ഈ ഫങ്ഷന് ഒരു സ്ട്രിംഗ് ആണ് നല് കുന്നത് അതിൽ ഒന്നിലധികം കൂട്ടം നെസ്റ്റഡ് പരാൻതീസിസ് അടങ്ങിയിരിക്കുന്നു. നിങ്ങളുടെ ലക്ഷ്യം --  >>> separateParenGroups ""( ) (( )) (( )( ))""
--  [""()"",""(())"",""(()())""]
separateParenGroups :: String -> [String]
separateParenGroups paren_string =","separateParenGroups :: String -> [String]
separateParenGroups paren_string = go paren_string 0 [] """" []
  where
    go [] _ _ current acc = if null current then acc else acc ++ [current]
    go (x:xs) depth stack current acc
      | x == ' ' = go xs depth stack current acc
      | x == '(' = go xs (depth + 1) ('(':stack) (current ++ [x]) acc
      | x == ')' =
          let newCurrent = current ++ [x]
              newDepth = depth - 1
          in if newDepth == 0
             then go xs newDepth (tail stack) """" (acc ++ [newCurrent])
             else go xs newDepth (tail stack) newCurrent acc
      | otherwise = error ""Unexpected character""","
main :: IO ()
main = do
  let candidate = separateParenGroups
  if candidate ""(()()) ((())) () ((())()())"" == [""(()())"",""((()))"",""()"",""((())()())""] then pure () else error ""assertion failed""
  if candidate ""() (()) ((())) (((())))"" == [""()"",""(())"",""((()))"",""(((())))""] then pure () else error ""assertion failed""
  if candidate ""(()(())((())))"" == [""(()(())((())))""] then pure () else error ""assertion failed""
  if candidate ""( ) (( )) (( )( ))"" == [""()"",""(())"",""(()())""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_2,mal_Mlym,hs,"--സംഖ്യയുടെ ദശാംശ ഭാഗം തിരികെ നൽകുക.--(അവശേഷിക്കുന്ന ഭാഗം എല്ലായ്പ്പോഴും 1 ന് താഴെയാണ്).--യും ഇന്റര് ഭാഗവും (നൽകിയ സംഖ്യയേക്കാൾ ചെറുതാണ് ഏറ്റവും വലിയ ഇന്റര്) ദശാംശവും--ഒരു പോസിറ്റീവ് ഫ്ലോട്ടിംഗ് പോയിന്റ് നമ്പർ കൊടുത്താൽ, അതിനെ  ആയി വിഭജിക്കാം.--  >>> truncateNumber 3.5
--  0.5
truncateNumber :: Float -> Float
truncateNumber number =","truncateNumber :: Float -> Float
truncateNumber number = number - fromIntegral (floor number)","
main :: IO ()
main = do
  let candidate = truncateNumber
  if candidate 3.5 == 0.5 then pure () else error ""assertion failed""
  if candidate 1.25 == 0.25 then pure () else error ""assertion failed""
  if candidate 123.0 == 0.0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_3,mal_Mlym,hs,"--ആ ഘട്ടത്തിൽ ഫംഗ്ഷൻ True ആയിരിക്കും. അല്ലാത്തപക്ഷം False ആയിരിക്കും.--നിങ്ങളുടെ ജോലി അക്കൌണ്ട് ബാലൻസ് പൂജ്യത്തിന് താഴെയായി എന്ന് കണ്ടെത്തുക എന്നതാണ്.--ഒരു ബാങ്ക് അക്കൌണ്ടിലെ നിക്ഷേപവും പിൻവലിക്കലും സംബന്ധിച്ച ഒരു ലിസ്റ്റ് നിങ്ങൾക്ക് ലഭിക്കും അത് തുടങ്ങുന്നത്--  >>> belowZero [1,2,3]
--  False
--  >>> belowZero [1,2,(-4),5]
--  True
belowZero :: [Int] -> Bool
belowZero operations =","belowZero :: [Int] -> Bool
belowZero operations = any (< 0) $ scanl (+) 0 operations","
main :: IO ()
main = do
  let candidate = belowZero
  if candidate [] == False then pure () else error ""assertion failed""
  if candidate [1,2,(-3),1,2,(-3)] == False then pure () else error ""assertion failed""
  if candidate [1,2,(-4),5,6] == True then pure () else error ""assertion failed""
  if candidate [1,(-1),2,(-2),5,(-5),4,(-4)] == False then pure () else error ""assertion failed""
  if candidate [1,(-1),2,(-2),5,(-5),4,(-5)] == True then pure () else error ""assertion failed""
  if candidate [1,(-2),2,(-2),5,(-5),4,(-4)] == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_4,mal_Mlym,hs,"--MAD = ശരാശരി. x - x_mean. --ഒരു ഘടകവും ഒരു കേന്ദ്രബിന്ദുവും (ഈ കേസിൽ ശരാശരി):--ശരാശരി അബ്സലൂട്ട് ഡീവിയേഷൻ എന്നത് ഓരോ യും തമ്മിലുള്ള ശരാശരി അബ്സലൂട്ട് വ്യത്യാസമാണ്.--ഈ ഡാറ്റാ സെറ്റിന്റെ ശരാശരിയിൽ.--∙∙∙ഒരു നിശ്ചിത സംഖ്യകളുടെ പട്ടികയിൽ നിന്നും, ശരാശരി അബ്സലൂട്ട് ഡീവിയേഷൻ കണക്കുകൂട്ടുക.--  >>> meanAbsoluteDeviation [1.0,2.0,3.0,4.0]
--  1.0
meanAbsoluteDeviation :: [Float] -> Float
meanAbsoluteDeviation numbers =","meanAbsoluteDeviation :: [Float] -> Float
meanAbsoluteDeviation numbers = sum absoluteDifferences / fromIntegral (length numbers)
  where
    mean = sum numbers / fromIntegral (length numbers)
    absoluteDifferences = map (\x -> abs (x - mean)) numbers","
main :: IO ()
main = do
  let candidate = meanAbsoluteDeviation
  if candidate [1.0,2.0] == 0.5 then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0] == 1.0 then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0] == 1.2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_5,mal_Mlym,hs,"--∀നമ്പറുകൾ' എന്ന ഇൻപുട്ട് ലിസ്റ്റിലെ ഓരോ തുടർച്ചയായ രണ്ട് ഘടകങ്ങൾക്കും ഇടയിൽ ഒരു സംഖ്യ 'ഡിലിമിറ്റർ' ചേർക്കുക.--  >>> intersperse [] 4
--  []
--  >>> intersperse [1,2,3] 4
--  [1,4,2,4,3]
intersperse :: [Int] -> Int -> [Int]
intersperse numbers delimeter =","intersperse :: [Int] -> Int -> [Int]
intersperse [] _ = []
intersperse [x] _ = [x]
intersperse (x:xs) delimeter = x : delimeter : intersperse xs delimeter","
main :: IO ()
main = do
  let candidate = intersperse
  if candidate [] 7 == [] then pure () else error ""assertion failed""
  if candidate [5,6,3,2] 8 == [5,8,6,8,3,8,2] then pure () else error ""assertion failed""
  if candidate [2,2,2] 2 == [2,2,2,2,2] then pure () else error ""assertion failed""
  pure ()"
HumanEval_6,mal_Mlym,hs,"--ഉദാഹരണത്തിന്, (() (()) ന് പരമാവധി രണ്ട് നെസ്റ്റിംഗ് ലെവലുകൾ ഉണ്ട്, അതേസമയം ((())) ന് മൂന്ന് ഉണ്ട്. --ഓരോ ഗ്രൂപ്പിനും പരേതന്മാരുടെ ഏറ്റവും ആഴത്തിലുള്ള തലത്തിലുള്ള നെസ്റ്റിംഗ് നൽകുക.--ഈ ഫങ്ഷന് ഒരു സ്ട്രിംഗ് ആണ് നല് കുന്നത്, അത് സ്പെയ്സുകളാൽ വേർതിരിക്കപ്പെട്ട പരാൻതീസിസ് ഗ്രൂപ്പുകളെ പ്രതിനിധീകരിക്കുന്നു.--  >>> parseNestedParens ""(()()) ((())) () ((())()())""
--  [2,3,1,3]
parseNestedParens :: String -> [Int]
parseNestedParens paren_string =","parseNestedParens :: String -> [Int]
parseNestedParens paren_string = map maxDepth (words paren_string)
  where
    maxDepth :: String -> Int
    maxDepth = go 0 0
      where
        go :: Int -> Int -> String -> Int
        go currentDepth maxDepth [] = maxDepth
        go currentDepth maxDepth (c:cs)
          | c == '('  = go (currentDepth + 1) (max currentDepth maxDepth) cs
          | c == ')'  = go (currentDepth - 1) maxDepth cs
          | otherwise = go currentDepth maxDepth cs","
main :: IO ()
main = do
  let candidate = parseNestedParens
  if candidate ""(()()) ((())) () ((())()())"" == [2,3,1,3] then pure () else error ""assertion failed""
  if candidate ""() (()) ((())) (((())))"" == [1,2,3,4] then pure () else error ""assertion failed""
  if candidate ""(()(())((())))"" == [4] then pure () else error ""assertion failed""
  pure ()"
HumanEval_7,mal_Mlym,hs,"--∙∙∙ഒരു സ്ട്രിംഗിന്റെ ഇൻപുട്ട് ലിസ്റ്റ് ഫിൽട്ടർ ചെയ്യുക, അത് സബ് സ്ട്രിംഗ് അടങ്ങിയവ മാത്രം കാണിക്കുന്നു.--  >>> filterBySubstring [] ""a""
--  []
--  >>> filterBySubstring [""abc"",""bacd"",""cde"",""array""] ""a""
--  [""abc"",""bacd"",""array""]
filterBySubstring :: [String] -> String -> [String]
filterBySubstring strings substring =","filterBySubstring :: [String] -> String -> [String]
filterBySubstring strings substring = filter (substring `isInfixOf`) strings
  where isInfixOf = isInfixOf","
main :: IO ()
main = do
  let candidate = filterBySubstring
  if candidate [] ""john"" == [] then pure () else error ""assertion failed""
  if candidate [""xxx"",""asd"",""xxy"",""john doe"",""xxxAAA"",""xxx""] ""xxx"" == [""xxx"",""xxxAAA"",""xxx""] then pure () else error ""assertion failed""
  if candidate [""xxx"",""asd"",""aaaxxy"",""john doe"",""xxxAAA"",""xxx""] ""xx"" == [""xxx"",""aaaxxy"",""xxxAAA"",""xxx""] then pure () else error ""assertion failed""
  if candidate [""grunt"",""trumpet"",""prune"",""gruesome""] ""run"" == [""grunt"",""prune""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_8,mal_Mlym,hs,"--ശൂന്യ സംഖ്യ 0 ഉം ശൂന്യ ഉൽപ്പന്നം 1 ഉം ആയിരിക്കണം.--∙∙∙ഒരു സംഖ്യകളുടെ പട്ടികയിൽ, ഒരു സംഖ്യയുടെ സംഖ്യയും ഗുണിതവും ചേർത്ത് ഒരു ട്യൂപ്പിൾ നൽകുക.--  >>> sumProduct []
--  (0, 1)
--  >>> sumProduct [1,2,3,4]
--  (10, 24)
sumProduct :: [Int] -> (Int, Int)
sumProduct numbers =","sumProduct :: [Int] -> (Int, Int)
sumProduct numbers = (sum numbers, product numbers)","
main :: IO ()
main = do
  let candidate = sumProduct
  if candidate [] == (0, 1) then pure () else error ""assertion failed""
  if candidate [1,1,1] == (3, 1) then pure () else error ""assertion failed""
  if candidate [100,0] == (100, 0) then pure () else error ""assertion failed""
  if candidate [3,5,7] == (15, 105) then pure () else error ""assertion failed""
  if candidate [10] == (10, 10) then pure () else error ""assertion failed""
  pure ()"
HumanEval_9,mal_Mlym,hs,"--യില് തന്നെ.--ഒരു നിശ്ചിത സംഖ്യകളുടെ പട്ടികയിൽ നിന്നും, ഒരു നിശ്ചിത നിമിഷം വരെ കണ്ടെത്തിയ പരമാവധി എലമെന്റുകളുടെ പട്ടിക ഉണ്ടാക്കുക.--  >>> rollingMax [1,2,3,2,3,4,2]
--  [1,2,3,3,3,4,4]
rollingMax :: [Int] -> [Int]
rollingMax numbers =","rollingMax :: [Int] -> [Int]
rollingMax = scanl1 max","
main :: IO ()
main = do
  let candidate = rollingMax
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,2,3,4] == [1,2,3,4] then pure () else error ""assertion failed""
  if candidate [4,3,2,1] == [4,4,4,4] then pure () else error ""assertion failed""
  if candidate [3,2,3,100,3] == [3,3,3,100,100] then pure () else error ""assertion failed""
  pure ()"
HumanEval_10,mal_Mlym,hs,"--- സ്ട്രിംഗ് റിവേഴ്സ് അവസാനിക്കുന്നതിനു മുമ്പ് ഒരു സ്ട്രിംഗ് പ്രിഫിക്സ് ചേർക്കുക.--- ഒരു പാലിൻഡ്രോം ആയ സ്ട്രിംഗിന്റെ ഏറ്റവും നീളം കൂടിയ പോസ്റ്റ്ഫിക്സ് കണ്ടെത്തുക.--അല് ഗോരിതം ആശയം ലളിതമാണ്:--∙∙∙നൽകിയ സ്ട്രിങ്ങിൽ തുടങ്ങുന്ന ഏറ്റവും ചെറിയ പാലിൻഡ്രോം കണ്ടെത്തുക--  >>> makePalindrome """"
--  """"
--  >>> makePalindrome ""cat""
--  ""catac""
--  >>> makePalindrome ""cata""
--  ""catac""
makePalindrome :: String -> String
makePalindrome string =","makePalindrome :: String -> String
makePalindrome string = string ++ reverse (take (length string - palindromeLength) string)
  where
    palindromeLength = longestPalindromicSuffix string

longestPalindromicSuffix :: String -> Int
longestPalindromicSuffix str = maximum [l | l <- [0..length str], isPalindrome (drop l str)]

isPalindrome :: String -> Bool
isPalindrome s = s == reverse s","
main :: IO ()
main = do
  let candidate = makePalindrome
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""x"" == ""x"" then pure () else error ""assertion failed""
  if candidate ""xyz"" == ""xyzyx"" then pure () else error ""assertion failed""
  if candidate ""xyx"" == ""xyx"" then pure () else error ""assertion failed""
  if candidate ""jerry"" == ""jerryrrej"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_11,mal_Mlym,hs,"--ഈ ഇൻപുട്ടുകളിൽ ബൈനറി XOR നടത്തുകയും ഫലം ഒരു സ്ട്രിംഗായി നൽകുകയും ചെയ്യുക.--∙∙∙ഇൻപുട്ട് എന്നത് 1 ഉം 0 ഉം മാത്രമുള്ള രണ്ട് സ്ട്രിങ്ങുകളാണ് a ഉം b ഉം--  >>> stringXor ""010"" ""110""
--  ""100""
stringXor :: String -> String -> String
stringXor a b =","stringXor :: String -> String -> String
stringXor a b = [if x == y then '0' else '1' | (x, y) <- zip a b]","
main :: IO ()
main = do
  let candidate = stringXor
  if candidate ""111000"" ""101010"" == ""010010"" then pure () else error ""assertion failed""
  if candidate ""1"" ""1"" == ""0"" then pure () else error ""assertion failed""
  if candidate ""0101"" ""0000"" == ""0101"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_12,mal_Mlym,hs,"--ഒരേ നീളമുള്ള സ്ട്രിങ്ങുകൾ. ഇൻപുട്ട് ലിസ്റ്റ് ശൂന്യമാണെങ്കിൽ ഒന്നും നൽകരുത്.--∙∙∙സ്ട്രിങ്ങുകളുടെ ലിസ്റ്റിൽ നിന്നും ഏറ്റവും നീളം കൂടിയത് തിരികെ കൊടുക്കുക. ഒന്നിലധികം ∙∙∙--  >>> longest []
--  Just (Nothing)
--  >>> longest [""a"",""b"",""c""]
--  Just (""a"")
--  >>> longest [""a"",""bb"",""ccc""]
--  Just (""ccc"")
longest :: [String] -> Maybe String
longest strings =","longest :: [String] -> Maybe String
longest [] = Nothing
longest strings = Just $ foldl1 (\acc x -> if length x > length acc then x else acc) strings","
main :: IO ()
main = do
  let candidate = longest
  if candidate [] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [""x"",""y"",""z""] == Just (""x"") then pure () else error ""assertion failed""
  if candidate [""x"",""yyy"",""zzzz"",""www"",""kkkk"",""abc""] == Just (""zzzz"") then pure () else error ""assertion failed""
  pure ()"
HumanEval_13,mal_Mlym,hs,"--രണ്ട് പൂർണ്ണസംഖ്യകളുടെ ഏറ്റവും വലിയ പൊതുവിഭജനം a ഉം b ഉം തിരികെ നൽകുക.--  >>> greatestCommonDivisor 3 5
--  1
--  >>> greatestCommonDivisor 25 15
--  5
greatestCommonDivisor :: Int -> Int -> Int
greatestCommonDivisor a b =","greatestCommonDivisor :: Int -> Int -> Int
greatestCommonDivisor a b
  | b == 0    = a
  | otherwise = greatestCommonDivisor b (a `mod` b)","
main :: IO ()
main = do
  let candidate = greatestCommonDivisor
  if candidate 3 7 == 1 then pure () else error ""assertion failed""
  if candidate 10 15 == 5 then pure () else error ""assertion failed""
  if candidate 49 14 == 7 then pure () else error ""assertion failed""
  if candidate 144 60 == 12 then pure () else error ""assertion failed""
  pure ()"
HumanEval_14,mal_Mlym,hs,"--∙∙∙ഇൻപുട്ട് സ്ട്രിംഗിലെ ഏറ്റവും ചെറുത് മുതൽ ഏറ്റവും നീളം കൂടിയത് വരെയുള്ള എല്ലാ പ്രിഫിക്സുകളുടെയും ലിസ്റ്റ് തിരിച്ചുനൽകുന്നു--  >>> allPrefixes ""abc""
--  [""a"",""ab"",""abc""]
allPrefixes :: String -> [String]
allPrefixes string =","allPrefixes :: String -> [String]
allPrefixes string = [take n string | n <- [1 .. length string]]","
main :: IO ()
main = do
  let candidate = allPrefixes
  if candidate """" == [] then pure () else error ""assertion failed""
  if candidate ""asdfgh"" == [""a"",""as"",""asd"",""asdf"",""asdfg"",""asdfgh""] then pure () else error ""assertion failed""
  if candidate ""WWW"" == [""W"",""WW"",""WWW""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_15,mal_Mlym,hs,"--0 മുതൽ n വരെയുള്ള സംഖ്യകളുടെ ഒരു സ്ട്രിംഗ് തിരികെ നൽകുന്നു.--  >>> stringSequence 0
--  ""0""
--  >>> stringSequence 5
--  ""0 1 2 3 4 5""
stringSequence :: Int -> String
stringSequence n =","stringSequence :: Int -> String
stringSequence n = unwords $ map show [0..n]","
main :: IO ()
main = do
  let candidate = stringSequence
  if candidate 0 == ""0"" then pure () else error ""assertion failed""
  if candidate 3 == ""0 1 2 3"" then pure () else error ""assertion failed""
  if candidate 10 == ""0 1 2 3 4 5 6 7 8 9 10"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_16,mal_Mlym,hs,"--ഒരു സ്ട്രിംഗ് തന്നാൽ, അതിൽ എത്ര വ്യത്യസ്ത പ്രതീകങ്ങൾ ഉണ്ടെന്ന് കണ്ടെത്തുക (കേസ് പരിഗണിക്കാതെ)--  >>> countDistinctCharacters ""xyzXYZ""
--  3
--  >>> countDistinctCharacters ""Jerry""
--  4
countDistinctCharacters :: String -> Int
countDistinctCharacters string =","import Data.Char (toLower)
import Data.Set (fromList, size)

countDistinctCharacters :: String -> Int
countDistinctCharacters string = size . fromList $ map toLower string","
main :: IO ()
main = do
  let candidate = countDistinctCharacters
  if candidate """" == 0 then pure () else error ""assertion failed""
  if candidate ""abcde"" == 5 then pure () else error ""assertion failed""
  if candidate ""abcdecadeCADE"" == 5 then pure () else error ""assertion failed""
  if candidate ""aaaaAAAAaaaa"" == 1 then pure () else error ""assertion failed""
  if candidate ""Jerry jERRY JeRRRY"" == 5 then pure () else error ""assertion failed""
  pure ()"
HumanEval_17,mal_Mlym,hs,"--'ഹാച്ചാ' - ഒരു ക്വാർട്ടർ നോട്ട്, ഒരു ബീറ്റ് നീണ്ടുനിൽക്കും.--'ഒ ശെരി' - പാതി നോട്ട്, രണ്ടു ബീറ്റ് നീണ്ടുനിൽക്കും.--'ഒ' - മുഴുവൻ നോട്ടും, നാലു താളം നീണ്ടുനിൽക്കും.--ഇതാ ഒരു ഇതിഹാസം:--അവസാനത്തേത് അല്ല.--നിങ്ങളുടെ ജോലി ഈ സ്ട്രിംഗ് പാഴ്സ് ചെയ്ത് ഓരോന്നും എത്ര തവണ ആവർത്തിക്കുന്നു എന്നതിന് അനുസൃതമായി പൂർണ്ണസംഖ്യകളുടെ ഒരു ലിസ്റ്റ് തിരികെ നൽകുക എന്നതാണ്.--ഈ ഫങ്ഷന് ഒരു സ്ട്രിംഗ് ആണ് നൽകുന്നത് അത് ഒരു പ്രത്യേക ASCII ഫോർമാറ്റിലുള്ള സംഗീത കുറിപ്പുകളെ പ്രതിനിധീകരിക്കുന്നു.--  >>> parseMusic ""o o| .| o| o| .| .| .| .| o o""
--  [4,2,1,2,2,1,1,1,1,4,4]
parseMusic :: String -> [Int]
parseMusic music_string =","parseMusic :: String -> [Int]
parseMusic music_string = map beats (words music_string)
  where
    beats ""o"" = 4
    beats ""o|"" = 2
    beats "".|"" = 1
    beats _ = 0","
main :: IO ()
main = do
  let candidate = parseMusic
  if candidate """" == [] then pure () else error ""assertion failed""
  if candidate ""o o o o"" == [4,4,4,4] then pure () else error ""assertion failed""
  if candidate "".| .| .| .|"" == [1,1,1,1] then pure () else error ""assertion failed""
  if candidate ""o| o| .| .| o o o o"" == [2,2,1,1,4,4,4,4] then pure () else error ""assertion failed""
  if candidate ""o| .| o| .| o o| o o|"" == [2,1,2,1,4,2,4,2] then pure () else error ""assertion failed""
  pure ()"
HumanEval_18,mal_Mlym,hs,"--∙∙∙ഒരു സബ് സ്ട്രിംഗിന്റെ ഒറിജിനൽ സ്ട്രിംഗിൽ എത്ര തവണ കണ്ടെത്താം എന്ന് കണ്ടെത്തുക. ∙∙∙അതിലെ ഓവർലാപ്പിംഗ് കേസുകൾ എണ്ണുക.--  >>> howManyTimes """" ""a""
--  0
--  >>> howManyTimes ""aaa"" ""a""
--  3
--  >>> howManyTimes ""aaaa"" ""aa""
--  3
howManyTimes :: String -> String -> Int
howManyTimes string substring =","howManyTimes :: String -> String -> Int
howManyTimes string substring
  | null substring = 0
  | otherwise = length . filter isPrefixOfSubstring $ tails string
  where
    isPrefixOfSubstring = isPrefixOf substring
    isPrefixOf :: Eq a => [a] -> [a] -> Bool
    isPrefixOf prefix str = prefix `isPrefixOf` str","
main :: IO ()
main = do
  let candidate = howManyTimes
  if candidate """" ""x"" == 0 then pure () else error ""assertion failed""
  if candidate ""xyxyxyx"" ""x"" == 4 then pure () else error ""assertion failed""
  if candidate ""cacacacac"" ""cac"" == 4 then pure () else error ""assertion failed""
  if candidate ""john doe"" ""john"" == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_19,mal_Mlym,hs,"--ഏറ്റവും ചെറിയ സംഖ്യ മുതൽ ഏറ്റവും വലിയ സംഖ്യ വരെ ക്രമീകരിച്ചിരിക്കുന്ന സ്ട്രിംഗ് തിരികെ നൽകുന്നു.--സാധുവായ തിരഞ്ഞെടുപ്പുകൾ 'പൂജ്യം', 'ഒന്ന്', 'രണ്ട്', 'മൂന്ന്', 'നാല്', 'അഞ്ച്', 'ആറ്', 'ഏഴ്', 'എട്ട്' എന്നിവയാണ്.  എട്ട്, ഒമ്പത് എന്നിങ്ങനെ നിരവധി പേരുകൾ ഇതിൽ ഉൾപ്പെടുന്നു.--എന്തിനു്? എന്തിനു്? എന്തിനു്? എന്തിനു്? എന്തിനു്? എന്തിനു്? എന്തിനു്?--  >>> sortNumbers ""three one five""
--  ""one three five""
sortNumbers :: String -> String
sortNumbers numbers =","import Data.List (sort)
import Data.Maybe (fromJust)
import Data.Map (Map, fromList, lookup)

sortNumbers :: String -> String
sortNumbers numbers = unwords $ map snd $ sort $ map (\w -> (fromJust $ lookup w wordToNumber, w)) (words numbers)
  where
    wordToNumber :: Map String Int
    wordToNumber = fromList [(""zero"", 0), (""one"", 1), (""two"", 2), (""three"", 3), (""four"", 4),
                             (""five"", 5), (""six"", 6), (""seven"", 7), (""eight"", 8), (""nine"", 9)]","
main :: IO ()
main = do
  let candidate = sortNumbers
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""three"" == ""three"" then pure () else error ""assertion failed""
  if candidate ""three five nine"" == ""three five nine"" then pure () else error ""assertion failed""
  if candidate ""five zero four seven nine eight"" == ""zero four five seven eight nine"" then pure () else error ""assertion failed""
  if candidate ""six five four three two one zero"" == ""zero one two three four five six"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_20,mal_Mlym,hs,"--മറ്റു് നമ്പറുകള് ക്രമം അനുസരിച്ച് തിരിച്ചു് തരിക (കുറഞ്ഞ എണ്ണം, വലിയ എണ്ണം).--∙∙∙നമ്പറുകളുടെ ഒരു ലിസ്റ്റിൽ നിന്നും (കുറഞ്ഞത് രണ്ടെണ്ണം) ഓരോന്നിനും ഏറ്റവും അടുത്തുള്ള രണ്ടെണ്ണം തെരഞ്ഞെടുത്ത് തിരിച്ചുവിടുക--  >>> findClosestElements [1.0,2.0,3.0,4.0,5.0,2.2]
--  (2.0, 2.2)
--  >>> findClosestElements [1.0,2.0,3.0,4.0,5.0,2.0]
--  (2.0, 2.0)
findClosestElements :: [Float] -> (Float, Float)
findClosestElements numbers =","findClosestElements :: [Float] -> (Float, Float)
findClosestElements numbers = head . foldr1 minByDiff $ zip sortedNumbers (tail sortedNumbers)
  where
    sortedNumbers = sort numbers
    minByDiff (a1, b1) (a2, b2)
      | abs (a1 - b1) < abs (a2 - b2) = (a1, b1)
      | otherwise = (a2, b2)","
main :: IO ()
main = do
  let candidate = findClosestElements
  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] == (3.9, 4.0) then pure () else error ""assertion failed""
  if candidate [1.0,2.0,5.9,4.0,5.0] == (5.0, 5.9) then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0,2.2] == (2.0, 2.2) then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0,2.0] == (2.0, 2.0) then pure () else error ""assertion failed""
  if candidate [1.1,2.2,3.1,4.1,5.1] == (2.2, 3.1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_21,mal_Mlym,hs,"--ഏറ്റവും ചെറിയ സംഖ്യ 0 ആയിത്തീരും, ഏറ്റവും വലിയ സംഖ്യ 1 ആയിത്തീരും.--∙∙∙നമ്പറുകളുടെ ഒരു ലിസ്റ്റ് (കുറഞ്ഞത് രണ്ട് എലമെന്റുകൾ) തന്നിട്ട്, ആ ലിസ്റ്റിൽ ഒരു ലീനിയർ ട്രാൻസ്ഫോർമേഷൻ പ്രയോഗിക്കുക, ∙--  >>> rescaleToUnit [1.0,2.0,3.0,4.0,5.0]
--  [0.0,0.25,0.5,0.75,1.0]
rescaleToUnit :: [Float] -> [Float]
rescaleToUnit numbers =","rescaleToUnit :: [Float] -> [Float]
rescaleToUnit numbers = map (\x -> (x - minVal) / range) numbers
  where
    minVal = minimum numbers
    maxVal = maximum numbers
    range = maxVal - minVal","
main :: IO ()
main = do
  let candidate = rescaleToUnit
  if candidate [2.0,49.9] == [0.0,1.0] then pure () else error ""assertion failed""
  if candidate [100.0,49.9] == [1.0,0.0] then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0] == [0.0,0.25,0.5,0.75,1.0] then pure () else error ""assertion failed""
  if candidate [2.0,1.0,5.0,3.0,4.0] == [0.25,0.0,1.0,0.5,0.75] then pure () else error ""assertion failed""
  if candidate [12.0,11.0,15.0,13.0,14.0] == [0.25,0.0,1.0,0.5,0.75] then pure () else error ""assertion failed""
  pure ()"
HumanEval_23,mal_Mlym,hs,"--∙∙∙നൽകിയ സ്ട്രിങ്ങിന്റെ നീളം തിരിച്ചുനൽകുന്നു--  >>> strlen """"
--  0
--  >>> strlen ""abc""
--  3
strlen :: String -> Int
strlen string =","strlen :: String -> Int
strlen string = length string","
main :: IO ()
main = do
  let candidate = strlen
  if candidate """" == 0 then pure () else error ""assertion failed""
  if candidate ""x"" == 1 then pure () else error ""assertion failed""
  if candidate ""asdasnakj"" == 9 then pure () else error ""assertion failed""
  pure ()"
HumanEval_24,mal_Mlym,hs,"--ഒരു നിശ്ചിത സംഖ്യ n ന്, n നെ തുല്യമായി വിഭജിക്കുന്ന ഏറ്റവും വലിയ സംഖ്യ കണ്ടെത്തുക, n നേക്കാൾ ചെറുത്.--  >>> largestDivisor 15
--  5
largestDivisor :: Int -> Int
largestDivisor n =","largestDivisor :: Int -> Int
largestDivisor n = head [ x | x <- [n-1, n-2..1], n `mod` x == 0 ]","
main :: IO ()
main = do
  let candidate = largestDivisor
  if candidate 3 == 1 then pure () else error ""assertion failed""
  if candidate 7 == 1 then pure () else error ""assertion failed""
  if candidate 10 == 5 then pure () else error ""assertion failed""
  if candidate 100 == 50 then pure () else error ""assertion failed""
  if candidate 49 == 7 then pure () else error ""assertion failed""
  pure ()"
HumanEval_25,mal_Mlym,hs,"--എല്ലാ ഘടകങ്ങളുടെയും ഗുണനത്തിന് തുല്യമാണ് ഈ സംഖ്യ.--ഓരോ ഘടകങ്ങളും ഘടക വിഭജനത്തിൽ എത്ര തവണ പ്രത്യക്ഷപ്പെടുന്നു എന്നതിന് അനുസൃതമായി എത്ര തവണ ലിസ്റ്റ് ചെയ്യണം.--∙∙∙നമ്പർ തന്നിരിക്കുന്ന സംഖ്യയുടെ പ്രൈം ഫാക്ടറുകളുടെ ലിസ്റ്റ് ഏറ്റവും ചെറിയതിൽ നിന്നും ഏറ്റവും വലിയതിലേക്ക് ക്രമത്തിൽ നൽകുന്നു.--  >>> factorize 8
--  [2,2,2]
--  >>> factorize 25
--  [5,5]
--  >>> factorize 70
--  [2,5,7]
factorize :: Int -> [Int]
factorize n =","factorize :: Int -> [Int]
factorize n = factorize' n 2
  where
    factorize' 1 _ = []
    factorize' m f
      | m `mod` f == 0 = f : factorize' (m `div` f) f
      | otherwise      = factorize' m (f + 1)","
main :: IO ()
main = do
  let candidate = factorize
  if candidate 2 == [2] then pure () else error ""assertion failed""
  if candidate 4 == [2,2] then pure () else error ""assertion failed""
  if candidate 8 == [2,2,2] then pure () else error ""assertion failed""
  if candidate 57 == [3,19] then pure () else error ""assertion failed""
  if candidate 3249 == [3,3,19,19] then pure () else error ""assertion failed""
  if candidate 185193 == [3,3,3,19,19,19] then pure () else error ""assertion failed""
  if candidate 20577 == [3,19,19,19] then pure () else error ""assertion failed""
  if candidate 18 == [2,3,3] then pure () else error ""assertion failed""
  pure ()"
HumanEval_26,mal_Mlym,hs,"--ഘടകങ്ങളുടെ ക്രമം ഇൻപുട്ടിൽ ഉള്ളതു പോലെ തന്നെ നിലനിർത്തുക.--∙∙∙ഒരു സംഖ്യകളുടെ പട്ടികയിൽ നിന്നും ഒന്നിൽ കൂടുതൽ തവണ വരുന്ന എല്ലാ എലമെന്റുകളും നീക്കം ചെയ്യുക.--  >>> removeDuplicates [1,2,3,2,4]
--  [1,3,4]
removeDuplicates :: [Int] -> [Int]
removeDuplicates numbers =","removeDuplicates :: [Int] -> [Int]
removeDuplicates numbers = filter (\x -> count x numbers == 1) numbers
  where
    count x = length . filter (== x)","
main :: IO ()
main = do
  let candidate = removeDuplicates
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,2,3,4] == [1,2,3,4] then pure () else error ""assertion failed""
  if candidate [1,2,3,2,4,3,5] == [1,4,5] then pure () else error ""assertion failed""
  pure ()"
HumanEval_27,mal_Mlym,hs,"--ഒരു സ്ട്രിങിന്, ചെറിയ അക്ഷരങ്ങളെ വലിയ അക്ഷരങ്ങളാക്കി മാറ്റുക, വലിയ അക്ഷരങ്ങളെ ചെറിയ അക്ഷരങ്ങളാക്കി മാറ്റുക.--  >>> flipCase ""Hello""
--  ""hELLO""
flipCase :: String -> String
flipCase string =","flipCase :: String -> String
flipCase = map flipChar
  where
    flipChar c
      | c >= 'a' && c <= 'z' = toEnum (fromEnum c - 32)
      | c >= 'A' && c <= 'Z' = toEnum (fromEnum c + 32)
      | otherwise = c","
main :: IO ()
main = do
  let candidate = flipCase
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""Hello!"" == ""hELLO!"" then pure () else error ""assertion failed""
  if candidate ""These violent delights have violent ends"" == ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_28,mal_Mlym,hs,"--∙∙∙സ്ട്രിങ്ങുകളുടെ ഒരു ലിസ്റ്റ് ഒറ്റ സ്ട്രിങ്ങായി കൂട്ടിച്ചേര് ക്കുക--  >>> concatenate []
--  """"
--  >>> concatenate [""a"",""b"",""c""]
--  ""abc""
concatenate :: [String] -> String
concatenate strings =","concatenate :: [String] -> String
concatenate strings = concat strings","
main :: IO ()
main = do
  let candidate = concatenate
  if candidate [] == """" then pure () else error ""assertion failed""
  if candidate [""x"",""y"",""z""] == ""xyz"" then pure () else error ""assertion failed""
  if candidate [""x"",""y"",""z"",""w"",""k""] == ""xyzwk"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_29,mal_Mlym,hs,"--∙∙∙ഒരു നിശ്ചിത പ്രിഫിക്സ് ഉപയോഗിച്ച് തുടങ്ങുന്ന സ്ട്രിങ്ങുകളുടെ ഒരു ഇൻപുട്ട് ലിസ്റ്റ് ഫിൽട്ടർ ചെയ്യുക.--  >>> filterByPrefix [] ""a""
--  []
--  >>> filterByPrefix [""abc"",""bcd"",""cde"",""array""] ""a""
--  [""abc"",""array""]
filterByPrefix :: [String] -> String -> [String]
filterByPrefix strings prefix =","filterByPrefix strings prefix = filter (isPrefixOf prefix) strings
  where
    isPrefixOf pfx str = take (length pfx) str == pfx","
main :: IO ()
main = do
  let candidate = filterByPrefix
  if candidate [] ""john"" == [] then pure () else error ""assertion failed""
  if candidate [""xxx"",""asd"",""xxy"",""john doe"",""xxxAAA"",""xxx""] ""xxx"" == [""xxx"",""xxxAAA"",""xxx""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_30,mal_Mlym,hs,"--∙∙∙ പട്ടികയിലെ പോസിറ്റീവ് സംഖ്യകൾ മാത്രം തിരികെ നൽകുക.--  >>> getPositive [(-1),2,(-4),5,6]
--  [2,5,6]
--  >>> getPositive [5,3,(-5),2,(-3),3,9,0,123,1,(-10)]
--  [5,3,2,3,9,123,1]
getPositive :: [Int] -> [Int]
getPositive l =","getPositive :: [Int] -> [Int]
getPositive l = filter (> 0) l","
main :: IO ()
main = do
  let candidate = getPositive
  if candidate [(-1),(-2),4,5,6] == [4,5,6] then pure () else error ""assertion failed""
  if candidate [5,3,(-5),2,3,3,9,0,123,1,(-10)] == [5,3,2,3,3,9,123,1] then pure () else error ""assertion failed""
  if candidate [(-1),(-2)] == [] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_31,mal_Mlym,hs,"--ഒരു സംഖ്യ പ്രൈം ആണെങ്കിൽ ശരി, അല്ലാത്തപക്ഷം തെറ്റായി നൽകുന്നു.--  >>> isPrime 6
--  False
--  >>> isPrime 101
--  True
--  >>> isPrime 11
--  True
--  >>> isPrime 13441
--  True
--  >>> isPrime 61
--  True
--  >>> isPrime 4
--  False
--  >>> isPrime 1
--  False
isPrime :: Int -> Bool
isPrime n =","isPrime :: Int -> Bool
isPrime n
  | n <= 1 = False
  | n == 2 = True
  | even n = False
  | otherwise = not (any (\x -> n `mod` x == 0) [3,5..floor (sqrt (fromIntegral n))])","
main :: IO ()
main = do
  let candidate = isPrime
  if candidate 6 == False then pure () else error ""assertion failed""
  if candidate 101 == True then pure () else error ""assertion failed""
  if candidate 11 == True then pure () else error ""assertion failed""
  if candidate 13441 == True then pure () else error ""assertion failed""
  if candidate 61 == True then pure () else error ""assertion failed""
  if candidate 4 == False then pure () else error ""assertion failed""
  if candidate 1 == False then pure () else error ""assertion failed""
  if candidate 5 == True then pure () else error ""assertion failed""
  if candidate 11 == True then pure () else error ""assertion failed""
  if candidate 17 == True then pure () else error ""assertion failed""
  if candidate 85 == False then pure () else error ""assertion failed""
  if candidate 77 == False then pure () else error ""assertion failed""
  if candidate 255379 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_33,mal_Mlym,hs,"--l എന്നതിന്റെ അനുബന്ധ സൂചികകളുടെ മൂല്യങ്ങളുമായി താരതമ്യം ചെയ്യുമ്പോൾ, അവയെ തരം തിരിക്കുക.--l' എന്നത് l ന് തുല്യമാണ്, അത് മൂന്നിൽ ഹരിക്കാത്ത സൂചികകളിൽ, അതിന്റെ മൂല്യങ്ങൾ മൂന്നിൽ ഹരിക്കാവുന്ന സൂചികകളിൽ തുല്യമാണ്.--ഈ ഫങ്ഷൻ ഒരു ലിസ്റ്റ് എടുത്ത് ഒരു ലിസ്റ്റ് തിരിച്ചു തരും.--  >>> sortThird [1,2,3]
--  [1,2,3]
--  >>> sortThird [5,6,3,4,8,9,2]
--  [2,6,3,4,8,9,5]
sortThird :: [Int] -> [Int]
sortThird l =","sortThird :: [Int] -> [Int]
sortThird l = map selectElem indexed
  where
    indexed = zip [0..] l
    thirdIndicesElems = [elem | (i, elem) <- indexed, i `mod` 3 == 0]
    sortedThirdElems = sortedElems thirdIndicesElems
    sortedElems = id -- or List.sort if imported
    selectElem (i, x)
      | i `mod` 3 == 0 = head sortedThirdElems
      | otherwise = x
    replaceSortedElem xs sorted = map selectElem indexed
      where
        replaceElem i (x:xs)
          | i == 0 = x:xs
          | otherwise = replaceElem (i - 1) xs
        selectElem (i, x)
          | i `mod` 3 == 0 = head (replaceElem (i `div` 3) sortedThirdElems)
          | otherwise = x","
main :: IO ()
main = do
  let candidate = sortThird
  if candidate [5,6,3,4,8,9,2] == [2,6,3,4,8,9,5] then pure () else error ""assertion failed""
  if candidate [5,8,3,4,6,9,2] == [2,8,3,4,6,9,5] then pure () else error ""assertion failed""
  if candidate [5,6,9,4,8,3,2] == [2,6,9,4,8,3,5] then pure () else error ""assertion failed""
  if candidate [5,6,3,4,8,9,2,1] == [2,6,3,4,8,9,5,1] then pure () else error ""assertion failed""
  pure ()"
HumanEval_34,mal_Mlym,hs,"--ഒരു ലിസ്റ്റിലെ തരം തിരിക്കപ്പെട്ട അദ്വിതീയ ഘടകങ്ങൾ മടക്കിനൽകുന്നു--  >>> unique [5,3,5,2,3,3,9,0,123]
--  [0,2,3,5,9,123]
unique :: [Int] -> [Int]
unique l =","unique :: [Int] -> [Int]
unique l = sort $ nub l
  where
    -- | Remove duplicate elements from a list.
    nub :: (Eq a) => [a] -> [a]
    nub [] = []
    nub (x:xs) = x : nub (filter (/= x) xs)

    -- | Sort a list of elements (using QuickSort algorithm).
    sort :: (Ord a) => [a] -> [a]
    sort [] = []
    sort (x:xs) =
      let smallerSorted = sort [a | a <- xs, a <= x]
          biggerSorted = sort [a | a <- xs, a > x]
      in  smallerSorted ++ [x] ++ biggerSorted","
main :: IO ()
main = do
  let candidate = unique
  if candidate [5,3,5,2,3,3,9,0,123] == [0,2,3,5,9,123] then pure () else error ""assertion failed""
  pure ()"
HumanEval_35,mal_Mlym,hs,"--∙∙∙ പട്ടികയിലെ പരമാവധി എലമെന്റ് തിരിച്ചുനല്കുന്നു.--  >>> maxElement [1,2,3]
--  3
--  >>> maxElement [5,3,(-5),2,(-3),3,9,0,123,1,(-10)]
--  123
maxElement :: [Int] -> Int
maxElement l =","maxElement :: [Int] -> Int
maxElement [] = error ""List cannot be empty""
maxElement (x:xs) = maxElementHelper xs x
  where
    maxElementHelper [] currentMax = currentMax
    maxElementHelper (y:ys) currentMax = maxElementHelper ys (max y currentMax)","
main :: IO ()
main = do
  let candidate = maxElement
  if candidate [1,2,3] == 3 then pure () else error ""assertion failed""
  if candidate [5,3,(-5),2,(-3),3,9,0,124,1,(-10)] == 124 then pure () else error ""assertion failed""
  pure ()"
HumanEval_36,mal_Mlym,hs,"--∙∙∙11 നും 13 നും ഭിന്നമാകുന്ന n നേക്കാൾ ചെറിയ സംഖ്യകളിൽ 7 എന്ന അക്കം എത്ര പ്രാവശ്യം കാണിക്കുന്നു എന്ന് തിരികെ നൽകുക--  >>> fizzBuzz 50
--  0
--  >>> fizzBuzz 78
--  2
--  >>> fizzBuzz 79
--  3
fizzBuzz :: Int -> Int
fizzBuzz n =","fizzBuzz :: Int -> Int
fizzBuzz n = length [x | x <- [1..n-1], (x `mod` 11 == 0 || x `mod` 13 == 0), '7' `elem` show x]","
main :: IO ()
main = do
  let candidate = fizzBuzz
  if candidate 50 == 0 then pure () else error ""assertion failed""
  if candidate 78 == 2 then pure () else error ""assertion failed""
  if candidate 79 == 3 then pure () else error ""assertion failed""
  if candidate 100 == 3 then pure () else error ""assertion failed""
  if candidate 200 == 6 then pure () else error ""assertion failed""
  if candidate 4000 == 192 then pure () else error ""assertion failed""
  if candidate 10000 == 639 then pure () else error ""assertion failed""
  if candidate 100000 == 8026 then pure () else error ""assertion failed""
  pure ()"
HumanEval_37,mal_Mlym,hs,"--l യുടെ ഇരട്ട സൂചികകളുടെ മൂല്യങ്ങളിലേക്ക്, പക്ഷേ അടുക്കിയിരിക്കുന്നു.--l' എന്നത് l യ്ക്ക് തുല്യമാണ്, അത് ഇരട്ട സൂചികകളിലാണ്, അതേസമയം അതിന്റെ മൂല്യങ്ങൾ ഇരട്ട സൂചികകളിലാണ്.--ഈ ഫങ്ഷൻ ഒരു ലിസ്റ്റ് എടുത്ത് ഒരു ലിസ്റ്റ് തിരിച്ചു തരും.--  >>> sortEven [1,2,3]
--  [1,2,3]
--  >>> sortEven [5,6,3,4]
--  [3,6,5,4]
sortEven :: [Int] -> [Int]
sortEven l =","sortEven :: [Int] -> [Int]
sortEven l = merge odds sortedEvens
  where
    (odds, evens) = partitionList l
    sortedEvens = sort evens

    partitionList :: [Int] -> ([Int], [Int])
    partitionList [] = ([], [])
    partitionList [x] = ([x], [])
    partitionList (x:y:xs) = (x:xsOdds, y:xsEvens)
      where
        (xsOdds, xsEvens) = partitionList xs

    merge :: [Int] -> [Int] -> [Int]
    merge [] ys = ys
    merge (x:xs) [] = x:xs
    merge (x:xs) (y:ys) = x:y:merge xs ys","
main :: IO ()
main = do
  let candidate = sortEven
  if candidate [1,2,3] == [1,2,3] then pure () else error ""assertion failed""
  if candidate [5,3,(-5),2,(-3),3,9,0,123,1,(-10)] == [(-10),3,(-5),2,(-3),3,5,0,9,1,123] then pure () else error ""assertion failed""
  if candidate [5,8,(-12),4,23,2,3,11,12,(-10)] == [(-12),8,3,4,5,2,12,11,23,(-10)] then pure () else error ""assertion failed""
  pure ()"
HumanEval_39,mal_Mlym,hs,"--prime_fib ഫിബനാച്ചി സംഖ്യയായ n-ാം സംഖ്യയെ തിരികെ നൽകുന്നു അത് പ്രൈം ആണ്.--  >>> primeFib 1
--  2
--  >>> primeFib 2
--  3
--  >>> primeFib 3
--  5
--  >>> primeFib 4
--  13
--  >>> primeFib 5
--  89
primeFib :: Int -> Int
primeFib n =","primeFib :: Int -> Int
primeFib n = primeFibs !! (n - 1)
  where
    primeFibs = filter isPrime fibs
    fibs = map fst $ iterate (\(a, b) -> (b, a + b)) (0, 1)

isPrime :: Int -> Bool
isPrime k
  | k < 2 = False
  | k == 2 = True
  | even k = False
  | otherwise = null [x | x <- [3,5..upperLimit], k `mod` x == 0]
  where
    upperLimit = floor . sqrt $ fromIntegral k","
main :: IO ()
main = do
  let candidate = primeFib
  if candidate 1 == 2 then pure () else error ""assertion failed""
  if candidate 2 == 3 then pure () else error ""assertion failed""
  if candidate 3 == 5 then pure () else error ""assertion failed""
  if candidate 4 == 13 then pure () else error ""assertion failed""
  if candidate 5 == 89 then pure () else error ""assertion failed""
  if candidate 6 == 233 then pure () else error ""assertion failed""
  if candidate 7 == 1597 then pure () else error ""assertion failed""
  if candidate 8 == 28657 then pure () else error ""assertion failed""
  if candidate 9 == 514229 then pure () else error ""assertion failed""
  if candidate 10 == 433494437 then pure () else error ""assertion failed""
  pure ()"
HumanEval_40,mal_Mlym,hs,"--സര് ത്ഥം പൂജ്യവും, അല്ലാത്തപക്ഷം തെറ്റും.-- എന്ന് പറയുന്ന മൂന്ന് വ്യത്യസ്ത ഘടകങ്ങൾ ലിസ്റ്റിലുണ്ടെങ്കിൽ അത് True എന്ന് നൽകുന്നു.--∙∙∙ട്രിപ്പിൾസ് സുമ് ടു സീറോ ഒരു സംഖ്യകളുടെ പട്ടികയെ ഇൻപുട്ടായി എടുക്കുന്നു.--  >>> triplesSumToZero [1,3,5,0]
--  False
--  >>> triplesSumToZero [1,3,(-2),1]
--  True
--  >>> triplesSumToZero [1,2,3,7]
--  False
--  >>> triplesSumToZero [2,4,(-5),3,9,7]
--  True
--  >>> triplesSumToZero [1]
--  False
triplesSumToZero :: [Int] -> Bool
triplesSumToZero l =","triplesSumToZero :: [Int] -> Bool
triplesSumToZero l = any (== 0) [x + y + z | (x:ys) <- tails l, (y:zs) <- tails ys, z <- zs]
  where
    tails [] = []
    tails xs@(_:xs') = xs : tails xs'","
main :: IO ()
main = do
  let candidate = triplesSumToZero
  if candidate [1,3,5,0] == False then pure () else error ""assertion failed""
  if candidate [1,3,5,(-1)] == False then pure () else error ""assertion failed""
  if candidate [1,3,(-2),1] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,7] == False then pure () else error ""assertion failed""
  if candidate [1,2,5,7] == False then pure () else error ""assertion failed""
  if candidate [2,4,(-5),3,9,7] == True then pure () else error ""assertion failed""
  if candidate [1] == False then pure () else error ""assertion failed""
  if candidate [1,3,5,(-100)] == False then pure () else error ""assertion failed""
  if candidate [100,3,5,(-100)] == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_41,mal_Mlym,hs,"--ഈ ഫങ്ഷൻ ഇത്തരം കൂട്ടിയിടികളുടെ എണ്ണം ഔട്ട്പുട്ട് ചെയ്യുന്നു.--അവ തമ്മില് കൂട്ടിയിടിച്ച് നോക്കാത്ത പോലെ.--എന്നിരുന്നാലും, ഈ കാറുകൾ വളരെ കരുത്തുറ്റതും ശക്തവുമാണ്; അതിന്റെ ഫലമായി, അവ തുടർന്നും നീങ്ങുന്നു.--ഇടത്തു നിന്ന് വലത്തോട്ട് പോകുന്ന ഒരു കാറ് വലത്തു നിന്ന് ഇടത്തോട്ട് പോകുന്ന കാറിനെ തട്ടുമ്പോൾ.--എല്ലാ കാറുകളും ഒരേ വേഗതയിൽ നീങ്ങുന്നു. രണ്ടു കാറുകൾ കൂട്ടിയിടിക്കപ്പെടുന്നു.--രണ്ടു കൂട്ടം കാറുകൾ വളരെ അകലെയായി തുടങ്ങുന്നു.--n കാറുകൾ ഇടത്തുനിന്ന് വലത്തോട്ട് ഓടുന്നു; ഒരേ സമയം, n കാറുകളുടെ മറ്റൊരു കൂട്ടം --∙∙∙ഒരു റോഡ് സങ്കൽപ്പിക്കുക അത് തികച്ചും നേരായ ഒരു അനന്തമായ നീളമുള്ള വരയാണ്carRaceCollision :: Int -> Int
carRaceCollision n =","carRaceCollision :: Int -> Int
carRaceCollision n = n","
main :: IO ()
main = do
  let candidate = carRaceCollision
  if candidate 2 == 4 then pure () else error ""assertion failed""
  if candidate 3 == 9 then pure () else error ""assertion failed""
  if candidate 4 == 16 then pure () else error ""assertion failed""
  if candidate 8 == 64 then pure () else error ""assertion failed""
  if candidate 10 == 100 then pure () else error ""assertion failed""
  pure ()"
HumanEval_42,mal_Mlym,hs,"--∙∙∙ഒന്നിന്റെ വർദ്ധനവോടെ ഘടകങ്ങളുടെ പട്ടിക തിരികെ നൽകുന്നു.--  >>> incrList [1,2,3]
--  [2,3,4]
--  >>> incrList [5,3,5,2,3,3,9,0,123]
--  [6,4,6,3,4,4,10,1,124]
incrList :: [Int] -> [Int]
incrList l =","incrList :: [Int] -> [Int]
incrList l = map (+1) l","
main :: IO ()
main = do
  let candidate = incrList
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [3,2,1] == [4,3,2] then pure () else error ""assertion failed""
  if candidate [5,2,5,2,3,3,9,0,123] == [6,3,6,3,4,4,10,1,124] then pure () else error ""assertion failed""
  pure ()"
HumanEval_43,mal_Mlym,hs,"--സര് ത്ഥം പൂജ്യവും, അല്ലാത്തപക്ഷം തെറ്റും.--ഇത് True എന്ന് തിരികെ നൽകുന്നു, പട്ടികയിൽ രണ്ട് വ്യത്യസ്ത ഘടകങ്ങൾ ഉണ്ടെങ്കിൽ--pairs_sum_to_zero ഒരു സംഖ്യകളുടെ പട്ടികയെ ഒരു ഇൻപുട്ടായി എടുക്കുന്നു.--  >>> pairsSumToZero [1,3,5,0]
--  False
--  >>> pairsSumToZero [1,3,(-2),1]
--  False
--  >>> pairsSumToZero [1,2,3,7]
--  False
--  >>> pairsSumToZero [2,4,(-5),3,5,7]
--  True
--  >>> pairsSumToZero [1]
--  False
pairsSumToZero :: [Int] -> Bool
pairsSumToZero l =","pairsSumToZero :: [Int] -> Bool
pairsSumToZero l = any (\x -> -x `elem` l) l && (length l > 1)","
main :: IO ()
main = do
  let candidate = pairsSumToZero
  if candidate [1,3,5,0] == False then pure () else error ""assertion failed""
  if candidate [1,3,(-2),1] == False then pure () else error ""assertion failed""
  if candidate [1,2,3,7] == False then pure () else error ""assertion failed""
  if candidate [2,4,(-5),3,5,7] == True then pure () else error ""assertion failed""
  if candidate [1] == False then pure () else error ""assertion failed""
  if candidate [(-3),9,(-1),3,2,30] == True then pure () else error ""assertion failed""
  if candidate [(-3),9,(-1),3,2,31] == True then pure () else error ""assertion failed""
  if candidate [(-3),9,(-1),4,2,30] == False then pure () else error ""assertion failed""
  if candidate [(-3),9,(-1),4,2,31] == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_44,mal_Mlym,hs,"--അടിസ്ഥാന സംഖ്യകൾ 10 ൽ കുറവാണ്.--പരിവർത്തനത്തിനു ശേഷം സ്ട്രിംഗ് റെപ്രസന്റേഷൻ തിരിച്ചുനൽകുന്നു.--∙∙∙ആകെ നമ്പര് X ന്റെ സംഖ്യാ അടിസ്ഥാനം ബേസിസ് ആയി മാറ്റുക.--  >>> changeBase 8 3
--  ""22""
--  >>> changeBase 8 2
--  ""1000""
--  >>> changeBase 7 2
--  ""111""
changeBase :: Int -> Int -> String
changeBase x base =","changeBase :: Int -> Int -> String
changeBase x base
  | x < base  = show x
  | otherwise = changeBase (x `div` base) base ++ show (x `mod` base)","
main :: IO ()
main = do
  let candidate = changeBase
  if candidate 8 3 == ""22"" then pure () else error ""assertion failed""
  if candidate 9 3 == ""100"" then pure () else error ""assertion failed""
  if candidate 234 2 == ""11101010"" then pure () else error ""assertion failed""
  if candidate 16 2 == ""10000"" then pure () else error ""assertion failed""
  if candidate 8 2 == ""1000"" then pure () else error ""assertion failed""
  if candidate 7 2 == ""111"" then pure () else error ""assertion failed""
  if candidate 2 3 == ""2"" then pure () else error ""assertion failed""
  if candidate 3 4 == ""3"" then pure () else error ""assertion failed""
  if candidate 4 5 == ""4"" then pure () else error ""assertion failed""
  if candidate 5 6 == ""5"" then pure () else error ""assertion failed""
  if candidate 6 7 == ""6"" then pure () else error ""assertion failed""
  if candidate 7 8 == ""7"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_45,mal_Mlym,hs,"--∙∙∙ ത്രികോണത്തിന്റെ വശത്തിന്റെ നീളവും ഉയർന്ന മടക്ക പ്രദേശവും കണക്കിലെടുക്കുമ്പോൾ--  >>> triangleArea 5 3
--  7.5
triangleArea :: Int -> Int -> Float
triangleArea a h =","triangleArea :: Int -> Int -> Float
triangleArea a h = 0.5 * fromIntegral a * fromIntegral h","
main :: IO ()
main = do
  let candidate = triangleArea
  if candidate 5 3 == 7.5 then pure () else error ""assertion failed""
  if candidate 2 2 == 2.0 then pure () else error ""assertion failed""
  if candidate 10 8 == 40.0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_46,mal_Mlym,hs,"--fib4 സംഖ്യാ ശ്രേണിയുടെ n-ആം മൂലകം കാര്യക്ഷമമായി കണക്കുകൂട്ടാൻ ഒരു ഫംഗ്ഷൻ എഴുതുക. ആവർത്തനം ഉപയോഗിക്കരുത്.--ഫിബര് ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു ടു--fib4(3) -> 0 --fib4(2) -> 2 --fib4(1) -> 0 --fib4(0) -> 0 --ഫിബൊനാച്ചി അനുക്രമത്തിന് സമാനമായ അനുക്രമമാണ് ഫിബോനാച്ചി സംഖ്യാ അനുക്രമം. താഴെ പറയുന്ന രീതിയിൽ നിർവചിക്കപ്പെട്ടിരിക്കുന്നു:--  >>> fib4 5
--  4
--  >>> fib4 6
--  8
--  >>> fib4 7
--  14
fib4 :: Int -> Int
fib4 n =","fib4 :: Int -> Int
fib4 n
  | n == 0 = 0
  | n == 1 = 0
  | n == 2 = 2
  | n == 3 = 0
  | otherwise = iter 0 0 2 0 n
  where
    iter a b c d 4 = a + b + c + d
    iter a b c d n = iter b c d (a + b + c + d) (n - 1)","
main :: IO ()
main = do
  let candidate = fib4
  if candidate 5 == 4 then pure () else error ""assertion failed""
  if candidate 8 == 28 then pure () else error ""assertion failed""
  if candidate 10 == 104 then pure () else error ""assertion failed""
  if candidate 12 == 386 then pure () else error ""assertion failed""
  pure ()"
HumanEval_47,mal_Mlym,hs,"--∙∙∙ലിസ്റ്റിലെ മൂലകങ്ങളുടെ മീഡിയൻ മടക്കിനൽകുന്നു--  >>> median [3,1,2,4,5]
--  3.0
--  >>> median [(-10),4,6,1000,10,20]
--  15.0
median :: [Int] -> Float
median l =","median :: [Int] -> Float
median l 
  | odd n     = fromIntegral $ sorted !! mid
  | otherwise = (fromIntegral (sorted !! (mid - 1)) + fromIntegral (sorted !! mid)) / 2
  where
    sorted = sort l
    n = length l
    mid = n `div` 2
    sort = sortBy compare","
main :: IO ()
main = do
  let candidate = median
  if candidate [3,1,2,4,5] == 3.0 then pure () else error ""assertion failed""
  if candidate [(-10),4,6,1000,10,20] == 8.0 then pure () else error ""assertion failed""
  if candidate [5] == 5.0 then pure () else error ""assertion failed""
  if candidate [6,5] == 5.5 then pure () else error ""assertion failed""
  if candidate [8,1,3,9,9,2,7] == 7.0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_48,mal_Mlym,hs,"--സ്ട്രിംഗ് ഒരു പാലിൻഡ്രോം ആണോ എന്ന് പരിശോധിക്കുന്നു.--  >>> isPalindrome """"
--  True
--  >>> isPalindrome ""aba""
--  True
--  >>> isPalindrome ""aaaaa""
--  True
--  >>> isPalindrome ""zbcd""
--  False
isPalindrome :: String -> Bool
isPalindrome text =","isPalindrome :: String -> Bool
isPalindrome text = text == reverse text","
main :: IO ()
main = do
  let candidate = isPalindrome
  if candidate """" == True then pure () else error ""assertion failed""
  if candidate ""aba"" == True then pure () else error ""assertion failed""
  if candidate ""aaaaa"" == True then pure () else error ""assertion failed""
  if candidate ""zbcd"" == False then pure () else error ""assertion failed""
  if candidate ""xywyx"" == True then pure () else error ""assertion failed""
  if candidate ""xywyz"" == False then pure () else error ""assertion failed""
  if candidate ""xywzx"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_49,mal_Mlym,hs,"--∙∙∙ 2^n മോഡുലോ പി തിരിച്ചുനൽകുന്നു (നമ്പറുകളെ കുറിച്ച് ബോധവാനായിരിക്കുക).--  >>> modp 3 5
--  3
--  >>> modp 1101 101
--  2
--  >>> modp 0 101
--  1
--  >>> modp 3 11
--  8
--  >>> modp 100 101
--  1
modp :: Int -> Int -> Int
modp n p =","modp :: Int -> Int -> Int
modp n p = powMod 2 n p

powMod :: Int -> Int -> Int -> Int
powMod base exp modulus
  | modulus == 1 = 0
  | exp == 0     = 1
  | exp == 1     = base `mod` modulus
  | otherwise    = if odd exp
                   then (base * halfExp * halfExp) `mod` modulus
                   else (halfExp * halfExp) `mod` modulus
  where
    halfExp = powMod base (exp `div` 2) modulus","
main :: IO ()
main = do
  let candidate = modp
  if candidate 3 5 == 3 then pure () else error ""assertion failed""
  if candidate 1101 101 == 2 then pure () else error ""assertion failed""
  if candidate 0 101 == 1 then pure () else error ""assertion failed""
  if candidate 3 11 == 8 then pure () else error ""assertion failed""
  if candidate 100 101 == 1 then pure () else error ""assertion failed""
  if candidate 30 5 == 4 then pure () else error ""assertion failed""
  if candidate 31 5 == 3 then pure () else error ""assertion failed""
  pure ()"
HumanEval_51,mal_Mlym,hs,"--remove_vowels എന്നത് ഒരു സ്ട്രിംഗ് എടുക്കുകയും സ്വരാക്ഷരങ്ങളില്ലാത്ത സ്ട്രിംഗ് തിരികെ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷനാണ്.--  >>> removeVowels """"
--  """"
--  >>> removeVowels ""abcdef""
--  ""bcdf""
--  >>> removeVowels ""aaaaa""
--  """"
--  >>> removeVowels ""aaBAA""
--  ""B""
--  >>> removeVowels ""zbcd""
--  ""zbcd""
removeVowels :: String -> String
removeVowels text =","removeVowels :: String -> String
removeVowels text = filter (`notElem` ""aeiouAEIOU"") text","
main :: IO ()
main = do
  let candidate = removeVowels
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""abcdef
ghijklm"" == ""bcdf
ghjklm"" then pure () else error ""assertion failed""
  if candidate ""fedcba"" == ""fdcb"" then pure () else error ""assertion failed""
  if candidate ""eeeee"" == """" then pure () else error ""assertion failed""
  if candidate ""acBAA"" == ""cB"" then pure () else error ""assertion failed""
  if candidate ""EcBOO"" == ""cB"" then pure () else error ""assertion failed""
  if candidate ""ybcd"" == ""ybcd"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_52,mal_Mlym,hs,"--∙∙∙ ലിസ്റ്റിലെ എല്ലാ സംഖ്യകളും t- ന്റെ പരിധിക്കു താഴെയാണെങ്കിൽ ശരി എന്ന് റിട്ടേൺ ചെയ്യുക--  >>> belowThreshold [1,2,4,10] 100
--  True
--  >>> belowThreshold [1,20,4,10] 5
--  False
belowThreshold :: [Int] -> Int -> Bool
belowThreshold l t =",belowThreshold l t = all (< t) l,"
main :: IO ()
main = do
  let candidate = belowThreshold
  if candidate [1,2,4,10] 100 == True then pure () else error ""assertion failed""
  if candidate [1,20,4,10] 5 == False then pure () else error ""assertion failed""
  if candidate [1,20,4,10] 21 == True then pure () else error ""assertion failed""
  if candidate [1,20,4,10] 22 == True then pure () else error ""assertion failed""
  if candidate [1,8,4,10] 11 == True then pure () else error ""assertion failed""
  if candidate [1,8,4,10] 10 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_53,mal_Mlym,hs,"--x, y എന്നീ രണ്ടു സംഖ്യകളെ കൂട്ടുക.--  >>> add 2 3
--  5
--  >>> add 5 7
--  12
add :: Int -> Int -> Int
add x y =","add :: Int -> Int -> Int
add x y = x + y","
main :: IO ()
main = do
  let candidate = add
  if candidate 0 1 == 1 then pure () else error ""assertion failed""
  if candidate 1 0 == 1 then pure () else error ""assertion failed""
  if candidate 2 3 == 5 then pure () else error ""assertion failed""
  if candidate 5 7 == 12 then pure () else error ""assertion failed""
  if candidate 7 5 == 12 then pure () else error ""assertion failed""
  pure ()"
HumanEval_54,mal_Mlym,hs,"--∙∙∙രണ്ടു വാക്കുകളിലും ഒരേ അക്ഷരമുണ്ടോ എന്ന് പരിശോധിക്കുക.--  >>> sameChars ""eabcdzzzz"" ""dddzzzzzzzddeddabc""
--  True
--  >>> sameChars ""abcd"" ""dddddddabc""
--  True
--  >>> sameChars ""dddddddabc"" ""abcd""
--  True
--  >>> sameChars ""eabcd"" ""dddddddabc""
--  False
--  >>> sameChars ""abcd"" ""dddddddabce""
--  False
--  >>> sameChars ""eabcdzzzz"" ""dddzzzzzzzddddabc""
--  False
sameChars :: String -> String -> Bool
sameChars s0 s1 =","import Data.List (nub, sort)

sameChars :: String -> String -> Bool
sameChars s0 s1 = sort (nub s0) == sort (nub s1)","
main :: IO ()
main = do
  let candidate = sameChars
  if candidate ""eabcdzzzz"" ""dddzzzzzzzddeddabc"" == True then pure () else error ""assertion failed""
  if candidate ""abcd"" ""dddddddabc"" == True then pure () else error ""assertion failed""
  if candidate ""dddddddabc"" ""abcd"" == True then pure () else error ""assertion failed""
  if candidate ""eabcd"" ""dddddddabc"" == False then pure () else error ""assertion failed""
  if candidate ""abcd"" ""dddddddabcf"" == False then pure () else error ""assertion failed""
  if candidate ""eabcdzzzz"" ""dddzzzzzzzddddabc"" == False then pure () else error ""assertion failed""
  if candidate ""aabb"" ""aaccc"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_55,mal_Mlym,hs,"--∙∙∙ n-ആം ഫിബോനാച്ചി സംഖ്യ തിരികെ നൽകുക--  >>> fib 10
--  55
--  >>> fib 1
--  1
--  >>> fib 8
--  21
fib :: Int -> Int
fib n =","fib :: Int -> Int
fib n = fibHelper 0 1 n
  where
    fibHelper a _ 0 = a
    fibHelper a b n = fibHelper b (a + b) (n - 1)","
main :: IO ()
main = do
  let candidate = fib
  if candidate 10 == 55 then pure () else error ""assertion failed""
  if candidate 1 == 1 then pure () else error ""assertion failed""
  if candidate 8 == 21 then pure () else error ""assertion failed""
  if candidate 11 == 89 then pure () else error ""assertion failed""
  if candidate 12 == 144 then pure () else error ""assertion failed""
  pure ()"
HumanEval_56,mal_Mlym,hs,"--ഓരോ തുറക്കുന്ന ബ്രാക്കറ്റിനും ഒരു അടയ്ക്കുന്ന ബ്രാക്കറ്റും ഉണ്ടെങ്കിൽ true എന്ന് റിട്ടേൺ ചെയ്യുക.--ബ്രാക്കറ്റുകള് ""<"" ഉം "">"" ഉം അടങ്ങിയ ഒരു സ്ട്രിംഗ് ആണ്.--  >>> correctBracketing ""<""
--  False
--  >>> correctBracketing ""<>""
--  True
--  >>> correctBracketing ""<<><>>""
--  True
--  >>> correctBracketing ""><<>""
--  False
correctBracketing :: String -> Bool
correctBracketing brackets =","correctBracketing :: String -> Bool
correctBracketing brackets = checkBrackets brackets 0 == 0

checkBrackets :: String -> Int -> Int
checkBrackets [] n = n
checkBrackets (x:xs) n
  | n < 0 = -1
  | x == '<' = checkBrackets xs (n + 1)
  | x == '>' = checkBrackets xs (n - 1)
  | otherwise = checkBrackets xs n","
main :: IO ()
main = do
  let candidate = correctBracketing
  if candidate ""<>"" == True then pure () else error ""assertion failed""
  if candidate ""<<><>>"" == True then pure () else error ""assertion failed""
  if candidate ""<><><<><>><>"" == True then pure () else error ""assertion failed""
  if candidate ""<><><<<><><>><>><<><><<>>>"" == True then pure () else error ""assertion failed""
  if candidate ""<<<><>>>>"" == False then pure () else error ""assertion failed""
  if candidate ""><<>"" == False then pure () else error ""assertion failed""
  if candidate ""<"" == False then pure () else error ""assertion failed""
  if candidate ""<<<<"" == False then pure () else error ""assertion failed""
  if candidate "">"" == False then pure () else error ""assertion failed""
  if candidate ""<<>"" == False then pure () else error ""assertion failed""
  if candidate ""<><><<><>><>><<>"" == False then pure () else error ""assertion failed""
  if candidate ""<><><<><>><>>><>"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_57,mal_Mlym,hs,"--∙∙∙ശരിയായി തിരിച്ചുവിടുന്നു പട്ടികയിലെ ഘടകങ്ങൾ ഏകതാനമായി കൂടുകയോ കുറയുകയോ ചെയ്യുന്നു.--  >>> monotonic [1,2,4,20]
--  True
--  >>> monotonic [1,20,4,10]
--  False
--  >>> monotonic [4,1,0,(-10)]
--  True
monotonic :: [Int] -> Bool
monotonic l =","monotonic :: [Int] -> Bool
monotonic l = increasing l || decreasing l
  where
    increasing xs = all (uncurry (<=)) (zip xs (tail xs))
    decreasing xs = all (uncurry (>=)) (zip xs (tail xs))","
main :: IO ()
main = do
  let candidate = monotonic
  if candidate [1,2,4,10] == True then pure () else error ""assertion failed""
  if candidate [1,2,4,20] == True then pure () else error ""assertion failed""
  if candidate [1,20,4,10] == False then pure () else error ""assertion failed""
  if candidate [4,1,0,(-10)] == True then pure () else error ""assertion failed""
  if candidate [4,1,1,0] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,2,5,60] == False then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,60] == True then pure () else error ""assertion failed""
  if candidate [9,9,9,9] == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_58,mal_Mlym,hs,"--രണ്ട് ലിസ്റ്റുകളിലെ സാധാരണ ഘടകങ്ങൾ തിരിച്ച് തരിക.--  >>> common [1,4,3,34,653,2,5] [5,7,1,5,9,653,121]
--  [1,5,653]
--  >>> common [5,3,2,8] [3,2]
--  [2,3]
common :: [Int] -> [Int] -> [Int]
common l1 l2 =","common :: [Int] -> [Int] -> [Int]
common l1 l2 = uniqueSortedCommon
  where
    commonElements = filter (`elem` l2) l1
    uniqueCommon = removeDuplicates commonElements
    uniqueSortedCommon = sort uniqueCommon

    removeDuplicates :: [Int] -> [Int]
    removeDuplicates = foldr (\x seen -> if x `elem` seen then seen else x : seen) []

    sort :: [Int] -> [Int]
    sort [] = []
    sort (p:xs) = (sort lesser) ++ [p] ++ (sort greater)
      where
        lesser  = filter (< p) xs
        greater = filter (>= p) xs","
main :: IO ()
main = do
  let candidate = common
  if candidate [1,4,3,34,653,2,5] [5,7,1,5,9,653,121] == [1,5,653] then pure () else error ""assertion failed""
  if candidate [5,3,2,8] [3,2] == [2,3] then pure () else error ""assertion failed""
  if candidate [4,3,2,8] [3,2,4] == [2,3,4] then pure () else error ""assertion failed""
  if candidate [4,3,2,8] [] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_59,mal_Mlym,hs,"--∙∙∙ n ന്റെ ഏറ്റവും വലിയ പ്രൈം ഫാക്ടർ തിരികെ കൊടുക്കുക. n > 1 ആണെന്ന് കരുതുക, അത് പ്രൈം അല്ല.--  >>> largestPrimeFactor 13195
--  29
--  >>> largestPrimeFactor 2048
--  2
largestPrimeFactor :: Int -> Int
largestPrimeFactor n =","largestPrimeFactor :: Int -> Int
largestPrimeFactor n = helper n 2
  where
    helper n factor
      | factor * factor > n = n
      | n `mod` factor == 0 = helper (n `div` factor) factor
      | otherwise = helper n (factor + 1)","
main :: IO ()
main = do
  let candidate = largestPrimeFactor
  if candidate 15 == 5 then pure () else error ""assertion failed""
  if candidate 27 == 3 then pure () else error ""assertion failed""
  if candidate 63 == 7 then pure () else error ""assertion failed""
  if candidate 330 == 11 then pure () else error ""assertion failed""
  if candidate 13195 == 29 then pure () else error ""assertion failed""
  pure ()"
HumanEval_60,mal_Mlym,hs,"--sum_to_n എന്നത് 1 മുതൽ n വരെയുള്ള സംഖ്യകളുടെ സംഖ്യയെ ചേർക്കുന്ന ഒരു ഫങ്ഷനാണ്.--  >>> sumToN 30
--  465
--  >>> sumToN 100
--  5050
--  >>> sumToN 5
--  15
--  >>> sumToN 10
--  55
--  >>> sumToN 1
--  1
sumToN :: Int -> Int
sumToN n =","sumToN :: Int -> Int
sumToN n = sum [1..n]","
main :: IO ()
main = do
  let candidate = sumToN
  if candidate 1 == 1 then pure () else error ""assertion failed""
  if candidate 6 == 21 then pure () else error ""assertion failed""
  if candidate 11 == 66 then pure () else error ""assertion failed""
  if candidate 30 == 465 then pure () else error ""assertion failed""
  if candidate 100 == 5050 then pure () else error ""assertion failed""
  pure ()"
HumanEval_61,mal_Mlym,hs,"--ഓരോ തുറക്കുന്ന ബ്രാക്കറ്റിനും ഒരു അടയ്ക്കുന്ന ബ്രാക്കറ്റും ഉണ്ടെങ്കിൽ true എന്ന് റിട്ടേൺ ചെയ്യുക.-- ബ്രാക്കറ്റുകള് """" ഉം """" ഉം അടങ്ങിയ ഒരു സ്ട്രിംഗ് ആണ്.--  >>> correctBracketing ""(""
--  False
--  >>> correctBracketing ""()""
--  True
--  >>> correctBracketing ""(()())""
--  True
--  >>> correctBracketing "")(()""
--  False
correctBracketing :: String -> Bool
correctBracketing brackets =","correctBracketing :: String -> Bool
correctBracketing brackets = checkBalance brackets 0
  where
    checkBalance [] 0 = True
    checkBalance [] _ = False
    checkBalance (x:xs) n
      | x == '('  = checkBalance xs (n + 1)
      | x == ')' && n > 0 = checkBalance xs (n - 1)
      | otherwise = False","
main :: IO ()
main = do
  let candidate = correctBracketing
  if candidate ""()"" == True then pure () else error ""assertion failed""
  if candidate ""(()())"" == True then pure () else error ""assertion failed""
  if candidate ""()()(()())()"" == True then pure () else error ""assertion failed""
  if candidate ""()()((()()())())(()()(()))"" == True then pure () else error ""assertion failed""
  if candidate ""((()())))"" == False then pure () else error ""assertion failed""
  if candidate "")(()"" == False then pure () else error ""assertion failed""
  if candidate ""("" == False then pure () else error ""assertion failed""
  if candidate ""(((("" == False then pure () else error ""assertion failed""
  if candidate "")"" == False then pure () else error ""assertion failed""
  if candidate ""(()"" == False then pure () else error ""assertion failed""
  if candidate ""()()(()())())(()"" == False then pure () else error ""assertion failed""
  if candidate ""()()(()())()))()"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_62,mal_Mlym,hs,"--ഈ പോളിനോമിയുടെ ഡെറിവേറ്റീവ് അതേ രൂപത്തിൽ തിരികെ നൽകുക.--xs[0] + xs[1] * x + xs[2] * x^2 + ....  എന്നിങ്ങനെ ഒരു സംഖ്യയുടെ സംഖ്യകൾ കൂട്ടിച്ചേർക്കുക--x-കൾ ഒരു പോളിനോമിയുടെ ഗുണകങ്ങളെ പ്രതിനിധീകരിക്കുന്നു.--  >>> derivative [3,1,2,4,5]
--  [1,4,12,20]
--  >>> derivative [1,2,3]
--  [2,6]
derivative :: [Int] -> [Int]
derivative xs =","derivative :: [Int] -> [Int]
derivative xs = zipWith (*) (tail xs) [1..]","
main :: IO ()
main = do
  let candidate = derivative
  if candidate [3,1,2,4,5] == [1,4,12,20] then pure () else error ""assertion failed""
  if candidate [1,2,3] == [2,6] then pure () else error ""assertion failed""
  if candidate [3,2,1] == [2,2] then pure () else error ""assertion failed""
  if candidate [3,2,1,0,4] == [2,2,0,16] then pure () else error ""assertion failed""
  if candidate [1] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_63,mal_Mlym,hs,"--ഫിബ്ബി നമ്പർ സീക്വൻസിന്റെ n-ആം എലമെന്റ് കാര്യക്ഷമമായി കണക്കുകൂട്ടാൻ ഒരു ഫംഗ്ഷൻ എഴുതുക.--ഫിബ്ബി (n) == ഫിബ്ബി (n-1) + ഫിബ്ബി (n-2) + ഫിബ്ബി (n-3). --ഫിഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്--ഫിഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്--ഫിഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്ഫ്--ഫിബോനാച്ചി അനുക്രമത്തിന് സമാനമായ ഒരു അനുക്രമമാണ് ഫിബോനാച്ചി സംഖ്യാ അനുക്രമം. താഴെ പറയുന്ന രീതിയിൽ നിർവചിക്കപ്പെട്ടിരിക്കുന്നു:--  >>> fibfib 1
--  0
--  >>> fibfib 5
--  4
--  >>> fibfib 8
--  24
fibfib :: Int -> Int
fibfib n =","fibfib :: Int -> Int
fibfib n
  | n == 0 = 0
  | n == 1 = 0
  | n == 2 = 1
  | otherwise = fibs !! n
  where
    fibs = 0 : 0 : 1 : zipWith3 (\a b c -> a + b + c) fibs (tail fibs) (drop 2 fibs)","
main :: IO ()
main = do
  let candidate = fibfib
  if candidate 2 == 1 then pure () else error ""assertion failed""
  if candidate 1 == 0 then pure () else error ""assertion failed""
  if candidate 5 == 4 then pure () else error ""assertion failed""
  if candidate 8 == 24 then pure () else error ""assertion failed""
  if candidate 10 == 81 then pure () else error ""assertion failed""
  if candidate 12 == 274 then pure () else error ""assertion failed""
  if candidate 14 == 927 then pure () else error ""assertion failed""
  pure ()"
HumanEval_64,mal_Mlym,hs,"--ഉദാഹരണം: --വോക്കൽ, പക്ഷേ അത് വാക്കിന്റെ അവസാനം ഉള്ളപ്പോൾ മാത്രം.--ഈ കേസിലെ സ്വരാക്ഷരങ്ങൾ 'a', 'e', 'i', 'o', 'u' ആണ്. ഇവിടെ, 'y' ഒരു യും ആണ്.--ഒരു വാക്ക് ഇൻപുട്ടായി നല് കുകയും സ്ട്രിങ്ങിലെ സ്വരാക്ഷരങ്ങളുടെ എണ്ണം നല് കുകയും ചെയ്യുന്നു.--∙∙∙ഒരു ഫങ്ഷൻ എഴുതുക vowels_count അത് ഒരു സ്ട്രിംഗ് എടുക്കുന്നു ∙--  >>> vowelsCount ""abcde""
--  2
--  >>> vowelsCount ""ACEDY""
--  3
vowelsCount :: String -> Int
vowelsCount s =","vowelsCount :: String -> Int
vowelsCount s = length $ filter isVowel $ zip s [1..]
  where
    isVowel (c, pos) =
      let lowercaseC = toLower c
          isRegularVowel = lowercaseC `elem` ""aeiou""
          isLastCharY = lowercaseC == 'y' && pos == length s
      in isRegularVowel || isLastCharY","
main :: IO ()
main = do
  let candidate = vowelsCount
  if candidate ""abcde"" == 2 then pure () else error ""assertion failed""
  if candidate ""Alone"" == 3 then pure () else error ""assertion failed""
  if candidate ""key"" == 2 then pure () else error ""assertion failed""
  if candidate ""bye"" == 1 then pure () else error ""assertion failed""
  if candidate ""keY"" == 2 then pure () else error ""assertion failed""
  if candidate ""bYe"" == 1 then pure () else error ""assertion failed""
  if candidate ""ACEDY"" == 3 then pure () else error ""assertion failed""
  pure ()"
HumanEval_65,mal_Mlym,hs,"--shift > അക്കങ്ങളുടെ എണ്ണം എങ്കിൽ, അക്കങ്ങൾ വിപരീതമായി നൽകുക.--ഫലം ഒരു സ്ട്രിംഗായി റിട്ടേൺ ചെയ്യുക.--∙∙∙ആകെ സംഖ്യ x ന്റെ അക്കം ചക്രവാളത്തിൽ മാറ്റുക, അക്കം വലത്തോട്ട് മാറ്റുക ∙--  >>> circularShift 12 1
--  ""21""
--  >>> circularShift 12 2
--  ""12""
circularShift :: Int -> Int -> String
circularShift x shift =","circularShift :: Int -> Int -> String
circularShift x shift =
  let digits = show x
      len = length digits
      effectiveShift = shift `mod` len
  in if shift > len
     then reverse digits
     else let (begin, end) = splitAt (len - effectiveShift) digits
          in end ++ begin","
main :: IO ()
main = do
  let candidate = circularShift
  if candidate 100 2 == ""001"" then pure () else error ""assertion failed""
  if candidate 12 2 == ""12"" then pure () else error ""assertion failed""
  if candidate 97 8 == ""79"" then pure () else error ""assertion failed""
  if candidate 12 1 == ""21"" then pure () else error ""assertion failed""
  if candidate 11 101 == ""11"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_66,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ASCII കോഡുകൾ --ഒരു സ്ട്രിംഗ് ഇൻപുട്ടായി എടുക്കുകയും മുകളിലെ പ്രതീകങ്ങളുടെ തുക മാത്രം നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക' --ഒരു ജോലി.--  >>> digitsum """"
--  0
--  >>> digitsum ""abAB""
--  131
--  >>> digitsum ""abcCd""
--  67
--  >>> digitsum ""helloE""
--  69
--  >>> digitsum ""woArBld""
--  131
--  >>> digitsum ""aAaaaXa""
--  153
digitsum :: String -> Int
digitsum s =","digitsum :: String -> Int
digitsum s = sum $ map fromEnum $ filter isUpper s","
main :: IO ()
main = do
  let candidate = digitsum
  if candidate """" == 0 then pure () else error ""assertion failed""
  if candidate ""abAB"" == 131 then pure () else error ""assertion failed""
  if candidate ""abcCd"" == 67 then pure () else error ""assertion failed""
  if candidate ""helloE"" == 69 then pure () else error ""assertion failed""
  if candidate ""woArBld"" == 131 then pure () else error ""assertion failed""
  if candidate ""aAaaaXa"" == 153 then pure () else error ""assertion failed""
  if candidate "" How are yOu?"" == 151 then pure () else error ""assertion failed""
  if candidate ""You arE Very Smart"" == 327 then pure () else error ""assertion failed""
  pure ()"
HumanEval_67,mal_Mlym,hs,"--യും--കൊട്ടയില് , കൊട്ടയില് മാങ്ങയുടെ എണ്ണം തിരിച്ച് കൊടുക്കുക.--ആപ്പിളും ഓറഞ്ചും, പഴങ്ങളുടെ ആകെ എണ്ണം സൂചിപ്പിക്കുന്ന ഒരു സംഖ്യയും.--ആപ്പിളും ഓറഞ്ചും മാംഗോയും.--ഈ കൊട്ടയില് അടങ്ങിയിരിക്കുന്ന പഴങ്ങളുടെ ഒരു കൊട്ടയില് വിതരണം ചെയ്യപ്പെടുന്ന --ഈ ടാസ്കിൽ, നിങ്ങൾക്ക് ഒരു സ്ട്രിംഗ് ലഭിക്കും അത് ആപ്പിളുകളുടെയും ഓറഞ്ചുകളുടെയും എണ്ണം പ്രതിനിധീകരിക്കും.--  >>> fruitDistribution ""5 apples and 6 oranges"" 19
--  8
--  >>> fruitDistribution ""0 apples and 1 oranges"" 3
--  2
--  >>> fruitDistribution ""2 apples and 3 oranges"" 100
--  95
--  >>> fruitDistribution ""100 apples and 1 oranges"" 120
--  19
fruitDistribution :: String -> Int -> Int
fruitDistribution s n =","import Text.Read (readMaybe)

fruitDistribution :: String -> Int -> Int
fruitDistribution s n = n - totalApplesOranges
  where
    totalApplesOranges = sum $ map (readNumber . words) [""apples"", ""oranges""]
    readNumber keyword = case dropWhile (not . (=="" "") . dropWhile (/=' ')) $ words s of
      [] -> 0
      (num:_:rest) -> if num `elem` keyword then read num :: Int else 0","
main :: IO ()
main = do
  let candidate = fruitDistribution
  if candidate ""5 apples and 6 oranges"" 19 == 8 then pure () else error ""assertion failed""
  if candidate ""5 apples and 6 oranges"" 21 == 10 then pure () else error ""assertion failed""
  if candidate ""0 apples and 1 oranges"" 3 == 2 then pure () else error ""assertion failed""
  if candidate ""1 apples and 0 oranges"" 3 == 2 then pure () else error ""assertion failed""
  if candidate ""2 apples and 3 oranges"" 100 == 95 then pure () else error ""assertion failed""
  if candidate ""2 apples and 3 oranges"" 5 == 0 then pure () else error ""assertion failed""
  if candidate ""1 apples and 100 oranges"" 120 == 19 then pure () else error ""assertion failed""
  pure ()"
HumanEval_68,mal_Mlym,hs,"--ഉദാഹരണം 1:--ഇരട്ട മൂല്യങ്ങളില്ലെങ്കിലോ തന്നിരിക്കുന്ന പട്ടിക ശൂന്യമാണെങ്കിലോ, മടങ്ങുക [].--പിളര് ന്ന നോഡ് ഒരു ലിസ്റ്റില് തിരിച്ചെത്തണം, [ smalest_value, അതിന്റെ സൂചിക ], --ഒരേ ചെറിയ ഇരട്ട മൂല്യം ഉള്ള ഒന്നിലധികം നോഡുകൾ കണ്ടെത്തിയാൽ ഏറ്റവും ചെറിയ സൂചികയുള്ള നോഡ് തിരികെ നൽകുക.--ഈ നോഡിൽ ഏറ്റവും ചെറിയ ഇരട്ട മൂല്യം ഉണ്ടായിരിക്കണം.--നിങ്ങളുടെ ജോലി ഒരു നോഡിൽ നിന്ന് പിഴുതെടുത്ത് അത് തിരികെ കൊടുക്കുക എന്നതാണ്.--""ഒരു വൃക്ഷത്തിന്റെ ശാഖയെ പ്രതിനിധീകരിക്കുന്ന ഒരു പട്ടിക നൽകിയിട്ടുണ്ടെങ്കിൽ, അതിൽ നെഗറ്റീവ് അല്ലാത്ത സംഖ്യകളുടെ നോഡുകൾ ഉണ്ട്.--  >>> pluck [4,2,3]
--  [2,1]
--  Explanation: 2 has the smallest even value, and 2 has the smallest index.
--  Example 2:
--  >>> pluck [1,2,3]
--  [2,1]
--  Explanation: 2 has the smallest even value, and 2 has the smallest index.
--  Example 3:
--  >>> pluck []
--  []
--  Example 4:
--  >>> pluck [5,0,3,0,4,2]
--  [0,1]
--  Explanation: 0 is the smallest value, but  there are two zeros,
--  so we will choose the first zero, which has the smallest index.
--  Constraints:
--  * 1 <= nodes.length <= 10000
--  * 0 <= node.value
pluck :: [Int] -> [Int]
pluck arr =","pluck :: [Int] -> [Int]
pluck arr = case filter (\(x, _) -> even x) (zip arr [0..]) of
    [] -> []
    evens -> let (value, index) = minimum evens in [value, index]","
main :: IO ()
main = do
  let candidate = pluck
  if candidate [4,2,3] == [2,1] then pure () else error ""assertion failed""
  if candidate [1,2,3] == [2,1] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [5,0,3,0,4,2] == [0,1] then pure () else error ""assertion failed""
  if candidate [1,2,3,0,5,3] == [0,3] then pure () else error ""assertion failed""
  if candidate [5,4,8,4,8] == [4,1] then pure () else error ""assertion failed""
  if candidate [7,6,7,1] == [6,1] then pure () else error ""assertion failed""
  if candidate [7,9,7,1] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_69,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --അത്തരമൊരു മൂല്യം ഇല്ലെങ്കിൽ, -1 തിരികെ നൽകുക.--ഒരു സംഖ്യയുടെ ആവൃത്തി, അത് പട്ടികയിൽ എത്ര പ്രാവശ്യം പ്രത്യക്ഷപ്പെടുന്നു എന്നതിനെ സൂചിപ്പിക്കുന്നു.--പൂജ്യമാണ്, കൂടാതെ സംഖ്യയുടെ മൂല്യത്തേക്കാൾ വലുതോ തുല്യമോ ആയ ഒരു ആവൃത്തി ഉണ്ട്.--∙∙∙നിനക്ക് പോസിറ്റീവ് സംഖ്യകളുടെ ഒരു പട്ടിക കിട്ടും. ∙∙∙ഇത് ∙∙∙ഇതിനേക്കാൾ വലുതാണ് ഏറ്റവും വലിയ സംഖ്യ എന്ന് തിരിച്ചു തരൂ--  >>> search [4,1,2,2,3,1]
--  2
--  >>> search [1,2,2,3,3,3,4,4,4]
--  3
--  >>> search [5,5,4,4,4]
--  (-1)
search :: [Int] -> Int
search lst =","import Data.List (group, sort)
import Data.Ord (comparing)

search :: [Int] -> Int
search lst = 
    let frequencies = map (\g -> (head g, length g)) . group . sort $ lst
        candidates = filter (\(val, freq) -> freq >= val) frequencies
    in case candidates of
         [] -> -1
         _  -> fst . maximum $ candidates","
main :: IO ()
main = do
  let candidate = search
  if candidate [5,5,5,5,1] == 1 then pure () else error ""assertion failed""
  if candidate [4,1,4,1,4,4] == 4 then pure () else error ""assertion failed""
  if candidate [3,3] == (-1) then pure () else error ""assertion failed""
  if candidate [8,8,8,8,8,8,8,8] == 8 then pure () else error ""assertion failed""
  if candidate [2,3,3,2,2] == 2 then pure () else error ""assertion failed""
  if candidate [2,7,8,8,4,8,7,3,9,6,5,10,4,3,6,7,1,7,4,10,8,1] == 1 then pure () else error ""assertion failed""
  if candidate [3,2,8,2] == 2 then pure () else error ""assertion failed""
  if candidate [6,7,1,8,8,10,5,8,5,3,10] == 1 then pure () else error ""assertion failed""
  if candidate [8,8,3,6,5,6,4] == (-1) then pure () else error ""assertion failed""
  if candidate [6,9,6,7,1,4,7,1,8,8,9,8,10,10,8,4,10,4,10,1,2,9,5,7,9] == 1 then pure () else error ""assertion failed""
  if candidate [1,9,10,1,3] == 1 then pure () else error ""assertion failed""
  if candidate [6,9,7,5,8,7,5,3,7,5,10,10,3,6,10,2,8,6,5,4,9,5,3,10] == 5 then pure () else error ""assertion failed""
  if candidate [1] == 1 then pure () else error ""assertion failed""
  if candidate [8,8,10,6,4,3,5,8,2,4,2,8,4,6,10,4,2,1,10,2,1,1,5] == 4 then pure () else error ""assertion failed""
  if candidate [2,10,4,8,2,10,5,1,2,9,5,5,6,3,8,6,4,10] == 2 then pure () else error ""assertion failed""
  if candidate [1,6,10,1,6,9,10,8,6,8,7,3] == 1 then pure () else error ""assertion failed""
  if candidate [9,2,4,1,5,1,5,2,5,7,7,7,3,10,1,5,4,2,8,4,1,9,10,7,10,2,8,10,9,4] == 4 then pure () else error ""assertion failed""
  if candidate [2,6,4,2,8,7,5,6,4,10,4,6,3,7,8,8,3,1,4,2,2,10,7] == 4 then pure () else error ""assertion failed""
  if candidate [9,8,6,10,2,6,10,2,7,8,10,3,8,2,6,2,3,1] == 2 then pure () else error ""assertion failed""
  if candidate [5,5,3,9,5,6,3,2,8,5,6,10,10,6,8,4,10,7,7,10,8] == (-1) then pure () else error ""assertion failed""
  if candidate [10] == (-1) then pure () else error ""assertion failed""
  if candidate [9,7,7,2,4,7,2,10,9,7,5,7,2] == 2 then pure () else error ""assertion failed""
  if candidate [5,4,10,2,1,1,10,3,6,1,8] == 1 then pure () else error ""assertion failed""
  if candidate [7,9,9,9,3,4,1,5,9,1,2,1,1,10,7,5,6,7,6,7,7,6] == 1 then pure () else error ""assertion failed""
  if candidate [3,10,10,9,2] == (-1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_70,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --പിന്നെ ബാക്കിയുള്ള സംഖ്യകളുടെ പരമാവധി, പിന്നെ കുറഞ്ഞത്, അങ്ങനെ.--ഏറ്റവും കുറഞ്ഞ മൂല്യം ഉപയോഗിച്ച് തുടങ്ങുന്നതാണ് വിചിത്രമായ തരംതിരിവ്,--∙∙∙ആന്റിജറുകളുടെ ഒരു ലിസ്റ്റ് കൊടുത്താൽ, വിചിത്രമായ ക്രമത്തിൽ ലിസ്റ്റ് തിരിച്ചു തരും.--  >>> strangeSortList [1,2,3,4]
--  [1,4,2,3]
--  >>> strangeSortList [5,5,5,5]
--  [5,5,5,5]
--  >>> strangeSortList []
--  []
strangeSortList :: [Int] -> [Int]
strangeSortList lst =","strangeSortList :: [Int] -> [Int]
strangeSortList [] = []
strangeSortList lst = go (sort lst) True
  where
    go [] _ = []
    go xs toggle
      | toggle    = head xs : go (tail xs) False
      | otherwise = last xs : go (init xs) True","
main :: IO ()
main = do
  let candidate = strangeSortList
  if candidate [1,2,3,4] == [1,4,2,3] then pure () else error ""assertion failed""
  if candidate [5,6,7,8,9] == [5,9,6,8,7] then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5] == [1,5,2,4,3] then pure () else error ""assertion failed""
  if candidate [5,6,7,8,9,1] == [1,9,5,8,6,7] then pure () else error ""assertion failed""
  if candidate [5,5,5,5] == [5,5,5,5] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,6,7,8] == [1,8,2,7,3,6,4,5] then pure () else error ""assertion failed""
  if candidate [0,2,2,2,5,5,(-5),(-5)] == [(-5),5,(-5),5,0,2,2,2] then pure () else error ""assertion failed""
  if candidate [111111] == [111111] then pure () else error ""assertion failed""
  pure ()"
HumanEval_71,mal_Mlym,hs,"--ഉദാഹരണം: --മൂന്നാം വശത്തേക്കാൾ.--ഏതെങ്കിലും രണ്ട് വശങ്ങളുടെ സംഖ്യ കൂടുതലാണെങ്കിൽ മൂന്നു വശങ്ങളും ഒരു ത്രികോണത്തെ രൂപപ്പെടുത്തുന്നു.--ഇല്ലെങ്കിൽ -1  തിരിച്ചു നൽകും.--ത്രികോണം രണ്ട് ദശാംശസ്ഥാനങ്ങളിലേക്ക് ചുരുക്കിയിട്ടുണ്ടെങ്കിൽ അതിന്റെ മൂന്നു വശങ്ങളും ഒരു സാധുവായ ത്രികോണമായിരിക്കണം.--ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുത്താൽ ത്രികോണത്തിന്റെ ഏരിയയെടുക്കുക--  >>> triangleArea 3 4 5
--  6.0
--  >>> triangleArea 1 2 10
--  (-1).0
triangleArea :: Int -> Int -> Int -> Float
triangleArea a b c =","import Text.Printf (printf)

triangleArea :: Int -> Int -> Int -> Float
triangleArea a b c
    | isValidTriangle a b c = roundToTwoDecimals (sqrt (s * (s - fromIntegral a) * (s - fromIntegral b) * (s - fromIntegral c)))
    | otherwise = -1
  where
    s = (fromIntegral (a + b + c)) / 2
    isValidTriangle x y z = x + y > z && x + z > y && y + z > x
    roundToTwoDecimals x = read (printf ""%.2f"" x) :: Float","
main :: IO ()
main = do
  let candidate = triangleArea
  if candidate 3 4 5 == 6.0 then pure () else error ""assertion failed""
  if candidate 1 2 10 == (-1).0 then pure () else error ""assertion failed""
  if candidate 4 8 5 == 8.18 then pure () else error ""assertion failed""
  if candidate 2 2 2 == 1.73 then pure () else error ""assertion failed""
  if candidate 1 2 3 == (-1).0 then pure () else error ""assertion failed""
  if candidate 10 5 7 == 16.25 then pure () else error ""assertion failed""
  if candidate 2 6 3 == (-1).0 then pure () else error ""assertion failed""
  if candidate 1 1 1 == 0.43 then pure () else error ""assertion failed""
  if candidate 2 2 10 == (-1).0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_72,mal_Mlym,hs,"--ഉദാഹരണം: --വസ്തു q സന്തുലിതമാണെങ്കിൽ പറക്കും (ഇത് ഒരു പാലിൻഡ്രോമിക് പട്ടികയാണ്) അതിന്റെ ഘടകങ്ങളുടെ ആകെത്തുക പരമാവധി സാധ്യമായ ഭാരത്തേക്കാൾ കുറവോ തുല്യമോ ആണെങ്കിൽ w.--∙∙∙ഒരു ഫങ്ഷൻ എഴുതുക അത് ഫ്ലൈറ്റ് ചെയ്യുമ്പോൾ ശരി എന്ന് തിരിച്ച് തരും, അല്ലാത്തപക്ഷം തെറ്റായി തിരിച്ച് തരും--  >>> willItFly [1,2] 5
--  False
--  # 1+2 is less than the maximum possible weight, but it's unbalanced.
--  >>> willItFly [3,2,3] 1
--  False
--  # it's balanced, but 3+2+3 is more than the maximum possible weight.
--  >>> willItFly [3,2,3] 9
--  True
--  # 3+2+3 is less than the maximum possible weight, and it's balanced.
--  >>> willItFly [3] 5
--  True
--  # 3 is less than the maximum possible weight, and it's balanced.
willItFly :: [Int] -> Int -> Bool
willItFly q w =","willItFly :: [Int] -> Int -> Bool
willItFly q w = isPalindrome q && sum q <= w

isPalindrome :: Eq a => [a] -> Bool
isPalindrome xs = xs == reverse xs","
main :: IO ()
main = do
  let candidate = willItFly
  if candidate [3,2,3] 9 == True then pure () else error ""assertion failed""
  if candidate [1,2] 5 == False then pure () else error ""assertion failed""
  if candidate [3] 5 == True then pure () else error ""assertion failed""
  if candidate [3,2,3] 1 == False then pure () else error ""assertion failed""
  if candidate [1,2,3] 6 == False then pure () else error ""assertion failed""
  if candidate [5] 5 == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_73,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --ഒരു മാറ്റം കൊണ്ട്, നിങ്ങൾക്ക് ഒരു മൂലകം മറ്റേതെങ്കിലും മൂലകത്തിലേക്ക് മാറ്റാം.--പട്ടിക പാലിൻഡ്രോമിക് ആക്കുന്നതിന് മാറ്റം വരുത്തേണ്ടതുണ്ട്. ഒരു പാലിൻഡ്രോമിക് ലിസ്റ്റ് ഒരു പട്ടികയാണ് --∙∙ആര്ട് സംഖ്യകളുടെ ഒരു ലിസ്റ്റ് കൊടുത്താൽ, ∙∙∙ആര്ട് സംഖ്യകളുടെ ഏറ്റവും കുറഞ്ഞ എണ്ണം കണ്ടെത്തുക--  >>> smallestChange [1,2,3,5,4,7,9,6]
--  4
--  >>> smallestChange [1,2,3,4,3,2,2]
--  1
--  >>> smallestChange [1,2,3,2,1]
--  0
smallestChange :: [Int] -> Int
smallestChange arr =","smallestChange :: [Int] -> Int
smallestChange arr = sum $ zipWith (\x y -> if x /= y then 1 else 0) arr (reverse arr)","
main :: IO ()
main = do
  let candidate = smallestChange
  if candidate [1,2,3,5,4,7,9,6] == 4 then pure () else error ""assertion failed""
  if candidate [1,2,3,4,3,2,2] == 1 then pure () else error ""assertion failed""
  if candidate [1,4,2] == 1 then pure () else error ""assertion failed""
  if candidate [1,4,4,2] == 1 then pure () else error ""assertion failed""
  if candidate [1,2,3,2,1] == 0 then pure () else error ""assertion failed""
  if candidate [3,1,1,3] == 0 then pure () else error ""assertion failed""
  if candidate [1] == 0 then pure () else error ""assertion failed""
  if candidate [0,1] == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_74,mal_Mlym,hs,"--ഉദാഹരണങ്ങൾ --രണ്ട് ലിസ്റ്റുകളിലും ഒരേ സംഖ്യ ഉണ്ടെങ്കിൽ, ആദ്യത്തെ ലിസ്റ്റ് തിരികെ നൽകുക.--ലിസ്റ്റിന്റെ എല്ലാ സ്ട്രിങ്ങുകളിലും ഉള്ള ആകെ അക്ഷരങ്ങളുടെ എണ്ണം മറ്റ് ലിസ്റ്റുകളേക്കാൾ കുറവാണ്.--∙∙∙ഒരു ഫങ്ഷൻ എഴുതുക അത് സ്ട്രിങ്ങുകളുടെ രണ്ട് ലിസ്റ്റുകൾ സ്വീകരിക്കുകയും ∙∙∙--  >>> totalMatch [] []
--  []
--  >>> totalMatch [""hi"",""admin""] [""hI"",""Hi""]
--  [""hI"",""Hi""]
--  >>> totalMatch [""hi"",""admin""] [""hi"",""hi"",""admin"",""project""]
--  [""hi"",""admin""]
--  >>> totalMatch [""hi"",""admin""] [""hI"",""hi"",""hi""]
--  [""hI"",""hi"",""hi""]
--  >>> totalMatch [""4""] [""1"",""2"",""3"",""4"",""5""]
--  [""4""]
totalMatch :: [String] -> [String] -> [String]
totalMatch lst1 lst2 =","totalMatch :: [String] -> [String] -> [String]
totalMatch lst1 lst2
  | totalChars lst1 < totalChars lst2 = lst1
  | totalChars lst1 > totalChars lst2 = lst2
  | otherwise = lst1
  where
    totalChars = sum . map length","
main :: IO ()
main = do
  let candidate = totalMatch
  if candidate [] [] == [] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hi"",""hi""] == [""hi"",""hi""] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hi"",""hi"",""admin"",""project""] == [""hi"",""admin""] then pure () else error ""assertion failed""
  if candidate [""4""] [""1"",""2"",""3"",""4"",""5""] == [""4""] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hI"",""Hi""] == [""hI"",""Hi""] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hI"",""hi"",""hi""] == [""hI"",""hi"",""hi""] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hI"",""hi"",""hii""] == [""hi"",""admin""] then pure () else error ""assertion failed""
  if candidate [] [""this""] == [] then pure () else error ""assertion failed""
  if candidate [""this""] [] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_75,mal_Mlym,hs,"--ഉദാഹരണം: --(a) 100 ൽ കുറവാണെന്ന് അറിയുന്നത്.--അല്ലെങ്കിൽ തെറ്റാണ്.--∙∙∙ഒരു ഫങ്ഷൻ എഴുതുക, അത് 3 പ്രൈം നമ്പറുകളുടെ ഗുണനമാണെങ്കിൽ ശരി എന്ന് തരും--  >>> isMultiplyPrime 30
--  True
--  30 = 2 * 3 * 5
isMultiplyPrime :: Int -> Bool
isMultiplyPrime a =","isMultiplyPrime :: Int -> Bool
isMultiplyPrime a = any isTriplePrimeProduct primeTriples
  where
    primes = filter isPrime [2..99]
    primeTriples = [(x, y, z) | x <- primes, y <- primes, z <- primes, x <= y, y <= z]
    isTriplePrimeProduct (x, y, z) = x * y * z == a

isPrime :: Int -> Bool
isPrime n 
  | n < 2     = False
  | otherwise = not (any (\d -> n `mod` d == 0) [2..(floor . sqrt . fromIntegral) n])","
main :: IO ()
main = do
  let candidate = isMultiplyPrime
  if candidate 5 == False then pure () else error ""assertion failed""
  if candidate 30 == True then pure () else error ""assertion failed""
  if candidate 8 == True then pure () else error ""assertion failed""
  if candidate 10 == False then pure () else error ""assertion failed""
  if candidate 125 == True then pure () else error ""assertion failed""
  if candidate 105 == True then pure () else error ""assertion failed""
  if candidate 126 == False then pure () else error ""assertion failed""
  if candidate 729 == False then pure () else error ""assertion failed""
  if candidate 891 == False then pure () else error ""assertion failed""
  if candidate 1001 == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_76,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --x എന്നത് n ന്റെ ഒരു ലളിതമായ പവറാണ്, n**int=x  ആണെങ്കിൽ--n ന്റെ ശക്തിയും മറ്റു കേസുകളിൽ തെറ്റും.--നിങ്ങളുടെ ജോലി ഒരു സംഖ്യ x ഒരു ലളിതമായ  ആണെങ്കിൽ ശരിയായി മടങ്ങുന്ന ഒരു ഫങ്ഷൻ എഴുതുക എന്നതാണ്--  >>> isSimplePower 1 4
--  True
--  >>> isSimplePower 2 2
--  True
--  >>> isSimplePower 8 2
--  True
--  >>> isSimplePower 3 2
--  False
--  >>> isSimplePower 3 1
--  False
--  >>> isSimplePower 5 3
--  False
isSimplePower :: Int -> Int -> Bool
isSimplePower x n =","isSimplePower :: Int -> Int -> Bool
isSimplePower x n
  | x < 1 || n < 1 = False
  | n == 1 = x == 1
  | otherwise = x == n ^ round (logBase (fromIntegral n) (fromIntegral x))","
main :: IO ()
main = do
  let candidate = isSimplePower
  if candidate 16 2 == True then pure () else error ""assertion failed""
  if candidate 143214 16 == False then pure () else error ""assertion failed""
  if candidate 4 2 == True then pure () else error ""assertion failed""
  if candidate 9 3 == True then pure () else error ""assertion failed""
  if candidate 16 4 == True then pure () else error ""assertion failed""
  if candidate 24 2 == False then pure () else error ""assertion failed""
  if candidate 128 4 == False then pure () else error ""assertion failed""
  if candidate 12 6 == False then pure () else error ""assertion failed""
  if candidate 1 1 == True then pure () else error ""assertion failed""
  if candidate 1 12 == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_77,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --കുറിപ്പ്: ഈ ഇൻപുട്ട് എല്ലായ്പ്പോഴും സാധുവാണെന്ന് കരുതാം.--ഈ ഇംഗെർ ഏതെങ്കിലുമൊരു പൂർണ്ണസംഖ്യയുടെ ക്യൂബാണെങ്കിൽ.--ഒരു പൂർണ്ണസംഖ്യ a എടുക്കുകയും True തിരികെ നൽകുകയും ചെയ്യുന്ന ഒരു ഫങ്ഷൻ എഴുതുക.--  >>> iscube 1
--  True
--  >>> iscube 2
--  False
--  >>> iscube (-1)
--  True
--  >>> iscube 64
--  True
--  >>> iscube 0
--  True
--  >>> iscube 180
--  False
iscube :: Int -> Bool
iscube a =","iscube :: Int -> Bool
iscube a = let n = round (fromIntegral a ** (1/3)) in n^3 == a","
main :: IO ()
main = do
  let candidate = iscube
  if candidate 1 == True then pure () else error ""assertion failed""
  if candidate 2 == False then pure () else error ""assertion failed""
  if candidate (-1) == True then pure () else error ""assertion failed""
  if candidate 64 == True then pure () else error ""assertion failed""
  if candidate 180 == False then pure () else error ""assertion failed""
  if candidate 1000 == True then pure () else error ""assertion failed""
  if candidate 0 == True then pure () else error ""assertion failed""
  if candidate 1729 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_78,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --A, B, C, D, E, F എന്നീ ചിഹ്നങ്ങള് എല്ലായ്പ്പോഴും വലിയ അക്ഷരങ്ങളായിരിക്കും.--കുറിപ്പ്: നിങ്ങള് ക്ക് എല്ലായ്പ്പോഴും ശരിയായതോ ശൂന്യമോ ആണെന്ന് കരുതാം.--ബി (= ദശാംശ 11), ഡി (= ദശാംശ 13).--ഇനി പറയുന്ന അക്കങ്ങളുടെ എണ്ണം കണ്ടെത്തണം: 2, 3, 5, 7, --പ്രൈം നമ്പറുകൾ 2, 3, 5, 7, 11, 13, 17,...  എന്നിവയാണ്.--ഹെക്സാഡെസിമൽ അക്കങ്ങൾ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, എ, ബി, സി, ഡി, ഇ, എഫ് എന്നിവയാണ്.--1 ന് മുകളിലുള്ളത്, അത് രണ്ട് ചെറിയ സംഖ്യകളുടെ ഗുണനമല്ല).--പ്രൈം നമ്പറുകളായ അക്കങ്ങൾ (പ്രൈം നമ്പർ, അല്ലെങ്കിൽ ഒരു പ്രൈം, ഒരു സ്വാഭാവിക സംഖ്യയാണ് --ഒരു ഹെക്സാഡെസിമൽ നമ്പർ ഒരു സ്ട്രിംഗായി എണ്ണുന്നു ഹെക്സാഡെസിമൽ നമ്പറുകളുടെ എണ്ണം --∙∙നിനക്ക് കിട്ടിയ ചുമതലയാണ് ഒരു ഫങ്ഷൻ എഴുതുക എന്നത്--  >>> hexKey ""AB""
--  1
--  >>> hexKey ""1077E""
--  2
--  >>> hexKey ""ABED1A33""
--  4
--  >>> hexKey ""123456789ABCDEF0""
--  6
--  >>> hexKey ""2020""
--  2
hexKey :: String -> Int
hexKey num =","hexKey :: String -> Int
hexKey num = length . filter (`elem` primeHexDigits) $ num
  where
    primeHexDigits = ""2357BD""","
main :: IO ()
main = do
  let candidate = hexKey
  if candidate ""AB"" == 1 then pure () else error ""assertion failed""
  if candidate ""1077E"" == 2 then pure () else error ""assertion failed""
  if candidate ""ABED1A33"" == 4 then pure () else error ""assertion failed""
  if candidate ""2020"" == 2 then pure () else error ""assertion failed""
  if candidate ""123456789ABCDEF0"" == 6 then pure () else error ""assertion failed""
  if candidate ""112233445566778899AABBCCDDEEFF00"" == 12 then pure () else error ""assertion failed""
  pure ()"
HumanEval_79,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ഫോർമാറ്റിനെ സഹായിക്കുന്നതിനാണ് അധിക അക്ഷരങ്ങൾ.--സ്ട്രിങ്ങിന്റെ തുടക്കത്തിലും അവസാനത്തിലും ഒരു കൂട്ടം 'db' പ്രതീകങ്ങൾ ഉണ്ടാകും.--സ്ട്രിംഗിലെ ഓരോ പ്രതീകവും '0' അല്ലെങ്കിൽ '1' ആയിരിക്കും.--ഫങ്ഷൻ ഒരു സ്ട്രിംഗ് നൽകണം, ഓരോ പ്രതീകവും ഒരു ബൈനറി --നിങ്ങള് ക്ക് ഒരു സംഖ്യ ദശാംശ രൂപത്തില് ലഭിക്കും. നിങ്ങള് ക്കത്  ആയി മാറ്റണം.--  >>> decimalToBinary 15
--  ""db1111db""
--  >>> decimalToBinary 32
--  ""db100000db""
decimalToBinary :: Int -> String
decimalToBinary decimal =","decimalToBinary :: Int -> String
decimalToBinary decimal = ""db"" ++ toBinary decimal ++ ""db""
  where
    toBinary 0 = ""0""
    toBinary n = reverse (binaryHelper n)

    binaryHelper 0 = """"
    binaryHelper n = let (q, r) = n `divMod` 2 in show r ++ binaryHelper q","
main :: IO ()
main = do
  let candidate = decimalToBinary
  if candidate 0 == ""db0db"" then pure () else error ""assertion failed""
  if candidate 32 == ""db100000db"" then pure () else error ""assertion failed""
  if candidate 103 == ""db1100111db"" then pure () else error ""assertion failed""
  if candidate 15 == ""db1111db"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_80,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --ഒരു സ്ട്രിംഗ് ഹാഫ് ആണെങ്കിൽ അതിന്റെ നീളം കുറഞ്ഞത് 3 ആണെങ്കിൽ തുടർച്ചയായ 3 അക്ഷരങ്ങളും വ്യത്യസ്തമായിരിക്കും --നിങ്ങളുടെ ജോലി സ്ട്രിംഗ് ഹാഫ് ആണോ അല്ലയോ എന്ന് പരിശോധിക്കുക എന്നതാണ്.--നിങ്ങള് ക്ക് ഒരു സ്ട്രിംഗ് ലഭിക്കുന്നു.--  >>> isHappy ""a""
--  False
--  >>> isHappy ""aa""
--  False
--  >>> isHappy ""abcd""
--  True
--  >>> isHappy ""aabb""
--  False
--  >>> isHappy ""adb""
--  True
--  >>> isHappy ""xyy""
--  False
isHappy :: String -> Bool
isHappy s =","isHappy :: String -> Bool
isHappy s
  | length s < 3 = False
  | otherwise = all distinctTriples (windows 3 s)
  where
    distinctTriples [x, y, z] = x /= y && y /= z && x /= z
    distinctTriples _ = False
    windows n xs
      | length xs < n = []
      | otherwise = take n xs : windows n (tail xs)","
main :: IO ()
main = do
  let candidate = isHappy
  if candidate ""a"" == False then pure () else error ""assertion failed""
  if candidate ""aa"" == False then pure () else error ""assertion failed""
  if candidate ""abcd"" == True then pure () else error ""assertion failed""
  if candidate ""aabb"" == False then pure () else error ""assertion failed""
  if candidate ""adb"" == True then pure () else error ""assertion failed""
  if candidate ""xyy"" == False then pure () else error ""assertion failed""
  if candidate ""iopaxpoi"" == True then pure () else error ""assertion failed""
  if candidate ""iopaxioi"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_81,mal_Mlym,hs,"--ഉദാഹരണം: --0.0 E യും--> 0.0 ഡി - --> 0.7 ഡി --> 1.0 ഡി + --> 1.3 C- യും--> 1.7 C യും--> 2.0 സി + --> 2.3 ബി - --> 2.7 ബി --> 3.0 ബി + --> 3.3 എ- --> 3.7 എ --4.0 എ+ --ജി.പി.എ. . . അക്ഷര ഗ്രേഡ്--താഴെ പറയുന്ന പട്ടിക ഉപയോഗിച്ച് അക്ഷരങ്ങളുടെ ഗ്രേഡുകളുടെ ഒരു ലിസ്റ്റ് ഔട്ട്പുട്ട് ചെയ്യാൻ കഴിയുന്ന ഒരു ഫംഗ്ഷൻ: --ചില വിദ്യാര് ഥികളുടെ ജി.പി.എ. പട്ടിക അവൾ തന്നു. നീ എഴുതണം.--പക്ഷെ, അവൾക്ക് അവളുടെ കോഡ് നഷ്ടപ്പെട്ടു.--അധ്യാപിക സ്വന്തം അൽഗോരിതം വികസിപ്പിച്ചെടുത്തിട്ടുണ്ട്.--സെമസ്റ്ററിന്റെ അവസാന ആഴ്ചയാണ്, അധ്യാപകന് ഗ്രേഡുകള് നല് കണം.--  >>> gradeEquation [4.0,3,1.7,2,3.5]
--  [""A+"",""B"",""C-"",""C"",""A-""]
numericalLetterGrade :: [Float] -> [String]
numericalLetterGrade grades =","numericalLetterGrade :: [Float] -> [String]
numericalLetterGrade grades = map gpaToLetterGrade grades
  where
    gpaToLetterGrade gpa
      | gpa == 4.0 = ""A+""
      | gpa > 3.7  = ""A""
      | gpa > 3.3  = ""A-""
      | gpa > 3.0  = ""B+""
      | gpa > 2.7  = ""B""
      | gpa > 2.3  = ""B-""
      | gpa > 2.0  = ""C+""
      | gpa > 1.7  = ""C""
      | gpa > 1.3  = ""C-""
      | gpa > 1.0  = ""D+""
      | gpa > 0.7  = ""D""
      | gpa > 0.0  = ""D-""
      | otherwise  = ""E""","
main :: IO ()
main = do
  let candidate = numericalLetterGrade
  if candidate [4.0,3,1.7,2,3.5] == [""A+"",""B"",""C-"",""C"",""A-""] then pure () else error ""assertion failed""
  if candidate [1.2] == [""D+""] then pure () else error ""assertion failed""
  if candidate [0.5] == [""D-""] then pure () else error ""assertion failed""
  if candidate [0.0] == [""E""] then pure () else error ""assertion failed""
  if candidate [1.0,0.3,1.5,2.8,3.3] == [""D"",""D-"",""C-"",""B"",""B+""] then pure () else error ""assertion failed""
  if candidate [0.0,0.7] == [""E"",""D-""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_82,mal_Mlym,hs,"--ഉദാഹരണങ്ങൾ --length ഒരു പ്രൈം നമ്പറാണോ അല്ലെങ്കില് False അല്ലെങ്കില് --ഒരു സ്ട്രിംഗ് എടുത്ത് സ്ട്രിംഗ് ന്റെ ഘടകം ശരിയാണെങ്കിൽ True എന്ന് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക.--  >>> primeLength ""Hello""
--  True
--  >>> primeLength ""abcdcba""
--  True
--  >>> primeLength ""kittens""
--  True
--  >>> primeLength ""orange""
--  False
primeLength :: String -> Bool
primeLength string =","primeLength :: String -> Bool
primeLength string = isPrime (length string)

isPrime :: Int -> Bool
isPrime n
  | n < 2     = False
  | n == 2    = True
  | even n    = False
  | otherwise = null [ x | x <- [3, 5 .. floor (sqrt (fromIntegral n))], n `mod` x == 0 ]","
main :: IO ()
main = do
  let candidate = primeLength
  if candidate ""Hello"" == True then pure () else error ""assertion failed""
  if candidate ""abcdcba"" == True then pure () else error ""assertion failed""
  if candidate ""kittens"" == True then pure () else error ""assertion failed""
  if candidate ""orange"" == False then pure () else error ""assertion failed""
  if candidate ""wow"" == True then pure () else error ""assertion failed""
  if candidate ""world"" == True then pure () else error ""assertion failed""
  if candidate ""MadaM"" == True then pure () else error ""assertion failed""
  if candidate ""Wow"" == True then pure () else error ""assertion failed""
  if candidate """" == False then pure () else error ""assertion failed""
  if candidate ""HI"" == True then pure () else error ""assertion failed""
  if candidate ""go"" == True then pure () else error ""assertion failed""
  if candidate ""gogo"" == False then pure () else error ""assertion failed""
  if candidate ""aaaaaaaaaaaaaaa"" == False then pure () else error ""assertion failed""
  if candidate ""Madam"" == True then pure () else error ""assertion failed""
  if candidate ""M"" == False then pure () else error ""assertion failed""
  if candidate ""0"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_83,mal_Mlym,hs,"--പോസിറ്റീവ് സംഖ്യകളാണ് 1 കൊണ്ട് തുടങ്ങുന്നതും അവസാനിക്കുന്നതും.--ഒരു പോസിറ്റീവ് സംഖ്യ n ഉണ്ടെങ്കിൽ, n- അക്ക സംഖ്യകളുടെ എണ്ണം തിരികെ നൽകുക.startsOneEnds :: Int -> Int
startsOneEnds n =","startsOneEnds :: Int -> Int
startsOneEnds n
  | n <= 0    = 0
  | n == 1    = 1
  | otherwise = 18 * 10^(n-2)","
main :: IO ()
main = do
  let candidate = startsOneEnds
  if candidate 1 == 1 then pure () else error ""assertion failed""
  if candidate 2 == 18 then pure () else error ""assertion failed""
  if candidate 3 == 180 then pure () else error ""assertion failed""
  if candidate 4 == 1800 then pure () else error ""assertion failed""
  if candidate 5 == 18000 then pure () else error ""assertion failed""
  pure ()"
HumanEval_84,mal_Mlym,hs,"--ഉദാഹരണം --ഒരു പോസിറ്റീവ് സംഖ്യ N ഉണ്ടെങ്കിൽ അതിന്റെ അക്കങ്ങളുടെ ആകെ സംഖ്യ ബൈനറി രൂപത്തിൽ നൽകുക.--  >>> solve 1000
--  ""1""
--  >>> solve 150
--  ""110""
--  >>> solve 147
--  ""1100""
--  Variables:
--  @N integer
--  Constraints: 0 ≤ N ≤ 10000.
--  Output:
--  a string of binary number
solve :: Int -> String
solve N =","solve :: Int -> String
solve N = toBinary (sumOfDigits N)
  where
    sumOfDigits 0 = 0
    sumOfDigits n = (n `mod` 10) + sumOfDigits (n `div` 10)

    toBinary 0 = ""0""
    toBinary n = reverse (toBinary' n)
      where
        toBinary' 0 = """"
        toBinary' x = let (q, r) = x `divMod` 2 in intToDigit r : toBinary' q","
main :: IO ()
main = do
  let candidate = solve
  if candidate 1000 == ""1"" then pure () else error ""assertion failed""
  if candidate 150 == ""110"" then pure () else error ""assertion failed""
  if candidate 147 == ""1100"" then pure () else error ""assertion failed""
  if candidate 333 == ""1001"" then pure () else error ""assertion failed""
  if candidate 963 == ""10010"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_85,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --∙∙∙ഒരു പൂര് ണ്ണ സംഖ്യകളുടെ പട്ടിക നല് കിയിരിക്കെ ആദ്യം, അസംഖ്യം സൂചികകളിലുള്ള ഇരട്ട മൂലകങ്ങളെ കൂട്ടിച്ചേര് ക്കുക.--  >>> add [4,2,6,7]
--  2
add :: [Int] -> Int
add lst =","add :: [Int] -> Int
add lst = sum [x | (i, x) <- zip [0..] lst, odd i, even x]","
main :: IO ()
main = do
  let candidate = add
  if candidate [4,88] == 88 then pure () else error ""assertion failed""
  if candidate [4,5,6,7,2,122] == 122 then pure () else error ""assertion failed""
  if candidate [4,0,6,7] == 0 then pure () else error ""assertion failed""
  if candidate [4,4,6,8] == 12 then pure () else error ""assertion failed""
  pure ()"
HumanEval_86,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --കുറിപ്പ്: വാക്യത്തിലെ വാക്കുകളുടെയും ശൂന്യസ്ഥലങ്ങളുടെയും ക്രമം പാലിക്കണം.--ASCII മൂല്യം അടിസ്ഥാനമാക്കിയുള്ള വർധന ക്രമം.--യില് ക്രമീകരിച്ചിരിക്കുന്ന എല്ലാ പ്രതീകങ്ങളും അടങ്ങുന്ന പുതിയ വാക്കാണ് പകരം വയ്ക്കുന്നത്.--സ്ട്രിങ്ങിന്റെ ക്രമപ്പെടുത്തിയ പതിപ്പ്, എല്ലാ വാക്കുകളും (സ്പേസ് ഉപയോഗിച്ച് വേർതിരിച്ച്) --ഒരു സ്ട്രിംഗ് എടുത്ത് അതിന്റെ ക്രമീകരിച്ച പതിപ്പ് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക.--  >>> antiShuffle ""Hi""
--  ""Hi""
--  >>> antiShuffle ""hello""
--  ""ehllo""
--  >>> antiShuffle ""Hello World!!!""
--  ""Hello !!!Wdlor""
antiShuffle :: String -> String
antiShuffle s =","import Data.List (sort)
import Data.Char (isAlpha)

antiShuffle :: String -> String
antiShuffle s = unwords $ map sortWord (wordsAndSpaces s)
  where
    sortWord word = if all isAlpha word then sort word else word
    wordsAndSpaces [] = []
    wordsAndSpaces xs = if head xs == ' ' 
                        then "" "" : wordsAndSpaces (dropWhile (== ' ') xs)
                        else let (word, rest) = break (== ' ') xs
                             in word : wordsAndSpaces rest","
main :: IO ()
main = do
  let candidate = antiShuffle
  if candidate ""Hi"" == ""Hi"" then pure () else error ""assertion failed""
  if candidate ""hello"" == ""ehllo"" then pure () else error ""assertion failed""
  if candidate ""number"" == ""bemnru"" then pure () else error ""assertion failed""
  if candidate ""abcd"" == ""abcd"" then pure () else error ""assertion failed""
  if candidate ""Hello World!!!"" == ""Hello !!!Wdlor"" then pure () else error ""assertion failed""
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""Hi. My name is Mister Robot. How are you?"" == "".Hi My aemn is Meirst .Rboot How aer ?ouy"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_87,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --കൂടാതെ, നിരയുടെ കോർഡിനേറ്റുകളെ നിരകളുടെ ക്രമത്തിൽ ക്രമീകരിക്കുക.--കോർഡിനേറ്റുകളെ ആദ്യം കയറിവരുന്ന ക്രമത്തിൽ വരികളായി അടുക്കുക.--ഓരോ ട്യൂപ്പലും ഒരു കോർഡിനേറ്റ് ആണ് - (വരി, നിരകൾ), 0 മുതൽ തുടങ്ങുന്നു.--                                         --lst, x എന്ന സംഖ്യകൾ തന്നാൽ, പട്ടികയിലെ x എന്ന സംഖ്യ കണ്ടെത്തുക, --ഓരോ വരിയിലും വ്യത്യസ്ത എണ്ണം നിരകളുണ്ടാകാം.--മാട്രിക്സിനു സമാനമായ, മാട്രിക്സുകൾക്ക് വിപരീതമായി,--നിങ്ങള് ക്ക് ഒരു 2 ഡി ഡേറ്റാ നല് കിയിട്ടുണ്ട്, ഒരു കൂട്ടിയിടിച്ച ലിസ്റ്റായി,--  >>> getRow [[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1
--  [(0, 0),(1, 4),(1, 0),(2, 5),(2, 0)]
--  >>> getRow [] 1
--  []
--  >>> getRow [[],[1],[1,2,3]] 3
--  [(2, 2)]
getRow :: [[Int]] -> Int -> [(Int, Int)]
getRow lst x =","getRow :: [[Int]] -> Int -> [(Int, Int)]
getRow lst x = concatMap processRow (zip [0..] lst)
  where
    processRow (rowIndex, row) = 
      let colIndices = reverse $ findIndices (== x) row
      in [(rowIndex, colIndex) | colIndex <- colIndices]

findIndices :: (a -> Bool) -> [a] -> [Int]
findIndices p lst = [i | (i, val) <- zip [0..] lst, p val]","
main :: IO ()
main = do
  let candidate = getRow
  if candidate [[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1 == [(0, 0),(1, 4),(1, 0),(2, 5),(2, 0)] then pure () else error ""assertion failed""
  if candidate [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]] 2 == [(0, 1),(1, 1),(2, 1),(3, 1),(4, 1),(5, 1)] then pure () else error ""assertion failed""
  if candidate [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,1,3,4,5,6],[1,2,1,4,5,6],[1,2,3,1,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1 == [(0, 0),(1, 0),(2, 1),(2, 0),(3, 2),(3, 0),(4, 3),(4, 0),(5, 4),(5, 0),(6, 5),(6, 0)] then pure () else error ""assertion failed""
  if candidate [] 1 == [] then pure () else error ""assertion failed""
  if candidate [[1]] 2 == [] then pure () else error ""assertion failed""
  if candidate [[],[1],[1,2,3]] 3 == [(2, 2)] then pure () else error ""assertion failed""
  pure ()"
HumanEval_88,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --* തന്നിരിക്കുന്ന ലിസ്റ്റ് മാറ്റരുത്.--കുറിപ്പ്:--അല്ലെങ്കിൽ, സംഖ്യ ((ആദ്യ സൂചിക മൂല്യം, അവസാന സൂചിക മൂല്യം) ഇരട്ടയാണെങ്കിൽ, അത് താഴേയ്ക്ക് ക്രമീകരിക്കുക.--നിങ്ങള് ലിസ്റ്റ് ക്രമീകരിക്കും. ആദ്യം സൂചിക മൂല്യം, അവസാന സൂചിക മൂല്യം)--∙∙∙നല്ല സംഖ്യകളുടെ ഒരു ലിസ്റ്റ് തന്നിട്ട്, ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙ ∙∙∙--  >>> sortArray []
--  []
--  >>> sortArray [5]
--  [5]
--  >>> sortArray [2,4,3,0,1,5]
--  [0,1,2,3,4,5]
--  >>> sortArray [2,4,3,0,1,5,6]
--  [6,5,4,3,2,1,0]
sortArray :: [Int] -> [Int]
sortArray array =","sortArray :: [Int] -> [Int]
sortArray array
  | null array = array
  | otherwise =
    let first = head array
        last = last array
        sumFirstLast = first + last
    in if odd sumFirstLast
       then sort array
       else reverse (sort array)","
main :: IO ()
main = do
  let candidate = sortArray
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [5] == [5] then pure () else error ""assertion failed""
  if candidate [2,4,3,0,1,5] == [0,1,2,3,4,5] then pure () else error ""assertion failed""
  if candidate [2,4,3,0,1,5,6] == [6,5,4,3,2,1,0] then pure () else error ""assertion failed""
  if candidate [2,1] == [1,2] then pure () else error ""assertion failed""
  if candidate [15,42,87,32,11,0] == [0,11,15,32,42,87] then pure () else error ""assertion failed""
  if candidate [21,14,23,11] == [23,21,14,11] then pure () else error ""assertion failed""
  pure ()"
HumanEval_89,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --രണ്ട് സ്ഥലത്ത് നിന്ന് താഴേക്ക് മാറുക.--അക്ഷരമാലയില് അക്ഷരങ്ങള് --അക്ഷരമാല തിരിക്കുമ്പോള് ഒരു എൻക്രിപ്റ്റ് ചെയ്ത സ്ട്രിംഗ് തിരിച്ചുനല്കുന്നു.--ഒരു സ്ട്രിംഗ് ഒരു ആർഗ്യുമെന്റായി എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ എൻക്രിപ്റ്റ് സൃഷ്ടിക്കുക.--  >>> encrypt ""hi""
--  ""lm""
--  >>> encrypt ""asdfghjkl""
--  ""ewhjklnop""
--  >>> encrypt ""gf""
--  ""kj""
--  >>> encrypt ""et""
--  ""ix""
encrypt :: String -> String
encrypt s =","encrypt :: String -> String
encrypt s = map shiftChar s
  where
    shiftChar c
      | 'a' <= c && c <= 'z' = chr ((ord c - ord 'a' + 4) `mod` 26 + ord 'a')
      | 'A' <= c && c <= 'Z' = chr ((ord c - ord 'A' + 4) `mod` 26 + ord 'A')
      | otherwise = c","
main :: IO ()
main = do
  let candidate = encrypt
  if candidate ""hi"" == ""lm"" then pure () else error ""assertion failed""
  if candidate ""asdfghjkl"" == ""ewhjklnop"" then pure () else error ""assertion failed""
  if candidate ""gf"" == ""kj"" then pure () else error ""assertion failed""
  if candidate ""et"" == ""ix"" then pure () else error ""assertion failed""
  if candidate ""faewfawefaewg"" == ""jeiajeaijeiak"" then pure () else error ""assertion failed""
  if candidate ""hellomyfriend"" == ""lippsqcjvmirh"" then pure () else error ""assertion failed""
  if candidate ""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"" == ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"" then pure () else error ""assertion failed""
  if candidate ""a"" == ""e"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_90,mal_Mlym,hs,"--അത്തരം ഒരു ഘടകം ഇല്ലെങ്കിൽ ഒന്നും മടക്കി നൽകരുത്.--ലിസ്റ്റിലെ രണ്ടാമത്തെ ചെറിയ എലമെന്റ് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ next_smallest ().--∙∙നിനക്ക് ഒരു സംഖ്യകളുടെ പട്ടിക കിട്ടും.--  >>> nextSmallest [1,2,3,4,5]
--  Just (2)
--  >>> nextSmallest [5,1,4,3,2]
--  Just (2)
--  >>> nextSmallest []
--  Just (Nothing)
--  >>> nextSmallest [1,1]
--  Just (Nothing)
nextSmallest :: [Int] -> Maybe Int
nextSmallest lst =","nextSmallest :: [Int] -> Maybe Int
nextSmallest lst =
  let uniqueSorted = removeDuplicates $ quicksort lst
  in if length uniqueSorted < 2
     then Nothing
     else Just (uniqueSorted !! 1)

removeDuplicates :: (Ord a) => [a] -> [a]
removeDuplicates = foldr (\x acc -> if x `elem` acc then acc else x : acc) []

quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
  let smallerSorted = quicksort [a | a <- xs, a <= x]
      biggerSorted = quicksort [a | a <- xs, a > x]
  in smallerSorted ++ [x] ++ biggerSorted","
main :: IO ()
main = do
  let candidate = nextSmallest
  if candidate [1,2,3,4,5] == Just (2) then pure () else error ""assertion failed""
  if candidate [5,1,4,3,2] == Just (2) then pure () else error ""assertion failed""
  if candidate [] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [1,1] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [1,1,1,1,0] == Just (1) then pure () else error ""assertion failed""
  if candidate [1,1] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [(-35),34,12,(-45)] == Just ((-35)) then pure () else error ""assertion failed""
  pure ()"
HumanEval_91,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --വാക്യങ്ങള് ക്ക് '', '?' അഥവാ '!' എന്നീ അക്ഷരങ്ങള് ഉപയോഗിച്ച് പരിധിയുണ്ടാക്കും.--""I"" എന്ന വാക്കിൽ തുടങ്ങുന്ന ഒരു വാക്യമാണ് ബോറടിക്കൽ.--നിങ്ങള് ക്ക് ഒരു വാക്ക് സ്ട്രിംഗ് കിട്ടും, നിങ്ങളുടെ ജോലി അത് എണ്ണുക എന്നതാണ്.--  >>> isBored ""Hello world""
--  0
--  >>> isBored ""The sky is blue. The sun is shining. I love this weather""
--  1
isBored :: String -> Int
isBored S =","isBored :: String -> Int
isBored s = length $ filter (startsWithI . words) $ splitSentences s
  where
    splitSentences :: String -> [String]
    splitSentences = filter (not . null) . map (dropWhile (== ' ')) . splitOnDelimiters "".?!""
    
    splitOnDelimiters :: String -> String -> [String]
    splitOnDelimiters delims str = case dropWhile (`elem` delims) str of
      """" -> []
      s' -> let (w, s'') = break (`elem` delims) s' in w : splitOnDelimiters delims s''
    
    startsWithI :: [String] -> Bool
    startsWithI [] = False
    startsWithI (x:_) = map toLower x == ""i""","
main :: IO ()
main = do
  let candidate = isBored
  if candidate ""Hello world"" == 0 then pure () else error ""assertion failed""
  if candidate ""Is the sky blue?"" == 0 then pure () else error ""assertion failed""
  if candidate ""I love It !"" == 1 then pure () else error ""assertion failed""
  if candidate ""bIt"" == 0 then pure () else error ""assertion failed""
  if candidate ""I feel good today. I will be productive. will kill It"" == 2 then pure () else error ""assertion failed""
  if candidate ""You and I are going for a walk"" == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_92,mal_Mlym,hs,"--ഉദാഹരണങ്ങൾ --എല്ലാ കേസുകളിലും തെറ്റാണ്.--ഒരു സംഖ്യ മറ്റു രണ്ടിന്റെയും ആകെത്തുകയ്ക്ക് തുല്യമാണെങ്കിൽ, എല്ലാ സംഖ്യകളും പൂർണ്ണസംഖ്യകളാണെങ്കിൽ, ഇത് ശരിയായി നൽകുന്നു.--∙∙∙ 3 സംഖ്യകൾ എടുക്കുന്ന ഒരു ഫങ്ഷൻ ഉണ്ടാക്കുക.--  >>> anyInt 5 2 7
--  True
--  >>> anyInt 3 2 2
--  False
--  >>> anyInt 3 (-2) 1
--  True
--  >>> anyInt 3.6 -2.2 2
--  False
anyInt :: Float -> Float -> Float -> Bool
anyInt x y z =","anyInt :: Float -> Float -> Float -> Bool
anyInt x y z
  | x == fromInteger (round x) && y == fromInteger (round y) && z == fromInteger (round z) =
      x == y + z || y == x + z || z == x + y
  | otherwise = False","
main :: IO ()
main = do
  let candidate = anyInt
  if candidate 2.0 3.0 1.0 == True then pure () else error ""assertion failed""
  if candidate 2.5 2.0 3.0 == False then pure () else error ""assertion failed""
  if candidate 1.5 5.0 3.5 == False then pure () else error ""assertion failed""
  if candidate 2.0 6.0 2.0 == False then pure () else error ""assertion failed""
  if candidate 4.0 2.0 2.0 == True then pure () else error ""assertion failed""
  if candidate 2.2 2.2 2.2 == False then pure () else error ""assertion failed""
  if candidate (-4).0 6.0 2.0 == True then pure () else error ""assertion failed""
  if candidate 2.0 1.0 1.0 == True then pure () else error ""assertion failed""
  if candidate 3.0 4.0 7.0 == True then pure () else error ""assertion failed""
  if candidate 3.0 4.0 7.0 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_93,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --അക്ഷരങ്ങള് മാത്രം കരുതുക.--ഇംഗ്ലീഷ് അക്ഷരമാലയിലെ സ്വരാക്ഷരം.--ആ സന്ദേശത്തിന് മുന്നില് രണ്ടു സ്ഥാനങ്ങളില് വരുന്ന അക്ഷരം ഉപയോഗിച്ച്.--എല്ലാ അക്ഷരങ്ങളും മാറ്റി,  യിലെ എല്ലാ സ്വരാക്ഷരങ്ങളും മാറ്റി.--ഒരു സന്ദേശം എടുത്ത്, അതിൽ ഒരു ഘടകം എൻകോഡ് ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക.--  >>> encode ""test""
--  ""TGST""
--  >>> encode ""This is a message""
--  ""tHKS KS C MGSSCGG""
encode :: String -> String
encode message =","encode :: String -> String
encode = map transformChar
  where
    transformChar :: Char -> Char
    transformChar c
      | isVowel lowerC = toEnum (fromEnum lowerC + 2) `swapCase` c
      | otherwise      = swapCase c c
      where
        lowerC = toLower c

    isVowel :: Char -> Bool
    isVowel c = c `elem` ""aeiou""

    swapCase :: Char -> Char -> Char
    swapCase origC c
      | isUpper origC = toLower c
      | otherwise     = toUpper c","
main :: IO ()
main = do
  let candidate = encode
  if candidate ""TEST"" == ""tgst"" then pure () else error ""assertion failed""
  if candidate ""Mudasir"" == ""mWDCSKR"" then pure () else error ""assertion failed""
  if candidate ""YES"" == ""ygs"" then pure () else error ""assertion failed""
  if candidate ""This is a message"" == ""tHKS KS C MGSSCGG"" then pure () else error ""assertion failed""
  if candidate ""I DoNt KnOw WhAt tO WrItE"" == ""k dQnT kNqW wHcT Tq wRkTg"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_94,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ഏറ്റവും വലിയ പ്രൈം മൂല്യം കണ്ടെത്തി അതിന്റെ അക്കങ്ങളുടെ സംഖ്യ തിരികെ നൽകണം.--∙∙നിനക്ക് ഒരു സംഖ്യകളുടെ പട്ടിക കിട്ടും.--  >>> skjkasdkd [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]
--  10
--  >>> skjkasdkd [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]
--  25
--  >>> skjkasdkd [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]
--  13
--  >>> skjkasdkd [0,724,32,71,99,32,6,0,5,91,83,0,5,6]
--  11
--  >>> skjkasdkd [0,81,12,3,1,21]
--  3
--  >>> skjkasdkd [0,8,1,2,1,7]
--  7
skjkasdkd :: [Int] -> Int
skjkasdkd lst =","skjkasdkd :: [Int] -> Int
skjkasdkd lst = sumDigits (largestPrime lst)

-- Function to check if a number is prime
isPrime :: Int -> Bool
isPrime n
  | n <= 1 = False
  | n == 2 = True
  | even n = False
  | otherwise = null [x | x <- [3,5..isqrt n], n `mod` x == 0]

-- Integer square root using binary search, O(log n)
isqrt :: Int -> Int
isqrt n = floor . sqrt $ fromIntegral n

-- Function to find the largest prime in the list
largestPrime :: [Int] -> Int
largestPrime = foldr (\x acc -> if isPrime x && x > acc then x else acc) 0

-- Function to calculate the sum of the digits of a number
sumDigits :: Int -> Int
sumDigits 0 = 0
sumDigits n = n `mod` 10 + sumDigits (n `div` 10)","
main :: IO ()
main = do
  let candidate = skjkasdkd
  if candidate [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] == 10 then pure () else error ""assertion failed""
  if candidate [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] == 25 then pure () else error ""assertion failed""
  if candidate [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] == 13 then pure () else error ""assertion failed""
  if candidate [0,724,32,71,99,32,6,0,5,91,83,0,5,6] == 11 then pure () else error ""assertion failed""
  if candidate [0,81,12,3,1,21] == 3 then pure () else error ""assertion failed""
  if candidate [0,8,1,2,1,7] == 7 then pure () else error ""assertion failed""
  if candidate [8191] == 19 then pure () else error ""assertion failed""
  if candidate [8191,123456,127,7] == 19 then pure () else error ""assertion failed""
  if candidate [127,97,8192] == 10 then pure () else error ""assertion failed""
  pure ()"
HumanEval_95,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ഫങ്ഷൻ False എന്ന് റിട്ടേൺ ചെയ്യണം, കാരണം തന്നിരിക്കുന്ന അസോസിയേഷൻ ലിസ്റ്റ് ശൂന്യമാണ്.--എല്ലാ കീകളും വലിയക്ഷരങ്ങളുള്ള സ്ട്രിങ്ങുകളാണെങ്കിൽ, അല്ലെങ്കിൽ False തിരികെ നൽകുക.--ഒരു അസോസിയേഷൻ ലിസ്റ്റ് കൊടുത്താൽ, എല്ലാ കീകളും താഴത്തെ ഘടകത്തിലെ സ്ട്രിങ്ങുകളാണെങ്കിൽ True തിരികെ നൽകുക.--  >>> checkDictCase [(""a"", ""apple""), (""b"", ""banana"")]
--  True
--  >>> checkDictCase [(""a"", ""apple""), (""A"", ""banana""), (""B"", ""banana"")]
--  False
--  >>> checkDictCase [(""a"", ""apple""), (8, ""banana""), (""a"", ""apple"")]
--  False
--  >>> checkDictCase [(""Name"", ""John""), (""Age"", ""36""), (""City"", ""Houston"")]
--  False
--  >>> checkDictCase [(""STATE"", ""NC""), (""ZIP"", ""12345"")]
--  True
checkDictCase :: [(String, String)] -> Bool
checkDictCase dict =","import Data.Char (isUpper, isLower)

checkDictCase :: [(String, String)] -> Bool
checkDictCase [] = False
checkDictCase dict = all isLower allKeys || all isUpper allKeys
  where
    allKeys = concatMap fst dict","
main :: IO ()
main = do
  let candidate = checkDictCase
  if candidate [(""p"", ""pineapple""), (""b"", ""banana"")] == True then pure () else error ""assertion failed""
  if candidate [(""p"", ""pineapple""), (""A"", ""banana""), (""B"", ""banana"")] == False then pure () else error ""assertion failed""
  if candidate [(""p"", ""pineapple""), (""5"", ""banana""), (""a"", ""apple"")] == False then pure () else error ""assertion failed""
  if candidate [(""Name"", ""John""), (""Age"", ""36""), (""City"", ""Houston"")] == False then pure () else error ""assertion failed""
  if candidate [(""STATE"", ""NC""), (""ZIP"", ""12345"")] == True then pure () else error ""assertion failed""
  if candidate [(""fruit"", ""Orange""), (""taste"", ""Sweet"")] == True then pure () else error ""assertion failed""
  if candidate [] == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_96,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --യും n യും കുറവുള്ള അസംഖ്യകളാണ്.--ഒരു നോൺ-നെഗറ്റീവ് ഇന്റീജർ എടുത്ത് ആദ്യത്തെ n ന്റെ ഒരു ലിസ്റ്റ് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ നടപ്പിലാക്കുക--  >>> countUpTo 5
--  [2,3]
--  >>> countUpTo 11
--  [2,3,5,7]
--  >>> countUpTo 0
--  []
--  >>> countUpTo 20
--  [2,3,5,7,11,13,17,19]
--  >>> countUpTo 1
--  []
--  >>> countUpTo 18
--  [2,3,5,7,11,13,17]
countUpTo :: Int -> [Int]
countUpTo n =","countUpTo :: Int -> [Int]
countUpTo n = filter isPrime [2..n-1]

isPrime :: Int -> Bool
isPrime k
  | k < 2     = False
  | otherwise = null [ x | x <- [2..isqrt k], k `mod` x == 0 ]

isqrt :: Int -> Int
isqrt = floor . sqrt . fromIntegral","
main :: IO ()
main = do
  let candidate = countUpTo
  if candidate 5 == [2,3] then pure () else error ""assertion failed""
  if candidate 6 == [2,3,5] then pure () else error ""assertion failed""
  if candidate 7 == [2,3,5] then pure () else error ""assertion failed""
  if candidate 10 == [2,3,5,7] then pure () else error ""assertion failed""
  if candidate 0 == [] then pure () else error ""assertion failed""
  if candidate 22 == [2,3,5,7,11,13,17,19] then pure () else error ""assertion failed""
  if candidate 1 == [] then pure () else error ""assertion failed""
  if candidate 18 == [2,3,5,7,11,13,17] then pure () else error ""assertion failed""
  if candidate 47 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43] then pure () else error ""assertion failed""
  if candidate 101 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97] then pure () else error ""assertion failed""
  pure ()"
HumanEval_97,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ഇൻപുട്ട് എല്ലായ്പ്പോഴും സാധുവാണെന്ന് കരുതുക.--അവരുടെ യൂണിറ്റ് അക്കങ്ങളുടെ ഗുണനം.--രണ്ട് പൂർണ്ണസംഖ്യകളെ എടുത്ത് ഫങ്ഷൻ പൂരിപ്പിക്കുക, അത് ് തിരിച്ചു നൽകുന്നു.--  >>> multiply 148 412
--  16
--  >>> multiply 19 28
--  72
--  >>> multiply 2020 1851
--  0
--  >>> multiply 14 (-15)
--  20
multiply :: Int -> Int -> Int
multiply a b =","multiply :: Int -> Int -> Int
multiply a b = (abs a `mod` 10) * (abs b `mod` 10)","
main :: IO ()
main = do
  let candidate = multiply
  if candidate 148 412 == 16 then pure () else error ""assertion failed""
  if candidate 19 28 == 72 then pure () else error ""assertion failed""
  if candidate 2020 1851 == 0 then pure () else error ""assertion failed""
  if candidate 14 (-15) == 20 then pure () else error ""assertion failed""
  if candidate 76 67 == 42 then pure () else error ""assertion failed""
  if candidate 17 27 == 49 then pure () else error ""assertion failed""
  if candidate 0 1 == 0 then pure () else error ""assertion failed""
  if candidate 0 0 == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_98,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --∙∙∙ഒരു സ്ട്രിംഗ് s കൊടുത്താൽ, വലിയ അക്ഷരങ്ങളിലുള്ള വോക്കലുകളുടെ എണ്ണം കണക്കുകൂട്ടുക.--  >>> countUpper ""aBCdEf""
--  1
--  >>> countUpper ""abcdefg""
--  0
--  >>> countUpper ""dBBE""
--  0
countUpper :: String -> Int
countUpper s =","countUpper :: String -> Int
countUpper s = length [c | (i, c) <- zip [0..] s, i `mod` 2 == 0, c `elem` ""AEIOU""]","
main :: IO ()
main = do
  let candidate = countUpper
  if candidate ""aBCdEf"" == 1 then pure () else error ""assertion failed""
  if candidate ""abcdefg"" == 0 then pure () else error ""assertion failed""
  if candidate ""dBBE"" == 0 then pure () else error ""assertion failed""
  if candidate ""B"" == 0 then pure () else error ""assertion failed""
  if candidate ""U"" == 1 then pure () else error ""assertion failed""
  if candidate """" == 0 then pure () else error ""assertion failed""
  if candidate ""EEEE"" == 2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_99,mal_Mlym,hs,"--ഉദാഹരണങ്ങൾ --രണ്ട് പൂർണ്ണസംഖ്യകളിൽ നിന്നും, അത് പൂജ്യത്തിൽ നിന്നും കുറയ്ക്കുക.--യും അതിന് ഏറ്റവും അടുത്തുള്ള പൂർണ്ണസംഖ്യയും തിരികെ നൽകുന്നു.--ഒരു സംഖ്യയെ പ്രതിനിധീകരിക്കുന്ന ഒരു മൂല്യം (സ്ട്രിംഗ്) എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക.--  >>> closestInteger ""10""
--  10
--  >>> closestInteger ""15.3""
--  15
--  Note:
--  Rounding away from zero means that if the given number is equidistant
--  from two integers, the one you should return is the one that is the
--  farthest from zero. For example closest_integer(""14.5"") should
--  return 15 and closest_integer(""-14.5"") should return -15.
closestInteger :: String -> Int
closestInteger value =","closestInteger :: String -> Int
closestInteger value = 
  let n = read value :: Double
  in if n > 0 then floor (n + 0.5) else ceiling (n - 0.5)","
main :: IO ()
main = do
  let candidate = closestInteger
  if candidate ""10"" == 10 then pure () else error ""assertion failed""
  if candidate ""14.5"" == 15 then pure () else error ""assertion failed""
  if candidate ""-15.5"" == (-16) then pure () else error ""assertion failed""
  if candidate ""15.3"" == 15 then pure () else error ""assertion failed""
  if candidate ""0"" == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_100,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --i എന്നത് നിലയിലെ കല്ലുകളുടെ എണ്ണം (i+1) ആണ്.--ഒരു ലിസ്റ്റിലെ ഓരോ ലെവലിലും ഉള്ള കല്ലുകളുടെ എണ്ണം തിരികെ നൽകുന്നു, അവിടെ ഘടകം സൂചികയിൽ --- അടുത്ത ഇരട്ട സംഖ്യ n ഇരട്ട ആണെങ്കിൽ.--- അടുത്ത ഇരട്ട സംഖ്യ n ഇരട്ട ആണെങ്കിൽ.--അടുത്ത ലെവലിലെ കല്ലുകളുടെ എണ്ണം: --ആദ്യ നിലയില് n കല്ലുകളുണ്ട്.--∙∙∙ഒരു പോസിറ്റീവ് ഇന്റര് നമ്പര് n ആണെങ്കില് , നിങ്ങള് ഒരു കൂട്ടം കല്ലുകള് ഉണ്ടാക്കണം, n ലെവല് കല്ലുകള് .--  >>> makeAPile 3
--  [3,5,7]
makeAPile :: Int -> [Int]
makeAPile n =","makeAPile :: Int -> [Int]
makeAPile n = take n [n, n + 2 ..]","
main :: IO ()
main = do
  let candidate = makeAPile
  if candidate 3 == [3,5,7] then pure () else error ""assertion failed""
  if candidate 4 == [4,6,8,10] then pure () else error ""assertion failed""
  if candidate 5 == [5,7,9,11,13] then pure () else error ""assertion failed""
  if candidate 6 == [6,8,10,12,14,16] then pure () else error ""assertion failed""
  if candidate 8 == [8,10,12,14,16,18,20,22] then pure () else error ""assertion failed""
  pure ()"
HumanEval_101,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --സ്ട്രിങ് വാക്കുകളായി വിഭജിച്ച് വാക്കുകളുടെ ഒരു ലിസ്റ്റ് തിരികെ നൽകുക.--നിങ്ങള് ക്ക് കോമകളോ സ്പെയ്സുകളോ ഉപയോഗിച്ച് വേര് തിരിച്ച് വര് ത്തകങ്ങളുടെ ഒരു സ്ട്രിംഗ് നല് കും.--  >>> wordsString ""Hi, my name is John""
--  [""Hi"",""my"",""name"",""is"",""John""]
--  >>> wordsString ""One, two, three, four, five, six""
--  [""One"",""two"",""three"",""four"",""five"",""six""]
wordsString :: String -> [String]
wordsString s =","wordsString :: String -> [String]
wordsString s = words $ map (\c -> if c == ',' then ' ' else c) s","
main :: IO ()
main = do
  let candidate = wordsString
  if candidate ""Hi, my name is John"" == [""Hi"",""my"",""name"",""is"",""John""] then pure () else error ""assertion failed""
  if candidate ""One, two, three, four, five, six"" == [""One"",""two"",""three"",""four"",""five"",""six""] then pure () else error ""assertion failed""
  if candidate ""Hi, my name"" == [""Hi"",""my"",""name""] then pure () else error ""assertion failed""
  if candidate ""One,, two, three, four, five, six,"" == [""One"",""two"",""three"",""four"",""five"",""six""] then pure () else error ""assertion failed""
  if candidate """" == [] then pure () else error ""assertion failed""
  if candidate ""ahmed     , gamal"" == [""ahmed"",""gamal""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_102,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --അത്തരമൊരു സംഖ്യ ഇല്ല, അപ്പോൾ ഫംഗ്ഷൻ -1 തിരികെ നൽകണം.--[x, y] പരിധിയിലുള്ള ഏറ്റവും വലിയ സമസംഖ്യ.--ഈ ഫങ്ഷൻ രണ്ട് പോസിറ്റീവ് നമ്പറുകളായ x, y എന്നിവ എടുക്കുകയും ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ--  >>> chooseNum 12 15
--  14
--  >>> chooseNum 13 12
--  (-1)
chooseNum :: Int -> Int -> Int
chooseNum x y =","chooseNum :: Int -> Int -> Int
chooseNum x y
    | x > y = -1
    | even upperBound = upperBound
    | even (upperBound - 1) = upperBound - 1
    | otherwise = -1
  where
    upperBound = max x y","
main :: IO ()
main = do
  let candidate = chooseNum
  if candidate 12 15 == 14 then pure () else error ""assertion failed""
  if candidate 13 12 == (-1) then pure () else error ""assertion failed""
  if candidate 33 12354 == 12354 then pure () else error ""assertion failed""
  if candidate 5234 5233 == (-1) then pure () else error ""assertion failed""
  if candidate 6 29 == 28 then pure () else error ""assertion failed""
  if candidate 27 10 == (-1) then pure () else error ""assertion failed""
  if candidate 7 7 == (-1) then pure () else error ""assertion failed""
  if candidate 546 546 == 546 then pure () else error ""assertion failed""
  pure ()"
HumanEval_104,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --കുറിപ്പ്: തിരിച്ചുവിട്ട പട്ടിക വർധിച്ചുവരുന്ന ക്രമത്തിൽ ക്രമീകരിക്കണം.--ഇരട്ട അക്കങ്ങളൊന്നും ഇല്ലാത്ത മൂലകങ്ങൾ.--∙∙∙പോസിറ്റീവ് സംഖ്യകളുടെ ഒരു ലിസ്റ്റ് തന്നാൽ x, ∙∙∙എല്ലാ സംഖ്യകളുടെയും ഒരു പട്ടിക തിരിച്ചു തരും--  >>> uniqueDigits [15,33,1422,1]
--  [1,15,33]
--  >>> uniqueDigits [152,323,1422,10]
--  []
uniqueDigits :: [Int] -> [Int]
uniqueDigits x =","uniqueDigits :: [Int] -> [Int]
uniqueDigits x = sort $ filter (all odd . map (read . (:[])) . show) x","
main :: IO ()
main = do
  let candidate = uniqueDigits
  if candidate [15,33,1422,1] == [1,15,33] then pure () else error ""assertion failed""
  if candidate [152,323,1422,10] == [] then pure () else error ""assertion failed""
  if candidate [12345,2033,111,151] == [111,151] then pure () else error ""assertion failed""
  if candidate [135,103,31] == [31,135] then pure () else error ""assertion failed""
  pure ()"
HumanEval_105,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --ഒന്ന്, രണ്ട്, മൂന്ന്, നാല്, അഞ്ച്, ആറ്, ഏഴ്, എട്ട്, ഒമ്പത്.--ഫലമായി ലഭിക്കുന്ന പട്ടിക തിരിച്ച് വയ്ക്കുക, എന്നിട്ട് ഓരോ അക്കവും                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              --∙∙∙ഒരു പട്ടികയിൽ ഉള്ള സംഖ്യകളെ 1 നും 9 നും ഇടയിലുള്ള സംഖ്യകളെ തരം തിരിക്കുക,--  >>> byLength [2,1,1,4,5,8,2,3]
--  [""Eight"",""Five"",""Four"",""Three"",""Two"",""Two"",""One"",""One""]
--  If the list is empty, return an empty list:
--  >>> byLength []
--  []
--  If the list has any strange number ignore it:
--  >>> byLength [1,(-1),55]
--  [""One""]
byLength :: [Int] -> [String]
byLength arr =","byLength :: [Int] -> [String]
byLength arr = map digitName . reverse . sort . filter isValid $ arr
  where
    isValid x = x >= 1 && x <= 9
    digitName x = case x of
      1 -> ""One""
      2 -> ""Two""
      3 -> ""Three""
      4 -> ""Four""
      5 -> ""Five""
      6 -> ""Six""
      7 -> ""Seven""
      8 -> ""Eight""
      9 -> ""Nine""
      _ -> error ""Unexpected number""","
main :: IO ()
main = do
  let candidate = byLength
  if candidate [2,1,1,4,5,8,2,3] == [""Eight"",""Five"",""Four"",""Three"",""Two"",""Two"",""One"",""One""] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,(-1),55] == [""One""] then pure () else error ""assertion failed""
  if candidate [1,(-1),3,2] == [""Three"",""Two"",""One""] then pure () else error ""assertion failed""
  if candidate [9,4,8] == [""Nine"",""Eight"",""Four""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_106,mal_Mlym,hs,"--ഉദാഹരണം: --i യുടെ ഫാക്ടോറിയൽ 1 മുതൽ i വരെയുള്ള സംഖ്യകളുടെ ഗുണനമാണ് (1 * 2 * . . . * i).--ഞാന് 1 മുതല് തുടങ്ങുന്നു.--അല്ലെങ്കിൽ 1 മുതൽ i വരെയുള്ള സംഖ്യകളുടെ ആകെത്തുക.--പിന്നെ, ഒരു വലിപ്പം n ഉള്ള ഒരു ലിസ്റ്റ് തിരിച്ചു തരും, അങ്ങനെ i എന്ന മൂലകത്തിന്റെ മൂല്യം i ന്റെ ഫാക്ടോറിയൽ ആയിരിക്കും, i ഇരട്ട ആണെങ്കിൽ --f എന്ന ഫങ്ഷൻ നടപ്പിലാക്കുക, അത് n നെ ഒരു പാരാമീറ്ററായി എടുക്കുന്നു,--  >>> f 5
--  [1,2,6,24,15]
f :: Int -> [Int]
f n =","f :: Int -> [Int]
f n = map g [1..n]
  where
    g i
      | even i    = factorial i
      | otherwise = sum [1..i]
    
    factorial 0 = 1
    factorial m = product [1..m]","
main :: IO ()
main = do
  let candidate = f
  if candidate 5 == [1,2,6,24,15] then pure () else error ""assertion failed""
  if candidate 7 == [1,2,6,24,15,720,28] then pure () else error ""assertion failed""
  if candidate 1 == [1] then pure () else error ""assertion failed""
  if candidate 3 == [1,2,6] then pure () else error ""assertion failed""
  pure ()"
HumanEval_107,mal_Mlym,hs,"--ഉദാഹരണം 1:--പരിധിയിൽ വരുന്ന പൂർണ്ണസംഖ്യകളുടെ പാലിൻഡ്രോമുകൾ ((1, n), ഉൾപ്പെടെ.--ഒരു പോസിറ്റീവ് സംഖ്യ n കിട്ടിയാൽ, തുല്യവും അസമവുമായ സംഖ്യകളുടെ എണ്ണം ഉള്ള ഒരു ട്യൂപ്പിൾ തിരികെ നൽകുക.--  >>> evenOddPalindrome 3
--  (1, 2)
--  Explanation:
--  Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
--  Example 2:
--  >>> evenOddPalindrome 12
--  (4, 6)
--  Explanation:
--  Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
--  Note:
--  1. 1 <= n <= 10^3
--  2. returned tuple has the number of even and odd integer palindromes respectively.
evenOddPalindrome :: Int -> (Int, Int)
evenOddPalindrome n =","evenOddPalindrome :: Int -> (Int, Int)
evenOddPalindrome n = (length evens, length odds)
  where
    isPalindrome x = show x == reverse (show x)
    palindromes = filter isPalindrome [1..n]
    evens = filter even palindromes
    odds  = filter odd palindromes","
main :: IO ()
main = do
  let candidate = evenOddPalindrome
  if candidate 123 == (8, 13) then pure () else error ""assertion failed""
  if candidate 12 == (4, 6) then pure () else error ""assertion failed""
  if candidate 3 == (1, 2) then pure () else error ""assertion failed""
  if candidate 63 == (6, 8) then pure () else error ""assertion failed""
  if candidate 25 == (5, 6) then pure () else error ""assertion failed""
  if candidate 19 == (4, 6) then pure () else error ""assertion failed""
  if candidate 9 == (4, 5) then pure () else error ""assertion failed""
  if candidate 1 == (0, 1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_108,mal_Mlym,hs,"--ഉദാഹരണത്തിന്, -123 ന്റെ ചിഹ്നമുള്ള അക്കങ്ങൾ -1, 2, 3 എന്നിവയാണ്.--ഒരു സംഖ്യ നെഗറ്റീവ് ആണെങ്കിൽ, അതിന്റെ ആദ്യത്തെ ചിഹ്നമുള്ള അക്കം നെഗറ്റീവ് ആയിരിക്കും: -- 0 എന്ന സംഖ്യകളുടെ സംഖ്യയുള്ള ഘടകങ്ങളുടെ എണ്ണം.--ഒരു ഫങ്ഷൻ എഴുതുക count_nums അത് ഒരു സംഖ്യകളുടെ പട്ടിക എടുത്ത് തിരിച്ചു തരും--  >>> countNums []
--  0
--  >>> countNums [(-1),11,(-11)]
--  1
--  >>> countNums [1,1,2]
--  3
countNums :: [Int] -> Int
countNums arr =","countNums :: [Int] -> Int
countNums arr = length $ filter ((> 0) . sumDigits) arr
  where
    sumDigits 0 = 0
    sumDigits n = let digits = if n < 0 then -1 : map (read . (:[])) (tail (show (-n))) else map (read . (:[])) (show n)
                  in sum digits","
main :: IO ()
main = do
  let candidate = countNums
  if candidate [] == 0 then pure () else error ""assertion failed""
  if candidate [(-1),(-2),0] == 0 then pure () else error ""assertion failed""
  if candidate [1,1,2,(-2),3,4,5] == 6 then pure () else error ""assertion failed""
  if candidate [1,6,9,(-6),0,1,5] == 5 then pure () else error ""assertion failed""
  if candidate [1,100,98,(-7),1,(-1)] == 4 then pure () else error ""assertion failed""
  if candidate [12,23,34,(-45),(-56),0] == 5 then pure () else error ""assertion failed""
  if candidate [0,1] == 1 then pure () else error ""assertion failed""
  if candidate [1] == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_109,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --കുറിപ്പ്: ഈ പട്ടികയിൽ അദ്വിതീയമായ ഘടകങ്ങളുണ്ടെന്ന് ഉറപ്പുനൽകുന്നു.--തന്നിരിക്കുന്ന ലിസ്റ്റ് ശൂന്യമാണെങ്കിൽ True തിരികെ നൽകുക.--പിന്നെ True തിരിച്ചു തരാം, അല്ലെങ്കിൽ False തിരിച്ചു തരാം.--മുകളില് പറഞ്ഞ പ്രക്രിയ ചെയ്താല് , ക്രമീകരിച്ച പട്ടിക കിട്ടും.--പട്ടികയിലെ ആരംഭ സ്ഥാനമാണ് 0-ാം സൂചിക.--ലിസ്റ്റിന്റെ അവസാനത്തെ എലമെന്റ് യിലേക്ക് നീക്കും.--ഒരു വലത്തോട്ട് നീങ്ങൽ പ്രവർത്തനം അർത്ഥമാക്കുന്നത് പട്ടികയിലെ എല്ലാ ഘടകങ്ങളും ഒരു വരിക്ക് നീങ്ങുന്നു എന്നാണ്.--വലതുവശത്തേക്കുള്ള ഷിഫ്റ്റ് എത്ര തവണ വേണമെങ്കിലും ചെയ്യാം.--താഴെ കൊടുത്തിരിക്കുന്ന ലിസ്റ്റിലെ താഴെ പറയുന്ന പ്രവർത്തനം:-- എന്ന പ്രക്രിയയിലൂടെ ഒരു പട്ടിക കുറയാത്ത ക്രമത്തിൽ ക്രമീകരിക്കാൻ സാധിക്കും.--പട്ടികയിലെ നമ്പറുകൾ ക്രമരഹിതമായി ക്രമീകരിക്കും.--നമുക്ക് ഒരു പട്ടിക ഉണ്ട് 'arr' N പൂർണ്ണസംഖ്യകളുടെ arr[1], arr[2], ..., arr[N] ന്റെ--  >>> moveOneBall [3,4,5,1,2]
--  True
--  Explanation: By performin 2 right shift operations, non-decreasing order can
--  be achieved for the given list.
--  >>> moveOneBall [3,5,4,1,2]
--  False
--  Explanation:It is not possible to get non-decreasing order for the given
--  list by performing any number of right shift operations.
moveOneBall :: [Int] -> Bool
moveOneBall arr =","moveOneBall :: [Int] -> Bool
moveOneBall [] = True
moveOneBall arr = canBeSorted (arr ++ arr)
  where
    n = length arr
    canBeSorted xs = any isSorted (take n <$> tails xs)
    isSorted ys = and $ zipWith (<=) ys (tail ys)
    tails [] = []
    tails l@(_:xs) = l : tails xs","
main :: IO ()
main = do
  let candidate = moveOneBall
  if candidate [3,4,5,1,2] == True then pure () else error ""assertion failed""
  if candidate [3,5,10,1,2] == True then pure () else error ""assertion failed""
  if candidate [4,3,1,2] == False then pure () else error ""assertion failed""
  if candidate [3,5,4,1,2] == False then pure () else error ""assertion failed""
  if candidate [] == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_110,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --ഇല്ലെങ്കിൽ, ""ഇല്ല"" എന്ന് തിരികെ നൽകുക.--lst1 ന്റെ എല്ലാ ഘടകങ്ങളും സമമാണെങ്കിൽ, ""YES"" എന്ന് തിരികെ നൽകുക.--lst1 ഉം lst2 ഉം തമ്മിലുള്ള ഘടകങ്ങൾ മാറ്റിയെടുക്കാൻ സാധിക്കുമെങ്കിൽ--lst1 ഉം lst2 ഉം തമ്മിലുള്ള എക്സ്ചേഞ്ചുകളുടെ എണ്ണത്തിന് പരിധിയില്ല.--ഇരട്ട സംഖ്യകളുടെ പട്ടിക ഉണ്ടാക്കാന് .--ഘടകങ്ങള് കൈമാറാന് സാധിക്കുമോ എന്ന് തീരുമാനിക്കുന്നു.--ഈ പ്രശ്നത്തില് നിങ്ങള് ഒരു ഫങ്ഷൻ നടപ്പിലാക്കും അത് രണ്ട് സംഖ്യകളുടെ പട്ടിക എടുക്കുന്നു,--  >>> exchange [1,2,3,4] [1,2,3,4]
--  ""YES""
--  >>> exchange [1,2,3,4] [1,5,3,4]
--  ""NO""
--  It is assumed that the input lists will be non-empty.
exchange :: [Int] -> [Int] -> String
exchange lst1 lst2 =","exchange :: [Int] -> [Int] -> String
exchange lst1 lst2
  | all even lst1 = ""YES""
  | null oddLst1 || null evenLst2 = ""NO""
  | otherwise = let possibility = all even ([x | x <- lst1, even x] ++ evenLst2)
                in if possibility then ""YES"" else ""NO""
  where
    oddLst1 = filter odd lst1
    evenLst2 = filter even lst2","
main :: IO ()
main = do
  let candidate = exchange
  if candidate [1,2,3,4] [1,2,3,4] == ""YES"" then pure () else error ""assertion failed""
  if candidate [1,2,3,4] [1,5,3,4] == ""NO"" then pure () else error ""assertion failed""
  if candidate [1,2,3,4] [2,1,4,3] == ""YES"" then pure () else error ""assertion failed""
  if candidate [5,7,3] [2,6,4] == ""YES"" then pure () else error ""assertion failed""
  if candidate [5,7,3] [2,6,3] == ""NO"" then pure () else error ""assertion failed""
  if candidate [3,2,6,1,8,9] [3,5,5,1,1,1] == ""NO"" then pure () else error ""assertion failed""
  if candidate [100,200] [200,200] == ""YES"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_111,mal_Mlym,hs,"--ഉദാഹരണം: --ഒരേ അക്ഷരത്തില് പല അക്ഷരങ്ങള് ഉണ്ടെങ്കില് അവയെല്ലാം തിരികെ നല് കുക.--ഏറ്റവും കൂടുതൽ തവണ ആവർത്തിക്കുന്നതും അതിനനുസരിച്ച് എണ്ണപ്പെടുന്നതുമായ അക്ഷരത്തിന്റെ --ഒരു സ്ട്രിംഗ് കൊടുത്താൽ, അത് സ്പെയ്സ് കൊണ്ട് വേർതിരിക്കുന്ന ചെറിയ അക്ഷരങ്ങളെ പ്രതിനിധീകരിക്കുന്നു, ഒരു അസോസിയേഷൻ ലിസ്റ്റ് തിരികെ നൽകുക.--  >>> histogram ""a b c""
--  [(""a"", 1), (""b"", 1), (""c"", 1)]
--  >>> histogram ""a b b a""
--  [(""a"", 2), (""b"", 2)]
--  >>> histogram ""a b c a b""
--  [(""a"", 2), (""b"", 2)]
--  >>> histogram ""b b b b a""
--  [(""b"", 4)]
--  >>> histogram """"
--  []
histogram :: String -> [(String, Int)]
histogram test =","import Data.List (group, sort)
import Data.Ord (comparing)

histogram :: String -> [(String, Int)]
histogram input =
  let wordsList = words input
      grouped = group $ sort wordsList
      countList = map (\ws -> (head ws, length ws)) grouped
      maxCount = if null countList then 0 else maximum $ map snd countList
  in filter ((== maxCount) . snd) countList","
main :: IO ()
main = do
  let candidate = histogram
  if candidate ""a b b a"" == [(""a"", 2), (""b"", 2)] then pure () else error ""assertion failed""
  if candidate ""a b c a b"" == [(""a"", 2), (""b"", 2)] then pure () else error ""assertion failed""
  if candidate ""a b c d g"" == [(""a"", 1), (""b"", 1), (""c"", 1), (""d"", 1), (""g"", 1)] then pure () else error ""assertion failed""
  if candidate ""r t g"" == [(""r"", 1), (""t"", 1), (""g"", 1)] then pure () else error ""assertion failed""
  if candidate ""b b b b a"" == [(""b"", 4)] then pure () else error ""assertion failed""
  if candidate ""r t g"" == [(""r"", 1), (""t"", 1), (""g"", 1)] then pure () else error ""assertion failed""
  if candidate """" == [] then pure () else error ""assertion failed""
  if candidate ""a"" == [(""a"", 1)] then pure () else error ""assertion failed""
  pure ()"
HumanEval_112,mal_Mlym,hs,"--ഉദാഹരണം --പരിശോധനയ്ക്കായി ഫല സ്ട്രിങ്ങും True/False ഉം അടങ്ങിയ ഒരു ട്യൂപ്പൽ നിങ്ങൾ നൽകണം.--ഒരു സ്ട്രിംഗ് ഒരു പലിൻഡ്രോം എന്ന് വിളിക്കപ്പെടുന്നു, അത് മുന്നോട്ടും പിന്നോട്ടും ഒരേപോലെ വായിക്കുന്നുവെങ്കിൽ.--പിന്നെ ഫലം പാലിൻഡ്രോം ആണോ എന്ന് പരിശോധിക്കുക.--നമുക്ക് രണ്ട് സ്ട്രിങ്ങുകൾ s ഉം c ഉം കിട്ടി, s യിലെ എല്ലാ പ്രതീകങ്ങളും നീക്കം ചെയ്യണം, അത് c യിലെ ഏതെങ്കിലും പ്രതീകത്തിന് തുല്യമാണ്.--ഒരു ജോലി.--  >>> reverseDelete ""abcde"" ""ae""
--  (""bcd"", False)
--  >>> reverseDelete ""abcdef"" ""b""
--  (""acdef"", False)
--  >>> reverseDelete ""abcdedcba"" ""ab""
--  (""cdedc"", True)
reverseDelete :: String -> String -> (String, Bool)
reverseDelete s c =","import Data.List (filter)

reverseDelete :: String -> String -> (String, Bool)
reverseDelete s c =
  let result = filter (`notElem` c) s
  in (result, result == reverse result)","
main :: IO ()
main = do
  let candidate = reverseDelete
  if candidate ""abcde"" ""ae"" == (""bcd"", False) then pure () else error ""assertion failed""
  if candidate ""abcdef"" ""b"" == (""acdef"", False) then pure () else error ""assertion failed""
  if candidate ""abcdedcba"" ""ab"" == (""cdedc"", True) then pure () else error ""assertion failed""
  if candidate ""dwik"" ""w"" == (""dik"", False) then pure () else error ""assertion failed""
  if candidate ""a"" ""a"" == ("""", True) then pure () else error ""assertion failed""
  if candidate ""abcdedcba"" """" == (""abcdedcba"", True) then pure () else error ""assertion failed""
  if candidate ""abcdedcba"" ""v"" == (""abcdedcba"", True) then pure () else error ""assertion failed""
  if candidate ""vabba"" ""v"" == (""abba"", True) then pure () else error ""assertion failed""
  if candidate ""mamma"" ""mia"" == ("""", True) then pure () else error ""assertion failed""
  pure ()"
HumanEval_113,mal_Mlym,hs,"--ഇൻപുട്ടിന്റെ i-ാം സ്ട്രിങ്ങിലെ അപൂർവ്വ അക്കങ്ങളുടെ എണ്ണം.--""ഇവിടെ എല്ലാ i- കളും നമ്പർ ഉപയോഗിച്ച് മാറ്റിസ്ഥാപിക്കണം.--ഔട്ട്പുട്ടിന്റെ ഓരോ ഘടകവും i യിലെ അപൂർവ്വ ഘടകങ്ങളുടെ എണ്ണം ആയിരിക്കണം.--∙∙∙ഒരു സ്ട്രിംഗ് ലിസ്റ്റ് കൊടുത്താൽ, ഓരോ സ്ട്രിംഗിലും അക്കങ്ങൾ മാത്രം ഉണ്ടെങ്കിൽ, ഒരു ലിസ്റ്റ് തിരിച്ചു തരും.--  >>> oddCount [""1234567""]
--  [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
--  >>> oddCount [""3"",""11111111""]
--  [""the number of odd elements 1n the str1ng 1 of the 1nput."",""the number of odd elements 8n the str8ng 8 of the 8nput.""]
oddCount :: [String] -> [String]
oddCount lst =","oddCount :: [String] -> [String]
oddCount lst = map formatString lst
  where
    isOddDigit :: Char -> Bool
    isOddDigit c = c `elem` ""13579""

    countOdds :: String -> Int
    countOdds str = length $ filter isOddDigit str

    formatString :: String -> String
    formatString str =
      let oddCount = countOdds str in
      ""the number of odd elements "" ++ show oddCount ++ 
      ""n the str"" ++ show oddCount ++ ""ng "" ++ show oddCount ++
      "" of the "" ++ show oddCount ++ ""nput.""","
main :: IO ()
main = do
  let candidate = oddCount
  if candidate [""1234567""] == [""the number of odd elements 4n the str4ng 4 of the 4nput.""] then pure () else error ""assertion failed""
  if candidate [""3"",""11111111""] == [""the number of odd elements 1n the str1ng 1 of the 1nput."",""the number of odd elements 8n the str8ng 8 of the 8nput.""] then pure () else error ""assertion failed""
  if candidate [""271"",""137"",""314""] == [""the number of odd elements 2n the str2ng 2 of the 2nput."",""the number of odd elements 3n the str3ng 3 of the 3nput."",""the number of odd elements 2n the str2ng 2 of the 2nput.""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_114,mal_Mlym,hs,"--ഉദാഹരണം --യും--∙∙∙ഒരു സംഖ്യകളുടെ പട്ടിക കൊടുത്താൽ, ശൂന്യമല്ലാത്ത ഏതെങ്കിലും ഉപ-പട്ടികയുടെ ഏറ്റവും കുറഞ്ഞ സംഖ്യ കണ്ടെത്തുക--  >>> minsubarraysum [2,3,4,1,2,4]
--  1
--  >>> minsubarraysum [(-1),(-2),(-3)]
--  (-6)
minsubarraysum :: [Int] -> Int
minsubarraysum nums =","minsubarraysum :: [Int] -> Int
minsubarraysum nums = minimum $ scanl1 (\acc x -> min x (acc + x)) nums","
main :: IO ()
main = do
  let candidate = minsubarraysum
  if candidate [2,3,4,1,2,4] == 1 then pure () else error ""assertion failed""
  if candidate [(-1),(-2),(-3)] == (-6) then pure () else error ""assertion failed""
  if candidate [(-1),(-2),(-3),2,(-10)] == (-14) then pure () else error ""assertion failed""
  if candidate [(-9999999999999999)] == (-9999999999999999) then pure () else error ""assertion failed""
  if candidate [0,10,20,1000000] == 0 then pure () else error ""assertion failed""
  if candidate [(-1),(-2),(-3),10,(-5)] == (-6) then pure () else error ""assertion failed""
  if candidate [100,(-1),(-2),(-3),10,(-5)] == (-6) then pure () else error ""assertion failed""
  if candidate [10,11,13,8,3,4] == 3 then pure () else error ""assertion failed""
  if candidate [100,(-33),32,(-1),0,(-2)] == (-33) then pure () else error ""assertion failed""
  if candidate [(-10)] == (-10) then pure () else error ""assertion failed""
  if candidate [7] == 7 then pure () else error ""assertion failed""
  if candidate [1,(-1)] == (-1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_115,mal_Mlym,hs,"--ഉദാഹരണം 1:--ബക്കറ്റുകള് താഴെയിറക്കാന് എത്ര പ്രാവശ്യം വേണമെങ്കിലും ചെയ്യണം.--നിങ്ങളുടെ ജോലി കിണറുകള് ഒഴുകാന് ബക്കറ്റുകള് ഉപയോഗിക്കുക എന്നതാണ്.--എല്ലാ ബക്കറ്റുകളിലും ഒരേ അളവിലുള്ള വെള്ളം ഉണ്ട്.--ഓരോ കിണറിനും അതില് നിന്ന് വെള്ളം പുറത്തെടുക്കാന് ഉപയോഗിക്കാവുന്ന ഒരു ബക്കറ്റ് ഉണ്ട്,--ഓരോ 1യും ഒരു യൂണിറ്റ് വെള്ളത്തെ പ്രതിനിധീകരിക്കുന്നു.--നിങ്ങള് ക്ക് ഒരു ചതുരാകൃതിയിലുള്ള കിണറുകളുടെ ഗ്രിഡ് കിട്ടും. ഓരോ വരിയും ഒരു കിണറിനെ പ്രതിനിധീകരിക്കുന്നു,--  >>> maxFill [[0,0,1,0],[0,1,0,0],[1,1,1,1]] 1
--  6
--  Example 2:
--  >>> maxFill [[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]] 2
--  5
--  Example 3:
--  >>> maxFill [[0,0,0],[0,0,0]] 5
--  0
--  Constraints:
--  * all wells have the same length
--  * 1 <= grid.length <= 10^2
--  * 1 <= grid[:,1].length <= 10^2
--  * grid[i][j] -> 0 | 1
--  * 1 <= capacity <= 10
maxFill :: [[Int]] -> Int -> Int
maxFill grid capacity =","maxFill :: [[Int]] -> Int -> Int
maxFill grid capacity = ceiling (fromIntegral totalWater / fromIntegral capacity)
  where
    totalWater = sum (map sum grid)","
main :: IO ()
main = do
  let candidate = maxFill
  if candidate [[0,0,1,0],[0,1,0,0],[1,1,1,1]] 1 == 6 then pure () else error ""assertion failed""
  if candidate [[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]] 2 == 5 then pure () else error ""assertion failed""
  if candidate [[0,0,0],[0,0,0]] 5 == 0 then pure () else error ""assertion failed""
  if candidate [[1,1,1,1],[1,1,1,1]] 2 == 4 then pure () else error ""assertion failed""
  if candidate [[1,1,1,1],[1,1,1,1]] 9 == 2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_116,mal_Mlym,hs,"--ഇത് ഇങ്ങനെ നടപ്പാക്കണം:--സമാനമായ എണ്ണം 1 കളുടെ, ദശാംശ മൂല്യം അടിസ്ഥാനമാക്കി അടുക്കുക.--ബൈനറി പ്രാതിനിധ്യത്തിലെ 1 ന്റെ എണ്ണം വർദ്ധിച്ചുവരുന്ന ക്രമത്തിൽ.--ഈ കറ്റയിൽ, നിങ്ങൾ നെഗറ്റീവ് അല്ലാത്ത സംഖ്യകളുടെ പട്ടിക ക്രമീകരിക്കണം--  >>> sortArray [1,5,2,3,4]
--  [1,2,3,4,5]
--  >>> sortArray [(-2),(-3),(-4),(-5),(-6)]
--  [(-6),(-5),(-4),(-3),(-2)]
--  >>> sortArray [1,0,2,3,4]
--  [0,1,2,3,4]
sortArray :: [Int] -> [Int]
sortArray arr =","import Data.Bits (popCount)
import Data.List (sortBy)

sortArray :: [Int] -> [Int]
sortArray arr = sortBy compareOnesAndValues arr
  where
    compareOnesAndValues x y =
      let onesX = popCount x
          onesY = popCount y
      in if onesX == onesY
         then compare x y
         else compare onesX onesY","
main :: IO ()
main = do
  let candidate = sortArray
  if candidate [1,5,2,3,4] == [1,2,4,3,5] then pure () else error ""assertion failed""
  if candidate [(-2),(-3),(-4),(-5),(-6)] == [(-4),(-2),(-6),(-5),(-3)] then pure () else error ""assertion failed""
  if candidate [1,0,2,3,4] == [0,1,2,4,3] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [2,5,77,4,5,3,5,7,2,3,4] == [2,2,4,4,3,3,5,5,5,7,77] then pure () else error ""assertion failed""
  if candidate [3,6,44,12,32,5] == [32,3,5,6,12,44] then pure () else error ""assertion failed""
  if candidate [2,4,8,16,32] == [2,4,8,16,32] then pure () else error ""assertion failed""
  if candidate [2,4,8,16,32] == [2,4,8,16,32] then pure () else error ""assertion failed""
  pure ()"
HumanEval_117,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --കുറിപ്പ്: ഇൻപുട്ട് സ്ട്രിങ്ങിൽ അക്ഷരങ്ങളും സ്പെയ്സുകളും മാത്രമേ ഉള്ളൂ എന്ന് കരുതാം.--s ശൂന്യമാണെങ്കിൽ ഫങ്ഷൻ ഒരു ശൂന്യമായ ലിസ്റ്റ് നൽകും.--n സ്വരമാലകൾ, ഈ വാക്കുകൾ s സ്ട്രിങ്ങിൽ പ്രത്യക്ഷപ്പെടുന്ന ക്രമത്തിൽ.--കൃത്യമായി  അടങ്ങിയിരിക്കുന്ന സ്ട്രിംഗ് s-ലെ എല്ലാ വാക്കുകളുടെയും ഒരു ലിസ്റ്റ് മടക്കിനൽകുന്ന ഒരു ഫംഗ്ഷൻ.--ഒരു സ്ട്രിംഗ് s ഉം ഒരു സ്വാഭാവിക സംഖ്യ n ഉം നല് കിയിരിക്കെ, നിങ്ങള് ക്ക് നടപ്പിലാക്കാന് നിര് ദ്ദേശമുണ്ട്.--  >>> selectWords ""Mary had a little lamb"" 4
--  [""little""]
--  >>> selectWords ""Mary had a little lamb"" 3
--  [""Mary"",""lamb""]
--  >>> selectWords ""simple white space"" 2
--  []
--  >>> selectWords ""Hello world"" 4
--  [""world""]
--  >>> selectWords ""Uncle sam"" 3
--  [""Uncle""]
selectWords :: String -> Int -> [String]
selectWords s n =","selectWords :: String -> Int -> [String]
selectWords s n = filter (\word -> countConsonants word == n) (words s)
  where
    countConsonants = length . filter (`elem` consonants)
    consonants = ""bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ""","
main :: IO ()
main = do
  let candidate = selectWords
  if candidate ""Mary had a little lamb"" 4 == [""little""] then pure () else error ""assertion failed""
  if candidate ""Mary had a little lamb"" 3 == [""Mary"",""lamb""] then pure () else error ""assertion failed""
  if candidate ""simple white space"" 2 == [] then pure () else error ""assertion failed""
  if candidate ""Hello world"" 4 == [""world""] then pure () else error ""assertion failed""
  if candidate ""Uncle sam"" 3 == [""Uncle""] then pure () else error ""assertion failed""
  if candidate """" 4 == [] then pure () else error ""assertion failed""
  if candidate ""a b c d e f"" 1 == [""b"",""c"",""d"",""f""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_118,mal_Mlym,hs,"--ഉദാഹരണം: --നിങ്ങള് ക്ക് ഊഹിക്കാം, ഈ സ്ട്രിങ്ങിൽ ഇംഗ്ലീഷ് അക്ഷരങ്ങൾ മാത്രമേ ഉള്ളൂ എന്ന്.--മുകളിലുള്ള നിബന്ധന പാലിക്കുന്ന ഏതെങ്കിലും സ്വരാക്ഷരത്തെ കണ്ടെത്തുക.--തുടക്കത്തിലും അവസാനത്തിലും ഉള്ള സ്വരാക്ഷരങ്ങൾ കണക്കാക്കില്ല. ഇല്ലെങ്കിൽ ശൂന്യമായ സ്ട്രിംഗ് തിരികെ നൽകുക.--വാക്കിന്റെ വലതുവശത്ത് നിന്ന് രണ്ട് സ്വരാക്ഷരങ്ങൾ (കേസ് സെൻസിറ്റീവ്).--നിങ്ങള് ക്ക് ഒരു വാക്ക് കിട്ടും. നിങ്ങള് ക്ക് ചെയ്യാനുള്ളത് അടുത്തുള്ള സ്വരാക്ഷരത്തെ കണ്ടെത്തുക എന്നതാണ്.--  >>> getClosestVowel ""yogurt""
--  ""u""
--  >>> getClosestVowel ""FULL""
--  ""U""
--  >>> getClosestVowel ""quick""
--  """"
--  >>> getClosestVowel ""ab""
--  """"
getClosestVowel :: String -> String
getClosestVowel word =","getClosestVowel :: String -> String
getClosestVowel word = go (reverse word) False
  where
    vowels = ""aeiouAEIOU""
    go [] _ = """"
    go (x:xs) lastWasConsonant
      | x `elem` vowels && lastWasConsonant = if null xs || not (head xs `elem` vowels) then [x] else go xs False
      | x `notElem` vowels = go xs True
      | otherwise = go xs False","
main :: IO ()
main = do
  let candidate = getClosestVowel
  if candidate ""yogurt"" == ""u"" then pure () else error ""assertion failed""
  if candidate ""full"" == ""u"" then pure () else error ""assertion failed""
  if candidate ""easy"" == """" then pure () else error ""assertion failed""
  if candidate ""eAsy"" == """" then pure () else error ""assertion failed""
  if candidate ""ali"" == """" then pure () else error ""assertion failed""
  if candidate ""bad"" == ""a"" then pure () else error ""assertion failed""
  if candidate ""most"" == ""o"" then pure () else error ""assertion failed""
  if candidate ""ab"" == """" then pure () else error ""assertion failed""
  if candidate ""ba"" == """" then pure () else error ""assertion failed""
  if candidate ""quick"" == """" then pure () else error ""assertion failed""
  if candidate ""anime"" == ""i"" then pure () else error ""assertion failed""
  if candidate ""Asia"" == """" then pure () else error ""assertion failed""
  if candidate ""Above"" == ""o"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_119,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ഒരു നല്ല സ്ട്രിംഗ് ഉണ്ടാക്കാന് ഒരു വഴിയുണ്ടെങ്കില് 'അതെ' എന്ന് തിരിച്ചുവിടുക, അല്ലാത്തപക്ഷം 'ഇല്ല' എന്ന് തിരിച്ചുവിടുക.--"" (()) "" അല്ല.--ഉദാഹരണത്തിന്: '(((() ' എന്ന സ്ട്രിംഗ് നല്ലതാണ്, അതേസമയം  എന്ന സ്ട്രിംഗ് നല്ലതാണ്.--S യിലെ എല്ലാ പരാൻതീസിസുകളും  ആണെങ്കിൽ മാത്രമേ ഒരു സ്ട്രിംഗ് S നല്ലതായി കണക്കാക്കപ്പെടുന്നുള്ളൂ.--ചില ക്രമം, തത്ഫലമായുണ്ടാകുന്ന സ്ട്രിംഗ് നല്ലതായിരിക്കും.--നിങ്ങളുടെ ജോലി രണ്ടു സ്ട്രിങ്ങുകളും ഒന്നിച്ച് ചേർക്കാൻ സാധിക്കുമോ എന്ന് പരിശോധിക്കുക എന്നതാണ്.--പരാൻതീസിസ് "" (("" അല്ലെങ്കിൽ അടുത്ത പരാൻതീസിസ് "") "" മാത്രം.--രണ്ട് സ്ട്രിങ്ങുകൾ അടങ്ങിയ ഒരു ലിസ്റ്റ് നിങ്ങൾക്ക് ലഭിക്കുന്നു, രണ്ട് സ്ട്രിങ്ങുകളും തുറന്നവയാണ്.--  >>> matchParens [""()("","")""]
--  ""Yes""
--  >>> matchParens ["")"","")""]
--  ""No""
matchParens :: [String] -> String
matchParens lst =","matchParens :: [String] -> String
matchParens [a, b] =
    if isValid (a ++ b) || isValid (b ++ a) then ""Yes"" else ""No""
  where
    isValid :: String -> Bool
    isValid = go 0
      where
        go 0 [] = True
        go _ [] = False
        go n (x:xs)
            | x == '('  = go (n + 1) xs
            | x == ')'  = n > 0 && go (n - 1) xs
    isValid _ = False","
main :: IO ()
main = do
  let candidate = matchParens
  if candidate [""()("","")""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate ["")"","")""] == ""No"" then pure () else error ""assertion failed""
  if candidate [""(()(())"",""())())""] == ""No"" then pure () else error ""assertion failed""
  if candidate ["")())"",""(()()(""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate [""(())))"",""(()())((""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate [""()"",""())""] == ""No"" then pure () else error ""assertion failed""
  if candidate [""(()("",""()))()""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate [""(((("",""((())""] == ""No"" then pure () else error ""assertion failed""
  if candidate ["")(()"",""(()(""] == ""No"" then pure () else error ""assertion failed""
  if candidate ["")("","")(""] == ""No"" then pure () else error ""assertion failed""
  if candidate [""("","")""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate ["")"",""(""] == ""Yes"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_120,mal_Mlym,hs,"--ഉദാഹരണം 1:--നീളം k യും പരമാവധി k സംഖ്യകളും arr യിലുണ്ട്.--∙∙∙ആര് എന്ന സംഖ്യകളുടെ ഒരു ലിസ്റ്റും പോസിറ്റീവ് ഇന്റര് k എന്ന സംഖ്യയും കൊടുത്താൽ, ഒരു തരംതിരിക്കപ്പെട്ട ലിസ്റ്റ് തിരിച്ചു തരും--  >>> maximum [(-3),(-4),5] 3
--  [(-4),(-3),5]
--  Example 2:
--  >>> maximum [4,(-4),4] 2
--  [4,4]
--  Example 3:
--  >>> maximum [(-3),2,1,2,(-1),(-2),1] 1
--  [2]
--  Note:
--  1. The length of the list will be in the range of [1, 1000].
--  2. The elements in the list will be in the range of [-1000, 1000].
--  3. 0 <= k <= len(arr)
maximum :: [Int] -> Int -> [Int]
maximum arr k =","maximum :: [Int] -> Int -> [Int]
maximum arr k = take k $ reverse $ sort arr","
main :: IO ()
main = do
  let candidate = maximum
  if candidate [(-3),(-4),5] 3 == [(-4),(-3),5] then pure () else error ""assertion failed""
  if candidate [4,(-4),4] 2 == [4,4] then pure () else error ""assertion failed""
  if candidate [(-3),2,1,2,(-1),(-2),1] 1 == [2] then pure () else error ""assertion failed""
  if candidate [123,(-123),20,0,1,2,(-3)] 3 == [2,20,123] then pure () else error ""assertion failed""
  if candidate [(-123),20,0,1,2,(-3)] 4 == [0,1,2,20] then pure () else error ""assertion failed""
  if candidate [5,15,0,3,(-13),(-8),0] 7 == [(-13),(-8),0,0,3,5,15] then pure () else error ""assertion failed""
  if candidate [(-1),0,2,5,3,(-10)] 2 == [3,5] then pure () else error ""assertion failed""
  if candidate [1,0,5,(-7)] 1 == [5] then pure () else error ""assertion failed""
  if candidate [4,(-4)] 2 == [(-4),4] then pure () else error ""assertion failed""
  if candidate [(-10),10] 2 == [(-10),10] then pure () else error ""assertion failed""
  if candidate [1,2,3,(-23),243,(-400),0] 0 == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_121,mal_Mlym,hs,"--ഉദാഹരണങ്ങൾ --∙∙∙ഒരു പൂര് ണ്ണ സംഖ്യകളുടെ പട്ടിക നല് കിയിട്ട്, സമസ്ഥാനങ്ങളിലുള്ള എല്ലാ ഭിന്നസംഖ്യകളുടെയും സംഖ്യ തിരികെ നല് കുക.--  >>> solution [5,8,7,1]
--  12
--  >>> solution [3,3,3,3,3]
--  9
--  >>> solution [30,13,24,321]
--  0
solution :: [Int] -> Int
solution lst =","solution :: [Int] -> Int
solution lst = sum [x | (i, x) <- zip [0..] lst, odd x, even i]","
main :: IO ()
main = do
  let candidate = solution
  if candidate [5,8,7,1] == 12 then pure () else error ""assertion failed""
  if candidate [3,3,3,3,3] == 9 then pure () else error ""assertion failed""
  if candidate [30,13,24,321] == 0 then pure () else error ""assertion failed""
  if candidate [5,9] == 5 then pure () else error ""assertion failed""
  if candidate [2,4,8] == 0 then pure () else error ""assertion failed""
  if candidate [30,13,23,32] == 23 then pure () else error ""assertion failed""
  if candidate [3,13,2,9] == 3 then pure () else error ""assertion failed""
  pure ()"
HumanEval_122,mal_Mlym,hs,"--ഉദാഹരണം: --arr യിലെ ആദ്യത്തെ k മൂലകങ്ങളുടെ പരമാവധി രണ്ട് അക്കങ്ങളുള്ള മൂലകങ്ങളുടെ സംഖ്യ.--ഒരു പൂർണ്ണസംഖ്യ arr ഉം k ഉം ഉള്ള ഒരു പൂർണ്ണസംഖ്യയുടെ പട്ടിക കൊടുത്താൽ, return --  >>> addElements [111,21,3,4000,5,6,7,8,9] 4
--  24
--  Constraints:
--  1. 1 <= len(arr) <= 100
--  2. 1 <= k <= len(arr)
addElements :: [Int] -> Int -> Int
addElements arr k =","addElements :: [Int] -> Int -> Int
addElements arr k = sum $ filter (\x -> x >= -99 && x <= 99) $ take k arr","
main :: IO ()
main = do
  let candidate = addElements
  if candidate [1,(-2),(-3),41,57,76,87,88,99] 3 == (-4) then pure () else error ""assertion failed""
  if candidate [111,121,3,4000,5,6] 2 == 0 then pure () else error ""assertion failed""
  if candidate [11,21,3,90,5,6,7,8,9] 4 == 125 then pure () else error ""assertion failed""
  if candidate [111,21,3,4000,5,6,7,8,9] 4 == 24 then pure () else error ""assertion failed""
  if candidate [1] 1 == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_123,mal_Mlym,hs,"--get_odd_collatz(5) [1, 5] # 5 ന്റെ കോലാറ്റ്സ് ശ്രേണി [5, 16, 8, 4, 2, 1], അതിനാൽ വിചിത്ര സംഖ്യകൾ 1 ഉം 5 ഉം മാത്രമാണ്.--ഉദാഹരണത്തിന്: --2. തിരിച്ചുവിട്ട പട്ടിക വർധന ക്രമത്തിൽ അടുക്കുന്നു.--1. കോലാട്സ്      ആണ് [1].--കുറിപ്പ്:--n ന്റെ മൂല്യം എത്രയായിരുന്നാലും, തുടക്കം എപ്പോഴും 1 ആയിരിക്കും.--മുമ്പത്തെ പദം ഇരട്ട ആണെങ്കിൽ, അടുത്ത പദം മുമ്പത്തെ പദത്തിന്റെ 3 മടങ്ങ് വരും.--മുമ്പത്തെ പദം ഇപ്രകാരമാണ്: മുമ്പത്തെ പദം ഇരട്ട ആണെങ്കിൽ, അടുത്ത പദം  ന്റെ പകുതി ആണ്.--താഴെ പറയുന്ന രീതിയിൽ: ഏതെങ്കിലും പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n-ൽ നിന്ന് ആരംഭിക്കുക. പിന്നെ ഓരോ പദവും   ൽ നിന്നും ലഭിക്കുന്നു.--കോലാറ്റ്സ് അനുമാനം ഒരു ഗണിതശാസ്ത്ര അനുമാനമാണ്, അത് നിർവചിക്കപ്പെട്ട ഒരു ശ്രേണിയെ സംബന്ധിക്കുന്നു.--∙∙∙ഒരു പോസിറ്റീവ് ഇന്റര് നമ്പര് n നല് കിയിട്ട്, ക്രമീകരിച്ച ഒരു ലിസ്റ്റ് തിരിച്ചു തരൂ, അത് കോലാറ്റ്സ് ശ്രേണിയിലെ വിചിത്ര സംഖ്യകളാണ്.--  >>> getOddCollatz 5
--  [1,5]
getOddCollatz :: Int -> [Int]
getOddCollatz n =","getOddCollatz :: Int -> [Int]
getOddCollatz n = sort . filter odd $ collatzSequence n
  where
    collatzSequence 1 = [1]
    collatzSequence x
      | even x    = x : collatzSequence (x `div` 2)
      | otherwise = x : collatzSequence (3 * x + 1)","
main :: IO ()
main = do
  let candidate = getOddCollatz
  if candidate 14 == [1,5,7,11,13,17] then pure () else error ""assertion failed""
  if candidate 5 == [1,5] then pure () else error ""assertion failed""
  if candidate 12 == [1,3,5] then pure () else error ""assertion failed""
  if candidate 1 == [1] then pure () else error ""assertion failed""
  pure ()"
HumanEval_124,mal_Mlym,hs,"--4. തീയതി എംഎം-ഡിഡി-ആയിയി എന്ന ഫോർമാറ്റിലായിരിക്കണം.--3. മാസങ്ങളുടെ എണ്ണം 1ൽ കുറവോ 12ൽ കൂടുതലോ ആകരുത്.--2. മാസങ്ങളായ 1,3,5,7,8,10,12 എന്നിവയുടെ ദിവസങ്ങളുടെ എണ്ണം 1 ൽ കുറവോ 31 ൽ കൂടുതലോ ആയിരിക്കരുത്. മാസങ്ങളായ 4,6,9,11 എന്നിവയുടെ ദിവസങ്ങളുടെ എണ്ണം 1 ൽ കുറവോ 30 ൽ കൂടുതലോ ആയിരിക്കരുത്. മാസമായ 2 ന്റെ ദിവസങ്ങളുടെ എണ്ണം 1 ൽ കുറവോ 29 ൽ കൂടുതലോ ആയിരിക്കരുത്.--1. തീയതി സ്ട്രിംഗ് ശൂന്യമല്ല.--താഴെ പറയുന്ന എല്ലാ നിബന്ധനകളും പാലിച്ചാൽ ഈ തീയതി സാധുവാണ്:--തീയതി സാധുവാണെങ്കിൽ True നൽകുന്നു, അല്ലാത്തപക്ഷം False.--ഒരു നിശ്ചിത തീയതി സ്ട്രിംഗ് പരിശോധിക്കുന്ന ഒരു ഫംഗ്ഷൻ എഴുതണം.--  >>> validDate ""03-11-2000""
--  True
--  >>> validDate ""15-01-2012""
--  False
--  >>> validDate ""04-0-2040""
--  False
--  >>> validDate ""06-04-2020""
--  True
--  >>> validDate ""06/04/2020""
--  False
validDate :: String -> Bool
validDate date =","import Text.Read (readMaybe)
import Data.List.Split (splitOn)

validDate :: String -> Bool
validDate date =
    case splitOn ""-"" date of
        [m, d, y] -> isValidMonthDayYear m d y
        _         -> False

isValidMonthDayYear :: String -> String -> String -> Bool
isValidMonthDayYear m d y =
    case (readMaybe m :: Maybe Int, readMaybe d :: Maybe Int, readMaybe y :: Maybe Int) of
        (Just month, Just day, Just year) -> isValidMonth month && isValidDay month day
        _ -> False

isValidMonth :: Int -> Bool
isValidMonth month = month >= 1 && month <= 12

isValidDay :: Int -> Int -> Bool
isValidDay month day
    | month `elem` [1, 3, 5, 7, 8, 10, 12] = day >= 1 && day <= 31
    | month `elem` [4, 6, 9, 11]           = day >= 1 && day <= 30
    | month == 2                           = day >= 1 && day <= 29
    | otherwise                            = False","
main :: IO ()
main = do
  let candidate = validDate
  if candidate ""03-11-2000"" == True then pure () else error ""assertion failed""
  if candidate ""15-01-2012"" == False then pure () else error ""assertion failed""
  if candidate ""04-0-2040"" == False then pure () else error ""assertion failed""
  if candidate ""06-04-2020"" == True then pure () else error ""assertion failed""
  if candidate ""01-01-2007"" == True then pure () else error ""assertion failed""
  if candidate ""03-32-2011"" == False then pure () else error ""assertion failed""
  if candidate """" == False then pure () else error ""assertion failed""
  if candidate ""04-31-3000"" == False then pure () else error ""assertion failed""
  if candidate ""06-06-2005"" == True then pure () else error ""assertion failed""
  if candidate ""21-31-2000"" == False then pure () else error ""assertion failed""
  if candidate ""04-12-2003"" == True then pure () else error ""assertion failed""
  if candidate ""04122003"" == False then pure () else error ""assertion failed""
  if candidate ""20030412"" == False then pure () else error ""assertion failed""
  if candidate ""2003-04"" == False then pure () else error ""assertion failed""
  if candidate ""2003-04-12"" == False then pure () else error ""assertion failed""
  if candidate ""04-2003"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_126,mal_Mlym,hs,"--ഉദാഹരണങ്ങൾ --നമ്പർ, ഫാൾസ് റിട്ടേൺ ചെയ്യുക. നെഗറ്റീവ് നമ്പറുകളില്ലെന്നും പൂർണ്ണസംഖ്യകൾ മാത്രമേ സ്വീകരിക്കുകയുള്ളൂ എന്നും കരുതുക.--ലിസ്റ്റില് ഒന്നിലധികം ഇരട്ടകളുണ്ടെങ്കില് , അവയെല്ലാം ക്രമം അനുസരിച്ച് ക്രമീകരിക്കണം.--ഒരു സംഖ്യകളുടെ പട്ടിക കൊടുത്താൽ, അവ ക്രമീകരിച്ചാലും ഇല്ലെങ്കിലും, അത് തിരികെ നൽകുക.--  >>> isSorted [5]
--  True
--  >>> isSorted [1,2,3,4,5]
--  True
--  >>> isSorted [1,3,2,4,5]
--  False
--  >>> isSorted [1,2,3,4,5,6]
--  True
--  >>> isSorted [1,2,3,4,5,6,7]
--  True
--  >>> isSorted [1,3,2,4,5,6,7]
--  False
--  >>> isSorted [1,2,2,3,3,4]
--  True
--  >>> isSorted [1,2,2,2,3,4]
--  False
isSorted :: [Int] -> Bool
isSorted lst =","isSorted :: [Int] -> Bool
isSorted lst = go lst Nothing
  where
    go [] _ = True
    go [x] _ = True
    go (x:y:xs) prev
      | x > y = False
      | x == y && prev == Just x = False
      | otherwise = go (y:xs) (Just x)","
main :: IO ()
main = do
  let candidate = isSorted
  if candidate [5] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5] == True then pure () else error ""assertion failed""
  if candidate [1,3,2,4,5] == False then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,6] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,6,7] == True then pure () else error ""assertion failed""
  if candidate [1,3,2,4,5,6,7] == False then pure () else error ""assertion failed""
  if candidate [] == True then pure () else error ""assertion failed""
  if candidate [1] == True then pure () else error ""assertion failed""
  if candidate [3,2,1] == False then pure () else error ""assertion failed""
  if candidate [1,2,2,2,3,4] == False then pure () else error ""assertion failed""
  if candidate [1,2,3,3,3,4] == False then pure () else error ""assertion failed""
  if candidate [1,2,2,3,3,4] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,4] == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_127,mal_Mlym,hs,"--[ഇൻപുട്ട്/ഔട്ട്പുട്ട്] സാമ്പിളുകൾ: --രണ്ട് ഇടവേളകളും പരസ്പരം കൂടിച്ചേരുന്നില്ലെങ്കിൽ, ""NO"" എന്ന് തിരികെ നൽകുക.--ഇല്ലെങ്കിൽ ""ഇല്ല"" എന്ന് തിരികെ നൽകുക.--ഇന്റർസെക്ഷന് ഒരു പ്രധാന സംഖ്യയാണെങ്കിൽ, ""YES"" എന്ന് തിരികെ നൽകുക.--അതിന്റെ നീളം 1 ആണ്, അത് ഒരു പ്രൈം നമ്പർ അല്ല.--ഉദാഹരണത്തിന്, ഇടവേളകളുടെ (1, 3), (2, 4) വിഭജനം (2, 3) ആണ്.--ഒരു പ്രൈം നമ്പറാണ്.--നിങ്ങളുടെ ജോലി ഈ രണ്ടു ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ--ഓരോ ഇടവേളയുടെയും തുടക്കം അതിന്റെ അവസാനത്തെക്കാൾ കുറവോ തുല്യമോ ആണെന്ന് കരുതപ്പെടുന്നു.--തുടക്കവും അവസാനവും ഉൾപ്പെടുന്നു.--ഈ ഇടവേളകൾ അടച്ചവയാണ്, അതിനർത്ഥം ഇടവേള (ആരംഭം, അവസാനം) --ഓരോ ഇടവേളയും ഒരു ജോടി പൂർണ്ണസംഖ്യകളാണ്. ഉദാഹരണത്തിന്, ഇടവേള = (ആരംഭം, അവസാനം) = (1, 2).--നിങ്ങള് ക്ക് രണ്ടു ഇടവേളകളാണ് നല് കിയിരിക്കുന്നത്,--  >>> intersection (1, 2) (2, 3)
--  ""NO""
--  >>> intersection ((-1), 1) (0, 4)
--  ""NO""
--  >>> intersection ((-3), (-1)) ((-5), 5)
--  ""YES""
intersection :: (Int, Int) -> (Int, Int) -> String
intersection interval1 interval2 =","intersection :: (Int, Int) -> (Int, Int) -> String
intersection (start1, end1) (start2, end2) = 
    if intersectionLength > 0 && isPrime intersectionLength
    then ""YES""
    else ""NO""
  where
    intersectionStart = max start1 start2
    intersectionEnd = min end1 end2
    intersectionLength = intersectionEnd - intersectionStart + 1
    
    isPrime :: Int -> Bool
    isPrime n
      | n <= 1 = False
      | n == 2 = True
      | otherwise = null [x | x <- [2..(floor . sqrt . fromIntegral) n], n `mod` x == 0]","
main :: IO ()
main = do
  let candidate = intersection
  if candidate (1, 2) (2, 3) == ""NO"" then pure () else error ""assertion failed""
  if candidate ((-1), 1) (0, 4) == ""NO"" then pure () else error ""assertion failed""
  if candidate ((-3), (-1)) ((-5), 5) == ""YES"" then pure () else error ""assertion failed""
  if candidate ((-2), 2) ((-4), 0) == ""YES"" then pure () else error ""assertion failed""
  if candidate ((-11), 2) ((-1), (-1)) == ""NO"" then pure () else error ""assertion failed""
  if candidate (1, 2) (3, 5) == ""NO"" then pure () else error ""assertion failed""
  if candidate (1, 2) (1, 2) == ""NO"" then pure () else error ""assertion failed""
  if candidate ((-2), (-2)) ((-3), (-2)) == ""NO"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_128,mal_Mlym,hs,"--ഉദാഹരണം: --കുറിപ്പ്: ശൂന്യമായ arr യിൽ ഒന്നും നൽകില്ല.--ലിസ്റ്റിലെ ഓരോ നമ്പറിലും 1, -1 അല്ലെങ്കിൽ 0 എന്ന സംഖ്യ ഉപയോഗിച്ച് പ്രതിനിധീകരിക്കുക.-- പൂര് ണ്ണസംഖ്യകളുടെ ആകെത്തുക, എല്ലാ അടയാളങ്ങളുടെയും ഗുണിതം കൊണ്ട് ഗുണിച്ചാല്--നിങ്ങള് ക്ക് ഒരു സംഖ്യകളുടെ പട്ടിക കിട്ടും, നിങ്ങള് അത് തിരിച്ചു കൊടുക്കണം.--  >>> prodSigns [1,2,2,(-4)]
--  Just (9)
--  >>> prodSigns [0,1]
--  Just (0)
--  >>> prodSigns []
--  Just (Nothing)
prodSigns :: [Int] -> Maybe Int
prodSigns arr =","prodSigns :: [Int] -> Maybe Int
prodSigns [] = Nothing
prodSigns arr = Just $ sum (map abs arr) * product (map signum arr)","
main :: IO ()
main = do
  let candidate = prodSigns
  if candidate [1,2,2,(-4)] == Just ((-9)) then pure () else error ""assertion failed""
  if candidate [0,1] == Just (0) then pure () else error ""assertion failed""
  if candidate [1,1,1,2,3,(-1),1] == Just ((-10)) then pure () else error ""assertion failed""
  if candidate [] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [2,4,1,2,(-1),(-1),9] == Just (20) then pure () else error ""assertion failed""
  if candidate [(-1),1,(-1),1] == Just (4) then pure () else error ""assertion failed""
  if candidate [(-1),1,1,1] == Just ((-4)) then pure () else error ""assertion failed""
  if candidate [(-1),1,1,0] == Just (0) then pure () else error ""assertion failed""
  pure ()"
HumanEval_129,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ഏറ്റവും കുറഞ്ഞ പാത കടന്നുപോകുന്ന സെല്ലുകളിലെ മൂല്യങ്ങളുടെ ഒരു ക്രമീകരിച്ച പട്ടിക തിരികെ നൽകുന്നു.--ഉത്തരം അദ്വിതീയമാണെന്ന് ഉറപ്പുനൽകുന്നു.--lst_A[j] = lst_B[j]  എന്നതിനു സമാനമാണ്.--lst_A[i] < lst_B[i] എന്ന തരത്തിലുള്ളതും, ഏതൊരു j (1 <= j < i) നും നമുക്ക് --lst_B-നേക്കാൾ, മറ്റൊരു വാക്കിൽ പറഞ്ഞാൽ, ഒരു പൂർണ്ണസംഖ്യാ സൂചിക i (1 <= i <= k)  നിലവിലുണ്ട്.--lst_A, lst_B എന്നിവയെ വിളിക്കാം. lst_A എന്നത് നിഘണ്ടുശാസ്ത്രപരമായി കുറവാണ്.--A, B എന്നീ സെല്ലുകളിലെ മൂല്യങ്ങളുടെ ക്രമീകരിച്ച ലിസ്റ്റുകൾ തയ്യാറാക്കിയ ശേഷം പോകുക --ഒരു പാത A (നീളം k) ഒരു പാത B (നീളം k) നേക്കാൾ ചെറുതായി കണക്കാക്കപ്പെടുന്നു --നിങ്ങള് ക്ക് ഗ്രിഡില് നിന്ന് മാറിപ്പോകാന് കഴിയില്ല.--അവയൊക്കെ വേറിട്ടവയായിരിക്കണം.--k നീളമുള്ള ഒരു പാത കൃത്യമായി k സെല്ലുകൾ സന്ദർശിക്കുമെന്നാണ് (അല്ല --യും--മറ്റൊരു വാക്കില് , നിങ്ങള് ക്ക് നിങ്ങളുടെ നിലവിലെ ഘടകങ്ങളുമായി ഒരു വശത്ത് പങ്കിടുന്ന സെല്ലുകളിലേക്ക് പോകാം.--ഏത് സെല്ലിൽ നിന്നും, ഓരോ ഘട്ടത്തിലും നിങ്ങൾക്ക് അയൽ സെല്ലുകളിലേക്ക് നീങ്ങാം,--ഗ്രിഡിലെ k നീളമുള്ള ഏറ്റവും കുറഞ്ഞ പാത കണ്ടെത്തണം.--ഗ്രിഡിലെ സെല്ലുകളിൽ കൃത്യമായി ഒരു തവണയാണ് inclusive കാണപ്പെടുന്നത്.--ഗ്രിഡിലെ ഓരോ സെല്ലിലും ഒരു മൂല്യം അടങ്ങിയിരിക്കുന്നു. [1, N * N] യിലെ ഓരോ പൂർണ്ണസംഖ്യയും--N വരികളും N നിരകളും ഉള്ള ഒരു ഗ്രിഡ് (N >= 2) ഒരു പോസിറ്റീവ് ഇന്റര് എജും k ആണെങ്കിൽ,--  >>> minpath [[1,2,3],[4,5,6],[7,8,9]] 3
--  [1,2,1]
--  >>> minpath [[5,9,3],[4,1,6],[7,8,2]] 1
--  [1]
minpath :: [[Int]] -> Int -> [Int]
minpath grid k =","import Data.List (sort, sortBy)
import Data.Ord (comparing)
import Control.Monad (guard)

minpath :: [[Int]] -> Int -> [Int]
minpath grid k = head $ sort paths
  where
    n = length grid
    cells = [(r, c) | r <- [0..n-1], c <- [0..n-1]]
    neighbors (r, c) = filter inBounds [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]
      where
        inBounds (x, y) = x >= 0 && x < n && y >= 0 && y < n
    value (r, c) = grid !! r !! c
    paths = do
      start <- cells
      findPaths k [start]
    findPaths 1 path = return $ map value path
    findPaths l path@(current:_) = do
      next <- neighbors current
      findPaths (l-1) (next : path)","
main :: IO ()
main = do
  let candidate = minpath
  if candidate [[1,2,3],[4,5,6],[7,8,9]] 3 == [1,2,1] then pure () else error ""assertion failed""
  if candidate [[5,9,3],[4,1,6],[7,8,2]] 1 == [1] then pure () else error ""assertion failed""
  if candidate [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]] 4 == [1,2,1,2] then pure () else error ""assertion failed""
  if candidate [[6,4,13,10],[5,7,12,1],[3,16,11,15],[8,14,9,2]] 7 == [1,10,1,10,1,10,1] then pure () else error ""assertion failed""
  if candidate [[8,14,9,2],[6,4,13,15],[5,7,1,12],[3,10,11,16]] 5 == [1,7,1,7,1] then pure () else error ""assertion failed""
  if candidate [[11,8,7,2],[5,16,14,4],[9,3,15,6],[12,13,10,1]] 9 == [1,6,1,6,1,6,1,6,1] then pure () else error ""assertion failed""
  if candidate [[12,13,10,1],[9,3,15,6],[5,16,14,4],[11,8,7,2]] 12 == [1,6,1,6,1,6,1,6,1,6,1,6] then pure () else error ""assertion failed""
  if candidate [[2,7,4],[3,1,5],[6,8,9]] 8 == [1,3,1,3,1,3,1,3] then pure () else error ""assertion failed""
  if candidate [[6,1,5],[3,8,9],[2,7,4]] 8 == [1,5,1,5,1,5,1,5] then pure () else error ""assertion failed""
  if candidate [[1,2],[3,4]] 10 == [1,2,1,2,1,2,1,2,1,2] then pure () else error ""assertion failed""
  if candidate [[1,3],[3,2]] 10 == [1,3,1,3,1,3,1,3,1,3] then pure () else error ""assertion failed""
  pure ()"
HumanEval_130,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ട്രിബൊനാച്ചി ശ്രേണിയിലെ ആദ്യത്തെ n + 1 സംഖ്യകൾ.--നിങ്ങള് ക്ക് ഒരു നെഗറ്റീവ് അല്ലാത്ത സംഖ്യ n കിട്ടും, നിങ്ങള് ന്റെ ഒരു ലിസ്റ്റ് തിരിച്ചു തരണം.--= 2 + 3 + 3 = 8 --ത്രി) = ത്രി) + ത്രി) + ത്രി)--ത്രി) = 3 --ത്രി2) = 1 + (2 / 2) = 2 --ഉദാഹരണത്തിന്: --n = n-1 + n-2 + n-1 ആണെങ്കിൽ n ഒരു ഒറ്റസംഖ്യയാണ്.--ത്രികോണം n) = 1 + n / 2, n ഇരട്ട ആണെങ്കിൽ.--ത്രി) = 3 --ട്രിബോണാച്ചി ശ്രേണിയുടെ നിർവചനം താഴെ പറയുന്നതുമാണ്:--എന്നിരുന്നാലും, ആളുകൾക്ക് അറിയാത്തത് ട്രിബൊനാച്ചി ശ്രേണിയാണ്.--ഫിബോനാച്ചി ശ്രേണിയെ കുറിച്ച് എല്ലാവർക്കും അറിയാം, അത് ഗണിതശാസ്ത്രജ്ഞർ ആഴത്തിൽ പഠിച്ചു.--  >>> tri 3
--  [1,3,2,8]
tri :: Int -> [Int]
tri n =","tri :: Int -> [Int]
tri n = map tribonacci [0..n]
  where
    -- Define the recursive function to calculate the tribonacci value for a given n
    tribonacci :: Int -> Int
    tribonacci 0 = 1
    tribonacci 1 = 3
    tribonacci x
      | even x    = 1 + x `div` 2
      | otherwise = tribonacci (x - 1) + tribonacci (x - 2) + tribonacci (x + 1)","
main :: IO ()
main = do
  let candidate = tri
  if candidate 3 == [1,3,2,8] then pure () else error ""assertion failed""
  if candidate 4 == [1,3,2,8,3] then pure () else error ""assertion failed""
  if candidate 5 == [1,3,2,8,3,15] then pure () else error ""assertion failed""
  if candidate 6 == [1,3,2,8,3,15,4] then pure () else error ""assertion failed""
  if candidate 7 == [1,3,2,8,3,15,4,24] then pure () else error ""assertion failed""
  if candidate 8 == [1,3,2,8,3,15,4,24,5] then pure () else error ""assertion failed""
  if candidate 9 == [1,3,2,8,3,15,4,24,5,35] then pure () else error ""assertion failed""
  if candidate 20 == [1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11] then pure () else error ""assertion failed""
  if candidate 0 == [1] then pure () else error ""assertion failed""
  if candidate 1 == [1,3] then pure () else error ""assertion failed""
  pure ()"
HumanEval_131,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --എല്ലാ അക്കങ്ങളും ജോഡി ആണെങ്കിൽ 0 തിരികെ നൽകുക.--∙∙∙ഒരു പോസിറ്റീവ് ഇന്റര് നമ്പര് n കൊടുത്താല് , അത് കൊണ്ട് കിട്ടുന്ന അസംഖ്യം അക്കങ്ങളുടെ ഗുണനം തിരിച്ച് കൊടുക്കുക.--  >>> digits 1
--  1
--  >>> digits 4
--  0
--  >>> digits 235
--  15
digits :: Int -> Int
digits n =","digits :: Int -> Int
digits n
  | null oddDigits = 0
  | otherwise      = product oddDigits
  where
    oddDigits = [digit | digit <- map (read . (:[])) (show n), odd digit]","
main :: IO ()
main = do
  let candidate = digits
  if candidate 5 == 5 then pure () else error ""assertion failed""
  if candidate 54 == 5 then pure () else error ""assertion failed""
  if candidate 120 == 1 then pure () else error ""assertion failed""
  if candidate 5014 == 5 then pure () else error ""assertion failed""
  if candidate 98765 == 315 then pure () else error ""assertion failed""
  if candidate 5576543 == 2625 then pure () else error ""assertion failed""
  if candidate 2468 == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_132,mal_Mlym,hs,"--യില് കുറഞ്ഞത് ഒരു ബ്രാക്കറ്റ് എങ്കിലും കൂട്ടിയിണക്കിയിട്ടുണ്ടാവണം.--ബ്രാക്കറ്റുകളുടെ സാധുവായ ഒരു അനുക്രമം ഉണ്ടെങ്കിൽ മാത്രമേ ഫംഗ്ഷൻ True എന്ന് റിട്ടേൺ ചെയ്യാവൂ.-- ഒരു സ്ട്രിംഗ് ഇൻപുട്ടായി എടുക്കുന്ന ഒരു ഫങ്ഷൻ ഉണ്ടാക്കുക, അതിൽ ചതുരാകൃതിയിലുള്ള ബ്രാക്കറ്റുകൾ മാത്രമേ ഉള്ളൂ.--  >>> isNested ""[[]]""
--  True
--  >>> isNested ""[]]]]]]][[[[[]""
--  False
--  >>> isNested ""[][]""
--  False
--  >>> isNested ""[]""
--  False
--  >>> isNested ""[[][]]""
--  True
--  >>> isNested ""[[]][[""
--  True
isNested :: String -> Bool
isNested string =","isNested :: String -> Bool
isNested string = go string 0 False
  where
    go [] _ nested = nested
    go (x:xs) depth nested
      | x == '['  = go xs (depth + 1) (nested || depth >= 1)
      | x == ']' && depth > 0 = go xs (depth - 1) nested
      | otherwise = go xs depth nested","
main :: IO ()
main = do
  let candidate = isNested
  if candidate ""[[]]"" == True then pure () else error ""assertion failed""
  if candidate ""[]]]]]]][[[[[]"" == False then pure () else error ""assertion failed""
  if candidate ""[][]"" == False then pure () else error ""assertion failed""
  if candidate ""[]"" == False then pure () else error ""assertion failed""
  if candidate ""[[[[]]]]"" == True then pure () else error ""assertion failed""
  if candidate ""[]]]]]]]]]]"" == False then pure () else error ""assertion failed""
  if candidate ""[][][[]]"" == True then pure () else error ""assertion failed""
  if candidate ""[[]"" == False then pure () else error ""assertion failed""
  if candidate ""[]]"" == False then pure () else error ""assertion failed""
  if candidate ""[[]][["" == True then pure () else error ""assertion failed""
  if candidate ""[[][]]"" == True then pure () else error ""assertion failed""
  if candidate """" == False then pure () else error ""assertion failed""
  if candidate ""[[[[[[[["" == False then pure () else error ""assertion failed""
  if candidate ""]]]]]]]]"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_133,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ലിസ്റ്റിലെ ഓരോ എലമെന്റും ആദ്യം മുകളിലെ int{}--നിങ്ങള് ക്ക് നല് കിയിട്ടുള്ള ലിസ്റ്റിലെ സംഖ്യകളുടെ ചതുരശ്ര സംഖ്യകളുടെ തുക നല് കണം, --നിങ്ങള് ക്ക് ഒരു നമ്പര് ലിസ്റ്റ് കിട്ടും.--  >>> lst [1.0,2.0,3.0]
--  14
--  >>> lst [1.0,4.0,9.0]
--  98
--  >>> lst [1.0,3.0,5.0,7.0]
--  84
--  >>> lst [1.4,4.2,0.0]
--  29
--  >>> lst [-2.4,1.0,1.0]
--  6
sumSquares :: [Float] -> Int
sumSquares lst =","import Data.List (foldl')
import Prelude hiding (sum)

sumSquares :: [Float] -> Int
sumSquares lst = foldl' (\acc x -> acc + ceiling x ^ 2) 0 lst","
main :: IO ()
main = do
  let candidate = sumSquares
  if candidate [1.0,2.0,3.0] == 14 then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0] == 14 then pure () else error ""assertion failed""
  if candidate [1.0,3.0,5.0,7.0] == 84 then pure () else error ""assertion failed""
  if candidate [1.4,4.2,0.0] == 29 then pure () else error ""assertion failed""
  if candidate [-2.4,1.0,1.0] == 6 then pure () else error ""assertion failed""
  if candidate [100.0,1.0,15.0,2.0] == 10230 then pure () else error ""assertion failed""
  if candidate [10000.0,10000.0] == 200000000 then pure () else error ""assertion failed""
  if candidate [-1.4,4.6,6.3] == 75 then pure () else error ""assertion failed""
  if candidate [-1.4,17.9,18.9,19.9] == 1086 then pure () else error ""assertion failed""
  if candidate [0.0] == 0 then pure () else error ""assertion failed""
  if candidate [-1.0] == 1 then pure () else error ""assertion failed""
  if candidate [-1.0,1.0,0.0] == 2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_134,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --കുറിപ്പ്: ""വചനം"" എന്നത് സ്പെയ്സ് കൊണ്ട് വേർതിരിക്കുന്ന പ്രതീകങ്ങളുടെ ഒരു കൂട്ടമാണ്.--ഒരു വാക്കിന്റെ ഭാഗം, അല്ലെങ്കിൽ തെറ്റായത്.--ഒരു സ്ട്രിങ്ങിന്റെ അക്ഷരമാലയിലെ പ്രതീകമാണ് --അവസാനത്തെ പ്രതീകം  ആണെങ്കിൽ True എന്ന് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ ഉണ്ടാക്കുക.--  >>> checkIfLastCharIsALetter ""apple pie""
--  False
--  >>> checkIfLastCharIsALetter ""apple pi e""
--  True
--  >>> checkIfLastCharIsALetter ""apple pi e ""
--  False
--  >>> checkIfLastCharIsALetter """"
--  False
checkIfLastCharIsALetter :: String -> Bool
checkIfLastCharIsALetter txt =","checkIfLastCharIsALetter :: String -> Bool
checkIfLastCharIsALetter txt = 
    let trimmed = reverse . dropWhile (== ' ') $ reverse txt
    in case trimmed of
        [] -> False
        (x:xs) -> isAlpha x && (null xs || head xs == ' ')","
main :: IO ()
main = do
  let candidate = checkIfLastCharIsALetter
  if candidate ""apple"" == False then pure () else error ""assertion failed""
  if candidate ""apple pi e"" == True then pure () else error ""assertion failed""
  if candidate ""eeeee"" == False then pure () else error ""assertion failed""
  if candidate ""A"" == True then pure () else error ""assertion failed""
  if candidate ""Pumpkin pie "" == False then pure () else error ""assertion failed""
  if candidate ""Pumpkin pie 1"" == False then pure () else error ""assertion failed""
  if candidate """" == False then pure () else error ""assertion failed""
  if candidate ""eeeee e "" == False then pure () else error ""assertion failed""
  if candidate ""apple pie"" == False then pure () else error ""assertion failed""
  if candidate ""apple pi e "" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_135,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ഇരട്ട മൂല്യങ്ങൾ--അത്തരം ഒരു ഘടകം നിലവിലില്ലെങ്കിൽ -1 എന്ന നമ്പർ നൽകുക.--തൊട്ടു മുമ്പുള്ള മൂലകത്തേക്കാൾ വലുതോ തുല്യമോ അല്ല.--ഒരു മൂലകത്തിന്റെ ഏറ്റവും വലിയ സൂചിക തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക.--  >>> canArrange [1,2,4,3,5]
--  3
--  >>> canArrange [1,2,3]
--  (-1)
canArrange :: [Int] -> Int
canArrange arr =","canArrange :: [Int] -> Int
canArrange arr = go arr (-1) 0
  where
    go [] maxIdx _ = maxIdx
    go [_] maxIdx _ = maxIdx
    go (x:y:xs) maxIdx idx
      | x >= y    = go (y:xs) idx (idx + 1)
      | otherwise = go (y:xs) maxIdx (idx + 1)","
main :: IO ()
main = do
  let candidate = canArrange
  if candidate [1,2,4,3,5] == 3 then pure () else error ""assertion failed""
  if candidate [1,2,4,5] == (-1) then pure () else error ""assertion failed""
  if candidate [1,4,2,5,6,7,8,9,10] == 2 then pure () else error ""assertion failed""
  if candidate [4,8,5,7,3] == 4 then pure () else error ""assertion failed""
  if candidate [] == (-1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_136,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --പോസിറ്റീവ് ആയതോ നെഗറ്റീവ് ആയതോ ആയ സംഖ്യകളൊന്നും ഇല്ലെങ്കിൽ, അവയെ ഒന്നും എന്ന രീതിയിൽ റിട്ടേൺ ചെയ്യുക.--ഒരു പട്ടികയിലെ പോസിറ്റീവ് ഇന്റീജറുകളുടെ എണ്ണം.--ഏറ്റവും വലിയ നെഗറ്റീവ് ഇന്റഗ്രൽ ആണ്, ഏറ്റവും ചെറിയത് b ആണ്.--ഒരു ട്യുപ്പൽ (a, b) തിരികെ നൽകുന്ന ഒരു ഫങ്ഷൻ ഉണ്ടാക്കുക, അവിടെ 'a' --  >>> largestSmallestIntegers [2,4,1,3,5,7]
--  (Nothing, 1)
--  >>> largestSmallestIntegers []
--  (Nothing, Nothing)
--  >>> largestSmallestIntegers [0]
--  (Nothing, Nothing)
largestSmallestIntegers :: [Int] -> (Maybe Int, Maybe Int)
largestSmallestIntegers lst =","largestSmallestIntegers :: [Int] -> (Maybe Int, Maybe Int)
largestSmallestIntegers lst = (largestNegative, smallestPositive)
  where
    negatives = filter (< 0) lst
    positives = filter (> 0) lst
    largestNegative = if null negatives then Nothing else Just (maximum negatives)
    smallestPositive = if null positives then Nothing else Just (minimum positives)","
main :: IO ()
main = do
  let candidate = largestSmallestIntegers
  if candidate [2,4,1,3,5,7] == (Nothing, 1) then pure () else error ""assertion failed""
  if candidate [2,4,1,3,5,7,0] == (Nothing, 1) then pure () else error ""assertion failed""
  if candidate [1,3,2,4,5,6,(-2)] == ((-2), 1) then pure () else error ""assertion failed""
  if candidate [4,5,3,6,2,7,(-7)] == ((-7), 2) then pure () else error ""assertion failed""
  if candidate [7,3,8,4,9,2,5,(-9)] == ((-9), 2) then pure () else error ""assertion failed""
  if candidate [] == (Nothing, Nothing) then pure () else error ""assertion failed""
  if candidate [0] == (Nothing, Nothing) then pure () else error ""assertion failed""
  if candidate [(-1),(-3),(-5),(-6)] == ((-1), Nothing) then pure () else error ""assertion failed""
  if candidate [(-1),(-3),(-5),(-6),0] == ((-1), Nothing) then pure () else error ""assertion failed""
  if candidate [(-6),(-4),(-4),(-3),1] == ((-3), 1) then pure () else error ""assertion failed""
  if candidate [(-6),(-4),(-4),(-3),(-100),1] == ((-3), 1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_138,mal_Mlym,hs,"--ഉദാഹരണം --∙∙∙നമ്പർ n നെ നാലു പോസിറ്റീവ് സംഖ്യകളുടെ കൂട്ടമായി എഴുതാനാകുമോ എന്ന് വിലയിരുത്തുക--  >>> isEqualToSumEven 4
--  False
--  >>> isEqualToSumEven 6
--  False
--  >>> isEqualToSumEven 8
--  True
isEqualToSumEven :: Int -> Bool
isEqualToSumEven n =","isEqualToSumEven :: Int -> Bool
isEqualToSumEven n = n > 0 && n `mod` 2 == 0 && n >= 8","
main :: IO ()
main = do
  let candidate = isEqualToSumEven
  if candidate 4 == False then pure () else error ""assertion failed""
  if candidate 6 == False then pure () else error ""assertion failed""
  if candidate 8 == True then pure () else error ""assertion failed""
  if candidate 10 == True then pure () else error ""assertion failed""
  if candidate 11 == False then pure () else error ""assertion failed""
  if candidate 12 == True then pure () else error ""assertion failed""
  if candidate 13 == False then pure () else error ""assertion failed""
  if candidate 16 == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_139,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --n > 0 --ബ്രസീലിയൻ_ഫാക്ടോറിയൽ (n) = n! * (n-1)! * (n-2)! * . . . * 1! --ബ്രസീലിയൻ ഫാക്ടോറിയൽ ഇങ്ങനെ നിർവചിക്കപ്പെടുന്നു:--  >>> specialFactorial 4
--  288
--  The function will receive an integer as input and should return the special
--  factorial of this integer.
specialFactorial :: Int -> Int
specialFactorial n =","specialFactorial :: Int -> Int
specialFactorial n = product [factorial x | x <- [1..n]]
  where
    factorial 0 = 1
    factorial k = k * factorial (k - 1)","
main :: IO ()
main = do
  let candidate = specialFactorial
  if candidate 4 == 288 then pure () else error ""assertion failed""
  if candidate 5 == 34560 then pure () else error ""assertion failed""
  if candidate 7 == 125411328000 then pure () else error ""assertion failed""
  if candidate 1 == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_140,mal_Mlym,hs,"--പിന്നെ തുടർച്ചയായ എല്ലാ സ്പെയ്സുകളും മാറ്റി - --ഒരു സ്ട്രിങിന് തുടർച്ചയായി 2 സ്പെയ്സുകളിലധികം ഉണ്ടെങ്കിൽ,--ഒരു ടെക്സ്റ്റ് സ്ട്രിംഗ് തന്നാൽ, അതിലെ എല്ലാ സ്പെയ്സുകളും അടിവരയിടുക,--  >>> fixSpaces "" Example""
--  ""Example""
--  >>> fixSpaces "" Example 1""
--  ""Example_1""
--  >>> fixSpaces "" Example 2""
--  ""_Example_2""
--  >>> fixSpaces "" Example 3""
--  ""_Example-3""
fixSpaces :: String -> String
fixSpaces text =","fixSpaces :: String -> String
fixSpaces text = concatMap replaceSpaces (groupSpaces text)
  where
    groupSpaces :: String -> [String]
    groupSpaces [] = []
    groupSpaces xs@(x:_) = let (g, rest) = span (== x) xs in g : groupSpaces rest

    replaceSpaces :: String -> String
    replaceSpaces spaces@(x:_)
      | x == ' ' && length spaces > 2 = ""-""
      | x == ' ' = replicate (length spaces) '_'
      | otherwise = spaces","
main :: IO ()
main = do
  let candidate = fixSpaces
  if candidate ""Example"" == ""Example"" then pure () else error ""assertion failed""
  if candidate ""Mudasir Hanif "" == ""Mudasir_Hanif_"" then pure () else error ""assertion failed""
  if candidate ""Yellow Yellow  Dirty  Fellow"" == ""Yellow_Yellow__Dirty__Fellow"" then pure () else error ""assertion failed""
  if candidate ""Exa   mple"" == ""Exa-mple"" then pure () else error ""assertion failed""
  if candidate ""   Exa 1 2 2 mple"" == ""-Exa_1_2_2_mple"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_141,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --- ഡോട്ടിന് ശേഷം വരുന്ന സബ് സ്ട്രിംഗ് ഇവരിൽ ഒരാളായിരിക്കണം: ['txt', 'exe', 'dll'] --ലാറ്റിൻ അക്ഷരമാലയിലെ അക്ഷരങ്ങൾ ('a'-'z' and 'A'-'Z').--- ഡോട്ടിന് മുമ്പുള്ള സബ്സ്ട്രിംഗ് ശൂന്യമായിരിക്കരുത്, അത് തുടങ്ങുന്നത്  എന്ന അക്ഷരത്തിൽ നിന്നാണ്.--- ഫയലിന്റെ പേരില് ഒരു ഡോട്ട് മാത്രമേ ഉള്ളൂ.--- ഫയലിന്റെ പേരിന് മൂന്ന് അക്കങ്ങളിൽ കൂടുതലാകരുത് ('0'-'9').--യും--താഴെ പറയുന്ന എല്ലാ വ്യവസ്ഥകളും പാലിച്ചാൽ മാത്രമേ ഒരു ഫയലിന്റെ പേര് സാധുവായതായി കണക്കാക്കുകയുള്ളൂ.--ഫയലിന്റെ പേര് സാധുവാണെങ്കിൽ 'അതെ', അല്ലാത്തപക്ഷം 'ഇല്ല' എന്ന് നൽകുന്നു.--ഒരു ഫയലിന്റെ പേര് പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക, അത് --  >>> fileNameCheck ""example.txt""
--  ""Yes""
--  >>> fileNameCheck ""1example.dll""
--  ""No""
fileNameCheck :: String -> String
fileNameCheck file_name =","import Data.Char (isDigit, isLetter)

fileNameCheck :: String -> String
fileNameCheck file_name 
  | countDots /= 1 = ""No""
  | length digits > 3 = ""No""
  | null beforeDot || not (isLetter (head beforeDot)) = ""No""
  | afterDot `notElem` validExtensions = ""No""
  | otherwise = ""Yes""
  where 
    (beforeDot, afterDot) = span (/= '.') file_name
    countDots = length $ filter (== '.') file_name
    digits = filter isDigit file_name
    validExtensions = [""txt"", ""exe"", ""dll""]
    afterDot = if null dotAndAfter then """" else tail dotAndAfter
    dotAndAfter = dropWhile (/= '.') file_name","
main :: IO ()
main = do
  let candidate = fileNameCheck
  if candidate ""example.txt"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""1example.dll"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""s1sdf3.asd"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""K.dll"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""MY16FILE3.exe"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""His12FILE94.exe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""_Y.txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""?aREYA.exe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""/this_is_valid.dll"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""this_is_valid.wow"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""this_is_valid.txt"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""this_is_valid.txtexe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""#this2_i4s_5valid.ten"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""@this1_is6_valid.exe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""this_is_12valid.6exe4.txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""all.exe.txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""I563_No.exe"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""Is3youfault.txt"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""no_one#knows.dll"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""1I563_Yes3.exe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""I563_Yes3.txtt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""final..txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""final132"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""_f4indsartal132."" == ""No"" then pure () else error ""assertion failed""
  if candidate "".txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""s."" == ""No"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_142,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ലിസ്റ്റിലെ എൻട്രികൾ മാറ്റുക, അവയുടെ ഇൻഡെക്സുകൾ 3 അല്ലെങ്കിൽ 4 ന്റെ ഗുണിതമല്ല. ഫംഗ്ഷൻ എല്ലാ എൻട്രികളുടെയും തുക നൽകും.--3 ന്റെ ഗുണിതവും അതിന്റെ സൂചിക 4 ന്റെ ഗുണിതമാണെങ്കിൽ പൂർണ്ണസംഖ്യ എൻട്രി ക്യൂബ് ചെയ്യും.--ഈ ഫംഗ്ഷൻ പൂർണ്ണസംഖ്യകളുടെ ഒരു ലിസ്റ്റ് എടുക്കും. ലിസ്റ്റിലെ എല്ലാ എൻട്രികൾക്കും, ഫംഗ്ഷൻ അതിന്റെ സൂചിക a ആണെങ്കിൽ പൂർണ്ണസംഖ്യ എൻട്രിയുടെ ചതുരശ്രണം എടുക്കണം.--"" --  >>> lst
--  [1,2,3]
--  >>> lst
--  []
--  >>> lst
--  [(-1),(-5),2,(-1),(-5)]
sumSquares :: [Int] -> Int
sumSquares lst =","sumSquares :: [Int] -> Int
sumSquares lst = sum $ zipWith transform [0..] lst
  where
    transform idx x
      | idx `mod` 3 == 0 = x * x
      | idx `mod` 4 == 0 = x * x * x
      | otherwise        = x","
main :: IO ()
main = do
  let candidate = sumSquares
  if candidate [1,2,3] == 6 then pure () else error ""assertion failed""
  if candidate [1,4,9] == 14 then pure () else error ""assertion failed""
  if candidate [] == 0 then pure () else error ""assertion failed""
  if candidate [1,1,1,1,1,1,1,1,1] == 9 then pure () else error ""assertion failed""
  if candidate [(-1),(-1),(-1),(-1),(-1),(-1),(-1),(-1),(-1)] == (-3) then pure () else error ""assertion failed""
  if candidate [0] == 0 then pure () else error ""assertion failed""
  if candidate [(-1),(-5),2,(-1),(-5)] == (-126) then pure () else error ""assertion failed""
  if candidate [(-56),(-99),1,0,(-2)] == 3030 then pure () else error ""assertion failed""
  if candidate [(-1),0,0,0,0,0,0,0,(-1)] == 0 then pure () else error ""assertion failed""
  if candidate [(-16),(-9),(-2),36,36,26,(-20),25,(-40),20,(-4),12,(-26),35,37] == (-14196) then pure () else error ""assertion failed""
  if candidate [(-1),(-3),17,(-1),(-15),13,(-1),14,(-14),(-12),(-5),14,(-14),6,13,11,16,16,4,10] == (-1448) then pure () else error ""assertion failed""
  pure ()"
HumanEval_143,mal_Mlym,hs,"--ഉദാഹരണം 1:--പുതിയ സ്ട്രിങ്ങിലെ വാക്കുകളുടെ ക്രമം ഒറിജിനലിലേതിന് സമാനമായിരിക്കണം.--ന്റെ നീളം പ്രൈം നമ്പറുകളാണ്,-- എന്ന വാക്യത്തിന്റെ വാക്കുകൾ അടങ്ങിയ ഒരു സ്ട്രിംഗ് തിരികെ നൽകണം.--വാക്യത്തില് ചില വാക്കുകള് സ്പെയ്സ് കൊണ്ട് വേര് പിരിയുന്നു,--ഒരു വാക്യത്തെ പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് നിങ്ങൾക്ക് ലഭിക്കുന്നു,--  >>> wordsInSentence ""This is a test""
--  ""is""
--  Example 2:
--  >>> wordsInSentence ""lets go for swimming""
--  ""go for""
--  Constraints:
--  * 1 <= len(sentence) <= 100
--  * sentence contains only letters
wordsInSentence :: String -> String
wordsInSentence sentence =","import Data.List (intercalate)

wordsInSentence :: String -> String
wordsInSentence sentence = intercalate "" "" $ filter (isPrime . length) (words sentence)

isPrime :: Int -> Bool
isPrime n | n < 2     = False
          | otherwise = null [ x | x <- [2..isqrt n], n `mod` x == 0 ]

isqrt :: Int -> Int
isqrt = floor . sqrt . fromIntegral","
main :: IO ()
main = do
  let candidate = wordsInSentence
  if candidate ""This is a test"" == ""is"" then pure () else error ""assertion failed""
  if candidate ""lets go for swimming"" == ""go for"" then pure () else error ""assertion failed""
  if candidate ""there is no place available here"" == ""there is no place"" then pure () else error ""assertion failed""
  if candidate ""Hi I am Hussein"" == ""Hi am Hussein"" then pure () else error ""assertion failed""
  if candidate ""go for it"" == ""go for it"" then pure () else error ""assertion failed""
  if candidate ""here"" == """" then pure () else error ""assertion failed""
  if candidate ""here is"" == ""is"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_144,mal_Mlym,hs,"--x, n എന്നിവ സാധുവായ ഭിന്നസംഖ്യകളാണെന്നും അവയ്ക്ക് നാമകരണമായി പൂജ്യമില്ലെന്നും കരുതാം.--ഇവിടെ സംഖ്യയും നാമവിശേഷണവും പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളാണ്.--x ഉം n ഉം ഒരു ഭിന്നസംഖ്യയുടെ സ്ട്രിംഗ് പ്രതിനിധീകരണമാണ്, അവയ്ക്ക് ഇനിപ്പറയുന്ന ഫോർമാറ്റ് ഉണ്ട്,--x * n. x * n ഒരു പൂർണ്ണസംഖ്യയായി വിലയിരുത്തുകയും False  ആയി വിലയിരുത്തുകയും ചെയ്താൽ ഫംഗ്ഷൻ True ആയി നൽകുന്നു.--∙∙നിങ്ങളുടെ ജോലി ഈ എക്സ്പ്രഷനെ ലളിതമാക്കുന്ന ഒരു ഫങ്ഷൻ നടപ്പിലാക്കുക എന്നതാണ്--  >>> simplify ""1/5"" ""5/1""
--  True
--  >>> simplify ""1/6"" ""2/1""
--  False
--  >>> simplify ""7/10"" ""10/2""
--  False
simplify :: String -> String -> Bool
simplify x n =","import Data.Ratio (denominator, numerator, (%))

simplify :: String -> String -> Bool
simplify x n =
  let (xNum, xDen) = toFraction x
      (nNum, nDen) = toFraction n
      result = (xNum * nNum) % (xDen * nDen)
  in denominator result == 1

toFraction :: String -> (Integer, Integer)
toFraction s =
  let (numStr, _:denStr) = break (=='/') s
  in (read numStr, read denStr)","
main :: IO ()
main = do
  let candidate = simplify
  if candidate ""1/5"" ""5/1"" == True then pure () else error ""assertion failed""
  if candidate ""1/6"" ""2/1"" == False then pure () else error ""assertion failed""
  if candidate ""5/1"" ""3/1"" == True then pure () else error ""assertion failed""
  if candidate ""7/10"" ""10/2"" == False then pure () else error ""assertion failed""
  if candidate ""2/10"" ""50/10"" == True then pure () else error ""assertion failed""
  if candidate ""7/2"" ""4/2"" == True then pure () else error ""assertion failed""
  if candidate ""11/6"" ""6/1"" == True then pure () else error ""assertion failed""
  if candidate ""2/3"" ""5/2"" == False then pure () else error ""assertion failed""
  if candidate ""5/2"" ""3/5"" == False then pure () else error ""assertion failed""
  if candidate ""2/4"" ""8/4"" == True then pure () else error ""assertion failed""
  if candidate ""2/4"" ""4/2"" == True then pure () else error ""assertion failed""
  if candidate ""1/5"" ""5/1"" == True then pure () else error ""assertion failed""
  if candidate ""1/5"" ""1/5"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_145,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --അവയെ യഥാക്രമം ക്രമീകരിക്കുക.--കുറിപ്പ്: നിരവധി ഇനങ്ങള് ഉണ്ടെങ്കില് അവയുടെ സംഖ്യകളുടെ തുക സമാനമാണെങ്കില്,--അവരുടെ അക്കങ്ങളുടെ സംഖ്യ അനുസരിച്ച് ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം ക്രമം--∙∙∙നമുക്കുള്ള സംഖ്യകളുടെ പട്ടികയെ തരം തിരിക്കുന്ന ഒരു ഫങ്ഷൻ എഴുതുക--  >>> orderByPoints [1,11,(-1),(-11),(-12)]
--  [(-1),(-11),1,(-12),11]
--  >>> orderByPoints []
--  []
orderByPoints :: [Int] -> [Int]
orderByPoints nums =","import Data.List (sortBy)
import Data.Function (on)

orderByPoints :: [Int] -> [Int]
orderByPoints nums = map snd $ sortBy (compare `on` fst) indexedNums
  where
    sumOfDigits :: Int -> Int
    sumOfDigits n = sum (map (abs . read . return) $ show $ abs n)
    
    indexedNums :: [(Int, Int)]
    indexedNums = zip (map sumOfDigits nums) nums","
main :: IO ()
main = do
  let candidate = orderByPoints
  if candidate [1,11,(-1),(-11),(-12)] == [(-1),(-11),1,(-12),11] then pure () else error ""assertion failed""
  if candidate [1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46] == [0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,(-11),(-32),43,54,(-98),2,(-3)] == [(-3),(-32),(-98),(-11),1,2,43,54] then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,6,7,8,9,10,11] == [1,10,2,11,3,4,5,6,7,8,9] then pure () else error ""assertion failed""
  if candidate [0,6,6,(-76),(-21),23,4] == [(-76),(-21),0,4,23,6,6] then pure () else error ""assertion failed""
  pure ()"
HumanEval_146,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --ഒരു സംഖ്യയുടെ ആദ്യത്തെയും അവസാനത്തെയും അക്കം ഒറ്റക്കാണ് (1, 3, 5, 7, 9).--പട്ടികയിലെ 10 ല് കൂടുതലുള്ള മൂലകങ്ങളുടെ എണ്ണം, രണ്ടും --ഒരു സംഖ്യകളുടെ പട്ടികയെ ഇൻപുട്ടായി എടുത്ത് റിട്ടേൺ ചെയ്യുന്ന ഒരു ഫങ്ഷൻ എഴുതുക.--  >>> specialfilter [15,(-73),14,(-15)]
--  1
--  >>> specialfilter [33,(-2),(-3),45,21,109]
--  2
specialfilter :: [Int] -> Int
specialfilter nums =","specialfilter :: [Int] -> Int
specialfilter nums = length $ filter isSpecial nums
  where
    isSpecial n = n > 10 && isOddFirstAndLast (abs n)

    isOddFirstAndLast :: Int -> Bool
    isOddFirstAndLast x = isOddDigit firstDigit && isOddDigit lastDigit
      where
        xStr = show x
        firstDigit = head xStr
        lastDigit = last xStr

    isOddDigit :: Char -> Bool
    isOddDigit c = c `elem` ""13579""","
main :: IO ()
main = do
  let candidate = specialfilter
  if candidate [5,(-2),1,(-5)] == 0 then pure () else error ""assertion failed""
  if candidate [15,(-73),14,(-15)] == 1 then pure () else error ""assertion failed""
  if candidate [33,(-2),(-3),45,21,109] == 2 then pure () else error ""assertion failed""
  if candidate [43,(-12),93,125,121,109] == 4 then pure () else error ""assertion failed""
  if candidate [71,(-2),(-33),75,21,19] == 3 then pure () else error ""assertion failed""
  if candidate [1] == 0 then pure () else error ""assertion failed""
  if candidate [] == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_147,mal_Mlym,hs,"--ഉദാഹരണം:--പിന്നെ a[i] + a[j] + a[k] എന്നത് 3 ന്റെ ഗുണിതമാണ്.--i < j < k,  എന്നതിന്റെ ട്രിപ്പിൾ എണ്ണം (a[i], a[j], a[k]) തിരികെ നൽകുക--ഓരോ i-നും (1 ≤ i ≤ n) a[i] = i * i - i + 1 ന്റെ മൂല്യം--∙∙നിനക്ക് ഒരു പോസിറ്റീവ് ഇന്റര് നമ്പര് n കിട്ടും. നീ ഒരു ഇന്റര് നമ്പര് ലിസ്റ്റ് ഉണ്ടാക്കണം നീളം n ∙--  >>> getMaxTriples 5
--  1
--  Explanation: 
--  a = [1, 3, 7, 13, 21]
--  The only valid triple is (1, 7, 13).
getMaxTriples :: Int -> Int
getMaxTriples n =","getMaxTriples :: Int -> Int
getMaxTriples n = length [(a[i], a[j], a[k]) | i <- [0..n-1], j <- [i+1..n-1], k <- [j+1..n-1], (a !! i + a !! j + a !! k) `mod` 3 == 0]
  where
    a = [i * i - i + 1 | i <- [1..n]]","
main :: IO ()
main = do
  let candidate = getMaxTriples
  if candidate 5 == 1 then pure () else error ""assertion failed""
  if candidate 6 == 4 then pure () else error ""assertion failed""
  if candidate 10 == 36 then pure () else error ""assertion failed""
  if candidate 100 == 53361 then pure () else error ""assertion failed""
  pure ()"
HumanEval_149,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --എല്ലാ വാക്കുകളും ഒരേ നീളമുള്ളതാണെന്ന് നിങ്ങള് വിചാരിച്ചേക്കാം.--ഫങ്ഷൻ ഒരു പട്ടിക തിരികെ നൽകണം.--രണ്ടു വാക്കുകള് ക്ക് ഒരേ നീളം ഉണ്ടെങ്കില് , പട്ടിക അക്ഷരമാലാ ക്രമത്തില് അടുക്കുക.--ആ നിയമം അനുസരിച്ച് പട്ടിക തിരിച്ച് കൊടുക്കണം.--ലിസ്റ്റിന്റെ ക്രമം ഓരോ വാക്കിന്റെയും നീളത്തിനനുസരിച്ച് ഉയരുകയാണ് വേണ്ടത്, പിന്നെ നിങ്ങള് --ഇതില് തനിപ്പകർപ്പുകള് ഉണ്ടായിരിക്കാം.--ലിസ്റ്റ് എപ്പോഴും സ്ട്രിങ്ങുകളുടെ ഒരു ലിസ്റ്റാണ്, ഒരിക്കലും സംഖ്യകളുടെ ഒരു ലിസ്റ്റല്ല,--  ഒരു തരംതിരിക്കപ്പെട്ട പട്ടികയുമായി ഫലമായി ലഭിച്ച പട്ടിക തിരികെ നൽകുന്നു,--അതിൽ നിന്നും അപൂർവ്വ ദൈർഘ്യമുള്ള സ്ട്രിങ്ങുകൾ ഇല്ലാതാക്കുന്നു, --ഒരു സ്ട്രിംഗ് ലിസ്റ്റ് ഒരു പാരാമീറ്ററായി സ്വീകരിക്കുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക,--  >>> listSort [""aa"",""a"",""aaa""]
--  [""aa""]
--  >>> listSort [""ab"",""a"",""aaa"",""cd""]
--  [""ab"",""cd""]
sortedListSum :: [String] -> [String]
sortedListSum lst =","sortedListSum :: [String] -> [String]
sortedListSum lst = sortBy compareStrings (filter evenLength lst)
  where
    evenLength s = even (length s)
    compareStrings s1 s2
      | length s1 == length s2 = compare s1 s2
      | otherwise = compare (length s1) (length s2)","
main :: IO ()
main = do
  let candidate = sortedListSum
  if candidate [""aa"",""a"",""aaa""] == [""aa""] then pure () else error ""assertion failed""
  if candidate [""school"",""AI"",""asdf"",""b""] == [""AI"",""asdf"",""school""] then pure () else error ""assertion failed""
  if candidate [""d"",""b"",""c"",""a""] == [] then pure () else error ""assertion failed""
  if candidate [""d"",""dcba"",""abcd"",""a""] == [""abcd"",""dcba""] then pure () else error ""assertion failed""
  if candidate [""AI"",""ai"",""au""] == [""AI"",""ai"",""au""] then pure () else error ""assertion failed""
  if candidate [""a"",""b"",""b"",""c"",""c"",""a""] == [] then pure () else error ""assertion failed""
  if candidate [""aaaa"",""bbbb"",""dd"",""cc""] == [""cc"",""dd"",""aaaa"",""bbbb""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_150,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --ഒരു പ്രൈം നമ്പർ ആണ്, y ന്റെ മൂല്യം തിരികെ നൽകണം.--ഒരു ലളിതമായ പ്രോഗ്രാം, അത് n ആണെങ്കിൽ x ന്റെ മൂല്യം തിരികെ നൽകും.--  >>> xOrY 7 34 12
--  34
--  >>> xOrY 15 8 5
--  5
xOrY :: Int -> Int -> Int -> Int
xOrY n x y =","xOrY :: Int -> Int -> Int -> Int
xOrY n x y = if isPrime n then x else y

isPrime :: Int -> Bool
isPrime k
  | k < 2     = False
  | otherwise = null [ x | x <- [2..k-1], k `mod` x == 0 ]","
main :: IO ()
main = do
  let candidate = xOrY
  if candidate 7 34 12 == 34 then pure () else error ""assertion failed""
  if candidate 15 8 5 == 5 then pure () else error ""assertion failed""
  if candidate 3 33 5212 == 33 then pure () else error ""assertion failed""
  if candidate 1259 3 52 == 3 then pure () else error ""assertion failed""
  if candidate 7919 (-1) 12 == (-1) then pure () else error ""assertion failed""
  if candidate 3609 1245 583 == 583 then pure () else error ""assertion failed""
  if candidate 91 56 129 == 129 then pure () else error ""assertion failed""
  if candidate 6 34 1234 == 1234 then pure () else error ""assertion failed""
  if candidate 1 2 0 == 0 then pure () else error ""assertion failed""
  if candidate 2 2 0 == 2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_151,mal_Mlym,hs,"--നെഗറ്റീവ് ആയതോ പൂർണ്ണസംഖ്യകളല്ലാത്തതോ ആയ സംഖ്യകളെ അവഗണിക്കുക.--ഒരു സംഖ്യകളുടെ പട്ടിക കൊടുത്താൽ, സംഖ്യകളുടെ സമചതുരങ്ങളുടെ സംഖ്യ തിരികെ നൽകുക.--  >>> doubleTheDifference [1,3,2,0]
--  10
--  >>> doubleTheDifference [(-1),(-2),0]
--  0
--  >>> doubleTheDifference [9,(-2)]
--  81
--  >>> doubleTheDifference [0]
--  0
--  If the input list is empty, return 0.
doubleTheDifference :: [Float] -> Int
doubleTheDifference lst =","doubleTheDifference :: [Float] -> Int
doubleTheDifference lst = 
    sum [x * x | x <- map round lst, x > 0, odd x]","
main :: IO ()
main = do
  let candidate = doubleTheDifference
  if candidate [.0] == 0 then pure () else error ""assertion failed""
  if candidate [5.0,4.0] == 25 then pure () else error ""assertion failed""
  if candidate [0.1,0.2,0.3] == 0 then pure () else error ""assertion failed""
  if candidate [-10.0,-20.0,-30.0] == 0 then pure () else error ""assertion failed""
  if candidate [-1.0,-2.0,8.0] == 0 then pure () else error ""assertion failed""
  if candidate [0.2,3.0,5.0] == 34 then pure () else error ""assertion failed""
  if candidate [-9.0,-7.0,-5.0,-3.0,-1.0,1.0,3.0,5.0,7.0,9.0] == 165 then pure () else error ""assertion failed""
  pure ()"
HumanEval_152,mal_Mlym,hs,"--ഉദാഹരണം:--മൂല്യം 0 ആണെങ്കില് , അത് ഇല്ലെങ്കില് , അത് ഊഹവും സ്കോറും തമ്മിലുള്ള അബ്സലൂട്ട് വ്യത്യാസമാണ്.--ഓരോ ഊഹവും എത്ര ദൂരം അകലെയാണെന്ന് സൂചിപ്പിക്കുന്ന അതേ നീളമുള്ള ഒരു ലിസ്റ്റ് തിരികെ നൽകുക.--നിങ്ങള് ക്ക് രണ്ട് ലിസ്റ്റുകള് ലഭിക്കും, അവയില് സ്കോറുകളും ഊഹങ്ങളും ഉണ്ടാകും, അവയുടെ നീളം തുല്യമായിരിക്കും, ഓരോ സൂചികയിലും ഒരു പൊരുത്തം കാണിക്കും.--നിങ്ങളുടെ ജോലി ഒരു വ്യക്തി ശരിയായി മത്സരങ്ങൾ ഒരു എണ്ണം ഫലങ്ങൾ ഊഹിച്ചു എന്ന് നിർണ്ണയിക്കാൻ ആണ്.--ഇത് ശ്രദ്ധിക്കുകയും താരതമ്യം ചെയ്യുകയും ചെയ്യേണ്ടതാണ്.--ആ നിമിഷം നിങ്ങള് ക്ക് തോന്നിയ വികാരങ്ങളും ചിന്തകളും--ദീർഘകാലമായി കാത്തിരുന്ന ചില കാര്യങ്ങളുടെ ഫലം വരുമ്പോള് ആ വികാരം നമുക്കെല്ലാവര് ക്കും ഓർമ്മയുണ്ടെന്ന് തോന്നുന്നു.--  >>> compare [1,2,3,4,5,1] [1,2,3,4,2,(-2)]
--  [0,0,0,0,3,3]
--  >>> compare [0,5,0,0,0,4] [4,1,1,0,0,(-2)]
--  [4,4,1,0,0,6]
compare :: [Int] -> [Int] -> [Int]
compare game guess =","compare :: [Int] -> [Int] -> [Int]
compare game guess = zipWith (\g s -> abs (g - s)) game guess","
main :: IO ()
main = do
  let candidate = compare
  if candidate [1,2,3,4,5,1] [1,2,3,4,2,(-2)] == [0,0,0,0,3,3] then pure () else error ""assertion failed""
  if candidate [0,0,0,0,0,0] [0,0,0,0,0,0] == [0,0,0,0,0,0] then pure () else error ""assertion failed""
  if candidate [1,2,3] [(-1),(-2),(-3)] == [2,4,6] then pure () else error ""assertion failed""
  if candidate [1,2,3,5] [(-1),2,3,4] == [2,0,0,1] then pure () else error ""assertion failed""
  pure ()"
HumanEval_153,mal_Mlym,hs,"--ഉദാഹരണം: --(അതിന്റെ ശക്തി - 1 ആണ്).--'Slices.SERVINGSliCes' എന്ന പദം തിരിച്ചു നൽകുക, കാരണം 'SERVINGSliCes' ആണ് ഏറ്റവും ശക്തമായ എക്സ്റ്റൻഷൻ.--['സെര്വിന്ഗ്സ്ലിചെസ്', 'ചീസ്', 'സ്റ്റുഫെഡ്'] എന്നിങ്ങനെ വിപുലീകരണങ്ങളുണ്ടെങ്കിൽ നിങ്ങൾ --ഉദാഹരണത്തിന്, നിങ്ങൾക്ക് ""സ്ലൈസുകൾ"" എന്ന ക്ലാസും ന്റെ ഒരു ലിസ്റ്റും നൽകിയിട്ടുണ്ടെങ്കിൽ--ലിസ്റ്റിലെ ആദ്യത്തേത് തിരഞ്ഞെടുക്കുക.--ഒരേ ശക്തി ഉള്ള രണ്ടോ അതിലധികമോ എക്സ്റ്റൻഷനുകൾ ഉണ്ടെങ്കിൽ, നിങ്ങൾ --ഫോർമാറ്റ്: ക്ലാസ് നാമം. ഏറ്റവും ശക്തമായ വിപുലീകരണ നാമം. --നിങ്ങള് ഏറ്റവും ശക്തമായ വിപുലീകരണം കണ്ടെത്തി ഇതില് ഒരു സ്ട്രിംഗ് തിരികെ നല് കണം.--വിപുലീകരണത്തിന്റെ പേരില് , CAP - SM എന്ന സംഖ്യയില് നിന്നാണ് ശക്തി ലഭിക്കുന്നത്.--എക്സ്റ്റൻഷന്റെ പേരിന്റെ അക്ഷരങ്ങൾ, SM എന്നത് ചെറിയ അക്ഷരങ്ങളുടെ എണ്ണം --വിപുലീകരണത്തിന്റെ ശക്തി ഇപ്രകാരമാണ്: CAP എന്നത് വലിയ അക്ഷരങ്ങളുടെ സംഖ്യയായിരിക്കട്ടെ --ക്ലാസ്സിലേക്ക് അധിക ക്ലാസുകൾ ലോഡ് ചെയ്യുന്നതിനാണ് വിപുലീകരണങ്ങൾ ഉപയോഗിക്കുന്നത്.--∙∙∙ഒരു ക്ലാസിന്റെ പേരും (ഒരു സ്ട്രിംഗ്) ഒരു എക്സ്റ്റൻഷനുകളുടെ ലിസ്റ്റും ലഭിക്കും.--  >>> strongestExtension ""my_class"" [""AA"",""Be"",""CC""]
--  ""my_class.AA""
strongestExtension :: String -> [String] -> String
strongestExtension class_name extensions =","strongestExtension :: String -> [String] -> String
strongestExtension class_name extensions = class_name ++ ""."" ++ strongestExt
  where
    calculateStrength :: String -> Int
    calculateStrength ext = length (filter (`elem` ['A'..'Z']) ext) - length (filter (`elem` ['a'..'z']) ext)
    
    strongestExt = fst $ foldl1 maxStrength $ zip extensions (map calculateStrength extensions)
    
    maxStrength :: (String, Int) -> (String, Int) -> (String, Int)
    maxStrength ext1 ext2
      | snd ext1 > snd ext2 = ext1
      | otherwise           = ext2","
main :: IO ()
main = do
  let candidate = strongestExtension
  if candidate ""Watashi"" [""tEN"",""niNE"",""eIGHt8OKe""] == ""Watashi.eIGHt8OKe"" then pure () else error ""assertion failed""
  if candidate ""Boku123"" [""nani"",""NazeDa"",""YEs.WeCaNe"",""32145tggg""] == ""Boku123.YEs.WeCaNe"" then pure () else error ""assertion failed""
  if candidate ""__YESIMHERE"" [""t"",""eMptY"",""nothing"",""zeR00"",""NuLl__"",""123NoooneB321""] == ""__YESIMHERE.NuLl__"" then pure () else error ""assertion failed""
  if candidate ""K"" [""Ta"",""TAR"",""t234An"",""cosSo""] == ""K.TAR"" then pure () else error ""assertion failed""
  if candidate ""__HAHA"" [""Tab"",""123"",""781345"",""-_-""] == ""__HAHA.123"" then pure () else error ""assertion failed""
  if candidate ""YameRore"" [""HhAas"",""okIWILL123"",""WorkOut"",""Fails"",""-_-""] == ""YameRore.okIWILL123"" then pure () else error ""assertion failed""
  if candidate ""finNNalLLly"" [""Die"",""NowW"",""Wow"",""WoW""] == ""finNNalLLly.WoW"" then pure () else error ""assertion failed""
  if candidate ""_"" [""Bb"",""91245""] == ""_.Bb"" then pure () else error ""assertion failed""
  if candidate ""Sp"" [""671235"",""Bb""] == ""Sp.671235"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_154,mal_Mlym,hs,"--നിങ്ങള് ക്ക് 2 വാക്കുകള് നല് കിയിട്ടുണ്ട്. നിങ്ങള് ക്ക് True നല് കണം രണ്ടാമത്തെ വാക്ക് അല്ലെങ്കിൽ അതിന്റെ ഏതെങ്കിലും ഭ്രമണം ആദ്യത്തെ വാക്ക് ന്റെ സബ് സ്ട്രിംഗ് ആണെങ്കില് .--  >>> cycpatternCheck ""abcd"" ""abd""
--  False
--  >>> cycpatternCheck ""hello"" ""ell""
--  True
--  >>> cycpatternCheck ""whassup"" ""psus""
--  False
--  >>> cycpatternCheck ""abab"" ""baa""
--  True
--  >>> cycpatternCheck ""efef"" ""eeff""
--  False
--  >>> cycpatternCheck ""himenss"" ""simen""
--  True
cycpatternCheck :: String -> String -> Bool
cycpatternCheck a b =","cycpatternCheck :: String -> String -> Bool
cycpatternCheck a b = any (`isInfixOf` a) rotations
  where
    rotations = take (length b) $ map (take (length b)) $ tails (b ++ b)","
main :: IO ()
main = do
  let candidate = cycpatternCheck
  if candidate ""xyzw"" ""xyw"" == False then pure () else error ""assertion failed""
  if candidate ""yello"" ""ell"" == True then pure () else error ""assertion failed""
  if candidate ""whattup"" ""ptut"" == False then pure () else error ""assertion failed""
  if candidate ""efef"" ""fee"" == True then pure () else error ""assertion failed""
  if candidate ""abab"" ""aabb"" == False then pure () else error ""assertion failed""
  if candidate ""winemtt"" ""tinem"" == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_155,mal_Mlym,hs,"--ഉദാഹരണം: --ഒരു പൂർണ്ണസംഖ്യ തന്നാൽ, യഥാക്രമം ഇരട്ടയും അസംഖ്യം അക്കങ്ങളും ഉള്ള ഒരു ട്യൂപ്പിൾ തിരികെ നൽകുക.--  >>> evenOddCount (-12)
--  (1, 1)
--  >>> evenOddCount 123
--  (1, 2)
evenOddCount :: Int -> (Int, Int)
evenOddCount num =","evenOddCount :: Int -> (Int, Int)
evenOddCount num = (length evens, length odds)
  where
    digits = map (read . (:[])) . show . abs $ num
    evens = filter even digits
    odds  = filter odd digits","
main :: IO ()
main = do
  let candidate = evenOddCount
  if candidate 7 == (0, 1) then pure () else error ""assertion failed""
  if candidate (-78) == (1, 1) then pure () else error ""assertion failed""
  if candidate 3452 == (2, 2) then pure () else error ""assertion failed""
  if candidate 346211 == (3, 3) then pure () else error ""assertion failed""
  if candidate (-345821) == (3, 3) then pure () else error ""assertion failed""
  if candidate (-2) == (1, 0) then pure () else error ""assertion failed""
  if candidate (-45347) == (2, 3) then pure () else error ""assertion failed""
  if candidate 0 == (1, 0) then pure () else error ""assertion failed""
  pure ()"
HumanEval_156,mal_Mlym,hs,"--ഉദാഹരണങ്ങള്: --പരിമിതികൾ: 1 <= num <= 1000 --ചെറിയ അക്ഷരങ്ങളില് അത് തിരിച്ചു കൊടുക്കുക.--ഒരു പോസിറ്റീവ് സംഖ്യയെ കണക്കാക്കി അതിന്റെ റോമൻ സംഖ്യാ തുല്യത ഒരു സ്ട്രിംഗായി എടുക്കുക,--  >>> intToMiniRoman 19
--  ""xix""
--  >>> intToMiniRoman 152
--  ""clii""
--  >>> intToMiniRoman 426
--  ""cdxxvi""
intToMiniRoman :: Int -> String
intToMiniRoman number =","intToMiniRoman :: Int -> String
intToMiniRoman number = concatMap (replicateSymbol number) romanNumerals
  where
    romanNumerals = [(1000, ""m""), (900, ""cm""), (500, ""d""), (400, ""cd""),
                     (100, ""c""), (90, ""xc""), (50, ""l""), (40, ""xl""),
                     (10, ""x""), (9, ""ix""), (5, ""v""), (4, ""iv""), (1, ""i"")]
    
    replicateSymbol :: Int -> (Int, String) -> String
    replicateSymbol n (value, symbol)
      | n >= value = symbol ++ replicateSymbol (n - value) (value, symbol)
      | otherwise = """"","
main :: IO ()
main = do
  let candidate = intToMiniRoman
  if candidate 19 == ""xix"" then pure () else error ""assertion failed""
  if candidate 152 == ""clii"" then pure () else error ""assertion failed""
  if candidate 251 == ""ccli"" then pure () else error ""assertion failed""
  if candidate 426 == ""cdxxvi"" then pure () else error ""assertion failed""
  if candidate 500 == ""d"" then pure () else error ""assertion failed""
  if candidate 1 == ""i"" then pure () else error ""assertion failed""
  if candidate 4 == ""iv"" then pure () else error ""assertion failed""
  if candidate 43 == ""xliii"" then pure () else error ""assertion failed""
  if candidate 90 == ""xc"" then pure () else error ""assertion failed""
  if candidate 94 == ""xciv"" then pure () else error ""assertion failed""
  if candidate 532 == ""dxxxii"" then pure () else error ""assertion failed""
  if candidate 900 == ""cm"" then pure () else error ""assertion failed""
  if candidate 994 == ""cmxciv"" then pure () else error ""assertion failed""
  if candidate 1000 == ""m"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_157,mal_Mlym,hs,"--ഉദാഹരണം: --90 ഡിഗ്രി --ഒരു വലതു കോണുള്ള ത്രികോണം ഒരു കോണും വലതു കോണുള്ള ത്രികോണമാണ്.--വശങ്ങള് ഒരു വലതു കോണുള്ള ത്രികോണം ഉണ്ടാക്കുന്നു, അല്ലാത്തപക്ഷം തെറ്റാണ്.--ഒരു ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുത്താൽ, ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുത്താൽ, ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുത്താൽ, ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുത്താൽ, ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുത്താൽ, ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുത്താൽ,--  >>> rightAngleTriangle 3 4 5
--  True
--  >>> rightAngleTriangle 1 2 3
--  False
rightAngleTriangle :: Int -> Int -> Int -> Bool
rightAngleTriangle a b c =","rightAngleTriangle :: Int -> Int -> Int -> Bool
rightAngleTriangle a b c = 
    let [x, y, z] = sort [a, b, c]
    in x^2 + y^2 == z^2
    where sort = Data.List.sort","
main :: IO ()
main = do
  let candidate = rightAngleTriangle
  if candidate 3 4 5 == True then pure () else error ""assertion failed""
  if candidate 1 2 3 == False then pure () else error ""assertion failed""
  if candidate 10 6 8 == True then pure () else error ""assertion failed""
  if candidate 2 2 2 == False then pure () else error ""assertion failed""
  if candidate 7 24 25 == True then pure () else error ""assertion failed""
  if candidate 10 5 7 == False then pure () else error ""assertion failed""
  if candidate 5 12 13 == True then pure () else error ""assertion failed""
  if candidate 15 8 17 == True then pure () else error ""assertion failed""
  if candidate 48 55 73 == True then pure () else error ""assertion failed""
  if candidate 1 1 1 == False then pure () else error ""assertion failed""
  if candidate 2 2 10 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_158,mal_Mlym,hs,"--അക്ഷരങ്ങളുടെ ക്രമത്തിൽ ആദ്യം വരുന്ന അക്ഷരമാണ് തിരികെ നൽകുക.--ഒന്നിലധികം സ്ട്രിങ്ങുകൾക്ക് പരമാവധി എണ്ണം ഉണ്ടെങ്കിൽ,--ലിസ്റ്റിൽ വ്യത്യസ്ത പദങ്ങളുണ്ട്. പരമാവധി എണ്ണം ഉപയോഗിച്ച് പദം തിരികെ നൽകുക.--∙∙∙ഒരു സ്ട്രിങ്ങുകളുടെ ലിസ്റ്റ് സ്വീകരിക്കുന്ന ഒരു ഫങ്ഷൻ എഴുതുക--  >>> findMax [""name"",""of"",""string""]
--  ""string""
--  >>> findMax [""name"",""enam"",""game""]
--  ""enam""
--  >>> findMax [""aaaaaaa"",""bb"",""cc""]
--  ""aaaaaaa""
findMax :: [String] -> String
findMax words =","import Data.List (nub, sort)

findMax :: [String] -> String
findMax words = 
    head . sort . map snd . filter (\(n, _) -> n == maxUnique) $ wordUniquePairs
  where
    wordUniquePairs = [(length . nub $ word, word) | word <- words]
    maxUnique = maximum $ map fst wordUniquePairs","
main :: IO ()
main = do
  let candidate = findMax
  if candidate [""name"",""of"",""string""] == ""string"" then pure () else error ""assertion failed""
  if candidate [""name"",""enam"",""game""] == ""enam"" then pure () else error ""assertion failed""
  if candidate [""aaaaaaa"",""bb"",""cc""] == ""aaaaaaa"" then pure () else error ""assertion failed""
  if candidate [""abc"",""cba""] == ""abc"" then pure () else error ""assertion failed""
  if candidate [""play"",""this"",""game"",""of"",""footbott""] == ""footbott"" then pure () else error ""assertion failed""
  if candidate [""we"",""are"",""gonna"",""rock""] == ""gonna"" then pure () else error ""assertion failed""
  if candidate [""we"",""are"",""a"",""mad"",""nation""] == ""nation"" then pure () else error ""assertion failed""
  if candidate [""this"",""is"",""a"",""prrk""] == ""this"" then pure () else error ""assertion failed""
  if candidate [""b""] == ""b"" then pure () else error ""assertion failed""
  if candidate [""play"",""play"",""play""] == ""play"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_159,mal_Mlym,hs,"--ഉദാഹരണം: --മതിയായ കാരറ്റ് ബാക്കിയുണ്ടെങ്കിൽ, ബാക്കിയുള്ള കാരറ്റ് മുഴുവനും കഴിക്കും, പക്ഷേ ഇപ്പോഴും വിശപ്പ് അനുഭവപ്പെടും.--നിങ്ങളുടെ ഭക്ഷണത്തിനു ശേഷം അവശേഷിക്കുന്ന കാരറ്റ് എണ്ണം ] --[ ഭക്ഷണത്തിനു ശേഷം കഴിച്ച മൊത്തം കാരറ്റ് എണ്ണം ]--പക്ഷേ, ഇന്ന് നീ കൂടുതൽ കാരറ്റ് കഴിക്കണം.--നിങ്ങള് ഒരു വിശന്ന മുയലാണ്, നിങ്ങള് ഇതിനകം ഒരു നിശ്ചിത എണ്ണം കാരറ്റ് കഴിച്ചു,--  >>> eat 5 6 10
--  [11,4]
--  >>> eat 4 8 9
--  [12,1]
--  >>> eat 1 10 10
--  [11,0]
--  >>> eat 2 11 5
--  [7,0]
--  Variables:
--  @number : integer
--  the number of carrots that you have eaten.
--  @need : integer
--  the number of carrots that you need to eat.
--  @remaining : integer
--  the number of remaining carrots thet exist in stock
--  Constrain:
--  * 0 <= number <= 1000
--  * 0 <= need <= 1000
--  * 0 <= remaining <= 1000
--  Have fun :)
eat :: Int -> Int -> Int -> [Int]
eat number need remaining =","eat :: Int -> Int -> Int -> [Int]
eat number need remaining
  | remaining >= need = [number + need, remaining - need]
  | otherwise = [number + remaining, 0]","
main :: IO ()
main = do
  let candidate = eat
  if candidate 5 6 10 == [11,4] then pure () else error ""assertion failed""
  if candidate 4 8 9 == [12,1] then pure () else error ""assertion failed""
  if candidate 1 10 10 == [11,0] then pure () else error ""assertion failed""
  if candidate 2 11 5 == [7,0] then pure () else error ""assertion failed""
  if candidate 4 5 7 == [9,2] then pure () else error ""assertion failed""
  if candidate 4 5 1 == [5,0] then pure () else error ""assertion failed""
  pure ()"
HumanEval_160,mal_Mlym,hs,"--ഓപ്പറേറ്റർ ലിസ്റ്റിൽ കുറഞ്ഞത് ഒരു ഓപ്പറേറ്ററും ഓപ്പറന്റ് ലിസ്റ്റിൽ കുറഞ്ഞത് രണ്ട് ഓപ്പറന്റുകളും ഉണ്ടായിരിക്കണം.--ഓപ്പറാന്റ് എന്നത് നെഗറ്റീവ് അല്ലാത്ത സംഖ്യകളുടെ ഒരു പട്ടികയാണ്.--ഓപ്പറേറ്റർ ലിസ്റ്റിന്റെ നീളം ഓപ്പറന്റ് ലിസ്റ്റിന്റെ നീളം കുറച്ചാൽ ഒന്നിന് തുല്യമാണ്.--കുറിപ്പ്:--=> ഫലം = 9 --ഫലം = 2 + 3 * 4 - 5 --പട്ടിക = [2, 3, 4, 5] --ഓപ്പറേറ്റർ ['+', '*', '-'] --ഉദാഹരണം: --എക്സ്പോണന്ഷ്യേഷൻ (**) യും--നിലവിളക്കുകൾ (--ഗുണനം (*) --കുറയ്ക്കല് ( - ) --കൂട്ടിച്ചേര് ത്തു (+) --അടിസ്ഥാന അല് ജ്ബെറ പ്രവർത്തനങ്ങൾ:--ഈ എക്സ്പ്രഷന്റെ വിലയിരുത്തൽ തിരികെ നൽകുക.--രണ്ടാമത്തെ പട്ടിക പൂർണ്ണസംഖ്യകളുടെ പട്ടികയാണ്.--രണ്ട് ലിസ്റ്റുകൾ ഓപ്പറേറ്ററും ഓപ്പറാന്റും നല് കിയിട്ടുണ്ട്. ആദ്യ ലിസ്റ്റിൽ അടിസ്ഥാന ആൽജെബ്രിക് പ്രവർത്തനങ്ങൾ ഉണ്ട്, പിന്നെ doAlgebra :: [String] -> [Int] -> Int
doAlgebra operator operand =","doAlgebra :: [String] -> [Int] -> Int
doAlgebra operator operand = evaluate operand operator
  where
    evaluate [x] [] = x
    evaluate (x:y:ys) (op:ops) = evaluate (result:ys) ops
      where
        result = applyOperation op x y

    applyOperation ""+"" a b = a + b
    applyOperation ""-"" a b = a - b
    applyOperation ""*"" a b = a * b
    applyOperation ""//"" a b = a `div` b
    applyOperation ""**"" a b = a ^ b
    applyOperation _ _ _ = error ""Unsupported operation""","
main :: IO ()
main = do
  let candidate = doAlgebra
  if candidate [""**"",""*"",""+""] [2,3,4,5] == 37 then pure () else error ""assertion failed""
  if candidate [""+"",""*"",""-""] [2,3,4,5] == 9 then pure () else error ""assertion failed""
  if candidate [""//"",""*""] [7,3,4] == 8 then pure () else error ""assertion failed""
  pure ()"
HumanEval_161,mal_Mlym,hs,"--ഉദാഹരണങ്ങൾ --ഫങ്ഷൻ കിട്ടിയ സ്ട്രിംഗ് തിരിച്ചു കൊടുക്കണം.--സ്ട്രിങ്ങിൽ അക്ഷരങ്ങളൊന്നും ഇല്ലെങ്കിൽ, സ്ട്രിങ് വിപരീതമാക്കുക.--അല്ലെങ്കില് , അത് ഇങ്ങനെയായി തുടരുക.--s[i] ഒരു അക്ഷരമാണെങ്കിൽ, അതിന്റെ കേസ് താഴേ നിന്ന് മുകളിലേക്ക് അല്ലെങ്കിൽ തിരിച്ചും, --നിങ്ങള് ക്ക് ഒരു സ്ട്രിംഗ് ലഭിക്കുന്നു.--  >>> solve ""1234""
--  ""4321""
--  >>> solve ""ab""
--  ""AB""
--  >>> solve ""#a@C""
--  ""#A@c""
solve :: String -> String
solve s =","solve :: String -> String
solve s
  | any (`elem` ['a'..'z'] ++ ['A'..'Z']) s = map toggleCase s
  | otherwise = reverse s
  where
    toggleCase c
      | c `elem` ['a'..'z'] = toEnum (fromEnum c - 32) :: Char
      | c `elem` ['A'..'Z'] = toEnum (fromEnum c + 32) :: Char
      | otherwise = c","
main :: IO ()
main = do
  let candidate = solve
  if candidate ""AsDf"" == ""aSdF"" then pure () else error ""assertion failed""
  if candidate ""1234"" == ""4321"" then pure () else error ""assertion failed""
  if candidate ""ab"" == ""AB"" then pure () else error ""assertion failed""
  if candidate ""#a@C"" == ""#A@c"" then pure () else error ""assertion failed""
  if candidate ""#AsdfW^45"" == ""#aSDFw^45"" then pure () else error ""assertion failed""
  if candidate ""#6@2"" == ""2@6#"" then pure () else error ""assertion failed""
  if candidate ""#$a^D"" == ""#$A^d"" then pure () else error ""assertion failed""
  if candidate ""#ccc"" == ""#CCC"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_162,mal_Mlym,hs,"--'text' ഒരു ശൂന്യമായ സ്ട്രിംഗ് ആണെങ്കിൽ, ഒന്നും തിരികെ നൽകരുത്.--ഒരു സ്ട്രിംഗ് 'ടെക്സ്റ്റ്' തന്നാൽ, അതിന്റെ md5 ഹാഷ് തുല്യമായ സ്ട്രിംഗ് തിരികെ നൽകുക.--  >>> stringToMd5 ""Hello world""
--  Just (""3e25960a79dbc69b674cd4ec67a72c62"")
stringToMd5 :: String -> Maybe String
stringToMd5 text =","import qualified Data.ByteString.Char8 as C
import qualified Data.Digest.Pure.MD5 as MD5

stringToMd5 :: String -> Maybe String
stringToMd5 text
  | null text = Nothing
  | otherwise = Just $ show $ MD5.md5 $ C.pack text","
main :: IO ()
main = do
  let candidate = stringToMd5
  if candidate ""Hello world"" == Just (""3e25960a79dbc69b674cd4ec67a72c62"") then pure () else error ""assertion failed""
  if candidate """" == Just (Nothing) then pure () else error ""assertion failed""
  if candidate ""A B C"" == Just (""0ef78513b0cb8cef12743f5aeb35f888"") then pure () else error ""assertion failed""
  if candidate ""password"" == Just (""5f4dcc3b5aa765d61d8327deb882cf99"") then pure () else error ""assertion failed""
  pure ()"
HumanEval_163,mal_Mlym,hs,"--ഉദാഹരണത്തിന്: --b, ക്രമാനുഗതമായി.--രണ്ട് പോസിറ്റീവ് സംഖ്യകളായ a, b എന്നിവയുടെ സംഖ്യകളുടെ സംഖ്യകൾ തിരികെ നൽകുക.--  >>> generateIntegers 2 8
--  [2,4,6,8]
--  >>> generateIntegers 8 2
--  [2,4,6,8]
--  >>> generateIntegers 10 14
--  []
generateIntegers :: Int -> Int -> [Int]
generateIntegers a b =","generateIntegers :: Int -> Int -> [Int]
generateIntegers a b = filter even [min a b .. max a b]","
main :: IO ()
main = do
  let candidate = generateIntegers
  if candidate 2 10 == [2,4,6,8] then pure () else error ""assertion failed""
  if candidate 10 2 == [2,4,6,8] then pure () else error ""assertion failed""
  if candidate 132 2 == [2,4,6,8] then pure () else error ""assertion failed""
  if candidate 17 89 == [] then pure () else error ""assertion failed""
  pure ()"
