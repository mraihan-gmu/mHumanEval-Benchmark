task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,kas_Deva,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""अगर अस वुछो की नंबर लिस्ट मंज़ ,की अस तेम ज़े नंबर यम वरीय नज़दीक छी एक जय पेठ बे छी एम् वरीय नज़दीक थ्रेशोल्ड निष्""""""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,kas_Deva,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""ये फंक्शन छू इनपुट कारन स्ट्रिंग मंज़ यमन मंज़ नेस्टेड कपरेंटिस हिन्द मल्टीप्ल ग्रुप्स छू आसान.अस का मकसद छू तेमन ग्रुपन अलग अलग स्ट्रिंग्स मंज़ अलग करन ते तेमन हिंज लिस्ट लबनी.अलग ग्रुप्स छू बाल्लेंस्ड (हर ओपनिंग ब्रेस छू सही तैर पइठ बंद गाछने) ते छू नेस्टड न अकिस अकिस मंज़ इनपुट स्ट्रिंग मंज़ कह ते स्पेस इग्नोर करा.मिसाल: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ' ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,kas_Deva,python,"

def truncate_number(number: float) -> float:
    """"""पॉजिटिव फ्लोटिंग पॉइंट नंबर दिन ,इ छी एवं इन्टिजर पार्ट (लार्जेस्ट इंटिजर छी लकिट दिवा नंबर पेठ) बे डेसीमल (लेफ्ट ओवर पार्ट छी हमेशा लकिट 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,kas_Deva,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""तेरे इस given a लिस्ट ऑफ़ डिपॉजिट एंड विथड्रॉउद ऑपरेशंस ओन a बैंक अकाउंट ठाट स्टार्ट्स विथ जीरो बैलेंस. योर टास्क इस तो डिटेक्ट अगर ओन अप्पोइंट थे बैलेंस ऑफ़ अकाउंट फॉलस लोअर फ्रॉम जीरो, एंड ओन अप्पोइंट फंक्शन शुड रिटर्न ट्रू. ओन्सर योर शुड रिटर्न फॉलस. एक्साम्प्लिः >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,kas_Deva,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""इनपुट नंबर्स हिंज अख दितेन लिस्ट खातिर,एमएएएस डेविअशन हिंज मनी हिंज तैर पेठ कल्कुलेट करा.एमएएएस डेविअशन छू प्रेथ एलिमेंट ते सेन्टरपॉइंट्स दरमियान मन्ज़िम मन्ज़िम फरक (मध्यम अथ मामलस मंज़): MAD = average । x - x_mean । मिसाल: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,kas_Deva,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""इनपुट लिस्ट हिन्द हर दूँ एलिमेंट्स दरमियान नंबर 'डिलिमिटर' लगावों `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,kas_Deva,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""इनपुट फ़ंक्शन छू अख स्ट्रिंग युस नेस्टेड कपरेंटिसन खातिर मल्टीप्ल ग्रुप्स छू रेप्रेसेंटेट करा,युस स्पेस सेपरेट छू करा.हर ग्रुप खातिर,आउटपुट छू डेप्थ लेवल नेस्टिंग ऑफ़ कपरेंटिस.मिसाल की तैर पइठ (() (()) छू मैक्सिमम ज़े लेवल नेस्टिंग हुन्द येलकी ((())) छू त्र. >>> parse_nested_parens('((()) ((())) () ((()) (((()) [2, 3, 1, 3]""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,kas_Deva,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""इनपुट लिस्ट ऑफ़ स्ट्रिंग्स फिल्टर करें सिर्फ तेमन खातर यम मंज़ सबस्ट्रिंग छी आसान >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,kas_Deva,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""इंतेजरस हिंज लिस्ट खातिर,तेम अस टपल तेम सुन्द अस जमा ते प्रोडक्ट सेत बनान.खाली असुम अस बराबर गसण 0 ते खाली प्रोडक्ट अस बराबर गसण 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,kas_Deva,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""इंटेजरस हिंज लिस्ट पेठ,क्रॉसिंग मैक्सिमम एलिमेंट हिंज लिस्ट बनाव. >>> रोलिंग_मैक्स (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,kas_Deva,python,"

def is_palindrome(string: str) -> bool:
    """"""अल्गोरिथम आयडिया छू सिम्पल:- सप्लाई स्ट्रिंग हुन्द लांग पोस्टफिक्स युस पालिंड्रोम छू. - स्ट्रिंग रिवर्स हुन्द स्ट्रिंग प्रीफिक्स युस पालिंड्रोमिक सफिक्स बरोह छू स्ट्रिंग रिवर्स किस एंड्स मंज़ ऐड करा. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""अगर देवन अकिस स्ट्रिंगस छू पालिंड्रोम तॆ टेस्ट करनॆ.""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,kas_Deva,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""इनपुट छे ज़े स्ट्रिंग a त b यिम सिरिफ़ 1 त 0 छे। यिमन इनपुट्न पेठ बाइनरी XOR परफॉरम करान त रिटर्न छु अख स्ट्रिंग पॉठि ति। >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,kas_Deva,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""list ऑफ़ स्ट्रिंग्स मंज़, देअर लोंगस्ट ओने. देअर फर्स्ट ओने केस ऑफ़ मल्टीप्ल स्ट्रिंग्स ऑफ़ थे शामे लेंथ. देअर नो केस इन केस ऑफ़ इनपुट लिस्ट इस खाली. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,kas_Deva,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""अगर अस वुछो की अस छी एवं इस्तेमाल करने ,तथ हक़ अस वुछिथ की अस क्या हको अस इस्तेमाल करिथ""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,kas_Deva,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""रिटर्न लिस्ट ऑफ़ आल प्रीफिक्स फ्रॉम शॉर्टेस्ट तो लॉन्गस्ट ऑफ़ थे इनपुट स्ट्रिंग >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,kas_Deva,python,"

def string_sequence(n: int) -> str:
    """"""युस अस स्ट्रिंग छी सु छी देलिमेंटेड जायन पेठ शुरू गासन 0 पेठ n ताम""""""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,kas_Deva,python,"

def count_distinct_characters(string: str) -> int:
    """"""अगर अस स्ट्रिंग देवन ,तह वुछ कीते अलग करैक्टर (इ छी इन्दिरासपोरते केस) अथ मंज़ छी एवं >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,kas_Deva,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""इनपुट टू थिस फंक्शन इस a स्ट्रिंग रिप्रेजेंटिग म्यूजिकल नोट्स इन a स्पेशल ASCII फॉर्मेट. योर टास्क इस तो पार्स स्ट्रिंग लिस्ट ऑफ़ इंटेगर कॉरस्पॉन्डिंग तो मल्टि बिट्स डस नोट्स. तेरे इस a लेजेंड: 'o' नोट, लास्ट्स बीट्स फोर 'o, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k,""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,kas_Deva,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""वुछो कीते गुन छी देवन सबस्ट्रिंग युस ओरिजिनल स्ट्रिंग मंज़ छी एवं मिलान. कोउंट ओवरलैपिंग केस. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,kas_Deva,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""इनपुट छू स्पेस-डिलीमिटेड स्ट्रिंग नुमारिकालस सेत 'ज़ीरो' पेठ 'नौ'. वैलिड चॉइस छू 'ज़ीरो', 'वन', 'टू', 'थ्री', 'फोर', 'फइव', 'शिक्स', 'सेवेन', 'आठ' ते 'नौ'. स्ट्रिंग छू नंबर सेत सॉर्ट येवा करने लकुट पेठ बुड ताम >>> sort_numbers ((('थ्री वन फाइव') 'वन थ्री फाइव' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,kas_Deva,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""युस सप्लाई छी कारन नंबर लिस्ट (लम्बाई पेठ कम से कम ज़े) सेलेक्ट बे रिटर्न ज़े युस नज़दीक छी बे छी एवं रिटर्न करने एकिस बाइकीस सेथ (कम नंबर ,कठिन नंबर)""""""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,kas_Deva,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""अगर अस नंबर दिवा (कम से कम ज़े एलिमेंट),तेम सूचस मंज़ करो लीनियर ट्रांसफॉर्म ,यथ पेठ सरियो खोत लकुट नंबर गाछ बनव 0 बे सरियो खोत बुड गाछ बनव 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,kas_Deva,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""फिल्टर दीद लिस्ट ऑफ़ कुएं ते पायथन वैल्यूज सिर्फ इंटेजरस खातर >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,kas_Deva,python,"

def strlen(string: str) -> int:
    """"""रिटर्न लेंथ ऑफ़ गिवन स्ट्रिंग >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,kas_Deva,python,"

def largest_divisor(n: int) -> int:
    """"""अगर अस दाइ अस नंबर n ,तह छी अस वरीय लकुट नंबर युस एवं छी डिवाइड कारन n सेथ ,लकिन लकुट छी n >>> largest_divisor(15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,kas_Deva,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""युस ये लिस्ट छी सु छी प्राइम फैक्टर्स ऑफ़ इंटेजर युस लकुट पेठ बुड ताम छी आसान""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,kas_Deva,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""इंटेजरस हिंज लिस्ट मंज़,सु छी सु एलिमेंट हटान युस ज़याद दुबार छू एवा करने.एलिमेंट हिंज ऑर्डर छू एवा करने युस इनपुट छू. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,kas_Deva,python,"

def flip_case(string: str) -> str:
    """"""अगर अस वुछो स्ट्रिंग ,यिम छी लकुट पाठ छी एम् छी एवं बिकास पाठ इस्तेमाल करने""""""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,kas_Deva,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""कॉनकेटेनेट लिस्ट ऑफ़ स्ट्रिंग्स इन सिंगल स्ट्रिंग >>> कॉनकेटेनेट (([]) '' >>> कॉनकेटेनेट ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,kas_Deva,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""इनपुट लिस्ट ऑफ़ स्ट्रिंग्स फिल्टर करें सिर्फ तेमन खातर यम डेटम प्रीफिक्स सेत शुरू गसण. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,kas_Deva,python,"

def get_positive(l: list):
    """"""युस ये रिटर्न छी सु छी सिर्फ पॉजिटिव नंबर लिस्ट मंज़. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,kas_Deva,python,"

def is_prime(n):
    """"""अगर अख देवन नंबर प्राइम अस,ते असूल वापस करो. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,kas_Deva,python,"import math


def poly(xs: list, x: float):
    """"""xs छी कोफ्फीसिएंट पोलीनोमिअलक. find_zero छी फाउंड एक्स येथ पेठ पॉली (x) = 0. find_zero छी देवन सिर्फ सिर्फ जीरो पॉइंट ,अगर तेम वारिया अस.इसलिए ,find_zero छी सिर्फ एक्स लिस्ट कारन युस अस पास नंबर छी कोफ्फीसिएंट्स बे छी लार्ज नॉन जीरो कोफ्फीसिएंट यिल सु जवाब छी देवन. >>> round (x) [1, 2]), 2) # f (x) = 1 + 2x -0.5 >>> round (x) [-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""इवैल्यूएटस पोलीनोमिअल विथ कोएफ़िशिएंट्स एक्सएस पॉइंट एक्स. रिटर्न एक्सएस [0] + एक्सएस [1] * एक्स + एक्सएस [1] * एक्स ^ 2 + .... एक्सएस [एन] * एक्स ^ एन """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,kas_Deva,python,"

def sort_third(l: list):
    """"""ये फंक्शन छू लिस्ट l लेवा ते छू लिस्ट ल' लबरान येथ पेठ l' छू हिवेन इंडेक्सस मंज़ हिवेन सेत हिवेन बराबर असा युस न ज़न त्रीं सेत हक़ डिलिजिबल गछत,लकिन एमएच वैल्यूज छू हिवेन इंडेक्सन मंज़ हिवेन सेत हक़ डिलिजिबल गछत,लकिन सार्टेड छू. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,kas_Deva,python,"

def unique(l: list):
    """"""रिटर्न सॉर्टेड यूनिक एलिमेंट्स इन a लिस्ट >>> यूनिक (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,kas_Deva,python,"

def max_element(l: list):
    """"""रिटर्न मैक्सिमम एलिमेंट इन द लिस्ट. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,kas_Deva,python,"

def fizz_buzz(n: int):
    """"""अगर अस वुछो की अस कीथ पाठ छी एवं ,तथ पाठ छी एवं जवाब दिन""""""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,kas_Deva,python,"

def sort_even(l: list):
    """"""ये फंक्शन छू लिस्ट l लेवा ते छू लिस्ट ल' लबरान येथ पइठ l' छू आइडेंटिटल असा l इंटेरड इंडीसेस मंज़,येल कि एमएच वैल्यूज इनपेरड इंडीसेस मंज़ छू बराबर वैल्यूज इनपेरड इंडीसेस ऑफ़ l सेत,लकिन सार्टेड. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,kas_Deva,python,"

def encode_cyclic(s: str):
    """"""takes as input string encoded with encode_cyclic फंक्शन. डिकोडेड स्ट्रिंग रिटर्न.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""                      """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,kas_Deva,python,"

def prime_fib(n: int):
    """"""prime_fib रिटर्न अस n-थ नंबर युस फिबोनैकी नंबर छी बे छी ये प्राइम. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,kas_Deva,python,"

def triples_sum_to_zero(l: list):
    """"""ट्रिपलस_सुम_टू_ज़ेरो छी इन्पुट कारन इंटेजरस. ये छी देवन ट्रू अगर अथ मंज़ अस त्र अलग अलग एलिमेंट यम अस अस नून पेठ ,बे फॉलस अगर अस ने अस. >>> ट्रिपलस_सुम_टू_ज़ेरो (([1, 3, 5, 0]) फॉलस >>> ट्रिपलस_सुम_टू_ज़ेरो (([1, 3, -2, 1]) ट्रू >>> ट्रिपलस_सुम_टू_ज़ेरो (([1, 2, 3, 7]) फॉलस >>> ट्रिपलस_सुम_टू_ज़ेरो (([2, 4, -5, 3, 9, 7]) ट्रू >>> ट्रिपलस_सुम_टू_ज़ेरो [1]) फॉलस""""""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,kas_Deva,python,"

def car_race_collision(n: int):
    """"""अकिस सड़किच तस्सवुर करों युस अख मुकमल सीत सीत लन्गी लाइन छे। n कार छे बाम पेठ दावीक़ तरफः चलावन; अकिस वखतस पेठ, n कारन हुन्द अख मुख्तलिफ सेट छे दावीक़ पेठ बाम तरफः चलावन। कारन हुन्द दोन सेट छि अख अकिस निशि वरिये दूरे आसान आसान। तमाम कार छि अकीस स्पीडस पेठ हरान। ज़ कार छि टकरावान येलि अख कार युस बाम पेठ दावीक़ छू चलान अख कार युस दावीक़ पेठ बाम तरफः चलान छु। ताहम, कार छि बेशुमार मज़बूत तः मज़बूत आसान; नतीजस मंज़, तिम छि पन्नि ट्रयाक्टरी मंज़ जारी थावान मानो तिम छि न टकरावन। यि फंक्शन छु यिथ टक्करन हुन्द तेदाद पॉद करान।""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,kas_Deva,python,"

def incr_list(l: list):
    """"""रिटर्न लिस्ट विथ एलिमेंट्स इन्क्रिमेंटेड बी 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,kas_Deva,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero छी इन्पुट कारन इंटेजर लिस्ट मंज़.ये छी देवन ट्रू अगर लिस्ट मंज़ असे ज़े अलग अलग एलिमेंट यम अस असुम छी जीरो ,बे फॉलस अगर असुम छी जीरो >>> pairs_sum_to_zero([1, 3, 5, 0]) फॉलस >>> pairs_sum_to_zero[(1, 3, -2, 1]) फॉलस >>> pairs_sum_to_zero([1, 2, 3, 7]) फॉलस >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) ट्रू >>> pairs_sum_to_zero[1]) फॉलस """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,kas_Deva,python,"

def change_base(x: int, base: int):
    """"""इनपुट नंबर x हिच नुमारिकाल बेस बेस मंज़ तब्दील करा. कन्वर्शन पत वापस करों स्ट्रिंग रिप्रेजेंटेशन. बेस नंबर छू कम 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,kas_Deva,python,"

def triangle_area(a, h):
    """"""त्रिकोणक खातिर छू अख साइड हिंज लेंथ ते हाई रिटर्न एरिया देवन. >>> triangle_area""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,kas_Deva,python,"

def fib4(n: int):
    """"""Fib4 नुमारिक सीक्वेंस छु फिबोनैकी सीक्वेंस हिव सॉति यिवान वुछ्न यिवान: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया अख फंक्शन लिखु fib4 नुमारिक सीक्वेंसुक एन-थ एलिमेंट इफिसीएन्स्ली कम्प्यूट करन्ह खात्रि। रिकर्शन न इस्तेमाल कर। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,kas_Deva,python,"

def median(l: list):
    """"""रिटर्न मेडियन ऑफ़ एलिमेंट्स इन द लिस्ट l. >>> मेडियन (([3, 1, 2, 4, 5]) 3 >>> मेडियन (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,kas_Deva,python,"

def is_palindrome(text: str):
    """"""Checks if given string is a palindrome >>> is_palindrome('') True >>> is_palindrome('aba') True >>> is_palindrome('aaaaa') True >>> is_palindrome('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,kas_Deva,python,"

def modp(n: int, p: int):
    """"""रिटर्न 2^n मॉडुलो p (नोटः नुमारिकस) >>> मॉडप (३, ५) 3 >>> मॉडप (१०१, १०१) 2 >>> मॉडप (०, १०१) १ >>> मॉडप (३, ११) 8 >>> मॉडप (१००, १०१) १""""""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,kas_Deva,python,"

def encode_shift(s: str):
    """"""takes as इनपुट स्ट्रिंग encoded with encode_shift फंक्शन. रिटर्न डिकोडेड स्ट्रिंग. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""ेकस ाखरेस मंज़ 5 हंड्रेड सेथ ेकस ाखरेस मंज़ 5 हंड्रेड सेथ ेकस ाखरेस मंज़ 5 हंड्रेड सेथ""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,kas_Deva,python,"

def remove_vowels(text):
    """"""remove_vowels छु अख फंक्शन युस स्ट्रिंग लिछ त सु छु पानवयन त्रावान। >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd'""""""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,kas_Deva,python,"

def below_threshold(l: list, t: int):
    """"""अगर सलीम नंबर छी लिस्ट मंज़ त छी सही लोटो अगर सलीम नंबर छी थ्रेसहोल्ड t खोत नीच >>> below_threshold([1, 2, 4, 10], 100) सही >>> below_threshold([1, 20, 4, 10], 5) गलत """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,kas_Deva,python,"

def add(x: int, y: int):
    """"""युस असुमोट छी कारन x ते y छी कारन add2,3) 5 add5,7) 12""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,kas_Deva,python,"

def same_chars(s0: str, s1: str):
    """"""अगर कहँ ते लफ़ज़ छी तेमन निष् छी आसान एक्सीलेन्ट करैक्टर. >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') सही >>> same_chars('abcd', 'dddddddabc') सही >>> same_chars('dddddddabc', 'abcd') सही >>> same_chars('eabcd', 'dddddddddabc') गलत >>> same_chars('abcd', 'dddddddabddce') गलत >>> same_chars'(abcdzzzz', 'dddzzzzzzzddabc') गलत """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,kas_Deva,python,"

def fib(n: int):
    """"""फिबोनाची नुम्बरं छी वापस कारन. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,kas_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets छू स्ट्रिंग ""<"" ते "">"". अगर हर ओपनिंग ब्रैकेट छू अख मुतवाजी क्लोजिंग ब्रैकेट असा,तेम छू ट्रू. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,kas_Deva,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,kas_Deva,python,"

def common(l1: list, l2: list):
    """"""दो लिस्ट्स खातर छी येवा वापस करने. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,kas_Deva,python,"

def largest_prime_factor(n: int):
    """"""अगर n > 1 अस एवं माना ,तमुक प्राइम फैक्टर छान आसान""""""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,kas_Deva,python,"

def sum_to_n(n: int):
    """"""sum_to_n छी आँख फंक्शन युस अस सुम्म छी कारन नंबर 1 पेठ n ताम. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1""""""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,kas_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets is a string of ""("" and "")"". return True if each opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,kas_Deva,python,"

def derivative(xs: list):
    """"""xs छी हवन कोफ्फीसिएंट पोलीनोमिअल. xs[0] + xs[1] * x + xs[2] * x^2 + .... छी देवन डेरिवेटिव पोलीनोमिअल हुन्द यथ फॉर्मस मंज़. >>> डेरिवेटिव (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> डेरिवेटिव [(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,kas_Deva,python,"

def fibfib(n: int):
    """"""फिबफिब नुम्बरं सीक्वेंस छू फिबोनैकी सीक्वेंस सेत मिलान येमच तारीफ छू एएम मुताबिक: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). कृपया अख फंक्शन लिखें ताकि फिबफिब नुम्बरं सीक्वेंस हिन्द एन-थ एलिमेंट इफिसीएन्स्ली कम्प्यूट करथ. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,kas_Deva,python,"
FIX = """"""युस अस वुछो छी एम् छी अस वाना की ""a"" छी वाना ""e"" छी वाना ""i"" छी वाना ""o"" छी वाना ""u"" छी वाना ""a"" छी वाना ""e"" छी वाना ""o"" छी वाना ""u"" छी वाना ""a"" छी वाना ""e"" छी वाना ""o"" छी वाना ""u"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a"" छी वाना ""a""""""""

def vowels_count(s):
    """"""वरीय टेस्ट केस ते जोडे""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,kas_Deva,python,"
def circular_shift(x, shift):
    """"""अगर सरफ > नंबर ऑफ़ डिजिट्स, तो रिवर्स डिजिट्स. >>> circular_shift{12}, 1) ""21"" >>> circular_shift{12}, 2) ""12""""""""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,kas_Deva,python,"
def digitSum(s):
    """"""टास्क अख फंक्शन लिखुन युस अख स्ट्रिंग इनपुट कि तैर पइठ लेथ ते सिरिफ़ उप्पेर करैक्टरन हुन्द सुम असिथ ASCII कोड्स. मिसालः digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,kas_Deva,python,"
def fruit_distribution(s,n):
    """"""याथ टास्क मंज़ ,अस छी देवन स्ट्रिंग युस हवन छी नंबर ऑफ़ एप्पल बे ओरेंज युस छी डिस्ट्रीब्यूट कारन फर्ट्स बास्केट मंज़ अथ बास्केट मंज़ छी आसान एप्पल ,ऑरेंज ,बे आम फलों .युस स्ट्रिंग छी हवन टोटल नंबर ऑफ़ ऑरेंज बे एप्पल बे आख इन्टिजर युस हवन छी टोटल नंबर ऑफ़ फलों बास्केट मंज़ छी सु छी देवन नंबर ऑफ़ मैंगो फलों बास्केट मंज़ .मिसाल की तोर: fruit_distribution""5(एप्पल बे 6 ऑरेंज"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples and 1 oranges"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,kas_Deva,python,"
def pluck(arr):
    """"""""अख अदार दिवान युस अकिस कुलिस ब्रांचस नुमायंद छि युस नोन-नेगेटिव इंटेगर नोड्स छि अमिच काम छे अकिस नोडस त वापस करनुक। युस नोड छू तमिच गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछुन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछन गछ""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,kas_Deva,python,"
def search(lst):
    '''अगर अस ने अस एवं ,तथ छी अस वन - 1 .मिसाल की तोर:सर्च ([4, 1, 2, 2, 3, 1]) == 2सर्च ([1, 2, 2, 3, 3, 4, 4]) == 3सर्च ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,kas_Deva,python,"
def strange_sort_list(lst):
    '''इंटेगरन हिंज लिस्ट देवन,तथ छू लिस्ट ऑर्डरिंग स्ट्रेन्ज ऑर्डर मंज़.स्ट्रेन्ज सॉर्टिंग,ये छू येल अस मिनिमम वैल्यू सेत शुरू छू करा,पात छू मैक्सिमम रेस्टिंग इंटेगरन हुन्द,पात छू मिनिमम ते एएम पात.मिसालःstrange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,kas_Deva,python,"
def triangle_area(a, b, c):
    '''त्रिकोण की तीन तरफ़ की लम्बाई दी गई। त्रिकोण का क्षेत्रफल 2 दशमलव बिंदुओं तक गोल करें अगर तीन तरफ़ वैध त्रिकोण बनाते हैं। अन्यथा -1 लौटाएं तीन तरफ़ वैध त्रिकोण बनाते हैं जब किसी दो तरफ़ का योग तीसरी तरफ़ से बड़ा हो। उदाहरण: triangle_area (३,४,५) == 6.00 triangle_area (१,२,१०) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,kas_Deva,python,"
def will_it_fly(q,w):
    '''लिखो फंक्शन युस True रिटर्न छू अगर ऑब्जेक्ट q फ्लाई,ते False अगर न. ऑब्जेक्ट q फ्लाई छू बैलेंस्ड (ये छू पालिंड्रोमिक लिस्ट) ते एमएच एलिमेंट्स हुन्द जुर छू कम या बराबर मैक्सिमम मुमकिन वज़न w. मिसाल:will_it_fly([1, 2], 5) â -> False # 1+2 छू कम मैक्सिमम मुमकिन वज़न,लकिन ये छू इनबैलेंस्ड.will_it_fly([3, 2, 3], 1) â -> False # ये छू बैलेंस्ड,लकिन 3+2+3 छू ज़याद मैक्सिमम मुमकिन वज़न.will_it_fly[3, 2, 3], 9) â -> True # 3+23 छू कम मैक्सिमम मुमकिन वज़न,ते ये छू बैलेंस्ड.will_it_fly([3], â 5) -> True # 3 छू कम मैक्सिमम मुमकिन वज़न,ते ये छू बैलेंस्ड.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,kas_Deva,python,"
def smallest_change(arr):
    """"""अगर अस वुछो एर्रे ऑफ़ इंटेजर ,तह छी ज़रूरत बदलाने एलिमेंट्स हुन्द ताकि एर्रे हको पालिंड्रोमिक बनायिथ.अख पालिंड्रोमिक एरे छी एरे युस अस बराबर अस बैकवर्ड बे फॉरवर्ड.अख बदलाव मंज़ ,अस हको बदलित आख एलिमेंट कहँ ते एलिमेंट.मिसाल की तोर: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,kas_Deva,python,"
def total_match(lst1, lst2):
    '''अगर ज़न दोनन सूरतन मंज़ अकिच तादाद छु, गोडनिकि सूरत वापस करान। मिसाल total_match{\displaystyle {\mathcal {{{hi},{admin},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\displaystyle {'admin'},{\mathcal {cal {cal},{cal},{cal},{cal},{cal},{cal},{cal}},{cal},{cal},{cal}},{cal},{cal}},{cal},{cal},},{cal},},{cal},{cal},},{cal},},{cal},},{cal},{cal},},{cal},{cal},},{cal},},{cal},{cal},{cal},},{cal},{cal},},{cal},{cal},{cal},{cal},},{cal},{cal},},{cal},{cal},},{cal},{cal},{cal},},{cal},{cal},{cal},{cal},},{cal},{cal},{cal},},{cal},{4},},{1},{1},{4},},{1},},{4},}{4}{4'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,kas_Deva,python,"
def is_multiply_prime(a):
    """"""अगर अस देवन नंबर छी मल्टिप्लिकेशन 3 प्राइम नंबरों हुन्द ,तथ छी अस गलत कारन.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,kas_Deva,python,"
def is_simple_power(x, n):
    """"""तोरेच काम छू सु फंक्शन लिखना युस ट्रू छू रिटर्न करा अगर नंबर x आसान पावर ऑफ़ n ते गलत छू बाकि मामलन मंज़. x छू आसान पावर ऑफ़ n अगर n**int=x मिसाल की तोर: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,kas_Deva,python,"
def iscube(a):
    '''आँख फंक्शन लिखो युस इन्टिजर a छी कारन ते तेम छी वापस कारन ट्रू अगर ये इन्टिजर आँख इनटिजर नंबरुक क्यूब अस .नॉट:तुह हको अस मानो इनपुट छू हमेशा वैलिड.मिसाल: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,kas_Deva,python,"
def hex_key(num):
    """"""अगर अस वुछो की अस छी एवं हेक्साडेसिमल नंबर ते अस एवं कारन हेक्साडेसिमल डिजिट ते अस एवं कारन नंबरिंग हेक्साडेसिमल डिजिट अस प्राइम अस हेक्साडेसिमल डिजिट छी 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. प्राइम नंबर छी 2, 3, 5, 7, 11, 13, 17,... तो अस पनुन नंबर बनवा: 2, 3, 5, 7, 7, B (=डेसिमल 11), D (=डेसिमल 13) नोट: तुहको अस संजन सलीम सही या खाली स्ट्रिंग ,बे निशान A ,B ,C ,D ,E ,F छी हमेशा अपरकेस .मिसाल: ""num"" खातर अस कारन आउटपुट नुम = 1. ""num"" खातर अस कारन आउटपुट नुम = 1. ""num"" खातर अस कारन आउटपुट नुम = 10.77E ""आउटपुट ""num"" खातर अस कारन 2. ""num"" खातर अस कारन AB1 = 333 ""num"" खातर अस कारन 4. ""BC"" खातर अस कारन 6.012345 ""A"" खातर अस कारन 6.0126 ""A"" खातर आउटपुट ""2020 "" """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,kas_Deva,python,"
def decimal_to_binary(decimal):
    """"""अगर अस वुछो की अस छी एवं डेसीमल नंबर दिन ,तेम छी एवं बीनरी नंबर दिन ,अतः छी अस कारन स्ट्रिंग ,अतः मंज़ छी एवं हर वर्ण बीनरी नंबर दिन ,हर वर्ण छी आसान ""0"" या ""1"" ,अतः मंज़ छी एवं बे कहीं वर्ण बी ""db"" ,बे छी अथ कारन शुरू बे ख़तम ,अतः मंज़ छी एवं मदद कारन फॉर्मेट दिन ,मिसाल की तोर डेसीमल_टू_बाइनरी15""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,kas_Deva,python,"
def is_happy(s):
    """"""तुंह पजह अख स्ट्रिंग एस. तुंहंदिस कामिच छु यि चेकी करान ज़ि स्ट्रिंग छु खूश या न। अख स्ट्रिंग छु खूश अगर अमिच ताम कम से कम 3 छे त हर 3 लगातार लफ्ज़ छि मुख्तलिफ मिसालेः is_happy (a) => False is_happy (a) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,kas_Deva,python,"
def numerical_letter_grade(grades):
    """"""ये छू सेमेस्टरक आखरी हफ्तस ते टीचर छू स्टूडेंट्स ग्रेड देवन.टीचर छू ग्रेडिंग खातिर पनुन अल्गोरिथम बनावन.एक्वा मसले छू कि,इम क्र कोड गमे युस इम ग्रेडिंग खातिर इस्तिमाल छू करा.इम क्र केह स्टूडेंट्स खातिर GPAs हिंज लिस्ट देवन ते तुह पनुन अख फंक्शन लिखून युस लेटर ग्रेड हिंज लिस्ट आउटपुट करथ येमच मदद सेत तालिका छः GPA. लेटर ग्रेड 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,kas_Deva,python,"
def prime_length(string):
    """"""अख फंक्शन लिखो युस अख स्ट्रिंग छू ते छू ट्रू लवान अगर स्ट्रिंग लेंथ अस प्राइम नंबर या फॉलस अगर अस नॉन प्राइम लेंथ
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,kas_Deva,python,"
def starts_one_ends(n):
    """"""अगर अस पॉजिटिव इंटेजर दिन ,तथ छी अस एवं नंबर दिन""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,kas_Deva,python,"
def solve(N):
    """"""अगर अस वुछो पॉजिटिव इंटेजर N ,तिल करो टोटल सुम्ड ऑफ़ सिगित्स इन बाइनरी .मिसाल की तोर पेठ N = 1000 ,सुम अस 1 आउटपुट अस ""1"" .N = 150 ,सुम अस 6 आउटपुट अस ""110"" .N = 147 ,सुम अस 12 आउटपुट अस ""1100"" .वैरिएबल्स: @N integer Constraints: 0 â‰¤ N â‰¤ 10000.आउटपुट:बाइनरी नंबर स्ट्रिंग """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,kas_Deva,python,"
def add(lst):
    """"""अगर अस ने अस एवं इन्टिजरस हदीस लिस्ट मंज़ ,तह छी अस एवं इन्टिजरस हदीस लिस्ट मंज़ ते जोड़ने""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,kas_Deva,python,"
def anti_shuffle(s):
    """"""लिखो फंक्शन युस स्ट्रिंग छी लेवा बे छी देवन ुर्देड वर्शन ुरदे.अर्डर वर्शन स्ट्रिंग , छी स्ट्रिंग याथ मंज़ सलीम लफ़ज़ (स्पेस सेपरेटेड) छी एवं बदलनी नव लफ़ज़ सेथ याथ मंज़ सलीम कैरेक्टर छी एवं ास्केडिंग ुर्दे मंज़ बेस्ड ASCII वैल्यू पेठ. नोट: तुम छी वाचना की तुमन छी कारन ऑर्डर लफ़ज़ बे रिक्त जाइ मंज़ .मिसाल की तोर:anti_shuffle('Hi') रिटर्न 'Hi' anti_shuffle('hello') रिटर्न 'ehllo' anti_shuffle('Hello World!!!') रिटर्न 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,kas_Deva,python,"
def get_row(lst, x):
    """"""तेरे अरे गिवेद a 2 dimensional डेटा, अस a नेस्टेड लिस्ट्स, व्हिच इस सिमिलर तो मैट्रिक्स, however, unlike मैट्रिक्स, प्रत्येक रौ मेक कंटेन a डिफरेंट नंबर ऑफ़ कॉलम. गिवन lst, एंड इंटीजर x, फाइंड integer x इन थे लिस्ट, एंड रिटर्न लिस्ट ऑफ़ tuples, [(x1, y1), (x2, y2) ...] such that प्रत्येक टपल इस a कोऑर्डिनेट - (row, columns), स्टार्टिंग विथ 0. सॉर्ट कोऑर्डिनेट initially बाय रौस इन असीडिंग ऑर्डर. Also, sort कोऑर्डिनेट ऑफ़ थे रौ बाय कॉलम इन descending ऑर्डर. Examples: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0,0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0), get_(1, 1) [] == [[row, 1, 2, 3, 2]], == 2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,kas_Deva,python,"
def sort_array(array):
    """"""अगर अस नेगेटिव इंटेजरस नॉन -मैरिज ,तेम छी कारन वापस कॉपी ,अतः पठ छी अस कारन सॉर्ट अगर असुम (गोड्नुइक इंडेक्स वैल्यू ,लस्ट इंडेक्स वैल्यू) छी ेपॉर ,या छी अस कारन सॉर्ट अगर असुम (गोड्नुइक इंडेक्स वैल्यू ,लस्ट इंडेक्स वैल्यू) छी जोड़े नोट: * मत चेंज करो मारीच मिसाल: * sort_array [ ] => [] * sort_array [ ] => [5] * sort_array [2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array [2, 4, 3, 0, 1, 5, 6]) [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,kas_Deva,python,"
def encrypt(s):
    """"""अख फंक्शन एनक्रिप्ट क्रिएट करान युस अख स्ट्रिंग अस आर्गुमेंट की तैर पइठ तब्दील करा त बै अख स्ट्रिंग एनक्रिप्टेड करथ अल्फाबेट छू रोटेट येवा करने.अल्फाबेट छू रोटेट येवा करने ताकि लफ़्ज़े हकन ज़े ज़े प्लेस पेठ ज़े मल्टीप्लयड सेत.मिसाल की तैर पइठ: एनक्रिप्ट (hi) रिटर्नस lm एनक्रिप्ट (asdfghjkl) रिटर्नस ewhjklnop एनक्रिप्ट (gf) रिटर्नस kj एनक्रिप्ट (et) रिटर्नस ix""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,kas_Deva,python,"
def next_smallest(lst):
    """"""अगर अस ने अस एवं तो अस ने कहँ ते ते वरीय कम कारन.next_smallest{\displaystyle {next_smallest} } छी एवं इन्टिजरस पेठ .अथ पाठ छी अस फंक्शन लिखन युस अस दोयम सरियो खोत लकिट एलिमेंट छी कारन.अगर अस ने अस एलिमेंट ते छान ते छी ये वरीय कम कारन.next_smallest{\displaystyle {next_smallest} [1,2,3,4,5]) == 2 next_smallest{\displaystyle {next_smallest} [5,1,4,3,2]) == 2 next_smallest{\displaystyle {next_smallest} [[5,1,4,3,2]) == 2 next_smallest{\displaystyle {next_smallest} [[[1,1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,kas_Deva,python,"
def is_bored(S):
    """"""तुह्य़ छि अकि लफ्ज़चि स्ट्रिंग दियिथ, त तुह्य् छु अमिच बोरियत ह्न्ज़ गॉर गिवान। बोरियत छु अख लफ्ज़ युस ""I"" शब्दस सॉति शरू सपदान छु। लफ्ज़ छि '.', '? या '! ' सॉति ब्योन यिवान। मिसाले: >>> is_bored (((""हलो वर्ल्ड"") 0 >>> is_bored ((""स्काई इस ब्लू। सन इस शाइनिंग। आइ लव दिस वेदर"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,kas_Deva,python,"
def any_int(x, y, z):
    '''युस फंक्शन छी सु छी अस ने कारन 3 नुम्बरं. ये छी देवन ट्रू अगर आँख नुम्बरं छी बराबर बाकि ज़न हुन्द ,बे सलीम नुम्बरं छी इन्टिजर.ये छी देवन फॉल्ट बकियाँ ेकस केस मंज़.मिसाल की तोर _ any_int{5,2,7} -> True any_int{3,2,2} -> False any_int{3, -2,1} -> True any_int{3,6, -2,2} -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,kas_Deva,python,"
def encode(message):
    """"""लिख्ख अख फंक्शन युस मेसेज लेछ,ते तैर पइठ एन्कोड छू करा कि येम सेत तेम तमाम लफ़्ज़न हुन्द केस तब्दील करा,ते मेसेज मंज़ तमाम वॉक्लस तेम लफ़्ज़न सेत बदलवा,येम इंग्लिश अल्फाबेट मंज़ तेम वॉक्लस सेत 2 प्लेस बरोह छपे.सिर्फ लफ़्ज़ छू एम्म मानन.मिसालः >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,kas_Deva,python,"

def skjkasdkd(lst):
    """"""अगर अस वुछो की अस छी इन्टिजर ,अतः छी अस वूचन की अस छी वरीय असल प्राइम वैल्यू ,बे छी अस कारन ुमन हिन्द डिजिट बे छी सुद असूल""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,kas_Deva,python,"
def check_dict_case(dict):
    """"""अगर अख डिक्शनरी दीवान, अगर सलीम कुलि ल्गू केस मंज़ स्ट्रिंग्स या सलीम कुलि अपर केस मंज़ स्ट्रिंग्स आसि, अगर न फ़लस वापस करान। फ़ंक्शन पज़ि फ़लस वापस करान अगर दीवान डिक्शनरी छू खली आसान। मिसालः check_dict_case{""a"":""apple"", ""b"":""banana""}) पज़ि फ़लस वापस करान। check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) पज़ि फ़लस वापस करान। check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) पज़ि फ़लस वापस करान। check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) फ़लस पज़ि फ़लस वापस करान। check_dict_case{""NC""STATE:"""", ""ZIP"":""45"" } पज़ि फ़लस वापस करान।""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,kas_Deva,python,"
def count_up_to(n):
    """"""युस फंक्शन छी ये छी ने नेगेटिव इंटेजर कारन बे छी देवन सरिख सरिख गोदनयक n इंटेजर युस प्राइम नंबर छी बे छी लकुट एन निष् मिसाल की तोर: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,kas_Deva,python,"
def multiply(a, b):
    """"""ये छू आँख फंक्शन युस ज़े इन्टिजर छू तेम हिन्द यूनिट डिजिट हुन्द प्रोडक्ट छू देवन.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,kas_Deva,python,"
def count_upper(s):
    """"""अगर अस देवन स्ट्रिंग s ,कैसे करो नंबर अपरकेस वोकेल्स मंज़ युस अस छी एवं इस्तेमाल करने""""""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,kas_Deva,python,"
def closest_integer(value):
    '''अगर अस ने अस नज़दीक ते अस नज़दीक ,तथ छी अस एवं नून पेठ नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर ते नेबर'''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,kas_Deva,python,"
def make_a_pile(n):
    """"""अगर अस पॉजिटिव इंटेजर n देवन ,तोल गसण पाथेरन हुन्द लेवल बनावन.गोड्नुइक लेवल छी एन स्टोन्स.पात पात पात पात छी नंबर: - नेक्स्ट अपॉइंटमेंट अगर n छी अनडेर - नेक्स्ट अपॉइंटमेंट अगर n छी जोड़े.तेम पात पात छी नंबर स्टोन्स युस पात पात छी सु छी एवं वापस कारन ,यित एलिमेंट इंडेक्स i छी कारन नंबर स्टोन्स पेठ लेवल (i+1)""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,kas_Deva,python,"
def words_string(s):
    """"""तुह्य़ छि अकि लफ्ज़चि डानचि दानि यिवान यिम कॉमा या स्पेस सॉति ब्योन कडिथ छि। तुह्य् छु अमि डानचि लफ्ज़्न म्न्ज़ बॉगरावन त लफ्ज़्न हुन्द एरे रटन करान। मिसाले: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,kas_Deva,python,"
def choose_num(x, y):
    """"""ये फंक्शन छू ज़े पॉजिटिव नंबर x ते y ते छू सरियो खोत बुड इन्टिजर लबनी येम रेंज [x, y] मंज़ छू.अगर ये नंबर ने अस,तेल फंक्शन छू -1 लबनी.मिसाल की तोर:""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,kas_Deva,python,"
def rounded_avg(n, m):
    """"""अगर n छू ज़याद,तेल छू इनरलिंकस मंज़ ते बदलान.मिसाल: rounded_avg{1,} (5) => ""0b11"" rounded_avg{7,5) => -1 rounded_avg{10,20} => ""0b1111"" rounded_avg{20,33) => ""0b11010""""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,kas_Deva,python,"
def unique_digits(x):
    """"""अगर अस वुछो पॉजिटिव इंटेजर x ,तिल छी अस कारन सूर्ट सलीम एलिमेंट्स हैज़ युस ने अस कहीं ज़े डिजिट .नोट:युस लोटर्न अस अस कारन सूर्ट छी कारन ऑर्डरिंग मंज़.मिसाल की तोर पेठ: >>> unique_digits (([१५ , ३३ , १४२२ , १]) [१ , १५ , ३३ ] >>> unique_digits (([१५२ , ३२३ , १४२२ , १०]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,kas_Deva,python,"
def by_length(arr):
    """"""अगर अस इंतेजरस पेठ छी ,अथ छी अस रटन इंतेजरस 1 ते 9 मंज़ ,अथ छी अस कारन रिवर्स ,तथ छी अस कारन रिवर्स ,बे छी अस कारन रिप्लेस ,हर डिजिट छी अस कारन रिप्लेस ,एख ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,हर डिजिट छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,हर डिजिट छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,अतः छी अस कारन रिप्लेस ,तत् छी ,ततः छी अस कारन रिप्लेस ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,तत् छी ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त ,त""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,kas_Deva,python,"
def f(n):
    """"""f फंक्शन युस n अस कारन पैरामीटर पेठ ,बे छी देवन लिसट साइज n ,यिथ पाठ वरीय एलिमेंट इंडेक्स पेठ छी फैक्टोरियल i अगर i छी जोर या छी सूद नंबर 1 पेठ i ताम अगर न की अस कारन. i छी शुरू कारन 1 पेठ.""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,kas_Deva,python,"
def even_odd_palindrome(n):
    """"""पॉजिटिव इंटेगर n देथ,तेम छी टपल कारन युस नंबर छी जोर ते अनडेर इंटेगर पालिंड्रोम्स युस रेंज मंज़ छी एवं. मिसाल1: इनपुट: 3 आउटपुट: (1, 2) एक्सप्लनेशन: इंटेगर पालिंड्रोम छी 1, 2, 3. आँख छी जोर ,त बै ज़े छी ओड. मिसाल2: इनपुट: 12 आउटपुट: (4, 6) एक्सप्लनेशन: इंटेगर पालिंड्रोम छी 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. चूर छी जोर ,त बै 6 छी ओड. नोट: 1. 1 <= n <= 10^3 2. टपल दुईत नंबर जोर ते अनडेर इंटेगर पालिंड्रोम्स""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,kas_Deva,python,"
def count_nums(arr):
    """"""अगर आँख नंबर छू नेगेटिव,तेल अस सुन्द गोड्नुइक सिग्नेटेड डिजिट नेगेटिव:मिसाल की तोर पेठ -123 छू सिग्नेटेड डिजिट -1,2,बे 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,kas_Deva,python,"
def move_one_ball(arr):
    """"""असि नॆ इंटेगर 'अर्र' आस्नॆ. आरे मन्ज़ नॆ नंबर यॆ रैंडमली ऑर्डर्डर्ड करनॆ. अमिच़ काम छे ईछ़ान करना कि क्या अख अम्ल नॆ कम गछ़ान ऑर्डर मंज़ सॉर्ट करनॆ मुमकिन छे. अमिच़ काम छे मय्यत सरिथः अम्ल हॆकिव कुनि ति वखतस ताम दाहिने तरफ़ हिलावनॆ आमुत. अकि दाहिने तरफ़ हिलावनॆ आमुत मतलब छु कि सरिथ कॆस ति एलिमेंट्स सॊथ अकि पोज़ीशन दॆ राइटस मंज़ हिलावनॆ. अमिच़ ऑड दॆ राइटस हॆकिव सरिथ कॆस ति अकि पोज़ीशन सॊथ आरंभ गछ़ान यॆर मतलब 0th इंडेक्स. अगर असि नॆ कम गछ़ान ऑर्डर हासिल करनॆ मुमकिन आसि, तिम पॆठि रिटर्न ट्रू, बाक़य रिटर्न फ़ॉल्स. अगर दीवॆ एरे खाली आसि तिम रिटर्न फ़ॉल्स. नोटः दीवॆल सूरतस मंज़ छि गार्यत अनन्य एलिमेंट्स. मस गारथ गारनॆ गारन. मिसालः मूवरे_ऑन_{((बाल_बाल_बाल=4,===5, 1, 2>स=सत्युम=स सही=स=सथ)""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,kas_Deva,python,"
def exchange(lst1, lst2):
    """"""अगर अस मुमकिन छी एक्सचेंज एलिमेंट्स lst1 ते lst2 दरमियान ताकि एल एलिमेंट्स अस हकन असिथ ,तो वापस करो ""YES"".या नॉन ,तो वापस करो ""NO"".मिसाल की तोर:exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""ये छी एवं माना की इनपुट लिस्ट छी ने खाली""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,kas_Deva,python,"
def histogram(test):
    """"""अगर अख स्ट्रिंग छू स्पेस सेपरेड लोकरकेस लेटर रिप्रेजेंट करा,तेल छू ज़याद रिपीट करने वाले लेटरक डिक्शनरी ते तेम सेत मिलान.अगर कह लेटर छू एएम सेत मिलान,तेल छू तेम तमाम लातर रिटर्न करा.मिसाल:हिस्टोग्राम (a) == {'a': 1, 'b': 1, 'c': 1} हिस्टोग्राम (a) == {'a': 2, 'b': 2} हिस्टोग्राम (a) == {'a': 2, 'b': 2} हिस्टोग्राम (b) == {'b' 4} हिस्टोग्राम (a) == {'b'}""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,kas_Deva,python,"
def reverse_delete(s,c):
    """"""काम अस तुमु देवन ज़े स्ट्रिंग s ते c , तुह पज़े सब किरदार डिलीट करों s मंज़ युस बराबर छू कह ते करैक्टर सी मंज़ ते वुछ अगर रिज़ल्ट स्ट्रिंग पालिंड्रोम छू. स्ट्रिंग छू पालिंड्रोम वानान अगर ये बैकवर्ड ते फॉरवर्ड बराबर छू. तुह पज़े रिटर्न करों टपल यथ मंज़ रिज़ल्ट स्ट्रिंग ते ट्रू/फॉल्स छू. मिसाल की तोर अगर s = ""abcde"", c = ""ae"", रिजल्ट असा असा असा ('bcd',False) अगर s = ""abcdef"", c = ""b"" रिजल्ट असा असा ('acdef',False) अगर s = ""abcdedcba"", c = ""ab"", रिजल्ट असा ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,kas_Deva,python,"
def odd_count(lst):
    """"""अगर अस वुछो स्ट्रिंग्स हुन्द लिस्ट ,यथ मंज़ हर स्ट्रिंग छी आसान सिर्फ डिजिट ,तोल अस लिस्ट कारन वापस .हर एलिमेंट i आउटपुटस मंज़ हको अस ""नॉम्बर ऑफ़ पियर एलिमेंट्स इन स्ट्रिंग i इनपुटस मंज़ ""यथ मंज़ सलीम आईएस हको अस बदलित नंबर्स ऑफ़ पियर डिजिट इन i'th स्ट्रिंग इनपुटस मंज़. >>> odd_count['1234567']) [""नॉम्बर ऑफ़ पियर एलिमेंट्स 4n स्ट्रिंग 4 ऑफ़ 4n इनपुट.""] >>> odd_count['3',""111111""]) [""नॉम्बर ऑफ़ पियर एलिमेंट्स 1n स्ट्रिंग 1 ऑफ़ 1n इनपुट. "",""नॉम्बर ऑफ़ पियर एलिमेंट्स 8n स्ट्रिंग 8 ऑफ़ 8n इनपुट. ""]""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,kas_Deva,python,"
def minSubArraySum(nums):
    """"""अगर अस इंतेजरस nमर्स हुन्द एरे दें,तेल अस नॉन-एमिक सुब-एरे हुन्द मिनिमम सुम वुछुन.मिसाल minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,kas_Deva,python,"
def max_fill(grid, capacity):
    import math
    """"""तुह्य् छि कुलन हुन्द अख रेक्टेंगुलर ग्रिड दिय्मुत। प्रेथ रॅह छे अख कुलि, त प्रेथ रॅह 1 छे आबुक अख इकाइ। प्रेथ कुलि छे अख बकेट युस आब पेठ ज़ाहिर करन बापथ इसतेमाल सपदान छु, त तमाम बकेट्न हुन्द कॅपेसिटी छे। तुह्य् ह्न्ज़ कारकरदगी छे कुलन खाली करन बापथ इस्तेमाल करनुक। बकेट्न कम करन बापथ वारियाह वखतह पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉठि पॉ""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,kas_Deva,python,"
def sort_array(arr):
    """"""अथ काटास मंज़,अस नोन-नेगेटिव इंटेजरस अख सरणी हुन्द तशरीह करान येमन हिन्द बाइनरी नुमायंदगी मंज़ नंबर वनस मुताबिक असेंडर क्रमेच.एमन हिंज ताम एएम सिमिलर नंबर वनस पेठ,दशमलव वैल्यू पेठ मब्नी तशरीह करान.ये गैसीय एएम पइठ अमली तब्दील करने: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,kas_Deva,python,"
def select_words(s, n):
    """"""अगर string s छू छूत,तेल छू फंक्शन छूत लिस्ट लबनी येवा. नोटः तुहको छूत इनपुट स्ट्रिंग मंज़ सिर्फ लेटर ते स्पेस छूत. मिसाल: select_words ""मेरी आस अख लकुट लम्ब"", 4) ==> [""लकुट""] select_words ""मेरी आस अख लकुट लम्ब"", 3) ==> [""मेरी"", ""लकुट""] select_words ""सिंपल व्हाइट स्पेस"", 2) ==> [] select_words ""हैलो वर्ल्ड"", 4) ==> [""वर्ल्ड""] select_words ""अंकल सैम"", 3) ==> [""अंकल""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,kas_Deva,python,"
def get_closest_vowel(word):
    """"""तुह्य़ छि अख लफ्ज़ दिवान। तुह्य़ काम छु लफ्ज़स मंज़ दॆन ह्न्ज़्न दॆवान्न ह्न्ज़्न दोन कंसोनान्ट्न दरमियान आसिमुत नज़दीक वोकल हावुन (केस सेन्सिटिव) । शरू त ख़तम करन वालेन ह्न्देन वोकलन हुन्द गॉर हिसाब करान। अगर तुह्य़ ने कुनि वोकल वुछान ब्रोन्ह कुन मोज़ू छुस नॆ गछान, खाली स्ट्रिंग वापस कडान। तुह्य़ हेकिव मानन ज़ि दितन स्ट्रिंगस म्न्ज़ छु सिरिफ़ बर्तानियॉयी लफ्ज़। मिसाले: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,kas_Deva,python,"
def match_parens(lst):
    '''अगर तुहीम ज़न स्ट्रिंग्स हिन्ज़ लिस्ट देंव, दुनवई स्ट्रिंग्स छि सिर्फ ओपनिंग ब्रेन्टेसेस '(' या क्लोज ब्रेन्टेसेस ') '। तुहीच काम छे ये चेकी करना कि क्या ज़न स्ट्रिंग्स कांह तरतीबस मंज़ रलावुन मुमकिन छे, कि नतीजस मंज़ स्ट्रिंग असल आसि। अख स्ट्रिंग एस छु असल मानन यिवान अगर त सिर्फ अगर एस मंज़ सरेन ब्रेन्टेसेस बाल्कन आसि। मिसाले: स्ट्रिंग '((()) ' छु असल, येलि ज़न स्ट्रिंग '()) ' छु न। अगर अख असल स्ट्रिंग बनावनिच तरीक आसि, त्राव 'हाँ' वापस, तः अगर न आसि, त्राव 'नो' वापस। मिसालः match_parens[('() ', ') ']) == 'हाँ' match_parens[(') ', ') ']) == 'नो' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,kas_Deva,python,"
def maximum(arr, k):
    """"""अगर अस वुछो एरे arr इंटेजरस ते पॉजिटिव इंटेजर k ,अथ मंज़ अस वरीय ज़याद नंबर.मिसाल1: इनपुट: arr = [ -3, -4, 5], k = 3 आउटपुट: [ -4, -3, 5] मिसाल2: इनपुट: arr = [4, -4, 4], k = 2 आउटपुट: [4, 4] मिसाल3: इनपुट: arr = [ -3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुट: [2] नोट: 1. एरे हिंज लेंथ अस [1, 1000] मंज़. 2. एलिमेंट्स अस एरे मंज़ अस [-1000, 1000] मंज़.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,kas_Deva,python,"
def solution(lst):
    """"""अगर अस इंतेजरस नॉन -एमिक लिस्ट अस देवन ,तोल अस तेम अनडेर एलिमेंट्स हिन्दुस् सुम अस तेम अस बी पोर पोजीशन मंज़.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,kas_Deva,python,"
def add_elements(arr, k):
    """"""अगर अस ने अस खली नॉन -एयर सरणी छी इन्टिजरस arr बी इन्टिजर k ,सु छी अस वापिस कारन एलिमेंट्स सुमथ युस अस ज़े डिजिट अस arr पेठ""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,kas_Deva,python,"
def get_odd_collatz(n):
    """"""कोलाट्ज़ कजेक्टुरे छू अख कजेक्टुरे मैथमेटिक्स मंज़ युस एथ पेठ डेफिनेड छू. कुंते पॉजिटिव इंटेगर n सेत शुरू गाछ. पात छू हर टर्म पोरें टर्म निष् येवा लबनी:अगर प्रेग्नेंट टर्म छू जोड़े, तेम पात छू येवा तेम पातक टर्मस सेत नेसथ.अगर प्रेग्नेंट टर्म छू अपर, तेम पात छू येवा तेम पातक टर्मस सेत नेसथ ज़राब तेम पातक टर्मस सेत ज़राब.कजेक्टुरे छू येवा वन कि एन किस वैल्यूस सेत फरक न परन,तेम सेत छू हमेशा नंबर 1 एवा गाछत.नोटः 1. कोलाट्ज़ (((1) छू [1]. 2. रिटर्नल लिस्ट क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा क्रमा""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,kas_Deva,python,"
def valid_date(date):
    """"""तो हवे तो लिखे a फंक्शन ठाट validates a गिवेद डेट स्ट्रिंग एंड returns ट्रू अगर डेट इस वैलिड अन्यथा फॉल्ट. थे डेट इस वैलिड अगर आल ऑफ़ थे फोल्लोविंग रूल्स अरे संतुष्ट: 1. थे डेट स्ट्रिंग इस नोट खाली. 2. थे नंबर ऑफ़ डेज़ इस नोट कम फ्रॉम 1 या हाईतर फ्रॉम 31 डेज़ फॉर मंथ्स 1,3,5,7,8,10,12. एंड थे नंबर ऑफ़ डेज़ इस नोट कम फ्रॉम 1 या हाईतर फ्रॉम 30 डेज़ फॉर मंथ्स 4,6,9,11. एंड, थे नंबर ऑफ़ डेज़ इस नोट कम फ्रॉम 1 या हाईतर फ्रॉम 29 फॉर मंथ 2. 3. थे मंथस शुड नोट बे लेस्स फ्रॉम 1 या हाईटर फ्रॉम 12. 4. थे डेट शुड बे इन थे फॉर्मेट: mm-dd-yyyy for example: valid_date('03-11-2000') => true_date => false_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date => valid_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date =>_date""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,kas_Deva,python,"
def split_words(txt):
    '''लफ्ज़न हुन्द अख स्ट्रिंग दितुन, लफ्ज़न हिन्ज़ अख लिस्ट वापस करन्ह येलि ज़न व्हाइटस्पेस पेठ तकसीम करन्ह, अगर टेक्स्टस मंज़ कांह वाइटस्पेस मौजूद आसि न, ति गस़न तुह कोमा पेठ तकसीम करन्ह, अगर कोमा मौजूद आसि न तुह गस़न तुह अल्फाबेट्स मंज़ लोट-लेटर लेटरन हिन्ज़ तादाद वापस करन्ह, ऑर्ड (a) = 0, ऑर्ड (b) = 1, ... ऑर्ड (z) = 25 मिसाले split_words (Hello world) â -> [""Hello"", ""world!""] split_words (Hello,world!"") â -> [""Hello"", ""world!"" split_words (abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,kas_Deva,python,"
def is_sorted(lst):
    '''अगर नंबर दीथ ,तेम अस या आस ने अस संज़् ज़रिये असेंडर मंज़ ,अगर नंबर ओस दुप्लिकेट ,तेम अस फॉलस .नगेटिव नुम्बरं अस ने एवं ,सिर्फ इंतेजरस .मिसाल अस _सोर्टेड
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,kas_Deva,python,"
def intersection(interval1, interval2):
    """"""अगर अस वुछो की इंटरवेल्स छी ज़े इंटरवेल्स ,यित अस हर इंटरवेल्स छी इंटेजर .मिसाल की तोर ,इंटरवेल = (शुरू ,आखरी) = (1,2);अथ इंटरवेल्स छी बंद ,याथ मतलब छू की इंटरवेल (शुरू ,आखरी) अथ मंज़ छी एवं दुनवई शुरू बे ख़तम .हर इंटरवेल्स खातर ,ये छी एवं माना की अथ मंज़ छी शुरू कहीं कम या बराबर अथ ख़तम करने खातर;अस सु काम की अस वुछो की अथ दुन इंटरवेल्स हुन्द लेंथ छी प्राइम नंबर;मिसाल की तोर ,इंटरवेल्स (1,3); (2,4); (2,3);ये छी एमएच लेंथ छी 1 ,ये छान प्राइम नंबर;अगर इंटरवेल्स लेंथ छी प्राइम नंबर ,अस;अगर दुनवई इंटरवेल्स छान इंटरसे ,अस;अगर दुनवई इंटरवेल्स छान इंटरसे ,अस;""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,kas_Deva,python,"
def prod_signs(arr):
    """"""अगर अस इन्टिजरस पेठ छी वूचन ,तोल छी अस कारन इन्टिजरस ज़रिये प्रोडक्ट ऑफ़ सलीम निशानन हुन्द ,अतः छी एवं वन 1 , - 1 या 0""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,kas_Deva,python,"
def minPath(grid, k):
    """"""अगर अस देवन ग्रिड N रडें ते N कॉलम (N >= 2) ते अख पॉजिटिव इंटिजर k ,हर सेल ग्रिडच छू अख वैल्यू आसान.हर इंटिजर रेंज मंज़ [1, N * N] इन्क्लुसिव छू अख वैल्यू आसान.तुह पनुन मिनिमम पाथ लेंथ k इन ग्रिडस मंज़.तुह हेकीक कुंते सेल पेठ शरू करिथ,ते हर स्टेप मंज़ तुह हेकीक कुन ते नेबर सेल्स मंज़ चलन,बाक़ी लबें सेल्स मंज़,बाक़ी लबें सेल्स मंज़ यिम तुहकीस एज सेल्स सेत शेअर छू करा.तुह करो नोट कि लेंथ k पथ हुन्द मतलब छू विज़िट कारन बिलकुल k सेल्स (नही छू ज़रूरी कि ये छू डिस्टिंक्ट).तुह ने ग्रिड पेठ नेबर नेबर नेबर नेबर नेबर.अख पाथ A (लेंथ k) छू पाथ B (लेंथ k) निष् कम समजन येवा येल ए ते B पेठ सेल हिंज ऑर्डर्डर्डर्ड लिस्ट बनावन पत (लम छू अस वनान l_stA ते l_stB),लस लेक्सिकली छू लेक्सिकली कम l_स्ट_A ते l_stB),लस छू लेक्सिकली कम l_स्ट_स्ट_स्ट_A,लस सेल्स मंज़,बाख इंटिजर पथ छू इन्टिजर,बाख इंटिजर इंटिजर,युन सेल्स मंज़,युन छू तुह हक़ा शेअर करा,ये अस तुह हक़ ग्रिड सेल्स सेथ.तुह हक़ अथ पेठ हक़ अस ग्रिड पेठ,ये अस ग्रिड पेठ: [1, [4, [1, l_1, l_1, l_1, l_1, l_1, l_1, l_2, l_[4, l_1, l_2, l_2, l_2, l_2, l_2, l_8, j_[, l_[] आउटपुट = l_[] [4, l_[] l_[] l_[] l_[] l_[]""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,kas_Deva,python,"
def tri(n):
    """"""फिबोनाची सीक्वेंस छी एवं वुचने ,लकिन युस लुख छान तेम जनन छी ट्राइबोनाची सीक्वेंस ,ये छी एवं वुचने रिसीवरेंस सेथ:tri(1) = 3tri(n) = 1 + n / 2 ,अगर n छी जोड़े ,tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1),अगर n छी अलग.मिसाल की तोर:tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ेमो दुईत नेगेटिव इंटेगर नंबर ,अस करो रिटर्न लिस्ट गोड्नुइक n + 1 ट्राइबोनाची सीक्वेंसिक .मिसाल की तोर:tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,kas_Deva,python,"
def digits(n):
    """"""अगर अस पॉजिटिव इंटेजर n ,अस करो प्रोडक्ट ऑफ़ ुन्ड डिजिट्स ,अगर सलीम डिजिट अस बराबर तेम छी देवन 0""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,kas_Deva,python,"
def is_nested(string):
    '''अख फंक्शन बनाव यथ मंज़ स्क्वायर ब्रैकेटस शामिल आसि. फंक्शन कर अस ट्रू वापिस अगर तॆ सिफॆ अगर ब्रैकेटसुक अख वैलिड सब्सकवेंस आसि यथ मंज़ कम अकिस ब्रैकेटस मंज़ नेस्टेड आसि. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nested. is_nest. is_nest. is_nest. is_nest. is_nest. is_nest. is_nest. is_nest.'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,kas_Deva,python,"

def sum_squares(lst):
    """"""तेरे इस नो नो एवेन्यू तो बे a लिसटी ऑफ़ नंबर्स. तेरे इस नो थिंग तो बे a स्क्वायर ऑफ़ नंबर्स इन थे गिवेद लिस्ट, राउंड अवे एलिमेंट्स इन थे लिस्ट तो थे अप्पर int (सॉलिमिंग) फर्स्ट. एक्सेम्प्शन्स: फॉर lst = [1,2,3] थे आउटपुट वे हवे तो बे 14 फॉर lst = [1,4,9] थे आउटपुट वे हवे तो बे 98 फॉर lst = [1,3,5,7] थे आउटपुट वे हवे तो बे 84 फॉर lst = [1.4,4.2,0] थे आउटपुट वे हवे तो बे 29 फॉर lst = [-2.4,1,1] थे आउटपुट वे हवे तो बे 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,kas_Deva,python,"
def check_if_last_char_is_a_letter(txt):
    '''अख फंक्शन बनाव यथ मंज़ ट्रू वापस छू येवा करने अगर अकिस देवन स्ट्रिंग्स मंज़ आखरी करैक्टर अल्फाबेटिकल करैक्टर असा,ते छुं सेत अख लफ़ज़ हिसस,ते फॉलस अगर असे न. नोट: ""लफ़ज़"" छू ग्रुप करैक्टरन हुन्द युस स्पेस सेत अलग छू असा. मिसाल: check_if_last_char_is_a_letter"" ""एप्पल पाई"") â -> False check_if_last_char_is_a_letter"" ""एप्पल पाई ई"") â -> ट्रू check_if_last_char_is_a_letter"" ""एप्पल पाई ई"") â -> फॉलस check_if_last_char_is_a_letter"" ""एप्पल पाई ई"") â -> फॉलस check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,kas_Deva,python,"
def can_arrange(arr):
    """"""युस फंक्शन छी सु छी देवन वरीय बढ़ इंडेक्स एलिमेंट्स हैज़ युस ज़याद आसान या बराबर आसान एलिमेंट्स सेथ यिल तेम अस ने एक्सिस्ट कारन""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,kas_Deva,python,"
def largest_smallest_integers(lst):
    '''अख फंक्शन बनाव यथ मंज़ टपल (a, b) वापस छू येवा करने,येत 'a' लार्ज छू नेगेटिव इंटेगरन मंज़,ते 'b' लार्ज छू पॉजिटिव इंटेगरन मंज़.अगर नेगेटिव या पॉजिटिव इंटेगर ने कहँ ते,तेम छू अस एवं वापस नेन.मिसाल:largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None)'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,kas_Deva,python,"
def compare_one(a, b):
    """"""अख फंक्शन बनावुन युस इन्टिजर,फ्लोट्स,या स्ट्रिंग्स छू कारन युस रियल नंबर्स रिप्रेजेंट छू करा,ते लार्ज वेरिएबल छू रिटर्न करा येम हिंज वेरिएबल टाइप छू देवन.अगर वैल्यूज छू बराबर,तेम छू नेन रिटर्न करा.नोट:अगर रियल नंबर छू स्ट्रिंग पेठ रिप्रेजेंट करा,फ्लोटिंग पॉइंट छू असान.या,कम्प्रेस_वन,1.2.5) â -> 2.5 compare_वन,1. ""2,3"") â -> ""2,3"" compare_वन,5.1"",6"") â -> ""6"" compare_वन,1. ""1) â -> नेन """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,kas_Deva,python,"
def is_equal_to_sum_even(n):
    """"""अगर अस वुछो की युस नंबर छी n हको अस ते लिखो बे सुमथ 4 पॉजिटिव नंबरों हुन्द""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,kas_Deva,python,"
def special_factorial(n):
    """"""ब्राज़ीलियन फैक्टोरियल छी एवं वन: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! यित n > 0 मिसाल की तोर: >>> special_factorial(4) 288 फंक्शन छी इन्पुट कारन इन्टिजर बे छी ये कारन स्पेशल फैक्टोरियल इनटिजर""""""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,kas_Deva,python,"
def fix_spaces(text):
    """"""_मिसाल-3ंग टेक्स्ट ,तोल छी सु सब्सक्राइब कारन अंडरस्कोर सेथ ,बे अगर आँख स्ट्रिंग छी ज़याद 2 लगातार स्पेसेस ,तोल छी सु सब्सक्राइब कारन -fix_spaces{""example""} == ""example""{""example1"") == ""example1""{""example2"") == ""example2""{""example3"") == ""example-3""""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,kas_Deva,python,"
def file_name_check(file_name):
    """"""अख फंक्शन बनावथ युस अख फ़ाइल नाव हावान छु, तमि बापथ 'हाँ' लवान छु, अगर फ़ाइल नाव सही आसि, त 'नो' लवान छु। अख फ़ाइल नाव छु तमि बापथ सही मानन यिवान अगर तिम सॉति यिमन शर्तन पूरः आसि:- फ़ाइल नावस म्न्ज़ तिम छि न त्रेन ह्नदि खोत ज़्यादह ('0'-'9') आसान। - फ़ाइल नावस म्न्ज़ छु अख डॉट '। - डॉट ब्रोन्ह सब्सट्रेन्ग छु न खॉली, त यि छु न लातीनी अल्फा पेठ ('a'-'z' त 'A'-Z') सेत शरू गछान। - डॉट पत सब्सट्रेन्ग छु यिम्न म्न्ज़ अख गछानः ['txt', 'exe', 'lld'] मिसाले: file_name_check""{example.txt.t"") # => 'हाँ' file_name_check""{example.txt.tll1"") => 'नह' (#' (फाइल नाव छु लातीनी अल्फा पेठ सेत शरू गछान)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,kas_Deva,python,"


def sum_squares(lst):
    """"""ये फंक्शन छू इंटेजरस हिंज लिस्ट बनावन.लस्ट मंज़ सरे एंट्रीज खातिर,फंक्शन छू इंटेजर एंट्री स्क्वायर कारन अगर इमूक इंडेक्स मल्टीप्ल ऑफ़ 3 ते छू इंटेजर एंट्री क्यूब कारन अगर इमूक इंडेक्स मल्टीप्ल ऑफ़ 4 ते न कि मल्टीप्ल ऑफ़ 3 छू.फंक्शन छू तेम एंट्रीज हिंज लिस्ट चेंज न करा एमूक इंडेक्स न मल्टीप्ल ऑफ़ 3 या 4.फंक्शन छू पत सरे एंट्रीज हिंज सुम ते लबनी.मिसाल:lst=[1,2,3] खातिर आउटपुट असा 6lst=[] खातिर आउटपुट असा 0lst=[-1,-5,2,-1,-5] खातिर आउटपुट असा -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,kas_Deva,python,"
def words_in_sentence(sentence):
    """"""तुह्य़ छि अकि वाक्यचि नुमायंद करान अख स्ट्रिंग दियिथ, वाक्यस मंज़ छे केन्ह लफ्ज़ स्पेस सॉति ब्योन, त तुह्य़ छे अख स्ट्रिंग लान यथ मंज़ ओरिजिनल वाक्यचि लफ्ज़ छि, यिमचि लन्गयि छि प्राइम नुमारिक, नवि स्ट्रिंग म्न्ज़ लफ्ज़न ह्न्ज़ तरतीब गछि ओरिजिनल सॉति आसान। मिसाल1: इनपुट: वाक्य = ""This is a test"" आउटपुट: ""is"" मिसाल2: इनपुट: वाक्य = ""lets go for swimming"" आउटपुट: ""go for"" कन्ट्रास्ट्स: * 1 <= len(sentence) <= 100 * वाक्यस म्न्ज़ छि सिरिफ़ लफ़ज़ """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,kas_Deva,python,"
def simplify(x, n):
    """"""अगर अस वुछो की अस छी एवं इस्तेमाल करने ,तथ छी अस एवं इस्तेमाल कारन एक्सप्रेशन एक्स * एन.फंक्शन छी देवन ट्रू अगर एक्स * एन छी इन्टिजर ,फॉल्स अगर अस ने अस कारन.दुनवई एक्स बे एन छी स्ट्रिंग रिप्रेजेंटेशन फ्रैक्शनक ,बे छी अथ फॉर्मेट ,<नुमरेटर>/<नोमिनटर> येथ नुमरेटर बे नुमिनेटर छी पॉजिटिव इन्टिजर .अस हको अस मानो एक्स ,बे एन छी वैलिड फ्रैक्शन ,बे छान अस नोल्डे denominator.""""""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,kas_Deva,python,"
def order_by_points(nums):
    """"""अगर अस तेम चीज़ अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम अस तेम तेम अस तेम तेम अस तेम तेम अस तेम ते अस तेम ते अस तेम ते अस तेम ते अस तेम ते अस तेम""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,kas_Deva,python,"
def specialFilter(nums):
    """"""लिखो फंक्शन युस अस लेवन एरे ऑफ़ नंबर इनपुट ते देवन तेम एलिमेंट तेम नंबर यम ज़याद छी 10 बे दुनवई गोडणुक ते आखरी डिजिट छी नंबर (1 ,3,5,7,9)""""""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,kas_Deva,python,"
def get_max_triples(n):
    """"""अगर अस वुछो की अस छी एवं इन्टिजर बनावने ,तथ छी अस एवं इन्टिजर बनावने ,एम् छी एवं इन्टिजर बनावने ,बी छी एवं इन्टिजर बनावने""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,kas_Deva,python,"
def bf(planet1, planet2):
    '''अमीच सोलर सिस्टम मंज़ छि आठ प्लेनेट: आफताबस नज़दीक छु मर्करी, बेयि छु वीनस, फिर ज़मीन, मंगल, बृहस्पति, शनि, यूरेनस, नेपच्यून। अख फंक्शन लिख्थ युस दोन प्लेनेट नाव्स सट्रेन्ड्स प्लेनेट1 त प्लेनेट2 कि तैर पइठ ले। फंक्शन छु अख टपल वापस करान यथ मंज़ सारिवय प्लेनेट आसान यिमयिकि कुलि छि प्लेनेट1 कि कुलि त प्लेनेट2 कि कुलि दरमियान आसान, तमिच तरतीब छु आफताबस नज़दीकी हिसाब सॉर्ट करनः यिवान। अगर प्लेनेट1 या प्लेनेट2 सही प्लेनेट नाव आसि न, फंक्शन छु अख खाली टपल वापस करान। मिसाल bf ""(जुपिटर"", ""नेपच्यून"") ==> (""शुमरु"", ""यूरनस"") bf ""(ज़मीर"", ""मर्करी"") ==> (""शुमरु"", ""ज़मीर"", ""मर्स"", ""शुमरु"", ""श"")'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,kas_Deva,python,"
def sorted_list_sum(lst):
    """"""अख फंक्शन लिखो युस स्ट्रिंग्स हिंज लिस्ट अख पैरामीटर कि तैर पइठ एक्सेप्ट करथ,येथ मंज़ तेम स्ट्रिंग्स डिलीट करथ यमन अनड लन्ग छे,ते सु युस नतीज दरयाफ्त करा अस सु छू ऑर्डर करा,लिस्ट छू हमेशा स्ट्रिंग्स हिंज लिस्ट असा,ते छू कदे नंबरन हिंज एरे,ते अथ मंज़ हेक डुप्लिकेट ते असत.लिस्ट हिंज ऑर्डर हर लफ्ज़ हिंज लेंथ हिसाब असा असा असा असा,ते तुह पनस लिस्ट अथ रूल सेत ऑर्डर करथ लौचनी.अगर ज़े लफ्ज़ हिंज लेंथ हिव,लिस्ट अल्फाबेटिकली ऑर्डर करा.फंक्शन छू स्ट्रिंग्स हिंज लिस्ट ऑर्डर करने खातिर लौचनी.तुह हेक मानथ कि तमाम लफ्ज़ हिव एकस लेंथ.मिसालः assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""ab"", ""cd ])""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,kas_Deva,python,"
def x_or_y(n, x, y):
    """"""अख सिम्पल प्रोग्राम युस वैल्यू ऑफ़ x देन यित n प्राइम नंबर अस त बै वैल्यू ऑफ़ y देन यित ने प्राइम नंबर अस""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,kas_Deva,python,"
def double_the_difference(lst):
    '''अगर अस नंबर दीवान ,सु छी अस देवन स्क्वायर ऑफ़ नंबर युस अस छी परड.अगर अस नेगेटिव या नॉन इंटेजर अस ,अस ने कारन इन्जोर.'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,kas_Deva,python,"
def compare(game,guess):
    """"""अगर तुही छी तहीं छी ये वरीय ज़याद आसान की अस तुही वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन की अस तु वूचन तु वूचने""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,kas_Deva,python,"
def Strongest_Extension(class_name, extensions):
    """"""अगर तुह सीएपी हियुन्द नाव बडिस अक्षरस मंज़ तब्दील करान, त तुह पान्ठि सबसे सटोर एक्सटेंशन हावुन त तुह पान्ठि एएम फॉर्मेटस मंज़ अख स्ट्रिंग रटनः ClassName.StrongestExtensionName. अगर दोन या ज़याद एक्सटेंशन हिन्ज़ ताकत अख अकिस सीथ आसि, तुह पान्ठि अख सु युस सरिवन पेठ आव। मिसाल किथ कनि, अगर तुह पान्ठि ""स्लाइसिस"" क्लास त एक्सटेंशन हिन्ज़ नावः ['SEviRNGliSCes', 'Cheese', 'StuFfed' दें, तो तुह पान्ठि 'Slices.SEviRNGli
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,kas_Deva,python,"
def cycpattern_check(a , b):
    """"""तुह्य़ छि 2 लफ्ज़. तुह्य़ गछुन ट्रू वापस यलि दोयिम लफ्ज़ या अमिच कुनि रोटेशन छे गोडनिकिस लफ्ज़स मंज़ अख सब्ट्रिंग साइक्पेटर्न_चेक ({""abcd"",""abd"") => फ़ॉल्स साइक्पेटर्न_चेक ({""hello"",""ell"") => ट्रू साइक्पेटर्न_चेक ({""whassup"",""psus"") => फ़ॉल्स साइक्पेटर्न_चेक ({""abab"",""baa"") => फ़ॉल्स साइक्पेटर्न_चेक ({""efef"",""eeff"") => फ़ॉल्स साइक्पेटर्न_चेक ({""hims"",""simen"") => ट्रू """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,kas_Deva,python,"
def even_odd_count(num):
    """"""अगर अस इन्टिजर अस देवन ,तथ छी अस टपल कारन वापस युस अस ने ज़ा ते अनड डिजिट अस""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,kas_Deva,python,"
def int_to_mini_roman(number):
    """"""पॉजिटिव इंटेजर, रोमन नुमारिकाल एक्विवैलेन्ट अस स्ट्रिंग, तेम अस लकिटस मंज़ वापस कारन.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,kas_Deva,python,"
def right_angle_triangle(a, b, c):
    '''त्रिकोण की तीन तरफ़ां हिन्ज़ लम्बाई दें. अगर त्रे तरफ़ां छू रेग्ट एंगल त्रिकोण बनान, तेम छू ट्रू लफ़्ज़ वापस कारन, अगर न, तेम छू गलत. अख रेग्ट एंगल त्रिकोण छू अख त्रिकोण येथ मंज़ अख एंगल छू रेग्ट एंगल या 90 डिग्री. मिसाल: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,kas_Deva,python,"
def find_max(words):
    """"""अख फंक्शन लिख युस स्ट्रिंग्स हिन्ज़ लिस्ट कुब्लिथ छे। अथ मंज़ छे मुख्तलिफ लफ्ज़ आसान। अकि लफ्ज़स मंज़ छि ज्याद तर यूनिक करैक्टर आसान। अगर वार्याहन स्ट्रिंग्स मंज़ ज्याद तर यूनिक करैक्टर आसान छे, तमि सॉति यिम लफ्ज़ गोड्निक तरतीबस मंज़ यिम कुब्लिथ वापस करान छि। find_max (([""name"", ""of"", ""string""]) == ""string"" find_max (([""name"", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,kas_Deva,python,"
def eat(number, need, remaining):
    """"""तुही छी भूखल खरगोश , तुही छी आकिस नंबरस खातर कार्ट्स ,लकिन तुह छी ज़रूरत की तुह करो वारिया कार्ट्स खातर दिन खातर .तुह छी ज़रूरत की तुह करो एरे वापस [ कुल नंबर खातर कार्ट्स यिल तुह छी खातर ,युस नंबर छी कार्ट्स युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस नंबर छी कार्ट्स युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी रोज़न युस तुह छी तुह छी""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,kas_Deva,python,"
def do_algebra(operator, operand):
    """"""ओपरेटर ते ओपरेंड छू दूँ लिस्ट मंज़.गोड्नुक लिस्ट छू बेसिक अलजेब्रा ऑपरेशन,ते दुय्यम लिस्ट छू इंटीजरस हिंज लिस्ट.अलजेब्रा एक्सप्रेशन बनवनी खातिर दूँ लिस्ट इस्तेमाल करिथ ते छू एएम एक्सप्रेशन हिंज इवैल्यूएशन रिटर्न करा.बेसिक अलजेब्रा ऑपरेशन:अद्दिसिओं (+) सब्ट्रैक्शन (-)) मल्टीप्लिकेशन (*) फ्लोर डिवीज़न (//) एक्सपोनेंशियल (**) मिसाल:ऑपरेटर['+', '*', '-'] अरे = [2, 3, 4, 5] रिजल्ट = 2 + 3 * 4 - 5 => रिजल्ट = 9 नोट:ऑपरेटर लिस्ट हिंज लेंथ छू बराबर ओपरेंड लिस्ट मिनर वन लेंथ सेत.ओपरेंड छू नॉन-नेगेटिव इंटीजर लिस्ट.ऑपरेटर लिस्ट छू कम से कम आँख ऑपरेटर,ते ओपरेंड लिस्ट छू कम से कम ज़े ऑपरेंड्स.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,kas_Deva,python,"
def solve(s):
    """"""अगर तुह सीत अख स्ट्रिंग देंव. अगर s[i] अख लफ़ज़ छे, तुह छे अमिच केस कम पेठ बोडस ताम या वरियाह ताम बदलावान, अगर न यि यथावथ रटन। अगर सीत कांह लफ्ज़ छिन, त तुह सीत उलटि करान। फंक्शन गस़ि नतजमच सीत लबनि। मिसाल हल करना (((""1234"") = ""4321"" हल करना (((""ab"") = ""AB"" हल करना (((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,kas_Deva,python,"
def string_to_md5(text):
    """"""अगर अस स्ट्रिंग 'टेक्स्ट' दें,तेम अस एमडी5 हैश एक्विवैलेन्ट स्ट्रिंग ते देवन.अगर 'टेक्स्ट' छू खली स्ट्रिंग,तेम अस नेन ते देवन. >>> string_to_md5('हैलो वर्ल्ड') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,kas_Deva,python,"
def generate_integers(a, b):
    """"""अगर a ते b छू पॉजिटिव इंटेगर, तेम ते b दरमियान छू प्वॉड डिजिट ते,येम असेंडिन्ग ऑर्डर मंज़ छू.मिसाल की तोर:generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
