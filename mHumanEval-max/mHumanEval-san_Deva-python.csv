task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,san_Deva,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""यदि कस्यचित् द्वयोः संख्यायाः समीपस्थः अस्ति चेत्, सः अनुक्रमणिकायाः अनुक्रमणिकायाः समीपस्थः अस्ति वा न। उदाहरणम्: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,san_Deva,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""अत्र इदम् फलनम् अस्ति यत् इदम् फलनम् अनेकेषु समूहेषु अन्तर्बद्धं कण्ठं युक्तं शृङ्खलं भवति । भवता लक्ष्यम् एतत् समूहं पृथक्-पृथक् शृङ्खलायां विभक्तम् कर्तुम् च तेषां सूचीम् प्रतिपादयितुम् अस्ति । पृथक्-पृथक् समूहः समतोलः भवति (प्रत्येक उघडे कण्ठः उचितं समाहितः भवति) न च परस्परम् अन्तर्बद्धः भवति । इदम् फलनम् अस्ति यत् इदम् प्रविष्टं शृङ्खलं पृथक्-पृथक्_पारेण_ग्रुप्स् ({\displaystyle \scriptstyle {\paren_groups }) इति विभज्यताम् । उदाहरणम्: >>> पृथक्_पारेण_ग्रुप्स् ({\displaystyle \scriptstyle {\scriptstyle {\scriptstyle {\scriptstyle }) } ['} , '{\scriptstyle {} , '} , '{\scriptstyle {} } } ') इति विभज्यताम् ।""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,san_Deva,python,"

def truncate_number(number: float) -> float:
    """"""यदि एकं धनात्मकं फ्लोटिंग पोंट् संख्या अस्ति, तर्हि सः पूर्णाङ्कः (प्रदत्त संख्यायाः अधिकं पूर्णाङ्कः) एवं दशमलवसंख्याः (अतिरिक्तं संख्यायाः अधिकं भागः) इति विभज्य विभज्य भवति । अतः दशमलवसंख्यायाः भागः परावर्त्तितव्यम् । उदाहरणम्: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,san_Deva,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""यदि भवता निक्षेप-उपकर्षण-कार्यक्रमः शून्य-समानतया आरभ्यते, तर्हि भवता कार्यम् अस्ति यत् यदि कस्यचित् स्थाने खाता शेषः शून्य-समानतया घटते, तर्हि फलनम् True प्रतिफलयति । अन्यथा False प्रतिफलयति । उदाहरणम्: >>> below_zero([१,२,३]) False >>> below_zero([१,२,४,५]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,san_Deva,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""आगतसंख्यासु दीयते सूची, अतः अस्य डाटासेटस्य माध्यमे एव माध्यमे पूर्णविचलनं गणनाय। माध्यमे पूर्णविचलनं प्रत्येकं तत्वं केन्द्रबिन्दु च (एतस्मिन् प्रकरणे माध्यमः) मध्यमे पूर्णविचलनं भवति: MAD = average । x - x_mean । उदाहरणः >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,san_Deva,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""आगतसूचीषु प्रत्येकयोः क्रमेण अवयवयोः मध्ये संख्यायाः 'अन्तरालम्' प्रविष्टं कुरुत `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,san_Deva,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""अत्र अन्तर्भावः बहुविधः समूहः भवति, यस्मिन् अन्तर्भावः अन्तर्भावः अस्ति। प्रत्येकं समूहः अन्तर्भावः अस्ति। उदाहरणार्थः (() (()) अन्तर्भावः अस्ति, यस्मिन् अन्तर्भावः अस्ति, यस्मिन् अन्तर्भावः अस्ति।""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,san_Deva,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""अङ्गीकृतसूत्रेषु केवलम् उपसूत्रं समाहितं फिल्टर् कराः >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,san_Deva,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""पूर्णाङ्काणां सूचीः, एकं ट्यूप्लः प्रतिपादयतु, यस्मिन् एकं योगं, एकं गुणं च अस्ति, यस्मिन् सूचीः अन्तर्गतस्य सर्वेषां पूर्णाङ्काणां गुणः अस्ति । रिक्तः योगः शून्यः, रिक्तः गुणः च १. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) ।""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,san_Deva,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""दिग्विधायकानां सूचिनाम् अनुक्रमस्य दिग्विधायकानां सूचिनाम् उत्पद्यते। >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,san_Deva,python,"

def is_palindrome(string: str) -> bool:
    """"""""पलिन्द्रोम"" इत्यस्य दीर्घतमं पदं ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य दीर्घतमं पदं ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्। ""पलिन्द्रोम"" इत्यस्य पूर्वपदम् ज्ञातव्यम्।""""""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""यदि दीयते तर्हि प्रत्ययस्य पालिन्द्रोमस्य परीक्षणं कुरुत।""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,san_Deva,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""इतः अनन्तरं, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च।""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,san_Deva,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""अङ्गस्य दीर्घतमं प्रत्ययपत्रं प्रतिपादयतु। यदि समं दीर्घं बहुव्रीहिः अस्ति तर्हि प्रथमं प्रत्ययपत्रं प्रतिपादयतु। यदि आगतपत्रं रिक्तं अस्ति तर्हि न प्रतिपादयतु। >>> दीर्घतमम् (([]) >>> दीर्घतमम् ((['a', 'b', 'c']) 'a' >>> दीर्घतमम् ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,san_Deva,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""a, b द्वयोः पूर्णाङ्गुलयोः सर्वाधिकः सामान्यविभाजकः परतः प्राप्नोति >>> सर्वाधिकः सामान्यविभाजकः ((3, 5) 1 >>> सर्वाधिकः सामान्यविभाजकः ((25, 15) 5) ।""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,san_Deva,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""इतः परतः सर्वः पूर्वपदः लघतमात् दीर्घतमं यावत् प्रविष्टः string इत्यस्य पूर्वपदानां सूचीः भवति >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,san_Deva,python,"

def string_sequence(n: int) -> str:
    """"""अत्र शून्यात् आरभ्य एन-पर्यन्तं संख्यायाः स्थान-सीमित-संख्यायाः शृङ्गाः लभन्ते।""""""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,san_Deva,python,"

def count_distinct_characters(string: str) -> int:
    """"""यदि कस्यचित् अक्षरस्य संख्या दीयते, तर्हि सः कानिचित् वर्णानि (अपि विशेषणानि) प्राप्नोति?""""""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,san_Deva,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""अत्र कूटशब्दः अस्ति: 'o' - note, lasts four beats 'o' - 1/2 note, lasts two beats ' - quater note, lasts one beat >>> parse_music. 'o' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,san_Deva,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""मूलसूत्रे कतिधा उपसूत्रं प्राप्नोति? अधोलिखितानि घटनाः गणयन्तु. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,san_Deva,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""'शून्य' इत्यतः 'नौ' इत्यतः 'शून्य' इत्यतः 'नौ' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'नौ' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः' इत्यतः 'शून्य' इत्यतः 'शून्य'""""""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,san_Deva,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""अत्र द्वयोः संख्यायाः (अन्यतम द्वयोः संख्यायाः) सूचीः दीयते, अतः द्वयोः संख्यायाः चयनं कृत्वा, द्वयोः समीपे स्थितौ द्वयोः संख्यायाः क्रमात् (अल्पसंख्या, बृहत्संख्या) पुनः प्राप्तिः क्रियते। >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,san_Deva,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""संख्यायाः सूची (अन्यतम द्वयोः तत्वानां), तत् सूचीं प्रति रेखागतपरिवर्तनं क्रियते, येन लघुतमः संख्याः 0 भवति, बृहत् संख्याः च 1 भवति >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] ।""""""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,san_Deva,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""केवलम् पूर्णाङ्कं यानि च पायथन-मूल्यानि सन्ति, तेषां सूचीं फिल्टर् कराः >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,san_Deva,python,"

def strlen(string: str) -> int:
    """"""<string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string>><string>><string>>""""""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,san_Deva,python,"

def largest_divisor(n: int) -> int:
    """"""दिदृक्ष् संख्या n, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-विभाजनं करोति।""""""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,san_Deva,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""अतः प्रत्येकं गुणकं कारकविभाजनं कृत्वा, तस्य गुणानां संख्याः यथा, --> गुणनिरूपणम् (२,२,२) --> गुणनिरूपणम् (२५) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (२,५) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (८) --> गुणनिरूपणम् (२,२,२) --> गुणनिरूपणम् (२५) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (८) --> गुणनिरूपणम् (८) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) ।""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,san_Deva,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""पूर्णाङ्काणां सूचीभ्यः, सर्वेभ्यः तत्वान् निष्कासयतु ये एकाधिकवारम् आगतवन्तः सन्ति। आद्युत्पादने यथाक्रमं स्थापयतु। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,san_Deva,python,"

def flip_case(string: str) -> str:
    """"""दिशन्त्य्-अङ्गुली-अक्षर-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली""""""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,san_Deva,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""एकस्मिन् सूत्रे श्लोकानां सूची समन्वितं कुरुत >>> समन्वितम् ({}) ' ' >>> समन्वितम् ({'a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,san_Deva,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""अङ्गीकृतः पूर्वपदः -> filter_by_prefix ((([], 'a') [] >>> filter_by_prefix ((['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array']""""""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,san_Deva,python,"

def get_positive(l: list):
    """"""अत्र केवलं धनात्मकं संख्यां प्रति लभ्यते। >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1]""""""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,san_Deva,python,"

def is_prime(n):
    """"""यदि दिशति तर्हि TRUE इत्यस्य प्रत्ययस्य प्रत्ययान्तं प्रतिपादयतु। अन्यथा TRUE इत्यस्य प्रत्ययान्तं प्रतिपादयतु।""""""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,san_Deva,python,"import math


def poly(xs: list, x: float):
    """"""xs बहुपदस्य गुणाङ्कः अस्ति। find_zero find x such that poly(x) = 0. find_zero इत्यनेन बहुव्रीहिः शून्यमात्रं विन्दुम् एव प्रतिपादयति, यदि बहुव्रीहिः अपि अस्ति तर्हि। find_zero इत्यनेन केवलम् xs इत्यस्य सूचीं गृह्णाति, यस्मिन् समसंख्याः गुणाङ्काः सन्ति, एवं बृहत् शून्य-असङ्ख्यक गुणाङ्कः अपि अस्ति, यतो हि सः हलः प्रतिपादयति। >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""बहुपदं बहुलम् (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x)""""""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,san_Deva,python,"

def sort_third(l: list):
    """"""इदम् फलनम् सूची l लभते तथा सूची l' इत्यनेन लभते यत् l' इत्यस्य सूचकः l इत्यनेन सह समानः भवति यत् सूचकः l त्रयाणां विभक्त्यर्थे न भवति, तथा च तस्य मूल्यम् सूचकः l इत्यस्य समानाधिकः सूचकः l इत्यनेन विभक्त्यर्थे भवति, परन्तु क्रमबद्धः भवति. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,san_Deva,python,"

def unique(l: list):
    """"""<string name=""recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_cent_recent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent""""""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,san_Deva,python,"

def max_element(l: list):
    """"""इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद""""""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,san_Deva,python,"

def fizz_buzz(n: int):
    """"""11 वा 13 इत्यनेन विभाज्य संख्यायां 7 इत्यस्य संख्यां प्रतिपादयतु।""""""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,san_Deva,python,"

def sort_even(l: list):
    """"""इदम् फलनम् सूची l लभते तथा सूची l' इत्यनेन लभते यत् l' इत्यस्य मूल्यम् l-समानम् अस्ति, यदा l-प्रत्ययः इक्-प्रत्ययेषु भवति, तदा l-प्रत्ययेषु तस्य मूल्यम् l-प्रत्ययेषु भवति, किन्तु क्रमबद्धम् भवति. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,san_Deva,python,"

def encode_cyclic(s: str):
    """"""encode_cyclic इत्यनेन कूटबद्धं सूत्रं प्रविष्टं भवति।""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""त्रिवर्णानां चक्रवर्ती समूहानां द्वारा सङ्केतः स्ट्रिंगः प्रतिपादयति ।""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,san_Deva,python,"

def prime_fib(n: int):
    """"""prime_fib इत्यनेन n-अङ्कं प्रतिपादयति यत् फिबोनाची-संख्या अस्ति, सः अपि च अङ्कः अस्ति। >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,san_Deva,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero इत्यनेन पूर्णाङ्काणां सूची प्राप्ता भवति। यदि सूचीमध्ये त्रिविधः पूर्णाङ्कः शून्यम् भवति तर्हि सः सत्यं प्रति लभते, अन्यथा मिथ्याम् । >>> triples_sum_to_zero (([१, ३, ५, ०]) मिथ्या >>> triples_sum_to_zero (([१, ३, -२, १]) सत्यम् >>> triples_sum_to_zero (([१, २, ३, ७]) मिथ्या >>> triples_sum_to_zero (([२, ४, -५, ३, ९, ७]) सत्यम् >>> triples_sum_to_zero (([१]) मिथ्या """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,san_Deva,python,"

def car_race_collision(n: int):
    """"""कल्पना करोतु यत् एकं मार्गम् पूर्णतया सरलं असीमतः दीर्घं रेखा अस्ति। n कारः वामतः दक्षिणतः गच्छन्ति; समन्तात्, n कारानां भिन्नं समूहं दक्षिणतः वामतः गच्छन्ति। कारानां द्वयोः समूहः एक-अर्काद् अति दूरे एव गच्छन्ति। सर्वे कारः समानं गच्छति। द्वयोः कारयोः टकरावम् भवति यदा वामतः दक्षिणतः गच्छती कारः दक्षिणतः वामतः गच्छती कारं टकरायते। तथापि, कारः असीमतः दृढः बलवान् च भवति; अतः ते यथा न टकरावन्ति तथैव स्वं प्रक्षेपमार्गं गच्छन्ति। अयं फलनम् एतेन टकरावानां सङ्ख्यां निर्गच्छति।""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,san_Deva,python,"

def incr_list(l: list):
    """"""पुनः प्राप्ते सूचीः, यस्मिन् तत्वेषु १ः वृद्धिः भवति। >>> incr_list (([१,२,३]) [२,३,४] >>> incr_list (([५,३,५,२,३,९,०,१२३)) [६,४,६,३,४,४,१०,१२४]""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,san_Deva,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero इत्यनेन पूर्णाङ्काणां सूची प्राप्ता भवति। यदि सूचीमध्ये द्वौ भिन्नौ तत्वौ शून्यसंख्यौ भवन्ति तर्हि सः सत्यं प्रति लभते, अन्यथा मिथ्याम् । >>> pairs_sum_to_zero (([१, ३, ५, ०]) मिथ्या >>> pairs_sum_to_zero (([१, ३, -२, १]) मिथ्या >>> pairs_sum_to_zero (([१, २, ३, ७]) मिथ्या >>> pairs_sum_to_zero (([२, ४, -५, ३, ५, ७]) सत्य >>> pairs_sum_to_zero (([१]) मिथ्या """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,san_Deva,python,"

def change_base(x: int, base: int):
    """"""आगतसंख्या x-स्य संख्यात्मकं आधारं आधारं प्रति परिवर्तय। रूपांतरणानन्तरं स्ट्रिंग् प्रतिपादने परावर्त्तनं कुरुत। आधारसंख्याः १०-भ्यः कानिचित् न्यूनानि सन्ति। >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,san_Deva,python,"

def triangle_area(a, h):
    """"""त्रिकोणस्य पार्श्वस्य दीर्घत्वं, उच्चतरं पुनरागमनक्षेत्रं च दत्त्वा. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,san_Deva,python,"

def fib4(n: int):
    """"""Fib4 क्रमाङ्कः Fibbonacci क्रमानुसारं क्रमेण भवति, यत् निम्नलिखितप्रकारेण परिभाष्यते: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया fib4 क्रमाङ्कः क्रमेण n-तमः अवयवस्य गणनाय एकं फलनं लिखत। पुनरावृत्तिः न प्रयुक्ताः। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,san_Deva,python,"

def median(l: list):
    """"""सूचीषु विद्यमानानां तत्वानां मध्यमाङ्कः पुनः प्राप्तः भवति l. >>> मध्यमाङ्कः (([३,१,२,४,५]) 3 >>> मध्यमाङ्कः (([१०,४,६,१००,१०,२०]) १५.० """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,san_Deva,python,"

def is_palindrome(text: str):
    """"""यदि दीयते तर्हि जाँचयति यदि दीयते स्ट्रिंग् एकं पालिन्द्रोम् अस्ति >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,san_Deva,python,"

def modp(n: int, p: int):
    """"""2^n modulo p (numerics) इत्यस्य अवतारं कुरुत। >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,san_Deva,python,"

def encode_shift(s: str):
    """"""इङ्कोड_शिफ्टः फलनम् अन्तर्निहितं प्रविष्टिकरणं गृह्णाति। डिकोडं प्राप्तं शृङ्खलं प्रति लभते।""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""अक्षरं प्रति ५-गुणं प्रतिस्थापयित्वा कूटबद्धं स्ट्रिंगं प्रतिपादयति ।""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,san_Deva,python,"

def remove_vowels(text):
    """"""remove_vowels इति कार्यम् अस्ति यत् अण्-प्रत्ययस्य शृङ्गे स्वरं न लभते। >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,san_Deva,python,"

def below_threshold(l: list, t: int):
    """"""यदि सूची l-अन्तर्गतं सर्वम् संख्याः सीमा t-अन्तर्गतं भवति तर्हि TRUE इत्यस्य परावर्तनं कुरुत। >>> below_threshold (([1, 2, 4, 10], 100) TRUE >>> below_threshold (([1, 20, 4, 10], 5) FALSE ।""""""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,san_Deva,python,"

def add(x: int, y: int):
    """"""द्वौ संख्याः x तथा y समाहितौ, तदा एते द्वौ संख्याः समाहितः भवन्ति, अतः एते द्वौ संख्याः समाहितः भवन्ति।""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,san_Deva,python,"

def same_chars(s0: str, s1: str):
    """"""यदि द्वयोः शब्दयोः समानं वर्णः अस्ति चेत् निरीक्षणीयम्। >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddddabc') True >>> same_chars (('abcd', 'dddddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars (('abcdd', 'dddddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,san_Deva,python,"

def fib(n: int):
    """"""n-वां फिबोनाची संख्याः परावर्त्तते. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,san_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets इत्यस्य ""<"" तथा "">"" इत्यस्य स्ट्रिंग् अस्ति. यदि प्रत्येकं उद्घाटनं ब्रैकेटस्य अनुकूलं समापनं ब्रैकेटं भवति तर्हि return True. >>> correct_bracketing (((""<"") False >>> correct_bracketing (((""<>"") True >>> correct_bracketing (((""<><>"") True >>> correct_bracketing (((""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,san_Deva,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([१,२,४,२०]) True >>> monotonic (([१,२०,४,१०]) False >>> monotonic (([४,१,०,१०]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,san_Deva,python,"

def common(l1: list, l2: list):
    """"""द्वयोः सूत्राणां कृते एकं विशिष्टं सामान्यं तत्वं प्रतिपादयति। >>> सामान्यं (([१,४,३,३४,६५३,२,५], [५,७,१,५,९,६५३,१२१)) [१,५,६५३] >>> सामान्यं (([५,३,२,८], [३,२]) [२,३] ।""""""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,san_Deva,python,"

def largest_prime_factor(n: int):
    """"""n इत्यस्य प्रधानं कारकम् प्रतिपाद्यताम्। n > 1 इति गृहीत्वा सः प्रधानं न भवति। >>> largest_prime_factor ((१३१९५) २९ >>> largest_prime_factor ((२०४८) २ """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,san_Deva,python,"

def sum_to_n(n: int):
    """"""sum_to_n इत्यस्य फलनम् अस्ति यत् 1 तः n पर्यन्तं संख्यायाः योगं करोति। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,san_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets इत्यस्य ""("" तथा """") इत्यस्य स्ट्रिंग् भवति। यदि प्रत्येकं उद्घाटनं ब्रैकेटस्य अनुकूलं समापनं ब्रैकेटं भवति तर्हि TRUE इत्यस्य रिटर्नं भवति। >>> correct_bracketing (((""("") False >>> correct_bracketing ((("")) TRUE >>> correct_bracketing (((() TRUE >>> correct_bracketing (((()) TRUE >>> correct_bracketing (((()) TRUE False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,san_Deva,python,"

def derivative(xs: list):
    """"""xs इत्यनेन बहुपदस्य गुणाङ्कः भवति। xs[0] + xs[1] * x + xs[2] * x^2 + .... इत्यनेन बहुपदस्य व्युत्पादकः पुनः प्राप्नोति। >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,san_Deva,python,"

def fibfib(n: int):
    """"""FibFib संख्याक्रमः Fibbonacci अनुक्रमस्य सदृशः अनुक्रमः अस्ति यत् निम्नलिखितप्रकारेण परिभाष्यते: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। कृपया एकं फलनं लिखत यत् fibfib संख्याक्रमस्य n-तमः तत्वं कुशलतया गणनाय शक्नोति। >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,san_Deva,python,"
FIX = """"""अत्र 'y' अपि स्वरः अस्ति, किन्तु केवलं यदा सः उक्तशब्देन अन्ते भवति। उदाहरणम्: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""अधिकं परीक्षणं कुरुत।""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,san_Deva,python,"
def circular_shift(x, shift):
    """"""यदि shift > number of digits, return digits reversed. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,san_Deva,python,"
def digitSum(s):
    """"""कार्यम् एकं फलनं लिखत यत् आगतं वर्णमाला भवति, तथा च केवलम् ऊर्ध्वं वर्णानां योगं ASCII-कोडं प्रति लभते। उदाहरणम्: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,san_Deva,python,"
def fruit_distribution(s,n):
    """"""अत्र अङ्गुष्ठं, अङ्गुष्ठं, मङ्गुलम् च सन्ति। अङ्गुष्ठं, मङ्गुलस्य च सङ्ख्यां दर्शयति। अङ्गुष्ठं, मङ्गुलस्य च सङ्ख्यां दर्शयति। अङ्गुष्ठं, मङ्गुलस्य च सङ्ख्यां दर्शयति। अतः अङ्गुष्ठस्य फलानां सङ्ख्यां प्रति लभ्यते। उदाहरणार्थः fruit_distribution""5अङ्गुष्ठं च 6अङ्गुलम् च"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0अङ्गुष्ठं च 1अङ्गुलम् च"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2अङ्गुष्ठं च 3अङ्गुलम् च"",100) -> 100 - 2 - 3 = 95 fruit_distribution""100अङ्गुष्ठं च 1अङ्गुलम् च"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,san_Deva,python,"
def pluck(arr):
    """"""""अत्र अङ्गुष्ठस्य शाखायाः प्रतिपादकः एरण्डः अस्ति, तस्मिन् न नकारात्मकः पूर्णाङ्कः अस्ति, अतः भवता एकः नोडः प्राप्तः, अतः सः पुनः प्राप्तः भवेत् । यदि बहुषु नोडस् मध्ये समानः लघुतमः लघुतमः मानः अस्ति, तर्हि सः नोडः प्राप्तः, अतः सः लघुतमः सूचकः अस्ति । यदि न कोऽपि लघुतमः मानः अस्ति अथवा एरण्डः रिक्तः अस्ति, तर्हि सः पुनः प्राप्तः भवेत् । उदाहरणः १ः इनपुटः [४,२,३] आउटपुटः [२,१] स्पष्टीकरणः २ः लघुतमः लघुतमः लघुतमः मानः अस्ति, २ः लघुतमः सूचकः अस्ति । उदाहरणः २ः इनपुटः [१,२,३] आउटपुटः [२,१] स्पष्टीकरणः २ः लघुतमः मानः अस्ति, २ः लघुतमः लघुतमः सूचकः अस्ति । उदाहरणः ३ः इनपुटः [४] आउटपुटः [५,३,४] इनपुटः [०,४] आउटपुटः १ः लघुतमः मानः अस्ति, अतः प्रथमः नोडः लघुतमः शून्यः अस्ति, अतः तस्य सूचकः शून्यः अस्ति । उदाहरणः १ः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,san_Deva,python,"
def search(lst):
    '''यदि इदम् संख्या अस्ति, तर्हि इदम् संख्याः पुनः प्राप्तः भवति। यदि इदम् संख्याः न अस्ति, तर्हि इदम् संख्याः पुनः प्राप्तः भवति -1. उदाहरणम्: search (([4, 1, 2, 2, 3, 1]) == 2 search (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search (([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,san_Deva,python,"
def strange_sort_list(lst):
    '''पूर्णाङ्काणां सूचीः, विचित्र क्रमेण सूचीः प्रतिपादयति। विचित्र क्रमः, यदा भवन्तः न्यूनतमं मूल्यम् आरभन्ति, तदा शेषानां पूर्णाङ्काणां अधिकतमं, ततः न्यूनतमं च। उदाहरणम्: strange_sort_list (([१,२,३,४]) == [१,४,२,३] strange_sort_list (([५,५,५,५]) == [५,५,५,५] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,san_Deva,python,"
def triangle_area(a, b, c):
    '''त्रिकोणस्य त्रिपक्षस्य दीर्घत्वं ददाति। यदि त्रयो पक्षः त्रिकोणं भवति तर्हि त्रिकोणस्य क्षेत्रं द्विदशमलङ्कं प्रति लप्स्यते। अन्यथा -1 इत्यनेन त्रयः पक्षः त्रिकोणं भवति यदि द्वयोः पक्षयोः योगः तृतीयपक्षस्य दीर्घः भवति। उदाहरणम्: त्रिकोणः क्षेत्रः (३, ४, ५) == ६.०० त्रिकोणः क्षेत्रः (१, २, १०) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,san_Deva,python,"
def will_it_fly(q,w):
    '''यदि वस्तु q उड्डीयते, तर्हि True, अन्यथा False इति फलनम् लिखत। यदि वस्तु q सन्तुलितं भवति (तदर्थम् इयं एकं पालिन्द्रोमिकम् सूची) तथा तस्य तत्वानां योगः अधिकतमसम्भाव्य भारं w यावत् वा न्यूनः भवति तर्हि सः True इति फलनम् लिखत। उदाहरणम्: will_it_fly (([१,२], ५) -> False # १+२ अधिकतमसम्भाव्य भारं न्यूनं भवति, किन्तु असंतुलितं भवति। will_it_fly (([३,२,३], १) -> False # सन्तुलितं भवति, किन्तु ३+२+३ अधिकतमसम्भाव्य भारं अधिकं भवति। will_it_fly (([३,२,३], ९) -> True # ३+२३ अधिकतमसम्भाव्य भारं न्यूनं भवति, अतः सः सन्तुलितः भवति। will_it_fly ((([3], 5) -> True # ३ अधिकतमसम्भाव्य भारं न्यूनं भवति, अतः सः संतुलितः भवति।'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,san_Deva,python,"
def smallest_change(arr):
    """"""पूर्णाङ्काणां एकं सरणीं प्राप्ते, सरणीं पालिन्द्रोमिकं कर्तुं किञ्चित् घटकं परिवर्तयितुम् आवश्यकं भवति । पालिन्द्रोमिकं सरणीं एकं सरणीं भवति यत् समानं पठेत् , एकस्मिन् परिवर्त्तने, एकं घटकं अन्यं घटकं परिवर्तयितुं शक्यते । उदाहरणाय: smallest_change (([१,२,३,५,४,७,९,६]) == ४ smallest_change (([१,२,३,४,३,२,२]) == १ smallest_change (([१,२,३,२,१]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,san_Deva,python,"
def total_match(lst1, lst2):
    '''यदि द्वयोः सूचीषु समानसंख्याः वर्णः अस्ति, तर्हि प्रथमं सूची प्रति लभेत। उदाहरणम् total_match ([], []) -> [] total_match (['hi', 'admin'], ['hI', 'Hi']) -> ['hI', 'Hi'] total_match (['hi', 'admin'], ['hi', 'admin', 'project']) -> ['hi', 'admin'] total_match (['hi', 'admin'], ['hi', 'admin', 'project']) -> ['hi', 'admin'] total_match (['hi', 'admin'], ['I', 'hi', 'hi']) -> ['hi', 'hi'] total_match (['hi', 'admin'], ['hi', 'hi', 'hi']) -> ['hi', 'hi', 'hi'] total_match (['4', ['1', '2', '3', '4', '5', ['4]) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,san_Deva,python,"
def is_multiply_prime(a):
    """"""यदि दीयते संख्या त्रिः अभाज्यसंख्यायाः गुणनफलम् अस्ति, तर्हि फलितं फलं लिखत। अन्यथा फलितं भवति। (a) 100 इत्यपेक्षा भवति इति ज्ञात्वा उदाहरणम्: is_multiply_prime(30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,san_Deva,python,"
def is_simple_power(x, n):
    """"""भवद्भिः कार्यम् अस्ति यत्, यदि संख्याः x, n-स् य साधारणः शक्तिः अस्ति, तदा सः फलनम् प्रतिपादयति, यदि n**int=x, तदा सः फलनम् प्रतिपादयति। उदाहरणम्: is_simple_power (१, ४) => true is_simple_power (२, २) => true is_simple_power (८, २) => true is_simple_power (३, २) => false is_simple_power (३, १) => false is_simple_power (५, ३) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,san_Deva,python,"
def iscube(a):
    '''यदि इङ्गेर् इङ्गेर् इति पूर्णाङ्कः अस्ति, तर्हि इङ्गेर् इति पूर्णाङ्कः कस्यचित् पूर्णाङ्कः कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित्'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,san_Deva,python,"
def hex_key(num):
    """"""अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,san_Deva,python,"
def decimal_to_binary(decimal):
    """"""दशमलवसंख्यकस्य रूपं ददाति, तस्य द्विवचनसंख्यकरूपं परिवर्तयितुम् कर्तव्यम् । कार्यस्य कृते एकं अक्षरसङ्ख्यां प्रतिपादयतु, यस्मिन् प्रत्येकं अक्षरं द्विवचनसंख्यकं प्रतिपादयतु । अक्षरसङ्ख्यायाः प्रत्येकं अक्षरं '0' अथवा '1' भवति । अक्षरसङ्ख्यायाः आरम्भे तथा अन्ते अतिरिक्तं 'db' वर्णं भवति । अतिरिक्तं अक्षरं स्वरूपस्य सहाय्यं कर्तुम् अस्ति । उदाहरणम् - decimal_to_binary (१५) # returns ""db1111db"" decimal_to_binary (३२) # returns ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,san_Deva,python,"
def is_happy(s):
    """"""यदि कस्यचित् अक्षरस्य दीर्घः ३ वा अधिकः अस्ति, तदा सः अक्षरः ""सन्निहितः"" भवति। उदाहरणम्: is_happy (a) => false (false) is_happy (a) => false (false) is_happy (a) => true (true) is_happy (a) => false (false) is_happy (adb) => true (true) is_happy (adb) => true (true) is_happy (xyy) => false (false) ।""""""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,san_Deva,python,"
def numerical_letter_grade(grades):
    """"""अतः सः छात्राः पत्राणि पठन्ति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति ।""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,san_Deva,python,"
def prime_length(string):
    """"""यदि string-लम्बाः अभाज्यसंख्याः सन्ति तर्हि True या False इत्यस्य फलनम् लिखत । अन्यथा prime_length ({'हेल्लो') == true prime_length ({'अब्कडक्बा') == true prime_length ({'किट्टन्स्') == true prime_length ({'अर्जन्') == False इति फलनम् लिखत ।""""""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,san_Deva,python,"
def starts_one_ends(n):
    """"""यदि धनात्मकं पूर्णाङ्कं n प्राप्नोति, तर्हि 1 इति आरभ्यते वा समाप्तं भवति इति धनात्मकं पूर्णाङ्कं n-अङ्कं प्रतिपद्यते।""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,san_Deva,python,"
def solve(N):
    """"""उदाहरणम्: यदि N = 1000, तर्हि तस्य अङ्गुलानां योगः 1 भवेत्, अतः ""1"" इति निर्गमः भवेत्। यदि N = 150, तर्हि तस्य अङ्गुलानां योगः 6 भवेत्, अतः ""110"" इति निर्गमः भवेत्। यदि N = 147, तर्हि तस्य अङ्गुलानां योगः 12 भवेत्, अतः ""1100"" इति निर्गमः भवेत्। चरः: @N पूर्णाङ्कः Constraints: 0 â‰¤ N â‰¤ 10000. आउटपुटः द्विआधारी संख्यायाः शृङ्खला """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,san_Deva,python,"
def add(lst):
    """"""पूर्णाङ्काणां सूचीः अस्ति, अतः अतः अतः पूर्णाङ्काणां सूचीः न भवति। अतः अतः अतः पूर्णाङ्काणां सूचीः न भवति। अतः अतः पूर्णाङ्काणां सूचीः न भवति। अतः पूर्णाङ्काणां सूचीः न भवति। अतः पूर्णाङ्काणां सूचीः न भवति। अतः पूर्णाङ्काणां सूचीः न भवति।""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,san_Deva,python,"
def anti_shuffle(s):
    """"""अङ्गस्य आदेशित संस्करणं, एकं अङ्गं भवति यत्र सर्वे शब्दाः (अङ्गं विभक्तम्) नूतनशब्देन प्रतिस्थापितः भवन्ति यत्र सर्वे वर्णः आस्की-मूल्यस्य आधारतः आरोहणीयक्रमेण विहितः भवति। ध्यानाकर्षणम्: वाक्यस्य शब्दानां रिक्तस्थानानां च क्रमं भवद्भिः रक्षणीयम्। उदाहरणार्थः anti_shuffle ((('Hi') इत्यनेन 'Hi' इति प्रतिगमनं करोति 'Hi' anti_shuffle ((('hello') इत्यनेन 'ehllo' anti_shuffle (('Hello World!!!') इत्यनेन 'Hello !!!Wdlor' इति प्रतिगमनं करोति।""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,san_Deva,python,"
def get_row(lst, x):
    """"""अत्र द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, य""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,san_Deva,python,"
def sort_array(array):
    """"""यदि न-ऋणात्मकं पूर्णाङ्कं अस्ति, तर्हि अस्य पदान्तस्य प्रतिलिपिं पुनः प्राप्ताः, यदि योगः (प्रथमः सूचिका-मूल्यं, अन्तिमः सूचिका-मूल्यं) विषमः अस्ति, तर्हि अस्य पदान्तस्य क्रमः आरोहति, यदि योगः (प्रथमः सूचिका-मूल्यं, अन्तिमः सूचिका-मूल्यं) समः अस्ति तर्हि घटोन्मुखः भवति।""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,san_Deva,python,"
def encrypt(s):
    """"""एकं फलनम् encrypt निर्मातु यत् एकं स्ट्रिंगं तर्करूपेण गृहीत्वा वर्णमालायाः परिक्रमणैः सह एकं सङ्केतं स्ट्रिंगं प्रति लभते। वर्णमालायाः परिक्रमणम् एतादृशम् भवेत् यत् अक्षरं द्विगुणं द्विगुणं गच्छति। उदाहरणार्थः encrypt (('hi') return 'lm' encrypt (('asdfghjkl') return 'ewhjklnop' encrypt (('gf') return 'kj' encrypt (('et') return 'ix' ।""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,san_Deva,python,"
def next_smallest(lst):
    """"""भवद्भिः पूर्णाङ्काणां सूची दीयते। भवद्भिः एकं फलनं लिखत यत् सूचीयाः द्वितीयं लघुतमं तत्वं प्रतिपादयति। यदि एतत् तत्वं न अस्ति तर्हि न प्रतिपादयति।""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,san_Deva,python,"
def is_bored(S):
    """"""""I"" शब्दात् आरभ्यते वाक्यानां अन्तः ""I"" वा ""I"" इति भवति। उदाहरणार्थः >>> is_bored (उदाहरणार्थः ""हेलो वर्ल्ड"") 0 >>> is_bored (उदाहरणार्थः ""स्वर्गः नीलः अस्ति। सूर्यः प्रकाशयति। अहं इदं वातं मन्ये"") 1 ।""""""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,san_Deva,python,"
def any_int(x, y, z):
    '''३ संख्याः गृहीत्वा कार्यम् निर्मातुं प्रयतते। यदि एकः संख्या अन्ययोः योगे भवति, तदा सः सत्यं प्रतिफलयति, यदि सर्वे संख्याः पूर्णाङ्काः भवन्ति, अन्यत्रं मिथ्या प्रतिफलयति। उदाहरणम् any_int{\displaystyle any_int{\displaystyle any_int{\displaystyle any_{\displaystyle any_{\displaystyle {\displaystyle {\mathbf {5}}} , 2, 7) । any_int{\displaystyle any_{\displaystyle any_{\mathbf {3}}} , 2, 2) । any_int{\displaystyle any_{\mathbf {3}}} , -२, 1) । any_int{\displaystyle any_{\mathbf {3}}} , -२, 2) । any_int{\mathbf {3}}} , -२, 1) ।'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,san_Deva,python,"
def encode(message):
    """"""एकं फलनम् लिखत यत् संदेशं गृहीत्वा, एतद् एव रूपेण सङ्केतं करोति यत् सः सर्वेषां अक्षरानां लकारं परिवर्त्य, सन्देशस्य सर्व्व-अक्षरान् आङ्ग्ल-वर्णमालायां तत्-अक्षरात् पूर्वं द्वौ स्थानानि उपलभ्यन्ते। केवलं अक्षरं गृहीत्वा लिखत। उदाहरणम्: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,san_Deva,python,"

def skjkasdkd(lst):
    """"""अत्र पूर्णाङ्काणां सूची अस्ति, अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,san_Deva,python,"
def check_dict_case(dict):
    """"""यदि सर्व कुञ्जयः लघु-अक्षरयुक्ताः सन्ति अथवा सर्व कुञ्जयः बृहत्-अक्षरयुक्ताः सन्ति तर्हि True प्रतिपादितं भवेत् अन्यथा False प्रतिपादितं भवेत् । यदि दीयते शब्दकोशः रिक्तः अस्ति तर्हि फलनम् False प्रतिपादितं भवेत् । उदाहरणम्: check_dict_case{""a"":""apple"", ""b"":""banana""}) True प्रतिपादितं भवेत् । check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) False प्रतिपादितं भवेत् । check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) False प्रतिपादितं भवेत् । check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) False प्रतिपादितं भवेत् । check_dict_case{""NC"":""STATE"", ""Z"":""IP""12345}) True प्रतिपादितं भवेत् ।""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,san_Deva,python,"
def count_up_to(n):
    """"""न-ऋणात्मकं पूर्णाङ्कं गृहीत्वा प्रथमं एन पूर्णाङ्कं, एन-संख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,san_Deva,python,"
def multiply(a, b):
    """"""अतः इदम् फलनम् पूर्णं भवेत् यत् द्वौ पूर्णाङ्कं गृहीत्वा तेषां एकाधिकसंख्यायाः गुणं लभते। अतः इदम् आगतं फलं सदैव मान्यम् अस्ति इति गृहीत्वा उदाहरणम्: गुणनम् (१४८, ४१२) इत्यनेन १६ लभते। गुणनम् (१९, २८) इत्यनेन ७२ लभते। गुणनम् (२०, १८५१) इत्यनेन ० लभते। गुणनम् (१४, १५) इत्यनेन २० लभते।""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,san_Deva,python,"
def count_upper(s):
    """"""string s इत्यस्य कृते, समसूत्रेषु अपरकेस स्वरानाम् सङ्ख्यां गणयतु। उदाहरणार्थः count_upper{\displaystyle \mathrm {aBCdEf} } इत्यनेन 1 count_upper{\displaystyle \mathrm {aBCdEf} } इत्यनेन 0 count_upper{\displaystyle \mathrm {aBCdEf} } इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0""""""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,san_Deva,python,"
def closest_integer(value):
    '''यदि संख्या द्वयोः समीपे अस्ति, तदा सः शून्यात् दूरम् आगच्छति। उदाहरणम् >>> closest_integer ((१०)) १० >>> closest_integer ((१५.३)) १५ टिप्पणीः शून्यात् दूरम् आगच्छति, अतः यदि दत्ता संख्या द्वयोः समीपे अस्ति, तर्हि सः शून्यात् दूरः आगच्छति। उदाहरणार्थः closest_integer ((१४.५)) इत्यनेन १५, closest_integer ((१४.५)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५) इत्यनेन १५ इत्यनेन १५ इत्यनेन १५ इत्यनेन १५ इत्यनेन शून्यात् दूरं प्रतिफलम् आगच्छति।'''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,san_Deva,python,"
def make_a_pile(n):
    """"""यदि एकं धनात्मकं पूर्णांकम् n अस्ति, तर्हि भवता n स्तरीयानां पाषाणानां समूहः निर्मातुं शक्यते। प्रथमः स्तरः n पाषाणैः युक्तः अस्ति। अग्रे स्तरे पाषाणानां सङ्ख्या अस्ति - अग्रे विषमसंख्या यदि n विषमम् अस्ति, अग्रे समसंख्या यदि n समम् अस्ति। सूचीमध्ये प्रत्येकं स्तरं पाषाणानां सङ्ख्यां प्रतिपादयतु, यत्र इन्द्रेषु i इत्यस्य तत्वस्य सङ्ख्या स्तरे (i+1) अस्ति। उदाहरणम्: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,san_Deva,python,"
def words_string(s):
    """"""अत्र कम्पायाः वा रिक्तस्थानानां द्वारा विभक्तः शब्दः प्रदत्तः अस्ति। भवतः कार्यम् अस्ति यत् शब्दानां मध्ये विभक्तः शब्दः पुनः लभेत। उदाहरणार्थः words_string (शब्दः) == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string (शब्दः) == [""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,san_Deva,python,"
def choose_num(x, y):
    """"""यदि इदम् संख्या नास्ति, तर्हि इदम् फलनम् -1 इत्यस्य प्रतिफलम् ददाति। उदाहरणार्थः choose_num (१२,१५) = १४ choose_num (१३,१२) = -1 ।""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,san_Deva,python,"
def rounded_avg(n, m):
    """"""यदि n इत्यनेन बहुव्रीहिः अस्ति, तर्हि -१ इत्यस्य उत्तरं ददातु। उदाहरणम्: rounded_avg (१, ५) => ""0b11"" rounded_avg (७, ५) => -1 rounded_avg (१०), => ""0b11"" rounded_avg (२०), => ""0b11010""""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,san_Deva,python,"
def unique_digits(x):
    """"""धनात्मकानां पूर्णाङ्काणां सूची प्राप्ते, x इत्यनेन समसंख्यायाम् अङ्गानां सूची पुनः प्राप्ते। नोटः: पुनः प्राप्ता सूची वृद्धिशील क्रमेण विसर्जिते। उदाहरणार्थः >>> unique_digits (([१५, ३३, १४२२, १]) [१, १५, ३३] >>> unique_digits (([१५२, ३२३, १४२२, १०]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,san_Deva,python,"
def by_length(arr):
    """"""यदि इमे सर्वे संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,san_Deva,python,"
def f(n):
    """"""f इत्यस्य फलनम् क्रियताम्, यत् n इत्यस्य परिमाणं गृहीत्वा n इत्यस्य सूचिं प्रति लभते, अतः यदि i इत्यस्य गुणः अस्ति तर्हि i इत्यस्य गुणः भवति, अन्यथा i इत्यस्य गुणः भवति। i इत्यस्य गुणः अस्ति 1 इत्यस्य गुणः अस्ति (1 * 2 * ... * i) । उदाहरणम्: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,san_Deva,python,"
def even_odd_palindrome(n):
    """"""धनात्मकं पूर्णाङ्कं n लभ्यते, अतः एकं ट्यूप्लं प्रति लभ्यते, यत्र संख्यायाः सम-अविशिष्टं पूर्णाङ्कं भवति, यानि अन्तर्-विभागे अन्तर्भवन्ति। उदाहरणः: आगतः 3 निर्गतः (1, 2) स्पष्टीकरणः पूर्णाङ्कं पालिन्द्रोमः 1, 2, 3. एकं समं, द्वौ च विषमम् अस्ति। उदाहरणः 2: आगतः 12 निर्गतः (4, 6) स्पष्टीकरणः पूर्णाङ्कं पालिन्द्रोमः 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. चतुर्णां समं, षट् च विषमम् अस्ति। नोटः 1. 1 <= n <= 10^3 2. ट्यूप्लः क्रमशः सम-अविशिष्टं पूर्णाङ्कं पालिन्द्रोमं प्रति लभते। """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,san_Deva,python,"
def count_nums(arr):
    """"""count_nums इत्यस्य फलनम् लिखत, यस्मिन् पूर्णाङ्काणां सरणी भवति, अतः अतः अङ्केषु कस्यापि सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,san_Deva,python,"
def move_one_ball(arr):
    """"""अस्मिन् एरे 'arr' इत्यस्मिन् N पूर्णाङ्काः सन्ति arr[1], arr[2], ..., arr[N]। एरेः संख्याः अनियमितरूपेण क्रमेण भवन्ति। भवतः कार्यम् एतत् निश्चितम् अस्ति यत् एरेः क्रमेण न घटत इति निश्चितं कर्तुम् शक्यते, यदि एरेः कृते अधोलिखितं कार्यं कुरुः: भवतः दास्य्-अवस्थायाः क्रमेण कर्तुम् अनुमतम् अस्ति। एकः दास्य्-अवस्थायाः क्रमः अर्थः एरेः सर्वेषां अङ्गानां दास्य्-अवस्थायाः प्रतिस्थापनम् दास्य्-अवस्थायाः प्रतिस्थापनम्। एरेः अन्तिमः अङ्गः एरेः प्रारम्भिक-अवस्थायां अर्थात् ०-अवस्थायां प्रतिस्थापनम् भवति। यदि उपरोक्तं कार्यं कर्तुं शक्यम् अस्ति, तर्हि पुनः प्राप्तिः True अन्यथा False। यदि एरे रिक्तः अस्ति तर्हि पुनः प्राप्तिः True भवति। नोटः दत्ता सूची अनन्य-अवस्थायाः निश्चितं भवति। उदाहरणेन: move_one_{(ball_[४, ३, ४, ५, २]True Explan: Performin 2 right operation, non-decreasing order is possible for the array.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,san_Deva,python,"
def exchange(lst1, lst2):
    """"""अत्र एकं फलनम् अस्ति यत् द्वयोः संख्यासूत्राणां मध्ये आदान-प्रदानं कर्तुम् शक्नोति, येन lst1 इत्यस्य संख्याः समः भवेत् । lst1 तथा lst2 इत्ययोः मध्ये आदान-प्रदानस्य संख्यायाः किमपि सीमा नास्ति । यदि lst1 तथा lst2 इत्ययोः मध्ये आदान-प्रदानं कर्तुम् शक्नोति, तर्हि ""YES"" इत्यस्य उत्तरं ददातु । अन्यथा ""NO"" इत्यस्य उत्तरं ददातु । उदाहरणार्थः exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" इति आदान-प्रदानसूत्राणि न रिक्तानि भवन्तीति गृहीतः ।""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,san_Deva,python,"
def histogram(test):
    """"""यदि कानिचित् अक्षरानि एकस्मिन् स्थाने सन्ति, तर्हि सर्वेषां अक्षरानां संख्यां प्रति लभेत। उदाहरणम्: हिस्टोग्रामः (a, b, c, 1), हिस्टोग्रामः (a, b, a, b, c, b, c, b, b, c, d, e, f, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,san_Deva,python,"
def reverse_delete(s,c):
    """"""कार्यम् अस्मिन् सूत्रे द्वौ वर्णसूत्रेषु s तथा c दत्ताः सन्ति, भवन्तः s इत्यस्मिन् विद्यमानानि वर्णानि विलोप्य c इत्यस्मिन् विद्यमानानि वर्णान् विलोप्य परिणामाणि प्राप्तुं प्रयतन्ते, ततः परिणामाणि प्राप्तुं प्रयतन्ते, यदि पूर्ववत् पूर्ववत् च समं पठ्यते तर्हि परिणामाणि प्राप्तुं प्रयतन्ते। यदि तु परिणामाणि प्राप्तुं प्रयतन्ते, तर्हि परिणामाणि प्राप्तुं प्रयतन्ते, यदि तु पूर्ववत् च पठन्ति तर्हि परिणामाणि प्राप्तुं प्रयतन्ते। उदाहरणार्थम् s = ""abcde"", c = ""ae"", परिणामाणि प्राप्तुं प्रयतन्ते ('bcd', False) यदि s = ""abcdef"", c = ""b"" परिणामाणि प्राप्तुं प्रयतन्ते ('acdef', False) यदि s = ""abcdedcba"", c = ""ab"", परिणामाणि प्राप्तुं प्रयतन्ते ('cdedc', True) ।""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,san_Deva,python,"
def odd_count(lst):
    """"""यदि कस्यचित् सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्या""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,san_Deva,python,"
def minSubArraySum(nums):
    """"""पूर्णाङ्काणां सरणीं प्राप्ते, नपुंसकानां कस्यचित् न-रिक्तस्य उप-सरणीयाः न्यूनतमं योगं ज्ञातव्यम्। उदाहरणम् minSubArraySum (([२,३,४,१,२,४]) == १ minSubArraySum (([१,२,३]) == -६ """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,san_Deva,python,"
def max_fill(grid, capacity):
    import math
    """"""भवद्भिः कुण्डानां चतुर्भुजः ग्रिडः प्रदत्तः। प्रत्येकं पंक्तिः एकं कुण्डं प्रतिपादयति, प्रत्येकं पंक्तिः एकं जल-विभागं प्रतिपादयति। प्रत्येकं कुण्डं एकं बक्टेन युक्तं भवति, यस्मिन् जलम् उत्कर्षयितुं शक्यते, सर्वेषां बक्टेन च एकं क्षमता अस्ति। भवद्भिः कुण्डानां उपयोगं कुण्डं निर्जनं कर्तुम् कर्तव्यम्। कुण्डं निपातनाय आवश्यकं संख्या निर्गन्तुं भवद्भिः कर्तव्यम्। उदाहरणः १ः आगतः ग्रिडः: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: १ निर्गन्तुः ६ः आगतः ग्रिडः: [[0,0,1,1], [0,0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: २ निर्गन्तुः ५ः आगतः: [[0,0,0], [0,0,0]] bucket_capacity: ५ निर्गन्तुः ०
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,san_Deva,python,"
def sort_array(arr):
    """"""अत्र अकारान्ताः संख्याः क्रमशः वर्धन्ते, अतः दशमलवसंख्यकानाम् संख्यायाः आधारः दशमलवसंख्यकानाम् संख्यायाः आधारः भवति ।""""""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,san_Deva,python,"
def select_words(s, n):
    """"""यदि string s रिक्तः अस्ति तर्हि फलनम् रिक्तं सूचीम् प्रति लप्स्यते। नोटः: भवन्तः अनुमानं करिष्यन्ति यत् आगतस्य string-स्य अन्तर्गतं केवलं अक्षरं च अन्तरालानि सन्ति। उदाहरणम्: select_words (""मरीयायाः कोमलम् आसीत्"", 4) ==> [""कोमलम्""] select_words (""मरीयायाः कोमलम् आसीत्"", 3) ==> [""मरीया"", ""कोमलम्""] select_words (""साध्याः श्वेतस्थानः"", 2) ==> [] select_words (""नमस्ते संसारः"", 4) ==> [""विश्वः""] select_words (""अंकलः समः"", 3) ==> [""अंकलः""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,san_Deva,python,"
def get_closest_vowel(word):
    """"""भवद्भिः शब्दः प्रदत्तः। भवद्भिः कार्यम् अस्ति यत् शब्दस्य दक्षिणपार्श्वे द्वयोः व्यञ्जनानां मध्ये स्थितं निकटतमं स्वरं (अक्षरसंवेदी) प्राप्नुत। आरम्भे अन्ते च स्वरः न गण्यते। यदि भवद्भिः उपरोक्तः शर्तः पूर्णाः स्वरः न लब्धः तर्हि रिक्तः शब्दः प्रत्यादाय। भवद्भिः अनुमानं कर्तुं शक्यते यत् उक्तः शब्दः केवलं आङ्ग्ल-अक्षरैः युक्तः अस्ति। उदाहरणम्: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,san_Deva,python,"
def match_parens(lst):
    '''यदि भवता द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तदा द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति।'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,san_Deva,python,"
def maximum(arr, k):
    """"""आरेः पूर्णाङ्काः, धनात्मकः पूर्णाङ्कः च अस्ति, अतः आरेः अधिकतमः k संख्याः अस्ति । उदाहरणः १ः आरेः इण्टः = [-३, -४, ५], क = ३ निर्गतः [-४, -३, ५] उदाहरणः २ः आरेः इण्टः = [-४, -४, ४], क = २ निर्गतः [-४, ४] उदाहरणः ३ः आरेः इण्टः = [-३, २, १, -१, -२, १], क = १ निर्गतः [२] नोटः १. आरेः लम्बाई [१, १०००] अन्तर्गतम् अस्ति । २. आरेः तत्वानि [-१, १०००] अन्तर्गतम् सन्ति । ३. ० <= k <= len ((arr) ।""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,san_Deva,python,"
def solution(lst):
    """"""न च रिक्तसूचीयाम् पूर्णाङ्काणां समानाम् गुणानाम् योगः परतः प्राप्नोति । उदाहरणम् हलः ([५, ८, ७, १]) ==> १२ हलः ([३, ३, ३, ३, ३]) ==> ९ हलः ([३०, १३, २४, ३२१]) ==> ० ।""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,san_Deva,python,"
def add_elements(arr, k):
    """"""पूर्णाङ्कः k, पूर्णाङ्कः arr, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, लप्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,san_Deva,python,"
def get_odd_collatz(n):
    """"""यदि कोल्त्स् प्रत्ययः अस्ति, तर्हि सः अनुक्रमः पूर्ववत् अनुक्रमः भवति । यदि पूर्ववत् अनुक्रमः समः अस्ति, तर्हि अग्रे अवयवः पूर्ववत् अवयवः अर्धं भवति । यदि पूर्ववत् अवयवः विषमः अस्ति, तर्हि अग्रे अवयवः पूर्ववत् अवयवः 3 गुणाः अङ्कः 1 इति भवति । अतः कोल्त्स् प्रत्ययः सदैव 1 इति भवति ।""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,san_Deva,python,"
def valid_date(date):
    """"""यदि तिथिः वैधः अस्ति, तर्हि भवता एकं फलनम् लिखत, यदि तिथिः वैधः अस्ति, तर्हि सत्यम् लभते अन्यथा असत्यम् । यदि अधोलिखितानि नियमाणि सन्ति तर्हि तिथिः वैधः भवति: 1. तिथिः वैधः अस्ति । 2. मासानां 1,3,5,7,8,10,12 कृते दिनेषु संख्याः 1 वा अधिकं 31 दिनं न भवेत् । मासानां 4,6,9,11 कृते दिनेषु संख्याः 1 वा अधिकं 30 दिनं न भवेत् । मासानां 2. 3. मासानां संख्याः 1 वा अधिकं न भवेत् । 12.4 कृते दिनाङ्कः MM-DD-yyyy-रूपेण भवितव्यम् यथा valid_date (उदाहरणार्थः valid_date) (१०३-१-२०००) => valid_date (१५-०१-२०१२) => false valid_date (valid_date) (१०४-०४०) => false_date (valid_date) (१०६-०४-२०२०) => true (valid_date (date) (१०६-०४-२०२०) => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,san_Deva,python,"
def split_words(txt):
    '''यदि कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां क'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,san_Deva,python,"
def is_sorted(lst):
    '''यदि संख्याः क्रमात् वर्धन्ते, तदा संख्याः क्रमात् वर्धन्ते, यदि संख्याः एकात् अधिकः अस्ति, तदा False इत्युत्तरं ददातु। यदि संख्याः एकात् अधिकः अस्ति, तर्हि False इत्युत्तरं ददातु। यदि संख्याः एकात् अधिकः अस्ति, तर्हि False इत्युत्तरं ददातु। यदि संख्याः एकात् अधिकः अस्ति, तर्हि False इत्युत्तरं ददातु।'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,san_Deva,python,"
def intersection(interval1, interval2):
    """"""यदि अन्तरालः अङ्गुल्यः अस्ति, तर्हि ""अतः"" प्रत्ययः, अन्यथा ""न"" प्रत्ययः, यदि अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तःःः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,san_Deva,python,"
def prod_signs(arr):
    """"""भवद्भिः पूर्णाङ्काणां सरणी प्राप्ता अस्ति, अतः भवद्भिः पूर्णाङ्काणां परिमाणानां योगं, सरणीयाः प्रत्येकं सङ्ख्यायाः गुणनफलम्, यं १, -१, अथवा ० इत्यनेन प्रतिपादयन्ति, प्रतिपादयितुम् आवश्यकाः सन्ति।""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,san_Deva,python,"
def minPath(grid, k):
    """"""यदि कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्य""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,san_Deva,python,"
def tri(n):
    """"""त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्यतिसंख्याकस्यतिसंख्याकस्य त्रिष्वपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपि""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,san_Deva,python,"
def digits(n):
    """"""यदि सर्वेषां संख्यायाः संख्याः समः अस्ति, तदा 0 इत्यस्य गुणः प्राप्नोति। उदाहरणार्थः संख्याः ((1) == 1 संख्याः ((4) == 0 संख्याः ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,san_Deva,python,"
def is_nested(string):
    '''इत्थं सूत्रं विहितं भवति यत्, यदि कस्यचित् सूत्रस्य अन्तःकरणं भवति, तदा सः सूत्रः सत्यम् एव प्रतिपादयति। यदि कस्यचित् सूत्रस्य अन्तःकरणं भवति, तदा सः सूत्रः सत्यम् एव प्रतिपादयति।'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,san_Deva,python,"

def sum_squares(lst):
    """"""अत्र संख्यायाः सूची दीयते। अत्र दीयते संख्यायाः वर्गस्य योगः, अतः प्रथमतः सूचीयाः प्रत्येकं तत्वं उपरिस्थ इण्ट्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अ""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,san_Deva,python,"
def check_if_last_char_is_a_letter(txt):
    '''यदि क्तस्य अन्तिमः अक्षरः अक्षरसूत्रे अस्ति, तथा शब्दस्य भागः नास्ति, तर्हि फलकम् True प्रतिपादयतु। अन्यथा फलकम् False प्रतिपादयतु। ""शब्दः"" इत्यत्र वर्णानां समूहः अस्ति, यानि स्थानद्वारा पृथक्कृतानि सन्ति। उदाहरणम्: check_if_last_char_is_a_letter ({""apple pie"") -> False check_if_last_char_is_a_letter ({""apple pi e"") -> True check_if_last_char_is_a_letter ({""apple pi e"") -> False check_if_last_char_is_a_letter ({""apple pi e"") -> False check_if_last_char_is_a_letter ({""apple pi e"")'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,san_Deva,python,"
def can_arrange(arr):
    """"""यदि न अस्ति तर्हि पुनः प्राप्तिः -१ भवति। दत्ताः सरणीः न द्वित्वं प्राप्नोति। उदाहरणम्: can_arrange (१,२,४,३,५) = ३ can_arrange (१,२,३) = -१""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,san_Deva,python,"
def largest_smallest_integers(lst):
    ''''a' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b''''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,san_Deva,python,"
def compare_one(a, b):
    """"""यदि कस्यचित् वास्तविकसंख्येः कस्यचित् अकारस्य रूपे निरूपणं क्रियते, तदा सः अकारः न प्राप्नोति । यदि कस्यचित् वास्तविकसंख्येः अकारस्य रूपे निरूपणं क्रियते, तदा सः अकारः न प्राप्नोति ।""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,san_Deva,python,"
def is_equal_to_sum_even(n):
    """"""यदि n इत्यस्य संख्यायाः योगः अस्ति, तर्हि तस्य संख्यायाः परिमाणं लिखितुं शक्यते।""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,san_Deva,python,"
def special_factorial(n):
    """"""ब्राजीलियन् फ्याक्टोरियलः इत्यनेन परिभाषितः अस्ति: brazilian_factorial{\displaystyle brazilian_factorial{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle brazilian_factorial}{\displaystyle n_{\displaystyle n_{1}}} =n!} =n!""""""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,san_Deva,python,"
def fix_spaces(text):
    """"""_उदाहरणम्-3्दस्य शृङ्गे २-३-२-२-२-३-२-३-३-३-४-३-४-४-४-५-४-५-५-६-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,san_Deva,python,"
def file_name_check(file_name):
    """"""एकं फलनम् निर्मितव्यम्, यत् फाइलनामस्य अङ्कं गृहीत्वा यदि वैधं भवति तर्हि 'Yes' इति प्रतिपादयति, अन्यथा 'No' इति प्रतिपादयति। फाइलनामस्य वैधत्वं केवलम् एव मन्यते यदि च निम्नलिखितानि शर्तेः पूर्णाः सन्ति: - फाइलनामस्य त्रयाणां अङ्कां (०-९) अति न भवितव्याः - फाइलनामस्य अन्तर्गतं एकं बिन्दु (डॉट) अस्ति। - डाटस्य पूर्वं उपसङ्ख्यानं रिक्तं न भवितव्यम्, तथा च सः लातीनवर्णस्य अक्षरैः (अल्पेट, एट्, एट्, एट्) आरभ्यते। - डाटस्य पश्चात् उपसङ्ख्यानं एतयोः मध्ये एकः भवितव्यम्: ['txt', 'exe', 'lld'] उदाहरणेन: file_name_check""{example.txt.txt} # => 'Yes' file_name_check""{example.dll1} # => 'No' (नाम लातीनवर्णेण आरभ्यते)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,san_Deva,python,"


def sum_squares(lst):
    """""""" इदम् फलनम् पूर्णाङ्काणां सूचीं लभते। सूचीषु सर्वेषु प्रविष्टेषु, यदि तस्य सूचकांकः 3 इत्यस्य गुणकः अस्ति तर्हि फलनम् पूर्णाङ्काणां प्रविष्टेः वर्गं करोति, यदि तस्य सूचकांकः 4 इत्यस्य गुणकः अस्ति तर्हि पूर्णाङ्काणां प्रविष्टेः घनत्वम् करोति। यदि तस्य सूचकांकः 3 इत्यस्य गुणकः अस्ति तर्हि पूर्णाङ्काणां प्रविष्टेः घनत्वम् करोति। सूचीषु येषां सूचकांकः 3 अथवा 4 इत्यस्य गुणकः नास्ति, तेषु प्रविष्टेषु फलनम् न परिवर्तयति। अतः फलनम् सर्वेषां प्रविष्टानां योगं प्रतिपादयति। उदाहरणम्: lst = [1,2,3] कृते आउटपुटः 6 lst = [] कृते आउटपुटः 0 lst = [-1,-5,2,-1,-5] कृते आउटपुटः -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,san_Deva,python,"
def words_in_sentence(sentence):
    """"""भवता वाक्यस्य प्रतिनिधित्वं कर्तुं एकं शृङ्गारं दत्ता अस्ति, तस्मिन् वाक्ये कानिचन शब्दानि सन्ति, ये च रिक्तस्थानैः पृथक् कृतानि सन्ति, तथा भवान् मूलवाक्येभ्यः शब्दान् लभते, येषां लङ्गाः अभाज्यसंख्याकाः सन्ति, नवस्य शृङ्गारस्य शब्दानां क्रमः मूलवाक्येभ्यः समानः भवेत्। उदाहरणः १ः इनपुटः वाक्यम् = ""This is a test"" आउटपुटः ""is"" उदाहरणः २ः इनपुटः वाक्यम् = ""lets go for swimming"" आउटपुटः ""go for"" प्रतिबन्धः * १ <= len{{sentence}) <= १०० * वाक्यम् केवलम् अक्षरैः युक्तम् अस्ति """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,san_Deva,python,"
def simplify(x, n):
    """"""यदि x*n इत्यस्य गुणः पूर्णाङ्कः भवति, तदा तस्य गुणः TRUE भवति, अन्यथा FALSE भवति। x, n, च, भिन्नसंख्यायाः सङ्ख्यापदानि भवन्ति, तथा च, <numerator>/<denominator> इत्यनेन सूत्रेण, यत्र भिन्नसंख्यायाः सङ्ख्यापदानि च, गुणात्मकानि पूर्णाङ्काः सन्ति। भवन्तः अनुमानं कर्तुं शक्नुवन्ति यत् x, n च भिन्नसंख्यायाः संयोगाः सन्ति, तथा च, तेषां संख्यापदानि शून्यानि न सन्ति। simplify{""1/5"", ""5/1"") = True simplify{""1/6"", ""2/1"") = False simplify{""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,san_Deva,python,"
def order_by_points(nums):
    """"""यदि बहुषु स्थानेषु समानं संख्यायाम् अस्ति, तर्हि मूलसूचीयाः सूचकाङ्कानुसारं तेषां क्रमः क्रियताम्। उदाहरणार्थः >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,san_Deva,python,"
def specialFilter(nums):
    """"""एकं फलनम् लिखत यत् संख्यायाः सरणीं आगतं करोति, तथा तत् सरणीं मध्ये १०-अधिकानि अङ्गानि लभते, तथा संख्यायाः प्रथमं तथा अन्तिमं अङ्कं च द्विपदी भवति (१, ३, ५, ७, ९) । उदाहरणार्थः specialFilter (१५, -७३, १४, -१५) => 1 specialFilter (३३, -२, -३, ४५, २१, १०९) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,san_Deva,python,"
def get_max_triples(n):
    """"""भवद्भिः एकं धनात्मकं पूर्णाङ्कं n प्राप्नोति। भवद्भिः एकं पूर्णाङ्कं सरणीं n लम्बं निर्मातुम् आवश्यकास्ति। प्रत्येकं i (1 ‰¤ i ‰¤ n) कृते a[i] = i * i - i + 1 इत्यस्य मूल्यम् प्राप्नोति। a[i], a[j], a[k]) इत्यस्य त्रिगुणाः संख्यां प्रतिपादयतु यत्र i < j < k, तथा a[i] + a[j] + a[k] इत्यस्य गुणकः 3 भवति। उदाहरणः इनपुटः n = 5 आउटपुटः 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] एकमात्रः मान्यः त्रिगुणः (1, 7, 13) ।""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,san_Deva,python,"
def bf(planet1, planet2):
    '''अस्मिन् सौरमण्डले अष्टौ ग्रहाः सन्ति: सूर्यस्य निकटतमः बुधः, अग्रे एकः शुक्रः, ततः पृथिवी, मार्स्, बृहस्पतिः, शनिः, युरेनसः, नेप्च्यूनः। एकं फलनं लिखत यत् द्वौ ग्रहाः नाम ग्रहः १, ग्रहः २ इति सूत्रेण गृह्णाति। फलनम् एकं टपलम् प्रतिपादयति यत् सर्वेषु ग्रहाणां कक्ष्यासु ग्रहः १, ग्रहः २ इति कक्ष्यासु स्थितः अस्ति, सूर्यस्य समीपतायाः आधारात् विभक्तः। यदि ग्रहः १, ग्रहः २ इति ग्रहाः न सन्ति तर्हि फलनम् एकं रिक्त टपलम् प्रतिपादयति। उदाहरणम् bf ""(जुपिटर"", ""नेप्च्यून"") ==> (""शुक्र"", ""युरेनस"") bf ""पृथ्वी"", ""मर्क्युर"") ==> (""शुक्र"") bf ""मर्क्युर"", ""युरेनस"") ==> (""शुक्र"", ""पृथ्वी"", ""मृगः"", ""जुपिटर"", ""शनि"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,san_Deva,python,"
def sorted_list_sum(lst):
    """"""यदि द्वयोः शब्दयोः लम्बाई समानं भवति, तर्हि सूचीं वर्णमालाक्रमेण क्रमबद्धं प्रतिपादयतु। कार्यस्य क्रमबद्धं सूचीं प्रतिपादयतु। भवद्भिः सर्वशब्दाः लम्बाई समानं भवन्तीति गृहीतः। उदाहरणार्थः assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""aaaa"", ""cd"" => ""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,san_Deva,python,"
def x_or_y(n, x, y):
    """"""यदि n इत्यस्य मूल्यं अस्ति तर्हि x इत्यस्य मूल्यं प्रतिपादयतु अन्यथा y इत्यस्य मूल्यं प्रतिपादयतु। उदाहरणम्: x_or_y{\displaystyle x_or_y{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y}{\displaystyle x_or_y_{\displaystyle x_{\frac}}{1}}}""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,san_Deva,python,"
def double_the_difference(lst):
    '''संख्यायाः सूची प्राप्ते, सूचीषु विद्यमानानां संख्यानां वर्गानां योगं प्रतिपादयतु। यदि संख्यायाः सूची रिक्तं अस्ति, तर्हि 0 प्रतिपादयतु।'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,san_Deva,python,"
def compare(game,guess):
    """"""यदि इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,san_Deva,python,"
def Strongest_Extension(class_name, extensions):
    """"""वर्गस्य नाम (स्ट्रिंग) तथा विस्ताराणां सूची भवद्भ् यः प्रदत्तः। विस्ताराणां उपयोगं वर्गस्य अतिरिक्तं वर्गं लोडयितुं क्रियते। विस्ताराणां शक्तिः अधोलिखितम् अस्ति: CAP इति विस्ताराणां नामस्य अपरकेस अक्षरानां सङ्ख्या भवेत्, तथा SM इति विस्ताराणां नामस्य लघुकथाणां सङ्ख्या भवेत्, अतः शक्तिः CAP - SM इत्यनेन ददाति। भवद्भिः सर्वाधिकं विस्ताराय ज्ञातुं तथा अस्य स्वरूपेण स्ट्रिंग् प्रतिपादयितुं शक्यते: ClassName.StrongestExtensionName. यदि समानं शक्तिः द्वा वा अधिकं विस्ताराः सन्ति, तर्हि सूचीमध्ये प्रथमम् आगच्छतीति एकं विस्ताराय चयनयितुं शक्यते। उदाहरणार्थ, यदि भवद्भ् यः वर्गः ""Slices"" इति च विस्ताराणां सूचीः दीयते: ['SEviRNGCliES', 'Cheese', 'StuFfed'] तर्हि भवद्भ् यः 'Slices.SEviRNGCliES' इति प्रतिपादयितुं शक्यते, यतः 'SEviRNGCliES' (SS) इति विस्ताराः अतिप्रबलः अस्ति (वर्गः {{Class_AAAAAA'_, Strongest_Formost}}) ।""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,san_Deva,python,"
def cycpattern_check(a , b):
    """"""भवद् भ् यः २ शब्दः दत्ताः। यदि द्वितीयः शब्दः अथवा तस्य कस्यचित् परिवर्तनं प्रथमशब्दे उपशृङ्गे अस्ति तर्हि भवद् भ् यः True प्रतिपादयितुम् आवश् यकः। cycpattern_check{""abcd"",""abd"") => False cycpattern_check{""hello"",""ell"") => True cycpattern_check{""whassup"",""psus"") => False cycpattern_check{""abab"",""baa"") => True cycpattern_check{""efef"",""eeff"") => False cycpattern_check{""hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,san_Deva,python,"
def even_odd_count(num):
    """"""पूर्णाङ्कः प्राप्नोति, अतः इकः ट्यूप्लः प्रतिपादितः, यस्मिन् क्रमशः सम-अविशिष्ट-अङ्काः सन्ति। उदाहरणम्: even_odd_count ((-12) ==> (1, 1) even_odd_count ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,san_Deva,python,"
def int_to_mini_roman(number):
    """"""यदि इदम् अङ्कः अस्ति, तर्हि तस्य रोमनसंख्यकस्य समकक्षं प्राप्तुं, लघुसंख्यकस्य रूपेण प्रतिपाद्यताम् ।""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,san_Deva,python,"
def right_angle_triangle(a, b, c):
    '''त्रिकोणस्य त्रिषु पक्षेषु दीर्घत्वं प्राप्नोति। यदि त्रयः पक्षः समकोणिको त्रिकोणं कुर्वन्ति तर्हि सत्यं परावर्त्तयति, अन्यथा मिथ्या। समकोणिको त्रिकोणः त्रिकोणः यत्र एकः कोणः समकोणिको वा ९० डिग्रीः अस्ति। उदाहरणम्: right_angle_triangle ((३,४,५) == True right_angle_triangle ((१,२,३) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,san_Deva,python,"
def find_max(words):
    """"""यदि बहुषु सूत्रेषु बहुषु वर्णेषु अनन्यवर्णं भवति, तर्हि तत् शब्दम् प्रतिपादयतु यत् प्रथमम् आगतम् । find_max (([""नाम"", ""of"", ""string""]) == ""string"" find_max (([""नाम"", ""enam"", ""खेल""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,san_Deva,python,"
def eat(number, need, remaining):
    """"""यदि भक्षयितुम् पर्याप्तं भक्षयितुम् शेषः भक्षयितुम् अर्हति, तथापि भक्षयितुम् अपि भुङ्क्तेः अभूत्। उदाहरणम्: * भक्षयितुम् (५, ६, १०) -> [११, ४] * भक्षयितुम् (४, ८, ९) -> [1२, १] * भक्षयितुम् (१, १०) -> [1१, ०] * भक्षयितुम् (२, ११, ५) -> [७, ०] चरः @number: भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हतिह""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,san_Deva,python,"
def do_algebra(operator, operand):
    """"""अत्र द्वौ सूचीषु कर्ता, कर्ता च सन्ति। प्रथमे सूचीयां मूलभूतबीजक्रियाः सन्ति, द्वितीये सूचीयां च पूर्णाङ्काः सन्ति। द्वौ सूचीषु बीजगणितवाक्यानि निर्मातुं, तेषां मूल्यमापनं कर्तुम् च उपयोगः क्रियते। मूलभूतबीजक्रियाः
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,san_Deva,python,"
def solve(s):
    """"""यदि s[i] अक्षरं भवति, तर्हि तस्य अक्षरं निम्नात् ऊर्ध्वं वा विपरितम् आनीय, अन्यथा यथास्थितं कुरु। यदि अक्षरं नास्ति, तर्हि अक्षरं विपरितम् आनीय। फलनम् परिणामस्वरूपाणि परतत्। उदाहरणम् solve{""1234"") = ""4321""{""ab"") = ""AB""{""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,san_Deva,python,"
def string_to_md5(text):
    """"""यदि 'text' इत्यत्र रिक्तः सूत्रः अस्ति, तर्हि None इत्यस्य उत्तरं ददातु ।""""""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,san_Deva,python,"
def generate_integers(a, b):
    """"""यदि द्वौ धनात्मकौ पूर्णाङ्काः a, b, इति प्राप्नुवन्ति, तर्हि a, b इत्ययोः मध्ये विद्यमानौ समसंख्याः वृद्धिपूर्वकं प्रतिपाद्यन्ते। उदाहरणार्थः generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
