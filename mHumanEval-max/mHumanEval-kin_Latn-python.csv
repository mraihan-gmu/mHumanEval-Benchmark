task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,kin_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Reba niba mu rutonde rwatanzwe rw'imibare, hari imibare ibiri yegeranye kuruta igipimo cyatanzwe. Urugero: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Ibinyoma >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Ukuri """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,kin_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Injira kuri uyu murimo ni umurongo urimo amatsinda menshi y'ibisongo byashyizwe. Intego yawe ni ukwitandukanya n'ayo matsinda mu mashyaka atandukanye hanyuma ugasubira ku rutonde rwabo. Amatsinda atandukanye aringaniye (buri gikumwe cyuguruye gifunze neza) kandi ntabwo ashyirwa mu zindi. Irinde ibibanza byose mu murongo w'ibanze. Urugero: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ' [' (()) ', '(()) ', '(()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,kin_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Ahawe umubare mwiza w'igihimba kiguruka, urashobora gusenywa mu gice cy'umubare wose (umubare munini munini muto kuruta umubare watanzwe) n'ibice by'ibinyacumi (igice gisigaye buri gihe gito kuruta 1). Hindura igice cy'ibinyacumi cy'umubare. Urugero: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,kin_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Urasabwa urutonde rw'ibikorwa byo kubitsa no kubikuza kuri konti ya banki itangira n'ibaruramari rya zeru. Igikorwa cyawe ni ugutekereza niba ahantu hose ibaruramari ry'ikibanza ryigabanuka munsi ya zeru, kandi kuri ako gace imikorere igomba kugaruka Ni ukuri. Bitabaye ibyo igomba kugaruka Ibinyoma. Urugero: >>> munsi_zero([1, 2, 3]) Ibinyoma >>> munsi_zero([1, 2, -4, 5]) Ni ukuri """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,kin_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Ku rutonde rwatanzwe rwimibare yinyandiko, kubara Mwayeni Itandukaniro ryukuri hafi yumugani wuyu musanzu wamakuru. Mwayeni Itandukaniro ryukuri ni itandukaniro rusange hagati ya buri kintu nu murongo wo hagati (mubibazo byubu buryo): MAD = average. x - x_mean. Urugero: >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,kin_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Shyiramo umubare ""delimeter"" hagati ya buri bice bibiri bikurikirana byurutonde rwinjira `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,kin_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Injira kuri uyu murimo ni umurongo uhagarariwe ni matsinda menshi y'ibisongo byashyizwe hamwe bitandukanywa n'ahantu. Kuri buri tsinda, tanga urwego rwo hasi cyane rw'ibisongo. Kurugero (() (()) ifite urwego rwagutse rw'ibisongo mugihe ((())) ifite bitatu. >>> parse_nested_parens (('((()) ((())) ((()) ((()) ((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,kin_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Gucunga urutonde rw'ibyinjira by'imiterere gusa kubirimo bitwa substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,kin_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Ku rutonde rwatanzwe rw'imibare yuzuye, subiza tuple igizwe n'igiteranyo n'igiteranyo cy'imibare yose iri ku rutonde. Igiteranyo cyubusa kigomba kungana na 0 kandi igiteranyo cyubusa kigomba kungana na 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,kin_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Kuva kurutonde rutangajwe rwinzuzuye, kora urutonde rwibintu byinshi bihanitse byabonetse kugeza igihe cyatanzwe muburyo. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,kin_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Shaka palindrome ngufi itangirana n'umurongo watanzwe. Igitekerezo cya algorithm kiroroshye: - Shaka postfix ndende ya murongo watanzwe ari palindrome. - Ongeraho ku mpera ya murongo uhinduranya inyuguti yumurongo iza mbere yinyuguti ya palindromic. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Gerageza niba umurongo watanzwe ari palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,kin_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input ni imirongo ibiri a na b igizwe na 1 na 0 gusa. Kora binary XOR kuri ibi byinjijwe hanyuma ugarure ibisubizo kandi nkumurongo. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,kin_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Mu rutonde rw'imiterere, subiza imwe ndende. Subiza iya mbere mu gihe hari imiterere myinshi y'uburebure bumwe. Subiza Nta na kimwe mu gihe urutonde rw'ibyinjira rwuzuye. >>> ndende ((([]) >>> ndende ((['a', 'b', 'c']) 'a' >>> ndende ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,kin_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Gusubiza umugabane rusange munini w'imibare ibiri yose a na b >>> umugabane_musanzwe_munini ((3, 5) 1 >>> umugabane_musanzwe_munini ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,kin_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Gusubiza urutonde rwibikoresho byose kuva kuruhande rwa bugufi kugeza kuruhande rurerure rwumurongo wo kwinjiza >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,kin_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Hagarura umurongo urimo imibare igabanijwe n'ahantu uhereye kuri 0 kugeza kuri n harimo. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,kin_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Urutonde rutanga, shaka umubare winyuguti zitandukanye (utitaye ku cyiciro) ugizwe na >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,kin_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Input kuri uyu murimo ni umurongo uhagarariye amanota ya muzika mu buryo bwihariye ASCII. Umurimo wawe ni gusesengura urutonde rwumurongo wa integer bijyanye na beat nyinshi akora. Hano hari igisobanuro: 'o' not, irangiza kane iratsinda 'o' - igice cya not, irangiza kabiri iratsinda ' - quater not, irangiza rimwe >>> parse_music '. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,kin_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Shaka inshuro zingahe umurongo muto ushobora kuboneka mu murongo w'umwimerere. Kubara ibihe bihujwe. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,kin_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input ni urukurikirane rw'imibare ya 'zero' kugeza 'icyenda'. Amahitamo yemewe ni 'zero', 'imwe', 'biri', 'itatu', 'ine', 'atanu', 'itandatu', 'irindwi', 'umunani' na 'icyenda'. Gusubiza urukurikirane hamwe nimero zatondetswe kuva ku ntoya kugeza ku nini >>> sort_numbers (('itatu imwe itanu') 'imwe itatu itanu' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,kin_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Kuva kurutonde rutangajwe rwimibare (yuburebure nibura bubiri) hitamo kandi usubize bibiri biri hafi cyane kandi ubisubize muburyo (umubare muto, umubare munini). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,kin_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Urutonde rw'imibare (byibura ibintu bibiri), shyiraho ihinduka ry'umurongo kuri urwo rutonde, kuburyo umubare muto uzahinduka 0 naho umubare munini uzahinduka 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,kin_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Gucunga urutonde rwatanzwe rw'ibiciro byose bya python gusa kubara intangiriro >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,kin_Latn,python,"

def strlen(string: str) -> int:
    """"""Gusubiza uburebure bw'umurongo watanzwe >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,kin_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Kubwa nimero yatanzwe n, shaka umubare munini ugabanya n kimwe, muto kuri n >>> umunyabice munini_ ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,kin_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Gusubiza urutonde rw'ingengo y'imari y'umubare wa mbere utangwa ukurikije uko uturuka ku muto kugeza ku munini. Buri ngengo igomba kubarurwa inshuro zihwanye n'inshuro zigaragara mu gutandukanya. Umubare w'ibanze ugomba kungana n'umusaruro w'ingengo zose >>> gutandukanya ((8) [2, 2, 2] >>> gutandukanya ((25) [5, 5] >>> gutandukanya ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,kin_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Kuva kurutonde rwa integer, kuraho ibintu byose biboneka inshuro zirenze imwe. Komeza urutonde rwibintu byasigaye kimwe no mu byo winjije. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,kin_Latn,python,"

def flip_case(string: str) -> str:
    """"""Kuri shinge yatanzwe, hindura inyuguti ntoya mu nyuguti nini no mu nyuguti nini mu nyuguti ntoya. >>> flip_case ((('Mwaramutse') 'Mwaramutse' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,kin_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Gushyira hamwe urutonde rwingingo mu murongo umwe >>> guhuza (([]) '' >>> guhuza ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,kin_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Gucunga urutonde rw'inyandiko z'inyandiko gusa ku zitanzwe n'inyuguti zatanzwe. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,kin_Latn,python,"

def get_positive(l: list):
    """"""Gusubiza imibare myiza gusa kurutonde. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,kin_Latn,python,"

def is_prime(n):
    """"""Gusubiza ukuri niba umubare watanzwe ari uwambere, kandi ibinyoma bitabaye ibyo. >>> ni_wambere(6) Ibinyoma >>> ni_wambere(101) Ni ukuri >>> ni_wambere(11) Ni ukuri >>> ni_wambere(13441) Ni ukuri >>> ni_wambere(61) Ni ukuri >>> ni_wambere(4) Ibinyoma >>> ni_wambere(1) Ibinyoma """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,kin_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ni ibipimo bya polynomial. find_zero ibona x kuburyo poly ((x) = 0. find_zero igarura gusa gusa igipimo cya zero, nubwo haba hari byinshi. Byongeye kandi, find_zero ifata gusa urutonde xs ifite umubare w'ibipimo ndetse na coefficient nini itari zero kuko ibemerera igisubizo. >>> igiteranyo (((find_zero[1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> igiteranyo ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Gusuzuma polynomial hamwe na coefficients xs kuri point x. gusubiza xs[0] + xs [1] * x + xs [1] * x ^ 2 + .... xs [n] * x ^ n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,kin_Latn,python,"

def sort_third(l: list):
    """"""Iyi mikorere ifata urutonde l hanyuma igarura urutonde l' kuburyo l' ihwanye na l mu bipimo bidashobora kugabanywa na bitatu, mugihe indangagaciro zayo kuri ibi bipimo bishobora kugabanywa na bitatu bingana n'indangagaciro z'ibipimo bingana na l, ariko byateguwe. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,kin_Latn,python,"

def unique(l: list):
    """"""Gusubiza ibintu byateguwe bidasanzwe kurutonde >>> bidasanzwe (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,kin_Latn,python,"

def max_element(l: list):
    """"""Gusubiza igipimo cya mbere cy'inyuguti mu rutonde. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,kin_Latn,python,"

def fizz_buzz(n: int):
    """"""Gusubiza umubare w'inshuro igaragara mu mibare yose iri munsi ya n igaburwa na 11 cyangwa 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,kin_Latn,python,"

def sort_even(l: list):
    """"""Iyi mikorere ifata urutonde l hanyuma igatanga urutonde l' kuburyo l' ihwanye na l mu bipimo bitagaragara, mugihe indangagaciro zayo mu bipimo byinganya zingana n'indangagaciro z'ibipimo byinganya bya l, ariko byateguwe. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,kin_Latn,python,"

def encode_cyclic(s: str):
    """"""ifata nk'urutonde rw'ibyinjira rwandikishijwe n'imikorere ya encode_cyclic. Igaruka umurongo wandikishijwe. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""igarura umurongo wa kode mu matsinda y'imiterere y'inyuguti eshatu. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,kin_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib igarura umubare wa n ni umubare wa Fibonacci kandi ni nacyo cyambere. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,kin_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero ifata urutonde rw'imibare yose nk'ibyinjira. ihita igarura ukuri niba hari ibintu bitatu bitandukanye kurutonde bihuza kuri zeru, kandi ibinyoma bitabaye ibyo. >>> triples_sum_to_zero (([1, 3, 5, 0]) Ibinyoma >>> triples_sum_to_zero (([1, 3, -2, 1]) Ukuri >>> triples_sum_to_zero (([1, 2, 3, 7]) Ibinyoma >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) Ukuri >>> triples_sum_to_zero [1]) Ibinyoma """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,kin_Latn,python,"

def car_race_collision(n: int):
    """"""Tekereza umuhanda urimo umurongo muremure cyane. Imodoka n zirimo kugenda ibumoso ugana iburyo; icyarimwe, itsinda ritandukanye ryimodoka n zirimo kugenda iburyo ugana ibumoso. Imodoka ebyiri zitangira kure cyane. Imodoka zose zigenda mu muvuduko umwe. Imodoka ebyiri zivugwa ko zishobora kugongana mugihe imodoka igenda ibumoso ugana iburyo igonga imodoka igenda iburyo ugana ibumoso. Ariko, imodoka zifite imbaraga zidashira kandi zikomeye; kubwibyo, zikomeza kugenda mu nzira yazo nk'aho zitashegeshe. Iyi mikorere itanga umubare w'izo mpanuka.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,kin_Latn,python,"

def incr_list(l: list):
    """"""Gusubiza urutonde hamwe nibintu byongereweho 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,kin_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero ifata urutonde rw'imibare yose nk'ibyinjira. ihita igarura ukuri niba hari ibintu bibiri bitandukanye kurutonde bihuza kuri zeru, kandi ibinyoma bitabaye ibyo. >>> pairs_sum_to_zero (([1, 3, 5, 0]) Ibinyoma >>> pairs_sum_to_zero (([1, 3, -2, 1]) Ibinyoma >>> pairs_sum_to_zero (([1, 2, 3, 7]) Ibinyoma >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) Ukuri >>> pairs_sum_to_zero (([1]) Ibinyoma """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,kin_Latn,python,"

def change_base(x: int, base: int):
    """"""Hindura ishingiro ryimibare yumuvuduko wumuvuduko wa x. kugarura imbonerahamwe nyuma yo guhindura. imibare y'ibanze ni nto kuri 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,kin_Latn,python,"

def triangle_area(a, h):
    """"""Kuburebure bwuruhande hamwe nubuso bwo kugaruka cyane kubice bitatu. >>> triangle_area ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,kin_Latn,python,"

def fib4(n: int):
    """"""Urukurikirane rw'imibare Fib4 ni urukurikirane rusa n'urukurikirane rwa Fibbonacci rusobanurwa gutya: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Andika imikorere kugirango ukoreshe neza igipimo cya n- cya nimero ya fib4. Ntukoreshe gusubirwamo. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,kin_Latn,python,"

def median(l: list):
    """"""Gusubiza mediyani y'ibintu biri mu rutonde l. >>> mediyani (([3, 1, 2, 4, 5]) 3 >>> mediyani (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,kin_Latn,python,"

def is_palindrome(text: str):
    """"""Igenzura niba urutonde rutanga ari palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,kin_Latn,python,"

def modp(n: int, p: int):
    """"""Gusubiza 2^n modulo p (menya imibare). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,kin_Latn,python,"

def encode_shift(s: str):
    """"""ifata nk'urutonde rw'ibyinjira rwandikishijwe n'imikorere ya encode_shift. Igaruka umurongo wandikishijwe. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""igarura umurongo wa kode uhinduranya buri karanga na 5 mu nyuguti. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,kin_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ni igikorwa gifata umurongo w'amagambo kigasubira inyuma nta majwi. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,kin_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Gusubiza Nukuri niba imibare yose mu rutonde l iri munsi y'ikiguzi t. >>> munsi_y'ikiguzi (([1, 2, 4, 10], 100) Nukuri >>> munsi_y'ikiguzi (([1, 20, 4, 10], 5) Ibinyoma """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,kin_Latn,python,"

def add(x: int, y: int):
    """"""Ongeraho imibare ibiri x na y >>> ongeraho ((2, 3) 5 >>> ongeraho ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,kin_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Reba niba amagambo abiri afite inyuguti zingana. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Ni byo >>> same_chars (('abcd', 'dddddddabc') Ni byo >>> same_chars (('dddddddabc', 'abcd') Ni byo >>> same_chars (('eabcd', 'dddddddabc') Ni ibinyoma >>> same_chars ((('abcd', 'dddddddabddce') Ni ibinyoma >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Ni ibinyoma """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,kin_Latn,python,"

def fib(n: int):
    """"""Gusubiza umubare wa Fibonacci wa n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,kin_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ni umurongo wa ""<"" na "">"". return True niba buri bracket yo gufungura ifite bracket yo gufunga. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,kin_Latn,python,"

def monotonic(l: list):
    """"""Return True ni urutonde rwibintu byiyongera cyangwa bigabanuka. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,kin_Latn,python,"

def common(l1: list, l2: list):
    """"""Gusubiza ibintu byasabwe byasabwe byingenzi kuri lisiti ebyiri. >>> rusange (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> rusange (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,kin_Latn,python,"

def largest_prime_factor(n: int):
    """"""Gusubiza igipimo kinini cya mbere cya n. Fata n > 1 kandi ntabwo ari igipimo cya mbere. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,kin_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ni imikorere ihuriza imibare kuva kuri 1 kugeza kuri n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,kin_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ni umurongo wa ""("" na "")"". kugaruka Ni byo niba buri bracket yo gufungura ifite bracket yo gufunga. >>> correct_bracketing(""("") Ibinyoma >>> correct_bracketing(""() Ni byo >>> correct_bracketing(""() "") Ni byo >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,kin_Latn,python,"

def derivative(xs: list):
    """"""xs yerekana ibipimo bya polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Gusubiza igikomoka kuri polynomial muburyo bumwe. >>> igikomoka (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> igikomoka [(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,kin_Latn,python,"

def fibfib(n: int):
    """"""Urukurikirane rw'imibare ya FibFib ni urukurikirane rusa n'urukurikirane rwa Fibbonacci rusobanurwa gutya: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Andika imikorere kugirango ukoreshe neza imibare ya n-th y'urukurikirane rw'imibare ya fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,kin_Latn,python,"
FIX = """"""Andika imikorere vowels_count ifata umurongo uhagarariye ijambo nk'ibyinjira kandi igatanga umubare w'amajwi muri urwo murongo. Amajwi muri iki kibazo ni 'a', 'e', 'i', 'o', 'u'. Hano, 'y' nayo ni amajwi, ariko gusa iyo ari ku mpera y'ijambo ryatanzwe. Urugero: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Ongeraho izindi ngero z'ibigeragezo. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,kin_Latn,python,"
def circular_shift(x, shift):
    """"""Gushyiraho imiterere y'umubare wose x, guhinduranya imibare iburyo no gusubiza ibisubizo nk'umurongo. Niba guhinduranya > umubare w'imibare, gusubiza imibare ihindutse. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,kin_Latn,python,"
def digitSum(s):
    """"""Igikorwa Andika imikorere ifata umurongo nk'ibyinjira kandi igatanga umubare w'inyuguti zo hejuru gusa' ASCII kodes. Ingero: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,kin_Latn,python,"
def fruit_distribution(s,n):
    """"""Muri iki gikorwa, uzaba uhawe umurongo ugaragaza umubare w'amashu n'imiceri bitangwa mu gitebo cy'imbuto iki gitebo kirimo amashu, imiceri, n'imbuto za mango. Bitewe n'umurongo ugaragaza umubare w'amashu n'imiceri hamwe n'umubare wose ugaragaza umubare w'imbuto mu gitebo, subiza umubare w'imbuto za mango mu gitebo. urugero: fruit_distribution""5(amashu na 6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 amashu na 1"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 amashu na 3"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 amashu na 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,kin_Latn,python,"
def pluck(arr):
    """"""""Bishingiye ku rutonde rugaragaza ishami ry'igiti gifite imiterere y'ibinyabuzima bitagira umusaruro, inshingano yawe ni ugufata imwe mu miterere no kuyigarura. Umuyoboro wafashwe ugomba kuba umuyoboro ufite agaciro gato gato. Niba imiterere myinshi ifite agaciro gato gato cyane igaragaye igarura umuyoboro ufite indangagaciro ntoya. Umuyoboro wafashwe ugomba kugarurwa mu rutonde, [smallest_value, indangagaciro yayo ], Niba nta gaciro gato cyangwa umurongo watanzwe utagira ikintu, igarura []. Urugero1: Input: [4,2,3] Output: [2, 1] Ibisobanuro: 2 ifite agaciro gato gato gato, na 2 ifite indangagaciro ntoya. Urugero2: Input: [1,2,3] Output: [2, 1] Ibisobanuro: 2 ifite agaciro gato, na 2 ifite indangagaciro ntoya. Urugero3: Input: [] Output: [4:] Input: [5, 3, 4, 2] [0, 0] Output: 1 node ifite indangagaciro ntoya, ariko indangagaciro ntoya ni zero. Urugero: * Uburebure bwa mbere: 1 * 2 ifite indanga ntoya, ariko indanga ntoya ni zero. * Urugero: 1 * 2===== 0 * 1 * 2= 0 * Uburebure bwa mbere: * 1 ni buto buto buto buto buto buto bufite indanga buto bufite indanga, ariko indanga ni buto bufite ubusa.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,kin_Latn,python,"
def search(lst):
    '''Urubanza rw'umubare ni inshuro nyinshi ugaragara ku rutonde. Niba nta gaciro nk'ako gahari, subira kuri -1. Ingero: gushakisha (([4, 1, 2, 2, 3, 1]) == 2 gushakisha (([1, 2, 2, 3, 3, 4, 4, 4]) == 3 gushakisha (([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,kin_Latn,python,"
def strange_sort_list(lst):
    '''Urutonde rw'imibare yose, gusubiza urutonde muburyo budasanzwe. Gutegura bidasanzwe, ni igihe utangiye n'agaciro gato, noneho umubare munini w'imibare yose isigaye, hanyuma byibura. Ingero: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,kin_Latn,python,"
def triangle_area(a, b, c):
    '''Ubonye uburebure bw'impande eshatu z'inkingi. Gusubiza ubuso bw'inkingi bugabanyijwe ku bipimo 2 by'imfuruka iyo impande eshatu zigize inkingi yemewe. Bitabaye ibyo gusubiza -1 Impande eshatu zigize inkingi yemewe iyo umubare w'impande zombi uruta uruhande rwa gatatu. Urugero: inkingi_inkingi_inkingi (a) 3, 4, 5) == 6.00 inkingi_inkingi (a) 1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,kin_Latn,python,"
def will_it_fly(q,w):
    '''Andika imikorere igarura ukuri niba ikintu q kizaguruka, kandi Ibinyoma bitabaye ibyo. Ikintu q kizaguruka niba cyuzuye (ni urutonde rwa palindrome) kandi umubare w'ibiranga birimo ni muto cyangwa ungana n'uburemere bushoboka bw'ibinyabuzima. Urugero: bizaguruka (([1, 2], 5) â -> Ibinyoma # 1+2 ni bike cyane ugereranije n'uburemere bushoboka, ariko ntabwo bihuye. bizaguruka (([3, 2, 3], 1) â -> Ibinyoma # birimo, ariko 3+2+3 birenze uburemere bushoboka. bizaguruka (([3, 2, 3], 9) â -> Ukuri # 3+23 ni buke cyane ugereranije n'uburemere bushoboka, kandi birumvikana. bizaguruka ((([3], â 5) -> Ukuri # 3 ni buke cyane ugereranije n'uburemere bushoboka, kandi birumvikana.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,kin_Latn,python,"
def smallest_change(arr):
    """"""Gutanga urutonde arr ya integer, shaka umubare muto w'ibintu bikeneye guhindurwa kugirango urutonde rube palindromic. Urutonde rwa palindromic ni urutonde rusomwa kimwe imbere no inyuma. Mu mpinduka imwe, urashobora guhindura ikintu kimwe ukakihindura ikindi kintu. Urugero: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,kin_Latn,python,"
def total_match(lst1, lst2):
    '''Andika imikorere yemera urutonde rwintambo ebyiri kandi igarura urutonde rufite umubare winyuguti muri urutonde rwintambo zose ziruta urundi rutonde. niba urutonde rwintambo zombi rufite umubare ungana winyuguti, ugarura urutonde rwa mbere. Ingero total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3', '4', '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,kin_Latn,python,"
def is_multiply_prime(a):
    """"""Andika imikorere igaragaza ukuri niba umubare watanzwe ari ugupfa kw'imibare 3 ya mbere kandi ikinyoma bitabaye ibyo. Kumenya ko (a) ari munsi ya 100. Urugero: is_multiply_prime(30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,kin_Latn,python,"
def is_simple_power(x, n):
    """"""Igikorwa cyawe ni ukwandika imikorere igaruka ukuri niba umubare x ari imbaraga yoroheje ya n kandi ibeshya mu bindi bihe. x ni imbaraga yoroheje ya n niba n**int=x Urugero: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,kin_Latn,python,"
def iscube(a):
    '''Andika imikorere ifata integer a maze igarura ukuri niba iyi ingeger ari cube ya nimero yose. Icyitonderwa: ushobora gufata ko inyandiko ihora yemewe. Ingero: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,kin_Latn,python,"
def hex_key(num):
    """"""Wasabwe kwandika imikorere yakira umubare wa hexadecimal nkumurongo kandi ikabara umubare wa nimero za hexadecimal ari primes (umubare wa mbere, cyangwa prim, ni imibare isanzwe iruta 1 idasimbuzwa imibare ibiri mito). Imibare ya hexadecimal ni 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Imibare ya mbere ni 2, 3, 5, 7, 11, 13, 17,..., ... Bityo ugomba kumenya umubare w'imibare ikurikira: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Icyitonderwa: ushobora gufata ko inyandiko y'ibanze ihora ari nziza cyangwa imfabusa, kandi ibimenyetso A,B,C,D,E,F buri gihe biba ari inyuguti nini. Ingero: Kuri num ""AB"" ibisubizo bigomba kuba num = 1. Kuri num = 1077E ibisubizo bigomba kuba 2. Kuri num ""AB"" igomba kuba num = 1.331A ""A"" igomba kuba num = 4.1289A ""ABC"" igomba kuba 6.067D ""EF"" igomba kuba 2.045"" Ku ""2020"" igomba kuba 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,kin_Latn,python,"
def decimal_to_binary(decimal):
    """"""Uzahabwa umubare mu buryo bwa decimal kandi akazi kawe ni ukuwuhindura muburyo bw'ibinyabibiri. Imirimo igomba gusubiza umurongo, buri karanga uhagarariye umubare w'ibinyabibiri. Buri karanga mu murongo izaba ari '0' cyangwa '1'. Hazabaho inyuguti ebyiri zinyongera 'db' mu ntangiriro no ku mpera yumurongo. Ibindi byanditswe biriho kugirango bifashe muburyo. Ingero: decimal_to_binary ((15) # isubiza ""db1111db"" decimal_to_binary32) # isubiza ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,kin_Latn,python,"
def is_happy(s):
    """"""Uhabwa umurongo s. Igikorwa cyawe ni ukureba niba umurongo wishimye cyangwa utishimye. Umurongo wishimye niba uburebure bwawo ari byibuze 3 kandi buri nyuguti 3 zikurikirana zitandukanye Urugero: is_happy ((a) => Ibinyoma ni_happy ((aa) => Ibinyoma ni_happy ((abcd) => Ibinyoma ni_happy ((aabb) => Ibinyoma ni_happy ((adb) => Ibinyoma ni_happy ((xyy) => Ibinyoma """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,kin_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ni icyumweru cya nyuma cy'igihembwe cy'amashuri, mwarimu akaba agomba guha abanyeshuri amanota. Umwarimu yakoze algorithm ye bwite yo gutanga amanota. Ikibazo gusa ni uko yatakaje kode yakoreshaga mu gutanga amanota. Yaguhaye urutonde rwa GPAs kuri bamwe mu banyeshuri kandi ugomba kwandika imikorere ishobora gutanga urutonde rw'amanota y'inyuguti ukoresheje imbonerahamwe ikurikira: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,kin_Latn,python,"
def prime_length(string):
    """"""Andika imikorere ifata umurongo w'inyuguti igatanga True niba uburebure bw'umurongo ari umubare wa mbere cyangwa False ubundi Ingero prime_length (('Mwaramutse') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,kin_Latn,python,"
def starts_one_ends(n):
    """"""Bivuye kuri integero nziza n, subiza umubare wa nimero z'imibare y'imibare y'imibare itangira cyangwa irangira na 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,kin_Latn,python,"
def solve(N):
    """"""Gutanga umubare wuzuye N, kugarura umubare w'imibare yose mu mibare ibiri. Urugero Kuri N = 1000, umubare w'imibare uzaba ari 1 umusaruro ugomba kuba ""1"". Kuri N = 150, umubare w'imibare uzaba ari 6 umusaruro ugomba kuba ""110"". Kuri N = 147, umubare w'imibare uzaba ari 12 umusaruro ugomba kuba ""1100"". Ibihinduka: @N integer Imirongo: 0 â‰¤ N â‰¤ 10000. Umusaruro: urutonde rw'umubare wa binary """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,kin_Latn,python,"
def add(lst):
    """"""Ukurikije urutonde rw'imibare yose itari ubusa lst. ongeraho ibintu by'impande ebyiri biri ku bipimo bidasanzwe.. Ingero: ongeraho (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,kin_Latn,python,"
def anti_shuffle(s):
    """"""Andika imikorere ifata umurongo igatanga inyandiko y'umurongo. Inyandiko y'umurongo, ni umurongo aho amagambo yose (atandukanyijwe n'ahantu) asimbuzwa ijambo rishya aho inyuguti zose zitondetse muburyo bw'inyongera bushingiye ku gaciro ka ascii. Icyitonderwa: Ugomba kugumana urutonde rw'amagambo n'ahantu hadasobanutse mu mugani. Urugero: anti_shuffle ((('Hi') igarura 'Hi' anti_shuffle ((('hello') igarura 'ehllo' anti_shuffle (('Hello World!!!') igarura 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,kin_Latn,python,"
def get_row(lst, x):
    """"""Uhabwa amakuru yo mu byiciro 2, nk'urutonde rwashyizwe mu ishyingurano, risa na matrice, ariko bitandukanye na matrice, buri murongo ushobora kuba urimo umubare utandukanye w'inkingi. Gutanga lst, na integer x, shaka integer x kurutonde, hanyuma usubize urutonde rwa tuples, [(x1, y1), (x2, y2) ...] kuburyo buri tuple ari coordinate - (umurongo, inkingi), itangirana na 0. Gutegura ibipimo by'ibanze mu mibare muburyo bw'inyongera. Nanone, gutondekanya ibipimo by'umurongo mu nkingi muburyo bwamanuka. Ingero: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 0, 1, 4], 0 0 (2, 5), (2, 0) get_[0], 1) [] == [[umurongo 1, 2, 3]], 2 []] == 2 , 3] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,kin_Latn,python,"
def sort_array(array):
    """"""Gutanga urutonde rw'imibare itari mibi, gusubiza kopi y'urutonde rwatangajwe nyuma yo gutondekanya, uzashyiraho urutonde rwatanzwe muburyo bwiyongera niba ingano ((igiciro cya mbere cy'inyandiko, agaciro k'inyandiko yanyuma) ari injiji, cyangwa uyishyire muburyo bumanuka niba ingano ((igiciro cy'inyandiko yambere, agaciro k'inyandiko yanyuma) ari ingano. Icyitonderwa: * ntuhindure urutonde rwatanzwe. Ingero: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6]  0""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,kin_Latn,python,"
def encrypt(s):
    """"""Gushyiraho imikorere encrypt ifata umurongo nk'impaka maze igatanga umurongo wa encrypt na alfabeti igenda yikurura. Inyuguti zigomba guhindurwa muburyo butuma inyuguti zigabanuka ebyiri zikubye ahantu habiri. Urugero: encrypt (('hi') igarura 'lm' encrypt (('asdfghjkl') igarura 'ewhjklnop' encrypt (('gf') igarura 'kj' encrypt (('et') igarura 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,kin_Latn,python,"
def next_smallest(lst):
    """"""Uhabwa urutonde rw'imibare yose. Andika imikorere next_smallest (() igarura igice cya kabiri cyoroheje kurutonde. Gusubiza None niba nta gice nkiki kiriho. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,kin_Latn,python,"
def is_bored(S):
    """"""Uzahabwa urutonde rw'amagambo, kandi inshingano yawe ni ukubaza umubare w'amagambo arambiwe. Urambiwe ni interuro itangirana n'ijambo ""I"". Imirongo igabanijwe na '.', '?' cyangwa '!'. Urugero: >>> arambiwe. ""Hello world"") 0 >>> arambiwe. ""Ijuru ni ubururu. Izuba riraka. Nkunda iyi mvura"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,kin_Latn,python,"
def any_int(x, y, z):
    '''Gushyiraho imikorere ifata imibare 3. Igaragaza ukuri niba imwe mu mibare ingana n'igiteranyo cy'indi ibiri, kandi imibare yose ni integer. Igaragaza ikinyoma mu bindi bihe byose. Ingero any_int ((5, 2, 7) â -> True any_int ((3, 2, 2) â -> False any_int ((3, -2, 1) â -> True any_int ((3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,kin_Latn,python,"
def encode(message):
    """"""Andika imikorere ifata ubutumwa, ikabushyiraho uburyo bwo guhindura inyuguti zose, ikazana indangansina zose mu butumwa n'inyuguti igaragara ahantu 2 imbere y'iyo ndangajwi mu nyuguti z'icyongereza. Fata inyuguti gusa. Ingero: >>> encode('test') 'TGST' >>> encode('Ibi ni ubutumwa') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,kin_Latn,python,"

def skjkasdkd(lst):
    """"""Urutonde rw'imibare. Ugomba gushaka agaciro kanini cyane hanyuma ugatanga umubare w'imibare yayo. Urugero: Kuri lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] umusaruro ugomba kuba 10 Kuri lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] umusaruro ugomba kuba 25 Kuri lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] umusaruro ugomba kuba 13 Kuri lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] umusaruro ugomba kuba 11 Kuri lst = [0,81,12,31,21] umusaruro ugomba kuba 3 Kuri lst = [0,1,8,1,2,7] umusaruro ugomba kuba 7 """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,kin_Latn,python,"
def check_dict_case(dict):
    """"""Gutanga inkoranyamagambo, kugarura Ni ukuri niba imfunguzo zose ari imirongo mu nyuguti nto cyangwa imfunguzo zose ari imirongo mu nyuguti nini, ubundi kugarura Ibinyoma. Imirimo igomba kugarura Ibinyoma ni inkoranyamagambo yatanzwe ni imfabusa. Ingero: check_dict_case{""a"":""apple"", ""b"":""banana""}) igomba kugarura Ni ukuri. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) igomba kugarura Ibinyoma. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) igomba kugarura Ibinyoma. check_dict_case{""Izina"":""John"", ""Imyaka"":""36"", ""Umujyi"":""Houston""}) Ibinyoma bigomba kugarura. check_dict_case{""NC"":""STATE"", ""Z"":""IP""45"") igomba kugarura Ni ukuri.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,kin_Latn,python,"
def count_up_to(n):
    """"""Shyira mubikorwa imikorere ifata imibare itari mibi kandi igatanga urutonde rwa nimero zambere n zifite imibare ya mbere kandi nto kuri n. kurugero: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,kin_Latn,python,"
def multiply(a, b):
    """"""Kurangiza imikorere ifata imibare ibiri yose kandi igatanga umusaruro w'imibare yabo. Fata ko inyandiko ihora yemewe. Ingero: gukubita ((148, 412) bigomba kugarura 16. gukubita ((19, 28) bigomba kugarura 72. gukubita ((2020, 1851) bigomba kugarura 0. gukubita ((14,-15) bigomba kugarura 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,kin_Latn,python,"
def count_upper(s):
    """"""Ufatiye ku murongo wa s, ubare umubare w'inyuguti nini mu bipimo by'inyuguti. Urugero: count_upper (('aBCdEf') igarura 1 count_upper (('abcdefg') igarura 0 count_upper (('dBBE') igarura 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,kin_Latn,python,"
def closest_integer(value):
    '''Kora imikorere ifata agaciro (umurongo) uhagarariye umubare hanyuma ugasubiza integer yegereye. Niba umubare ufite intera ingana na nimero ebyiri, uzunguruze kure ya zeru. Ingero >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Icyitonderwa: Gukata kure ya zeru bivuze ko niba umubare watanzwe ufite intera ingana na nimero ebyiri, ugomba kugaruka ariwo uri kure ya zeru. Urugero: closest_integer "" ((14.5"") igomba kugaruka 15 na closest_integer "" ((-14.5"") igomba kugaruka -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,kin_Latn,python,"
def make_a_pile(n):
    """"""Iyo uhawe umubare wuzuye w'inyongera n, ugomba gukora umurundo w'amabuye y'ibyiciro n. Urwego rwa mbere rufite amabuye n. Umubare w'amabuye mu rwego rukurikira ni: - umubare utagabanyije ukurikira niba n ari udasanzwe. - umubare ukurikira w'umubare w'umubare niba n ari umwe. Hindura umubare w'amabuye muri buri rwego mu rutonde, aho intangiriro ku kimenyetso i ihagarariye umubare w'amabuye mu rwego (i + 1). Ingero: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,kin_Latn,python,"
def words_string(s):
    """"""Uzahabwa umurongo w'amagambo atandukanyijwe n'udupande cyangwa ibibanza. Igikorwa cyawe ni ugucamo umurongo mu magambo hanyuma ugasubiza urutonde rw'amagambo. Urugero: amagambo_umurongo ((""Mwiriwe, izina ryanjye ni John"") == [""Mwiriwe"", ""ryanjye"", ""izina"", ""ni"", ""John""] amagambo_umurongo ((""Kimwe, bibiri, bitatu, bine, bitanu, bitandatu"") == [""Kimwe"", ""biri"", ""bitatu"", ""bine"", ""bitanu"", ""bitandatu""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,kin_Latn,python,"
def choose_num(x, y):
    """"""Iyi mikorere ifata imibare ibiri myiza x na y kandi igarura umubare munini w'umubare wose uri mu kigero [x, y] ushyirwamo. Niba nta mubare nk'uwo, noneho imikorere igomba kugarura -1. Urugero: hitamo_umubare_12, 15) = 14 hitamo_umubare_13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,kin_Latn,python,"
def rounded_avg(n, m):
    """"""Uhabwa imibare ibiri myiza n na m, kandi inshingano yawe ni ugupima igiteranyo cyimibare yose kuva kuri n kugeza kuri m (harimo n na m). Gucunga igisubizo kugeza ku mubare wose wegereye hanyuma ugahindura kuri binary. Niba n iruta m, subira -1. Urugero: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b11"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,kin_Latn,python,"
def unique_digits(x):
    """"""Gutanga urutonde rw'imibare yuzuye x. kugarura urutonde rutondetse rw'ibintu byose bidafite nimero imwe. Icyitonderwa: Urutonde rwasubijwe rugomba gutondekwa muburyo bwiyongereye. Urugero: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,kin_Latn,python,"
def by_length(arr):
    """"""Gutanga urutonde rw'imibare yose, gutondekanya imibare yose iri hagati ya 1 na 9 harimo, guhinduranya urutonde rusohoye, hanyuma usimbuze buri mubare n'izina ryuhuje kuva kuri ""Kimwe"", ""Biri"", ""Biri"", ""Bine"", ""Batanu"", ""Itandatu"", ""Kirindwi"", ""umunani"", ""Dufite"". Urugero: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> gutondekanya arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> guhinduranya arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""Five"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Niba urutonde nta kintu, gusubiza urutonde: arr = [] return [] Niba urutonde rufite umubare udasanzwe wirengagize: arr = [1, -1 , 55] -> arr -> [1, 1], 55 -> reverse arr = [55,1] - return ['One' 1] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,kin_Latn,python,"
def f(n):
    """"""Shyira mubikorwa imikorere f ifata n nka parameter, kandi igarura urutonde rwagutse n, kuburyo agaciro k'ikintu ku kimenyetso i ari factorial ya i niba i ari imwe cyangwa umubare w'imibare kuva kuri 1 kugeza i bitabaye ibyo. i itangira kuri 1. factorial ya i ni ukwiyongera kw'imibare kuva kuri 1 kugeza i (1 * 2 * ... * i). Urugero: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,kin_Latn,python,"
def even_odd_palindrome(n):
    """"""Ahawe umubare uhagije n, ugarura tuple ifite umubare wa palindrome ya nimero imwe na nimero imwe itari imwe iri mu kigero cya ((1, n), harimo. Urugero1: Injira: 3 Ibisohoka: (1, 2) Ibisobanuro: Integer palindrome ni 1, 2, 3. imwe muri zo ni imwe, kandi ebyiri muri zo ni impar. Urugero2: Injira: 12 Ibisohoka: (4, 6) Ibisobanuro: Integer palindrome ni 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. enye muri zo ni imwe, kandi 6 muri zo ni impar. Icyitonderwa: 1. 1 <= n <= 10 ^ 3 2. tuple yagarutse umubare wa palindrome ya nimero imwe na nimero imwe. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,kin_Latn,python,"
def count_nums(arr):
    """"""Andika imikorere count_nums ifata urutonde rw'imibare yose kandi igatanga umubare w'ibiranga bifite umubare w'imibare > 0. Niba umubare ari mubi, noneho imibare ya mbere y'ibimenyetso bizaba ari bibi: urugero: -123 ifite imibare y'ibimenyetso -1, 2, na 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,kin_Latn,python,"
def move_one_ball(arr):
    """"""Dufite urutonde 'arr' ya N integer arr[1], arr[2], ..., arr[N].Ibipimo biri muri urwego bizateganywa mu buryo butunguranye. Igikorwa cyawe ni ukumenya niba bishoboka gutondekanya urwego muburyo budatandukana ukora igikorwa gikurikira kuri urwego rwatanzwe: Uwemerewe gukora igikorwa cyo kwimura iburyo inshuro nyinshi. Igikorwa kimwe cyo kwimura iburyo bisobanura kwimura ibintu byose bya urwego n'ahantu hamwe muburyo bukwiye. Ikintu cya nyuma cyurwego kiza kwimurwa mu kibanza gitangira muburyo ni ukuvuga 0th index. Niba bishoboka kubona urwego rutondetse ukora igikorwa cyo hejuru noneho kugarura Ukuri ubundi kugarura Ibinyoma. Niba urwego rwatanzwe rubuze noneho kugarura Ukuri. Icyitonderwa: Urutonde rwatanzwe rwizewe kugira ibintu byihariye. Kurugero: move_one_(ball[3, 4, 5, 2] == Ibisobanuro byukuri: Kubinyuma ya 2min ibikorwa byo kuryo, gahunda idatandukana irashobora kugerwaho kugirango urwego ruhebwe. [3, 4, 5] == Ibisobanuro byibinyoma == Ntibishoboka gukora ibikorwa byo kwimura urutonde rwatanzwe.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,kin_Latn,python,"
def exchange(lst1, lst2):
    """"""Muri iki kibazo, uzashyira mubikorwa imikorere ifata urutonde rwimibare ibiri, kandi igena niba bishoboka guhanahana ibintu hagati yabo kugirango lst1 ibe urutonde rwimibare imwe gusa. Nta mbogamizi ku mubare wibintu byahindutse hagati ya lst1 na lst2. Niba bishoboka guhanahana ibintu hagati ya lst1 na lst2 kugirango ibintu byose bya lst1 bibe kimwe, subiza ""YES"". Bitabaye ibyo, subiza ""NO"". Kurugero: guhanahana [(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" guhanahana [(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Biteganijwe ko urutonde rwibyinjira rutazaba ubusa. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,kin_Latn,python,"
def histogram(test):
    """"""Ahawe umurongo uhagarariye inyuguti zitandukanyijwe n'ahantu, usubiza inkoranyamagambo y'inyuguti ifite isubiramo ryinshi kandi ikubiyemo umubare uhuye. Niba inyuguti nyinshi zifite kugaragara kumwe, usubiza zose. Urugero: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4}: histogram (('a b') == {'b 4} } } } } } } } } } } } } """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,kin_Latn,python,"
def reverse_delete(s,c):
    """"""Umurimo Duhabwa imirongo ibiri s na c, ugomba gusiba inyuguti zose muri s zingana n'inyuguti iyo ari yo yose muri c hanyuma ukareba niba umurongo w'ibisubizo ari palindrome. Umurongo witwa palindrome niba usoma kimwe inyuma nk'imbere. Ugomba kugarura tuple ikubiyemo umurongo w'ibisubizo na True / False kugirango ukore igenzura. Urugero Kuri s = ""abcde"", c = ""ae"", ibisubizo bigomba kuba ('bcd', False) Kuri s = ""abcdef"", c = ""b"" ibisubizo bigomba kuba ('acdef', False) Kuri s = ""abcdedcba"", c = ""ab"", ibisubizo bigomba kuba ('cdedc', True) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,kin_Latn,python,"
def odd_count(lst):
    """"""Ahawe urutonde rw'imitwe, aho buri mutambagiro ugizwe n'imibare gusa, usubiza urutonde. Buri kintu i cy'umusaruro kigomba kuba ""umubare w'ibintu bidasanzwe mu mutambagiro i w'ibyinjira. "" aho i zose zigomba gusimbuzwa umubare w'imibare idasanzwe mu mutambagiro wa i' w'ibyinjira. >>> odd_count ['1234567']) [""umubare w'ibintu bidasanzwe 4n str4ng 4 ya 4nput.""] >>> odd_count ['3', ""11111111""]) [""umubare w'ibintu bidasanzwe 1n str1ng 1 ya 1nput. "", ""umubare w'ibintu bidasanzwe 8n str8ng 8 ya 8nput. ""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,kin_Latn,python,"
def minSubArraySum(nums):
    """"""Gutanga urutonde rwa integer n, shaka umubare muto w'urutonde ruto rw'imibare. Urugero minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,kin_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Urutonde rw'ibisima. Buri murongo uhagarariye iriba rimwe, kandi buri 1 mu murongo uhagarariye igice kimwe cy'amazi. Buri iriba rifite indobo ijyanye ishobora gukoreshwa mu kuvoma amazi muri ryo, kandi indobo zose zifite ubushobozi bumwe. Igikorwa cyawe ni ugukoresha indobo zo kuvoma. Kohereza inshuro ukeneye kumanura indobo. Urugero1: Injira: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Ibisubizo: 6 Urugero2: Injira: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Ibisubizo: 5 Urugero3: Injira: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Ibipimo by'iriba
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,kin_Latn,python,"
def sort_array(arr):
    """"""Muri iki Kata, ugomba gutondekanya urutonde rwa integer zitari hasi ukurikije umubare wa bamwe muburyo bwa binary muburyo bwinyongera. Ku mubare ungana wa bamwe, gutondekanya ukurikije agaciro k'imbyaro. Bigomba gushyirwa mubikorwa gutya: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,kin_Latn,python,"
def select_words(s, n):
    """"""Ufite umurongo s n umubare w'ibanze n, wasabwe gushyiraho imikorere igarura urutonde rw'amagambo yose y'umurongo s arimo indangansobanuzi n, kugirango aya magambo agaragare mu murongo s. Niba umurongo s ari ubusa noneho imikorere igomba kugarura urutonde rutagize icyo ruvuga. Icyitonderwa: ushobora gufata ko umurongo winjira urimo inyuguti n'ibibanza gusa. Ingero: hitamo_amagambo ""Marie yari afite umwana w'intama muto"", 4) ==> ["" umwana w'intama muto""] hitamo_amagambo ""Marie yari afite umwana w'intama muto"", 3) ==> ["" Mariya, "" umwana w'intama muto""] hitamo_amagambo ""ibibanza byoroheje"", 2) ==> [] hitamo_amagambo ""Mwaramutse isi"", 4) ==> ["" isi""] hitamo_amagambo "" Uncle sam"", 3) ==> ["" Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,kin_Latn,python,"
def get_closest_vowel(word):
    """"""Uhabwa ijambo. Igikorwa cyawe ni ugushaka indangansina yegereye cyane iri hagati y'indangansina ebyiri ziri iburyo bw'ijambo (igiteranyo cy'inyuguti). Indangansina ziri mu ntangiriro n'iherezo ntabwo zifatwa. Hindura umurongo utagira icyo uvuga niba nta ndangansina na imwe wabonye yujuje ibisabwa hejuru. Ushobora gutekereza ko umurongo watanzwe urimo inyuguti z'icyongereza gusa. Urugero: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,kin_Latn,python,"
def match_parens(lst):
    '''Urutonde rw'imitwe ibiri, imitwe yombi igizwe n'ibice by'ububyimba '(' cyangwa ibifunga ') '. Akazi kawe ni ukureba niba bishoboka guhuza imigozi ibiri muburyo runaka, ko umurongo uvamo uzaba mwiza. Umurongo S ufatwa ko ari mwiza niba kandi gusa niba ibifunga byose muri S byumvikana. Urugero: umurongo '((()) 'ni mwiza, mu gihe umurongo '()) ' atari wo. Hagaruka 'Yego' niba hari uburyo bwo gukora umurongo mwiza, hanyuma ugaruke 'Oya' bitabaye ibyo. Ingero: match_parens[('(() ', ') ']) == 'Yego' match_parens[(') ', ') ']) == 'Oya' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,kin_Latn,python,"
def maximum(arr, k):
    """"""Urutonde rwatanzwe rw'imibare yose hamwe n'umubare mwiza k, usubiza urutonde rutondetse rw'uburebure k hamwe n'imibare myinshi k muri arr. Urugero1: Injira: arr = [-3, -4, 5], k = 3 Ibisohoka: [-4, -3, 5] Urugero2: Injira: arr = [4, -4, 4], k = 2 Ibisohoka: [4, 4] Urugero3: Injira: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Ibisohoka: [2] Icyitonderwa: 1. uburebure bw'urutonde buzaba buri mu kigero cya [1, 1000]. 2. Ibice biri mu rutonde bizaba biri mu kigero cya [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,kin_Latn,python,"
def solution(lst):
    """"""Ahawe urutonde rw'imibare itari ubusa, subiza umubare w'ibanze byose bitagaragara biri mu myanya imwe. Ingero umuti (([5, 8, 7, 1]) ==> 12 umuti (([3, 3, 3, 3, 3]) ==> 9 umuti (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,kin_Latn,python,"
def add_elements(arr, k):
    """"""Ufite urutonde rw'imibare yose arr n'umubare wose k, subiza ingano y'ibiranga bifite imibare ibiri y'ibanze k y'ibiranga bya arr. Urugero: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,kin_Latn,python,"
def get_odd_collatz(n):
    """"""Iyo uhawe umubare wuzuye n, usubirayo urutonde rutondetse rufite imibare idasanzwe muburyo bwa collatz. Igitekerezo cya Collatz ni igitekerezo muri mathématiques kijyanye n'urukurikirane rusobanurwa uku gukurikira: tangira n'umubare wose w'ibarura n. Hanyuma buri kimwe kiboneka mubyiciro byambere bikurikira: niba igipimo cyabanjirije ari kimwe, igipimo gikurikira ni kimwe cya kabiri cy'igipimo cyabanjirije. Niba igipimo cyabanjirije ari kimwe, igipimo gikurikira ni inshuro 3 igipimo cyabanjirije wongeyeho 1. Igitekerezo ni uko uko uko agaciro ka n, urutonde ruzahora rugera kuri 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,kin_Latn,python,"
def valid_date(date):
    """"""Ugomba kwandika imikorere yemeje umurongo w'itariki runaka kandi igatanga True niba itariki yemewe ukundi Ibinyoma. Itariki yemewe niba amategeko yose akurikira yujuje: 1. Umurongo w'itariki ntabwo ari ubusa. 2. Umubare w'iminsi ntabwo uri munsi ya 1 cyangwa hejuru y'iminsi 31 mu mezi 1,3,5,7,8,10,12. Kandi umubare w'iminsi ntabwo uri munsi ya 1 cyangwa hejuru y'iminsi 30 mu mezi 4,6,9,11. Kandi, umubare w'iminsi ntabwo uri munsi ya 1 cyangwa hejuru ya 29 mu kwezi 2. 3. Amezi ntabwo agomba kuba munsi ya 1 cyangwa hejuru ya 12. 4. Itariki igomba kuba muburyo: mm-dd-yyyy urugero: valid_date (('03-11-2000') => True_date (('15-01-2012') => False valid_date (('04-02040') => False_date (('06-04-2020') => True_date (('06-04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,kin_Latn,python,"
def split_words(txt):
    '''Uhawe urutonde rw'amagambo, ugarure urutonde rw'amagambo agabanyije ku byumba by'ubusa, niba nta byumba by'ubusa bibaho mu mwandiko ugomba kugabana ku nkomanga ',' niba nta nkomanga zihari ugomba kugarura umubare w'inyuguti nto zikurikije urutonde rudasanzwe muri alfabeti, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Ingero split_words ((""Mwaramutse isi!"") â -> [""Mwaramutse, isi!""] split_words ((""Mwaramutse, isi!"") â -> [""Mwaramutse, isi!""] split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,kin_Latn,python,"
def is_sorted(lst):
    '''Gutanga urutonde rw'imibare, kugarura niba cyangwa ntabwo baratoranijwe muburyo bugenda bwiyongera. Niba urutonde rufite ibirenze 1 duplicate ya nimero imwe, kugarura Ibinyoma. Fata ko nta mibare mibi kandi imibare yose gusa. Ingero is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,kin_Latn,python,"
def intersection(interval1, interval2):
    """"""Uhabwa intera ebyiri, aho buri intera ari umubare w'imibare. Kurugero, intera = (intangiriro, iherezo) = (1, 2). Intera yatanzwe irafunze bivuze ko intera (intangiriro, iherezo) ikubiyemo intangiriro n'iherezo. Kuri buri intera yatanzwe, bitekerezwa ko intangiriro yayo ari nto cyangwa ingana n'iherezo ryayo. Inshingano yawe ni ukumenya niba uburebure bw'impinduka z'izi intera zombi ari umubare wa mbere. Urugero, gutandukana kw'ibice (1, 3), (2, 4) ni (2, 3) uburebure bwacyo ni 1, atari umubare wa mbere. Niba uburebure bw'impinduka ari umubare wa mbere, subiza ""YEGO"", bitabaye ibyo, subiza ""OYA"". Niba intera ebyiri zidakurura, subiza ""OYA"". [input / output] ibigereranyo: intersection (((1, 2), (2, 3) ==> ""intersection ("", intersection (), ""NO"", intersection (), ""intersection (), ""intersection (), ""intersection (), ""intersection (), ""intersection (), ""intersection (), ""intersection (), ""intersection (), ""intersection (), ""intersection (), ""intersection (intersection (), ""intersection (intersection) ""intersection (intersection (intersection) ""intersection (intersection) "" (intersection (intersection) ""intersection (intersection) "" (intersection (intersection) ""intersection (intersection (intersection) ""intersection (intersection))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,kin_Latn,python,"
def prod_signs(arr):
    """"""Uhabwa urutonde rw'imibare yose kandi ugomba kugarura ingano y'imibare yose yikubye inshuro y'ibimenyetso byose bya buri mubare muri urwego, bigereranywa na 1, -1 cyangwa 0. Icyitonderwa: kugarura Nta na kimwe kuri arr idafite. Urugero: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Nta na kimwe """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,kin_Latn,python,"
def minPath(grid, k):
    """"""Urutonde rufite imirongo N n'inkingi N (N >= 2) kandi buri gakoresho k k'umurongo, buri gakoresho k'umurongo kirimo agaciro. Buri gakoresho k'umurongo [1, N * N] harimo bigaragara rimwe gusa kuri buri gakoresho k'umurongo. Ugomba gushaka inzira ntoya y'uburebure k muri grid. Urashobora gutangira kuri buri gakoresho, kandi muri buri ntambwe ushobora kwimukira kuri buri gakoresho k'urugo, mu yandi magambo, ushobora kujya kuri buri gakoresho k'urugo usangiye uruhande na wowe gakoresho k'ubu. Wibuke ko inzira y'uburebure k isobanura gusura k'agakoresho k'urugo (ntabwo ari ngombwa gutandukanya). NTABWO gusohoka mu rutonde. Inzira A (uburebure k) ifatwa ko ari ntoya kuruta inzira B (uburebure k) niba nyuma yo gukora urutonde rw'ibaruramarizo by'indangaga kuri buri gakoresho A na B (tuzitwa l_st na l_stA), l_stA ni ntoya mu buryo bw'ibaruramarizo, ni ntoya l_stB, mu yandi magambo, indangaga i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,kin_Latn,python,"
def tri(n):
    """"""Buri wese azi urutonde rwa Fibonacci, rwasuzumwe cyane n'abahanga mu mibare mu binyejana bibiri bishize. Ariko, icyo abantu batazi ni urutonde rwa Tribonacci. Urutonde rwa Tribonacci rusobanurwa n'isubirwamo: tri(1) = 3 tri(n) = 1 + n / 2, niba n ari imwe. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), niba n ari injiji. Urugero: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Uhawe umubare utari mubi, ugomba gusubiza urutonde rw'imibare ya mbere n + 1 y'urukurikirane rwa Tribonacci. Ingero: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,kin_Latn,python,"
def digits(n):
    """"""Ahawe umubare wuzuye w'inyongera n, subira igiteranyo cy'imibare idasanzwe. Subira 0 niba imibare yose ari imwe. Urugero: imibare ((1) == 1 imibare ((4) == 0 imibare ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,kin_Latn,python,"
def is_nested(string):
    '''Gushyiraho imikorere ifata umurongo nk'ibyinjira birimo ibifunga by'impande. Imikorere igomba kugarura Ukuri niba kandi gusa niba hari urukurikirane rwemewe rw'ibifunga aho byibuze igifunga kimwe mu rukurikirane rwashyizwe. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]]]]]]]]][[[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]]]]] â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,kin_Latn,python,"

def sum_squares(lst):
    """"""Urutonde rw'imibare. Ugomba gusubiza igiteranyo cy'imibare ya karindwi ku rutonde rwatanzwe, kuzenguruka buri kintu ku rutonde kuri int yo hejuru ((Ibisenge) mbere. Ingero: Kuri lst = [1,2,3] ibisubizo bikwiye kuba 14 Kuri lst = [1,4,9] ibisubizo bikwiye kuba 98 Kuri lst = [1,3,5,7] ibisubizo bikwiye kuba 84 Kuri lst = [1.4,4.2,0] ibisubizo bikwiye kuba 29 Kuri lst = [-2.4,1,1] ibisubizo bikwiye kuba 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,kin_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Gushyiraho imikorere igarura ukuri niba inyuguti yanyuma ya string yatanzwe ari inyuguti ya alfabeti kandi atari igice cyijambo, kandi Ibinyoma bitabaye ibyo. Icyitonderwa: ""ijambo"" ni itsinda ryinyuguti zitandukanyijwe n'ahantu. Ingero: check_if_last_char_is_a_letter (((""apple pie"") â -> Ibinyoma check_if_last_char_is_a_letter (((""apple pi e"") â -> Ibinyoma check_if_last_char_is_a_letter (((""apple pi e "") â -> Ibinyoma check_if_last_char_is_a_letter "" ((("") â -> Ibinyoma '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,kin_Latn,python,"
def can_arrange(arr):
    """"""Kora imikorere igarura indangagaciro nini ya element itari nini cyangwa ingana na element ihita ibanza. Niba nta kintu nkiki kibaho noneho ugarure -1. Urutonde rutanga ntiruzagira indangagaciro zikwiranye. Ingero: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,kin_Latn,python,"
def largest_smallest_integers(lst):
    '''Kora igikorwa kigarura tuple (a, b), aho 'a' ni nini ya integer zitari nziza, na 'b' ni ntoya ya integer nziza kurutonde. Niba nta ntare zitari nziza cyangwa nziza, uzisubize nka None. Ingero: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,kin_Latn,python,"
def compare_one(a, b):
    """"""Gushyiraho imikorere ifata imibare yose, iguruka, cyangwa imirongo ihagarariye imibare nyayo, kandi igarura igihinduka kinini muburyo bwacyo bw'ibipimo. Gusubiza Nta niba ibipimo bingana. Icyitonderwa: Niba umubare nyayo ugereranyijwe nkumurongo, igipimo kiguruka gishobora kuba . cyangwa , compare_one ((1, 2.5) â -> 2.5 compare_one ((1, ""2,3"") â -> ""2,3"" compare_one ((5,1"", ""6"") â -> ""6"" compare_one ((1"", 1) â -> Nta """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,kin_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Gusuzuma niba umubare n ushobora kwandikwa nkigiteranyo cyimibare 4 myiza y'umubare umwe. Urugero ni_ngereranyo_y'umubare_umwe (a) (a) (b) (c) (d) (e) (f) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g) (g)""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,kin_Latn,python,"
def special_factorial(n):
    """"""Impamyabumenyi ya Brezili isobanurwa nka: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! aho n > 0 Urugero: >>> special_factorial ((4) 288 Imirimo izahabwa integer nk'ibyinjira kandi igomba gusubiza factorial idasanzwe y'iyi integer. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,kin_Latn,python,"
def fix_spaces(text):
    """"""_ Urugero rwa-3 yumurongo, hindura ibibanza byose muri yo ukoresheje ibimenyetso byumwimerere, kandi niba umurongo ufite ibibanza birenga 2 bikurikirana, noneho usimbuze ibibanza byose bikurikirana na - fix_spaces ((""Urugero"") == ""Urugero"" fix_spaces ((""Urugero1"") == ""Urugero1"" fix_spaces (((""Urugero2"") == ""_Urugero_2"" fix_spaces ((""Urugero 3"") == ""_Urugero-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,kin_Latn,python,"
def file_name_check(file_name):
    """"""Kora igikorwa gifata umurongo uhagarariye izina rya dosiye, hanyuma ugarure 'Yego' niba izina rya dosiye ari ryiza, hanyuma ugarure 'Oya' bitabaye ibyo. Izina rya dosiye rifatwa nk'iryemewe niba kandi gusa niba ibisabwa byose byujuje ibi bikurikira: - Ntakwiye kuba harenze imibare itatu ('0'-'9') mu izina rya dosiye. - Izina rya dosiye ririmo akadomo kamwe '.' - Umuyoboro w'imbere y'akadomo ntugomba kuba ubusa, kandi utangira n'inyuguti ya alufabeti ya latin ('a'-'z' na 'A'Z'). - Umuyoboro w'imbere y'akadomo ugomba kuba umwe muri ibi bikurikira: ['txt', 'exe', 'lld'] Ingero: file_name_check""(urugero.txt. #"") => 'Yego' file_name_check""(urugero.lld1"") => 'Oya' (izina rya dosiye rigomba gutangira n'inyuguti ya alufabeti ya latin)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,kin_Latn,python,"


def sum_squares(lst):
    """""""" Iyi mikorere izafata urutonde rw'imibare yose. Ku byinjijwe byose kurutonde, imikorere izajya mu murenge w'umubare wose niba indangagaciro yayo ari inyuranye ya 3 kandi izajya mu kiciro cy'umubare wose niba indangagaciro yayo ari inyuranye ya 4 kandi atari inyuranye ya 3. Imikorere ntizahindura ibyinjijwe kurutonde bifite indangagaciro atari inyuranye ya 3 cyangwa 4. Imikorere noneho izahindura umubare w'ibyinjizwa byose. Ingero: Ku lst = [1,2,3] ibisubizo bigomba kuba 6 Ku lst = [] ibisubizo bigomba kuba 0 Ku lst = [-1,-5,2,-1,-5] ibisubizo bigomba kuba -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,kin_Latn,python,"
def words_in_sentence(sentence):
    """"""Uhabwa umurongo uhagarariye interuro, interuro irimo amagambo atandukanyijwe n'ahantu, kandi ugomba kugarura umurongo urimo amagambo yo mu interuro y'umwimerere, uburebure bwayo ni imibare ya mbere, urutonde rw'amagambo mu murongo mushya rugomba kuba rumwe n'uruhande rw'umwimerere. Urugero1: Input: interuro = ""Ibi ni ikizamini"" Ibisubizo: ""ni"" Urugero2: Input: interuro = ""reka tujye koga"" Ibisubizo: ""jya"" Ibihano: * 1 <= len(interuro) <= 100 * interuro irimo inyuguti gusa """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,kin_Latn,python,"
def simplify(x, n):
    """"""Igikorwa cyawe ni ugushyira mubikorwa imikorere izoroshya imvugo x * n. Imikorere igarura ukuri niba x * n igaragaza umubare wose kandi Ibinyoma bitabaye ibyo. X na n, ni imbonerahamwe y'uduce, kandi bafite imiterere ikurikira, <numerator> / <nominator> aho umubare na niminator ari imibare yose yinyongera. Urashobora gutekereza ko x, na n ari uduce twemewe, kandi nta cyo ufite nk'umubare. koroshya "" 1 / 5"", ""5 / 1"") = True koroshya "" 1/ 6"", ""2 / 1"") = Ibinyoma koroshya "" 7 / 10"", ""10 / 2"") = Ibinyoma """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,kin_Latn,python,"
def order_by_points(nums):
    """"""Andika imikorere itegura urutonde rwatanzwe rwa integers muburyo bugenda buzamuka ukurikije umubare wimibare yabo. Icyitonderwa: niba hari ibintu byinshi bifite umubare ungana wimibare yabo, utegure ukurikije indangagaciro zabo kurutonde rwumwimerere. Urugero: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,kin_Latn,python,"
def specialFilter(nums):
    """"""Andika imikorere ifata urutonde rwimibare nk'ibyinjira hanyuma igarure umubare w'ibintu mu rutonde birenze 10 kandi imibare yambere n'iya nyuma y'umubare ni igihombo (1, 3, 5, 7, 9). Urugero: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,kin_Latn,python,"
def get_max_triples(n):
    """"""Uhabwa umubare wuzuye w'inyongera n. Ugomba gukora urutonde rw'imibare yose a uburebure n. Kuri buri i (1 â‰¤ i â‰¤ n), agaciro ka a[i] = i * i - i + 1. Hindura umubare wa gatatu (a[i], a[j], a[k]) ya a aho i < j < k, na a[i] + a[j] + a[k] ni inshuro 3. Urugero: Input: n = 5 Umusaruro: 1 Ibisobanuro: a = [1, 3, 7, 13, 21] Igisobanuro kimwe rukumbi cyemewe ni gatatu (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,kin_Latn,python,"
def bf(planet1, planet2):
    '''Hariho imibumbe umunani mu rusobe rw'izuba: iryegereye cyane izuba ni Mercury, ikurikira ni Venus, hanyuma Isi, Mars, Jupiter, Saturn, Uranus, Neptune. Andika imikorere ifata amazina abiri y'imibumbe nk'imitwe y'imibumbe1 na planet2. Imikorere igomba gusubiza tuple irimo imibumbe yose ifite imiyoboro iri hagati y'umwimerere w'umubumbe1 n'umwimerere w'umubumbe2, iteguranyijwe n'ubugari bw'izuba. Imikorere igomba gusubiza tuple itariho niba umubumbe1 cyangwa umubumbe2 atari amazina y'imibumbe. Ingero bf ""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf (((""Isi"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Isi"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,kin_Latn,python,"
def sorted_list_sum(lst):
    """"""Andika imikorere yemera urutonde rw'imitwe nka parameter, ikuraho imitwe ifite uburebure budasanzwe, hanyuma igarura urutonde rwasohotse hamwe n'urwego rutondetse, Urutonde buri gihe ni urutonde rw'imitwe kandi ntabwo ari urutonde rw'imibare, kandi irashobora kuba ikubiyemo ibikubiyemo. Urutonde rwurutonde rugomba kuzamuka ukurikije uburebure bwa buri jambo, kandi ugomba kugarura urutonde rutondetse kuri iryo tegeko. Niba amagambo abiri afite uburebure bumwe, gutondekanya urutonde mu nyuguti. Imikorere igomba kugarura urutonde rwimitwe muburyo butondetse. Ushobora gutekereza ko amagambo yose azaba afite uburebure bumwe. Urugero: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,kin_Latn,python,"
def x_or_y(n, x, y):
    """"""Porogaramu yoroshye igomba gusubiza agaciro ka x niba n ari umubare wambere kandi igomba gusubiza agaciro ka y bitabaye ibyo. Ingero: kuri x_or_y ((7, 34, 12) == 34 kuri x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,kin_Latn,python,"
def double_the_difference(lst):
    '''Urutonde rw'imibare, ugarure umubare w'ibice bya nimero ziri ku rutonde zitari iz'ubwoko bumwe. Irengagize imibare itari iy'ubwoko bumwe. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Niba urutonde rw'ibyinjizwa rwuzuye, ugarure 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,kin_Latn,python,"
def compare(game,guess):
    """"""Ndatekereza ko twese twibuka ko kumva igihe umusaruro w'ikintu runaka cyateguwe igihe kirekire amaherezo bizwi. Ibyiyumvo n'ibitekerezo ufite muri ako kanya rwose birakwiye ko wandika no kugereranya. Igikorwa cyawe ni ukumenya niba umuntu yarabonye neza ibisubizo by'umubare w'imikino. Uhabwa urutonde rw'amanota abiri n'ibitekerezo by'uburebure bungana, aho buri kimenyetso kigaragaza umukino. Hindura urutonde rw'uburebure bungana rugaragaza uko buri gitekerezo cyari kure. Niba barabonye neza, agaciro ni 0, kandi niba atari ko, agaciro ni itandukaniro ry'ubushobozi hagati yo gufinda no gutsinda. urugero: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare ((([0,5,0,0,4],[4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,kin_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Uzahabwa izina ry'ikiciro (umurongo) n'urutonde rw'inyongera. Inyongera zigomba gukoreshwa kugirango zishyireho andi masomo ku cyiciro. Imbaraga z'inyongera ni uku gukurikira: Reka CAP ibe umubare w'inyuguti nini mu izina ry'inyongera, kandi reka SM ibe umubare w'inyuguti nto mu izina ry'inyongera, imbaraga zitangwa n'igice CAP - SM. Ugomba gushaka inyongera ikomeye kandi ugasubiza umurongo muri iyi miterere: ClassName.StrongestExtensionName. Niba hari inyongera ebyiri cyangwa nyinshi zifite imbaraga zimwe, ugomba guhitamo iyambere ku rutonde. Urugero, niba uhawe ""Slices"" nk'icyiciro n'urutonde rw'inyongera: ['SEviviNGliSCes', 'Cheese', 'StuFfed'] noneho ugomba gusubiza 'Slices.SEviNGliS'Ces' 'SviNGliS'Ces' mySviNGliS' is mySEviNGliS' is the strongest extension (Example: 'AA_Beats'), 'AA_class' ni inyongera ikomeye cyane.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,kin_Latn,python,"
def cycpattern_check(a , b):
    """"""Uhabwa amagambo 2. Ugomba gusubiza True niba ijambo rya kabiri cyangwa rimwe mu majyambere yaryo ari umuyoboro w'ijambo rya mbere cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,kin_Latn,python,"
def even_odd_count(num):
    """"""Bivuye ku mubare wose. gusubiza tuple ifite umubare w'imibare y'impamo n'ibitari iy'impamo. Urugero: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,kin_Latn,python,"
def int_to_mini_roman(number):
    """"""Ahawe umubare wuzuye w'inyongera, shaka umubare wacyo w'ikiromani ugereranywa n'umurongo, hanyuma ugisubize mu nyuguti ntoya. Ibipimo: 1 <= num <= 1000 Ingero: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,kin_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Gutanga uburebure bwimpande eshatu. Gusubiza Ukuri niba impande eshatu zigize mpandeshatu y'impande zombi, Ibinyoma bitabaye ibyo. Impandeshatu y'impande zombi ni mpandeshatu aho imwe mu mpande ari insanganyamatsiko cyangwa 90 degre. Urugero: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == Ibinyoma '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,kin_Latn,python,"
def find_max(words):
    """"""Andika imikorere yemera urutonde rwintambo. Urutonde rurimo amagambo atandukanye. Gusubiza ijambo rifite umubare ntarengwa winyuguti zidasanzwe. Niba intambo nyinshi zifite umubare ntarengwa winyuguti zidasanzwe, subiza iyambere muburyo bwa lexicographical.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,kin_Latn,python,"
def eat(number, need, remaining):
    """"""Uri imbeba ifite inzara, kandi umaze kurya umubare runaka wa karoti, ariko ubu ukeneye kurya karoti nyinshi kugirango urangize ifunguro ryumunsi. ugomba kugarura urusobe rwa [umubare wose wa karoti wariye nyuma yo kurya, umubare wa karoti wasigaye nyuma yo kurya ] niba nta karoti ihagije isigaye, uzarya karoti zose zisigaye, ariko uzakomeza kugira inzara. Urugero: * kurya(5, 6, 10) -> [11, 4] * kurya(4, 8, 9) -> [12, 1] * kurya(1, 10, 10) -> [11, 0] * kurya(2, 11, 5) -> [7, 0] Ibihinduka: @number: umubare wuzuye wa karoti wariye. @need: umubare wuzuye wa karoti ugomba kurya. @remaining:: umubare wuzuye wa karoti isigaye mububiko.""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,kin_Latn,python,"
def do_algebra(operator, operand):
    """"""Gutanga urutonde rw'ibikorwa bibiri, hamwe na operand. Urutonde rwa mbere rufite ibikorwa by'ibanze bya algebra, kandi urutonde rwa kabiri ni urutonde rw'imibare yose. Koresha urutonde rwatanzwe rw'ibikorwa bibiri kugirango wubake imvugo ya algebra hanyuma usubire igiciro cy'iri jambo. Ibikorwa by'ibanze bya algebra: Kongeramo ( +) Gukura ( -) Kwiyongera ( *) Kugabana hasi ( //) Kwegera ( ** Urugero): operator['+', '*', '-'] urutonde = [2, 3, 4, 5] ibisubizo = 2 + 3 * 4 - 5 => ibisubizo = 9 Icyitonderwa: Uburebure bwurutonde rwa operator bingana n'uburebure bwurutonde rwa operand minus imwe. Operand ni urutonde rw'imibare yose itari mibi. Operator ifite urutonde nibura rw'umukoresha umwe, kandi urutonde rwa operand rufite nibura operands ebyiri. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,kin_Latn,python,"
def solve(s):
    """"""Uhabwa umurongo s. niba s[i] ari inyuguti, hindura inyuguti zayo kuva hasi ujya hejuru cyangwa vice versa, bitabaye ibyo uzigumane uko biri. Niba umurongo udafite inyuguti, hindura umurongo. Imirimo igomba kugarura umurongo w'ibisubizo. Ingero gukemura ((""1234"") = ""4321"" gukemura ((""ab"") = ""AB"" gukemura ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,kin_Latn,python,"
def string_to_md5(text):
    """"""Iyo uhawe umurongo 'text', usubirayo umurongo wa md5 hash ihwanye. Niba 'text' ari umurongo udafite icyo usobanuye, usubirayo Nta. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,kin_Latn,python,"
def generate_integers(a, b):
    """"""Ahawe imibare ibiri myiza a na b, subiza imibare y'umubare hagati ya a na b, muburyo bw'inyongera. Urugero: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
