[
    {
        "task_id": "HumanEval/0",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"ලබා දී ඇති සංඛ් යා ලැයිස්තුවේ, ලබා දී ඇති සීමාවට වඩා එකිනෙකට සමීප සංඛ් යා දෙකක් තිබේදැයි පරීක්ෂා කරන්න. උදාහරණය: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) අසත් ය >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) සත් ය \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"මෙම ශ් රිතයට ආදානය වන්නේ බහු කණ්ඩායම් සහිත කුටි වල කුටි වල කුටි ය. ඔබේ ඉලක්කය වන්නේ එම කණ්ඩායම් වෙන වෙනම නූල් වලට වෙන් කිරීම සහ ඒවායේ ලැයිස්තුව නැවත ලබා දීමයි. වෙනම කණ්ඩායම් සමබරයි (සෑම විවෘත කුටියක්ම නිසි ලෙස වසා ඇත) සහ එකිනෙකා තුළ කුටිගත නොවේ. ආදාන නූලෙහි ඇති ඕනෑම අවකාශයක් නොසලකා හරින්න. උදාහරණය: >>> separate_paren_groups' ((()) (() (()))))))) ['() ', '(()) ', '(() ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"ධනාත්මක පාවෙන ලක්ෂ් ය සංඛ් යාවක් ලබා දී ඇති විට, එය පූර්ණ සංඛ් යා කොටසක් (දී ඇති සංඛ් යාවට වඩා විශාලතම පූර්ණ සංඛ් යාව කුඩා) සහ දශම සංඛ් යා (ඉතිරි කොටස සෑම විටම 1 ට වඩා කුඩා) ලෙස බිඳ දැමිය හැකිය. සංඛ් යාවේ දශම කොටස ආපසු ලබා දෙන්න. උදාහරණය: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"ඔබට බැංකු ගිණුමක තැන්පතු හා මුදල් ආපසු ගැනීමේ මෙහෙයුම් ලැයිස්තුවක් ලබා දී ඇත. එය ශුන් ය ශේෂයෙන් ආරම්භ වේ. ඔබේ කාර්යය වන්නේ ඕනෑම අවස්ථාවක ගිණුමේ ශේෂය ශුන් යයට වඩා අඩු නම් හඳුනා ගැනීමයි. එම අවස්ථාවෙහිදී ශ් රිතය සත් ය ලෙස ආපසු පැමිණිය යුතුය. එසේ නොමැතිනම් එය අසත් ය ලෙස ආපසු පැමිණිය යුතුය. උදාහරණය: >>> below_zero([1, 2, 3]) අසත් ය >>> below_zero([1, 2, -4, 5]) සත් ය \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ලබා දී ඇති ආදාන සංඛ් යා ලැයිස්තුවක් සඳහා, මෙම දත්ත කට්ටලයේ මධ් යම අගය වටා මධ් යම නිරපේක්ෂ අපගමනය ගණනය කරන්න. මධ් යම නිරපේක්ෂ අපගමනය යනු එක් එක් මූලද් රව් ය සහ මධ් යස්ථානයක් අතර සාමාන් ය නිරපේක්ෂ වෙනසයි (මෙම අවස්ථාවේදී මධ් යම අගය): MAD = සාමාන් ය  x - x_mean  උදාහරණය: >>> mean_absolute_deviation  [1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ආදාන ලැයිස්තුවේ සෑම අඛණ්ඩ අංග දෙකක් අතරම 'සීමා මායිමක්' ඇතුළත් කරන්න `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"මෙම ශ් රිතයට ආදානය වන්නේ අවකාශයන්ගෙන් වෙන් කර ඇති කුටීර සඳහා බහු කණ්ඩායම් නියෝජනය කරන නූලක් වේ. එක් එක් කණ්ඩායම සඳහා, කුටීරවල ගැඹුරුම මට්ටමේ කුටීරය ප් රතිදානය කරන්න. උදාහරණයක් ලෙස (() (()) උපරිම වශයෙන් කුටීර මට්ටම් දෙකක් ඇති අතර ((())) තුන් දෙනෙකු ඇත. >>> parse_nested_parens (('((()) ((())) () ((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"සබැඳි ලැයිස්තුවක් පෙරහන් කරන්න, ඒ සඳහා සබැඳි ලැයිස්තුවක් පෙරහන් කරන්න.\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"නිරපේක්ෂ සංඛ් යා ලැයිස්තුවක් සඳහා, ලැයිස්තුවක ඇති සියලුම නිරපේක්ෂ සංඛ් යා වල එකතුවක් සහ ඵලයක් සහිත ටියුපල් එකක් නැවත ලබා දෙන්න. හිස් එකතුව 0 ට සමාන විය යුතු අතර හිස් ඵලයක් 1 ට සමාන විය යුතුය. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ලබා දී ඇති සම්පූර්ණ සංඛ් යා ලැයිස්තුවකින්, අනුක් රමයේ දී ඇති මොහොත දක්වා සොයාගත් පෙරළෙන උපරිම මූලද් රව් ය ලැයිස්තුවක් ජනනය කරන්න. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"ලබා දී ඇති නූලකින් ආරම්භ වන කෙටිම පාලින්ඩ් රෝමය සොයා ගන්න. ඇල්ගොරිතම අදහස සරලයි: - ලබා දී ඇති නූලෙහි දිගම පශ්චාත් ප් රභවය පාලින්ඩ් රෝමය සොයා ගන්න. - පාලින්ඩ් රෝම ප් රාථමිකය පෙර එන නූල් පෙර පදයේ නූල් ප් රතිවිරුද්ධය නූල් අවසානයට එකතු කරන්න. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"ලබා දී ඇති නූල් ප් රතිසමයක්දැයි පරීක්ෂා කරන්න.\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ආදානය යනු 1 සහ 0 වලින් පමණක් සමන්විත a සහ b යන නූල් දෙකයි. මෙම ආදාන මත ද්විමය XOR සිදු කරන්න සහ ප් රති result ලය ද නූලක් ලෙස ලබා දෙන්න. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"string ලැයිස්තුවෙන් දිගම string එක ලබා දෙන්න. එකම දිගට string කිහිපයක් තිබුනොත් පළවෙනි එක ලබා දෙන්න. input list එක හිස් නම් None ලබා දෙන්න. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"a සහ b යන පූර්ණ සංඛ් යා දෙකක විශාලතම පොදු බෙදන්නා නැවත ලබා දෙන්න >>> විශාලතම_පොදු_බෙදන්නා (greatest_common_divisor) (3, 5) 1 >>> විශාලතම_පොදු_බෙදන්නා (greatest_common_divisor) (25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ආදාන නූලෙහි කෙටිම සිට දිගම දක්වා සියලුම පෙරනිමිති වල ලැයිස්තුවක් නැවත ලබා දෙන්න >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"0 සිට n දක්වා අංක සහිත අංක සහිත අංකයක් ලබා දෙන්න.\"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"string එකක් දීලා, ඒකෙ වෙන වෙනම අක්ෂර කීයක් තියෙනවද කියලා හොයාගන්න (case එක ගැන නොසලකා)\"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"මෙම ශ් රිතයට ආදානය වන්නේ සංගීත නෝට්ටු නියෝජනය කරන නූල් විශේෂ ASCII ආකෘතියකින්. ඔබේ කාර්යය වන්නේ බොහෝ වේගවලට අනුරූප වන පූර්ණ සංඛ් යා ලැයිස්තුවක් විශ්ලේෂණය කිරීමයි. මෙන්න පුරාවෘත්තයක්: 'o' සටහන, අවසාන වේග හතර 'o' කපා' - අර්ධ සටහන, අවසාන වේග දෙකක් 'o' - හතරේ සටහන, අවසාන වේගය එකකි >>> parse_music '. 'o' o .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"මුල් නූලෙහි දී ලබා දී ඇති උප නූල කී වතාවක් සොයාගත හැකිදැයි සොයා බලන්න. එකිනෙකට ආවරණය වන අවස්ථා ගණනය කරන්න. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ආදානය යනු '0' සිට '9' දක්වා අංක වලින් සමන්විත අවකාශය සීමා කරන ලද නූලක් වේ. වලංගු තේරීම් වන්නේ '0', '1', '2', '3', '4', '5', '6', '7', '8' සහ '9' ය. කුඩාම සිට විශාලතම දක්වා වර්ග කරන ලද අංක සහිත නූල නැවත ලබා දෙන්න >>> sort_numbers (('three one five') 'one three five' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ලබා දී ඇති අංක ලැයිස්තුවෙන් (අවම වශයෙන් දෙකක්) එකිනෙකට ආසන්නතම අංක දෙක තෝරාගෙන ඒවා පිළිවෙලට (කුඩා අංකය, විශාල අංකය) ලබා දෙන්න. >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"සංඛ් යා ලැයිස්තුවක් ලබා දී ඇති විට (අවම වශයෙන් මූලද් රව් ය දෙකක), එම ලැයිස්තුවට රේඛීය පරිවර්තනයක් යොදන්න, එනම් කුඩාම සංඛ් යාව 0 බවට පත් වන අතර විශාලතම 1 බවට පත් වේ >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"පෙරහන් කරන ලද ඕනෑම Python අගයන් ලැයිස්තුවක් පූර්ණ සංඛ් යා සඳහා පමණි >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"ලබා දී ඇති string එකක දිග >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"n නම් දී ඇති අංකයක් සඳහා, n ට වඩා අඩු විශාලතම අංකය සොයා ගන්න, n ට වඩා අඩු, >>> විශාලතම_බෙදුම්කරු ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ලබා දී ඇති පූර්ණ සංඛ් යාවක ප් රථම සාධක ලැයිස්තුව කුඩාම සිට විශාලතම දක්වා පිළිවෙලට ලබා දෙන්න. එක් එක් සාධක සාධකකරණයේ කොපමණ වාරයක් දක්නට ලැබේද යන්නට අනුරූපව ලැයිස්තුගත කළ යුතුය. ආදාන අංකය සියලු සාධකවල ගුණයට සමාන විය යුතුය >>> සාධකකරණය ((8) [2, 2, 2] >>> සාධකකරණය ((25) [5, 5] >>> සාධකකරණය ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"සම්පූර්ණ සංඛ් යා ලැයිස්තුවකින්, එක් වරකට වඩා ඇති සියලුම අංග ඉවත් කරන්න. ආදානයේ ඇති ආකාරයටම ඉතිරිව ඇති අංගවල අනුපිළිවෙල තබා ගන්න. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"යම් නූලක් සඳහා, කුඩා අකුරු ලොකු අකුරු බවට හරවන්න. >>> flip_case ((('Hello') 'HELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"තනි නූලකට නූල් ලැයිස්තුවක් එකතු කරන්න >>> concatenate (([]) '' >>> concatenate ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"පෙරනිමියෙන් පටන් ගන්නා string ලැයිස්තුවක් පෙරහන් කරන්න. >>> පෙරනිමියෙන් පෙරනිමියෙන් පෙරනිමියෙන්.\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"ලැයිස්තුවේ ඇති ධනාත්මක සංඛ් යා පමණක් නැවත ලබා දෙන්න. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ලබා දී ඇති අංකය ප් රයිම් නම් true නැවත ලබා දෙන්න, එසේ නොමැති නම් false. >>> is_prime (අංකය ප් රයිම්) 6 False >>> is_prime (අංකය ප් රයිම්) 101) True >>> is_prime (අංකය ප් රයිම්) 11 True >>> is_prime (අංකය ප් රයිම්) 13441) True >>> is_prime (අංකය ප් රයිම්) 61) True >>> is_prime (අංකය ප් රයිම්) 4) False >>> is_prime (අංකය ප් රයිම්) 1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs යනු බහුපදයක සංගුණක වේ. find_zero find x එවැනි poly ((x) = 0. find_zero නැවත ලබා දෙන්නේ බොහෝ ඒවා තිබුණත් ශුන් ය ලක්ෂ් යය පමණි. තවද, find_zero ලැයිස්තුවක් පමණක් ගනී xs සම සංඛ් යාවක් සහ විශාලතම ශුන් ය නොවන සංගුණකය සහිතව එය විසඳුමක් සහතික කරයි. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs හි xs සංගුණකය සහිත බහුපදයක් ගණනය කරයි. xs[0] + xs [1] * x + xs [1] * x ^ 2 + .... xs [n] * x ^ n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"මෙම ශ් රිතය ලැයිස්තුවක් l ගනී සහ ලැයිස්තුවක් l' නැවත ලබා දෙයි l' තුනෙන් බෙදිය නොහැකි දර්ශකවල l හා සමාන වන අතර, තුනෙන් බෙදිය හැකි දර්ශකවල එහි අගයන් l හි අනුරූප දර්ශකවල අගයන් හා සමාන වේ, නමුත් වර්ග කර ඇත. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ලැයිස්තුවක වර්ග කළ අද්විතීය අංගයන් නැවත ලබා දෙන්න >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"ලැයිස්තුවේ ඇති උපරිම මූලද් රව් යය නැවත ලබා දෙන්න. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"11 හෝ 13 න් බෙදිය හැකි n ට අඩු සම්පූර්ණ සංඛ් යා වල 7 අංකය දිස්වන වාර ගණන නැවත ලබා දෙන්න. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"මෙම ශ් රිතය ලැයිස්තුවක් l ගනී සහ ලැයිස්තුවක් l' නැවත ලබා දෙයි l' අමුතු දර්ශකවල l හා සමාන වන අතර, එහි අගයන් සම දර්ශකවල l හි සම දර්ශකවල අගයන් හා සමාන වේ, නමුත් වර්ග කර ඇත. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"ආදාන අංකය ලෙස ගනී encode_cyclic ශ් රිතය සමඟ කේතනය කර ඇත. විකේතනය කළ අංකය නැවත ලබා දෙයි.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"අක්ෂර 3 කින් යුත් චක් ර කණ්ඩායම් මගින් කේතනය කරන ලද නූල් නැවත ලබා දෙයි.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib නැවත n- වන අංකය ලබා දෙයි එය ෆිබොනාච්චි අංකයක් වන අතර එය ද ප් රථම අංකයකි. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero යනු පූර්ණ සංඛ් යා ලැයිස්තුවක් ආදානයක් ලෙස ගනී. එය ශුන් යයට එකතු වන වෙනම අංග තුනක් ලැයිස්තුවේ තිබේ නම් සත් ය නැවත ලබා දෙයි. එසේ නොමැති නම් අසත් ය. >>> triples_sum_to_zero([1, 3, 5, 0]) අසත් ය >>> triples_sum_to_zero[(1, 3, -2, 1]) සත් ය >>> triples_sum_to_zero([1, 2, 3, 7]) අසත් ය >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) සත් ය >>> triples_sum_to_zero[1]) අසත් ය \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"නිරපේක්ෂව කෙළින් වූ අනන්ත දිග රේඛාවක් ලෙසින් වූ මාර්ගයක් ගැන සිතන්න. n වාහන වමට දකුණට ධාවනය වේ. එකවරම, වෙනස් වාහන n ක් දකුණට වමට ධාවනය වේ. වාහන කට්ටල දෙක එකිනෙකට ඉතා දුරින් ආරම්භ වේ. සියලුම මෝටර් රථ එකම වේගයකින් ගමන් කරයි. වමට දකුණට ගමන් කරන මෝටර් රථයක් දකුණට වමට ගමන් කරන මෝටර් රථයකට පහර දෙන විට මෝටර් රථ දෙකක් ගැටෙන බව කියනු ලැබේ. කෙසේ වෙතත්, මෝටර් රථ අනන්තයෙන් ශක්තිමත් සහ ශක්තිමත් ය; එහි ප් රති they ලයක් ලෙස, ඔවුන් ගැටී නැති සේ ඔවුන්ගේ ගමන් පථාවෙහි දිගටම ගමන් කරයි. මෙම ශ් රිතය එවැනි ගැටීම් ගණන ප් රතිදානය කරයි. \"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"අංගයන් 1 කින් වැඩි කරන ලද ලැයිස්තුවක් නැවත ලබා දෙන්න. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero යනු පූර්ණ සංඛ් යා ලැයිස්තුවක් ආදානයක් ලෙස ගනී. එය ශුන් යයට එකතු වන ලැයිස්තුවේ වෙනස් අංග දෙකක් තිබේ නම් සත් ය නැවත ලබා දෙයි, එසේ නොමැති නම් අසත් ය. >>> pairs_sum_to_zero([1, 3, 5, 0]) අසත් ය >>> pairs_sum_to_zero[(1, 3, -2, 1]) අසත් ය >>> pairs_sum_to_zero([1, 2, 3, 7]) අසත් ය >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) සත් ය >>> pairs_sum_to_zero[1]) අසත් ය \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ආදාන අංකය x හි සංඛ් යාමය පදනම පදනම බවට වෙනස් කරන්න. පරිවර්තනයෙන් පසු නූල් නිරූපණය ආපසු ලබා දෙන්න. පදනම සංඛ් යා 10 ට වඩා අඩුය. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ත් රිකෝණයක පැත්තේ දිග සහ ඉහළ ප් රතිලාභ ප් රදේශය ලබා දී ඇත. >>> ත් රිකෝණය_ප් රදේශය\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 අංක අනුක් රමය ෆිබොනාච්චි අනුක් රමය හා සමාන අනුක් රමයකි. එය පහත පරිදි අර්ථ දක්වා ඇත: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 අංක අනුක් රමේ n වන අංගය කාර්යක්ෂමව ගණනය කිරීම සඳහා කරුණාකර ශ් රිතයක් ලියන්න. පුනරාවර්තනය භාවිතා නොකරන්න. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"ලැයිස්තුවේ මූලද් රව් යවල නැවත පැමිණීමේ මධ් යම අගය l. >>> මධ් යම අගය (([3, 1, 2, 4, 5]) 3 >>> මධ් යම අගය (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ලබා දී ඇති නූල පාලින්ඩෝමයක්ද යන්න පරීක්ෂා කරයි.\"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"නැවත 2^n modulo p (අංක ගැන අවධානයෙන් සිටින්න). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"encode_shift ක් රියාවලියට කේතනය කර ඇති string එකක් ආදානය කරනවා. decoded string එකක් ලබා දෙනවා.\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"අක්ෂර මාරු කිරීමෙන් කේතගත නූල නැවත ලබා දෙයි.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels යනු ස්වර නොමැතිව string එකක් ලබා දෙන ශ් රිතයකි. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"ලැයිස්තුවේ ඇති සියලුම අංක threshold t ට වඩා අඩු නම් True ලෙස ලබා දෙන්න. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"x සහ y අංක දෙක එකතු කරන්න. එකතු කරන්න... 2, 3, 5 එකතු කරන්න... 5, 7. 12\"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"වචන දෙකක එකම අක්ෂර තිබේදැයි පරීක්ෂා කරන්න. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') සත් ය >>> same_chars (('abcd', 'dddddddabc') සත් ය >>> same_chars (('dddddddabc', 'abcd') සත් ය >>> same_chars (('eabcd', 'dddddddddabc') අසත් ය >>> same_chars ((('abcd', 'dddddddabddce') අසත් ය >>> same_chars ((eabcdzzzz', 'dddzzzzzzdddabc') අසත් ය \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"නැවත n වන ෆිබොනාච්චි අංකය ලබා දෙන්න. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets යනු \"<\" සහ \">\" යන අකුරු මාලාවක්. සෑම විවෘත කිරීමේ වරහනකටම අනුරූප වසා දැමීමේ වරහනක් තිබේ නම් true ලෙස නැවත ලබා දෙන්න. >>> correct_bracketing ((\"<\") False >>> correct_bracketing ((\"<>\") True >>> correct_bracketing ((\"<><>>\") True >>> correct_bracketing ((\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"True නැවත ලබා දෙන්නේ නම් ලැයිස්තුවේ අංගයන් ඒකාකාරී ලෙස වැඩි වීම හෝ අඩු වීම. >>> ඒකාකාරී (([1, 2, 4, 20]) True >>> ඒකාකාරී (([1, 20, 4, 10]) False >>> ඒකාකාරී (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"ලැයිස්තු දෙකක් සඳහා වර්ග කළ අද්විතීය පොදු අංගයන් නැවත ලබා දෙන්න. >>> පොදු (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> පොදු (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n හි විශාලතම ප් රථම සාධකය නැවත ලබා දෙන්න. n > 1 යැයි උපකල්පනය කර ප් රථම අංකයක් නොවේ. >>> විශාලතම_ප් රථම_සාධකය ((13195) 29 >>> විශාලතම_ප් රථම_සාධකය ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n යනු 1 සිට n දක්වා අංක එකතු කරන ශ් රිතයකි. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets යනු \"(\" සහ \"\") යන අකුරු මාලාවක්. සෑම විවෘත කිරීමේ වරක් සඳහාම අනුරූප වසා දැමීමේ වරක් තිබේ නම් එය සත් ය වේ. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs යනු බහුපදයක සංගුණකයන් වේ. xs[0] + xs[1] * x + xs[2] * x^2 + .... මෙම බහුපදයේ ව් යුත්පන්නය එකම ආකාරයෙන් ලබා දෙන්න. >>> ව් යුත්පන්නය (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ව් යුත්පන්නය ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib අංක අනුක් රමය ෆිබොනාච්චි අනුක් රමය හා සමාන අනුක් රමයකි. එය පහත පරිදි අර්ථ දක්වා ඇත: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). කරුණාකර fibfib අංක අනුක් රමේ n වන අංගය කාර්යක්ෂමව ගණනය කිරීම සඳහා ශ් රිතයක් ලියන්න. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"අක්ෂර අංකය ලෙස වචනයක් නියෝජනය කරන නූලක් ගෙන එම නූලෙහි ඇති අක්ෂර ගණන නැවත ලබා දෙන function vowels_count එකක් ලියන්න. මෙහි ඇති 'a', 'e', 'i', 'o', 'u' යන අක්ෂරවල ඇති අක්ෂර වේ. මෙහි 'y' ද අක්ෂරයක් වන නමුත් එය ලබා දී ඇති වචනයේ අවසානයේ ඇති විට පමණි. උදාහරණය: >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"තව පරීක්ෂණ අවස්ථා එකතු කරන්න.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"චක් රය හරහා x හි ඉලක්කම් මාරු කරන්න, ඉලක්කම් මාරු කිරීමෙන් දකුණට මාරු කරන්න සහ ප් රති result ලය නූලක් ලෙස ලබා දෙන්න. shift > ඉලක්කම් ගණන නම්, ඉලක්කම් ආපසු හරවන්න. >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"කාර්යය ශ් රිතයක් ලියන්න එය ආදානය ලෙස නූලක් ගෙන ඉහළ අක්ෂරවල එකතුව පමණක් ASCII කේතයන් ලෙස ලබා දෙයි. උදාහරණ: digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"මෙම කාර්යය තුළ, ඔබ පළතුරු කූඩයක් තුළ බෙදා හරින ඇපල් සහ තැඹිලි සංඛ්යාවක් නියෝජනය කරන නූලක් ලබා දෙනු ඇත මෙම කූඩය ඇපල්, තැඹිලි සහ මැංගුස් පළතුරු අඩංගු වේ. තැඹිලි සහ ඇපල් මුළු සංඛ්යාව නියෝජනය කරන නූල සහ කූඩයේ පළතුරු මුළු සංඛ්යාව නියෝජනය කරන පූර්ණ සංඛ්යාවක් ලබා දී ඇති කූඩයේ ඇති මැංගුස් පළතුරු සංඛ්යාව නැවත ලබා දෙන්න. උදාහරණයක් ලෙස: fruit_distribution\"5(ඇපල් සහ තැඹිලි 6\", 19) ->19 - 5 - 6 = 8 fruit_distribution\"0 ඇපල් සහ 1 තැඹිලි\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 ඇපල් සහ 3 තැඹි\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 ඇපල් සහ 120) \",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"අ ණ නොවන පූර්ණ සංඛ් යා නෝඩ් ඇති ගසක ශාඛාවක් නියෝජනය කරන අරාව ලබා දී ඇති විට ඔබේ කාර්යය වන්නේ නෝඩ් වලින් එකක් උදුරාගෙන එය ආපසු ලබා දීමයි. උදුරාගත් නෝඩ් කුඩාම සම අගය සහිත නෝඩ් විය යුතුය. එකම කුඩාම සම අගය සහිත නෝඩ් කිහිපයක් සොයා ගන්නේ නම් කුඩාම දර්ශකය සහිත නෝඩ් නැවත ලබා දෙන්න. උදුරාගත් නෝඩ් ලැයිස්තුවක ආපසු ලබා දිය යුතුය, [smallest_value, එහි දර්ශකය ], සම අගයන් නොමැති නම් හෝ ලබා දී ඇති අරාව හිස් නම්, ආපසු []. උදාහරණය: 1: ආදානය: [4,2,3] ප් රතිදානය: [2, 1] පැහැදිලි කිරීම: 2 කුඩාම සම අගය සහ 2 කුඩාම දර්ශකය ඇත. උදාහරණය 2: ආදානය: [1,2,3] ප් රතිදානය: [2, 1] පැහැදිලි කිරීම: 2 කුඩාම අගය සහ 2 කුඩාම සම දර්ශකය ඇත. උදාහරණය 3: ආදානය: [] ප් රතිදානය: [4:] ආදානය: [5, 3, 4, [0, 2] ප් රතිදානය: 1 කුඩාම නෝඩ්: 0 ශ් රේඛය: කුඩාම අගය සහිත නෝඩ්, නමුත් කුඩාම දර්ශකය ඇත. උදාහරණය: 1 * 0 = ශුන්, නමුත් පළමු නෝඩ් දෙකම අගය ශුන්ද් ර් ර් රයි.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''ඔබට ධනාත්මක පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත. ශුන් යයට වඩා විශාල වන විශාලතම පූර්ණ සංඛ් යාව නැවත ලබා දෙන්න. පූර්ණ සංඛ් යාවක සංඛ් යාතය එය ලැයිස්තුවේ දිස්වන වාර ගණනට වඩා වැඩි හෝ සමාන වේ. එවැනි අගයක් නොමැති නම්, ආපසු -1. උදාහරණ: සෙවීම ([4, 1, 2, 2, 3, 1]) == 2 සෙවීම ([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 සෙවීම ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී, අමුතු පිළිවෙලට ලැයිස්තුව නැවත ලබා දෙන්න. අමුතු වර්ග කිරීම, ඔබ අවම අගය සමඟ ආරම්භ කරන විට, පසුව ඉතිරි පූර්ණ සංඛ් යා උපරිම, පසුව අවම සහ යනාදිය. උදාහරණ: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ත් රිකෝණයක පැති තුනක දිග ලබා දී ඇත. ත් රිකෝණයක පැති තුන වලංගු ත් රිකෝණයක් නම් දශම අංක 2 දක්වා වට කර ත් රිකෝණයේ ප් රදේශය ආපසු ලබා දෙන්න. එසේ නොමැති නම් -1 ත් රිකෝණයක පැති තුනක් වලංගු ත් රිකෝණයක් බවට පත් කරයි. ඕනෑම පැති දෙකක එකතුව තෙවන පැත්තේ වඩා වැඩි නම්. උදාහරණය: ත් රිකෝණය_ප් රදේශය ((3, 4, 5) == 6.00 ත් රිකෝණය_ප් රදේශය ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''Q වස්තුව පියාසර කරන්නේ නම් True ලෙසත්, එසේ නොමැති නම් False ලෙසත් ලබා දෙන ශ් රිතයක් ලියන්න. q වස්තුව පියාසර කරන්නේ නම් එය සමබර නම් (එය පැලින්ඩ් රෝමික් ලැයිස්තුවකි) සහ එහි මූලද් රව් යවල එකතුව උපරිම හැකි බරට වඩා අඩු හෝ සමාන නම් w. උදාහරණය: will_it_fly (([1, 2], 5) â -> False # 1+2 උපරිම හැකි බරට වඩා අඩු නමුත් එය අසමබරයි. will_it_fly (([3, 2, 3], 1) â -> False # එය සමබර නමුත් 3+2+3 උපරිම හැකි බරට වඩා වැඩි වේ. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 උපරිම හැකි බරට වඩා අඩු වන අතර එය සමබර වේ. will_it_fly ((([3], â 5) -> True # 3 උපරිම හැකි බරට වඩා අඩු වන අතර එය සමබර වේ.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"අරා වල අංක ගණන අනුව, අරා පාලින්ඩ් රෝමික් බවට පත් කිරීම සඳහා වෙනස් කළ යුතු අවම මූලද් රව් ය ගණන සොයා ගන්න. පාලින්ඩ් රෝමික් අරා යනු එකම ආකාරයෙන් පිටුපසට සහ ඉදිරියට කියවන අරා වේ. එක් වෙනස් කිරීමකින් ඔබට එක් මූලද් රව් යයක් වෙනත් ඕනෑම මූලද් රව් යයක් බවට වෙනස් කළ හැකිය. උදාහරණයක් ලෙස: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''ලැයිස්තු දෙකේ ලැයිස්තු දෙක පිළිගන්නා ක් රියාකාරකමක් ලියන්න ලැයිස්තුවේ සියලුම ලැයිස්තු වල අක්ෂර සංඛ් යාව අනෙක් ලැයිස්තුවට වඩා අඩු ලැයිස්තුව නැවත ලබා දෙන්න. ලැයිස්තු දෙකේ අක්ෂර සංඛ් යාව සමාන නම්, පළමු ලැයිස්තුව නැවත ලබා දෙන්න. උදාහරණ total_match (([], []) -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi']) -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"ලබා දී ඇති අංකය ප් රාථමික සංඛ් යා 3 ක ගුණ කිරීම නම් සත් ය ලෙස සහ වෙනත් ආකාරයකින් අසත් ය ලෙස ප් රතිදානය කරන ශ් රිතයක් ලියන්න. (a) 100 ට වඩා අඩු බව දැන ගැනීම. උදාහරණය: is_multiply_prime(30) == සත් ය 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ඔබේ කාර්යය වන්නේ x යනු n හි සරල බලයක් නම් true ලෙසත් අනෙක් අවස්ථාවලදී false ලෙසත් ලබා දෙන ශ් රිතයක් ලිවීමයි. x යනු n හි සරල බලයකි නම් n**int=x උදාහරණයක් ලෙස: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''a යනු පූර්ණ සංඛ් යාවක් වන අතර එය True ලෙස ලබා දෙයි. මෙය යම් පූර්ණ සංඛ් යාවක් වන cube නම්. සටහන: ඔබ උපකල්පනය කළ හැකිය ආදානය සැමවිටම වලංගු වේ. උදාහරණ: iscube (a) ==> True (b) ==> False (c) ==-1) ==> True (d) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> False (e) ==> False (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) ==> True (e) === True (e) === True (e) === True (e) === True (e) === True (e)'''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"ඔබට හෙක්සඩෙසීමල් අංකයක් ලෙස අරා ලෙස ලබා ගන්නා සහ ප් රයිම් අංක වන හෙක්සඩෙසීමල් ඉලක්කම් ගණන ගණනය කරන ශ් රිතයක් ලිවීමට පැවරී ඇත (ප් රයිම් අංකය, හෝ ප් රයිම් යනු කුඩා ස්වාභාවික සංඛ් යා දෙකක නිෂ්පාදනයක් නොවන 1 ට වඩා වැඩි ස්වාභාවික සංඛ් යාවකි). හෙක්සඩෙසීමල් ඉලක්කම් වන්නේ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ප් රයිම් අංක 2, 3, 5, 7, 11, 13, 17,... එබැවින් ඔබට පහත සඳහන් ඉලක්කම් වලින් සංඛ් යාවක් තීරණය කිරීමට සිදුවේ: 2, 3, 5, 7, B (= දශම 11), D (= දශම 13). සටහන: ඔබ උපකල්පනය කළ හැකිය ආදානය සෑම විටම නිවැරදි හෝ හිස් ය, සහ සංකේත A,B,C,D,E,F සෑම විටම විශාල අකුරු සහිත අරා වේ. උදාහරණ: \"අංකය\" සඳහා ප් රතිදානය num = 1. \"අංකය\" සඳහා ප් රතිදානය num = 1. \"අංකය\" සඳහා ප් රතිදානය num = 1. \"අංකය\" සඳහා ප් රතිදානය num = 1.\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"ඔබට දශම සංඛ් යා ආකෘතියේ සංඛ් යාවක් ලබා දෙනු ඇත. ඔබේ කාර්යය එය ද්විමය ආකෘතියට පරිවර්තනය කිරීමයි. ශ් රිතය ද්විමය සංඛ් යාවක් නියෝජනය කරන සෑම අක්ෂරයක්ම සහිත නූලක් ආපසු ලබා දිය යුතුය. නූලෙහි සෑම අක්ෂරයක්ම '0' හෝ '1' වනු ඇත. නූල ආරම්භයේ සහ අවසානයේ 'db' අක්ෂර කිහිපයක් අමතර වනු ඇත. ආකෘතියට උදව් කිරීම සඳහා අමතර අක්ෂර තිබේ. උදාහරණ: decimal_to_binary(15) # \"db1111db\" දශම_to_binary32) # \"db100000db\" ලබා දෙයි\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"ඔබට string s එකක් ලබා දී ඇත. ඔබේ කාර්යය වන්නේ string එක happy ද නැද්ද යන්න පරීක්ෂා කිරීමයි. string එක happy වන්නේ එහි දිග අවම වශයෙන් 3 ක් සහ සෑම අකුරු 3 ක්ම එකිනෙකට වෙනස් නම් උදාහරණයක් ලෙස: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (e) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"මේ සිමාස් එක අවසාන සතියේ ගුරුවරයා ශිෂ් යයන්ගේ ලකුණු ලබාදිය යුතුයි. ගුරුවරයා තමන්ගේම ඇල්ගොරිතමයක් හදලා තියෙනවා. එකම ප් රශ්නය තමයි, ඇයට ලකුණු ලබාදීමට භාවිතා කළ කේතය නැති වෙලා. ඇය ඔබට සමහර ශිෂ් යයන්ගේ GPA ලැයිස්තුවක් ලබා දීලා තියෙනවා. ඔබට පහත වගුව භාවිතා කරමින් අකුරු ලකුණු ලැයිස්තුවක් ලබාදිය හැකි ශ් රිතයක් ලිවිය යුතුයි. GPA: අකුරු ලකුණු 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"string එකක් අරගෙන True එකක් ලබා දෙන function එකක් ලියන්න. string එක ප් රයිම් නම් True හෝ False නම් False. උදාහරණ prime_length (අ) == true prime_length (abcdcba) == true prime_length (kittens) == true prime_length (orange) == false \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී, 1 න් ආරම්භ වන හෝ අවසන් වන n-ඉලක්කම් ධනාත්මක පූර්ණ සංඛ් යා ගණන නැවත ලබා දෙන්න.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"ධනාත්මක පූර්ණ සංඛ් යාවක් N ලබා දී ඇති විට, එහි ඉලක්කම්වල මුළු එකතුව ද්විමය අකුරින් ලබා දෙන්න. උදාහරණය N = 1000 සඳහා, ඉලක්කම්වල එකතුව 1 වනු ඇත, ප් රතිදානය \"1\" විය යුතුය. N = 150 සඳහා, ඉලක්කම්වල එකතුව 6 වනු ඇත, ප් රතිදානය \"110\" විය යුතුය. N = 147 සඳහා, ඉලක්කම්වල එකතුව 12 වනු ඇත, ප් රතිදානය \"1100\" විය යුතුය. විචල් යයන්: @N පූර්ණ සංඛ් යාව සීමාවන්: 0 â‰¤ N â‰¤ 10000. ප් රතිදානය: ද්විමය සංඛ් යා පෙළක් \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"හිස් නොවන පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇති විට, lst. අමුතු දර්ශකවල ඇති සම අංග එකතු කරන්න. උදාහරණ: add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"string එකක් අරගෙන ඒකේ ordered version එකක් දෙන function එකක් ලියන්න. ordered version of string, කියන්නේ string එකක්. ඒකේ තියෙන වචන (අයිස් වලින් වෙන් කරලා) වෙනුවට අලුත් word එකක් දාලා, ascii value එක මත පදනම් වෙලා අකුරු ටික ascending order එකකට දාලා. Note: ඔයා වාක් යයේ තියෙන වචන සහ blank spaces වල order එක තියාගන්න ඕන. උදාහරණයක් විදියට: anti_shuffle ((('Hi') return 'Hi' anti_shuffle ((('hello') return 'ehllo' anti_shuffle (('Hello World!!!') return 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"ඔබට 2 මාන දත්ත ලබා දී ඇත, නයිට් ලැයිස්තු ලෙස, එය න් යාසයට සමාන ය, කෙසේ වෙතත්, න් යාස මෙන් නොව, සෑම පේළියකටම වෙනස් තීරු ගණනක් අඩංගු විය හැකිය. lst, සහ පූර්ණ සංඛ් යාව x ලබා දී ඇති විට, ලැයිස්තුවේ x පූර්ණ සංඛ් යාව සොයා ගන්න, සහ ත් රිත්ව ලැයිස්තුවේ ලැයිස්තුව, [(x1, y1), (x2, y2) ...] සෑම ටප්ලයක්ම ඛණ්ඩාංකයක් වන පරිදි - (පේළිය, තීරු), 0 සිට ආරම්භ වේ. ආරම්භයේ දී පේළි අනුව ඛණ්ඩාංක වර්ග කරන්න. තවද, තීරු වල ඛණ්ඩාංක බැස යන අනුපිළිවෙලින් වර්ග කරන්න. උදාහරණ: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_0, 1, [1, 1] == [_ 1], ===[[පේළිය 1, 2, 3]], === 2]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ණ නොවන පූර්ණ සංඛ් යා සමූහයක් ලබා දී ඇති විට, එම සමූහයේ පිටපතක් නැවත ලබා දෙන්න, ඔබ එම සමූහය වර්ධනාත්මකව වර්ග කරයි, එම සමූහය අමුතු නම්, හෝ එය පහළට වර්ග කරයි. උදාහරණ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"අක්ෂර මාලාවක් ආගමනයක් ලෙස ගෙන අක්ෂර මාලාවක් එළිදක්වන ක් රියාකාරකමක් encrypt සාදන්න. අක්ෂර මාලාව භ් රමණය වන ආකාරයට අක්ෂර මාලාව පහළට දෙගුණ කිරීමෙන් ස්ථාන දෙකකට මාරු වන ආකාරයට භ් රමණය විය යුතුය. උදාහරණයක් ලෙස: encrypt (('hi') 'lm' encrypt (('asdfghjkl') 'ewhjklnop' encrypt (('gf') 'kj' encrypt (('et') 'ix' ලබා දෙයි.\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"ඔබට පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත. ලැයිස්තුවේ 2 වන කුඩාම අංගය ලබා දෙන next_smallest () ශ් රිතයක් ලියන්න. එවැනි අංගයක් නොමැති නම් None නැවත ලබා දෙන්න. next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == None next_smallest () [1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"ඔබට වචන පෙළක් ලබා දෙනු ඇත, ඔබේ කාර්යය වන්නේ කම්මැලි සංඛ් යාව ගණන් කිරීමයි. කම්මැලි යනු \"I\" යන වචනයෙන් ආරම්භ වන වාක් යයක් වේ. වාක් ය '.', '?' හෝ '! ' මගින් සීමා කරනු ලැබේ. උදාහරණයක් ලෙස: >>> is_bored ((\"හෙලෝ වර්ල්ඩ්\") 0 >>> is_bored ((\"අහස නිල් ය. හිරු බැබළෙයි. මම මේ කාලගුණයට කැමතියි\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''අංක 3 ක් ගන්නා ක් රියාකාරකමක් සාදන්න. අංක වලින් එකක් අනෙක් දෙකේ එකතුවට සමාන නම් එය සත් ය වේ, සහ සියලුම අංක පූර්ණ සංඛ් යා වේ. වෙනත් ඕනෑම අවස්ථාවක අසත් ය වේ. උදාහරණ any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"පණිවිඩයක් ලබා ගන්නා ක් රියාකාරකමක් ලියන්න, සහ එය කේතනය කරන ආකාරයට එය සියලු අකුරු වල කේස් එක මාරු කරයි, පණිවිඩයේ ඇති සියලුම ස්වරයන් ඉංග් රීසි අක්ෂර මාලාවේ එම ස්වරයට ස්ථාන 2 ක් ඉදිරියෙන් ඇති අකුර සමඟ ප් රතිස්ථාපනය කරයි. අකුරු පමණක් උපකල්පනය කරන්න. උදාහරණ: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"ඔබට පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත. ඔබට විශාලතම ප් රයිම් අගය සොයා ගැනීමට අවශ් ය වන අතර එහි ඉලක්කම්වල එකතුව නැවත ලබා දෙන්න. උදාහරණ: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] සඳහා ප් රතිදානය 10 විය යුතුය lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] සඳහා ප් රතිදානය 25 විය යුතුය lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] සඳහා ප් රතිදානය 13 විය යුතුය lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] සඳහා ප් රතිදානය 11 විය යුතුය lst = [0,81,12,31,21] සඳහා ප් රතිදානය 3 විය යුතුය lst = [0,1,8,1,2,1,7] සඳහා ප් රතිදානය 7 විය යුතුය \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ශබ්දකෝෂයක් ලබා දී ඇති විට, සියලුම යතුරු කුඩා අකුරු සහිත හෝ සියලුම යතුරු විශාල අකුරු සහිත නම් සත් ය නැවත ලබා දෙන්න, එසේ නොමැතිනම් අසත් ය නැවත ලබා දෙන්න. ක් රියාකාරකය අසත් ය නැවත ලබා දිය යුතුය. ලබා දී ඇති ශබ්දකෝෂය හිස් නම්. උදාහරණ: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) සත් ය නැවත ලබා දිය යුතුය. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) අසත් ය නැවත ලබා දිය යුතුය. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) අසත් ය නැවත ලබා දිය යුතුය. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) අසත් ය නැවත ලබා දිය යුතුය. check_dict_case{\"NC:\"STATE\", \"Z\":\"IP\":\"45\") සත් ය නැවත ලබා දිය යුතුය.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ණ නොවන පූර්ණ සංඛ් යාවක් ගෙන n ට වඩා කුඩා ප් රාථමික සංඛ් යා වන පළමු පූර්ණ සංඛ් යා වල අරාවක් ලබා දෙන ශ් රිතයක් ක් රියාත්මක කරන්න. උදාහරණයක් ලෙස: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"අංක දෙකක ඝනත්වය ගණනය කර ඝනක අංක දෙකක ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක අංකය ගණනය කර ඝනක ඝනක අංකය ගණනය කර ඝනක ඝනක ඝනක ඝනක ඝනක ඝනක ඝනක\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"S නූලක් ලබා දී ඇති විට, සමාන දර්ශකවල ඇති විශාල ස්වර ගණන ගණනය කරන්න. උදාහරණයක් ලෙස: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''අංකයක් නියෝජනය කරන අගයක් (string) ලබාගෙන එයට ආසන්නතම පූර්ණ සංඛ් යාව ලබා දෙන ශ් රිතයක් සාදන්න. සංඛ් යාව පූර්ණ සංඛ් යා දෙකකින් සමාන දුරක් නම්, එය ශුන් යයෙන් ඉවතට වට කරන්න. උදාහරණ >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 සටහන: ශුන් යයෙන් ඉවතට වට කිරීම යන්නෙන් අදහස් කරන්නේ ලබා දී ඇති සංඛ් යාව පූර්ණ සංඛ් යා දෙකකින් සමාන දුරක් නම්, ඔබ ආපසු ලබා දිය යුතු අගය ශුන් යයෙන් දුරම අගය බවයි. උදාහරණයක් ලෙස closest_integer \" ((14.5\") 15 සහ closest_integer \" ((-14.5\") ආපසු ලබා දිය යුතුය -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇති විට, ඔබට ගල් මට්ටම් n කින් යුත් ගොඩක් සෑදිය යුතුය. පළමු මට්ටමේ ගල් n ක් ඇත. ඊළඟ මට්ටමේ ගල් ගණන: - ඊළඟ අමුතු අංකය n අමුතු නම්. - ඊළඟ සජීව අංකය n සජීව නම්. ලැයිස්තුවක එක් එක් මට්ටමේ ගල් ගණන ආපසු ලබා දෙන්න, එහිදී දර්ශකයේ i හි මූලද් රව් යය මට්ටමේ ගල් ගණන නියෝජනය කරයි (i+1). උදාහරණ: >>> make_a_pile (n) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"ඔබට කොමා හෝ අවකාශයන් මගින් වෙන් කරන ලද වචන මාලාවක් ලබා දෙනු ඇත. ඔබේ කාර්යය වන්නේ වචන මාලාව වචන වලට බෙදා වචන මාලාවක් ආපසු ලබා දීමයි. උදාහරණයක් ලෙස: words_string ((\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"මෙම ශ් රිතය ධනාත්මක සංඛ් යා x සහ y දෙකක් ගෙන [x, y] පරාසයේ ඇති විශාලතම සම පූර්ණ සංඛ් යාව ලබා දෙයි. එවැනි සංඛ් යාවක් නොමැති නම්, ශ් රිතය -1 ආපසු ලබා දිය යුතුය. උදාහරණයක් ලෙස: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"ඔබට ධනාත්මක පූර්ණ සංඛ් යා n සහ m ලබා දී ඇති අතර ඔබේ කාර්යය වන්නේ n සිට m දක්වා (n සහ m ඇතුළුව) පූර්ණ සංඛ් යා වල සාමාන් යය ගණනය කිරීමයි. පිළිතුර ආසන්නතම පූර්ණ සංඛ් යාවට වට කර එය ද්විමය බවට පරිවර්තනය කරන්න. n ට වඩා වැඩි නම්, ආපසු -1. උදාහරණය: rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"ධනාත්මක පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත x. සංඛ් යා අංකයක් නොමැති සියලුම මූලද් රව් යයන්ගෙන් වර්ග කළ ලැයිස්තුවක් ආපසු ලබා දෙන්න. සටහන: ආපසු ලබා දුන් ලැයිස්තුව වැඩිවන අනුපිළිවෙලකට වර්ග කළ යුතුය. උදාහරණයක් ලෙස: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"පූර්ණ සංඛ් යා අරාවක දී, 1 සහ 9 අතර ඇති පූර්ණ සංඛ් යා වර්ග කරන්න, ප් රතිඵල අරාව ආපසු හරවන්න, ඉන්පසු සෑම ඉලක්කම් අංකයක්ම එහි අනුරූප නමින් \"එක\", \"දෙක\", \"තුන\", \"හතර\", \"පහ\", \"හය\", \"හත\", \"අට\", \"නව\" සිට ආදේශ කරන්න. උදාහරණයක් ලෙස: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> වර්ග කරන්න arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ආපසු arr -> [8, 5, 4, 3, 2, 2, 1, 1] ආපසු යන්න [\"අට\", \"පහ\", \"තුන\", \"දෙක\", \"දෙක\", \"එක\", \"එක\"] අරාව හිස් නම්, අංකයක් ආපසු හරවන්න: arr = [] return [] අරාවෙහි අමුතු අංකයක් තිබේ නම් එය නොසලකා හරින්න: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [51] - 'One' return 1 ].\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"n අගය ලෙස ගන්නා f ශ් රිතය ක් රියාත්මක කරන්න, සහ n ප් රමාණයේ ලැයිස්තුවක් ලබා දෙයි, i දර්ශකයේ ඇති මූලද් රව් යයේ අගය i හි සාධකය වේ i නම් i සජීවී නම් හෝ 1 සිට i දක්වා සංඛ් යා එකතුවක් නම්. i 1 සිට ආරම්භ වේ. i හි සාධකය 1 සිට i දක්වා සංඛ් යා ගුණ කිරීමයි (1 * 2 * ... * i). උදාහරණය: f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇති විට, සීමාව තුළට වැටෙන සම සහ අමු පූර්ණ සංඛ් යා පාලින්ඩ් රෝම් ගණනක් ඇති ටියුපලයක් ආපසු ලබා දෙන්න. උදාහරණය1: ආදානය: 3 ප් රතිදානය: (1, 2) පැහැදිලි කිරීම: සම පූර්ණ සංඛ් යා පාලින්ඩ් රෝම් 1, 2, 3. ඒවායින් එකක් සම සහ දෙකක් අමු වේ. උදාහරණය 2: ආදානය: 12 ප් රතිදානය: (4, 6) පැහැදිලි කිරීම: සම පූර්ණ සංඛ් යා පාලින්ඩ් රෝම් 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ඒවායින් හතරක් සම සහ 6 අමු වේ. සටහන: 1. 1 <= n <= 10^3 2. ටියුපලය පිළිවෙලින් සම සහ අමු පූර්ණ සංඛ් යා පාලින්ඩ් රෝම් ගණන ලබා දී ඇත. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"අංකයක් ණ නම්, එහි පළමු අත්සන් කළ අංකය ණ වේ: උදාහරණයක් ලෙස -123 හි අත්සන් කළ අංක -1, 2, සහ 3 වේ. >>> count_nums (([]) == 0 >>> count_nums ([-1, 11, -11]) == 1 >>> count_nums ([(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"අපි 'arr' අරා එකක් තියෙනවා N පූර්ණ සංඛ් යා arr[1], arr[2], ..., arr[N] අරා වල අංක අහඹු ලෙස පිළිවෙලට සකස් කර ඇත. ඔබේ කාර්යය වන්නේ පහත දැක්වෙන ක් රියාව සිදු කිරීමෙන් අරා වර්ග කිරීම අඩු නොවන අනුපිළිවෙලකින් ලබා ගත හැකිද යන්න තීරණය කිරීමයි. ඔබට ලබා දී ඇති අරා මත පහත සඳහන් ක් රියාකාරකම් සිදු කිරීමට අවසර ඇත. ඔබට ඕනෑම වාර ගණනක් දකුණට මාරුවීමේ ක් රියාකාරකමක් සිදු කිරීමට අවසර ඇත. එක් දකුණට මාරුවීමේ ක් රියාවක් යනු අරා වල සියලුම අංග එක් ස්ථානයකින් දකුණු දිශාවට මාරු කිරීමයි. අරා වල අවසාන අංගය අරාවෙහි ආරම්භක ස්ථානයට එනම් 0 වන දර්ශකයට ගෙන යනු ඇත. ඉහත ක් රියාකාරකම සිදු කිරීමෙන් වර්ග කළ අරා ලබා ගත හැකි නම් සත් ය නැවත පැමිණීම වෙනත් අංකයක් අසත් ය නැවත පැමිණීම. ලබා දී ඇති අරා හිස් නම් සත් ය නැවත පැමිණීම. සටහන: ලබා දී ඇති ලැයිස්තුවට අද්විතීය අංග ඇති බව සහතිකයි. උදාහරණ: move_one_ball[3, 4, 5, 4, 5]== 1, 2> සත් ය පැහැදිලි කිරීම: ලබා දී ඇති අරා සඳහා නිවැරදි ක් රියාකාරකයන් සිදු කිරීමෙන්, අරා වල අඩු නොවන අනුපිළිවෙල වෙනස් කිරීමේ ක් රියාකාරකමක් ලබා ගත හැකිය.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"මෙම ගැටලුවේදී, ඔබ අංක ලැයිස්තු දෙකක් ගන්නා අතර ඒවා අතර අංග හුවමාරු කර lst1 සීමිත සංඛ් යාවක් බවට පත් කළ හැකිද යන්න තීරණය කරයි. lst1 සහ lst2 අතර හුවමාරු වන අංග ගණන සීමා නොවේ. lst1 හි සියලුම අංග සීමිත කිරීමට lst1 සහ lst2 අතර අංග හුවමාරු කර ගත හැකි නම්, \"YES\" ආපසු ලබා දෙන්න. එසේ නොමැති නම්, \"NO\" ආපසු ලබා දෙන්න. උදාහරණයක් ලෙස: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" ආදාන ලැයිස්තු හිස් නොවන බව උපකල්ප කෙරේ. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"අවකාශය වෙන් කරන ලද කුඩා අකුරු නියෝජනය කරන නූලක් ලබා දී ඇති විට, වඩාත්ම පුනරාවර්තනය වන අකුරෙහි ශබ්දකෝෂයක් ආපසු ලබා දෙන්න. අකුරු කිහිපයක් එකම සිදුවීමක් තිබේ නම්, ඒවා සියල්ලම ආපසු ලබා දෙන්න. උදාහරණය: හිස්ටෝග් රෑම් ((('a b c') == {'a': 1, 'b': 1, 'c': 1} හිස්ටෝග් රෑම් ((('a b b a') == {'a': 2, 'b': 2} හිස්ටෝග් රෑම් ((('a b c a b') == {'a': 2, 'b': 2} හිස්ටෝග් රෑම් ((('b b a') == {'b 4}': හිස්ටෝග් රෑම් ((')) == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"කාර්යය අපට s හා c යන අක්ෂර පෙළ දෙකක් ලබා දී ඇත, ඔබට s හි ඕනෑම අක්ෂරයකට සමාන වන සියලු අක්ෂර මකා දැමිය යුතුය c එවිට ප් රති result ල නූල පැලින්ඩ් රෝම් ද යන්න පරීක්ෂා කරන්න. එය පසුපසට හා ඉදිරියට සමාන නම් නූල පැලින්ඩ් රෝම් ලෙස හැඳින්වේ. ඔබ ප් රති result ල නූල සහ සත් ය / අසත් ය ඇතුළත් ටියුපල් එකක් ආපසු ලබා දිය යුතුය. උදාහරණය s = \"abcde\", c = \"ae\", ප් රති result ලය විය යුතුය ('bcd', False) s = \"abcdef\", c = \"b\" ප් රති result ලය විය යුතුය ('acdef', False) s = \"abcdedcba\", c = \"ab\", ප් රති result ලය විය යුතුය ('cdedc', True)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"සෑම string එකකම අංක පමණක් අඩංගු string ලැයිස්තුවක් ලබා දීලා, ලැයිස්තුවක් return කරන්න. output එකේ i කියන එක \"input එකේ i string එකේ odd elements ගණන\" වෙන්න ඕනේ. මෙහිදී i කියන හැම අංකයක්ම i string එකේ odd digits ගණන වෙනුවට ආදානය කරන්න ඕනේ. >>> odd_count['1234567']) [\"odd elements 4n the str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\"odd elements 1n the str1ng 1 of the 1nput.\", \"odd elements 8n the str8ng 8 of the 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"පූර්ණ සංඛ් යා n අරා ලබා දී ඇති විට, හිස් නොවන ඕනෑම උප අරායක අවම එකතුව සොයා ගන්න. උදාහරණය minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"ඔබට කුහරවල සෘජුකෝණාස්රාකාර ජාලයක් ලබා දී ඇත. සෑම පේළියක්ම තනි ළිඳක් නියෝජනය කරන අතර සෑම පේළියක 1 ක්ම තනි ජල ඒකකයක් නියෝජනය කරයි. සෑම ළිඳකටම ජලය ලබා ගැනීමට භාවිතා කළ හැකි අනුරූප බාල්දියක් ඇති අතර සියලුම බාල්දියන්ට එකම ධාරිතාවක් ඇත. ඔබේ කාර්යය වන්නේ ළිං හිස් කිරීමට බාල්දිය භාවිතා කිරීමයි. බාල්දිය පහළට දැමීමට ඔබට අවශ් ය වාර ගණන ප් රතිදානය කරන්න. උදාහරණය: 1: ආදානය: ජාලකය: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 ප් රතිදානය: 62: ආදානය: ජාලකය: [[0,0,1,1], [0,0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 ප් රතිදානය: 53: ආදානය: [[:0,0,0], [0,0]] bucket_capacity: 5 ප් රතිදානය: 0 * සීමාව: 1 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"මෙම කත තුළ, ඔබ ණ නොවන පූර්ණ සංඛ් යා අනුක් රමිකව වර්ග කළ යුතුය. සමාන සංඛ් යාවක් සඳහා දශම අගය මත පදනම්ව වර්ග කරන්න. එය මේ ආකාරයෙන් ක් රියාත්මක කළ යුතුය: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"string s සහ natural number n ලබා දී ඇති විට, string s හි ඇති සියලුම වචන වලින් ලැයිස්තුවක් ලබා දෙන ශ් රිතයක් ක් රියාත්මක කිරීමට ඔබට පැවරී ඇත. මෙම වචන string s හි දිස්වන පරිදි, හරියටම n ත් යාග අක්ෂර අඩංගු වේ. string s හිස් නම්, ශ් රිතය හිස් ලැයිස්තුවක් ලබා දිය යුතුය. සටහන: ඔබ උපකල්පනය කළ හැකිය ආදාන නූලෙහි ඇත්තේ අකුරු සහ අවකාශයන් පමණි. උදාහරණ: select_words \"මාරි ට කුඩා බැටළුවෙක් සිටියේය\" (4) ==> [\"කුඩා\"] select_words \"මාරි ට කුඩා බැටළුවෙක් සිටියේය\" (3) ==> [\"මාරි\", \"බැටළුවෙක්\"] select_words \"සරල සුදු අවකාශය\", (2) ==> [] select_words \"හෙලෝ ලෝකය\", (4) ==> [\"ලෝකය\"] select_words \"ඇන්ටල් සෑම්\", (3) ==> [\"ඇන්ටල්\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"ඔබට වචනයක් ලබා දී ඇත. ඔබේ කාර්යය වන්නේ වචනයේ දකුණු පැත්තේ සිට ඝන අකුරු දෙක අතර පිහිටා ඇති ආසන්නතම ස්වරය සොයා ගැනීමයි. ආරම්භයේ සහ අවසානයේ ස්වර ගණන් නොගනී. ඉහත කොන්දේසිය සපුරාලන ස්වරයක් ඔබ සොයා නොගත්තේ නම් හිස් නූලක් ආපසු දෙන්න. ලබා දී ඇති නූලෙහි ඉංග් රීසි අකුරු පමණක් අඩංගු යැයි ඔබ උපකල්පනය කළ හැකිය. උදාහරණය: get_closest_vowel ((\"yogurt\") ==> \"u\" get_closest_vowel ((\"F\") ==> \"U\" get_closest_vowel ((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''ඔබට අකුරු පෙළක් ලබා දී ඇත, අකුරු පෙළ දෙකම විවෘත කුටිවලින් '(' හෝ සංවෘත කුටිවලින් ') ' පමණි. ඔබේ කාර්යය වන්නේ අකුරු පෙළ දෙක යම් පිළිවෙලකට සම්බන්ධ කළ හැකිද යන්න පරීක්ෂා කිරීමයි, එමඟින් ලැබෙන අකුරු පෙළ හොඳ වනු ඇත. S හි සියලුම කුටි සමබර නම් පමණක් S අකුර හොඳ යැයි සැලකේ. උදාහරණයක් ලෙස: '((()) 'අකුරු පෙළ හොඳ වන අතර '()) 'අකුරු පෙළ හොඳ නොවේ. හොඳ අකුරක් සෑදීමට ක් රමයක් තිබේ නම් 'ඔව්' ආපසු ලබා දෙන්න, එසේ නොමැතිනම් 'නැත' ආපසු ලබා දෙන්න. උදාහරණ: match_parens [('() ', ') ']) == 'ඔව්' match_parens [(') ', ') ']) == 'නැත' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"පූර්ණ සංඛ් යා arr සහ ධනාත්මක පූර්ණ සංඛ් යා k ලබා දී ඇති විට, arr හි උපරිම k සංඛ් යා සහිත දිග k හි වර්ග කළ ලැයිස්තුවක් ආපසු ලබා දෙන්න. උදාහරණය 1: ආදානය: arr = [-3, -4, 5], k = 3 ප් රතිදානය: [-4, -3, 5] උදාහරණය 2: ආදානය: arr = [4, -4, 4], k = 2 ප් රතිදානය: [4, 4] උදාහරණය 3: ආදානය: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ප් රතිදානය: [2] සටහන: 1.\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"හිස් නොවන පූර්ණ සංඛ් යා ලැයිස්තුවක් ලබා දී ඇති විට, සම ස්ථානවල ඇති සියලුම අමුද් රව් යවල එකතුව නැවත ලබා දෙන්න. උදාහරණ විසඳුම (([5, 8, 7, 1]) ==> 12 විසඳුම (([3, 3, 3, 3]) ==> 9 විසඳුම (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"පූර්ණ සංඛ් යා arr හා පූර්ණ සංඛ් යා k හිස් නොවන අරාව ලබා දී ඇති විට, arr හි පළමු k මූලද් රව් ය වලින් උපරිම වශයෙන් ඉලක්කම් දෙකක් සහිත මූලද් රව් යවල එකතුව නැවත ලබා දෙන්න. උදාහරණය: ආදානය: arr = [111,21,3,4000,5,6,7,8,9], k = 4 ප් රතිදානය: 24 # 21 + 3 හි එකතුව සීමාවන්: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇති විට, අමුතු සංඛ් යා collatz අනුක් රමයෙන් වර්ග කර ලැයිස්තුවක් නැවත ලබා දෙන්න. Collatz උපකල්පනය යනු ගණිතය තුළ අනුකල්පනයකි. එය පහත පරිදි අර්ථ දක්වා ඇති අනුක් රමයකට අදාළ වේ: ඕනෑම ධනාත්මක පූර්ණ සංඛ් යාවක් n සමඟ ආරම්භ කරන්න. ඉන්පසු සෑම පදයක්ම පෙර පදයෙන් පහත පරිදි ලබා ගනී: පෙර පදය සම නම්, ඊළඟ පදය පෙර පදයේ අඩකි. පෙර පදය අමු නම්, ඊළඟ පදය පෙර පදයට වඩා 3 ගුණයක් වේ. උපකල්පනය නම්, n හි කුමන අගයකට වුවද, අනුක් රය සැමවිටම 1 දක්වා ළඟා වනු ඇත. සටහන: 1. Collatz (((1) [1] වේ. 2. ආපසු ලැයිස්තුව වර්ග කර ඇති අනුපිළිවෙල අනුව වර්ධනය වේ. උදාහරණයක් ලෙස: get_odd_collatz ((5) නැවත ලබා දෙයි [1, 5] # 5 සඳහා collatz අනුක් රමය [5, 8, 16, 4, 2, 1], එබැවින් අමුතු සංඛ් යා 1 සහ 5  පමණි.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"දිනය වලංගු නම් True ලෙස දමනු ලැබේ. එසේ නොමැති නම් False ලෙස දමනු ලැබේ. දිනය වලංගු වන්නේ පහත සඳහන් සියලුම නීතිරීති සපුරා ඇත්නම් පමණි: 1. දිනය හිස් නොවේ. 2. දින ගණන මාස 1,3,5,7,8,10,12 සඳහා දින 1 ට වඩා අඩු හෝ දින 31 ට වඩා වැඩි නොවේ. සහ දින ගණන මාස 4,6,9,11 සඳහා දින 1 ට වඩා අඩු හෝ දින 30 ට වඩා වැඩි නොවේ. සහ දින ගණන මාසය සඳහා දින 1 ට වඩා අඩු හෝ 29 ට වඩා වැඩි නොවේ. 2. මාස 1 ට වඩා අඩු හෝ 12 ට වඩා වැඩි නොවිය යුතුය. 4. දිනය ආකෘතියේ විය යුතුය: mm-dd-yyyy උදාහරණයක් ලෙස: valid_date (('03-11-2000') => valid_date (('15-01-2012') => valid_date (('04-01-2040') => valid_date (('06-04-2020') => valid_date (('06/04/2020') => valid_date (('06/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''වචන පෙළක් ලබා දී, වචන ලැයිස්තුවක් නැවත ලබා දෙන්න, සුදු අවකාශය මත බෙදන්න, පෙළ තුළ සුදු අවකාශයක් නොමැති නම් ඔබ කොමා මත බෙදිය යුතුය, කොමා නොමැති නම් ඔබ අක්ෂර මාලාවේ අමුතු අනුපිළිවෙලකින් කුඩා අකුරු ගණන ආපසු ලබා දිය යුතුය, ord (('a') = 0, ord (b') = 1, ... ord (z') = 25 උදාහරණ split_words ((\"හෙලෝ වර්ල්ඩ්!\") â -> [\"හෙලෝ\", \"වර්ල්ඩ්!\"] split_words ((\"හෙලෝ, වර්ල්ඩ්!\") â -> [\"හෙලෝ\", \"වර්ල්ඩ්!\"] split_words ((\"abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''සංඛ් යා ලැයිස්තුවක් ලබා දී ඇති විට, ඒවා වර්ගීකරණය කර තිබේද නැද්ද යන්න ඉහළ යන පිළිවෙලට ආපසු ලබා දෙන්න. ලැයිස්තුවේ එකම සංඛ් යාවේ අනුපිටපත් 1 කට වඩා තිබේ නම්, False ආපසු ලබා දෙන්න. ණ සංඛ් යා නොමැති බවත්, පූර්ණ සංඛ් යා පමණක් යැයි උපකල්පනය කරන්න. උදාහරණ is_sorted (අනුපිටපත් කිරීම) [1] -> True is_sorted (අනුපිටපත් කිරීම) [2] (අනුපිටපත් කිරීම) [1] (අනුපිටපත් කිරීම) [2] (අනුපිටපත් කිරීම)'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"ඔබට කාල පරිච්ඡේද දෙකක් ලබා දී ඇත, එහිදී සෑම කාල පරිච්ඡේදයක්ම පූර්ණ සංඛ් යා යුගලයකි. උදාහරණයක් ලෙස, කාල පරිච්ඡේදය = (ආරම්භය, අවසානය) = (1, 2). ලබා දී ඇති කාල පරිච්ඡේදයන් වසා ඇත, එයින් අදහස් වන්නේ කාල පරිච්ඡේදය (ආරම්භය, අවසානය) ආරම්භය සහ අවසානය යන දෙකම ඇතුළත් බවයි. සෑම ලබා දී ඇති කාල පරිච්ඡේදයක් සඳහාම, එහි ආරම්භය එහි අවසානයට වඩා අඩු හෝ සමාන යැයි උපකල්පනය කෙරේ. ඔබේ කාර්යය වන්නේ මෙම කාල පරිච්ඡේද දෙකේ ඡේදයේ දිග ප් රාථමික සංඛ් යාවක් දැයි තීරණය කිරීමයි. උදාහරණයක් ලෙස, කාල පරිච්ඡේදයන් (1, 3), (2, 4) හි ඡේදයේ දිග (2, 3) වන අතර එහි දිග ප් රාථමික සංඛ් යාවක් නොවේ. ඡේදයේ දිග ප් රාථමික සංඛ් යාවක් නම්, \"ඔව්\" ආපසු ලබා දෙන්න, එසේ නොමැති නම් \"නැත\". කාල පරිච්ඡේද දෙක ඡේදනය නොවන නම්, \"නැත\" ආපසු ලබා දෙන්න. [ආදානය / ප් රතිදානය] සාම්පල: ඡේදයය (අ) (අ), (අ), (අ), (අ), (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ) (අ)\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"ඔබට පූර්ණ සංඛ් යා සමූහයක් ලබා දී ඇති අතර, ඔබ විසින් පූර්ණ සංඛ් යා වල විශාලත්වයේ එකතුව නැවත ලබා දිය යුතුය, එය 1, -1 හෝ 0 මගින් නිරූපණය කරන ලද අරාවෙහි එක් එක් සංඛ් යාවේ සියලුම සං signs ා වල නිෂ්පාදිතය මගින් ගුණ කරනු ලැබේ. සටහන: හිස් අරාව සඳහා කිසිවක් ආපසු නොලැබේ. උදාහරණය: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == කිසිවක් නැත\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N පේළි සහ N තීරු (N >= 2) සහ ධනාත්මක පූර්ණ සංඛ් යාවක් k සහිත ජාලකයක සෑම සෛලයකම අගයක් අඩංගු වේ. [1, N * N] ඇතුළත් පරාසයේ සෑම පූර්ණ සංඛ් යාවක්ම ජාලකයේ සෛලවල හරියටම එක් වරක් දිස් වේ. ඔබට ජාලකයේ k දිගේ අවම මාර්ගය සොයා ගත යුතුය. ඔබට ඕනෑම සෛලයකින් ආරම්භ කළ හැකි අතර සෑම පියවරකදීම ඔබට අසල්වැසි සෛල වෙත යා හැකිය, වෙනත් වචන වලින් කිවහොත්, ඔබට වත්මන් සෛල සමඟ කෙළවරක් බෙදා ගන්නා සෛල වෙත යා හැකිය. k දිගින් යුත් මාර්ගයක් යනු හරියටම k සෛල වෙත පිවිසීමයි (අනිවාර්යයෙන්ම වෙනස් නොවේ). ඔබට ජාලකයෙන් පිටතට යා නොහැක. A (k දිග) මාර්ගයක් B (of k) මාර්ගයට වඩා කුඩා ලෙස සැලකේ A සහ B යන සෛලවල අගයන් ඇණවුම් ලැයිස්තු සෑදීමෙන් පසු (අපි ඒවා l_st සහ l_stA_st ලෙස හඳුන්වමු), l_stB), l_stA යනු lexically l_stA_st_st_, l_st_st_st_1, j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ෆිබොනාච්චි අනුක් රමය සෑම දෙනාම දන්නවා. එය පසුගිය සියවස් දෙකක කාලය තුළ ගණිතඥයන් විසින් ගැඹුරින් අධ් යයනය කරන ලදී. කෙසේ වෙතත්, මිනිසුන් නොදන්නා දෙය නම් ට් රිබොනාච්චි අනුක් රමයයි. ට් රිබොනාච්චි අනුක් රමය නැවත නැවතත් අර්ථ දැක්වෙන්නේ: tri(1) = 3 tri(n) = 1 + n / 2, n සක් රීය නම්. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n අංක නම්. උදාහරණයක් ලෙස: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ඔබට ණ නොවන පූර්ණ සංඛ් යාවක් n ලබා දී ඇති අතර, ඔබට ට් රිබොනාච්චි අනුක් රමයෙහි පළමු n + 1 අංක ලැයිස්තුවක් ආපසු ලබා දිය යුතුය. උදාහරණ: tri(3) = [1, 3, 2, 8] \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ධනාත්මක නිඛිල සංඛ් යාවක් n ලබා දී ඇති විට, අමු ඉලක්කම් වල ගුණය ලබා දෙන්න. සියලු ඉලක්කම් සම නම් 0 ලබා දෙන්න. උදාහරණයක් ලෙස: ඉලක්කම් ((1) == 1 ඉලක්කම් ((4) == 0 ඉලක්කම් ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''වර්ග කුටි පමණක් අඩංගු නූලක් ආදානය ලෙස ගන්නා ශ් රිතයක් සාදන්න. ශ් රිතය සත් යයක් ලබා දිය යුත්තේ අවම වශයෙන් එක් කුටි ක් රමානුකූලව ක් රමානුකූලව ක් රියාත්මක වන විට පමණි. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"ඔබට සංඛ් යා ලැයිස්තුවක් ලබා දී ඇත. ඔබට අවශ් ය වන්නේ ලබා දී ඇති ලැයිස්තුවේ ඇති සංඛ් යා වර්ගයේ එකතුව ආපසු ලබා දීමයි. ලැයිස්තුවේ ඇති සෑම අංගයක්ම ඉහළට වට කරන්න. උදාහරණ: lst = [1,2,3] සඳහා ප් රතිදානය 14 විය යුතුය lst = [1,4,9] සඳහා ප් රතිදානය 98 විය යුතුය lst = [1,3,5,7] සඳහා ප් රතිදානය 84 විය යුතුය lst = [1.4,4.2,0] සඳහා ප් රතිදානය 29 විය යුතුය lst = [-2.4,1,1] සඳහා ප් රතිදානය 6 විය යුතුය \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''ලබා දී ඇති නූලක අවසාන අක්ෂරය අක්ෂර වින් යාසය අක්ෂරයක් වන අතර එය වචනයේ කොටසක් නොවේ නම් සත් ය සහ වෙනත් ආකාරයකින් අසත් ය යන අක්ෂර නැවත ලබා දෙන ශ් රිතයක් සාදන්න. සටහන: \"වචනය\" යනු අවකාශය මගින් වෙන් කරන ලද අක්ෂර සමූහයකි. උදාහරණ: check_if_last_char_is_a_letter\" \"ඇපල් පයි\") â -> අසත් ය check_if_last_char_is_a_letter\" \"ඇපල් පයි e\") â -> සත් ය check_if_last_char_is_a_letter\" \"ඇපල් පයි e \") â -> අසත් ය check_if_last_char_is_a_letter\" \"අපල් පයි e\") â -> අසත් ය '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"න් යාය පත් රය: න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය () න් යාය පත් රය පත් රය () න් යාය පත් රය පත් රය () න් යාය පත් රය පත් රය ()                                                                                                                     \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ණ හෝ ධනාත්මක සංඛ් යා නොමැති නම් ඒවා None ලෙස ලබා දෙන්න. උදාහරණ: විශාලතම_කුඩාම_සම්පූර්ණ සංඛ් යා[2, 4, 1, 3, 5, 7]) == (කිසිම, 1) විශාලතම_කුඩාම_සම්පූර්ණ සංඛ් යා[0]) == (කිසිම, නැත) විශාලතම_කුඩාම_සම්පූර්ණ සංඛ් යා[0]) == (කිසිම, නැත)'''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"අංකය, අංකය හෝ අංකය ලෙස අර්ථ දැක්වෙන අංකය, අංකය හෝ අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස අර්ථ දැක්වෙන අංකය ලෙස හැඳින්වෙන අංකය ලෙස හැඳින්වෙන අංකය ලෙස හැඳින්වෙන අංකය ලෙස හැඳින්වෙන අංකය ලෙස හැඳින්වෙන අංකය ලෙස හැඳින්වෙන අංකය ලෙස හැඳින් හැඳින්වෙන අංකය ලෙස හැඳින් හැඳින්වෙන අංකය ලෙස හැඳින් හැඳින්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථ දැක්වෙන අර්ථය\"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"ලබා දී ඇති අංකය n නිවැරදිව ධනාත්මක සම සංඛ් යා 4 ක එකතුවක් ලෙස ලිවිය හැකිදැයි තක්සේරු කරන්න උදාහරණය is_equal_to_sum_even (අංකය 4) == අසත් ය is_equal_to_sum_even (අංකය 6) == අසත් ය is_equal_to_sum_even (අංකය 8) == සත් ය \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"බ් රසීලියානු සාධකය ලෙස අර්ථ දැක්වෙන්නේ: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! මෙහි n > 0 උදාහරණයක් ලෙස: >>> special_factorial ((4) 288 ශ් රිතයට ආදානය ලෙස පූර්ණ සංඛ් යාවක් ලැබෙනු ඇති අතර මෙම පූර්ණ සංඛ් යාවේ විශේෂ සාධකය ආපසු ලබා දිය යුතුය. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_උදාහරණය-3 ඇති විට, එහි ඇති සියලුම අවකාශයන් යටි සලකුණු වලින් ප් රතිස්ථාපනය කරන්න, සහ පෙළක් අඛණ්ඩව අවකාශයන් 2 කට වඩා තිබේ නම්, පසුව අඛණ්ඩව ඇති සියලුම අවකාශයන් - fix_spaces (_) ආදර්ශය) == \"උදාහරණය\" fix_spaces (_) ආදර්ශය 1 (_) ආදර්ශය 1 (_) ආදර්ශය 2 (_) ආදර්ශය 2 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_) ආදර්ශය 3 (_)\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ගොනුවක නම නිරූපණය කරන නූලක් ගන්නා ක් රියාවක් නිර්මාණය කරන්න, එය වලංගු නම් 'ඔව්' නැවත ලබා දෙයි, එසේ නොමැති නම් 'නැත' නැවත ලබා දෙයි. ගොනුවක නම වලංගු යැයි සලකනු ලබන්නේ පහත සඳහන් කොන්දේසි සියල්ලම සපුරා ඇත්නම් පමණි: - ගොනුවේ නමට ඉලක්කම් තුනකට වඩා තිබිය යුතු නැත ('0'-'9') ගොනුවේ නමට හරියටම එක තිතක් අඩංගු වේ. - තිතට පෙර උප නූල හිස් නොවිය යුතු අතර එය ලතින් අක්ෂරයකින් ආරම්භ වේ ('a'-'z' සහ 'A''-Z'). - තිතෙන් පසු උප නූල ලතින් අක්ෂරයකින් ආරම්භ විය යුතුය: ['txt', 'exe', 'lld'] උදාහරණ: file_name_check\"{example.txt.t\") # => 'ඔව්' file_name_check\"{example.dll1\") => 'නැත' => '#' (නම ලතින් අක්ෂරයකින් ආරම්භ විය යුතුය)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"මෙම ශ් රිතය පූර්ණ සංඛ් යා ලැයිස්තුවක් ගනී. ලැයිස්තුවේ සියලුම ප් රවේශයන් සඳහා, ශ් රිතය එහි දර්ශකය 3 ක ගුණයක් නම් පූර්ණ සංඛ් යා ප් රවේශය වර්ග කළ යුතු අතර එහි දර්ශකය 4 ක ගුණයක් නම් පූර්ණ සංඛ් යා ප් රවේශය ඝන කරයි. ශ් රිතය ලැයිස්තුවේ ප් රවේශයන් වෙනස් නොකරනු ඇත. එහි දර්ශක 3 හෝ 4 ක ගුණයක් නොවේ. එවිට ශ් රිතය සියලුම ප් රවේශයන්ගේ එකතුව නැවත ලබා දෙනු ඇත. උදාහරණ: lst = [1,2,3] සඳහා ප් රතිදානය 6 විය යුතුය lst = [] සඳහා ප් රතිදානය 0 විය යුතුය lst = [-1,-5,2,-1,-5] සඳහා ප් රතිදානය -126 විය යුතුය \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"ඔබට වාක් යයක් නියෝජනය කරන නූලක් ලබා දී ඇත, වාක් යයේ ඉඩකින් වෙන් කර ඇති වචන කිහිපයක් අඩංගු වන අතර, මුල් වාක් යයේ වචන අඩංගු නූලක් ආපසු ලබා දිය යුතුය, එහි දිග ප් රාථමික සංඛ් යා වේ, නව නූලෙහි වචන අනුපිළිවෙල මුල් එක හා සමාන විය යුතුය. උදාහරණය 1: ආදානය: වාක් ය = \"මෙය පරීක්ෂණයක්\" ප් රතිදානය: \"is\" උදාහරණය 2: ආදානය: වාක් ය = \"පිහිනීමට යාමට ඉඩ දෙන්න\" ප් රතිදානය: \"go for\" සීමාවන්: * 1 <= len(sentence) <= 100 * වාක් යයේ ඇත්තේ අකුරු පමණි \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"ඔබේ කාර්යය වන්නේ x * n ප් රකාශනය සරල කරන ශ් රිතයක් ක් රියාත්මක කිරීමයි. x * n පූර්ණ සංඛ් යාවක් ලෙස අගය කළහොත් ශ් රිතය සත් ය නැවත ලබා දෙයි. x සහ n යන දෙකම, අංශුවක නියෝජනය වන අතර පහත දැක්වෙන ආකෘතිය ඇත, <numerator>/<denominator> එහිදී අංකකය සහ නාමකය ධනාත්මක පූර්ණ සංඛ් යා වේ. ඔබට x සහ n වලංගු අංශු යැයි උපකල්පනය කළ හැකි අතර නාමකය ලෙස ශුන් ය නොමැත. සරල කරන්න \"1/ 5\", \"5/1\") = සත් ය සරල කරන්න \"1/ 6\", \"2/1\") = අසත් ය සරල කරන්න \"7/ 10\", \"10/2\") = අසත් ය \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"අංකවල එක සමාන එකතුවක් ඇති අයිතම කිහිපයක් තිබේ නම්, මුල් ලැයිස්තුවේ ඇති දර්ශකය මත පදනම්ව ඒවා ඇණවුම් කරන්න. උදාහරණයක් ලෙස: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"සංඛ් යා අරාව ආදානය ලෙස ගෙන එම අරාවෙහි ඇති 10 ට වඩා වැඩි අංග ගණන සහ සංඛ් යාවක පළමු හා අවසාන ඉලක්කම් දෙකම අමු (1, 3, 5, 7, 9) වන බව පෙන්වන ශ් රිතයක් ලියන්න. උදාහරණයක් ලෙස: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"ඔබට ධනාත්මක පූර්ණ සංඛ් යාවක් n ලබා දී ඇත. ඔබට දිග n ක පූර්ණ සංඛ් යා අරාවක් නිර්මාණය කිරීමට සිදුවේ. සෑම i (1 ‰¤ i ‰¤ n) සඳහාම, a[i] = i * i - i + 1 හි අගය. i < j < k වන a හි ත් රිත්ව (a[i], a[j], a[k]) සංඛ් යාව නැවත ලබා දෙන්න, සහ a[i] + a[j] + a[k] යනු 3 හි ගුණකයකි. උදාහරණය: ආදානය: n = 5 ප් රතිදානය: 1 පැහැදිලි කිරීම: a = [1, 3, 7, 13, 21] වලංගු ත් රිත්ව (1, 7, 13) පමණි.\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''අපේ සෞරග් රහ මණ්ඩලයේ ග් රහලෝක අටක් ඇත: සූර්යයාට ආසන්නතම ග් රහලෝකය වන්නේ බුධ, ඊළඟට සිකුරු, පසුව පෘථිවිය, අඟහරු, බ් රහස්පති, සෙනසුරු, යුරේනස්, නෙප්චූන් ය. ග් රහලෝක නාම දෙකක් ග් රහලෝක 1 සහ ග් රහලෝක 2 ලෙස ගන්නා ශ් රිතයක් ලියන්න. ග් රහලෝක 1 සහ ග් රහලෝක 2 අතර කක්ෂගත වන සියලුම ග් රහලෝක අඩංගු ටියුපල් එකක් සූර්යයාට ඇති සමීපතාව අනුව වර්ග කර ශ් රිතය හිස් ටියුපල් එකක් ආපසු ලබා දිය යුතුය. ග් රහලෝක 1 හෝ ග් රහලෝක 2 නිවැරදි ග් රහලෝක නාම නොවේ නම්. උදාහරණ bf \"(ජුපිටර්\", \"නෙප්චූන්\") ==> (\"සිකුරු\", \"යුරේනස්\") bf ((\"පොළොව\", \"සුදුරු\") ==> (\"සුදුරු\"), \"පොළොව\", \"අඟර\", \"ජුපි\", \"සුරු\", \"සිකුරු\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"string ලැයිස්තුවක් පරාමිතියක් ලෙස පිළිගන්නා, අමුතු දිග ඇති string මකා දමා, එහි ඇති ලැයිස්තුව වර්ග කළ පිළිවෙලක් සමඟ නැවත ලබා දෙන ශ් රිතයක් ලියන්න. ලැයිස්තුව සැමවිටම string ලැයිස්තුවක් වන අතර කිසි විටෙකත් සංඛ් යා අනුක් රමයක් නොවන අතර එය අනුපිටපත් අඩංගු විය හැකිය. ලැයිස්තුවේ අනුපිළිවෙල එක් එක් වචනයේ දිග අනුව ඉහළ යා යුතුය, ඔබ එම රීතිය අනුව වර්ග කළ ලැයිස්තුව නැවත ලබා දිය යුතුය. වචන දෙකේ දිග සමාන නම්, ලැයිස්තුව අක්ෂර වින් යාසය අනුව වර්ග කරන්න. ශ් රිතය වර්ග කළ පිළිවෙලකින් string ලැයිස්තුවක් නැවත ලබා දිය යුතුය. ඔබට සියලු වචන එකම දිගකින් යුක්ත යැයි උපකල්පනය කළ හැකිය. උදාහරණයක් ලෙස: assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"cd \"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"සරල වැඩසටහනක්, එය n ප් රථම සංඛ් යාවක් නම් x හි අගය නැවත ලබා දිය යුතු අතර, එසේ නොමැති නම් y හි අගය නැවත ලබා දිය යුතුය. උදාහරණ: x_or_y ((7, 34, 12) == 34 x_or_y ((15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''සංඛ් යා ලැයිස්තුවක් ලබා දී ඇති විට, අමුතු සංඛ් යා ලැයිස්තුවේ වර්ගවල එකතුව නැවත ලබා දෙන්න. ණ හෝ පූර්ණ සංඛ් යා නොවන සංඛ් යා නොසලකා හරින්න. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 ආදාන ලැයිස්තුව හිස් නම්, 0 නැවත ලබා දෙන්න. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"මම හිතන්නේ අපි හැමෝටම මතකයි ඒ හැඟීම බොහෝ කලක් බලා සිටි සිදුවීමක ප් රතිඵලය අවසානයේදී දැනෙන විට. ඒ මොහොතේ ඔබට ඇති හැඟීම් සහ සිතුවිලි අනිවාර්යයෙන්ම සටහන් කර ගැනීම හා සංසන්දනය කිරීම වටී. ඔබේ කාර්යය පුද්ගලයෙකු ගැලපෙන ප් රති results ල ගණනාවක් නිවැරදිව අනුමාන කර ඇත්දැයි තීරණය කිරීමයි. ඔබට සමාන දිග ලකුණු සහ අනුමාන කිරීම් මාලා දෙකක් ලබා දී ඇත, එහිදී සෑම දර්ශකයක්ම ගැලපීමක් පෙන්වයි. එක් එක් අනුමානය කොතරම් දුරට ඇත්දැයි දැක්වෙන එකම දිග මාලාවක් ආපසු ලබා දෙන්න. ඔවුන් නිවැරදිව අනුමාන කර ඇත්නම්, අගය 0 වන අතර, එසේ නොවේ නම්, අගය අනුමානය සහ ලකුණු අතර නිරපේක්ෂ වෙනස වේ. උදාහරණය: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,0,4],[4,1,0,2,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ඔබට පන්තියක නම (ශ් රේණියක්) සහ දිගු ලැයිස්තුවක් ලබා දෙනු ඇත. දිගු ලැයිස්තුවක් භාවිතා කරනු ලබන්නේ පන්තියට අමතර පන්ති පූරණය කිරීමටයි. දිගු කිරීමේ ශක්තිය පහත පරිදි වේ: CAP දිගු කිරීමේ නමේ ඇති ලොකු අකුරු ගණන වේවා, සහ SM දිගු කිරීමේ නමේ ඇති කුඩා අකුරු ගණන වේවා, ශක්තිය ලබා දෙන්නේ CAP - SM අකුරු කොටුවෙනි. ඔබ ශක්තිමත්ම දිගුව සොයාගෙන මෙම ආකෘතියෙන් නූලක් ආපසු ලබා දිය යුතුය: ClassName.StrongestExtensionName. එකම ශක්තිය සහිත දිගු දෙකක් හෝ වැඩි ගණනක් තිබේ නම්, ඔබ ලැයිස්තුවේ පළමුව එන එක තෝරා ගත යුතුය. උදාහරණයක් ලෙස, ඔබට \"Slices\" පන්තිය ලෙස සහ දිගු ලැයිස්තුවක් ලෙස ලබා දී ඇත්නම්: ['SEviviSliCESNG', 'Cheese', 'StuFfed'] එවිට ඔබ 'SlicesNG.SEviSliCes' ආපසු ලබා දිය යුතුය. 'SviSliCesNG' 'mySliCesNG' (මගේ'viSliCESNG' strongest extension) වන බැවින්, ශක්තිමත් දිගුව ලබා දිය යුත්තේ CAP - SM-SM. ඔබ ශක්තිමත්ම දිගුව සොයා ගත යුතුය.\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"ඔබට වචන දෙකක් ලබා දී ඇත. ඔබ True නැවත ලබා දිය යුතුයි දෙවන වචනය හෝ එහි ඕනෑම භ් රමණයන් පළමු වචනයේ උප නූලක් නම් cycpattern_check (http://www.cycpattern.com/index.php/index.php/index.php) => False cycpattern_check (http://www.cycpattern.com/index.php/index.php/index.php/index.php) => False cycpattern_check (http://www.cycpattern.com/index.php/index.php/index.php) => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"පූර්ණ සංඛ් යාවක් ලබා දී ඇත. පිළිවෙලින් සම සහ අමු අංක ගණනක් ඇති ටියුපල් එකක් නැවත ලබා දෙන්න. උදාහරණය: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"ධනාත්මක පූර්ණ සංඛ් යාවක් ලබා දී එහි රෝමානු සංඛ් යා ප් රතිසමයක් නූලක් ලෙස ලබාගෙන එය කුඩා අකුරින් ලබා දෙන්න. සීමාවන්: 1 <= num <= 1000 උදාහරණ: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ත් රිකෝණයක පැති තුනක දිග ලබා දී ඇත. ත් රිකෝණයක පැති තුනක් සෘජු කෝණ ත් රිකෝණයක් නම් True නැවත ලබා දෙන්න, එසේ නොමැති නම් False. සෘජු කෝණ ත් රිකෝණයක් යනු එක් කෝණයක් සෘජු කෝණයක් හෝ අංශක 90 ක් වන ත් රිකෝණයකි. උදාහරණය: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"string ලැයිස්තුවක් පිළිගන්නා ක් රියාකාරකමක් ලියන්න. ලැයිස්තුවේ විවිධ වචන අඩංගු වේ. උපරිම අද්විතීය අක්ෂර සංඛ් යාවක් සහිත වචනය ආපසු දෙන්න. බහු string වල උපරිම අද්විතීය අක්ෂර සංඛ් යාවක් තිබේ නම්, ශබ්දකෝෂීය අනුපිළිවෙල අනුව පළමුව එන එක නැවත දෙන්න. find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"ඔබ බඩගිනි හාවෙක්, ඔබ දැනටමත් කැරට් ගණනාවක් කාලා තියෙනවා, නමුත් දැන් ඔබට අවශ් ය කැරට් ගණන වැඩි කරන්න. ඔබ නැවත අරාවක් ලබා දිය යුතුයි [ඔබේ ආහාර වේලෙන් පසු ආහාරයට ගත් කැරට් ගණන, ඔබේ ආහාර වේලෙන් පසු ඉතිරි වූ කැරට් ගණන] ඉතිරි කැරට් ප් රමාණවත් නොවන්නේ නම්, ඔබ ඉතිරි කැරට් සියල්ලම කනවා, නමුත් ඔබට තවමත් බඩගිනි දැනෙනවා. උදාහරණය: * කන්න (5, 6, 10) -> [11, 4] * කන්න (4, 8, 9) -> [12, 1] * කන්න (1, 10, 10) -> [11, 0] * කන්න (2, 11, 5) -> [7, 0] විචල් යයන්: @ අංකය: ඔබ අනුභව කළ කැරට් ගණන. @ අවශ් යතාවය: ඔබට අනුභව කිරීමට අවශ් ය කැරට් ගණන. @ ඉතිරි කිරීම: ඉතිරි කැරට් ගණන තොගයේ පවතින තහනම්: * 0 = <= 1000 * 0 = <= 1000 * 0 = <= 1000 ඉතිරිව ඇති විනෝදයක් ගන්න = 1000:\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"මූලික ලැයිස්තුවේ ප් රථම ලැයිස්තුවේ මූලික ඇල්ජිබ් රා ක් රියාකාරකම් ඇති අතර දෙවන ලැයිස්තුවේ පූර්ණ සංඛ් යා ලැයිස්තුවක් ඇත. ඇල්ජිබ් රා ප් රකාශනය ගොඩනඟා ගැනීමට ලබා දී ඇති ලැයිස්තුවේ සංඛ් යා දෙක භාවිතා කර මෙම ප් රකාශනයේ ඇගයීම ආපසු ලබා දෙන්න. මූලික ඇල්ජිබ් රා ක් රියාකාරකම්: එකතු කිරීම (+) අඩු කිරීම ( -) ගුණ කිරීම ( *) බිම් කොටස ( //) ඉහළට ( ** උදාහරණය) ක් රියාකරු['+', '*', '-'] අරාව = [2, 3, 4, 5] ප් රති result ලය = 2 + 3 * 4 - 5 => ප් රති result ලය = 9 සටහන: ක් රියාකාරක ලැයිස්තුවේ දිග ප් රථම ලැයිස්තුවේ දිගට සමාන වේ. ක් රියාකාරක ලැයිස්තුව negative ණ නොවන පූර්ණ සංඛ් යා ලැයිස්තුවකි. ක් රියාකාරක ලැයිස්තුවේ අවම වශයෙන් එක් ක් රියාකාරකරුවා සිටින අතර ක් රියාකාරක ලැයිස්තුවේ අවම වශයෙන් ක් රියාකාරකයන් දෙදෙනෙකු සිටී. \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"ඔබට string එකක් ලබා දී ඇත. s[i] අකුරක් නම්, එහි කේස් එක පහළ සිට ඉහළට හෝ අනෙක් අතට ආපසු හරවන්න, එසේ නොමැතිනම් එය එලෙසම තබා ගන්න. string එකේ අකුරු නොමැති නම්, string එක ආපසු හරවන්න. ශ් රිතය ප් රතිඵලයක් ලෙස ලැබෙන string එක නැවත ලබා දිය යුතුය. උදාහරණ solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"'text' යන නූල ලබා දී, එහි md5 හැෂ් සමාන නූල නැවත ලබා දෙන්න. 'text' හිස් නූල නම්, None නැවත ලබා දෙන්න. >>> string_to_md5('හෙලෝ වර්ල්ඩ්') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "sin_Sinh",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"ධනාත්මක පූර්ණ සංඛ් යා දෙකක් ලබා දී ඇති විට, a සහ b අතර ඇති සම අංක ඉහළ යන පිළිවෙලට ලබා දෙන්න. උදාහරණයක් ලෙස: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]