[{"task_id":"HumanEval_0","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/လွင်ႈမၵ်းမၼ်ႈၶွပ်ႇ။    \/\/တူၺ်းတူၺ်းဝႃႈ ၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တူဝ်ၼပ်ႉဢၼ်ၸမ်ၵၼ်တင်းသွင်ဢၼ်ၼၼ်ႉ မီးၼမ်လိူဝ်သေ  ၼႆႉယူႇႁႃႉ။    \/\/ >>> hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    \/\/ (false)\n    \/\/ >>> hasCloseElements((List[Float](1.0f.toFloat, 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n    \/\/ (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n","canonical_solution":"def hasCloseElements(numbers: List[Float], threshold: Float): Boolean = {\n      val sortedNumbers = numbers.sorted\n      for (i <- 1 until sortedNumbers.length) {\n        if (abs(sortedNumbers(i) - sortedNumbers(i - 1)) < threshold) {\n          return true\n        }\n      }\n      false\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_1","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ဢမ်ႇလႆႈသႂ်ႇပၼ် လွင်ႈပဝ်ႇၼွၵ်ႈ တီႈၼႂ်း သဵၼ်ႈမၢႆ ဢၼ်တေသႂ်ႇပၼ်ၼၼ်ႉ။    \/\/ၸုမ်းဢၼ်ၽၢတ်ႇၵၼ်ၼၼ်ႉ ၽဵင်ႇပဵင်းၵၼ် (ႁွႆးဢၼ်ပိုတ်ႇဝႆႉဢၼ်လႂ်ဢၼ်ၼၼ်ႉ လႆႈထုၵ်ႇပိၵ်ႉဝႆႉလီလီ) လႄႈ ဢမ်ႇလႆႈဢဝ်သႂ်ႇၵၼ်ဝႆႉၼ်ႂးၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/ၸႅၵ်ႇဢွၵ်ႇ ၸုမ်းၸိူဝ်းၼၼ်ႉ ႁႂ်ႈပဵၼ် ထႅဝ်လိၵ်ႈဢၼ်ၽၢတ်ႇဢွၵ်ႇသေ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ၸိူဝ်းၼၼ်ႉ လၢႆႈပၼ်။    \/\/Input to this function is a string containing multiple groups of nested parentheses. ယိူင်းဢၢၼ်းၸဝ်ႈၵဝ်ႇၼႆႉပဵၼ်တႃႇ     \/\/ >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    \/\/ (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n","canonical_solution":"def separateParenGroups(paren_string: String): List[String] = {\n    val result = ListBuffer[String]()\n    val sanitizedInput = paren_string.replaceAll(\"\\\\s\", \"\")\n    var balance = 0\n    var currentGroup = new StringBuilder()\n\n    for (char <- sanitizedInput) {\n        currentGroup.append(char)\n        if (char == '(') balance += 1\n        else if (char == ')') balance -= 1\n\n        if (balance == 0 && currentGroup.nonEmpty) {\n            result += currentGroup.toString()\n            currentGroup = new StringBuilder()\n        }\n    }\n\n    result.toList\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_2","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ ဢၼ်ပႃး တူဝ်ၼပ်ႉႁူဝ်သိပ်းၼၼ်ႉမႃး။    \/\/(တွၼ်ႈဢၼ်ၵိုတ်းဝႆႉၼၼ်ႉ ၵႆႉၵႆႉလဵၵ်ႉလိူဝ်သေ 1) ။    \/\/လႄႈ တူဝ်ၼပ်ႉတဵမ် (တူဝ်ၼပ်ႉတဵမ် ဢၼ်ယႂ်ႇသုတ်း ဢၼ်လဵၵ်ႉလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉ) လႄႈ တူဝ်ၼပ်ႉၸုတ်ႉ    \/\/ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉ floating point ဢၼ်လီၼႆၸိုင် မၼ်းတေၸႅၵ်ႇပဵၼ်     \/\/ >>> truncateNumber((3.5f))\n    \/\/ (0.5f)\n    def truncateNumber(number : Float) : Float = {\n","canonical_solution":"val integerPart = number.floor\n        val decimalPart = number - integerPart\n        decimalPart.toFloat\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_3","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေႃးဢမ်ႇၼၼ် မၼ်းတေၶိုၼ်းပၼ် false    \/\/လွင်ႈၵိုတ်းယိုဝ်းဢၼ်ဢမ်ႇမီးလွင်ႈၵိုတ်းယိုဝ်းၼၼ်ႉ ပဵၼ်လွင်ႈဢၼ်လႆႈႁၼ်ဝႃႈ တီႈဢၼ်လႂ်သေဢမ်ႇဝႃႈ လွင်ႈၵိုတ်းယိုဝ်းၶွင် သဵၼ်ႈမၢႆငိုၼ်းၼႆႉ တူၵ်းလူင်းဝႆႉတႂ်ႈ သုၼ်သေယဝ်ႉ    \/\/သူတေလႆႈပၼ်သဵၼ်ႈမၢႆ ၵၢၼ်သႂ်ႇငိုၼ်း လႄႈ ၵၢၼ်ထွၼ်ငိုၼ်း တီႈၼႂ်းမၢႆတွင်းပၢၼ်ႇ ဢၼ်တႄႇတီႈ     \/\/ >>> belowZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (false)\n    \/\/ >>> belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong)))\n    \/\/ (true)\n    def belowZero(operations : List[Long]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def belowZero(operations: List[Long]): Boolean = {\n    var balance: Long = 0\n    for (operation <- operations) {\n      balance += operation\n      if (balance < 0) {\n        return true\n      }\n    }\n    false\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(belowZero(List(1L, 2L, 3L)))         \/\/ false\n    println(belowZero(List(1L, 2L, -4L, 5L)))    \/\/ true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_4","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/MAD = average x - x_mean     \/\/လွင်ႈဢၼ်မီးတီႈၵၢင်လႄႈ တီႈဢၼ်မီးတီႈၵၢင် (တီႈဢၼ်ၼႆႉတႄႉ ပဵၼ်လွင်ႈတၢင်းဢၼ်မီးတီႈၵၢင်)    \/\/Mean Absolute Deviation ၼႆႉပဵၼ် လမ်ႉၵတ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ် ၼႂ်းၵႄႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ။    \/\/ၼ်ႂးၵႃႈ ၶေႃႈမုၼ်းဢၼ်လႆႈမႃးၼႆႉ    \/\/တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉ တူဝ်ၼပ်ႉ ဢၼ်ၶဝ်ႈၼၼ်ႉ၊ ထတ်းသၢင်ႈ လွင်ႈယိူင်းၸူး ဢၼ်ဢမ်ႇပိူင်ႈၵၼ် ဢၼ်မၢၼ်ႇမႅၼ်ႈၼၼ်ႉ။    \/\/ >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    \/\/ (1.0f)\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n","canonical_solution":"val mean = numbers.sum \/ numbers.size\n    val deviations = numbers.map(num => math.abs(num - mean))\n    val mad = deviations.sum \/ deviations.size\n    mad\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\n}\n"},{"task_id":"HumanEval_5","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/သႂ်ႇမၢႆ \"delimeter\" ၼႂ်းၵႄႈ တူဝ်ၼပ်ႉ သွင်ဢၼ် ဢၼ်ၸပ်းၵၼ် ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်သႂ်ႇဝႆႉၼၼ်ႉ ∀numbers\"     \/\/ >>> intersperse((List[Long]()), (4l))\n    \/\/ (List[Long]())\n    \/\/ >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l))\n    \/\/ (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n","canonical_solution":"if (numbers.isEmpty) {\n        List()\n      } else {\n        numbers.init.flatMap(n => List(n, delimeter)) :+ numbers.last\n      }\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_6","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း (() (()) ၼႆႉ မီးဝႆႉ ၸၼ်ႉဢၼ်ႁဵတ်းႁၢင်ႇဝႆႉသွင်ဢၼ်သေတႃႉ ((())) ၼႆႉ မီးဝႆႉ သၢမ်ဢၼ်ယဝ်ႉ။    \/\/တွၼ်ႈတႃႇၸုမ်းဢၼ်လႂ်သေဢမ်ႇဝႃႈ၊ ဢွၵ်ႇပၼ် ထၢၼ်ႈဢၼ်လိုၵ်ႉသုတ်းၶွင် လွင်ႈဢဝ်ပႅတ်ႇၵႅၼ်ႇဢၼ်မီးၼ်ႂးၵႄႈ parentheses ၼၼ်ႉယဝ်ႉ။    \/\/Input to this function is a string represented multiple groups for nested parentheses separated by spaces. ဢၼ်ၶဝ်ႈၸူးၼႂ်းၽွၼ်ႉၼႆႉ ပဵၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင်ဝႆႉ လၢႆလၢႆၸုမ်း တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆဢၼ်မီးဝႆႉ ႁင်းၶေႃ ဢၼ်ၽႄဝႆႉလူၺ်ႈႁွင်ႈၵိုတ်းဝႆႉ။    \/\/ >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def parseNestedParens(paren_string: String): List[Long] = {\n    paren_string.split(\" \").toList.map { group =>\n      var maxDepth = 0\n      var currentDepth = 0\n      group.foreach {\n        case '(' => \n          currentDepth += 1\n          maxDepth = max(maxDepth, currentDepth)\n        case ')' => \n          currentDepth -= 1\n      }\n      maxDepth.toLong\n    }\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    val result = parseNestedParens(\"(()()) ((())) () ((())()())\")\n    println(s\"Result: ${result.mkString(\", \")}\")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_7","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၸၼ်ဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ပႃး သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ၸၼ်ဢဝ်။    \/\/ >>> filterBySubstring((List[String]()), (\"a\"))\n    \/\/ (List[String]())\n    \/\/ >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\")), (\"a\"))\n    \/\/ (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n","canonical_solution":"strings.filter(_.contains(substring))\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"grunt\", \"prune\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_8","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ တေလႆႈပဵၼ် 0 လႄႈ တူဝ်ၵုၼ်းဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ တေလႆႈပဵၼ် 1 ၼၼ်ႉယဝ်ႉ။    \/\/တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်လေႃး လႄႈ တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉတဵမ်တင်းမူတ်း ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃး။    \/\/ >>> sumProduct((List[Long]()))\n    \/\/ ((0l, 1l))\n    \/\/ >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n","canonical_solution":"def sumProduct(numbers: List[Long]): (Long, Long) = {\n        val sum = numbers.sum\n        val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n    }\n\n    def main(args: Array[String]): Unit = {\n        \/\/ Test examples\n        println(sumProduct(List[Long]())) \/\/ (0L, 1L)\n        println(sumProduct(List[Long](1L, 2L, 3L, 4L))) \/\/ (10L, 24L)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n"},{"task_id":"HumanEval_9","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၼႂ်းလွင်ႈၶပ်ႉၶိုင်။    \/\/လုၵ်ႉတီႈ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ႁဵတ်းဢွၵ်ႇ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ၼမ်သုတ်း ဢၼ်လႆႈႁၼ် တေႃႇထိုင် ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ    \/\/ >>> rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong)))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rollingMax(numbers: List[Long]): List[Long] = {\n        var maxSoFar = Long.MinValue\n        numbers.map { num =>\n            maxSoFar = max(maxSoFar, num)\n            maxSoFar\n        }\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_10","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/- သႂ်ႇပၼ်တီႈသုတ်းၶွင် string ဢၼ်ၽိတ်းပိူင်ႈၶွင် string prefix ဢၼ်မႃးၼႃႈ palindromic suffix။    \/\/- သွၵ်ႈႁႃ postfix ဢၼ်ယၢဝ်းသေပိူၼ်ႈ ၼႂ်းသဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ဢၼ်ပဵၼ် palindrome ၼၼ်ႉ    \/\/ပၢႆးဝူၼ်ႉ ဢႄႇလ်ၵေႃးရိတ်ႉသမ်ႇၼႆႉ ငၢႆႈၼႃႇ၊    \/\/သွၵ်ႈႁႃ palindrome ဢၼ်တိုၵ်ႉသုတ်း ဢၼ်တႄႇလူၺ်ႈ သဵၼ်ႈဢၼ်ပၼ်ဝႆႉၼၼ်ႉယဝ်ႉ။    \/\/ >>> makePalindrome((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> makePalindrome((\"cat\"))\n    \/\/ (\"catac\")\n    \/\/ >>> makePalindrome((\"cata\"))\n    \/\/ (\"catac\")\n    def makePalindrome(string : String) : String = {\n","canonical_solution":"def makePalindrome(string: String): String = {\n    \/\/ Helper function to check if a string is a palindrome\n    def isPalindrome(s: String): Boolean = s == s.reverse\n\n    \/\/ Find the longest palindromic suffix\n    var endIndex = string.length\n    while (endIndex > 0 && !isPalindrome(string.substring(endIndex - 1))) {\n      endIndex -= 1\n    }\n\n    \/\/ Extract the non-palindromic prefix\n    val prefix = string.substring(0, endIndex - 1)\n\n    \/\/ Append the reverse of the prefix to form the shortest palindrome\n    string + prefix.reverse\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"},{"task_id":"HumanEval_11","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ႁဵတ်းသၢင်ႈ binary XOR ၼိူဝ် inputs ၸိူဝ်းၼႆႉလႄႈ ၶိုၼ်းဢဝ်ၼမ်ႉတွၼ်းမၼ်းမႃးပဵၼ် string။    \/\/Input ၼႆႉပဵၼ် သွင်တူဝ်ဢၼ်ပဵၼ် a လႄႈ b ဢၼ်ပႃးဝႆႉ တူဝ် 1 လႄႈ 0 ၼၼ်ႉၵူၺ်းယဝ်ႉ။    \/\/ >>> stringXor((\"010\"), (\"110\"))\n    \/\/ (\"100\")\n    def stringXor(a : String, b : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def stringXor(a: String, b: String): String = {\n    (a zip b).map { case (charA, charB) => \n      if (charA == charB) '0' else '1'\n    }.mkString\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"},{"task_id":"HumanEval_12","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/Return None in case the input list is empty. ပေႃးဝႃႈ သဵၼ်ႈမၢႆ ဢၼ်တေဢဝ်ၶဝ်ႈၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးၼႆၸိုင် ၶိုၼ်းဢဝ် None လၢႆႈပၼ်    \/\/ၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ထႅဝ်လိၵ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ်ဢၼ်ယၢဝ်းသေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် ဢၼ်ဢွၼ်တၢင်းသုတ်းၼၼ်ႉၶိုၼ်း ပေႃးပဵၼ်တူဝ်ထႅဝ်လိၵ်ႈၼမ်လိူဝ်ၼၼ်ႉ    \/\/ >>> longest((List[String]()))\n    \/\/ None\n    \/\/ >>> longest((List[String](\"a\", \"b\", \"c\")))\n    \/\/ Some(\"a\")\n    \/\/ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    \/\/ Some(\"ccc\")\n    def longest(strings : List[String]) : Option[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Out of list of strings, return the longest one. Return the first one in case of multiple\n    \/\/ strings of the same length. Return None in case the input list is empty.\n    def longest(strings: List[String]): Option[String] = {\n        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(Some(\"x\")));\n    assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(Some(\"zzzz\")));\n    }\n\n}\n"},{"task_id":"HumanEval_13","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇၽႄဢၼ်ၵဵဝ်ႇၵၼ်ဢၼ်ယ်ႂႇသေပိူၼ်ႈ ၶွင်တူဝ်ၼပ်ႉတဵမ် a လႄႈ b သွင်တူဝ်ၼၼ်ႉမႃး    \/\/ >>> greatestCommonDivisor((3l), (5l))\n    \/\/ (1l)\n    \/\/ >>> greatestCommonDivisor((25l), (15l))\n    \/\/ (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Return a greatest common divisor of two integers a and b\n    \/\/ >>> greatestCommonDivisor((3l), (5l))\n    \/\/ (1l)\n    \/\/ >>> greatestCommonDivisor((25l), (15l))\n    \/\/ (5l)\n    def greatestCommonDivisor(a: Long, b: Long): Long = {\n        if (b == 0) a else greatestCommonDivisor(b, a % b)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_14","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ prefix တင်းမူတ်း ဢၼ်လုၵ်ႉတီႈ ဢၼ်ယၢဝ်းသေပိူၼ်ႈ တေႃႇထိုင် ဢၼ်ပွတ်းသေပိူၼ်ႈ ၶွင် string input ၼၼ်ႉၶိုၼ်းမႃး    \/\/ >>> allPrefixes((\"abc\"))\n    \/\/ (List[String](\"a\", \"ab\", \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return list of all prefixes from shortest to longest of the input string\n  \/\/ >>> allPrefixes((\"abc\"))\n  \/\/ (List[String](\"a\", \"ab\", \"abc\"))\n  def allPrefixes(string: String): List[String] = {\n    (1 to string.length).map(i => string.substring(0, i)).toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_15","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် string ဢၼ်ပႃး တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈသေ တူဝ်ၼပ်ႉတႄႇတီႈ 0 တေႃႇထိုင် n ႁူမ်ႈပႃးၼၼ်ႉ။     \/\/ >>> stringSequence((0l))\n    \/\/ (\"0\")\n    \/\/ >>> stringSequence((5l))\n    \/\/ (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def stringSequence(n: Long): String = {\n    (0L to n).mkString(\" \")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"},{"task_id":"HumanEval_16","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေႃးဝႃႈႁဝ်းပၼ် string ၼႆ ႁဝ်းတေႁႃတူဝ်လိၵ်ႈဢၼ်ဢမ်ႇမိူၼ်ၵၼ်မၼ်း (ဢမ်ႇဝႃႈတူဝ်ယႂ်ႇလႄႈတူဝ်ယၢဝ်း) မၼ်းတေမီးလၢႆတူဝ်    \/\/ >>> countDistinctCharacters((\"xyzXYZ\"))\n    \/\/ (3l)\n    \/\/ >>> countDistinctCharacters((\"Jerry\"))\n    \/\/ (4l)\n    def countDistinctCharacters(string : String) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Given a string, find out how many distinct characters (regardless of case) does it consist of\n  \/\/ >>> countDistinctCharacters((\"xyzXYZ\"))\n  \/\/ (3l)\n  \/\/ >>> countDistinctCharacters((\"Jerry\"))\n  \/\/ (4l)\n  def countDistinctCharacters(string: String): Long = {\n    string.toLowerCase.toSet.size.toLong\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n"},{"task_id":"HumanEval_17","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/'ႁႃႈ' - ၶွတ်ႇတႃႇၼေႃႇတႄႇ၊ ယိုတ်းဝႆႉ သဵင်ဢၼ်ၼိူင်ႈ။    \/\/'o Saji' - ၶိုင်ႈၼူၵ်ႉ၊ ၸူဝ်ႈၶၢဝ်းသွင်ၵမ်း     \/\/'o' - ပဵၼ်ၼူၵ်ႉဢၼ်တဵမ်ထူၼ်ႈ၊ ၸူဝ်ႈၶၢဝ်း 4 သႅၼ်း။    \/\/တီႈၼႆႈၼႆႉ မီးဝႆႉ မၢႆတွင်းဢၼ်ၼိုင်ႈ။    \/\/ဢမ်ႇပဵၼ်ၵမ်းလိုၼ်းသုတ်း။    \/\/ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇၸႅၵ်ႇထႅဝ်လိၵ်ႈဢၼ်ၼႆႉ လႄႈ မိူဝ်းၶိုၼ်း သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵပ်းၵၢႆႇလူၺ်ႈတင်း တၢင်းၼမ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်    \/\/Input to this function is a string representing musical notes in a special ASCII format. ဢၼ်ၶဝ်ႈၸူးၼႂ်းၽွၼ်ႉၼႆႉ ပဵၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင် ၼေႃႇတႃႇၽဵင်းၵႂၢမ်း ၼႂ်းပိူင်ၾၢင် ASCII ဢၼ်ၶိုၵ်ႉတွၼ်း။    \/\/ >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    \/\/ (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def parseMusic(music_string: String): List[Long] = {\n    val noteMap = Map(\"o\" -> 4L, \"o|\" -> 2L, \".|\" -> 1L)\n    val notes = music_string.split(\" \")\n    notes.toList.map(note => noteMap(note))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_18","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶူၼ်ႉႁႃတူၺ်းဝႃႈ ၸႅၼ်ႇထႅဝ်ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တေၸၢင်ႈႁၼ်လႆႈတီႈၼႂ်း ၸႅၼ်ႇထႅဝ်ငဝ်ႈမၼ်းလၢႆလၢႆၵမ်းၼႆသေ ၵဵပ်းဢဝ် ဢၼ်ၶပ်ႉၵၼ်ဝႆႉၸိူဝ်းၼၼ်ႉ    \/\/ >>> howManyTimes((\"\"), (\"a\"))\n    \/\/ (0l)\n    \/\/ >>> howManyTimes((\"aaa\"), (\"a\"))\n    \/\/ (3l)\n    \/\/ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    \/\/ (3l)\n    def howManyTimes(string : String, substring : String) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def howManyTimes(string: String, substring: String): Long = {\n        if (substring.isEmpty || string.isEmpty) return 0L\n        var count: Long = 0L\n        for (i <- 0 to (string.length - substring.length)) {\n            if (string.substring(i, i + substring.length) == substring) {\n                count += 1\n            }\n        }\n        count\n    }\n\n    \/\/ Test cases\n    def main(args: Array[String]): Unit = {\n        println(howManyTimes(\"\", \"a\"))    \/\/ Output: 0\n        println(howManyTimes(\"aaa\", \"a\")) \/\/ Output: 3\n        println(howManyTimes(\"aaaa\", \"aa\")) \/\/ Output: 3\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_19","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉတီႈလဵၵ်ႉသုတ်း တေႃႇထိုင် ဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉ    \/\/ဢၼ်ထုၵ်ႇမႅၼ်ႈဢၼ်လိူၵ်ႈလႆႈၼၼ်ႉပဵၼ် 'သုၼ်'၊ 'ၼိုင်ႈ'၊ 'သွင်'၊ 'သၢမ်'၊ 'သီႇ'၊ 'ႁႃႈ'၊ 'ႁူၵ်း'၊ 'ၸဵတ်း'၊ 'ဢဵတ်း' လႄႈ 'သိပ်း' ၼႆယဝ်ႉ။    \/\/Input ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉတီႈၵႄႈ တူဝ်ၼပ်ႉဢၼ်တႄႇတီႈ သုၼ် တေႃႇထိုင် တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈၼၼ်ႉယဝ်ႉ။    \/\/ >>> sortNumbers((\"three one five\"))\n    \/\/ (\"one three five\")\n    def sortNumbers(numbers : String) : String = {\n","canonical_solution":"def sortNumbers(numbers: String): String = {\n    val numberWords = Map(\n      \"zero\" -> 0,\n      \"one\" -> 1,\n      \"two\" -> 2,\n      \"three\" -> 3,\n      \"four\" -> 4,\n      \"five\" -> 5,\n      \"six\" -> 6,\n      \"seven\" -> 7,\n      \"eight\" -> 8,\n      \"nine\" -> 9\n    )\n    \n    numbers.split(\" \")\n      .sortBy(word => numberWords(word))\n      .mkString(\" \")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"},{"task_id":"HumanEval_20","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တၢင်ႇၸိူဝ်းလႄႈ ၶိုၼ်းဢဝ်ၶဝ်မႃးၸွမ်းၼင်ႇပိူင် (တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉလိူဝ်၊ တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇလိူဝ်) ။    \/\/တီႈၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ (တၢင်းယၢဝ်းမၼ်းဢမ်ႇယွမ်း 2 တူဝ်) လိူၵ်ႈဢဝ်သေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ဢၼ်ၸမ်သုတ်းတင်းမူတ်း 2 တူဝ်     \/\/ >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    \/\/ ((2.0f, 2.2f))\n    \/\/ >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    \/\/ ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def findClosestElements(numbers: List[Float]): (Float, Float) = {\n    require(numbers.length >= 2, \"List must contain at least two elements\")\n    val sortedNumbers = numbers.sorted\n\n    var minDiff = Float.MaxValue\n    var closestPair = (0.0f, 0.0f)\n\n    for(i <- 0 until sortedNumbers.length - 1) {\n      val currentDiff = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n      if(currentDiff < minDiff) {\n        minDiff = currentDiff\n        closestPair = (sortedNumbers(i), sortedNumbers(i + 1))\n      }\n    }\n    \n    closestPair\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"},{"task_id":"HumanEval_21","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉ တေပဵၼ် 0 လႄႈ ဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉ တေပဵၼ် 1    \/\/ပေႃးလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉ (ဢၼ်ပႃးဝႆႉ တူဝ်ၼပ်ႉ တီႈဢေႇသုတ်းသွင်တူဝ်) ၼႆၸိုင် ဢဝ်လွင်ႈလႅၵ်ႈလၢႆႈ ထႅဝ်ၸႅတ်ႈၼၼ်ႉသေ ႁဵတ်းၸွမ်း သဵၼ်ႈမၢႆၼၼ်ႉ၊    \/\/ >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))\n    \/\/ (List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Given list of numbers (of at least two elements), apply a linear transform to that list,\n  \/\/ such that the smallest number will become 0 and the largest will become 1\n  def rescaleToUnit(numbers: List[Float]): List[Float] = {\n    val minVal = numbers.min\n    val maxVal = numbers.max\n    numbers.map(num => (num - minVal) \/ (maxVal - minVal))\n  }\n}\n\n\/\/ Usage example\nobject Main extends App {\n  val numbers = List[Float](1.0f, 2.0f, 3.0f, 4.0f, 5.0f)\n  val rescaledNumbers = Problem.rescaleToUnit(numbers)\n  println(rescaledNumbers) \/\/ Output: List(0.0, 0.25, 0.5, 0.75, 1.0)\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat, 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat, 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n"},{"task_id":"HumanEval_22","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၸၢၵ်ႈၸႅၵ်ႉ ဢၼ်ပၼ်ဝႆႉ သဵၼ်ႈမၢႆၶွင် ၵႃႈၶၼ် scalathon ဢၼ်လႂ်သေဢမ်ႇဝႃႈ တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉတဵမ်ၵူၺ်း    \/\/ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    \/\/ (List[Long](5l.toLong))\n    \/\/ >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values : List[Any]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def filterIntegers(values: List[Any]): List[Long] = {\n    values.collect {\n      case l: Long => l\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(filterIntegers(List[Any](\"a\", 3.14f, 5l))) \/\/ List(5)\n    println(filterIntegers(List[Any](1l, 2l, 3l, \"abc\", Map[Long, Long](), List[Long]()))) \/\/ List(1, 2, 3)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_23","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ်တၢင်းယၢဝ်း string ဢၼ်ပၼ်ဝႆႉၼၼ်ႉမႃး    \/\/ >>> stringLength((\"\"))\n    \/\/ (0l)\n    \/\/ >>> stringLength((\"abc\"))\n    \/\/ (3l)\n    def strlen(string : String) : Long = {\n","canonical_solution":"def strlen(string: String): Long = {\n        string.length.toLong\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"},{"task_id":"HumanEval_24","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉ n ၼၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ဢၼ်ၸႅၵ်ႇ n ႁ်ႂႈပဵၼ်ဢၼ်ၽဵင်ႇပဵင်းၼၼ်ႉ၊ ဢၼ်လဵၵ်ႉလိူဝ် n ၼၼ်ႉ။    \/\/ >>> largestDivisor((15l))\n    \/\/ (5l)\n    def largestDivisor(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ For a given number n, find the largest number that divides n evenly, smaller than n\n    \/\/ >>> largestDivisor(15l)\n    \/\/ (5l)\n    def largestDivisor(n: Long): Long = {\n        for (i <- (n \/ 2) to 1 by -1) {\n            if (n % i == 0) return i\n        }\n        1L  \/\/ if no divisor found, return 1 (since 1 divides any number)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"},{"task_id":"HumanEval_25","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈၼႆႉ တေလႆႈၽဵင်ႇပဵင်းၵၼ်တၢင်း တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉတင်းမူတ်းၼၼ်ႉယဝ်ႉ။    \/\/တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈဢၼ်ၼႆႉ ထုၵ်ႇလီၸီႉၸမ်ႈဝႆႉဝႃႈ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တၢင်း တူဝ်ၼပ်ႉဢၼ်မၼ်းလႆႈမႃးတီႈ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉယဝ်ႉ။    \/\/ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈ ဢၼ်တႄႇဢဝ် တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသေပိူၼ်ႈ တေႃႇထိုင် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းမႃး။    \/\/ >>> factorize((8l))\n    \/\/ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    \/\/ >>> factorize((25l))\n    \/\/ (List[Long](5l.toLong, 5l.toLong))\n    \/\/ >>> factorize((70l))\n    \/\/ (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def factorize(n: Long): List[Long] = {\n    var num = n\n    val factors = ListBuffer[Long]()\n    \n    var i = 2L\n    while (i <= sqrt(num).toLong) {\n      while (num % i == 0) {\n        factors += i\n        num \/= i\n      }\n      i += 1\n    }\n    \n    if (num > 1) {\n      factors += num\n    }\n    \n    factors.toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_26","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/မႄးထတ်းပၼ် လွင်ႈၵွင်ႉၵၢႆႇ ဢၼ်ဢမ်ႇပိူင်ႈၵၼ်တင်း ဢၼ်သႂ်ႇဝႆႉ။    \/\/တီႈၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ ထွၼ်ပႅတ်ႈ တူဝ်ၼပ်ႉဢၼ်မီးမႃး ၼမ်လိူဝ်ၼိုင်ႈပွၵ်ႈၼၼ်ႉ။    \/\/ >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    \/\/ (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def removeDuplicates(numbers: List[Long]): List[Long] = {\n    val elementCount = numbers.groupBy(identity).mapValues(_.size)\n    numbers.filter(num => elementCount(num) == 1)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List[Long](1L, 2L, 3L, 2L, 4L)\n    println(removeDuplicates(numbers)) \/\/ Output: List(1, 3, 4)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_27","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ဢဝ်တူဝ်လိၵ်ႈတူဝ်လဵၵ်ႉသေ လႅၵ်ႈပဵၼ် တူဝ်လိၵ်ႈတူဝ်ယႂ်ႇ လႄႈ တူဝ်လိၵ်ႈတူဝ်ယႂ်ႇ လႅၵ်ႈပဵၼ်တူဝ်လဵၵ်ႉ။     \/\/ >>> flipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    def flipCase(string : String) : String = {\n","canonical_solution":"def flipCase(string: String): String = {\n    string.map {\n      case c if c.isLower => c.toUpper\n      case c if c.isUpper => c.toLower\n      case c => c\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"},{"task_id":"HumanEval_28","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/Concatenate list of strings into a single string  သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉသဵၼ်ႈလဵဝ်    \/\/ >>> concatenate((List[String]()))\n    \/\/ (\"\")\n    \/\/ >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n    \/\/ (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ Concatenate list of strings into a single string\n    \/\/ >>> concatenate((List[String]()))\n    \/\/ (\"\")\n    \/\/ >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n    \/\/ (\"abc\")\n    def concatenate(strings: List[String]): String = {\n        strings.mkString(\"\")\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"},{"task_id":"HumanEval_29","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၸၼ်ဢဝ် သဵၼ်ႈမၢႆ ဢၼ်တေၶဝ်ႈမႃးၼၼ်ႉသေ ၸၼ်ဢဝ် ဢၼ်တေတႄႇမႃးတီႈ prefix ၼၼ်ႉၵူၺ်း။    \/\/ >>> filterByPrefix((List[String]()), (\"a\"))\n    \/\/ (List[String]())\n    \/\/ >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\")), (\"a\"))\n    \/\/ (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n","canonical_solution":"strings.filter(_.startsWith(prefix))\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_30","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်မီးၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉၵူၺ်း    \/\/ >>> getPositive((List[Long](-1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\n    \/\/ (List[Long](2l.toLong, 5l.toLong, 6l.toLong))\n    \/\/ >>> getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    \/\/ (List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))\n    def getPositive(l : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getPositive(l: List[Long]): List[Long] = {\n        l.filter(_ > 0)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_31","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ်လွင်ႈမၢၼ်ႇမႅၼ်ႈမၼ်းၶိုၼ်း သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ လႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆၸိုင် ပဵၼ်ၽိတ်းယဝ်ႉ။    \/\/ >>> isPrime((6l))\n    \/\/ (false)\n    \/\/ >>> isPrime((101l))\n    \/\/ (true)\n    \/\/ >>> isPrime((11l))\n    \/\/ (true)\n    \/\/ >>> isPrime((13441l))\n    \/\/ (true)\n    \/\/ >>> isPrime((61l))\n    \/\/ (true)\n    \/\/ >>> isPrime((4l))\n    \/\/ (false)\n    \/\/ >>> isPrime((1l))\n    \/\/ (false)\n    def isPrime(n : Long) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return true if a given number is prime, and false otherwise.\n  def isPrime(n: Long): Boolean = {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n      if (n % i == 0 || n % (i + 2) == 0) return false\n      i += 6\n    }\n    true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_33","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/မၼ်းတေလႆႈၸႅၵ်ႇဝႆႉၸွမ်း ၵႃႈၶၼ်ဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း ထႅဝ်လိၵ်ႈဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း l ၼၼ်ႉယူႇ၊ ၵူၺ်းၵႃႈ မၼ်းတေလႆႈၸႅၵ်ႇဝႆႉၸွမ်းၵၼ်။    \/\/l' ၼႆႉမိူၼ်ၵၼ်တၢင်း l တီႈၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇၸႅၵ်ႇလႆႈ သၢမ်တူဝ်ၼၼ်ႉသေ ၵႃႈၶၼ်မၼ်းတီႈတူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇလႆႈ သၢမ်တူဝ်ၼၼ်ႉၵေႃႈ မိူၼ်ၵၼ်ယူႇယဝ်ႉ။    \/\/ပိူင်ဢၼ်ၼႆႉ ဢဝ်သဵၼ်ႈမၢႆ l လႄႈ ၶိုၼ်းပၼ်သဵၼ်ႈမၢႆ l' ၼင်ႇၼႆ     \/\/ >>> sortThird((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    \/\/ >>> sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))\n    \/\/ (List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))\n    def sortThird(l : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \n  def sortThird(l: List[Long]): List[Long] = {\n    \/\/ Get the elements at indices divisible by 3\n    val elementsAtThirdIndices = l.zipWithIndex.collect {\n      case (value, index) if index % 3 == 0 => value\n    }\n    \n    \/\/ Sort the collected elements\n    val sortedElements = elementsAtThirdIndices.sorted\n    \n    \/\/ Replace elements at indices divisible by 3 with the sorted ones\n    l.zipWithIndex.map {\n      case (_, index) if index % 3 == 0 => sortedElements(index \/ 3)\n      case (value, _) => value\n    }\n  }\n\n  \/\/ Example usage:\n  def main(args: Array[String]): Unit = {\n    println(sortThird(List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    println(sortThird(List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong, 1l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_34","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် ၶူဝ်းၶွင်ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်လႆႈၸႅၵ်ႇဝႆႉတီႈၼႂ်း သဵၼ်ႈမၢႆၼၼ်ႉ ၶိုၼ်းဢဝ်မႃး    \/\/ >>> unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    \/\/ (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n","canonical_solution":"def unique(l: List[Long]): List[Long] = {\n    l.toSet.toList.sorted\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_35","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉမႃး    \/\/ >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (3l)\n    \/\/ >>> maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    \/\/ (123l)\n    def maxElement(l : List[Long]) : Long = {\n","canonical_solution":"def maxElement(l: List[Long]): Long = {\n    l.max\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"},{"task_id":"HumanEval_36","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ 7 မႃးၶိုၼ်း ၼႂ်းတူဝ်ၼပ်ႉတဵမ် ဢၼ်လဵၵ်ႉလိူဝ် n ဢၼ်ၸႅၵ်ႇလႆႈ 11 ဢမ်ႇၼၼ် 13 ၼၼ်ႉ။    \/\/ >>> fizzBuzz((50l))\n    \/\/ (0l)\n    \/\/ >>> fizzBuzz((78l))\n    \/\/ (2l)\n    \/\/ >>> fizzBuzz((79l))\n    \/\/ (3l)\n    def fizzBuzz(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fizzBuzz(n: Long): Long = {\n    var count = 0L\n    for (i <- 1L until n) {\n      if (i % 11 == 0 || i % 13 == 0) {\n        count += i.toString.count(_ == '7')\n      }\n    }\n    count\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"},{"task_id":"HumanEval_37","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/မၼ်းတေလႆႈၸႅၵ်ႇဝႆႉပဵၼ် ထႅဝ်ဢၼ်ၼိူင်ႈ တေႃႇ ထႅဝ်ဢၼ်ၼိူင်ႈ ၶွင် တူဝ်ၼပ်ႉ l၊ ၵူၺ်းၵႃႈ မၼ်းတေလႆႈၸႅၵ်ႇဝႆႉ။    \/\/l' ၼႆႉမိူၼ်ၵၼ်တၢင်း l တီႈၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ၊ ၵူၺ်းၵႃႈ ၵႃႈၶၼ်မၼ်းတီႈ တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉတႄႉ ပဵၼ်မိူၼ်ၵၼ်ယူႇယဝ်ႉ။    \/\/ပိူင်ဢၼ်ၼႆႉ ဢဝ်သဵၼ်ႈမၢႆ l လႄႈ ၶိုၼ်းပၼ်သဵၼ်ႈမၢႆ l' ၼင်ႇၼႆ     \/\/ >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    \/\/ >>> sortEven((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (List[Long](3l.toLong, 6l.toLong, 5l.toLong, 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ This function takes a list l and returns a list l' such that\n  \/\/ l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  \/\/ to the values of the even indicies of l, but sorted.\n  def sortEven(l: List[Long]): List[Long] = {\n    val evenIndices = l.indices.filter(_ % 2 == 0)\n    val sortedEvens = evenIndices.map(l(_)).sorted\n\n    l.indices.map { index =>\n      if (index % 2 == 0) sortedEvens(evenIndices.indexOf(index))\n      else l(index)\n    }.toList\n  }\n\n  \/\/ Examples\n  def main(args: Array[String]): Unit = {\n    println(sortEven(List[Long](1L, 2L, 3L)))\n    println(sortEven(List[Long](5L, 6L, 3L, 4L)))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_39","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/prime_fib ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ n-th ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉ Fibonacci လႄႈ မၼ်းပဵၼ် prime ၵေႃႈလႆႈ    \/\/ >>> primeFib((1l))\n    \/\/ (2l)\n    \/\/ >>> primeFib((2l))\n    \/\/ (3l)\n    \/\/ >>> primeFib((3l))\n    \/\/ (5l)\n    \/\/ >>> primeFib((4l))\n    \/\/ (13l)\n    \/\/ >>> primeFib((5l))\n    \/\/ (89l)\n    def primeFib(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def primeFib(n: Long): Long = {\n    \/\/ Function to check if a number is prime\n    def isPrime(num: Long): Boolean = {\n      if (num <= 1) return false\n      if (num == 2) return true\n      if (num % 2 == 0) return false\n      for (i <- Range(3, math.sqrt(num).toInt + 1, 2)) {\n        if (num % i == 0) return false\n      }\n      true\n    }\n\n    \/\/ Function to generate Fibonacci numbers\n    def fibonacciStream(): Stream[Long] = {\n      def fibs(a: Long, b: Long): Stream[Long] = a #:: fibs(b, a + b)\n      fibs(0, 1)\n    }\n\n    \/\/ Find the n-th Fibonacci number that is also prime\n    val primeFibs = fibonacciStream().filter(isPrime)\n    primeFibs.take(n.toInt).last\n  }\n\n  \/\/ Test the function\n  def main(args: Array[String]): Unit = {\n    println(primeFib(1L)) \/\/ 2\n    println(primeFib(2L)) \/\/ 3\n    println(primeFib(3L)) \/\/ 5\n    println(primeFib(4L)) \/\/ 13\n    println(primeFib(5L)) \/\/ 89\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"},{"task_id":"HumanEval_40","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/လွင်ႈႁူမ်ႈၵၼ်ပဵၼ်သုၼ် လႄႈ လွင်ႈၽိတ်းၽိတ်းတၢင်ႇၸိူဝ်း။    \/\/မၼ်းတေၶိုၼ်းမိူဝ်း true သင်ၸိူဝ်ႉဝႃႈ မီးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ် သၢမ်တူဝ် ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်     \/\/triple_sum_to_zero ၼႆႉ ဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပႃးဝႆႉၼႂ်း သဵၼ်ႈမၢႆၼၼ်ႉသေ ႁဵတ်းပဵၼ် ၶူဝ်းၶွင်ဢၼ်သႂ်ႇဝႆႉၼၼ်ႉယဝ်ႉ။    \/\/ >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((List[Long](1l.toLong)))\n    \/\/ (false)\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ triples_sum_to_zero takes a list of integers as an input.\n    \/\/ it returns true if there are three distinct elements in the list that\n    \/\/ sum to zero, and false otherwise.\n    def triplesSumToZero(l: List[Long]): Boolean = {\n        val n = l.length\n        if (n < 3) return false\n\n        \/\/ Sort the list to use the two-pointer technique\n        val sortedList = l.sorted\n\n        \/\/ Iterate over the list\n        for (i <- 0 until n - 2) {\n            var left = i + 1\n            var right = n - 1\n\n            \/\/ Use two pointers to find the remaining two numbers\n            while (left < right) {\n                val currentSum = sortedList(i) + sortedList(left) + sortedList(right)\n                if (currentSum == 0) {\n                    return true\n                } else if (currentSum < 0) {\n                    left += 1\n                } else {\n                    right -= 1\n                }\n            }\n        }\n\n        false\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_41","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼႆႉ မၼ်းဢွၵ်ႇမႃး တူဝ်ၼပ်ႉ လွင်ႈတုမ်ႉတိူဝ်ႉၸိူင်ႉၼၼ်။    \/\/ၼႂ်းသဵၼ်ႈတၢင်းၶဝ် မိူၼ်ၼင်ႇဝႃႈ ၶဝ်ဢမ်ႇလႆႈတုမ်ႉတိူဝ်ႉၵၼ်။    \/\/ၵူၺ်းၵႃႈ လူတ်ႉၵႃးၼႆႉ ႁႅင်းယႂ်ႇလႄႈ ႁႅင်းၶၢမ်ႇလီတႄႉတႄႉ၊ ယွၼ်ႉၼၼ်လႄႈ ၶဝ်တိုၵ်ႉၶၢႆႉယူႇတိၵ်းတိၵ်းယဝ်ႉ။    \/\/မိူဝ်ႈလူတ်ႉၶိူင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇသၢႆႉ ၽၢႆႇၶႂႃ မႃးၽႃႇၺႃးလူတ်ႉၶိူင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇသၢႆႉ ၽၢႆႇၶႂႃၼၼ်ႉယဝ်ႉ။    \/\/ၵႃးၵူႈလမ်း ၶီႇတၢင်းဝႆးလဵဝ်ၵၼ် ၵႃးသွင်လမ်းၼႆႉ လၢတ်ႈဝႃႈ ၶီႇၵၼ်ၼႆယဝ်ႉ။    \/\/ၵႃးသွင်လမ်းၼႆႉ တႄႇမႃးတီႈၵႆၵႆၵၼ်    \/\/ၵႃး n လမ်းၼႆႉ ၶီႇၵႂႃႇၽၢႆႇသၢႆႉၸူးၽၢႆႇၶႂႃ၊ မိူဝ်ႈလဵဝ်ၵၼ် ၵႃး n လမ်းၵေႃႈ ၶီႇၵႂႃႇၸွမ်းၵၼ်။    \/\/ဝူၼ်ႉဝႃႈ သဵၼ်ႈတၢင်းဢၼ်သိုဝ်ႈယူဝ်းၼၼ်ႉ ပဵၼ်သဵၼ်ႈတၢင်းဢၼ်ယၢဝ်းဢမ်ႇမီးတီႈသုတ်းၼႆ။    def carRaceCollision(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Imagine a road that's a perfectly straight infinitely long line.\n  \/\/ n cars are driving left to right; simultaneously, a different set of n cars\n  \/\/ are driving right to left. The two sets of cars start out being very far from\n  \/\/ each other. All cars move at the same speed. Two cars are said to collide\n  \/\/ when a car that's moving left to right hits a car that's moving right to left.\n  \/\/ However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  \/\/ in their trajectory as if they did not collide.\n  \/\/ This function outputs the number of such collisions.\n  def carRaceCollision(n: Long): Long = {\n    n\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"},{"task_id":"HumanEval_42","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/သဵၼ်ႈမၢႆ ဢၼ်လႆႈၶိုၼ်းမႃးၼၼ်ႉ မီးဝႆႉ တူဝ်ၼပ်ႉဢၼ်တိူဝ်းလိူဝ်မႃးထႅင်ႈ 1.    \/\/ >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    \/\/ >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    \/\/ (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList(l : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Return list with elements incremented by 1.\n    def incrList(l: List[Long]): List[Long] = {\n        l.map(_ + 1)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong, 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_43","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/လွင်ႈႁူမ်ႈၵၼ်ပဵၼ်သုၼ် လႄႈ လွင်ႈၽိတ်းၽိတ်းတၢင်ႇၸိူဝ်း။    \/\/မၼ်းတေၶိုၼ်းမွၵ်ႇၵႂႃႇ true သင်ၸိူဝ်ႉဝႃႈ မီးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ် သွင်ဢၼ် ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်     \/\/pairs_sum_to_zero ဢဝ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ပဵၼ်ၶေႃႈၶဝ်ႈ။    \/\/ >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    \/\/ (true)\n    \/\/ >>> pairsSumToZero((List[Long](1l.toLong)))\n    \/\/ (false)\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def pairsSumToZero(l: List[Long]): Boolean = {\n        val seen = HashSet[Long]()\n        for (num <- l) {\n            if (seen.contains(-num)) {\n                return true\n            }\n            seen.add(num)\n        }\n        false\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_44","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ၼပ်ႉငဝ်ႈမၼ်းၼႆႉ ဢေႇလိူဝ်သေ 10 ၼၼ်ႉယဝ်ႉ။    \/\/ၶိုၼ်းဢဝ် တူဝ်တႅၼ်း သဵၼ်ႈမၢႆ ဢၼ်လႆႈပိၼ်ႇပဵၼ်မႃး။    \/\/လႅၵ်ႈလၢႆႈ တူဝ်ၼပ်ႉငဝ်ႈတႄႇ တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈ x ၼၼ်ႉပဵၼ် တူဝ်ၼပ်ႉငဝ်ႈတႄႇ။    \/\/ >>> changeBase((8l), (3l))\n    \/\/ (\"22\")\n    \/\/ >>> changeBase((8l), (2l))\n    \/\/ (\"1000\")\n    \/\/ >>> changeBase((7l), (2l))\n    \/\/ (\"111\")\n    def changeBase(x : Long, base : Long) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def changeBase(x: Long, base: Long): String = {\n        require(base > 1 && base < 10, \"Base must be between 2 and 9\")\n        \n        if (x == 0) return \"0\"\n\n        val result = new StringBuilder()\n        var number = x\n\n        while (number > 0) {\n            val remainder = number % base\n            result.append(remainder.toString)\n            number \/= base\n        }\n\n        result.reverse.toString()\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"},{"task_id":"HumanEval_45","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေႃးႁဝ်းတူၺ်းတၢင်းယၢဝ်းၽၢႆႇဢၼ်ၼိူင်ႈလႄႈ ၼႃႈလိၼ်ဢၼ်လႆႈၶိုၼ်းသုင်သုတ်း တွၼ်ႈတႃႇသၢမ်ၸဵင်ႇဢၼ်ၼိူင်ႈၼႆၸိုင်    \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    def triangleArea(a : Long, h : Long) : Float = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Given length of a side and height, return area for a triangle.\n    \/\/ >>> triangleArea(5l, 3l)\n    \/\/ (7.5f)\n    def triangleArea(a: Long, h: Long): Float = {\n        (a * h \/ 2.0).toFloat\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_46","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶႅၼ်းတေႃႈ တႅမ်ႈပၼ် တူဝ်ဢိင် တႃႇတေၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉ n-th ၶွင် တူဝ်ၼပ်ႉ fib4 ၼၼ်ႉ လူၺ်ႈမီးၼမ်ႉတွၼ်းလီ။ ယႃႇပေၸႂ်ႉတိုဝ်း လွင်ႈၶိုၼ်းတႄႇ။    \/\/fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)    \/\/fib4(3) -> 0     \/\/fib4(2) -> 2     \/\/fib4(1) -> 0     \/\/fib4(0) -> 0     \/\/လွင်ႈၶပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉ Fib4 ၼႆႉ ပဵၼ်လွင်ႈၶပ်ႉၸႅၼ်ႇ ဢၼ်ငၢႆးၵၼ်တၢင်း လွင်ႈၶပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉ Fibbonacci ဢၼ်မၵ်းမၼ်ႈဝႆႉၼင်ႇပႃႈတႂ်ႈၼႆႉ:    \/\/ >>> fib4((5l))\n    \/\/ (4l)\n    \/\/ >>> fib4((6l))\n    \/\/ (8l)\n    \/\/ >>> fib4((7l))\n    \/\/ (14l)\n    def fib4(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fib4(n: Long): Long = {\n    if (n == 0 || n == 1) return 0\n    if (n == 2) return 2\n    if (n == 3) return 0\n\n    var a: Long = 0\n    var b: Long = 0\n    var c: Long = 2\n    var d: Long = 0\n    \n    var result: Long = 0\n    \n    for (i <- 4L to n) {\n      result = a + b + c + d\n      a = b\n      b = c\n      c = d\n      d = result\n    }\n    \n    result\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"},{"task_id":"HumanEval_47","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် သၢႆၵၢၼ်မိၼ် ဢီႇလႅမ်ႇထိူဝ်ႇ တီႈၼႂ်းသဵၼ်ႈမၢႆ l ၼၼ်ႉမႃး။    \/\/ >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ 3l\n    \/\/ >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    \/\/ (15.0f)\n    def median(l : List[Long]) : Float = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return median of elements in the list l.\n  def median(l: List[Long]): Float = {\n    val sortedList = l.sorted\n    val n = sortedList.length\n    if (n % 2 == 1) {\n      sortedList(n \/ 2).toFloat\n    } else {\n      (sortedList(n \/ 2 - 1) + sortedList(n \/ 2)).toFloat \/ 2\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(median(List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) \/\/ 3.0\n    println(median(List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) \/\/ 15.0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"},{"task_id":"HumanEval_48","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၸၢမ်းတူၺ်းဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် palindrome ႁိုဝ်ၼႆ    \/\/ >>> isPalindrome((\"\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aba\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aaaaa\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"zbcd\"))\n    \/\/ (false)\n    def isPalindrome(text : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Checks if given string is a palindrome\n  def isPalindrome(text: String): Boolean = {\n    val length = text.length\n    for (i <- 0 until length \/ 2) {\n      if (text(i) != text(length - i - 1)) return false\n    }\n    true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_49","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် 2^n modulo p (ဝႆႉၸႂ်ၼိူဝ် တူဝ်ၼပ်ႉ)    \/\/ >>> modp((3l), (5l))\n    \/\/ (3l)\n    \/\/ >>> modp((1101l), (101l))\n    \/\/ (2l)\n    \/\/ >>> modp((0l), (101l))\n    \/\/ (1l)\n    \/\/ >>> modp((3l), (11l))\n    \/\/ (8l)\n    \/\/ >>> modp((100l), (101l))\n    \/\/ (1l)\n    def modp(n : Long, p : Long) : Long = {\n","canonical_solution":"def modp(n: Long, p: Long): Long = {\n    \/\/ Calculate 2^n modulo p using iterative exponentiation by squaring.\n    def powMod(base: Long, exp: Long, mod: Long): Long = {\n      var result = 1L\n      var b = base % mod\n      var e = exp\n      \n      while (e > 0) {\n        if ((e & 1) == 1) { \/\/ Check if e is odd\n          result = (result * b) % mod\n        }\n        e >>= 1\n        b = (b * b) % mod\n      }\n\n      result\n    }\n\n    powMod(2, n, p)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_51","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/remove_vowels ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ လႄႈ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ ဢၼ်ဢမ်ႇမီး တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ ၼၼ်ႉမႃး။    \/\/ >>> removeVowels((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"abcdef\"))\n    \/\/ (\"bcdf\")\n    \/\/ >>> removeVowels((\"aaaaa\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"aaBAA\"))\n    \/\/ (\"B\")\n    \/\/ >>> removeVowels((\"zbcd\"))\n    \/\/ (\"zbcd\")\n    def removeVowels(text : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeVowels(text: String): String = {\n        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        text.filterNot(vowels.contains)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"},{"task_id":"HumanEval_52","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ဝႃႈ တူဝ်ၼပ်ႉတင်းမူတ်း ၼႂ်းသဵၼ်ႈမၢႆ l ၼႆႉ မီးယူႇၽၢႆႇတႂ်ႈ threshold t ၼၼ်ႉၼႆယဝ်ႉ။    \/\/ >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))\n    \/\/ (true)\n    \/\/ >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))\n    \/\/ (false)\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return true if all numbers in the list l are below threshold t.\n  \/\/ >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))\n  \/\/ (true)\n  \/\/ >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))\n  \/\/ (false)\n  def belowThreshold(l: List[Long], t: Long): Boolean = {\n    l.forall(_ < t)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_53","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ထႅမ်သႂ်ႇတူဝ်ၼပ်ႉသွင်တူဝ် x လႄႈ y    \/\/ >>> add((2l), (3l))\n    \/\/ (5l)\n    \/\/ >>> add((5l), (7l))\n    \/\/ (12l)\n    def add(x : Long, y : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    \/\/ Add two numbers x and y\n    \/\/ >>> add((2l), (3l))\n    \/\/ (5l)\n    \/\/ >>> add((5l), (7l))\n    \/\/ (12l)\n    def add(x: Long, y: Long): Long = {\n        x + y\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_54","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူၺ်းဝႃႈ ၶေႃႈၵႂၢမ်းသွင်ၶေႃႈၼႆႉ မီးတူဝ်လိၵ်ႈမိူၼ်ၵၼ်ႁႃႉၼႆလႄႈ။    \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    \/\/ (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n","canonical_solution":"import scala.collection.mutable._\n\nobject Problem {\n  def sameChars(s0: String, s1: String): Boolean = {\n    def charSet(s: String): Set[Char] = s.toSet\n    charSet(s0) == charSet(s1) && charSet(s0).forall(c => s0.count(_ == c) <= s1.count(_ == c) && s1.count(_ == c) <= s0.count(_ == c))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_55","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ Fibonacci ဢၼ်ပဵၼ် ထီႉ n ၼၼ်ႉမႃး။    \/\/ >>> fib((10l))\n    \/\/ (55l)\n    \/\/ >>> fib((1l))\n    \/\/ (1l)\n    \/\/ >>> fib((8l))\n    \/\/ (21l)\n    def fib(n : Long) : Long = {\n","canonical_solution":"def fib(n: Long): Long = {\n        if (n <= 1) n\n        else {\n            var a: Long = 0\n            var b: Long = 1\n            for (_ <- 2L to n) {\n                val temp = a + b\n                a = b\n                b = temp\n            }\n            b\n        }\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"},{"task_id":"HumanEval_56","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/return true သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပိုတ်ႇဝႆႉၼၼ်ႉ မီးဝႆႉ သဵၼ်ႈမၢႆဢၼ်ဢိုတ်းဝႆႉဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/brackets ၼႆႉပဵၼ် string ဢၼ်ပႃးဝႆႉ \"<\" လႄႈ \">\" ၼၼ်ႉယဝ်ႉ။    \/\/ >>> correctBracketing((\"<\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"<>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"<<><>>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"><<>\"))\n    \/\/ (false)\n    def correctBracketing(brackets : String) : Boolean = {\n","canonical_solution":"import scala.collection.mutable.Stack\n\nobject Problem {\n  def correctBracketing(brackets: String): Boolean = {\n    val stack = new Stack[Char]()\n    for (char <- brackets) {\n      if (char == '<') {\n        stack.push(char)\n      } else if (char == '>') {\n        if (stack.isEmpty || stack.pop() != '<') {\n          return false\n        }\n      }\n    }\n    stack.isEmpty\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_57","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/Return true is သဵၼ်ႈမၢႆ ဢၼ်တူဝ်ၼပ်ႉမၼ်း တိူဝ်းၶိုၼ်ႈမႃး ဢမ်ႇၼၼ် လူတ်းယွမ်းမႃး လူၺ်ႈဢမ်ႇမီးလွင်ႈမၵ်းမၼ်ႈ။    \/\/ >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n    \/\/ (true)\n    \/\/ >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n    \/\/ (false)\n    \/\/ >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))\n    \/\/ (true)\n    def monotonic(l : List[Long]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return true if list elements are monotonically increasing or decreasing.\n  \/\/ >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n  \/\/ (true)\n  \/\/ >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n  \/\/ (false)\n  \/\/ >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))\n  \/\/ (true)\n  def monotonic(l: List[Long]): Boolean = {\n    if (l.isEmpty || l.length == 1) return true\n\n    val increasing = l.sliding(2).forall { case List(a, b) => a <= b }\n    val decreasing = l.sliding(2).forall { case List(a, b) => a >= b }\n\n    increasing || decreasing\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_58","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် လွင်ႈမၵ်းမၼ်ႈ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်လႆႈၸႅၵ်ႇဝႆႉ တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆသွင်ဢၼ်ၼၼ်ႉ။    \/\/ >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    \/\/ (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    \/\/ >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    \/\/ (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Return sorted unique common elements for two lists.\n  def common(l1: List[Long], l2: List[Long]): List[Long] = {\n    (l1.toSet intersect l2.toSet).toList.sorted\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    println(common(List[Long](1L, 4L, 3L, 34L, 653L, 2L, 5L), List[Long](5L, 7L, 1L, 5L, 9L, 653L, 121L)))\n    println(common(List[Long](5L, 3L, 2L, 8L), List[Long](3L, 2L)))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_59","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈ ၶွင်တူဝ်ၼပ်ႉ n ၼၼ်ႉၶိုၼ်း၊ ဝူၼ်ႉဝႃႈ n > 1 လႄႈ ဢမ်ႇၸႂ်ႈတူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈ။     \/\/ >>> largestPrimeFactor((13195l))\n    \/\/ (29l)\n    \/\/ >>> largestPrimeFactor((2048l))\n    \/\/ (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def largestPrimeFactor(n: Long): Long = {\n        var number = n\n        var largestFactor = 1L\n\n        \/\/ Check for number of 2s that divide n\n        while (number % 2 == 0) {\n            largestFactor = 2L\n            number \/= 2\n        }\n\n        \/\/ n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n        var i = 3\n        while (i <= sqrt(number)) {\n            while (number % i == 0) {\n                largestFactor = i\n                number \/= i\n            }\n            i += 2\n        }\n\n        \/\/ This condition is to check if number is a prime number greater than 2\n        if (number > 2) {\n            largestFactor = number\n        }\n\n        largestFactor\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"},{"task_id":"HumanEval_60","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/sum_to_n ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉ 1 တေႃႇထိုင် n မႃးႁူမ်ႈၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/ >>> sumToN((30l))\n    \/\/ (465l)\n    \/\/ >>> sumToN((100l))\n    \/\/ (5050l)\n    \/\/ >>> sumToN((5l))\n    \/\/ (15l)\n    \/\/ >>> sumToN((10l))\n    \/\/ (55l)\n    \/\/ >>> sumToN((1l))\n    \/\/ (1l)\n    def sumToN(n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumToN(n: Long): Long = {\n        (1L to n).sum\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n"},{"task_id":"HumanEval_61","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/return true သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပိုတ်ႇဝႆႉၼၼ်ႉ မီးဝႆႉ သဵၼ်ႈမၢႆဢၼ်ဢိုတ်းဝႆႉဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/brackets ၼႆႉပဵၼ် string ဢၼ်ပႃးတူဝ် \"(\" လႄႈ \"\") ၼၼ်ႉယဝ်ႉ။    \/\/ >>> correctBracketing((\"(\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"()\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"(()())\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\")(()\"))\n    \/\/ (false)\n    def correctBracketing(brackets : String) : Boolean = {\n","canonical_solution":"var balance = 0\n        for (ch <- brackets) {\n            if (ch == '(') balance += 1\n            else if (ch == ')') balance -= 1\n            \n            if (balance < 0) return false\n        }\n        balance == 0\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_62","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶိုၼ်းဢဝ် တူဝ်ဢိင် ဢၼ်လုၵ်ႉတီႈ polynomial ဢၼ်ၼႆႉမႃးၶိုၼ်း ၼႂ်းပိူင်ၾၢင်မိူၼ်ၵၼ်။    \/\/xs[0] + xs[1] * x + xs[2] * x^2 + ....     \/\/xs ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်းတင်း တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉၼမ်ထပ်ႈႁူဝ်ၼၼ်ႉယဝ်ႉ။    \/\/ >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n    \/\/ >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.collection.mutable._\n\nobject Problem {\n  def derivative(xs: List[Long]): List[Long] = {\n    xs.zipWithIndex.tail.map { case (coeff, index) => coeff * index }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_63","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ၶႅၼ်းတေႃႈ တႅမ်ႈပၼ် တူဝ်ဢိင် တႃႇတေၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉ n-th ၶွင် တူဝ်ၼပ်ႉ fibfib ဢၼ်ၸွမ်းၵၼ်ဝႆႉၼၼ်ႉ။     \/\/fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3)    \/\/fib fib (((2) == 1     \/\/fib fib ((1)) == 0     \/\/fib fib ((0) == 0     \/\/လွင်ႈၶပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉ FibFib ၼႆႉ မၼ်းမိူၼ်ၵၼ်တင်း လွင်ႈၶပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉ Fibbonacci ဢၼ်မၵ်းမၼ်ႈဝႆႉၼင်ႇပႃႈတႂ်ႈၼႆႉ    \/\/ >>> fibfib((1l))\n    \/\/ (0l)\n    \/\/ >>> fibfib((5l))\n    \/\/ (4l)\n    \/\/ >>> fibfib((8l))\n    \/\/ (24l)\n    def fibfib(n : Long) : Long = {\n","canonical_solution":"def fibfib(n: Long): Long = {\n    if (n == 0) return 0\n    if (n == 1) return 0\n    if (n == 2) return 1\n\n    var a: Long = 0\n    var b: Long = 0\n    var c: Long = 1\n    var d: Long = 0\n\n    for (_ <- 3L to n) {\n      d = a + b + c\n      a = b\n      b = c\n      c = d\n    }\n    d\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"},{"task_id":"HumanEval_64","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/တူဝ်ၸဵင်၊ ၵူၺ်းၵႃႈ မၼ်းမီးတီႈသုတ်း ၶေႃႈၵႂၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉၵူၺ်း။    \/\/တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈ ၼႂ်းလွင်ႈၼႆႉပဵၼ် 'a', 'e', 'i', 'o', 'u' တီႈၼႆႈ 'y' ၵေႃႈပဵၼ် a     \/\/ၶေႃႈၵႂၢမ်းဢၼ်ၶဝ်ႈမႃး လႄႈ မိူဝ်းၶိုၼ်း တူဝ်မႄႈလိၵ်ႈတူဝ်ထႅဝ် ၼႂ်းသဵၼ်ႈမၢႆတူဝ်ထႅဝ်။    \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် vowels_count ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်တႅၼ်းတၢင်     \/\/ >>> vowelsCount((\"abcde\"))\n    \/\/ (2l)\n    \/\/ >>> vowelsCount((\"ACEDY\"))\n    \/\/ (3l)\n    def vowelsCount(s : String) : Long = {\n","canonical_solution":"def vowelsCount(s: String): Long = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u')\n    val lowerCaseWord = s.toLowerCase\n    var count = 0L\n\n    for (i <- lowerCaseWord.indices) {\n      if (vowels.contains(lowerCaseWord(i)) || (lowerCaseWord(i) == 'y' && i == lowerCaseWord.length - 1)) {\n        count += 1\n      }\n    }\n\n    count\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_65","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ပေႃး shift > တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉဢၼ်ၶိုၼ်းမႃးၼၼ်ႉ ၶိုၼ်းပိၼ်ႇဝၢႆႇတူဝ်ၼပ်ႉဢၼ်ၶိုၼ်းမႃးၼၼ်ႉ။    \/\/လႄႈ ၶိုၼ်းဢဝ် ၶေႃႈတွပ်ႇမၼ်းပဵၼ် တူဝ်ထႅဝ်လိၵ်ႈ (string) ၼၼ်ႉယဝ်ႉ။    \/\/လွၵ်းဝူင်းၼႆႉ ၶၢႆႉတူဝ်ၼပ်ႉ တူဝ်ၼပ်ႉတဵမ် x၊ ၶၢႆႉတူဝ်ၼပ်ႉၵႂႃႇၽၢႆႇၶႂႃ လူၺ်ႈလွင်ႈၶၢႆႉ။    \/\/ >>> circularShift((12l), (1l))\n    \/\/ (\"21\")\n    \/\/ >>> circularShift((12l), (2l))\n    \/\/ (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n","canonical_solution":"def circularShift(x: Long, shift: Long): String = {\n  val digits = x.toString\n  val length = digits.length\n  \n  if (shift >= length) {\n    digits.reverse\n  } else {\n    val effectiveShift = (length - shift % length).toInt\n    (digits.drop(effectiveShift) + digits.take(effectiveShift))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"},{"task_id":"HumanEval_66","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/မၢႆမီႈ ASCII     \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် string ပဵၼ်ၶေႃႈသႂ်ႇသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၽၢႆႇၼိူဝ်ၼၼ်ႉၵူၺ်း'     \/\/ၵၢၼ်ငၢၼ်း     \/\/ >>> digitSum((\"\"))\n    \/\/ (0l)\n    \/\/ >>> digitSum((\"abAB\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"abcCd\"))\n    \/\/ (67l)\n    \/\/ >>> digitSum((\"helloE\"))\n    \/\/ (69l)\n    \/\/ >>> digitSum((\"woArBld\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"aAaaaXa\"))\n    \/\/ (153l)\n    def digitSum(s : String) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def digitSum(s: String): Long = {\n    s.filter(_.isUpper).map(_.toLong).sum\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"},{"task_id":"HumanEval_67","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တွၼ်ႈတႃႇ examble:     \/\/တီႈၼႂ်းၵၢတ်ႇၼၼ်ႉ ၶိုၼ်းပၼ် မၢၵ်ႇမႆႉ မၢၵ်ႇဢူမ် ဢၼ်မီးၼႂ်းၵၢတ်ႇၼၼ်ႉ။    \/\/မၢၵ်ႇဢႅပ်ႇၵႅၼ်ႇ လႄႈ မၢၵ်ႇဢႅပ်ႇပႃႇ လႄႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တၢင်တူဝ် မၢၵ်ႇဢႅပ်ႇၵႅၼ်ႇ တင်းမူတ်း     \/\/apples, oranges, and mango fruits. ပၼ် string ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉတင်းမူတ်း     \/\/ဢၼ်လႆႈၸႅၵ်ႇၽႄဝႆႉၼႂ်း ၵၢတ်ႇၼမ်ႉ ဢၼ်ၵၢတ်ႇၼမ်ႉၼႆႉပႃးဝႆႉ     \/\/ၼႂ်းၵၢၼ်ဢၼ်ၼႆႉ ၸဝ်ႈၵဝ်ႇတေလႆႈပၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင် တူဝ်ၼပ်ႉၽၵ်းၶဵဝ် လႄႈ မၢၵ်ႇဢိတ်ႇ။    \/\/ >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    \/\/ (8l)\n    \/\/ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    \/\/ (2l)\n    \/\/ >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    \/\/ (95l)\n    \/\/ >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    \/\/ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fruitDistribution(s: String, n: Long): Long = {\n    val fruits = s.split(\" and \").map(_.split(\" \")(0).toLong)\n    val totalApplesAndOranges = fruits.sum\n    n - totalApplesAndOranges\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"},{"task_id":"HumanEval_68","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ 1:    \/\/သင်ဝႃႈ ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ဢမ်ႇၼၼ် သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးသင်ၼႆ ၶိုၼ်းဢဝ် [] ၼၼ်ႉၶိုၼ်း။    \/\/လွင်ႈဢၼ်လႆႈဢဝ်ဢွၵ်ႇၼၼ်ႉ ထုၵ်ႇလီၶိုၼ်းဢဝ်မႃးၼႂ်းသဵၼ်ႈမၢႆ၊ [smallest_value၊ its index]၊     \/\/သင်ဝႃႈ လႆႈႁၼ် ၼေႃႇတႅၼ်းတင်းၼမ် ဢၼ်မီး ၵႃႈၶၼ်ဢၼ်လဵၵ်ႉသုတ်းဢၼ်မိူၼ်ၵၼ်ၼႆ ၶိုၼ်းဢဝ် ၼေႃႇတႅၼ်း ဢၼ်မီး ထႅဝ်ဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉ လွၵ်ႈမႃးယဝ်ႉ။    \/\/လွင်ႈဢၼ်လႆႈဢဝ်ဢွၵ်ႇၼၼ်ႉ ထုၵ်ႇလီပဵၼ် လွင်ႈဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉယဝ်ႉ။    \/\/ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇတေဢဝ် ၼူၵ်ႉဢၼ်ၼိူင်ႈသေ ၶိုၼ်းဢဝ်မၼ်းမႃးၶိုၼ်းၼၼ်ႉယဝ်ႉ။    \/\/\"ပၼ်ဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်တၢင်တူဝ် ၵိင်ႇၽႄ တူၼ်ႈမႆႉ ဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇပဵၼ် တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းၼၼ်ႉ။    \/\/ >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](2l.toLong, 1l.toLong))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 2:\n    \/\/ >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[Long](2l.toLong, 1l.toLong))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 3:\n    \/\/ >>> pluck((List[Long]()))\n    \/\/ (List[Long]())\n    \/\/ Example 4:\n    \/\/ >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong)))\n    \/\/ (List[Long](0l.toLong, 1l.toLong))\n    \/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n    \/\/ so we will choose the first zero, which has the smallest index.\n    \/\/ Constraints:\n    \/\/ * 1 <= nodes.length <= 10000\n    \/\/ * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def pluck(arr: List[Long]): List[Long] = {\n    val evenNodes = arr.zipWithIndex.filter { case (value, _) => value % 2 == 0 }\n    if (evenNodes.isEmpty) {\n      List.empty[Long]\n    } else {\n      val (smallestValue, index) = evenNodes.minBy { case (value, index) => (value, index) }\n      List(smallestValue, index.toLong)\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong, 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong, 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_69","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ပေႃးဢမ်ႇမီးၵႃႈၶၼ်ဢၼ်ၼႆႉၼႆ ၶိုၼ်းဢဝ် - 1    \/\/လွင်ႈၵႆႉပဵၼ်ၶွင် တူဝ်ၼပ်ႉတဵမ်ၼႆႉ ပဵၼ်တၢင်းၼမ်မၼ်း ဢၼ်လႆႈႁၼ်ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉယဝ်ႉ။    \/\/သုၼ် လႄႈ မီးလွင်ႈၵႆႉၼမ်လိူဝ် ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တၢင်းၵႃႈၶၼ် တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉႁင်းမၼ်းယဝ်ႉ။    \/\/ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ် ဢၼ်ယႂ်ႇသေ     \/\/ >>> search((List[Long](4l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\n    \/\/ (2l)\n    \/\/ >>> search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    \/\/ (3l)\n    \/\/ >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    \/\/ (-1l)\n    def search(lst : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def search(lst: List[Long]): Long = {\n    val frequencyMap = lst.groupBy(identity).mapValues(_.size)\n    lst.filter(num => frequencyMap(num) >= num).sorted(Ordering[Long].reverse) match {\n      case x :: _ => x\n      case Nil => -1L\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong, 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong, 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong, 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong, 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong, 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong, 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong, 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong))) == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong, 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong))) == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong, 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong))) == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_70","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ယဝ်ႉၵေႃႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵိုတ်းဝႆႉၼၼ်ႉ ၼမ်သုတ်း၊ ယဝ်ႉၵေႃႈ တီႈဢေႇသုတ်း လႄႈ တၢင်ႇၸိူဝ်း။    \/\/လွင်ႈၸႅၵ်ႇၽႄဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆႉ ပဵၼ်မိူဝ်ႈဢၼ်ႁဝ်းတႄႇဢဝ် ၵႃႈၶၼ်ဢၼ်ဢေႇသုတ်းၼၼ်ႉ၊    \/\/ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ယဝ်ႉၼႆ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ၶိုၼ်းမႃးပၼ်။    \/\/ >>> strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))\n    \/\/ >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong)))\n    \/\/ (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n    \/\/ >>> strangeSortList((List[Long]()))\n    \/\/ (List[Long]())\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n","canonical_solution":"def strangeSortList(lst: List[Long]): List[Long] = {\n    val buffer = lst.sorted.toBuffer\n    val result = ArrayBuffer[Long]()\n    var takeMin = true\n\n    while (buffer.nonEmpty) {\n      if (takeMin) {\n        result += buffer.remove(0) \/\/ take the minimum\n      } else {\n        result += buffer.remove(buffer.length - 1) \/\/ take the maximum of the remaining\n      }\n      takeMin = !takeMin\n    }\n\n    result.toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong, 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_71","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/လိူဝ်သေၽၢႆႇသၢမ်ၽၢႆႇ။    \/\/သၢမ်ၽၢႆႇၼႆႉ ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မၢၼ်ႇမႅၼ်ႈ မိူဝ်ႈဢၼ် သွင်ၽၢႆႇဢၼ်လႂ်ၼၼ်ႉ ႁူမ်ႈၵၼ်ၼမ်လိူဝ်ၼၼ်ႉယဝ်ႉ။    \/\/ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် -1     \/\/သၢမ်ၸဵင်ႇၼႆႉ ပေႃးဝႃႈ သၢမ်ၽၢႆႇမၼ်း ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မၢၼ်ႇမႅၼ်ႈၼႆ မၼ်းတေလႆႈဢဝ် သွင်ၸဵင်ႇသေ ၵုမ်ႈဝႆႉယဝ်ႉ။    \/\/ပေႃးႁဝ်းတူၺ်းတၢင်းယၢဝ်းသၢမ်ၽၢႆႇၶွင် သၢမ်ၸဵင်ႇၼႆ ၶိုၼ်းဢဝ် ၼႃႈလိၼ်ၶွင်    \/\/ >>> triangleArea((3l), (4l), (5l))\n    \/\/ (6.0f)\n    \/\/ >>> triangleArea((1l), (2l), (10l))\n    \/\/ -1l\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n","canonical_solution":"import scala.math._\n\nobject Problem {\n  def triangleArea(a: Long, b: Long, c: Long): Float = {\n    if (a + b > c && a + c > b && b + c > a) {\n      val s = (a + b + c) \/ 2.0\n      val area = sqrt(s * (s - a) * (s - b) * (s - c))\n      BigDecimal(area).setScale(2, BigDecimal.RoundingMode.HALF_UP).toFloat\n    } else {\n      -1f\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"},{"task_id":"HumanEval_72","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/ၶူဝ်းၶွင် q ၼႆႉ ပေႃးမၼ်းၽဵင်ႇပဵင်း (မၼ်းပဵၼ် palindromic list) လႄႈ တူဝ်ၼပ်ႉၶွင်မၼ်းၼၼ်ႉ ပေႃးဢေႇလိူဝ် ဢမ်ႇၼၼ် ပေႃးၽဵင်ႇပဵင်းၵၼ်တၢင်း တၢင်းၼၵ်းဢၼ်တိူဝ်းသုတ်းဢၼ်ပဵၼ်လႆႈ w ၼႆ မၼ်းတေပၢႆႈၵႂႃႇယူႇယဝ်ႉ။    \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်တေၶိုၼ်းပၼ် true သင်ၸိူဝ်ႉဝႃႈ ၶူဝ်းၶွင် q တေပၢႆႈၵႂႃႇလႄႈ false သင်ဢမ်ႇၼၼ်။    \/\/ >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    \/\/ (false)\n    \/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \/\/ >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    \/\/ (false)\n    \/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \/\/ >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    \/\/ (true)\n    \/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \/\/ >>> willItFly((List[Long](3l.toLong)), (5l))\n    \/\/ (true)\n    \/\/ # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def willItFly(q: List[Long], w: Long): Boolean = {\n    val isPalindromic = q == q.reverse\n    val sumOfElements = q.sum\n    isPalindromic && sumOfElements <= w\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(willItFly(List[Long](1L, 2L), 5L)) \/\/ false\n    println(willItFly(List[Long](3L, 2L, 3L), 1L)) \/\/ false\n    println(willItFly(List[Long](3L, 2L, 3L), 9L)) \/\/ true\n    println(willItFly(List[Long](3L), 5L)) \/\/ true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_73","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/ပေႃးဝႃႈႁဝ်းလႅၵ်ႈလၢႆႈယဝ်ႉၼႆ ႁဝ်းတေလႅၵ်ႈလၢႆႈလႆႈ ၶူဝ်းၶွင်ဢၼ်ၼိုင်ႈသေ ၶူဝ်းၶွင်တၢင်ႇဢၼ်။    \/\/ပေႃးၶႂ်ႈႁႂ်ႈပဵၼ် palindromic list ၼႆ တေလႆႈလႅၵ်ႈလၢႆႈပၼ်။    \/\/ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် arr ၼႆၸိုင် ၶူၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်ဢေႇသုတ်း ဢၼ်တေလႆႈပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉ။    \/\/ >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\n    \/\/ (4l)\n    \/\/ >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong)))\n    \/\/ (1l)\n    \/\/ >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong)))\n    \/\/ (0l)\n    def smallestChange(arr : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Given a list arr of integers, find the minimum number of elements that\n  \/\/ need to be changed to make the list palindromic.\n\n  def smallestChange(arr: List[Long]): Long = {\n    var changes: Long = 0\n\n    for (i <- 0 until arr.length \/ 2) {\n      if (arr(i) != arr(arr.length - 1 - i)) {\n        changes += 1\n      }\n    }\n\n    changes\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    println(smallestChange(List(1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L)))  \/\/ Output: 4\n    println(smallestChange(List(1L, 2L, 3L, 4L, 3L, 2L, 2L)))  \/\/ Output: 1\n    println(smallestChange(List(1L, 2L, 3L, 2L, 1L)))  \/\/ Output: 0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong))) == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong, 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_74","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/သင်ဝႃႈ သဵၼ်ႈမၢႆသွင်ဢၼ်ၼၼ်ႉ မီးတူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼႆၸိုင် ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၼိူင်ႈၼၼ်ႉ လၢႆႈပၼ်ၶိုၼ်း။    \/\/တူဝ်ၼပ်ႉဢၼ်မီးတီႈၼႂ်း သဵၼ်ႈမၢႆ ဢၼ်ၼိူင်ႈၼၼ်ႉ မၼ်းဢေႇလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်မီးတီႈ သဵၼ်ႈမၢႆတၢင်ႇဢၼ်ၼၼ်ႉယဝ်ႉ။    \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉသဵၼ်ႈ သွင်ဢၼ်သေ မိူဝ်းၶိုၼ်း သဵၼ်ႈမၢႆဢၼ်မီး တူဝ်ၼပ်ႉသဵၼ်ႈ  ၼၼ်ႉ    \/\/ >>> totalMatch((List[String]()), (List[String]()))\n    \/\/ (List[String]())\n    \/\/ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    \/\/ (List[String](\"hI\", \"Hi\"))\n    \/\/ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n    \/\/ (List[String](\"hi\", \"admin\"))\n    \/\/ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n    \/\/ (List[String](\"hI\", \"hi\", \"hi\"))\n    \/\/ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    \/\/ (List[String](\"4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def totalMatch(lst1: List[String], lst2: List[String]): List[String] = {\n    val sum1 = lst1.map(_.length).sum\n    val sum2 = lst2.map(_.length).sum\n    if (sum1 <= sum2) lst1 else lst2\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\", \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"},{"task_id":"HumanEval_75","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/ပေႃးႁဝ်းႁူႉဝႃႈ (a) ၼႆႉဢေႇလိူဝ် 100 ၼႆၸိုင်    \/\/ဢမ်ႇမၢၼ်ႇမႅၼ်ႈၵေႃႈလႆႈ။    \/\/တႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်မၵ်းမၼ်ႈဝႃႈ ပဵၼ်လွင်ႈမၢၼ်ႇမႅၼ်ႈယူႇၼႆ သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၵုၼ်း တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ 3 တူဝ်ၼႆၸိုင်    \/\/ >>> isMultiplyPrime((30l))\n    \/\/ (true)\n    \/\/ 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def isMultiplyPrime(a: Long): Boolean = {\n    def isPrime(num: Long): Boolean = {\n      if (num <= 1) return false\n      if (num <= 3) return true\n      if (num % 2 == 0 || num % 3 == 0) return false\n      var i = 5\n      while (i * i <= num) {\n        if (num % i == 0 || num % (i + 2) == 0) return false\n        i += 6\n      }\n      true\n    }\n\n    val primes = (2L to 100L).filter(isPrime)\n    val primeList = primes.toList\n\n    for {\n      i <- primeList.indices\n      j <- i until primeList.size\n      k <- j until primeList.size\n      if primeList(i) * primeList(j) * primeList(k) == a\n    } return true\n\n    false\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_76","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/x ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၶိုၵ်ႉတွၼ်းၶွင် n သင်ၸိူဝ်ႉဝႃႈ n**int=x ၼႆယူႇယဝ်ႉ။    \/\/လွင်ႈမၵ်းမၼ်ႈ n လႄႈ false ၼႂ်းလွင်ႈတၢင်ႇၸိူဝ်း။    \/\/ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတႅမ်ႈ function ဢၼ်ၶိုၼ်းမႃး true သင်တူဝ်ၼပ်ႉ x ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ငၢႆႈ    \/\/ >>> isSimplePower((1l), (4l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((2l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((8l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((3l), (2l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((3l), (1l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((5l), (3l))\n    \/\/ (false)\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n","canonical_solution":"def isSimplePower(x: Long, n: Long): Boolean = {\n        if (n == 1) {\n            return x == 1\n        }\n        \n        var value: Long = n\n        while (value <= x) {\n            if (value == x) {\n                return true\n            }\n            \n            if (value > Long.MaxValue \/ n) {\n                return false\n            }\n            value *= n\n        }\n        \n        false\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_77","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ ၶေႃႈလႆႈၸႂ်ၼႆႉ မၢၼ်ႇမႅၼ်ႈယူႇတႃႇသေႇ။    \/\/ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ်ဢၼ်ၼိူင်ႈ ဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉယဝ်ႉ။    \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ် a သေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်တႄႉ    \/\/ >>> iscube((1l))\n    \/\/ (true)\n    \/\/ >>> iscube((2l))\n    \/\/ (false)\n    \/\/ >>> iscube((-1l))\n    \/\/ (true)\n    \/\/ >>> iscube((64l))\n    \/\/ (true)\n    \/\/ >>> iscube((0l))\n    \/\/ (true)\n    \/\/ >>> iscube((180l))\n    \/\/ (false)\n    def iscube(a : Long) : Boolean = {\n","canonical_solution":"def iscube(a: Long): Boolean = {\n  val cubeRoot = math.cbrt(a.toDouble).round\n  cubeRoot * cubeRoot * cubeRoot == a\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_78","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/တူဝ်လိၵ်ႈ A,B,C,D,E,F ၼႆႉ ပဵၼ်တူဝ်လိၵ်ႈယႂ်ႇသေပိူၼ်ႈယဝ်ႉ။    \/\/မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ ၶေႃႈၶဝ်ႈၼႆႉ မၢၼ်ႇမႅၼ်ႈယူႇတႃႇသေႇ ဢမ်ႇၼၼ် ပဵၼ် string ဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉယူႇ၊    \/\/B (= သဵၼ်ႈမၢႆသိပ်းလပ်း 11), D (= သဵၼ်ႈမၢႆသိပ်းလပ်း 13)     \/\/ၵွပ်ႈၼၼ်လႄႈ တေလႆႈလိူၵ်ႈ တူဝ်ၼပ်ႉဢၼ်မီးတီႈတႂ်ႈၼႆႉ 2, 3, 5, 7,     \/\/တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉၼႆႉပဵၼ် 2, 3, 5, 7, 11, 13, 17,...    \/\/တူဝ်ၼပ်ႉသႅၼ်တူဝ်ၼႆႉပဵၼ် 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.    \/\/ဢၼ်ယႂ်ႇလိူဝ် 1 ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉသၽႃႇဝ ဢၼ်လဵၵ်ႉလိူဝ်သွင်တူဝ်) ။    \/\/တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၸဝ်ႉ (တူဝ်ၼပ်ႉဢၼ်ၸဝ်ႉ ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉဢၼ်ၸဝ်ႉၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉသၽႃႇဝ     \/\/တူဝ်ၼပ်ႉ hexadecimal ဢၼ်ၼိူင်ႈ ဢၼ်မိူၼ်ၼင်ႇ သဵၼ်ႈသၢႆမၢႆ လႄႈ မၢႆၼပ်ႉ တူဝ်ၼပ်ႉ hexadecimal     \/\/ၸဝ်ႈၵဝ်ႇထုၵ်ႇလႆႈတႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်ႁပ်ႉဝႆႉ    \/\/ >>> hexKey((\"AB\"))\n    \/\/ (1l)\n    \/\/ >>> hexKey((\"1077E\"))\n    \/\/ (2l)\n    \/\/ >>> hexKey((\"ABED1A33\"))\n    \/\/ (4l)\n    \/\/ >>> hexKey((\"123456789ABCDEF0\"))\n    \/\/ (6l)\n    \/\/ >>> hexKey((\"2020\"))\n    \/\/ (2l)\n    def hexKey(num : String) : Long = {\n","canonical_solution":"def hexKey(num: String): Long = {\n  val primeHexDigits = Set('2', '3', '5', '7', 'B', 'D')\n  num.count(ch => primeHexDigits.contains(ch)).toLong\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_79","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/တူဝ်လိၵ်ႈဢၼ်လိူဝ်ၼႆႉ ပဵၼ်တႃႇတေၸွႆႈထႅမ် ပိူင်ၾၢင်မၼ်းၼၼ်ႉယဝ်ႉ။    \/\/တေမီးတူဝ်လိၵ်ႈထႅင်ႈသွင်တူဝ် 'db' တီႈတႄႇလႄႈ တီႈသုတ်းၶွင် string ၼၼ်ႉ။    \/\/တူဝ်လိၵ်ႈၵူႈတူဝ် ၼႂ်းသတၢႆႇၼႆႉ တေပဵၼ် \"0\" ဢမ်ႇၼၼ် \"1\"    \/\/တူဝ်လိၵ်ႈဢၼ်ၼိူင်ႈဢၼ်ၼႆႉ ပဵၼ်တူဝ်လိၵ်ႈ သွင်တူဝ် ဢၼ်ၼိူင်ႈဢၼ်ယဝ်ႉ။    \/\/တေပၼ်တူဝ်ၼပ်ႉ တီႈတူဝ်ၼပ်ႉႁူဝ်သိပ်းသေ ၼႃႈၵၢၼ်သူတေလႆႈ လႅၵ်ႈလၢႆႈပဵၼ်     \/\/ >>> decimalToBinary((15l))\n    \/\/ (\"db1111db\")\n    \/\/ >>> decimalToBinary((32l))\n    \/\/ (\"db100000db\")\n    def decimalToBinary(decimal : Long) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def decimalToBinary(decimal: Long): String = {\n    \"db\" + decimal.toBinaryString + \"db\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"},{"task_id":"HumanEval_80","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/သဵၼ်ႈသၢႆမၼ်းပဵၼ် hapscala သင်ဝႃႈ တၢင်းယၢဝ်းမၼ်းဢမ်ႇယွမ်း 3 လႄႈ သၢမ်တူဝ်လိၵ်ႈဢၼ်သိုပ်ႇၵၼ်ၼၼ်ႉ မီးလွင်ႈပႅၵ်ႇပိူင်ႈၵၼ်ယူႇၼႆယဝ်ႉ။    \/\/ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇထတ်းတူၺ်းဝႃႈ သဵၼ်ႈၼၼ်ႉ ပဵၼ် hapscala ႁိုဝ် ဢမ်ႇၸႂ်ႈၼၼ်ႉယဝ်ႉ။    \/\/သူတေလႆႈပၼ် string s.    \/\/ >>> isHappy((\"a\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"aa\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"aabb\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"adb\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"xyy\"))\n    \/\/ (false)\n    def isHappy(s : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def isHappy(s: String): Boolean = {\n    if (s.length < 3) return false \n\n    for (i <- 0 until s.length - 2) {\n      if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) {\n        return false\n      }\n    }\n    true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_81","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/0.0 E     \/\/> 0.0 D-     \/\/> 0.7 D ႉ    \/\/> 1.0 D+     \/\/> 1.3 C- ႉ    \/\/> 1.7 C     \/\/> 2.0 C+     \/\/> 2.3 B-     \/\/> 2.7 B     \/\/> 3.0 B+     \/\/> 3.3 A- ႉ    \/\/> 3.7 A     \/\/4.0 A+     \/\/GPA ၊ သရၽူႇလိၵ်ႈ     \/\/မၼ်းပဵၼ် function ဢၼ်တေဢွၵ်ႇပၼ် သဵၼ်ႈမၢႆ တူဝ်လိၵ်ႈ ဢၼ်ၸႂ်ႉတိုဝ်း ထႅဝ်လိၵ်ႈဢၼ်ၼႆႉ:     \/\/မၼ်းၼၢင်းပၼ်သဵၼ်ႈမၢႆ GPA လုၵ်ႈႁဵၼ်းမၢင်ၵေႃႉလႄႈ သူတေလႆႈတႅမ်ႈလိၵ်ႈ။    \/\/ပၼ်ႁႃဢၼ်လဵဝ်ၵူၺ်းတႄႉ မၼ်းၼၢင်းလႆႈႁၢႆလပ်ႉဝႆႉ မၢႆလပ်ႉဢၼ်မၼ်းၼၢင်းၸႂ်ႉတိုဝ်းတွၼ်ႈတႃႇ မၵ်းမၼ်ႈၼၼ်ႉယဝ်ႉ။    \/\/ၶူးသွၼ်ၶဝ် လႆႈႁဵတ်းဢွၵ်ႇမႃး လွၵ်းလၢႆးမၼ်း တႃႇတေပၼ်လႆႈ မၢႆလပ်ႉမၼ်းယဝ်ႉ။    \/\/ပဵၼ်ဝူင်ႈလိုၼ်းသုတ်း ၼႂ်းသႅပ်ႇထႅမ်ႇပႃႇလႄႈ ၶူးသွၼ်ၶဝ်တေလႆႈပၼ် မၢႆလပ်ႉၶဝ်ယဝ်ႉ။    \/\/ >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    \/\/ (List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def numericalLetterGrade(grades: List[Float]): List[String] = {\n    grades.map { gpa =>\n      gpa match {\n        case g if g == 4.0 => \"A+\"\n        case g if g > 3.7 => \"A\"\n        case g if g > 3.3 => \"A-\"\n        case g if g > 3.0 => \"B+\"\n        case g if g > 2.7 => \"B\"\n        case g if g > 2.3 => \"B-\"\n        case g if g > 2.0 => \"C+\"\n        case g if g > 1.7 => \"C\"\n        case g if g > 1.3 => \"C-\"\n        case g if g > 1.0 => \"D+\"\n        case g if g > 0.7 => \"D\"\n        case g if g > 0.0 => \"D-\"\n        case _ => \"E\"\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val grades = List[Float](4.0f, 3.0f, 1.7f, 2.0f, 3.5f)\n    println(numericalLetterGrade(grades)) \/\/ Output: List(A+, B, C-, C, A-)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_82","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/length ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ဢမ်ႇၼၼ် false ပေႃးဢမ်ႇၼၼ်     \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်တႄႉ သင်ဝႃႈ တူဝ်ၼပ်ႉသဵၼ်ႈၼၼ်ႉ ပဵၼ်     \/\/ >>> primeLength((\"Hello\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"abcdcba\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"kittens\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"orange\"))\n    \/\/ (false)\n    def primeLength(string : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def primeLength(string: String): Boolean = {\n    val length = string.length\n\n    if (length <= 1) return false\n    \n    for (i <- 2 to sqrt(length).toInt) {\n      if (length % i == 0) return false\n    }\n    true\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_83","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ၼပ်ႉတဵမ်ဢၼ်မီးတူဝ်ထွၼ် ဢၼ်တႄႇ ဢမ်ႇၼၼ် သုတ်းတီႈ 1 ၼၼ်ႉ။    \/\/ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းၼပ်ႉဢၢၼ်ႇ တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉ n ၼၼ်ႉၶိုၼ်း    def startsOneEnds(n : Long) : Long = {\n","canonical_solution":"def startsOneEnds(n: Long): Long = {\n        if (n <= 0) return 0\n        \n        \/\/ Calculate numbers starting with 1: 1XX...X (n-1) digits after 1\n        val startWithOne: Long = math.pow(10, n - 1).toLong\n        \n        \/\/ Calculate numbers ending with 1: XX...X1 (n-1) digits before 1\n        \/\/ but without leading zeroes allowed, i.e., the first digit can't be zero\n        val endWithOne: Long = math.pow(10, n - 1).toLong\n        \n        \/\/ Reverse counting: numbers starting and ending with 1 (11XX...X)\n        val bothStartAndEndWithOne: Long = if (n > 1) math.pow(10, n - 2).toLong else 0\n        \n        \/\/ The total numbers starting or ending, or both, with 1\n        startWithOne + endWithOne - bothStartAndEndWithOne\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"},{"task_id":"HumanEval_84","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/ပေႃးဝႃႈလႆႈပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ N ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသွင်တူဝ်ၼၼ်ႉ ၶိုၼ်းမႃးပၼ်ယဝ်ႉ။    \/\/ >>> solve((1000l))\n    \/\/ (\"1\")\n    \/\/ >>> solve((150l))\n    \/\/ (\"110\")\n    \/\/ >>> solve((147l))\n    \/\/ (\"1100\")\n    \/\/ Variables:\n    \/\/ @N integer\n    \/\/ Constraints: 0 ≤ N ≤ 10000.\n    \/\/ Output:\n    \/\/ a string of binary number\n    def solve(N : Long) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ Given a positive integer N, return the total sum of its digits in binary.\n    def solve(N: Long): String = {\n        val sumOfDigits = N.toString.map(_.asDigit).sum\n        sumOfDigits.toBinaryString\n    }\n\n    def main(args: Array[String]): Unit = {\n        println(solve(1000L))  \/\/ should print \"1\"\n        println(solve(150L))   \/\/ should print \"110\"\n        println(solve(147L))   \/\/ should print \"1100\"\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"},{"task_id":"HumanEval_85","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇသုမ်းၼၼ်ႉၼႆ ဢွၼ်တၢင်းသုတ်း ထႅမ်သႂ်ႇ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ဢၼ်မီးတီႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ။    \/\/ >>> add((List[Long](4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong)))\n    \/\/ (2l)\n    def add(lst : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Given a non-empty list of integers lst. add the even elements that are at odd indices.\n  def add(lst: List[Long]): Long = {\n    lst.zipWithIndex.collect {\n      case (value, index) if index % 2 == 1 && value % 2 == 0 => value\n    }.sum\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_86","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/မၢႆတွင်း: သူတေလႆႈထိင်းသိမ်းဝႆႉ လွင်ႈၶပ်ႉၶိုင်ၶွင် ၶေႃႈၵႂၢမ်းလႄႈ လွင်ႈဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ တီႈၼႂ်းၶေႃႈၵႂၢမ်းၼၼ်ႉယူႇယဝ်ႉ။    \/\/လွင်ႈၶၢႆႉယိူင်းၶိုၼ်ႈမႃးၸွမ်း ၵႃႈၶၼ် ascii။    \/\/လႆႈထုၵ်ႇတႅၼ်းတၢင် လူၺ်ႈၶေႃႈၵႂၢမ်းမႂ်ႇ တီႈတူဝ်လိၵ်ႈတင်းမူတ်း လႆႈထုၵ်ႇၶပ်ႉဝႆႉ ၼႂ်း     \/\/Ordered version of string, ၼႆႉပဵၼ် string ဢၼ်ၶေႃႈၵႂၢမ်းတင်းမူတ်း (ဢၼ်ၽႄဝႆႉလူၺ်ႈႁွင်ႈ)     \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်မီးဝႆႉပိူင်ထၢၼ်ႈမၼ်းၼၼ်ႉ။    \/\/ >>> antiShuffle((\"Hi\"))\n    \/\/ (\"Hi\")\n    \/\/ >>> antiShuffle((\"hello\"))\n    \/\/ (\"ehllo\")\n    \/\/ >>> antiShuffle((\"Hello World!!!\"))\n    \/\/ (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n","canonical_solution":"import scala.collection.mutable.ArrayBuffer\n\nobject Problem {\n  def antiShuffle(s: String): String = {\n    val words = s.split(\"(?<=\\\\s)\")\n    val sortedWords = words.map(word => {\n      val trimmedWord = word.trim\n      val sortedChars = trimmedWord.sorted\n      word.replace(trimmedWord, sortedChars)\n    })\n    sortedWords.mkString(\"\")\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(antiShuffle(\"Hi\"))\n    println(antiShuffle(\"hello\"))\n    println(antiShuffle(\"Hello World!!!\"))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"},{"task_id":"HumanEval_87","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ယဝ်ႉၵေႃႈ ၸႅၵ်ႇမႅင်ႇ coordinates ၶွင် row ၸွမ်း column ၸွမ်းၼင်ႇ ၶၵ်ႉတွၼ်ႈဢၼ်ယွမ်းလူင်းမႃးၼၼ်ႉယဝ်ႉ။    \/\/ၸႅၵ်ႇမႅင်ႇ coordinates ၸွမ်းၼင်ႇ ထႅဝ်ဢၼ်တႄႇမႃးၼၼ်ႉ။    \/\/တူဝ်ၼပ်ႉဢၼ်ပဵၼ်တူဝ်ၸႅၵ်ႇဢၼ်ၼိူင်ႈၼႆႉ ပဵၼ် coordinate (ထႅဝ်၊ ၵူဝ်ႇလမ်ႇ) ဢၼ်တႄႇတီႈ 0 ၼၼ်ႉယဝ်ႉ။    \/\/လႄႈ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် ထႅဝ်ဢၼ်ၼိူင်ႈ၊ [(x1, y1), (x2, y2) ...] ၼင်ႇႁိုဝ်     \/\/ပေႃးႁဝ်းပၼ် lst လႄႈ တူဝ်ၼပ်ႉတဵမ် x ၼႆၸိုင် ႁႃတူဝ်ၼပ်ႉတဵမ် x တီႈၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ၊     \/\/ထႅဝ်ဢၼ်ၼိူင်ႈၼႆႉ ၸၢင်ႈမီးဝႆႉ ၵွၼ်ႈထႅဝ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/ဢၼ်မိူၼ်ၵၼ်တင်း matrix ၵူၺ်းဢမ်ႇမိူၼ်ၵၼ်တင်း matrix၊    \/\/ပေႃးႁဝ်းပၼ်ၶေႃႈမုၼ်း 2D ၼႆ မၼ်းတေပဵၼ်မႃး သဵၼ်ႈမၢႆဢၼ်မီးလွင်ႈၸုၵ်းၵၼ်ဝႆႉ၊    \/\/ >>> getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    \/\/ (List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    \/\/ >>> getRow((List[List[Long]]()), (1l))\n    \/\/ (List[Tuple2[Long, Long]]())\n    \/\/ >>> getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n    \/\/ (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def getRow(lst: List[List[Long]], x: Long): List[(Long, Long)] = {\n    val coordinates = for {\n      (row, rowIndex) <- lst.zipWithIndex\n      (value, colIndex) <- row.zipWithIndex\n      if value == x\n    } yield (rowIndex.toLong, colIndex.toLong)\n\n    coordinates\n      .groupBy(_._1)\n      .toList\n      .sortBy(_._1)\n      .flatMap { case (rowIndex, coords) =>\n        coords.sortBy(-_._2)\n      }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l, 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()), (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long, Long]]((2l, 2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_88","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/* ယႃႇပေမူၼ်ႉမႄး သဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။    \/\/မၢႆတွင်း:    \/\/ဢမ်ႇၼၼ် ၸႅၵ်ႇမၼ်းၸွမ်းၼင်ႇ လွင်ႈၶၢႆႉယၢႆႈမၼ်း သင်ဝႃႈ တူဝ်လေႃး ((ၵႃႈၶၼ် index ဢွၼ်တၢင်းသုတ်း၊ ၵႃႈၶၼ် index လိုၼ်းသုတ်း) ၼႆႉပဵၼ် even ယဝ်ႉ။    \/\/ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ်ဝႆႉ (ၵႃႈၶၼ် index ဢွၼ်တၢင်းသုတ်း၊ ၵႃႈၶၼ် index လိုၼ်းသုတ်း) ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆၸိုင် တေၸႅၵ်ႇပၼ်သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ၸွမ်းၼင်ႇဢၼ်ၶိုၼ်ႈမႃးၼၼ်ႉယူႇ၊    \/\/ပေႃးဝႃႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းၼႆ၊ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ဝၢႆးသေ ၸႅၵ်ႇၽႄဝႆႉယဝ်ႉၼႆ၊    \/\/ >>> sortArray((List[Long]()))\n    \/\/ (List[Long]())\n    \/\/ >>> sortArray((List[Long](5l.toLong)))\n    \/\/ (List[Long](5l.toLong))\n    \/\/ >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong)))\n    \/\/ (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    \/\/ >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    \/\/ (List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def sortArray(array: List[Long]): List[Long] = {\n    if (array.isEmpty) {\n      array\n    } else {\n      val first = array.head\n      val last = array.last\n      val sum = first + last\n      if (sum % 2 == 0) {\n        array.sorted(Ordering[Long].reverse)\n      } else {\n        array.sorted\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(sortArray(List[Long]())) \/\/ (List[Long]())\n    println(sortArray(List[Long](5L))) \/\/ (List[Long](5L))\n    println(sortArray(List[Long](2L, 4L, 3L, 0L, 1L, 5L))) \/\/ (List[Long](0L, 1L, 2L, 3L, 4L, 5L))\n    println(sortArray(List[Long](2L, 4L, 3L, 0L, 1L, 5L, 6L))) \/\/ (List[Long](6L, 5L, 4L, 3L, 2L, 1L, 0L))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong, 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong, 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong, 14l.toLong, 11l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_89","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/ၶၢႆႉလူင်းၵႂႃႇ 2 ဢၼ် ပေႃႉသႂ်ႇတီႈ 2 တီႈ    \/\/တူဝ်လိၵ်ႈၼႆႉ ထုၵ်ႇလီလႅၵ်ႈလၢႆႈ ႁႂ်ႈပဵၼ် တူဝ်လိၵ်ႈ     \/\/ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈဢၼ်မီးဝႆႉတီႈ တူဝ်လိၵ်ႈၸီႉၼၼ်ႉသေ သွၵ်ႈႁႃၶိုၼ်း    \/\/ႁဵတ်းပၼ် encrypt ဢၼ်ဢဝ် string ပဵၼ် arguments လႄႈ     \/\/ >>> encrypt((\"hi\"))\n    \/\/ (\"lm\")\n    \/\/ >>> encrypt((\"asdfghjkl\"))\n    \/\/ (\"ewhjklnop\")\n    \/\/ >>> encrypt((\"gf\"))\n    \/\/ (\"kj\")\n    \/\/ >>> encrypt((\"et\"))\n    \/\/ (\"ix\")\n    def encrypt(s : String) : String = {\n","canonical_solution":"def encrypt(s: String): String = {\n  s.map(c => {\n    val rotatedChar = (c - 'a' + 4) % 26 + 'a'\n    rotatedChar.toChar\n  })\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n"},{"task_id":"HumanEval_90","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/Return None သင်ၸိူဝ်ႉဝႃႈ ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ၼၼ်ႉၼႆၸိုင်။    \/\/တႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်လဵၵ်ႉသုတ်းဢၼ်ၼိူင်ႈ (next_smallest) ဢၼ်တေၶိုၼ်းပၼ် တူဝ်ဢိင်ဢၼ်လဵၵ်ႉသုတ်းထူၼ်ႈသွင် ၶွင်သဵၼ်ႈမၢႆၼၼ်ႉ။     \/\/သူတေလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်။    \/\/ >>> nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ Some(2l)\n    \/\/ >>> nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    \/\/ Some(2l)\n    \/\/ >>> nextSmallest((List[Long]()))\n    \/\/ None\n    \/\/ >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n    \/\/ None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def nextSmallest(lst: List[Long]): Option[Long] = {\n    if (lst.size < 2) return None\n\n    val distinctSorted = lst.distinct.sorted\n    if (distinctSorted.size < 2) None\n    else Some(distinctSorted(1))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(Some(2l)));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(Some(2l)));\n    assert(nextSmallest((List[Long]())).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(Some(1l)));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(Some(-35l)));\n    }\n\n}\n"},{"task_id":"HumanEval_91","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/ၶေႃႈၵႂၢမ်းဢၼ်တေလႆႈဢဝ် \" \" ၊ \" \" ဢမ်ႇၼၼ်လွင်ႈဢၼ်ယၢပ်ႇၸႂ်ၼႆႉ ပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်တႄႇဢဝ် \"ၵဝ်\" ၼၼ်ႉယဝ်ႉ    \/\/သူတေလႆႈပၼ်ၶေႃႈၵႂၢမ်းတင်းၼမ် လႄႈ ၼႃႈၵၢၼ်သူတေလႆႈၼပ်ႉဢၢၼ်ႇ တူဝ်ၼပ်ႉမၼ်း    \/\/ >>> isBored((\"Hello world\"))\n    \/\/ (0l)\n    \/\/ >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    \/\/ (1l)\n    def isBored(S : String) : Long = {\n","canonical_solution":"def isBored(S: String): Long = {\n    \/\/ Split the input string into sentences using '.', '?' or '!' as delimiters\n    val sentences = S.split(\"[.!?]\").map(_.trim)\n\n    \/\/ Filter sentences that start with 'I' and count them\n    sentences.count(sentence => sentence.startsWith(\"I\"))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_92","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/မၢႆမီႈတၢင်ႇဢၼ်ၵေႃႈ မၢႆမီႈ false ၼႆႉတေၶိုၼ်းပၼ်ယဝ်ႉ။    \/\/ၶိုၼ်းပၼ် true သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉ ပဵၼ်ၼင်ႇ တူဝ်ၼပ်ႉသွင်ဢၼ်ၼၼ်ႉ ႁူမ်ႈၵၼ်သေ တူဝ်ၼပ်ႉတင်းမူတ်းပဵၼ် တူဝ်ၼပ်ႉတဵမ်ၼႆယဝ်ႉ။    \/\/ႁဵတ်းပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉ 3 တူဝ်    \/\/ >>> anyInt(5l, 2l, 7l)\n    \/\/ (true)\n    \/\/ >>> anyInt(3l, 2l, 2l)\n    \/\/ (false)\n    \/\/ >>> anyInt(3l, -2l, 1l)\n    \/\/ (true)\n    \/\/ >>> anyInt((3.6f), (-2.2f), 2l)\n    \/\/ (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \/\/ Create a function that takes 3 numbers.\n  \/\/ Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  \/\/ Returns false in any other cases.\n  def anyInt(x: Float, y: Float, z: Float): Boolean = {\n    val xLong = x.toLong\n    val yLong = y.toLong\n    val zLong = z.toLong\n\n    \/\/ Check if all inputs are actually integers\n    if (xLong == x && yLong == y && zLong == z) {\n      return xLong + yLong == zLong || xLong + zLong == yLong || yLong + zLong == xLong\n    }\n    false\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_93","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ဢဝ်တူဝ်လိၵ်ႈၵူၺ်း။    \/\/တူဝ်မႄႈလိၵ်ႈဢၼ်ပဵၼ် တူဝ်ၸဵင် ၼႂ်းတူဝ်လိၵ်ႈဢင်းၵိတ်း။    \/\/ၶေႃႈၵႂၢမ်းဢၼ်ပႃးတူဝ်လိၵ်ႈ ဢၼ်ဢွၵ်ႇမႃးတီႈၼႃႈ 2 တီႈၼၼ်ႉ    \/\/မၼ်းလႅၵ်ႈလၢႆႈ တူဝ်လိၵ်ႈၵူႈတူဝ်၊ သႂ်ႇတူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈၵူႈတူဝ် ၼႂ်း     \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ်ၶေႃႈၶၢဝ်ႇသေ သႂ်ႇသႂ်ႇၼႂ်း တူဝ်ၼပ်ႉ     \/\/ >>> encode((\"test\"))\n    \/\/ (\"TGST\")\n    \/\/ >>> encode((\"This is a message\"))\n    \/\/ (\"tHKS KS C MGSSCGG\")\n    def encode(message : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def encode(message: String): String = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    val vowelMap = Map(\n      'a' -> 'c', 'e' -> 'g', 'i' -> 'k', 'o' -> 'q', 'u' -> 'w',\n      'A' -> 'C', 'E' -> 'G', 'I' -> 'K', 'O' -> 'Q', 'U' -> 'W'\n    )\n    \n    message.map { char =>\n      if (vowels.contains(char)) {\n        vowelMap(char)\n      } else if (char.isLetter) {\n        if (char.isLower) char.toUpper else char.toLower\n      } else {\n        char\n      }\n    }.mkString\n  }\n\n  \/\/ Test cases\n  def main(args: Array[String]): Unit = {\n    println(encode(\"test\"))            \/\/ should print \"TGST\"\n    println(encode(\"This is a message\")) \/\/ should print \"tHKS KS C MGSSCGG\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"},{"task_id":"HumanEval_94","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/တေလႆႈႁႃ တူဝ်ၼပ်ႉ prime ဢၼ်ယႂ်ႇသေပိူၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉမၼ်းၼၼ်ႉၶိုၼ်းယဝ်ႉ။    \/\/သူတေလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်။    \/\/ >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    \/\/ (10l)\n    \/\/ >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    \/\/ (25l)\n    \/\/ >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    \/\/ (13l)\n    \/\/ >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    \/\/ (11l)\n    \/\/ >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    \/\/ (3l)\n    \/\/ >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    \/\/ (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n","canonical_solution":"def skjkasdkd(lst: List[Long]): Long = {\n  def isPrime(n: Long): Boolean = {\n    if (n <= 1) false\n    else if (n == 2) true\n    else if (n % 2 == 0) false\n    else !(3L to math.sqrt(n).toLong by 2).exists(n % _ == 0)\n  }\n\n  def sumOfDigits(n: Long): Long = n.toString.map(_.asDigit).sum\n\n  val largestPrime = lst.filter(isPrime).sorted.lastOption.getOrElse(0L)\n  sumOfDigits(largestPrime)\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n"},{"task_id":"HumanEval_95","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/Function ၼႆႉ တေလႆႈၶိုၼ်းပၼ် false ပေႃးဝႃႈ map ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီး။    \/\/ပေႃးဢမ်ႇၼၼ် တူဝ်လိၵ်ႈဢၼ်ပႃးတူဝ်ယႂ်ႇၼၼ်ႉ ပဵၼ်တူဝ်ၸႅၼ်ႇတူဝ်လိၵ်ႈ ဢမ်ႇၼၼ် တူဝ်ၸႅၼ်ႇတူဝ်လိၵ်ႈတင်းမူတ်းၼၼ်ႉ ပဵၼ်တူဝ်ၸႅၼ်ႇတူဝ်လိၵ်ႈ ဢၼ်ပႃးတူဝ်ယႂ်ႇ၊ ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းဢဝ် false မႃးၶိုၼ်း။    \/\/ပေႃးဝႃႈႁဝ်းပၼ်ၽႅၼ်ႇလိၼ်ၼႆ ပေႃးဝႃႈၶီးတၢင်းမူတ်းပဵၼ် string တီႈတႂ်ႈၼႆႉၼႆ မၼ်းတေၶိုၼ်းပဵၼ် true    \/\/ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n    \/\/ (true)\n    \/\/ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    \/\/ (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def checkDictCase(dict: Map[String, String]): Boolean = {\n    if (dict.isEmpty) return false\n\n    val keys = dict.keys.toList\n    val allLowerCase = keys.forall(key => key == key.toLowerCase)\n    val allUpperCase = keys.forall(key => key == key.toUpperCase)\n\n    allLowerCase || allUpperCase\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]())) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_96","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၸႅတ်ႈၸၢင်ႇ လႄႈ ဢေႇလိူဝ် n ၼၼ်ႉယဝ်ႉ။    \/\/ႁဵတ်းသၢင်ႈၼႃႈၵၢၼ် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းသေ မိူဝ်းၶိုၼ်း သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉ n ဢၼ်ဢွၼ်တၢင်းသုတ်း    \/\/ >>> countUpTo((5l))\n    \/\/ (List[Long](2l.toLong, 3l.toLong))\n    \/\/ >>> countUpTo((11l))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    \/\/ >>> countUpTo((0l))\n    \/\/ (List[Long]())\n    \/\/ >>> countUpTo((20l))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    \/\/ >>> countUpTo((1l))\n    \/\/ (List[Long]())\n    \/\/ >>> countUpTo((18l))\n    \/\/ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def countUpTo(n : Long) : List[Long] = {\n","canonical_solution":"def countUpTo(n: Long): List[Long] = {\n    def isPrime(num: Long): Boolean = {\n      if (num < 2) return false\n      for (i <- 2L to math.sqrt(num).toLong) {\n        if (num % i == 0) return false\n      }\n      true\n    }\n\n    (2L until n).filter(isPrime).map(_.toLong).toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_97","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ထၢင်ႇဝႃႈ ၶေႃႈၶဝ်ႈၼႆႉ မၼ်းထုၵ်ႇမႅၼ်ႈယူႇတႃႇသေႇ။    \/\/တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ၶွင်တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ၶွင်တူဝ်ၼပ်ႉၶဝ်ၼၼ်ႉ။    \/\/တမ်းဝၢင်း တူဝ်ၼပ်ႉတဵမ်သွင်တူဝ်သေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉတဵမ်     \/\/ >>> multiply((148l), (412l))\n    \/\/ (16l)\n    \/\/ >>> multiply((19l), (28l))\n    \/\/ (72l)\n    \/\/ >>> multiply((2020l), (1851l))\n    \/\/ (0l)\n    \/\/ >>> multiply((14l), (-15l))\n    \/\/ (20l)\n    def multiply(a : Long, b : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def multiply(a: Long, b: Long): Long = {\n        val unitDigitA = abs(a % 10)\n        val unitDigitB = abs(b % 10)\n        unitDigitA * unitDigitB\n    }\n\n    def main(args: Array[String]): Unit = {\n        println(multiply(148l, 412l))  \/\/ 16l\n        println(multiply(19l, 28l))    \/\/ 72l\n        println(multiply(2020l, 1851l)) \/\/ 0l\n        println(multiply(14l, -15l))   \/\/ 20l\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_98","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/ပေႃးဝႃႈႁဝ်းပၼ် string s ၼႆၸိုင် ၵဵပ်းဢဝ် တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈတူဝ်ယႂ်ႇ ဢၼ်ပႃး တူဝ်ၼပ်ႉၸႅၼ်ႇတူဝ်ၼၼ်ႉသေ ၼပ်ႉတူၺ်း    \/\/ >>> countUpper((\"aBCdEf\"))\n    \/\/ (1l)\n    \/\/ >>> countUpper((\"abcdefg\"))\n    \/\/ (0l)\n    \/\/ >>> countUpper((\"dBBE\"))\n    \/\/ (0l)\n    def countUpper(s : String) : Long = {\n","canonical_solution":"def countUpper(s: String): Long = {\n  val uppercaseVowels = Set('A', 'E', 'I', 'O', 'U')\n  s.zipWithIndex.collect {\n    case (ch, index) if index % 2 == 0 && uppercaseVowels.contains(ch) => ch\n  }.size.toLong\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_99","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/လုၵ်ႉတီႈ တူဝ်ၼပ်ႉတဵမ် သွင်တူဝ်ၼၼ်ႉသေ ဢဝ်မၼ်းၸုၵ်းၵႂႃႇတီႈ သုၼ်ၼၼ်ႉယဝ်ႉ။    \/\/ပေႃးဝႃႈ တူဝ်ၼပ်ႉၼၼ်ႉ မီးတၢင်းၵႆၵၼ်ၽဵင်ႇပဵင်းၵၼ်ၼႆ    \/\/ႁဵတ်းပၼ် function ဢၼ်ဢဝ် ၵႃႈၶၼ် (string) ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉၼၼ်ႉ    \/\/ >>> closestInteger((\"10\"))\n    \/\/ (10l)\n    \/\/ >>> closestInteger((\"15.3\"))\n    \/\/ (15l)\n    \/\/ Note:\n    \/\/ Rounding away from zero means that if the given number is equidistant\n    \/\/ from two integers, the one you should return is the one that is the\n    \/\/ farthest from zero. For example closest_integer(\"14.5\") should\n    \/\/ return 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value : String) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def closestInteger(value: String): Long = {\n    val num = value.toDouble\n    val lower = floor(num).toLong\n    val upper = ceil(num).toLong\n    \n    if (abs(num - lower) == abs(num - upper)) {\n      if (num > 0) upper else lower\n    } else {\n      round(num)\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(closestInteger(\"10\"))  \/\/ 10\n    println(closestInteger(\"15.3\")) \/\/ 15\n    println(closestInteger(\"14.5\")) \/\/ 15\n    println(closestInteger(\"-14.5\")) \/\/ -15\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_100","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/i ၼႆႉပဵၼ် တူဝ်ၼပ်ႉႁိၼ် ဢၼ်မီးတီႈၸၼ်ႉ (i+1) ၼၼ်ႉယဝ်ႉ။    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉႁိၼ် တီႈၸၼ်ႉလႂ်ၸၼ်ႉၼၼ်ႉ ၶိုၼ်းမႃးၶိုၼ်း တီႈၼႂ်းသဵၼ်ႈမၢႆ၊ တီႈဢၼ် တူဝ်ၼပ်ႉဢၼ်မီးတီႈ index ၼၼ်ႉ     \/\/- တူဝ်ၼပ်ႉဢၼ်ၸမ်သုတ်း သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼပ်ႉၸမ်သုတ်းၼႆယဝ်ႉ။    \/\/- တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်မႃးၸွမ်းလင် သင်ဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆယဝ်ႉ။    \/\/တူဝ်ၼပ်ႉႁိၼ် ဢၼ်မီးတီႈၸၼ်ႉထၢၼ်ႈၼႃႈၼၼ်ႉတႄႉပဵၼ်:     \/\/ၸၼ်ႉဢွၼ် မီးမၢၵ်ႇႁိၼ် n တၼ်။    \/\/ပေႃးဝႃႈႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ႁဝ်းတေလႆႈႁဵတ်းႁုပ်ႈႁုၼ်ႈမၢၵ်ႇႁိၼ် ဢၼ်မီးၸၼ်ႉ n ၼၼ်ႉယူႇယဝ်ႉ။    \/\/ >>> makeAPile((3l))\n    \/\/ (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n","canonical_solution":"import scala.collection.mutable.ListBuffer\n\nobject Problem {\n    def makeAPile(n: Long): List[Long] = {\n        val pile = ListBuffer[Long]()\n        var currentStones = n\n        for (_ <- 0 until n.toInt) {\n            pile += currentStones\n            currentStones += (if (currentStones % 2 == 0) 2 else 2)\n        }\n        pile.toList\n    }\n\n    def main(args: Array[String]): Unit = {\n        val result = makeAPile(3L)\n        println(result)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_101","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/တႃႇၸႅၵ်ႇထႅဝ်လိၵ်ႈဢွၵ်ႇပဵၼ် ၶေႃႈၵႂၢမ်း လႄႈ ၶိုၼ်းဢဝ် ထႅဝ်လိၵ်ႈဢွၵ်ႇမႃး    \/\/ၸဝ်ႈၵဝ်ႇတေလႆႈပၼ်ၶေႃႈၵႂၢမ်းဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈ ၶမ်း (comma) ဢမ်ႇၼၼ် သဵပ်ႇ (space) သေလႄႈ ၼႃႈၵၢၼ်ၸဝ်ႈၵဝ်ႇတႄႉပဵၼ်    \/\/ >>> wordsString((\"Hi, my name is John\"))\n    \/\/ (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    \/\/ >>> wordsString((\"One, two, three, four, five, six\"))\n    \/\/ (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n","canonical_solution":"def wordsString(s: String): List[String] = {\n    s.split(\"[, ]+\").toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_102","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/ပေႃးဢမ်ႇမီး တူဝ်ၼပ်ႉၸိူင်ႉၼၼ်ၸိုင် တူဝ်ဢိင်ၼႆႉ တေလႆႈၶိုၼ်းပၼ် - 1    \/\/တူဝ်ၼပ်ႉတဵမ်ဢၼ်ယႂ်ႇသေပိူၼ်ႈ ဢၼ်ပႃးၼႂ်းၵႄႈ [x, y] ၼၼ်ႉ သင်ဝႃႈ     \/\/တူဝ်ဢိင်ဢၼ်ၼႆႉ ဢဝ်တူဝ်ၼပ်ႉသုတ်ႉ x လႄႈ y သွင်တူဝ်သေ ၶိုၼ်းပၼ်တူဝ်ၼပ်ႉ     \/\/ >>> chooseNum((12l), (15l))\n    \/\/ (14l)\n    \/\/ >>> chooseNum((13l), (12l))\n    \/\/ (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n","canonical_solution":"def chooseNum(x: Long, y: Long): Long = {\n    \/\/ Ensure x is the lesser value and y is the greater value\n    val (start, end) = if (x > y) (y, x) else (x, y)\n    \n    \/\/ Start from the end of the range and search backwards for an even number\n    for (i <- end to start by -1 if i % 2 == 0) {\n      return i\n    }\n    \n    \/\/ If no even number is found, return -1\n    -1\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n"},{"task_id":"HumanEval_103","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉယႂ်ႇလိူဝ်သေ m ၼႆၸိုင် ၶိုၼ်းဢဝ် -1 မႃးၶိုၼ်းယဝ်ႉ။    \/\/ဢဝ်ၶေႃႈတွပ်ႇၼၼ်ႉ ၶွပ်ႇဝၢႆႇၸူး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၸမ်သုတ်းသေ လႅၵ်ႈလၢႆႈပဵၼ် တူဝ်ၼပ်ႉသွင်တူဝ်။    \/\/တူဝ်ၼပ်ႉတဵမ်ဢၼ်မီးတီႈ n တေႃႇထိုင် m (ၶဝ်ႈပႃး n လႄႈ m) ၼၼ်ႉပဵၼ်ၵႃႊၶၼ်ၵၢင်ယဝ်ႉ။    \/\/လႆႈပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ n လႄႈ m သွင်တူဝ် လႄႈ ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉ     \/\/ >>> roundedAvg((1l), (5l))\n    \/\/ \"0b11\"\n    \/\/ >>> roundedAvg((7l), (5l))\n    \/\/ -1l\n    \/\/ >>> roundedAvg((10l), (20l))\n    \/\/ \"0b1111\"\n    \/\/ >>> roundedAvg((20l), (33l))\n    \/\/ \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String, Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n  \/\/ Function to compute the average of the integers from n through m\n  def roundedAvg(n: Long, m: Long): Either[String, Long] = {\n    if (n > m) {\n      Right(-1L)\n    } else {\n      val count = m - n + 1\n      val sum = (n + m) * count \/ 2\n      val average = round(sum.toDouble \/ count)\n      Left(\"0b\" + average.toLong.toBinaryString)\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(roundedAvg(1L, 5L))    \/\/ Left(\"0b11\")\n    println(roundedAvg(7L, 5L))    \/\/ Right(-1L)\n    println(roundedAvg(10L, 20L))  \/\/ Left(\"0b1111\")\n    println(roundedAvg(20L, 33L))  \/\/ Left(\"0b11010\")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n    }\n\n}\n"},{"task_id":"HumanEval_104","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/မၢႆတွင်း: သဵၼ်ႈမၢႆဢၼ်လႆႈၶိုၼ်းၼၼ်ႉ ထုၵ်ႇလီၸႅၵ်ႇဝႆႉၸွမ်းၼင်ႇ လွင်ႈၶိုၼ်ႈယႂ်ႇၶိုပ်ႈၼႃႈၼၼ်ႉယဝ်ႉ။    \/\/တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉၸႅၵ်ႈဢၼ်ၼိူင်ႈၼၼ်ႉ    \/\/ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်တူဝ်မႄႈလိၵ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ x ၼႆ မၼ်းတေၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉတင်းမူတ်း     \/\/ >>> uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong)))\n    \/\/ (List[Long](1l.toLong, 15l.toLong, 33l.toLong))\n    \/\/ >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong)))\n    \/\/ (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def uniqueDigits(x: List[Long]): List[Long] = {\n    def hasEvenDigit(n: Long): Boolean = {\n      n.toString.exists(c => (c - '0') % 2 == 0)\n    }\n\n    x.filterNot(hasEvenDigit).sorted\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    println(uniqueDigits(List[Long](15L, 33L, 1422L, 1L)))\n    println(uniqueDigits(List[Long](152L, 323L, 1422L, 10L)))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_105","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/\"ၼိုင်ႈ၊ သွင်၊ သၢမ်၊ သီႇ၊ ႁႃႈ၊ ႁူၵ်း၊ သီႇၸဵတ်း၊ ပႅတ်ႇ၊ ၵဝ်ႈ\"    \/\/ၶိုၼ်းမႄးၶိုၼ်း သဵၼ်ႈမၢႆဢၼ်လႆႈမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်လႂ်ဢၼ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ် ၸိုဝ်ႈဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း     \/\/ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ၼႆ ၸႅၵ်ႇပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်မီးၼႂ်းၵႄႈ 1 လႄႈ 9 ပႃးၸဵမ်ၸိူဝ်းၼႆႉ၊    \/\/ >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    \/\/ If the list is empty, return an empty list:\n    \/\/ >>> byLength((List[Long]()))\n    \/\/ (List[String]())\n    \/\/ If the list has any strange number ignore it:\n    \/\/ >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    \/\/ (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n","canonical_solution":"import scala.collection.mutable._\n\nobject Problem {\n  def byLength(arr: List[Long]): List[String] = {\n    \/\/ Map of digit to its corresponding name\n    val numToName = Map(\n      1L -> \"One\",\n      2L -> \"Two\",\n      3L -> \"Three\",\n      4L -> \"Four\",\n      5L -> \"Five\",\n      6L -> \"Six\",\n      7L -> \"Seven\",\n      8L -> \"Eight\",\n      9L -> \"Nine\"\n    )\n\n    \/\/ Filter numbers between 1 and 9\n    val filteredAndSorted = arr.filter(num => num >= 1 && num <= 9).sorted(Ordering[Long].reverse)\n    \/\/ Map filtered and sorted numbers to their corresponding names\n    filteredAndSorted.map(numToName)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_106","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းတူဝ်ၼပ်ႉတူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တိူဝ်းတူဝ်ၼပ်ႉ 1 တေႃႇထိုင် i (1 * 2 * ... * i) ၼၼ်ႉယဝ်ႉ။    \/\/i တႄႇတီႈ 1.    \/\/ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉဢၼ်တႄႇတီႈ 1 တေႃႇထိုင် i ၼၼ်ႉၵေႃႈ တဵမ်ထူၼ်ႈယဝ်ႉ။    \/\/လႄႈ ၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ဢၼ်ယႂ်ႇ n၊ မိူၼ်ၼင်ႇ ၵႃႈၶၼ်ၶွင် တူဝ်ၼပ်ႉဢၼ်မီးတီႈ index i ၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းတူဝ်ၼပ်ႉၶွင် i သင်ဝႃႈ i ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႈၵၼ်ၼႆယဝ်ႉ။    \/\/ႁဵတ်းသၢင်ႈၼႃႈၵၢၼ် f ဢၼ်ဢဝ် n ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တႅၵ်ႈ၊     \/\/ >>> f((5l))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n    def f(n : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(n: Long): List[Long] = {\n        def factorial(x: Long): Long = if (x == 0) 1 else x * factorial(x - 1)\n        \n        (1L to n).map { i =>\n            if (i % 2 == 0) factorial(i) else (1L to i).sum\n        }.toList\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_107","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ 1:    \/\/တူဝ်ၼပ်ႉတဵမ် palindromes ဢၼ်ၶဝ်ႈပႃးၼႂ်း တၢင်းၼမ်တၢင်းလၢႆ ((1, n) ပႃးၸဵမ်) ။    \/\/ပေႃးႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉၸႅၵ်ႈ လႄႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ၶိုၼ်းမႃး    \/\/ >>> evenOddPalindrome((3l))\n    \/\/ ((1l, 2l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    \/\/ Example 2:\n    \/\/ >>> evenOddPalindrome((12l))\n    \/\/ ((4l, 6l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    \/\/ Note:\n    \/\/ 1. 1 <= n <= 10^3\n    \/\/ 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n","canonical_solution":"def evenOddPalindrome(n: Long): (Long, Long) = {\n  def isPalindrome(x: Long): Boolean = {\n    val str = x.toString\n    str == str.reverse\n  }\n\n  var evenCount: Long = 0\n  var oddCount: Long = 0\n\n  for (i <- 1L to n) {\n    if (isPalindrome(i)) {\n      if (i % 2 == 0) evenCount += 1\n      else oddCount += 1\n    }\n  }\n\n  (evenCount, oddCount)\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_108","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း -123 ၼႆႉ မီးတူဝ်ၼပ်ႉ -1, 2, လႄႈ 3 ယဝ်ႉ။    \/\/သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈပဵၼ် တူဝ်ထွၼ်ၼႆ တူဝ်ၼပ်ႉဢၼ်မီးမၢႆလပ်ႉမၼ်းဢွၼ်တၢင်းသုတ်းၼၼ်ႉ တေပဵၼ် တူဝ်ထွၼ်ယဝ်ႉ။    \/\/တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ်ဝႆႉၼၼ်ႉ ပဵၼ် 0 ယဝ်ႉ။    \/\/တႅမ်ႈပၼ် တူဝ်ၼပ်ႉတဵမ် count_nums ဢၼ်ဢဝ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်သေ ၶိုၼ်းပၼ်ၶိုၼ်း    \/\/ >>> countNums((List[Long]()))\n    \/\/ (0l)\n    \/\/ >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    \/\/ (1l)\n    \/\/ >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n    \/\/ (3l)\n    def countNums(arr : List[Long]) : Long = {\n","canonical_solution":"def countNums(arr: List[Long]): Long = {\n  arr.count(num => {\n    val sumOfDigits = num.toString.foldLeft(0) { (acc, char) =>\n      if (char == '-') acc else acc + (char - '0')\n    }\n    sumOfDigits > 0\n  }).toLong\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_109","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/မၢႆတွင်း: သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼႆႉ မၼ်းတေမီးဝႆႉ လွင်ႈမၵ်းမၢႆဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးသင်ၼႆ ၶိုၼ်းဢဝ် true မႃးၶိုၼ်းယဝ်ႉ။    \/\/ပေႃးၼၼ် ၶိုၼ်းဢဝ် true ဢမ်ႇၼၼ် return false။    \/\/သင်ဝႃႈ မၼ်းပဵၼ်လႆႈ တႃႇတေလႆႈ သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉ လူၺ်ႈလွင်ႈႁဵတ်းသၢင်ႈ တၢင်းၼိူဝ်ၼႆႉၼႆ    \/\/တီႈတႄႇမၼ်း ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ဝႃႈၼၼ်ႉ ပဵၼ် 0th index။    \/\/လွင်ႈဢၼ်ပဵၼ် ထႅဝ်ပွင်ႈလိုၼ်းသုတ်းၶွင် သဵၼ်ႈမၢႆၼၼ်ႉ တေၶၢႆႉၵႂႃႇၸူး     \/\/လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼိုင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇၶႂႃၼႆႉ ပွင်ႇဝႃႈ ၶၢႆႉၶူဝ်းၶွင်ၼႂ်းသဵၼ်ႈမၢႆတင်းမူတ်း ၼိုင်ႈဢၼ်။    \/\/ၸဝ်ႈၵဝ်ႇၼႆႉ မီးသုၼ်ႇႁဵတ်းသၢင်ႈလႆႈ လွင်ႈလႅၵ်ႈလၢႆႈၽၢႆႇၶႂႃ လၢႆပွၵ်ႈလၢႆၵမ်းယူႇယဝ်ႉ။    \/\/လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼႆႉ မၼ်းတေၼႄပၼ် တီႈၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ:    \/\/မၼ်းပဵၼ်လႆႈတႃႇတေၸႅၵ်ႇၽႄ သဵၼ်ႈမၢႆ ဢၼ်ဢမ်ႇမီးလွင်ႈယွမ်းလူင်း လူၺ်ႈႁဵတ်းသၢင်ႈ     \/\/တူဝ်ၼပ်ႉၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ တေထုၵ်ႇၸႅၵ်ႇဝႆႉၸွမ်းလွင်ႈဢမ်ႇၸွမ်းပိူင်။ ၼႃႈၵၢၼ်ၶွင်သူၼၼ်ႉ ပဵၼ်တႃႇတႅပ်းတတ်းဝႃႈ     \/\/ႁဝ်းမီးသဵၼ်ႈမၢႆ 'arr' ၶွင်တူဝ်ၼပ်ႉတဵမ် N ဢၼ်ဝႃႈ arr[1], arr[2], ..., arr[N]။    \/\/ >>> moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong)))\n    \/\/ (true)\n    \/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n    \/\/ be achieved for the given list.\n    \/\/ >>> moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong)))\n    \/\/ (false)\n    \/\/ Explanation:It is not possible to get non-decreasing order for the given\n    \/\/ list by performing any number of right shift operations.\n    def moveOneBall(arr : List[Long]) : Boolean = {\n","canonical_solution":"def moveOneBall(arr: List[Long]): Boolean = {\n  if (arr.isEmpty) return true\n\n  \/\/ Find how many times the array needs to be shifted to become sorted\n  val n = arr.length\n  var shiftIndex = -1\n\n  for (i <- 0 until n) {\n    if (arr(i) > arr((i + 1) % n)) {\n      \/\/ More than one place where the order breaks means it can't be sorted with a shift\n      if (shiftIndex != -1) return false\n      shiftIndex = i + 1\n    }\n  }\n\n  \/\/ If no break in order was found, the array is already sorted\n  if (shiftIndex == -1) return true\n\n  \/\/ Check if shifting by the found index sorts the array\n  for (i <- 1 until n) {\n    if (arr((shiftIndex + i) % n) < arr((shiftIndex + i - 1) % n)) return false\n  }\n  \n  true\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 10l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](4l.toLong, 3l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long]())) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_110","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် \"ဢမ်ႇ\"    \/\/လွင်ႈဢၼ် တူဝ်ၼပ်ႉ lst1 တင်းမူတ်းၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ၼိူင်ႈဢၼ်ၼၼ်ႉ၊ ၶိုၼ်းပၼ်ၶေႃႈတွပ်ႇ \"YES\"    \/\/ပေႃးဝႃႈမၼ်းပဵၼ်လႆႈ တႃႇလႅၵ်ႈလၢႆႈ ၶူဝ်းၶွင် ၼႂ်းၵႄႈ lst1 လႄႈ lst2 တႃႇႁဵတ်း     \/\/ဢမ်ႇမီးလွင်ႈမၵ်းမၼ်ႈၼိူဝ် တူဝ်ၼပ်ႉၶွင် ဢၼ်လႅၵ်ႈလၢႆႈၵၼ်ၼ်ႂးၵႄႈ lst1 လႄႈ lst2 ၼၼ်ႉယဝ်ႉ။    \/\/ၼႂ်းၵႄႈၶဝ်ၼၼ်ႉ တႃႇတေႁဵတ်းဢွၵ်ႇ lst1 ဢၼ်ပဵၼ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ်ၵူၺ်းၼၼ်ႉယဝ်ႉ။    \/\/မၼ်းတေတႅပ်းတတ်းဝႃႈ ၸွင်ႇမၼ်းတေၸၢင်ႈႁဵတ်းလႆႈ လွင်ႈလႅၵ်ႈလၢႆႈၶွင် ၶူဝ်းၶွင်ဢၼ်ၼိူင်ႈဢၼ်ႁိုဝ်ၼႆၼၼ်ႉယဝ်ႉ။    \/\/ၼႂ်းပုစ္ဆာၼႆႉ ၸဝ်ႈၵဝ်ႇတေႁဵတ်းသၢင်ႈ တူဝ်ဢိင် ဢၼ်ဢဝ် သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉ သွင်ဢၼ်၊     \/\/ >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (\"YES\")\n    \/\/ >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (\"NO\")\n    \/\/ It is assumed that the input lists will be non-empty.\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def exchange(lst1: List[Long], lst2: List[Long]): String = {\n    \/\/ Check if all elements in lst1 are already even\n    if (lst1.forall(_ % 2 == 0)) return \"YES\"\n\n    \/\/ Find if there's any even number in lst2 to exchange with lst1\n    val lst2EvensExist = lst2.exists(_ % 2 == 0)\n\n    \/\/ Check if there's also at least one odd in lst1 to swap it out\n    val lst1OddsExist = lst1.exists(_ % 2 != 0)\n\n    \/\/ Only possible if both an even element in lst2 and an odd element in lst1 exist\n    if (lst2EvensExist && lst1OddsExist) \"YES\" else \"NO\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong, 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](100l.toLong, 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((\"YES\")));\n    }\n\n}\n"},{"task_id":"HumanEval_111","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/သင်ဝႃႈ တူဝ်လိၵ်ႈတင်းၼမ် မီးလွင်ႈပဵၼ်မိူၼ်ၵၼ်ၼႆ ၶိုၼ်းဢဝ်တင်းမူတ်းၼၼ်ႉၶိုၼ်း။    \/\/တူဝ်လိၵ်ႈဢၼ်မီးလွင်ႈၽိုၼ်မိူၼ်ၼမ်သေလႄႈ ပႃးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ၵွင်ႉၵၢႆႇၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/ပေႃးဝႃႈႁဝ်းပၼ် string ဢၼ်တႅၼ်းတၢင် တူဝ်လိၵ်ႈလဵၵ်ႉလဵၵ်ႉ ဢၼ်ၽႄဝႆႉလူၺ်ႈႁွင်ႈၵိုတ်းၼႆ မၼ်းတေၶိုၼ်းပၼ်ၽႅၼ်ႇလိၼ်ဢၼ်ၼိုင်ႈ    \/\/ >>> histogram((\"a b c\"))\n    \/\/ (Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    \/\/ >>> histogram((\"a b b a\"))\n    \/\/ (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    \/\/ >>> histogram((\"a b c a b\"))\n    \/\/ (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    \/\/ >>> histogram((\"b b b b a\"))\n    \/\/ (Map[String,Long](\"b\" -> 4l))\n    \/\/ >>> histogram((\"\"))\n    \/\/ (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long] = {\n","canonical_solution":"def histogram(test: String): Map[String, Long] = {\n        val words = test.split(\" \")\n        val frequencyMap = words.groupBy(identity).mapValues(_.length.toLong)\n\n        if (frequencyMap.isEmpty) return Map.empty[String, Long]\n\n        val maxCount = frequencyMap.values.max\n        frequencyMap.filter { case (_, count) => count == maxCount }\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_112","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/တေလႆႈၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပႃး တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်လႆႈမႃး လႄႈ true\/false တွၼ်ႈတႃႇ လွင်ႈထတ်းသၢင်ႈၼၼ်ႉ။    \/\/သဵၼ်ႈသၢႆဢၼ်ၼိူင်ႈၼႆႉ ႁွင်ႉဝႃႈ palindrome (လွင်ႈတႅၵ်ႈၼိူင်း) သင်ဝႃႈ မၼ်းလႆႈဢၢၼ်ႇၵႂႃႇၽၢႆႇလင်မိူၼ်ၵၼ်တင်း ၽၢႆႇၼႃႈၼၼ်ႉယဝ်ႉ။    \/\/ပေႃးၼၼ် တူၺ်းဝႃႈ တူဝ်ၵိုတ်းမၼ်းပဵၼ် palindrome ႁိုဝ်းၼႆ။    \/\/ႁဝ်းလႆႈပၼ်ဝႆႉ သွင်တူဝ်ထႅဝ် s လႄႈ c ႁဝ်းတေလႆႈမွတ်ႇပႅတ်ႈ တူဝ်လိၵ်ႈတင်းမူတ်း ၼႂ်း s ဢၼ်ၽဵင်ႇပဵင်းၵၼ်တင်း တူဝ်လိၵ်ႈၼႂ်း c    \/\/ၵၢၼ်ငၢၼ်း     \/\/ >>> reverseDelete((\"abcde\"), (\"ae\"))\n    \/\/ ((\"bcd\", false))\n    \/\/ >>> reverseDelete((\"abcdef\"), (\"b\"))\n    \/\/ ((\"acdef\", false))\n    \/\/ >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    \/\/ ((\"cdedc\", true))\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n","canonical_solution":"def reverseDelete(s: String, c: String): Tuple2[String, Boolean] = {\n    \/\/ Convert the characters to be deleted into a set for quick lookup\n    val deleteSet = c.toSet\n    \n    \/\/ Filter out characters from s that are present in deleteSet\n    val filteredString = s.filterNot(deleteSet.contains)\n    \n    \/\/ Check if the filtered string is a palindrome\n    val isPalindrome = filteredString == filteredString.reverse\n    \n    \/\/ Return the tuple with the filtered string and the palindrome check result\n    (filteredString, isPalindrome)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"},{"task_id":"HumanEval_113","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တီႈတူဝ်ထႅဝ် i'th ၶွင် တူဝ်ၶဝ်ႈၼၼ်ႉ။    \/\/string i ၶွင် input ၼၼ်ႉ။ တီႈၼႆႈ တူဝ်ၼပ်ႉ i တင်းမူတ်းၼႆႉ ထုၵ်ႇလီဢဝ် တူဝ်ၼပ်ႉ  ၼၼ်ႉသေ သႂ်ႇပၼ်။    \/\/တူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃးၵူႈတူဝ် i ၼႆႉ တေလႆႈပဵၼ် တူဝ်ၼပ်ႉ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃး။    \/\/ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ string ဢၼ်ၼိူင်ႈဢၼ်ၼၼ်ႉသေ သဵၼ်ႈမၢႆမၼ်းၼႆႉ မၼ်းမီးတူဝ်ၼပ်ႉၵူၺ်းၼႆၸိုင် ၶိုၼ်းဢဝ် list ၼၼ်ႉမႃးပၼ်။    \/\/ >>> oddCount((List[String](\"1234567\")))\n    \/\/ (List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    \/\/ >>> oddCount((List[String](\"3\", \"11111111\")))\n    \/\/ (List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n","canonical_solution":"def oddCount(lst: List[String]): List[String] = {\n    lst.map { str =>\n      val oddCount = str.count(c => c.asDigit % 2 != 0)\n      val replacedString = s\"the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.\"\n      replacedString\n    }\n  }\n\n  \/\/ Example usage\n  def main(args: Array[String]): Unit = {\n    println(oddCount(List(\"1234567\")))  \/\/ List(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n    println(oddCount(List(\"3\", \"11111111\")))  \/\/ List(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_114","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/လွင်ႈၼပ်ႉဢၢၼ်ႇ။    \/\/ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် n ၼႆၸိုင် ၶူၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်ဢေႇသုတ်း ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢေႇသုတ်းၼၼ်ႉလႄႈ။    \/\/ >>> minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    \/\/ (1l)\n    \/\/ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    \/\/ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def minSubArraySum(nums: List[Long]): Long = {\n    var minEndingHere = nums.head\n    var minSoFar = nums.head\n    \n    for (i <- 1 until nums.length) {\n      minEndingHere = min(nums(i), minEndingHere + nums(i))\n      minSoFar = min(minSoFar, minEndingHere)\n    }\n    \n    minSoFar\n  }\n\n  \/\/ Test Cases\n  def main(args: Array[String]): Unit = {\n    println(minSubArraySum(List(2l, 3l, 4l, 1l, 2l, 4l))) \/\/ Output: 1\n    println(minSubArraySum(List(-1l, -2l, -3l))) \/\/ Output: -6\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong))) == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong, -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong, -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong))) == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_115","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ 1:    \/\/ၼႄပၼ်ဝႃႈ တေလႆႈလူင်းၵၢၼ်ႉ ၵႃႊႁိုဝ်။    \/\/ၼႃႈၵၢၼ်သူတႄႉ တေၸႂ်ႉတိုဝ်းမေႃႈတႃႇလုတ်ႇ တႃႇလုတ်ႇၼမ်ႉ။    \/\/ၼမ်ႉၼၵ်းမၼ်းၵေႃႈ မိူၼ်ၵၼ်။    \/\/ၼမ်ႉတွင်းၵူႈဢၼ်ၼၼ်ႉ မီးဝႆႉ ၵွၵ်းဢၼ်ၵဵဝ်ႇၵၼ်ဢၼ်ၼိူင်ႈ ဢၼ်တေၸၢင်ႈၸႂ်ႉတိုဝ်းတွၼ်ႈတႃႇတေ ဢဝ်ၼမ်ႉဢွၵ်ႇမႃး၊    \/\/1 တီႈၼိူင်ႈဢၼ်ၼႆႉ ပဵၼ်တူဝ်တႅၼ်းၶွင် ၼမ်ႉဢၼ်လဵဝ်ၼၼ်ႉယဝ်ႉ။    \/\/သင်ဝႃႈႁဝ်းလႆႈပၼ်ဝႆႉ ႁူးၼမ်ႉဢၼ်မီးသီႇၸဵင်ႇဢၼ်ၼိုင်ႈၼႆၸိုင် သဵၼ်ႈၼိုင်ႈဢၼ်ၼႆႉ တေတၢင်တူဝ်ႁူးၼမ်ႉဢၼ်လဵဝ်ၵူၺ်း၊    \/\/ >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\n    \/\/ (6l)\n    \/\/ Example 2:\n    \/\/ >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l))\n    \/\/ (5l)\n    \/\/ Example 3:\n    \/\/ >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\n    \/\/ (0l)\n    \/\/ Constraints:\n    \/\/ * all wells have the same length\n    \/\/ * 1 <= grid.length <= 10^2\n    \/\/ * 1 <= grid[:,1].length <= 10^2\n    \/\/ * grid[i][j] -> 0 | 1\n    \/\/ * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n","canonical_solution":"def maxFill(grid: List[List[Long]], capacity: Long): Long = {\n  var totalWaterUnits = 0L\n\n  for (row <- grid) {\n    totalWaterUnits += row.sum\n  }\n\n  \/\/ Calculate the number of times you need to lower the buckets\n  val bucketOperations = totalWaterUnits \/ capacity + (if (totalWaterUnits % capacity != 0) 1 else 0)\n\n  bucketOperations\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l)) == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_116","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/မၼ်းတေလႆႈႁဵတ်းသၢင်ႈၵႂႃႇ ၼင်ႇၼႆယဝ်ႉ။    \/\/တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၶွင် တူဝ်ၼပ်ႉ 1 ၼၼ်ႉ ၸႅၵ်ႇၽႄၸွမ်း ၵႃႈၶၼ်တူဝ်ၼပ်ႉႁူဝ်သိပ်းၼၼ်ႉယဝ်ႉ။    \/\/တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ၼႂ်းတူဝ်တႅၼ်းတူဝ်ၼပ်ႉသွင်ဢၼ်ၶဝ်ၼၼ်ႉ ၸွမ်းၼင်ႇၶၵ်ႉတွၼ်ႈဢၼ်ၶိုၼ်ႈမႃးၼၼ်ႉယဝ်ႉ။    \/\/ၼႂ်း Kata ၼႆႉ ႁဝ်းတေလႆႈၸႅၵ်ႇဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ် ၸွမ်းၼင်ႇ     \/\/ >>> sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    \/\/ >>> sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong)))\n    \/\/ (List[Long](-6l.toLong, -5l.toLong, -4l.toLong, -3l.toLong, -2l.toLong))\n    \/\/ >>> sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long] = {\n","canonical_solution":"def sortArray(arr: List[Long]): List[Long] = {\n        arr.sortBy(n => (n.toBinaryString.count(_ == '1'), n))\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong, -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong, 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_117","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ သဵၼ်ႈမၢႆၶေႃႈမုၼ်းဢၼ်ၶဝ်ႈဝႆႉၼၼ်ႉ ပႃးတူဝ်လိၵ်ႈလႄႈ လွင်ႈပဝ်ႇပႅတ်ႈၵူၺ်း။    \/\/ပေႃးဝႃႈ string s ၼႆႉပဵၼ် empty ၼႆၸိုင် တူဝ်ဢိင်မၼ်းတေလႆႈၶိုၼ်းပၼ်ဝႆႉ empty list ၼၼ်ႉယူႇယဝ်ႉ။    \/\/n တူဝ်လေႃးၵၼ်၊ ၼင်ႇႁိုဝ် ၶေႃႈၵႂၢမ်းၸိူဝ်းၼႆႉ တေဢွၵ်ႇမႃးတီႈ သရူဝ်ႊ (s) ၼၼ်ႉ။    \/\/မၼ်းတေၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ၶေႃႈၵႂၢမ်းတင်းမူတ်း ဢၼ်ပႃးဝႆႉ တီႈၼႂ်း string s ၼၼ်ႉ    \/\/ပေႃးႁဝ်းပၼ် string s လႄႈ တူဝ်ၼပ်ႉသၽႃႇဝ n ၼႆ ႁဝ်းတေလႆႈၸႂ်ႉတိုဝ်း     \/\/ >>> selectWords((\"Mary had a little lamb\"), (4l))\n    \/\/ (List[String](\"little\"))\n    \/\/ >>> selectWords((\"Mary had a little lamb\"), (3l))\n    \/\/ (List[String](\"Mary\", \"lamb\"))\n    \/\/ >>> selectWords((\"simple white space\"), (2l))\n    \/\/ (List[String]())\n    \/\/ >>> selectWords((\"Hello world\"), (4l))\n    \/\/ (List[String](\"world\"))\n    \/\/ >>> selectWords((\"Uncle sam\"), (3l))\n    \/\/ (List[String](\"Uncle\"))\n    def selectWords(s : String, n : Long) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def selectWords(s: String, n: Long): List[String] = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    \n    def consonantCount(word: String): Int = {\n      word.count(c => c.isLetter && !vowels.contains(c))\n    }\n\n    if (s.isEmpty) {\n      List()\n    } else {\n      s.split(\"\\\\s+\").filter(word => consonantCount(word) == n).toList\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_118","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/သူတေၸၢင်ႈထၢင်ႇဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပႃးတူဝ်လိၵ်ႈ ဢင်းၵိတ်ႉၵူၺ်း။    \/\/ႁႃတူဝ်မႄႈသဵင် ဢၼ်လႆႈႁပ်ႉ ၶေႃႈမၼ်ႈၵႅၼ်ႇၽၢႆႇၼိူဝ်။    \/\/တူဝ်ၸီႉဢၼ်မီးတီႈတႄႇလႄႈ တီႈသုတ်းၼၼ်ႉ ဢမ်ႇၼပ်ႉသွၼ်ႇ သင်ဢမ်ႇၼပ်ႉသွၼ်ႇၼႆ ၶိုၼ်းဢဝ် string ဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ လၢႆႈပၼ်    \/\/သွင်တူဝ်လေႃးၵၼ် ဢၼ်လုၵ်ႉတီႈၽၢႆႇၶႂႃ ၶေႃႈၵႂၢမ်း ( case sensitive) ။    \/\/ၶေႃႈၵႂၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်မီး တူဝ်ၸီႉၸမ်သုတ်း ဢၼ်ယူႇၼႂ်းၵႄႈ  လႄႈ  ၼၼ်ႉၼႆယဝ်ႉ။    \/\/ >>> getClosestVowel((\"yogurt\"))\n    \/\/ (\"u\")\n    \/\/ >>> getClosestVowel((\"FULL\"))\n    \/\/ (\"U\")\n    \/\/ >>> getClosestVowel((\"quick\"))\n    \/\/ (\"\")\n    \/\/ >>> getClosestVowel((\"ab\"))\n    \/\/ (\"\")\n    def getClosestVowel(word : String) : String = {\n","canonical_solution":"def getClosestVowel(word: String): String = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    \n    for (i <- word.length - 2 until 0 by -1) {\n      if (!vowels.contains(word(i)) && vowels.contains(word(i + 1)) && !vowels.contains(word(i + 2))) {\n        return word(i + 1).toString\n      }\n    }\n    \n    \"\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"},{"task_id":"HumanEval_119","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ၶိုၼ်းပၼ် 'yes' သင်ဝႃႈမီးလၢႆးႁဵတ်း သ်ႂႇဢၼ်လီ လႄႈ ၶိုၼ်းပၼ် 'no' သင်ဢမ်ႇၼၼ်    \/\/\"()) \" ဢမ်ႇပဵၼ်။    \/\/တူဝ်ယၢင်ႇမၼ်း မိူၼ်ၼင်ႇ string '((((() ' ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ။    \/\/သဵၼ်ႈသၢႆ S ၼႆႉ ပေႃးဝႃႈ မၼ်းပဵၼ်ဢၼ်လီၼႆၸိုင် သင်ဝႃႈ သဵၼ်ႈသၢႆ S  ၼႆႉ မီးဝႆႉ တူဝ်ၸုၵ်းၸွမ်တင်းသဵင်ႈၼႆၸိုင်    \/\/လွင်ႈမၵ်းမၼ်ႈဢၼ်ၼိူင်ႈ၊ ဢၼ်လႆႈမႃးတီႈ သဵၼ်ႈသၢႆမၼ်းၼၼ်ႉ တေပဵၼ်ဢၼ်လီၼၼ်ႉယဝ်ႉ။    \/\/ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇတေထတ်းတူၺ်းဝႃႈ ၸွင်ႇမၼ်းပဵၼ်လႆႈ တႃႇတေၵွင်ႉၵၢႆႇ သွင်ထႅဝ်ထႅဝ်ၼၼ်ႉယူႇႁႃႉ    \/\/မၢႆတွင်းဢၼ်ပႃးဝႆႉ \"(\" ဢမ်ႇၼၼ် မၢႆတွင်းဢၼ်ပႃးဝႆႉ \") \" ၼၼ်ႉၵူၺ်း။    \/\/ဢၼ်ႁဝ်းလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃး သွင်ဢၼ်ၼၼ်ႉ သဵၼ်ႈမၢႆ တင်းသွင်ဢၼ်ၼႆႉ ပဵၼ် open     \/\/ >>> matchParens((List[String](\"()(\", \")\")))\n    \/\/ (\"Yes\")\n    \/\/ >>> matchParens((List[String](\")\", \")\")))\n    \/\/ (\"No\")\n    def matchParens(lst : List[String]) : String = {\n","canonical_solution":"def matchParens(lst: List[String]): String = {\n    def isBalanced(s: String): Boolean = {\n      var balance = 0\n      for (char <- s) {\n        if (char == '(') balance += 1\n        else if (char == ')') balance -= 1\n        if (balance < 0) return false\n      }\n      balance == 0\n    }\n    \n    val combinations = List(\n      lst(0) + lst(1),\n      lst(1) + lst(0)\n    )\n    \n    if (combinations.exists(isBalanced)) \"Yes\" else \"No\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\", \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\", \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\", \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\", \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\", \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\", \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\", \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \")(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\")));\n    }\n\n}\n"},{"task_id":"HumanEval_120","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ 1:    \/\/တၢင်းယၢဝ်း k ဢၼ်ပႃး တူဝ်ၼပ်ႉ k ဢၼ်ၼမ်သုတ်း ၼႂ်း arr။    \/\/ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် arr လႄႈ တူဝ်ၼပ်ႉတဵမ် k ဢၼ်တဵမ်ထူၼ်ႈၼႆ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉၼၼ်ႉ လွၵ်ႈလၢႆႈမႃး    \/\/ >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l))\n    \/\/ (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    \/\/ Example 2:\n    \/\/ >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n    \/\/ (List[Long](4l.toLong, 4l.toLong))\n    \/\/ Example 3:\n    \/\/ >>> maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n    \/\/ (List[Long](2l.toLong))\n    \/\/ Note:\n    \/\/ 1. The length of the list will be in the range of [1, 1000].\n    \/\/ 2. The elements in the list will be in the range of [-1000, 1000].\n    \/\/ 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n","canonical_solution":"def maximum(arr: List[Long], k: Long): List[Long] = {\n    arr.sorted(Ordering[Long].reverse).take(k.toInt).sorted\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong, -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n    }\n\n}\n"},{"task_id":"HumanEval_121","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉၼႆ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်မီးတီႈယူႇၽဵင်ႇပဵင်းၼၼ်ႉ ၶိုၼ်းမႃးပၼ်။    \/\/ >>> solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\n    \/\/ (12l)\n    \/\/ >>> solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    \/\/ (9l)\n    \/\/ >>> solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong)))\n    \/\/ (0l)\n    def solution(lst : List[Long]) : Long = {\n","canonical_solution":"def solution(lst: List[Long]): Long = {\n  lst.zipWithIndex.collect {\n    case (num, idx) if idx % 2 == 0 && num % 2 != 0 => num\n  }.sum\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong, 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong, 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong, 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_122","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉသွင်တူဝ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တႄႇဢဝ် တူဝ်ၼပ်ႉ k ဢၼ်ဢွၼ်တၢင်းသုတ်းၶွင် တူဝ်ၼပ်ႉ arr ၼၼ်ႉသေ ႁူမ်ႈၵၼ်ဝႆႉယဝ်ႉ။    \/\/ပေႃးပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ဢမ်ႇပဵၼ်ဝၢင်းဝႆႉၼၼ်ႉလႄႈ တူဝ်ၼပ်ႉတဵမ် k ၼႆၸိုင် ၶိုၼ်းဢဝ်     \/\/ >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n    \/\/ (24l)\n    \/\/ Constraints:\n    \/\/ 1. 1 <= len(arr) <= 100\n    \/\/ 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def addElements(arr: List[Long], k: Long): Long = {\n    arr.take(k.toInt).filter(x => x >= -99 && x <= 99).sum\n  }\n\n  def main(args: Array[String]): Unit = {\n    val result = addElements(List[Long](111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L), 4L)\n    println(result) \/\/ Output will be 24L\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_123","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/get_odd_collatz(5) ၶိုၼ်းပၼ် [1, 5] # လွင်ႈၶပ်ႉၸႅၼ်ႇ collatz တွၼ်ႈတႃႇ 5 ၼႆႉပဵၼ် [5, 16, 8, 4, 2, 1], ၵွပ်ႈၼၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉပဵၼ် 1 လႄႈ 5 ၵူၺ်းယဝ်ႉ။     \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/2. သဵၼ်ႈမၢႆဢၼ်လႆႈသူင်ႇမႃးၼၼ်ႉ ၸႅၵ်ႇဝႆႉၸွမ်းၼင်ႇ လွင်ႈၶိုၼ်ႈယႂ်ႇၶိုပ်ႈၼႃႈၼၼ်ႉယဝ်ႉ။    \/\/1. Collatz(1) ၼႆႉပဵၼ် [1].    \/\/မၢႆတွင်း:    \/\/ၶေႃႈလၢမ်းၶၢတ်ႈမၼ်းတႄႉ ပဵၼ်ဝႃႈ ဢမ်ႇဝႃႈၵႃႈၶၼ်ၶွင် n ၼႆႉပဵၼ်သင်၊ လွင်ႈၶပ်ႉၸႅၼ်ႇၼႆႉ တေႁွတ်ႈထိုင် 1 တႃႇသေႇယဝ်ႉ။    \/\/ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်မႃးဝၢႆႇၼႃႈၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆ တူဝ်ၼပ်ႉဢၼ်မႃးဝၢႆႇၼႃႈၼႆႉ တေပဵၼ် 3 ပုၼ်ႈ တူဝ်ၼပ်ႉဢၼ်မႃးဝၢႆႇၼႃႈၼၼ်ႉၼႆယဝ်ႉ။    \/\/ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈၼႃႈၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉၸႅၵ်ႈၼႆ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈလင်ၼၼ်ႉ ပဵၼ်ၶိုင်ႈၼိူင်ႈ ၶွင် တူဝ်ၼပ်ႉၸႅၵ်ႈၼႆႉယဝ်ႉ။    \/\/မိူၼ်ၼင်ႇ: တႄႇဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်မၼ်ႈသေဢၼ်ဢၼ် n ယဝ်ႉၵေႃႈ ထႅမ်းပလဵၵ်ႉၵူႈဢၼ်ၼႆႉ လႆႈမႃးတီႈ     \/\/လွင်ႈလၢမ်းၶၢတ်ႈ Collatz ၼႆႉ ပဵၼ်လွင်ႈလၢမ်းၶၢတ်ႈ ၼႂ်းပၢႆးၼပ်ႉ ဢၼ်ၵဵဝ်ႇလူၺ်ႈ လွင်ႈမၵ်းမၼ်ႈဝႆႉ လွင်ႈၶပ်ႉၶိုင်ဝႆႉၼၼ်ႉယဝ်ႉ။    \/\/ပေႃးဝႃႈလႆႈပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉ ဢၼ်ပႃး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တီႈၼႂ်း လွင်ႈၶပ်ႉၶိုင် collatz ၼၼ်ႉၶိုၼ်း။    \/\/ >>> getOddCollatz((5l))\n    \/\/ (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) : List[Long] = {\n","canonical_solution":"import scala.collection.mutable.ListBuffer\n\nobject Problem {\n  def getOddCollatz(n: Long): List[Long] = {\n    val oddNumbers = ListBuffer[Long]()\n    var number = n\n    while (number != 1) {\n      if (number % 2 == 1) {\n        oddNumbers += number\n      }\n      number = if (number % 2 == 0) number \/ 2 else 3 * number + 1\n    }\n    oddNumbers += 1\n    oddNumbers.sorted.toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong, 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_124","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/4. ဝၼ်းတေႇတေႇၼႆႉ တေလႆႈပဵၼ်ၼႂ်းပိူင်ၾၢင်: mm-dd-yyyy     \/\/3. လိူၼ်ဢၼ်ဢမ်ႇထုၵ်ႇလီမီးဢေႇလိူဝ် 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 12 လႅမ်ႈ။    \/\/2. ဝၼ်းထီႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 31 ဝၼ်း တွၼ်ႈတႃႇ လိူၼ် 1,3,5,7,8,10,12 လႄႈ ဝၼ်းထီႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 30 ဝၼ်း တွၼ်ႈတႃႇ လိူၼ် 4,6,9,11 လႄႈ ဝၼ်းထီႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 29 တွၼ်ႈတႃႇ လိူၼ် 2။    \/\/1. ၶၢဝ်းယၢမ်းဢၼ်ၼိူင်ႈၼႆႉ ဢမ်ႇလႆႈပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ။    \/\/ဝၼ်းၼၼ်ႉ မၢၼ်ႇမႅၼ်ႈယူႇ သင်ဝႃႈ ပၵ်းပိူင်ဢၼ်ၸွမ်းမႃးၸိူဝ်းၼႆႉ တင်းမူတ်းလႆႈထုၵ်ႇၸွမ်းၸွမ်းၼႆယဝ်ႉ။    \/\/ပေႃးဝႃႈ ဝၼ်းမၼ်းမၢၼ်ႇမႅၼ်ႈၼႆ တေလႆႈၶိုၼ်း true ပေႃးဢမ်ႇၼၼ် တေလႆႈၶိုၼ်း false    \/\/တေလႆႈတႅမ်ႈ function ဢၼ်တေမၵ်းမၼ်ႈပၼ် string ဝၼ်း လႄႈ     \/\/ >>> validDate((\"03-11-2000\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"15-01-2012\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"04-0-2040\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"06-04-2020\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"06\/04\/2020\"))\n    \/\/ (false)\n    def validDate(date : String) : Boolean = {\n","canonical_solution":"import scala.util.Try\n\nobject Problem {\n  def validDate(date: String): Boolean = {\n    if (date.isEmpty) return false\n    \n    val datePattern = \"\"\"^(\\d{2})-(\\d{2})-(\\d{4})$\"\"\".r\n\n    date match {\n      case datePattern(monthStr, dayStr, yearStr) => \n        (Try(monthStr.toInt).toOption, Try(dayStr.toInt).toOption) match {\n          case (Some(month), Some(day)) if month >= 1 && month <= 12 =>\n            month match {\n              case 1 | 3 | 5 | 7 | 8 | 10 | 12 => day >= 1 && day <= 31\n              case 4 | 6 | 9 | 11 => day >= 1 && day <= 30\n              case 2 => day >= 1 && day <= 29\n              case _ => false\n            }\n          case _ => false\n        }\n      case _ => false\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_125","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/တူဝ်လိၵ်ႈ၊ ord (a) = 0, ord (b) = 1, ... ord (z) = 25    \/\/ပေႃးဢမ်ႇမီး တူဝ်ၼပ်ႉၶမ်ၼႆ တေလႆႈၶိုၼ်း မၢႆတူဝ်လိၵ်ႈဢွၼ်ႇ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၼႂ်းတူဝ်လိၵ်ႈ     \/\/ပေႃးဝႃႈႁဝ်းလႆႈပၼ်ၶေႃႈၵႂၢမ်းတင်းၼမ်ၼႆ သင်ဝႃႈဢမ်ႇမီးၶေႃႈၵႂၢမ်းဢၼ်ပႃးဝႆႉတီႈၼႂ်း လိၵ်ႈဢၼ်ႁဝ်းၶႂ်ႈတႅမ်ႈၼၼ်ႉၼႆ ႁဝ်းတေလႆႈၶိုၼ်းပၼ် သဵၼ်ႈမၢႆၶေႃႈၵႂၢမ်း ဢၼ်ၸႅၵ်ႇဝႆႉတီႈၼႂ်းႁွင်ႈဢၼ်ပႃးဝႆႉတီႈၼႂ်းႁွင်ႈၼၼ်ႉယူႇယဝ်ႉ။    \/\/ >>> splitWords((\"Hello world!\"))\n    \/\/ List[String](\"Hello\", \"world!\")\n    \/\/ >>> splitWords((\"Hello,world!\"))\n    \/\/ List[String](\"Hello\", \"world!\")\n    \/\/ >>> splitWords((\"abcdef\"))\n    \/\/ 3l\n    def splitWords(txt : String) : Either[List[String], Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def splitWords(txt: String): Either[List[String], Long] = {\n    if (txt.contains(\" \")) {\n      Left(txt.split(\"\\\\s+\").toList)\n    } else if (txt.contains(\",\")) {\n      Left(txt.split(\",\").toList)\n    } else {\n      val oddOrderCount = txt.toCharArray\n        .count(c => ('a' to 'z').contains(c) && (c - 'a') % 2 == 0)\n      Right(oddOrderCount.toLong)\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"},{"task_id":"HumanEval_126","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉထွၼ် လႄႈ တူဝ်ၼပ်ႉတဵမ်ၵူၺ်း။    \/\/ပေႃးဝႃႈမီးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်မိူၼ်ၵၼ် ၼမ်လိူဝ် 1 ဢၼ်ၼႆၸိုင်    \/\/ပေႃးလႆႈပၼ် သဵၼ်ႈမၢႆ မၢႆလပ်ႉၼႆ ၶိုၼ်းပၼ် မၢႆလပ်ႉ ဢၼ်ၸႅၵ်ႇဝႆႉ ဢမ်ႇၼၼ် ဢမ်ႇၸႅၵ်ႇဝႆႉၼၼ်ႉ    \/\/ >>> isSorted((List[Long](5l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    \/\/ (false)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    \/\/ (false)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (true)\n    \/\/ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    \/\/ (false)\n    def isSorted(lst : List[Long]) : Boolean = {\n","canonical_solution":"def isSorted(lst: List[Long]): Boolean = {\n    if (lst.isEmpty || lst.length == 1) return true\n\n    var hasDuplicate = false\n\n    for (i <- 1 until lst.length) {\n        if (lst(i) < lst(i - 1)) {\n            return false\n        }\n        if (lst(i) == lst(i - 1)) {\n            if (hasDuplicate) return false\n            hasDuplicate = true\n        } else {\n            hasDuplicate = false\n        }\n    }\n\n    true\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_127","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ (input\/output) ꧦ    \/\/သင်ဝႃႈ သွင်ဢၼ်ၼႆႉ ဢမ်ႇၶွပ်ႇၵၼ်ၼႆ ၶိုၼ်းပၼ် \"NO\"    \/\/ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် \"NO\"    \/\/သင်ဝႃႈ တၢင်းယၢဝ်းၶွင် လွင်ႈၶွပ်ႇၵၼ်ၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉဢၼ်လမ်ႇလွင်ႈၼႆၸိုင် ၶိုၼ်းပၼ်ၶေႃႈတွပ်ႇ \"YES\"၊     \/\/ဢၼ်တၢင်းယၢဝ်းမၼ်းပဵၼ် 1 ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ။    \/\/တူဝ်ယၢင်ႇမၼ်း လွင်ႈၸတ်းတွၼ်ႈၶွင် ၶၢဝ်းယၢမ်း (1,3) ၊ (2,4) ၼႆႉပဵၼ် (2,3)     \/\/လွင်ႈၵိုတ်းယိုဝ်းၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈယဝ်ႉ။    \/\/ၼႃႈၵၢၼ်သူၼႆႉတေႉ ပဵၼ်တႃႇတေတႅပ်းတတ်းဝႃႈ တၢင်းယၢဝ်းဢၼ်ၶွပ်ႇၵၼ်သွင်ဢၼ်ၼႆႉ     \/\/တွၼ်ႈတႃႇ ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉဢၼ်လႂ်သေဢမ်ႇဝႃႈ မၼ်းထုၵ်ႇလီဝူၼ်ႉဝႃႈ လွင်ႈတႄႇမၼ်းၼႆႉ လဵၵ်ႉလိူဝ် ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တၢင်းသုတ်းမၼ်းၼၼ်ႉယဝ်ႉ။    \/\/ၶဝ်ႈပႃးဝႆႉ တီႈတႄႇလႄႈ တီႈသုတ်းၼၼ်ႉယဝ်ႉ။    \/\/ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ လႆႈပိၵ်ႉဢိုတ်းဝႆႉသေ ဢၼ်ၼႆႉပွင်ႇဝႃႈ ၶၢဝ်းယၢမ်း (တႄႇ၊ သုတ်း) ၼၼ်ႉ လႆႈပိၵ်ႉဢိုတ်းဝႆႉယဝ်ႉ။    \/\/တီႈဢၼ် ၶၢဝ်းယၢမ်းဢၼ်လႂ်ဢၼ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ်သွင်ဢၼ်၊ တူဝ်ယၢင်ႇမၼ်း ၶၢဝ်းယၢမ်း = (တႄႇ၊ သုတ်း) = (1, 2) ။    \/\/သူတေလႆႈပၼ်ၶၢဝ်းယၢမ်း သွင်ပွၵ်ႈ၊    \/\/ >>> intersection(((1l, 2l)), ((2l, 3l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    \/\/ (\"YES\")\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n","canonical_solution":"import scala.math._\n\nobject Problem {\n  def isPrime(n: Long): Boolean = {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n      if (n % i == 0 || n % (i + 2) == 0) return false\n      i += 6\n    }\n    true\n  }\n\n  def intersection(interval1: (Long, Long), interval2: (Long, Long)): String = {\n    val start = max(interval1._1, interval2._1)\n    val end = min(interval1._2, interval2._2)\n    if (start > end) return \"NO\"\n\n    val length = end - start\n    if (isPrime(length)) \"YES\" else \"NO\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"},{"task_id":"HumanEval_128","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/မၢႆတွင်း: return None တွၼ်ႈတႃႇ empty arr.     \/\/တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈဢၼ်ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉ 1, -1 ဢမ်ႇၼၼ် 0 ၼၼ်ႉယဝ်ႉ။    \/\/လွင်ႈႁူမ်ႈပွင်းၶွင် တၢင်းၼမ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵုၼ်းလူၺ်ႈ လွင်ႈၵုၼ်းၶွင် တူဝ်ယၢင်ႇတၢင်းမူတ်းၼၼ်ႉ    \/\/ႁဝ်းတေလႆႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ၼိူင်ႈလႄႈ ႁဝ်းတေလႆႈၶိုၼ်းမႃး    \/\/ >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong)))\n    \/\/ Some(9l)\n    \/\/ >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))\n    \/\/ Some(0l)\n    \/\/ >>> prodSigns((List[Long]()))\n    \/\/ None\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def prodSigns(arr: List[Long]): Option[Long] = {\n    if (arr.isEmpty) return None\n\n    val productOfSigns = arr.foldLeft(1l)((acc, num) => acc * sign(num))\n    val sumOfMagnitudes = arr.map(_.abs).sum\n\n    Some(sumOfMagnitudes * productOfSigns)\n  }\n\n  private def sign(num: Long): Long = {\n    if (num > 0) 1\n    else if (num < 0) -1\n    else 0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong))).equals(Some(-9l)));\n    assert(prodSigns((List[Long](0l.toLong, 1l.toLong))).equals(Some(0l)));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(Some(-10l)));\n    assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(Some(20l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(Some(4l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(Some(-4l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(Some(0l)));\n    }\n\n}\n"},{"task_id":"HumanEval_129","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၶပ်ႉဝႆႉပၼ် တီႈၼႂ်း သႄး (လ်) ဢၼ် သဵၼ်ႈတၢင်းဢၼ်ဢေႇသုတ်းၼၼ်ႉ လတ်းၵႂႃႇၼၼ်ႉယဝ်ႉ။    \/\/မၼ်းလႆႈႁပ်ႉလွင်ႈမၼ်ႈၵႅၼ်ႇဝႃႈ ၶေႃႈတွပ်ႇမၼ်းၼႆႉ ပဵၼ်ဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/lst_A[j] = lst_B[j]။    \/\/lst_A[i] < lst_B[i] လႄႈ တွၼ်ႈတႃႇ j (1 <= j < i) ႁဝ်းမီး     \/\/လိူဝ်သေ lst_B၊ ပေႃးဢဝ်ၶေႃႈၵႂၢမ်းတၢင်ႇဢၼ်ဝႃႈၼႆ မၼ်းမီးဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ပဵၼ် index i (1 <= i <= k)     \/\/ပေႃးႁဝ်းၸႂ်ႉ lst_A လႄႈ lst_B ၼႆ lst_A ၼႆႉ မၼ်းတေမီးတီႈပွင်ႇဢေႇလိူဝ်သေ lst_A ၼႆယူႇယဝ်ႉ။    \/\/ဝၢႆးသေႁဵတ်းဝႆႉ သဵၼ်ႈမၢႆဢၼ်မီးလွင်ႈမၵ်းမၼ်ႈဝႆႉၶွင် ၵႃႈၶၼ်ၼိူဝ် သႄး (လ်) ဢၼ် A လႄႈ B ၵႂႃႇၼၼ်ႉယဝ်ႉ    \/\/သဵၼ်ႈတၢင်း A (တၢင်းယၢဝ်း k) ၼႆႉ ပေႃးဝႃႈ     \/\/သူဢမ်ႇၸၢင်ႈဢွၵ်ႇပႅတ်ႈတီႈၼႃႈလိၼ်။    \/\/ဢၼ်ဢမ်ႇလူဝ်ႇပႅၵ်ႇပိူင်ႈၵၼ်) ။    \/\/ၶႅၼ်းတေႃႈမၢႆတွင်းဝႃႈ သဵၼ်ႈတၢင်းတၢင်းဢၼ်ယၢဝ်း k ၼၼ်ႉ ပွင်ႇဝႃႈ လႅပ်ႈတေၵႂႃႇတီႈ သႄးလ် k (ဢမ်ႇၸႂ်ႈ     \/\/cell  ၸွင်ႇတေလႆႈ    \/\/ပေႃးလၢတ်ႈထႅင်ႈလၢႆးၼိုင်ႈ၊ သူတေၵႂႃႇၸူး သႄး (လ်) ဢၼ်ၽႄဝႆႉ ၽၢႆဢၼ်လဵဝ်ၵၼ်တင်း သူၼၼ်ႉယူႇယဝ်ႉ။    \/\/တီႈၶၵ်ႉတွၼ်ႈလႂ်သေဢမ်ႇဝႃႈ မၼ်းတေၶၢႆႉၵႂႃႇၸူး တီႈၶၵ်ႉတွၼ်ႈဢၼ်မီးႁိမ်းႁွမ်းမၼ်းၼၼ်ႉသေ    \/\/တေလႆႈႁႃ သဵၼ်ႈတၢင်းဢၼ်လဵၵ်ႉသုတ်း ဢၼ်မီးတၢင်းယၢဝ်း k တီႈၼႂ်းၵွင်ႉၼၼ်ႉ။    \/\/inclusive ၼႆႉ တေဢွၵ်ႇမႃးၵမ်းလဵဝ် တီႈၼႂ်းၶွပ်ႇၶွင် grid ၼၼ်ႉယူႇယဝ်ႉ။    \/\/သႄး (လ်) ၶွင်ၵရဵၵ်ႉ (လ်) ၼႆႉ မၼ်းမီးၵႃႈၶၼ်ဢၼ်ၼိူင်ႈယူႇယဝ်ႉ။ တူဝ်ၼပ်ႉတဵမ်ၵူႈဢၼ်ဢၼ် ၼႂ်းၵႄႈ [1, N * N] ၼၼ်ႉ    \/\/ပေႃးဝႃႈမီးဝႆႉ grid ဢၼ်ၼိူင်ႈဢၼ်ဢၼ်ဢၼ်မီး ထႅဝ် N လႄႈ ၵႅၼ် N (N >= 2) လႄႈ တူဝ်ၼပ်ႉတဵမ် k ဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉၼႆ     \/\/ >>> minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l))\n    \/\/ (List[Long](1l.toLong, 2l.toLong, 1l.toLong))\n    \/\/ >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l))\n    \/\/ (List[Long](1l.toLong))\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def minPath(grid: List[List[Long]], k: Long): List[Long] = {\n    val n = grid.length\n    val directions = List((0, 1), (1, 0), (0, -1), (-1, 0))\n\n    def isValid(x: Int, y: Int): Boolean = x >= 0 && y >= 0 && x < n && y < n\n\n    def dfs(x: Int, y: Int, path: List[Long]): List[Long] = {\n      if (path.length == k) return path\n      var minPath: List[Long] = List.fill(k)(Long.MaxValue)\n      for ((dx, dy) <- directions) {\n        val nx = x + dx\n        val ny = y + dy\n        if (isValid(nx, ny)) {\n          val newPath = dfs(nx, ny, path :+ grid(nx)(ny))\n          if (lexCompare(newPath, minPath)) {\n            minPath = newPath\n          }\n        }\n      }\n      minPath\n    }\n\n    def lexCompare(a: List[Long], b: List[Long]): Boolean = {\n      a.zip(b).find { case (x, y) => x != y } match {\n        case Some((x, y)) => x < y\n        case None => false\n      }\n    }\n\n    var minPathOverall = List.fill(k)(Long.MaxValue)\n    for {\n      i <- 0 until n\n      j <- 0 until n\n    } {\n      val startingPath = List(grid(i)(j))\n      val currentPath = dfs(i, j, startingPath)\n      if (lexCompare(currentPath, minPathOverall)) {\n        minPathOverall = currentPath\n      }\n    }\n    minPathOverall\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong, 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong, 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong, 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong, 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_130","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/တူဝ်ၼပ်ႉ n + 1 ဢၼ်ဢွၼ်တၢင်းသုတ်း ၶွင် လွင်ႈၶပ်ႉၸႅၼ်ႇ Tribonacci ၼၼ်ႉယဝ်ႉ။    \/\/ပေႃးႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ် n ၼႆ ႁဝ်းတေလႆႈၶိုၼ်း သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ်ၼၼ်ႉ    \/\/= 2 + 3 + 3 = 8    \/\/tri(3) = tri(2) + tri(1) + tri(4)     \/\/tri(4) = 3     \/\/tri(2) = 1 + (2 \/ 2) = 2     \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼိူင်ႈၼႆယဝ်ႉ။    \/\/tri (n) = 1 + n \/ 2၊ သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၵူပ်ႉၼႆယဝ်ႉ။    \/\/tri(1) = 3     \/\/လွင်ႈၸႅၵ်ႇၽႄၸႆႉႁေႇ Tribonacci ၼႆႉ မၵ်းမၼ်ႈလူၺ်ႈ လွင်ႈပဵၼ်မႃးၶိုၼ်း:    \/\/ၵူၺ်းၵႃႈ ဢၼ်ၵူၼ်းႁဝ်းဢမ်ႇႁူႉၼၼ်ႉတႄႉ ပဵၼ်လွင်ႈၸႅၵ်ႇမႅင်ႇၶွင် Tribonacci ၼၼ်ႉယဝ်ႉ။    \/\/ၵူၼ်းၵူႈၵေႃႉႁူႉၸၵ်း လွင်ႈထႅဝ် Fibonacci မၼ်းလႆႈထုၵ်ႇလဵပ်ႈႁဵၼ်းဝႆႉႁၢဝ်ႈႁႅင်း လူၺ်ႈ ၽူႈလူင်ႉလႅၼ်ႇပၢႆးၼပ်ႉၶဝ် ၼ်ႂးပီႊ ႐႐႐ ၼၼ်ႉယဝ်ႉ။    \/\/ >>> tri((3l))\n    \/\/ (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n","canonical_solution":"import scala.collection.mutable.ListBuffer\n\nobject Problem {\n  def tri(n: Long): List[Long] = {\n    \/\/ Initialize list with the first element of the Tribonacci sequence\n    val tribonacciSeq = ListBuffer[Long](3)\n\n    \/\/ Generate remaining elements up to the nth element\n    for (i <- 1L to n) {\n      if (i % 2 == 0) {\n        \/\/ If even, the formula is 1 + n \/ 2\n        tribonacciSeq.append(1 + i \/ 2)\n      } else {\n        \/\/ If odd, the formula is tri(n - 1) + tri(n - 2) + tri(n + 1)\n        \/\/ tri(n + 1) is handled as we iterate further\n        val tri_i_minus_1 = if (i - 1 >= 0) tribonacciSeq((i - 1).toInt) else 0\n        val tri_i_minus_2 = if (i - 2 >= 0) tribonacciSeq((i - 2).toInt) else 0\n        val tri_i_plus_1 = if (i + 1 <= n) 1 + (i + 1) \/ 2 else 0 \/\/ calculated as if the next is even\n        tribonacciSeq.append(tri_i_minus_1 + tri_i_minus_2 + tri_i_plus_1)\n      }\n    }\n\n    \/\/ Return as a list\n    tribonacciSeq.toList\n  }\n\n  \/\/ Test examples\n  def main(args: Array[String]): Unit = {\n    println(tri(3)) \/\/ List(3, 2, 8)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_131","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/ၶိုၼ်းပၼ် 0 သင်ဝႃႈ တူဝ်ၼပ်ႉတင်းမူတ်းပဵၼ်တူဝ်ၸႅၼ်ႇၼၼ်ႉယဝ်ႉ။    \/\/ပေႃးဝႃႈလႆႈပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ n ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉမႃး။    \/\/ >>> digits((1l))\n    \/\/ (1l)\n    \/\/ >>> digits((4l))\n    \/\/ (0l)\n    \/\/ >>> digits((235l))\n    \/\/ (15l)\n    def digits(n : Long) : Long = {\n","canonical_solution":"def digits(n: Long): Long = {\n    val product = n.toString.map(_.asDigit).filter(_ % 2 != 0).product\n    if (product == 1 && n.toString.forall(_.asDigit % 2 == 0)) 0L else product\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_132","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တီႈဢေႇသုတ်းမၼ်း သဵၼ်ႈမၢႆဢၼ်ၼိုင်ႈ ၼႂ်းၸႄႈတွၼ်ႈၼၼ်ႉ လႆႈထုၵ်ႇသႂ်ႇဝႆႉတီႈၼႂ်းၵွင်ႉမၼ်းယဝ်ႉ။    \/\/Function ၼႆႉ တေလႆႈၶိုၼ်းပၼ် true သင်ၸိူဝ်ႉဝႃႈ မၼ်းမီးဝႆႉ brackets ဢၼ်မၢၼ်ႇမႅၼ်ႈၼႆၵူၺ်း    \/\/ႁဵတ်းပၼ် function ဢၼ်ဢဝ် string ဢၼ်ပႃး square brackets ၼၼ်ႉသေ သႂ်ႇပၼ်။    \/\/ >>> isNested((\"[[]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[]]]]]]][[[[[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[][]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[[][]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[[]][[\"))\n    \/\/ (true)\n    def isNested(string : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def isNested(string: String): Boolean = {\n    var stack = new Stack[Char]()\n    var nested = false\n\n    for (char <- string) {\n      char match {\n        case '[' => stack.push(char)\n        case ']' =>\n          if (stack.nonEmpty) {\n            stack.pop()\n            if (stack.nonEmpty) {\n              nested = true\n            }\n          }\n      }\n      if (nested) return true\n    }\n\n    false\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_133","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/ၶႅပ်းႁၢင်ႈဢၼ်မီးဝႆႉၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ ႁႂ်ႈပဵၼ်ဢၼ်ၸီႉၸမ်ႈဝႆႉ တီႈၼိူဝ်သုတ်း int ((ceiling)) ဢွၼ်တၢင်းသုတ်း။    \/\/တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသီႇၸဵင်ႇ တီႈၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊     \/\/သူတေလႆႈပၼ် သဵၼ်ႈမၢႆမၢႆ မၢႆလပ်ႉ။    \/\/ >>> lst((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)))\n    \/\/ (14l)\n    \/\/ >>> lst((List[Float](1.0f.toFloat, 4.0f.toFloat, 9.0f.toFloat)))\n    \/\/ (98l)\n    \/\/ >>> lst((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    \/\/ (84l)\n    \/\/ >>> lst((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat)))\n    \/\/ (29l)\n    \/\/ >>> lst((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat)))\n    \/\/ (6l)\n    def sumSquares(lst : List[Float]) : Long = {\n","canonical_solution":"import scala.math._\n\nobject Problem {\n  def sumSquares(lst: List[Float]): Long = {\n    lst.map(x => ceil(x.toDouble).toLong)\n      .map(x => x * x)\n      .sum\n  }\n\n  \/\/ Example usage, you can test the function with the given examples:\n  def main(args: Array[String]): Unit = {\n    println(sumSquares(List(1.0f, 2.0f, 3.0f))) \/\/ Output: 14\n    println(sumSquares(List(1.0f, 4.0f, 9.0f))) \/\/ Output: 98\n    println(sumSquares(List(1.0f, 3.0f, 5.0f, 7.0f))) \/\/ Output: 84\n    println(sumSquares(List(1.4f, 4.2f, 0.0f))) \/\/ Output: 29\n    println(sumSquares(List(-2.4f, 1.0f, 1.0f))) \/\/ Output: 6\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat, 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat, 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat))) == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n    assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_134","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/မၢႆတွင်း: \"ၶေႃႈၵႂၢမ်း\" ၼႆႉ ပဵၼ်ၸုမ်းတူဝ်လိၵ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈႁွင်ႈ။    \/\/ၶေႃႈၵႂၢမ်းဢၼ်ၼိုင်ႈ၊ ၶေႃႈၵႂၢမ်းဢၼ်ၼိုင်ႈ ဢၼ်ၽိတ်း။    \/\/တူဝ်လိၵ်ႈၸီႉၼႆႉ ပဵၼ်တူဝ်လိၵ်ႈ တူဝ်လိၵ်ႈၸီႉ လႄႈ ဢမ်ႇၸႂ်ႈတူဝ်လိၵ်ႈၸီႉ     \/\/ၵေႃႇသၢင်ႈပၼ် တူဝ်ဢိင် ဢၼ်တေၶိုၼ်းပၼ် true သင်တူဝ်လိၵ်ႈလိုၼ်းသုတ်း     \/\/ >>> checkIfLastCharIsALetter((\"apple pie\"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    \/\/ (true)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"\"))\n    \/\/ (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def checkIfLastCharIsALetter(txt: String): Boolean = {\n        if (txt.isEmpty) return false\n        val trimmed = txt.trim\n        if (trimmed.isEmpty) return false\n        val parts = trimmed.split(\" \")\n        val lastChars = parts.map(_.last)\n        if (lastChars.isEmpty) return false\n        val lastChar = trimmed.last\n        lastChars.contains(lastChar) && lastChar.isLetter\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_135","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/လွင်ႈဢၼ်လႆႈၽိတ်းပိူင်ႈၵၼ်ၼၼ်ႉ    \/\/ပေႃးဢမ်ႇမီး တူဝ်ထႅဝ်ဢၼ်ၼႆႉၼႆ ၶိုၼ်းဢဝ် - 1 မႃး။ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တေဢမ်ႇပႃး     \/\/ဢမ်ႇလႆႈယႂ်ႇလိူဝ် ဢမ်ႇၼၼ် ဢမ်ႇလႆႈၽဵင်ႇပဵင်းၵၼ်တင်း တူဝ်ၼပ်ႉဢၼ်မီးဝႆႉၸမ်မၼ်းၼၼ်ႉ သင်ဝႃႈ    \/\/ႁဵတ်းပၼ် function ဢၼ်ၼိူင်ႈ ဢၼ်တေၶိုၼ်းပၼ် index ဢၼ်ယႂ်ႇသုတ်းၶွင် ၶူဝ်းၶွင်ဢၼ်ၼိူင်ႈ ဢၼ်တေလႆႈၸႂ်ႉတိုဝ်း     \/\/ >>> canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    \/\/ (3l)\n    \/\/ >>> canArrange((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \/\/ (-1l)\n    def canArrange(arr : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n  def canArrange(arr: List[Long]): Long = {\n    for (i <- arr.indices.drop(1)) {\n      if (arr(i) < arr(i - 1)) return i.toLong\n    }\n    -1L\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_136","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/သင်ဢမ်ႇမီး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇမီးလွင်ႈထွၼ် ဢမ်ႇၼၼ် ဢၼ်မီးလွင်ႈထွၼ်ၼႆ ၶိုၼ်းဢဝ်မႃးၶိုၼ်းမိူၼ်ၼင်ႇ None    \/\/တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ ၼႂ်းသဵၼ်ႈမၢႆ။    \/\/တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇတဵမ်ၼၼ်ႉ ဢၼ်ယႂ်ႇသေပိူၼ်ႈ လႄႈ b ၼႆႉ ပဵၼ်ဢၼ်လဵၵ်ႉသေပိူၼ်ႈ    \/\/ႁဵတ်းပၼ် function ဢၼ်ၶိုၼ်းပၼ် tuple (a, b) တီႈဢၼ် 'a' ပဵၼ်     \/\/ >>> largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    \/\/ (Some(None), Some(1l))\n    \/\/ >>> largestSmallestIntegers((List[Long]()))\n    \/\/ (Some(None), Some(None))\n    \/\/ >>> largestSmallestIntegers((List[Long](0l.toLong)))\n    \/\/ (Some(None), Some(None))\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def largestSmallestIntegers(lst: List[Long]): Tuple2[Option[Long], Option[Long]] = {\n    val negativeIntegers = lst.filter(_ < 0)\n    val positiveIntegers = lst.filter(_ > 0)\n\n    val largestNegative = if (negativeIntegers.nonEmpty) Some(negativeIntegers.max) else None\n    val smallestPositive = if (positiveIntegers.nonEmpty) Some(positiveIntegers.min) else None\n\n    (largestNegative, smallestPositive)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong, 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l, 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    }\n\n}\n"},{"task_id":"HumanEval_138","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/ထတ်းသၢင်ႈတူၺ်းဝႃႈ တူဝ်ၼပ်ႉ n ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ၸွင်ႇတေတႅမ်ႈလႆႈဝႃႈ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ႁူမ်ႈၵၼ်ဝႆႉ တူဝ်ၼပ်ႉသီႇတူဝ် ဢၼ်ၸၢပ်ႈဝႆႉၼၼ်ႉယူႇႁႃႉၼႆယူႇ    \/\/ >>> isEqualToSumEven((4l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((6l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((8l))\n    \/\/ (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n","canonical_solution":"def isEqualToSumEven(n: Long): Boolean = {\n    \/\/ Explanation: A number is the sum of 4 positive even numbers if it is at least 8 and even.\n    n >= 8 && n % 2 == 0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_139","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/တီႈဢၼ် n > 0     \/\/brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!     \/\/Brazil ၼႆႉ လႆႈမၵ်းမၼ်ႈဝႆႉဝႃႈ ပဵၼ် factorial ၼႆသေ ပဵၼ်ဝႆႉၼင်ႇၼႆယဝ်ႉ။    \/\/ >>> specialFactorial((4l))\n    \/\/ (288l)\n    \/\/ The function will receive an integer as input and should return the special\n    \/\/ factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n","canonical_solution":"def specialFactorial(n: Long): Long = {\n        def factorial(x: Long): Long = {\n            if (x == 0 || x == 1) 1L\n            else x * factorial(x - 1)\n        }\n\n        (1L to n).map(factorial).product\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_140","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ယဝ်ႉၵေႃႈ ဢဝ်တူဝ် -  သႂ်ႇတႅၼ်းတီႈ တူဝ်ဢၼ်ဢမ်ႇပႃးတူဝ်ၼၼ်ႉ။    \/\/လႄႈ သင်ဝႃႈ သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉၼၼ်ႉ မီးဝႆႉ တူဝ်ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် 2 တူဝ်လိူဝ်ၼၼ်ႉၼႆၸိုင်    \/\/ပေႃးဝႃႈႁဝ်းလႆႈပၼ် string text ၼႆ ဢဝ် တူဝ်လိၵ်ႈဢၼ်ၸီႉဝႆႉတႂ်ႈၼႆႉ လႅၵ်ႈလၢႆႈပၼ်တီႈ space တင်းမူတ်း၊    \/\/ >>> fixSpaces((\" Example\"))\n    \/\/ (\"Example\")\n    \/\/ >>> fixSpaces((\" Example 1\"))\n    \/\/ (\"Example_1\")\n    \/\/ >>> fixSpaces((\" Example 2\"))\n    \/\/ (\"_Example_2\")\n    \/\/ >>> fixSpaces((\" Example 3\"))\n    \/\/ (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fixSpaces(text: String): String = {\n    val result = new StringBuilder()\n    var spaceCount = 0\n    var leadingSpace = true\n    \n    for (ch <- text) {\n      if (ch == ' ') {\n        spaceCount += 1\n      } else {\n        if (spaceCount > 0) {\n          if (leadingSpace && result.isEmpty) {\n            result.append('_')\n          } else if (spaceCount == 1) {\n            result.append('_')\n          } else if (spaceCount > 1) {\n            result.append('-')\n          }\n          spaceCount = 0\n        }\n        result.append(ch)\n        leadingSpace = false\n      }\n    }\n    \n    if (spaceCount == 1) {\n      result.append('_')\n    } else if (spaceCount > 1) {\n      result.append('-')\n    }\n    \n    result.toString()\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"},{"task_id":"HumanEval_141","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/- substring ဝၢႆးသေ dot ၼၼ်ႉ ထုၵ်ႇလီပဵၼ်ဢၼ်ၼိူင်ႈၼႂ်းဢၼ်ၼႆႉ: ['txt', 'exe', 'dll']     \/\/တူဝ်လိၵ်ႈ လႅတ်ႇတိၼ်ႇ (Latin alphabet) ('a'-'z' လႄႈ 'A'-'Z') ။    \/\/- သၢႆထႅဝ်ဢၼ်မီးၼႃႈတႃတႃတႃၼၼ်ႉ ဢမ်ႇထုၵ်ႇလီပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈသုတ်း လႄႈ မၼ်းတေတႄႇလူၺ်ႈ တူဝ်လိၵ်ႈဢၼ်လုၵ်ႉတီႈ     \/\/- ၸိုဝ်ႈၾၢႆႇဢၼ်ပႃးဝႆႉ တူၺ်းတီႈၼိူင်ႈဢၼ်ၼၼ်ႉ '.'     \/\/- ၸိုဝ်ႈၾၢႆႇဢၼ်တေတၢင်ႇၼၼ်ႉ တေဢမ်ႇလႆႈမီးတူဝ်ၼပ်ႉလိူဝ်သေသၢမ်တူဝ် (0-9) ။    \/\/လႆႈႁူပ်ႉထူပ်းၵၼ်     \/\/ၸိုဝ်ႈၾၢႆႇဢၼ်ၼိုင်ႈၼႆႉ တေလႆႈဝႃႈပဵၼ်ၸိုဝ်ႈဢၼ်ထုၵ်ႇမႅၼ်ႈယူႇ သင်ဝႃႈ မၼ်းမီးလွင်ႈမၵ်းမၼ်ႈတင်းသဵင်ႈ ၼင်ႇပႃႈတႂ်ႈၼႆႉယဝ်ႉ     \/\/'Yes' သင်ဝႃႈ ၸိုဝ်ႈၾၢႆႇဢၼ်ပၼ်ဝႆႉၼၼ်ႉ မၢၼ်ႇမႅၼ်ႈၼႆလႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆ ၶိုၼ်းပၼ်ၶေႃႈၵႂၢမ်း 'No'    \/\/ႁဵတ်းပၼ် function ဢၼ်ဢဝ် string ဢၼ်တၢင်တူဝ်ၸိုဝ်ႈ file သေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း    \/\/ >>> fileNameCheck((\"example.txt\"))\n    \/\/ (\"Yes\")\n    \/\/ >>> fileNameCheck((\"1example.dll\"))\n    \/\/ (\"No\")\n    def fileNameCheck(file_name : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def fileNameCheck(file_name: String): String = {\n    val validExtensions = Set(\"txt\", \"exe\", \"dll\")\n    val dotIndex = file_name.lastIndexOf('.')\n\n    if (dotIndex == -1) return \"No\"\n\n    val beforeDot = file_name.substring(0, dotIndex)\n    val afterDot = file_name.substring(dotIndex + 1)\n\n    if (beforeDot.isEmpty || !beforeDot.head.isLetter) return \"No\"\n\n    val digitCount = beforeDot.count(_.isDigit)\n    if (digitCount > 3) return \"No\"\n\n    if (!validExtensions.contains(afterDot)) return \"No\"\n\n    \"Yes\"\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(fileNameCheck(\"example.txt\")) \/\/ \"Yes\"\n    println(fileNameCheck(\"1example.dll\")) \/\/ \"No\"\n    println(fileNameCheck(\"test123.exe\")) \/\/ \"Yes\"\n    println(fileNameCheck(\".hidden.txt\")) \/\/ \"No\"\n    println(fileNameCheck(\"file..txt\")) \/\/ \"No\"\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"},{"task_id":"HumanEval_142","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/လႅၵ်ႈလၢႆႈပၼ် လွင်ႈသႂ်ႇၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်တူဝ်ၼပ်ႉမၼ်းဢမ်ႇမိူၼ်ၵၼ်တင်း 3 ဢမ်ႇၼၼ် 4 ၼၼ်ႉသေယဝ်ႉ ၽွၼ်ႉၸေႃႇၵျီႇၼႆႉ တေလႆႈၶိုၼ်းပၼ် လွင်ႈသႂ်ႇတင်းမူတ်းၼၼ်ႉယဝ်ႉ။    \/\/တူဝ်ၼပ်ႉဢၼ်ၼမ်လိူဝ် 3 လႄႈ တေဢဝ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၶဝ်ႈမႃးၼၼ်ႉ ႁဵတ်းပဵၼ် တူဝ်ၼပ်ႉသၢမ်တူဝ် သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈမႃးၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉၼမ်လိူဝ် 4 လႄႈ ဢမ်ႇၸႂ်ႈတူဝ်ၼပ်ႉၼမ်လိူဝ် 3 ၼႆၸိုင် ၽွၼ်ႉၸေႃႇၵျီႇၼႆႉ တေဢမ်ႇႁဵတ်းႁႂ်ႈ     \/\/Function ၼႆႉတေဢဝ် တူဝ်ၼပ်ႉတဵမ်တင်းမူတ်း ဢၼ်ပႃးၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉသေ ႁဵတ်းပဵၼ် quad ဢၼ်ပႃးတူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ သင်ဝႃႈ index မၼ်းပဵၼ်     \/\/\"     \/\/ >>> lst\n    \/\/ List[Long](1l.toLong, 2l.toLong, 3l.toLong)\n    \/\/ >>> lst\n    \/\/ List[Long]()\n    \/\/ >>> lst\n    \/\/ List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n    def sumSquares(lst : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def sumSquares(lst: List[Long]): Long = {\n        lst.zipWithIndex.map { case (value, index) =>\n            if (index % 3 == 0) {\n                value * value\n            } else if (index % 4 == 0) {\n                value * value * value\n            } else {\n                value\n            }\n        }.sum\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"},{"task_id":"HumanEval_143","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ 1:    \/\/လွင်ႈၸႅၼ်ႇထႅဝ်လိၵ်ႈ ၼႂ်း string ဢၼ်မႂ်ႇၼႆႉ ထုၵ်ႇလီမိူၼ်ၵၼ်တင်း ဢၼ်ၵဝ်ႇၼၼ်ႉ။    \/\/ဢၼ်တၢင်းယၢဝ်းမၼ်းပဵၼ် တူဝ်ၼပ်ႉၸႅတ်ႈၸၢင်ႇ၊     \/\/ယဝ်ႉၵေႃႈ တေလႆႈၶိုၼ်းပၼ် string ဢၼ်ပႃးၶေႃႈၵႂၢမ်း တီႈၼႂ်းၶေႃႈၵႂၢမ်းငဝ်ႈမၼ်း၊     \/\/ၼႂ်းၶေႃႈၵႂၢမ်းၼၼ်ႉ မီးဝႆႉ ၶေႃႈၵႂၢမ်းဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈ သဵင်ၵွင်၊    \/\/ႄလႈ သူတေလႆႈပၼ် string ဢၼ်တႅၼ်းတၢင်ၶေႃႈၵႂၢမ်းဢၼ်ၼိူင်ႈ    \/\/ >>> wordsInSentence((\"This is a test\"))\n    \/\/ (\"is\")\n    \/\/ Example 2:\n    \/\/ >>> wordsInSentence((\"lets go for swimming\"))\n    \/\/ (\"go for\")\n    \/\/ Constraints:\n    \/\/ * 1 <= len(sentence) <= 100\n    \/\/ * sentence contains only letters\n    def wordsInSentence(sentence : String) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else if (n == 2) true\n    else !(2 to sqrt(n).toInt).exists(n % _ == 0)\n  }\n\n  def wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    val primeLengthWords = words.filter(word => isPrime(word.length))\n    primeLengthWords.mkString(\" \")\n  }\n  \n  \/\/ Example usage:\n  \/\/ println(wordsInSentence(\"This is a test\"))\n  \/\/ println(wordsInSentence(\"lets go for swimming\"))\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"},{"task_id":"HumanEval_144","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/ႁဝ်းၸၢင်ႈဝူၼ်ႉဝႃႈ x, လႄႈ n ၼႆႉပဵၼ် တူဝ်ၼပ်ႉပုၼ်ႈဢၼ်ထုၵ်ႇမႅၼ်ႈ လႄႈ ဢမ်ႇမီးသုၼ်ပဵၼ် တူဝ်ၼပ်ႉၸႅၵ်ႇ။    \/\/တီႈဢၼ် တူဝ်ၼပ်ႉလႄႈ တူဝ်ၼပ်ႉဢၼ်ပႃး တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ဝႆႉၼၼ်ႉယဝ်ႉ။    \/\/x လႄႈ n ၼႆႉ ပဵၼ်တူဝ်တႅၼ်း တူဝ်ၼပ်ႉသွၼ်ႇ ၶွင် တူဝ်ၼပ်ႉပုၼ်ႈသေ မီးပိူင်ၾၢင်ၼင်ႇၼႆယဝ်ႉ။    \/\/x * n ၼႆႉ ပေႃးဝႃႈ x * n ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ် လႄႈ false ၼႆၸိုင် တူဝ်ဢိင်ၼႆႉ တေၶိုၼ်းပၼ် true    \/\/ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတေႁဵတ်းသၢင်ႈ တူဝ်ဢိင်ဢၼ်တေႁဵတ်းႁႂ်ႈ လွင်ႈလၢတ်ႈဢွၵ်ႇၼၼ်ႉ ငၢႆႈငၢႆႈ။    \/\/ >>> simplify((\"1\/5\"), (\"5\/1\"))\n    \/\/ (true)\n    \/\/ >>> simplify((\"1\/6\"), (\"2\/1\"))\n    \/\/ (false)\n    \/\/ >>> simplify((\"7\/10\"), (\"10\/2\"))\n    \/\/ (false)\n    def simplify(x : String, n : String) : Boolean = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def simplify(x: String, n: String): Boolean = {\n    def parseFraction(fraction: String): (Int, Int) = {\n      val parts = fraction.split(\"\/\")\n      (parts(0).toInt, parts(1).toInt)\n    }\n\n    val (numX, denX) = parseFraction(x)\n    val (numN, denN) = parseFraction(n)\n\n    val multipliedNumerator = numX * numN\n    val multipliedDenominator = denX * denN\n\n    multipliedNumerator % multipliedDenominator == 0\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/6\"), (\"2\/1\")) == (false));\n    assert(simplify((\"5\/1\"), (\"3\/1\")) == (true));\n    assert(simplify((\"7\/10\"), (\"10\/2\")) == (false));\n    assert(simplify((\"2\/10\"), (\"50\/10\")) == (true));\n    assert(simplify((\"7\/2\"), (\"4\/2\")) == (true));\n    assert(simplify((\"11\/6\"), (\"6\/1\")) == (true));\n    assert(simplify((\"2\/3\"), (\"5\/2\")) == (false));\n    assert(simplify((\"5\/2\"), (\"3\/5\")) == (false));\n    assert(simplify((\"2\/4\"), (\"8\/4\")) == (true));\n    assert(simplify((\"2\/4\"), (\"4\/2\")) == (true));\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/5\"), (\"1\/5\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_145","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/ၸႅၵ်ႇမႅင်ႇၶဝ်ၸွမ်းၼင်ႇ သဵၼ်ႈမၢႆၶဝ် တီႈၼႂ်းသဵၼ်ႈမၢႆငဝ်ႈငႃႇၼၼ်ႉယဝ်ႉ။    \/\/မၢႆတွင်း: သင်ဝႃႈ မီးဝႆႉ ထႅမ်းပလဵၵ်ႉတၢင်းၼမ် ဢၼ်တူဝ်ၼပ်ႉမၼ်းမိူၼ်ၵၼ်ၼႆ    \/\/ၸွမ်းၼင်ႇ တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉဢၼ်တဵမ်မႃးၼၼ်ႉသေ ၶၢႆႉသႂ်ႇၶဝ်ႈ တီႈၼႂ်း တူဝ်ၼပ်ႉဢၼ်တဵမ်မႃးၼၼ်ႉလႄႈ။    \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ၸႅၵ်ႇပၼ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ    \/\/ >>> orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    \/\/ (List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    \/\/ >>> orderByPoints((List[Long]()))\n    \/\/ (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] = {\n","canonical_solution":"def orderByPoints(nums: List[Long]): List[Long] = {\n    def digitSum(n: Long): Int = n.abs.toString.map(_.asDigit).sum\n    \n    nums.zipWithIndex\n      .sortBy { case (num, index) => (digitSum(num), index) }\n      .map(_._1)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong, 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong, 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong, 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong, -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong, -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong, 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong, 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong, -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_146","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢွၼ်တၢင်းသုတ်းလႄႈ တူဝ်ၼပ်ႉလိုၼ်းသုတ်း ၶွင်တူဝ်ၼပ်ႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် (1, 3, 5, 7, 9) ၼၼ်ႉယဝ်ႉ။    \/\/တူဝ်ၼပ်ႉဢၼ်မီးၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ယႂ်ႇလိူဝ်သေ 10 လႄႈ တင်းသွင်ဢၼ်     \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈမၢႆပဵၼ် တူဝ်ၶဝ်ႈ လႄႈ တူဝ်ၶိုၼ်း    \/\/ >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n    \/\/ (1l)\n    \/\/ >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    \/\/ (2l)\n    def specialFilter(nums : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def specialFilter(nums: List[Long]): Long = {\n    def isOddDigit(c: Char): Boolean = c == '1' || c == '3' || c == '5' || c == '7' || c == '9'\n    \n    nums.count { num =>\n      val absNumStr = num.abs.toString\n      val firstDigit = absNumStr.head\n      val lastDigit = absNumStr.last\n      \n      num > 10 && isOddDigit(firstDigit) && isOddDigit(lastDigit)\n    }.toLong\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(specialFilter(List(15L, -73L, 14L, -15L))) \/\/ Output: 1\n    println(specialFilter(List(33L, -2L, -3L, 45L, 21L, 109L))) \/\/ Output: 2\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_147","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/a[i] + a[j] + a[k] ၼႆႉပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ၵုၼ်းၵၼ်တင်း 3 ယဝ်ႉ။    \/\/ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် သၢမ်တူဝ် (a[i], a[j], a[k]) ၶွင် a တီႈ i < j < k,     \/\/တွၼ်ႈတႃႇ i ၵူႈဢၼ် (1 ≤ i ≤ n) ၼၼ်ႉ ၵႃႈၶၼ်ၶွင် a[i] = i * i - i + 1 ၼၼ်ႉၼႆယဝ်ႉ။    \/\/ပေႃးႁဝ်းပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ႁဝ်းတေလႆႈႁဵတ်းပၼ် သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉတဵမ်ထူၼ်ႈ a တၢင်းယၢဝ်းမၼ်းပဵၼ် n    \/\/ >>> getMaxTriples((5l))\n    \/\/ (1l)\n    \/\/ Explanation: \n    \/\/ a = [1, 3, 7, 13, 21]\n    \/\/ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long = {\n","canonical_solution":"def getMaxTriples(n: Long): Long = {\n    val a = (1L to n).map(i => i * i - i + 1).toList\n    var count = 0L\n\n    for {\n      i <- 0L until n\n      j <- i + 1 until n\n      k <- j + 1 until n\n    } {\n      if ((a(i.toInt) + a(j.toInt) + a(k.toInt)) % 3 == 0) {\n        count += 1\n      }\n    }\n\n    count\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"},{"task_id":"HumanEval_148","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/ဢမ်ႇၸႂ်ႈၸိုဝ်ႈၽႆၢႇလူၵ်ႈ ဢၼ်ထုၵ်ႇမႅၼ်ႈ။    \/\/လွင်ႈႁဵတ်းသၢင်ႈၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးသင် သင်ပဵၼ် planet1 ဢမ်ႇၼၼ် planet2 ၼႆယူႇယဝ်ႉ။    \/\/လွင်ႈၸမ်ၵႆၵၼ်တင်း လႅတ်ႇ။    \/\/ဢၼ်ယူႇၼႂ်းၵႄႈ လႅင်ႊလၢဝ် 1 လႄႈ လႅင်ႊလၢဝ် 2 ၼၼ်ႉ ၸႅၵ်ႇဝႆႉ ၸွမ်းၼင်ႇ    \/\/လွင်ႈႁဵတ်းသၢင်ႈၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပႃး လၢဝ်ဢၼ်မီး လႅပ်ႈပဵၼ်     \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ်ၸိုဝ်ႈ ၵျူဝ်ႇ 2 ဢၼ်ၼၼ်ႉပဵၼ် တူဝ်ၼပ်ႉသဵၼ်ႈ planet1 လႄႈ planet2 ၼၼ်ႉၶႃႈ။    \/\/ယူႇရၢၼ်ႇ၊ ၼႅပ်ႉပုၼ်ႇ။    \/\/Mercury ၊ ဢၼ်မႃးထႅင်ႈၼၼ်ႉပဵၼ် Venus ၊ Earth ၊ Mars ၊ Jupiter ၊ Saturn ၊     \/\/ၼႂ်းပိူင်လႅတ်ႇႁဝ်းၼႆႉ မီးၵျူဝ်ႇ 8 လုၵ်ႈ၊ ဢၼ်ၸမ်ႁွမ်းၵၼ်တင်းလႅတ်ႇသေပိူၼ်ႈ။    \/\/ >>> bf((\"Jupiter\"), (\"Neptune\"))\n    \/\/ (List[String](\"Saturn\", \"Uranus\"))\n    \/\/ >>> bf((\"Earth\"), (\"Mercury\"))\n    \/\/ (List[String](\"Venus\"))\n    \/\/ >>> bf((\"Mercury\"), (\"Uranus\"))\n    \/\/ (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def bf(planet1: String, planet2: String): List[String] = {\n    val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    \/\/ Find the indices of the given planets\n    val index1Opt = planets.indexOf(planet1)\n    val index2Opt = planets.indexOf(planet2)\n    \n    \/\/ If either planet is not found, return an empty list\n    if (index1Opt == -1 || index2Opt == -1) {\n      return List.empty\n    }\n    \n    \/\/ Sort indices to ensure proper traversal direction\n    val (startIndex, endIndex) = if (index1Opt < index2Opt) (index1Opt, index2Opt) else (index2Opt, index1Opt)\n    \n    \/\/ Get the planets between the indices\n    planets.slice(startIndex + 1, endIndex)\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"},{"task_id":"HumanEval_149","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/သူတေထၢင်ႇဝႃႈ ၶေႃႈၵႂၢမ်းတင်းမူတ်း တေမီးတၢင်းယၢဝ်းမိူၼ်ၵၼ်ယူႇၼႆယဝ်ႉ။    \/\/Function ၼႆႉ တေလႆႈၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ string ဢၼ်ၶပ်ႉဝႆႉၸွမ်းၼင်ႇပိူင်မၼ်းၼၼ်ႉ။    \/\/သင်ဝႃႈ သွင်ၶေႃႈၵႂၢမ်းမီးတၢင်းယၢဝ်းမိူၼ်ၵၼ်ၼႆ ၸႅၵ်ႇပၼ်ၸွမ်းပိူင်တူဝ်လိၵ်ႈ။    \/\/တေလႆႈၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉၸွမ်း ပၵ်းပိူင်ၼၼ်ႉ။    \/\/လွင်ႈၸႅၵ်ႇမႅင်ႇၶွင်သဵၼ်ႈမၢႆၼႆႉ ထုၵ်ႇလီၶိုၼ်ႈမႃး ၸွမ်းၼင်ႇ တၢင်းယၢဝ်းၶွင် ၶေႃႈၵႂၢမ်းဢၼ်လႂ်ဢၼ်ၼၼ်ႉသေယဝ်ႉ    \/\/မၼ်းတေပႃးဝႆႉ duplicates ၼၼ်ႉယူႇယဝ်ႉ။    \/\/သဵၼ်ႈမၢႆၼႆႉ ပဵၼ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသႅၼ် ဢၼ်ဢမ်ႇၸႂ်ႈ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသေပွၵ်ႈ။    \/\/လႄႈ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်လႆႈမႃးၼၼ်ႉ ၶိုၼ်းဢဝ် ၸႅၵ်ႇဝႆႉ ၸွမ်းၼင်ႇ ပိူင်ထၢၼ်ႈမၼ်းၼၼ်ႉ၊    \/\/ထွၼ်ဢွၵ်ႇ string ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်တၢင်းၵႂၢင်ႈမၼ်း၊     \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ပဵၼ် ပႃႇရႃႇမီႇတႃႇမၼ်း၊    \/\/ >>> listSort((List[String](\"aa\", \"a\", \"aaa\")))\n    \/\/ (List[String](\"aa\"))\n    \/\/ >>> listSort((List[String](\"ab\", \"a\", \"aaa\", \"cd\")))\n    \/\/ (List[String](\"ab\", \"cd\"))\n    def sortedListSum(lst : List[String]) : List[String] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def listSort(lst: List[String]): List[String] = {\n        lst.filter(_.length % 2 == 0)\n           .sorted\n           .sortBy(_.length)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\", \"bbbb\"))));\n    }\n\n}\n"},{"task_id":"HumanEval_150","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ လႄႈ တေလႆႈၶိုၼ်းပၼ် ၵႃႈၶၼ်ၶွင် y ပေႃးဢမ်ႇၼၼ်။    \/\/ပရူဝ်ႇၵရမ်ႇဢၼ်ငၢႆႈ ဢၼ်တေလႆႈၶိုၼ်း ၵႃႈၶၼ်ၶွင် x သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်     \/\/ >>> xOrY((7l), (34l), (12l))\n    \/\/ (34l)\n    \/\/ >>> xOrY((15l), (8l), (5l))\n    \/\/ (5l)\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  \n  def isPrime(num: Long): Boolean = {\n    if (num <= 1) return false\n    if (num <= 3) return true\n    if (num % 2 == 0 || num % 3 == 0) return false\n    var i = 5\n    while (i * i <= num) {\n      if (num % i == 0 || num % (i + 2) == 0) return false\n      i += 6\n    }\n    true\n  }\n\n  def xOrY(n: Long, x: Long, y: Long): Long = {\n    if (isPrime(n)) x else y\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_151","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တီႈၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ပႅတ်ႈပႅတ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉတဵမ်ၸိူဝ်းၼၼ်ႉ။    \/\/ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉၸိူဝ်းၼၼ်ႉ မႃးပဵၼ် တူဝ်ၵိုတ်းႁွမ်းၵၼ်သေ ၶိုၼ်းပၼ်ၶိုၼ်း။    \/\/ >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n    \/\/ (10l)\n    \/\/ >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong, 0l.toLong)))\n    \/\/ (0l)\n    \/\/ >>> doubleTheDifference((List[Float](9l.toLong, -2l.toLong)))\n    \/\/ (81l)\n    \/\/ >>> doubleTheDifference((List[Float](0l.toLong)))\n    \/\/ (0l)\n    \/\/ If the input list is empty, return 0.\n    def doubleTheDifference(lst : List[Float]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def doubleTheDifference(lst: List[Float]): Long = {\n    lst.filter(x => x > 0 && x.isValidLong && x.toLong % 2 != 0)\n      .map(x => x.toLong * x.toLong)\n      .sum\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat, -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat, -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat, 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat, -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"},{"task_id":"HumanEval_152","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/ၵႃႈၶၼ်မၼ်းပဵၼ် 0 လႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆ ၵႃႈၶၼ်မၼ်းပဵၼ် လွင်ႈပႅၵ်ႇပိူင်ႈဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ ၼႂ်းၵႄႈ လွင်ႈလၢမ်းၶၢတ်ႈလႄႈ လွင်ႈလႆႈၶၢမ်ႇတွပ်ႇ။    \/\/ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ယၢဝ်းမိူၼ်ၵၼ် ဢၼ်ၼႄပၼ်ဝႃႈ လွင်ႈလၢမ်းၶၢတ်ႈဢၼ်လႂ်ၼၼ်ႉ မၼ်းၵႆၵႃႈႁိုဝ်ၼႆယဝ်ႉ။ ပေႃးၶဝ်လၢမ်းၶၢတ်ႈမႅၼ်ႈၼႆ     \/\/တေလႆႈပၼ် သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သၢႆမၢႆလႄႈ လွင်ႈလၢမ်းၶၢတ်ႈ ဢၼ်ယၢဝ်းမိူၼ်ၵၼ် သွင်ဢၼ်၊ တီႈဢၼ် သဵၼ်ႈမၢႆၵူႈဢၼ်ၼၼ်ႉ ၼႄဝႆႉ လွင်ႈဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇတေတႅပ်းတတ်းဝႃႈ ၵူၼ်းၵေႃႉၼိူင်ႈၵေႃႉၼၼ်ႉ ထၢင်ႇၸႅင်ႈလီ လွင်ႈလႆႈမႃးတီႈ လွင်ႈၶဵင်ႇၵၼ်တၢင်းၼမ်ၼၼ်ႉႁိုဝ်ၼႆၼၼ်ႉယဝ်ႉ။    \/\/ဢၼ်ထၢင်ႇၸႅင်ႈတႄႉတႄႉတႄႉဝႃႈဝႃႈ ပဵၼ်ဢၼ်လီမၢႆတွင်းလႄႈ တႅၵ်ႈၼိူင်းၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/လွင်ႈပဵၼ်မႃးၼၼ်ႉ ပဵၼ်ဢၼ်ႁူႉဝႆႉယဝ်ႉသေတႃႉ၊ တၢင်းၶႆႈၸ်ႂလႄႈ တၢင်းဝူၼ်ႉဢၼ်သူမီးဝႆႉ မိူဝ်ႈယၢမ်းၼၼ်ႉၼၼ်ႉ ပဵၼ်ဢၼ်ႁူႉဝႆႉယဝ်ႉ။    \/\/ႁဝ်းတေလႆႈတွင်းဝႆႉ လွင်ႈဢၼ်ႁဝ်းလႆႈၶၢမ်ႇမႃး မိူဝ်ႈႁဝ်းလႆႈထူပ်းၽွၼ်းလီ ဢၼ်ႁဝ်းမုင်ႈမွင်းမႃးႁိုင်ၼၼ်ႉယူႇယဝ်ႉ။    \/\/ >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    \/\/ (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    \/\/ >>> compare((List[Long](0l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    \/\/ (List[Long](4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def compare(game: List[Long], guess: List[Long]): List[Long] = {\n    game.zip(guess).map { case (g, gs) => abs(g - gs) }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_153","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/(ဢဵၼ်ႁႅင်းမၼ်းပဵၼ် -1) ။    \/\/return \"Slices.SErviNGSliCes\" ယွၼ်ႉဝႃႈ \"SErviNGSliCes\" ၼႆႉ ပဵၼ်လွင်ႈၶႂၢၵ်ႈဢၼ်ၶိုၵ်ႉၶႅမ်ႉသုတ်း    \/\/extension: ['SERVINGSliCes', 'Cheese', 'StuFfed'] ၼႆၸိုင် ၸဝ်ႈၵဝ်ႇ ထုၵ်ႇလီ     \/\/တူဝ်ယၢင်ႇမၼ်း သင်ဝႃႈႁဝ်းပၼ် \"Slices\" မိူၼ်ၼင်ႇ class လႄႈ သဵၼ်ႈမၢႆၶွင်     \/\/လိူၵ်ႈဢဝ် ဢၼ်ဢွၵ်ႇမႃးတီႈၼႃႈသုတ်း ၼႂ်းသဵၼ်ႈမၢႆ။    \/\/သင်ဝႃႈ မီးလွင်ႈၶႂၢၵ်ႈဢၼ်မိူၼ်ၵၼ် သွင်ဢၼ်ဢမ်ႇၼၼ် ၼမ်လိူဝ်ၼၼ်ႉၼႆၸိုင်    \/\/format: ClassName.StrongestExtensionName.  ၶႅပ်းႁၢင်ႈဢၼ်ၼႆႉ မၼ်းပဵၼ် ၶႅပ်းႁၢင်ႈဢၼ်ၵႅၼ်ႇၶႅင်သေပိူၼ်ႈ    \/\/တေလႆႈႁႃ တူဝ်ၶႂၢၵ်ႈဢၼ်ၶိုၵ်ႉၶႅမ်ႉသေပိူၼ်ႈ လႄႈ ၶိုၼ်းဢဝ် string ဢၼ်ၼႆႉမႃးၶိုၼ်း    \/\/ၼႂ်းၸိုဝ်ႈ extension ၼၼ်ႉ ႁႅင်းမၼ်းတေမီး CAP - SM ၼႆယဝ်ႉ။    \/\/တူဝ်လိၵ်ႈၼႂ်းၸိုဝ်ႈ extension လႄႈ SM ပဵၼ်တူဝ်ၼပ်ႉတူဝ်လိၵ်ႈလဵၵ်ႉလဵၵ်ႉ    \/\/ႁႅင်းၶွင်လွင်ႈၶႂၢၵ်ႈမၼ်းၼႆႉပဵၼ် ၼင်ႇတႂ်ႈၼႆႉ CAP ၼၼ်ႉပဵၼ် တူဝ်ၼပ်ႉၶွင် တူဝ်လိၵ်ႈဢၼ်ယႂ်ႇ     \/\/Extensions ၼႆႉတေလႆႈၸႂ်ႉတိုဝ်းတႃႇတၢင်ႇ class တၢင်ႇဢၼ်ၶိုၼ်ႈၼိူဝ် class ၼၼ်ႉ။    \/\/တေပၼ်ၸိုဝ်ႈ class (string) လႄႈ သဵၼ်ႈမၢႆ extension မၼ်း။    \/\/ >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n    \/\/ (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n","canonical_solution":"def StrongestExtension(class_name: String, extensions: List[String]): String = {\n        extensions.map { extension =>\n            val capCount = extension.count(_.isUpper)\n            val lowerCount = extension.count(_.isLower)\n            val strength = capCount - lowerCount\n            (extension, strength)\n        }.maxBy(_._2)._1\n    } match {\n        case strongest => s\"$class_name.$strongest\"\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"},{"task_id":"HumanEval_154","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/သင်ဝႃႈႁဝ်းလႆႈၶေႃႈၵႂၢမ်း 2 ၶေႃႈၼႆ ႁဝ်းတေလႆႈၶိုၼ်း true ပေႃးဝႃႈၶေႃႈၵႂၢမ်းၵမ်းသွင် ဢမ်ႇၼၼ် လွင်ႈလႅၵ်ႈလၢႆႈမၼ်းပဵၼ် substring ၼႂ်းၶေႃႈၵႂၢမ်းၵမ်းဢွၼ်တၢင်းသုတ်းၼႆ    \/\/ >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    \/\/ (true)\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n","canonical_solution":"def cycpatternCheck(a: String, b: String): Boolean = {\n  val bLength = b.length\n  val bDouble = b + b \/\/ Create a string with b concatenated with itself to represent all rotations\n  for (i <- 0 until bLength) {\n    val rotation = bDouble.substring(i, i + bLength) \/\/ Get the current rotation\n    if (a.contains(rotation)) return true\n  }\n  false\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_155","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/ပေႃးဝႃႈပၼ်တူဝ်ၼပ်ႉတဵမ်ၼႆ မၼ်းတေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၸီႉ လႄႈ တူဝ်ၸီႉ ဢၼ်ဢမ်ႇပဵၼ် တူဝ်ၸီႉၼၼ်ႉယူႇယဝ်ႉ။    \/\/ >>> evenOddCount((-12l))\n    \/\/ ((1l, 1l))\n    \/\/ >>> evenOddCount((123l))\n    \/\/ ((1l, 2l))\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n","canonical_solution":"def evenOddCount(num: Long): Tuple2[Long, Long] = {\n  val digits = num.abs.toString.map(_.asDigit)\n  val evenCount = digits.count(_ % 2 == 0).toLong\n  val oddCount = digits.count(_ % 2 != 0).toLong\n  (evenCount, oddCount)\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"},{"task_id":"HumanEval_156","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်းတႄႉ    \/\/လွင်ႈမၵ်းၶၢၼ်း: 1 <= num <= 1000     \/\/ဢဝ်တူဝ်လိၵ်ႈလဵၵ်ႉသေ တႅမ်ႈၶိုၼ်း။    \/\/ပေႃးဝႃႈပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇၼႆ ဢဝ်တူဝ်ၼပ်ႉ ရေႃးမ ဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉသေ ႁဵတ်းပဵၼ် တူဝ်ထႅဝ်၊     \/\/ >>> intToMiniRoman((19l))\n    \/\/ (\"xix\")\n    \/\/ >>> intToMiniRoman((152l))\n    \/\/ (\"clii\")\n    \/\/ >>> intToMiniRoman((426l))\n    \/\/ (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n","canonical_solution":"import scala.collection.mutable._\n\nobject Problem {\n  def intToMiniRoman(number: Long): String = {\n    val romanMap: List[(Int, String)] = List(\n      (1000, \"m\"),\n      (900, \"cm\"),\n      (500, \"d\"),\n      (400, \"cd\"),\n      (100, \"c\"),\n      (90, \"xc\"),\n      (50, \"l\"),\n      (40, \"xl\"),\n      (10, \"x\"),\n      (9, \"ix\"),\n      (5, \"v\"),\n      (4, \"iv\"),\n      (1, \"i\")\n    )\n\n    var num = number.toInt\n    val stringBuilder = new StringBuilder\n\n    for ((value, roman) <- romanMap) {\n      while (num >= value) {\n        stringBuilder.append(roman)\n        num -= value\n      }\n    }\n\n    stringBuilder.toString()\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n"},{"task_id":"HumanEval_157","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/90 တီႇၵရီႇ။    \/\/ထႅဝ်သၢမ်ၸဵင်ႇဢၼ်မီးသဵၼ်ႈတႃသိုဝ်ႈၼၼ်ႉ ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မီးသဵၼ်ႈတႃသိုဝ်ႈ ဢမ်ႇၼၼ် သဵၼ်ႈတႃသိုဝ်ႈၼၼ်ႉပဵၼ်သဵၼ်ႈတႃသိုဝ်ႈ။    \/\/ၽၢႆႇမၼ်းပဵၼ်သၢမ်ၸဵင်ႇၽဵင်ႇသုင်၊ ပေႃးဢမ်ႇၼၼ်တႄႉ ၽိတ်း။    \/\/ပေႃးဝႃႈႁဝ်းပၼ်တၢင်းယၢဝ်းသၢမ်ၽၢႆႇၶွင် သၢမ်ၸဵင်ႇၼႆ ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ၸိူဝ်ႉဝႃႈ သၢမ်ၽၢႆႇၼႆႉ    \/\/ >>> rightAngleTriangle((3l), (4l), (5l))\n    \/\/ (true)\n    \/\/ >>> rightAngleTriangle((1l), (2l), (3l))\n    \/\/ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n","canonical_solution":"def rightAngleTriangle(a: Long, b: Long, c: Long): Boolean = {\n        val sides = List(a, b, c).sorted\n        pow(sides(0), 2) + pow(sides(1), 2) == pow(sides(2), 2)\n    }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_158","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်လိၵ်ႈ၊ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ဢၼ်မႃးတီႈၼႃႈလိၵ်ႈ ၼႂ်းပိူင်ထၢၼ်ႈပွင်ႈၵႂၢမ်းၼၼ်ႉ။    \/\/သင်ၸိူဝ်ႉဝႃႈ သဵၼ်ႈမၢႆတူဝ်လိၵ်ႈၼမ်လိူဝ်ပိူၼ်ႈၼၼ်ႉ မီးတူဝ်လိၵ်ႈၼမ်လိူဝ်ပိူၼ်ႈၼႆၸိုင်    \/\/သဵၼ်ႈမၢႆၼႆႉ ပႃးဝႆႉ ၶေႃႈၵႂၢမ်းလၢႆလၢႆဢၼ်သေ ၶိုၼ်းဢဝ် ၶေႃႈၵႂၢမ်းဢၼ်မီး တူဝ်ၼပ်ႉသုင်သုတ်းၼၼ်ႉ ၶိုၼ်းပၼ်    \/\/တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသဵၼ်ႈၼၼ်ႉယဝ်ႉ။    \/\/ >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    \/\/ (\"string\")\n    \/\/ >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    \/\/ (\"enam\")\n    \/\/ >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    \/\/ (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def findMax(words: List[String]): String = {\n    words.maxBy(word => (word.toSet.size, -word.toLowerCase))\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n"},{"task_id":"HumanEval_159","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ:     \/\/သင်ဝႃႈ ဢမ်ႇမီးၵိူဝ်ဝၢၼ် ဢၼ်ၵိုတ်းဝႆႉတင်းၼမ်ၸိုင် သူတေၵိၼ်ၵိူဝ်ဝၢၼ် ဢၼ်ၵိုတ်းဝႆႉတင်းမူတ်းသေတႃႉၵေႃႈ သူတိုၵ်ႉတေၵႂင်ယူႇယဝ်ႉ။    \/\/တူဝ်ၼပ်ႉ ၵရူဝ်ႇတိတ်ႉ ဢၼ်ၵိုတ်းဝႆႉ ဝႆးသေ ၵိၼ်ၶဝ်ႈၼၼ်ႉ]     \/\/[ ႁူဝ်ၼပ်ႉ ၵရူဝ်ႇတိတ်ႉ ဢၼ်ၵိၼ်ယဝ်ႉ ၼ်ႂးၶၢဝ်းတၢင်း ၵိၼ်ၶဝ်ႈ]    \/\/ၵူၺ်းၵႃႈ မိူဝ်ႈလဵဝ်ၼႆႉ သူလူဝ်ႇၵိၼ် မၢၵ်ႇၶိူဝ်သူမ်ႈၼမ်လိူဝ်ၼႆႉယဝ်ႉ တႃႇတေၵိၼ်ၶဝ်ႈဝၼ်းတဵမ်ထူၼ်ႈ။    \/\/မႂ်းပဵၼ်ၶီႈလဵၵ်းဢၼ်ၵႂင်၊ မႂ်းၵေႃႈၵိၼ်လႆႈ မၢၵ်ႇၶိူဝ်သူမ်ႈမၢင်မဵဝ်းယဝ်ႉ    \/\/ >>> eat((5l), (6l), (10l))\n    \/\/ (List[Long](11l.toLong, 4l.toLong))\n    \/\/ >>> eat((4l), (8l), (9l))\n    \/\/ (List[Long](12l.toLong, 1l.toLong))\n    \/\/ >>> eat((1l), (10l), (10l))\n    \/\/ (List[Long](11l.toLong, 0l.toLong))\n    \/\/ >>> eat((2l), (11l), (5l))\n    \/\/ (List[Long](7l.toLong, 0l.toLong))\n    \/\/ Variables:\n    \/\/ @number : integer\n    \/\/ the number of carrots that you have eaten.\n    \/\/ @need : integer\n    \/\/ the number of carrots that you need to eat.\n    \/\/ @remaining : integer\n    \/\/ the number of remaining carrots thet exist in stock\n    \/\/ Constrain:\n    \/\/ * 0 <= number <= 1000\n    \/\/ * 0 <= need <= 1000\n    \/\/ * 0 <= remaining <= 1000\n    \/\/ Have fun :)\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def eat(number: Long, need: Long, remaining: Long): List[Long] = {\n    val totalNeeded = number + need\n    if (remaining >= need) {\n      List(totalNeeded, remaining - need)\n    } else {\n      List(number + remaining, 0)\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong, 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong, 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong, 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong, 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong, 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong, 0l.toLong))));\n    }\n\n}\n"},{"task_id":"HumanEval_160","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/Operator list မီးဝႆႉ operator တီႈဢေႇသုတ်းမၼ်း 1 ၵေႃႉ လႄႈ operand list မီးဝႆႉ operand တီႈဢေႇသုတ်းမၼ်း 2 ၵေႃႉ    \/\/Operand ၼႆႉပဵၼ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းၼၼ်ႉယဝ်ႉ။    \/\/တၢင်းယၢဝ်းၶွင် သဵၼ်ႈမၢႆ ၽူႈႁဵတ်းၵၢၼ်ၼၼ်ႉ ပဵၼ်တၢင်းယၢဝ်းၶွင် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းၵၢၼ်ၼၼ်ႉ ယွမ်းၼိူင်ႈဢၼ်ၼၼ်ႉယဝ်ႉ။    \/\/မၢႆတွင်း:    \/\/=> ၶေႃႈလႆႈၸႂ် = 9     \/\/ၶေႃႈတွပ်ႇ = 2 + 3 * 4 - 5     \/\/သဵၼ်ႈမၢႆ = [2, 3, 4, 5]     \/\/ၽူႈၸႂ်ႉတိုဝ်း['+', '*', '-']     \/\/တူဝ်ယၢင်ႇ:     \/\/လွင်ႈၼႄလၵ်းထၢၼ် (**)     \/\/လွင်ႈၸႅၵ်ႇၽႄၸၼ်ႉ (\/\/)    \/\/လွင်ႈၵုၼ်း ( * )     \/\/လွင်ႈထွၼ် (- )     \/\/လွင်ႈထႅမ်သႂ်ႇ (+)     \/\/လွင်ႈႁဵတ်းသၢင်ႈ algebra ဢၼ်လမ်ႇလွင်ႈၼႆႉ-    \/\/လွင်ႈလၢတ်ႈၼႄ လႄႈ ၶိုၼ်းဢဝ် လွင်ႈထတ်းသၢင်ႈ လွင်ႈလၢတ်ႈၼႄ ဢၼ်ၼႆႉမႃး။    \/\/သဵၼ်ႈမၢႆမၢႆသွင်ၼႆႉ ပဵၼ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၸႂ်ႉတိုဝ်း သဵၼ်ႈမၢႆသွင်ဢၼ် တွၼ်ႈတႃႇတေၵေႃႇသၢင်ႈ တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ။    \/\/သွင်ဢၼ်ၼႆႉ ပဵၼ်သဵၼ်ႈမၢႆ ၽူႈႁဵတ်းၵၢၼ် လႄႈ တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းၵၢၼ် သဵၼ်ႈမၢႆဢွၼ်တၢင်းသုတ်းၼႆႉ မီးလွင်ႈႁဵတ်းၵၢၼ် algebra ဢၼ်လမ်ႇလွင်ႈ လႄႈ     def doAlgebra(op : List[String], operand : List[Long]) : Long = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def doAlgebra(op: List[String], operand: List[Long]): Long = {\n    var result = operand.head\n    for (i <- 0 until op.length) {\n      op(i) match {\n        case \"+\" => result += operand(i + 1)\n        case \"-\" => result -= operand(i + 1)\n        case \"*\" => result *= operand(i + 1)\n        case \"\/\/\" => result \/= operand(i + 1)\n        case \"**\" => result = pow(result.toDouble, operand(i + 1).toDouble).toLong\n      }\n    }\n    result\n  }\n\n  def main(args: Array[String]): Unit = {\n    val operators = List(\"+\", \"*\", \"-\")\n    val operands = List(2L, 3L, 4L, 5L)\n    println(doAlgebra(operators, operands)) \/\/ Output: 9\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\/\/\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"},{"task_id":"HumanEval_161","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇ     \/\/Function ၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃးၼၼ်ႉယဝ်ႉ။    \/\/သင်ဝႃႈ string ဢမ်ႇမီးတူဝ်လိၵ်ႈသင်ၼႆ ၶိုၼ်းပိၼ်ႇဝၢႆႇ string ၼၼ်ႉ။    \/\/ပေႃးဢမ်ႇၼၼ် ႁႂ်ႈမၼ်းမီးၼင်ႇၼၼ်။    \/\/သင်ဝႃႈ s[i] ပဵၼ်တူဝ်လိၵ်ႈၼႆ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ ပိၼ်ႇပၢႆႇၵႂႃႇၸူးတူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ် ဢမ်ႇၼၼ် ပိၼ်ႇပၢႆႇၵႂႃႇၸူးတူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ။    \/\/သူတေလႆႈပၼ် string s.    \/\/ >>> solve((\"1234\"))\n    \/\/ (\"4321\")\n    \/\/ >>> solve((\"ab\"))\n    \/\/ (\"AB\")\n    \/\/ >>> solve((\"#a@C\"))\n    \/\/ (\"#A@c\")\n    def solve(s : String) : String = {\n","canonical_solution":"def solve(s: String): String = {\n    if (s.exists(_.isLetter)) {\n      s.map {\n        case c if c.isLetter && c.isLower => c.toUpper\n        case c if c.isLetter && c.isUpper => c.toLower\n        case c => c\n      }.mkString\n    } else {\n      s.reverse\n    }\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"},{"task_id":"HumanEval_162","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/သင်ဝႃႈ 'text' ၼႆႉပဵၼ် ထႅဝ်လိၵ်ႈဢၼ်ဢမ်ႇမီးတူဝ်သင်ၼႆ ၶိုၼ်းဢဝ် None လၢႆႈမႃး    \/\/ပေႃးဝႃႈလႆႈပၼ် string 'text' ၼႆၸိုင် ၶိုၼ်းဢဝ် md5 hash equivalent string မၼ်းၼၼ်ႉ ၶိုၼ်းပၼ်။    \/\/ >>> stringToMd5((\"Hello world\"))\n    \/\/ Some(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    def stringToMd5(text : String) : Option[String] = {\n","canonical_solution":"import java.security.MessageDigest\n\nobject Problem {\n  def stringToMd5(text: String): Option[String] = {\n    if (text.isEmpty) None\n    else {\n      val md = MessageDigest.getInstance(\"MD5\")\n      val digest = md.digest(text.getBytes)\n      Some(digest.map(\"%02x\".format(_)).mkString)\n    }\n  }\n}\n\n\/\/ Example usage:\n\/\/ println(Problem.stringToMd5(\"Hello world\"))  \/\/ Output: Some(\"3e25960a79dbc69b674cd4ec67a72c62\")","tests":"    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(Some(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(Some(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Some(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n"},{"task_id":"HumanEval_163","nl":"shn_Mymr","pl":"scala","prompt":"import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    \/\/တူဝ်ယၢင်ႇမၼ်း-    \/\/လႄႈ b၊ ၶိုၼ်ႈမႃးၸွမ်းၵၼ်။    \/\/ပေႃးဝႃႈႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ်သႂ် သွင်တူဝ် a လႄႈ b ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ၼႂ်းၵႄႈ a  လႄႈ b ၼၼ်ႉၶိုၼ်း    \/\/ >>> generateIntegers((2l), (8l))\n    \/\/ (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    \/\/ >>> generateIntegers((8l), (2l))\n    \/\/ (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    \/\/ >>> generateIntegers((10l), (14l))\n    \/\/ (List[Long]())\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n","canonical_solution":"import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n  def generateIntegers(a: Long, b: Long): List[Long] = {\n    val start = min(a, b)\n    val end = max(a, b)\n    val evenNumbers = for (i <- start to end if i % 2 == 0) yield i\n    evenNumbers.map(_.toLong).toList\n  }\n}","tests":"    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n    }\n\n}\n"}]