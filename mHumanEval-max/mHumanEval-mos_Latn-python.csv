task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,mos_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Ges-y sã n yaa sõor a yiib n pẽ taab n yɩɩd sõor ning b sẽn kõ wã. Makre: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,mos_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Y sẽn dat n maan yaa y welg sullã n maan sull a to, la y lebg n wa ne b sõorã. sull a to wã yaa sẽn zems ne taaba (yʋʋmd fãa sẽn pakã yaa sõma) la b pa kẽed ne taab ye. y bas tɩ weoogã sẽn be be wã ra zĩnd ye. Makre: >>> separate_paren_groups' ((( ) (() (()))))) ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,mos_Latn,python,"

def truncate_number(number: float) -> float:
    """"""B sã n kõ sõor sẽn tar vɛɛsg sẽn yaa sõma, b tõe n welga a wã n lebg sõor sẽn yaa sõma (sẽn yaa sõma n yɩɩd sõor ning b sẽn kõ wã) la zĩ-likr (sẽn ketã yaa sẽn yaa sõma n yɩɩd 1 wã).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,mos_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Y sã n wa rat n bãng y sẽn tõe n maan to-to n paam ligdi, y segd n bao n bãnga y sẽn tõe n maan to-to n paam ligdi.""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,mos_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Sẽn kẽed ne sõor sẽn be sõor ning pʋgẽ, bãng tɩ sẽn yaa to-to fãa yaa sẽn zems ne sõor ning sẽn be sõor ning pʋgẽ wã. Sẽn yaa to-to fãa yaa sẽn yaa to-to fãa sẽn zems ne sõor ning sẽn be sõor ning pʋgẽ wã.""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,mos_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""B kẽesa sõor sẽn yaa 'delimiter' n be b sẽn boond tɩ ""input list"" wã zĩis a yiib fãa sʋka. `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,mos_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Yaa sull sẽn be ne sull fãa n na n wilg sull ning sẽn be ne sull fãa n na n wilg sull ning sẽn be ne sull fãa. Wala makre, (() (()) tara sull a yiib n tõe n maan tɩ b pa tõe n maan ye, la ((())) tara sull a tãab n tõe n maan woto.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,mos_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter a input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,mos_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Sẽn kẽed ne sõor sẽn kõ, lebg n wa ne tuple sẽn naag ne sõor la sẽn lebg n wa ne sõor sẽn yaa sõor fãa sẽn be sõor pʋga. Zĩ-zĩ-zĩ-zĩiga segd n yɩɩ 0 la zĩ-zĩiga segd n yɩɩ 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,mos_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Ne sõor sẽn kõ, d na n paama sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems n ta sõor sẽn zems ne sõor sẽn zemsã.""""""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,mos_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Bao-y palindrom sẽn yaa kɩdgã sẽn sɩng ne sõor sẽn kõ. Algorithm tags-kãngã yaa nana: - Bao-y sõor sẽn yaa kɩdgã sẽn yaa palindromã. - Rɩk-y sõor sẽn yaa kɩdgã sẽn yaa sõor sẽn yaa tɩlɛ wã n paas sõor sẽn yaa tɩlɛ wã sẽn yaa tɩlɛ wã n paas sõor sẽn yaa tɩlɛ wã. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Gʋls-y sã n yaa tɩlɛ tɩ y kõ kõ-y sõor sẽn yaa wa palindrõma """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,mos_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""B sẽn gʋlsd b sẽn gʋlsd b toorã yaa 1 la 0. B sã n gʋls b toorã n lebg n wa ne b sẽn gʋlsã, b na n lebg n wa ne b sẽn gʋlsã.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,mos_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Sẽn be sõor-kẽengã pʋgẽ, lebg n wa ne sẽn yaa-a woglem n yɩɩdã. lebg n wa ne pipi soabã sã n yaa tɩ woglem sẽn yaa a yembr n be sõor-kẽeng wʋsg pʋsẽ. lebg n wa ne a ye ka be sã n mik tɩ sẽn be sõor-kẽengã pʋgẽ yaa zaalem. >>> sẽn yaa woglem n yɩɩdã (([]) >>> sẽn yaa woglem n yɩɩdã ((['a', 'b', 'c']) 'a' >>> sẽn yaa woglem n yɩɩdã ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,mos_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""lebg n wa ne sõor a yiib sẽn yaa zãngã pʋɩtb sẽn yaa kãseng n yɩɩd b fãa sʋka, a la b >>> sẽn yaa zãngã_namsg_namsg_namsg sẽn yaa kãseng n yɩɩd b fãa sʋka ((3, 5) 1 >>> sẽn yaa zãngã_namsg_namsg_namsg sẽn yaa kãseng n yɩɩd b fãa sʋka ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,mos_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""D lebg n wa ne sõor sẽn sɩng ne sõor sẽn yaa bilf n ta sõor sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem sẽn yaa woglem""""""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,mos_Latn,python,"

def string_sequence(n: int) -> str:
    """"""lebg n wa ne sõor sẽn be zĩiga sẽn yãk n sɩng ne 0 n ta n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,mos_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Y sã n kõ-y sõor-koɛɛga, bao-y n bãng sõor ning sẽn yaa toor-toor (n pa ges b sẽn gʋls-a to-to wã) sẽn yaa to-to.""""""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,mos_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Y sẽn na n gʋls n ning bũmb ning fãa sẽn be seb-kãngã pʋgẽ wã yaa: 'o' note, lasts beats 'o' dakor' - half note, lasts two beats 'o' dakor' - quater note, lasts one beat >>> parse_music. 'o' dakor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,mos_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Bao-y n bãng-y naoor a wãn la b tõe n yã-y sõor-koɛɛga pʋgẽ.""""""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,mos_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Sõngr yaa sõor sẽn be zĩiga pʋgẽ n tekd 'sero' n ta 'sembrã'. B sẽn tõe n yãk n yãk yaa 'sero', 'yẽng', 'a yiib', 'a tãab', 'a naasã', 'a nu', 'a yoob', 'a yopoe', 'a nii' la 'a wɛ.' lebg n wa ne sõor sẽn welg n sɩng ne sõor sẽn yaa bilf n tɩ ta sõor sẽn yaa kãseng n yɩɩdã >>> sort_numbers (('bãmb a tãab yaa a nu') 'a yembr yaa a tãab yaa a nu' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,mos_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Y sã n yã sõor sõor sẽn yaa toore (sẽn pa ta a yiib), y yãkd a yiib sẽn kolg taaba, n lebg n wa ne b sorã (sẽn yaa bilf n yɩɩd, sẽn yaa kãseng n yɩɩd). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,mos_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""B sã n kõ sõor sõor sõor (sẽn ta a yiib), b rɩkda lineer tekr n tek sõor kãng zugu, tɩ sõor ning sẽn yaa bilf n yɩɩdã lebg 0 la sẽn yaa kãseng n yɩɩdã lebg 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,mos_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,mos_Latn,python,"

def strlen(string: str) -> int:
    """"""D sã n wa rat n lebg n wa ne sõor sẽn pa yembr n lebg n wa, d segd n bao n bãnga sõor ning sẽn yaa a soabã.""""""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,mos_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Sẽn na yɩl n bãng sõor n kõ, bao sõor ning sẽn yaa kãseng n yɩɩd n nenga n nenga, n pa ta n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,mos_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""D lebg n wa ne sõor sẽn yaa pipi koees nins sẽn kɩt tɩ sõor-zemsã lebg pipi koees sẽn sɩng ne sõor sẽn yaa bilf n ta sõor sẽn yaa kãsenga. B segd n sõdga koees nins sẽn yaa pipi koees nins sẽn zems ne b sẽn na n wa n sõd-b naoor a wãn n lebg pipi koeesã. B segd n sõdga koees nins sẽn yaa pipi koees nins fãa sẽn lebg pipi koeesã n lebg pipi koeesã sẽn yaa >>> sõd-zems sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõ""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,mos_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Y sã n yã sõor sẽn yaa zall n yɩɩd a ye, bɩ y yiis-a. Y sã n yã sõor sẽn yaa zall n yɩɩd a ye, bɩ y bas-a t'a yɩ a yembr ne a to wã. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,mos_Latn,python,"

def flip_case(string: str) -> str:
    """"""Sẽn kẽed ne sõsg sẽn kõ, lebg-y lɛtrã sẽn yaa bilã tɩ b lebg bil-bɛd la bil-bɛd n lebg bil-bɛd. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,mos_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Yɩta sõor sẽn kẽed ne sõor sẽn kẽed ne sõor a ye >>> yιta sõor sẽn kẽed ne sõor a ye (([]) '' >>> yιta sõor sẽn kẽed ne sõor a ye ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,mos_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter a input list of strings only for ones that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,mos_Latn,python,"

def get_positive(l: list):
    """"""lebg n wa ne sõor sẽn yaa sõma bala sõor ning sẽn be sõor ning pʋgẽ wã. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,mos_Latn,python,"

def is_prime(n):
    """"""D lebg n wa ne true sã n yaa sõor sẽn yaa pipi, la false sã n pa woto. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,mos_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs yaa polynom koeefɩntse. find_zero yãta x sẽn yaa woto tɩ poly ((x) = 0. find_zero lebgda a ye bala, yaa zéro zĩiga bala, baa sã n yaa wʋsgo. Sẽn paase, find_zero rɩkda xs sõor sẽn tar koeefɩnt rãmb sõor menga la sẽn pa zéro koeefɩnt sẽn yaa kãseng n yɩɩd bala a kõta yel-bũndi. >>> round (((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""A makda polinomi sẽn tar koeefɩɩɩtã xs zĩ-zãrgẽ x. lebg n wa xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,mos_Latn,python,"

def sort_third(l: list):
    """"""Tʋʋm kãnga rɩkda sõor a ye n lebg n wa ne sõor a ye t'a yaa a yembr ne a sẽn be lɛnd nins sẽn pa tõe n pʋɩ ne a tãabã pʋgẽ, tɩ a yõodo ne lɛnd nins sẽn tõe n pʋɩ ne a tãabã yaa a yembr ne lɛnd nins sẽn zems ne a sẽn be lɛnd nins sẽn tõe n pʋɩ ne a tãabã pʋgẽ, la b welga. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,mos_Latn,python,"

def unique(l: list):
    """"""A lebgda bũmb nins sẽn be sõor pʋga, n yaa toor-toorã, n be sõor pʋga >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,mos_Latn,python,"

def max_element(l: list):
    """"""lebg n wa ne sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor sẽn ta sõor.""""""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,mos_Latn,python,"

def fizz_buzz(n: int):
    """"""D lebg n wa ne sõor ning sẽn zems n-yẽg 7 sẽn pukd n yɩɩd n sẽn tõe n pʋɩ ne 11 bɩ 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,mos_Latn,python,"

def sort_even(l: list):
    """"""Tʋʋm kãnga rɩkda sõor a ye n lebg n wa ne sõor a ye t'a yaa a yembr ne a sẽn be a sẽn pa ta wã pʋgẽ, tɩ a sẽn be a sẽn ta wã me yaa a sẽn ta wã, la b welga. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,mos_Latn,python,"

def encode_cyclic(s: str):
    """"""A rɩkda sẽn nan yɩll n kẽed ne encode_cyclic tʋʋm-noor n lebg n wa ne sẽn nan yɩll n kẽed ne.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""A lebgda ne b sẽn gʋlsd-a ne b sẽn gʋlsd-a ne b sẽn gʋlsd-a ne b sẽn gʋlsd-a ne b sẽn gʋlsd-a ne b sẽn gʋlsd-a ne b sẽn gʋlsd-a ne b sẽn gʋlsd-a ne b sẽn gʋls-a.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,mos_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib lebgda sõor n-n-soab sẽn yaa Fibonacci sõor la a yaa pipi sõore. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,mos_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero rɩkda sõor sẽn yaa sõma n lebg n wa. A lebg n wa True sã n yaa tɩ bũmb a tãab n be sõorã pʋgẽ tɩ b sõor yaa zéro, la False sã n pa woto. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,mos_Latn,python,"

def car_race_collision(n: int):
    """"""Tags-y n ges-y so-toak sẽn yaa tɩrga, n yaa zãngã sẽn ka tɛk n zãr ne a to wã. So-toak n be n kẽnd n yi goabg n kẽng rɩtgo, tɩ so-toak a to n kẽnd n ta rɩtgo n kẽng goabg. So-toak a yiibã sɩngda ne taab zãrgo. So-toak fãa kẽnd ne vitem a yembre. B yetame tɩ so-toak n wat ne taab sã n mik tɩ so-toak sẽn kẽnd goabg n kẽng rɩtgo wã wẽeda so-toak sẽn kẽnd rɩtgo n kẽng goabga. La so-toakã tara pãng sẽn pa tõe n bãng n bilg la b yaa kãn-kãe, tɩ kɩt tɩ b ket n kẽnd b so-toakã pʋgẽ wa b sẽn pa tol n wẽed taab ye.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,mos_Latn,python,"

def incr_list(l: list):
    """"""D lebg n wa ne sõor sẽn paasd 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,mos_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero rɩkda sõor sẽn yaa sõma n lebg n wa. A lebg n wa True sã n yaa tɩ bũmb a yiib n be sõorã pʋgẽ tɩ b sõor yaa zéro, la False sã n pa woto. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,mos_Latn,python,"

def change_base(x: int, base: int):
    """"""Y sã n wa rat n lebg n lebg n wa, y segd n lebg n wa ne sõor sẽn zems ne sõor ning y sẽn lebg n wa ne wã.""""""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,mos_Latn,python,"

def triangle_area(a, h):
    """"""B sã n kõ a to wã woglem la a sẽn lebg n wa zĩig ninga, yaa a tãab-n-soabg yĩnga. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,mos_Latn,python,"

def fib4(n: int):
    """"""Fib4 sõor pʋga yaa sẽn wõnd Fibbonacci sõor pʋga sẽn yaa woto: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). y gʋls tʋʋm-noor sẽn na n bãng n-rɩtg ning sẽn be fib4 sõor pʋga pʋgẽ. Da rɩk n lebg n wa ye. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,mos_Latn,python,"

def median(l: list):
    """"""B sẽn na n lebg n wa ne bũmb nins sẽn be sõor-kẽengã pʋgẽ wã sʋka, a yaa:""""""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,mos_Latn,python,"

def is_palindrome(text: str):
    """"""A gesda sã n yaa tɩlɛ tɩ b kõ sõsg sẽn yaa palindrom >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,mos_Latn,python,"

def modp(n: int, p: int):
    """"""lebg n wa 2^n modulo p (yẽes sõor sẽn yaa toogã). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,mos_Latn,python,"

def encode_shift(s: str):
    """"""a reegda wa sẽn kẽed ne encode_shift sẽn kẽed ne encode_shift. A lebgda ne sẽn kẽed ne encode.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""A lebgda ne b sẽn ning b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b ne b sẽn gʋlsd-b.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,mos_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels yaa tʋʋm-noor sẽn dɩkd sõn-vɩɩs n lebg n wa ne sõn-vɩɩs sẽn pa tar vʋkɛlle. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,mos_Latn,python,"

def below_threshold(l: list, t: int):
    """"""lebg n wa ne sɩd sã n yaa tɩ sõor fãa sẽn be sõor-kẽengã pʋgẽ wã yaa sẽn pa ta t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,mos_Latn,python,"

def add(x: int, y: int):
    """"""Rɩk sõor a yiib n paas x la y n paas sõor a 2, 3 la 5 n paas sõor a 5, 7 la 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,mos_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Gʋls-y n ges gom-biis a yiib sẽn tar yʋy sẽn yaa a yembr bɩ. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Yaa sɩda >>> same_chars (('abcd', 'dddddddabc') Yaa sɩda >>> same_chars (('dddddddabc', 'abcd') Yaa sɩda >>> same_chars (('eabcd', 'dddddddabc') Yaa zĩrĩ >>> same_chars ((('abcdd', 'dddddabddce') Yaa sɩda >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') Yaa sɩda """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,mos_Latn,python,"

def fib(n: int):
    """"""lebg n-n-soab Fibonacci sõore. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,mos_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets yaa ""<"" la "">"". return True sã n yaa tɩ bracket fãa sẽn sɩngda tara a sẽn wat n baasd ne a. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,mos_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,mos_Latn,python,"

def common(l1: list, l2: list):
    """"""A lebsa bũmb sẽn yaa toor sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore, sẽn yaa toore.""""""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,mos_Latn,python,"

def largest_prime_factor(n: int):
    """"""D lebg n wa ne n-yẽng ning sẽn yaa pipi n-yẽng n yɩɩd nã-yẽng n yɩɩd nã-yẽng n lebg n wa ne n-yẽng n-yẽng n-yẽng n lebg n wa ne n-yẽng n-yẽng n-yẽng n lebg n wa ne n-yẽng n-yẽng n-yẽng n lebg n wa ne n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng n-yẽng""""""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,mos_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n yaa tʋʋm-noor sẽn na n sõd sõor sẽn sɩng ne 1 n ta n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,mos_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets yaa ""("" la "")"". return True sã n yaa tɩ bracket fãa sẽn sɩngda tara a sẽn wat n baasd ne a. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,mos_Latn,python,"

def derivative(xs: list):
    """"""xs makda polinomi wã koeefɩɩtense. xs[0] + xs[1] * x + xs[2] * x^2 + .... lebg n wa ne polinomi wã sẽn yit zĩig ningã. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,mos_Latn,python,"

def fibfib(n: int):
    """"""FibFib sõor pʋga yaa sẽn wõnd Fibbonacci sõor pʋga sẽn yaa woto: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). y gʋls tʋʋm-noor sẽn na n bãng n-rɩtg ning sẽn be fibfib sõor pʋga. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,mos_Latn,python,"
FIX = """"""Sebg ning sẽn boond tɩ "" vowels_count "" wã yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count""""""""

def vowels_count(s):
    """"""Bao-y n bãng-y yɛl a taab n paase.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,mos_Latn,python,"
def circular_shift(x, shift):
    """"""Y sã n wa n na n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n wa ne sõor sẽn yaa zuloees n lebg n lebg n wa ne sõor sẽn yaa zuloees n lebg n lebg n wa ne sõor sẽn yaa zuloees n lebg n lebg n lebg n wa zuloe.""""""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,mos_Latn,python,"
def digitSum(s):
    """"""Tʋʋm-sõng gʋlsg sẽn dɩkd sõn-vɩɩga wa sẽn kẽed ne n lebg n wa ne sõor sẽn yaa ne a zugẽ wã bal ASCII koodse. Makre: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,mos_Latn,python,"
def fruit_distribution(s,n):
    """"""Y sã n kõ-y sõor sẽn makd kʋɩl-koom la kʋɩl-koom sẽn be biis koglg pʋgẽ, kʋɩl-koomã pʋgẽ, kʋɩl-koomã pʋgẽ, la kʋɩl-koomã pʋgẽ, bɩ y kõ kʋɩl-koomã sẽn makd kʋɩl-koomã la kʋɩl-koomã fãa sõor sẽn makd kʋɩl-koomã pʋgẽ wã, bɩ y lebs kʋɩl-koomã sẽn be biis koglgẽ wã sõore. Wala makre: fruit_distribution""5( kʋɩl-koom la kʋɩl-koom 6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 kʋɩl-koom la kʋɩl-koom 1"", 3) -> 3 - 0 - 1 = 2 fruit_distribution""2 kʋɩl-koom la kʋɩl-koom 3"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 kʋɩl-koom la kʋɩl-koom 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,mos_Latn,python,"
def pluck(arr):
    """"""""Yãmb sã n paam tɩ y tara sull sẽn yaa wa tɩɩg sẽn tar wil-tɩrse, tɩ b pa be n ya zuloees ye, y segd n dɩka a yembr n lebg n wa. B sẽn yãk bilã segd n yɩɩ bil ning sẽn tar tɩɩm ning sẽn yaa zuloees n yɩɩdã. B sã n yãe tɩ b yãe tɩ b tara bil wʋsg sẽn tar tɩɩm ning sẽn yaa zuloees n yɩɩdã, bɩ b lebs bilã sẽn tar tɩɩm ning sẽn yaa zuloees n yɩɩdã. B sã n pa yãe tɩ bilã sẽn dɩkã segd n lebg n wa ne bilã sẽn tar tɩɩm ning sẽn yaa zuloees n yɩɩdã, bɩ b lebs []. Makre: 1: Vʋʋg-n-tɩrg: [4,2,3] Vʋʋg-n-tɩrg: [2, 1] Vʋʋg-n-tɩrg: 2 tara tɩɩm ning sẽn yaa zuloees n yɩɩdã, la 2 tara tɩɩm ning sẽn yaa zuloees n yɩɩdã. Makre: 2: Vʋʋg-n-tɩrg: [1,2,3] Vʋʋg-n-tɩrga: [2, 1] Vʋʋg-n-tɩrg: 2 tara tɩɩm ning sẽn yaa zuloees n yɩɩdã, la 2 tara tɩɩm ning sẽn yaa zuloe. Makre: Vʋʋg-n-tɩrg: Vʋʋg-n-n-tɩrg: Vʋʋg-n-n-tɩrg: [1,2,3] Vʋʋg-n-tɩr: [1,2,3] Vʋʋg-n-tɩr: [2,3] Vʋʋg-tɩr: [2,3] Vʋʋg-n-tɩr: [2,3] Vʋʋg-tɩr] Vʋʋg-n-tɩr: 1""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,mos_Latn,python,"
def search(lst):
    '''B kõ-y-la sõor sẽn pa zaalem sẽn na n yɩll n bãng sã n yaa sõor sẽn yaa zéro bɩ n yɩɩd woto, la a sã n yaa sõor sẽn yaa zéro bɩ sẽn pa ta woto. Sõor sẽn yaa zéro yaa sõor sẽn na n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,mos_Latn,python,"
def strange_sort_list(lst):
    '''Y sã n paam tɩ y sõdga sõor sẽn yaa zall n lebg n wa, y na n sõdga sõor sẽn yaa zall n wa. Y sã n sɩng ne sõor sẽn yaa zall n wa, y na n sõdga sõor sẽn yaa zall n wa, n yaool n sõdga sõor sẽn yaa zall n wa, n yaool n sõdga sõor sẽn yaa zall n wa.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,mos_Latn,python,"
def triangle_area(a, b, c):
    '''D sã n paam n bãng a tãab fãa sẽn yaa to-to, d na n lebg n wa ne a sẽn yaa to-to wã. D sã n paam n bãng a tãab fãa sẽn yaa to-to wã, d na n lebg n wa ne a sẽn yaa to-to wã. Sã n pa rẽ, d na n lebg n wa ne -1 B sẽn yaa to-to wã na n lebg n wa ne a to-to wã.'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,mos_Latn,python,"
def will_it_fly(q,w):
    '''Sebg sẽn na n lebg n wa ne True sã n yaa tɩ bõn-vɩɩga q na n yɩkame, la False sã n pa woto. Bõn-vɩɩga q na n yɩkame, sã n yaa tɩ b yaa zems taaba (a yaa palindrom lisi) la a wilã sõor yaa bilf n yɩɩd bɩ a zemsa ne sẽn tõe n yɩll tɩ yɩ n yɩɩg w. Makre: will_it_fly (([1, 2], 5) â -> False # 1+2 yaa bilf n yɩɩd sẽn tõe n yɩll tɩ yɩ n yɩɩg w, la a pa zems taaba. will_it_fly (([3, 2, 3], 1) â -> False # a yaa zems taaba, la 3+2+3 yaa wʋsg n yɩɩd sẽn tõe n yɩ n yɩɩg w. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 yaa bilf n yɩɩd sẽn tõe n yɩ n yɩɩg w, la a yaa zems taaba. will_it_fly ((([3], â 5) -> True # 3 yaa bilf n yɩɩd sẽn tõe n yɩ n yɩɩg w, la a yaa zems taaba. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,mos_Latn,python,"
def smallest_change(arr):
    """"""Y sã n kõ-y arɩ n tar nimero, bɩ y bao n bãng bũmb nins sẽn yaa tɩlae tɩ y toeeme n tõog n lebg arɩ wã palindrom. Arɩ sẽn yaa palindrom yaa arɩ sẽn tõe n karem n lebg n leb poorẽ la sẽn tõe n kẽng taoor wa taaba. Y sã n toeeme, y tõe n toeema bũmb a ye n lebg bũmb a to. Wala makre: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,mos_Latn,python,"
def total_match(lst1, lst2):
    '''Gʋls-y tʋʋm-noor sẽn deegd sõor a yiib n lebg n wa ne sõor ning sẽn tar sõor sẽn pa ta a to wã. Sã n yaa sõor sẽn zem taaba, lebg n wa ne pipi sõorã. Makr: total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi]) â -> ['hI', 'hi'], 'hi'_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,mos_Latn,python,"
def is_multiply_prime(a):
    """"""Rɩk-y tʋʋmde sẽn na n lebg n wa ne sɩd sã n yaa tɩ sõor ning b sẽn kõ wã yaa sõor a 3 sẽn yaa pipi sõor n paas tɩ sã n pa woto yaa ziri.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,mos_Latn,python,"
def is_simple_power(x, n):
    """"""Y tʋʋmda yaa gʋls tʋʋmde sẽn lebgda sɩd sã n yaa sõor n yaa n-yẽng n yaa zĩrĩ, la zĩrĩ sã n yaa a toore. x yaa zĩrĩ n yaa zĩrĩ n sã n yaa n**int=x Wala makre: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,mos_Latn,python,"
def iscube(a):
    '''Gʋls-y tʋʋm-noor sẽn na n dɩk nimero a n lebg n wa ne True sã n yaa nimero a ye n pa a yembr n pa a yembr.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,mos_Latn,python,"
def hex_key(num):
    """"""Y paama tʋʋmde n na n gʋls tʋʋmde sẽn deegd sõor sẽn yaa hexadecimal wa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,mos_Latn,python,"
def decimal_to_binary(decimal):
    """"""B na n kõ-y-la sõor sẽn yaa koabg zug n kõ-y tɩ y tek n lebg a yiib-n-soabg. Tʋʋmdã segd n lebgame tɩ yɩ sõor sẽn yaa koabg zug n kõ-y tɩ ned kam fãa makd a yiib-n-soabg sõore. Sõor fãa sẽn be sõor pʋgẽ wã na n yɩɩ '0' bɩ '1'. B na n paama sõor a yiib n paas 'db' sõorã sɩngrẽ la a baasgẽ. Sõor a yiib n-soabã bee be n na n sõng ne sõorã sẽn na n yɩ to-to wã. Makre: decimal_to_binary ((15) # lebgda ""db1111db"" decimal_to_binary32) # lebgda ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,mos_Latn,python,"
def is_happy(s):
    """"""B kõ-y-la sõn-vãoog sẽn yaa s. Y tʋʋmda yaa ges sã n yaa sõn-vãoog sẽn yaa sũ-noog bɩ ka sũ-noog ye. Sõn-vãoog yaa sũ-noog sã n yaa a woglem yaa 3 la a fãa 3 sõss sẽn pʋgl taab yaa toor Wala makre: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy)) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,mos_Latn,python,"
def numerical_letter_grade(grades):
    """"""Yaa semɛstrã yaoolem semen la karen-saambã segd n kõ karen-biisa makrã. Karen-saambã maana a meng sẽn na yɩl n kõ karen-biisa makrã. Bũmb ning sẽn yaa zu-loees a ye bal yaa t'a menemda kood ning a sẽn da tũnug ne n kõ karen-biisa makrã. A kõo yãmb karen-biis kẽer GPA sõor tɩ y segd n gʋls tʋʋm-noor sẽn tõe n yiis lɛtrã makrã sõor ne tabl ning sẽn pʋgdã: GPA. Lɛtrã makrã 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,mos_Latn,python,"
def prime_length(string):
    """"""Gʋls-y tʋʋm-noor sẽn dɩkd sõn-vãoog n lebg n wa ne Sɩda sã n yaa sõn-vãoog sẽn yaa sõor sẽn yaa pipi, bɩ Sɩda sã n pa woto Makr prime_length{""Hello"") == Sɩda prime_length{""abcdcba"") == Sɩda prime_length{""kittens"") == Sɩda prime_length{""orange"") == Sɩda """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,mos_Latn,python,"
def starts_one_ends(n):
    """"""D sã n kõ sõor sẽn yaa sõma n, d na n lebg n wa ne sõor ning sẽn yaa sõma n-digit sõor sẽn sɩngd bɩ sẽn baasd ne 1 wã.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,mos_Latn,python,"
def solve(N):
    """"""Sã n yaa tɩ f tara nimero sẽn yaa sõma n yaa N, bɩ f lebg n wa ne a nimero rãmb fãa sõor sẽn yaa a yiib-n-soab n kõ. Makre N = 1000, a nimero rãmb sõor na n yɩɩ 1 tɩ b ra yiisd n yɩ ""1"". N = 150 yĩnga, a nimero rãmb sõor na n yɩɩ 6 tɩ b ra yiisd n yɩ ""110"". N = 147 yĩnga, a nimero rãmb sõor na n yɩɩ 12 tɩ b ra yiisd n yɩ ""1100"". Variables: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Output: a string of binary number """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,mos_Latn,python,"
def add(lst):
    """"""D sã n paam sõor sẽn pa zaalem, d na n sõd-a-la ne nin-sabls sẽn yaa zuloees n yɩɩd nin-sablsã.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,mos_Latn,python,"
def anti_shuffle(s):
    """"""Sebr ning sẽn yaa "" 'sẽn paam-a sebre "" ' yaa sebr ning sẽn be gom-biisa fãa (sẽn welg ne zĩiga) n lebg ne gom-bi-paalle, tɩ b gʋlsd gom-biisa fãa sẽn be sor zug n zẽkd n tikd ASCII yõodo. Bãngre: Y segd n kell n tũame tɩ gom-biisa la zĩ-zulungã zĩnd sor zug n zẽkd n basd sor zug. Wala makre: anti_shuffle ((('Hi') lebgda ""Hi' anti_shuffle ((('hello') lebgda ""ehllo"" anti_shuffle (('Hello World!!!') lebgda ""Hello !!!Wdlor"" """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,mos_Latn,python,"
def get_row(lst, x):
    """"""B kõ-y-la 2 dimensional data, wala nested lists, sẽn wõnd matric, la sẽn pa wa matric, rũm-yend fãa tõe n tara kolõns sõor sẽn yaa toor-toore. d sã n kõ lst, la intɛrse x, d bao intɛrse x sẽn be listã pʋgẽ, la d lebg n wa ne tuple-rãmb sõor, [(x1, y1), (x2, y2) ...] tɩ tuple fãa yaa koordinat - (rũm-yend, kolõns), sẽn sɩng ne 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,mos_Latn,python,"
def sort_array(array):
    """"""Y sã n paam tɩ y kõ-y sõor sẽn pa zuloes n lebg n wa, y na n welga sõorã n wa ne a sẽn na n yɩ to-to wã. Y sã n wa paam tɩ sõorã yaa toor-toore, bɩ y welg-a n wa ne a sẽn na n yɩ to-to wã.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,mos_Latn,python,"
def encrypt(s):
    """"""B na n maana tʋʋm-noor sẽn na n dɩk kõntraar wa a gom-biis n lebg n wa ne kõntraar sẽn kẽed ne alfabɛtã sẽn lebg n wa. Alfabɛtã segd n lebg n wa ne manesem sẽn kɩt tɩ lɛtbã rʋʋg n wa n lebg n wa zĩis a yiib n paas zĩis a yiib pʋgẽ. Wala makre: encrypt (('hi') lebg n wa ne 'lm' encrypt (('asdfghjkl') lebg n wa ne 'ewhjklnop' encrypt (('gf') lebg n wa ne 'kj' encrypt (('et') lebg n wa ne 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,mos_Latn,python,"
def next_smallest(lst):
    """"""B kõ-y-la sõor sẽn yaa zãng sõor sõor bala. gʋls-y tʋʋm-noor sẽn boond tɩ next_smallest (() sẽn na n lebg n wa ne sõor a yiib-n-soab sẽn yaa bilf sõor sõor sõorã pʋgẽ. lebg n wa ne a ye ka be sã n ka be woto. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,mos_Latn,python,"
def is_bored(S):
    """"""B na n kõ-y-la gom-biis sõor sẽn yaa sõor sẽn yaa toog n sõd n bãng tɩ yaa wakat a wãn la y na n wa paame. Yãk-y tɩ yaa wakat sẽn sɩng ne ""m"". B na n boola gom-biis ne '.', '?' bɩ '! Wala makre: >>> yaa_toogame (y) "" Hello world "") 0 >>> yaa_toogame (y) ""Sẽn yaa saaga. wĩndgã yãgda. m nonga weerã"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,mos_Latn,python,"
def any_int(x, y, z):
    '''D na n maana tʋʋm-noor sẽn na n dɩk sõor a 3 n kõ-a. A sã n kõ sõor a ye n yaa a yiib a taabã sõor sẽn na n yɩll tɩ b lebg n lebg n wa, a kõta sɩda. A sã n kõ-a-la sɩda, a kõta zĩrĩ.'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,mos_Latn,python,"
def encode(message):
    """"""Gʋls-y tʋʋm-noor sẽn na n dɩk koɛɛg n ning-a sẽn na yɩl tɩ lɛtbã fãa lebg n lebg n wa, la a ning-a lɛtbã fãa vokaal-rãmb sẽn be lɛtbã pʋgẽ wã n ning lɛtr ning sẽn be vokaal-rãmbã taoor zĩis a 2 wã pʋgẽ.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,mos_Latn,python,"

def skjkasdkd(lst):
    """"""B kõ-y-la sõor sẽn yaa sõor sẽn yaa sõma. Y segd n baoo sõor ning sẽn yaa kãseng n yɩɩdã n lebg n wa ne a sifrã sõore. Makre: Sã n yaa tɩ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], rẽnda sõor ning sẽn segd n yi wã yaa 10 Sã n ya tɩ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1], rẽnda sõor ning sẽn segd n yi wã yaa 25 Sã n ya tɩ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], rẽnda sõor ning sẽn segd n yi wã yaa 13 Sã n ya tɩ lst = [0,724,32,71,99,32,60,91,83,0,5,6], rẽnda sõor ning sẽn segd n yi wã yaa 11 Sã n ya tɩ lst = [0,81,12,31,21,21], rẽnda sõor ning sẽn segd n yi wã yaa 3 Sã n yaa tɩ lst = [1,8,1,2,1,7]""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,mos_Latn,python,"
def check_dict_case(dict):
    """"""D sã n kõ-a gom-biis sẽn yaa wa, a lebgda True sã n yaa tɩ b fãa yaa sõn-vɩɩd sẽn be ne gʋls-bi-kɩds bɩ b fãa yaa sõn-vɩɩd sẽn be ne gʋls-bi-bɛd, sã n pa rẽ a lebgda False. Fõn-sɛb segd n lebgda False yaa tɩ gom-biis sẽn kõ wã yaa zaalem. Makre: check_dict_case{""a"":""apple"", ""b"":""banana""}) segd n lebgda True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) segd n lebgda False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) segd n lebgda False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) segd n lebgda False. check_dict_case{""NC""STATE:""STATE"", ""Z"":""IP"":""45"") segd n lebgda True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,mos_Latn,python,"
def count_up_to(n):
    """"""D rɩk tʋʋmde sẽn na n dɩk n-negativ nimero n lebg n wa ne pipi nimero n sẽn yaa pipi n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n lebg n wa ne a n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n yaa n-rɩk n-rɩk n yaa n-rɩk n-rɩk n yaa n-rɩk n-rɩk n-rɩk n-rɩk n-rɩk n-rɩk n-rɩk n-rɩk n-rɩk n-rɩk n-rɩk-rɩk-rɩ n-rɩk-rɩk-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-rɩ-r""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,mos_Latn,python,"
def multiply(a, b):
    """"""D rɩk makr ne fɩtl sẽn na n dɩkd nimero a yiib n lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa. D rɩk makr ne fɩtl sẽn na n lebg n wa ne fɩtl a yiib n lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to tɩ b sõor lebg n wa ne b sẽn maan to-to.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,mos_Latn,python,"
def count_upper(s):
    """"""Wala makre: count_upper (('aBCdEf') lebgda 1 count_upper (('abcdefg') lebgda 0 count_upper (('dBBE') lebgda 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,mos_Latn,python,"
def closest_integer(value):
    '''Yãk fɩkɛɛr sẽn dɩkd sõor sẽn yaa wa sõor n lebg n wa ne a sẽn kolg-a. Sã n yaa tɩ sõorã yaa sẽn zãr ne sõor a yiib n ta a ye, bɩ f maan-a tɩ ta a ye n zãr ne zéro. Makre >>> sẽn kolg-a_sẽn_kẽnda (((""10"") 10 >>> sẽn kolg-a_sẽn_kẽnda (((""15.3"") 15 Bãngre: Zéro wã zãr ne zéro wã rat n yeelame tɩ sã n yaa tɩ sõor ning sẽn kõ wã yaa sẽn zãr ne a yiib n ta a ye, f segd n lebg n wa ne a sẽn zãr ne zéro wã. Wala makre, sẽn kolg-a_sẽn_kẽnda (((14.5"") segd n lebg n wa ne 15 la sẽn kolg-a_sẽn_kẽnda (((-14.5"") segd n lebg n wa ne -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,mos_Latn,python,"
def make_a_pile(n):
    """"""Y sã n paam tɩ y sõdga sõor sẽn yaa sõma n kõ, y segd n maana kug sẽn tar n-rɩk n kõ. Pipi rɩk tara kug n. Kugrã sõor sẽn pʋgd rɩk ning sẽn pʋgdã yaa: - sẽn pʋgd n yaa pa-sɛta sã n yaa n-rɩk. - sẽn pʋgd n yaa pa-sɛta sã n yaa n-rɩk. lebg n kõ kugã sõor rɩk fãa pʋgẽ, tɩ elemẽnt ning sẽn be n-yẽndã i makda kugã sõor rɩk (i+1). Makre: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,mos_Latn,python,"
def words_string(s):
    """"""Y na n paama gom-biis sẽn welg ne vɛrse-rãmb bɩ zĩ-zãrs n kõ-y. Y tʋʋmda yaa y welg gom-biisã n lebg gom-biis sẽn yaa sõor wʋsgo. Wala makre: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,mos_Latn,python,"
def choose_num(x, y):
    """"""Fõn-kãng rɩkda sõor a yiib sẽn yaa sõma x la y n lebg n wa ne sõor sẽn yaa sõma n yɩɩd sẽn be zuloees a yiib pʋgẽ [x, y] sẽn kẽed ne b fãa. Sã n pa be sõor a woto, fõn-kãng segd n lebg n wa ne -1. Wala makre: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,mos_Latn,python,"
def rounded_avg(n, m):
    """"""B kõ-y-la sõor a yiib sẽn yaa sõma n paas m, tɩ y tʋʋmd yaa y bãng sõor a yiibã sẽn yaa sõma n ta m (n la m sẽn naag taab) sẽn zems to-to. Y na n wa ne sõor sẽn zems n ta a sẽn kolg n ta wã n lebg n lebg a yiib-n-soab sõore. Sã n yaa n yɩɩd m, lebg n wa ne -1. Makre: rounded_avg(1, 5) => ""0b11"" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => ""0b1111"" rounded_avg(20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,mos_Latn,python,"
def unique_digits(x):
    """"""D sã n kõ sõor sẽn yaa sõma, d na n lebg n wa ne sõor sẽn yaa sõma, sẽn na n wilg tɩ sõorã fãa yaa a yembr bala.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,mos_Latn,python,"
def by_length(arr):
    """"""D sã n kõ-a sõor sẽn yaa sõor sẽn yaa zãng, d na n welga sõor nins sẽn be 1 ne 9 wã, n lebg n welg sõor ning sẽn wa ne wã, la d lebs n ledg sõor fãa ne a yʋʋr sẽn zems ne a soabã, wala makre: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sor-y arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> sor-y arr -> [8, 5, 4, 3, 2, 2, 1, 1] lebg n wa [""Wɩt"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Sã n yaa tɩ sõor sẽn yaa faagã, lebg n wa ne sõor sẽn yaa faagã: arr = [] lebg n wa [] Sã n yaa tɩ sõor sẽn yaa faagã bee sõor sẽn pa zems ne a soabã: arr = [1, 1 , 55] -> sor-y arr -> [1, 55] -> sor-y arr -> [1, 55] -> sor-y arr = [51] - lebg n wa [' 1] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,mos_Latn,python,"
def f(n):
    """"""D rɩk f sẽn dɩkd n n yɩ wa paramɛt n lebg n wa ne sõor sẽn yaa n, tɩ f sẽn get a soab t'a yaa i wã nenga, sã n yaa t'a yaa pa-yende, bɩ a yaa sõor sẽn naag n ta 1 n ta i. i sɩngda ne 1. a i wã nenga yaa sõor sẽn yikd n ta i (1 * 2 * ... * i). Makre: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,mos_Latn,python,"
def even_odd_palindrome(n):
    """"""Sã n kõ-a sõor sẽn yaa sõma n kõ, lebg n wa ne tuple sẽn tar sõor sẽn yaa sõma la sẽn pa sõma n be zĩig a yembr pʋgẽ. Makre1: Sẽn kẽed ne: 3 Sẽn yiid: (1, 2) Vɛrse: sẽn kẽed ne: sẽn yaa sõma n be zĩig a yembr yaa 1, 2, 3. a yembr yaa sõma, la a yiib yaa sõma. Makre2: sẽn kẽed ne: 12 Sẽn yiid: (4, 6) Vɛrse: sẽn yaa sõma n be zĩig a yembr yaa 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. a naasã yaa sõma, la a 6 yaa sõma.""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,mos_Latn,python,"
def count_nums(arr):
    """"""Gʋls sõor sẽn yaa negatiivã, a pipi sifrã sẽn tar bãndã na n yɩɩ negatiiv: Wala makre, -123 tara bãndã sifrã -1, 2, la 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,mos_Latn,python,"
def move_one_ball(arr):
    """"""D tara 'arr' sẽn tar nimero rãmb N arr[1], arr[2], ..., arr[N]. B na n kɩtame tɩ nimero rãmb nins sẽn be a pʋgẽ wã yɩ ne sor sẽn pa tũ ne sor sẽn tũ ne sorã. Y tʋʋmda yaa n bãng y sã n tõe n kɩtame tɩ sullã welg n yɩll n pa boogd n tũ ne tʋʋm-kãngã sẽn pʋgdã: y tõe n maana sẽn zems naoor wʋsgo. Zĩig sẽn kẽed ne rɩtg n kẽnd tʋʋmde rat n yeelame tɩ y na n kɩtame tɩ sullã fãa toeem n lebg n ta zĩig a ye sẽn zems sorã sẽn zemsã. Zĩig sẽn pʋgl n na n kẽed ne sullã na n kẽe zĩig ning b sẽn sɩng ne sullã sẽn yaa 0 soabã. Sã n yaa tɩ y tõe n paam sullã sẽn welg n tũ ne tʋʋm-kãngã sẽn be a zugẽ wã, lebg n wa True, sã n pa woto lebg n wa False. Sã n yaa tɩ sullã sẽn pʋɩtã yaa zaalem bɩ lebg n wa True.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,mos_Latn,python,"
def exchange(lst1, lst2):
    """"""Y sã n tõe n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tik n tek n tek n tek n tek n tek n tek n tik n tek n tek n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n tik n n tik n tik n n n n tik n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,mos_Latn,python,"
def histogram(test):
    """"""D sã n paam tɩ b kõ-d-la sõor sẽn yaa wa lɛtr sẽn be zĩ-zĩig n welg-a, d na n lebg n kõ-a-la sẽn yɩll tɩ b lebg n gʋls-a wã. D sã n paam tɩ lɛtr a wãn n yɩll n gʋls-a, d na n lebg n kõ-a-la fãa.""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,mos_Latn,python,"
def reverse_delete(s,c):
    """"""D sã n kõ-y sõor-bãmb a yiib sẽn yaa s la c, y tog n yiisa sõor-bãmb nins sẽn be s wã sẽn zem ne sõor-bãmb nins sẽn be c wã fãa, la y ges sã n mikame tɩ sõor-bãmb nins sẽn be s wã yaa sẽn zems ne sõor-bãmb nins sẽn be c wã. B boondame tɩ sõor-bãmb sẽn yaa sẽn zems ne sõor-bãmb nins sẽn be c wã tɩ b yaa sẽn zems ne sõor-bãmb nins sẽn be c wã. B segd n lebg n kõ-y-la sõor-bãmb nins sẽn be s wã sẽn naag ne sõor-bãmb nins sẽn be n lebg n wa wã la sẽn yaa sɩd bɩ ziri wã.""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,mos_Latn,python,"
def odd_count(lst):
    """"""B sã n kõ-y sõor sẽn yaa sõor bala, tɩ sõor fãa yaa sõor sẽn yaa sõor bala, lebg n wa ne sõor a ye. Yẽnda fãa segd n yɩɩ ""sẽn yaa toor-toorã sõor sẽn be sõor ning sẽn yaa sõor i wã pʋgẽ"".""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,mos_Latn,python,"
def minSubArraySum(nums):
    """"""D sã n kõ-a a nimero rãmb sõor sẽn yaa zuloees n kõ, d na n baoo a nimero rãmb sõor sẽn pa zaalem sẽn yaa zuloees n kõ.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,mos_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""B kõ-y-la bĩis a yiib sẽn yaa wa rʋʋd sẽn yaa wa rʋʋd sẽn yaa wa rʋʋd a ye. Rɩk a yembr makda bĩis a ye, la rʋʋd a yembr makda koom a ye. Bĩis fãa tara bĩis sẽn zems sẽn tõe n dɩk koom n yiis be, la bĩis fãa tara pãng sẽn yaa a yembre. Y tʋʋmd yaa y tũnug ne bĩisã n kʋɩl bĩisã. Rɩk naoor nins y sẽn segd n sik bĩisã. Makre: 1: Rɩk-y: rʋʋd: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] rʋʋd_tõogã: 1 Rɩk-y: 6 Rɩk-y: rʋʋd: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] rʋʋd_tõogã: 2 Rɩk-y: 5 Rɩk-y: Rɩk-y: [[0,0,0], [0,0]] rʋʋd_tõogã: 5 Rɩk-y: 0 * Rɩk-y: 1 * Rɩk-y: 1 * Rɩk-y: 1 * Rɩk-y: 1 * Rɩk-y: 1 * Rɩk-y * Rɩk-y * rʋʋd: 1 * rʋʋd-y * rʋʋd: 1 * rʋʋd-y * rʋʋd: 1 * rʋʋd-y * rʋʋd: 1 * rʋʋd: 1 * rʋʋd * rʋʋd * rʋʋd: 1 * rʋʋd * rʋʋd * rʋʋd * rʋʋd * rʋʋd * rʋʋd: 1 * rʋʋd: 1 * rʋʋd * rʋʋd * rʋʋd * rʋʋd: 1 * rʋʋd * rʋʋd * rʋʋd * rʋʋd * rʋʋd * rʋʋd * rʋʋd * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋg * rʋʋ""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,mos_Latn,python,"
def sort_array(arr):
    """"""B sẽn boond tɩ Kata wã, yaa sẽn na n yãk nimero rãmb sẽn pa wẽns n welge, n tũ ne nimero rãmb sõor sẽn yaa a yembr n be b yiib-n-soab pʋgẽ, n paas n paas n paas n paasã. B sẽn dat n welg nimero rãmb sẽn yaa a yembr n be b yiib-n-soab pʋgẽ wã, b segd n welga ne desimallã. B segd n maana woto: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,mos_Latn,python,"
def select_words(s, n):
    """"""Sãn n yaa tɩ b kõ-y-la sõor sẽn yaa s la n yaa nimero, b kõ-y-la tʋʋmde n na n lebg n wa ne gom-biis nins fãa sẽn be s-rɩkẽ wã sẽn tar tɩ-biis n-yende, sẽn na yɩl tɩ gom-biisa fãa zĩnd s-rɩkẽ wã. S-rɩkẽ wã sã n yaa zaalem, tʋʋmda segd n lebg n wa ne sõor sẽn pa zaalem.""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,mos_Latn,python,"
def get_closest_vowel(word):
    """"""B kõ-y-la gomde. Y tʋʋmda yaa yãag vokaal sẽn pẽ-a n yɩɩd sẽn be vokaal a yiib sʋka sẽn yit gomdã rɩtgo (sẽn yaa sẽn zems ne vokaal-rãmb sẽn yaa to-to wã). Vokaal-rãmb sẽn be sɩngrẽ la sẽn wat n baasdẽ wã pa get ye. Lebg-y vokaal-rãmb sẽn pa be be sã n yaa tɩ zemsa ne sẽn be yĩngrã. Y tõe n tagsame tɩ vokaal-rãmb nins b sẽn kõ wã tara ãngilind lɛtɛɛr bala. Makre: get_closest_vowel{""yogurt"") ==> ""u"" get_closest_vowel{""F"") ==> ""U"" get_closest_vowel{""quick"") ==> """" get_closest_vowel{""ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,mos_Latn,python,"
def match_parens(lst):
    '''B kõ-y-la sõor sẽn tar kõms a yiibu, tɩ b yiibã fãa yaa ne gãn-biis sẽn pak '(' bɩ gãn-biis sẽn pak ') ' bala. Y tʋʋmda yaa tɩ ges sã n tõe n lagem kõms a yiibã ne sor sẽn zems, tɩ kõmsã sẽn wa ne wã na n yɩ sõma. B geta kõms S wa sõma sã la sã n yaa tɩ kõmsã fãa sẽn be S pʋgẽ wã zemsa. Wala makre: kõmsã '((()) ' yaa sõma, tɩ kõmsã '()) ' pa sõma ye. lebg n wa ne 'Nyaa' sã n be sor n tõe n maan kõms sẽn yaa sõma, la lebg n wa ne 'Ayoo' sã n pa woto. Makre: match_parens[('() ', ') ']) == 'Nyaa' == 'Ayoo' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,mos_Latn,python,"
def maximum(arr, k):
    """"""D sã n kõ-a arɩl sẽn tar nimero rãmb la nimero rãmb sẽn yaa sõma, d na n lebg n wa ne sõor sẽn yaa sõma n tar woglem k sẽn tar n yɩɩd k nimero rãmb sẽn be arɩl pʋgẽ. Makre: 1 . Rɩk-y: arr = [-3, -4, 5], k = 3 Rɩk-y: [-4, -3, 5] Makre: 2 . Rɩk-y: arr = [4, -4, 4], k = 2 Rɩk-y: [4, 4] Makre: 3 . Rɩk-y: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Rɩk-y: [2] Bãngre: 1. Arɩl-gãnga woglem na n yɩɩ [1, 1000]. 2. Arɩl-gãnga elem-rãmb na n yɩɩ [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,mos_Latn,python,"
def solution(lst):
    """"""D sã n kõ sõor sẽn pa zaalem, d na n leoka bũmb ning sẽn be a pʋgẽ wã sõor sẽn yaa zuloees n be a pʋgẽ wã.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,mos_Latn,python,"
def add_elements(arr, k):
    """"""D sã n kõ tɩ yaa sõor sẽn pa zaalem sẽn yaa sõor sẽn yaa zãng n yaa arr la sõor sẽn yaa zãng n yaa k, lebg n wa ne sõor ning sẽn yaa ãrmã rãmb sẽn tar sõor sẽn yaa pipi k wã sẽn yaa ãrmã rãmb n yɩɩd a yiibã. Makre: Sõngr: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Sõngr: 24 # sõor sẽn yaa 21 + 3 Sãn-sãams: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,mos_Latn,python,"
def get_odd_collatz(n):
    """"""Sã n kõ-y sõor sẽn yaa sõma n kõ, lebg n wa ne sõor sẽn be ne sõor sẽn pa zems n pʋgl Collatz. Collatz tags-taab yaa bãngrã sẽn kẽed ne sõor sẽn pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n pʋgl n""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,mos_Latn,python,"
def valid_date(date):
    """"""Y segd n gʋlsa tʋʋm-noor sẽn na n wilg tɩ daarã yaa sɩd t'a sã n yaa sɩda, sã n pa woto, a lebgda zĩrĩ. Daarã yaa sɩda, sã n yaa tɩ noy nins sẽn pʋgdã fãa la b tũuda: 1. Daarã pa zaalem ye. 2. Daarã sõor pa yɩɩd rasem 31 kiis a 1, 3, 5, 7, 8, 10, 12 pʋgẽ, la kiis a 4, 6, 9, 11 pʋgẽ, a pa yɩɩd rasem 30 kiis a 1 pʋgẽ, la kiis a 29 pʋgẽ.""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,mos_Latn,python,"
def split_words(txt):
    '''B sã n kõ-y gom-biis sõor sẽn yaa sõor wʋsgo, lebg-y ne gom-biis sõor sẽn welg ne zĩ-zĩigã, sã n pa be zĩ-zĩigã vɛrse pʋgẽ y segd n welga ne vɛrse-rãmb ',' sã n pa be vɛrse-rãmb y segd n lebg n lebsame ne vɛrse-rãmb nins sẽn yaa sõor sẽn yaa bilf n zems ne vɛrse-rãmb sẽn yaa toor-toorã sẽn be lɛtbã pʋgẽ, ord ((('a') = 0, ord ((('b') = 1, ... ord ((('z') = 25 Makr-rãmb sẽn welg_gomd (((""Boa-noogo!"") â -> [""Boa-noogo"", ""dũniyã!""] split_words ((""Boa-noog,dũniyã!"") â -> [""Boa-noog"", ""dũniyã!"" split_words]]'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,mos_Latn,python,"
def is_sorted(lst):
    '''Sã n yaa sõor sõor n kõ, lebg n wa tɩ b sã n yaa sõor sẽn yikd bɩ b sã n pa sõor sẽn yikd. Sã n yaa sõor sẽn yaa sõor a ye n yɩɩd a ye, lebg n wa False. B sã n pa sõor sẽn yaa wẽns la yaa sõor sẽn yaa zãng bala. Makr yaa: is_sorted ([1, 2, 3, 4, 5]) -> True is_sorted ([1, 3, 2, 4, 5, 5]) -> True is_sorted ([1, 2, 3, 4, 5, 6]) -> False is_sorted ([1, 2, 3, 4, 5, 6, 7]) -> True is_sorted ([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted ([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted ([1, 2, 2, 3, 3, 4]) -> True is_sorted ([1, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,mos_Latn,python,"
def intersection(interval1, interval2):
    """"""B kõ-y-la seg-taab a yiib tɩ seg-taab fãa yaa sõor a yiib sẽn yaa toor-toore. Wala makre, seg-taab = (d sɩngre, d baasg) = (1, 2). Seg-taab nins sẽn kõ wã yaa kʋɩtba, sẽn dat n yeel tɩ seg-taab (d sɩngre, d baasg) wã naaga sɩngr la saab fãa. Seg-taab fãa pʋgẽ, b tagsdame tɩ a sɩngr yaa bilf n yɩɩd a baasg bɩ a zem a baasg. Y tʋʋmd yaa n bãng tɩ seg-taab a yiibã sẽn kẽed ne taab woglem yaa sõor a yembr sẽn yaa pipi. Wala makre, seg-taab a yiibã (1, 3), (2, 4) sẽn kẽed ne taab woglem yaa (2, 3) tɩ b woglem yaa 1, sẽn pa pipi sõor ye. Sã n yaa tɩ seg-taabã woglem yaa pipi sõor, lebg n lebg n togsa "" N-YƐƐƐƐ "", sã n pa woto, lebg n togsa "" N-YƐƐƐƐƐ "". [input/Output] samples: seg-taab (((1, 2), (==, 3) "" N-YƐƐƐƐƐ"" seg-ta-1, ((1), seg-taab-taab-))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,mos_Latn,python,"
def prod_signs(arr):
    """"""B kõ-y-la sõor sẽn yaa zɛlg n kõ-y tɩ y lebg n wa ne sõor sẽn yaa zɛlg n paas sõor fãa sẽn yaa zɛlg n paas sõor fãa sẽn yaa zɛlg n lebg n wa ne a fãa sẽn yaa zɛlg n lebg n wa ne a fãa sẽn yaa zɛlg n lebg n wa ne a fãa sẽn yaa zɛlg n lebg n wa ne a fãa sẽn yaa zɛlg n lebg n wa ne a fãa sẽn yaa zɛlg n lebg n wa ne a fãa sẽn yaa zɛlg n lebg n wa ne a fãa sẽn yaa zɛlg n lebg n wa ne a fãa sẽn yaa zɛlg n lebg n wa ne a fãa. Makre: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) ==  None""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,mos_Latn,python,"
def minPath(grid, k):
    """"""Y sã n paam nids sẽn tar n-yẽg la n-bõn-yẽg (N >= 2) la sẽn tar n-yẽg sẽn yaa sõma, a soab fãa tara a yõodo. Y sã n yã n-yẽg fãa sẽn be [1, N * N] pʋgẽ, a soab fãa bee a soab pʋgẽ vugr bala. Y segd n yã n-yẽg sẽn yaa sõma n yɩɩd a soab fãa sẽn yaa sõma n ta a soab fãa. Y tõe n yii sel buud fãa, la y tõe n kẽnga sel nins sẽn pẽ-a wã fãa pʋgẽ, sẽn dat n yeel tɩ y tõe n kẽe sel nins sẽn be a soab pʋgẽ wã. Y sã n yã n-yẽg sẽn yaa sõma n ta a soab fãa, yaa tɩlɛ tɩ y kẽ sel k (sẽn pa segd n yɩ toor-toore). Y Y YET n pa tõe n yi n-yẽgẽgẽ wã ye. A so-toog A (sẽn yaa k) yaa so-toog B (sẽn yaa k) sẽn pa ta a so-toog B (sẽn yaa k) sã n maan n-yẽgẽgẽgẽg-toog sẽn yaa sõma n ta so-toog nins sẽn be sel A la B pʋgẽ wã (d bool-y tɩ l_s-b la l_s_s n_ la l_s n_ n_ n_ n), la l_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n), la l_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n n_ n_ n_ n [1, [4, n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n] [1, n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_ n_""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,mos_Latn,python,"
def tri(n):
    """"""Nebã fãa mii Fibonacci sõorã, b zãmsa a yell wʋsg yʋʋm kob-gĩnd a yiib sẽn loogã pʋgẽ. La bũmb ning nebã sẽn pa mi yaa Tribonacci sõorã. B bilgda Tribonacci sõorã ne sẽn wat n lebg n lebg n wa: tri(1) = 3 tri(n) = 1 + n / 2, sã n yaa tɩ n yaa pa-yende. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), sã n yaa tɩ n yaa pa-yende. Wala makre: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 B kõ-y-la sõor sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn pa-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b sẽn-b-b-b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b- b-""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,mos_Latn,python,"
def digits(n):
    """"""D sã n kõ sõor sẽn yaa sõma n lebg n wa ne a sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa sẽn yaa a soab fãa""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,mos_Latn,python,"
def is_nested(string):
    '''Yãk-y tʋʋm-noor sẽn na n dɩk sõn-vɩɩm sẽn tar karẽn-bi-bɛd bal n kõ. Tʋʋm-noor segd n lebg n wa ne sɩd sã la sã n yaa ne karẽn-bi-bɛd sẽn zems sẽn na n naag taab n kõ karẽn-bi-bɛd a ye. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[[[]') â -> False is_nested'[][]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]][[') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,mos_Latn,python,"

def sum_squares(lst):
    """"""B kõ-y-la sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,mos_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Yãk-y tʋʋm-noor sẽn na n lebg n wa ne sɩd sã n yaa tɩlɛ tɩ b gʋls sõsg n yaool n gʋls-a n yaool n pa gomde, la sã n pa woto bɩ yɩ zĩrĩ.'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,mos_Latn,python,"
def can_arrange(arr):
    """"""D na n maana tʋʋm-noor sẽn na n lebg n wa ne bũmb ning sẽn yaa kãseng n yɩɩd sẽn nan pa ta a soab sẽn nan pa ta-a wã. Sã n pa be bũmb a woto, lebg n wa ne -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,mos_Latn,python,"
def largest_smallest_integers(lst):
    '''Yãk fõore tɩ f sã n pa yãt fɩtl-rãmb bɩ f sã n pa yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ f sã n yãt fɩtl-rãmb bɩ fɩtl-rãmb bɩ fɩtl-rãmb bɩ fɩtl-rãmb.'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,mos_Latn,python,"
def compare_one(a, b):
    """"""B na n maana tʋʋm-noor sẽn na n dɩk nimero rãmb sẽn yaa zuloees bɩ n lebg n wa ne nimero rãmb sẽn yaa zuloees n lebg n wa ne sẽn yaa zuloees n yɩɩd a sẽn kõ-a wã. B sã n lebg n wa ne a ye, yaa tɩlɛ tɩ b lebg n wa ne a ye.""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,mos_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Ges-y n ges y sã n tõe n gʋlsa sõor n kõ wã tɩ yɩ sõor sẽn yaa 4 sẽn yaa sõma n yaa pa-kẽema. Makr yaa: is_equal_to_sum_even (a) (4) == Ziri yaa: is_equal_to_sum_even (b) (6) == Ziri yaa: is_equal_to_sum_even (b) (8) == Yaa sɩda """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,mos_Latn,python,"
def special_factorial(n):
    """"""B sẽn boond tɩ Brazil factoriallã yaa: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! zĩig ning n > 0 Wala makre: >>> special_factorial ((4) 288 Fõnktɛɛrã na n deega nimero sẽn yaa sõma wa sẽn kẽed ne rẽ, la a segd n lebg n wa ne nimero-kãng sẽn yaa sõma wã factoriallã. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,mos_Latn,python,"
def fix_spaces(text):
    """"""Makr a 3n paam n yãe vɛrse sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõd sẽn yaa sõd sẽn yaa sõd sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa.""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,mos_Latn,python,"
def file_name_check(file_name):
    """"""Na n wa ne tʋʋm-noor sẽn na n dɩk n kõ kõ file yʋʋr sẽn yaa 'yes' sã n yaa tɩlɛ, la a kõ 'no' sã n pa tɩlɛ. A getame tɩ file yʋʋr yaa tɩlɛ sã n yaa tɩlɛ tɩ la sã n yaa tɩ bũmb nins sẽn pʋgdã fãa pidsame: - A pa segd n tall sõor sẽn yɩɩd sõor a tãab ('0'-'9') file yʋʋr pʋgẽ ye. - A pa segd n tall dot a yembr bal '.' - Substring ning sẽn nan yɩll tɩ dotã zĩnd pa segd n yɩ zaalem ye, la a segd n sɩng ne lɛtr sẽn yit latin alphapet ('a'-'z' la 'A'Z'). - Substring ning sẽn pʋgl dotã segd n yɩɩ a yembr sẽn be ka: ['txt', 'exe', 'lld'] Makre: file_name_check""{example.txt.} # => 'yes' => 'file_name_check""{example.dll.} # => 'no' (a segd n sɩng ne latin alphapet lɛtr)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,mos_Latn,python,"


def sum_squares(lst):
    """""""" Tʋʋm kãnga na n dɩka sõor sẽn yaa kɩbay sẽn yaa kɩbay fãa. Sẽn kẽed ne kɩbayã fãa, tʋʋm kãnga na n kɩtame tɩ kɩbayã sẽn yaa kɩbayã yɩ a yiib soaba sã n yaa a sẽn yaa 3 naoor wʋsgo, la a na n kɩtame tɩ kɩbayã sẽn yaa kɩbayã yɩ a yiib soaba sã n yaa a sẽn yaa 4 naoor wʋsgo la pa 3 naoor wʋsgo. Tʋʋm kãnga pa na n toeem kɩbayã sẽn be kɩbayã pʋgẽ tɩ kɩbayã sẽn ka 3 bɩ 4 naoor wʋsgã ye. Tʋʋmdã na n lebg n waa ne kɩbayã fãa sõor sẽn yaa kɩbayã. Makre: Sã n yaa tɩ lst = [1,2,3], tʋʋm kãnga segd n yɩɩ 6 Sã n yaa tɩ lst = [] tʋʋm kãnga segd n yɩɩ 0 Sã n yaa tɩ lst = [-1,-5,2,-1,-5] tʋʋm kãnga segd n yɩɩ -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,mos_Latn,python,"
def words_in_sentence(sentence):
    """"""B kõ-y-la sõsg sẽn makd gom-biis a ye, la gom-biis a wãn sẽn welg ne zĩ-zulung la y segd n lebg n wa ne sõsg sẽn naag ne gom-biis nins sẽn be pipi gom-biisẽ wã, tɩ b woglem yaa sõor sẽn yaa pipi sõor bala, la gom-biis nins sẽn be gom-biis a to wã sor-wilgr segd n yɩɩ wa pipi soabã. Makre1: Vʋʋsem: gom-biis = ""Yaa makre"" Vʋʋsem: ""yaa"" Makre2: Vʋʋsem: gom-biis = ""d na n kẽnga koomã pʋgẽ"" Vʋʋsem: ""go for"" Bʋk-n-taar: * 1 <= len(bʋk) <= 100 * gom-biisã tara lɛt-n-yemb bala """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,mos_Latn,python,"
def simplify(x, n):
    """"""Y tʋʋmda yaa f sẽn na n maan tʋʋma sẽn na n yɩll n kɩt tɩ f bãng tɩ f sẽn na n maan to-to n lebg n wa n lebg n wa, la f sã n wa paam tɩ f sẽn na n maan to-to wã lebg n wa, bɩ f lebg n wa ne f sẽn na n maan to-to n lebg n wa. f sã n wa paam tɩ f sẽn na n maan to-to wã lebg n wa ne f sẽn na n maan to-to n lebg n wa, la f sã n pa paam tɩ f sẽn na n maan to-to wã lebg n wa. f sã n wa paam tɩ f sẽn na n maan to-to n lebg n wa n wa n lebg n wa, bɩ f lebg n wa ne f sẽn na n maan to-to n lebg n wa n wa. f sã n wa paam tɩ f sẽn na n maan to-to n lebg n wa n wa n lebg n wa, bɩ f lebg n wa ne f sẽn na n maan to-to n lebg n wa n wa.""""""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,mos_Latn,python,"
def order_by_points(nums):
    """"""Seb-y tʋʋm-noor sẽn na n welg sõor sẽn kõ wã ne sõor sẽn zẽkd tɩ zems ne b sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõ""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,mos_Latn,python,"
def specialFilter(nums):
    """"""Rɩk tʋʋm-noor sẽn na n dɩk sõor sẽn yaa wa rẽnna n lebg n wa ne sõor sẽn yɩɩd 10 la sõor sẽn yaa toor-toore (1, 3, 5, 7, 9). Wala makre: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,mos_Latn,python,"
def get_max_triples(n):
    """"""B kõ-y-la sõor sẽn yaa sõma n. Y segd n maana sõor sẽn yaa sõma n. Sẽn na yɩl n kõ i fãa (1 ‰¤ i ‰¤ n), a[i] = i * i - i + 1. Retournez le nombre de triples (a[i], a[j], a[k]) de a où i < j < k, et a[i] + a[j] + a[k] est un multiple de 3.""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,mos_Latn,python,"
def bf(planet1, planet2):
    '''D sã n ges tɩ ãdsã fãa sẽn be ãdsã 1 ne ãdsã 2 sʋkã, d na n yãame tɩ b fãa sẽn be ãdsã sʋkã yaa a yembr bala. D rɩk makr ne ãdsã a yiib sẽn be ãdsã sʋkã.'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,mos_Latn,python,"
def sorted_list_sum(lst):
    """"""Gʋls-y tʋʋm-noor sẽn deegd sõn-vɩɩs sõor wa a sẽn datã, n yiisd sõn-vɩɩs nins sẽn pa zems woglem, la a lebgd sõor ning sẽn wa ne wã ne sor sẽn yãkde. Sõorã yaa sõn-vɩɩs sõor wakat fãa, la a pa tol n yaa sõor sõor sõor ye, la a tõe n tara sẽn pa yembr ye. Sõor sõorã segd n yɩɩ sõor sẽn zẽkd ne gom-biig fãa woglem, la y segd n lebg n talla sõorã sẽn welg ne no-kãng. Gom-biis a yiib sã n tar woglem sẽn zem taaba, bɩ y welg sõorã ne lɛbgdgo. Tʋʋm-noorã segd n lebg n talla sõn-vɩɩs sõor sẽn yãkde. Y tõe n tagsame tɩ gom-biis fãa na n tara woglem sẽn zem taaba. Wala makre: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ])""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,mos_Latn,python,"
def x_or_y(n, x, y):
    """"""Yaa porgrame sẽn yaa nana, sẽn segd n lebg n kõ x sã n yaa pipi sõor la a segd n lebg n kõ y sã n pa woto. Makre: x_or_y{\displaystyle x_or_y{\displaystyle x_or_y} , 7, 34, 12) == 34 x_or_y{\displaystyle x_or_y} , 15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,mos_Latn,python,"
def double_the_difference(lst):
    '''B sã n kõ sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor sõor'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,mos_Latn,python,"
def compare(game,guess):
    """"""D sã n wa bãng tɩ ned n wa n bãng bũmb ning sẽn wa n zĩnd a zugẽ wã, d tẽegda rẽ yelle. D sẽn mi la d sẽn tagsd bũmb ning wakat kãnga, d segd n gesame n mak-a. D segd n bãnga ned sã n togsa bũmb ning sẽn wa n zĩnd a zugẽ wã sõma. D na n kõ-a-la koees a yiib sẽn tar nenga, tɩ b fãa makd taaba. D na n kõ-a-la koees sẽn tar nenga, tɩ b fãa makd taaba. B sã n togse, a makrã yaa 0, tɩ sã n pa woto, a makrã yaa sẽn pa zems ne sẽn togse la sẽn togse.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,mos_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Y na n paama zãagre (sull) la sõor sẽn paasde. B na n dɩka sõor sẽn paasd n ning zãagre. Sõor sẽn paasd yaa woto: B basame tɩ CAP yaa sõor sẽn zems ne gãd-biis nins sẽn be zãagrã yʋʋr pʋgẽ wã, la b bas tɩ SM yaa sõor sẽn zems ne gãd-biis nins sẽn be gãd-biis nins sẽn be zãagrã yʋʋr pʋgẽ wã, pãng ning b sẽn kõ ne zãagrã yaa CAP - SM. Y segd n yãka zãagrã sẽn yaa kãn-kãe n lebg n wa ne sõor sẽn yaa woto: ClassName.StrongestExtensionName. Sã n yaa tɩ zãagrã sẽn tar pãng a yembr yaa yiib bɩ sẽn yɩɩd a taaba, y segd n yãka soab ning sẽn yɩ pipi n zĩnd sõorã pʋgẽ wã. Wala makre, y sã n kõ ""Slices"" wa zãagre la sõor sẽn paasd: ['SEviviSNGliCes', 'Cheese', 'StufedF'] bɩ y segd n lebg n wa ne 'Slices.SEviSNGliCes.SEviSliCes' bala zãagrã yaa zãagre. (kẽndr yaa: 'Class_AA' - StrongestExtensionName', wala makre: 'AA' => 'Class_Be'""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,mos_Latn,python,"
def cycpattern_check(a , b):
    """"""B kõ-y-la gom-biis a yiibu. Y segd n lebg n wa ne True sã n yaa gom-biis a yiib soabã bɩ a sẽn lebg n wa wã yaa sõor sẽn pa yembr ne pipi gom-bi-kãng cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,mos_Latn,python,"
def even_odd_count(num):
    """"""D sã n kõ sõor sẽn yaa zãng, d na n lebg n wa ne tuple sẽn tar sõor sẽn yaa zuloees la zuloees sõor n zems taaba. Makre: zuloees_sull-yʋʋmd-sull-yʋʋmd-sull-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋmd-yʋʋm-yʋʋm-yʋʋm-yʋʋm-yʋʋm-yʋʋm-yʋʋm-yʋʋm-yʋʋm-yʋʋm-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,mos_Latn,python,"
def int_to_mini_roman(number):
    """"""B sã n kõ-y sõor sẽn yaa sõma, bɩ y bao n bãng a sẽn yaa a soaba ne Rom sõor sẽn yaa wa sõor sẽn yaa wa kõ-n-vɩʋʋg n lebg n wa ne a sẽn yaa a soaba ne gʋls-bi-kɩds sẽn yaa bilfr.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,mos_Latn,python,"
def right_angle_triangle(a, b, c):
    '''A sã n yaa a tãabã n yaa goosneerã, a lebgda sɩd bala. A sã n pa rẽ, a lebgda ziri. Goosneerã yaa goosneer sẽn tar goosneer a ye sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer sẽn yaa goosneer'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,mos_Latn,python,"
def find_max(words):
    """"""Gʋls-y tʋʋm-noor sẽn deegd sõn-vɩɩs sõor sẽn yaa toor-toore. Sõngrã tara gom-biis toor-toore. Sã n yaa sõn-vɩɩs n tar sõn-vɩɩs sõor sẽn yaa toor-toore, lebg n wa ne sẽn yɩ pipi wã sẽn tũ ne gom-biis sõor sẽn yaa toor-toore. find_max (([""naam"", ""of"", ""string""]) == ""string"" find_max (([""naam"", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,mos_Latn,python,"
def eat(number, need, remaining):
    """"""Yãmb yaa bõang kom sẽn tar n zoe n dɩt kʋɩl-koom sõor sẽn zems, la masã, y segd n dɩka kʋɩl-koom n paase, n na n pids daarã rɩɩb sõore. Y segd n lebg n wa ne sõor sẽn yaa [ kʋɩl-koom sõor sẽn dɩt rɩɩbã poore, kʋɩl-koom sõor sẽn ket rɩɩbã poore ] sã n pa tar kʋɩl-koom sẽn kellã, y na n dɩka kʋɩl-koom nins sẽn kellã fãa, la y na n ket n tara kom. Makre: * rɩta ((5, 6, 10) -> [11, 4] * rɩta ((4, 8, 9) -> [12, 1] * rɩta ((1, 10, 10) -> [11, 0] * rɩta ((2, 11, 5) -> [7, 0] Variables: @number: intérieur: kʋɩl-koom sõor y sẽn dɩ. @need: intérieur: kʋɩl-koom sõor y sẽn segd n dɩ. @remaining: intérieur: kʋɩl-koom sõor sẽn ket rɩɩbã pʋgẽ.""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,mos_Latn,python,"
def do_algebra(operator, operand):
    """"""B kõ-d-la sõor a yiib sẽn wilgd tɩ b tõe n maana tʋʋm-noy n kõ-d tɩ b tõog n maan tɩ b bãng tɩ b sẽn maand bũmb ningã yaa bũmb sẽn pa tũ ne nimero. B kõ-d-la sõor a yiib sẽn wilgd tɩ b tõe n maana bũmb ning n kõ-d tɩ d bãng tɩ d sẽn maand bũmb ningã yaa bũmb sẽn pa tũ ne nimero. B kõ-d-la sõor a yiib sẽn wilgd tɩ b tõe n maan bũmb ning n kõ-d tɩ d bãng tɩ d sẽn maand bũmb ningã yaa bũmb sẽn pa tũ ne nimero. B kõ-d-la sõor a yiib sẽn wilgd tɩ d tõe n maan bũmb ning n paam tɩ d bãng tɩ d sẽn maand bũmb ningã yaa bũmb sẽn pa tũ ne nimero. B kõ-d-la sõor a yiib sẽn wilgd tɩ d tõe n maan bũmb ning n kõ-d tɩ d bãng tɩ d sẽn maand bũmb ningã yaa bũmb sẽn pa tũ ne nimero.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,mos_Latn,python,"
def solve(s):
    """"""B kõ-y-la sõn-vãoogo s. sã n yaa lɛtbr bɩ y tek a sẽn be zĩig ning n lebg n wa a sẽn beẽ wã, sã n pa rẽ bɩ y bas-a a sẽn beẽ wã. Sã n pa be lɛtbr ye, bɩ y tek sõn-vãoogo. Fõn-sɛkã segd n lebg n waa ne sõn-vãoog ning sẽn wa ne wã. Makr sol{\displaystyle \{\displaystyle \{\displaystyle \{\displaystyle \{\displaystyle \{\mathrm {A} } } = ""4321""{\displaystyle \{\displaystyle \{\mathrm {A} } ""ab"") = ""AB""{\displaystyle \{\displaystyle \{\mathrm {A} } ""}""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,mos_Latn,python,"
def string_to_md5(text):
    """"""Y sã n kõ kõmsg 'text', lebg n wa ne a md5 sẽn yaa wa kõmsg sẽn yaa wa a hashã. Y sã n kõ 'text' sẽn yaa kʋɩl-koɛɛga, lebg n wa ne a None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,mos_Latn,python,"
def generate_integers(a, b):
    """"""D sã n kõ sõor sẽn yaa sõma a la b, d na n lebg n wa ne sõor sẽn yaa sõma a la b sʋka, n wa ne sor sẽn zẽkdẽ. Wala makre: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
