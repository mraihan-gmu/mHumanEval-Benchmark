[{"task_id":"HumanEval_0","nl":"dzo_Tibt","pl":"r","prompt":"ཚད་གཞི་འདི་ ཚད་གཞི་འདི་ཨིན།ཨང་གྲངས་ཀྱི་ཐོ་ནང་ ཟེར་བ་ལས་ ཟེར་བའི་ཨང་གྲངས་གཉིས་ གཅིག་དང་གཅིག་ཉེ་བའི་ནང་ཡོད་མེད་བལྟ་།# >>> has_close_elements(c(1.0, 2.0, 3.0), 0.5)\n# FALSE\n# >>> has_close_elements(c(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n# TRUE\nhas_close_elements <- function(numbers, threshold) {","canonical_solution":"has_close_elements <- function(numbers, threshold) {\n  for (i in seq_along(numbers)) {\n    for (j in seq_along(numbers)) {\n      if (i != j && abs(numbers[i] - numbers[j]) < threshold) {\n        return(TRUE)\n      }\n    }\n  }\n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- has_close_elements\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0), 0.95), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0), 0.8), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1), 1.0), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1), 0.5), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_1","nl":"dzo_Tibt","pl":"r","prompt":"ནང་བསྐྱོད་ཐིག་ནང་ བར་སྟོང་ཚུ་སྣང་མེད་སྦེ་བཞག་དགོ།སྡེ་ཚན་སོ་སོ་འདི་ ཚད་ལྡན་ (སྒོ་ཕྱེ་ཡོད་པའི་རྒྱབ་ལག་རེ་རེ་འདི་ ལེགས་ཤོམ་སྦེ་བསྡམས་ཏེ་ཡོདཔ་) དང་ གཅིག་གིས་གཅིག་ལུ་ སྦྲེལ་མ་རྐྱབ་པར་ཡོདཔ་ཨིན།ཕྲ་རིང་འདི་ནང་ ཕྲ་རིང་གི་མིང་ཚུ་དབྱེ་བ་ཕྱེ་ཞིནམ་ལས་ ཕྲ་རིང་གི་མིང་ཚུ་ལོག་གཏང་།འ་ནི་ལས་འགན་ནང་ ནང་ཐིག་འདི་ ནང་སྡུད་འབད་མི་ ལྡེ་མིག་གི་སྡེ་ཚན་ལེ་ཤ་ཡོད་པའི་ཐིག་ཁྲམ་ཨིན། ཁྱོད་ཀྱི་དམིགས་གཏད་འདི་ # >>> separate_paren_groups('( ) (( )) (( )( ))')\n# c('()', '(())', '(()())')\nseparate_paren_groups <- function(paren_string) {","canonical_solution":"separate_paren_groups <- function(paren_string) {\n  # Remove spaces from the input string\n  paren_string <- gsub(\" \", \"\", paren_string)\n  \n  # Initialize variables for processing\n  result <- c()\n  current_group <- \"\"\n  balance <- 0\n  \n  # Iterate through each character in the string\n  for (char in strsplit(paren_string, \"\")[[1]]) {\n    current_group <- paste0(current_group, char)\n    if (char == \"(\") {\n      balance <- balance + 1\n    } else if (char == \")\") {\n      balance <- balance - 1\n    }\n    \n    # If balance is zero, we found a complete group\n    if (balance == 0 && nchar(current_group) > 0) {\n      result <- c(result, current_group)\n      current_group <- \"\"\n    }\n  }\n  \n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- separate_paren_groups\n    stopifnot(isTRUE(all.equal(candidate('(()()) ((())) () ((())()())'), c('(()())', '((()))', '()', '((())()())'))))\n    stopifnot(isTRUE(all.equal(candidate('() (()) ((())) (((())))'), c('()', '(())', '((()))', '(((())))'))))\n    stopifnot(isTRUE(all.equal(candidate('(()(())((())))'), c('(()(())((())))'))))\n    stopifnot(isTRUE(all.equal(candidate('( ) (( )) (( )( ))'), c('()', '(())', '(()())'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_2","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ཀྱི་བཅུ་ཆ་ཆ་འདི་སླར་ལོག་འབདཝ་ཨིན།(ལྷག་ལུས་ཆ་ཤས་འདི་ རྟག་བུ་རང་ ༡ ལས་ཆུང་བ་ཨིན།)ཨང་གྲངས་ཧྲིལ་བུམ་ (ཨང་གྲངས་སྦོམ་ཤོས་འདི་ བྱིན་ཡོད་པའི་ཨང་གྲངས་ལས་ཆུང་བ་) དང་ཨང་གྲངས་བཅུ་ཆ་ཚུ་ཨིན།འགྱུར་ལྡོག་ཅན་གྱི་ཆ་ཤས་ཨང་འདི་ཐོབ་པ་ཅིན་ ནང་ལུ་བཅགས་ཚུགས།# >>> truncate_number(3.5)\n# 0.5\ntruncate_number <- function(number) {","canonical_solution":"truncate_number <- function(number) {\n  return(number - floor(number))\n}","tests":"test_humaneval <- function() {\n    candidate <- truncate_number\n    stopifnot(isTRUE(all.equal(candidate(3.5), 0.5)))\n    stopifnot(isTRUE(all.equal(candidate(1.25), 0.25)))\n    stopifnot(isTRUE(all.equal(candidate(123.0), 0.0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_3","nl":"dzo_Tibt","pl":"r","prompt":"དེ་བསྒང་ལས་ལས་ function གིས་ TRUE སླར་ལོག་འབད་ནི་ཨིན། དེ་མེན་པ་ཅིན་ FALSE སླར་ལོག་འབད་ནི་ཨིན།ཁྱོད་ཀྱི་ལཱ་འདི་ ཚོད་བལྟ་འབད་དགོ འདི་ཡང་ ཚོད་བལྟ་འབད་དགོཁྱོད་ཀྱིས་ དངུལ་ཁང་གི་རྩིས་ཁྲ་ནང་ལས་ དངུལ་བཏོན་དང་བཙུགས་ཀྱི་ལཱ་གི་ཐོ་འདི་ ཟེར་འགོ་བཙུགས་ཏེ་ཐོབ་འོང་།# >>> below_zero(c(1, 2, 3))\n# FALSE\n# >>> below_zero(c(1, 2, -4, 5))\n# TRUE\nbelow_zero <- function(operations) {","canonical_solution":"below_zero <- function(operations) {\n  balance <- 0\n  for (op in operations) {\n    balance <- balance + op\n    if (balance < 0) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- below_zero\n    stopifnot(isTRUE(all.equal(candidate(c()), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, -3, 1, 2, -3)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, -4, 5, 6)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 2, -2, 5, -5, 4, -4)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 2, -2, 5, -5, 4, -5)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, -2, 2, -2, 5, -5, 4, -4)), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_4","nl":"dzo_Tibt","pl":"r","prompt":"MAD = average ཨིན། x - x_mean ཨིན།ཚད་གཞི་དང་ལྟེ་བ་ (གནས་སྟངས་འདི་ནང་ལུ་ མནོ་བསམ་བཏང་སྟེ་)ཚད་ལྡན་བར་ནའི་བར་སྟོང་འདི་ ཚད་ལྡན་བར་ནའི་བར་སྟོང་ཨིན།གནས་སྡུད་འདི་ནང་ལུ་ ཚད་གཞི་འདི་ ཚད་གཞི་གི་མཐའ་མར་ཡོདཔ་ཨིན།ནང་ཐིག་ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་ཅིག་གི་དོན་ལུ་ མན་ངག་ཆ་མཉམ་གྱི་བར་ཚད་རྩིས་སྟོནམ་ཨིན།# >>> mean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))\n# 1.0\nmean_absolute_deviation <- function(numbers) {","canonical_solution":"mean_absolute_deviation <- function(numbers) {\n  x_mean <- mean(numbers)\n  mad <- mean(abs(numbers - x_mean))\n  return(mad)\n}\n\n# Example usage\nmean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))","tests":"test_humaneval <- function() {\n    candidate <- mean_absolute_deviation\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0)), 0.5)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0)), 1.0)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0)), 1.2)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_5","nl":"dzo_Tibt","pl":"r","prompt":"ནང་ཐིག་གི་ཐོ་ཡིག་ནང་ཐིག་གཉིས་རེ་གི་བར་ན་ ཨང་གྲངས་ \"delimiter\" ཅིག་བཙུགས་དགོ།# >>> intersperse(c(), 4)\n# c()\n# >>> intersperse(c(1, 2, 3), 4)\n# c(1, 4, 2, 4, 3)\nintersperse <- function(numbers, delimeter) {","canonical_solution":"intersperse <- function(numbers, delimeter) {\n  if (length(numbers) <= 1) {\n    return(numbers)\n  }\n  result <- c()\n  for (i in 1:(length(numbers) - 1)) {\n    result <- c(result, numbers[i], delimeter)\n  }\n  result <- c(result, numbers[length(numbers)])\n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- intersperse\n    stopifnot(isTRUE(all.equal(candidate(c(), 7), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 2), 8), c(5, 8, 6, 8, 3, 8, 2))))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 2, 2), 2), c(2, 2, 2, 2, 2))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_6","nl":"dzo_Tibt","pl":"r","prompt":"དཔེར་ན་ (() (()) འདི་ནང་ལུ་ ཚང་བཟོ་ནིའི་གནས་ཚད་གཉིས་ཡོདཔ་དང་ ((())) འདི་ནང་ལུ་ ༣ ཡོདཔ་ཨིན།སྡེ་ཚན་རེ་རེ་བཞིན་དུ་ལུ་ ནང་ཐིག་གི་ཧེ་མའི་གནས་ཚད་འདི་བཏོན་དགོ།འ་ནི་ལས་འགན་ནང་ ཨང་གྲངས་ཐིག་ཁྲམ་འདི་ སྦྲེལ་ཡོད་པའི་སྒོ་སྒྲིག་གི་དོན་ལུ་ སྡེ་ཚན་ལེ་ཤ་ཅིག་ལུ་ ངོ་ཚབ་འབདཝ་ཨིན།# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n# c(2, 3, 1, 3)\nparse_nested_parens <- function(paren_string) {","canonical_solution":"parse_nested_parens <- function(paren_string) {\n  sapply(strsplit(paren_string, \" \")[[1]], function(group) {\n    max_nesting <- 0\n    current_nesting <- 0\n    for (char in strsplit(group, \"\")[[1]]) {\n      if (char == \"(\") {\n        current_nesting <- current_nesting + 1\n        max_nesting <- max(max_nesting, current_nesting)\n      } else if (char == \")\") {\n        current_nesting <- current_nesting - 1\n      }\n    }\n    return(max_nesting)\n  })\n}","tests":"test_humaneval <- function() {\n    candidate <- parse_nested_parens\n    stopifnot(isTRUE(all.equal(candidate('(()()) ((())) () ((())()())'), c(2, 3, 1, 3))))\n    stopifnot(isTRUE(all.equal(candidate('() (()) ((())) (((())))'), c(1, 2, 3, 4))))\n    stopifnot(isTRUE(all.equal(candidate('(()(())((())))'), c(4))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_7","nl":"dzo_Tibt","pl":"r","prompt":"ནང་བསྐྱོད་ཐིག་གི་ཐོ་ཡིག་ནང་ལུ་ ཚད་འཛིན་ཐིག་གི་ཐོ་ཡིག་རྐྱངམ་ཅིག་ ཌའི་ལོག་ནང་ཐིག་ ཡོད་པའི་དོན་ལུ་ ཌའི་ལོག་ནང་ཐིག་ བཙུགས།# >>> filter_by_substring(c(), 'a')\n# c()\n# >>> filter_by_substring(c('abc', 'bacd', 'cde', 'array'), 'a')\n# c('abc', 'bacd', 'array')\nfilter_by_substring <- function(strings, substring) {","canonical_solution":"filter_by_substring <- function(strings, substring) {\n  return(strings[grepl(substring, strings)])\n}","tests":"test_humaneval <- function() {\n    candidate <- filter_by_substring\n    stopifnot(isTRUE(all.equal(candidate(c(), 'john'), c())))\n    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))))\n    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'), 'xx'), c('xxx', 'aaaxxy', 'xxxAAA', 'xxx'))))\n    stopifnot(isTRUE(all.equal(candidate(c('grunt', 'trumpet', 'prune', 'gruesome'), 'run'), c('grunt', 'prune'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_8","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་སྟོངམ་འདི་ ༠ དང་ ཨང་གྲངས་སྟོངམ་ཐོན་སྐྱེད་འདི་ ༡ སྦེ་ཆ་མཉམ་འབད་དགོཔ་ཨིན།ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་ཅིག་གི་དོན་ལུ་ ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་ནང་ལུ་ ཨང་གྲངས་ཧྲིལ་བུའི་བསྡོམས་དང་ དབྱེ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།# >>> sum_product(c())\n# c(0, 1)\n# >>> sum_product(c(1, 2, 3, 4))\n# c(10, 24)\nsum_product <- function(numbers) {","canonical_solution":"sum_product <- function(numbers) {\n  sum_val <- sum(numbers)\n  prod_val <- ifelse(length(numbers) == 0, 1, prod(numbers))\n  return(c(sum_val, prod_val))\n}","tests":"test_humaneval <- function() {\n    candidate <- sum_product\n    stopifnot(isTRUE(all.equal(candidate(c()), c(0, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1)), c(3, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(100, 0)), c(100, 0))))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 7)), c(15, 105))))\n    stopifnot(isTRUE(all.equal(candidate(c(10)), c(10, 10))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_9","nl":"dzo_Tibt","pl":"r","prompt":"ཤུལ་ཐིག་ནང་ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་ཅིག་ལས་ གནས་སྐབས་ཅིག་ཚུན་ཚོད་ཐོབ་མི་ ཚད་ལྡན་ཆ་ཤས་ཚུ་གི་ཐོ་ཡིག་ཅིག་བཟོ་དགོ།# >>> rolling_max(c(1, 2, 3, 2, 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {","canonical_solution":"rolling_max <- function(numbers) {\n  max_list <- c()\n  current_max <- -Inf\n  for (number in numbers) {\n    current_max <- max(current_max, number)\n    max_list <- c(max_list, current_max)\n  }\n  return(max_list)\n}","tests":"test_humaneval <- function() {\n    candidate <- rolling_max\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 1)), c(4, 4, 4, 4))))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3, 100, 3)), c(3, 3, 3, 100, 100))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_10","nl":"dzo_Tibt","pl":"r","prompt":"- ཚད་འཛིན་གྱི་མཐའ་མ་ལུ་ ཚད་འཛིན་གྱི་སྔོན་འཇུག་འདི་བཙུགས་ ཚད་འཛིན་གྱི་ཤུལ་འཇུག་གི་ཧེ་མ་འོང་འོང་།- ཇི་ཇི་ཨའི་གི་ནང་ཐིག་གི་ཤུལ་མ་གི་ཡིག་འབྲུ་འདི་ ཇི་ཇི་ཨའི་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་གི་ནང་ཐིག་ཚུ་ཨིན།ཨེལ་གོར་ཇི་མིཊི་གི་བསམ་འཆར་འདི་འཇམ་ཏོང་ཏོ་ཨིན།ཚད་འཛིན་འབད་ཡོད་པའི་ཐིག་ཁྲམ་འདི་ལས་འགོ་བཙུགས་ཏེ་ཡོད་པའི་ ཕྲ་རིང་ཤོས་འདི་འཚོལ་དགོ།# >>> make_palindrome('')\n# ''\n# >>> make_palindrome('cat')\n# 'catac'\n# >>> make_palindrome('cata')\n# 'catac'\nmake_palindrome <- function(string) {","canonical_solution":"make_palindrome <- function(string) {\n  is_palindrome <- function(s) {\n    return(s == stringi::stri_reverse(s))\n  }\n  \n  n <- nchar(string)\n  \n  for (i in seq(n, 0, by = -1)) {\n    suffix <- substr(string, i, n)\n    if (is_palindrome(suffix)) {\n      prefix <- substr(string, 1, i - 1)\n      return(paste0(string, stringi::stri_reverse(prefix)))\n    }\n  }\n  \n  return(string) # for the empty string case\n}","tests":"test_humaneval <- function() {\n    candidate <- make_palindrome\n    stopifnot(isTRUE(all.equal(candidate(''), '')))\n    stopifnot(isTRUE(all.equal(candidate('x'), 'x')))\n    stopifnot(isTRUE(all.equal(candidate('xyz'), 'xyzyx')))\n    stopifnot(isTRUE(all.equal(candidate('xyx'), 'xyx')))\n    stopifnot(isTRUE(all.equal(candidate('jerry'), 'jerryrrej')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_11","nl":"dzo_Tibt","pl":"r","prompt":"འ་ནི་ནང་འདྲེན་ཚུ་ནང་ binary XOR འདི་འབད་ཞིནམ་ལས་ གྲུབ་འབྲས་འདི་ string སྦེ་ལོག་གཏང་།ནང་བསྐྱོད་འདི་ ༡ དང་ ༠ འབད་མི་ཐིག་ཁྲམ་གཉིས་ a དང་ b ཚུ་ཨིན།# >>> string_xor('010', '110')\n# '100'\nstring_xor <- function(a, b) {","canonical_solution":"string_xor <- function(a, b) {\n  xor_result <- mapply(function(x, y) { \n    ifelse(x == y, 0, 1) \n  }, strsplit(a, NULL)[[1]], strsplit(b, NULL)[[1]])\n  return(paste(xor_result, collapse = \"\"))\n}","tests":"test_humaneval <- function() {\n    candidate <- string_xor\n    stopifnot(isTRUE(all.equal(candidate('111000', '101010'), '010010')))\n    stopifnot(isTRUE(all.equal(candidate('1', '1'), '0')))\n    stopifnot(isTRUE(all.equal(candidate('0101', '0000'), '0101')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_12","nl":"dzo_Tibt","pl":"r","prompt":"ནང་ཐིག་གི་ཐོ་ཡིག་སྟོངམ་ཡོད་པ་ཅིན་ NULL སླར་ལོག་འབདཝ་ཨིན།string གི་ཐོ་ཡིག་ནང་ལས་ ཚེ་རིང་ཤོས་དེ་སླར་ལོག་འབདཝ་ཨིན། ལེ་ཤ་ཡོད་པ་ཅིན་ དང་པ་རང་སླར་ལོག་འབདཝ་ཨིན།# >>> longest(c())\n# NULL\n# >>> longest(c('a', 'b', 'c'))\n# 'a'\n# >>> longest(c('a', 'bb', 'ccc'))\n# 'ccc'\nlongest <- function(strings) {","canonical_solution":"longest <- function(strings) {\n  if (length(strings) == 0) return(NULL)\n  longest_string <- strings[1]\n  for (s in strings) {\n    if (nchar(s) > nchar(longest_string)) {\n      longest_string <- s\n    }\n  }\n  return(longest_string)\n}","tests":"test_humaneval <- function() {\n    candidate <- longest\n    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))\n    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z')), 'x')))\n    stopifnot(isTRUE(all.equal(candidate(c('x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc')), 'zzzz')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_13","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ཧྲིལ་པོ་ a དང་ b གཉིས་ཀྱི་སྤྱིར་བཏང་ཆ་བགོས་སྦོམ་ཤོས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ngreatest_common_divisor <- function(a, b) {","canonical_solution":"greatest_common_divisor <- function(a, b) {\n  while (b != 0) {\n    temp <- b\n    b <- a %% b\n    a <- temp\n  }\n  return(abs(a))\n}","tests":"test_humaneval <- function() {\n    candidate <- greatest_common_divisor\n    stopifnot(isTRUE(all.equal(candidate(3, 7), 1)))\n    stopifnot(isTRUE(all.equal(candidate(10, 15), 5)))\n    stopifnot(isTRUE(all.equal(candidate(49, 14), 7)))\n    stopifnot(isTRUE(all.equal(candidate(144, 60), 12)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_14","nl":"dzo_Tibt","pl":"r","prompt":"ནང་བསྐྱོད་ཐིག་གི་ཕྲ་རིང་ལས་ ཕྲ་རིང་ཚུན་གྱི་སྔོན་འཇུག་ག་ར་སླར་ལོག་འབདཝ་ཨིན།# >>> all_prefixes('abc')\n# c('a', 'ab', 'abc')\nall_prefixes <- function(string) {","canonical_solution":"all_prefixes <- function(string) {\n  prefixes <- character(nchar(string))\n  for (i in seq_along(prefixes)) {\n    prefixes[i] <- substr(string, 1, i)\n  }\n  return(prefixes)\n}","tests":"test_humaneval <- function() {\n    candidate <- all_prefixes\n    stopifnot(isTRUE(all.equal(candidate(''), c())))\n    stopifnot(isTRUE(all.equal(candidate('asdfgh'), c('a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'))))\n    stopifnot(isTRUE(all.equal(candidate('WWW'), c('W', 'WW', 'WWW'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_15","nl":"dzo_Tibt","pl":"r","prompt":"༠ ལས་ n ཚུན་གྱི་བར་ནའི་བར་སྟོང་ནང་ལུ་ དབྱེ་ཞིབ་འབད་མི་ཨང་གྲངས་ཚུ་ཡོད་པའི་ཐིག་ཁྲམ་ཅིག་སླར་ལོག་འབདཝ་ཨིན།# >>> string_sequence(0)\n# '0'\n# >>> string_sequence(5)\n# '0 1 2 3 4 5'\nstring_sequence <- function(n) {","canonical_solution":"string_sequence <- function(n) {\n  return(paste(0:n, collapse = \" \"))\n}","tests":"test_humaneval <- function() {\n    candidate <- string_sequence\n    stopifnot(isTRUE(all.equal(candidate(0), '0')))\n    stopifnot(isTRUE(all.equal(candidate(3), '0 1 2 3')))\n    stopifnot(isTRUE(all.equal(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_16","nl":"dzo_Tibt","pl":"r","prompt":"string ཅིག་བྱིན་པ་ཅིན་ འདི་ནང་ལུ་ཡིག་འབྲུ་ག་དེ་ཅིག་ཡོདཔ་ཨིན་ན་འཚོལ་དགོ།# >>> count_distinct_characters('xyzXYZ')\n# 3\n# >>> count_distinct_characters('Jerry')\n# 4\ncount_distinct_characters <- function(string) {","canonical_solution":"count_distinct_characters <- function(string) {\n  # Convert the string to lowercase to handle case insensitivity\n  lower_string <- tolower(string)\n  # Split the string into individual characters\n  chars <- strsplit(lower_string, NULL)[[1]]\n  # Find the unique characters and count them\n  distinct_count <- length(unique(chars))\n  return(distinct_count)\n}","tests":"test_humaneval <- function() {\n    candidate <- count_distinct_characters\n    stopifnot(isTRUE(all.equal(candidate(''), 0)))\n    stopifnot(isTRUE(all.equal(candidate('abcde'), 5)))\n    stopifnot(isTRUE(all.equal(candidate('abcdecadeCADE'), 5)))\n    stopifnot(isTRUE(all.equal(candidate('aaaaAAAAaaaa'), 1)))\n    stopifnot(isTRUE(all.equal(candidate('Jerry jERRY JeRRRY'), 5)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_17","nl":"dzo_Tibt","pl":"r","prompt":"'High' འདི་ ཀོ་ཝེཊ་ཊར་གྱི་གློག་སྒྲ་ཨིནམ་ད་ གློག་སྒྲ་འདི་ beat གཅིག་ལས་བརྒལ་མི་ལེན་'o Sa Ri' - ཟླཝ་ཕྱེད་ཀྱི་གློག་སྒྲ་དང་ གློག་སྒྲ་གཉིས་ནང་ཚངམ་ཨིན།'o' - སྒྲ་དབྱངས་ཀྱི་རྣམ་པ་ཅིག་ཨིན་ འདི་ཡང་ གློག་ཤུགས་བཞི་ལུ་གནས་འོང་།འདི་ནང་ལུ་ ལོ་རྒྱུས་ཅིག་ཡང་འདུགམཇུག་མ་བསྡུ་བར་ཁྱོད་ཀྱི་ལཱ་འདི་ string འདི་དབྱེ་ཞིབ་འབད་དེ་ ཨང་གྲངས་ཚུའི་ཐོ་ཡིག་འདི་སླར་ལོག་འབདཝ་ཨིན།འ་ནི་ལས་འགན་འདི་ནང་ལུ་ ཨེསི་སི་ཨི་ཨའི་ཡིག་གཟུགས་ནང་ལུ་ སྒྲ་དབྱངས་ཀྱི་ཨང་ཡིག་འདི་ སྐུད་པ་ཅིག་སྦེ་བཙུགས་ཡོདཔ་ཨིན།# >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n# c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nparse_music <- function(music_string) {","canonical_solution":"parse_music <- function(music_string) {\n  # Split the input string by spaces to get individual notes\n  notes <- strsplit(music_string, \" \")[[1]]\n  \n  # Map each note to its corresponding beat duration\n  beats <- sapply(notes, function(note) {\n    if (note == 'o') {\n      return(4)\n    } else if (note == 'o|') {\n      return(2)\n    } else if (note == '.|') {\n      return(1)\n    } else {\n      stop(\"Invalid note\")\n    }\n  })\n  \n  return(beats)\n}\n\n# Example usage:\n# parse_music('o o| .| o| o| .| .| .| .| o o')\n# c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)","tests":"test_humaneval <- function() {\n    candidate <- parse_music\n    stopifnot(isTRUE(all.equal(candidate(''), c())))\n    stopifnot(isTRUE(all.equal(candidate('o o o o'), c(4, 4, 4, 4))))\n    stopifnot(isTRUE(all.equal(candidate('.| .| .| .|'), c(1, 1, 1, 1))))\n    stopifnot(isTRUE(all.equal(candidate('o| o| .| .| o o o o'), c(2, 2, 1, 1, 4, 4, 4, 4))))\n    stopifnot(isTRUE(all.equal(candidate('o| .| o| .| o o| o o|'), c(2, 1, 2, 1, 4, 2, 4, 2))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_18","nl":"dzo_Tibt","pl":"r","prompt":"གཞི་རྟེན་ཐིག་ཁྲམ་ནང་ལུ་ ཚར་ག་དེ་ཅིག་རང་ ཚར་གྲངས་ཀྱི་ཐིག་ཁྲམ་འདི་ཐོབ་ཚུགས་ག་འཚོལ་ཏེ་བལྟ་། གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\nhow_many_times <- function(string, substring) {","canonical_solution":"how_many_times <- function(string, substring) {\n  if (nchar(substring) == 0) {\n    return(0)\n  }\n  \n  count <- 0\n  for (i in seq(nchar(string) - nchar(substring) + 1)) {\n    if (substr(string, i, i + nchar(substring) - 1) == substring) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}","tests":"test_humaneval <- function() {\n    candidate <- how_many_times\n    stopifnot(isTRUE(all.equal(candidate('', 'x'), 0)))\n    stopifnot(isTRUE(all.equal(candidate('xyxyxyx', 'x'), 4)))\n    stopifnot(isTRUE(all.equal(candidate('cacacacac', 'cac'), 4)))\n    stopifnot(isTRUE(all.equal(candidate('john doe', 'john'), 1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_19","nl":"dzo_Tibt","pl":"r","prompt":"ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ལུ་རིམ་སྒྲིག་འབད་མི་ ཨང་གྲངས་ཚུ་དང་གཅིག་ཁར་ string སླར་ལོག་འབདཝ་ཨིན།གདམ་ཁ་ཚུ་ \" ༠\", \" ༡\", \" ༢ \", \" ༣ \", \" ༤ \", \" ༥ \", \" ༦ \", \" ༧ \", \" ༨ \" དང་ \" ༩ \" ཚུ་ཨིན།ནང་བསྐྱོད་འདི་ ས་སྒོ་ནང་ཐིག་ཡིག་སྦེ་ \"ཟི་རོ་\"ལས་ \"དགུ་\"ཚུན་ཚོད་ཀྱི་ ཨང་གྲངས་ཚུ་ཨིན།# >>> sort_numbers('three one five')\n# 'one three five'\nsort_numbers <- function(numbers) {","canonical_solution":"sort_numbers <- function(numbers) {\n  words_to_numbers <- c(\n    \"zero\" = 0, \"one\" = 1, \"two\" = 2, \"three\" = 3, \"four\" = 4, \n    \"five\" = 5, \"six\" = 6, \"seven\" = 7, \"eight\" = 8, \"nine\" = 9\n  )\n  \n  number_list <- strsplit(numbers, \" \")[[1]]\n  sorted_numbers <- number_list[order(sapply(number_list, function(word) words_to_numbers[word]))]\n  return(paste(sorted_numbers, collapse = \" \"))\n}","tests":"test_humaneval <- function() {\n    candidate <- sort_numbers\n    stopifnot(isTRUE(all.equal(candidate(''), '')))\n    stopifnot(isTRUE(all.equal(candidate('three'), 'three')))\n    stopifnot(isTRUE(all.equal(candidate('three five nine'), 'three five nine')))\n    stopifnot(isTRUE(all.equal(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')))\n    stopifnot(isTRUE(all.equal(candidate('six five four three two one zero'), 'zero one two three four five six')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_20","nl":"dzo_Tibt","pl":"r","prompt":"གཞན་ཚུ་དང་རིམ་པ་བཞིན་དུ་ལོག་གཏང་ (གྱངས་ཁ་ཉུང་སུ་དང་གྱངས་ཁ་ཆེ་ཤོས་) །ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་ཅིག་ལས་ (ཉུང་ཤོས་ཨང་གྲངས་གཉིས་) ཨང་གྲངས་གཉིས་རེ་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་མི་ཚུ་སེལ་འཐུ་འབད་ཞིནམ་ལས་ ལོག་གཏང་།# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n# c(2.0, 2.2)\n# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n# c(2.0, 2.0)\nfind_closest_elements <- function(numbers) {","canonical_solution":"find_closest_elements <- function(numbers) {\n  sorted_numbers <- sort(numbers)\n  min_diff <- Inf\n  closest_pair <- c()\n\n  for (i in 1:(length(sorted_numbers) - 1)) {\n    diff <- sorted_numbers[i + 1] - sorted_numbers[i]\n    if (diff < min_diff) {\n      min_diff <- diff\n      closest_pair <- c(sorted_numbers[i], sorted_numbers[i + 1])\n    }\n  }\n\n  return(closest_pair)\n}","tests":"test_humaneval <- function() {\n    candidate <- find_closest_elements\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)), c(3.9, 4.0))))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0)), c(5.0, 5.9))))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)), c(2.0, 2.2))))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)), c(2.0, 2.0))))\n    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1)), c(2.2, 3.1))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_21","nl":"dzo_Tibt","pl":"r","prompt":"དེ་བཟུམ་སྦེ་ ཨང་ཆུང་ཤོས་འདི་ ༠ དང་སྦོམ་ཤོས་འདི་ ༡ ཨིན།ཨང་གྲངས་ཀྱི་ཐོ་འདི་ (ཉུང་ཤོས་རང་ ཨེ་རེ་གཉིས་ལས་) བྱིན་པ་ཅིན་ ཐིག་ཁྲམ་འགྱུར་བཅོས་འདི་ ཤོག་ལེབ་དེ་ནང་ལུ་ལག་ལེན་འཐབ་དགོ།# >>> rescale_to_unit(c(1.0, 2.0, 3.0, 4.0, 5.0))\n# c(0.0, 0.25, 0.5, 0.75, 1.0)\nrescale_to_unit <- function(numbers) {","canonical_solution":"rescale_to_unit <- function(numbers) {\n  min_val <- min(numbers)\n  max_val <- max(numbers)\n  (numbers - min_val) \/ (max_val - min_val)\n}","tests":"test_humaneval <- function() {\n    candidate <- rescale_to_unit\n    stopifnot(isTRUE(all.equal(candidate(c(2.0, 49.9)), c(0.0, 1.0))))\n    stopifnot(isTRUE(all.equal(candidate(c(100.0, 49.9)), c(1.0, 0.0))))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0)), c(0.0, 0.25, 0.5, 0.75, 1.0))))\n    stopifnot(isTRUE(all.equal(candidate(c(2.0, 1.0, 5.0, 3.0, 4.0)), c(0.25, 0.0, 1.0, 0.5, 0.75))))\n    stopifnot(isTRUE(all.equal(candidate(c(12.0, 11.0, 15.0, 13.0, 14.0)), c(0.25, 0.0, 1.0, 0.5, 0.75))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_22","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་དོན་ལུ་རྐྱངམ་གཅིག་ rthon གནས་གོང་ཚུ་ཡོད་པའི་ཐོ་ཡིག་འདི་སེལ་འཐུ་འབད།# >>> filter_integers(list('a', 3.14, 5))\n# c(5)\n# >>> filter_integers(list(1, 2, 3, 'abc', list(), c()))\n# c(1, 2, 3)\nfilter_integers <- function(values) {","canonical_solution":"filter_integers <- function(values) {\n  return(unlist(Filter(is.integer, values)))\n}","tests":"test_humaneval <- function() {\n    candidate <- filter_integers\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(list(4, list(), c(), 23.2, 9, 'adasd')), c(4, 9))))\n    stopifnot(isTRUE(all.equal(candidate(list(3, 'c', 3, 3, 'a', 'b')), c(3, 3, 3))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_23","nl":"dzo_Tibt","pl":"r","prompt":"string ཟེར་མི་ལུ་ལོག་གཏང་# >>> strlen('')\n# 0\n# >>> strlen('abc')\n# 3\nstrlen <- function(string) {","canonical_solution":"strlen <- function(string) {\n  return(nchar(string))\n}","tests":"test_humaneval <- function() {\n    candidate <- strlen\n    stopifnot(isTRUE(all.equal(candidate(''), 0)))\n    stopifnot(isTRUE(all.equal(candidate('x'), 1)))\n    stopifnot(isTRUE(all.equal(candidate('asdasnakj'), 9)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_24","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ n ཅིག་ལུ་ ཨང་གྲངས་སྦོམ་ཤོས་ཅིག་ n ལས་ཆུང་བ་ཅིག་སྦེ་ དབྱེ་བ་ཕྱེ་མི་ཅིག་འཚོལ་དགོ།# >>> largest_divisor(15)\n# 5\nlargest_divisor <- function(n) {","canonical_solution":"largest_divisor <- function(n) {\n  for (i in (n-1):1) {\n    if (n %% i == 0) {\n      return(i)\n    }\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- largest_divisor\n    stopifnot(isTRUE(all.equal(candidate(3), 1)))\n    stopifnot(isTRUE(all.equal(candidate(7), 1)))\n    stopifnot(isTRUE(all.equal(candidate(10), 5)))\n    stopifnot(isTRUE(all.equal(candidate(100), 50)))\n    stopifnot(isTRUE(all.equal(candidate(49), 7)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_25","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་འདི་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཐོན་རིམ་དང་འདྲན་འདྲ་འབད་དགོཔ་ཨིན།འབྱོར་རྟགས་རེ་རེ་ ཚར་གྲངས་ནང་ཐོ་བཀོད་འབད་དགོཔ་ཨིན།ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ལུ་རིམ་པ་བཟུང་ཐོག་ལས་ ཨང་གྲངས་ཧྲིལ་བུའི་གཞི་གྲངས་ཚུའི་ཐོ་ཡིག་སླར་ལོག་འབདཝ་ཨིན།# >>> factorize(8)\n# c(2, 2, 2)\n# >>> factorize(25)\n# c(5, 5)\n# >>> factorize(70)\n# c(2, 5, 7)\nfactorize <- function(n) {","canonical_solution":"factorize <- function(n) {\n  if (n < 2) {\n    return(c())\n  }\n  factors <- c()\n  divisor <- 2\n  \n  while (n > 1) {\n    while (n %% divisor == 0) {\n      factors <- c(factors, divisor)\n      n <- n \/ divisor\n    }\n    divisor <- divisor + 1\n  }\n  \n  return(factors)\n}","tests":"test_humaneval <- function() {\n    candidate <- factorize\n    stopifnot(isTRUE(all.equal(candidate(2), c(2))))\n    stopifnot(isTRUE(all.equal(candidate(4), c(2, 2))))\n    stopifnot(isTRUE(all.equal(candidate(8), c(2, 2, 2))))\n    stopifnot(isTRUE(all.equal(candidate(57), c(3, 19))))\n    stopifnot(isTRUE(all.equal(candidate(3249), c(3, 3, 19, 19))))\n    stopifnot(isTRUE(all.equal(candidate(185193), c(3, 3, 3, 19, 19, 19))))\n    stopifnot(isTRUE(all.equal(candidate(20577), c(3, 19, 19, 19))))\n    stopifnot(isTRUE(all.equal(candidate(18), c(2, 3, 3))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_26","nl":"dzo_Tibt","pl":"r","prompt":"ནང་ཐིག་ནང་བཟུམ་སྦེ་ དབྱེ་བ་ཚུ་བཞག་ནིའི་རིམ་པ་བཞག་དགོ།ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་ནང་ལས་ ཚར་གཅིག་ལས་ལྷག་པའི་ནང་ཡོད་པའི་ཆ་ཤས་ཚུ་བཏོན་གཏང་།# >>> remove_duplicates(c(1, 2, 3, 2, 4))\n# c(1, 3, 4)\nremove_duplicates <- function(numbers) {","canonical_solution":"remove_duplicates <- function(numbers) {\n  unique_numbers <- numbers[!duplicated(numbers) & !duplicated(numbers, fromLast = TRUE)]\n  return(unique_numbers)\n}","tests":"test_humaneval <- function() {\n    candidate <- remove_duplicates\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 4, 3, 5)), c(1, 4, 5))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_27","nl":"dzo_Tibt","pl":"r","prompt":"ཚད་ལྡན་ཡིག་འབྲུ་ཚུ་ ཆེ་ཆུང་ཡིག་འབྲུ་ལུ་དང་ ཆེ་ཆུང་ཡིག་འབྲུ་ལུ་ བསྒྱུར་གཏང་།# >>> flip_case('Hello')\n# 'hELLO'\nflip_case <- function(string) {","canonical_solution":"flip_case <- function(string) {\n  chars <- strsplit(string, NULL)[[1]]\n  flipped_chars <- sapply(chars, function(c) {\n    if (grepl(\"[a-z]\", c)) {\n      return(toupper(c))\n    } else if (grepl(\"[A-Z]\", c)) {\n      return(tolower(c))\n    } else {\n      return(c)\n    }\n  })\n  return(paste(flipped_chars, collapse = \"\"))\n}","tests":"test_humaneval <- function() {\n    candidate <- flip_case\n    stopifnot(isTRUE(all.equal(candidate(''), '')))\n    stopifnot(isTRUE(all.equal(candidate('Hello!'), 'hELLO!')))\n    stopifnot(isTRUE(all.equal(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_28","nl":"dzo_Tibt","pl":"r","prompt":"string གི་ཐོ་ཡིག་ཅིག་ལུ་ string གཅིག་བཟོ།# >>> concatenate(c())\n# ''\n# >>> concatenate(c('a', 'b', 'c'))\n# 'abc'\nconcatenate <- function(strings) {","canonical_solution":"concatenate <- function(strings) {\n  paste(strings, collapse = \"\")\n}","tests":"test_humaneval <- function() {\n    candidate <- concatenate\n    stopifnot(isTRUE(all.equal(candidate(c()), '')))\n    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z')), 'xyz')))\n    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z', 'w', 'k')), 'xyzwk')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_29","nl":"dzo_Tibt","pl":"r","prompt":"ནང་བསྐྱོད་ཐོ་ཡིག་ནང་ལུ་ string འདི་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་སྔོན་སྒྲིག་ཅིག་གིས་ འགོ་བཙུགས་མི་ཚུ་རྐྱངམ་ཅིག་ ཌའི་ལོག་འབདཝ་ཨིན།# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings, prefix) {","canonical_solution":"filter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings, prefix)])\n}","tests":"test_humaneval <- function() {\n    candidate <- filter_by_prefix\n    stopifnot(isTRUE(all.equal(candidate(c(), 'john'), c())))\n    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_30","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ཀྱི་ཐོ་ནང་ ནུས་ཅན་ཨང་གྲངས་ཚུ་རྐྱངམ་ཅིག་ལོག་གཏང་།# >>> get_positive(c(-1, 2, -4, 5, 6))\n# c(2, 5, 6)\n# >>> get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n# c(5, 3, 2, 3, 9, 123, 1)\nget_positive <- function(l) {","canonical_solution":"get_positive <- function(l) {\n  return(l[l > 0])\n}","tests":"test_humaneval <- function() {\n    candidate <- get_positive\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, 4, 5, 6)), c(4, 5, 6))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)), c(5, 3, 2, 3, 3, 9, 123, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -2)), c())))\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n}\ntest_humaneval()"},{"task_id":"HumanEval_31","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་འདི་ཨང་གྲངས་ངོ་མ་ཨིན་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན།# >>> is_prime(6)\n# FALSE\n# >>> is_prime(101)\n# TRUE\n# >>> is_prime(11)\n# TRUE\n# >>> is_prime(13441)\n# TRUE\n# >>> is_prime(61)\n# TRUE\n# >>> is_prime(4)\n# FALSE\n# >>> is_prime(1)\n# FALSE\nis_prime <- function(n) {","canonical_solution":"is_prime <- function(n) {\n  if (n <= 1) {\n    return(FALSE)\n  }\n  if (n <= 3) {\n    return(TRUE)\n  }\n  if (n %% 2 == 0 || n %% 3 == 0) {\n    return(FALSE)\n  }\n  i <- 5\n  while (i * i <= n) {\n    if (n %% i == 0 || n %% (i + 2) == 0) {\n      return(FALSE)\n    }\n    i <- i + 6\n  }\n  return(TRUE)\n}","tests":"test_humaneval <- function() {\n    candidate <- is_prime\n    stopifnot(isTRUE(all.equal(candidate(6), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(101), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(11), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(13441), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(61), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(4), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(1), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(5), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(11), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(17), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(85), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(77), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(255379), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_33","nl":"dzo_Tibt","pl":"r","prompt":"ཚད་གཞི་ཚུ་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་ ཨང་དང་བསྟུན་ཏེ་l' འདི་ ༣ ལུ་མི་བཏུབ་པའི་བརྡ་སྟོན་ནང་ l དང་མཚུངས་པ་ཨིནམ་དང་ འདི་ཡང་ ༣ ལུ་མི་བཏུབ་པའི་བརྡ་སྟོན་ནང་ གྱི་གནས་གོང་ཚུ་འདྲན་འདྲ་ཨིན།འ་ནི་འགན་འདི་གིས་ཐོ་ཡིག་ l འདི་ལེན་ཏེ་ འདི་བཟུམ་ཅིག་སྦེ་ཐོ་ཡིག་ l' འདི་ལོག་བྱིན་འོང་།# >>> sort_third(c(1, 2, 3))\n# c(1, 2, 3)\n# >>> sort_third(c(5, 6, 3, 4, 8, 9, 2))\n# c(2, 6, 3, 4, 8, 9, 5)\nsort_third <- function(l) {","canonical_solution":"sort_third <- function(l) {\n  # Find the indices that are divisible by three\n  indices_div_by_3 <- seq(3, length(l), by = 3)\n  \n  # Extract the elements at those indices and sort them\n  elements_to_sort <- l[indices_div_by_3]\n  sorted_elements <- sort(elements_to_sort)\n  \n  # Replace the original elements at those indices with sorted ones\n  l[indices_div_by_3] <- sorted_elements\n  \n  return(l)\n}","tests":"test_humaneval <- function() {\n    candidate <- sort_third\n    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 4, 8, 9, 2)), c(2, 6, 3, 4, 8, 9, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 8, 3, 4, 6, 9, 2)), c(2, 8, 3, 4, 6, 9, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 9, 4, 8, 3, 2)), c(2, 6, 9, 4, 8, 3, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 4, 8, 9, 2, 1)), c(2, 6, 3, 4, 8, 9, 5, 1))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_34","nl":"dzo_Tibt","pl":"r","prompt":"ཐོ་ཡིག་ནང་ལུ་ དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཁྱད་ཆོས་ཅན་གྱི་ཆ་ཤས་ཚུ་སླར་ལོག་འབདཝ་ཨིན།# >>> unique(c(5, 3, 5, 2, 3, 3, 9, 0, 123))\n# c(0, 2, 3, 5, 9, 123)\nunique <- function(l) {","canonical_solution":"unique <- function(l) {\n  return(sort(unique(l)))\n}","tests":"test_humaneval <- function() {\n    candidate <- unique\n    stopifnot(isTRUE(all.equal(candidate(c(5, 3, 5, 2, 3, 3, 9, 0, 123)), c(0, 2, 3, 5, 9, 123))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_35","nl":"dzo_Tibt","pl":"r","prompt":"ཚད་འཛིན་ནང་ཐིག་ཁྲམ་ནང་ ཚད་འཛིན་འབད་ཡོད་པའི་ཆ་ཤས་འདི་སླར་ལོག་འབདཝ་ཨིན།# >>> max_element(c(1, 2, 3))\n# 3\n# >>> max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n# 123\nmax_element <- function(l) {","canonical_solution":"max_element <- function(l) {\n  return(max(l))\n}","tests":"test_humaneval <- function() {\n    candidate <- max_element\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), 3)))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)), 124)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_36","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ 7 འདི་ ཨང་གྲངས་ n ལས་ཆུང་བ་ནང་ལུ་མཐོང་མི་ ཚར་གྲངས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། དེ་ཡང་ ༡༡ དང་ ༡༣ ལུ་ཆ་བགོས་འབད་ཚུགས།# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\nfizz_buzz <- function(n) {","canonical_solution":"fizz_buzz <- function(n) {\n  count <- 0\n  for (i in 1:(n-1)) {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n      count <- count + sum(unlist(strsplit(as.character(i), \"\")) == \"7\")\n    }\n  }\n  return(count)\n}","tests":"test_humaneval <- function() {\n    candidate <- fizz_buzz\n    stopifnot(isTRUE(all.equal(candidate(50), 0)))\n    stopifnot(isTRUE(all.equal(candidate(78), 2)))\n    stopifnot(isTRUE(all.equal(candidate(79), 3)))\n    stopifnot(isTRUE(all.equal(candidate(100), 3)))\n    stopifnot(isTRUE(all.equal(candidate(200), 6)))\n    stopifnot(isTRUE(all.equal(candidate(4000), 192)))\n    stopifnot(isTRUE(all.equal(candidate(10000), 639)))\n    stopifnot(isTRUE(all.equal(candidate(100000), 8026)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_37","nl":"dzo_Tibt","pl":"r","prompt":"ཚད་འཛིན་ཚུ་དང་ འདྲ་མཉམ་སྦེ་ཡོད་རུང་ དབྱེ་བ་ཕྱེ་སྟེ་འདུགl' འདི་ ཌིཌི་ཨེན་ཌི་ནང་ལུ་ l དང་འདྲ་མཉམ་ཨིན་པའི་ཁར་ ཌིཌི་ཨེན་ཌི་ཨེན་ཌི་ནང་ལུ་ ཚད་ཚུ་ཆ་མཉམ་ཨིན།འ་ནི་འགན་འདི་གིས་ཐོ་ཡིག་ l འདི་ལེན་ཏེ་ འདི་བཟུམ་ཅིག་སྦེ་ཐོ་ཡིག་ l' འདི་ལོག་བྱིན་འོང་།# >>> sort_even(c(1, 2, 3))\n# c(1, 2, 3)\n# >>> sort_even(c(5, 6, 3, 4))\n# c(3, 6, 5, 4)\nsort_even <- function(l) {","canonical_solution":"sort_even <- function(l) {\n  even_indices <- seq(2, length(l), by=2)\n  l[even_indices] <- sort(l[even_indices])\n  return(l)\n}","tests":"test_humaneval <- function() {\n    candidate <- sort_even\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(1, 2, 3))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)), c(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)), c(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_39","nl":"dzo_Tibt","pl":"r","prompt":"prime_fib གིས་ ཨང་གྲངས་ n-th དེ་ ཕི་བཱོན་ཀིཤི་ཨང་གྲངས་ཨིནམ་དང་ དེ་ཡང་ ཨང་གྲངས་ཨང་གྲངས་ཨང་གྲངས་ཨང་གྲངས་ཨིན།# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nprime_fib <- function(n) {","canonical_solution":"prime_fib <- function(n) {\n  is_prime <- function(num) {\n    if (num < 2) return(FALSE)\n    for (i in 2:sqrt(num)) {\n      if (num %% i == 0) return(FALSE)\n    }\n    return(TRUE)\n  }\n  \n  fibonacci <- function() {\n    a <- 0\n    b <- 1\n    while (TRUE) {\n      yield <- a + b\n      a <<- b\n      b <<- yield\n      yield\n    }\n  }\n  \n  fib_gen <- fibonacci()\n  count <- 0\n  repeat {\n    current_fib <- fib_gen()\n    if (is_prime(current_fib)) {\n      count <- count + 1\n      if (count == n) return(current_fib)\n    }\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- prime_fib\n    stopifnot(isTRUE(all.equal(candidate(1), 2)))\n    stopifnot(isTRUE(all.equal(candidate(2), 3)))\n    stopifnot(isTRUE(all.equal(candidate(3), 5)))\n    stopifnot(isTRUE(all.equal(candidate(4), 13)))\n    stopifnot(isTRUE(all.equal(candidate(5), 89)))\n    stopifnot(isTRUE(all.equal(candidate(6), 233)))\n    stopifnot(isTRUE(all.equal(candidate(7), 1597)))\n    stopifnot(isTRUE(all.equal(candidate(8), 28657)))\n    stopifnot(isTRUE(all.equal(candidate(9), 514229)))\n    stopifnot(isTRUE(all.equal(candidate(10), 433494437)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_40","nl":"dzo_Tibt","pl":"r","prompt":"མཉམ་བསྡོམས་དེ་ ༠ ལུ་བཟོ་ནི་དང་ དེ་མེན་པ་ཅིན་ FALSE ཨིན་པིན་ཨིན།དེ་ནང་ལུ་ཐོ་ཡིག་ནང་ལུ་ ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གསུམ་ཡོད་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།triples_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ ནང་བསྐྱོད་འབད་སྦེ་ལེན་འབདཝ་ཨིན།# >>> triples_sum_to_zero(c(1, 3, 5, 0))\n# FALSE\n# >>> triples_sum_to_zero(c(1, 3, -2, 1))\n# TRUE\n# >>> triples_sum_to_zero(c(1, 2, 3, 7))\n# FALSE\n# >>> triples_sum_to_zero(c(2, 4, -5, 3, 9, 7))\n# TRUE\n# >>> triples_sum_to_zero(c(1))\n# FALSE\ntriples_sum_to_zero <- function(l) {","canonical_solution":"triples_sum_to_zero <- function(l) {\n  n <- length(l)\n  if (n < 3) {\n    return(FALSE)\n  }\n  for (i in 1:(n - 2)) {\n    for (j in (i + 1):(n - 1)) {\n      for (k in (j + 1):n) {\n        if (l[i] + l[j] + l[k] == 0) {\n          return(TRUE)\n        }\n      }\n    }\n  }\n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- triples_sum_to_zero\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, 0)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, -1)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, -2, 1)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 7)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 5, 7)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, -5, 3, 9, 7)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, -100)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(100, 3, 5, -100)), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_41","nl":"dzo_Tibt","pl":"r","prompt":"འ་ནི་ལས་འགན་འདི་གིས་ དེ་བཟུམ་གྱི་འཐབ་རྒོལ་གྱི་གྱངས་ཁ་བཏོན་འབདཝ་ཨིན།ཁོང་གཉིས་མ་རེག་པའི་ཁར་ འགྱོ་དོ་ཡོདཔ་ཨིན་མས།ཨིན་རུང་ སྣུམ་འཁོར་ཚུ་ གནམ་མེད་ས་མེད་སྒྲིང་སྒྲིང་དང་སྒྲིང་སྒྲིང་ཨིནམ་ལས་ ཁོང་གིས་ འཕྲོ་མཐུད་དེ་ར་ འགྲོ་འགྲུལ་འབད་དོ་ཡོདཔ་ཨིན་མས།གཡས་ལས་གཡོན་ཁ་ཐུག་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་གིས་ གཡས་ལས་གཡོན་ཁ་ཐུག་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་ལུ་ ཐུག་པའི་སྐབས་ཨིན།སྣུམ་འཁོར་ཆ་མཉམ་ འདི་ཚུ་མགྱོགས་ཚད་གཅིག་སྦེ་འགྱོ་དོ་ སྣུམ་འཁོར་གཉིས་ཅིག་ ཐུག་དོ་ཡོདཔ་སྦེ་སླབ་ཨིན།ཕྲང་ལམ་འདི་གཡོན་ཁ་ཐུག་འགྱོ་དོ་ཡོདཔ་དང་ སྣུམ་འཁོར་གཉིས་འདི་ ཕྲང་ལམ་འདི་ལས་ ཐག་རིང་ས་ཅིག་ཁར་འགྱོ་དོ་ཡོདཔ་དང་སྣུམ་འཁོར་ n གིས་ གཡས་ལས་གཡས་ཁ་ཐུག་འགྱོ་དོ་ཡོདཔ་དང་ དེ་བསྒང་ སྣུམ་འཁོར་ n གི་སྡེ་ཚན་སོ་སོ་ཅིག་ ཐད་ཀར་དུ་ཕྲང་ཡོད་པའི་ལམ་འདི་ མཐའ་མེད་པའི་རིང་ཚད་ཅིག་སྦེ་མནོ་བསམ་གཏང་དགོ།car_race_collision <- function(n) {","canonical_solution":"car_race_collision <- function(n) {\n  # Each car moving left to right will eventually collide with each car moving right to left\n  return(n)\n}","tests":"test_humaneval <- function() {\n    candidate <- car_race_collision\n    stopifnot(isTRUE(all.equal(candidate(2), 4)))\n    stopifnot(isTRUE(all.equal(candidate(3), 9)))\n    stopifnot(isTRUE(all.equal(candidate(4), 16)))\n    stopifnot(isTRUE(all.equal(candidate(8), 64)))\n    stopifnot(isTRUE(all.equal(candidate(10), 100)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_42","nl":"dzo_Tibt","pl":"r","prompt":"ཕྱིར་ལོག་འབད་ནིའི་ཐོ་ཡིག་ནང་ལུ་ དབྱེ་བ་ཚུ་ ༡ ལུ་ཡར་སེང་འབད་ཡོདཔ་ཨིན།# >>> incr_list(c(1, 2, 3))\n# c(2, 3, 4)\n# >>> incr_list(c(5, 3, 5, 2, 3, 3, 9, 0, 123))\n# c(6, 4, 6, 3, 4, 4, 10, 1, 124)\nincr_list <- function(l) {","canonical_solution":"incr_list <- function(l) {\n  return(l + 1)\n}","tests":"test_humaneval <- function() {\n    candidate <- incr_list\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), c(4, 3, 2))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 2, 5, 2, 3, 3, 9, 0, 123)), c(6, 3, 6, 3, 4, 4, 10, 1, 124))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_43","nl":"dzo_Tibt","pl":"r","prompt":"མཉམ་བསྡོམས་དེ་ ༠ ལུ་བཟོ་ནི་དང་ དེ་མེན་པ་ཅིན་ FALSE ཨིན་པིན་ཨིན།དེ་ནང་ལུ་ཐོ་ཡིག་ནང་ལུ་ ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གཉིས་ཡོད་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།pairs_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ ནང་བསྐྱོད་འབད་སྦེ་ལེན་འབདཝ་ཨིན།# >>> pairs_sum_to_zero(c(1, 3, 5, 0))\n# FALSE\n# >>> pairs_sum_to_zero(c(1, 3, -2, 1))\n# FALSE\n# >>> pairs_sum_to_zero(c(1, 2, 3, 7))\n# FALSE\n# >>> pairs_sum_to_zero(c(2, 4, -5, 3, 5, 7))\n# TRUE\n# >>> pairs_sum_to_zero(c(1))\n# FALSE\npairs_sum_to_zero <- function(l) {","canonical_solution":"pairs_sum_to_zero <- function(l) {\n  n <- length(l)\n  if (n < 2) return(FALSE)\n  \n  for (i in 1:(n-1)) {\n    for (j in (i+1):n) {\n      if (l[i] + l[j] == 0) {\n        return(TRUE)\n      }\n    }\n  }\n  \n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- pairs_sum_to_zero\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, 0)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, -2, 1)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 7)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, -5, 3, 5, 7)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 3, 2, 30)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 3, 2, 31)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 4, 2, 30)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 4, 2, 31)), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_44","nl":"dzo_Tibt","pl":"r","prompt":"གཞི་གྲངས་ཚུ་ ༡༠ ལས་ཉུང་ཡོདཔ་ཨིན།བསྒྱུར་བཅོས་འབད་བའི་ཤུལ་ལས་ string ངོ་ཚབ་ལོག་འབདཝ་ཨིན།ནང་བསྐྱོད་ཨང་གྲངས་ x གི་ཨང་གྲངས་གཞི་རྟེན་གཞི་རྟེན་ལུ་ བསྒྱུར་བཅོས་འབད།# >>> change_base(8, 3)\n# '22'\n# >>> change_base(8, 2)\n# '1000'\n# >>> change_base(7, 2)\n# '111'\nchange_base <- function(x, base) {","canonical_solution":"change_base <- function(x, base) {\n  if (x == 0) return('0')\n  result <- ''\n  while (x > 0) {\n    remainder <- x %% base\n    result <- paste0(remainder, result)\n    x <- x %\/% base\n  }\n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- change_base\n    stopifnot(isTRUE(all.equal(candidate(8, 3), '22')))\n    stopifnot(isTRUE(all.equal(candidate(9, 3), '100')))\n    stopifnot(isTRUE(all.equal(candidate(234, 2), '11101010')))\n    stopifnot(isTRUE(all.equal(candidate(16, 2), '10000')))\n    stopifnot(isTRUE(all.equal(candidate(8, 2), '1000')))\n    stopifnot(isTRUE(all.equal(candidate(7, 2), '111')))\n    stopifnot(isTRUE(all.equal(candidate(2, 3), '2')))\n    stopifnot(isTRUE(all.equal(candidate(3, 4), '3')))\n    stopifnot(isTRUE(all.equal(candidate(4, 5), '4')))\n    stopifnot(isTRUE(all.equal(candidate(5, 6), '5')))\n    stopifnot(isTRUE(all.equal(candidate(6, 7), '6')))\n    stopifnot(isTRUE(all.equal(candidate(7, 8), '7')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_45","nl":"dzo_Tibt","pl":"r","prompt":"གཡོན་རིང་ཚད་དང་མཐོ་ཚད་སླར་ལོག་འབད་སའི་ས་སྒོ་འདི་གསུམ་ཟུར་ཅིག་ལུ་བྱིན་ཡོདཔ་ཨིན།# >>> triangle_area(5, 3)\n# 7.5\ntriangle_area <- function(a, h) {","canonical_solution":"triangle_area <- function(a, h) {\n  return(0.5 * a * h)\n}","tests":"test_humaneval <- function() {\n    candidate <- triangle_area\n    stopifnot(isTRUE(all.equal(candidate(5, 3), 7.5)))\n    stopifnot(isTRUE(all.equal(candidate(2, 2), 2.0)))\n    stopifnot(isTRUE(all.equal(candidate(10, 8), 40.0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_46","nl":"dzo_Tibt","pl":"r","prompt":"ཁྱོད་ཀྱིས་ཨང་རིམ་ fib4 ནང་ལུ་ ཨེ་རེ་ n པ་འདི་ ཤུགས་ལྡན་སྦེ་རྩིས་སྟོན་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་འབྲི་གནང་། ལོག་གཞི་བཙུགས་འདི་ལག་ལེན་འཐབ་མ་བཏུབ།fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ཚུ་ཨིན།fib4(3) -> ༠ ཨིན་པུཊི་fib4(2) -> ༢ ཨིན།fib4(1) -> ༠ ཨིན།fib4(0) -> ༠ ཨིན་པུཊི་Fib4 ཨང་རིམ་འདི་ Fibbonacci གི་རིམ་པ་བཟུམ་ཅིག་ཨིནམ་དང་ འདི་ཡང་ ཤུལ་མའི་ནང་བཀོད་དེ་ཡོདཔ་ཨིན།# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\nfib4 <- function(n) {","canonical_solution":"fib4 <- function(n) {\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n  if (n == 2) return(2)\n  if (n == 3) return(0)\n  \n  fib_seq <- c(0, 0, 2, 0) # Initialize with base cases\n  for (i in 4:n) {\n    fib_seq[i] <- fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4]\n  }\n  return(fib_seq[n])\n}","tests":"test_humaneval <- function() {\n    candidate <- fib4\n    stopifnot(isTRUE(all.equal(candidate(5), 4)))\n    stopifnot(isTRUE(all.equal(candidate(8), 28)))\n    stopifnot(isTRUE(all.equal(candidate(10), 104)))\n    stopifnot(isTRUE(all.equal(candidate(12), 386)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_47","nl":"dzo_Tibt","pl":"r","prompt":"ཤོག་ཁྲམ་ནང་ཡོད་པའི་ཆ་ཤས་ཚུ་གི་བར་མཚམས་སླར་ལོག་འབདཝ་ཨིན།# >>> median(c(3, 1, 2, 4, 5))\n# 3\n# >>> median(c(-10, 4, 6, 1000, 10, 20))\n# 15.0\nmedian <- function(l) {","canonical_solution":"median <- function(l) {\n  return(median(l))\n}","tests":"test_humaneval <- function() {\n    candidate <- median\n    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 2, 4, 5)), 3)))\n    stopifnot(isTRUE(all.equal(candidate(c(-10, 4, 6, 1000, 10, 20)), 8.0)))\n    stopifnot(isTRUE(all.equal(candidate(c(5)), 5)))\n    stopifnot(isTRUE(all.equal(candidate(c(6, 5)), 5.5)))\n    stopifnot(isTRUE(all.equal(candidate(c(8, 1, 3, 9, 9, 2, 7)), 7)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_48","nl":"dzo_Tibt","pl":"r","prompt":"string འདི་ palindrome ཨིན་ན་བརྟག་དཔྱད་འབདཝ་ཨིན།# >>> is_palindrome('')\n# TRUE\n# >>> is_palindrome('aba')\n# TRUE\n# >>> is_palindrome('aaaaa')\n# TRUE\n# >>> is_palindrome('zbcd')\n# FALSE\nis_palindrome <- function(text) {","canonical_solution":"is_palindrome <- function(text) {\n  return(text == paste(rev(unlist(strsplit(text, NULL))), collapse = \"\"))\n}","tests":"test_humaneval <- function() {\n    candidate <- is_palindrome\n    stopifnot(isTRUE(all.equal(candidate(''), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('aba'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('aaaaa'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('zbcd'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('xywyx'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('xywyz'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('xywzx'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_49","nl":"dzo_Tibt","pl":"r","prompt":"༢^n modulo p སླར་ལོག་འབདཝ་ཨིན། (ཨང་གྲངས་ཚུ་ཤེས་དགོ)# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\nmodp <- function(n, p) {","canonical_solution":"modp <- function(n, p) {\n  result <- 1\n  base <- 2\n  \n  while (n > 0) {\n    if (n %% 2 == 1) {\n      result <- (result * base) %% p\n    }\n    base <- (base * base) %% p\n    n <- n %\/% 2\n  }\n  \n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- modp\n    stopifnot(isTRUE(all.equal(candidate(3, 5), 3)))\n    stopifnot(isTRUE(all.equal(candidate(1101, 101), 2)))\n    stopifnot(isTRUE(all.equal(candidate(0, 101), 1)))\n    stopifnot(isTRUE(all.equal(candidate(3, 11), 8)))\n    stopifnot(isTRUE(all.equal(candidate(100, 101), 1)))\n    stopifnot(isTRUE(all.equal(candidate(30, 5), 4)))\n    stopifnot(isTRUE(all.equal(candidate(31, 5), 3)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_51","nl":"dzo_Tibt","pl":"r","prompt":"remove_vowels འདི་ལས་ string དང་ vowels ཚུ་མེད་པར་ string སླར་ལོག་འབདཝ་ཨིན།# >>> remove_vowels('')\n# ''\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n# >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n# 'zbcd'\nremove_vowels <- function(text) {","canonical_solution":"remove_vowels <- function(text) {\n  gsub(\"[aeiouAEIOU]\", \"\", text)\n}","tests":"test_humaneval <- function() {\n    candidate <- remove_vowels\n    stopifnot(isTRUE(all.equal(candidate(''), '')))\n    stopifnot(isTRUE(all.equal(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')))\n    stopifnot(isTRUE(all.equal(candidate('fedcba'), 'fdcb')))\n    stopifnot(isTRUE(all.equal(candidate('eeeee'), '')))\n    stopifnot(isTRUE(all.equal(candidate('acBAA'), 'cB')))\n    stopifnot(isTRUE(all.equal(candidate('EcBOO'), 'cB')))\n    stopifnot(isTRUE(all.equal(candidate('ybcd'), 'ybcd')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_52","nl":"dzo_Tibt","pl":"r","prompt":"ཐོ་ཡིག་ l ནང་གི་ཨང་གྲངས་ཚུ་ ཆ་མཉམ་རང་ གནས་གོང་ t གི་འོག་ལས་ཡོད་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།# >>> below_threshold(c(1, 2, 4, 10), 100)\n# TRUE\n# >>> below_threshold(c(1, 20, 4, 10), 5)\n# FALSE\nbelow_threshold <- function(l, t) {","canonical_solution":"below_threshold <- function(l, t) {\n  return(all(l < t))\n}","tests":"test_humaneval <- function() {\n    candidate <- below_threshold\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 10), 100), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 5), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 21), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 22), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 8, 4, 10), 11), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 8, 4, 10), 10), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_53","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ x དང་ y གཉིས་བསྡོམས་འབད།# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\nadd <- function(x, y) {","canonical_solution":"add <- function(x, y) {\n  return(x + y)\n}","tests":"test_humaneval <- function() {\n    candidate <- add\n    stopifnot(isTRUE(all.equal(candidate(0, 1), 1)))\n    stopifnot(isTRUE(all.equal(candidate(1, 0), 1)))\n    stopifnot(isTRUE(all.equal(candidate(2, 3), 5)))\n    stopifnot(isTRUE(all.equal(candidate(5, 7), 12)))\n    stopifnot(isTRUE(all.equal(candidate(7, 5), 12)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_54","nl":"dzo_Tibt","pl":"r","prompt":"ཚིག་གཉིས་ལུ་ ཡིག་འབྲུ་འདྲ་མཉམ་ཡོད་མེད་བལྟ་།# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n# TRUE\n# >>> same_chars('abcd', 'dddddddabc')\n# TRUE\n# >>> same_chars('dddddddabc', 'abcd')\n# TRUE\n# >>> same_chars('eabcd', 'dddddddabc')\n# FALSE\n# >>> same_chars('abcd', 'dddddddabce')\n# FALSE\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n# FALSE\nsame_chars <- function(s0, s1) {","canonical_solution":"same_chars <- function(s0, s1) {\n  return(identical(sort(unique(unlist(strsplit(s0, \"\")))), sort(unique(unlist(strsplit(s1, \"\"))))))\n}","tests":"test_humaneval <- function() {\n    candidate <- same_chars\n    stopifnot(isTRUE(all.equal(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('abcd', 'dddddddabc'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('dddddddabc', 'abcd'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('eabcd', 'dddddddabc'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('abcd', 'dddddddabcf'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('aabb', 'aaccc'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_55","nl":"dzo_Tibt","pl":"r","prompt":"ཕི་བེ་ནའཅིཤི་ཨང་གྲངས་ nth སླར་ལོག་འབདཝ་ཨིན།# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\nfib <- function(n) {","canonical_solution":"fib <- function(n) {\n  if (n <= 1) {\n    return(n)\n  }\n  a <- 0\n  b <- 1\n  for (i in 2:n) {\n    temp <- b\n    b <- a + b\n    a <- temp\n  }\n  return(b)\n}","tests":"test_humaneval <- function() {\n    candidate <- fib\n    stopifnot(isTRUE(all.equal(candidate(10), 55)))\n    stopifnot(isTRUE(all.equal(candidate(1), 1)))\n    stopifnot(isTRUE(all.equal(candidate(8), 21)))\n    stopifnot(isTRUE(all.equal(candidate(11), 89)))\n    stopifnot(isTRUE(all.equal(candidate(12), 144)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_56","nl":"dzo_Tibt","pl":"r","prompt":"སྒོ་སྒྲིག་རེ་རེ་གི་ནང་ ཟུར་འཇུག་གི་ཟུར་རྟགས་ཅིག་ཡོད་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།brackets འདི་ \"<\" དང་ \">\" ཀྱི་ཐིག་ཁྲམ་ཨིན།# >>> correct_bracketing('<')\n# FALSE\n# >>> correct_bracketing('<>')\n# TRUE\n# >>> correct_bracketing('<<><>>')\n# TRUE\n# >>> correct_bracketing('><<>')\n# FALSE\ncorrect_bracketing <- function(brackets) {","canonical_solution":"correct_bracketing <- function(brackets) {\n  count <- 0\n  for (char in strsplit(brackets, NULL)[[1]]) {\n    if (char == \"<\") {\n      count <- count + 1\n    } else if (char == \">\") {\n      count <- count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n    }\n  }\n  return(count == 0)\n}","tests":"test_humaneval <- function() {\n    candidate <- correct_bracketing\n    stopifnot(isTRUE(all.equal(candidate('<>'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('<<><>>'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('<><><<<><><>><>><<><><<>>>'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('<<<><>>>>'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('><<>'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('<'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('<<<<'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('>'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('<<>'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>><<>'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>>><>'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_57","nl":"dzo_Tibt","pl":"r","prompt":"TRUE སླར་ལོག་འབདཝ་ཨིན། འདི་ཐོ་ཡིག་གི་ཆ་ཤས་ཚུ་ གཅིག་མཚུངས་སྦེ་ཡར་འཕར་འགྱོ་ ཡང་ན་ མར་ཕབ་འགྱོ་དོ་ཡོདཔ་ཨིན།# >>> monotonic(c(1, 2, 4, 20))\n# TRUE\n# >>> monotonic(c(1, 20, 4, 10))\n# FALSE\n# >>> monotonic(c(4, 1, 0, -10))\n# TRUE\nmonotonic <- function(l) {","canonical_solution":"monotonic <- function(l) {\n  is_increasing <- all(diff(l) >= 0)\n  is_decreasing <- all(diff(l) <= 0)\n  return(is_increasing || is_decreasing)\n}","tests":"test_humaneval <- function() {\n    candidate <- monotonic\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 10)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 20)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 0, -10)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 1, 0)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 5, 60)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 60)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(9, 9, 9, 9)), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_58","nl":"dzo_Tibt","pl":"r","prompt":"ཤོག་ལེབ་གཉིས་ཆ་རའི་དོན་ལུ་ དབྱེ་བ་ཕྱེ་མི་ ཁྱད་ཆོས་ཅན་གྱི་ཆ་ཤས་འདི་ལོག་གཏང་།# >>> common(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5, 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {","canonical_solution":"common <- function(l1, l2) {\n  common_elements <- intersect(l1, l2)\n  sorted_unique_common <- sort(unique(common_elements))\n  return(sorted_unique_common)\n}","tests":"test_humaneval <- function() {\n    candidate <- common\n    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 8), c()), c())))\n}\ntest_humaneval()"},{"task_id":"HumanEval_59","nl":"dzo_Tibt","pl":"r","prompt":"n གི་གཞི་གྲངས་སྦོམ་ཤོས་འདི་སླར་ལོག་འབདཝ་ཨིན། n > 1 འདི་གཞི་གྲངས་ངོ་མ་མེན་པ་ཅིན་ཨིན།# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\nlargest_prime_factor <- function(n) {","canonical_solution":"largest_prime_factor <- function(n) {\n  # Initialize the largest prime factor\n  largest_prime <- -1\n  \n  # Remove factors of 2\n  while (n %% 2 == 0) {\n    largest_prime <- 2\n    n <- n \/ 2\n  }\n  \n  # Try odd factors from 3 upwards\n  factor <- 3\n  while (factor * factor <= n) {\n    while (n %% factor == 0) {\n      largest_prime <- factor\n      n <- n \/ factor\n    }\n    factor <- factor + 2\n  }\n  \n  # If n is a prime number greater than 2\n  if (n > 2) {\n    largest_prime <- n\n  }\n  \n  # Return the largest prime factor found\n  return(largest_prime)\n}","tests":"test_humaneval <- function() {\n    candidate <- largest_prime_factor\n    stopifnot(isTRUE(all.equal(candidate(15), 5)))\n    stopifnot(isTRUE(all.equal(candidate(27), 3)))\n    stopifnot(isTRUE(all.equal(candidate(63), 7)))\n    stopifnot(isTRUE(all.equal(candidate(330), 11)))\n    stopifnot(isTRUE(all.equal(candidate(13195), 29)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_60","nl":"dzo_Tibt","pl":"r","prompt":"sum_to_n འདི་ལས་ 1 ལས་ n ཚུན་གྱི་ཨང་གྲངས་ཚུ་བསྡོམས་མི་ལས་འགན་ཨིན།# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\nsum_to_n <- function(n) {","canonical_solution":"sum_to_n <- function(n) {\n  return(sum(1:n))\n}","tests":"test_humaneval <- function() {\n    candidate <- sum_to_n\n    stopifnot(isTRUE(all.equal(candidate(1), 1)))\n    stopifnot(isTRUE(all.equal(candidate(6), 21)))\n    stopifnot(isTRUE(all.equal(candidate(11), 66)))\n    stopifnot(isTRUE(all.equal(candidate(30), 465)))\n    stopifnot(isTRUE(all.equal(candidate(100), 5050)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_61","nl":"dzo_Tibt","pl":"r","prompt":"སྒོ་སྒྲིག་རེ་རེ་གི་ནང་ ཟུར་འཇུག་གི་ཟུར་རྟགས་ཅིག་ཡོད་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།brackets འདི་ \"(\" དང་ \"\") ཟེར་མི་ string ཅིག་ཨིན།# >>> correct_bracketing('(')\n# FALSE\n# >>> correct_bracketing('()')\n# TRUE\n# >>> correct_bracketing('(()())')\n# TRUE\n# >>> correct_bracketing(')(()')\n# FALSE\ncorrect_bracketing <- function(brackets) {","canonical_solution":"correct_bracketing <- function(brackets) {\n  balance <- 0\n  for (char in strsplit(brackets, NULL)[[1]]) {\n    if (char == \"(\") {\n      balance <- balance + 1\n    } else if (char == \")\") {\n      balance <- balance - 1\n    }\n    if (balance < 0) {\n      return(FALSE)\n    }\n  }\n  return(balance == 0)\n}","tests":"test_humaneval <- function() {\n    candidate <- correct_bracketing\n    stopifnot(isTRUE(all.equal(candidate('()'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('(()())'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('()()(()())()'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('()()((()()())())(()()(()))'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('((()())))'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(')(()'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('('), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('(((('), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(')'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('(()'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('()()(()())())(()'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('()()(()())()))()'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_62","nl":"dzo_Tibt","pl":"r","prompt":"ཚད་ལྡན་འདི་གི་ དོ་འགྲན་འདི་ འདྲ་མཉམ་སྦེ་སླར་ལོག་འབདཝ་ཨིན།xs[0] + xs[1] * x + xs[2] * x^2 + .... ཟེར་མི་འདི་ཨིན།xs འདི་ མང་གྲངས་ཀྱི་གནས་གོང་ཚུ་ཨིན།# >>> derivative(c(3, 1, 2, 4, 5))\n# c(1, 4, 12, 20)\n# >>> derivative(c(1, 2, 3))\n# c(2, 6)\nderivative <- function(xs) {","canonical_solution":"derivative <- function(xs) {\n  n <- length(xs)\n  if (n <= 1) return(numeric(0))  # Derivative of a constant is zero\n  \n  deriv <- numeric(n - 1)\n  for (i in 2:n) {\n    deriv[i - 1] <- xs[i] * (i - 1)\n  }\n  return(deriv)\n}","tests":"test_humaneval <- function() {\n    candidate <- derivative\n    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 2, 4, 5)), c(1, 4, 12, 20))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(2, 6))))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), c(2, 2))))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1, 0, 4)), c(2, 2, 0, 16))))\n    stopifnot(isTRUE(all.equal(candidate(c(1)), c())))\n}\ntest_humaneval()"},{"task_id":"HumanEval_63","nl":"dzo_Tibt","pl":"r","prompt":"ཕབ་ལེན་འབད་ཡོད་པའི་ཡིག་ཆ་འདི་ ཨང་གྲངས་རིམ་པ་ fibfib ནང་ལུ་ n-th པ་ཨིན་པའི་ཆ་ཤས་འདི་ དབྱེ་དཔྱད་འབད་ནིའི་དོན་ལུ་འབྲི་གནང་།fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ཨིན་པུཊི་གིས་འབད་ཚུགས།fib fib (((2) == ༡ fib fib ((1)) == 0 fib fib ((0) == 0 FibFib ཨང་རིམ་འདི་ Fibbonacci sequence དང་འདྲ་བའི་རིམ་པ་ཅིག་ཨིནམ་དང་ འདི་ཚུ་ འོག་གི་བཟུམ་སྦེ་གསལ་བཀོད་འབདཝ་ཨིན།# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nfibfib <- function(n) {","canonical_solution":"fibfib <- function(n) {\n  # Base cases\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n  if (n == 2) return(1)\n\n  # Initialize the first three values\n  fibfib_values <- c(0, 0, 1)\n  \n  # Compute fibfib for the rest using iteration\n  for (i in 3:n) {\n    fibfib_values[i + 1] <- fibfib_values[i] + fibfib_values[i - 1] + fibfib_values[i - 2]\n  }\n  # Return the nth value\n  return(fibfib_values[n + 1])\n}","tests":"test_humaneval <- function() {\n    candidate <- fibfib\n    stopifnot(isTRUE(all.equal(candidate(2), 1)))\n    stopifnot(isTRUE(all.equal(candidate(1), 0)))\n    stopifnot(isTRUE(all.equal(candidate(5), 4)))\n    stopifnot(isTRUE(all.equal(candidate(8), 24)))\n    stopifnot(isTRUE(all.equal(candidate(10), 81)))\n    stopifnot(isTRUE(all.equal(candidate(12), 274)))\n    stopifnot(isTRUE(all.equal(candidate(14), 927)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_64","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཨང་བཏགས་ནི་དེ་ ཁ་ཚིག་གི་མཇུག་ལུ་ཡོད་པའི་སྐད་ཡིག་ནང་ལུ་རྐྱངམ་གཅིག་ཨིན།འ་ནི་གནས་སྟངས་ནང་ལུ་ ཚིག་ཡིག་འདི་ \"a\", \"e\", \"i\", \"o\", \"u\" ཨིན། འ་ནི་ནང་ལུ་ \"y\" འདི་ཡང་ \"a\" ཨིན།ཚིག་ཅིག་ནང་བཙུགས་ཏེ་ string ནང་གི་ཕྲ་རིང་གི་གྱངས་ཁ་ལོག་གཏང་འོང་།ནང་ལུ་ཡིག་དཔར་འབད་ཡོད་པའི་ལས་འགན་ vowels_count འདི་ལུ་ string ཟེར་ཡིག་དཔར་འབདཝ་ཨིན།# >>> vowels_count('abcde')\n# 2\n# >>> vowels_count('ACEDY')\n# 3\nvowels_count <- function(s) {","canonical_solution":"vowels_count <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  count <- sum(unlist(strsplit(s, NULL)) %in% c('a', 'e', 'i', 'o', 'u'))\n  if (n > 0 && substr(s, n, n) == 'y') {\n    count <- count + 1\n  }\n  return(count)\n}","tests":"test_humaneval <- function() {\n    candidate <- vowels_count\n    stopifnot(isTRUE(all.equal(candidate('abcde'), 2)))\n    stopifnot(isTRUE(all.equal(candidate('Alone'), 3)))\n    stopifnot(isTRUE(all.equal(candidate('key'), 2)))\n    stopifnot(isTRUE(all.equal(candidate('bye'), 1)))\n    stopifnot(isTRUE(all.equal(candidate('keY'), 2)))\n    stopifnot(isTRUE(all.equal(candidate('bYe'), 1)))\n    stopifnot(isTRUE(all.equal(candidate('ACEDY'), 3)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_65","nl":"dzo_Tibt","pl":"r","prompt":"Shift > ཨང་གྲངས་ཚུ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ལོག་གཏང་།དེ་ལས་ གྲུབ་འབྲས་འདི་ string སྦེ་ལོག་འབདཝ་ཨིན།གྱངས་ཁ་ཧྲིལ་བུའི་ཨང་གྲངས་ x གི་ཨང་གྲངས་ཚུ་ ཕྱོགས་སོར་གཏང་། ཨང་གྲངས་ཚུ་ ཕྱོགས་སོར་གཏང་།# >>> circular_shift(12, 1)\n# '21'\n# >>> circular_shift(12, 2)\n# '12'\ncircular_shift <- function(x, shift) {","canonical_solution":"circular_shift <- function(x, shift) {\n  digits <- as.character(x)\n  n <- nchar(digits)\n  \n  if (shift > n) {\n    return(paste0(rev(unlist(strsplit(digits, \"\"))), collapse = \"\"))\n  }\n  \n  shift <- shift %% n\n  if (shift == 0) {\n    return(digits)\n  }\n  \n  right_part <- substr(digits, n - shift + 1, n)\n  left_part <- substr(digits, 1, n - shift)\n  result <- paste0(right_part, left_part)\n  \n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- circular_shift\n    stopifnot(isTRUE(all.equal(candidate(100, 2), '001')))\n    stopifnot(isTRUE(all.equal(candidate(12, 2), '12')))\n    stopifnot(isTRUE(all.equal(candidate(97, 8), '79')))\n    stopifnot(isTRUE(all.equal(candidate(12, 1), '21')))\n    stopifnot(isTRUE(all.equal(candidate(11, 101), '11')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_66","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཨེསི་སི་ཨི་ཨའི་ཡིག་བྱང་ཚུ་ཨིན།ནང་བསྐྱོད་སྦེ་ string དང་ སྟེང་གི་ཡིག་འབྲུ་ཚུ་བསྡོམས་འབད་མི་འདི་ལོག་གཏང་མི་ function ཅིག་འབྲི་དགོ།ལཱ་འགན་ # >>> digitSum('')\n# 0\n# >>> digitSum('abAB')\n# 131\n# >>> digitSum('abcCd')\n# 67\n# >>> digitSum('helloE')\n# 69\n# >>> digitSum('woArBld')\n# 131\n# >>> digitSum('aAaaaXa')\n# 153\ndigitSum <- function(s) {","canonical_solution":"digitSum <- function(s) {\n  sum(sapply(unlist(strsplit(s, \"\")), function(x) {\n    if (grepl(\"[A-Z]\", x)) {\n      return(as.integer(charToRaw(x)))\n    } else {\n      return(0)\n    }\n  }))\n}","tests":"test_humaneval <- function() {\n    candidate <- digitSum\n    stopifnot(isTRUE(all.equal(candidate(''), 0)))\n    stopifnot(isTRUE(all.equal(candidate('abAB'), 131)))\n    stopifnot(isTRUE(all.equal(candidate('abcCd'), 67)))\n    stopifnot(isTRUE(all.equal(candidate('helloE'), 69)))\n    stopifnot(isTRUE(all.equal(candidate('woArBld'), 131)))\n    stopifnot(isTRUE(all.equal(candidate('aAaaaXa'), 153)))\n    stopifnot(isTRUE(all.equal(candidate(' How are yOu?'), 151)))\n    stopifnot(isTRUE(all.equal(candidate('You arE Very Smart'), 327)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_67","nl":"dzo_Tibt","pl":"r","prompt":"གི་དོན་ལུ་:སྦ་ཟེ་ནང་ མན་ངག་གི་འབྲས་བུ་ཚུ་ སྦ་ཟེ་ནང་ཡོད་མི་འདི་ ལོག་གཏང་།ཨེ་རེ་དང་ ཨེ་པཱལ་ དེ་ལས་ ཨང་གྲངས་ཧྲིལ་བུམ་འདི་ ཨང་གྲངས་ཡོངས་བསྡོམས་ལུ་མཚོན་འབདཝ་ཨིན།ཨེཔ་ལིསི་དང་ ཨེཔ་ལིསི་ དེ་ལས་ མེན་གོའི་འབྲས་བུ་ཚུ་ཨིན། ཨེཔ་ལིསི་དང་ ཨེཔ་ལིསི་ དེ་ལས་ མེན་གོའི་འབྲས་བུ་ཚུ་ཨིན།འདི་ཚུ་ཤིང་འབྲས་ཀྱི་ཙེལ་ཀ་ནང་ལུ་ བཀྲམ་སྤེལ་འབད་ཡོདཔ་ཨིན།འ་ནི་ལཱ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ནི་ཨིན།# >>> fruit_distribution('5 apples and 6 oranges', 19)\n# 8\n# >>> fruit_distribution('0 apples and 1 oranges', 3)\n# 2\n# >>> fruit_distribution('2 apples and 3 oranges', 100)\n# 95\n# >>> fruit_distribution('100 apples and 1 oranges', 120)\n# 19\nfruit_distribution <- function(s, n) {","canonical_solution":"fruit_distribution <- function(s, n) {\n  # Extract numbers using regular expressions\n  matches <- regmatches(s, gregexpr(\"\\\\d+\", s))\n  # Convert extracted number strings to integers\n  fruits_count <- as.integer(unlist(matches))\n  # Total fruits described in the string\n  total_apples_oranges <- sum(fruits_count)\n  # Calculate mangoes\n  mangoes <- n - total_apples_oranges\n  return(mangoes)\n}","tests":"test_humaneval <- function() {\n    candidate <- fruit_distribution\n    stopifnot(isTRUE(all.equal(candidate('5 apples and 6 oranges', 19), 8)))\n    stopifnot(isTRUE(all.equal(candidate('5 apples and 6 oranges', 21), 10)))\n    stopifnot(isTRUE(all.equal(candidate('0 apples and 1 oranges', 3), 2)))\n    stopifnot(isTRUE(all.equal(candidate('1 apples and 0 oranges', 3), 2)))\n    stopifnot(isTRUE(all.equal(candidate('2 apples and 3 oranges', 100), 95)))\n    stopifnot(isTRUE(all.equal(candidate('2 apples and 3 oranges', 5), 0)))\n    stopifnot(isTRUE(all.equal(candidate('1 apples and 100 oranges', 120), 19)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_68","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་གཞི་ ༡:སྦྲགས་རྟགས་མེད་པ་ཅིན་ ཡང་ན་ ཝི་ཅཊར་འདི་སྟོངམ་ཡོད་པ་ཅིན་ སླར་ལོག་འབདཝ་ཨིན།བཏོན་གཏང་མི་ཨང་འདི་ཐོ་ཡིག་ནང་ལུ་ལོག་གཏང་དགོ། [ smalest_value, its index ], ཕྲང་སྒྲིག་ནང་ ཕྲང་སྒྲིག་ཆུང་ཤོས་ཅིག་དང་ཕྲང་སྒྲིག་ཆུང་ཤོས་ཅིག་ཡོད་པ་ཅིན་ ཕྲང་སྒྲིག་ཆུང་ཤོས་ཡོད་པའི་ཕྲང་སྒྲིག་དེ་སླར་ལོག་འབདཝ་ཨིན།ཕྱིར་བཏོན་འབད་ཡོད་པའི་ཨང་འདི་ ཆུང་ཤོས་རང་ ཕྲང་རྟགས་ཡོད་པའི་ཨང་འདི་དགོཔ་ཨིན།ཁྱོད་ཀྱི་ལཱ་འདི་ ཀེར་ཐིག་གཅིག་བཏོན་ཏེ་ ལོག་གཏང་ནི་ཨིན།\"མི་-ཟད་ཅན་ཨང་གྲངས་ཨང་བཏགས་མི་ ཤིང་གི་ཡལ་ག་ངོ་ཚབ་འབད་མི་ ཝེ་ཊར་ཅིག་བྱིན་པ་ཅིན་# >>> pluck(c(4, 2, 3))\n# c(2, 1)\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck(c(1, 2, 3))\n# c(2, 1)\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck(c())\n# c()\n# Example 4:\n# >>> pluck(c(5, 0, 3, 0, 4, 2))\n# c(0, 1)\n# Explanation: 0 is the smallest value, but  there are two zeros,\n#              so we will choose the first zero, which has the smallest index.\n# Constraints:\n#     * 1 <= nodes.length <= 10000\n#     * 0 <= node.value\npluck <- function(arr) {","canonical_solution":"pluck <- function(arr) {\n  # Find indices for even numbers in the array\n  even_indices <- which(arr %% 2 == 0)\n  \n  # If no even numbers are found, return an empty list\n  if (length(even_indices) == 0) {\n    return(c())\n  }\n  \n  # Extract even numbers\n  even_values <- arr[even_indices]\n  \n  # Find the smallest even value\n  min_even_value <- min(even_values)\n  \n  # Find the index of the first occurrence of the smallest even value\n  min_index <- even_indices[which.min(even_values)]\n  \n  # Return the smallest even value and its index (0-based index)\n  return(c(min_even_value, min_index - 1))\n}","tests":"test_humaneval <- function() {\n    candidate <- pluck\n    stopifnot(isTRUE(all.equal(candidate(c(4, 2, 3)), c(2, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(2, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 0, 3, 0, 4, 2)), c(0, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 0, 5, 3)), c(0, 3))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 4, 8, 4, 8)), c(4, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(7, 6, 7, 1)), c(6, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(7, 9, 7, 1)), c())))\n}\ntest_humaneval()"},{"task_id":"HumanEval_69","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དེ་བཟུམ་གྱི་གནས་གོང་མེད་པ་ཅིན་ -༡ སླར་ལོག་འབདཝ་ཨིན།ཨང་གྲངས་ཧྲིལ་བུའི་འཕྲལ་འཕྲལ་འདི་ ཨང་གྲངས་ཚུ་ཐོ་ནང་མཐོང་མི་གྱངས་ཁ་ཨིན།༠ དང་ རྒྱུན་ལྡན་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་གནས་གོང་ལས་ སྦོམ་ ཡང་ན་ འདྲན་འདྲ་ཨིན།ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཆ་མཉམ་ཆ་མཉམ་ཚུ་ སྟོངམ་མེན་པའི་ཐོ་ཡིག་ཐོབ་ཡོདཔ་ཨིན། ལས་སྦོམ་ཤོས་ཨང་གྲངས་ཆ་མཉམ་སླར་ལོག་འབད།# >>> search(c(4, 1, 2, 2, 3, 1))\n# 2\n# >>> search(c(1, 2, 2, 3, 3, 3, 4, 4, 4))\n# 3\n# >>> search(c(5, 5, 4, 4, 4))\n# -1\nsearch <- function(lst) {","canonical_solution":"search <- function(lst) {\n  # Calculate the frequency table\n  freq_table <- table(lst)\n  \n  # Convert to a data frame for easier processing\n  freq_df <- as.data.frame(freq_table)\n  \n  # Rename columns for convenience\n  names(freq_df) <- c(\"value\", \"frequency\")\n  \n  # Filter the values where the frequency is greater than or equal to the value itself\n  valid_values <- freq_df[freq_df$value <= freq_df$frequency, \"value\"]\n  \n  # If no valid values exist, return -1\n  if (length(valid_values) == 0) {\n    return(-1)\n  }\n  \n  # Otherwise, return the greatest valid value\n  return(max(valid_values))\n}","tests":"test_humaneval <- function() {\n    candidate <- search\n    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 5, 5, 1)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 4, 1, 4, 4)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 3)), -1)))\n    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 8, 8, 8, 8, 8, 8)), 8)))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 3, 3, 2, 2)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 8, 2)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 3, 6, 5, 6, 4)), -1)))\n    stopifnot(isTRUE(all.equal(candidate(c(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 9, 10, 1, 3)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)), 5)))\n    stopifnot(isTRUE(all.equal(candidate(c(1)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)), -1)))\n    stopifnot(isTRUE(all.equal(candidate(c(10)), -1)))\n    stopifnot(isTRUE(all.equal(candidate(c(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 10, 10, 9, 2)), -1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_70","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དེ་ལས་ལྷག་ལུས་ཨང་གྲངས་ཆ་མཉམ་ནང་ལས་ མཐོ་ཤོས་དང་ དམའ་ཤོས་ དེ་ལས་གཞན་ཚུ་ཨིན།ཚད་ལྡན་རིམ་སྒྲིག་འདི་ ཁྱོད་ཀྱིས་ཉུང་མཐའི་གནས་གོང་ལས་ འགོ་བཙུགས་པ་ཅིན་ཨིན།ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་འདི་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཚུ་རིམ་པ་སོ་སོར་སྦེ་ལོག་གཏང་འོང་།# >>> strange_sort_list(c(1, 2, 3, 4))\n# c(1, 4, 2, 3)\n# >>> strange_sort_list(c(5, 5, 5, 5))\n# c(5, 5, 5, 5)\n# >>> strange_sort_list(c())\n# c()\nstrange_sort_list <- function(lst) {","canonical_solution":"strange_sort_list <- function(lst) {\n  result <- c()\n  while (length(lst) > 0) {\n    # Find and append the minimum of the list\n    min_val <- min(lst)\n    result <- c(result, min_val)\n    lst <- lst[lst != min_val]\n    \n    # Check if list is not empty before finding maximum\n    if (length(lst) > 0) {\n      # Find and append the maximum of the list\n      max_val <- max(lst)\n      result <- c(result, max_val)\n      lst <- lst[lst != max_val]\n    }\n  }\n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- strange_sort_list\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 4, 2, 3))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 7, 8, 9)), c(5, 9, 6, 8, 7))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), c(1, 5, 2, 4, 3))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 7, 8, 9, 1)), c(1, 9, 5, 8, 6, 7))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 5, 5)), c(5, 5, 5, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7, 8)), c(1, 8, 2, 7, 3, 6, 4, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 2, 2, 2, 5, 5, -5, -5)), c(-5, 5, -5, 5, 0, 2, 2, 2))))\n    stopifnot(isTRUE(all.equal(candidate(c(111111)), c(111111))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_71","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དེ་ལས་ ཕྱོགས་གསུམ་པ་ལས་ལྷག་སྟེ་མེད།གཡོན་གསུམ་གྱིས་ ཟུར་གཉིས་ཆ་རའི་བསྡོམས་སྦོམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་ཅིག་སྦེ་ ཆ་གནས་འབདཝ་ཨིན།དེ་མེན་པ་ཅིན་ལོག་གཏང་ -1 ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཆ་མཉམ་སྦེ་ཡོད་འོང་།ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་འདི་བྱིན་ཏེ་ གི་ཁྱབ་ཚད་སླར་ལོག་འབདཝ་ཨིན།# >>> triangle_area(3, 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\ntriangle_area <- function(a, b, c) {","canonical_solution":"triangle_area <- function(a, b, c) {\n  if (a + b > c && a + c > b && b + c > a) {\n    # Using Heron's formula\n    s <- (a + b + c) \/ 2\n    area <- sqrt(s * (s - a) * (s - b) * (s - c))\n    return(round(area, 2))\n  } else {\n    return(-1)\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- triangle_area\n    stopifnot(isTRUE(all.equal(candidate(3, 4, 5), 6.0)))\n    stopifnot(isTRUE(all.equal(candidate(1, 2, 10), -1)))\n    stopifnot(isTRUE(all.equal(candidate(4, 8, 5), 8.18)))\n    stopifnot(isTRUE(all.equal(candidate(2, 2, 2), 1.73)))\n    stopifnot(isTRUE(all.equal(candidate(1, 2, 3), -1)))\n    stopifnot(isTRUE(all.equal(candidate(10, 5, 7), 16.25)))\n    stopifnot(isTRUE(all.equal(candidate(2, 6, 3), -1)))\n    stopifnot(isTRUE(all.equal(candidate(1, 1, 1), 0.43)))\n    stopifnot(isTRUE(all.equal(candidate(2, 2, 10), -1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_72","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དངོས་པོ་ q འདི་ཚད་ལྡན་ཨིན་པ་ཅིན་ འཕུར་འགྲུལ་འབད་འོང་། (འདི་ palindromic list ཨིན་) དེ་ལས་ འདི་གི་ཆ་ཤས་ཚུ་གི་བསྡོམས་དེ་ w ཟེར་བའི་ནུས་ཤུགས་སྦོམ་ཤོས་ལས་ ཆུང་བ་ ཡང་ན་ འདྲན་འདྲ་ཨིན།དངོས་པོ་ q འདི་འཕུར་འགྱོ་བ་ཅིན་ TRUE སླར་ལོག་འབད་ཡོད་པའི་ལས་འགན་ཅིག་འབྲི་ནི་དང་ དེ་མེན་པ་ཅིན་ FALSE སླར་ལོག་འབདཝ་ཨིན།# >>> will_it_fly(c(1, 2), 5)\n# FALSE\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly(c(3, 2, 3), 1)\n# FALSE\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly(c(3, 2, 3), 9)\n# TRUE\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly(c(3), 5)\n# TRUE\n# # 3 is less than the maximum possible weight, and it's balanced.\nwill_it_fly <- function(q, w) {","canonical_solution":"will_it_fly <- function(q, w) {\n  is_palindromic <- function(lst) {\n    return(all(lst == rev(lst)))\n  }\n  \n  is_balanced <- is_palindromic(q)\n  sum_elements <- sum(q)\n  \n  return(is_balanced && (sum_elements <= w))\n}","tests":"test_humaneval <- function() {\n    candidate <- will_it_fly\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3), 9), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2), 5), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(3), 5), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3), 1), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3), 6), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(5), 5), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_73","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: ཕྱིར་འཐོན་དང་རྒྱབ་ལོག་གཉིས་ཆ་ར་ལུ་ དབྱེ་བ་འདྲ་མཉམ་སྦེ་ལྷག་ཚུགས། བསྒྱུར་བཅོས་གཅིག་གི་ནང་ ཁྱོད་ཀྱིས་ ཨེཆ་ཨེམ་ཅིག་ ཨེཆ་ཨེམ་གཞན་ཅིག་ལུ་ བསྒྱུར་བཅོས་འབད་ཚུགས།ཝེ་ཊར་འདི་ པཱ་ལིན་ཌོརམིསི་སྦེ་བཟོ་ནིའི་དོན་ལུ་ བསྒྱུར་བཅོས་འབད་དགོཔ་ཨིན། པཱ་ལིན་ཌོརམིསི་ ཝེ་ཊར་འདི་ ཝེ་ཊར་འདི་ ཝི་ཅཊར་ arr གི་ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་བྱིན་པ་ཅིན་ ནང་ལུ་ཡོད་པའི་ཡན་ལག་ཉུང་ཤོས་ཅིག་འཚོལ་དགོ།# >>> smallest_change(c(1, 2, 3, 5, 4, 7, 9, 6))\n# 4\n# >>> smallest_change(c(1, 2, 3, 4, 3, 2, 2))\n# 1\n# >>> smallest_change(c(1, 2, 3, 2, 1))\n# 0\nsmallest_change <- function(arr) {","canonical_solution":"smallest_change <- function(arr) {\n  n <- length(arr)\n  changes <- 0\n  \n  for (i in 1:(n %\/% 2)) {\n    if (arr[i] != arr[n - i + 1]) {\n      changes <- changes + 1\n    }\n  }\n  \n  return(changes)\n}","tests":"test_humaneval <- function() {\n    candidate <- smallest_change\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 5, 4, 7, 9, 6)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 3, 2, 2)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 2)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 4, 2)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 1)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 1, 3)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(1)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_74","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ གལ་སྲིད་ཐོ་ཡིག་གཉིས་ཆ་ར་ལུ་ ཡིག་འབྲུ་གྱངས་ཁ་འདྲ་མཉམ་ཡོད་པ་ཅིན་ དང་པ་ཐོ་ཡིག་འདི་ལོག་གཏང་།ཐོ་བཀོད་ནང་ལུ་ཡིག་འབྲུ་ཚུ་ གྱངས་ཁ་གཞན་གྱི་ཐོ་ཡིག་ལས་ཉུང་བ་ཡོདཔ་ཨིན།ཨང་གྲངས་ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ ངོས་ལེན་འབད་ཞིནམ་ལས་ ཡོད་པའི་ཐིག་ཁྲམ་དེ་ལོག་གཏང་ནིའི་འགན་ཡིག་ཅིག་འབྲི་དགོ།# >>> total_match(c(), c())\n# c()\n# >>> total_match(c('hi', 'admin'), c('hI', 'Hi'))\n# c('hI', 'Hi')\n# >>> total_match(c('hi', 'admin'), c('hi', 'hi', 'admin', 'project'))\n# c('hi', 'admin')\n# >>> total_match(c('hi', 'admin'), c('hI', 'hi', 'hi'))\n# c('hI', 'hi', 'hi')\n# >>> total_match(c('4'), c('1', '2', '3', '4', '5'))\n# c('4')\ntotal_match <- function(lst1, lst2) {","canonical_solution":"total_match <- function(lst1, lst2) {\n  chars_count <- function(lst) {\n    sum(nchar(lst))\n  }\n  \n  count1 <- chars_count(lst1)\n  count2 <- chars_count(lst2)\n  \n  if (count1 < count2) {\n    return(lst1)\n  } else if (count1 > count2) {\n    return(lst2)\n  } else {\n    return(lst1)\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- total_match\n    stopifnot(isTRUE(all.equal(candidate(c(), c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hi', 'hi')), c('hi', 'hi'))))\n    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hi', 'hi', 'admin', 'project')), c('hi', 'admin'))))\n    stopifnot(isTRUE(all.equal(candidate(c('4'), c('1', '2', '3', '4', '5')), c('4'))))\n    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'Hi')), c('hI', 'Hi'))))\n    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'hi', 'hi')), c('hI', 'hi', 'hi'))))\n    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'hi', 'hii')), c('hi', 'admin'))))\n    stopifnot(isTRUE(all.equal(candidate(c(), c('this')), c())))\n    stopifnot(isTRUE(all.equal(candidate(c('this'), c()), c())))\n}\ntest_humaneval()"},{"task_id":"HumanEval_75","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:(a) འདི་ ༡༠༠ ལས་ཆུང་བ་ཨིནམ་ཤེས་པ་ཅིན་དེ་མེན་པ་ཅིན་ རྫུན་ཁ་བཟེད་འོང་།ཨང་གྲངས་འདི་ ཨང་གྲངས་གཙོ་བོ་༣ གྱི་གྱངས་ཁ་ཨིནམ་སྦེ་ཨིན་པ་ཅིན་ གནས་གོང་དེ་བདེན་པ་སྦེ་སླར་ལོག་འབད་ནིའི་འགན་ཡིག་ཅིག་འབྲི་དགོ།# >>> is_multiply_prime(30)\n# TRUE\n# 30 = 2 * 3 * 5\nis_multiply_prime <- function(a) {","canonical_solution":"is_multiply_prime <- function(a) {\n  is_prime <- function(n) {\n    if (n <= 1) return(FALSE)\n    if (n <= 3) return(TRUE)\n    if (n %% 2 == 0 || n %% 3 == 0) return(FALSE)\n    i <- 5\n    while (i * i <= n) {\n      if (n %% i == 0 || n %% (i + 2) == 0) return(FALSE)\n      i <- i + 6\n    }\n    return(TRUE)\n  }\n\n  if (a >= 100) return(FALSE)\n  \n  primes <- c()\n  for (i in 2:a) {\n    if (is_prime(i)) {\n      primes <- c(primes, i)\n    }\n  }\n  \n  for (i in 1:length(primes)) {\n    for (j in i:length(primes)) {\n      for (k in j:length(primes)) {\n        if (primes[i] * primes[j] * primes[k] == a) {\n          return(TRUE)\n        }\n      }\n    }\n  }\n  \n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- is_multiply_prime\n    stopifnot(isTRUE(all.equal(candidate(5), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(30), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(8), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(10), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(125), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(105), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(126), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(729), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(891), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(1001), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_76","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: x འདི་ n གི་ཤུགས་རྐྱང་ཅིག་ཨིན་པ་ཅིན་ n**int=x power of n དང་ གཞན་གནས་སྟངས་ཚུ་ནང་ false ཨིན།ཁྱོད་ཀྱི་ལཱ་འདི་ གྲངས་གནས་ x འདི་ ཕྲང་ཨིན་པ་ཅིན་ གནས་གོང་ true སླར་ལོག་འབད་ནིའི་འགན་ཁུར་འདི་འབྲི་ནི་ཨིན།# >>> is_simple_power(1, 4)\n# TRUE\n# >>> is_simple_power(2, 2)\n# TRUE\n# >>> is_simple_power(8, 2)\n# TRUE\n# >>> is_simple_power(3, 2)\n# FALSE\n# >>> is_simple_power(3, 1)\n# FALSE\n# >>> is_simple_power(5, 3)\n# FALSE\nis_simple_power <- function(x, n) {","canonical_solution":"is_simple_power <- function(x, n) {\n  if (x == 1) return(TRUE)\n  power <- 1\n  while (power < x) {\n    power <- power * n\n    if (power == x) return(TRUE)\n  }\n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- is_simple_power\n    stopifnot(isTRUE(all.equal(candidate(16, 2), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(143214, 16), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(4, 2), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(9, 3), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(16, 4), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(24, 2), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(128, 4), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(12, 6), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(1, 1), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(1, 12), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_77","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དྲན་གསོ། ཁྱོད་ཀྱིས་འཛུལ་ཞུགས་འདི་ དུས་རྒྱུན་དུ་ ཆ་གནས་འབད་འོང་ཟེར་ཆ་བཞག་བཏུབ།འ་ནི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་གི་ ཀུ་བིཀ་ཨིན་པ་ཅིན་།ཨང་གྲངས་ཧྲིལ་ཨང་ aལེན་ཏེ་ TRUE སླར་ལོག་འབད་མི་ལས་འགན་ཅིག་འབྲི་དགོ།# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n# >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n# >>> iscube(180)\n# FALSE\niscube <- function(a) {","canonical_solution":"iscube <- function(a) {\n  if (a == 0) return(TRUE)\n  root <- round(abs(a)^(1\/3))\n  return(root^3 == abs(a))\n}","tests":"test_humaneval <- function() {\n    candidate <- iscube\n    stopifnot(isTRUE(all.equal(candidate(1), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(2), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(-1), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(64), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(180), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(1000), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(0), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(1729), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_78","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དེ་ལས་ བརྡ་རྟགས་ A,B,C,D,E,F འདི་ཨ་རྟག་རང་ སྦོམ་ཡིག་སྦེ་རང་ཨིན།དྲན་གསོ། ཁྱོད་ཀྱིས་ཨེབ་གཏང་འདི་ རྒྱུན་ཆད་མེད་པར་ཕྲང་ ཡང་ན་ སྟོང་པ་སྦེ་བཟོཝ་ཨིན།བི་ (=བཅུ་ཆ་༡༡) དང་ཌི་ (=བཅུ་ཆ་༡༣) ཨིན།ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཚུ་ ངེས་གཏན་བཟོ་དགོཔ་ཨིན། ༢,༣,༥,༧, ཨང་གྲངས་ཚུའི་ཨང་གྲངས་འདི་ ༢,༣,༥,༧,༡༡,༡༣,༡༧ ...ཨིན།ཨང་གྲངས་ཧེ་ཀ་ཌེ་སི་མཱལ་འདི་ ༠,༡,༢,༣,༤,༥,༦,༧,༨,༩, A,B,C,D,E,Fཨིན།༡ ལས་སྦོམ་ཤོས་འདི་ རང་བཞིན་གྱི་ཨང་གྲངས་ཆུང་བ་གཉིས་ལས་ཐོན་མི་ཨིན།)ཨང་གྲངས་ཚུ་ (ཨང་གྲངས་ངོ་མ་ ཡང་ན་ ཨང་གྲངས་ངོ་མ་འདི་ རང་བཞིན་གྱི་ཨང་གྲངས་ཨིན།ཨང་གྲངས་ཧེ་ཀ་ཌེ་སི་མཱལ་འདི་ string སྦེ་བཙུགས་ཏེ་ ཨང་གྲངས་ཧེ་ཀ་ཌེ་སི་མཱལ་ ཚུ་རྩིས་སྟོནམ་ཨིན།ཁྱོད་ཀྱིས་ ཐོབ་མི་ལས་འགན་ཅིག་འབྲི་དགོཔ་ཨིན།# >>> hex_key('AB')\n# 1\n# >>> hex_key('1077E')\n# 2\n# >>> hex_key('ABED1A33')\n# 4\n# >>> hex_key('123456789ABCDEF0')\n# 6\n# >>> hex_key('2020')\n# 2\nhex_key <- function(num) {","canonical_solution":"hex_key <- function(num) {\n  # Define the set of prime hexadecimal digits\n  prime_hex_digits <- c('2', '3', '5', '7', 'B', 'D')\n  \n  # Initialize a counter\n  count <- 0\n  \n  # Convert the input string to a list of characters\n  chars <- strsplit(num, NULL)[[1]]\n  \n  # Loop over each character in the list\n  for (char in chars) {\n    # Check if the character is in the list of prime hexadecimal digits\n    if (char %in% prime_hex_digits) {\n      # Increment the count\n      count <- count + 1\n    }\n  }\n  \n  # Return the count\n  return(count)\n}","tests":"test_humaneval <- function() {\n    candidate <- hex_key\n    stopifnot(isTRUE(all.equal(candidate('AB'), 1)))\n    stopifnot(isTRUE(all.equal(candidate('1077E'), 2)))\n    stopifnot(isTRUE(all.equal(candidate('ABED1A33'), 4)))\n    stopifnot(isTRUE(all.equal(candidate('2020'), 2)))\n    stopifnot(isTRUE(all.equal(candidate('123456789ABCDEF0'), 6)))\n    stopifnot(isTRUE(all.equal(candidate('112233445566778899AABBCCDDEEFF00'), 12)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_79","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ལྷག་ལུས་ཡིག་འབྲུ་ཚུ་ ཤོག་ལེབ་བཟོ་རྣམ་ལུ་ཕན་ཐོགས་ཡོདཔ་ཨིན།string གི་འགོ་དང་མཇུག་ནང་ལུ་ ཌི་བི་ཡིག་འབྲུ་གཉིས་རེ་ལྷག་ལུས་འོང་།ཨང་གྲངས་ནང་ཐིག་ཡིག་རེ་རེ་ '0' ཡང་ན་ '1' ཨིན།binary format. functionའདི་གིས་ string སླར་ལོག་འབད་དགོཔ་ཨིན་ དེ་ལས་ཡིག་འབྲུ་རེ་རེ་གིས་ binary འདི་ངོ་ཚབ་འབདཝ་ཨིན།ཁྱོད་ཀྱིས་ ཨང་གྲངས་འདི་ ཨང་གྲངས་བཅུ་གྲངས་སྦེ་ཐོབ་སྟེ་ ཁྱོད་ཀྱི་ལཱ་འདི་ ཨང་གྲངས་འདི་ ལུ་བསྒྱུར་གཏང་ནི་ཨིན།# >>> decimal_to_binary(15)\n# 'db1111db'\n# >>> decimal_to_binary(32)\n# 'db100000db'\ndecimal_to_binary <- function(decimal) {","canonical_solution":"decimal_to_binary <- function(decimal) {\n  binary_string <- as.character(intToBits(decimal))\n  binary_clean <- paste0(rev(binary_string), collapse = \"\")\n  binary_trimmed <- sub(\"^0+\", \"\", binary_clean)\n  return(paste0(\"db\", binary_trimmed, \"db\"))\n}","tests":"test_humaneval <- function() {\n    candidate <- decimal_to_binary\n    stopifnot(isTRUE(all.equal(candidate(0), 'db0db')))\n    stopifnot(isTRUE(all.equal(candidate(32), 'db100000db')))\n    stopifnot(isTRUE(all.equal(candidate(103), 'db1100111db')))\n    stopifnot(isTRUE(all.equal(candidate(15), 'db1111db')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_80","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: string འདི་ hapr ཨིནམ་ད་ འདི་ནང་ལུ་ ཡུན་ཚད་ཉུང་ཤོས་རང་ 3 དང་ ཚར་གསུམ་རིམ་པ་བཞིན་དུ་ཡིག་འབྲུ་སོ་སོ་ཡོད་པ་ཅིན་ཨིན།ཁྱོད་ཀྱི་ལཱ་འདི་ stringའདི་ trueཨིན་ན་མེན་ན་བརྟག་དཔྱད་འབད་དགོཁྱོད་ལུ་ string s ཅིག་བྱིན་ནུག# >>> is_happy('a')\n# FALSE\n# >>> is_happy('aa')\n# FALSE\n# >>> is_happy('abcd')\n# TRUE\n# >>> is_happy('aabb')\n# FALSE\n# >>> is_happy('adb')\n# TRUE\n# >>> is_happy('xyy')\n# FALSE\nis_happy <- function(s) {","canonical_solution":"is_happy <- function(s) {\n  n <- nchar(s)\n  if (n < 3) {\n    return(FALSE)\n  }\n  for (i in 1:(n - 2)) {\n    if (length(unique(substring(s, i, i + 2))) != 3) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}","tests":"test_humaneval <- function() {\n    candidate <- is_happy\n    stopifnot(isTRUE(all.equal(candidate('a'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('aa'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('abcd'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('aabb'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('adb'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('xyy'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('iopaxpoi'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('iopaxioi'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_81","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:༠.༠ ཨེ> ༠.༠ D- > 0.7 D ཨིན།>༡.༠ D+ ཨིན།> ༡.༣ C- > ༡.༧ C ཨིན།>༢.༠ C+ ཨིན།> 2.3 B- ཟེར་མི་འདི་>2.7 B ཟེར་མི་འདི་ཨིན།>༣.༠ བི་+ ཨིན།> ༣.༣ A- ཟེར་> ༣.༧ A ཨིན།༤.༠ ཨེ+ ཨིན།GPA འབྲི་ཤོག་གི་ཨང་རྟགས་ འོག་གི་ཐིག་ཁྲམ་འདི་ལག་ལེན་འཐབ་ཐོག་ལས་ ཡིག་འབྲུ་གི་དབྱེ་བ་ཚུ་ ཕྱིར་ཐོན་འབད་ཚུགས་པའི་འགན་ཁ།ཁོ་གིས་ སློབ་ཕྲུག་ཚུ་གི་ GPA ཚུ་གི་ཐོ་ཅིག་ ཁྱོད་ལུ་བྱིན་ཏེ་ཡོདཔ་ལས་ ཁྱོད་ཀྱིས་ འབྲི་དགོཔ་ཨིན།དཀའ་ངལ་འདི་ མོ་གིས་ཚད་གཞི་བཟོ་ནིའི་དོན་ལུ་ ལག་ལེན་འཐབ་མི་ ཨང་བཏགས་འདི་འབྱང་སོང་ཡོདཔ་ཨིན།སློབ་དཔོན་གྱིས་ སློབ་ཕྲུག་ཚུ་ལུ་ ཨང་བཏགས་ནི་གི་ ཨལ་གོར་ཇི་མཱིས་འདི་ མོ་རང་བཟོ་ནུགསློབ་དུས་ཀྱི་ བདུན་ཕྲག་མཇུག་འདི་ཨིནམ་ལས་ སློབ་དཔོན་གྱིས་ སྐུགས་ཚད་ཚུ་བྱིན་དགོཔ་ཨིན།# >>> grade_equation(c(4.0, 3, 1.7, 2, 3.5))\n# c('A+', 'B', 'C-', 'C', 'A-')\nnumerical_letter_grade <- function(grades) {","canonical_solution":"numerical_letter_grade <- function(grades) {\n  letter_grades <- sapply(grades, function(gpa) {\n    if (gpa == 4.0) {\n      \"A+\"\n    } else if (gpa > 3.7) {\n      \"A\"\n    } else if (gpa > 3.3) {\n      \"A-\"\n    } else if (gpa > 3.0) {\n      \"B+\"\n    } else if (gpa > 2.7) {\n      \"B\"\n    } else if (gpa > 2.3) {\n      \"B-\"\n    } else if (gpa > 2.0) {\n      \"C+\"\n    } else if (gpa > 1.7) {\n      \"C\"\n    } else if (gpa > 1.3) {\n      \"C-\"\n    } else if (gpa > 1.0) {\n      \"D+\"\n    } else if (gpa > 0.7) {\n      \"D\"\n    } else if (gpa > 0.0) {\n      \"D-\"\n    } else {\n      \"E\"\n    }\n  })\n  return(letter_grades)\n}","tests":"test_humaneval <- function() {\n    candidate <- numerical_letter_grade\n    stopifnot(isTRUE(all.equal(candidate(c(4.0, 3, 1.7, 2, 3.5)), c('A+', 'B', 'C-', 'C', 'A-'))))\n    stopifnot(isTRUE(all.equal(candidate(c(1.2)), c('D+'))))\n    stopifnot(isTRUE(all.equal(candidate(c(0.5)), c('D-'))))\n    stopifnot(isTRUE(all.equal(candidate(c(0.0)), c('E'))))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 0.3, 1.5, 2.8, 3.3)), c('D', 'D-', 'C-', 'B', 'B+'))))\n    stopifnot(isTRUE(all.equal(candidate(c(0.0, 0.7)), c('E', 'D-'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_82","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ length དེ་ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ ཡང་ན་ FALSE མེན་པ་ཅིན་string ཅིག་ཡོད་པ་ཅིན་ TRUE སླར་ལོག་འབད་ཡོད་པའི་ལས་འགན་ཅིག་འབྲི་དགོ།# >>> prime_length('Hello')\n# TRUE\n# >>> prime_length('abcdcba')\n# TRUE\n# >>> prime_length('kittens')\n# TRUE\n# >>> prime_length('orange')\n# FALSE\nprime_length <- function(string) {","canonical_solution":"prime_length <- function(string) {\n  is_prime <- function(n) {\n    if (n <= 1) return(FALSE)\n    if (n <= 3) return(TRUE)\n    if (n %% 2 == 0 || n %% 3 == 0) return(FALSE)\n    \n    i <- 5\n    while (i * i <= n) {\n      if (n %% i == 0 || n %% (i + 2) == 0) return(FALSE)\n      i <- i + 6\n    }\n    \n    return(TRUE)\n  }\n  \n  string_length <- nchar(string)\n  return(is_prime(string_length))\n}","tests":"test_humaneval <- function() {\n    candidate <- prime_length\n    stopifnot(isTRUE(all.equal(candidate('Hello'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('abcdcba'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('kittens'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('orange'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('wow'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('world'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('MadaM'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('Wow'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('HI'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('go'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('gogo'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('aaaaaaaaaaaaaaa'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('Madam'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('M'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('0'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_83","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ཚུའི་ནང་ ཚུད་དེ་ཡོད་པའི་ཨང་གྲངས་ཚུའི་ནང་ ཚུད་དེ་ཡོད་པའི་ཨང་གྲངས་ཚུའི་ནང་ ཚུད་དེ་ཡོད་པའི་ཨང་གྲངས་ཚུའི་ནང་ ཚུད་དེ་ཡོདཔ་ཨིན།ཨང་གྲངས་ཧྲིལ་བུམ་ ནུས་པ་ཅན་ཅིག་བྱིནམ་ད་ ཨང་གྲངས་ཨང་གྲངས་ཨང་གྲངས་ཀྱི་རྩིས་ལོག་འབདཝ་ཨིན།starts_one_ends <- function(n) {","canonical_solution":"starts_one_ends <- function(n) {\n  if (n == 1) {\n    return(1)\n  } else {\n    return(9 * (10^(n-2)) * 2)\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- starts_one_ends\n    stopifnot(isTRUE(all.equal(candidate(1), 1)))\n    stopifnot(isTRUE(all.equal(candidate(2), 18)))\n    stopifnot(isTRUE(all.equal(candidate(3), 180)))\n    stopifnot(isTRUE(all.equal(candidate(4), 1800)))\n    stopifnot(isTRUE(all.equal(candidate(5), 18000)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_84","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་ ཤོག་གྲངས་ཆ་མཉམ་ N ཅིག་ཐོབ་པ་ཅིན་ ཨང་གྲངས་ཚུའི་རྩིས་ཁྲ་ནང་ ཨང་གྲངས་ཚུའི་རྩིས་ཁྲ་ལོག་གཏང་།# >>> solve(1000)\n# '1'\n# >>> solve(150)\n# '110'\n# >>> solve(147)\n# '1100'\n# Variables:\n#     @N integer\n#          Constraints: 0 ≤ N ≤ 10000.\n# Output:\n#      a string of binary number\nsolve <- function(N) {","canonical_solution":"solve <- function(N) {\n  # Sum the digits of the number\n  digit_sum <- sum(as.numeric(unlist(strsplit(as.character(N), \"\"))))\n  # Convert the sum to binary and return as a string\n  return(as.character(as.binary(digit_sum)))\n}\n\n# Helper function to convert number to binary\nas.binary <- function(number) {\n  if (number == 0) return(\"0\")\n  binary <- \"\"\n  while (number > 0) {\n    binary <- paste0(number %% 2, binary)\n    number <- number %\/% 2\n  }\n  return(binary)\n}","tests":"test_humaneval <- function() {\n    candidate <- solve\n    stopifnot(isTRUE(all.equal(candidate(1000), '1')))\n    stopifnot(isTRUE(all.equal(candidate(150), '110')))\n    stopifnot(isTRUE(all.equal(candidate(147), '1100')))\n    stopifnot(isTRUE(all.equal(candidate(333), '1001')))\n    stopifnot(isTRUE(all.equal(candidate(963), '10010')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_85","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཨང་གྲངས་ཧྲིལ་བུ་མེད་མི་ཐོ་འདི་བྱིན་ཏེ་ དང་པ་རང་ ཨང་གྲངས་ཧྲིལ་བུ་མེད་མི་ཆ་མཉམ་འདི་བསྡོམས་དགོ།# >>> add(c(4, 2, 6, 7))\n# 2\nadd <- function(lst) {","canonical_solution":"add <- function(lst) {\n  # Select elements at odd indices (which are even positions)\n  elements_at_odd_indices <- lst[seq(2, length(lst), by=2)]\n  # Keep only the even elements\n  even_elements <- elements_at_odd_indices[elements_at_odd_indices %% 2 == 0]\n  # Sum the even elements\n  sum(even_elements)\n}","tests":"test_humaneval <- function() {\n    candidate <- add\n    stopifnot(isTRUE(all.equal(candidate(c(4, 88)), 88)))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 5, 6, 7, 2, 122)), 122)))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 0, 6, 7)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 4, 6, 8)), 12)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_86","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: དྲན་གསོ། ཁྱོད་ཀྱིས་ཚིག་དང་ བར་སྟོང་གི་རིམ་པ་ཚུ་ ཚིག་ཡིག་ནང་ལུ་བཞག་དགོ།ཚད་འཛིན་གྱི་གོང་ཚད་ལུ་གཞི་བཞག་སྟེ་ ཡར་སེང་འབད་ཐངས་ཨིན།ཚིག་གསརཔ་ཅིག་གིས་ཚབ་བཙུགས་ཡོདཔ་ད་ དེ་ནང་ལུ་ ཡིག་འབྲུ་ཆ་མཉམ་རིམ་སྒྲིག་འབད་ཡོདཔ་ཨིན།string གི་རིམ་སྒྲིག་འབད་ཡོད་པའི་རྣམ་པ་འདི་ string འདི་ནང་ལུ་ ཚིག་ཆ་མཉམ་ (བར་སྟོང་གིས་སོ་སོར་) ཨིན།ཨང་གྲངས་ཐིག་ཁྲམ་ཅིག་ལེན་ཏེ་ འདི་གི་རིམ་སྒྲིག་ཅིག་སླར་ལོག་འབད་མི་ལས་འགན་ཅིག་འབྲི་དགོ།# >>> anti_shuffle('Hi')\n# 'Hi'\n# >>> anti_shuffle('hello')\n# 'ehllo'\n# >>> anti_shuffle('Hello World!!!')\n# 'Hello !!!Wdlor'\nanti_shuffle <- function(s) {","canonical_solution":"anti_shuffle <- function(s) {\n  words <- strsplit(s, \"(\\\\s+)\", perl = TRUE)[[1]]\n  sorted_words <- sapply(words, function(word) {\n    if (word == \"\") return(word)\n    chars <- unlist(strsplit(word, split = \"\"))\n    return(paste0(sort(chars), collapse = \"\"))\n  })\n  return(paste0(sorted_words, collapse = \"\"))\n}","tests":"test_humaneval <- function() {\n    candidate <- anti_shuffle\n    stopifnot(isTRUE(all.equal(candidate('Hi'), 'Hi')))\n    stopifnot(isTRUE(all.equal(candidate('hello'), 'ehllo')))\n    stopifnot(isTRUE(all.equal(candidate('number'), 'bemnru')))\n    stopifnot(isTRUE(all.equal(candidate('abcd'), 'abcd')))\n    stopifnot(isTRUE(all.equal(candidate('Hello World!!!'), 'Hello !!!Wdlor')))\n    stopifnot(isTRUE(all.equal(candidate(''), '')))\n    stopifnot(isTRUE(all.equal(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_87","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དེ་བཟུམ་སྦེ་ ཐིག་ཁྲམ་ནང་གི་ས་སྒོ་ཚུ་ གྱལ་རིམ་གྱིས་རིམ་སྒྲིག་འབད་དགོཚད་འཛིན་ཚུ་ འགོ་དང་པ་གྲལ་རིམ་ནང་ ཡར་སེང་གི་རིམ་པ་ལས་རིམ་སྒྲིག་འབད།རིམ་སྒྲིག་རེ་རེའི་ནང་ སྐུགས་ ༠ ལས་འགོ་བཙུགསཔ་ཨིན།དེ་ལས་ ཤོག་ཁྲམ་གི་ཐོ་ཡིག་ལོག་གཏང་། [(x1, y1), (x2, y2) ...] འདི་བཟུམ་འབད་ lst དང་ཧྲིལ་ཨང་ x ཚུ་བྱིན་ཏེ་ ཨང་གྲངས་ཧྲིལ་ཨང་ x འདི་ཐོ་ཡིག་ནང་ལུ་འཚོལ་དགོ།ཐིག་ཁྲམ་རེ་རེའི་ནང་ ཀེར་ཐིག་གི་གྱངས་ཁ་མ་འདྲཝ་སྦེ་འོང་ཚུགས།འདི་ཡང་ matrix དང་འདྲཝ་ཅིག་ཨིན་རུང་ matrix དང་མ་འདྲ་བ་ཨིན།ཁྱོད་ཀྱིས་ ཚད་གཉིས་ཅན་གྱི་ གནས་སྡུད་ཅིག་ཐོབ་སྟེ་ འདི་ཡང་ ནང་འཁོད་ཐོ་ཡིག་སྦེ་ # >>> get_row(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1)\n# list(c(0, 0), c(1, 4), c(1, 0), c(2, 5), c(2, 0))\n# >>> get_row(c(), 1)\n# c()\n# >>> get_row(list(c(), c(1), c(1, 2, 3)), 3)\n# list(c(2, 2))\nget_row <- function(lst, x) {","canonical_solution":"get_row <- function(lst, x) {\n  result <- list()\n  for (i in seq_along(lst)) {\n    row <- lst[[i]]\n    cols <- which(row == x)\n    for (col in rev(sort(cols - 1))) {\n      result <- append(result, list(c(i - 1, col)))\n    }\n  }\n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- get_row\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1), list(c(0, 0), c(1, 4), c(1, 0), c(2, 5), c(2, 0)))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6)), 2), list(c(0, 1), c(1, 1), c(2, 1), c(3, 1), c(4, 1), c(5, 1)))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 1, 3, 4, 5, 6), c(1, 2, 1, 4, 5, 6), c(1, 2, 3, 1, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1), list(c(0, 0), c(1, 0), c(2, 1), c(2, 0), c(3, 2), c(3, 0), c(4, 3), c(4, 0), c(5, 4), c(5, 0), c(6, 5), c(6, 0)))))\n    stopifnot(isTRUE(all.equal(candidate(c(), 1), c())))\n    stopifnot(isTRUE(all.equal(candidate(list(c(1)), 2), c())))\n    stopifnot(isTRUE(all.equal(candidate(list(c(), c(1), c(1, 2, 3)), 3), list(c(2, 2)))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_88","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:* བྱིན་ཡོད་པའི་ ཝེ་ཊར་འདི་མ་སོར་དགོ།དྲན་གསོ།ཡང་ན་ ཨང་གྲངས་ཚུ་མར་འབབ་འགྱོ་མི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་བ་ཅིན་ (རྩིས་གཞི་དང་པའི་གནས་གོང་དང་ མཇུག་གི་གནས་གོང་) འདི་ཡང་ཨིན།ཁྱོད་ཀྱིས་བྱིན་མི་ ཝི་ཅཊ་འདི་ཡར་སེང་གི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་ནི་ཨིན་པ་ཅིན་བསྡོམས་ (ཐོག་མའི་གཞི་གྲངས་གནས་གོང་དང་ མཇུག་གི་གཞི་གྲངས་གནས་གོང་) འདི་རྣམ་རྟོག་ཨིནམ་དང་ནུས་མེད་ཨང་གྲངས་ཀྱི་ ཝི་ཅཊ་ཅིག་བྱིན་ཏེ་ཡོད་པ་ཅིན་ དབྱེ་བ་ཕྱེ་ཚར་བའི་ཤུལ་ལས་ ཝི་ཅཊ་དེ་གི་ ཀོར་ཅིག་སླར་ལོག་འབད།# >>> sort_array(c())\n# c()\n# >>> sort_array(c(5))\n# c(5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5))\n# c(0, 1, 2, 3, 4, 5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5, 6))\n# c(6, 5, 4, 3, 2, 1, 0)\nsort_array <- function(array) {","canonical_solution":"sort_array <- function(array) {\n  if (length(array) <= 1) {\n    return(array)\n  }\n  \n  first_value <- array[1]\n  last_value <- array[length(array)]\n  sum_values <- first_value + last_value\n  \n  if (sum_values %% 2 == 1) {\n    return(sort(array))\n  } else {\n    return(sort(array, decreasing = TRUE))\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- sort_array\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(5)), c(5))))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 3, 0, 1, 5)), c(0, 1, 2, 3, 4, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 3, 0, 1, 5, 6)), c(6, 5, 4, 3, 2, 1, 0))))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 1)), c(1, 2))))\n    stopifnot(isTRUE(all.equal(candidate(c(15, 42, 87, 32, 11, 0)), c(0, 11, 15, 32, 42, 87))))\n    stopifnot(isTRUE(all.equal(candidate(c(21, 14, 23, 11)), c(23, 21, 14, 11))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_89","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: གྱངས་ཁ་འདི་ ༢ ལུ་ཡར་འཕར་ཏེ་ ༢ ལུ་ཡར་འཕར་འགྱོ་འོང་།ཨེཕ་བི་འདི་ ཚིག་ཡིག་ ཚུ་ ཡོད་པའི་ཐབས་ལམ་ཅིག་ནང་ བསྒྱུར་དགོཔ་ཨིན།ཨེབ་གཏང་འབད་ཡོད་པའི་ཡིག་འབྲུ་འདི་ ཕྱིར་འཐོན་འབདཝ་ཨིན།ཨེ་རེ་ཅིག་ནང་ཐིག་སྦེ་ལག་ལེན་འཐབ་མི་ ལས་འགན་ཨེན་ཀིརོཊི་ཅིག་བཟོ་ནི་དང་ # >>> encrypt('hi')\n# 'lm'\n# >>> encrypt('asdfghjkl')\n# 'ewhjklnop'\n# >>> encrypt('gf')\n# 'kj'\n# >>> encrypt('et')\n# 'ix'\nencrypt <- function(s) {","canonical_solution":"encrypt <- function(s) {\n  alphabet <- letters\n  shift <- 2 * 2\n  encrypted <- sapply(strsplit(s, NULL)[[1]], function(char) {\n    if (char %in% alphabet) {\n      new_index <- (match(char, alphabet) + shift - 1) %% 26 + 1\n      alphabet[new_index]\n    } else {\n      char\n    }\n  })\n  paste(encrypted, collapse = \"\")\n}","tests":"test_humaneval <- function() {\n    candidate <- encrypt\n    stopifnot(isTRUE(all.equal(candidate('hi'), 'lm')))\n    stopifnot(isTRUE(all.equal(candidate('asdfghjkl'), 'ewhjklnop')))\n    stopifnot(isTRUE(all.equal(candidate('gf'), 'kj')))\n    stopifnot(isTRUE(all.equal(candidate('et'), 'ix')))\n    stopifnot(isTRUE(all.equal(candidate('faewfawefaewg'), 'jeiajeaijeiak')))\n    stopifnot(isTRUE(all.equal(candidate('hellomyfriend'), 'lippsqcjvmirh')))\n    stopifnot(isTRUE(all.equal(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')))\n    stopifnot(isTRUE(all.equal(candidate('a'), 'e')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_90","nl":"dzo_Tibt","pl":"r","prompt":"དེ་བཟུམ་གྱི་ཆ་ཤས་མེད་པ་ཅིན་ NULLསླར་ལོག་འབདཝ་ཨིན།Next_smallest () ལས་འགན་འབྲི་ཞིནམ་ལས་ ཐོ་ཡིག་ནང་གི་ ཨང་གཉིས་པ་ཆུང་ཤོས་འདི་ལོག་བྱིན་འོང་།ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཐོབ་ཡོདཔ་ཨིན།# >>> next_smallest(c(1, 2, 3, 4, 5))\n# 2\n# >>> next_smallest(c(5, 1, 4, 3, 2))\n# 2\n# >>> next_smallest(c())\n# NULL\n# >>> next_smallest(c(1, 1))\n# NULL\nnext_smallest <- function(lst) {","canonical_solution":"next_smallest <- function(lst) {\n  # Sort the list and remove duplicates\n  unique_sorted_lst <- sort(unique(lst))\n  \n  # Check if list contains at least two distinct elements\n  if (length(unique_sorted_lst) < 2) {\n    return(NULL)\n  }\n  \n  # Return the second smallest element\n  return(unique_sorted_lst[2])\n}","tests":"test_humaneval <- function() {\n    candidate <- next_smallest\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 1, 4, 3, 2)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 1)), NULL)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 1, 0)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 1)), NULL)))\n    stopifnot(isTRUE(all.equal(candidate(c(-35, 34, 12, -45)), -35)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_91","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: ཚིག་ཡིག་ཚུ་ \"\", \"?\" ཡང་ན་ \"!\" དང་གཅིག་ཁར་ དབྱེ་སེལ་འབདཝ་ཨིན།རྒྱུད་བསྐུལ་འདི་ \"I\" ཟེར་མི་ཚིག་འདི་དང་འགོ་བཙུགས་མི་ཚིག་ཅིག་ཨིན།ཁྱོད་ཀྱིས་ཚིག་ཡིག་གི་ཐིག་ཁྲམ་ཅིག་ཐོབ་སྟེ་ ཁྱོད་ཀྱི་ལཱ་འདི་ ཨང་གྲངས་རྩིས་ནི་ཨིན།# >>> is_bored('Hello world')\n# 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n# 1\nis_bored <- function(S) {","canonical_solution":"is_bored <- function(S) {\n  # Split the string into sentences using '.', '?', and '!' as delimiters\n  sentences <- unlist(strsplit(S, split = \"[.?!]\"))\n  \n  # Trim leading and trailing whitespace from each sentence\n  sentences <- trimws(sentences)\n  \n  # Count the number of sentences that start with \"I\"\n  boredom_count <- sum(startsWith(sentences, \"I\"))\n  \n  return(boredom_count)\n}","tests":"test_humaneval <- function() {\n    candidate <- is_bored\n    stopifnot(isTRUE(all.equal(candidate('Hello world'), 0)))\n    stopifnot(isTRUE(all.equal(candidate('Is the sky blue?'), 0)))\n    stopifnot(isTRUE(all.equal(candidate('I love It !'), 1)))\n    stopifnot(isTRUE(all.equal(candidate('bIt'), 0)))\n    stopifnot(isTRUE(all.equal(candidate('I feel good today. I will be productive. will kill It'), 2)))\n    stopifnot(isTRUE(all.equal(candidate('You and I are going for a walk'), 0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_92","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ གནད་དོན་གཞན་ཚུ་ནང་ false སླར་ལོག་འབདཝ་ཨིན།ཨང་གྲངས་གཅིག་འདི་ གཞན་གཉིས་བསྡོམས་དང་ ཨང་གྲངས་ཆ་མཉམ་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ཨིན་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན།ཨང་གྲངས་༣ འབད་མི་ལས་འགན་ཅིག་བཟོ།# >>> any_int(5, 2, 7)\n# TRUE\n# >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6, -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {","canonical_solution":"any_int <- function(x, y, z) {\n  if (is.integer(x) && is.integer(y) && is.integer(z)) {\n    return(x == y + z || y == x + z || z == x + y)\n  }\n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- any_int\n    stopifnot(isTRUE(all.equal(candidate(2, 3, 1), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(2.5, 2, 3), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(1.5, 5, 3.5), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(2, 6, 2), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(4, 2, 2), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(2.2, 2.2, 2.2), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(-4, 6, 2), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(2, 1, 1), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(3, 4, 7), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(3.0, 4, 7), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_93","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཡིག་འབྲུ་ཚུ་རྐྱངམ་ཅིག་ ཆ་འཇོག་འབད།ཨིང་ལིཤ་གི་ཡིག་གཟུགས་ནང་ ཚིག་ཡིག་ཅིག་ཡོདཔ་ཨིན།ཌའི་ལོག་ནང་ཡིག་འབྲུ་འདི་ ཌའི་ལོག་གི་ཧེ་མ་ས་སྒོ་ ༢ ཡོད་མི་ཡིག་འབྲུ་འདི་ཨིན།ནང་ལུ་ ཚིག་ཡིག་ཆ་མཉམ་ལུ་ ཆེ་ཆུང་གི་ཚབ་ལུ་ ཟེར་བའི་ཚིག་ཡིག་འདི་བཙུགས་ཡོདཔ་ཨིན།བརྡ་འཕྲིན་ཅིག་ལེན་ཏེ་ འདི་བཟུམ་ཅིག་སྦེ་ ཨང་བཏགས་མི་ལས་འགན་ཅིག་འབྲི་དགོ།# >>> encode('test')\n# 'TGST'\n# >>> encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nencode <- function(message) {","canonical_solution":"encode <- function(message) {\n  # Function to swap case of letters\n  swap_case <- function(char) {\n    if (grepl(\"[A-Za-z]\", char)) {\n      if (char %in% LETTERS) {\n        return(tolower(char))\n      } else {\n        return(toupper(char))\n      }\n    } else {\n      return(char)\n    }\n  }\n  \n  # Vowel replacement rules\n  vowel_replacement <- function(char) {\n    vowels <- c(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n    replacements <- c(\"c\", \"g\", \"k\", \"q\", \"w\", \"C\", \"G\", \"K\", \"Q\", \"W\")\n    if (char %in% vowels) {\n      index <- match(char, vowels)\n      return(replacements[index])\n    } else {\n      return(char)\n    }\n  }\n  \n  # Splitting the message into its characters\n  message_chars <- strsplit(message, \"\")[[1]]\n  \n  # Apply swap case and vowel replacement\n  encoded_chars <- sapply(message_chars, function(x) vowel_replacement(swap_case(x)))\n  \n  # Combine the characters back into a single string\n  return(paste(encoded_chars, collapse = \"\"))\n}","tests":"test_humaneval <- function() {\n    candidate <- encode\n    stopifnot(isTRUE(all.equal(candidate('TEST'), 'tgst')))\n    stopifnot(isTRUE(all.equal(candidate('Mudasir'), 'mWDCSKR')))\n    stopifnot(isTRUE(all.equal(candidate('YES'), 'ygs')))\n    stopifnot(isTRUE(all.equal(candidate('This is a message'), 'tHKS KS C MGSSCGG')))\n    stopifnot(isTRUE(all.equal(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_94","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཁྱོད་ཀྱིས་ སྦོམ་ཤོས་ཨང་གྲངས་དང་པོ་འདི་འཚོལ་ཏེ་ ཨང་གྲངས་ཀྱི་བསྡོམས་འདི་ལོག་གཏང་དགོ།ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཐོབ་ཡོདཔ་ཨིན།# >>> skjkasdkd(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))\n# 10\n# >>> skjkasdkd(c(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))\n# 25\n# >>> skjkasdkd(c(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))\n# 13\n# >>> skjkasdkd(c(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))\n# 11\n# >>> skjkasdkd(c(0, 81, 12, 3, 1, 21))\n# 3\n# >>> skjkasdkd(c(0, 8, 1, 2, 1, 7))\n# 7\nskjkasdkd <- function(lst) {","canonical_solution":"skjkasdkd <- function(lst) {\n  is_prime <- function(n) {\n    if (n <= 1) return(FALSE)\n    if (n == 2) return(TRUE)\n    if (n %% 2 == 0) return(FALSE)\n    for (i in 3:sqrt(n)) {\n      if (n %% i == 0) return(FALSE)\n    }\n    return(TRUE)\n  }\n  \n  prime_values <- lst[sapply(lst, is_prime)]\n  if (length(prime_values) == 0) return(0)\n  \n  largest_prime <- max(prime_values)\n  \n  sum_of_digits <- function(n) {\n    sum(as.numeric(unlist(strsplit(as.character(n), \"\"))))\n  }\n  \n  return(sum_of_digits(largest_prime))\n}","tests":"test_humaneval <- function() {\n    candidate <- skjkasdkd\n    stopifnot(isTRUE(all.equal(candidate(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)), 10)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)), 25)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)), 13)))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)), 11)))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 81, 12, 3, 1, 21)), 3)))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 8, 1, 2, 1, 7)), 7)))\n    stopifnot(isTRUE(all.equal(candidate(c(8191)), 19)))\n    stopifnot(isTRUE(all.equal(candidate(c(8191, 123456, 127, 7)), 19)))\n    stopifnot(isTRUE(all.equal(candidate(c(127, 97, 8192)), 10)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_95","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ལས་འགན་འདི་གིས་ FALSE སླར་ལོག་འབད་དགོཔ་ཨིན། འདི་ཡང་ མིང་བཏགས་ཡོད་པའི་ཐོ་ཡིག་འདི་ སྟོངམ་ཨིན།case ཡང་ན་ ཀི་བཱའིན་ཌིང་ཚུ་ཆ་མཉམ་ལུ་ ཀི་བཱའིན་ཌིང་སྦོམ་སྦེ་རང་ཡོད་པ་ཅིན་ FALSE སླར་ལོག་འབདཝ་ཨིན།མིང་བཏགས་ཡོད་པའི་ཐོ་ཡིག་ཅིག་བྱིན་པ་ཅིན་ ཨེབ་རྟ་ག་ར་ lower ནང་ལུ་ string ཚུ་ཡོད་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {","canonical_solution":"check_dict_case <- function(dict) {\n  if (length(dict) == 0) return(FALSE)\n  \n  keys <- names(dict)\n  \n  all_lower <- all(keys == tolower(keys))\n  all_upper <- all(keys == toupper(keys))\n  \n  return(all_lower || all_upper)\n}","tests":"test_humaneval <- function() {\n    candidate <- check_dict_case\n    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(list()), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_96","nl":"dzo_Tibt","pl":"r","prompt":"དཔེར་ན་: ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ ཨང་གྲངས་དང་པོ་དང་ n ལས་ཆུང་བ་ཨིན།ནུས་མེད་ཨང་གྲངས་ཆ་མཉམ་ལེན་ཏེ་ འགོ་དང་པ་ n གི་བེ་ཊར་ཅིག་སླར་ལོག་འབད་མི་ལས་འགན་ཅིག་ལག་ལེན་འཐབ་དགོ།# >>> count_up_to(5)\n# c(2, 3)\n# >>> count_up_to(11)\n# c(2, 3, 5, 7)\n# >>> count_up_to(0)\n# c()\n# >>> count_up_to(20)\n# c(2, 3, 5, 7, 11, 13, 17, 19)\n# >>> count_up_to(1)\n# c()\n# >>> count_up_to(18)\n# c(2, 3, 5, 7, 11, 13, 17)\ncount_up_to <- function(n) {","canonical_solution":"count_up_to <- function(n) {\n  is_prime <- function(num) {\n    if (num <= 1) return(FALSE)\n    if (num == 2) return(TRUE)\n    if (num %% 2 == 0) return(FALSE)\n    for (i in 3:sqrt(num)) {\n      if (num %% i == 0) return(FALSE)\n    }\n    return(TRUE)\n  }\n  \n  primes_below_n <- c()\n  for (i in 2:(n-1)) {\n    if (is_prime(i)) {\n      primes_below_n <- c(primes_below_n, i)\n    }\n  }\n  \n  return(primes_below_n)\n}","tests":"test_humaneval <- function() {\n    candidate <- count_up_to\n    stopifnot(isTRUE(all.equal(candidate(5), c(2, 3))))\n    stopifnot(isTRUE(all.equal(candidate(6), c(2, 3, 5))))\n    stopifnot(isTRUE(all.equal(candidate(7), c(2, 3, 5))))\n    stopifnot(isTRUE(all.equal(candidate(10), c(2, 3, 5, 7))))\n    stopifnot(isTRUE(all.equal(candidate(0), c())))\n    stopifnot(isTRUE(all.equal(candidate(22), c(2, 3, 5, 7, 11, 13, 17, 19))))\n    stopifnot(isTRUE(all.equal(candidate(1), c())))\n    stopifnot(isTRUE(all.equal(candidate(18), c(2, 3, 5, 7, 11, 13, 17))))\n    stopifnot(isTRUE(all.equal(candidate(47), c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43))))\n    stopifnot(isTRUE(all.equal(candidate(101), c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_97","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ནང་བསྐྱོད་དེ་ དུས་རྒྱུན་དུ་ ཆ་གནས་ཅན་སྦེ་ར་སྡོད་འོང་ཟེར་ཆ་བཞགཔ་ཨིན།ཤོག་ལེབ་འདི་ནང་ལུ་ ཨང་གྲངས་ཚུ་ གྱངས་ཁ་སྦེ་བཙུགས་ཏེ་བཙུགསཔ་ཨིན།ཨང་གྲངས་ཧྲིལ་པོ་གཉིས་ལེན་ཏེ་ function འདི་ཚངམ་སྦེ་གྲུབ་ཞིནམ་ལས་ སླར་ལོག་འབདཝ་ཨིན།# >>> multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n# 0\n# >>> multiply(14, -15)\n# 20\nmultiply <- function(a, b) {","canonical_solution":"multiply <- function(a, b) {\n  unit_digit_a <- abs(a) %% 10\n  unit_digit_b <- abs(b) %% 10\n  return(unit_digit_a * unit_digit_b)\n}","tests":"test_humaneval <- function() {\n    candidate <- multiply\n    stopifnot(isTRUE(all.equal(candidate(148, 412), 16)))\n    stopifnot(isTRUE(all.equal(candidate(19, 28), 72)))\n    stopifnot(isTRUE(all.equal(candidate(2020, 1851), 0)))\n    stopifnot(isTRUE(all.equal(candidate(14, -15), 20)))\n    stopifnot(isTRUE(all.equal(candidate(76, 67), 42)))\n    stopifnot(isTRUE(all.equal(candidate(17, 27), 49)))\n    stopifnot(isTRUE(all.equal(candidate(0, 1), 0)))\n    stopifnot(isTRUE(all.equal(candidate(0, 0), 0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_98","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: string s ཅིག་བྱིན་པ་ཅིན་ སྦོམ་ཡིག་གི་སྐད་ཡིག་ཚུ་རྩིས་སྟོནམ་ཨིན།# >>> count_upper('aBCdEf')\n# 1\n# >>> count_upper('abcdefg')\n# 0\n# >>> count_upper('dBBE')\n# 0\ncount_upper <- function(s) {","canonical_solution":"count_upper <- function(s) {\n  # Define uppercase vowels\n  uppercase_vowels <- c('A', 'E', 'I', 'O', 'U')\n  \n  # Initialize counter\n  count <- 0\n  \n  # Iterate over string indices\n  for (i in seq(1, nchar(s), by=2)) {\n    # Check if character at even index is an uppercase vowel\n    if (substr(s, i, i) %in% uppercase_vowels) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}","tests":"test_humaneval <- function() {\n    candidate <- count_upper\n    stopifnot(isTRUE(all.equal(candidate('aBCdEf'), 1)))\n    stopifnot(isTRUE(all.equal(candidate('abcdefg'), 0)))\n    stopifnot(isTRUE(all.equal(candidate('dBBE'), 0)))\n    stopifnot(isTRUE(all.equal(candidate('B'), 0)))\n    stopifnot(isTRUE(all.equal(candidate('U'), 1)))\n    stopifnot(isTRUE(all.equal(candidate(''), 0)))\n    stopifnot(isTRUE(all.equal(candidate('EEEE'), 2)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_99","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ ཨང་གྲངས་ཆ་མཉམ་གཉིས་ལས་ བསྐོར་རྒྱབ་འབད་ཞིནམ་ལས་ ༠ ལས་ཁ་འབྱལ་གཏང་།དེ་ལས་ ཕྲང་ཕྲང་གི་གྲངས་འདི་ རྒྱང་ཕྲང་སྦེ་ཡོད་པ་ཅིན་ ཕྲང་ཕྲང་གི་གྲངས་འདི་ རྒྱང་ཕྲང་སྦེ་ཡོད་པ་ཅིན་ཨང་གྲངས་ངོ་ཚབ་འབད་ཡོད་པའི་ གནས་གོང་ (ཐིག་ཁྲམ་) ཅིག་ལེན་མི་ལས་འགན་ཅིག་བཟོ།# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {","canonical_solution":"closest_integer <- function(value) {\n  num <- as.numeric(value)\n  if (num %% 1 == 0.5 || num %% 1 == -0.5) {\n    return(ifelse(num > 0, ceiling(num), floor(num)))\n  } else {\n    return(round(num))\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- closest_integer\n    stopifnot(isTRUE(all.equal(candidate('10'), 10)))\n    stopifnot(isTRUE(all.equal(candidate('14.5'), 15)))\n    stopifnot(isTRUE(all.equal(candidate('-15.5'), -16)))\n    stopifnot(isTRUE(all.equal(candidate('15.3'), 15)))\n    stopifnot(isTRUE(all.equal(candidate('0'), 0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_100","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:i འདི་ཚད་ (i+1) ནང་ རྡོ་གི་གྱངས་ཁ་འདི་ཨིན།ཌེ་བི་ནང་ཡོད་པའི་ཐོ་ཡིག་ནང་ལུ་ ཚད་རེ་རེ་ནང་ཡོད་པའི་རྡོ་གྱངས་ཁ་སླར་ལོག་འབདཝ་ཨིན།- nའདི་ཆ་མཉམ་ཨིན་པ་ཅིན་ ཤུལ་མའི་ཆ་མཉམ་ཨང་འདི་ཨིན།- nའདི་ གྱངས་ཁ་མ་ཚངམ་ཨིན་པ་ཅིན་ ཤུལ་མའི་གྱངས་ཁ་འདི་ཨིན།ཤུལ་མའི་གནས་ཚད་ནང་ལུ་ རྡོ་གི་གྱངས་ཁ་འདི་:ཐོག་ཚད་དང་པ་འདི་ལུ་ རྡོ་ n ཡོདཔ་ཨིན།ཁྱོད་ཀྱིས་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ རྡོ་གི་ཚད་ n འབད་མི་རྡོ་བསྡམ་དགོཔ་ཨིན།# >>> make_a_pile(3)\n# c(3, 5, 7)\nmake_a_pile <- function(n) {","canonical_solution":"make_a_pile <- function(n) {\n  stones <- numeric(n)\n  stones[1] <- n\n  for (i in 2:n) {\n    if (n %% 2 == 0) {\n      stones[i] <- stones[i - 1] + 2\n    } else {\n      stones[i] <- stones[i - 1] + 2\n    }\n  }\n  return(stones)\n}","tests":"test_humaneval <- function() {\n    candidate <- make_a_pile\n    stopifnot(isTRUE(all.equal(candidate(3), c(3, 5, 7))))\n    stopifnot(isTRUE(all.equal(candidate(4), c(4, 6, 8, 10))))\n    stopifnot(isTRUE(all.equal(candidate(5), c(5, 7, 9, 11, 13))))\n    stopifnot(isTRUE(all.equal(candidate(6), c(6, 8, 10, 12, 14, 16))))\n    stopifnot(isTRUE(all.equal(candidate(8), c(8, 10, 12, 14, 16, 18, 20, 22))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_101","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: ཚིག་ཡིག་ཚུ་ནང་ string ཚུ་བགོ་བཤའ་རྐྱབ་ནི་དང་ ཚིག་ཡིག་གི་ vector སླར་ལོག་འབདཝ་ཨིན།ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཐིག་ཅིག་བྱིན་ནི་ཨིན་ འདི་ནང་ ཀམ་ཡང་ན་ བར་སྟོང་བཙུགས་ཏེ་ དབྱེ་བ་ཕྱེ་འོང་། ཁྱོད་ཀྱི་ལཱ་འདི་ ཨིན།# >>> words_string('Hi, my name is John')\n# c('Hi', 'my', 'name', 'is', 'John')\n# >>> words_string('One, two, three, four, five, six')\n# c('One', 'two', 'three', 'four', 'five', 'six')\nwords_string <- function(s) {","canonical_solution":"words_string <- function(s) {\n  s <- gsub(\",\", \" \", s)\n  words <- unlist(strsplit(s, \"\\\\s+\"))\n  words <- words[words != \"\"]\n  return(words)\n}","tests":"test_humaneval <- function() {\n    candidate <- words_string\n    stopifnot(isTRUE(all.equal(candidate('Hi, my name is John'), c('Hi', 'my', 'name', 'is', 'John'))))\n    stopifnot(isTRUE(all.equal(candidate('One, two, three, four, five, six'), c('One', 'two', 'three', 'four', 'five', 'six'))))\n    stopifnot(isTRUE(all.equal(candidate('Hi, my name'), c('Hi', 'my', 'name'))))\n    stopifnot(isTRUE(all.equal(candidate('One,, two, three, four, five, six,'), c('One', 'two', 'three', 'four', 'five', 'six'))))\n    stopifnot(isTRUE(all.equal(candidate(''), c())))\n    stopifnot(isTRUE(all.equal(candidate('ahmed     , gamal'), c('ahmed', 'gamal'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_102","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: དེ་བཟུམ་ཨང་གྲངས་མེད་པ་ཅིན་ ལས་འགན་འདི་གིས་ -༡ སླར་ལོག་འབདཝ་ཨིན།སྦོམ་ཤོས་འདི་ [x, y] ནང་ཚུད་ཡོད་པའི་ཧྲིལ་ཨང་ཆ་མཉམ་ཨིན།འ་ནི་འགན་ཁྲམ་འདི་གིས་ ནུས་ལྡན་ཨང་གྲངས་ x དང་ y གཉིས་ལེན་ཏེ་ སླར་ལོག་འབདཝ་ཨིན།# >>> choose_num(12, 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nchoose_num <- function(x, y) {","canonical_solution":"choose_num <- function(x, y) {\n  if (x > y) {\n    return(-1)\n  }\n  \n  for (num in seq(y, x, by = -1)) {\n    if (num %% 2 == 0) {\n      return(num)\n    }\n  }\n  \n  return(-1)\n}","tests":"test_humaneval <- function() {\n    candidate <- choose_num\n    stopifnot(isTRUE(all.equal(candidate(12, 15), 14)))\n    stopifnot(isTRUE(all.equal(candidate(13, 12), -1)))\n    stopifnot(isTRUE(all.equal(candidate(33, 12354), 12354)))\n    stopifnot(isTRUE(all.equal(candidate(5234, 5233), -1)))\n    stopifnot(isTRUE(all.equal(candidate(6, 29), 28)))\n    stopifnot(isTRUE(all.equal(candidate(27, 10), -1)))\n    stopifnot(isTRUE(all.equal(candidate(7, 7), -1)))\n    stopifnot(isTRUE(all.equal(candidate(546, 546), 546)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_103","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:n འདི་ m ལས་སྦོམ་ཡོད་པ་ཅིན་ -1 སླར་ལོག་འབདཝ་ཨིན།གྲུབ་འབྲས་འདི་ སྦོ་ལོགས་ཁར་ཡོད་པའི་ཨང་གྲངས་ཧྲིལ་བུམ་ལུ་བསྡུ་སྟེ་ དེ་གཉིས་ལྡན་ལུ་བསྒྱུར་དགོ།n ལས་ m ཚུན་གྱི་ཨང་གྲངས་ཧྲིལ་བུའི་བར་ནའི་ (n དང་ m ཚུ་རྩིས་ཏེ་) གྱི་བར་ནའི་གནས་གོང་ཨིན།ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་གཉིས་ n དང་ m ཐོབ་ཡོདཔ་དང་ ཁྱོད་ཀྱི་ལཱ་འདི་ # >>> rounded_avg(1, 5)\n# '0b11'\n# >>> rounded_avg(7, 5)\n# -1\n# >>> rounded_avg(10, 20)\n# '0b1111'\n# >>> rounded_avg(20, 33)\n# '0b11010'\nrounded_avg <- function(n, m) {","canonical_solution":"rounded_avg <- function(n, m) {\n  if (n > m) {\n    return(-1)\n  }\n  avg <- mean(n:m)\n  rounded_avg <- round(avg)\n  binary_avg <- as.character(as.binary(rounded_avg))\n  return(paste0(\"0b\", binary_avg))\n}\n\nas.binary <- function(num) {\n  if (num == 0) {\n    return(\"0\")\n  }\n  binary <- \"\"\n  while (num > 0) {\n    binary <- paste0(num %% 2, binary)\n    num <- num %\/% 2\n  }\n  return(binary)\n}","tests":"test_humaneval <- function() {\n    candidate <- rounded_avg\n    stopifnot(isTRUE(all.equal(candidate(1, 5), '0b11')))\n    stopifnot(isTRUE(all.equal(candidate(7, 13), '0b1010')))\n    stopifnot(isTRUE(all.equal(candidate(964, 977), '0b1111001010')))\n    stopifnot(isTRUE(all.equal(candidate(996, 997), '0b1111100100')))\n    stopifnot(isTRUE(all.equal(candidate(560, 851), '0b1011000010')))\n    stopifnot(isTRUE(all.equal(candidate(185, 546), '0b101101110')))\n    stopifnot(isTRUE(all.equal(candidate(362, 496), '0b110101101')))\n    stopifnot(isTRUE(all.equal(candidate(350, 902), '0b1001110010')))\n    stopifnot(isTRUE(all.equal(candidate(197, 233), '0b11010111')))\n    stopifnot(isTRUE(all.equal(candidate(7, 5), -1)))\n    stopifnot(isTRUE(all.equal(candidate(5, 1), -1)))\n    stopifnot(isTRUE(all.equal(candidate(5, 5), '0b101')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_104","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: དྲན་གསོ། ལོག་བཏང་མི་ཐོ་ཡིག་འདི་ ཡར་སེང་རིམ་སྒྲིག་ནང་དབྱེ་བ་ཕྱེ་དགོ།ཨང་གྲངས་ཆ་མཉམ་མེད་པའི་ཆ་ཤས་ཚུ་ཨིན།ཤོག་གྲངས་ཧྲིལ་བུམ་ཆ་མཉམ་ x གི་ཐོ་ཡིག་ཐོབ་པ་ཅིན་ ཤོག་གྲངས་ཧྲིལ་བུམ་ཆ་མཉམ་  གི་ཐོ་ཡིག་རིམ་སྒྲིག་འབད་ཡོད་པའི་སླར་ལོག་འབདཝ་ཨིན།# >>> unique_digits(c(15, 33, 1422, 1))\n# c(1, 15, 33)\n# >>> unique_digits(c(152, 323, 1422, 10))\n# c()\nunique_digits <- function(x) {","canonical_solution":"unique_digits <- function(x) {\n  has_no_even_digit <- function(num) {\n    digits <- as.numeric(strsplit(as.character(num), \"\")[[1]])\n    return(all(digits %% 2 != 0))\n  }\n  \n  result <- Filter(has_no_even_digit, x)\n  return(sort(result))\n}","tests":"test_humaneval <- function() {\n    candidate <- unique_digits\n    stopifnot(isTRUE(all.equal(candidate(c(15, 33, 1422, 1)), c(1, 15, 33))))\n    stopifnot(isTRUE(all.equal(candidate(c(152, 323, 1422, 10)), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(12345, 2033, 111, 151)), c(111, 151))))\n    stopifnot(isTRUE(all.equal(candidate(c(135, 103, 31)), c(31, 135))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_105","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: གཅིག་ གཉིས་ གསུམ་ བཞི་ ལྔ་ དྲུག་ བདུན་ བརྒྱད་ དགུ་འབྲས་བུ་ཐོབ་མི་ ཝི་ཅཊར་འདི་ ཕྱིར་བསྒྱུར་འབད་ཞིནམ་ལས་ ཨང་གྲངས་རེ་རེ་ལུ་ ནང་ལས་ མིང་ཚིག་འདི་དང་བསྟུན་ཏེ་ཚབ་བཙུགས་དགོ།ཨང་གྲངས་ཧྲིལ་བུའི་ ཝི་ཅཊར་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུའི་དབྱེ་བ་འདི་ ༡ དང་ ༩ འི་བར་ན་འབད་དགོཔ་ཨིན།# >>> by_length(c(2, 1, 1, 4, 5, 8, 2, 3))\n# c('Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One')\n#   If the vector is empty, return an empty vector:\n# >>> by_length(c())\n# c()\n#   If the vector has any strange number ignore it:\n# >>> by_length(c(1, -1, 55))\n# c('One')\nby_length <- function(arr) {","canonical_solution":"by_length <- function(arr) {\n  # Filter numbers between 1 and 9\n  valid_nums <- arr[arr >= 1 & arr <= 9]\n  # Sort the numbers\n  sorted_nums <- sort(valid_nums, decreasing = TRUE)\n  # Map numbers to their names\n  num_to_name <- c(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  result <- num_to_name[sorted_nums]\n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- by_length\n    stopifnot(isTRUE(all.equal(candidate(c(2, 1, 1, 4, 5, 8, 2, 3)), c('Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'))))\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 55)), c('One'))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 3, 2)), c('Three', 'Two', 'One'))))\n    stopifnot(isTRUE(all.equal(candidate(c(9, 4, 8)), c('Nine', 'Eight', 'Four'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_106","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:i གི་གནས་གོང་འདི་ 1 ལས་ i ཚུན་གྱི་ཨང་གྲངས་ཚུ་གྱངས་ཁ་རྐྱབ་ཨིན། (1 * 2 * ... * i)iའདི་ ༡ ལས་འགོ་བཙུགསཔ་ཨིན།ཡང་ན་ ཨང་གྲངས་ ༡ ལས་ ༡ ཚུན་གྱི་བསྡོམས་ཨིན།དེ་ལས་ ཚད་ཀྱི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན། འདི་ཡང་ ཚད་གཞི་ i ལུ་ཡོད་པའི་ཆ་ཤས་ཀྱི་གནས་གོང་འདི་ i གི་གནས་གོང་ཨིནམ་དང་ i འདི་ཆ་མཉམ་ཡོད་པ་ཅིན་ ཚད་འཛིན་སྦེ་ n འབད་མི་ལས་འགན་ f འདི་ལག་ལེན་འཐབ་དགོ།# >>> f(5)\n# c(1, 2, 6, 24, 15)\nf <- function(n) {","canonical_solution":"f <- function(n) {\n  result <- numeric(n)  # Initialize a numeric vector of length n\n  for (i in 1:n) {\n    if (i %% 2 == 0) {  # Check if i is even\n      result[i] <- factorial(i)\n    } else {\n      result[i] <- sum(1:i)\n    }\n  }\n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(5), c(1, 2, 6, 24, 15))))\n    stopifnot(isTRUE(all.equal(candidate(7), c(1, 2, 6, 24, 15, 720, 28))))\n    stopifnot(isTRUE(all.equal(candidate(1), c(1))))\n    stopifnot(isTRUE(all.equal(candidate(3), c(1, 2, 6))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_107","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་གཞི་ ༡:ཚད་གཞི་ནང་ཚུད་མི་ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་པེ་ལིན་ཌོརམ།ཤོག་གྲངས་ཚག་ཅིག་དང་ ཚར་ཅིག་ཡོད་པའི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན།# >>> even_odd_palindrome(3)\n# c(1, 2)\n#     Explanation:\n#     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome(12)\n# c(4, 6)\n#     Explanation:\n#     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n#     1. 1 <= n <= 10^3\n#     2. returned list has the number of even and odd integer palindromes respectively.\neven_odd_palindrome <- function(n) {","canonical_solution":"even_odd_palindrome <- function(n) {\n  is_palindrome <- function(x) {\n    str_x <- as.character(x)\n    return(str_x == paste(rev(unlist(strsplit(str_x, \"\"))), collapse = \"\"))\n  }\n  \n  even_count <- 0\n  odd_count <- 0\n  \n  for (i in 1:n) {\n    if (is_palindrome(i)) {\n      if (i %% 2 == 0) {\n        even_count <- even_count + 1\n      } else {\n        odd_count <- odd_count + 1\n      }\n    }\n  }\n  \n  return(c(even_count, odd_count))\n}","tests":"test_humaneval <- function() {\n    candidate <- even_odd_palindrome\n    stopifnot(isTRUE(all.equal(candidate(123), c(8, 13))))\n    stopifnot(isTRUE(all.equal(candidate(12), c(4, 6))))\n    stopifnot(isTRUE(all.equal(candidate(3), c(1, 2))))\n    stopifnot(isTRUE(all.equal(candidate(63), c(6, 8))))\n    stopifnot(isTRUE(all.equal(candidate(25), c(5, 6))))\n    stopifnot(isTRUE(all.equal(candidate(19), c(4, 6))))\n    stopifnot(isTRUE(all.equal(candidate(9), c(4, 5))))\n    stopifnot(isTRUE(all.equal(candidate(1), c(0, 1))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_108","nl":"dzo_Tibt","pl":"r","prompt":"དཔེར་ན་ -123 གིས་ ཨང་གྲངས་ -1, 2 དང་ 3 ལུ་རྟགས་བཀོད་འབད་ཡོདཔ་ཨིན།ཨང་གྲངས་འདི་ ནུས་མེད་ཨིན་པ་ཅིན་ ཨང་གྲངས་དང་པ་འདི་ ནུས་མེད་ཨིན།ཨང་གྲངས་ཚུ་ནང་ ཨང་གྲངས་བསྡོམས་ > ༠ ཡོད་པའི་ཆ་ཤས་ཚུ་ཨིན།function count_nums དེ་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཊར་ཅིག་ལེན་ཏེ་སླར་ལོག་འབདཝ་ཨིན།# >>> count_nums(c())\n# 0\n# >>> count_nums(c(-1, 11, -11))\n# 1\n# >>> count_nums(c(1, 1, 2))\n# 3\ncount_nums <- function(arr) {","canonical_solution":"count_nums <- function(arr) {\n  # Helper function to calculate sum of digits\n  sum_of_digits <- function(num) {\n    digits <- as.numeric(unlist(strsplit(as.character(num), \"\")))\n    return(sum(digits, na.rm = TRUE))\n  }\n  \n  # Apply the sum_of_digits function and count numbers with sum > 0\n  return(sum(sapply(arr, sum_of_digits) > 0))\n}","tests":"test_humaneval <- function() {\n    candidate <- count_nums\n    stopifnot(isTRUE(all.equal(candidate(c()), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, 0)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 2, -2, 3, 4, 5)), 6)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 6, 9, -6, 0, 1, 5)), 5)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 100, 98, -7, 1, -1)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c(12, 23, 34, -45, -56, 0)), 5)))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(1)), 1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_109","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: དྲན་གསོ། འབྲི་ཤོག་ནང་བཀོད་ཡོད་པའི་ཐོ་ཡིག་ནང་ལུ་ ཚན་པ་མ་འདྲཝ་ཡོད་མི་འདི་ ངེས་བརྟན་ཨིན།གལ་སྲིད་ ཝི་ཅཊར་འདི་ སྟོངམ་ཨིན་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།དེ་ལས་ TRUE སླར་ལོག་འབད་ ཡང་ན་ FALSE སླར་ལོག་འབད་གོང་གི་ལཱ་འདི་འབད་ཞིནམ་ལས་ དབྱེ་བ་ཕྱེ་མི་ ཝི་ཅཊར་ཐོབ་ཚུགསཔ་ཨིན།ཝི་ཅཊར་ནང་ འགོ་ཐོག་གི་ས་སྒོ་དེ་ 0th ཚད་ཐིག་ཨིན།ནང་ལུ་ སྤོ་བཤུད་འབད་འོང་།ཕྲང་ཕྱོགས་ལུ་སོར་གཏང་ནིའི་ལཱ་འདི་ ཝི་ཅཊ་གི་ཆ་ཤས་ཆ་མཉམ་ལུ་ གཅིག་གིས་སོར་གཏང་ནི་ཨིན་མས།ཁྱོད་ཀྱིས་ ཕྲང་ལམ་འདི་ ཚར་ལེ་ཤ་ཅིག་ར་ བསྒྱུར་བཅོས་འབད་ཚུགས།ནང་ལུ་གཞི་བསྟུན་འབད་ཡོད་པའི་ལག་ལེན་འདི་འབད་འོང་།ནང་ལུ་འབད་ཐོག་ལས་ ཝི་ཅཊ་ཚུ་ མར་འབབ་འགྱོ་མི་རིམ་པ་ནང་ དབྱེ་བ་ཕྱེ་ཚུགས།ཝི་ཅཊར་ནང་ལུ་ ཨང་གྲངས་ཚུ་ སྟབས་བདེ་ཏོག་ཏོ་སྦེ་རིམ་སྒྲིག་འབད་ནི་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཇི་ཡོད་ག་འདི་ངེས་འཛིན་འབད་ནི་ཨིན།ང་བཅས་ནང་ལུ་ ཝི་ཅཊ་ 'arr' ཡོད་པའི་ ཨང་གྲངས་ཆ་མཉམ་ N ཡོད་པའི་ཁར་ ཨར་༡ དང་ ཨར་༢ དེ་ལས་ ཨར་༡ དང་ ཨར་༢ དེ་ལས་ ཨར་༡ དང་ ཨར་༡ དང་ ཨར་༢ དེ་ལས་ ཨར་༡ དང་ ཨར་༢ དེ་ལས་ ཨར་༡ ཚུ་ཡོདཔ་ཨིན།# >>> move_one_ball(c(3, 4, 5, 1, 2))\n# TRUE\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n#              be achieved for the given vector.\n# >>> move_one_ball(c(3, 5, 4, 1, 2))\n# FALSE\n# Explanation:It is not possible to get non-decreasing order for the given\n#             vector by performing any number of right shift operations.\nmove_one_ball <- function(arr) {","canonical_solution":"move_one_ball <- function(arr) {\n  if (length(arr) == 0) {\n    return(TRUE)\n  }\n  \n  n <- length(arr)\n  for (i in 1:n) {\n    shifted_arr <- c(tail(arr, n - i), head(arr, i))\n    if (all(diff(shifted_arr) >= 0)) {\n      return(TRUE)\n    }\n  }\n  \n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- move_one_ball\n    stopifnot(isTRUE(all.equal(candidate(c(3, 4, 5, 1, 2)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 10, 1, 2)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 1, 2)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 4, 1, 2)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c()), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_110","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: དེ་མེན་པ་ཅིན་ \"NO\" སྦེ་ལོག་གཏང་།lst1 གི་ཆ་ཤས་ཚུ་ཆ་མཉམ་རང་ཡོད་པ་ཅིན་ \"YES\" སླར་ལོག་འབདཝ་ཨིན།གལ་སྲིད་ lst1 དང་ lst2 ཚུ་གི་བར་ན་ དབྱེ་བ་ཕྱེ་ཚུགས་པ་ཅིན་lst1 དང་ lst2 ཀྱི་བར་ན་ བརྗེ་སོར་འབད་མི་ཆ་ཤས་ཚུ་གི་གྱངས་ཁ་ལུ་ཚད་གཞི་མེདཔ་ཨིན།ཤོག་གྲངས་ཆ་མཉམ་ལས་ 1 གི་ཐོ་ཡིག་བཟོ་ནི་ལུ་ སྦྲགས་བཞག་ཡོདཔ་ཨིན།དེ་ལས་ ཌའི་ལོག་འདི་ ཌའི་ལོག་གི་ཆ་ཤས་ཚུ་ བརྗེ་སོར་འབད་ཚུགསཔ་ཨིན་ན་མེན་ན་བརྟག་དཔྱད་འབདཝ་ཨིན།འ་ནི་དཀའ་ངལ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་གྲངས་ཐོ་གཉིས་ཆ་ར་ལུ་ ལག་ལེན་འཐབ་མི་འགན་འཁྲི་ཅིག་ལག་ལེན་འཐབ་འོང་།# >>> exchange(c(1, 2, 3, 4), c(1, 2, 3, 4))\n# 'YES'\n# >>> exchange(c(1, 2, 3, 4), c(1, 5, 3, 4))\n# 'NO'\n# It is assumed that the input lists will be non-empty.\nexchange <- function(lst1, lst2) {","canonical_solution":"exchange <- function(lst1, lst2) {\n  # Identify even and odd numbers in lst1\n  lst1_even <- lst1[lst1 %% 2 == 0]\n  lst1_odd <- lst1[lst1 %% 2 != 0]\n  \n  # Identify even numbers in lst2\n  lst2_even <- lst2[lst2 %% 2 == 0]\n  \n  # Check if the number of odd elements in lst1 can be replaced with even elements from lst2\n  if (length(lst1_odd) <= length(lst2_even)) {\n    return(\"YES\")\n  } else {\n    return(\"NO\")\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- exchange\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(1, 2, 3, 4)), 'YES')))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(1, 5, 3, 4)), 'NO')))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(2, 1, 4, 3)), 'YES')))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 7, 3), c(2, 6, 4)), 'YES')))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 7, 3), c(2, 6, 3)), 'NO')))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 6, 1, 8, 9), c(3, 5, 5, 1, 1, 1)), 'NO')))\n    stopifnot(isTRUE(all.equal(candidate(c(100, 200), c(200, 200)), 'YES')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_111","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཡི་གུ་ལེ་ཤ་ཅིག་རང་ འབྱུང་པ་ཅིན་ དེ་ཚུ་ག་ར་ལོག་གཏང་།འབྲི་ཤོག་གི་ཨང་གྲངས་འདི་ འབྲི་ཤོག་གི་ཨང་གྲངས་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་དང་ འབྲི་ཤོག་གི་ཨང་གྲངས་ཚུ་ཨིན།སྦྲགས་ས་སྒོ་སོ་སོར་སྦེ་ཡོད་མི་ཡིག་ཆུང་གི་ཚབ་ལུ་ string ཅིག་བྱིན་པ་ཅིན་ མིང་བཏགས་ཡོད་པའི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་།# >>> histogram('a b c')\n# list('a' = 1, 'b' = 1, 'c' = 1)\n# >>> histogram('a b b a')\n# list('a' = 2, 'b' = 2)\n# >>> histogram('a b c a b')\n# list('a' = 2, 'b' = 2)\n# >>> histogram('b b b b a')\n# list('b' = 4)\n# >>> histogram('')\n# list()\nhistogram <- function(test) {","canonical_solution":"histogram <- function(test) {\n  # Split the string into individual letters.\n  letters <- unlist(strsplit(test, \" \"))\n  \n  # Create a table to count the occurrences of each letter.\n  count_table <- table(letters)\n  \n  # Find the maximum frequency of occurrences.\n  max_count <- max(count_table, na.rm = TRUE)\n  \n  # Find all letters that have the maximum frequency.\n  max_letters <- names(count_table[count_table == max_count])\n  \n  # Create a named list with letters as names and their max occurrences as values.\n  result <- setNames(as.list(rep(max_count, length(max_letters))), max_letters)\n  \n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- histogram\n    stopifnot(isTRUE(all.equal(candidate('a b b a'), list('a' = 2, 'b' = 2))))\n    stopifnot(isTRUE(all.equal(candidate('a b c a b'), list('a' = 2, 'b' = 2))))\n    stopifnot(isTRUE(all.equal(candidate('a b c d g'), list('a' = 1, 'b' = 1, 'c' = 1, 'd' = 1, 'g' = 1))))\n    stopifnot(isTRUE(all.equal(candidate('r t g'), list('r' = 1, 't' = 1, 'g' = 1))))\n    stopifnot(isTRUE(all.equal(candidate('b b b b a'), list('b' = 4))))\n    stopifnot(isTRUE(all.equal(candidate('r t g'), list('r' = 1, 't' = 1, 'g' = 1))))\n    stopifnot(isTRUE(all.equal(candidate(''), list())))\n    stopifnot(isTRUE(all.equal(candidate('a'), list('a' = 1))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_112","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་ ཁྱོད་ཀྱིས་ གྲུབ་འབྲས་ཐིག་ཁྲམ་དང་ བདེན་\/རྫུས་མ་ཚུ་ཡོད་པའི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་དགོ།string འདི་ཧེ་མ་དང་རྒྱབ་ཕྱོགས་གཉིས་ཆ་ར་ལུ་ འདྲ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ འདི་ལུ་ palindrome ཟེར་སླབ་ཨིན།དེ་ལས་ གྲུབ་འབྲས་ཐིག་ཁྲམ་འདི་ པཱ་ལིན་ཌོརམསི་ཨིནམ་ཨིན་ན་ བལྟ་དགོ།ང་བཅས་ལུ་ string s དང་ c གཉིས་བྱིན་ཡོདཔ་ད་ ཁྱོད་ཀྱིས་ s ནང་གི་ཡིག་འབྲུ་ཚུ་ཆ་མཉམ་འདི་ c ནང་གི་ཡིག་འབྲུ་ཚུ་དང་འདྲན་འདྲ་སྦེ་ཡོད་མི་ཚུ་ སེལ་འཐུ་འབད་དགོཔ་ཨིན།ལཱ་འགན་ # >>> reverse_delete('abcde', 'ae')\n# list('bcd', FALSE)\n# >>> reverse_delete('abcdef', 'b')\n# list('acdef', FALSE)\n# >>> reverse_delete('abcdedcba', 'ab')\n# list('cdedc', TRUE)\nreverse_delete <- function(s, c) {","canonical_solution":"reverse_delete <- function(s, c) {\n  # Remove characters in 'c' from 's'\n  for (char in strsplit(c, '')[[1]]) {\n    s <- gsub(char, \"\", s)\n  }\n  \n  # Check if the resultant string is a palindrome\n  is_palindrome <- s == paste(rev(strsplit(s, NULL)[[1]]), collapse = \"\")\n  \n  # Return the resultant string and the palindrome check result\n  return(list(s, is_palindrome))\n}","tests":"test_humaneval <- function() {\n    candidate <- reverse_delete\n    stopifnot(isTRUE(all.equal(candidate('abcde', 'ae'), list('bcd', FALSE))))\n    stopifnot(isTRUE(all.equal(candidate('abcdef', 'b'), list('acdef', FALSE))))\n    stopifnot(isTRUE(all.equal(candidate('abcdedcba', 'ab'), list('cdedc', TRUE))))\n    stopifnot(isTRUE(all.equal(candidate('dwik', 'w'), list('dik', FALSE))))\n    stopifnot(isTRUE(all.equal(candidate('a', 'a'), list('', TRUE))))\n    stopifnot(isTRUE(all.equal(candidate('abcdedcba', ''), list('abcdedcba', TRUE))))\n    stopifnot(isTRUE(all.equal(candidate('abcdedcba', 'v'), list('abcdedcba', TRUE))))\n    stopifnot(isTRUE(all.equal(candidate('vabba', 'v'), list('abba', TRUE))))\n    stopifnot(isTRUE(all.equal(candidate('mamma', 'mia'), list('', TRUE))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_113","nl":"dzo_Tibt","pl":"r","prompt":"ནང་བསྐྱོད་གྱི་ཐིག་ i'th ནང་ ཨང་གྲངས་རྣམ་རྟོག་མེད་ཀྱི་ཐིག་ཁྲམ་ཚུ་ཡོདཔ་ཨིན།ནང་བསྐྱོད་ཀྱི་ string i. \" འདི་ནང་ལུ་ i ཚུ་ཆ་མཉམ་ཨང་གྲངས་ གིས་ཚབ་གཏང་དགོ།ཕྱིར་ཐོན་གྱི་ཆ་ཤས་རེ་རེ་ i འདི་ ནང་ལུ་ གྱངས་ཁ་མེད་པའི་ཆ་ཤས་ཚུ་ ཨིནམ་སྦེ་ངེས་འཛིན་འབད་དགོཔ་ཨིན།string གི་ཐོ་ཡིག་ཅིག་བྱིནམ་ད་ string རེ་རེ་ནང་ཨང་གྲངས་རྐྱངམ་ཅིག་ཡོདཔ་ལས་ list སླར་ལོག་འབདཝ་ཨིན།# >>> odd_count(c('1234567'))\n# c('the number of odd elements 4n the str4ng 4 of the 4nput.')\n# >>> odd_count(c('3', '11111111'))\n# c('the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.')\nodd_count <- function(lst) {","canonical_solution":"odd_count <- function(lst) {\n  sapply(lst, function(x) {\n    odd_digits <- sum(as.numeric(unlist(strsplit(x, \"\"))) %% 2 == 1)\n    sprintf(\"the number of odd elements %dn the str%2$sing %1$d of the %3$nput.\", odd_digits, odd_digits, odd_digits)\n  })\n}\n\n# Example usage\nprint(odd_count(c('1234567')))\nprint(odd_count(c('3', '11111111')))","tests":"test_humaneval <- function() {\n    candidate <- odd_count\n    stopifnot(isTRUE(all.equal(candidate(c('1234567')), c('the number of odd elements 4n the str4ng 4 of the 4nput.'))))\n    stopifnot(isTRUE(all.equal(candidate(c('3', '11111111')), c('the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'))))\n    stopifnot(isTRUE(all.equal(candidate(c('271', '137', '314')), c('the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_114","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་ གྱངས་ཁ་ཚུ་ཨང་གྲངས་ཧྲིལ་ཨང་ n གི་བེ་ཊར་ཅིག་བྱིན་ཏེ་ སྟོངམ་མེན་པའི་བེ་ཊར་ཆུང་ཤོས་ཀྱི་བསྡོམས་འཚོལ་དགོ།# >>> minSubArraySum(c(2, 3, 4, 1, 2, 4))\n# 1\n# >>> minSubArraySum(c(-1, -2, -3))\n# -6\nminSubArraySum <- function(nums) {","canonical_solution":"minSubArraySum <- function(nums) {\n  min_sum <- nums[1]\n  current_sum <- 0\n  \n  for (num in nums) {\n    if (current_sum > 0) {\n      current_sum <- 0\n    }\n    current_sum <- current_sum + num\n    if (current_sum < min_sum) {\n      min_sum <- current_sum\n    }\n  }\n  \n  return(min_sum)\n}","tests":"test_humaneval <- function() {\n    candidate <- minSubArraySum\n    stopifnot(isTRUE(all.equal(candidate(c(2, 3, 4, 1, 2, 4)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3)), -6)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3, 2, -10)), -14)))\n    stopifnot(isTRUE(all.equal(candidate(c(-9999999999999999)), -9999999999999999)))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 10, 20, 1000000)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3, 10, -5)), -6)))\n    stopifnot(isTRUE(all.equal(candidate(c(100, -1, -2, -3, 10, -5)), -6)))\n    stopifnot(isTRUE(all.equal(candidate(c(10, 11, 13, 8, 3, 4)), 3)))\n    stopifnot(isTRUE(all.equal(candidate(c(100, -33, 32, -1, 0, -2)), -33)))\n    stopifnot(isTRUE(all.equal(candidate(c(-10)), -10)))\n    stopifnot(isTRUE(all.equal(candidate(c(7)), 7)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, -1)), -1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_115","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་གཞི་ ༡:ཁྱོད་ཀྱིས་བེག་ཚུ་མར་ཕབ་འབད་དགོ་པའི་གྱངས་ཁ་དེ་འཐོན་འབད།ཁྱོད་ཀྱི་ལཱ་འདི་ ཆུ་དོང་འདི་ལངམ་སྦེ་འབད་ནིའི་དོན་ལུ་ ཆུ་རྫམ་འདི་ལག་ལེན་འཐབ་དགོ།དེ་ལས་བེག་ཆ་མཉམ་ནང་ ཚད་གཞི་གཅིག་རང་ཡོདཔ་ཨིན།ཆུ་རྐ་རེ་ལུ་ ཆུ་བླུག་ནིའི་དོན་ལུ་ ཆུ་རྫིང་རེ་ཡོདཔ་ད་དེ་ལས་གྲལ་ཐིག་ནང་ལུ་ ༡་རེ་གིས་ ཆུ་གི་ཆ་ཕྲན་གཅིག་འདི་མཚོན་འབདཝ་ཨིན།ཁྱོད་ཀྱིས་ ཟུར་ལམ་གྲུ་བཞི་འབད་མི་ ཟུར་ལམ་རེ་ཐོབ་ཨིན། ཟུར་ལམ་རེ་རེ་གིས་ ཟུར་ལམ་གཅིག་འདི་ངོ་ཚབ་འབདཝ་ཨིན།# >>> max_fill(list(c(0, 0, 1, 0), c(0, 1, 0, 0), c(1, 1, 1, 1)), 1)\n# 6\n# Example 2:\n# >>> max_fill(list(c(0, 0, 1, 1), c(0, 0, 0, 0), c(1, 1, 1, 1), c(0, 1, 1, 1)), 2)\n# 5\n# Example 3:\n# >>> max_fill(list(c(0, 0, 0), c(0, 0, 0)), 5)\n# 0\n# Constraints:\n#     * all wells have the same length\n#     * 1 <= grid.length <= 10^2\n#     * 1 <= grid[:,1].length <= 10^2\n#     * grid[i][j] -> 0 | 1\n#     * 1 <= capacity <= 10\nmax_fill <- function(grid, capacity) {","canonical_solution":"max_fill <- function(grid, capacity) {\n  total_water <- sum(unlist(grid))\n  num_buckets_needed <- ceiling(total_water \/ capacity)\n  return(num_buckets_needed)\n}","tests":"test_humaneval <- function() {\n    candidate <- max_fill\n    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 1, 0), c(0, 1, 0, 0), c(1, 1, 1, 1)), 1), 6)))\n    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 1, 1), c(0, 0, 0, 0), c(1, 1, 1, 1), c(0, 1, 1, 1)), 2), 5)))\n    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 0), c(0, 0, 0)), 5), 0)))\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 1, 1, 1), c(1, 1, 1, 1)), 2), 4)))\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 1, 1, 1), c(1, 1, 1, 1)), 9), 2)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_116","nl":"dzo_Tibt","pl":"r","prompt":"འདི་ཚུ་ལག་ལེན་འཐབ་དགོ་པ་ཅིན་:ཨང་གྲངས་འདྲ་མཉམ་ཅིག་ཡོད་པ་ཅིན་ ཨང་གྲངས་བཅུ་ཐམ་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ།གཅིག་གཉིས་སྦེ་བཙུགསཔ་ད་ ཨང་གྲངས་ཚུ་ཡར་འཕར་འགྱོ་ནུགའ་ནི་ཀཱད་ལུ་ ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཧྲིལ་བུའི་ ཝི་ཅཊ་འདི་ ཟེར་མི་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ།# >>> sort_array(c(1, 5, 2, 3, 4))\n# c(1, 2, 3, 4, 5)\n# >>> sort_array(c(-2, -3, -4, -5, -6))\n# c(-6, -5, -4, -3, -2)\n# >>> sort_array(c(1, 0, 2, 3, 4))\n# c(0, 1, 2, 3, 4)\nsort_array <- function(arr) {","canonical_solution":"sort_array <- function(arr) {\n  # Filter out negative numbers and sort them directly\n  negative_numbers <- sort(arr[arr < 0])\n  \n  # Process non-negative numbers\n  non_negative_numbers <- arr[arr >= 0]\n  \n  # Sort non-negative numbers based on number of 1s in binary representation, then by decimal value\n  sorted_non_negative_numbers <- non_negative_numbers[order(sapply(non_negative_numbers, function(x) {\n    sum(as.integer(intToBits(x)))\n  }), non_negative_numbers)]\n  \n  # Combine sorted negative and non-negative numbers\n  c(negative_numbers, sorted_non_negative_numbers)\n}","tests":"test_humaneval <- function() {\n    candidate <- sort_array\n    stopifnot(isTRUE(all.equal(candidate(c(1, 5, 2, 3, 4)), c(1, 2, 4, 3, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c(-2, -3, -4, -5, -6)), c(-4, -2, -6, -5, -3))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 2, 3, 4)), c(0, 1, 2, 4, 3))))\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)), c(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 6, 44, 12, 32, 5)), c(32, 3, 5, 6, 12, 44))))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8, 16, 32)), c(2, 4, 8, 16, 32))))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8, 16, 32)), c(2, 4, 8, 16, 32))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_117","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དྲན་གསོ། ཁྱོད་ཀྱིས་ཨེབ་གཏང་ཐིག་ནང་ ཡིག་འབྲུ་དང་བར་སྟོང་ཚུ་རྐྱངམ་ཅིག་ཡོད་ཟེར་ཆ་བཞག་བཏུབ།string s འདི་སྟོངམ་ཨིན་པ་ཅིན་ ལས་འགན་འདི་གིས་ སྟོངམ་ཐོ་ཡིག་ཅིག་ལོག་བྱིན་འོང་།n གི་ཁ་ཚིག་ཚུ་ ཚིག་ཡིག་གི་རིམ་པ་ནང་འོང་ནིའི་དོན་ལུ་ string s ནང་ལས་ དོན་དག་ཅིག་རང་ ཡོད་པའི་ཚིག་ཡིག་ཚུ་གི་ཐོ་ཅིག་སླར་ལོག་འབདཝ་ཨིན།string s དང་ natural number n ཚུ་བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ ལག་ལེན་བསྟར་སྤྱོད་འབད་དགོཔ་ཨིན།# >>> select_words('Mary had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n# c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {","canonical_solution":"select_words <- function(s, n) {\n  vowels <- c('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  words <- strsplit(s, \" \")[[1]]\n  result <- sapply(words, function(word) {\n    consonants_count <- nchar(gsub(paste(vowels, collapse = \"|\"), \"\", word))\n    if (consonants_count == n) return(word)\n    else return(NULL)\n  })\n  result <- result[!sapply(result, is.null)]\n  unname(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- select_words\n    stopifnot(isTRUE(all.equal(candidate('Mary had a little lamb', 4), c('little'))))\n    stopifnot(isTRUE(all.equal(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))))\n    stopifnot(isTRUE(all.equal(candidate('simple white space', 2), c())))\n    stopifnot(isTRUE(all.equal(candidate('Hello world', 4), c('world'))))\n    stopifnot(isTRUE(all.equal(candidate('Uncle sam', 3), c('Uncle'))))\n    stopifnot(isTRUE(all.equal(candidate('', 4), c())))\n    stopifnot(isTRUE(all.equal(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_118","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཁྱོད་ཀྱིས་བྱིན་ཡོད་པའི་ string འདི་ནང་ལུ་ ཨིང་སྐད་ཡིག་འབྲུ་རྐྱངམ་གཅིག་ཡོད་ཟེར་ཆ་བཞག་བཏུབ།གོང་གི་གནས་སྟངས་འདི་ནང་ ཚིག་ཡིག་ཚུ་ཐོབ་ཡོདཔ་ཨིན།འགོ་བཙུགས་དང་མཇུག་གི་སྐད་སྒྲ་ཚུ་རྩིས་མི་བཏུབ། མེད་པ་ཅིན་ སྟོང་པ་སྦེ་ལོག་གཏང་།ཚིག་གི་གཡས་ཁ་ཐུག་ལས་ ཟུར་སྒྲོམ་གཉིས་ (ཡིག་འབྲུ་ཆེ་ཆུང་ལུ་དྭངས་གསལ་སྦེ་) ཨིན།ཁྱོད་ཀྱིས་ཚིག་གཅིག་ཐོབ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ སྦུག་ལས་ ཡོད་མི་ ཕྲང་ཡིག་འདི་འཚོལ་ནི་ཨིན།# >>> get_closest_vowel('yogurt')\n# 'u'\n# >>> get_closest_vowel('FULL')\n# 'U'\n# >>> get_closest_vowel('quick')\n# ''\n# >>> get_closest_vowel('ab')\n# ''\nget_closest_vowel <- function(word) {","canonical_solution":"get_closest_vowel <- function(word) {\n  vowels <- c('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  n <- nchar(word)\n  \n  # Iterate from the second to last position to the second position\n  for (i in (n-1):2) {\n    if (substr(word, i, i) %in% vowels) {\n      if (!substr(word, i-1, i-1) %in% vowels && !substr(word, i+1, i+1) %in% vowels) {\n        return(substr(word, i, i))\n      }\n    }\n  }\n  \n  # Return empty string if no vowel is found\n  return('')\n}","tests":"test_humaneval <- function() {\n    candidate <- get_closest_vowel\n    stopifnot(isTRUE(all.equal(candidate('yogurt'), 'u')))\n    stopifnot(isTRUE(all.equal(candidate('full'), 'u')))\n    stopifnot(isTRUE(all.equal(candidate('easy'), '')))\n    stopifnot(isTRUE(all.equal(candidate('eAsy'), '')))\n    stopifnot(isTRUE(all.equal(candidate('ali'), '')))\n    stopifnot(isTRUE(all.equal(candidate('bad'), 'a')))\n    stopifnot(isTRUE(all.equal(candidate('most'), 'o')))\n    stopifnot(isTRUE(all.equal(candidate('ab'), '')))\n    stopifnot(isTRUE(all.equal(candidate('ba'), '')))\n    stopifnot(isTRUE(all.equal(candidate('quick'), '')))\n    stopifnot(isTRUE(all.equal(candidate('anime'), 'i')))\n    stopifnot(isTRUE(all.equal(candidate('Asia'), '')))\n    stopifnot(isTRUE(all.equal(candidate('Above'), 'o')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_119","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཐབས་ལམ་ལེགས་ཤོམ་ཅིག་ཡོད་པ་ཅིན་ 'Yes' སླར་ལོག་འབད་ དེ་ལས་གཞན་པ་ཅིན་ 'No' སླར་ལོག་འབད་ \"())\"འདི་མེན།ཚད་གཞི་ཚུ་ཆ་མཉམ་ཨིན། དཔེར་ན་: string '(((() 'འདི་ལེགས་ཤོམ་ཨིན་ དེ་ལས་ string string S འདི་ལེགས་ཤོམ་སྦེ་བརྩི་ནི་ཨིན་པ་ཅིན་ S ནང་ལུ་ ནང་ཐིག་ག་ར་ལེགས་ཤོམ་སྦེ་རང་ཡོད་པ་ཅིན་རྐྱངམ་གཅིག་ཨིན།ཚད་འཛིན་འབད་ཡོད་པའི་ཐིག་ཁྲམ་འདི་ ལེགས་ལྡན་ཅིག་སྦེ་འཐོན་འོང་།ཁྱོད་ཀྱི་ལཱ་འདི་ string གཉིས་བསྡོམས་འབད་ཚུགས་ག་ བལྟ་ནི་ཨིན།ནང་ཐིག་ནང་ \"(\" ཡང་ན་ ནང་ཐིག་གི་མཐའ་མ་ནང་ \") \"རྐྱངམ་ཅིག་བཙུགས་དགོ།ཁྱོད་ཀྱིས་ཐིག་ཁྲམ་གཉིས་ཡོད་པའི་ཐོ་ཡིག་ཐོབ་སྟེ་ ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ open ཟེར་ཐིག་ཁྲམ་ཡོདཔ་ཨིན།# >>> match_parens(c('()(', ')'))\n# 'Yes'\n# >>> match_parens(c(')', ')'))\n# 'No'\nmatch_parens <- function(lst) {","canonical_solution":"match_parens <- function(lst) {\n  is_balanced <- function(s) {\n    balance <- 0\n    for (ch in strsplit(s, \"\")[[1]]) {\n      if (ch == '(') {\n        balance <- balance + 1\n      } else {\n        balance <- balance - 1\n      }\n      if (balance < 0) return(FALSE)\n    }\n    return(balance == 0)\n  }\n  \n  s1 <- lst[1]\n  s2 <- lst[2]\n  \n  if (is_balanced(paste0(s1, s2)) || is_balanced(paste0(s2, s1))) {\n    return('Yes')\n  } else {\n    return('No')\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- match_parens\n    stopifnot(isTRUE(all.equal(candidate(c('()(', ')')), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate(c(')', ')')), 'No')))\n    stopifnot(isTRUE(all.equal(candidate(c('(()(())', '())())')), 'No')))\n    stopifnot(isTRUE(all.equal(candidate(c(')())', '(()()(')), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate(c('(())))', '(()())((')), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate(c('()', '())')), 'No')))\n    stopifnot(isTRUE(all.equal(candidate(c('(()(', '()))()')), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate(c('((((', '((())')), 'No')))\n    stopifnot(isTRUE(all.equal(candidate(c(')(()', '(()(')), 'No')))\n    stopifnot(isTRUE(all.equal(candidate(c(')(', ')(')), 'No')))\n    stopifnot(isTRUE(all.equal(candidate(c('(', ')')), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate(c(')', '(')), 'Yes')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_120","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་གཞི་ ༡:རིང་ཚད་ k དང་ ཨང་གྲངས་ k ལས་ལྷག་པའི་གྲངས་སུ་ཨིན་པའི་ཨེ་རེ་ཚུ་ཨིན།ཨང་གྲངས་ཧྲིལ་བུའི་བེ་ཊར་ arr དང་ ནུས་པའི་ཨང་གྲངས་ཧྲིལ་བུམ་ k ཅིག་བྱིན་པ་ཅིན་ དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན།# >>> maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4, 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n# c(2)\n# Note:\n#     1. The length of the vector will be in the range of [1, 1000].\n#     2. The elements in the vector will be in the range of [-1000, 1000].\n#     3. 0 <= k <= len(arr)\nmaximum <- function(arr, k) {","canonical_solution":"maximum <- function(arr, k) {\n  return(sort(tail(sort(arr), k)))\n}","tests":"test_humaneval <- function() {\n    candidate <- maximum\n    stopifnot(isTRUE(all.equal(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c(4, -4, 4), 2), c(4, 4))))\n    stopifnot(isTRUE(all.equal(candidate(c(-3, 2, 1, 2, -1, -2, 1), 1), c(2))))\n    stopifnot(isTRUE(all.equal(candidate(c(123, -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))))\n    stopifnot(isTRUE(all.equal(candidate(c(-123, 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 5, -7), 1), c(5))))\n    stopifnot(isTRUE(all.equal(candidate(c(4, -4), 2), c(-4, 4))))\n    stopifnot(isTRUE(all.equal(candidate(c(-10, 10), 2), c(-10, 10))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, -23, 243, -400, 0), 0), c())))\n}\ntest_humaneval()"},{"task_id":"HumanEval_121","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ ཨང་གྲངས་ཧྲིལ་བུམ་མེན་པའི་ཐོ་ཡིག་ཅིག་བྱིན་པ་ཅིན་ གནས་རིམ་གཉིས་པ་ནང་ཡོད་པའི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ལོག་གཏང་།# >>> solution(c(5, 8, 7, 1))\n# 12\n# >>> solution(c(3, 3, 3, 3, 3))\n# 9\n# >>> solution(c(30, 13, 24, 321))\n# 0\nsolution <- function(lst) {","canonical_solution":"solution <- function(lst) {\n  sum(lst[seq(2, length(lst), by = 2)][lst[seq(2, length(lst), by = 2)] %% 2 != 0])\n}","tests":"test_humaneval <- function() {\n    candidate <- solution\n    stopifnot(isTRUE(all.equal(candidate(c(5, 8, 7, 1)), 12)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 3, 3, 3, 3)), 9)))\n    stopifnot(isTRUE(all.equal(candidate(c(30, 13, 24, 321)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(5, 9)), 5)))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(30, 13, 23, 32)), 23)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 13, 2, 9)), 3)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_122","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཨེ་རེ་གི་ཆ་ཤས་དང་པའི་ ཀ་ཆ་ཤས་ཚུ་ནང་ལས་ཨང་གྲངས་གཉིས་ལས་ལྷག་སྟེ་མེད་པའི་ཆ་ཤས་ཚུ་གི་བསྡོམས་ཨིན།ཨང་གྲངས་ཧྲིལ་བུམ་ arr དང་ ཨང་གྲངས་ཧྲིལ་བུམ་ k གི་ སྟོངམ་མེན་པའི་ ཝི་ཅཊར་ཅིག་བྱིན་པ་ཅིན་ སླར་ལོག་འབདཝ་ཨིན།# >>> add_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n# 24\n# Constraints:\n#     1. 1 <= len(arr) <= 100\n#     2. 1 <= k <= len(arr)\nadd_elements <- function(arr, k) {","canonical_solution":"add_elements <- function(arr, k) {\n  sum(arr[1:k][nchar(abs(arr[1:k])) <= 2])\n}","tests":"test_humaneval <- function() {\n    candidate <- add_elements\n    stopifnot(isTRUE(all.equal(candidate(c(1, -2, -3, 41, 57, 76, 87, 88, 99), 3), -4)))\n    stopifnot(isTRUE(all.equal(candidate(c(111, 121, 3, 4000, 5, 6), 2), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(11, 21, 3, 90, 5, 6, 7, 8, 9), 4), 125)))\n    stopifnot(isTRUE(all.equal(candidate(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4), 24)))\n    stopifnot(isTRUE(all.equal(candidate(c(1), 1), 1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_123","nl":"dzo_Tibt","pl":"r","prompt":"get_odd_collatz(5) གིས་ [1, 5] སླར་ལོག་འབདཝ་ཨིན། # ཀོ་ལ་ཊ་ཛརིམ་པ་ ༥ གི་དོན་ལུ་འདི་ [༥ ༡༦ ༨ ༤ ༢ ༡]ཨིནམ་ལས་ ཨང་གྲངས་ཆ་མེད་ཚུ་ ༡ དང་ ༥ རྐྱངམ་གཅིག་ཨིན།དཔེ་འབད་བ་ཅིན་: 2.ལོག་བཏང་མི་ཐོ་དེ་ ཡར་སེང་རིམ་སྒྲིག་ནང་དབྱེ་བ་ཕྱེ་ཡོདཔ་ཨིན།༡། Collatz (༡) འདི་ [1] ཨིན།དྲན་གསོ།ཚིག་ཡིག་དང་གཅིག་བསྡོམས་ཏེ་ ཚོད་དཔག་འདི་ n གི་གནས་གོང་ག་དེ་ཅིག་ཨིན་རུང་ ཚིག་ཡིག་རིམ་པ་འདི་ དུས་རྒྱུན་དུ་ 1 ལུ་ལྷོད་འོང་།ཧེ་མའི་གནས་རིམ་འདི་ གྱངས་ཁ་མ་གཅིགཔ་ཨིན་པ་ཅིན་ ཤུལ་མའི་གནས་རིམ་འདི་ ཧེ་མའི་གནས་རིམ་ལས་ ༣ ལུ་གྱངས་ཁ་རྐྱབ་ཨིན།ཤུལ་མའི་གནས་རིམ་འདི་ སྦྲགས་ཏེ་ཡོད་པ་ཅིན་ ཤུལ་མའི་གནས་རིམ་འདི་ གི་ཕྱེད་ཀ་ཨིན།འ་ནི་བཟུམ་སྦེ་: ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཧྲིལ་བུམ་ n ལས་འགོ་བཙུགསཔ་ཨིན། དེ་ལས་ ཚིག་རེ་རེ་ ནང་ལས་ཐོབ་ཨིན།ཀོ་ལ་ཊ་གི་དཔའ་བཅམ་འདི་ རྩིས་ཀྱི་དཔའ་བཅམ་ཅིག་ཨིནམ་ད་ འདི་ནང་ དབྱེ་ཞིབ་འབད་ཡོད་པའི་རིམ་པ་ཅིག་ལུ་ འབྲེལ་བ་ཡོདཔ་ཨིན།ཤོག་གྲངས་ཚུའི་ནང་ ཨང་གྲངས་ཆ་མཉམ་ n ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་ཚུ་ ཚད་འཛིན་འབད་ཡོད་པའི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་།# >>> get_odd_collatz(5)\n# c(1, 5)\nget_odd_collatz <- function(n) {","canonical_solution":"get_odd_collatz <- function(n) {\n  collatz_sequence <- function(n) {\n    sequence <- c(n)\n    while (n != 1) {\n      if (n %% 2 == 0) {\n        n <- n \/ 2\n      } else {\n        n <- 3 * n + 1\n      }\n      sequence <- c(sequence, n)\n    }\n    return(sequence)\n  }\n  \n  sequence <- collatz_sequence(n)\n  odd_numbers <- unique(sequence[sequence %% 2 != 0])\n  return(sort(odd_numbers))\n}","tests":"test_humaneval <- function() {\n    candidate <- get_odd_collatz\n    stopifnot(isTRUE(all.equal(candidate(14), c(1, 5, 7, 11, 13, 17))))\n    stopifnot(isTRUE(all.equal(candidate(5), c(1, 5))))\n    stopifnot(isTRUE(all.equal(candidate(12), c(1, 3, 5))))\n    stopifnot(isTRUE(all.equal(candidate(1), c(1))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_124","nl":"dzo_Tibt","pl":"r","prompt":"ཚེས་གྲངས་འདི་ ཨེཆ་ཨེམ་-དི་-ཨའི་ཨའི་གི་རྣམ་པ་ནང་ལུ་དགོཔ་ཨིན།ཟླཝ་འདི་ ༡ ལས་ཉུང་ ཡང་ན་ ༡༢ ལས་ལྷག་སྟེ་མི་འོང་།ཟླཝ་ ༡,༣,༥,༧,༨,༡༠,༡༢ ཀྱི་དོན་ལུ་ ཉིན་གྲངས་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༡ ལས་ལྷག་སྟེ་མེདཔ་ད་ ཟླཝ་ ༤,༦,༩,༡༡ གྱི་དོན་ལུ་ ཉིན་གྲངས་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༠ ལས་ལྷག་སྟེ་མེདཔ་དང་ ཟླཝ་ ༢ ཀྱི་དོན་ལུ་ ཉིན་གྲངས་ ༡ ལས་ཉུང་ ཡང་ན་ ༢༩ ལས་ལྷག་སྟེ་མེདཔ་ཨིན།1. ཚེས་གྲངས་ཐིག་ཁྲམ་འདི་ སྟོངམ་མེན།ཚེས་གྲངས་འདི་ འོག་གི་བཀོད་རྒྱ་ཚུ་ཆ་མཉམ་ར་ཆ་མཉམ་ར་ཆ་བཞག་པ་ཅིན་ ཆ་གནས་ཨིན།ཚེས་གྲངས་འདི་བདེན་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ FALSE སླར་ལོག་འབདཝ་ཨིན།ཁྱོད་ཀྱིས་ ཚེས་གྲངས་ཐིག་ཡིག་ཅིག་ལུ་ ཆ་གནས་འབད་ནིའི་དོན་ལས་ ལས་འགན་ཅིག་འབྲི་དགོཔ་ཨིན།# >>> valid_date('03-11-2000')\n# TRUE\n# >>> valid_date('15-01-2012')\n# FALSE\n# >>> valid_date('04-0-2040')\n# FALSE\n# >>> valid_date('06-04-2020')\n# TRUE\n# >>> valid_date('06\/04\/2020')\n# FALSE\nvalid_date <- function(date) {","canonical_solution":"valid_date <- function(date) {\n  # Check if the date is not empty\n  if (date == \"\") {\n    return(FALSE)\n  }\n  \n  # Check the format of the date\n  if (!grepl(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\", date)) {\n    return(FALSE)\n  }\n  \n  # Extract the month, day, and year\n  parts <- unlist(strsplit(date, \"-\"))\n  month <- as.numeric(parts[1])\n  day <- as.numeric(parts[2])\n  year <- as.numeric(parts[3])\n  \n  # Check if the month is valid\n  if (month < 1 || month > 12) {\n    return(FALSE)\n  }\n  \n  # Check if the day is valid\n  if (month %in% c(1, 3, 5, 7, 8, 10, 12) && (day < 1 || day > 31)) {\n    return(FALSE)\n  }\n  \n  if (month %in% c(4, 6, 9, 11) && (day < 1 || day > 30)) {\n    return(FALSE)\n  }\n  \n  if (month == 2 && (day < 1 || day > 29)) {\n    return(FALSE)\n  }\n  \n  return(TRUE)\n}","tests":"test_humaneval <- function() {\n    candidate <- valid_date\n    stopifnot(isTRUE(all.equal(candidate('03-11-2000'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('15-01-2012'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('04-0-2040'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('06-04-2020'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('01-01-2007'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('03-32-2011'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('04-31-3000'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('06-06-2005'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('21-31-2000'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('04-12-2003'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('04122003'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('20030412'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('2003-04'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('2003-04-12'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('04-2003'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_125","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ ཨེཕ་ཊི་, ཨོཌི (a) =༠ ཨོཌི (b) =༡ ཨོཌི (z) =༢༥ཀམ་པ་ལུ་ཆ་བགོས་འབད་དགོཔ་ཨིན། ཀམ་པ་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ནང་ལུ་ཡིག་ཆུང་གི་གྱངས་ཁ་འདི་ གྱངས་ཁ་མ་འདྲཝ་སྦེ་ལོག་གཏང་དགོ།ཚིག་ཡིག་གི་ཐིག་ཁྲམ་ཅིག་བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ འབྲི་ཤོག་ནང་ སྟོང་པ་ཡོད་མེད་པ་ཅིན་ ཡིག་འབྲུ་ཚུ་ས་སྟོང་ནང་བགོ་བཤའ་རྐྱབ་སྟེ་ལོག་གཏང་།# >>> split_words('Hello world!')\n# c('Hello', 'world!')\n# >>> split_words('Hello,world!')\n# c('Hello', 'world!')\n# >>> split_words('abcdef')\n# 3\nsplit_words <- function(txt) {","canonical_solution":"split_words <- function(txt) {\n  if (grepl(\"\\\\s\", txt)) {\n    return(strsplit(txt, \"\\\\s+\")[[1]])\n  } else if (grepl(\",\", txt)) {\n    return(strsplit(txt, \",\")[[1]])\n  } else {\n    odd_order_count <- sum(\n      sapply(unlist(strsplit(txt, \"\")), function(x) {\n        ord <- utf8ToInt(tolower(x)) - utf8ToInt(\"a\")\n        ord %% 2 == 1\n      })\n    )\n    return(odd_order_count)\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- split_words\n    stopifnot(isTRUE(all.equal(candidate('Hello world!'), c('Hello', 'world!'))))\n    stopifnot(isTRUE(all.equal(candidate('Hello,world!'), c('Hello', 'world!'))))\n    stopifnot(isTRUE(all.equal(candidate('Hello world,!'), c('Hello', 'world,!'))))\n    stopifnot(isTRUE(all.equal(candidate('Hello,Hello,world !'), c('Hello,Hello,world', '!'))))\n    stopifnot(isTRUE(all.equal(candidate('abcdef'), 3)))\n    stopifnot(isTRUE(all.equal(candidate('aaabb'), 2)))\n    stopifnot(isTRUE(all.equal(candidate('aaaBb'), 1)))\n    stopifnot(isTRUE(all.equal(candidate(''), 0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_126","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ ཨང་གྲངས་, སླར་ལོག་འབདཝ་ཨིན། FALSE དེ་ ནེ་གཱཊི་ཨང་གྲངས་དང་ ཨང་གྲངས་ཧྲིལ་བུམ་རྐྱངམ་ཅིག་ཨིན་པའི་ངེས་འཛིན་འབདཝ་ཨིན།ཤོག་ལེབ་འདི་ ཤོག་ལེབ་གཅིག་ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཀྱི་ཐོ་འདི་བྱིན་ཏེ་ ཨང་གྲངས་ཚུ་རིམ་སྒྲིག་འབད་རུང་ ཡང་ན་མེན་རུང་ལོག་གཏང་།# >>> is_sorted(c(5))\n# TRUE\n# >>> is_sorted(c(1, 2, 3, 4, 5))\n# TRUE\n# >>> is_sorted(c(1, 3, 2, 4, 5))\n# FALSE\n# >>> is_sorted(c(1, 2, 3, 4, 5, 6))\n# TRUE\n# >>> is_sorted(c(1, 2, 3, 4, 5, 6, 7))\n# TRUE\n# >>> is_sorted(c(1, 3, 2, 4, 5, 6, 7))\n# FALSE\n# >>> is_sorted(c(1, 2, 2, 3, 3, 4))\n# TRUE\n# >>> is_sorted(c(1, 2, 2, 2, 3, 4))\n# FALSE\nis_sorted <- function(lst) {","canonical_solution":"is_sorted <- function(lst) {\n  if (length(lst) <= 1) {\n    return(TRUE)\n  }\n  \n  # Check for duplicates more than once\n  tbl <- table(lst)\n  if (any(tbl > 2)) {\n    return(FALSE)\n  }\n  \n  # Check if the list is sorted in ascending order\n  for (i in 2:length(lst)) {\n    if (lst[i] < lst[i - 1]) {\n      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}","tests":"test_humaneval <- function() {\n    candidate <- is_sorted\n    stopifnot(isTRUE(all.equal(candidate(c(5)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5, 6, 7)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c()), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, 2, 3, 4)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 3, 3, 4)), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, 3, 3, 4)), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_127","nl":"dzo_Tibt","pl":"r","prompt":"[འཛུལ་སྒོ་\/ཐོན་ཁུངས་] དཔེ་ཚད་ཚུ་: བར་མཚམས་གཉིས་ཆ་ར་ ཕྲད་མ་མཐུནམ་ཨིན་པ་ཅིན་ \"NO\" སླར་ལོག་འབདཝ་ཨིན།དེ་མེན་པ་ཅིན་ \"NO\" ཟེར་ལོག་གཏང་།གལ་སྲིད་ ཟུར་གྱི་རིང་ཚད་དེ་ ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ \"YES\" སླར་ལོག་འབད།འདི་ཡང་ 1 འདི་ཨང་གྲངས་ངོ་མ་མེན་པའི་ཨང་གྲངས་ཨིན།དཔེ་འབད་བ་ཅིན་ བར་མཚམས་ (1,3) དང་ (2,4) གི་བར་མཚམས་འདི་ (2,3) ཨིན།བར་མཚམས་འདི་ཨང་གྲངས་ངོ་མ་ཨིན།ཁྱོད་ཀྱི་ལཱ་འདི་ འ་ནི་གཉིས་ཆ་རའི་ ཕྲང་ལམ་གྱི་རིང་ཚད་འདི་ ངེས་གཏན་བཟོ་ནི་ཨིན།བར་མཚམས་ག་རའི་དོན་ལུ་ འདི་གི་འགོ་འདི་ ཆུང་བ་ ཡང་ན་ མཐའ་མའི་མཐའ་མ་འདི་དང་འདྲན་འདྲ་སྦེ་ ཆ་བཞགཔ་ཨིན།འགོ་བཙུགས་དང་མཇུག་གཉིས་ཆ་ར་ཚུད་དེ་ཡོདཔ་ཨིན།བྱིན་ཡོད་པའི་བར་སྟོང་འདི་བསྡམས་ཡོདཔ་དང་ འདི་ཡང་ བར་སྟོང་འདི་ (འགོ་བཙུགས་,མཇུག་) ཨིན།གནས་ཡུན་རེ་རེ་ནི་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཆ་ཕྲན་ཨིན། དཔེར་ན་ གནས་ཡུན་ = (འགོ་བཙུགས་, མཇུག་) = (1, 2) ཨིན།ཁྱོད་ཀྱིས་བར་སྟོང་གཉིས་ཐོབ་ཡོདཔ་ཨིན།# >>> intersection(c(1, 2), c(2, 3))\n# 'NO'\n# >>> intersection(c(-1, 1), c(0, 4))\n# 'NO'\n# >>> intersection(c(-3, -1), c(-5, 5))\n# 'YES'\nintersection <- function(interval1, interval2) {","canonical_solution":"intersection <- function(interval1, interval2) {\n  start1 <- interval1[1]\n  end1 <- interval1[2]\n  start2 <- interval2[1]\n  end2 <- interval2[2]\n  \n  # Determine the start and end of the intersection\n  intersection_start <- max(start1, start2)\n  intersection_end <- min(end1, end2)\n  \n  # Calculate the length of the intersection\n  length_of_intersection <- intersection_end - intersection_start\n  \n  # If there's no intersection, return \"NO\"\n  if (length_of_intersection < 0) {\n    return('NO')\n  }\n  \n  # Check if the length is a prime number\n  is_prime <- function(num) {\n    if (num <= 1) {\n      return(FALSE)\n    }\n    for (i in 2:sqrt(num)) {\n      if (num %% i == 0) {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  }\n  \n  # Return \"YES\" if the length is prime, otherwise \"NO\"\n  if (is_prime(length_of_intersection)) {\n    return('YES')\n  } else {\n    return('NO')\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- intersection\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(2, 3)), 'NO')))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, 1), c(0, 4)), 'NO')))\n    stopifnot(isTRUE(all.equal(candidate(c(-3, -1), c(-5, 5)), 'YES')))\n    stopifnot(isTRUE(all.equal(candidate(c(-2, 2), c(-4, 0)), 'YES')))\n    stopifnot(isTRUE(all.equal(candidate(c(-11, 2), c(-1, -1)), 'NO')))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(3, 5)), 'NO')))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(1, 2)), 'NO')))\n    stopifnot(isTRUE(all.equal(candidate(c(-2, -2), c(-3, -2)), 'NO')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_128","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དྲན་གསོ།: སྟོངམ་ཡོད་པའི་ arr གི་དོན་ལུ་ NULL སླར་ལོག་འབདཝ་ཨིན།ཝེ་ཊར་ནང་ལུ་ ཨང་གྲངས་རེ་རེ་ལུ་ ༡ དང་ ༡ དང་ ༠ སྦེ་ངོ་ཚབ་འབདཝ་ཨིན།ཨང་གྲངས་ཧྲིལ་བུའི་ཆེ་ཆུང་ཚུ་བསྡོམས་ཏེ་ རྟགས་མཚན་ཆ་མཉམ་གྱི་ཐོན་རིམ་གྱིས་ ཕབ་ལེན་འབདཝ་ཨིན།ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་ཨར་ཨར་ ཨང་གྲངས་ཧྲིལ་བུམ་ཐོབ་ཡོདཔ་ལས་ ཁྱོད་ཀྱིས་ལོག་གཏང་དགོཔ་ཨིན།# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n# 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {","canonical_solution":"prod_signs <- function(arr) {\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  magnitude_sum <- sum(abs(arr))\n  sign_product <- prod(sign(arr))\n  return(magnitude_sum * sign_product)\n}","tests":"test_humaneval <- function() {\n    candidate <- prod_signs\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, -4)), -9)))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)))\n    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 2, -1, -1, 9)), 20)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, -1, 1)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, 1, 1)), -4)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, 1, 0)), 0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_129","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཕྲ་རིང་ནང་ལུ་ཉུང་མཐའ་ལམ་འདི་འགྱོ་མི་ ཀེར་ཐིག་གི་གནས་གོང་ཚུ་རིམ་སྒྲིག་འབད་ཡོད་པའི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན།འདི་ལུ་ལན་འདི་ངེས་གཏན་སྦེ་རང་ ཨིན།lst_A[j] = lst_B[j] ཨིན།འདི་བཟུམ་འབད་ lst_A[i] < lst_B[i] དང་ j (1 <= j < i) གི་དོན་ལུ་ ང་བཅས་ལུ་ lst_Bལས་ལྷག་པའི་ ཚིག་གཞན་ཅིག་ནང་འབད་བ་ཅིན་ ཨང་གྲངས་ཧྲིལ་ཨང་གི་ཐོ་ཡིག་ i (1 <= i <= k) ཅིག་ཡོདཔ་ཨིན།རྒྱུད་རིམ་འདི་ (འདི་ཚུ་ལུ་ lst_A དང་ lst_B ཟེར་སླབ་གེ་) རྒྱུད་རིམ་འདི་ཚིག་མཛོད་རིག་པ་ནང་ལུ་ཉུང་སུ་ཅིག་ཨིན།ནང་ཐིག་ A དང་ B ཚུ་ནང་ གནས་གོང་ཚུ་རིམ་སྒྲིག་འབད་ཞིནམ་ལས་ ལམ་ A (རིང་ཚད་ k) འདི་ ལམ་ B (རིང་ཚད་ k) ལས་ཆུང་བ་སྦེ་བརྩི་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཇི་རིཊི་ནང་ལས་འཐོན་འགྱོ་མི་ཚུགས།ཚུ་སོ་སོ་སྦེ་ སྟོན་དགོཔ་ཨིན།)ཐབས་ལམ་ k འབད་མི་ལུ་བལྟ་བ་ཅིན་ ཀེལ་སི་ k སྦེ་འོང་ནི་ཨིནམ་ཤེས་དགོ (མི་ ཨིན།ཌའི་ལོག་ནང་ལུ་འདི་ཡང་ ཁྱོད་ཀྱིས་ ཕྲང་ལམ་གྱི་ཟུར་ཁ་ལུ་ཡོད་པའི་ ཀེལ་སི་ཚུ་ནང་འགྱོ་ཚུགས།ཇི་ལག་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ ཇི་ལག་གི་ས་སྒོ་འདི་ཁྱོད་ཀྱིས་ ཀ་རིང་ཚད་ཀྱི་ཕྲང་ལམ་ཆུང་ཤོས་འདི་ འཚོལ་དགོ་འོང་། ཁྱོད་ཀྱིས་ འགོ་བཙུགས་ཚུགས།inclusive འདི་ grid གི་སྒོ་སྒྲིག་ནང་ལུ་ ཚར་གཅིག་རང་མཐོང་འོང་།གིཌི་གི་སྒོ་སྒྲིག་རེ་རེའི་ནང་ གནས་གོང་ཅིག་ཡོདཔ་ཨིན། [༡, ན * ན] གི་ནང་དོན་ནང་གི་ཨང་གྲངས་ཧྲིལ་བུམ་རེ་རེགྲལ་ཐིག་ N དང་ ཀེར་ཐིག་ N (N >=2) དང་ ནུས་པའི་ཨང་གྲངས་ཧྲིལ་བུམ་ k ཡོད་མི་ལུ་བརྟེན་།# >>> minPath(list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)), 3)\n# c(1, 2, 1)\n# >>> minPath(list(c(5, 9, 3), c(4, 1, 6), c(7, 8, 2)), 1)\n# c(1)\nminPath <- function(grid, k) {","canonical_solution":"minPath <- function(grid, k) {\n  N <- length(grid)\n  directions <- list(c(0, 1), c(1, 0), c(0, -1), c(-1, 0))\n  \n  is_valid <- function(x, y) {\n    return(x >= 1 && x <= N && y >= 1 && y <= N)\n  }\n  \n  # DFS to find all paths\n  dfs <- function(x, y, path) {\n    if (length(path) == k) {\n      paths <<- append(paths, list(path))\n      return()\n    }\n    \n    for (direction in directions) {\n      nx <- x + direction[1]\n      ny <- y + direction[2]\n      if (is_valid(nx, ny)) {\n        dfs(nx, ny, c(path, grid[[nx]][[ny]]))\n      }\n    }\n  }\n  \n  paths <- list()\n  \n  # Start from every cell\n  for (i in 1:N) {\n    for (j in 1:N) {\n      dfs(i, j, c(grid[[i]][[j]]))\n    }\n  }\n  \n  # Find and return the lexicographically smallest path\n  min_path <- paths[[1]]\n  for (path in paths) {\n    if (path < min_path) {\n      min_path <- path\n    }\n  }\n  \n  return(min_path)\n}","tests":"test_humaneval <- function() {\n    candidate <- minPath\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)), 3), c(1, 2, 1))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(5, 9, 3), c(4, 1, 6), c(7, 8, 2)), 1), c(1))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4), c(5, 6, 7, 8), c(9, 10, 11, 12), c(13, 14, 15, 16)), 4), c(1, 2, 1, 2))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(6, 4, 13, 10), c(5, 7, 12, 1), c(3, 16, 11, 15), c(8, 14, 9, 2)), 7), c(1, 10, 1, 10, 1, 10, 1))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(8, 14, 9, 2), c(6, 4, 13, 15), c(5, 7, 1, 12), c(3, 10, 11, 16)), 5), c(1, 7, 1, 7, 1))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(11, 8, 7, 2), c(5, 16, 14, 4), c(9, 3, 15, 6), c(12, 13, 10, 1)), 9), c(1, 6, 1, 6, 1, 6, 1, 6, 1))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(12, 13, 10, 1), c(9, 3, 15, 6), c(5, 16, 14, 4), c(11, 8, 7, 2)), 12), c(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(2, 7, 4), c(3, 1, 5), c(6, 8, 9)), 8), c(1, 3, 1, 3, 1, 3, 1, 3))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(6, 1, 5), c(3, 8, 9), c(2, 7, 4)), 8), c(1, 5, 1, 5, 1, 5, 1, 5))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2), c(3, 4)), 10), c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2))))\n    stopifnot(isTRUE(all.equal(candidate(list(c(1, 3), c(3, 2)), 10), c(1, 3, 1, 3, 1, 3, 1, 3, 1, 3))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_130","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:Tribonacci གི་རིམ་པ་གི་ཨང་དང་པ་ n+1 ཨིན།ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཧྲིལ་བུམ་ n ཅིག་ཐོབ་པ་ཅིན་ ཁྱོད་ཀྱིས་ གི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་དགོ།= ༢་༣་༣་ = ༨་tri(3) = tri(2) + tri(1) + tri(4) ཨིན།tri(4) = ༣ ཨིན་པུཊི་tri(2) = ༡ + ༢ \/ ༢ = ༢ ཨིན།དཔེ་འབད་བ་ཅིན་: tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) འདི་ nའདི་ གྱངས་ཁ་མ་རྐྱང་པ་ཨིན་པ་ཅིན་ཨིན།tri (n) = 1 + n \/ 2 འདི་ཡང་ n ཅིག་ཨིན་པ་ཅིན་ཨིན།tri(1) = ༣ ཨིན་པུཊི་Tribonacci sequence འདི་ཡང་བསྐྱར་དུ་འབྱུང་བའི་ཐོག་ལས་གསལ་བཀོད་འབདཝ་ཨིན།ཨིན་རུང་ མི་གིས་མ་ཤེས་མི་འདི་ ཏིརི་བཱོན་ཅིཤི་གི་རིམ་པ་ཨིན།མི་ག་ར་གིས་ ཕི་བོ་ན་ཅིའི་རིམ་པ་ཤེས་དོ་ཡོདཔ་ཨིན། དེ་ཡང་ ཇི་ཇི་ལུ་ཡོད་པའི་རྩིས་རིག་པ་ཚུ་གིས་ ཞིབ་འཇུག་སྦོམ་སྦེ་རང་འབད་ཡོདཔ་ཨིན།# >>> tri(3)\n# c(1, 3, 2, 8)\ntri <- function(n) {","canonical_solution":"tri <- function(n) {\n  if (n == 0) return(c(3))\n  \n  tribonacci <- numeric(n + 1)\n  tribonacci[1] <- 3\n  \n  for (i in 2:(n + 1)) {\n    if (i %% 2 == 0) {\n      tribonacci[i] <- 1 + i \/ 2\n    } else {\n      if (i == 3) {\n        tribonacci[i] <- tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]  # tri(3) requires tri(4)\n      } else {\n        # When i > 3 and i is odd, dependencies are always available\n        tribonacci[i] <- tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3 + 2]  # i + 1 becomes i - 3 + 2\n      }\n    }\n  }\n  \n  return(tribonacci)\n}","tests":"test_humaneval <- function() {\n    candidate <- tri\n    stopifnot(isTRUE(all.equal(candidate(3), c(1, 3, 2, 8))))\n    stopifnot(isTRUE(all.equal(candidate(4), c(1, 3, 2, 8, 3))))\n    stopifnot(isTRUE(all.equal(candidate(5), c(1, 3, 2, 8, 3, 15))))\n    stopifnot(isTRUE(all.equal(candidate(6), c(1, 3, 2, 8, 3, 15, 4))))\n    stopifnot(isTRUE(all.equal(candidate(7), c(1, 3, 2, 8, 3, 15, 4, 24))))\n    stopifnot(isTRUE(all.equal(candidate(8), c(1, 3, 2, 8, 3, 15, 4, 24, 5))))\n    stopifnot(isTRUE(all.equal(candidate(9), c(1, 3, 2, 8, 3, 15, 4, 24, 5, 35))))\n    stopifnot(isTRUE(all.equal(candidate(20), c(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11))))\n    stopifnot(isTRUE(all.equal(candidate(0), c(1))))\n    stopifnot(isTRUE(all.equal(candidate(1), c(1, 3))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_131","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: ཨང་གྲངས་ཆ་མཉམ་རང་ཆ་མཉམ་ཨིན་པ་ཅིན་ ༠ སླར་ལོག་འབདཝ་ཨིན།ཤོག་གྲངས་ཧྲིལ་བུམ་ཅིག་ n བྱིན་པ་ཅིན་ ཨང་གྲངས་ཉོག་ཕྲ་འབད་མི་ཚུ་སླར་ལོག་འབདཝ་ཨིན།# >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {","canonical_solution":"digits <- function(n) {\n  # Convert the number to a character vector\n  digits_vector <- unlist(strsplit(as.character(n), \"\"))\n  \n  # Convert the character vector back to numeric\n  digits_vector <- as.numeric(digits_vector)\n  \n  # Filter out the odd digits\n  odd_digits <- digits_vector[digits_vector %% 2 != 0]\n  \n  # If all digits are even, return 0\n  if (length(odd_digits) == 0) {\n    return(0)\n  }\n  \n  # Calculate and return the product of odd digits\n  return(prod(odd_digits))\n}","tests":"test_humaneval <- function() {\n    candidate <- digits\n    stopifnot(isTRUE(all.equal(candidate(5), 5)))\n    stopifnot(isTRUE(all.equal(candidate(54), 5)))\n    stopifnot(isTRUE(all.equal(candidate(120), 1)))\n    stopifnot(isTRUE(all.equal(candidate(5014), 5)))\n    stopifnot(isTRUE(all.equal(candidate(98765), 315)))\n    stopifnot(isTRUE(all.equal(candidate(5576543), 2625)))\n    stopifnot(isTRUE(all.equal(candidate(2468), 0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_132","nl":"dzo_Tibt","pl":"r","prompt":"འདི་ནང་ལུ་ ཤུལ་མམ་གྱི་ནང་ཐིག་གཅིག་ཡང་ སྦྲེལ་མཐུད་འབད་ཡོདཔ་ཨིན།ལས་འགན་འདི་གིས་ TRUE སླར་ལོག་འབད་དགོཔ་ཨིན། གལ་སྲིད་དང་རྐྱངམ་ཅིག་ ཆ་གནས་ཅན་གྱི་ སྦྲེལ་རྟགས་ཀྱི་རིམ་པ་ ཅིག་ཡོད་པ་ཅིན་ཨིན།ཤོག་ཁྲམ་ནང་ ཀེར་ཐིག་གི་རྒྱབ་ལག་རྐྱངམ་ཅིག་ཡོད་པའི་ ནང་ཐིག་ཅིག་སྦེ་ལག་ལེན་འཐབ་མི་ ལས་འགན་ཅིག་བཟོ།# >>> is_nested('[[]]')\n# TRUE\n# >>> is_nested('[]]]]]]][[[[[]')\n# FALSE\n# >>> is_nested('[][]')\n# FALSE\n# >>> is_nested('[]')\n# FALSE\n# >>> is_nested('[[][]]')\n# TRUE\n# >>> is_nested('[[]][[')\n# TRUE\nis_nested <- function(string) {","canonical_solution":"is_nested <- function(string) {\n  open_count <- 0\n  for (char in unlist(strsplit(string, \"\"))) {\n    if (char == \"[\") {\n      open_count <- open_count + 1\n    } else if (char == \"]\") {\n      if (open_count > 1) {\n        return(TRUE)\n      }\n      open_count <- open_count - 1\n    }\n  }\n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- is_nested\n    stopifnot(isTRUE(all.equal(candidate('[[]]'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('[]]]]]]][[[[[]'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('[][]'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('[]'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('[[[[]]]]'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('[]]]]]]]]]]'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('[][][[]]'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('[[]'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('[]]'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('[[]][['), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('[[][]]'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('[[[[[[[['), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(']]]]]]]]'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_133","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ནང་ཐིག་ནང་ཡོད་པའི་ཆ་ཤས་རེ་རེ་ལུ་ གྱངས་ཁ་མཐོ་སའི་ int (_) སྟེང་_ (_) སྦེ་ཡར་འཁོར་རྐྱབས།ཁྱོད་ཀྱིས་ ཤོག་ཁྲམ་ནང་ཡོད་པའི་གྱངས་ཁ་ཚུ་ གྱངས་ཁ་གཉིས་སྦེ་བསྡོམས་ཏེ་ལོག་གཏང་དགོ།ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཀྱི་ཐོ་འདི་ཐོབ་ཡོདཔ་ཨིན།# >>> lst(c(1.0, 2.0, 3.0))\n# 14\n# >>> lst(c(1.0, 4.0, 9.0))\n# 98\n# >>> lst(c(1.0, 3.0, 5.0, 7.0))\n# 84\n# >>> lst(c(1.4, 4.2, 0.0))\n# 29\n# >>> lst(c(-2.4, 1.0, 1.0))\n# 6\nsum_squares <- function(lst) {","canonical_solution":"sum_squares <- function(lst) {\n  sum(ceiling(lst)^2)\n}","tests":"test_humaneval <- function() {\n    candidate <- sum_squares\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0)), 14)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0)), 14)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.0, 3.0, 5.0, 7.0)), 84)))\n    stopifnot(isTRUE(all.equal(candidate(c(1.4, 4.2, 0.0)), 29)))\n    stopifnot(isTRUE(all.equal(candidate(c(-2.4, 1.0, 1.0)), 6)))\n    stopifnot(isTRUE(all.equal(candidate(c(100.0, 1.0, 15.0, 2.0)), 10230)))\n    stopifnot(isTRUE(all.equal(candidate(c(10000.0, 10000.0)), 200000000)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1.4, 4.6, 6.3)), 75)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1.4, 17.9, 18.9, 19.9)), 1086)))\n    stopifnot(isTRUE(all.equal(candidate(c(0.0)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1.0)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1.0, 1.0, 0.0)), 2)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_134","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དྲན་གསོ། \"ཚིག་ཡིག་\"འདི་ བར་སྟོང་གིས་སོ་སོ་འཕྱལ་མི་ཡིག་འབྲུ་ཚུ་ཨིན།ཚིག་གི་ཆ་ཤས་ཅིག་དང་ གཞན་མི་ཆ་ཤས་འདི་རྫུས་མ་ཨིན།string གི་ཡིག་འབྲུ་འདི་ ཨེཕ་ཇི་ཡིག་འབྲུ་ཅིག་ཨིནམ་དང་ འདི་མེན་པས།མཐའ་མཇུག་གི་ཡིག་འབྲུ་འདི་ ཨིན་པ་ཅིན་ TRUE སླར་ལོག་འབད་མི་ལས་འགན་ཅིག་བཟོ།# >>> check_if_last_char_is_a_letter('apple pie')\n# FALSE\n# >>> check_if_last_char_is_a_letter('apple pi e')\n# TRUE\n# >>> check_if_last_char_is_a_letter('apple pi e ')\n# FALSE\n# >>> check_if_last_char_is_a_letter('')\n# FALSE\ncheck_if_last_char_is_a_letter <- function(txt) {","canonical_solution":"check_if_last_char_is_a_letter <- function(txt) {\n  # Trim any trailing whitespace\n  trimmed_txt <- trimws(txt, which = \"right\")\n  \n  # If the trimmed text is empty, return FALSE\n  if (nchar(trimmed_txt) == 0) {\n    return(FALSE)\n  }\n  \n  # Get the last character\n  last_char <- substr(trimmed_txt, nchar(trimmed_txt), nchar(trimmed_txt))\n  \n  # Check if the last character is an alphabetical character\n  if (grepl(\"[a-zA-Z]\", last_char)) {\n    # Split the text by spaces\n    words <- strsplit(trimmed_txt, \" \")[[1]]\n    # Get the last word\n    last_word <- tail(words, n = 1)\n    # If last character is the only character in the last \"word\", return TRUE\n    # Otherwise, it is part of a word, return FALSE\n    return(nchar(last_word) == 1)\n  }\n  \n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- check_if_last_char_is_a_letter\n    stopifnot(isTRUE(all.equal(candidate('apple'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('apple pi e'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('eeeee'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('A'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('Pumpkin pie '), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('Pumpkin pie 1'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('eeeee e '), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('apple pie'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('apple pi e '), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_135","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:གནས་གོང་གཉིས་མཚུངས་ཨིན།འདི་བཟུམ་གྱི་ཆ་ཤས་མེད་པ་ཅིན་ལོག་གཏང་ -༡ ཨིན། བྱིན་ཡོད་པའི་བེ་ཊར་ནང་ལུ་ མི་འོང་།དེ་དང་དེ་ཅིག་ཁར་ཡོད་པའི་ཆ་ཤས་འདི་ སྦོམ་ཤོས་དང་འདྲན་འདྲ་མིན་འདུགཇི་ཨེམ་ཨེལ་གྱི་ནང་ཐིག་སྦོམ་ཤོས་སླར་ལོག་འབད་མི་ལས་འགན་ཅིག་བཟོ་དགོ།# >>> can_arrange(c(1, 2, 4, 3, 5))\n# 3\n# >>> can_arrange(c(1, 2, 3))\n# -1\ncan_arrange <- function(arr) {","canonical_solution":"can_arrange <- function(arr) {\n  for (i in seq(length(arr) - 1, 1)) {\n    if (arr[i] > arr[i + 1]) {\n      return(i)\n    }\n  }\n  return(-1)\n}","tests":"test_humaneval <- function() {\n    candidate <- can_arrange\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 3, 5)), 3)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 5)), -1)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 2, 5, 6, 7, 8, 9, 10)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 8, 5, 7, 3)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c()), -1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_136","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ནུས་མེད་ ཡང་ན་ ནུས་ལྡན་ཨང་གྲངས་མེད་པ་ཅིན་ དེ་ཚུ་ NULL སྦེ་ལོག་གཏང་།ཤོག་ལེབ་ནང་ལུ་ ནུས་ལྡན་ཨང་གྲངས་ཆ་མཉམ་ཚུ་བཙུགས།ནུས་མེད་ཨང་གྲངས་ཚུ་གི་གྲས་ལས་སྦོམ་ཤོས་དང་ b འདི་ཆུང་ཤོས་ཨིན།'a'འདི་ ཨིནམ་སྦེ་ཐོ་ (a, b) སླར་ལོག་འབད་མི་ལས་འགན་ཅིག་བཟོ།# >>> largest_smallest_integers(c(2, 4, 1, 3, 5, 7))\n# list(NULL, 1)\n# >>> largest_smallest_integers(c())\n# list(NULL, NULL)\n# >>> largest_smallest_integers(c(0))\n# list(NULL, NULL)\nlargest_smallest_integers <- function(lst) {","canonical_solution":"largest_smallest_integers <- function(lst) {\n  negatives <- lst[lst < 0]\n  positives <- lst[lst > 0]\n  \n  largest_negative <- if(length(negatives) > 0) max(negatives) else NULL\n  smallest_positive <- if(length(positives) > 0) min(positives) else NULL\n  \n  list(largest_negative, smallest_positive)\n}","tests":"test_humaneval <- function() {\n    candidate <- largest_smallest_integers\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 3, 5, 7)), list(NULL, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 3, 5, 7, 0)), list(NULL, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5, 6, -2)), c(-2, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(4, 5, 3, 6, 2, 7, -7)), c(-7, 2))))\n    stopifnot(isTRUE(all.equal(candidate(c(7, 3, 8, 4, 9, 2, 5, -9)), c(-9, 2))))\n    stopifnot(isTRUE(all.equal(candidate(c()), list(NULL, NULL))))\n    stopifnot(isTRUE(all.equal(candidate(c(0)), list(NULL, NULL))))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, -5, -6)), list(-1, NULL))))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, -5, -6, 0)), list(-1, NULL))))\n    stopifnot(isTRUE(all.equal(candidate(c(-6, -4, -4, -3, 1)), c(-3, 1))))\n    stopifnot(isTRUE(all.equal(candidate(c(-6, -4, -4, -3, -100, 1)), c(-3, 1))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_137","nl":"dzo_Tibt","pl":"r","prompt":"དྲན་གསོ། གྲངས་གནས་ངོ་མ་ཅིག་ string སྦེ་བཀོད་པ་ཅིན་ འཁྱིལ་འགྱོ་མི་གནས་གོང་འདི་ . ཡང་ན་ ,  ཨིན།གནས་གོང་ཚུ་འདྲན་འདྲ་ཡོད་པ་ཅིན་ NULLསླར་ལོག་འབདཝ་ཨིན།གནས་གོང་ངོ་མ་ཚུ་དང་ དེ་ལས་ སྦོམ་ཤོས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།ཟེར་བའི་གྲངས་སུ་རྩིས་མི་ function བཟོ་དགོ།# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1, '2,3')\n# '2,3'\n# >>> compare_one('5,1', '6')\n# '6'\n# >>> compare_one('1', 1)\n# NULL\ncompare_one <- function(a, b) {","canonical_solution":"compare_one <- function(a, b) {\n  to_number <- function(x) {\n    if (is.character(x)) {\n      x <- gsub(\",\", \".\", x)\n      as.numeric(x)\n    } else {\n      as.numeric(x)\n    }\n  }\n  \n  a_num <- to_number(a)\n  b_num <- to_number(b)\n  \n  if (a_num == b_num) {\n    return(NULL)\n  } else if (a_num > b_num) {\n    return(a)\n  } else {\n    return(b)\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- compare_one\n    stopifnot(isTRUE(all.equal(candidate(1, 2), 2)))\n    stopifnot(isTRUE(all.equal(candidate(1, 2.5), 2.5)))\n    stopifnot(isTRUE(all.equal(candidate(2, 3), 3)))\n    stopifnot(isTRUE(all.equal(candidate(5, 6), 6)))\n    stopifnot(isTRUE(all.equal(candidate(1, '2,3'), '2,3')))\n    stopifnot(isTRUE(all.equal(candidate('5,1', '6'), '6')))\n    stopifnot(isTRUE(all.equal(candidate('1', '2'), '2')))\n    stopifnot(isTRUE(all.equal(candidate('1', 1), NULL)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_138","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་ ད་ཨང་གྲངས་ n འདི་ཨང་གྲངས་ཆ་མཉམ་ 4 གི་རྩིས་གཞི་སྦེ་འབྲི་ཚུགས་ག་ཟེར་དཔྱད་དེ་བལྟ་ # >>> is_equal_to_sum_even(4)\n# FALSE\n# >>> is_equal_to_sum_even(6)\n# FALSE\n# >>> is_equal_to_sum_even(8)\n# TRUE\nis_equal_to_sum_even <- function(n) {","canonical_solution":"is_equal_to_sum_even <- function(n) {\n  if (n <= 0 || n %% 2 != 0 || n < 8) {\n    return(FALSE)\n  }\n  remaining_sum <- n\n  count <- 0\n  for (i in seq(2, n, by = 2)) {\n    if (remaining_sum - i >= 2 * (4 - count - 1)) {\n      remaining_sum <- remaining_sum - i\n      count <- count + 1\n    }\n    if (count == 4) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\n# Examples\nis_equal_to_sum_even(4)   # FALSE\nis_equal_to_sum_even(6)   # FALSE\nis_equal_to_sum_even(8)   # TRUE","tests":"test_humaneval <- function() {\n    candidate <- is_equal_to_sum_even\n    stopifnot(isTRUE(all.equal(candidate(4), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(6), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(8), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(10), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(11), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(12), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(13), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(16), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_139","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: འདི་ནང་ལུ་ n > 0 brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! Brazil གི་གནས་གོང་འདི་ སྦྲགས་ཏེ་ཡོདཔ་ཨིན།# >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\nspecial_factorial <- function(n) {","canonical_solution":"special_factorial <- function(n) {\n  result <- 1\n  for (i in 1:n) {\n    result <- result * factorial(i)\n  }\n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- special_factorial\n    stopifnot(isTRUE(all.equal(candidate(4), 288)))\n    stopifnot(isTRUE(all.equal(candidate(5), 34560)))\n    stopifnot(isTRUE(all.equal(candidate(7), 125411328000)))\n    stopifnot(isTRUE(all.equal(candidate(1), 1)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_140","nl":"dzo_Tibt","pl":"r","prompt":"དེ་ལས་ཤུལ་མམ་གྱི་ས་སྟོང་ཚུ་ཆ་མཉམ་ལུ་ -  དང་གཅིག་ཁར་ཚབ་རྐྱབས།string ལུ་ཤུལ་མམ་གྱི་བར་སྟོང་གཉིས་ལས་ལྷག་ཡོད་པ་ཅིན་ ཚིག་ཡིག་ཐིག་ཁྲམ་ཅིག་བྱིན་པ་ཅིན་ ས་སྟོང་ག་ར་འོག་ཡིག་སྦེ་ཚབ་རྐྱབས།# >>> fix_spaces(' Example')\n# 'Example'\n# >>> fix_spaces(' Example 1')\n# 'Example_1'\n# >>> fix_spaces(' Example 2')\n# '_Example_2'\n# >>> fix_spaces(' Example 3')\n# '_Example-3'\nfix_spaces <- function(text) {","canonical_solution":"fix_spaces <- function(text) {\n  # Trim leading and trailing spaces\n  text <- trimws(text)\n  # Replace 3 or more consecutive spaces with a dash\n  text <- gsub(\" {3,}\", \"-\", text)\n  # Replace remaining spaces with underscores\n  text <- gsub(\" \", \"_\", text)\n  return(text)\n}","tests":"test_humaneval <- function() {\n    candidate <- fix_spaces\n    stopifnot(isTRUE(all.equal(candidate('Example'), 'Example')))\n    stopifnot(isTRUE(all.equal(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')))\n    stopifnot(isTRUE(all.equal(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')))\n    stopifnot(isTRUE(all.equal(candidate('Exa   mple'), 'Exa-mple')))\n    stopifnot(isTRUE(all.equal(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_141","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:- ཌོཊི་གི་ཤུལ་ལས་ཡོད་པའི་སབ་སི་ཊི་རིང་འདི་འདི་ཚུ་གི་གྲལ་ལས་ གཅིག་དགོཔ་ཨིན། ['txt', 'exe', 'dll'] Latin alphabet ('a'-'z' and 'A'-'Z') ཚུ་ནང་ལུ་བཙུགས་ཡོདཔ་ཨིན།- ཌོཊི་གི་ཧེ་མ་གི་ཡིག་འབྲུ་འདི་ སྟོངམ་མ་སྡོད་དགོཔ་མ་ཚད་ ནང་ལས་ཡིག་འབྲུ་ཅིག་ལས་ འགོ་བཙུགས་འོང་།- ཌའི་ལོག་གི་མིང་ནང་ལུ་ གནད་སྡུད་གཅིག་རང་ཡོད་ '.' - ཡིག་སྣོད་མིང་ནང་ལུ་ ཨང་གྲངས་གསུམ་ལས་ལྷག་སྟེ་ཡོད་ནི་མི་འོང་། ('0'-'9')འདི་ཚུ་གྲུབ་ནུགཡིག་སྣོད་མིང་འདི་ འོག་གི་གནས་སྟངས་ཚུ་ཆ་མཉམ་ནང་ཡོད་པ་ཅིན་རྐྱངམ་གཅིག་ ཆ་གནས་ཅན་སྦེ་བརྩི་འོང་།ཐོ་བཀོད་མིང་འདི་ ཆ་གནས་ཡོད་པ་ཅིན་ \"Yes\" ཟེར་ཨེབ་གཏང་འབད་ དེ་ལས་མེན་པ་ཅིན་ \"No\" ཟེར་ལོག་གཏང་།ཡིག་སྣོད་ཅིག་གི་མིང་འདི་ ཕྱིར་བཏོན་འབད་ཡོད་པའི་ཐིག་ཡིག་ཅིག་ལེན་ཏེ་སླར་ལོག་འབད་མི་ ལས་འགན་ཅིག་བཟོ།# >>> file_name_check('example.txt')\n# 'Yes'\n# >>> file_name_check('1example.dll')\n# 'No'\nfile_name_check <- function(file_name) {","canonical_solution":"file_name_check <- function(file_name) {\n  # Split the file name into the name part and the extension part\n  parts <- strsplit(file_name, \"\\\\.\", fixed = TRUE)[[1]]\n  \n  # Check there is exactly one dot\n  if (length(parts) != 2) {\n    return('No')\n  }\n  \n  # Extract the name and extension\n  name_part <- parts[1]\n  ext_part <- parts[2]\n  \n  # Check the extension is valid\n  if (!(ext_part %in% c('txt', 'exe', 'dll'))) {\n    return('No')\n  }\n  \n  # Check the name part is not empty and starts with a letter\n  if (nchar(name_part) == 0 || !grepl(\"^[A-Za-z]\", name_part)) {\n    return('No')\n  }\n  \n  # Count digits in the name part\n  digit_count <- nchar(gsub(\"[^0-9]\", \"\", name_part))\n  \n  # Check there are no more than three digits\n  if (digit_count > 3) {\n    return('No')\n  }\n  \n  return('Yes')\n}","tests":"test_humaneval <- function() {\n    candidate <- file_name_check\n    stopifnot(isTRUE(all.equal(candidate('example.txt'), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate('1example.dll'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('s1sdf3.asd'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('K.dll'), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate('MY16FILE3.exe'), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate('His12FILE94.exe'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('_Y.txt'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('?aREYA.exe'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('\/this_is_valid.dll'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('this_is_valid.wow'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('this_is_valid.txt'), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate('this_is_valid.txtexe'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('#this2_i4s_5valid.ten'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('@this1_is6_valid.exe'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('this_is_12valid.6exe4.txt'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('all.exe.txt'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('I563_No.exe'), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate('Is3youfault.txt'), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate('no_one#knows.dll'), 'Yes')))\n    stopifnot(isTRUE(all.equal(candidate('1I563_Yes3.exe'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('I563_Yes3.txtt'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('final..txt'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('final132'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('_f4indsartal132.'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('.txt'), 'No')))\n    stopifnot(isTRUE(all.equal(candidate('s.'), 'No')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_142","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:འོག་ལུ་ཡོད་པའི་ཐོ་ཡིག་ནང་ ནང་ཐིག་ཚུ་ ༣ དང་ ༤ གི་གྱངས་ཁ་སྦེ་མ་འཐོན་མི་ཚུ་ བསྒྱུར་བཅོས་འབད་དགོ་ དེ་ལས་ ལས་འགན་འདི་གིས་ ནང་ཐིག་ཆ་མཉམ་གྱི་བསྡོམས་སླར་ལོག་འབདཝ་ཨིན།ལས་འགན་འདི་ 3 གི་གྱངས་ཁ་དང་ ཨང་གྲངས་ཧྲིལ་བུམ་འདི་ ནང་ལུ་བཙུགས་ནི་ཨིན་པ་ཅིན་ འདི་གི་ཨང་གྲངས་དེ་ 4 གི་གྱངས་ཁ་དང་ 3 གི་གྱངས་ཁ་མེན་པ་ཅིན་ ལས་འགན་འདི་གིས་ འ་ནི་འགན་འདི་གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ལེན་འོང་། ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཆ་མཉམ་གྱི་དོན་ལུ་འགན་འདི་གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་འདི་ སྦེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་དེ་  ལུ་ཡར་འཕར་འབདཝ་ཨིན།\" ཟེར་བའི་ལན་ལུ་# >>> lst\n# c(1, 2, 3)\n# >>> lst\n# c()\n# >>> lst\n# c(-1, -5, 2, -1, -5)\nsum_squares <- function(lst) {","canonical_solution":"sum_squares <- function(lst) {\n  lst <- sapply(seq_along(lst), function(i) {\n    if (i %% 3 == 0) {\n      return(lst[i]^2)\n    } else if (i %% 4 == 0) {\n      return(lst[i]^3)\n    } else {\n      return(lst[i])\n    }\n  })\n  return(sum(lst))\n}","tests":"test_humaneval <- function() {\n    candidate <- sum_squares\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), 6)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 9)), 14)))\n    stopifnot(isTRUE(all.equal(candidate(c()), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 1, 1, 1, 1, 1, 1)), 9)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -1, -1, -1, -1, -1, -1, -1, -1)), -3)))\n    stopifnot(isTRUE(all.equal(candidate(c(0)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -5, 2, -1, -5)), -126)))\n    stopifnot(isTRUE(all.equal(candidate(c(-56, -99, 1, 0, -2)), 3030)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, 0, 0, 0, 0, 0, 0, 0, -1)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)), -14196)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)), -1448)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_143","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་གཞི་ ༡:ཚིག་རིམ་གསརཔ་ནང་ ཚིག་རིམ་དེ་ དང་ཕུའི་ ཚིག་རིམ་དང་འདྲཝ་སྦེ་དགོཔ་ཨིན།འདི་ནང་ལུ་ ཚེ་རིང་ཚུ་ཨང་གྲངས་ངོ་མ་ཨིན།ཁྱོད་ཀྱིས་ ཚིག་ཡིག་གཞི་རྟེན་ནང་ལས་ ཚིག་ཡིག་ཚུ་ཡོད་པའི་ string སླར་ལོག་འབད་དགོཔ་ཨིན།ཚིག་ཡིག་ནང་ལུ་ བར་སྟོང་གིས་སོ་སོར་འབད་མི་ཚིག་ཚུ་ཡོདཔ་ཨིན།ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཅིག་ངོ་ཚབ་འབད་ཡོད་པའི་ string ཅིག་ཐོབ་ནུག# >>> words_in_sentence('This is a test')\n# 'is'\n# Example 2:\n# >>> words_in_sentence('lets go for swimming')\n# 'go for'\n# Constraints:\n#     * 1 <= len(sentence) <= 100\n#     * sentence contains only letters\nwords_in_sentence <- function(sentence) {","canonical_solution":"words_in_sentence <- function(sentence) {\n  is_prime <- function(n) {\n    if (n <= 1) return(FALSE)\n    if (n == 2) return(TRUE)\n    for (i in 2:sqrt(n)) {\n      if (n %% i == 0) return(FALSE)\n    }\n    return(TRUE)\n  }\n  \n  words <- strsplit(sentence, \" \")[[1]]\n  prime_words <- words[sapply(words, function(word) is_prime(nchar(word)))]\n  return(paste(prime_words, collapse = \" \"))\n}","tests":"test_humaneval <- function() {\n    candidate <- words_in_sentence\n    stopifnot(isTRUE(all.equal(candidate('This is a test'), 'is')))\n    stopifnot(isTRUE(all.equal(candidate('lets go for swimming'), 'go for')))\n    stopifnot(isTRUE(all.equal(candidate('there is no place available here'), 'there is no place')))\n    stopifnot(isTRUE(all.equal(candidate('Hi I am Hussein'), 'Hi am Hussein')))\n    stopifnot(isTRUE(all.equal(candidate('go for it'), 'go for it')))\n    stopifnot(isTRUE(all.equal(candidate('here'), '')))\n    stopifnot(isTRUE(all.equal(candidate('here is'), 'is')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_144","nl":"dzo_Tibt","pl":"r","prompt":"ཁྱོད་ཀྱིས་ x དང་ n འདི་ ཆ་ཤས་ངོ་མ་ཨིནམ་སྦེ་ཆ་བཞགཔ་ད་ སྦྲེལ་རྟགས་ལུ་ ༠ ཟེར་མེདཔ་ཨིན།<གྲངས་རྩིས་>\/<གྲངས་རྩིས་> འདི་ནང་ལུ་ གྲངས་རྩིས་དང་གྲངས་རྩིས་གཉིས་ཆ་ར་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཧྲིལ་བུམ་ཨིན།x དང་ n གཉིས་ཆ་རང་ལུ་ ཨེགསི་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་x * n འདི་གྲངས་ཆ་ཧྲིལ་བུམ་སྦེ་ངེས་འཛིན་འབད་ཡོད་པ་ཅིན་ ལས་འགན་གྱིས་ TRUE སླར་ལོག་འབདཝ་ཨིན།ཁྱོད་ཀྱི་ལཱ་འདི་ བརྡ་བཀོད་འདི་འཇམ་ཏོང་ཏོ་འབད་འབད་འབད་ནིའི་དོན་ལས་ ལས་འགན་ཅིག་ལག་ལེན་འཐབ་དགོ།# >>> simplify('1\/5', '5\/1')\n# TRUE\n# >>> simplify('1\/6', '2\/1')\n# FALSE\n# >>> simplify('7\/10', '10\/2')\n# FALSE\nsimplify <- function(x, n) {","canonical_solution":"simplify <- function(x, n) {\n  parse_fraction <- function(fraction) {\n    parts <- strsplit(fraction, \"\/\")[[1]]\n    return(as.numeric(parts[1]) \/ as.numeric(parts[2]))\n  }\n  \n  x_value <- parse_fraction(x)\n  n_value <- parse_fraction(n)\n  \n  product <- x_value * n_value\n  \n  # Check if the product is a whole number\n  return(product == floor(product))\n}","tests":"test_humaneval <- function() {\n    candidate <- simplify\n    stopifnot(isTRUE(all.equal(candidate('1\/5', '5\/1'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('1\/6', '2\/1'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('5\/1', '3\/1'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('7\/10', '10\/2'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('2\/10', '50\/10'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('7\/2', '4\/2'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('11\/6', '6\/1'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('2\/3', '5\/2'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('5\/2', '3\/5'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('2\/4', '8\/4'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('2\/4', '4\/2'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('1\/5', '5\/1'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('1\/5', '1\/5'), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_145","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: ཤོག་ལེབ་ཚུ་ ཨང་དང་པའི་ཐོ་ཡིག་ནང་ཡོད་མི་ ཨང་ཡིག་གི་གཞི་བསྟུན་ལུ་གཞི་བཞག་སྟེ་རིམ་སྒྲིག་འབད།དྲན་གསོ། ཨང་གྲངས་ཚུ་བསྡོམས་ཏེ་ཡོད་པའི་ ཨང་གྲངས་ལེ་ཤ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཚུ་ཡར་སེང་འགྱོ་ནིའི་རིམ་པ་ལུ་གཞི་བཞག་སྟེ་ཨིན།ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་འདི་ དབྱེ་བ་ཕྱེ་མི་ལས་འགན་ཅིག་འབྲི་དགོ།# >>> order_by_points(c(1, 11, -1, -11, -12))\n# c(-1, -11, 1, -12, 11)\n# >>> order_by_points(c())\n# c()\norder_by_points <- function(nums) {","canonical_solution":"order_by_points <- function(nums) {\n  # Helper function to calculate the sum of digits\n  sum_of_digits <- function(n) {\n    sum(as.integer(unlist(strsplit(as.character(abs(n)), \"\"))))\n  }\n  \n  # Order the numbers based on the sum of their digits first, \n  # and then by their original index\n  indices <- seq_along(nums)\n  nums[order(sapply(nums, sum_of_digits), indices)]\n}","tests":"test_humaneval <- function() {\n    candidate <- order_by_points\n    stopifnot(isTRUE(all.equal(candidate(c(1, 11, -1, -11, -12)), c(-1, -11, 1, -12, 11))))\n    stopifnot(isTRUE(all.equal(candidate(c(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)), c(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457))))\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n    stopifnot(isTRUE(all.equal(candidate(c(1, -11, -32, 43, 54, -98, 2, -3)), c(-3, -32, -98, -11, 1, 2, 43, 54))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)), c(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9))))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 6, 6, -76, -21, 23, 4)), c(-76, -21, 0, 4, 23, 6, 6))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_146","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དང་པ་དང་མཇུག་འདི་ གྱངས་ཁ་རྐྱང་པ་ (1, 3, 5, 7, 9) ཨིན།ཝེ་ཀཊར་ནང་ལུ་ ཨེ་རེ་ ༡༠ ལས་སྦོམ་དང་ གཉིས་ཆ་ར་ལུ་ཨེ་རེ་ ཟེར་བཏུབ།ཨང་གྲངས་ཀྱི་བེ་ཊར་ཅིག་ཨེབ་གཏང་འབད་སྦེ་ ལོག་གཏང་མི་ལས་འགན་ཅིག་འབྲི་དགོ།# >>> specialFilter(c(15, -73, 14, -15))\n# 1\n# >>> specialFilter(c(33, -2, -3, 45, 21, 109))\n# 2\nspecialFilter <- function(nums) {","canonical_solution":"specialFilter <- function(nums) {\n  # Helper function to check if both first and last digits are odd\n  are_first_last_digits_odd <- function(x) {\n    str_num <- as.character(abs(x))\n    first_digit <- as.numeric(substr(str_num, 1, 1))\n    last_digit <- as.numeric(substr(str_num, nchar(str_num), nchar(str_num)))\n    first_digit %% 2 == 1 && last_digit %% 2 == 1\n  }\n\n  # Filter numbers greater than 10 with both first and last digits odd\n  filtered_nums <- nums[nums > 10 & sapply(nums, are_first_last_digits_odd)]\n  \n  # Return the count of such numbers\n  length(filtered_nums)\n}","tests":"test_humaneval <- function() {\n    candidate <- specialFilter\n    stopifnot(isTRUE(all.equal(candidate(c(5, -2, 1, -5)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(15, -73, 14, -15)), 1)))\n    stopifnot(isTRUE(all.equal(candidate(c(33, -2, -3, 45, 21, 109)), 2)))\n    stopifnot(isTRUE(all.equal(candidate(c(43, -12, 93, 125, 121, 109)), 4)))\n    stopifnot(isTRUE(all.equal(candidate(c(71, -2, -33, 75, 21, 19)), 3)))\n    stopifnot(isTRUE(all.equal(candidate(c(1)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c()), 0)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_147","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:a[i] + a[j] + a[k] འདི་ ༣ གི་གྱངས་ཁ་ཨིན།གནས་གོང་ i < j < k ཡོད་པའི་གནས་གོང་ a གི་ triples (a[i], a[j], a[k]) གི་གྱངས་ཁ་སླར་ལོག་འབདཝ་ཨིན།i (༡ ≤ i ≤ n) གི་དོན་ལུ་ a[i] =i * i - i + 1 གི་གནས་གོང་ཨིན།ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ n ཐོབ་པ་ཅིན་ ཚེ་རིང་ n འབད་མི་ ཨང་གྲངས་ཧྲིལ་བུམ་ ཝེ་ཊར་ a བཟོ་དགོཔ་ཨིན།#     >>> get_max_triples(5)\n#     1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\nget_max_triples <- function(n) {","canonical_solution":"get_max_triples <- function(n) {\n  # Create the vector a according to the given rule\n  a <- sapply(1:n, function(i) i * i - i + 1)\n  \n  # Initialize the count of valid triples\n  count <- 0\n  \n  # Iterate over all possible triples (i, j, k) with i < j < k\n  for (i in 1:(n-2)) {\n    for (j in (i+1):(n-1)) {\n      for (k in (j+1):n) {\n        # Check if the sum of the selected triple is a multiple of 3\n        if ((a[i] + a[j] + a[k]) %% 3 == 0) {\n          count <- count + 1\n        }\n      }\n    }\n  }\n  \n  # Return the count of valid triples\n  return(count)\n}","tests":"test_humaneval <- function() {\n    candidate <- get_max_triples\n    stopifnot(isTRUE(all.equal(candidate(5), 1)))\n    stopifnot(isTRUE(all.equal(candidate(6), 4)))\n    stopifnot(isTRUE(all.equal(candidate(10), 36)))\n    stopifnot(isTRUE(all.equal(candidate(100), 53361)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_148","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ སྐར་མ་གི་མིང་ཚུ་ ཚུལ་ལྡན་མེན་པས།ལས་འགན་འདི་གིས་ plan1 ཡང་ན་ plan2 ཡོད་པ་ཅིན་ སྟོངམ་ཐོ་ཡིག་ཅིག་ལོག་གཏང་དགོ།ཉིམ་ལུ་ ཉེ་འདབས་ལུ་ཡོད་པའི་གནས་སྟངས་འདི་ ཨིན།སྐར་མ་༡ དང་སྐར་མ་༢ ཀྱི་འཁོར་ལམ་གྱི་བར་ན་ཆགས་ཏེ་ཡོདཔ་ཨིན།ལས་འགན་འདི་གིས་ ཇི་ཨེམ་སི་གི་མཐའ་འཁོར་ལུ་ཡོད་པའི་ སྐར་མ་ཚུ་ཡོད་པའི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་འོང་།སྐར་མ་གཉིས་ལུ་ སྐར་མ་ ༡ དང་ སྐར་མ་ ༢ སྦེ་མིང་བཏགས་མི་ལས་འགན་ཅིག་བྲིས་།ཌའི་ལོག་གི་ཨུ་ར་ནསི་དང་ ནེ་པཱུ་ནིསི་ཤུལ་མ་གི་སྐརམ་འདི་ སེར་གུ་ཨིན། དེ་ལས་འཛམ་གླིང་དང་ མོང་སྒར་དང་ ཡུ་པི་ཊར་ དེ་ལས་ སའི་སྐརམ་ཨིན།ཉིམ་ནང་ སྐར་མ་༨ ཡོདཔ་ད་ འདི་ ཉིམ་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་མི་ཅིག་ཨིན་མས།# >>> bf('Jupiter', 'Neptune')\n# c('Saturn', 'Uranus')\n# >>> bf('Earth', 'Mercury')\n# 'Venus'\n# >>> bf('Mercury', 'Uranus')\n# c('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\nbf <- function(planet1, planet2) {","canonical_solution":"bf <- function(planet1, planet2) {\n  planets <- c('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n  if (!(planet1 %in% planets) || !(planet2 %in% planets)) {\n    return(c())\n  }\n  \n  index1 <- which(planets == planet1)\n  index2 <- which(planets == planet2)\n  \n  if (index1 < index2) {\n    return(planets[(index1 + 1):(index2 - 1)])\n  } else if (index2 < index1) {\n    return(planets[(index2 + 1):(index1 - 1)])\n  } else {\n    return(c())\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- bf\n    stopifnot(isTRUE(all.equal(candidate('Jupiter', 'Neptune'), c('Saturn', 'Uranus'))))\n    stopifnot(isTRUE(all.equal(candidate('Earth', 'Mercury'), c('Venus'))))\n    stopifnot(isTRUE(all.equal(candidate('Mercury', 'Uranus'), c('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'))))\n    stopifnot(isTRUE(all.equal(candidate('Neptune', 'Venus'), c('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'))))\n    stopifnot(isTRUE(all.equal(candidate('Earth', 'Earth'), c())))\n    stopifnot(isTRUE(all.equal(candidate('Mars', 'Earth'), c())))\n    stopifnot(isTRUE(all.equal(candidate('Jupiter', 'Makemake'), c())))\n}\ntest_humaneval()"},{"task_id":"HumanEval_149","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: ཁྱོད་ཀྱིས་ཚིག་ཆ་མཉམ་ ཡུན་ཚད་འདྲ་མཉམ་སྦེ་འོང་ནི་མས་ཟེར་ མནོ་བསམ་བཏུབ།ལས་འགན་འདི་གིས་ གྲལ་ཐིག་ཚུ་རིམ་སྒྲིག་འབད་དེ་ལོག་གཏང་དགོ།ཚིག་གཉིས་ཆ་ར་ ཡུན་རིང་འདྲན་འདྲ་ཡོད་པ་ཅིན་ ཨེཕ་ཊི་རིམ་སྒྲིག་ཐོག་ལུ་ རིམ་སྒྲིག་འབད།ཚད་འཛིན་དེ་གི་ཐོག་ལས་ ཐོ་བཀོད་འདི་ལོག་གཏང་དགོ།ཚིག་ཡིག་གི་རིམ་པ་འདི་ ཚིག་རེ་རེ་གི་རིང་ཚད་དང་བསྟུན་ཏེ་ ཡར་སེང་འགྱོ་དགོཔ་ཨིན།འདི་ནང་ལུ་ ཐེངས་གཉིས་འབད་མི་ཡང་ འདུག་འོང་།ཚད་ཐིག་ཚུ་དང་ ཨང་གྲངས་ཚུ་ ནམ་ཡང་མི་ཐིག་ཨིན།དེ་ལས་ གྲུབ་འབྲས་ཀྱི་ཐོ་དེ་རིམ་སྒྲིག་འབད་ཡོད་པའི་རིམ་སྒྲིག་སྦེ་ལོག་གཏང་འོང་།ཚད་ལྡན་ཡིག་འབྲུ་འདི་ ཚད་ལྡན་ཡིག་འབྲུ་འདི་ནང་ལས་ ཆད་ནི་ཨིན།ཚད་གཞི་ཅིག་སྦེ་ string གི་ཐོ་ཡིག་ཅིག་ལེན་མི་ལས་འགན་ཅིག་འབྲི་དགོ།# >>> list_sort(c('aa', 'a', 'aaa'))\n# c('aa')\n# >>> list_sort(c('ab', 'a', 'aaa', 'cd'))\n# c('ab', 'cd')\nsorted_list_sum <- function(lst) {","canonical_solution":"list_sort <- function(lst) {\n  # Filter out strings with odd lengths\n  filtered_list <- lst[nchar(lst) %% 2 == 0]\n  \n  # Sort the list first by length, then alphabetically\n  sorted_list <- filtered_list[order(nchar(filtered_list), filtered_list)]\n  \n  return(sorted_list)\n}","tests":"test_humaneval <- function() {\n    candidate <- sorted_list_sum\n    stopifnot(isTRUE(all.equal(candidate(c('aa', 'a', 'aaa')), c('aa'))))\n    stopifnot(isTRUE(all.equal(candidate(c('school', 'AI', 'asdf', 'b')), c('AI', 'asdf', 'school'))))\n    stopifnot(isTRUE(all.equal(candidate(c('d', 'b', 'c', 'a')), c())))\n    stopifnot(isTRUE(all.equal(candidate(c('d', 'dcba', 'abcd', 'a')), c('abcd', 'dcba'))))\n    stopifnot(isTRUE(all.equal(candidate(c('AI', 'ai', 'au')), c('AI', 'ai', 'au'))))\n    stopifnot(isTRUE(all.equal(candidate(c('a', 'b', 'b', 'c', 'c', 'a')), c())))\n    stopifnot(isTRUE(all.equal(candidate(c('aaaa', 'bbbb', 'dd', 'cc')), c('cc', 'dd', 'aaaa', 'bbbb'))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_150","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཨང་གྲངས་ངོ་མ་ཅིག་ཨིནམ་ལས་ y གི་གནས་གོང་ལོག་གཏང་དགོ།ཌི་ཨེམ་ཨེན་འདི་ ཇི་ཨེན་ཨིནམ་སྦེ་ཨིན་པ་ཅིན་ xགི་གནས་གོང་ལོག་བྱིན་དགོཔ་ཨིན་པའི་ གྲུབ་འབྲས་འདི་ ཨིན།# >>> x_or_y(7, 34, 12)\n# 34\n# >>> x_or_y(15, 8, 5)\n# 5\nx_or_y <- function(n, x, y) {","canonical_solution":"x_or_y <- function(n, x, y) {\n  is_prime <- function(num) {\n    if (num <= 1) {\n      return(FALSE)\n    }\n    for (i in 2:sqrt(num)) {\n      if (num %% i == 0) {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  }\n  \n  if (is_prime(n)) {\n    return(x)\n  } else {\n    return(y)\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- x_or_y\n    stopifnot(isTRUE(all.equal(candidate(7, 34, 12), 34)))\n    stopifnot(isTRUE(all.equal(candidate(15, 8, 5), 5)))\n    stopifnot(isTRUE(all.equal(candidate(3, 33, 5212), 33)))\n    stopifnot(isTRUE(all.equal(candidate(1259, 3, 52), 3)))\n    stopifnot(isTRUE(all.equal(candidate(7919, -1, 12), -1)))\n    stopifnot(isTRUE(all.equal(candidate(3609, 1245, 583), 583)))\n    stopifnot(isTRUE(all.equal(candidate(91, 56, 129), 129)))\n    stopifnot(isTRUE(all.equal(candidate(6, 34, 1234), 1234)))\n    stopifnot(isTRUE(all.equal(candidate(1, 2, 0), 0)))\n    stopifnot(isTRUE(all.equal(candidate(2, 2, 0), 2)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_151","nl":"dzo_Tibt","pl":"r","prompt":"ཨང་གྲངས་ཆ་མཉམ་མེན་པའི་ ནུས་མེད་ ཡང་ན་ ཨང་གྲངས་ཆ་མཉམ་མེན་པའི་ ཨང་གྲངས་ཚུ་ སྣང་མེད་སྦེ་བཞག་དགོ།ཨང་གྲངས་ཀྱི་ཐོ་འདི་བྱིན་ཏེ་ ཨང་གྲངས་ཀྱི་གྲུ་བཞི་བསྡོམས་སླར་ལོག་འབདཝ་ཨིན།# >>> double_the_difference(c(1, 3, 2, 0))\n# 10\n# >>> double_the_difference(c(-1, -2, 0))\n# 0\n# >>> double_the_difference(c(9, -2))\n# 81\n# >>> double_the_difference(c(0))\n# 0\n# If the input list is empty, return 0.\ndouble_the_difference <- function(lst) {","canonical_solution":"double_the_difference <- function(lst) {\n  # Filter out non-positive, non-integer, and non-odd numbers\n  lst <- lst[lst > 0 & lst %% 1 == 0 & lst %% 2 == 1]\n  # Calculate the sum of squares of remaining numbers\n  sum(lst^2)\n}","tests":"test_humaneval <- function() {\n    candidate <- double_the_difference\n    stopifnot(isTRUE(all.equal(candidate(c()), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(5.0, 4.0)), 25)))\n    stopifnot(isTRUE(all.equal(candidate(c(0.1, 0.2, 0.3)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(-10.0, -20.0, -30.0)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(-1.0, -2.0, 8.0)), 0)))\n    stopifnot(isTRUE(all.equal(candidate(c(0.2, 3.0, 5.0)), 34)))\n    stopifnot(isTRUE(all.equal(candidate(c(-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)), 165)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_152","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: གནས་གོང་འདི་ ༠ ཨིན་པ་ཅིན་ གནས་གོང་འདི་དཔའ་བཅམ་མི་དང་ ཨང་གི་བར་ན་ ཁྱད་པར་ངོ་མ་ཨིན།ཚད་མཉམ་གྱི་བེ་ཊར་ཅིག་སླར་ལོག་འབདཝ་ཨིན། འདི་ནང་ ཚོད་དཔག་འབད་མི་ཚུ་ག་དེ་ཅིག་ཐག་རིང་ཡོདཔ་ཨིན་ན་ གསལ་སྟོན་འབདཝ་ཨིན།ཁྱོད་ཀྱིས་ཚད་གཞི་དང་ ཚོད་དཔག་འབད་ཡོད་པའི་ ཚད་གཞི་གཉིས་ཐོབ་ཡོདཔ་དང་ འདི་ནང་ བརྡ་བཀོད་རེ་རེ་བཞིན་དུ་ འདྲ་མཉམ་སྦེ་སྟོན་ཡོདཔ་ཨིན།ཁྱོད་ཀྱི་ལཱ་འདི་ མི་གཅིག་གིས་ རྩེད་འགྲན་གྱི་གྲུབ་འབྲས་ཚུ་ ལེགས་ཤོམ་སྦེ་ར་ ཧ་གོ་ཡོདཔ་ཨིན་ན་ བལྟ་ནི་དེ་ཨིན།འདི་ལུ་བལྟ་བ་ཅིན་ ཐད་རི་བ་རི་རང་ འབྲི་ནི་དང་བསྡུར་རྐྱབ་ནི་དེ་ ལེགས་ཤོམ་ཨིན།བྱུང་རྐྱེན་འདི་ མཇུག་བསྡུ་བའི་སྐབས་ལུ་ ཤེས་ཚུགས་འོང་། ཚོར་སྣང་དང་མནོ་བསམ་འདི་ ད་ལྟོ་རང་ ཁྱོད་དང་གཅིག་ཁར་ཡོད་མི་འདི་ཨིན།ང་བཅས་ག་ར་གིས་ འདི་བཟུམ་གྱི་ཚོར་སྣང་འདི་ སེམས་ཁར་དྲན་ཏེ་རང་སྡོད་འོང་ འདི་བཟུམ་གྱི་ཚོར་སྣང་འདི་ ཡུན་རིངམོ་སྦེ་སྒུག་སྡོད་མིའི་ འབྲས་བུ་འདི་ བྱུང་བའི་སྐབས་ལུ་ཨིན།# >>> compare(c(1, 2, 3, 4, 5, 1), c(1, 2, 3, 4, 2, -2))\n# c(0, 0, 0, 0, 3, 3)\n# >>> compare(c(0, 5, 0, 0, 0, 4), c(4, 1, 1, 0, 0, -2))\n# c(4, 4, 1, 0, 0, 6)\ncompare <- function(game, guess) {","canonical_solution":"compare <- function(game, guess) {\n  abs(game - guess)\n}","tests":"test_humaneval <- function() {\n    candidate <- compare\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 1), c(1, 2, 3, 4, 2, -2)), c(0, 0, 0, 0, 3, 3))))\n    stopifnot(isTRUE(all.equal(candidate(c(0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0)), c(0, 0, 0, 0, 0, 0))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3), c(-1, -2, -3)), c(2, 4, 6))))\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 5), c(-1, 2, 3, 4)), c(2, 0, 0, 1))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_153","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:(ཤུགས་དེ་ -༡ ཨིན།)return \"Slices.SErviNGSliCes\" འདི་ ཤུགས་ཅན་ལག་ལེན་འཐབ་ཡོད་པའི་ཁྱབ་ཚད་ཨིནམ་ལས་ \"SErviNGSliCes\" ཨིན།extension: ['SErviNGSliCes', 'Cheese', 'StuFfed'] འདི་ཨིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ དཔེར་ན་ ཁྱོད་ཀྱིས་ \"Slices\" འདི་ སློབ་ཚན་སྦེ་ཐོབ་པ་ཅིན་དང་ ཁྱོད་ཀྱིས་ཐོ་ཡིག་ནང་ལུ་ དང་པ་ཐོན་མི་ཅིག་ གདམ་ཁ་རྐྱབས།ཤུགས་འདི་གཉིས་ ཡང་ན་དེ་ལས་མང་བ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཤུགས་འདི་གཉིས་ཆ་ར་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་ ཤུགས་སྦེ་རང་format: ClassName.StrongestExtensionName.   ཤོག་ལེབ་འདི་ནང་ལུ་ ཌའི་ལོག་གི་མིང་འདི་ སྟོན་ཚུགས།ཁྱོད་ཀྱིས་ ཤུགས་ཅན་ཅིག་ཐོན་མི་འདི་འཚོལ་ཏེ་ འདི་ནང་ལུ་ string སླར་ལོག་འབད་དགོ།ཤུགས་འདི་ CAP - SM གི་ཆ་ཤས་ནང་ལས་ཐོབ་ཨིན།ཨེགསི་ཨེན་གྱི་མིང་ནང་ལུ་ཡིག་འབྲུ་ཚུ་དང་ SM འདི་ཡིག་འབྲུ་ཆུང་བའི་གྱངས་ཁ་ཨིན།རྒྱ་སྐྱེད་ཀྱི་ཤུགས་འདི་ འོག་ལུ་བཟུམ་སྦེ་ཨིན། CAP འདི་ཡིག་འབྲུ་སྦོམ་ཤོས་ཀྱི་ཨང་གྲངས་ཨིན།རྒྱས་བཤད་འདི་ སྦྱོར་སྡུད་ཀྱི་དོན་ལུ་ ལག་ལེན་འཐབ་ཨིན།ཁྱོད་ཀྱིས་ སྦྱོར་སྡེ་གི་མིང་ (ཐིག་ཡིག་) དང་ ཁྱབ་ཚད་ཀྱི་ཐོ་ཡིག་ཐོབ་འོང་།# >>> Strongest_Extension('my_class', c('AA', 'Be', 'CC'))\n# 'my_class.AA'\nStrongest_Extension <- function(class_name, extensions) {","canonical_solution":"Strongest_Extension <- function(class_name, extensions) {\n  # Function to calculate the strength of an extension\n  extension_strength <- function(ext) {\n    cap_count <- sum(grepl(\"[A-Z]\", strsplit(ext, \"\")[[1]]))\n    sm_count <- sum(grepl(\"[a-z]\", strsplit(ext, \"\")[[1]]))\n    return(cap_count - sm_count)\n  }\n  \n  # Calculate strength for each extension and find the strongest one\n  strengths <- sapply(extensions, extension_strength)\n  max_strength_index <- which.max(strengths)\n  \n  # Construct the result string\n  return(paste0(class_name, \".\", extensions[max_strength_index]))\n}","tests":"test_humaneval <- function() {\n    candidate <- Strongest_Extension\n    stopifnot(isTRUE(all.equal(candidate('Watashi', c('tEN', 'niNE', 'eIGHt8OKe')), 'Watashi.eIGHt8OKe')))\n    stopifnot(isTRUE(all.equal(candidate('Boku123', c('nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg')), 'Boku123.YEs.WeCaNe')))\n    stopifnot(isTRUE(all.equal(candidate('__YESIMHERE', c('t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321')), '__YESIMHERE.NuLl__')))\n    stopifnot(isTRUE(all.equal(candidate('K', c('Ta', 'TAR', 't234An', 'cosSo')), 'K.TAR')))\n    stopifnot(isTRUE(all.equal(candidate('__HAHA', c('Tab', '123', '781345', '-_-')), '__HAHA.123')))\n    stopifnot(isTRUE(all.equal(candidate('YameRore', c('HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-')), 'YameRore.okIWILL123')))\n    stopifnot(isTRUE(all.equal(candidate('finNNalLLly', c('Die', 'NowW', 'Wow', 'WoW')), 'finNNalLLly.WoW')))\n    stopifnot(isTRUE(all.equal(candidate('_', c('Bb', '91245')), '_.Bb')))\n    stopifnot(isTRUE(all.equal(candidate('Sp', c('671235', 'Bb')), 'Sp.671235')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_154","nl":"dzo_Tibt","pl":"r","prompt":"ཁྱོད་ཀྱིས་ཚིག་གཉིས་ཐོབ་ཨིན། ཁྱོད་ཀྱིས་ཚིག་གཉིས་པ་ ཡང་ན་ འདི་གི་འཁོར་ལོའི་གྲལ་རིམ་ཚུ་ ཚིག་དང་པ་ནང་ ནང་ཐིག་ཚུའི་གྲལ་རིམ་ཅིག་ཨིན་པ་ཅིན་ TRUE སླར་ལོག་འབད་དགོཔ་ཨིན།# >>> cycpattern_check('abcd', 'abd')\n# FALSE\n# >>> cycpattern_check('hello', 'ell')\n# TRUE\n# >>> cycpattern_check('whassup', 'psus')\n# FALSE\n# >>> cycpattern_check('abab', 'baa')\n# TRUE\n# >>> cycpattern_check('efef', 'eeff')\n# FALSE\n# >>> cycpattern_check('himenss', 'simen')\n# TRUE\ncycpattern_check <- function(a, b) {","canonical_solution":"cycpattern_check <- function(a, b) {\n  n <- nchar(b)\n  # Check all rotations of b\n  for (i in 0:(n-1)) {\n    # Rotate the string b by i characters\n    rotated_b <- substring(b, i+1, n) %\/% substring(b, 1, i)\n    # Check if the rotated string is a substring of a\n    if (grepl(rotated_b, a)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}","tests":"test_humaneval <- function() {\n    candidate <- cycpattern_check\n    stopifnot(isTRUE(all.equal(candidate('xyzw', 'xyw'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('yello', 'ell'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('whattup', 'ptut'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('efef', 'fee'), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate('abab', 'aabb'), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate('winemtt', 'tinem'), TRUE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_155","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་དང་ཆ་མཉམ་མེད་པའི་ཨང་གྲངས་ཚུ་ཡོད་པའི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན།#     >>> even_odd_count(-12)\n#     c(1, 1)\n#     >>> even_odd_count(123)\n#     c(1, 2)\neven_odd_count <- function(num) {","canonical_solution":"even_odd_count <- function(num) {\n  # Handle negative numbers by taking the absolute value\n  num <- abs(num)\n  \n  # Convert the number to a character vector to access digits\n  digits <- unlist(strsplit(as.character(num), \"\"))\n  \n  # Convert character vector back to integer\n  digits <- as.integer(digits)\n  \n  # Count even digits\n  even_count <- sum(digits %% 2 == 0)\n  \n  # Count odd digits\n  odd_count <- length(digits) - even_count\n  \n  # Return a vector with even and odd counts\n  return(c(even_count, odd_count))\n}","tests":"test_humaneval <- function() {\n    candidate <- even_odd_count\n    stopifnot(isTRUE(all.equal(candidate(7), c(0, 1))))\n    stopifnot(isTRUE(all.equal(candidate(-78), c(1, 1))))\n    stopifnot(isTRUE(all.equal(candidate(3452), c(2, 2))))\n    stopifnot(isTRUE(all.equal(candidate(346211), c(3, 3))))\n    stopifnot(isTRUE(all.equal(candidate(-345821), c(3, 3))))\n    stopifnot(isTRUE(all.equal(candidate(-2), c(1, 0))))\n    stopifnot(isTRUE(all.equal(candidate(-45347), c(2, 3))))\n    stopifnot(isTRUE(all.equal(candidate(0), c(1, 0))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_156","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:ཚད་འཛིན་: ༡ <= ཨང་གྲངས་ <= ༡༠༠༠དེ་ལས་ ཆེ་ཆུང་ཡིག་རྒྱུན་ནང་ལོག་གཏང་།ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་ཐོབ་པ་ཅིན་ རོམ་ཨང་གྲངས་ནང་ སྦེ་ཐིག་ཡིག་ཅིག་ཐོབ་དགོ།# >>> int_to_mini_roman(19)\n# 'xix'\n# >>> int_to_mini_roman(152)\n# 'clii'\n# >>> int_to_mini_roman(426)\n# 'cdxxvi'\nint_to_mini_roman <- function(number) {","canonical_solution":"int_to_mini_roman <- function(number) {\n  values <- c(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n  numerals <- c(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n  \n  result <- \"\"\n  remainder <- number\n  \n  for (i in seq_along(values)) {\n    while (remainder >= values[i]) {\n      result <- paste0(result, numerals[i])\n      remainder <- remainder - values[i]\n    }\n  }\n  \n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- int_to_mini_roman\n    stopifnot(isTRUE(all.equal(candidate(19), 'xix')))\n    stopifnot(isTRUE(all.equal(candidate(152), 'clii')))\n    stopifnot(isTRUE(all.equal(candidate(251), 'ccli')))\n    stopifnot(isTRUE(all.equal(candidate(426), 'cdxxvi')))\n    stopifnot(isTRUE(all.equal(candidate(500), 'd')))\n    stopifnot(isTRUE(all.equal(candidate(1), 'i')))\n    stopifnot(isTRUE(all.equal(candidate(4), 'iv')))\n    stopifnot(isTRUE(all.equal(candidate(43), 'xliii')))\n    stopifnot(isTRUE(all.equal(candidate(90), 'xc')))\n    stopifnot(isTRUE(all.equal(candidate(94), 'xciv')))\n    stopifnot(isTRUE(all.equal(candidate(532), 'dxxxii')))\n    stopifnot(isTRUE(all.equal(candidate(900), 'cm')))\n    stopifnot(isTRUE(all.equal(candidate(994), 'cmxciv')))\n    stopifnot(isTRUE(all.equal(candidate(1000), 'm')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_157","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:དབྱེ་བ་ ༩༠ ལུ་ཐིག་ཁྲམ་འདི་ཟུར་ཐིག་ཕྲང་ཟུར་གསུམ་འདི་ ཟུར་ཐིག་གཅིག་ ཟུར་ཐིག་ཕྲང་ཟུར་ ཡང་ན་ ཨིནམ་སྦེ་དབྱེ་ཚུགས།གཡོན་འདི་ ཟུར་ཟུར་གསུམ་སྦེ་བཟོ་སྟེ་ཡོདཔ་དང་ དེ་མེན་པ་ཅིན་ FALSEཨིན།ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཚུ་བྱིན་ཏེ་ཡོད་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1, 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {","canonical_solution":"right_angle_triangle <- function(a, b, c) {\n  # Sort the sides to easily compare the largest side\n  sides <- sort(c(a, b, c))\n  \n  # Check if the sum of squares of the two smaller sides equals the square of the largest side\n  return(sides[1]^2 + sides[2]^2 == sides[3]^2)\n}","tests":"test_humaneval <- function() {\n    candidate <- right_angle_triangle\n    stopifnot(isTRUE(all.equal(candidate(3, 4, 5), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(1, 2, 3), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(10, 6, 8), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(2, 2, 2), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(7, 24, 25), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(10, 5, 7), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(5, 12, 13), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(15, 8, 17), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(48, 55, 73), TRUE)))\n    stopifnot(isTRUE(all.equal(candidate(1, 1, 1), FALSE)))\n    stopifnot(isTRUE(all.equal(candidate(2, 2, 10), FALSE)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_158","nl":"dzo_Tibt","pl":"r","prompt":"ཤོག་བྱང་གི་གྲལ་ཐིག་ནང་ དང་པ་འོང་མི་ཡིག་འབྲུ་འདི་ལོག་གཏང་།ཚིག་ཡིག་ཁྱད་པར་ཅན་ཚུ་ ཡོད་པ་ཅིན་ string མང་ཤོས་ཅིག་ལུ་ ཁྱད་པར་ཅན་  ཟེར་ཨང་གྲངས་ཉུང་ཤོས་ཅིག་ཡོདཔ་ཨིན།མིང་ཐོ་ནང་ལུ་ ཚིག་མ་འདྲཝ་ལེ་ཤ་ཡོདཔ་ཨིན་ ཚིག་གི་ཨང་གྲངས་མང་ཤོས་ཅིག་སླར་ལོག་འབད།string གི་ཐོ་ཡིག་ཅིག་ལེན་མི་ལས་འགན་ཅིག་འབྲི་དགོ།# >>> find_max(c('name', 'of', 'string'))\n# 'string'\n# >>> find_max(c('name', 'enam', 'game'))\n# 'enam'\n# >>> find_max(c('aaaaaaa', 'bb', 'cc'))\n# 'aaaaaaa'\nfind_max <- function(words) {","canonical_solution":"find_max <- function(words) {\n  max_unique_chars <- 0\n  result <- \"\"\n  \n  for (word in words) {\n    unique_chars_count <- length(unique(strsplit(word, NULL)[[1]]))\n    \n    if (unique_chars_count > max_unique_chars ||\n       (unique_chars_count == max_unique_chars && word < result)) {\n      max_unique_chars <- unique_chars_count\n      result <- word\n    }\n  }\n  \n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- find_max\n    stopifnot(isTRUE(all.equal(candidate(c('name', 'of', 'string')), 'string')))\n    stopifnot(isTRUE(all.equal(candidate(c('name', 'enam', 'game')), 'enam')))\n    stopifnot(isTRUE(all.equal(candidate(c('aaaaaaa', 'bb', 'cc')), 'aaaaaaa')))\n    stopifnot(isTRUE(all.equal(candidate(c('abc', 'cba')), 'abc')))\n    stopifnot(isTRUE(all.equal(candidate(c('play', 'this', 'game', 'of', 'footbott')), 'footbott')))\n    stopifnot(isTRUE(all.equal(candidate(c('we', 'are', 'gonna', 'rock')), 'gonna')))\n    stopifnot(isTRUE(all.equal(candidate(c('we', 'are', 'a', 'mad', 'nation')), 'nation')))\n    stopifnot(isTRUE(all.equal(candidate(c('this', 'is', 'a', 'prrk')), 'this')))\n    stopifnot(isTRUE(all.equal(candidate(c('b')), 'b')))\n    stopifnot(isTRUE(all.equal(candidate(c('play', 'play', 'play')), 'play')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_159","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་:གལ་སྲིད་ ཀ་ར་ཏཱན་ལངམ་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཀ་ར་ཏཱན་ལངམ་ཚུ་ཟ་རུང་ ལྟོཝ་བཀྱེས་སྡོད་འོང་།ཟ་ཚར་བའི་ཤུལ་ལུ་ ལྷག་ལུས་པའི་ གུ་རུའི་གྱངས་ཁ་འདི་ཨིན།ཁྱོད་ཀྱིས་ ཟ་ཚར་བའི་ཤུལ་ལུ་ ཟད་འགྲོ་བཏང་མི་ ཀ་རོཊ་གི་གྱངས་ཁ་འདི་ ད་ཁྱོད་ཀྱིས་ ཉིན་བསྟར་གྱི་བཞེས་སྒོ་ཚུ་ ཟ་ནིའི་དོན་ལུ་ གུ་རུའི་རིགས་ཚུ་ ལྷག་ནི་དེ་ ཁག་ཆེཝ་ཨིན།ཁྱོད་ལྟོཝ་བཀྱེས་པའི་བྱ་རྒོད་ཅིག་ཨིན་ ཁྱོད་ཀྱིས་ གུ་རུའི་རིགས་ཚུ་ ལེ་ཤ་ཅིག་རང་ བཟའ་ཚར་ནུག# >>> eat(5, 6, 10)\n# c(11, 4)\n# >>> eat(4, 8, 9)\n# c(12, 1)\n# >>> eat(1, 10, 10)\n# c(11, 0)\n# >>> eat(2, 11, 5)\n# c(7, 0)\n# Variables:\n# @number : integer\n#     the number of carrots that you have eaten.\n# @need : integer\n#     the number of carrots that you need to eat.\n# @remaining : integer\n#     the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\neat <- function(number, need, remaining) {","canonical_solution":"eat <- function(number, need, remaining) {\n  total_eaten <- number + min(need, remaining)\n  remaining_carrots <- max(0, remaining - need)\n  return(c(total_eaten, remaining_carrots))\n}","tests":"test_humaneval <- function() {\n    candidate <- eat\n    stopifnot(isTRUE(all.equal(candidate(5, 6, 10), c(11, 4))))\n    stopifnot(isTRUE(all.equal(candidate(4, 8, 9), c(12, 1))))\n    stopifnot(isTRUE(all.equal(candidate(1, 10, 10), c(11, 0))))\n    stopifnot(isTRUE(all.equal(candidate(2, 11, 5), c(7, 0))))\n    stopifnot(isTRUE(all.equal(candidate(4, 5, 7), c(9, 2))))\n    stopifnot(isTRUE(all.equal(candidate(4, 5, 1), c(5, 0))))\n}\ntest_humaneval()"},{"task_id":"HumanEval_160","nl":"dzo_Tibt","pl":"r","prompt":"ལས་འགན་ཐོ་ཡིག་ནང་ལུ་ ལས་འགན་ཉུང་ཤོས་ཅིག་དང་ ལས་འགན་ཐོ་ཡིག་ནང་ལུ་ ལས་འགན་ཉུང་ཤོས་གཉིས་ཡོདཔ་ཨིན།ཨོ་པེ་རེན་ཌི་འདི་ ནེ་གེ་ཊི་བཱལ་མེན་པའི་ཨང་གྲངས་ཚུའི་ཐོ་ཡིག་ཨིན།ལས་འགན་ཐོ་ཡིག་གི་རིང་ཚད་འདི་ ལས་འགན་ཐོ་ཡིག་གི་རིང་ཚད་དང་མཉམ་པ་ཨིན།དྲན་གསོ།=> གྲུབ་འབྲས་ = ༩ གྲུབ་འབྲས་ = ༢ + ༣ * ༤ - ༥ཝེ་ཀཊར་ = [༢,༣,༤,༥] ཨིན།ལས་གཡོགཔ་གིས་ ['+', '*', '-'] དཔེ་འབད་བ་ཅིན་:ཨེགསི་ཨོཕ་ནི་ཊེཊི་ (**) ཨིན།ས་ཐོག་གི་ཆ་ཤས་ (_) མང་བ་བཟོ་ནི་ (*) ཨིན།མར་ཕབ་ ( - ) ཁ་སྐོང་ (+) ཨིན།གཞི་རྟེན་ཨེལ་ཇི་བཱར་གི་ལཱ་ཚུ་:expression དང་ expression གི་མཐའ་དཔྱད་ལོག་གཏང་།ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་འདི་ ཨང་གྲངས་གཉིས་པ་ཨིན་ ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་འདི་ཨེལ་ཇི་བཱརཀ་བཟོ་ནིའི་དོན་ལུ་ ལག་ལེན་འཐབ་ཨིན།ཨེཕ་རེནཌི་དང་ཨོཔརེནཌི་གཉིས་ལུ་ཐོ་ཡིག་བྱིན་ཏེ་ཡོདཔ་ཨིན། དང་པ་ཐོ་ཡིག་ནང་ལུ་གཞི་རྟེན་ཨེལ་ཇི་བཱར་གི་ལཱ་ཚུ་ཡོདཔ་དང་ do_algebra <- function(operator, operand) {","canonical_solution":"do_algebra <- function(operator, operand) {\n  if (length(operator) != length(operand) - 1) {\n    stop(\"The length of operator list must be equal to the length of operand list minus one.\")\n  }\n  \n  # Initialize the result with the first operand\n  result <- operand[1]\n  \n  # Iterate through the operators and operands\n  for (i in 1:length(operator)) {\n    op <- operator[i]\n    num <- operand[i + 1]\n    \n    # Apply the appropriate operation\n    if (op == '+') {\n      result <- result + num\n    } else if (op == '-') {\n      result <- result - num\n    } else if (op == '*') {\n      result <- result * num\n    } else if (op == '\/\/') {\n      result <- result %\/% num\n    } else if (op == '**') {\n      result <- result ^ num\n    } else {\n      stop(\"Unsupported operation\")\n    }\n  }\n  \n  return(result)\n}","tests":"test_humaneval <- function() {\n    candidate <- do_algebra\n    stopifnot(isTRUE(all.equal(candidate(c('**', '*', '+'), c(2, 3, 4, 5)), 37)))\n    stopifnot(isTRUE(all.equal(candidate(c('+', '*', '-'), c(2, 3, 4, 5)), 9)))\n    stopifnot(isTRUE(all.equal(candidate(c('\/\/', '*'), c(7, 3, 4)), 8)))\n}\ntest_humaneval()"},{"task_id":"HumanEval_161","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་སྟོན་ ལས་འགན་འདི་གིས་ གྲུབ་འབྲས་ཀྱི་ཐིག་ཁྲམ་སླར་ལོག་འབདཝ་ཨིན།stringནང་ལུ་ཡིག་འབྲུ་མེད་པ་ཅིན་ stringའདི་ཁ་བསྒྱུར་འབད།དེ་མེན་པ་ཅིན་ འདི་བཟུམ་སྦེ་རང་བཞག་དགོs[i]འདི་ཡིག་འབྲུ་ཨིན་པ་ཅིན་ འོག་ལས་མཐོ་ ཡང་ན་ ཕྱོགས་གཞན་ཁ་ལུ་ འབྲི་དགོ།ཁྱོད་ལུ་ string s ཅིག་བྱིན་ནུག# >>> solve('1234')\n# '4321'\n# >>> solve('ab')\n# 'AB'\n# >>> solve('#a@C')\n# '#A@c'\nsolve <- function(s) {","canonical_solution":"solve <- function(s) {\n  if (grepl(\"[a-zA-Z]\", s)) {\n    return(chartr(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", s))\n  } else {\n    return(intToUtf8(rev(utf8ToInt(s))))\n  }\n}","tests":"test_humaneval <- function() {\n    candidate <- solve\n    stopifnot(isTRUE(all.equal(candidate('AsDf'), 'aSdF')))\n    stopifnot(isTRUE(all.equal(candidate('1234'), '4321')))\n    stopifnot(isTRUE(all.equal(candidate('ab'), 'AB')))\n    stopifnot(isTRUE(all.equal(candidate('#a@C'), '#A@c')))\n    stopifnot(isTRUE(all.equal(candidate('#AsdfW^45'), '#aSDFw^45')))\n    stopifnot(isTRUE(all.equal(candidate('#6@2'), '2@6#')))\n    stopifnot(isTRUE(all.equal(candidate('#$a^D'), '#$A^d')))\n    stopifnot(isTRUE(all.equal(candidate('#ccc'), '#CCC')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_162","nl":"dzo_Tibt","pl":"r","prompt":"'text'འདི་ སྟོང་པ་སྦེ་ཡོད་པའི་ stringཨིན་པ་ཅིན་ NULL སླར་ལོག་འབདཝ་ཨིན།string 'text' ཅིག་བྱིན་པ་ཅིན་ md5 ཧེཤི་ འདྲ་མཉམ་གྱི་ string འདི་ལོག་གཏང་།# >>> string_to_md5('Hello world')\n# '3e25960a79dbc69b674cd4ec67a72c62'\nstring_to_md5 <- function(text) {","canonical_solution":"string_to_md5 <- function(text) {\n  if (text == \"\") {\n    return(NULL)\n  } else {\n    return(digest::digest(text, algo = \"md5\", serialize = FALSE))\n  }\n}\n\n# Ensure the required library is loaded\nif(!requireNamespace(\"digest\", quietly = TRUE)) {\n  install.packages(\"digest\")\n}\n\n# Load the digest library\nlibrary(digest)","tests":"test_humaneval <- function() {\n    candidate <- string_to_md5\n    stopifnot(isTRUE(all.equal(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')))\n    stopifnot(isTRUE(all.equal(candidate(''), NULL)))\n    stopifnot(isTRUE(all.equal(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')))\n    stopifnot(isTRUE(all.equal(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')))\n}\ntest_humaneval()"},{"task_id":"HumanEval_163","nl":"dzo_Tibt","pl":"r","prompt":"དཔེ་འབད་བ་ཅིན་: b འདི་ཡར་སེང་གི་རིམ་པ་ལུ་ཨིན།ཤོག་གྲངས་ཆ་མཉམ་ a དང་ b གཉིས་ཐོབ་པ་ཅིན་ ཤོག་གྲངས་ཆ་མཉམ་ a དང་ b གི་བར་ན་སླར་ལོག་འབདཝ་ཨིན།# >>> generate_integers(2, 8)\n# c(2, 4, 6, 8)\n# >>> generate_integers(8, 2)\n# c(2, 4, 6, 8)\n# >>> generate_integers(10, 14)\n# c()\ngenerate_integers <- function(a, b) {","canonical_solution":"generate_integers <- function(a, b) {\n  start <- min(a, b)\n  end <- max(a, b)\n  even_digits <- seq(start, end)[seq(start, end) %% 2 == 0 & seq(start, end) <= 8]\n  return(even_digits)\n}","tests":"test_humaneval <- function() {\n    candidate <- generate_integers\n    stopifnot(isTRUE(all.equal(candidate(2, 10), c(2, 4, 6, 8))))\n    stopifnot(isTRUE(all.equal(candidate(10, 2), c(2, 4, 6, 8))))\n    stopifnot(isTRUE(all.equal(candidate(132, 2), c(2, 4, 6, 8))))\n    stopifnot(isTRUE(all.equal(candidate(17, 89), c())))\n}\ntest_humaneval()"}]