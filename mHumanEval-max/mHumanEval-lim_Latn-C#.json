[{"task_id":"HumanEval_0","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/bie ©eid) t    \/\/Controleer of in de gegeven lijst van getalle, nog twie getalle dichter bij elkaar ligke es     \/\/ >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n    \/\/ (false)\n    \/\/ >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n    \/\/ (true)\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n","canonical_solution":"public static bool HasCloseElements(List<float> numbers, float threshold) {\n    numbers.Sort();\n    for (int i = 1; i < numbers.Count; i++) {\n        if (numbers[i] - numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    return false;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_1","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Ignoreer alle spasies in de input string.    \/\/Aafsjèllige groepe zeen gebalanceerd (edere ope brace is good geslote) en neet inne ein verboewd.    \/\/Sjtèl die groep in aparte stringe en zèt de lies van die.    \/\/Input veur deze functie is 'n string die meerdere groepe genesteerde haakjes bevat.    \/\/ >>> SeparateParenGroups((\"( ) (( )) (( )( ))\"))\n    \/\/ (new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string paren_string) {\n","canonical_solution":"public static List<string> SeparateParenGroups(string paren_string) {\n        List<string> result = new List<string>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        foreach (char c in paren_string) {\n            if (c == ' ') {\n                continue;\n            }\n\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n\n            currentGroup.Append(c);\n\n            \/\/ When balance is zero, we have a complete group\n            if (balance == 0 && currentGroup.Length > 0) {\n                result.Add(currentGroup.ToString());\n                currentGroup.Clear();\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\")).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_2","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Retourneer 't decimaal deil van 't getal.    \/\/(overblijfsel is altied kleiner es 1).    \/\/en integerdeil (groetste integer kleiner es gegeve getal) en decimalen     \/\/Gegaeve 'n positief floating point getal, kan 't oetgebreid weure tot     \/\/ >>> TruncateNumber((3.5f))\n    \/\/ (0.5f)\n    public static float TruncateNumber(float number) {\n","canonical_solution":"using System;\n\nclass Problem {\n    \/\/ Given a positive floating point number, it can be decomposed into\n    \/\/ an integer part (largest integer smaller than the given number) and decimals\n    \/\/ (leftover part always smaller than 1).\n    \/\/ Return the decimal part of the number.\n    public static float TruncateNumber(float number) {\n        return number - (float)Math.Floor(number);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_3","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/op dat punt zouw de functie true moeten retourneren. Anders zouw 't false moeten retourneren.    \/\/De opdracht is om te zien of op e moment 't saldo van de rekening ónger nul val en     \/\/'n Lies van ins- en oettrèkinge op 'n bankrekening begint mèt 'n     \/\/ >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (false)\n    \/\/ >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n    \/\/ (true)\n    public static bool BelowZero(List<long> operations) {\n","canonical_solution":"long balance = 0;\n    foreach (var operation in operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_4","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/MAD = gemiddelde. x - x_mean.     \/\/element en 'n middelpunt (in dit geval 't gemiddelde):     \/\/De gemiddelde absolute afwijking is 't gemiddelde absolute versjèl tösse alle     \/\/rond 't gemiddelde vaan deze gegevens.    \/\/Veur 'n gegegeve lies vaan inputnummers, berekent me de absolute afwijking     \/\/ >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    \/\/ (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n","canonical_solution":"if (numbers == null || numbers.Count == 0)\n    {\n        throw new ArgumentException(\"The list of numbers must not be null or empty.\");\n    }\n    \n    float sum = 0.0f;\n    foreach (float number in numbers)\n    {\n        sum += number;\n    }\n\n    float mean = sum \/ numbers.Count;\n    float absoluteDeviationSum = 0.0f;\n    \n    foreach (float number in numbers)\n    {\n        absoluteDeviationSum += Math.Abs(number - mean);\n    }\n    \n    float meanAbsoluteDeviation = absoluteDeviationSum \/ numbers.Count;\n    return meanAbsoluteDeviation;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n"},{"task_id":"HumanEval_5","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Inserteer 'n getal 'delimiter' tösse alle twie opeenvolgende elemente van de inputlijst ∀nummers'     \/\/ >>> Intersperse((new List<long>()), (4L))\n    \/\/ (new List<long>())\n    \/\/ >>> Intersperse((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (4L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)4L, (long)3L}))\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n","canonical_solution":"public static List<long> Intersperse(List<long> numbers, long delimeter)\n{\n    List<long> result = new List<long>();\n\n    if (numbers == null || numbers.Count == 0)\n    {\n        return result;\n    }\n\n    for (int i = 0; i < numbers.Count; i++)\n    {\n        result.Add(numbers[i]);\n        if (i < numbers.Count - 1)\n        {\n            result.Add(delimeter);\n        }\n    }\n\n    return result;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersperse((new List<long>()), (7L)).Equals((new List<long>())));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)2L})), (8L)).Equals((new List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)3L, (long)8L, (long)2L}))));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)2L, (long)2L, (long)2L})), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_6","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Bv. (() (()) heet maximaal twie niveaus vaan neetinge, terwijl ((())) drei höbbe.     \/\/Veur eder groep, de deepste niveaus van verneuking van haofsjtekers.    \/\/Input veur deze functie is 'n string die meerdere groepe veur genestege haofsjes verdeild door ruumtes weergeeft.    \/\/ >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n    public static List<long> ParseNestedParens(string paren_string) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> ParseNestedParens(string paren_string) {\n        List<long> nestingLevels = new List<long>();\n        string[] groups = paren_string.Split(' ');\n\n        foreach (string group in groups) {\n            long currentLevel = 0;\n            long maxLevel = 0;\n\n            foreach (char c in group) {\n                if (c == '(') {\n                    currentLevel++;\n                    if (currentLevel > maxLevel) {\n                        maxLevel = currentLevel;\n                    }\n                } else if (c == ')') {\n                    currentLevel--;\n                }\n            }\n\n            nestingLevels.Add(maxLevel);\n        }\n\n        return nestingLevels;\n    }\n\n    static void Main(string[] args) {\n        string input = \"(()()) ((())) () ((())()())\";\n        List<long> result = ParseNestedParens(input);\n        Console.WriteLine(string.Join(\", \", result));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_7","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Filter 'n inputlijst vaan streije allein veur die die 'n bepaalde substring bevatte     \/\/ >>> FilterBySubstring((new List<string>()), (\"a\"))\n    \/\/ (new List<string>())\n    \/\/ >>> FilterBySubstring((new List<string>(new string[]{(string)\"abc\", (string)\"bacd\", (string)\"cde\", (string)\"array\"})), (\"a\"))\n    \/\/ (new List<string>(new string[]{(string)\"abc\", (string)\"bacd\", (string)\"array\"}))\n    public static List<string> FilterBySubstring(List<string> strings, string substring) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<string> FilterBySubstring(List<string> strings, string substring) {\n        List<string> result = new List<string>();\n        foreach (string str in strings) {\n            if (str.Contains(substring)) {\n                result.Add(str);\n            }\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterBySubstring((new List<string>()), (\"john\")).Equals((new List<string>())));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).Equals((new List<string>(new string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"aaaxxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xx\")).Equals((new List<string>(new string[]{(string)\"xxx\", (string)\"aaaxxy\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new string[]{(string)\"grunt\", (string)\"trumpet\", (string)\"prune\", (string)\"gruesome\"})), (\"run\")).Equals((new List<string>(new string[]{(string)\"grunt\", (string)\"prune\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_8","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/De lege som moet 0 en 't lege product moet 1 zien.    \/\/Veur 'n gegegeve lies van ganse getalle, wurt 'n tupel geretourneerd die besteit oet 'n som en 'n product vaan alle ganse getalle in 'n lies.     \/\/ >>> SumProduct((new List<long>()))\n    \/\/ (Tuple.Create(0L, 1L))\n    \/\/ >>> SumProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (Tuple.Create(10L, 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum = 0L;\n        long product = 1L;\n\n        foreach (var number in numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Tuple.Create(sum, product);\n    }\n\n    static void Main(string[] args) {\n        \/\/ Test cases\n        var result1 = SumProduct(new List<long>());\n        Console.WriteLine($\"({result1.Item1}, {result1.Item2})\"); \/\/ Should output (0, 1)\n\n        var result2 = SumProduct(new List<long> { 1L, 2L, 3L, 4L });\n        Console.WriteLine($\"({result2.Item1}, {result2.Item2})\"); \/\/ Should output (10, 24)\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"},{"task_id":"HumanEval_9","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/in de volgorde.    \/\/Van 'n gegegeve lies van gans getalle, genereer 'n lies vaan de rolende maximale elementen die tot 't gegegeve moment weure oontdèk.    \/\/ >>> RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)2L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long> numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMaxList = new List<long>();\n        long currentMax = long.MinValue;\n\n        foreach (var number in numbers) {\n            if (number > currentMax) {\n                currentMax = number;\n            }\n            rollingMaxList.Add(currentMax);\n        }\n\n        return rollingMaxList;\n    }\n\n    public static void Main(string[] args) {\n        List<long> numbers = new List<long> { 1L, 2L, 3L, 2L, 3L, 4L, 2L };\n        List<long> result = RollingMax(numbers);\n        Console.WriteLine(\"Rolling Max: \" + string.Join(\", \", result));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_10","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/- Voeg aan 't eind vaan de string 'n stringprefix toe die veur 't palindroomsuffix kump.    \/\/- Zoek de langste postfix van de aangeleverde string die 'n palindroom is.    \/\/Algoritme idee is simpel:     \/\/Veur de kortste palindroom die begint mèt 'n aafgegaeve string.    \/\/ >>> MakePalindrome((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> MakePalindrome((\"cat\"))\n    \/\/ (\"catac\")\n    \/\/ >>> MakePalindrome((\"cata\"))\n    \/\/ (\"catac\")\n    public static string MakePalindrome(string str) {\n","canonical_solution":"if (string.IsNullOrEmpty(str)) return str;\n\n    int maxPalindromeLength = 0;\n    for (int i = 0; i < str.Length; i++) {\n        if (IsPalindrome(str, i, str.Length - 1)) {\n            maxPalindromeLength = str.Length - i;\n            break;\n        }\n    }\n\n    string suffixToPrepend = str.Substring(0, str.Length - maxPalindromeLength);\n    char[] reversedPrefix = suffixToPrepend.Reverse().ToArray();\n    return str + new string(reversedPrefix);\n}\n\nprivate static bool IsPalindrome(string str, int left, int right) {\n    while (left < right) {\n        if (str[left] != str[right]) return false;\n        left++;\n        right--;\n    }\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MakePalindrome((\"\")).Equals((\"\")));\n    Debug.Assert(MakePalindrome((\"x\")).Equals((\"x\")));\n    Debug.Assert(MakePalindrome((\"xyz\")).Equals((\"xyzyx\")));\n    Debug.Assert(MakePalindrome((\"xyx\")).Equals((\"xyx\")));\n    Debug.Assert(MakePalindrome((\"jerry\")).Equals((\"jerryrrej\")));\n    }\n\n}\n"},{"task_id":"HumanEval_11","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veur deze ingange weurt binêre XOR uitgevoerd en 't resultaat weurt ouch es 'n string geretourneerd.    \/\/Input zien twie stringe a en b die allein oet 1's en 0's besteit.    \/\/ >>> StringXor((\"010\"), (\"110\"))\n    \/\/ (\"100\")\n    public static string StringXor(string a, string b) {\n","canonical_solution":"if (a.Length != b.Length) {\n        throw new ArgumentException(\"Input strings must be of the same length.\");\n    }\n\n    StringBuilder result = new StringBuilder(a.Length);\n\n    for (int i = 0; i < a.Length; i++) {\n        result.Append(a[i] == b[i] ? '0' : '1');\n    }\n\n    return result.ToString();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"},{"task_id":"HumanEval_12","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Stringe van dezelfde lengte. Retourne null es de inputlijst leeg is.    \/\/Oet de lies vaan de stringe, retourneer de langste.    \/\/ >>> Longest((new List<string>()))\n    \/\/ null\n    \/\/ >>> Longest((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})))\n    \/\/ (\"a\")\n    \/\/ >>> Longest((new List<string>(new string[]{(string)\"a\", (string)\"bb\", (string)\"ccc\"})))\n    \/\/ (\"ccc\")\n    public static string Longest(List<string> strings) {\n","canonical_solution":"if (strings == null || strings.Count == 0)\n    {\n        return null;\n    }\n    \n    string longest = strings[0];\n    \n    foreach (string str in strings)\n    {\n        if (str.Length > longest.Length)\n        {\n            longest = str;\n        }\n    }\n    \n    return longest;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Longest((new List<string>())).Equals(null));\n    Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"x\")));\n    Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"yyy\", (string)\"zzzz\", (string)\"www\", (string)\"kkkk\", (string)\"abc\"}))).Equals((\"zzzz\")));\n    }\n\n}\n"},{"task_id":"HumanEval_13","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Retourneer 'n groetste gemene deil vaan twie gans getalle a en b     \/\/ >>> GreatestCommonDivisor((3L), (5L))\n    \/\/ (1L)\n    \/\/ >>> GreatestCommonDivisor((25L), (15L))\n    \/\/ (5L)\n    public static long GreatestCommonDivisor(long a, long b) {\n","canonical_solution":"\/\/ Base case: if b is 0, gcd is a\n    if (b == 0)\n        return a;\n    \n    \/\/ Recursive call: gcd(a, b) = gcd(b, a % b)\n    return GreatestCommonDivisor(b, a % b);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GreatestCommonDivisor((3L), (7L)) == (1L));\n    Debug.Assert(GreatestCommonDivisor((10L), (15L)) == (5L));\n    Debug.Assert(GreatestCommonDivisor((49L), (14L)) == (7L));\n    Debug.Assert(GreatestCommonDivisor((144L), (60L)) == (12L));\n    }\n\n}\n"},{"task_id":"HumanEval_14","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/De opname liest van alle prefixe van kortste nao langste vaan de inputstring     \/\/ >>> AllPrefixes((\"abc\"))\n    \/\/ (new List<string>(new string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static List<string> AllPrefixes(string str) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Return list of all prefixes from shortest to longest of the input string\n    public static List<string> AllPrefixes(string str) {\n        List<string> prefixes = new List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0, i));\n        }\n        return prefixes;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"WWW\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_15","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Returneer 'n string die ruimte-afgebeurde getalle bevat die beginne vaan 0 tot en mèt n.     \/\/ >>> StringSequence((0L))\n    \/\/ (\"0\")\n    \/\/ >>> StringSequence((5L))\n    \/\/ (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n) {\n","canonical_solution":"public static string StringSequence(long n) {\n    StringBuilder sb = new StringBuilder();\n    for (long i = 0; i <= n; i++) {\n        if (i > 0) {\n            sb.Append(\" \");\n        }\n        sb.Append(i);\n    }\n    return sb.ToString();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"},{"task_id":"HumanEval_16","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veur 'n string, vindj oet wieväöl versjillende karakters (onaafhankelik van de hoofsjtèl) 't besteit oet     \/\/ >>> CountDistinctCharacters((\"xyzXYZ\"))\n    \/\/ (3L)\n    \/\/ >>> CountDistinctCharacters((\"Jerry\"))\n    \/\/ (4L)\n    public static long CountDistinctCharacters(string str) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static long CountDistinctCharacters(string str) {\n        \/\/ Convert the string to lower case to handle case insensitivity\n        str = str.ToLower();\n\n        \/\/ Use a HashSet to store distinct characters\n        HashSet<char> distinctChars = new HashSet<char>(str);\n\n        \/\/ Return the count of distinct characters\n        return distinctChars.Count;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"},{"task_id":"HumanEval_17","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/'Hoeag' - kwartetoet, duurt ein slaag.    \/\/'O 'n 'doe' - halve noot, duurt 2 slaag.    \/\/'O' - ganse noot, duurt vier slage.    \/\/Hier is ' n legende:    \/\/neet lètste.    \/\/De taak is om deze string te parse en ' n liest van ganste getalle te geven die overeenkomen met ' t aantal slagen dat elk getal doet .    \/\/De input veur deze functie is 'n snaor die muzikale noot in 'n speciaal ASCII-formaot weergeeft.    \/\/ >>> ParseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    \/\/ (new List<long>(new long[]{(long)4L, (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L, (long)1L, (long)4L, (long)4L}))\n    public static List<long> ParseMusic(string music_string) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> ParseMusic(string music_string)\n    {\n        List<long> beats = new List<long>();\n        string[] notes = music_string.Split(' ');\n        \n        foreach (string note in notes)\n        {\n            switch (note)\n            {\n                case \"o\":\n                    beats.Add(4L);\n                    break;\n                case \"o|\":\n                    beats.Add(2L);\n                    break;\n                case \".|\":\n                    beats.Add(1L);\n                    break;\n                default:\n                    break;\n            }\n        }\n        \n        return beats;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseMusic((\"\")).Equals((new List<long>())));\n    Debug.Assert(ParseMusic((\"o o o o\")).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\".| .| .| .|\")).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}))));\n    Debug.Assert(ParseMusic((\"o| o| .| .| o o o o\")).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L, (long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"o| .| o| .| o o| o o|\")).Equals((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)1L, (long)4L, (long)2L, (long)4L, (long)2L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_18","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veur de aafsjplitsing van de oersjprunkeleke string, zeen de oersjplitsinge in de oersjplitsing van de oersjplitsende stringe te vinde.    \/\/ >>> HowManyTimes((\"\"), (\"a\"))\n    \/\/ (0L)\n    \/\/ >>> HowManyTimes((\"aaa\"), (\"a\"))\n    \/\/ (3L)\n    \/\/ >>> HowManyTimes((\"aaaa\"), (\"aa\"))\n    \/\/ (3L)\n    public static long HowManyTimes(string str, string substring) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long HowManyTimes(string str, string substring) {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n            return 0L;\n        }\n\n        long count = 0;\n        int index = 0;\n\n        while ((index = str.IndexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n\n        return count;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(HowManyTimes(\"aaa\", \"a\")); \/\/ Output: 3\n        Console.WriteLine(HowManyTimes(\"aaaa\", \"aa\")); \/\/ Output: 3\n        Console.WriteLine(HowManyTimes(\"\", \"a\")); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_19","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veur de string mit getalle gesorteerd van kleinste nao groetste     \/\/Gebruikelik zien \"null\", \"ein\", \"twee\", \"drie\", \"vier\", \"vief\", \"zees\", \"zeve\", \"acht\" en \"neet\".     \/\/Input is 'n ruimte-afgebeurde reeks nummers van 'nul' tot 'negen'.    \/\/ >>> SortNumbers((\"three one five\"))\n    \/\/ (\"one three five\")\n    public static string SortNumbers(string numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static string SortNumbers(string numbers)\n    {\n        Dictionary<string, int> numberWords = new Dictionary<string, int>\n        {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 }\n        };\n\n        List<string> numberList = new List<string>(numbers.Split(' '));\n        numberList.Sort((a, b) => numberWords[a].CompareTo(numberWords[b]));\n        return string.Join(\" \", numberList);\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(SortNumbers(\"three one five\")); \/\/ Output: \"one three five\"\n        Console.WriteLine(SortNumbers(\"nine eight seven six\")); \/\/ Output: \"six seven eight nine\"\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"},{"task_id":"HumanEval_20","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/'t aantal van de opgaafswaorde is:    \/\/Van 'n geveerde lies van getalle (van minstens twie lengte) kiestj en ruutj twie die 't naost aan eder zeen     \/\/ >>> FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n    \/\/ (Tuple.Create(2.0f, 2.2f))\n    \/\/ >>> FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n    \/\/ (Tuple.Create(2.0f, 2.0f))\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n        if (numbers == null || numbers.Count < 2) {\n            throw new ArgumentException(\"List must contain at least two numbers.\");\n        }\n        \n        numbers.Sort();\n        float minDifference = float.MaxValue;\n        Tuple<float, float> closestPair = null;\n\n        for (int i = 0; i < numbers.Count - 1; i++) {\n            float difference = numbers[i + 1] - numbers[i];\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestPair = Tuple.Create(numbers[i], numbers[i + 1]);\n            }\n        }\n\n        return closestPair;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(3.9f, 4.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))).Equals((Tuple.Create(5.0f, 5.9f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(2.0f, 2.2f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))).Equals((Tuple.Create(2.0f, 2.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))).Equals((Tuple.Create(2.2f, 3.1f))));\n    }\n\n}\n"},{"task_id":"HumanEval_21","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Zoëdat 't kleinste getal 0 weurt en 't groetste 1     \/\/Gegeve 'n lies vaan getalle (van minstens twie elemente), wèrk 'n lineaire transformatie op die lies,     \/\/ >>> RescaleToUnit((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n    \/\/ (new List<float>(new float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\n    public static List<float> RescaleToUnit(List<float> numbers) {\n","canonical_solution":"public static List<float> RescaleToUnit(List<float> numbers) {\n        if (numbers == null || numbers.Count < 2)\n            throw new ArgumentException(\"List must contain at least two elements.\");\n\n        float min = numbers.Min();\n        float max = numbers.Max();\n\n        if (min == max)\n            throw new ArgumentException(\"All elements are the same. Cannot rescale.\");\n\n        return numbers.Select(num => (num - min) \/ (max - min)).ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)49.9f}))).Equals((new List<float>(new float[]{(float)0.0f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)100.0f, (float)49.9f}))).Equals((new List<float>(new float[]{(float)1.0f, (float)0.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))).Equals((new List<float>(new float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))).Equals((new List<float>(new float[]{(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))).Equals((new List<float>(new float[]{(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    }\n\n}\n"},{"task_id":"HumanEval_22","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Filter gegeve lies van alle csthon waarden allein veur integer     \/\/ >>> FilterIntegers((new List<object>(new string[]{(string)\"a\", (string)3.14f, (string)5L})))\n    \/\/ (new List<long>(new long[]{(long)5L}))\n    \/\/ >>> FilterIntegers((new List<object>(new object[]{1L, 2L, 3L, \"abc\", new List<object>()})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    public static List<long> FilterIntegers(List<object> values) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> FilterIntegers(List<object> values) {\n        List<long> result = new List<long>();\n        foreach (var value in values) {\n            if (value is long) {\n                result.Add((long)value);\n            }\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterIntegers((new List<object>())).Equals((new List<long>())));\n    Debug.Assert(FilterIntegers((new List<object>(new object[]{4L, new List<object>(), 23.2f, 9L, \"adasd\"}))).Equals((new List<long>(new long[]{(long)4L, (long)9L}))));\n    Debug.Assert(FilterIntegers((new List<object>(new object[]{3L, \"c\", 3L, 3L, \"a\", \"b\"}))).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)3L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_23","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Terugloop lengte van de gegeven string     \/\/ >>> StringLength((\"\"))\n    \/\/ (0L)\n    \/\/ >>> StringLength((\"abc\"))\n    \/\/ (3L)\n    public static long Strlen(string str) {\n","canonical_solution":"return str.Length;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Strlen((\"\")) == (0L));\n    Debug.Assert(Strlen((\"x\")) == (1L));\n    Debug.Assert(Strlen((\"asdasnakj\")) == (9L));\n    }\n\n}\n"},{"task_id":"HumanEval_24","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veur 'n gegeve getal n, vind 't groetste getal dat n eigelik deilt, kleiner es n.    \/\/ >>> LargestDivisor((15L))\n    \/\/ (5L)\n    public static long LargestDivisor(long n) {\n","canonical_solution":"if (n <= 1)\n        {\n            throw new ArgumentOutOfRangeException(\"n must be greater than 1\");\n        }\n        for (long i = n \/ 2; i >= 1; i--)\n        {\n            if (n % i == 0)\n            {\n                return i;\n            }\n        }\n        return 1; \/\/ This line is theoretically unreachable since 1 is always a divisor of n\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestDivisor((3L)) == (1L));\n    Debug.Assert(LargestDivisor((7L)) == (1L));\n    Debug.Assert(LargestDivisor((10L)) == (5L));\n    Debug.Assert(LargestDivisor((100L)) == (50L));\n    Debug.Assert(LargestDivisor((49L)) == (7L));\n    }\n\n}\n"},{"task_id":"HumanEval_25","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Input nummer zouw geliek mote zien aan 't product vaan alle factoren.    \/\/Iedere factor zouw 't aantal kier weure vermeld dat correspondeert mèt 't aantal kier dat 't in de factorisatie versjient.    \/\/Returneert de lies van de primaire factoren van 'n gegiechde gans getal in volgorde van kleinste nao groetste.    \/\/ >>> Factorize((8L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    \/\/ >>> Factorize((25L))\n    \/\/ (new List<long>(new long[]{(long)5L, (long)5L}))\n    \/\/ >>> Factorize((70L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)5L, (long)7L}))\n    public static List<long> Factorize(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> Factorize(long n) {\n        List<long> factors = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n \/= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_26","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Halt de volgorde van de elemente same as in de input.    \/\/Van 'n lies van gans getalle, verdrieve alle elemente die mie es einmaol veurkoume.    \/\/ >>> RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)3L, (long)4L}))\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    \/\/ From a list of integers, remove all elements that occur more than once.\n    \/\/ Keep order of elements left the same as in the input.\n    public static List<long> RemoveDuplicates(List<long> numbers)\n    {\n        var elementCount = numbers.GroupBy(n => n)\n                                  .ToDictionary(g => g.Key, g => g.Count());\n\n        return numbers.Where(n => elementCount[n] == 1).ToList();\n    }\n\n    static void Main(string[] args)\n    {\n        List<long> numbers = new List<long> { 1, 2, 3, 2, 4 };\n        List<long> result = RemoveDuplicates(numbers);\n        Console.WriteLine(string.Join(\", \", result));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDuplicates((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)3L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_27","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veur 'n bepaalde string, verplaats kleinlettermerke nao groete en groete naor kleinletter.     \/\/ >>> FlipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    public static string FlipCase(string str) {\n","canonical_solution":"using System;\n\nclass Problem {\n    \/\/ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \/\/ >>> FlipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n            if (char.IsUpper(chars[i])) {\n                chars[i] = char.ToLower(chars[i]);\n            } else if (char.IsLower(chars[i])) {\n                chars[i] = char.ToUpper(chars[i]);\n            }\n        }\n        return new string(chars);\n    }\n    \n    static void Main(string[] args) {\n        Console.WriteLine(FlipCase(\"Hello\")); \/\/ Output should be \"hELLO\"\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\")));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"},{"task_id":"HumanEval_28","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Concatenate list of strings into a single string     \/\/ >>> Concatenate((new List<string>()))\n    \/\/ (\"\")\n    \/\/ >>> Concatenate((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})))\n    \/\/ (\"abc\")\n    public static string Concatenate(List<string> strings) {\n","canonical_solution":"return string.Concat(strings);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Concatenate((new List<string>())).Equals((\"\")));\n    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"xyz\")));\n    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\", (string)\"w\", (string)\"k\"}))).Equals((\"xyzwk\")));\n    }\n\n}\n"},{"task_id":"HumanEval_29","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Filter 'n inputlijst vaan streije allein veur die die beginne mèt 'n bepaold prefix.    \/\/ >>> FilterByPrefix((new List<string>()), (\"a\"))\n    \/\/ (new List<string>())\n    \/\/ >>> FilterByPrefix((new List<string>(new string[]{(string)\"abc\", (string)\"bcd\", (string)\"cde\", (string)\"array\"})), (\"a\"))\n    \/\/ (new List<string>(new string[]{(string)\"abc\", (string)\"array\"}))\n    public static List<string> FilterByPrefix(List<string> strings, string prefix) {\n","canonical_solution":"return strings.Where(s => s.StartsWith(prefix)).ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterByPrefix((new List<string>()), (\"john\")).Equals((new List<string>())));\n    Debug.Assert(FilterByPrefix((new List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).Equals((new List<string>(new string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_30","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Retourneer allein positieve getalle in de lies.     \/\/ >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    \/\/ >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    \/\/ (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> GetPositive(List<long> l)\n    {\n        List<long> positiveNumbers = new List<long>();\n        foreach (long number in l)\n        {\n            if (number > 0)\n            {\n                positiveNumbers.Add(number);\n            }\n        }\n        return positiveNumbers;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).Equals((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)3L, (long)9L, (long)123L, (long)1L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L}))).Equals((new List<long>())));\n    Debug.Assert(GetPositive((new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_31","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Returneer true es 'n gegeve getal prima is, en false es 't neet prima is.    \/\/ >>> IsPrime((6L))\n    \/\/ (false)\n    \/\/ >>> IsPrime((101L))\n    \/\/ (true)\n    \/\/ >>> IsPrime((11L))\n    \/\/ (true)\n    \/\/ >>> IsPrime((13441L))\n    \/\/ (true)\n    \/\/ >>> IsPrime((61L))\n    \/\/ (true)\n    \/\/ >>> IsPrime((4L))\n    \/\/ (false)\n    \/\/ >>> IsPrime((1L))\n    \/\/ (false)\n    public static bool IsPrime(long n) {\n","canonical_solution":"public static bool IsPrime(long n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    \n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_33","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/De waarden van de corresponderende indexes van l, meh gesorteerd.    \/\/l' is identiek aan l in de indexes die neet deilbaar zeen door drei, terwijl de waarden vaan l bij de indexes die deilbaar zeen door drei geliek zeen     \/\/Dees functie haolt 'n lies l en geit 'n lies l' terug, zoeëdet     \/\/ >>> SortThird((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    \/\/ >>> SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L}))\n    public static List<long> SortThird(List<long> l) {\n","canonical_solution":"public static List<long> SortThird(List<long> l) {\n        List<long> sortedValues = new List<long>();\n\n        \/\/ Collect values at indices divisible by three\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 3 == 0) {\n                sortedValues.Add(l[i]);\n            }\n        }\n\n        \/\/ Sort the collected values\n        sortedValues.Sort();\n\n        \/\/ Place sorted values back into their positions\n        int sortedIndex = 0;\n        List<long> result = new List<long>(l);\n        for (int i = 0; i < result.Count; i++) {\n            if (i % 3 == 0) {\n                result[i] = sortedValues[sortedIndex++];\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L}))).Equals((new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)8L, (long)3L, (long)4L, (long)6L, (long)9L, (long)2L}))).Equals((new List<long>(new long[]{(long)2L, (long)8L, (long)3L, (long)4L, (long)6L, (long)9L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)9L, (long)4L, (long)8L, (long)3L, (long)2L}))).Equals((new List<long>(new long[]{(long)2L, (long)6L, (long)9L, (long)4L, (long)8L, (long)3L, (long)5L}))));\n    Debug.Assert(SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L, (long)1L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_34","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Retourneert gesorteerde unieke elemente in 'n lies     \/\/ >>> Unique((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))\n    public static List<long> Unique(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Return sorted unique elements in a list\n    public static List<long> Unique(List<long> l) {\n        HashSet<long> uniqueSet = new HashSet<long>(l);\n        List<long> uniqueList = new List<long>(uniqueSet);\n        uniqueList.Sort();\n        return uniqueList;\n    }\n    \n    static void Main(string[] args) {\n        List<long> input = new List<long>{5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L};\n        List<long> result = Unique(input);\n        Console.WriteLine(string.Join(\", \", result)); \/\/ Output: 0, 2, 3, 5, 9, 123\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_35","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Retourneer maximaal element in de lies.    \/\/ >>> MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (3L)\n    \/\/ >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    \/\/ (123L)\n    public static long MaxElement(List<long> l) {\n","canonical_solution":"return l.Max();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n}\n"},{"task_id":"HumanEval_36","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veur de opname van 'n getal, die deilbaar is door 11 of 13, wurt 't aontal kiere dat 't cijfer 7 versjijnt in gans getalle die minder es n zien.    \/\/ >>> FizzBuzz((50L))\n    \/\/ (0L)\n    \/\/ >>> FizzBuzz((78L))\n    \/\/ (2L)\n    \/\/ >>> FizzBuzz((79L))\n    \/\/ (3L)\n    public static long FizzBuzz(long n) {\n","canonical_solution":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \/\/ >>> FizzBuzz((50L))\n    \/\/ (0L)\n    \/\/ >>> FizzBuzz((78L))\n    \/\/ (2L)\n    \/\/ >>> FizzBuzz((79L))\n    \/\/ (3L)\n    public static long FizzBuzz(long n) {\n        long count = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += CountSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private static int CountSevens(long num) {\n        int count = 0;\n        while (num > 0) {\n            if (num % 10 == 7) {\n                count++;\n            }\n            num \/= 10;\n        }\n        return count;\n    }\n\n    \/\/ You can test the function with the following main method:\n    static void Main(string[] args) {\n        Console.WriteLine(FizzBuzz(50));  \/\/ Output: 0\n        Console.WriteLine(FizzBuzz(78));  \/\/ Output: 2\n        Console.WriteLine(FizzBuzz(79));  \/\/ Output: 3\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"},{"task_id":"HumanEval_37","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/De waarden van de paarse indexe van l, meh gesorteerd.    \/\/l' is identiek aan l in de oneven indexes, terwijl de waarden bij de gepaarde indexes geliek zien     \/\/Dees functie haolt 'n lies l en geit 'n lies l' terug, zoeëdet     \/\/ >>> SortEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    \/\/ >>> SortEven((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)3L, (long)6L, (long)5L, (long)4L}))\n    public static List<long> SortEven(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ This function takes a list l and returns a list l' such that\n    \/\/ l' is identical to l in the odd indices, while its values at the even indices are equal\n    \/\/ to the values of the even indices of l, but sorted.\n    public static List<long> SortEven(List<long> l) {\n        List<long> evenIndicesValues = new List<long>();\n\n        \/\/ Collect values from even indices\n        for (int i = 0; i < l.Count; i += 2) {\n            evenIndicesValues.Add(l[i]);\n        }\n\n        \/\/ Sort the collected even index values\n        evenIndicesValues.Sort();\n\n        \/\/ Reconstruct the list with sorted values at even indices\n        List<long> result = new List<long>(l);\n\n        for (int i = 0, j = 0; i < result.Count; i += 2, j++) {\n            result[i] = evenIndicesValues[j];\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).Equals((new List<long>(new long[]{(long)-10L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)5L, (long)0L, (long)9L, (long)1L, (long)123L}))));\n    Debug.Assert(SortEven((new List<long>(new long[]{(long)5L, (long)8L, (long)-12L, (long)4L, (long)23L, (long)2L, (long)3L, (long)11L, (long)12L, (long)-10L}))).Equals((new List<long>(new long[]{(long)-12L, (long)8L, (long)3L, (long)4L, (long)5L, (long)2L, (long)12L, (long)11L, (long)23L, (long)-10L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_39","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/prime_fib geit mèt 'n n-de getal dat 'n Fibonacci-getal is en ouch 'n priemgetal is.    \/\/ >>> PrimeFib((1L))\n    \/\/ (2L)\n    \/\/ >>> PrimeFib((2L))\n    \/\/ (3L)\n    \/\/ >>> PrimeFib((3L))\n    \/\/ (5L)\n    \/\/ >>> PrimeFib((4L))\n    \/\/ (13L)\n    \/\/ >>> PrimeFib((5L))\n    \/\/ (89L)\n    public static long PrimeFib(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Method to check if a number is prime\n    public static bool IsPrime(long num)\n    {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n\n        long boundary = (long)Math.Floor(Math.Sqrt(num));\n\n        for (long i = 3; i <= boundary; i += 2)\n        {\n            if (num % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    \/\/ Method to generate Fibonacci numbers and find the n-th prime Fibonacci\n    public static long PrimeFib(long n)\n    {\n        long a = 1, b = 1;\n        long primeFibCount = 0;\n\n        while (true)\n        {\n            long temp = a;\n            a = b;\n            b = temp + b;\n\n            if (IsPrime(a))\n            {\n                primeFibCount++;\n                if (primeFibCount == n)\n                {\n                    return a;\n                }\n            }\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(PrimeFib(1)); \/\/ Output: 2\n        Console.WriteLine(PrimeFib(2)); \/\/ Output: 3\n        Console.WriteLine(PrimeFib(3)); \/\/ Output: 5\n        Console.WriteLine(PrimeFib(4)); \/\/ Output: 13\n        Console.WriteLine(PrimeFib(5)); \/\/ Output: 89\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeFib((1L)) == (2L));\n    Debug.Assert(PrimeFib((2L)) == (3L));\n    Debug.Assert(PrimeFib((3L)) == (5L));\n    Debug.Assert(PrimeFib((4L)) == (13L));\n    Debug.Assert(PrimeFib((5L)) == (89L));\n    Debug.Assert(PrimeFib((6L)) == (233L));\n    Debug.Assert(PrimeFib((7L)) == (1597L));\n    Debug.Assert(PrimeFib((8L)) == (28657L));\n    Debug.Assert(PrimeFib((9L)) == (514229L));\n    Debug.Assert(PrimeFib((10L)) == (433494437L));\n    }\n\n}\n"},{"task_id":"HumanEval_40","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Sjtèl op nul en anders vals.    \/\/it wurdt true as der trije ferskate eleminten binne yn de list dy't     \/\/triples_sum_to_zero haet 'n lies van gans getalle es input.    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    \/\/ (false)\n    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    \/\/ (true)\n    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L})))\n    \/\/ (false)\n    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L})))\n    \/\/ (true)\n    \/\/ >>> TriplesSumToZero((new List<long>(new long[]{(long)1L})))\n    \/\/ (false)\n    public static bool TriplesSumToZero(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static bool TriplesSumToZero(List<long> l)\n    {\n        if (l.Count < 3)\n            return false;\n\n        l.Sort();\n\n        for (int i = 0; i < l.Count - 2; i++)\n        {\n            if (i > 0 && l[i] == l[i - 1])\n                continue;\n\n            int left = i + 1;\n            int right = l.Count - 1;\n\n            while (left < right)\n            {\n                long sum = l[i] + l[left] + l[right];\n                if (sum == 0)\n                    return true;\n                else if (sum < 0)\n                    left++;\n                else\n                    right--;\n            }\n        }\n\n        return false;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)-1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)5L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)-100L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)100L, (long)3L, (long)5L, (long)-100L}))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_41","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Dees functie geit nao 't aontal vaan zulke botsinge.    \/\/In hun baan, alsof ze neet tegen elkaar botste.    \/\/De wages zien echter oneindig stevig en sterk; daodoor gaon ze door.    \/\/Es 'n auto die van links nao rechs rijd, 'n auto die van rechs nao links rijd, raakt.    \/\/Alle auto's verplaote zich mèt dezelfde snelheid.    \/\/De twieë paartje auto's beginne al väöl ver van 't begin.    \/\/n auto's rijden links naor rechts; tegeliekend, n andere set van n auto's     \/\/Stel je veur een weg die een perfect rechte oneindig lange lijn is.    public static long CarRaceCollision(long n) {\n","canonical_solution":"\/\/ Each car moving left to right will collide with each car moving right to left.\n        \/\/ So the total number of collisions is n * n.\n        return n * n;\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(CarRaceCollision(5));  \/\/ Example usage\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CarRaceCollision((2L)) == (4L));\n    Debug.Assert(CarRaceCollision((3L)) == (9L));\n    Debug.Assert(CarRaceCollision((4L)) == (16L));\n    Debug.Assert(CarRaceCollision((8L)) == (64L));\n    Debug.Assert(CarRaceCollision((10L)) == (100L));\n    }\n\n}\n"},{"task_id":"HumanEval_42","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Lies van de retourneers mèt de elementen die mèt 1 inkrementeerd zien.    \/\/ >>> IncrList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))\n    \/\/ >>> IncrList((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L})))\n    \/\/ (new List<long>(new long[]{(long)6L, (long)4L, (long)6L, (long)3L, (long)4L, (long)4L, (long)10L, (long)1L, (long)124L}))\n    public static List<long> IncrList(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Return list with elements incremented by 1.\n    public static List<long> IncrList(List<long> l) {\n        return l.Select(x => x + 1).ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IncrList((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)3L, (long)2L}))));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)5L, (long)2L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)6L, (long)3L, (long)6L, (long)3L, (long)4L, (long)4L, (long)10L, (long)1L, (long)124L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_43","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Sjtèl op nul en anders vals.    \/\/it wurdt true as d'r twa ferskillende eleminten binne yn 'e list dy't     \/\/pairs_sum_to_zero neump 'n lies van gans getalle es input.    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    \/\/ (false)\n    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    \/\/ (false)\n    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L})))\n    \/\/ (false)\n    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    \/\/ (true)\n    \/\/ >>> PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    \/\/ (false)\n    public static bool PairsSumToZero(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static bool PairsSumToZero(List<long> l)\n    {\n        HashSet<long> seenNumbers = new HashSet<long>();\n\n        foreach (long number in l)\n        {\n            if (seenNumbers.Contains(-number))\n            {\n                return true;\n            }\n            seenNumbers.Add(number);\n        }\n\n        return false;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(PairsSumToZero(new List<long> { 1L, 3L, 5L, 0L })); \/\/ false\n        Console.WriteLine(PairsSumToZero(new List<long> { 1L, 3L, -2L, 1L })); \/\/ false\n        Console.WriteLine(PairsSumToZero(new List<long> { 1L, 2L, 3L, 7L })); \/\/ false\n        Console.WriteLine(PairsSumToZero(new List<long> { 2L, 4L, -5L, 3L, 5L, 7L })); \/\/ true\n        Console.WriteLine(PairsSumToZero(new List<long> { 1L })); \/\/ false\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_44","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/base nummers zien minder es 10.    \/\/return string representation nao de conversie.    \/\/Verangere numerieke basis van inputnummer x nao basis.    \/\/ >>> ChangeBase((8L), (3L))\n    \/\/ (\"22\")\n    \/\/ >>> ChangeBase((8L), (2L))\n    \/\/ (\"1000\")\n    \/\/ >>> ChangeBase((7L), (2L))\n    \/\/ (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Change numerical base of input number x to base.\n    \/\/ return string representation after the conversion.\n    \/\/ base numbers are less than 10.\n    public static string ChangeBase(long x, long numBase) {\n        if (numBase < 2 || numBase > 9) \n            throw new ArgumentException(\"Base must be between 2 and 9.\");\n\n        if (x < 0) \n            throw new ArgumentException(\"Number must be non-negative.\");\n\n        if (x == 0) \n            return \"0\";\n\n        string result = string.Empty;\n        while (x > 0) {\n            long remainder = x % numBase;\n            result = remainder + result;\n            x \/= numBase;\n        }\n        \n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n}\n"},{"task_id":"HumanEval_45","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Gegaeve lengde van 'n kant en hoeg ruumte veur 'n driehoek.    \/\/ >>> TriangleArea((5L), (3L))\n    \/\/ (7.5f)\n    public static float TriangleArea(long a, long h) {\n","canonical_solution":"using System;\n\nclass Problem {\n    \/\/ Given length of a side and height, return area for a triangle.\n    \/\/ >>> TriangleArea((5L), (3L))\n    \/\/ (7.5f)\n    public static float TriangleArea(long a, long h) {\n        return (a * h) \/ 2.0f;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(TriangleArea(5L, 3L)); \/\/ Output: 7.5\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((5L), (3L)) == (7.5f));\n    Debug.Assert(TriangleArea((2L), (2L)) == (2.0f));\n    Debug.Assert(TriangleArea((10L), (8L)) == (40.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_46","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Schrief blief 'n functie um 't n-de element vaan de fib4-nummersjreve efficiënt te bereike. Gebroek gein recursie.     \/\/fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).    \/\/fib4(3) -> 0     \/\/fib4(2) -> 2     \/\/fib4(1) -> 0     \/\/fib4(0) -> 0     \/\/De Fib4-nummersjreef is 'n reef die geliek is aan de Fibbonacci-reef en die weurt zoe gedefinieerd:    \/\/ >>> Fib4((5L))\n    \/\/ (4L)\n    \/\/ >>> Fib4((6L))\n    \/\/ (8L)\n    \/\/ >>> Fib4((7L))\n    \/\/ (14L)\n    public static long Fib4(long n) {\n","canonical_solution":"public static long Fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    long[] fib4Seq = new long[n + 1];\n    fib4Seq[0] = 0;\n    fib4Seq[1] = 0;\n    fib4Seq[2] = 2;\n    fib4Seq[3] = 0;\n\n    for (long i = 4; i <= n; i++) {\n        fib4Seq[i] = fib4Seq[i - 1] + fib4Seq[i - 2] + fib4Seq[i - 3] + fib4Seq[i - 4];\n    }\n\n    return fib4Seq[n];\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"},{"task_id":"HumanEval_47","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Mediane van de elementen in de lijst l.    \/\/ >>> Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n    \/\/ (float)3L\n    \/\/ >>> Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L})))\n    \/\/ (15.0f)\n    public static float Median(List<long> l) {\n","canonical_solution":"public static float Median(List<long> l) {\n        l.Sort();\n        int count = l.Count;\n        if (count % 2 == 1) {\n            return (float)l[count \/ 2];\n        } else {\n            long mid1 = l[(count \/ 2) - 1];\n            long mid2 = l[count \/ 2];\n            return (mid1 + mid2) \/ 2.0f;\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n    }\n\n}\n"},{"task_id":"HumanEval_48","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Controleert of de gegeven string 'n palindroom is .    \/\/ >>> IsPalindrome((\"\"))\n    \/\/ (true)\n    \/\/ >>> IsPalindrome((\"aba\"))\n    \/\/ (true)\n    \/\/ >>> IsPalindrome((\"aaaaa\"))\n    \/\/ (true)\n    \/\/ >>> IsPalindrome((\"zbcd\"))\n    \/\/ (false)\n    public static bool IsPalindrome(string text) {\n","canonical_solution":"public static bool IsPalindrome(string text) {\n    if (string.IsNullOrEmpty(text))\n        return true;\n\n    int left = 0;\n    int right = text.Length - 1;\n\n    while (left < right) {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_49","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Retourne 2^n modulo p (beware of numerics).    \/\/ >>> Modp((3L), (5L))\n    \/\/ (3L)\n    \/\/ >>> Modp((1101L), (101L))\n    \/\/ (2L)\n    \/\/ >>> Modp((0L), (101L))\n    \/\/ (1L)\n    \/\/ >>> Modp((3L), (11L))\n    \/\/ (8L)\n    \/\/ >>> Modp((100L), (101L))\n    \/\/ (1L)\n    public static long Modp(long n, long p) {\n","canonical_solution":"using System;\nusing System.Numerics;\n\nclass Problem {\n    public static long Modp(long n, long p) {\n        \/\/ Using the property of modular arithmetic: (a^b) % c = ((a % c)^b) % c\n        \/\/ We are calculating (2^n) % p\n        BigInteger baseNum = 2;\n        BigInteger result = BigInteger.ModPow(baseNum, n, p);\n        return (long)result;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Modp(3L, 5L));   \/\/ (3L)\n        Console.WriteLine(Modp(1101L, 101L)); \/\/ (2L)\n        Console.WriteLine(Modp(0L, 101L));   \/\/ (1L)\n        Console.WriteLine(Modp(3L, 11L));   \/\/ (8L)\n        Console.WriteLine(Modp(100L, 101L));  \/\/ (1L)\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L), (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L), (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L), (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L), (5L)) == (3L));\n    }\n\n}\n"},{"task_id":"HumanEval_51","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/remove_vowels is 'n functie die string aannimmt en string zonder klinkers retourneert.     \/\/ >>> RemoveVowels((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> RemoveVowels((\"abcdef\"))\n    \/\/ (\"bcdf\")\n    \/\/ >>> RemoveVowels((\"aaaaa\"))\n    \/\/ (\"\")\n    \/\/ >>> RemoveVowels((\"aaBAA\"))\n    \/\/ (\"B\")\n    \/\/ >>> RemoveVowels((\"zbcd\"))\n    \/\/ (\"zbcd\")\n    public static string RemoveVowels(string text) {\n","canonical_solution":"HashSet<char> vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        StringBuilder result = new StringBuilder();\n\n        foreach (char c in text) {\n            if (!vowels.Contains(c)) {\n                result.Append(c);\n            }\n        }\n\n        return result.ToString();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveVowels((\"\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"abcdef\\nghijklm\")).Equals((\"bcdf\\nghjklm\")));\n    Debug.Assert(RemoveVowels((\"fedcba\")).Equals((\"fdcb\")));\n    Debug.Assert(RemoveVowels((\"eeeee\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"acBAA\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"EcBOO\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"ybcd\")).Equals((\"ybcd\")));\n    }\n\n}\n"},{"task_id":"HumanEval_52","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Return true if all numbers in the list l are below threshold t.     \/\/ >>> BelowThreshold((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L})), (100L))\n    \/\/ (true)\n    \/\/ >>> BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (5L))\n    \/\/ (false)\n    public static bool BelowThreshold(List<long> l, long t) {\n","canonical_solution":"return l.All(x => x < t);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L})), (100L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (5L)) == (false));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (21L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (22L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)8L, (long)4L, (long)10L})), (11L)) == (true));\n    Debug.Assert(BelowThreshold((new List<long>(new long[]{(long)1L, (long)8L, (long)4L, (long)10L})), (10L)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_53","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Zet twie getalle x en y bij elkaar .    \/\/ >>> Add((2L), (3L))\n    \/\/ (5L)\n    \/\/ >>> Add((5L), (7L))\n    \/\/ (12L)\n    public static long Add(long x, long y) {\n","canonical_solution":"return x + y;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((0L), (1L)) == (1L));\n    Debug.Assert(Add((1L), (0L)) == (1L));\n    Debug.Assert(Add((2L), (3L)) == (5L));\n    Debug.Assert(Add((5L), (7L)) == (12L));\n    Debug.Assert(Add((7L), (5L)) == (12L));\n    }\n\n}\n"},{"task_id":"HumanEval_54","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Controleer of twieë wäörd dezelfde karakters höbbe.    \/\/ >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    \/\/ (true)\n    \/\/ >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    \/\/ (true)\n    \/\/ >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    \/\/ (false)\n    \/\/ >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    \/\/ (false)\n    \/\/ >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    \/\/ (false)\n    public static bool SameChars(string s0, string s1) {\n","canonical_solution":"public static bool SameChars(string s0, string s1) {\n        \/\/ Return true if s1 contains all characters of s0\n        return s0.All(c => s1.Contains(c)) && s1.All(c => s0.Contains(c));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_55","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Geef n-de Fibonacci-getal terug.    \/\/ >>> Fib((10L))\n    \/\/ (55L)\n    \/\/ >>> Fib((1L))\n    \/\/ (1L)\n    \/\/ >>> Fib((8L))\n    \/\/ (21L)\n    public static long Fib(long n) {\n","canonical_solution":"if (n <= 0) return 0;\n    if (n == 1) return 1;\n\n    long a = 0;\n    long b = 1;\n\n    for (long i = 2; i <= n; i++)\n    {\n        long temp = a + b;\n        a = b;\n        b = temp;\n    }\n\n    return b;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib((10L)) == (55L));\n    Debug.Assert(Fib((1L)) == (1L));\n    Debug.Assert(Fib((8L)) == (21L));\n    Debug.Assert(Fib((11L)) == (89L));\n    Debug.Assert(Fib((12L)) == (144L));\n    }\n\n}\n"},{"task_id":"HumanEval_56","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/return true if each opening bracket has a corresponding closing bracket.     \/\/brackets is 'n string van \"<\" en \">\".     \/\/ >>> CorrectBracketing((\"<\"))\n    \/\/ (false)\n    \/\/ >>> CorrectBracketing((\"<>\"))\n    \/\/ (true)\n    \/\/ >>> CorrectBracketing((\"<<><>>\"))\n    \/\/ (true)\n    \/\/ >>> CorrectBracketing((\"><<>\"))\n    \/\/ (false)\n    public static bool CorrectBracketing(string brackets) {\n","canonical_solution":"public static bool CorrectBracketing(string brackets) \n{\n    int balance = 0;\n    foreach (char c in brackets) \n    {\n        if (c == '<') \n        {\n            balance++;\n        } \n        else if (c == '>') \n        {\n            balance--;\n        }\n        \n        if (balance < 0) \n        {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_57","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Return true is listelemente zien monotone toenemend of dalend.    \/\/ >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    \/\/ (true)\n    \/\/ >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    \/\/ (false)\n    \/\/ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    \/\/ (true)\n    public static bool Monotonic(List<long> l) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Return true if list elements are monotonically increasing or decreasing.\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true; \/\/ Lists with less than 2 elements are trivially monotonic.\n        \n        bool increasing = true;\n        bool decreasing = true;\n\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] > l[i - 1]) {\n                decreasing = false;\n            } else if (l[i] < l[i - 1]) {\n                increasing = false;\n            }\n\n            \/\/ If both flags are false, the list is not monotonic.\n            if (!increasing && !decreasing) return false;\n        }\n\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_58","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Retourneer gesorteerde unieke gemene elemente veur twie lieste.    \/\/ >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)5L, (long)653L}))\n    \/\/ >>> Common((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L}))\n    public static List<long> Common(List<long> l1, List<long> l2) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static List<long> Common(List<long> l1, List<long> l2)\n    {\n        \/\/ Use HashSet to store unique elements of l1\n        var set1 = new HashSet<long>(l1);\n\n        \/\/ Use HashSet to store unique elements of l2 and filter common elements\n        var commonSet = new HashSet<long>(l2.Where(x => set1.Contains(x)));\n\n        \/\/ Convert to a list, sort it and return\n        var result = commonSet.ToList();\n        result.Sort();\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L, (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_59","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veur de groetste priemfactor vaan n. Veur n > 1 en neet 'n priem.     \/\/ >>> LargestPrimeFactor((13195L))\n    \/\/ (29L)\n    \/\/ >>> LargestPrimeFactor((2048L))\n    \/\/ (2L)\n    public static long LargestPrimeFactor(long n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long LargestPrimeFactor(long n) {\n        long largestFactor = -1;\n        \n        \/\/ Remove the factor of 2\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n \/= 2;\n        }\n\n        \/\/ Check odd factors from 3 upwards\n        for (long i = 3; i <= Math.Sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestFactor = i;\n                n \/= i;\n            }\n        }\n\n        \/\/ If n becomes a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n\n        return largestFactor;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\n}\n"},{"task_id":"HumanEval_60","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/sum_to_n is 'n functie die getalle van 1 tot n opsomt.     \/\/ >>> SumToN((30L))\n    \/\/ (465L)\n    \/\/ >>> SumToN((100L))\n    \/\/ (5050L)\n    \/\/ >>> SumToN((5L))\n    \/\/ (15L)\n    \/\/ >>> SumToN((10L))\n    \/\/ (55L)\n    \/\/ >>> SumToN((1L))\n    \/\/ (1L)\n    public static long SumToN(long n) {\n","canonical_solution":"return n * (n + 1) \/ 2;\n}\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumToN((1L)) == (1L));\n    Debug.Assert(SumToN((6L)) == (21L));\n    Debug.Assert(SumToN((11L)) == (66L));\n    Debug.Assert(SumToN((30L)) == (465L));\n    Debug.Assert(SumToN((100L)) == (5050L));\n    }\n\n}\n"},{"task_id":"HumanEval_61","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/return true if each opening bracket has a corresponding closing bracket.     \/\/brackets is 'n string van \"(\" en \")\".     \/\/ >>> CorrectBracketing((\"(\"))\n    \/\/ (false)\n    \/\/ >>> CorrectBracketing((\"()\"))\n    \/\/ (true)\n    \/\/ >>> CorrectBracketing((\"(()())\"))\n    \/\/ (true)\n    \/\/ >>> CorrectBracketing((\")(()\"))\n    \/\/ (false)\n    public static bool CorrectBracketing(string brackets) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool CorrectBracketing(string brackets) {\n        int balance = 0;\n        foreach (char c in brackets) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_62","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Retourneer de afgeleide van dit polinoom in dezelfde vorm.    \/\/xs[0] + xs[1] * x + xs[2] * x^2 + ....     \/\/x's zien coëfficiënte vaan 'n polinoom.    \/\/ >>> Derivative((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))\n    \/\/ >>> Derivative((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)6L}))\n    public static List<long> Derivative(List<long> xs) {\n","canonical_solution":"public static List<long> Derivative(List<long> xs) {\n        List<long> derivative = new List<long>();\n        for (int i = 1; i < xs.Count; i++) {\n            derivative.Add(xs[i] * i);\n        }\n        return derivative;\n    }\n\n    static void Main(string[] args) {\n        List<long> poly1 = new List<long>{3L, 1L, 2L, 4L, 5L};\n        List<long> result1 = Derivative(poly1);\n        Console.WriteLine(string.Join(\", \", result1));\n\n        List<long> poly2 = new List<long>{1L, 2L, 3L};\n        List<long> result2 = Derivative(poly2);\n        Console.WriteLine(string.Join(\", \", result2));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)6L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L, (long)2L, (long)1L, (long)0L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)0L, (long)16L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_63","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Schrief blief 'n functie veur 't n-de element vaan de fibfib-nummersjreve op efficiënte wijze te bereike.    \/\/fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3).     \/\/fib fib ((2) == 1     \/\/fib fib ((1) == 0     \/\/fib fib ((0) == 0     \/\/De FibFib-sequentie is 'n sequentie die vergeliekbaar is mèt de Fibbonacci-sequentie die wie volgt gedefinieerd is:     \/\/ >>> Fibfib((1L))\n    \/\/ (0L)\n    \/\/ >>> Fibfib((5L))\n    \/\/ (4L)\n    \/\/ >>> Fibfib((8L))\n    \/\/ (24L)\n    public static long Fibfib(long n) {\n","canonical_solution":"public static long Fibfib(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    long a = 0, b = 0, c = 1;\n    long result = 0;\n\n    for (long i = 3; i <= n; i++) {\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n\n    return result;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"},{"task_id":"HumanEval_64","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/klinker, mer allein es 't aan 't eind van 't woord steit.    \/\/Vocale in dit geval zien 'a', 'e', 'i', 'o', 'u'.    \/\/'n woord es input en zèt 't aontal klinkers in de string terug.    \/\/Schrijf 'n functie vowels_count die 'n string aannump die     \/\/ >>> VowelsCount((\"abcde\"))\n    \/\/ (2L)\n    \/\/ >>> VowelsCount((\"ACEDY\"))\n    \/\/ (3L)\n    public static long VowelsCount(string s) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long VowelsCount(string s) {\n        if (s == null) return 0;\n\n        s = s.ToLower();\n        long count = 0;\n        \n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (\"aeiou\".Contains(c) || (c == 'y' && i == s.Length - 1)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(VowelsCount(\"abcde\"));  \/\/ Output: 2\n        Console.WriteLine(VowelsCount(\"ACEDY\"));  \/\/ Output: 3\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(VowelsCount((\"abcde\")) == (2L));\n    Debug.Assert(VowelsCount((\"Alone\")) == (3L));\n    Debug.Assert(VowelsCount((\"key\")) == (2L));\n    Debug.Assert(VowelsCount((\"bye\")) == (1L));\n    Debug.Assert(VowelsCount((\"keY\")) == (2L));\n    Debug.Assert(VowelsCount((\"bYe\")) == (1L));\n    Debug.Assert(VowelsCount((\"ACEDY\")) == (3L));\n    }\n\n}\n"},{"task_id":"HumanEval_65","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/As verschuiving > aantal cijfers, keert de cijfers om.    \/\/en retourneert 't resultaat es 'n string.    \/\/Cirkelverplaats de cijfers van de gans getal x, verplaats de cijfers rech door verplaatsing.    \/\/ >>> CircularShift((12L), (1L))\n    \/\/ (\"21\")\n    \/\/ >>> CircularShift((12L), (2L))\n    \/\/ (\"12\")\n    public static string CircularShift(long x, long shift) {\n","canonical_solution":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Circular shift the digits of the integer x, shift the digits right by shift\n    \/\/ and return the result as a string.\n    \/\/ If shift > number of digits, return digits reversed.\n    \n    public static string CircularShift(long x, long shift) {\n        string digits = x.ToString();\n        int length = digits.Length;\n        \n        if (shift > length) {\n            char[] reversedDigits = digits.ToCharArray();\n            Array.Reverse(reversedDigits);\n            return new string(reversedDigits);\n        }\n\n        shift = shift % length;  \/\/ Normalize shift\n        string shiftedPart = digits.Substring(length - (int)shift);\n        string remainingPart = digits.Substring(0, length - (int)shift);\n        return shiftedPart + remainingPart;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"},{"task_id":"HumanEval_66","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/ASCII-codes.     \/\/Schrief 'n functie die 'n string as input neump en allein de som vaan de bovenste karakters retourneert.    \/\/Taak     \/\/ >>> Digitsum((\"\"))\n    \/\/ (0L)\n    \/\/ >>> Digitsum((\"abAB\"))\n    \/\/ (131L)\n    \/\/ >>> Digitsum((\"abcCd\"))\n    \/\/ (67L)\n    \/\/ >>> Digitsum((\"helloE\"))\n    \/\/ (69L)\n    \/\/ >>> Digitsum((\"woArBld\"))\n    \/\/ (131L)\n    \/\/ >>> Digitsum((\"aAaaaXa\"))\n    \/\/ (153L)\n    public static long Digitsum(string s) {\n","canonical_solution":"public static long Digitsum(string s) {\n    long sum = 0;\n    foreach (char c in s) {\n        if (char.IsUpper(c)) {\n            sum += c; \/\/ Add ASCII value of the upper case letters.\n        }\n    }\n    return sum;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digitsum((\"\")) == (0L));\n    Debug.Assert(Digitsum((\"abAB\")) == (131L));\n    Debug.Assert(Digitsum((\"abcCd\")) == (67L));\n    Debug.Assert(Digitsum((\"helloE\")) == (69L));\n    Debug.Assert(Digitsum((\"woArBld\")) == (131L));\n    Debug.Assert(Digitsum((\"aAaaaXa\")) == (153L));\n    Debug.Assert(Digitsum((\" How are yOu?\")) == (151L));\n    Debug.Assert(Digitsum((\"You arE Very Smart\")) == (327L));\n    }\n\n}\n"},{"task_id":"HumanEval_67","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/veur exambel:     \/\/in de mandj: 't aontal mango's in de mandj.    \/\/de sinaasappels en appels en 'n heel getal dat 't totaal aantal vruchte vertegenwoordigt     \/\/De stringe die 't totaal aantal     \/\/die in ' n fruitmandje verdeild weure.    \/\/In deze taak krijg je 'n string die 'n aantal appels en sinaasappels vertegenwoordigt.    \/\/ >>> FruitDistribution((\"5 apples and 6 oranges\"), (19L))\n    \/\/ (8L)\n    \/\/ >>> FruitDistribution((\"0 apples and 1 oranges\"), (3L))\n    \/\/ (2L)\n    \/\/ >>> FruitDistribution((\"2 apples and 3 oranges\"), (100L))\n    \/\/ (95L)\n    \/\/ >>> FruitDistribution((\"100 apples and 1 oranges\"), (120L))\n    \/\/ (19L)\n    public static long FruitDistribution(string s, long n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long FruitDistribution(string s, long n) {\n        var parts = s.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        long apples = long.Parse(parts[0]);\n        long oranges = long.Parse(parts[3]);\n\n        long totalApplesAndOranges = apples + oranges;\n        long mangoes = n - totalApplesAndOranges;\n        \n        return mangoes;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FruitDistribution((\"5 apples and 6 oranges\"), (19L)) == (8L));\n    Debug.Assert(FruitDistribution((\"5 apples and 6 oranges\"), (21L)) == (10L));\n    Debug.Assert(FruitDistribution((\"0 apples and 1 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"1 apples and 0 oranges\"), (3L)) == (2L));\n    Debug.Assert(FruitDistribution((\"2 apples and 3 oranges\"), (100L)) == (95L));\n    Debug.Assert(FruitDistribution((\"2 apples and 3 oranges\"), (5L)) == (0L));\n    Debug.Assert(FruitDistribution((\"1 apples and 100 oranges\"), (120L)) == (19L));\n    }\n\n}\n"},{"task_id":"HumanEval_68","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld 1:     \/\/Es d'r gein paarse waarden zeen of de gegegeve lies leeg is, wèrk [].    \/\/De geplukde knoop mós weure geretourneerd in 'n lies, [ smalest_value, de index ],     \/\/Es meerdere knope mèt dezelfde kleinste zelfs waerde zeen, wurt de knop mèt de kleinste index geretourneerd.     \/\/De geplukde knoop mós de knoop zien mèt de kleinste paarse waerde.    \/\/De taak is um ein van de knope te plukke en te goon.    \/\/\"Gegeve 'n lies die 'n tak vaan 'n boom weergeeft mèt neet-negatieve gans getalle.    \/\/ >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)1L}))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 2:\n    \/\/ >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)1L}))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 3:\n    \/\/ >>> Pluck((new List<long>()))\n    \/\/ (new List<long>())\n    \/\/ Example 4:\n    \/\/ >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)1L}))\n    \/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n    \/\/ so we will choose the first zero, which has the smallest index.\n    \/\/ Constraints:\n    \/\/ * 1 <= nodes.length <= 10000\n    \/\/ * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> Pluck(List<long> arr)\n    {\n        long smallestEven = long.MaxValue;\n        int indexOfSmallest = -1;\n\n        for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEven)\n            {\n                smallestEven = arr[i];\n                indexOfSmallest = i;\n            }\n        }\n\n        if (indexOfSmallest == -1)\n        {\n            return new List<long>();\n        }\n        else\n        {\n            return new List<long> { smallestEven, indexOfSmallest };\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_69","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Es 'n dergelike waerde neet bestoon, wèrk dan -1.    \/\/De frequentie van 'n heel getal is 't aantal kier det 't in de lies versjient.    \/\/nul, en 'n frequentie haet die groeter is es of geliek is aan de waerde vaan 't gans getal zelf.    \/\/Geer kint 'n neet-leeg lies vaan positief gans getalle.    \/\/ >>> Search((new List<long>(new long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    \/\/ (2L)\n    \/\/ >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    \/\/ (3L)\n    \/\/ >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    \/\/ (-1L)\n    public static long Search(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static long Search(List<long> lst)\n    {\n        \/\/ Create a dictionary to store the frequency of each number\n        Dictionary<long, long> frequency = new Dictionary<long, long>();\n\n        \/\/ Count the frequency of each number in the list\n        foreach (long num in lst)\n        {\n            if (frequency.ContainsKey(num))\n            {\n                frequency[num]++;\n            }\n            else\n            {\n                frequency[num] = 1;\n            }\n        }\n\n        \/\/ Variable to store the greatest integer found\n        long result = -1;\n\n        \/\/ Go through each item in the frequency dictionary\n        foreach (var kvp in frequency)\n        {\n            long number = kvp.Key;\n            long freq = kvp.Value;\n\n            \/\/ Check if the number's frequency is greater than or equal to the number itself\n            if (freq >= number && number > 0)\n            {\n                \/\/ Update the result if this number is greater than the current result\n                result = Math.Max(result, number);\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L, (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L, (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L, (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L, (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L, (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L, (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L, (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L, (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L, (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"},{"task_id":"HumanEval_70","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/dan maximaal van de res van de ganse getalle, dan minimaal en zo verder.    \/\/Vreemde sortering is es ge begint mit de minimale waerde,     \/\/Gegaeve 'n lies van gans getalle, wurt de lies in vreemde volgorde geretourneerd.    \/\/ >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n    \/\/ >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L})))\n    \/\/ (new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))\n    \/\/ >>> StrangeSortList((new List<long>()))\n    \/\/ (new List<long>())\n    public static List<long> StrangeSortList(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<long> StrangeSortList(List<long> lst) {\n        List<long> result = new List<long>();\n        lst.Sort();\n        int start = 0;\n        int end = lst.Count - 1;\n        \n        while (start <= end) {\n            if (start <= end) {\n                result.Add(lst[start]);\n                start++;\n            }\n            if (start <= end) {\n                result.Add(lst[end]);\n                end--;\n            }\n        }\n        \n        return result;\n    }\n    \n    static void Main(string[] args) {\n        var example1 = StrangeSortList(new List<long> { 1L, 2L, 3L, 4L });\n        var example2 = StrangeSortList(new List<long> { 5L, 5L, 5L, 5L });\n        var example3 = StrangeSortList(new List<long>());\n\n        Console.WriteLine(string.Join(\", \", example1)); \/\/ Output: 1, 4, 2, 3\n        Console.WriteLine(string.Join(\", \", example2)); \/\/ Output: 5, 5, 5, 5\n        Console.WriteLine(string.Join(\", \", example3)); \/\/ Output: (empty line)\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_71","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/dan de derde kant.    \/\/Drie kanten make ' n geldige driehoek es de som vaan twie kanten groter is .    \/\/Anders keert 't -1     \/\/de driehoek is op 2 decimaalpunte afgerond es de drie kanten 'n geldige driehoek vormen.     \/\/Gegaeve de lengte van de drie kanten van 'n driehoek, geef de oppervlakte van  terug.    \/\/ >>> TriangleArea((3L), (4L), (5L))\n    \/\/ (6.0f)\n    \/\/ >>> TriangleArea((1L), (2L), (10L))\n    \/\/ (float)-1L\n    public static float TriangleArea(long a, long b, long c) {\n","canonical_solution":"public static float TriangleArea(long a, long b, long c) {\n    \/\/ Check if the sides form a valid triangle using the triangle inequality theorem\n    if (a + b > c && a + c > b && b + c > a) {\n        \/\/ Use Heron's formula to calculate the area of the triangle\n        double s = (a + b + c) \/ 2.0;\n        double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float)Math.Round(area, 2);\n    }\n    return -1;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n    }\n\n}\n"},{"task_id":"HumanEval_72","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/'t Object q zal vlege es 't gebalanceerd is (det is 'n palindrome lijst) en de som vaan de elemente minder is es of geliek is aan 't maximaal meugelek gewich w.    \/\/Schrief 'n functie die true retourneert es 't objek q zal vlege en false anders.    \/\/ >>> WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\n    \/\/ (false)\n    \/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \/\/ >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    \/\/ (false)\n    \/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \/\/ >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    \/\/ (true)\n    \/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \/\/ >>> WillItFly((new List<long>(new long[]{(long)3L})), (5L))\n    \/\/ (true)\n    \/\/ # 3 is less than the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static bool WillItFly(List<long> q, long w)\n    {\n        if (IsPalindromic(q) && SumIsLessThanOrEqual(q, w))\n        {\n            return true;\n        }\n        return false;\n    }\n\n    private static bool IsPalindromic(List<long> q)\n    {\n        int count = q.Count;\n        for (int i = 0; i < count \/ 2; i++)\n        {\n            if (q[i] != q[count - i - 1])\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static bool SumIsLessThanOrEqual(List<long> q, long w)\n    {\n        long sum = 0;\n        foreach (var item in q)\n        {\n            sum += item;\n            if (sum > w)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_73","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/In ein verandering kint geer ein element verangere in e ander element.    \/\/'n Palindromische lies is 'n lies die     \/\/Gegaeve 'n liest arr van gans getalle, vind 't minimum aontal elemente die     \/\/ >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)4L, (long)7L, (long)9L, (long)6L})))\n    \/\/ (4L)\n    \/\/ >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)2L})))\n    \/\/ (1L)\n    \/\/ >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)1L})))\n    \/\/ (0L)\n    public static long SmallestChange(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static long SmallestChange(List<long> arr)\n    {\n        long changes = 0;\n        int left = 0;\n        int right = arr.Count - 1;\n\n        while (left < right)\n        {\n            if (arr[left] != arr[right])\n            {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    static void Main()\n    {\n        \/\/ Example usage:\n        List<long> list1 = new List<long> { 1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L };\n        Console.WriteLine(SmallestChange(list1)); \/\/ Output: 4\n\n        List<long> list2 = new List<long> { 1L, 2L, 3L, 4L, 3L, 2L, 2L };\n        Console.WriteLine(SmallestChange(list2)); \/\/ Output: 1\n\n        List<long> list3 = new List<long> { 1L, 2L, 3L, 2L, 1L };\n        Console.WriteLine(SmallestChange(list3)); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)4L, (long)7L, (long)9L, (long)6L}))) == (4L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)4L, (long)4L, (long)2L}))) == (1L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)1L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)3L, (long)1L, (long)1L, (long)3L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(SmallestChange((new List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_74","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde     \/\/Es de twieë lieste 'tzelfde aantal karakters höbbe, wurt de ierste lieste geretourneerd.    \/\/totaal aantal karakters in alle stringe vaan de lies minder es in de andere lies.     \/\/Schrijf 'n functie die twie listjes van stringe accepteert en de lijst die     \/\/ >>> TotalMatch((new List<string>()), (new List<string>()))\n    \/\/ (new List<string>())\n    \/\/ >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"})))\n    \/\/ (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))\n    \/\/ >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\", (string)\"admin\", (string)\"project\"})))\n    \/\/ (new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))\n    \/\/ >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"})))\n    \/\/ (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))\n    \/\/ >>> TotalMatch((new List<string>(new string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"5\"})))\n    \/\/ (new List<string>(new string[]{(string)\"4\"}))\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2)\n    {\n        int totalCharsLst1 = lst1.Sum(s => s.Length);\n        int totalCharsLst2 = lst2.Sum(s => s.Length);\n\n        if (totalCharsLst1 <= totalCharsLst2)\n        {\n            return lst1;\n        }\n        else\n        {\n            return lst2;\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TotalMatch((new List<string>()), (new List<string>())).Equals((new List<string>())));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\", (string)\"admin\", (string)\"project\"}))).Equals((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"5\"}))).Equals((new List<string>(new string[]{(string)\"4\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hii\"}))).Equals((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>()), (new List<string>(new string[]{(string)\"this\"}))).Equals((new List<string>())));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"this\"})), (new List<string>())).Equals((new List<string>())));\n    }\n\n}\n"},{"task_id":"HumanEval_75","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Weite dat a minder is es 100.    \/\/en anders vals.    \/\/Schrijf ' n functie die waor weergeeft es ' t gegegeerde getal de vermenigvuldiging is van 3 priemgetalle .    \/\/ >>> IsMultiplyPrime((30L))\n    \/\/ (true)\n    \/\/ 30 = 2 * 3 * 5\n    public static bool IsMultiplyPrime(long a) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static bool IsMultiplyPrime(long a) {\n        if (a >= 100) return false;\n        \n        List<long> primes = GeneratePrimes(100);\n        \n        int count = 0;\n        foreach (long prime in primes) {\n            while (a % prime == 0) {\n                a \/= prime;\n                count++;\n            }\n            if (count > 3) break;\n        }\n        \n        return a == 1 && count == 3;\n    }\n\n    private static List<long> GeneratePrimes(int max) {\n        List<long> primes = new List<long>();\n        bool[] isPrime = new bool[max + 1];\n        for (int i = 2; i <= max; i++) isPrime[i] = true;\n\n        for (int i = 2; i * i <= max; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= max; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i <= max; i++) {\n            if (isPrime[i]) primes.Add(i);\n        }\n\n        return primes;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMultiplyPrime((5L)) == (false));\n    Debug.Assert(IsMultiplyPrime((30L)) == (true));\n    Debug.Assert(IsMultiplyPrime((8L)) == (true));\n    Debug.Assert(IsMultiplyPrime((10L)) == (false));\n    Debug.Assert(IsMultiplyPrime((125L)) == (true));\n    Debug.Assert(IsMultiplyPrime((105L)) == (true));\n    Debug.Assert(IsMultiplyPrime((126L)) == (false));\n    Debug.Assert(IsMultiplyPrime((729L)) == (false));\n    Debug.Assert(IsMultiplyPrime((891L)) == (false));\n    Debug.Assert(IsMultiplyPrime((1001L)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_76","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/x is 'n simpel krach vaan n es n**int=x     \/\/krach vaan n en vals in aander gevalle.    \/\/De taak is 'n functie te sjrieve die true retourneert es 'n getal x 'n simpel  is.    \/\/ >>> IsSimplePower((1L), (4L))\n    \/\/ (true)\n    \/\/ >>> IsSimplePower((2L), (2L))\n    \/\/ (true)\n    \/\/ >>> IsSimplePower((8L), (2L))\n    \/\/ (true)\n    \/\/ >>> IsSimplePower((3L), (2L))\n    \/\/ (false)\n    \/\/ >>> IsSimplePower((3L), (1L))\n    \/\/ (false)\n    \/\/ >>> IsSimplePower((5L), (3L))\n    \/\/ (false)\n    public static bool IsSimplePower(long x, long n) {\n","canonical_solution":"if (x < 1 || n < 2)\n        return false;\n\n    while (x > 1)\n    {\n        if (x % n != 0)\n            return false;\n        x \/= n;\n    }\n\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_77","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Opmerking: ge kint aanneme dat de input altied geldig is.    \/\/Es dit ingeger 'n kubus is vaan 'n heel getal.    \/\/Schrijf ' n functie die ' n heel getal a aannimmt en true teruggeeft .    \/\/ >>> Iscube((1L))\n    \/\/ (true)\n    \/\/ >>> Iscube((2L))\n    \/\/ (false)\n    \/\/ >>> Iscube((-1L))\n    \/\/ (true)\n    \/\/ >>> Iscube((64L))\n    \/\/ (true)\n    \/\/ >>> Iscube((0L))\n    \/\/ (true)\n    \/\/ >>> Iscube((180L))\n    \/\/ (false)\n    public static bool Iscube(long a) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool Iscube(long a) {\n        if (a == 0) return true;\n        long absA = Math.Abs(a);\n        long cubeRoot = (long)Math.Round(Math.Pow(absA, 1.0 \/ 3.0));\n        return cubeRoot * cubeRoot * cubeRoot == absA;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Iscube(1L));    \/\/ true\n        Console.WriteLine(Iscube(2L));    \/\/ false\n        Console.WriteLine(Iscube(-1L));   \/\/ true\n        Console.WriteLine(Iscube(64L));   \/\/ true\n        Console.WriteLine(Iscube(0L));    \/\/ true\n        Console.WriteLine(Iscube(180L));  \/\/ false\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_78","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/en symbolen A,B,C,D,E,F zien altied groet.    \/\/Opmerking: geer kint aanneme dat de ingang altied 'n korrekte of lege string is,     \/\/B (= decimaal 11), D (= decimaal 13).     \/\/Dus geer moot 'n aantal van de volgende cijfers bepaole: 2, 3, 5, 7,     \/\/Eerste getalle zien 2, 3, 5, 7, 11, 13, 17...    \/\/Hexadecimaole cijfers zien 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.    \/\/groter es 1 dat neet 'n product is vaan twie kleinere natuurleke getalle).    \/\/De cijfers die primae zien (een primaal getal is 'n netuurlek getal     \/\/'n hexadecimaal getal es 'n string en tel 't aantal hexadecimale getalle     \/\/Geer höb 'n functie gesjreve die ontvanger is.    \/\/ >>> HexKey((\"AB\"))\n    \/\/ (1L)\n    \/\/ >>> HexKey((\"1077E\"))\n    \/\/ (2L)\n    \/\/ >>> HexKey((\"ABED1A33\"))\n    \/\/ (4L)\n    \/\/ >>> HexKey((\"123456789ABCDEF0\"))\n    \/\/ (6L)\n    \/\/ >>> HexKey((\"2020\"))\n    \/\/ (2L)\n    public static long HexKey(string num) {\n","canonical_solution":"public static long HexKey(string num) {\n    \/\/ Define a set of prime hexadecimal digits\n    HashSet<char> primeHexDigits = new HashSet<char> { '2', '3', '5', '7', 'B', 'D' };\n\n    long primeCount = 0;\n\n    \/\/ Iterate through each character in the input string\n    foreach (char c in num) {\n        \/\/ If the character is in the set of prime hex digits, increase the count\n        if (primeHexDigits.Contains(c)) {\n            primeCount++;\n        }\n    }\n\n    return primeCount;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n    }\n\n}\n"},{"task_id":"HumanEval_79","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/De extra tekens zeen d'r veur de formaat.    \/\/D'r zien 'n extra paar karakters 'db' aan 't begin en 't eind van de string.    \/\/Elk teken in de string zal '0' of '1' zien.    \/\/De functie moot 'n string retourne, mèt eder teken 'n binair     \/\/Geer wurt 'n getal in decimaolvorm gegaeve en geer wurtj 't te verwieze nao     \/\/ >>> DecimalToBinary((15L))\n    \/\/ (\"db1111db\")\n    \/\/ >>> DecimalToBinary((32L))\n    \/\/ (\"db100000db\")\n    public static string DecimalToBinary(long decimalNum) {\n","canonical_solution":"public static string DecimalToBinary(long decimalNum) {\n    string binary = Convert.ToString(decimalNum, 2);\n    return \"db\" + binary + \"db\";\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"},{"task_id":"HumanEval_80","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/'n Strijke is hapcs es d'r minstes 3 lengte en alle 3 opeenvolgende lètters versjèllend zien.    \/\/Dees taak is te controleere of de string hapcs is of neet.    \/\/Geer höb 'n string s.    \/\/ >>> IsHappy((\"a\"))\n    \/\/ (false)\n    \/\/ >>> IsHappy((\"aa\"))\n    \/\/ (false)\n    \/\/ >>> IsHappy((\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> IsHappy((\"aabb\"))\n    \/\/ (false)\n    \/\/ >>> IsHappy((\"adb\"))\n    \/\/ (true)\n    \/\/ >>> IsHappy((\"xyy\"))\n    \/\/ (false)\n    public static bool IsHappy(string s) {\n","canonical_solution":"if (s.Length < 3) {\n        return false;\n    }\n\n    for (int i = 0; i <= s.Length - 3; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_81","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/0,0 E     \/\/> 0,0 D-     \/\/> 0,7 D     \/\/> 1,0 D+     \/\/> 1.3 C-     \/\/> 1,7 C     \/\/> 2,0 C+     \/\/> 2.3 B-     \/\/> 2,7 B     \/\/> 3,0 B+     \/\/> 3.3 A-     \/\/> 3,7 A     \/\/4.0 A+     \/\/GPA. Letter grade.    \/\/'n functie die 'n lies vaan letterklasse mèt de volgende tabel kan oetgeve:     \/\/Ze haet ' n lies van de gemiddelde cijfers van ' n paar leerlingen .    \/\/'t Einigste probleem is, dat ze de code die ze veur de beoordeling gebruukde, kwiet is.    \/\/De docent haet ziech eige algoritme veur de gradering gemaak.    \/\/'t Is de lètste waek van 't semester en de juffrouw moet de notities gaeve .    \/\/ >>> GradeEquation((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f})))\n    \/\/ (new List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))\n    public static List<string> NumericalLetterGrade(List<float> grades) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<string> NumericalLetterGrade(List<float> grades)\n    {\n        List<string> letterGrades = new List<string>();\n\n        foreach (var gpa in grades)\n        {\n            if (gpa == 4.0f)\n                letterGrades.Add(\"A+\");\n            else if (gpa > 3.7f)\n                letterGrades.Add(\"A\");\n            else if (gpa > 3.3f)\n                letterGrades.Add(\"A-\");\n            else if (gpa > 3.0f)\n                letterGrades.Add(\"B+\");\n            else if (gpa > 2.7f)\n                letterGrades.Add(\"B\");\n            else if (gpa > 2.3f)\n                letterGrades.Add(\"B-\");\n            else if (gpa > 2.0f)\n                letterGrades.Add(\"C+\");\n            else if (gpa > 1.7f)\n                letterGrades.Add(\"C\");\n            else if (gpa > 1.3f)\n                letterGrades.Add(\"C-\");\n            else if (gpa > 1.0f)\n                letterGrades.Add(\"D+\");\n            else if (gpa > 0.7f)\n                letterGrades.Add(\"D\");\n            else if (gpa > 0.0f)\n                letterGrades.Add(\"D-\");\n            else\n                letterGrades.Add(\"E\");\n        }\n\n        return letterGrades;\n    }\n\n    static void Main(string[] args)\n    {\n        List<float> gpas = new List<float> { 4.0f, 3.0f, 1.7f, 2.0f, 3.5f };\n        List<string> grades = NumericalLetterGrade(gpas);\n        Console.WriteLine(string.Join(\", \", grades));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f}))).Equals((new List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.2f}))).Equals((new List<string>(new string[]{(string)\"D+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.5f}))).Equals((new List<string>(new string[]{(string)\"D-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f}))).Equals((new List<string>(new string[]{(string)\"E\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))).Equals((new List<string>(new string[]{(string)\"D\", (string)\"D-\", (string)\"C-\", (string)\"B\", (string)\"B+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f, (float)0.7f}))).Equals((new List<string>(new string[]{(string)\"E\", (string)\"D-\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_82","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde     \/\/lengte is 'n priemgetal of anders vals     \/\/Schrijf 'n functie die 'n string aannimmt en waor terugkeert es de string     \/\/ >>> PrimeLength((\"Hello\"))\n    \/\/ (true)\n    \/\/ >>> PrimeLength((\"abcdcba\"))\n    \/\/ (true)\n    \/\/ >>> PrimeLength((\"kittens\"))\n    \/\/ (true)\n    \/\/ >>> PrimeLength((\"orange\"))\n    \/\/ (false)\n    public static bool PrimeLength(string str) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool PrimeLength(string str) {\n        int length = str.Length;\n        if (length < 2) return false;\n        \n        for (int i = 2; i <= Math.Sqrt(length); i++) {\n            if (length % i == 0) return false;\n        }\n        \n        return true;\n    }\n    \n    \/\/ Example usage\n    public static void Main() {\n        Console.WriteLine(PrimeLength(\"Hello\"));    \/\/ true\n        Console.WriteLine(PrimeLength(\"abcdcba\"));  \/\/ true\n        Console.WriteLine(PrimeLength(\"kittens\"));  \/\/ true\n        Console.WriteLine(PrimeLength(\"orange\"));   \/\/ false\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeLength((\"Hello\")) == (true));\n    Debug.Assert(PrimeLength((\"abcdcba\")) == (true));\n    Debug.Assert(PrimeLength((\"kittens\")) == (true));\n    Debug.Assert(PrimeLength((\"orange\")) == (false));\n    Debug.Assert(PrimeLength((\"wow\")) == (true));\n    Debug.Assert(PrimeLength((\"world\")) == (true));\n    Debug.Assert(PrimeLength((\"MadaM\")) == (true));\n    Debug.Assert(PrimeLength((\"Wow\")) == (true));\n    Debug.Assert(PrimeLength((\"\")) == (false));\n    Debug.Assert(PrimeLength((\"HI\")) == (true));\n    Debug.Assert(PrimeLength((\"go\")) == (true));\n    Debug.Assert(PrimeLength((\"gogo\")) == (false));\n    Debug.Assert(PrimeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    Debug.Assert(PrimeLength((\"Madam\")) == (true));\n    Debug.Assert(PrimeLength((\"M\")) == (false));\n    Debug.Assert(PrimeLength((\"0\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_83","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Positieve gans getalle die beginne of eindigje mèt 1.    \/\/Gegaeve 'n positief gans getal n, geef 't aantal n-cijferige getalle     public static long StartsOneEnds(long n) {\n","canonical_solution":"if (n == 1) return 1;\n        return (long)Math.Pow(10, n - 1) + 9 * (long)Math.Pow(10, n - 2);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n}\n"},{"task_id":"HumanEval_84","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld     \/\/Gegeve 'n positief gans getal N, geef de totale som vaan zien cijfers in binarisch weer.     \/\/ >>> Solve((1000L))\n    \/\/ (\"1\")\n    \/\/ >>> Solve((150L))\n    \/\/ (\"110\")\n    \/\/ >>> Solve((147L))\n    \/\/ (\"1100\")\n    \/\/ Variables:\n    \/\/ @N integer\n    \/\/ Constraints: 0 ≤ N ≤ 10000.\n    \/\/ Output:\n    \/\/ a string of binary number\n    public static string Solve(long N) {\n","canonical_solution":"public static string Solve(long N) {\n        int sumOfDigits = 0;\n        while (N > 0) {\n            sumOfDigits += (int)(N % 10);\n            N \/= 10;\n        }\n        return Convert.ToString(sumOfDigits, 2);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"},{"task_id":"HumanEval_85","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Gegaeve 'n neet-lege lies van gans getalle lst. voeg de paar eleminte die bij oneven indexe ligke toe..     \/\/ >>> Add((new List<long>(new long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    \/\/ (2L)\n    public static long Add(List<long> lst) {\n","canonical_solution":"long sum = 0;\n    for (int i = 1; i < lst.Count; i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"},{"task_id":"HumanEval_86","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Opmerking: Je moet de volgorde van de woorden en de lege ruimtes in de zin behouden.    \/\/opkómende volgorde gebaseerd op ascii-waarde.    \/\/weurt vervange door 'n nuuj woord boe alle tekens in     \/\/Geordende versie vaan string, is 'n string boe alle wäörd (gesjeid door ruumte)     \/\/Schrief 'n functie die 'n string aannimmt en 'n geordende versie daovaan retourneert.    \/\/ >>> AntiShuffle((\"Hi\"))\n    \/\/ (\"Hi\")\n    \/\/ >>> AntiShuffle((\"hello\"))\n    \/\/ (\"ehllo\")\n    \/\/ >>> AntiShuffle((\"Hello World!!!\"))\n    \/\/ (\"Hello !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n","canonical_solution":"using System;\nusing System.Linq;\n\nclass Problem\n{\n    public static string AntiShuffle(string s)\n    {\n        return string.Join(\" \", s.Split(' ')\n            .Select(word => string.Concat(word.OrderBy(c => c))));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"},{"task_id":"HumanEval_87","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Veur de koördinate vaan de rij in de kolom in dalende volgorde.    \/\/Sort coördinate in 't begin in rijen in opkomende volgorde.    \/\/eder tuple is 'n coördinaat - (riej, kolomme), beginne mèt 0.     \/\/en retourneer de lijst van tupels, [(x1, y1), (x2, y2) ...] zodet     \/\/Gegaeve lst en integer x, vind integer x in de lies,     \/\/Elke rij kan 'n aanders aontal kolommen bevatte.    \/\/Dat is vergeliekbaar mèt matrix, meh in tegestèlling tot matrix,     \/\/Geer höb 'n 2D-data, es 'n geneste list,     \/\/ >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L))\n    \/\/ (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    \/\/ >>> GetRow((new List<List<long>>()), (1L))\n    \/\/ (new List<Tuple<long, long>>())\n    \/\/ >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n    \/\/ (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n        var result = new List<Tuple<long, long>>();\n        \n        for (long row = 0; row < lst.Count; row++) {\n            List<long> currentRow = lst[(int)row];\n            var foundIndices = new List<long>();\n            \n            for (long col = 0; col < currentRow.Count; col++) {\n                if (currentRow[(int)col] == x) {\n                    foundIndices.Add(col);\n                }\n            }\n            \n            foundIndices.Sort((a, b) => b.CompareTo(a)); \/\/ Sort columns in descending order\n            \n            foreach (var col in foundIndices) {\n                result.Add(Tuple.Create(row, col));\n            }\n        }\n        \n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})), (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"},{"task_id":"HumanEval_88","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/* verangere de gegeve lies neet.     \/\/Noot:     \/\/of sorteer 't in dalende volgorde es de som ((ierste indexewaarde, lètste indexewaarde) gepaard is.     \/\/Geer zörg veur de gegaeve lies in opgaonde volgorde es de som ((ierste indexewaarde, lètste indexewaarde) oneven is,     \/\/Gegaeve 'n lies van neet-negatieve gans getalle, wèrk 'n cocs van de geliste nao 't sortere,     \/\/ >>> SortArray((new List<long>()))\n    \/\/ (new List<long>())\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)5L})))\n    \/\/ (new List<long>(new long[]{(long)5L}))\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    \/\/ (new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long> array) {\n","canonical_solution":"public static List<long> SortArray(List<long> array) {\n        if (array == null || array.Count <= 1) {\n            return new List<long>(array);\n        }\n        \n        long firstValue = array[0];\n        long lastValue = array[array.Count - 1];\n        long sum = firstValue + lastValue;\n\n        List<long> sortedArray = new List<long>(array);\n\n        if (sum % 2 != 0) { \/\/ sum is odd, sort ascending\n            sortedArray.Sort();\n        } else { \/\/ sum is even, sort descending\n            sortedArray.Sort();\n            sortedArray.Reverse();\n        }\n\n        return sortedArray;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L, (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L, (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L, (long)11L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_89","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Verplaatsing nao beneden door twie vermenigvuldigd mèt twie plaotse.    \/\/'t Alfabet moot zoe gedrejd weure tot de lètters     \/\/return a string encrypted with the alphabet being rotated.     \/\/Skep ' n functie die ' n string as argument en     \/\/ >>> Encrypt((\"hi\"))\n    \/\/ (\"lm\")\n    \/\/ >>> Encrypt((\"asdfghjkl\"))\n    \/\/ (\"ewhjklnop\")\n    \/\/ >>> Encrypt((\"gf\"))\n    \/\/ (\"kj\")\n    \/\/ >>> Encrypt((\"et\"))\n    \/\/ (\"ix\")\n    public static string Encrypt(string s) {\n","canonical_solution":"const int shiftAmount = 4; \/\/ 2 multiplied by 2 equals 4.\n\n    StringBuilder encrypted = new StringBuilder();\n\n    foreach (char c in s) {\n        if (char.IsLetter(c)) {\n            char start = char.IsUpper(c) ? 'A' : 'a';\n            char encryptedChar = (char)(start + (c - start + shiftAmount) % 26);\n            encrypted.Append(encryptedChar);\n        } else {\n            encrypted.Append(c); \/\/ Non-letter characters are not encrypted.\n        }\n    }\n\n    return encrypted.ToString();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n    Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n    Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"},{"task_id":"HumanEval_90","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Return null if there is no such element.     \/\/Schrief 'n functie next_smallest (de) die 't 2e kleinste element van de lies weergeeft.     \/\/Geer kriegt 'n lies van gans getalle.    \/\/ >>> NextSmallest((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))\n    \/\/ 2L\n    \/\/ >>> NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L})))\n    \/\/ 2L\n    \/\/ >>> NextSmallest((new List<long>()))\n    \/\/ null\n    \/\/ >>> NextSmallest((new List<long>(new long[]{(long)1L, (long)1L})))\n    \/\/ null\n    public static Nullable<long> NextSmallest(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static Nullable<long> NextSmallest(List<long> lst) {\n        if (lst == null || lst.Count < 2) {\n            return null;\n        }\n\n        HashSet<long> uniqueElements = new HashSet<long>(lst);\n        if (uniqueElements.Count < 2) {\n            return null;\n        }\n\n        List<long> sortedUniqueElements = uniqueElements.ToList();\n        sortedUniqueElements.Sort();\n\n        return sortedUniqueElements[1];\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(NextSmallest(new List<long> {1, 2, 3, 4, 5})); \/\/ 2\n        Console.WriteLine(NextSmallest(new List<long> {5, 1, 4, 3, 2})); \/\/ 2\n        Console.WriteLine(NextSmallest(new List<long>())); \/\/ null\n        Console.WriteLine(NextSmallest(new List<long> {1, 1})); \/\/ null\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n    }\n\n}\n"},{"task_id":"HumanEval_91","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/De zinnen weure afgerind door '.', '?' of '!'.     \/\/'n Verveiling begint mèt 't woord \"ik\".    \/\/Geer kint 'n aafsjreve van wäörd en geer kint 't getal telle.    \/\/ >>> IsBored((\"Hello world\"))\n    \/\/ (0L)\n    \/\/ >>> IsBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    \/\/ (1L)\n    public static long IsBored(string S) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long IsBored(string S) {\n        \/\/ Split the input string into sentences based on delimiters '.', '?', '!'\n        char[] delimiters = new char[] { '.', '?', '!' };\n        string[] sentences = S.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n\n        \/\/ Count sentences that start with 'I' after trimming leading whitespaces\n        long boredomCount = 0;\n        foreach (string sentence in sentences) {\n            if (sentence.TrimStart().StartsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    static void Main(string[] args) {\n        \/\/ Example usage:\n        Console.WriteLine(IsBored(\"Hello world\")); \/\/ Output: 0\n        Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); \/\/ Output: 1\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for a walk\")) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_92","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde     \/\/Geit in alle aander gevalle vals.     \/\/Geit true terug es ein van de getalle de som vaan de aander twie is en alle getalle gans getalle zien.    \/\/Skep 'n functie die 3 getalle inneit.    \/\/ >>> AnyInt((float)5L, (float)2L, (float)7L)\n    \/\/ (true)\n    \/\/ >>> AnyInt((float)3L, (float)2L, (float)2L)\n    \/\/ (false)\n    \/\/ >>> AnyInt((float)3L, (float)-2L, (float)1L)\n    \/\/ (true)\n    \/\/ >>> AnyInt((3.6f), (-2.2f), (float)2L)\n    \/\/ (false)\n    public static bool AnyInt(float x, float y, float z) {\n","canonical_solution":"public static bool AnyInt(float x, float y, float z) {\n        if (x == Math.Round(x) && y == Math.Round(y) && z == Math.Round(z)) {\n            if (x == y + z || y == x + z || z == x + y) {\n                return true;\n            }\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AnyInt((float)2L, (float)3L, (float)1L) == (true));\n    Debug.Assert(AnyInt((2.5f), (float)2L, (float)3L) == (false));\n    Debug.Assert(AnyInt((1.5f), (float)5L, (3.5f)) == (false));\n    Debug.Assert(AnyInt((float)2L, (float)6L, (float)2L) == (false));\n    Debug.Assert(AnyInt((float)4L, (float)2L, (float)2L) == (true));\n    Debug.Assert(AnyInt((2.2f), (2.2f), (2.2f)) == (false));\n    Debug.Assert(AnyInt((float)-4L, (float)6L, (float)2L) == (true));\n    Debug.Assert(AnyInt((float)2L, (float)1L, (float)1L) == (true));\n    Debug.Assert(AnyInt((float)3L, (float)4L, (float)7L) == (true));\n    Debug.Assert(AnyInt((3.0f), (float)4L, (float)7L) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_93","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Veurbeeld allein lètters.    \/\/klinker in 't Engels alfabet.    \/\/'t berich mèt de letter die 2 plaatsen daoveur opduikt     \/\/Dees manier van sjrieve vervult alle klinkers in     \/\/Schrief 'n functie die 'n berich aafneump en 'n zónder aafneump functie aafneump.    \/\/ >>> Encode((\"test\"))\n    \/\/ (\"TGST\")\n    \/\/ >>> Encode((\"This is a message\"))\n    \/\/ (\"tHKS KS C MGSSCGG\")\n    public static string Encode(string message) {\n","canonical_solution":"public static string Encode(string message) {\n    \/\/ Define vowels and their replacements\n    Dictionary<char, char> vowelReplacement = new Dictionary<char, char>\n    {\n        { 'a', 'c' },\n        { 'e', 'g' },\n        { 'i', 'k' },\n        { 'o', 'q' },\n        { 'u', 'w' },\n        { 'A', 'C' },\n        { 'E', 'G' },\n        { 'I', 'K' },\n        { 'O', 'Q' },\n        { 'U', 'W' }\n    };\n\n    StringBuilder encodedMessage = new StringBuilder();\n\n    foreach (char c in message) {\n        if (char.IsLetter(c)) {\n            \/\/ Swap case\n            char swappedCaseChar = char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n\n            \/\/ Replace vowels according to the defined map\n            if (vowelReplacement.ContainsKey(swappedCaseChar)) {\n                encodedMessage.Append(vowelReplacement[swappedCaseChar]);\n            } else {\n                encodedMessage.Append(swappedCaseChar);\n            }\n        } else {\n            \/\/ Non-letter characters should be appended as-is (if necessary)\n            encodedMessage.Append(c);\n        }\n    }\n\n    return encodedMessage.ToString();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"},{"task_id":"HumanEval_94","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Geer moot de groetste priemwaarde vinde en de som vaan de cijfers weergeve.    \/\/Geer kriegt 'n lies van gans getalle.    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L})))\n    \/\/ (10L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\n    \/\/ (25L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\n    \/\/ (13L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L})))\n    \/\/ (11L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L})))\n    \/\/ (3L)\n    \/\/ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L})))\n    \/\/ (7L)\n    public static long Skjkasdkd(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static long Skjkasdkd(List<long> lst) {\n        long largestPrime = -1;\n\n        foreach (var num in lst) {\n            if (IsPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        if (largestPrime == -1) return 0;\n\n        return SumOfDigits(largestPrime);\n    }\n\n    private static bool IsPrime(long number) {\n        if (number <= 1) return false;\n        if (number <= 3) return true;\n\n        if (number % 2 == 0 || number % 3 == 0) return false;\n\n        for (long i = 5; i * i <= number; i += 6) {\n            if (number % i == 0 || number % (i + 2) == 0) return false;\n        }\n\n        return true;\n    }\n\n    private static long SumOfDigits(long number) {\n        long sum = 0;\n        while (number != 0) {\n            sum += number % 10;\n            number \/= 10;\n        }\n        return sum;\n    }\n}\n\n\/\/ Example of usage:\n\/\/ var result = Problem.Skjkasdkd(new List<long> {0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3});\n\/\/ Console.WriteLine(result); \/\/ Output will be 10","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L}))) == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L}))) == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L}))) == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L}))) == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L, (long)8192L}))) == (10L));\n    }\n\n}\n"},{"task_id":"HumanEval_95","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/De funksje moat falsk weromkearre as de oanbeande wurkboek is leeg.    \/\/case of alle sleutels zien stringe in hoofletters, anders retourneer vals.    \/\/Gegaeve 'n woordenboek, goon weej true es alle toetsen stringe in lower     \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"b\", \"banana\"}}))\n    \/\/ (true)\n    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))\n    \/\/ (false)\n    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {8L, \"banana\"}, {\"a\", \"apple\"}}))\n    \/\/ (false)\n    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))\n    \/\/ (false)\n    \/\/ >>> CheckDictCase((new Dictionary<string,string>(){{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))\n    \/\/ (true)\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static bool CheckDictCase(Dictionary<string, string> dict)\n    {\n        if (dict.Count == 0)\n            return false;\n\n        bool allLower = true;\n        bool allUpper = true;\n\n        foreach (var key in dict.Keys)\n        {\n            if (key != key.ToLower())\n                allLower = false;\n            if (key != key.ToUpper())\n                allUpper = false;\n        }\n\n        return allLower || allUpper;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}})) == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>())) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_96","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/veurbeelde:     \/\/Integer die primair zien en minder es n.    \/\/Implementeer 'n functie die 'n neet-negatief gans getal aannump en 'n lies van de ierste n teruggeve.    \/\/ >>> CountUpTo((5L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L}))\n    \/\/ >>> CountUpTo((11L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))\n    \/\/ >>> CountUpTo((0L))\n    \/\/ (new List<long>())\n    \/\/ >>> CountUpTo((20L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L}))\n    \/\/ >>> CountUpTo((1L))\n    \/\/ (new List<long>())\n    \/\/ >>> CountUpTo((18L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))\n    public static List<long> CountUpTo(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> CountUpTo(long n) {\n        List<long> primes = new List<long>();\n        if (n <= 2) return primes;\n\n        \/\/ Check for prime numbers from 2 up to n-1\n        for (long i = 2; i < n; i++) {\n            if (IsPrime(i)) {\n                primes.Add(i);\n            }\n        }\n\n        return primes;\n    }\n\n    private static bool IsPrime(long number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n\n        long boundary = (long)Math.Sqrt(number);\n\n        for (long i = 2; i <= boundary; i++) {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpTo((5L)).Equals((new List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(CountUpTo((6L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((7L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((10L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(CountUpTo((0L)).Equals((new List<long>())));\n    Debug.Assert(CountUpTo((22L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L}))));\n    Debug.Assert(CountUpTo((1L)).Equals((new List<long>())));\n    Debug.Assert(CountUpTo((18L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(CountUpTo((47L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L}))));\n    Debug.Assert(CountUpTo((101L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L, (long)47L, (long)53L, (long)59L, (long)61L, (long)67L, (long)71L, (long)73L, (long)79L, (long)83L, (long)89L, (long)97L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_97","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Veur 't insjtèlle is de insjtelling altied geldig.    \/\/'t product vaan hun einheidscijfers.     \/\/Voltoet de functie die twieë gans getalle aafneump en wirt     \/\/ >>> Multiply((148L), (412L))\n    \/\/ (16L)\n    \/\/ >>> Multiply((19L), (28L))\n    \/\/ (72L)\n    \/\/ >>> Multiply((2020L), (1851L))\n    \/\/ (0L)\n    \/\/ >>> Multiply((14L), (-15L))\n    \/\/ (20L)\n    public static long Multiply(long a, long b) {\n","canonical_solution":"public static long Multiply(long a, long b) {\n    int unitDigitA = (int)(Math.Abs(a) % 10);\n    int unitDigitB = (int)(Math.Abs(b) % 10);\n    return (long)(unitDigitA * unitDigitB);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_98","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Gegaeve 'n string s, tel 't aontal hooflettervokale in paarse indexe.     \/\/ >>> CountUpper((\"aBCdEf\"))\n    \/\/ (1L)\n    \/\/ >>> CountUpper((\"abcdefg\"))\n    \/\/ (0L)\n    \/\/ >>> CountUpper((\"dBBE\"))\n    \/\/ (0L)\n    public static long CountUpper(string s) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long CountUpper(string s) {\n        long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i])) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void Main(string[] args) {\n        Console.WriteLine(CountUpper(\"aBCdEf\")); \/\/ Output: 1\n        Console.WriteLine(CountUpper(\"abcdefg\")); \/\/ Output: 0\n        Console.WriteLine(CountUpper(\"dBBE\")); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpper((\"aBCdEf\")) == (1L));\n    Debug.Assert(CountUpper((\"abcdefg\")) == (0L));\n    Debug.Assert(CountUpper((\"dBBE\")) == (0L));\n    Debug.Assert(CountUpper((\"B\")) == (0L));\n    Debug.Assert(CountUpper((\"U\")) == (1L));\n    Debug.Assert(CountUpper((\"\")) == (0L));\n    Debug.Assert(CountUpper((\"EEEE\")) == (2L));\n    }\n\n}\n"},{"task_id":"HumanEval_99","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde     \/\/Van twieë gans getalle, roond 't weg van nul.    \/\/en zörg veur 't dichte integer.    \/\/'n Functie die 'n waerde (sjreef) aannimmt die 'n getal weergeeft     \/\/ >>> ClosestInteger((\"10\"))\n    \/\/ (10L)\n    \/\/ >>> ClosestInteger((\"15.3\"))\n    \/\/ (15L)\n    \/\/ Note:\n    \/\/ Rounding away from zero means that if the given number is equidistant\n    \/\/ from two integers, the one you should return is the one that is the\n    \/\/ farthest from zero. For example closest_integer(\"14.5\") should\n    \/\/ return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n","canonical_solution":"public static long ClosestInteger(string value) {\n    double number = double.Parse(value);\n    return (long)Math.Round(number, MidpointRounding.AwayFromZero);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_100","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/i is 't aontal steine in 't niveau (i+1).    \/\/Returneert 't aontal steine in eder niveau in 'n lies, boe 't element bij index     \/\/- 't volgende paar getal es n paar is.    \/\/- 't volgende oneven getal es n oneven is.    \/\/'t Aantal steine in 't volgende niveau is:     \/\/'t Ierste niveau haet n steine.    \/\/Gegaeve 'n positief gans getal n, mós se 'n stapel van n steinlaeve make.    \/\/ >>> MakeAPile((3L))\n    \/\/ (new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))\n    public static List<long> MakeAPile(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> MakeAPile(long n) {\n        List<long> pile = new List<long>();\n        long currentStones = n;\n        \n        for (long i = 0; i < n; i++) {\n            pile.Add(currentStones);\n            currentStones += (n % 2 == 0) ? 2 : 2;\n        }\n\n        return pile;\n    }\n    \n    static void Main(string[] args) {\n        List<long> result = MakeAPile(3L);\n        Console.WriteLine(string.Join(\", \", result));  \/\/ Output: 3, 5, 7\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MakeAPile((3L)).Equals((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(MakeAPile((4L)).Equals((new List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(MakeAPile((5L)).Equals((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)11L, (long)13L}))));\n    Debug.Assert(MakeAPile((6L)).Equals((new List<long>(new long[]{(long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)16L}))));\n    Debug.Assert(MakeAPile((8L)).Equals((new List<long>(new long[]{(long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)18L, (long)20L, (long)22L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_101","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/om de string in wäörd te splitsen en 'n lies van wäörd te retourneere.    \/\/Geer zult 'n aafsjtrieje wäörd kriege die gesjeie zeen door kommas of spasies.    \/\/ >>> WordsString((\"Hi, my name is John\"))\n    \/\/ (new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\", (string)\"is\", (string)\"John\"}))\n    \/\/ >>> WordsString((\"One, two, three, four, five, six\"))\n    \/\/ (new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))\n    public static List<string> WordsString(string s) {\n","canonical_solution":"public static List<string> WordsString(string s) {\n    char[] separators = new char[] { ' ', ',' };\n    var words = s.Split(separators, StringSplitOptions.RemoveEmptyEntries);\n    return new List<string>(words);\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsString((\"Hi, my name is John\")).Equals((new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\", (string)\"is\", (string)\"John\"}))));\n    Debug.Assert(WordsString((\"One, two, three, four, five, six\")).Equals((new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))));\n    Debug.Assert(WordsString((\"Hi, my name\")).Equals((new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\"}))));\n    Debug.Assert(WordsString((\"One,, two, three, four, five, six,\")).Equals((new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))));\n    Debug.Assert(WordsString((\"\")).Equals((new List<string>())));\n    Debug.Assert(WordsString((\"ahmed     , gamal\")).Equals((new List<string>(new string[]{(string)\"ahmed\", (string)\"gamal\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_102","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Der is gjin tal, dan moat de funksje -1 weromkearre.    \/\/'t groetste even geheel getal dat in 't bereik [x, y] is.    \/\/Dees functie nimt twie positieve getalle x en y en wurt de     \/\/ >>> ChooseNum((12L), (15L))\n    \/\/ (14L)\n    \/\/ >>> ChooseNum((13L), (12L))\n    \/\/ (-1L)\n    public static long ChooseNum(long x, long y) {\n","canonical_solution":"if (x > y) {\n            return -1;\n        }\n        \n        \/\/ Ensure x is the bigger one for simplicity\n        if (x > y) {\n            long temp = x;\n            x = y;\n            y = temp;\n        }\n        \n        \/\/ Start searching from y down to x\n        for (long i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChooseNum((12L), (15L)) == (14L));\n    Debug.Assert(ChooseNum((13L), (12L)) == (-1L));\n    Debug.Assert(ChooseNum((33L), (12354L)) == (12354L));\n    Debug.Assert(ChooseNum((5234L), (5233L)) == (-1L));\n    Debug.Assert(ChooseNum((6L), (29L)) == (28L));\n    Debug.Assert(ChooseNum((27L), (10L)) == (-1L));\n    Debug.Assert(ChooseNum((7L), (7L)) == (-1L));\n    Debug.Assert(ChooseNum((546L), (546L)) == (546L));\n    }\n\n}\n"},{"task_id":"HumanEval_104","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Opmerking: De geretourneerde lijst weurt in stijgende volgorde gesorteerd.    \/\/Elementen die gein paar cijfers höbbe.    \/\/Gegaeve 'n lies vaan positief gans getalle x. Geer wurt 'n gesorteerde lies vaan alle     \/\/ >>> UniqueDigits((new List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))\n    \/\/ >>> UniqueDigits((new List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L})))\n    \/\/ (new List<long>())\n    public static List<long> UniqueDigits(List<long> x) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<long> UniqueDigits(List<long> x) {\n        return x.Where(n => !n.ToString().Any(c => \"02468\".Contains(c)))\n                .OrderBy(n => n)\n                .ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).Equals((new List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L, (long)2033L, (long)111L, (long)151L}))).Equals((new List<long>(new long[]{(long)111L, (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L, (long)103L, (long)31L}))).Equals((new List<long>(new long[]{(long)31L, (long)135L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_105","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/\"Ein\", \"Twee\", \"Drie\", \"Vier\", \"Vijf\", \"Zes\", \"Zeve\", \"Aacht\", \"Negie\".    \/\/verangere de resulterende lies en vervange vervolgens eder cijfer door de corresponderende naom oet     \/\/Gegaeve 'n lies van gans getalle, sorteer de gans getalle die tösse 1 en 9 inclusief ligke,     \/\/ >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    \/\/ (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    \/\/ If the list is empty, return an empty list:\n    \/\/ >>> ByLength((new List<long>()))\n    \/\/ (new List<string>())\n    \/\/ If the list has any strange number ignore it:\n    \/\/ >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    \/\/ (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<string> ByLength(List<long> arr) {\n        \/\/ Define a dictionary to map numbers to their names.\n        var digitToName = new Dictionary<long, string> {\n            {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n            {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n        };\n\n        \/\/ Filter the numbers that are between 1 and 9.\n        var filtered = arr.Where(x => digitToName.ContainsKey(x)).ToList();\n\n        \/\/ Sort the filtered numbers.\n        filtered.Sort();\n\n        \/\/ Reverse the list.\n        filtered.Reverse();\n\n        \/\/ Map the numbers to their names using the dictionary.\n        return filtered.Select(x => digitToName[x]).ToList();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_106","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/De factoriële van i is de vermenigvuldiging van de getalle van 1 tot i (1 * 2 * ... * i).    \/\/i begint van 1.    \/\/of de som vaan getalle vaan 1 tot i.    \/\/en zörg veur 'n liest vaan groet n, zoedank tot de waerde vaan 't element bij index i de factoriële vaan i is es i gepaard is     \/\/Implementeer de functie f die n as parameter inneump,     \/\/ >>> F((5L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L}))\n    public static List<long> F(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> F(long n) {\n        List<long> result = new List<long>();\n\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(Factorial(i));\n            } else {\n                result.Add(SumUpTo(i));\n            }\n        }\n        \n        return result;\n    }\n\n    private static long Factorial(long number) {\n        if (number == 0) return 1;\n        long factorial = 1;\n        for (long i = 1; i <= number; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private static long SumUpTo(long number) {\n        return (number * (number + 1)) \/ 2;\n    }\n\n    static void Main(string[] args) {\n        List<long> result = F(5);\n        foreach (long val in result) {\n            Console.WriteLine(val);\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((5L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L}))));\n    Debug.Assert(F((7L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L, (long)720L, (long)28L}))));\n    Debug.Assert(F((1L)).Equals((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(F((3L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)6L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_107","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld 1:     \/\/Integerpalindrome die binne de range ((1, n), inclusief.     \/\/Gegaeve 'n positief gans getal n, geef 'n tupel terug die 't aontal paar en oneven heet     \/\/ >>> EvenOddPalindrome((3L))\n    \/\/ (Tuple.Create(1L, 2L))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    \/\/ Example 2:\n    \/\/ >>> EvenOddPalindrome((12L))\n    \/\/ (Tuple.Create(4L, 6L))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    \/\/ Note:\n    \/\/ 1. 1 <= n <= 10^3\n    \/\/ 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n","canonical_solution":"public static Tuple<long, long> EvenOddPalindrome(long n) {\n    long evenCount = 0;\n    long oddCount = 0;\n\n    for (long i = 1; i <= n; i++) {\n        if (IsPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return Tuple.Create(evenCount, oddCount);\n}\n\nprivate static bool IsPalindrome(long number) {\n    long original = number;\n    long reversed = 0;\n\n    while (number > 0) {\n        long digit = number % 10;\n        reversed = reversed * 10 + digit;\n        number \/= 10;\n    }\n\n    return original == reversed;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddPalindrome((123L)).Equals((Tuple.Create(8L, 13L))));\n    Debug.Assert(EvenOddPalindrome((12L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((3L)).Equals((Tuple.Create(1L, 2L))));\n    Debug.Assert(EvenOddPalindrome((63L)).Equals((Tuple.Create(6L, 8L))));\n    Debug.Assert(EvenOddPalindrome((25L)).Equals((Tuple.Create(5L, 6L))));\n    Debug.Assert(EvenOddPalindrome((19L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((9L)).Equals((Tuple.Create(4L, 5L))));\n    Debug.Assert(EvenOddPalindrome((1L)).Equals((Tuple.Create(0L, 1L))));\n    }\n\n}\n"},{"task_id":"HumanEval_108","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Bijv. -123 heet getalle -1, 2 en 3.    \/\/Es 'n getal negatief is, dan is 't ierste getal mèt 'n handtekening negatief:     \/\/'t aontal elemente boe-in de som vaan cijfers > 0 is.     \/\/Schrief 'n functie count_nums die 'n lies van gans getalle aannimmt en retourneert     \/\/ >>> CountNums((new List<long>()))\n    \/\/ (0L)\n    \/\/ >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L, (long)-11L})))\n    \/\/ (1L)\n    \/\/ >>> CountNums((new List<long>(new long[]{(long)1L, (long)1L, (long)2L})))\n    \/\/ (3L)\n    public static long CountNums(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long CountNums(List<long> arr) {\n        long count = 0;\n\n        foreach (long number in arr) {\n            long sumOfDigits = 0;\n            long num = number;\n            \n            while (num != 0) {\n                long digit = num % 10;\n                sumOfDigits += digit;\n                num \/= 10;\n            }\n\n            if (sumOfDigits > 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    static void Main(string[] args) {\n        \/\/ Test cases\n        Console.WriteLine(CountNums(new List<long>())); \/\/ (0L)\n        Console.WriteLine(CountNums(new List<long> { -1L, 11L, -11L })); \/\/ (1L)\n        Console.WriteLine(CountNums(new List<long> { 1L, 1L, 2L })); \/\/ (3L)\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_109","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Opmerking: De gegaeve lies is gegarandeerd unieke elemente te höbbe.    \/\/Es de gegegeve lies leeg is, goon we dan trök op true.     \/\/dan goon we weer truuk of goon we weer truuk.    \/\/Es 't meugelik is de gesorteerde lies te kriege door de bovenaon genoemde bewerking te doon     \/\/de startpositie in de lies, d.w.z. 0e index.     \/\/'t lètste element van de lies zal verplaats weure nao     \/\/Ein rechtersjuifbewerking beteikent 't versjuif van alle elemente van de lies mèt ein.    \/\/Geer kint 't aontal kier op de rechsjwiede.    \/\/de volgende operatie op de gegeven lijst:     \/\/'t is meugelik 'n liest te kriege die in neet-afnamelike volgorde is gesorteerd door     \/\/De nummers in de lies weure willekeurig geordend.    \/\/Veer höbbe 'n liest 'arr' vaan N gans getalle arr[1], arr[2], ..., arr[N].    \/\/ >>> MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    \/\/ (true)\n    \/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n    \/\/ be achieved for the given list.\n    \/\/ >>> MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    \/\/ (false)\n    \/\/ Explanation:It is not possible to get non-decreasing order for the given\n    \/\/ list by performing any number of right shift operations.\n    public static bool MoveOneBall(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) return true;\n\n        int n = arr.Count;\n        int descentCount = 0;\n        int indexOfDescent = -1;\n\n        \/\/ Find number of descents in the array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > arr[(i + 1) % n]) {\n                descentCount++;\n                indexOfDescent = (i + 1) % n;\n            }\n            if (descentCount > 1) {\n                return false;\n            }\n        }\n\n        \/\/ No descents means the array is already sorted\n        if (descentCount == 0) {\n            return true;\n        }\n\n        \/\/ Check if the single descent allows a circular sorted order\n        for (int i = 0; i < n; i++) {\n            if (arr[(indexOfDescent + i) % n] > arr[(indexOfDescent + i + 1) % n]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>())) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_110","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Anders, geef \"NEEN\" terug.    \/\/Alle elemente van lst1 te zien, geef \"YES\" terug.    \/\/Es 't meugelek is um elemente te ruile tösse de lst1 en lst2 um te make     \/\/D'r is gein limiet op 't aontal verruilde elemente tösse lst1 en lst2.    \/\/'n Lies van allein paar getalle.    \/\/en bepaalt of 't meugelek is um 'n oetwisseling van elementen te verrichte     \/\/In dit probleem, wille we 'n functie implementere die twieë lyste van getalle neump,     \/\/ >>> Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (\"YES\")\n    \/\/ >>> Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)4L})))\n    \/\/ (\"NO\")\n    \/\/ It is assumed that the input lists will be non-empty.\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static string Exchange(List<long> lst1, List<long> lst2)\n    {\n        int countOfOddsInLst1 = lst1.Count(x => x % 2 != 0);\n        int countOfEvensInLst2 = lst2.Count(x => x % 2 == 0);\n\n        return countOfOddsInLst1 <= countOfEvensInLst2 ? \"YES\" : \"NO\";\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)4L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)5L, (long)7L, (long)3L})), (new List<long>(new long[]{(long)2L, (long)6L, (long)4L}))).Equals((\"YES\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)5L, (long)7L, (long)3L})), (new List<long>(new long[]{(long)2L, (long)6L, (long)3L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)3L, (long)2L, (long)6L, (long)1L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)5L, (long)1L, (long)1L, (long)1L}))).Equals((\"NO\")));\n    Debug.Assert(Exchange((new List<long>(new long[]{(long)100L, (long)200L})), (new List<long>(new long[]{(long)200L, (long)200L}))).Equals((\"YES\")));\n    }\n\n}\n"},{"task_id":"HumanEval_111","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Es meerdere letters dezelfde optreije höbbe, wèlle ze allemaol weergeve.    \/\/De letter die de meiste keer is herhaold en de corresponderende aontal bevat.    \/\/Gegaeve 'n string die 'n ruumde gesjeide klein lètters weergeeft, ruut 'n woordenboek     \/\/ >>> Histogram((\"a b c\"))\n    \/\/ (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}})\n    \/\/ >>> Histogram((\"a b b a\"))\n    \/\/ (new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})\n    \/\/ >>> Histogram((\"a b c a b\"))\n    \/\/ (new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})\n    \/\/ >>> Histogram((\"b b b b a\"))\n    \/\/ (new Dictionary<string,long>(){{\"b\", 4L}})\n    \/\/ >>> Histogram((\"\"))\n    \/\/ (new Dictionary<string,long>())\n    public static Dictionary<string,long> Histogram(string test) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static Dictionary<string, long> Histogram(string test) {\n        if (string.IsNullOrWhiteSpace(test)) {\n            return new Dictionary<string, long>();\n        }\n\n        var words = test.Split(' ');\n        var letterCounts = new Dictionary<string, long>();\n\n        \/\/ Count the occurrences of each letter\n        foreach (var word in words) {\n            if (letterCounts.ContainsKey(word)) {\n                letterCounts[word]++;\n            } else {\n                letterCounts[word] = 1;\n            }\n        }\n\n        \/\/ Determine the maximum count\n        long maxCount = letterCounts.Values.Max();\n\n        \/\/ Create a dictionary for letters with the maximum count\n        var result = letterCounts.Where(pair => pair.Value == maxCount)\n                                 .ToDictionary(pair => pair.Key, pair => pair.Value);\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"},{"task_id":"HumanEval_112","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld     \/\/Geer moot 'n tupel mèt de resultaatstring en true\/false veur de controle retourneere.    \/\/'n Striek heet 'n palindroom es 't achterwaeg zoe'nzelfde leest es veurwaeg.    \/\/en controleer dan of de resulterende string palindroom is.    \/\/We kriege twie stringe s en c, we motte alle karakters in s die geliek zien aan elk karakter in c, verwijderen.    \/\/Taak     \/\/ >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    \/\/ (Tuple.Create(\"bcd\", false))\n    \/\/ >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    \/\/ (Tuple.Create(\"acdef\", false))\n    \/\/ >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    \/\/ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n","canonical_solution":"using System;\nusing System.Linq;\n\nclass Problem {\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n        \/\/ Remove characters from 's' that are in 'c'\n        string resultString = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n        \n        \/\/ Check if the result string is a palindrome\n        bool isPalindrome = resultString.SequenceEqual(resultString.Reverse());\n\n        \/\/ Return the result string and palindrome check as a tuple\n        return Tuple.Create(resultString, isPalindrome);\n    }\n\n    \/\/ Example usage\n    static void Main(string[] args) {\n        var example1 = ReverseDelete(\"abcde\", \"ae\");\n        Console.WriteLine($\"(\\\"bcd\\\", false) == ({example1.Item1}, {example1.Item2})\");\n\n        var example2 = ReverseDelete(\"abcdef\", \"b\");\n        Console.WriteLine($\"(\\\"acdef\\\", false) == ({example2.Item1}, {example2.Item2})\");\n\n        var example3 = ReverseDelete(\"abcdedcba\", \"ab\");\n        Console.WriteLine($\"(\\\"cdedc\\\", true) == ({example3.Item1}, {example3.Item2})\");\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"},{"task_id":"HumanEval_113","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Van oneven cijfers in de i'de string van de input.    \/\/string i van de input. \" wo alle i's door 't getal     \/\/Ieder element i van de output zouw 't aontal oneven elemente in de     \/\/Gegaeve 'n lies van stringe, boebij eder string allein oet cijfers besteit, wurt 'n lies geretourneerd.    \/\/ >>> OddCount((new List<string>(new string[]{(string)\"1234567\"})))\n    \/\/ (new List<string>(new string[]{(string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n    \/\/ >>> OddCount((new List<string>(new string[]{(string)\"3\", (string)\"11111111\"})))\n    \/\/ (new List<string>(new string[]{(string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\n    public static List<string> OddCount(List<string> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<string> OddCount(List<string> lst)\n    {\n        List<string> result = new List<string>();\n        foreach (var str in lst)\n        {\n            int oddCount = 0;\n            foreach (var c in str)\n            {\n                if ((c - '0') % 2 != 0) \/\/ Check if the digit is odd\n                {\n                    oddCount++;\n                }\n            }\n\n            string output = $\"the number of odd elements {oddCount}n the str{oddCount}ng {oddCount} of the {oddCount}nput.\";\n            result.Add(output);\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"1234567\"}))).Equals((new List<string>(new string[]{(string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))));\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"3\", (string)\"11111111\"}))).Equals((new List<string>(new string[]{(string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))));\n    Debug.Assert(OddCount((new List<string>(new string[]{(string)\"271\", (string)\"137\", (string)\"314\"}))).Equals((new List<string>(new string[]{(string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_114","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld     \/\/van nums.     \/\/Veur 'n liest van gans getalle, vind de minimale som vaan alle neet-lege sublieste.    \/\/ >>> Minsubarraysum((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\n    \/\/ (1L)\n    \/\/ >>> Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})))\n    \/\/ (-6L)\n    public static long Minsubarraysum(List<long> nums) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long Minsubarraysum(List<long> nums) {\n        long minSum = nums[0], currentSum = nums[0];\n        \n        for (int i = 1; i < nums.Count; i++) {\n            currentSum = Math.Min(nums[i], currentSum + nums[i]);\n            minSum = Math.Min(minSum, currentSum);\n        }\n        \n        return minSum;\n    }\n\n    \/\/ Example usage\n    public static void Main() {\n        Console.WriteLine(Minsubarraysum(new List<long> { 2L, 3L, 4L, 1L, 2L, 4L })); \/\/ Output: 1L\n        Console.WriteLine(Minsubarraysum(new List<long> { -1L, -2L, -3L }));         \/\/ Output: -6L\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L}))) == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L}))) == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L, (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L}))) == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L, (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"},{"task_id":"HumanEval_115","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld 1:     \/\/Veur de oetgaaf van 't aantal kiere die de emmers verlaege.    \/\/De buim is veur jou de putten leeg te goan.    \/\/en alle emmers höbbe dezelfde capaciteit.    \/\/Iedere put haet 'n corresponderende emmer die me kan gebruuke um water oet te haole.    \/\/en eder 1 in 'n rij representeert eine einheid water.     \/\/Elke rij is 'n put.    \/\/ >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L))\n    \/\/ (6L)\n    \/\/ Example 2:\n    \/\/ >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L))\n    \/\/ (5L)\n    \/\/ Example 3:\n    \/\/ >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\n    \/\/ (0L)\n    \/\/ Constraints:\n    \/\/ * all wells have the same length\n    \/\/ * 1 <= grid.length <= 10^2\n    \/\/ * 1 <= grid[:,1].length <= 10^2\n    \/\/ * grid[i][j] -> 0 | 1\n    \/\/ * 1 <= capacity <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity) {\n","canonical_solution":"public static long MaxFill(List<List<long>> grid, long capacity) {\n    long operations = 0;\n\n    foreach (var row in grid) {\n        long waterUnits = row.Sum();\n        operations += waterUnits \/ capacity;\n        if (waterUnits % capacity != 0) {\n            operations++;\n        }\n    }\n\n    return operations;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"},{"task_id":"HumanEval_116","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/De oetveuring moet zoe weure:     \/\/Veur 'n geliek aontal eineges, sorteer op basis van decimaal waerde.    \/\/Aantal ein in hun binaire weergave in opkomende volgorde.    \/\/In deze kata, höbs se 'n lies van neet-negatieve gans getalle te sortere volgens     \/\/ >>> SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    \/\/ (new List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n    \/\/ >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<long> SortArray(List<long> arr) {\n        return arr.OrderBy(num => CountOnesInBinary(num))\n                  .ThenBy(num => num)\n                  .ToList();\n    }\n\n    private static int CountOnesInBinary(long num) {\n        return Convert.ToString(num, 2).Count(c => c == '1');\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_117","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Opmerking: geer kint aanneme dat de inputstring allein lètters en spasies bevat.    \/\/Es de string s leeg is, dan moot de functie 'n lege lies retourne.    \/\/n medeklinkers, in volgorde dat die wäörd in de string s versjiene.     \/\/'n functie die 'n lies van alle wäörd oet string s die precies  bevatte, retourneert.    \/\/Gegaeve 'n string s en 'n netuurlek getal n, höb geer de taak om     \/\/ >>> SelectWords((\"Mary had a little lamb\"), (4L))\n    \/\/ (new List<string>(new string[]{(string)\"little\"}))\n    \/\/ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    \/\/ (new List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))\n    \/\/ >>> SelectWords((\"simple white space\"), (2L))\n    \/\/ (new List<string>())\n    \/\/ >>> SelectWords((\"Hello world\"), (4L))\n    \/\/ (new List<string>(new string[]{(string)\"world\"}))\n    \/\/ >>> SelectWords((\"Uncle sam\"), (3L))\n    \/\/ (new List<string>(new string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string s, long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<string> SelectWords(string s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s)) \n            return result;\n\n        string[] words = s.Split(' ');\n        string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\n        foreach (string word in words) {\n            int consonantCount = 0;\n            foreach (char c in word) {\n                if (consonants.Contains(c)) {\n                    consonantCount++;\n                }\n            }\n\n            if (consonantCount == n) {\n                result.Add(word);\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_118","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Geer kint aanneme dat de gegeve string allein Ingelse lètter bevat.    \/\/vindj 'n klinker die aan de bovenaon genoemde voorwaarde voldoet.    \/\/Vocale aan 't begin en 't einde weure neet geteld.    \/\/twieë medeklinkers vanne rechterkantj van 't woord (gevoelig veur de hoofsjtèl).    \/\/'t Is 'n woord, en 't is de taak um de klinker te vinde die tösse de twee zit.    \/\/ >>> GetClosestVowel((\"yogurt\"))\n    \/\/ (\"u\")\n    \/\/ >>> GetClosestVowel((\"FULL\"))\n    \/\/ (\"U\")\n    \/\/ >>> GetClosestVowel((\"quick\"))\n    \/\/ (\"\")\n    \/\/ >>> GetClosestVowel((\"ab\"))\n    \/\/ (\"\")\n    public static string GetClosestVowel(string word) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static string GetClosestVowel(string word) {\n        if (string.IsNullOrWhiteSpace(word) || word.Length < 3) {\n            return \"\";\n        }\n        \n        HashSet<char> vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        \n        for (int i = word.Length - 2; i > 0; i--) {\n            if (vowels.Contains(word[i]) && \n                !vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1])) {\n                return word[i].ToString();\n            }\n        }\n        return \"\";\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(GetClosestVowel(\"yogurt\")); \/\/ Output: \"u\"\n        Console.WriteLine(GetClosestVowel(\"FULL\"));   \/\/ Output: \"U\"\n        Console.WriteLine(GetClosestVowel(\"quick\"));  \/\/ Output: \"\"\n        Console.WriteLine(GetClosestVowel(\"ab\"));     \/\/ Output: \"\"\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\n}\n"},{"task_id":"HumanEval_119","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Retourneer 'Ja' es d'r 'n manier is um 'n gooj string te make, en retourneer 'Nein' es d'r 'n ander is.    \/\/\" (()) \" is neet.    \/\/De stringe '(((() ' zien good, de stringe     \/\/'n String S weurt es good gezeen es alle parentheses in S     \/\/Einige orde, dat de resulterende string good zal zien.    \/\/Dees tied is 't veur dich de taak te kieke of 't meugelik is de twie stringe te verketene.    \/\/allein parentheses \" ((\") of close parentheses \") \".    \/\/Geer kint 'n lies mèt twie stringe, allebei mèt open.    \/\/ >>> MatchParens((new List<string>(new string[]{(string)\"()(\", (string)\")\"})))\n    \/\/ (\"Yes\")\n    \/\/ >>> MatchParens((new List<string>(new string[]{(string)\")\", (string)\")\"})))\n    \/\/ (\"No\")\n    public static string MatchParens(List<string> lst) {\n","canonical_solution":"public static string MatchParens(List<string> lst) {\n        if (lst.Count != 2) return \"No\";\n\n        string str1 = lst[0];\n        string str2 = lst[1];\n\n        \/\/ Check both possible concatenations\n        if (IsValidParentheses(str1 + str2) || IsValidParentheses(str2 + str1))\n            return \"Yes\";\n        \n        return \"No\";\n    }\n\n    private static bool IsValidParentheses(string s) {\n        int balance = 0;\n        foreach (char c in s) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false; \/\/ More closing parens than opening\n            }\n        }\n        return balance == 0;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"()(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\")\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(())\", (string)\"())())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")())\", (string)\"(()()(\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(())))\", (string)\"(()())((\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"()\", (string)\"())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(\", (string)\"()))()\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"((((\", (string)\"((())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(()\", (string)\"(()(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(\", (string)\")(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\"(\"}))).Equals((\"Yes\")));\n    }\n\n}\n"},{"task_id":"HumanEval_120","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld 1:     \/\/van lengte k mèt de maximaal k getalle in arr.     \/\/Gegaeve 'n liest arr van gans getalle en 'n positief gans getal k, retourneer 'n gesorteerde liest     \/\/ >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n    \/\/ (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n    \/\/ Example 2:\n    \/\/ >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n    \/\/ (new List<long>(new long[]{(long)4L, (long)4L}))\n    \/\/ Example 3:\n    \/\/ >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    \/\/ (new List<long>(new long[]{(long)2L}))\n    \/\/ Note:\n    \/\/ 1. The length of the list will be in the range of [1, 1000].\n    \/\/ 2. The elements in the list will be in the range of [-1000, 1000].\n    \/\/ 3. 0 <= k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k) {\n","canonical_solution":"public static List<long> Maximum(List<long> arr, long k) {\n    return arr.OrderByDescending(n => n).Take((int)k).OrderBy(n => n).ToList();\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"},{"task_id":"HumanEval_121","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde     \/\/Gegaeve 'n neet-leeg lies van gans getalle, geef de som van alle paar eleminte die in paarse posities ligke.    \/\/ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n    \/\/ (12L)\n    \/\/ >>> Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L})))\n    \/\/ (9L)\n    \/\/ >>> Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    \/\/ (0L)\n    public static long Solution(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.Count; i += 2) { \/\/ Iterate over even indices\n            if (lst[i] % 2 != 0) { \/\/ Check if the element is odd\n                sum += lst[i];\n            }\n        }\n        return sum;\n    }\n    \n    static void Main() {\n        Console.WriteLine(Solution(new List<long>{5L, 8L, 7L, 1L})); \/\/ Output: 12\n        Console.WriteLine(Solution(new List<long>{3L, 3L, 3L, 3L, 3L})); \/\/ Output: 9\n        Console.WriteLine(Solution(new List<long>{30L, 13L, 24L, 321L})); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n    }\n\n}\n"},{"task_id":"HumanEval_122","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/de som vaan de elementen mèt hoegstens twie cijfers vaan de ierste k elementen vaan arr.     \/\/Gegaeve 'n neet-lege lies van gans getalle arr en 'n gans getal k, retourneer     \/\/ >>> AddElements((new List<long>(new long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L))\n    \/\/ (24L)\n    \/\/ Constraints:\n    \/\/ 1. 1 <= len(arr) <= 100\n    \/\/ 2. 1 <= k <= len(arr)\n    public static long AddElements(List<long> arr, long k) {\n","canonical_solution":"public static long AddElements(List<long> arr, long k) {\n        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] >= -99 && arr[i] <= 99) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)41L, (long)57L, (long)76L, (long)87L, (long)88L, (long)99L})), (3L)) == (-4L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)111L, (long)121L, (long)3L, (long)4000L, (long)5L, (long)6L})), (2L)) == (0L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)11L, (long)21L, (long)3L, (long)90L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L)) == (125L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L)) == (24L));\n    Debug.Assert(AddElements((new List<long>(new long[]{(long)1L})), (1L)) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_123","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/get_odd_collatz(5) geeft [1, 5] # De collatz-sequentie veur 5 is [5, 16, 8, 4, 2, 1], dus de oneven getalle zien allein 1, en 5.     \/\/Veurbeeld:     \/\/2. geretourneerde lijst gesorteerd in stijgende volgorde.    \/\/1. Collatz(1) is [1].     \/\/Noot:     \/\/De veronderstelling is dat, ongeacht welke waerde van n, de volgorde altied 1 zal bereike.    \/\/Es de veurige term ènkele is, is de volgende term 3 maal de veurige term.    \/\/veurige term: es de veurige term gepaard is, is de volgende term de helf vaan     \/\/Wie volgt: begint mèt e positief gans getal n. Daonao weurt eder term oet de  verkrege.    \/\/De Collatz-vermeining is 'n vermeining in de wiskunde die 'n aafgebreide volgorde betref.    \/\/Gegaeve 'n positief gans getal n, retourneer 'n gesorteerde lies die de oneven getalle in collatz-sequentie bevat.    \/\/ >>> GetOddCollatz((5L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)5L}))\n    public static List<long> GetOddCollatz(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> GetOddCollatz(long n)\n    {\n        HashSet<long> oddNumbers = new HashSet<long>();\n\n        while (n != 1)\n        {\n            if (n % 2 != 0)\n            {\n                oddNumbers.Add(n);\n            }\n\n            if (n % 2 == 0)\n            {\n                n \/= 2;\n            }\n            else\n            {\n                n = 3 * n + 1;\n            }\n        }\n\n        oddNumbers.Add(1); \/\/ Add 1 to the set as per problem statement\n\n        List<long> result = new List<long>(oddNumbers);\n        result.Sort();\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetOddCollatz((14L)).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(GetOddCollatz((5L)).Equals((new List<long>(new long[]{(long)1L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((12L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((1L)).Equals((new List<long>(new long[]{(long)1L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_124","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/4. De datum zouw in 't formaot: mm-dd-jjjj     \/\/3. De maondj mag neet minder es 1 of hoeger es 12 zeen.    \/\/2. 't Aantal daag is neet minder es 1 of hoeger es 31 daag veur de maond 1,3,5,7,8,10,12. 't Aantal daag is neet minder es 1 of hoeger es 30 daag veur de maond 4,6,9,11. 't Aantal daag is neet minder es 1 of hoeger es 29 daag veur de maond 2.    \/\/1. De datumstreng is neet leeg.    \/\/De datum is geldig as aan alle volgende regels is voldaan:     \/\/return true if date is valid otherwise false.     \/\/Geer moot 'n functie sjrieve die 'n gegegeerde datumstring valideert en     \/\/ >>> ValidDate((\"03-11-2000\"))\n    \/\/ (true)\n    \/\/ >>> ValidDate((\"15-01-2012\"))\n    \/\/ (false)\n    \/\/ >>> ValidDate((\"04-0-2040\"))\n    \/\/ (false)\n    \/\/ >>> ValidDate((\"06-04-2020\"))\n    \/\/ (true)\n    \/\/ >>> ValidDate((\"06\/04\/2020\"))\n    \/\/ (false)\n    public static bool ValidDate(string date) {\n","canonical_solution":"public static bool ValidDate(string date)\n{\n    if (string.IsNullOrEmpty(date) || date.Length != 10) return false;\n\n    string[] dateParts = date.Split('-');\n    if (dateParts.Length != 3) return false;\n\n    if (!int.TryParse(dateParts[0], out int month) || !int.TryParse(dateParts[1], out int day) || !int.TryParse(dateParts[2], out int year))\n    {\n        return false;\n    }\n\n    if (month < 1 || month > 12) return false;\n\n    if (year < 1) return false;\n\n    bool isValidDay = false;\n\n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day >= 1 && day <= 31)\n    {\n        isValidDay = true;\n    }\n    else if ((month == 4 || month == 6 || month == 9 || month == 11) && day >= 1 && day <= 30)\n    {\n        isValidDay = true;\n    }\n    else if (month == 2 && day >= 1 && day <= 29)\n    {\n        isValidDay = true;\n    }\n\n    return isValidDay;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_126","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde     \/\/getal, retourneer vals. Neet negatieve getalle en allein gans getalle.    \/\/In opkomende volgorde.    \/\/Gegaeve 'n lies van nummers, retourneer ze óf ze zeen gesorteerd of neet.    \/\/ >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    \/\/ (false)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    \/\/ (false)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    \/\/ (true)\n    \/\/ >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    \/\/ (false)\n    public static bool IsSorted(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static bool IsSorted(List<long> lst) {\n        if (lst.Count == 0) return true;\n\n        \/\/ To store the occurrence of each number\n        var occurrences = new Dictionary<long, int>();\n\n        for (int i = 0; i < lst.Count - 1; i++) {\n            \/\/ Check if the current number is greater than the next number\n            if (lst[i] > lst[i + 1]) {\n                return false;\n            }\n\n            \/\/ Count the occurrences of each number\n            if (occurrences.ContainsKey(lst[i])) {\n                occurrences[lst[i]]++;\n            } else {\n                occurrences[lst[i]] = 1;\n            }\n\n            \/\/ If any number occurs more than twice\n            if (occurrences[lst[i]] > 2) {\n                return false;\n            }\n        }\n\n        \/\/ Check the last element in the list for more than two occurrences\n        if (occurrences.ContainsKey(lst[lst.Count - 1])) {\n            occurrences[lst[lst.Count - 1]]++;\n            if (occurrences[lst[lst.Count - 1]] > 2) {\n                return false;\n            }\n        } else {\n            occurrences[lst[lst.Count - 1]] = 1;\n        }\n\n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_127","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/[input\/output] samples:     \/\/Es de twie intervalle neet kruus, goon we \"NEIN\" trök.    \/\/anders, geef \"NEEN\" terug.    \/\/Es de lengde vaan de kruising 'n primaal getal is, wèlt \"YES\" weergeve.    \/\/Waat is 1 en is gein priemgetal.    \/\/Veurbeeld, de snijpunt van de intervalle (1, 3), (2, 4) is (2, 3)     \/\/Intervalle is 'n priemgetal.    \/\/Dees taak is te bepaole of de lengte van de kruising van deze twie     \/\/Veur e gegeve intervall weurt gezeen tot 't begin minder is es 't eind.    \/\/begint en eindig.    \/\/De gegegeve intervalle zeen geslote, wat beteikent tot 't intervall (begin, einde)     \/\/wo eder interval 'n paar ganse getalle is.    \/\/Je hebt twee intervalle,     \/\/ >>> Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L)))\n    \/\/ (\"NO\")\n    \/\/ >>> Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L, 4L)))\n    \/\/ (\"NO\")\n    \/\/ >>> Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L, 5L)))\n    \/\/ (\"YES\")\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n","canonical_solution":"long start1 = interval1.Item1;\n    long end1 = interval1.Item2;\n    long start2 = interval2.Item1;\n    long end2 = interval2.Item2;\n\n    long intersectStart = Math.Max(start1, start2);\n    long intersectEnd = Math.Min(end1, end2);\n\n    if (intersectStart > intersectEnd) {\n        return \"NO\";\n    }\n\n    long intersectionLength = intersectEnd - intersectStart + 1;\n\n    if (IsPrime(intersectionLength)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\nprivate static bool IsPrime(long number) {\n    if (number < 2) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    long boundary = (long)Math.Floor(Math.Sqrt(number));\n\n    for (long i = 3; i <= boundary; i += 2) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L, 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L, 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L, -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"},{"task_id":"HumanEval_128","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Noot: return null veur lege arr.     \/\/van elk nummer in de lies, weergedaon door 1, -1 of 0.     \/\/Zesj van de groote vaan gans getalle vermenigvuldigd mèt 't product vaan alle tekens     \/\/Geer kriegt 'n lies van gans getalle en geer kint 't weer aafsjrieve.    \/\/ >>> ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    \/\/ 9L\n    \/\/ >>> ProdSigns((new List<long>(new long[]{(long)0L, (long)1L})))\n    \/\/ 0L\n    \/\/ >>> ProdSigns((new List<long>()))\n    \/\/ null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n","canonical_solution":"public static Nullable<long> ProdSigns(List<long> arr) {\n        if (arr == null || arr.Count == 0) return null;\n\n        long sumOfMagnitudes = 0;\n        long productOfSigns = 1;\n\n        foreach (var num in arr) {\n            sumOfMagnitudes += Math.Abs(num);\n\n            if (num > 0) {\n                productOfSigns *= 1;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            } else {\n                productOfSigns = 0;\n                break;\n            }\n        }\n\n        return sumOfMagnitudes * productOfSigns;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"},{"task_id":"HumanEval_129","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Retourne 'n geordende list vaan de waerde op de cellen die 't minimaol pad doorgaon.    \/\/De antwoorde zien gegarandeerd uniek.     \/\/lst_A[j] = lst_B[j].     \/\/zoe dat lst_A[i] < lst_B[i] en veur e j (1 <= j < i) höbbe veer     \/\/dan lst_B, in aandere wäörd, besteit 'n integer index i (1 <= i <= k)     \/\/door (laot ze lst_A en lst_B neume), is lst_A lexicografisch minder     \/\/Naotot de geordende lies van de waarden op de cellen die A en B gaon     \/\/'n Pad A (van lengte k) weurt minder es 'n pad B (van lengte k) gezeen es     \/\/Ge kunt neet weg van de net.    \/\/neet noodzakelijkerwijs versjèlle).    \/\/Bloadn woarin dat er sprake is van een path van lengte k.    \/\/cel.     \/\/In andere wäörd, kinne v'r nao cellule goon die 'n rand mèt uch deile.    \/\/Van eeder cel, en in elke stap kun je verplaatsen naor eeder naburige cel,     \/\/Veer mótte 't minimaol paad vaan lengte k in 't raster vinde.    \/\/inclusive versjient precies einmaol op de cellen van 't raster.     \/\/eder cel vaan 't raster bevat 'n waerde. eder integer in 't bereik [1, N * N]     \/\/Gegaeve 'n raster mèt N reije en N columnes (N >= 2) en 'n positief gans getal k,     \/\/ >>> Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})})), (3L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))\n    \/\/ >>> Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)9L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)2L})})), (1L))\n    \/\/ (new List<long>(new long[]{(long)1L}))\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> Minpath(List<List<long>> grid, long k) {\n        int n = grid.Count;\n        List<long> result = new List<long>();\n        long[,] dp = new long[n, n];\n        (int, int)[,] parent = new (int, int)[n, n];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i, j] = long.MaxValue;\n            }\n        }\n\n        var directions = new List<(int, int)>() { (0, 1), (1, 0), (0, -1), (-1, 0) };\n        SortedSet<(long, int, int)> pq = new SortedSet<(long, int, int)>((a, b) => a.Item1 == b.Item1 ? (a.Item2 == b.Item2 ? a.Item3.CompareTo(b.Item3) : a.Item2.CompareTo(b.Item2)) : a.Item1.CompareTo(b.Item1));\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i, j] = grid[i][j];\n                pq.Add((grid[i][j], i, j));\n            }\n        }\n\n        while (pq.Count > 0) {\n            var curr = pq.Min;\n            pq.Remove(curr);\n            long currValue = curr.Item1;\n            int x = curr.Item2;\n            int y = curr.Item3;\n\n            foreach (var dir in directions) {\n                int newX = x + dir.Item1;\n                int newY = y + dir.Item2;\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    long newCost = currValue + grid[newX][newY];\n                    if (dp[newX, newY] > newCost) {\n                        if (dp[newX, newY] != long.MaxValue) {\n                            pq.Remove((dp[newX, newY], newX, newY));\n                        }\n                        dp[newX, newY] = newCost;\n                        parent[newX, newY] = (x, y);\n                        pq.Add((dp[newX, newY], newX, newY));\n                    }\n                }\n            }\n        }\n\n        (int, int) end = (0, 0);\n        long minPathSum = long.MaxValue;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (minPathSum > dp[i, j]) {\n                    minPathSum = dp[i, j];\n                    end = (i, j);\n                }\n            }\n        }\n\n        Stack<long> pathStack = new Stack<long>();\n        (int, int) node = end;\n        for (int step = 0; step < k; step++) {\n            pathStack.Push(grid[node.Item1][node.Item2]);\n            node = parent[node.Item1, node.Item2];\n        }\n\n        while (pathStack.Count > 0) {\n            result.Add(pathStack.Pop());\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})})), (3L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)9L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)2L})})), (1L)).Equals((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L}), (List<long>)new List<long>(new long[]{(long)13L, (long)14L, (long)15L, (long)16L})})), (4L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)13L, (long)10L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L, (long)12L, (long)1L}), (List<long>)new List<long>(new long[]{(long)3L, (long)16L, (long)11L, (long)15L}), (List<long>)new List<long>(new long[]{(long)8L, (long)14L, (long)9L, (long)2L})})), (7L)).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)1L, (long)10L, (long)1L, (long)10L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)14L, (long)9L, (long)2L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)13L, (long)15L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)12L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L, (long)11L, (long)16L})})), (5L)).Equals((new List<long>(new long[]{(long)1L, (long)7L, (long)1L, (long)7L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)7L, (long)2L}), (List<long>)new List<long>(new long[]{(long)5L, (long)16L, (long)14L, (long)4L}), (List<long>)new List<long>(new long[]{(long)9L, (long)3L, (long)15L, (long)6L}), (List<long>)new List<long>(new long[]{(long)12L, (long)13L, (long)10L, (long)1L})})), (9L)).Equals((new List<long>(new long[]{(long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)12L, (long)13L, (long)10L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)3L, (long)15L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)16L, (long)14L, (long)4L}), (List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)7L, (long)2L})})), (12L)).Equals((new List<long>(new long[]{(long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L, (long)1L, (long)6L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)1L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)8L, (long)9L})})), (8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)1L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)4L})})), (8L)).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)1L, (long)5L, (long)1L, (long)5L, (long)1L, (long)5L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L})})), (10L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L, (long)1L, (long)2L}))));\n    Debug.Assert(Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L})})), (10L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L, (long)3L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_130","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Eerste n + 1 getalle vaan de Tribonacci-sequentie.    \/\/Geer kint 'n neet-negatief gans getal n, geer moot 'n a-liest van de     \/\/= 2 + 3 + 3 = 8     \/\/tri(3) = tri(2) + tri(1) + tri(4)     \/\/tri(4) = 3     \/\/tri(2) = 1 + (2 \/ 2) = 2     \/\/Veurbeeld:     \/\/tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), es n oneven is.     \/\/tri (n) = 1 + n \/ 2, es n paar is.    \/\/tri(1) = 3     \/\/De Tribonacci-sequentie weurt gedefinieerd door de herhaling:     \/\/Wat de lui echter neet wiste is de Tribonacci-sequentie.    \/\/Iedereen kent de Fibonacci-sequentie, die is door wiskundige in 't begin vaan de 20e eeuw diep bestudeerd.    \/\/ >>> Tri((3L))\n    \/\/ (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long> Tri(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> Tri(long n)\n    {\n        List<long> tribonacci = new List<long>(new long[n + 1]);\n\n        for (long i = 0; i <= n; i++)\n        {\n            if (i == 0)\n                tribonacci[(int)i] = 1;\n            else if (i == 1)\n                tribonacci[(int)i] = 3;\n            else if (i % 2 == 0)\n                tribonacci[(int)i] = 1 + i \/ 2;\n            else\n                tribonacci[(int)i] = tribonacci[(int)(i - 1)] + tribonacci[(int)(i - 2)] + tribonacci[(int)(i + 1)];\n        }\n        \n        return tribonacci;\n    }\n    \n    static void Main(string[] args)\n    {\n        \/\/ Example usage:\n        Console.WriteLine(string.Join(\", \", Tri(3)));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_131","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Retourne 0 as alle cijfers even zijn.    \/\/Gegaeve 'n positief gans getal n, geef 't product van de oneven cijfers terug.     \/\/ >>> Digits((1L))\n    \/\/ (1L)\n    \/\/ >>> Digits((4L))\n    \/\/ (0L)\n    \/\/ >>> Digits((235L))\n    \/\/ (15L)\n    public static long Digits(long n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long Digits(long n) {\n        long product = 1;\n        bool hasOdd = false;\n\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n \/= 10;\n        }\n\n        return hasOdd ? product : 0;\n    }\n\n    static void Main(string[] args) {\n        Console.WriteLine(Digits(1L));    \/\/ Output: 1\n        Console.WriteLine(Digits(4L));    \/\/ Output: 0\n        Console.WriteLine(Digits(235L));  \/\/ Output: 15\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_132","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Waor minstens ein bracket in de subsequentie is genesteld.    \/\/De functie moot true retoere es en allein es d'r 'n geldige subsequentie van haakjes is.    \/\/Skep 'n functie die 'n string as input haet die allein veerkantje haofde bevat.    \/\/ >>> IsNested((\"[[]]\"))\n    \/\/ (true)\n    \/\/ >>> IsNested((\"[]]]]]]][[[[[]\"))\n    \/\/ (false)\n    \/\/ >>> IsNested((\"[][]\"))\n    \/\/ (false)\n    \/\/ >>> IsNested((\"[]\"))\n    \/\/ (false)\n    \/\/ >>> IsNested((\"[[][]]\"))\n    \/\/ (true)\n    \/\/ >>> IsNested((\"[[]][[\"))\n    \/\/ (true)\n    public static bool IsNested(string str) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static bool IsNested(string str) {\n        Stack<char> stack = new Stack<char>();\n        bool hasNested = false;\n        \n        foreach (char ch in str) {\n            if (ch == '[') {\n                stack.Push(ch);\n            } else if (ch == ']') {\n                if (stack.Count > 0) {\n                    stack.Pop();\n                    hasNested = true;\n                } else {\n                    return false; \/\/ More closing brackets than opening\n                }\n            }\n\n            \/\/ Check for nesting\n            if (stack.Count > 1) {\n                hasNested = true;\n            }\n        }\n        \n        return stack.Count == 0 && hasNested;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"[[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"[]\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"[][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n    Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"[[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n    Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\")) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_133","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Roond elk element in de lies op de bovenste int ((plafond) ierste.     \/\/Geer moot de som vaan de kwadraote vaan de getalle in de liest opgaeve.    \/\/Geer kriegt 'n lies mit nummers.    \/\/ >>> Lst((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    \/\/ (14L)\n    \/\/ >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    \/\/ (98L)\n    \/\/ >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n    \/\/ (84L)\n    \/\/ >>> Lst((new List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    \/\/ (29L)\n    \/\/ >>> Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    \/\/ (6L)\n    public static long SumSquares(List<float> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static long SumSquares(List<float> lst)\n    {\n        long sum = 0;\n        foreach (float num in lst)\n        {\n            int roundedNum = (int)Math.Ceiling(num);\n            sum += (long)(roundedNum * roundedNum);\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"},{"task_id":"HumanEval_134","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Opmerking: \"woord\" is 'n groep tekens die door ruimte zien gesjeie.    \/\/'n deil vaan 'n woord, en anders vals.    \/\/van 'n gegegeve string is 'n alfabetisch teken en is neet     \/\/'n Functie die waor weergeeft es 't lètste teken     \/\/ >>> CheckIfLastCharIsALetter((\"apple pie\"))\n    \/\/ (false)\n    \/\/ >>> CheckIfLastCharIsALetter((\"apple pi e\"))\n    \/\/ (true)\n    \/\/ >>> CheckIfLastCharIsALetter((\"apple pi e \"))\n    \/\/ (false)\n    \/\/ >>> CheckIfLastCharIsALetter((\"\"))\n    \/\/ (false)\n    public static bool CheckIfLastCharIsALetter(string txt) {\n","canonical_solution":"public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrWhiteSpace(txt)) {\n            return false;\n        }\n\n        txt = txt.Trim();\n        if (txt.Length == 0) {\n            return false;\n        }\n\n        int lastIndex = txt.Length - 1;\n        char lastChar = txt[lastIndex];\n\n        if (!char.IsLetter(lastChar)) {\n            return false;\n        }\n\n        if (lastIndex == 0 || char.IsWhiteSpace(txt[lastIndex - 1])) {\n            return true;\n        }\n\n        return false;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pi e\")) == (true));\n    Debug.Assert(CheckIfLastCharIsALetter((\"eeeee\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"A\")) == (true));\n    Debug.Assert(CheckIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"eeeee e \")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pie\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_135","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/duplicate values.    \/\/no such element exists then return -1. De gegeve lies zal neet bevatte     \/\/is neet groeter of geliek aan 't element dat 't onmiddellik veurluip.    \/\/Skep 'n functie die de groetste index van 'n element teruggeve die     \/\/ >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    \/\/ (3L)\n    \/\/ >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    \/\/ (-1L)\n    public static long CanArrange(List<long> arr) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Create a function which returns the largest index of an element which\n    \/\/ is not greater than or equal to the element immediately preceding it.\n    \/\/ If no such element exists, then return -1.\n    public static long CanArrange(List<long> arr) {\n        for (int i = arr.Count - 1; i > 0; i--) {\n            if (arr[i] < arr[i - 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"},{"task_id":"HumanEval_136","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Es d'r gein negatieve of positieve gans getalle zeen, wurt ze geretourneerd es null.    \/\/van positieve gans getalle in 'n lies.    \/\/De groetste negatieve gans getalle, en \"b\" is de kleinste.    \/\/Skep 'n functie die 'n tupel (a, b) retourneert, wo 'a' is     \/\/ >>> LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    \/\/ Tuple.Create((Nullable<long>)null, 1L)\n    \/\/ >>> LargestSmallestIntegers((new List<long>()))\n    \/\/ Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    \/\/ >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n    \/\/ Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n","canonical_solution":"public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n        Nullable<long> largestNegative = null;\n        Nullable<long> smallestPositive = null;\n\n        foreach (var number in lst) {\n            if (number < 0) {\n                if (largestNegative == null || number > largestNegative) {\n                    largestNegative = number;\n                }\n            } else if (number > 0) {\n                if (smallestPositive == null || number < smallestPositive) {\n                    smallestPositive = number;\n                }\n            }\n        }\n\n        return Tuple.Create(largestNegative, smallestPositive);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L, (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L, 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L, (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L, 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L, (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L, (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n    }\n\n}\n"},{"task_id":"HumanEval_138","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld     \/\/Beoordeile of 't gegegeerde getal n kan weure gesjreve es de som vaan precies 4 positief paarse getalle     \/\/ >>> IsEqualToSumEven((4L))\n    \/\/ (false)\n    \/\/ >>> IsEqualToSumEven((6L))\n    \/\/ (false)\n    \/\/ >>> IsEqualToSumEven((8L))\n    \/\/ (true)\n    public static bool IsEqualToSumEven(long n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    \/\/ Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    public static bool IsEqualToSumEven(long n) {\n        \/\/ Check if n is at least the sum of the smallest 4 positive even numbers (2 + 2 + 2 + 2 = 8)\n        return n >= 8 && n % 2 == 0;\n    }\n    \n    static void Main() {\n        Console.WriteLine(IsEqualToSumEven(4L));  \/\/ false\n        Console.WriteLine(IsEqualToSumEven(6L));  \/\/ false\n        Console.WriteLine(IsEqualToSumEven(8L));  \/\/ true\n        Console.WriteLine(IsEqualToSumEven(10L)); \/\/ true\n        Console.WriteLine(IsEqualToSumEven(12L)); \/\/ true\n        Console.WriteLine(IsEqualToSumEven(15L)); \/\/ false\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsEqualToSumEven((4L)) == (false));\n    Debug.Assert(IsEqualToSumEven((6L)) == (false));\n    Debug.Assert(IsEqualToSumEven((8L)) == (true));\n    Debug.Assert(IsEqualToSumEven((10L)) == (true));\n    Debug.Assert(IsEqualToSumEven((11L)) == (false));\n    Debug.Assert(IsEqualToSumEven((12L)) == (true));\n    Debug.Assert(IsEqualToSumEven((13L)) == (false));\n    Debug.Assert(IsEqualToSumEven((16L)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_139","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/wo n > 0     \/\/brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!     \/\/De Braziliaanse factoriële weurt gedefinieerd es:     \/\/ >>> SpecialFactorial((4L))\n    \/\/ (288L)\n    \/\/ The function will receive an integer as input and should return the special\n    \/\/ factorial of this integer.\n    public static long SpecialFactorial(long n) {\n","canonical_solution":"using System;\nusing System.Numerics;\n\nclass Problem {\n    public static long SpecialFactorial(long n) {\n        if (n <= 0)\n            throw new ArgumentException(\"n must be greater than 0\");\n        \n        BigInteger brazilianFactorial = 1;\n        \n        for (long i = 1; i <= n; i++) {\n            brazilianFactorial *= Factorial(i);\n        }\n        \n        return (long)brazilianFactorial;\n    }\n    \n    private static BigInteger Factorial(long num) {\n        BigInteger result = 1;\n        for (long i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"},{"task_id":"HumanEval_140","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Vervang alle opeenvolgende spasies door -     \/\/en es 'n string mie es 2 opeenvolgende ruumtes haet,     \/\/Gegaeve 'n teksreeks, vervange alle spasies daobie mèt oonderstreep,     \/\/ >>> FixSpaces((\" Example\"))\n    \/\/ (\"Example\")\n    \/\/ >>> FixSpaces((\" Example 1\"))\n    \/\/ (\"Example_1\")\n    \/\/ >>> FixSpaces((\" Example 2\"))\n    \/\/ (\"_Example_2\")\n    \/\/ >>> FixSpaces((\" Example 3\"))\n    \/\/ (\"_Example-3\")\n    public static string FixSpaces(string text) {\n","canonical_solution":"public static string FixSpaces(string text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n                spaceCount++;\n            } else {\n                if (spaceCount > 2) {\n                    result.Append('-');\n                } else {\n                    for (int j = 0; j < spaceCount; j++) {\n                        result.Append('_');\n                    }\n                }\n                result.Append(text[i]);\n                spaceCount = 0;\n            }\n        }\n\n        if (spaceCount > 2) {\n            result.Append('-');\n        } else {\n            for (int j = 0; j < spaceCount; j++) {\n                result.Append('_');\n            }\n        }\n\n        return result.ToString();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"},{"task_id":"HumanEval_141","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/De substring nao de puntj mós ein van deze zeen: ['txt', 'exe', 'dll']     \/\/'t Latiense alfabet ('a'-'z' en 'A'-'Z').     \/\/De substring veur de punt mag neet leeg zeen en begint mèt 'n letter oet     \/\/- De bestandjnaam bevatj ein puntje.    \/\/- De naam van 't bestand mag neet mie es drie cijfers ('0'-'9') bevatte.     \/\/voldaan:     \/\/'n File naam is geldig as en alleen as alle volgende voorwaarden voldege:    \/\/'Ja' as de naam van 't bestand geldig is, en 'nee' anders.    \/\/Skep 'n functie die 'n string die de naom vaan 'n bestandj weergeeft, en retourneert     \/\/ >>> FileNameCheck((\"example.txt\"))\n    \/\/ (\"Yes\")\n    \/\/ >>> FileNameCheck((\"1example.dll\"))\n    \/\/ (\"No\")\n    public static string FileNameCheck(string file_name) {\n","canonical_solution":"using System;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    public static string FileNameCheck(string file_name) {\n        \/\/ Regular expression to validate the file name\n        string pattern = @\"^[a-zA-Z][^.]*\\.[^.]+$\";\n        \n        \/\/ Check if there is exactly one dot and matches the overall pattern\n        if (Regex.IsMatch(file_name, pattern)) {\n            string[] parts = file_name.Split('.');\n            \n            \/\/ Check if the file extension is one of the allowed values\n            if (new[] { \"txt\", \"exe\", \"dll\" }.Contains(parts[1])) {\n                \/\/ Count the number of digits in the file name\n                int digitCount = file_name.Count(char.IsDigit);\n                \n                \/\/ Validate the digit count\n                if (digitCount <= 3) {\n                    return \"Yes\";\n                }\n            }\n        }\n        \n        return \"No\";\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\/this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"},{"task_id":"HumanEval_142","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/De functie wurt dan de som van alle innings.    \/\/De functie is 'n veulvoudige van 3 en zal de integer-invoer in de kubus plaatsen es de index 'n veulvoudige van 4 is en neet 'n veulvoudige van 3. De functie zal neet     \/\/Dees functie zal 'n lies van gans getalle aanneme. veur alle vermeldinge in de lies zal de functie de gans getalle vermelding kwadraotere es d'r index 'n  is.    \/\/\"     \/\/ >>> lst\n    \/\/ (long)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})\n    \/\/ >>> lst\n    \/\/ (long)new List<long>()\n    \/\/ >>> lst\n    \/\/ (long)new List<long>(new long[]{(long)-1L, (long)-5L, (long)2L, (long)-1L, (long)-5L})\n    public static long SumSquares(List<long> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static long SumSquares(List<long> lst)\n    {\n        for (int i = 0; i < lst.Count; i++)\n        {\n            if (i % 3 == 0)\n            {\n                lst[i] = lst[i] * lst[i];\n            }\n            else if (i % 4 == 0)\n            {\n                lst[i] = lst[i] * lst[i] * lst[i];\n            }\n        }\n        long sum = 0;\n        foreach (long number in lst)\n        {\n            sum += number;\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (6L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)4L, (long)9L}))) == (14L));\n    Debug.Assert(SumSquares((new List<long>())) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L}))) == (9L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L}))) == (-3L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)0L}))) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-5L, (long)2L, (long)-1L, (long)-5L}))) == (-126L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-56L, (long)-99L, (long)1L, (long)0L, (long)-2L}))) == (3030L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)-1L}))) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-16L, (long)-9L, (long)-2L, (long)36L, (long)36L, (long)26L, (long)-20L, (long)25L, (long)-40L, (long)20L, (long)-4L, (long)12L, (long)-26L, (long)35L, (long)37L}))) == (-14196L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-3L, (long)17L, (long)-1L, (long)-15L, (long)13L, (long)-1L, (long)14L, (long)-14L, (long)-12L, (long)-5L, (long)14L, (long)-14L, (long)6L, (long)13L, (long)11L, (long)16L, (long)16L, (long)4L, (long)10L}))) == (-1448L));\n    }\n\n}\n"},{"task_id":"HumanEval_143","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld 1:     \/\/De volgorde vaan de wäörd in de nui string moot dezelfde zien es de oersprunkeleke.    \/\/wiens lengte e primair getalle zien,     \/\/en geer moot 'n string teruggeve die de wäörd oet de oersprunkeleke zin bevat,     \/\/'t zin bevat 'n aantal wäörd die door 'n spatie zien gesjeide,     \/\/Geer kriegt 'n string die 'n zin weergeeft,     \/\/ >>> WordsInSentence((\"This is a test\"))\n    \/\/ (\"is\")\n    \/\/ Example 2:\n    \/\/ >>> WordsInSentence((\"lets go for swimming\"))\n    \/\/ (\"go for\")\n    \/\/ Constraints:\n    \/\/ * 1 <= len(sentence) <= 100\n    \/\/ * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static string WordsInSentence(string sentence) {\n        bool IsPrime(int number) {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            for (int i = 2; i * i <= number; i++) {\n                if (number % i == 0) return false;\n            }\n            return true;\n        }\n\n        string[] words = sentence.Split(' ');\n        List<string> primeLengthWords = new List<string>();\n\n        foreach (string word in words) {\n            if (IsPrime(word.Length)) {\n                primeLengthWords.Add(word);\n            }\n        }\n\n        return string.Join(\" \", primeLengthWords);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"},{"task_id":"HumanEval_144","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Geer kint aanneme dat x en n geldige breuke zien en neet 0 as noemer höbbe.    \/\/<numerator>\/<denominator>, boebij zowel de numerator es de noemer positieve gans getalle zien.    \/\/Zoewel x es n zien 'n strijke-representatie vaan 'n breuk en höbbe de volgende formaot:    \/\/x * n. De functie wirt true es x * n 'n heel getal is en false     \/\/Jouw taak is 'n functie te implementere die de expressie vereinvoudig     \/\/ >>> Simplify((\"1\/5\"), (\"5\/1\"))\n    \/\/ (true)\n    \/\/ >>> Simplify((\"1\/6\"), (\"2\/1\"))\n    \/\/ (false)\n    \/\/ >>> Simplify((\"7\/10\"), (\"10\/2\"))\n    \/\/ (false)\n    public static bool Simplify(string x, string n) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool Simplify(string x, string n) {\n        var xParts = x.Split('\/');\n        var nParts = n.Split('\/');\n        \n        int xNumerator = int.Parse(xParts[0]);\n        int xDenominator = int.Parse(xParts[1]);\n        \n        int nNumerator = int.Parse(nParts[0]);\n        int nDenominator = int.Parse(nParts[1]);\n        \n        \/\/ Calculate the resulting fraction for x * n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        \/\/ Simplify the fraction by finding the gcd\n        int gcd = GCD(resultNumerator, resultDenominator);\n        resultNumerator \/= gcd;\n        resultDenominator \/= gcd;\n        \n        \/\/ It is a whole number if the simplified denominator is 1\n        return resultDenominator == 1;\n    }\n    \n    private static int GCD(int a, int b) {\n        while (b != 0) {\n            int t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    Debug.Assert(Simplify((\"1\/6\"), (\"2\/1\")) == (false));\n    Debug.Assert(Simplify((\"5\/1\"), (\"3\/1\")) == (true));\n    Debug.Assert(Simplify((\"7\/10\"), (\"10\/2\")) == (false));\n    Debug.Assert(Simplify((\"2\/10\"), (\"50\/10\")) == (true));\n    Debug.Assert(Simplify((\"7\/2\"), (\"4\/2\")) == (true));\n    Debug.Assert(Simplify((\"11\/6\"), (\"6\/1\")) == (true));\n    Debug.Assert(Simplify((\"2\/3\"), (\"5\/2\")) == (false));\n    Debug.Assert(Simplify((\"5\/2\"), (\"3\/5\")) == (false));\n    Debug.Assert(Simplify((\"2\/4\"), (\"8\/4\")) == (true));\n    Debug.Assert(Simplify((\"2\/4\"), (\"4\/2\")) == (true));\n    Debug.Assert(Simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    Debug.Assert(Simplify((\"1\/5\"), (\"1\/5\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_145","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Veur de opzètte van de opzètte van de opzètte van de opzètte van de opzètte van de opzètte.    \/\/Opmerking: es d'r versjèllende items zeen mèt dezelfde som vaan hun cijfers,     \/\/in opwaomende volgorde volgens de som vaan hun cijfers.     \/\/Schrijf 'n functie die de gegeve lies van gans getalle sorteert .    \/\/ >>> OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n    \/\/ (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))\n    \/\/ >>> OrderByPoints((new List<long>()))\n    \/\/ (new List<long>())\n    public static List<long> OrderByPoints(List<long> nums) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static List<long> OrderByPoints(List<long> nums)\n    {\n        return nums.Select((num, index) => new { Number = num, Index = index, DigitSum = SumOfDigits(num) })\n                   .OrderBy(item => item.DigitSum)\n                   .ThenBy(item => item.Index)\n                   .Select(item => item.Number)\n                   .ToList();\n    }\n\n    private static int SumOfDigits(long number)\n    {\n        number = Math.Abs(number);\n        int sum = 0;\n        while (number > 0)\n        {\n            sum += (int)(number % 10);\n            number \/= 10;\n        }\n        return sum;\n    }\n\n    static void Main(string[] args)\n    {\n        var sortedList = OrderByPoints(new List<long> { 1L, 11L, -1L, -11L, -12L });\n        Console.WriteLine(string.Join(\", \", sortedList));\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_146","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Eerste en lètste cijfers van 'n getal zeen eige (1, 3, 5, 7, 9).    \/\/'t aontal elemente in de lies die groter zeen es 10 en allebei     \/\/Schrijf 'n functie die 'n lies getalle as input en retourneert .    \/\/ >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L})))\n    \/\/ (1L)\n    \/\/ >>> Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n    \/\/ (2L)\n    public static long Specialfilter(List<long> nums) {\n","canonical_solution":"public static long Specialfilter(List<long> nums) {\n        return nums.Count(num => {\n            if (num <= 10) return false;\n            long positiveNum = Math.Abs(num);\n            string numStr = positiveNum.ToString();\n            char firstDigit = numStr[0];\n            char lastDigit = numStr[numStr.Length - 1];\n            return IsOddDigit(firstDigit) && IsOddDigit(lastDigit);\n        });\n    }\n\n    private static bool IsOddDigit(char digit) {\n        return digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9';\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"},{"task_id":"HumanEval_147","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/en a[i] + a[j] + a[k] is 'n veulvoudige van 3.    \/\/Retourneer 't aantal drievouden (a[i], a[j], a[k]) van a wo i < j < k,     \/\/veur iedere i (1 ≤ i ≤ n) is de waerde van a[i] = i * i - i + 1.     \/\/Geer höb 'n positief gans getal n. Geer moot 'n gans getallijst a van lengte n make.    \/\/ >>> GetMaxTriples((5L))\n    \/\/ (1L)\n    \/\/ Explanation: \n    \/\/ a = [1, 3, 7, 13, 21]\n    \/\/ The only valid triple is (1, 7, 13).\n    public static long GetMaxTriples(long n) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            a.Add(i * i - i + 1);\n        }\n\n        long count = 0;\n        for (int i = 0; i < a.Count; i++) {\n            for (int j = i + 1; j < a.Count; j++) {\n                for (int k = j + 1; k < a.Count; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    static void Main(string[] args) {\n        long n = 5; \/\/ Example input\n        Console.WriteLine(GetMaxTriples(n)); \/\/ Should output 1 based on the example given\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L)) == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L)) == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"},{"task_id":"HumanEval_148","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde     \/\/Dat is neet de juiste planeetnaam.    \/\/De funksje moat in lege tuple weromkeitsje as planet1 of planet2 is.    \/\/De naobie vaan de zon.    \/\/'t Is gelege tösse de baan van planeet 1 en de baan van planeet 2, gesorteerd op     \/\/De functie moot 'n tuple mèt alle planete die     \/\/Schrief 'n functie die twie planete name aafneump es de stringe planet1 en planet2.    \/\/Uranus, Neptunus.    \/\/is Mercurius, de volgende is Venus, dan Aarde, Mars, Jupiter, Saturnus,    \/\/' t Zonnestèlsel haet 8 planete . De planete die ' t dichtst bij de zon ligke .    \/\/ >>> Bf((\"Jupiter\"), (\"Neptune\"))\n    \/\/ (new List<string>(new string[]{(string)\"Saturn\", (string)\"Uranus\"}))\n    \/\/ >>> Bf((\"Earth\"), (\"Mercury\"))\n    \/\/ (List<string>(\"Venus\"))\n    \/\/ >>> Bf((\"Mercury\"), (\"Uranus\"))\n    \/\/ (new List<string>(new string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))\n    public static List<string> Bf(string planet1, string planet2) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<string> Bf(string planet1, string planet2) {\n        List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n        }\n        \n        List<string> result = new List<string>();\n        int start = Math.Min(index1, index2);\n        int end = Math.Max(index1, index2);\n\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n        }\n\n        return result;\n    }\n\n    public static void Main() {\n        Console.WriteLine(string.Join(\", \", Bf(\"Jupiter\", \"Neptune\"))); \/\/ Output: Saturn, Uranus\n        Console.WriteLine(string.Join(\", \", Bf(\"Earth\", \"Mercury\")));   \/\/ Output: Venus\n        Console.WriteLine(string.Join(\", \", Bf(\"Mercury\", \"Uranus\"))); \/\/ Output: Venus, Earth, Mars, Jupiter, Saturn\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Bf((\"Jupiter\"), (\"Neptune\")).Equals((new List<string>(new string[]{(string)\"Saturn\", (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Mercury\")).Equals((new List<string>(new string[]{(string)\"Venus\"}))));\n    Debug.Assert(Bf((\"Mercury\"), (\"Uranus\")).Equals((new List<string>(new string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))));\n    Debug.Assert(Bf((\"Neptune\"), (\"Venus\")).Equals((new List<string>(new string[]{(string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Earth\")).Equals((new List<string>())));\n    Debug.Assert(Bf((\"Mars\"), (\"Earth\")).Equals((new List<string>())));\n    Debug.Assert(Bf((\"Jupiter\"), (\"Makemake\")).Equals((new List<string>())));\n    }\n\n}\n"},{"task_id":"HumanEval_149","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Geer kint aongezeen tot alle wäörd dezelfde lengte höbbe.    \/\/De functie moot 'n liest vaan stringe in geordende volgorde retourne.    \/\/Es twie wäörd dezelfde lengte höbbe, rangsjtèl de lies alfabetisch.    \/\/De lijst is op basis van die regel gesorteerd.    \/\/De volgorde van de lies moot opziechend zien nao lengte vaan eder woord, en geer wèt 't neet.    \/\/en 't kan duplicaote bevatte.    \/\/De lies is altied 'n lies vaan streije en neet 'n lies vaan getalle.    \/\/en de resulterende lies mèt 'n gesorteerde volgorde,     \/\/verwies de stringe die eige lengte höbbe,     \/\/Schrief 'n functie die 'n lies van stringe as parameter accepteert.    \/\/ >>> ListSort((new List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    \/\/ (new List<string>(new string[]{(string)\"aa\"}))\n    \/\/ >>> ListSort((new List<string>(new string[]{(string)\"ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    \/\/ (new List<string>(new string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    public static List<string> ListSort(List<string> lst) {\n        return lst.Where(x => x.Length % 2 == 0)\n                  .OrderBy(x => x.Length)\n                  .ThenBy(x => x)\n                  .ToList();\n    }\n    \n    static void Main() {\n        var result1 = ListSort(new List<string> { \"aa\", \"a\", \"aaa\" });\n        Console.WriteLine(string.Join(\", \", result1)); \/\/ Output: aa\n\n        var result2 = ListSort(new List<string> { \"ab\", \"a\", \"aaa\", \"cd\" });\n        Console.WriteLine(string.Join(\", \", result2)); \/\/ Output: ab, cd\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"}))).Equals((new List<string>(new string[]{(string)\"aa\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"school\", (string)\"AI\", (string)\"asdf\", (string)\"b\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"asdf\", (string)\"school\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\", (string)\"b\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"d\", (string)\"dcba\", (string)\"abcd\", (string)\"a\"}))).Equals((new List<string>(new string[]{(string)\"abcd\", (string)\"dcba\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))).Equals((new List<string>(new string[]{(string)\"AI\", (string)\"ai\", (string)\"au\"}))));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\", (string)\"c\", (string)\"c\", (string)\"a\"}))).Equals((new List<string>())));\n    Debug.Assert(SortedListSum((new List<string>(new string[]{(string)\"aaaa\", (string)\"bbbb\", (string)\"dd\", (string)\"cc\"}))).Equals((new List<string>(new string[]{(string)\"cc\", (string)\"dd\", (string)\"aaaa\", (string)\"bbbb\"}))));\n    }\n\n}\n"},{"task_id":"HumanEval_150","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/'n priemgetal en moot de waerde van y anders weergeve.    \/\/Ein simpel programma dat de waerde van x zouw vergoan es n is     \/\/ >>> XOrY((7L), (34L), (12L))\n    \/\/ (34L)\n    \/\/ >>> XOrY((15L), (8L), (5L))\n    \/\/ (5L)\n    public static long XOrY(long n, long x, long y) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static long XOrY(long n, long x, long y) {\n        return IsPrime(n) ? x : y;\n    }\n\n    private static bool IsPrime(long number) {\n        if (number <= 1) return false;\n        if (number <= 3) return true;\n        if (number % 2 == 0 || number % 3 == 0) return false;\n        \n        for (long i = 5; i * i <= number; i += 6) {\n            if (number % i == 0 || number % (i + 2) == 0) return false;\n        }\n        \n        return true;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(XOrY((7L), (34L), (12L)) == (34L));\n    Debug.Assert(XOrY((15L), (8L), (5L)) == (5L));\n    Debug.Assert(XOrY((3L), (33L), (5212L)) == (33L));\n    Debug.Assert(XOrY((1259L), (3L), (52L)) == (3L));\n    Debug.Assert(XOrY((7919L), (-1L), (12L)) == (-1L));\n    Debug.Assert(XOrY((3609L), (1245L), (583L)) == (583L));\n    Debug.Assert(XOrY((91L), (56L), (129L)) == (129L));\n    Debug.Assert(XOrY((6L), (34L), (1234L)) == (1234L));\n    Debug.Assert(XOrY((1L), (2L), (0L)) == (0L));\n    Debug.Assert(XOrY((2L), (2L), (0L)) == (2L));\n    }\n\n}\n"},{"task_id":"HumanEval_151","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/In de lies die oneven zijn. Ignoreer getalle die negatief of neet heelgetalle zien.    \/\/Gegaeve 'n lies getalle, geef de som vaan de kwadraote vaan de getalle     \/\/ >>> DoubleTheDifference((new List<float>(new long[]{(long)1L, (long)3L, (long)2L, (long)0L})))\n    \/\/ (10L)\n    \/\/ >>> DoubleTheDifference((new List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    \/\/ (0L)\n    \/\/ >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n    \/\/ (81L)\n    \/\/ >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n    \/\/ (0L)\n    \/\/ If the input list is empty, return 0.\n    public static long DoubleTheDifference(List<float> lst) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Given a list of numbers, return the sum of squares of the numbers\n    \/\/ in the list that are odd. Ignore numbers that are negative or not integers.\n    public static long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n        foreach (var num in lst) {\n            if (num >= 0 && num == (long)num && ((long)num % 2) != 0) {\n                sum += (long)num * (long)num;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"},{"task_id":"HumanEval_152","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/veurbeeld:     \/\/de waerde is 0, en zo neet, is de waerde 't absolute versjèl tösse de gissing en de score.     \/\/Geer kint 'n liest van dezelfde lengte die aandert wie wied eeder gissing oet waor.    \/\/Geer kint twieë lieste mèt scores en gissinge van gelieke lengde, boebij eder index 'n match toont.    \/\/De taak is te bepaole of 'n persoon de oetkoms vaan 'n aantal wedstrijde correct gekaoze haet.    \/\/Definitief waerdje op te neume en te vergelieke.    \/\/De geveul en gedachte die ge op dat moment hebt, zien de waereld.    \/\/Ich dink dat veer allemaol dat gevoel herinnere es ' t resultaat van ein lang gewachte ...    \/\/ >>> Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    \/\/ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    \/\/ >>> Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    \/\/ (new List<long>(new long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long> game, List<long> guess) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static List<long> Compare(List<long> game, List<long> guess)\n    {\n        List<long> differences = new List<long>();\n        for (int i = 0; i < game.Count; i++)\n        {\n            differences.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return differences;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_153","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/(ze sterkte is -1).    \/\/return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension     \/\/'t is 'n oetbreiding: ['SErviNGSliCes', 'Cheese', 'StuFfed'] dan zouw 't waal 'n oetbreiding weure.    \/\/Veurbeeld: es geer \"Slices\" as klasse en 'n lies van de     \/\/kiest de eerste op de lijst.    \/\/Es d'r twie of mie verlenginge mèt dezelfde sterkte zeen, mós se 't neet op 't lier.    \/\/format: ClassName.StrongestExtensionName.     \/\/Veur de sterkste verlenging en 'n string in dit artikel.    \/\/In de naam van de verlenging weurt de sterkte gegaeve door de breuk CAP - SM.     \/\/letters in de naam van de extensie, en SM is 't aantal kleine letters     \/\/de sterkte vaan de oetbreiding is: Laot CAP 't nummer vaan de groete lètter weure     \/\/De oetbreiding is gebruuk veur 't laden vaan extra klasse aon de klasse.    \/\/Geer wèlt de naam van 'n klasse (ein string) en 'n lies vaan oetbreidinge.    \/\/ >>> StrongestExtension((\"my_class\"), (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    \/\/ (\"my_class.AA\")\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n","canonical_solution":"public static string StrongestExtension(string class_name, List<string> extensions) {\n        string strongestExtension = null;\n        int maxStrength = int.MinValue;\n\n        foreach (var extension in extensions) {\n            int countUpper = extension.Count(char.IsUpper);\n            int countLower = extension.Count(char.IsLower);\n            int strength = countUpper - countLower;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return $\"{class_name}.{strongestExtension}\";\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"},{"task_id":"HumanEval_154","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Geer kint 2 wäörd. 't Waor is waor es 't twiede waord of e van de rotaties 'n substring is in 't ierste waord.    \/\/ >>> CycpatternCheck((\"abcd\"), (\"abd\"))\n    \/\/ (false)\n    \/\/ >>> CycpatternCheck((\"hello\"), (\"ell\"))\n    \/\/ (true)\n    \/\/ >>> CycpatternCheck((\"whassup\"), (\"psus\"))\n    \/\/ (false)\n    \/\/ >>> CycpatternCheck((\"abab\"), (\"baa\"))\n    \/\/ (true)\n    \/\/ >>> CycpatternCheck((\"efef\"), (\"eeff\"))\n    \/\/ (false)\n    \/\/ >>> CycpatternCheck((\"himenss\"), (\"simen\"))\n    \/\/ (true)\n    public static bool CycpatternCheck(string a, string b) {\n","canonical_solution":"using System;\n\nclass Problem {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n\n        string combinedB = b + b;\n        for (int i = 0; i < b.Length; i++) {\n            string rotation = combinedB.Substring(i, b.Length);\n            if (a.Contains(rotation)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    Debug.Assert(CycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    Debug.Assert(CycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    Debug.Assert(CycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    Debug.Assert(CycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    Debug.Assert(CycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_155","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Gegeve 'n heel getal. Retourne 'n tuple die respectievelek 't aantal paar en oneven getalle haet.    \/\/ >>> EvenOddCount((-12L))\n    \/\/ (Tuple.Create(1L, 1L))\n    \/\/ >>> EvenOddCount((123L))\n    \/\/ (Tuple.Create(1L, 2L))\n    public static Tuple<long, long> EvenOddCount(long num) {\n","canonical_solution":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static Tuple<long, long> EvenOddCount(long num) {\n        \/\/ Convert the number to positive to handle negative numbers\n        num = Math.Abs(num);\n        long evenCount = 0;\n        long oddCount = 0;\n        \n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0)\n                evenCount++;\n            else\n                oddCount++;\n            num \/= 10;\n        }\n        \n        return Tuple.Create(evenCount, oddCount);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddCount((7L)).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(EvenOddCount((-78L)).Equals((Tuple.Create(1L, 1L))));\n    Debug.Assert(EvenOddCount((3452L)).Equals((Tuple.Create(2L, 2L))));\n    Debug.Assert(EvenOddCount((346211L)).Equals((Tuple.Create(3L, 3L))));\n    Debug.Assert(EvenOddCount((-345821L)).Equals((Tuple.Create(3L, 3L))));\n    Debug.Assert(EvenOddCount((-2L)).Equals((Tuple.Create(1L, 0L))));\n    Debug.Assert(EvenOddCount((-45347L)).Equals((Tuple.Create(2L, 3L))));\n    Debug.Assert(EvenOddCount((0L)).Equals((Tuple.Create(1L, 0L))));\n    }\n\n}\n"},{"task_id":"HumanEval_156","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde:     \/\/Restrikties: 1 <= num <= 1000     \/\/en zèt 't in klein lètter.    \/\/Gegaeve 'n positief gans getal, verkrijg 't equivalent in Romeinse cijfers es 'n string,     \/\/ >>> IntToMiniRoman((19L))\n    \/\/ (\"xix\")\n    \/\/ >>> IntToMiniRoman((152L))\n    \/\/ (\"clii\")\n    \/\/ >>> IntToMiniRoman((426L))\n    \/\/ (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n","canonical_solution":"if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"number\", \"Input must be between 1 and 1000\");\n\n        \/\/ Mapping of Roman numerals\n        var romanNumerals = new List<(int value, string numeral)>\n        {\n            (1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"),\n            (100, \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"),\n            (10, \"x\"), (9, \"ix\"), (5, \"v\"), (4, \"iv\"),\n            (1, \"i\")\n        };\n\n        var sb = new StringBuilder();\n\n        foreach (var (value, numeral) in romanNumerals)\n        {\n            while (number >= value)\n            {\n                sb.Append(numeral);\n                number -= value;\n            }\n        }\n\n        return sb.ToString();\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"},{"task_id":"HumanEval_157","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/90 graod.    \/\/'n Rechtehoekige driehook is 'n driehook boebij 'ne hook rechhoek is of     \/\/De kanten vörme 'n rechhoekige driehoek, anders is 't vals.    \/\/Gegaeve de lengte van de drie kanten van 'n driehoek.    \/\/ >>> RightAngleTriangle((3L), (4L), (5L))\n    \/\/ (true)\n    \/\/ >>> RightAngleTriangle((1L), (2L), (3L))\n    \/\/ (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n","canonical_solution":"using System;\n\nclass Problem\n{\n    public static bool RightAngleTriangle(long a, long b, long c)\n    {\n        \/\/ Sort the sides to make it easier to apply the Pythagorean theorem.\n        long[] sides = { a, b, c };\n        Array.Sort(sides);\n\n        \/\/ Check if the sum of the squares of the smaller two sides equals the square of the largest side.\n        return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_158","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/In de literatuur is 't in de volgorde van de tekste.    \/\/Es meerdere stringe 't maximaal aantal unieke karakters höbbe, is 't 'n oetval vaan 'n oetval.    \/\/De lies bevat versjèllende wäörd. Retourneer 't woord mèt 't maximaal aantal     \/\/Schrief 'n functie die 'n liest van stringe accepteert.    \/\/ >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    \/\/ (\"string\")\n    \/\/ >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    \/\/ (\"enam\")\n    \/\/ >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    \/\/ (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    public static string FindMax(List<string> words)\n    {\n        string result = string.Empty;\n        int maxUniqueChars = 0;\n\n        foreach (var word in words)\n        {\n            var uniqueChars = word.ToCharArray().Distinct().Count();\n\n            if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && string.Compare(word, result, StringComparison.Ordinal) < 0))\n            {\n                maxUniqueChars = uniqueChars;\n                result = word;\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"},{"task_id":"HumanEval_159","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/Es d'r neet genóg aardappels blieve, zulle v'r alle aardappels aete, meh nog steeds honger höbbe.    \/\/'t Aantal wortels die nog blieve na je maaltijden ]     \/\/ge moet 'n lijst van [total aantal gegete wortels na je maaltijd,     \/\/Maar noe mós se nog mie wortels ete um de daag vol te make.    \/\/Geer zeet 't nog neet. Geer zeet 't nog neet.    \/\/ >>> Eat((5L), (6L), (10L))\n    \/\/ (new List<long>(new long[]{(long)11L, (long)4L}))\n    \/\/ >>> Eat((4L), (8L), (9L))\n    \/\/ (new List<long>(new long[]{(long)12L, (long)1L}))\n    \/\/ >>> Eat((1L), (10L), (10L))\n    \/\/ (new List<long>(new long[]{(long)11L, (long)0L}))\n    \/\/ >>> Eat((2L), (11L), (5L))\n    \/\/ (new List<long>(new long[]{(long)7L, (long)0L}))\n    \/\/ Variables:\n    \/\/ @number : integer\n    \/\/ the number of carrots that you have eaten.\n    \/\/ @need : integer\n    \/\/ the number of carrots that you need to eat.\n    \/\/ @remaining : integer\n    \/\/ the number of remaining carrots thet exist in stock\n    \/\/ Constrain:\n    \/\/ * 0 <= number <= 1000\n    \/\/ * 0 <= need <= 1000\n    \/\/ * 0 <= remaining <= 1000\n    \/\/ Have fun :)\n    public static List<long> Eat(long number, long need, long remaining) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<long> Eat(long number, long need, long remaining) {\n        long totalEaten = number;\n        long leftAfterMeals;\n\n        if(remaining >= need) {\n            totalEaten += need;\n            leftAfterMeals = remaining - need;\n        } else {\n            totalEaten += remaining;\n            leftAfterMeals = 0;\n        }\n        \n        return new List<long>{ totalEaten, leftAfterMeals };\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Eat((5L), (6L), (10L)).Equals((new List<long>(new long[]{(long)11L, (long)4L}))));\n    Debug.Assert(Eat((4L), (8L), (9L)).Equals((new List<long>(new long[]{(long)12L, (long)1L}))));\n    Debug.Assert(Eat((1L), (10L), (10L)).Equals((new List<long>(new long[]{(long)11L, (long)0L}))));\n    Debug.Assert(Eat((2L), (11L), (5L)).Equals((new List<long>(new long[]{(long)7L, (long)0L}))));\n    Debug.Assert(Eat((4L), (5L), (7L)).Equals((new List<long>(new long[]{(long)9L, (long)2L}))));\n    Debug.Assert(Eat((4L), (5L), (1L)).Equals((new List<long>(new long[]{(long)5L, (long)0L}))));\n    }\n\n}\n"},{"task_id":"HumanEval_160","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Operatorlijst haet minstens eine operator en operandlijst haet minstens twie operande.    \/\/Operand is 'n liest van neet-negatieve gans getalle.    \/\/De lengte vaan de operatorlijst is geliek aon de lengte vaan de operandlijst min 1.    \/\/Noot:     \/\/=> resultaat = 9     \/\/resultaat = 2 + 3 * 4 - 5     \/\/list = [2, 3, 4, 5]     \/\/operator['+', '*', '-']     \/\/Veurbeeld:     \/\/Exponentiatie (**)     \/\/Vloerverdeiling ( \/\/)     \/\/Vermenigvuldiging (*)     \/\/Aftrek ( - )     \/\/Addition ( +)     \/\/De basisoperaties vaan de algebra:     \/\/expression en return de evaluatie van deze expression.     \/\/De twiede lies is 'n lies van gans getalle. Gebroek de twie lieste um de algebra te bouwe.    \/\/De ierste lies heet basisoperaties en     public static long DoAlgebra(List<string> op, List<long> operand) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    public static long DoAlgebra(List<string> op, List<long> operand)\n    {\n        if (op.Count + 1 != operand.Count || operand.Count < 2)\n        {\n            throw new ArgumentException(\"Invalid input lists.\");\n        }\n\n        long result = operand[0];\n\n        for (int i = 0; i < op.Count; i++)\n        {\n            string currentOp = op[i];\n            long currentOperand = operand[i + 1];\n\n            switch (currentOp)\n            {\n                case \"+\":\n                    result += currentOperand;\n                    break;\n                case \"-\":\n                    result -= currentOperand;\n                    break;\n                case \"*\":\n                    result *= currentOperand;\n                    break;\n                case \"\/\/\":\n                    result \/= currentOperand;\n                    break;\n                case \"**\":\n                    result = (long)Math.Pow(result, currentOperand);\n                    break;\n                default:\n                    throw new InvalidOperationException($\"Unsupported operator: {currentOp}\");\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\/\/\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"},{"task_id":"HumanEval_161","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeelde     \/\/De functie moot de resulterende string retourne.    \/\/Es de string gein lètters bevat, verangere weej de string.    \/\/Anders houw 't zo wie 't is.    \/\/es s[i] 'n lètter is, zèt 't geval van ónger nao baove of andersom,     \/\/Geer höb 'n string s.    \/\/ >>> Solve((\"1234\"))\n    \/\/ (\"4321\")\n    \/\/ >>> Solve((\"ab\"))\n    \/\/ (\"AB\")\n    \/\/ >>> Solve((\"#a@C\"))\n    \/\/ (\"#A@c\")\n    public static string Solve(string s) {\n","canonical_solution":"public static string Solve(string s) {\n        bool hasLetter = s.Any(char.IsLetter);\n        if (hasLetter) {\n            var result = new StringBuilder(s.Length);\n            foreach (char c in s) {\n                if (char.IsLetter(c)) {\n                    result.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n                } else {\n                    result.Append(c);\n                }\n            }\n            return result.ToString();\n        } else {\n            char[] charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"},{"task_id":"HumanEval_162","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Es 'text' 'n lege string is, goon we null terug.     \/\/Gegeve 'n string 'text', retourneer d'r md5 hash equivalent string.     \/\/ >>> StringToMd5((\"Hello world\"))\n    \/\/ (\"3e25960a79dbc69b674cd4ec67a72c62\")\n    public static string StringToMd5(string text) {\n","canonical_solution":"using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass Problem {\n    public static string StringToMd5(string text) {\n        if (string.IsNullOrEmpty(text)) {\n            return null;\n        }\n        \n        using (MD5 md5 = MD5.Create()) {\n            byte[] inputBytes = Encoding.UTF8.GetBytes(text);\n            byte[] hashBytes = md5.ComputeHash(inputBytes);\n            \n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < hashBytes.Length; i++) {\n                sb.Append(hashBytes[i].ToString(\"x2\"));\n            }\n            return sb.ToString();\n        }\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringToMd5((\"Hello world\")).Equals((\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    Debug.Assert(StringToMd5((\"\")).Equals(null));\n    Debug.Assert(StringToMd5((\"A B C\")).Equals((\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    Debug.Assert(StringToMd5((\"password\")).Equals((\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n"},{"task_id":"HumanEval_163","nl":"lim_Latn","pl":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/Veurbeeld:     \/\/en b, in opwaomende volgorde.     \/\/Gegaeve twie positieve gans getalle a en b, geef de paarse cijfers tösse a     \/\/ >>> GenerateIntegers((2L), (8L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    \/\/ >>> GenerateIntegers((8L), (2L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    \/\/ >>> GenerateIntegers((10L), (14L))\n    \/\/ (new List<long>())\n    public static List<long> GenerateIntegers(long a, long b) {\n","canonical_solution":"using System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Given two positive integers a and b, return the even digits between a\n    \/\/ and b, in ascending order.\n    \/\/ For example:\n    \/\/ >>> GenerateIntegers((2L), (8L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    \/\/ >>> GenerateIntegers((8L), (2L))\n    \/\/ (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    \/\/ >>> GenerateIntegers((10L), (14L))\n    \/\/ (new List<long>())\n    \n    public static List<long> GenerateIntegers(long a, long b)\n    {\n        List<long> evenDigits = new List<long> { 2, 4, 6, 8 };\n        List<long> result = new List<long>();\n\n        if (a > b)\n        {\n            \/\/ Swap values if a is greater than b to ensure ascending order\n            long temp = a;\n            a = b;\n            b = temp;\n        }\n\n        foreach (var even in evenDigits)\n        {\n            if (even >= a && even <= b)\n            {\n                result.Add(even);\n            }\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GenerateIntegers((2L), (10L)).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((10L), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((132L), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(GenerateIntegers((17L), (89L)).Equals((new List<long>())));\n    }\n\n}\n"}]