task_id,nl,pl,prompt,canonical_solutions,test
HumanEval/0,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y n ges y sã n be sõor vɛɛs-vɛɛs sẽn be b sẽn kõ wã pʋgẽ, sõor a yiib n pẽ taab n yɩɩd sõor sẽn kõ. >>> has_close_elements{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}{""}}{""}{""}{""}}{""}{""}}{""}{""}}{""}}{""}{""}}{""}}{""}}{""}}{""}}{""}}
bool has_close_elements(std::vector<float> numbers, float threshold) {
","bool has_close_elements(std::vector<float> numbers, float threshold) {
    std::sort(numbers.begin(), numbers.end());  // Sort the numbers in ascending order
    for (size_t i = 1; i < numbers.size(); i++) {
        if (std::abs(numbers[i] - numbers[i - 1]) < threshold) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = has_close_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));
}
"
HumanEval/1,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sẽn dat n maan yaa y welg sullã n maan sull a to, n lebg n wa ne b vɛɛre. sull a to fãa yaa sẽn zems taaba (yẽnda fãa sẽn pakã sẽn zemsame) la b pa kẽed ne taab ye. y bas tɩ weoogã sẽn be vɛɛrã pʋgẽ yɩ zaalem. >>> separate_paren_groups(""( ) (() (()))))))) (std::vector<std::string>{(std::string) "")"", (((())::"" (std::string) ""((())))))
std::vector<std::string> separate_paren_groups(std::string paren_string) {
","std::vector<std::string> separate_paren_groups(std::string paren_string) {
    std::vector<std::string> groups;
    std::string current_group;
    int balance = 0;

    for (char ch : paren_string) {
        if (ch == ' ') continue;  // Ignore spaces

        current_group += ch;
        if (ch == '(') {
            balance++;
        } else if (ch == ')') {
            balance--;
            if (balance == 0) {  // Found a balanced group
                groups.push_back(current_group);
                current_group.clear();
            }
        }
    }

    return groups;
}","}
int main() {
    auto candidate = separate_paren_groups;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<std::string>({(std::string)""(()())"", (std::string)""((()))"", (std::string)""()"", (std::string)""((())()())""})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""((()))"", (std::string)""(((())))""})));
    assert(candidate((""(()(())((())))"")) == (std::vector<std::string>({(std::string)""(()(())((())))""})));
    assert(candidate((""( ) (( )) (( )( ))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""(()())""})));
}
"
HumanEval/2,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B sã n kõ sõor sẽn tar vɛɛsg sẽn yaa sõma, b tõe n welga a wã n lebg sõor sẽn yaa sõma (sẽn yaa sõma n yɩɩd sõor ning b sẽn kõ wã) la zĩ-likr (sẽn ketã yaa wakat fãa sẽn yaa sõma n yɩɩd 1). lebg n wa ne sõorã zĩ-likr babgo. >>> truncate_number((3.5f)) (0.5f)
float truncate_number(float number) {
","float truncate_number(float number) {
    return number - std::floor(number);
}","}
int main() {
    auto candidate = truncate_number;
    assert(candidate((3.5f)) == (0.5f));
    assert(candidate((1.25f)) == (0.25f));
    assert(candidate((123.0f)) == (0.0f));
}
"
HumanEval/3,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n paam n na n bãng y sẽn tõe n maan to-to n paam ligdi, y segd n bao n bãnga y sẽn tõe n maan to-to n paam ligdi.
bool below_zero(std::vector<long> operations) {
","bool below_zero(std::vector<long> operations) {
    long balance = 0;
    for (long op : operations) {
        balance += op;
        if (balance < 0) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = below_zero;
    assert(candidate((std::vector<long>())) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));
}
"
HumanEval/4,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sẽn kẽed ne vɛɛktor sẽn tar vɛɛktor dãmb sẽn kẽed ne vɛɛktorã, bãng tɩ vɛɛktorã sẽn zãr ne vɛɛktorã yaa sẽn zems ne vɛɛktorã sẽn kẽed ne vɛɛktorã sẽn kẽed ne vɛɛktorã. Vɛɛktorã sẽn zãr ne vɛɛktorã yaa sẽn zems ne vɛɛktorã sẽn zãr ne vɛɛktorã sẽn kẽed ne vɛɛktorã sẽn kẽed ne vɛɛktorã sẽn kẽed ne vɛɛktorã. Vɛɛktorã sẽn zãr ne vɛɛktorã yaa sẽn zems ne vɛɛktorã sẽn zãr ne vɛɛktorã sẽn kẽed ne vɛɛktorã sẽn kẽed ne vɛɛktorã. Vɛɛktorã sẽn zãr ne vɛɛktorã yaa sẽn zems ne vɛɛktorã sẽn kẽed ne vɛɛktorã sẽn kẽed ne vɛɛktorã.
float mean_absolute_deviation(std::vector<float> numbers) {
","float mean_absolute_deviation(std::vector<float> numbers) {
    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) / numbers.size();
    float mad = std::accumulate(numbers.begin(), numbers.end(), 0.0f, 
                                [mean](float sum, float x) { return sum + std::abs(x - mean); }) 
                / numbers.size();
    return mad;
}","}
int main() {
    auto candidate = mean_absolute_deviation;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));
}
"
HumanEval/5,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kẽesa sõor sẽn yaa 'delimeter' n be vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vv vɛɛsg vɛɛsg vɛɛsg vɛɛsg vɛɛsg vv vɛɛsg vɛɛsg vɛɛsg vv vɛɛsg vɛɛsg v
std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
","std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
    if (numbers.empty()) return numbers;

    std::vector<long> result;
    for (size_t i = 0; i < numbers.size(); i++) {
        result.push_back(numbers[i]);
        if (i < numbers.size() - 1) {
            result.push_back(delimeter);
        }
    }
    return result;
}","}
int main() {
    auto candidate = intersperse;
    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));
    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));
}
"
HumanEval/6,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yaa sull sẽn be ne sull fãa n na n wilg sull ning sẽn be ne sull fãa n na n wilg sull ning sẽn be ne sull fãa. Wala makre, (())) tara sull a yiib n tõe n maan tɩ b pa tõe n maan ye, la ((())) tara sull a tãab n tõe n maan woto.
std::vector<long> parse_nested_parens(std::string paren_string) {
","std::vector<long> parse_nested_parens(std::string paren_string) {
    std::vector<long> depths;
    long current_depth = 0, max_depth = 0;

    for (char ch : paren_string) {
        if (ch == ' ') {
            if (max_depth > 0) {
                depths.push_back(max_depth);
                max_depth = 0;
            }
            current_depth = 0;
        } else if (ch == '(') {
            current_depth++;
            max_depth = std::max(max_depth, current_depth);
        } else if (ch == ')') {
            current_depth--;
        }
    }

    if (max_depth > 0) {
        depths.push_back(max_depth);
    }

    return depths;
}","}
int main() {
    auto candidate = parse_nested_parens;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((""(()(())((())))"")) == (std::vector<long>({(long)4})));
}
"
HumanEval/7,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Filter a input vector of strings only for ones that contain given substring >>> filter_by_substring((std::vector<std::string>()), (""a"")) (std::vector<std::string>()) >>> filter_by_substring(((std::vector<std::string>({(std::string) ""abc"", (std::string) ""bacd"", (std::string) ""cde"", (std::string) ""array""})), (""a"") (std::vector<std::string>({(std::string) ""abc"", (std::string) ""bacd"", (std::string) ""array""}))
std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
","std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.find(substring) != std::string::npos) {
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_substring;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""aaaxxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""aaaxxy"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""grunt"", (std::string)""trumpet"", (std::string)""prune"", (std::string)""gruesome""})), (""run"")) == (std::vector<std::string>({(std::string)""grunt"", (std::string)""prune""})));
}
"
HumanEval/8,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sẽn kẽed ne vɛɛktor sẽn tar nimero rãmb sẽn yaa zãngã, lebg n wa ne vɛɛktor sẽn naag ne sõor la nimero rãmb nins fãa sẽn be vɛɛktor pʋgẽ wã sẽn lebg n wa ne. Vɛɛktor sẽn yaa zãngã segd n yɩɩ 0 la vɛɛktor sẽn pa be wã segd n yɩɩ 1. >>> sum_product{}{std::vector<long>{}} (std::make_tuple{0, 1)) >>> sum_product{}{std::vector<long>{{long) 1, (long) 2, (long) 3, (long) 4}))) (std::make_tuple{10, 24))
std::tuple<long, long> sum_product(std::vector<long> numbers) {
","std::tuple<long, long> sum_product(std::vector<long> numbers) {
    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);
    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());
    return std::make_tuple(sum, product);
}","}
int main() {
    auto candidate = sum_product;
    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));
    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));
    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));
}
"
HumanEval/9,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Ne vɛɛktor sẽn kõ, bɩ f yãk vɛɛktor sẽn na n wilg tɩ f sẽn na n wa n yã bũmb ning n ta zĩig ningã yaa a soaba. >>> rolling_max((std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 2, (long) 3, (long) 4, (long) 2}))) (std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4}))
std::vector<long> rolling_max(std::vector<long> numbers) {
","std::vector<long> rolling_max(std::vector<long> numbers) {
    std::vector<long> result;
    long max_so_far = LONG_MIN;

    for (long num : numbers) {
        max_so_far = std::max(max_so_far, num);
        result.push_back(max_so_far);
    }

    return result;
}","}
int main() {
    auto candidate = rolling_max;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));
}
"
HumanEval/10,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Bao-y palindrom sẽn yaa kɩdgã sẽn sɩng ne sõor sẽn kõ. Algorithm tags-kãngã yaa nana: - Bao-y sõor sẽn yaa kɩdgã sẽn yaa palindromã. - Rɩk-y sõor sẽn yaa kɩdgã sẽn yaa sõor sẽn yaa tɩlɛ wã n paas sõor sẽn yaa tɩlɛ wã sẽn yaa tɩlɛ wã n paas sõor sẽn yaa tɩlɛ wã. >>> make_palindrome ((("""")) ("""") >>> make_palindrome (((""cat"")) (""catac"") >>> make_palindrome (((""cata"")) (""catac"")
std::string make_palindrome(std::string string) {
","std::string make_palindrome(std::string string) {
    auto is_palindrome = [](const std::string &s) {
        return std::equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());
    };

    for (size_t i = 0; i < string.size(); ++i) {
        if (is_palindrome(string.substr(i))) {
            std::string prefix = string.substr(0, i);
            std::reverse(prefix.begin(), prefix.end());
            return string + prefix;
        }
    }

    return string;
}","}
int main() {
    auto candidate = make_palindrome;
    assert(candidate(("""")) == (""""));
    assert(candidate((""x"")) == (""x""));
    assert(candidate((""xyz"")) == (""xyzyx""));
    assert(candidate((""xyx"")) == (""xyx""));
    assert(candidate((""jerry"")) == (""jerryrrej""));
}
"
HumanEval/11,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B sẽn boond tɩ "" string "" yaa "" a "" la "" b "" sẽn yaa 1 la 0 bal n be b yiibã sʋka. B sẽn boond tɩ "" binary XOR "" n be b yiibã sʋka, b leb n lebgda ne "" string "" me.
std::string string_xor(std::string a, std::string b) {
","std::string string_xor(std::string a, std::string b) {
    std::string result;
    for (size_t i = 0; i < a.size(); ++i) {
        result += (a[i] == b[i]) ? '0' : '1';
    }
    return result;
}","}
int main() {
    auto candidate = string_xor;
    assert(candidate((""111000""), (""101010"")) == (""010010""));
    assert(candidate((""1""), (""1"")) == (""0""));
    assert(candidate((""0101""), (""0000"")) == (""0101""));
}
"
HumanEval/12,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sẽn kẽed ne vɛɛs-rãmb vɛɛs-rãmb, lebg n wa ne sẽn yaa-a woglem n yɩɩdã. lebg n wa ne pipi vɛɛs-rãmb sẽn yaa woglem a yembr sã n yaa tɩlɛ. lebg n wa ne a ye sã n mikame tɩ vɛɛs-rãmb sẽn kẽed ne vɛɛsã yaa zaalem. >>> longest(((std::vector<std::string>())) std::nullopt >>> longest(((std::vector<std::string>{((std::string) ""a"", (std::string) ""b"", (std::string) ""c""}))) ""a"" >>> longest(((std::vector<std::string>({(std::string) ""a"", (std::string) ""bb"", (stdstring) ""ccc""}))) ""ccc""
std::optional<std::string> longest(std::vector<std::string> strings) {
","std::optional<std::string> longest(std::vector<std::string> strings) {
    if (strings.empty()) return std::nullopt;

    return *std::max_element(strings.begin(), strings.end(), 
                             [](const std::string& a, const std::string& b) {
                                 return a.size() < b.size();
                             });
}","}
int main() {
    auto candidate = longest;
    assert(candidate((std::vector<std::string>())) == std::nullopt);
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == ""x"");
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""yyy"", (std::string)""zzzz"", (std::string)""www"", (std::string)""kkkk"", (std::string)""abc""}))) == ""zzzz"");
}
"
HumanEval/13,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne sõor a yiib sẽn yaa zãngã pʋɩtb sẽn yaa kãseng n yɩɩdã, a la b >>> sẽn yaa zãngã_ sẽn yaa kãseng n yɩɩdã_ pʋɩtb sẽn yaa kãseng n yɩɩdã (((3), (5)) (1) >>> sẽn yaa zãngã_ sẽn yaa kãseng n yɩɩdã_ pʋɩtb sẽn yaa kãseng n yɩɩdã (((25), (15)) (5)
long greatest_common_divisor(long a, long b) {
","long greatest_common_divisor(long a, long b) {
    return std::gcd(a, b);
}","}
int main() {
    auto candidate = greatest_common_divisor;
    assert(candidate((3), (7)) == (1));
    assert(candidate((10), (15)) == (5));
    assert(candidate((49), (14)) == (7));
    assert(candidate((144), (60)) == (12));
}
"
HumanEval/14,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D lebg n wa ne vɛrse-rãmb nins fãa sẽn sɩng ne sẽn yaa-a bilf n tɩ ta sẽn yaa-a wogd n yɩɩdã sẽn be vɛrse-rãmb nins sẽn kẽed ne sõsgã pʋgẽ wã >>> all_prefixes (((""abc"")) (std::vector<std::string>({(std::string) ""a"", (std::string) ""ab"", (std::string) ""abc""}))
std::vector<std::string> all_prefixes(std::string string) {
","std::vector<std::string> all_prefixes(std::string string) {
    std::vector<std::string> prefixes;
    for (size_t i = 1; i <= string.size(); ++i) {
        prefixes.push_back(string.substr(0, i));
    }
    return prefixes;
}","}
int main() {
    auto candidate = all_prefixes;
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""asdfgh"")) == (std::vector<std::string>({(std::string)""a"", (std::string)""as"", (std::string)""asd"", (std::string)""asdf"", (std::string)""asdfg"", (std::string)""asdfgh""})));
    assert(candidate((""WWW"")) == (std::vector<std::string>({(std::string)""W"", (std::string)""WW"", (std::string)""WWW""})));
}
"
HumanEval/15,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne sõor sẽn be zĩiga sẽn yãk n sɩng ne 0 n ta n. >>> string_sequence((0)) (""0"") >>> string_sequence((5)) (""0 1 2 3 4 5"")
std::string string_sequence(long n) {
","std::string string_sequence(long n) {
    std::ostringstream oss;
    for (long i = 0; i <= n; ++i) {
        if (i > 0) oss << "" "";
        oss << i;
    }
    return oss.str();
}","}
int main() {
    auto candidate = string_sequence;
    assert(candidate((0)) == (""0""));
    assert(candidate((3)) == (""0 1 2 3""));
    assert(candidate((10)) == (""0 1 2 3 4 5 6 7 8 9 10""));
}
"
HumanEval/16,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-yã sõor-koɛɛga, n bao n bãng sõor ning sẽn yaa toor-toorã (n pa ges b sẽn gʋls-a to-to wã) a sẽn tarã >>> count_distinct_characters (((""xyzXYZ"")) (3) >>> count_distinct_characters (((""Jerry"")) (4)
long count_distinct_characters(std::string string) {
","long count_distinct_characters(std::string string) {
    std::unordered_set<char> distinct_chars;
    for (char ch : string) {
        distinct_chars.insert(std::tolower(ch));
    }
    return distinct_chars.size();
}","}
int main() {
    auto candidate = count_distinct_characters;
    assert(candidate(("""")) == (0));
    assert(candidate((""abcde"")) == (5));
    assert(candidate((""abcdecadeCADE"")) == (5));
    assert(candidate((""aaaaAAAAaaaa"")) == (1));
    assert(candidate((""Jerry jERRY JeRRRY"")) == (5));
}
"
HumanEval/17,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sẽn na n tʋm ne tʋʋm kãnga yaa kõns sẽn wilgd yɩɩl-yɩɩll ASCII sẽn yaa toore. Y tʋʋmda yaa tɩ y bãng kõns vɛrk sẽn yaa tɩlɛ n wilg tɩ yɩɩl-yɩɩll wʋsg n be. Ad a sẽn be: 'o' note, lasts beats four 'o"" - half note, lasts two beats ""quater note, lasts one beat >>> parse_music.
std::vector<long> parse_music(std::string music_string) {
","std::vector<long> parse_music(std::string music_string) {
    std::vector<long> beats;
    std::istringstream iss(music_string);
    std::string note;
    
    while (iss >> note) {
        if (note == ""o"") beats.push_back(4);
        else if (note == ""o|"") beats.push_back(2);
        else if (note == "".|"") beats.push_back(1);
    }

    return beats;
}","}
int main() {
    auto candidate = parse_music;
    assert(candidate(("""")) == (std::vector<long>()));
    assert(candidate((""o o o o"")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate(("".| .| .| .|"")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));
    assert(candidate((""o| o| .| .| o o o o"")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));
    assert(candidate((""o| .| o| .| o o| o o|"")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));
}
"
HumanEval/18,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Bao-y n bãng-y naoor a wãn la b tõe n yãt sull-yɩɩr sẽn kõ wã ne pipi sõor-yɩɩrã. Ges-y sẽn be to-to. >>> how_many_times((""""), (""a"")) (0) >>> how_many_times(""aaa""), (""a"") (3) >>> how_many_times(""aaaa""), (""aa"") (3)
long how_many_times(std::string string, std::string substring) {
","long how_many_times(std::string string, std::string substring) {
    if (substring.empty()) return 0;
    
    long count = 0;
    size_t pos = 0;
    
    while ((pos = string.find(substring, pos)) != std::string::npos) {
        count++;
        pos++;  // Move one position forward to count overlapping occurrences
    }
    
    return count;
}","}
int main() {
    auto candidate = how_many_times;
    assert(candidate((""""), (""x"")) == (0));
    assert(candidate((""xyxyxyx""), (""x"")) == (4));
    assert(candidate((""cacacacac""), (""cac"")) == (4));
    assert(candidate((""john doe""), (""john"")) == (1));
}
"
HumanEval/19,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sõngr yaa sõor sẽn be zĩiga pʋgẽ n sɩng ne 'fʋɩ' n ta 'semb.' B sẽn tõe n yãk n yãk yaa 'fʋɩ', 'yẽng', 'a yiib', 'a tãab', 'a naasã', 'a nu', 'a yoob', 'a yopoe', 'a nii' la 'a wɛ.' lebg n wa ne sõor sẽn welg n sɩng ne sõor sẽn yaa bilf n tɩ ta sõor sẽn yaa kãseng >>> sort_numbers (((""a tãab n tãag a nu"")) (""a yembr tãag a nu"")
std::string sort_numbers(std::string numbers) {
","std::string sort_numbers(std::string numbers) {
    std::unordered_map<std::string, int> num_map = {
        {""zero"", 0}, {""one"", 1}, {""two"", 2}, {""three"", 3}, {""four"", 4},
        {""five"", 5}, {""six"", 6}, {""seven"", 7}, {""eight"", 8}, {""nine"", 9}
    };

    std::unordered_map<int, std::string> rev_map = {
        {0, ""zero""}, {1, ""one""}, {2, ""two""}, {3, ""three""}, {4, ""four""},
        {5, ""five""}, {6, ""six""}, {7, ""seven""}, {8, ""eight""}, {9, ""nine""}
    };

    std::istringstream iss(numbers);
    std::vector<int> num_list;
    std::string word;

    while (iss >> word) {
        num_list.push_back(num_map[word]);
    }

    std::sort(num_list.begin(), num_list.end());

    std::ostringstream oss;
    for (size_t i = 0; i < num_list.size(); ++i) {
        if (i > 0) oss << "" "";
        oss << rev_map[num_list[i]];
    }

    return oss.str();
}","}
int main() {
    auto candidate = sort_numbers;
    assert(candidate(("""")) == (""""));
    assert(candidate((""three"")) == (""three""));
    assert(candidate((""three five nine"")) == (""three five nine""));
    assert(candidate((""five zero four seven nine eight"")) == (""zero four five seven eight nine""));
    assert(candidate((""six five four three two one zero"")) == (""zero one two three four five six""));
}
"
HumanEval/20,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n kõ sõor sõor sẽn yaa toore (sẽn pa yɩɩd a yiib woglem), yãk-y la y lebs n kõ sõor a yiib sẽn kolg taab n lebs-b sorã pʋgẽ (sẽn yaa toore, sẽn yaa-a bilf). >>> find_closest_elements (sẽn kolg-b taab)
std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
","std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
    std::sort(numbers.begin(), numbers.end());
    float min_diff = std::numeric_limits<float>::max();
    float num1 = 0, num2 = 0;

    for (size_t i = 1; i < numbers.size(); ++i) {
        float diff = numbers[i] - numbers[i - 1];
        if (diff < min_diff) {
            min_diff = diff;
            num1 = numbers[i - 1];
            num2 = numbers[i];
        }
    }

    return std::make_tuple(num1, num2);
}","}
int main() {
    auto candidate = find_closest_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));
}
"
HumanEval/21,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B sã n kõ fɩtr a yiib bɩ n yɩɩd a yiib n be, bɩ f rɩk fɩtr ning n lebg n lebg n wa n na n tɩ yɩɩg a to wã n lebg 0 tɩ fɩtr ning sẽn yaa-a kãseng n yɩɩdã lebg 1 >>> rescale_to_unit
std::vector<float> rescale_to_unit(std::vector<float> numbers) {
","std::vector<float> rescale_to_unit(std::vector<float> numbers) {
    float min_val = *std::min_element(numbers.begin(), numbers.end());
    float max_val = *std::max_element(numbers.begin(), numbers.end());

    if (min_val == max_val) {
        std::fill(numbers.begin(), numbers.end(), 0.0f);
        return numbers;
    }

    for (float &num : numbers) {
        num = (num - min_val) / (max_val - min_val);
    }

    return numbers;
}","}
int main() {
    auto candidate = rescale_to_unit;
    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
}
"
HumanEval/22,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Filter given vector of any cppthon values only for integers >>> filter_integers((std::vector<std::any>({(std::string) ""a"", (std::string)3.14f, (std::string)5}))) (std::vector<long>({(long)5})) >>> filter_integers((std::vector<std::any>({1, 2, 3, ""abc"", std::<long,map>), std::vector<long>()))) (std::vector<long>({(long) 1, (long) 2, (long) 3}))
std::vector<long> filter_integers(std::vector<std::any> values) {
","std::vector<long> filter_integers(std::vector<std::any> values) {
    std::vector<long> result;
    for (const auto& val : values) {
        if (val.type() == typeid(long)) {
            result.push_back(std::any_cast<long>(val));
        } else if (val.type() == typeid(int)) {
            result.push_back(std::any_cast<int>(val));
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_integers;
    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));
    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, ""adasd""}))) == (std::vector<long>({(long)4, (long)9})));
    assert(candidate((std::vector<std::any>({3, ""c"", 3, 3, ""a"", ""b""}))) == (std::vector<long>({(long)3, (long)3, (long)3})));
}
"
HumanEval/23,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D lebg n wa ne string sẽn kõ >>> string_length(("""")) (0) >>> string_length((""abc"")) (3)
long string_length(std::string string) {
","long string_length(std::string string) {
    return string.length();
}","}
int main() {
    auto candidate = string_length;
    assert(candidate(("""")) == (0));
    assert(candidate((""x"")) == (1));
    assert(candidate((""asdasnakj"")) == (9));
}
"
HumanEval/24,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sẽn na yɩl n bãng sõor n kõ, bao sõor ning sẽn yaa kãseng n yɩɩd n nenga n nenga, n pa ta n >>> largest_divisor (((15)) (5)
long largest_divisor(long n) {
","long largest_divisor(long n) {
    for (long i = n / 2; i > 0; --i) {
        if (n % i == 0) {
            return i;
        }
    }
    return 1;
}","}
int main() {
    auto candidate = largest_divisor;
    assert(candidate((3)) == (1));
    assert(candidate((7)) == (1));
    assert(candidate((10)) == (5));
    assert(candidate((100)) == (50));
    assert(candidate((49)) == (7));
}
"
HumanEval/25,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D lebg n wa ne sõor sẽn yaa pipi koees nins sẽn kɩt tɩ sõor-zemsã lebg pipi koees sẽn sɩng ne sõor sẽn yaa bilf n tɩ ta sõor sẽn yaa kãsenga. B segd n kɩtame tɩ koees fãa lebg koees sẽn zems ne naoor nins b sẽn na n wa ne-a. B segd n kɩtame tɩ koees nins b sẽn na n wa ne wã lebg koees sẽn zemse.
std::vector<long> factorize(long n) {
","std::vector<long> factorize(long n) {
    std::vector<long> factors;
    for (long i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            factors.push_back(i);
            n /= i;
        }
    }
    if (n > 1) {
        factors.push_back(n);
    }
    return factors;
}","}
int main() {
    auto candidate = factorize;
    assert(candidate((2)) == (std::vector<long>({(long)2})));
    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));
    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));
    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));
    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));
    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));
}
"
HumanEval/26,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n na n yãk sõor sẽn yaa zall n kõ, bɩ y yiis bũmb nins sẽn be zallã pʋgẽ wã. >>> remove_duplicates
std::vector<long> remove_duplicates(std::vector<long> numbers) {
","std::vector<long> remove_duplicates(std::vector<long> numbers) {
    std::unordered_map<long, int> freq;
    for (long num : numbers) {
        freq[num]++;
    }

    std::vector<long> result;
    for (long num : numbers) {
        if (freq[num] == 1) {
            result.push_back(num);
        }
    }

    return result;
}","}
int main() {
    auto candidate = remove_duplicates;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));
}
"
HumanEval/27,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sẽn kẽed ne sõsg sẽn kõ, lebg-y lɛtrã sẽn yaa bilã tɩ b lebg bil-bɛd la bil-bɛd n lebg bil-bɛd. >>> flip_case (((""Hello"")) (""HELLO"")
std::string flip_case(std::string string) {
","std::string flip_case(std::string string) {
    for (char &ch : string) {
        if (std::islower(ch)) {
            ch = std::toupper(ch);
        } else if (std::isupper(ch)) {
            ch = std::tolower(ch);
        }
    }
    return string;
}","}
int main() {
    auto candidate = flip_case;
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hello!"")) == (""hELLO!""));
    assert(candidate((""These violent delights have violent ends"")) == (""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS""));
}
"
HumanEval/28,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Concatenate vector of strings into a single string >>> concatenate((std::vector<std::string>())) ("""") >>> concatenate((std::vector<std::string>({(std::string) ""a"", (std::string) ""b"", (std::string) ""c""}))) (""abc"")
std::string concatenate(std::vector<std::string> strings) {
","std::string concatenate(std::vector<std::string> strings) {
    std::string result;
    for (const auto& str : strings) {
        result += str;
    }
    return result;
}","}
int main() {
    auto candidate = concatenate;
    assert(candidate((std::vector<std::string>())) == (""""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == (""xyz""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z"", (std::string)""w"", (std::string)""k""}))) == (""xyzwk""));
}
"
HumanEval/29,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Filter a input vector of strings only for ones that start with a given prefix. >>> filter_by_prefix((std::vector<std::string>()), (""a"")) (std::vector<std::string>()) >>> filter_by_prefix(((std::vector<std::string>({(std::string) ""abc"", (std::string) ""bcd"", (std::string)::""cde"", (stdstring) ""array""})), (""a"") (std::vector<std::string>({(std::string) ""abc"", (std::string) ""array""}))
std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
","std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.rfind(prefix, 0) == 0) {  // Check if 'str' starts with 'prefix'
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_prefix;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
}
"
HumanEval/30,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne sõor sẽn yaa sõma bala. >>> get_positive((std::vector<long>({long)-1, (long)2, (long)-4, (long)-5, (long)6}))) (std::vector<long>({long)2, (long)5, (long)6})) >>> get_positive(((std::vector<long>({long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) (std::vector<long>{(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))
std::vector<long> get_positive(std::vector<long> l) {
","std::vector<long> get_positive(std::vector<long> l) {
    std::vector<long> result;
    for (long num : l) {
        if (num > 0) {
            result.push_back(num);
        }
    }
    return result;
}","}
int main() {
    auto candidate = get_positive;
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));
    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/31,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Return true if a given number is prime, and false otherwise. >>> yaa_rɩk-n-soalmã, la zĩrĩ. >>> yaa_rɩk-n-soalmã, la zĩrĩ.
bool is_prime(long n) {
","bool is_prime(long n) {
    if (n < 2) return false;
    if (n < 4) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (long i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_prime;
    assert(candidate((6)) == (false));
    assert(candidate((101)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((13441)) == (true));
    assert(candidate((61)) == (true));
    assert(candidate((4)) == (false));
    assert(candidate((1)) == (false));
    assert(candidate((5)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((17)) == (true));
    assert(candidate((85)) == (false));
    assert(candidate((77)) == (false));
    assert(candidate((255379)) == (false));
}
"
HumanEval/33,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Tʋʋm kãnga rɩkda vɛɛktɛɛr l la a lebg n wa ne vɛɛktɛɛr l' tɩ vɛɛktɛɛr l yaa a ye ne vɛɛktɛɛr l sẽn ka tõe n pʋɩ ne a tãabã, tɩ vɛɛktɛɛr l sẽn tõe n pʋɩ ne a tãabã me yaa a yembr ne vɛɛktɛɛr l sẽn zemsã, la b welga. >>> sort_third((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (std::vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_third(std::vector<long>{(long) 5, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 2}))) (std::vector<(long>{(long>2, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 5}))
std::vector<long> sort_third(std::vector<long> l) {
","std::vector<long> sort_third(std::vector<long> l) {
    std::vector<long> third_indices;
    for (size_t i = 0; i < l.size(); i += 3) {
        third_indices.push_back(l[i]);
    }
    std::sort(third_indices.begin(), third_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 3) {
        l[i] = third_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_third;
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));
}
"
HumanEval/34,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne yel-bõoneg sẽn yaa toor-toore, n be vɛɛtr pʋgẽ >>> unique((std::vector<long>({(long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 0, (long) 2, (long) 3, (long) 5, (long) 9, (long) 123}))
std::vector<long> unique(std::vector<long> l) {
","std::vector<long> unique(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    l.erase(std::unique(l.begin(), l.end()), l.end());
    return l;
}","}
int main() {
    auto candidate = unique;
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));
}
"
HumanEval/35,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne vɛɛktorã pʋgẽ sẽn ta zĩig ningã. >>> max_element((std::vector<long>({long) 1, (long) 2, (long) 3}))) (3) >>> max_element((std::vector<long>({long) 5, (long) 3, (long)-5, (long) 2, (long)-3, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) -10}))) (123)
long max_element(std::vector<long> l) {
","long max_element(std::vector<long> l) {
    return *std::max_element(l.begin(), l.end());
}","}
int main() {
    auto candidate = max_element;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));
}
"
HumanEval/36,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D lebg n wa ne sõor ning sẽn zems n-yẽg sẽn be n-yẽg sẽn pa ta n n tõe n pʋɩ ne 11 bɩ 13 pʋgẽ. >>> fizz_buzz((50)) (0) >>> fizz_buzz((78)) (2) >>> fizz_buzz((79) (3)
long fizz_buzz(long n) {
","long fizz_buzz(long n) {
    long count = 0;
    for (long i = 0; i < n; i++) {
        if (i % 11 == 0 || i % 13 == 0) {
            long temp = i;
            while (temp > 0) {
                if (temp % 10 == 7) count++;
                temp /= 10;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = fizz_buzz;
    assert(candidate((50)) == (0));
    assert(candidate((78)) == (2));
    assert(candidate((79)) == (3));
    assert(candidate((100)) == (3));
    assert(candidate((200)) == (6));
    assert(candidate((4000)) == (192));
    assert(candidate((10000)) == (639));
    assert(candidate((100000)) == (8026));
}
"
HumanEval/37,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Tʋʋm kãnga rɩkda vɛɛktɛɛr l la a lebg n wa ne vɛɛktɛɛr l' tɩ vɛɛktɛɛr l' yaa a ye ne vɛɛktɛɛr l sẽn be vɛɛktɛɛr dãmb nins sẽn pa yɩllã pʋsẽ, tɩ vɛɛktɛɛr l sẽn be vɛɛktɛɛr nins sẽn yaa yɩllã pʋsẽ me yaa a ye ne vɛɛktɛɛr l sẽn be vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛktɛɛr vɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛvɛɛ
std::vector<long> sort_even(std::vector<long> l) {
","std::vector<long> sort_even(std::vector<long> l) {
    std::vector<long> even_indices;
    for (size_t i = 0; i < l.size(); i += 2) {
        even_indices.push_back(l[i]);
    }
    std::sort(even_indices.begin(), even_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 2) {
        l[i] = even_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_even;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));
}
"
HumanEval/39,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// prime_fib lebgda n-n-soab sõor sẽn yaa Fibonacci sõor la a yaa pipi sõore. >>> prime_fib((1)) (2) >>> prime_fib(2) (3) >>> prime_fib(3)) (5) >>> prime_fib(4)) (13) >>> prime_fib(5) (89)
long prime_fib(long n) {
","bool is_prime(long num) {
    if (num < 2) return false;
    if (num < 4) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (long i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

long prime_fib(long n) {
    std::vector<long> prime_fibs;
    long a = 1, b = 1;
    while (prime_fibs.size() < n) {
        long next = a + b;
        a = b;
        b = next;
        if (is_prime(next)) {
            prime_fibs.push_back(next);
        }
    }
    return prime_fibs[n - 1];
}","}
int main() {
    auto candidate = prime_fib;
    assert(candidate((1)) == (2));
    assert(candidate((2)) == (3));
    assert(candidate((3)) == (5));
    assert(candidate((4)) == (13));
    assert(candidate((5)) == (89));
    assert(candidate((6)) == (233));
    assert(candidate((7)) == (1597));
    assert(candidate((8)) == (28657));
    assert(candidate((9)) == (514229));
    assert(candidate((10)) == (433494437));
}
"
HumanEval/40,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// triple_sum_to_zero rɩkda vɛɛs-rãmb tɩ yɩ vɛɛs-rãmb. A lebgda sɩd sã n yaa tɩ vɛɛs-rãmb a tãab n be vɛɛs-rãmbã pʋgẽ tɩ b yaa vɛɛse, la sã n pa woto, yaa zĩrĩ. >>> triple_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> triple_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long)-2, (long) 1} >>> (true) triple_sum_to_zero(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 7}))) (se) triple_sum_to_zero >>> (long) vɛɛs-rãmbã:<long>{long}2, (long) 4, (long) 5, (long) 3, (long) 9, (long)) (true)) triple_sum_long))) (long_vector) >>> (long_long_1)))
bool triples_sum_to_zero(std::vector<long> l) {
","bool triples_sum_to_zero(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    for (size_t i = 0; i < n - 2; i++) {
        size_t left = i + 1, right = n - 1;
        while (left < right) {
            long sum = l[i] + l[left] + l[right];
            if (sum == 0) return true;
            else if (sum < 0) left++;
            else right--;
        }
    }
    
    return false;
}","}
int main() {
    auto candidate = triples_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));
    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));
}
"
HumanEval/41,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Tags-y n ges-y so-toak sẽn yaa tɩrga, n yaa zãngã sẽn ka tɛk n zãr ne a to wã. So-toak n be n kẽnd n yi goabg n kẽng rɩtgo, tɩ so-toak a to n kẽnd n ta rɩtgo n kẽng goabg. So-toak a yiibã sɩngda ne taab zãrgo. So-toak fãa kẽnd ne vitem a yembr bala. B yetame tɩ so-toak a yiib na n wa kẽe ne taab so-toak sẽn kẽnd goabg n kẽng rɩtgo, n wa kẽed so-toak sẽn kẽnd rɩtgo n kẽng goabga. La so-toak a yiibã yaa kãn-kãe, n tar pãng wʋsgo, tɩ kɩt tɩ b ket n kẽnd b so-toakẽ wã wa b sẽn pa kẽed ne taab ye.
long car_race_collision(long n) {
","long car_race_collision(long n) {
    return n * n;
}","}
int main() {
    auto candidate = car_race_collision;
    assert(candidate((2)) == (4));
    assert(candidate((3)) == (9));
    assert(candidate((4)) == (16));
    assert(candidate((8)) == (64));
    assert(candidate((10)) == (100));
}
"
HumanEval/42,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne vɛɛtr ning sẽn tar bũmb nins sẽn paasd ne 1. >>> incr_list((std::vector<long>({long)1, (long)2, (long)3}))) (std::vector<long>({long)2, (long)3, (long)4})) >>> incr_list((std::vector<long>({long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) (std::vector<long>({long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))
std::vector<long> incr_list(std::vector<long> l) {
","std::vector<long> incr_list(std::vector<long> l) {
    for (long &num : l) {
        num++;
    }
    return l;
}","}
int main() {
    auto candidate = incr_list;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));
    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));
}
"
HumanEval/43,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// pairs_sum_to_zero rɩkda vɛɛs-rãmb wa sẽn kẽed ne. A lebgda sɩd sã n yaa tɩ vɛɛs-rãmb a yiib n be vɛɛs-rãmbã pʋgẽ tɩ b yaa vɛɛs-rãmb, la sã n pa woto, yaa zĩrĩ. >>> pairs_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> pairs_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 2, (long) 1} >>> (false) pairs_sum_to_zero(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 7}))) (se) pairs >>>_sum_to_zero(std::vector<long>{long}2, (long) 4, (long) 5, (long) 3, (long) 5, (long) 7))) (true) >>> pairs_sum_to_zero))) (long_long) >>> (long_vector) >>> (long_long)
bool pairs_sum_to_zero(std::vector<long> l) {
","bool pairs_sum_to_zero(std::vector<long> l) {
    std::unordered_set<long> seen;
    for (long num : l) {
        if (seen.count(-num)) {
            return true;
        }
        seen.insert(num);
    }
    return false;
}","}
int main() {
    auto candidate = pairs_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));
}
"
HumanEval/44,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n wa rat n lebg n lebg n wa, y segd n lebg n wa ne sõor sẽn zems ne sõor ning y sẽn lebg n wa ne wã.
std::string change_base(long x, long base) {
","std::string change_base(long x, long base) {
    if (x == 0) return ""0"";
    
    std::string result;
    while (x > 0) {
        result += std::to_string(x % base);
        x /= base;
    }
    
    std::reverse(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = change_base;
    assert(candidate((8), (3)) == (""22""));
    assert(candidate((9), (3)) == (""100""));
    assert(candidate((234), (2)) == (""11101010""));
    assert(candidate((16), (2)) == (""10000""));
    assert(candidate((8), (2)) == (""1000""));
    assert(candidate((7), (2)) == (""111""));
    assert(candidate((2), (3)) == (""2""));
    assert(candidate((3), (4)) == (""3""));
    assert(candidate((4), (5)) == (""4""));
    assert(candidate((5), (6)) == (""5""));
    assert(candidate((6), (7)) == (""6""));
    assert(candidate((7), (8)) == (""7""));
}
"
HumanEval/45,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B sã n kõ a to wã woglem la a sẽn lebg n wa zĩig ninga n yɩɩd a to wã, yaa a tãablem. >>> triangle_area((5), (3)) (7.5f)
float triangle_area(long a, long h) {
","float triangle_area(long a, long h) {
    return 0.5f * a * h;
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((5), (3)) == (7.5f));
    assert(candidate((2), (2)) == (2.0f));
    assert(candidate((10), (8)) == (40.0f));
}
"
HumanEval/46,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Fib4 sõor pʋga yaa sẽn wõnd Fibbonacci sõor pʋga sẽn yaa woto: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). y gʋls tʋʋm-noor sẽn na n bãng n-rɩtg ning sẽn be fib4 sõor pʋga pʋgẽ. y ra tũ ne rιk ye. >>> fib4((5)) (4) >>> fib4(6) (8) >>> fib4(7)) (14)
long fib4(long n) {
","long fib4(long n) {
    if (n == 0 || n == 1 || n == 3) return 0;
    if (n == 2) return 2;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 2;

    for (long i = 4; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fib4;
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (28));
    assert(candidate((10)) == (104));
    assert(candidate((12)) == (386));
}
"
HumanEval/47,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne bũmb nins sẽn be vɛɛtrã pʋgẽ wã media. >>> median((std::vector<long>({(long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (float(3) >>> median((std::vector<long>({(long) -10, (long) 4, (long) 6, (long) 1000, (long) 10, (long) 20}))) (15.0f)
float median(std::vector<long> l) {
","float median(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    if (n % 2 == 1) {
        return static_cast<float>(l[n / 2]);
    } else {
        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;
    }
}","}
int main() {
    auto candidate = median;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));
    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));
    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));
    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));
    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));
}
"
HumanEval/48,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// A gesda sã n yaa tɩlɛ tɩ b kõ sõsg sẽn yaa palindrom >>> yaa_palindrom ((("""")) (true) >>> yaa_palindrom (((""aba"")) (true) >>> yaa_palindrom (((""aaaaa"")) (true) >>> yaa_palindrom (((""zbcd"")) (false)
bool is_palindrome(std::string text) {
","bool is_palindrome(std::string text) {
    return std::equal(text.begin(), text.begin() + text.size() / 2, text.rbegin());
}","}
int main() {
    auto candidate = is_palindrome;
    assert(candidate(("""")) == (true));
    assert(candidate((""aba"")) == (true));
    assert(candidate((""aaaaa"")) == (true));
    assert(candidate((""zbcd"")) == (false));
    assert(candidate((""xywyx"")) == (true));
    assert(candidate((""xywyz"")) == (false));
    assert(candidate((""xywzx"")) == (false));
}
"
HumanEval/49,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne 2 ^ n modulo p (yẽes sõor sẽn yaa toogã). >>> modp(((3), (5)) (3) >>> modp((1101), (101)) (2) >>> modp((0), (101)) (1) >>> modp((3), (11)) (8) >>> modp((100), (101) (1)
long modp(long n, long p) {
","long modp(long n, long p) {
    return std::pow(2, n) % p;
}","}
int main() {
    auto candidate = modp;
    assert(candidate((3), (5)) == (3));
    assert(candidate((1101), (101)) == (2));
    assert(candidate((0), (101)) == (1));
    assert(candidate((3), (11)) == (8));
    assert(candidate((100), (101)) == (1));
    assert(candidate((30), (5)) == (4));
    assert(candidate((31), (5)) == (3));
}
"
HumanEval/51,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// remove_vowels yaa tʋʋm-noor sẽn dɩkd sõn-vɩɩs n lebg n wa ne sõn-vɩɩs sẽn pa tar vʋkɛlle. >>> remove_vowels(("""")) ("""") >>> remove_vowels((""abcdef"")) (""bcdf"") >>> remove_vowels((""aaaaa"")) ("""") >>> remove_vowels(""aaBAA"")) (""B"") >>> remove_vowels((""zbcd"")) (""zbcd"")
std::string remove_vowels(std::string text) {
","std::string remove_vowels(std::string text) {
    std::string result;
    std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
    
    for (char ch : text) {
        if (vowels.find(ch) == vowels.end()) {
            result += ch;
        }
    }
    
    return result;
}","}
int main() {
    auto candidate = remove_vowels;
    assert(candidate(("""")) == (""""));
    assert(candidate((""abcdef\nghijklm"")) == (""bcdf\nghjklm""));
    assert(candidate((""fedcba"")) == (""fdcb""));
    assert(candidate((""eeeee"")) == (""""));
    assert(candidate((""acBAA"")) == (""cB""));
    assert(candidate((""EcBOO"")) == (""cB""));
    assert(candidate((""ybcd"")) == (""ybcd""));
}
"
HumanEval/52,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Return true if all numbers in the vector l are below threshold t. >>> below_threshold((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 10})), (100)) (true) >>> below_threshold((std::vector<long>({(long) 1, (long) 20, (long) 4, (long) 10})), (5)) (false)
bool below_threshold(std::vector<long> l, long t) {
","bool below_threshold(std::vector<long> l, long t) {
    return std::all_of(l.begin(), l.end(), [t](long num) { return num < t; });
}","}
int main() {
    auto candidate = below_threshold;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));
}
"
HumanEval/53,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Add two numbers x and y >>> add((2), (3)) (5) >>> add((5), (7)) (12)
long add(long x, long y) {
","long add(long x, long y) {
    return x + y;
}","}
int main() {
    auto candidate = add;
    assert(candidate((0), (1)) == (1));
    assert(candidate((1), (0)) == (1));
    assert(candidate((2), (3)) == (5));
    assert(candidate((5), (7)) == (12));
    assert(candidate((7), (5)) == (12));
}
"
HumanEval/54,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Ges-y sã n yaa gom-biis a yiib n tar yʋy sẽn yaa a yembre. >>> same_chars((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) (true) >>> same_chars((""abcd""), (""dddddddabc"")) (true) >>> same_chars(""dddddddabc""), (""abcd"") (true) >>> same_chars((""eabcd""), (""dddddddabc"")) (false) same_chars >>>""((abcd""), (""dddddddddabce"") (false) >>> same_chars((""eabcd""), (""ddddzzzzzdzzdddabc"") (false) (false)
bool same_chars(std::string s0, std::string s1) {
","bool same_chars(std::string s0, std::string s1) {
    std::unordered_set<char> set0(s0.begin(), s0.end());
    std::unordered_set<char> set1(s1.begin(), s1.end());
    return set0 == set1;
}","}
int main() {
    auto candidate = same_chars;
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) == (true));
    assert(candidate((""abcd""), (""dddddddabc"")) == (true));
    assert(candidate((""dddddddabc""), (""abcd"")) == (true));
    assert(candidate((""eabcd""), (""dddddddabc"")) == (false));
    assert(candidate((""abcd""), (""dddddddabcf"")) == (false));
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddddabc"")) == (false));
    assert(candidate((""aabb""), (""aaccc"")) == (false));
}
"
HumanEval/55,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n-n-soab Fibonacci sõore. >>> fib((10)) (55) >>> fib((1)) (1) >>> fib((8)) (21)
long fib(long n) {
","long fib(long n) {
    if (n <= 1) return n;
    
    long a = 0, b = 1, c;
    for (long i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    
    return b;
}","}
int main() {
    auto candidate = fib;
    assert(candidate((10)) == (55));
    assert(candidate((1)) == (1));
    assert(candidate((8)) == (21));
    assert(candidate((11)) == (89));
    assert(candidate((12)) == (144));
}
"
HumanEval/56,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// brackets yaa ""<"" la "">"" sõor sẽn yaa toore. lebg n wa true sã n yaa tɩ bracket fãa sẽn sɩngda tara a sẽn wat n baasd ne bracket. >>> correct_bracketing((""<"")) (false) >>> correct_bracketing(""<>"")) (true) >>> correct_bracketing(""<><>>"")) (true) >>> correct_bracketing("">(<>"") (false)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '<') balance++;
        else if (ch == '>') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""<>"")) == (true));
    assert(candidate((""<<><>>"")) == (true));
    assert(candidate((""<><><<><>><>"")) == (true));
    assert(candidate((""<><><<<><><>><>><<><><<>>>"")) == (true));
    assert(candidate((""<<<><>>>>"")) == (false));
    assert(candidate((""><<>"")) == (false));
    assert(candidate((""<"")) == (false));
    assert(candidate((""<<<<"")) == (false));
    assert(candidate(("">"")) == (false));
    assert(candidate((""<<>"")) == (false));
    assert(candidate((""<><><<><>><>><<>"")) == (false));
    assert(candidate((""<><><<><>><>>><>"")) == (false));
}
"
HumanEval/57,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Return true is vector elements are monotonically increasing or decreasing. >>> monotonicã ((((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 20}))) (true) >>> monotonicã (((std::vector<long>{(long) 1, (long) 20, (long) 4, (long) 10}))) (false) >>> monotonicã (((std::vector<long>{(long) 4, (long) 1, (long) 0, (long) -10}))) (true)
bool monotonic(std::vector<long> l) {
","bool monotonic(std::vector<long> l) {
    bool increasing = true, decreasing = true;
    
    for (size_t i = 1; i < l.size(); i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
    }
    
    return increasing || decreasing;
}","}
int main() {
    auto candidate = monotonic;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));
    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));
}
"
HumanEval/58,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// lebg n wa ne vɛɛsg sẽn yaa toor-toor sẽn yaa toor-toor n be vɛɛs a yiib pʋsẽ. >>> common((std::vector<long>({long) 1, (long) 4, (long) 3, (long) 34, (long) 653, (long) 2, (long) 5), (std::vector<long>{long) 5, (long) 7, (long) 1, (long) 5, (long) 9, (long) 653, (long) 121}))) (std::vector<long>({long) 1, (long) 5, (long) 653})) >>> common(std::vector<long>{(long) 5, (long) 3, (long) 2, (long) 8}), (std::vector<long>{(long) 3, (long) 2))) (std::vector<long>{(long) 2, (long) 3))
std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
","std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
    std::unordered_set<long> set1(l1.begin(), l1.end());
    std::unordered_set<long> result_set;
    
    for (long num : l2) {
        if (set1.count(num)) {
            result_set.insert(num);
        }
    }
    
    std::vector<long> result(result_set.begin(), result_set.end());
    std::sort(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = common;
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/59,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D lebg n wa ne n-yẽng ning sẽn yaa pipi n-yẽng n yɩɩd n wã. D rɩk n-yẽng n > 1 la a pa pipi n-yẽng ye. >>> largest_prime_factor (((13195)) (29) >>> largest_prime_factor (((2048)) (2)
long largest_prime_factor(long n) {
","long largest_prime_factor(long n) {
    long largest = -1;
    
    while (n % 2 == 0) {
        largest = 2;
        n /= 2;
    }
    
    for (long i = 3; i * i <= n; i += 2) {
        while (n % i == 0) {
            largest = i;
            n /= i;
        }
    }
    
    if (n > 1) largest = n;
    
    return largest;
}","}
int main() {
    auto candidate = largest_prime_factor;
    assert(candidate((15)) == (5));
    assert(candidate((27)) == (3));
    assert(candidate((63)) == (7));
    assert(candidate((330)) == (11));
    assert(candidate((13195)) == (29));
}
"
HumanEval/60,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// sum_to_n yaa tʋʋm-noor sẽn na n sõd sõor sẽn sɩng ne 1 n ta n. >>> sum_to_n((30)) (465) >>> sum_to_n(100)) (5050) >>> sum_to_n((5)) (15) >>> sum_to_n(10)) (55) >>> sum_to_n(1) (1)
long sum_to_n(long n) {
","long sum_to_n(long n) {
    return n * (n + 1) / 2;
}","}
int main() {
    auto candidate = sum_to_n;
    assert(candidate((1)) == (1));
    assert(candidate((6)) == (21));
    assert(candidate((11)) == (66));
    assert(candidate((30)) == (465));
    assert(candidate((100)) == (5050));
}
"
HumanEval/61,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// brackets yaa ""("" la "")"". lebg n wa true sã n yaa tɩ bracket fãa sẽn sɩngda tara a sẽn wat n baasd ne bracket. >>> correct_bracketing((""("")) (false) >>> correct_bracketing(""() "")) (true) >>> correct_bracketing(""(()))) (true) >>> correct_bracketing(("") (false)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '(') balance++;
        else if (ch == ')') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""()"")) == (true));
    assert(candidate((""(()())"")) == (true));
    assert(candidate((""()()(()())()"")) == (true));
    assert(candidate((""()()((()()())())(()()(()))"")) == (true));
    assert(candidate((""((()())))"")) == (false));
    assert(candidate(("")(()"")) == (false));
    assert(candidate((""("")) == (false));
    assert(candidate((""(((("")) == (false));
    assert(candidate(("")"")) == (false));
    assert(candidate((""(()"")) == (false));
    assert(candidate((""()()(()())())(()"")) == (false));
    assert(candidate((""()()(()())()))()"")) == (false));
}
"
HumanEval/62,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// xs makda polinomial koeefɩɩtense. xs[0] + xs[1] * x + xs[2] * x^2 + .... lebg n wa ne polinomial kãnga sẽn yit zĩig a ye. >>> derivative((std::vector<long>({(long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (std::vector<long>{(long) 1, (long) 4, (long) 12, (long) 20})) >>> derivative::std::vector<long>({(long) 1, (long) 2, (long) 3}))) (std::vector<(long>{(long) 2, (long) 6}))
std::vector<long> derivative(std::vector<long> xs) {
","std::vector<long> derivative(std::vector<long> xs) {
    std::vector<long> result;
    for (size_t i = 1; i < xs.size(); i++) {
        result.push_back(xs[i] * i);
    }
    return result;
}","}
int main() {
    auto candidate = derivative;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));
    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));
}
"
HumanEval/63,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// FibFib sõor pʋga yaa sẽn wõnd Fibbonacci sõor pʋga sẽn yaa woto: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). y gʋls tʋʋm-noor sẽn na n bãng n-rɩtg ning sẽn be fibfib sõor pʋga. >>> fibfib((1)) (0) >>> fib((5)) (4) >>> fib(8)) (24)
long fibfib(long n) {
","long fibfib(long n) {
    if (n == 0 || n == 1) return 0;
    if (n == 2) return 1;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 1;

    for (long i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fibfib;
    assert(candidate((2)) == (1));
    assert(candidate((1)) == (0));
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (24));
    assert(candidate((10)) == (81));
    assert(candidate((12)) == (274));
    assert(candidate((14)) == (927));
}
"
HumanEval/64,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sebg ning sẽn boond tɩ "" vowels_count "" wã yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count "" sẽn yaa: "" vowels_count ""
long vowels_count(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long vowels_count(std::string s) {
  long count = 0;
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  for (char c : s) {
    if (vowels.count(c)) {
      count++;
    }
  }
  if (!s.empty() && (s.back() == 'y' || s.back() == 'Y')) {
    count++;
  }
  return count;
}","}
int main() {
    auto candidate = vowels_count;
    assert(candidate((""abcde"")) == (2));
    assert(candidate((""Alone"")) == (3));
    assert(candidate((""key"")) == (2));
    assert(candidate((""bye"")) == (1));
    assert(candidate((""keY"")) == (2));
    assert(candidate((""bYe"")) == (1));
    assert(candidate((""ACEDY"")) == (3));
}
"
HumanEval/65,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yɩta wa y sẽn na n wẽnemd n tekd n togsd sõor sẽn yaa zãngã n lebg n wa ne sõor sẽn yaa zãngã. >>> circular_shift((12), (1)) (""21"") >>> circular_shift((12), (2)) (""12"")
std::string circular_shift(long x, long shift) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string circular_shift(long x, long shift) {
  std::string s = std::to_string(x);
  long n = s.length();
  if (n == 0) {
    return """";
  }
  shift %= n;
  if (shift < 0) {
    shift += n;
  }
  if (shift == 0) {
    return s;
  }
  if (shift > n) {
    std::reverse(s.begin(), s.end());
    return s;
  }
  std::string shifted_s = s.substr(n - shift) + s.substr(0, n - shift);
  return shifted_s;
}","}
int main() {
    auto candidate = circular_shift;
    assert(candidate((100), (2)) == (""001""));
    assert(candidate((12), (2)) == (""12""));
    assert(candidate((97), (8)) == (""79""));
    assert(candidate((12), (1)) == (""21""));
    assert(candidate((11), (101)) == (""11""));
}
"
HumanEval/66,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Tʋʋm-te-noor gʋlsg sẽn dɩkd sõn-vɩɩm wa sẽn kẽed ne ASCII koodã n lebgd ne a zugẽ wã vɛrse wã bal sõadã. Makre: >>> digitSum(("""")) (0) >>> digitSum((""abAB"")) (131) >>> digitSum((""abcCd"")) (67) >>> digitSum((""helloE"")) (69) >>> digitSum((""woArBld"")) (131) >>> digitSum((""aAXaaaa"") (153)
long digitSum(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long digitSum(std::string s) {
  long sum = 0;
  for (char c : s) {
    if (isupper(c)) {
      sum += static_cast<long>(c);
    }
  }
  return sum;
}","}
int main() {
    auto candidate = digitSum;
    assert(candidate(("""")) == (0));
    assert(candidate((""abAB"")) == (131));
    assert(candidate((""abcCd"")) == (67));
    assert(candidate((""helloE"")) == (69));
    assert(candidate((""woArBld"")) == (131));
    assert(candidate((""aAaaaXa"")) == (153));
    assert(candidate(("" How are yOu?"")) == (151));
    assert(candidate((""You arE Very Smart"")) == (327));
}
"
HumanEval/67,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la sõor sẽn makd waab la pom-bõones sẽn be ko-bõones pʋgẽ. Ko-bõones kãnga tara pom-bõones la mang-bõones. B kõ-y-la sõor sẽn makd waab la pom-bõones sõor fãa, la sõor sẽn makd waab la pom-bõones sõor fãa, lebg n kõ-y mango wã sõor sẽn be ko-bõonesã pʋgẽ. Wala makre: >>> fruit_distribution ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
long fruit_distribution(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long fruit_distribution(std::string s, long n) {
  long apples = 0;
  long oranges = 0;
  size_t apples_pos = s.find(""apples"");
  if (apples_pos != std::string::npos) {
    size_t start = 0;
    while (!isdigit(s[start])) {
      start++;
    }
    apples = std::stoll(s.substr(start, apples_pos - start));
  }
  size_t oranges_pos = s.find(""oranges"");
  if (oranges_pos != std::string::npos) {
    size_t and_pos = s.find(""and"");
    size_t start = and_pos + 3;
    while (!isdigit(s[start])) {
      start++;
    }
    oranges = std::stoll(s.substr(start, oranges_pos - start));
  }
  return n - apples - oranges;
}","}
int main() {
    auto candidate = fruit_distribution;
    assert(candidate((""5 apples and 6 oranges""), (19)) == (8));
    assert(candidate((""5 apples and 6 oranges""), (21)) == (10));
    assert(candidate((""0 apples and 1 oranges""), (3)) == (2));
    assert(candidate((""1 apples and 0 oranges""), (3)) == (2));
    assert(candidate((""2 apples and 3 oranges""), (100)) == (95));
    assert(candidate((""2 apples and 3 oranges""), (5)) == (0));
    assert(candidate((""1 apples and 100 oranges""), (120)) == (19));
}
"
HumanEval/68,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ""Yãmb sã n paam tɩ y tara vɛɛgr sẽn wilgd tɩ tɩɩg n be tɩ pa tɩlɛ tɩ y yãk vɛɛgr a ye n lebg n wa. Vɛɛgr ning sẽn yãkame wã segd n yɩɩ vɛɛgr ning sẽn tar tɩɩm sẽn yaa zʋʋg-zʋʋg n yɩɩdã. Y sã n yã tɩ vɛɛgr a taab sẽn tar tɩɩm sẽn yaa zʋʋg-zʋʋg n yɩɩdã, lebg n wa ne vɛɛgr ning sẽn tar tɩɩm sẽn yaa zʋʋg-zʋʋg n yɩɩdã. Vɛɛgr ning sẽn yãkame wã segd n lebg n wa ne vɛɛgr sẽn yaa zʋʋg-zʋʋg n yɩɩdã. Vɛɛgr ning sẽn yãkame wã segd n lebg n wa ne vɛɛgr sẽn yaa zʋʋg-zʋʋg n yɩɩdã, [sẽn yaa zʋʋg-zʋʋg n yɩɩdã, a vɛɛgã ], Vɛɛgr ning sẽn yãkame wã sã n pa be tɩɩm sẽn yaa zʋʋg-zʋʋg bɩ vɛɛgr ning sẽn kõ wã yaa zaalem, lebg n wa ne []. Makr a 1: >>> pluck{((((dvector::::{long} long{long} long{long} (long} long{long} long} long{long} long{long} long{long} long{long} long{long} long{long} long{long} long} long{long} long{long} long{long} long{long} long{long} long} long{long} long{long} long{long} long} long{long} long{long} long} long{long} long{long} long{long} long} long{long} long{long} long} long{long} long{long} long} long{long} long} long{long} long{long} long} long{long} long} long{long} long} long{long} long} long{long} long{long} long} long} long{long} long} long{long} long} long{long} long} long{long} long} long{long} long} long{long} long} long{long} long} long{long} long} long} long{ long} long} long} long{ long} long} long{ long} long} long{ long} long
std::vector<long> pluck(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> pluck(std::vector<long> arr) {
  if (arr.empty()) {
    return {};
  }
  long min_even = -1;
  long min_index = -1;
  for (long i = 0; i < arr.size(); ++i) {
    if (arr[i] % 2 == 0) {
      if (min_even == -1 || arr[i] < min_even) {
        min_even = arr[i];
        min_index = i;
      }
    }
  }
  if (min_even == -1) {
    return {};
  }
  return {min_even, min_index};
}","}
int main() {
    auto candidate = pluck;
    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));
}
"
HumanEval/69,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la vɛɛg vɛɛg sẽn pa zaalem sẽn yaa vɛɛg sẽn yaa sõma. lebg n wa ne vɛɛg sẽn yaa sõma n yɩɩd zéro, la sẽn tar naoor sẽn yaa sõma n yɩɩd bɩ sẽn zemsa ne vɛɛgã meng yõodo. vɛɛg vɛɛgã yaa naoor nins a sẽn puk vɛɛgã pʋgẽ wã sõore. sã n pa be woto, lebg n wa ne -1. Makre: >>> baoo:{((std::vɛɛg<long>{(long) 4, (long) 1, (long) 2, (long) 3, (long) 1}))) (2) >>> baoo:{(std::vɛɛg<(long>1, (long) 2, (long) 2, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4, (long) 4} (3)))) >>> baoo:{(std::vɛɛg<(long>{(long>5, (long) 5, (long) 4, (long) 4, (long) 4}-1)))
long search(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long search(std::vector<long> lst) {
  std::map<long, long> counts;
  for (long x : lst) {
    counts[x]++;
  }
  long result = -1;
  for (auto const& [value, count] : counts) {
    if (value > 0 && count >= value) {
      result = std::max(result, value);
    }
  }
  return result;
}","}
int main() {
    auto candidate = search;
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));
    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));
    assert(candidate((std::vector<long>({(long)10}))) == (-1));
    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));
}
"
HumanEval/70,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n kõ-y vɛɛtr sẽn yaa sõor sẽn yaa zall n lebg n wa, y na n yãka vɛɛtrã sẽn yaa zall n wa. Vɛɛtrã sẽn yaa zall yaa y sã n sɩng ne sõor sẽn yaa zall n wa, n yaool n yãk sẽn yaa zall n wa, n wa baas ne sõor sẽn yaa zall n wa, n wa baas ne sõor sẽn yaa zall n wa, n wa baas ne sõor sẽn yaa zall n wa.
std::vector<long> strange_sort_list(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> strange_sort_list(std::vector<long> lst) {
  if (lst.empty()) {
    return {};
  }
  std::sort(lst.begin(), lst.end());
  std::vector<long> result;
  long left = 0;
  long right = lst.size() - 1;
  bool take_min = true;
  while (left <= right) {
    if (take_min) {
      result.push_back(lst[left++]);
    } else {
      result.push_back(lst[right--]);
    }
    take_min = !take_min;
  }
  return result;
}","}
int main() {
    auto candidate = strange_sort_list;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));
}
"
HumanEval/71,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B sã n kõ a tãabã sẽn yaa a soabã woglem. D lebg n wa ne a tãabã sẽn yaa a soabã sẽn zems ne zĩ-kugrã n tɩ ta zĩ-kugr a yiib sẽn zems ne zĩ-kugrã, sã n yaa a tãabã sẽn yaa a soabã n yaa a soabã. Sã n ka rẽ, d lebg n wa ne -1 B leb n na n lebg n wa ne a tãabã sẽn zems ne a soabã, sã n yaa a yiibã sẽn yaa a soabã n yɩɩd a tãabã. Makre: >>> triangle_area((3), (4), (5)) (6.0f) >>> triangle_area((1), (2), (10)) (float-1())
float triangle_area(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>
float triangle_area(long a, long b, long c) {
  if (a + b <= c || a + c <= b || b + c <= a) {
    return -1.0f;
  }
  double s = static_cast<double>(a + b + c) / 2.0;
  double area = std::sqrt(s * (s - a) * (s - b) * (s - c));
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << area;
  return std::stof(ss.str());
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((3), (4), (5)) == (6.0f));
    assert(candidate((1), (2), (10)) == (float(-1)));
    assert(candidate((4), (8), (5)) == (8.18f));
    assert(candidate((2), (2), (2)) == (1.73f));
    assert(candidate((1), (2), (3)) == (float(-1)));
    assert(candidate((10), (5), (7)) == (16.25f));
    assert(candidate((2), (6), (3)) == (float(-1)));
    assert(candidate((1), (1), (1)) == (0.43f));
    assert(candidate((2), (2), (10)) == (float(-1)));
}
"
HumanEval/72,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B gʋlsa tʋʋmde n lebg n wa tɩ yaa sɩd tɩ bõn-vɩɩga q na n yɩkame, la a lebg n wa tɩ yaa zĩrĩ, sã n yaa tɩ bõn-vɩɩga q na n yɩkame (a yaa vɛɛtr sẽn yaa palindrom) la a wilã na n yɩɩg bɩ n zem n ta zɩɩb sẽn yaa kãseng n yɩɩg w. Makre: >>> will_it_fly((std::vector<long>({long) 1, (long) 2}), (5)) (false) # 1+2 yaa bilf n yɩɩd zɩɩb sẽn yaa kãseng n yɩɩg la sẽn tõe, la a pa zems ye. >>> will_it_fly(((std::vector<long>((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
bool will_it_fly(std::vector<long> q, long w) {
","#include<assert.h>
#include<bits/stdc++.h>
bool will_it_fly(std::vector<long> q, long w) {
  std::vector<long> reversed_q = q;
  std::reverse(reversed_q.begin(), reversed_q.end());
  if (q != reversed_q) {
    return false;
  }
  long sum = 0;
  for (long val : q) {
    sum += val;
  }
  return sum <= w;
}","}
int main() {
    auto candidate = will_it_fly;
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));
    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));
}
"
HumanEval/73,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n kõ-y vektɛɛr sẽn tar nimero rãmb n yaa sõor sẽn yaa bilf n segd n toeem n kɩt t'a lebg vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa vektɛɛr sẽn yaa wa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vektɛɛr sẽn yaa vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛg vɛɛ
long smallest_change(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long smallest_change(std::vector<long> arr) {
  long n = arr.size();
  long changes = 0;
  for (long i = 0; i < n / 2; ++i) {
    if (arr[i] != arr[n - 1 - i]) {
      changes++;
    }
  }
  return changes;
}","}
int main() {
    auto candidate = smallest_change;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
}
"
HumanEval/74,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Seb-y tʋʋm-noor sẽn deegd vɛrse-rãmb a yiib n lebg n wat ne vɛrse-rãmb sõor sẽn pa ta vɛrse-rãmb a taabã. Vɛrse-rãmb a yiibã sã n tara vɛrse-rãmb sõor sẽn zem taaba, lebg n wa ne pipi vɛrse-rãmbã. Makr a to yaa >>> total_match (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (t) (
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
  long count1 = 0;
  for (const std::string& s : lst1) {
    count1 += s.length();
  }
  long count2 = 0;
  for (const std::string& s : lst2) {
    count2 += s.length();
  }
  if (count1 <= count2) {
    return lst1;
  } else {
    return lst2;
  }
}","}
int main() {
    auto candidate = total_match;
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi"", (std::string)""admin"", (std::string)""project""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>({(std::string)""4""})), (std::vector<std::string>({(std::string)""1"", (std::string)""2"", (std::string)""3"", (std::string)""4"", (std::string)""5""}))) == (std::vector<std::string>({(std::string)""4""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hii""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)""this""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""this""})), (std::vector<std::string>())) == (std::vector<std::string>()));
}
"
HumanEval/75,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Rɩk-y tʋʋmde sẽn na n lebg n wa ne sɩd sã n yaa tɩ sõor ning b sẽn kõ wã yaa sõor a 3 sẽn yaa pipi sõor n paas tɩ sã n pa woto yaa ziri. B sẽn mi tɩ (a) yaa bilf n yɩɩd 100. Makre: >>> is_multiply_prime((30)) (tõ) 30 = 2 * 3 * 5
bool is_multiply_prime(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_multiply_prime(long a) {
  if (a <= 0) {
    return false;
  }
  std::vector<int> primes;
  std::vector<bool> is_prime(100, true);
  is_prime[0] = is_prime[1] = false;
  for (int p = 2; p * p < 100; p++) {
    if (is_prime[p]) {
      for (int i = p * p; i < 100; i += p)
        is_prime[i] = false;
    }
  }
  for (int p = 2; p < 100; p++) {
    if (is_prime[p]) {
      primes.push_back(p);
    }
  }
  int count = 0;
  for (int p1 : primes) {
    if (a % p1 == 0) {
      count++;
      int rem = a / p1;
      for (int p2 : primes) {
        if (rem % p2 == 0) {
          count++;
          int rem2 = rem / p2;
          for (int p3 : primes) {
            if (rem2 == p3) {
              count++;
              if (count == 3) {
                return true;
              }
              count--;
            }
          }
          count--;
        }
      }
      count--;
    }
  }
  return false;
}","}
int main() {
    auto candidate = is_multiply_prime;
    assert(candidate((5)) == (false));
    assert(candidate((30)) == (true));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (false));
    assert(candidate((125)) == (true));
    assert(candidate((105)) == (true));
    assert(candidate((126)) == (false));
    assert(candidate((729)) == (false));
    assert(candidate((891)) == (false));
    assert(candidate((1001)) == (true));
}
"
HumanEval/76,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y tʋʋmda yaa gʋls tʋʋmde sẽn lebgda sɩd sã n yaa sõor n yaa n-yẽng n yaa zĩrĩ, la zĩrĩ sã n yaa a toore. x yaa zĩrĩ n yaa zĩrĩ n sã n yaa n**int=x Wala makre: >>> is_simple_power((1), (4)) (true) >>> is_simple_power(2), (2)) (true) >>> is_simple_power(8), (2)) (true) >>> is_simple_power(3), (2)) (false) >>> is_simple_power(3), (1)) (false) >>> is_simple_power(5), (3)) (false)
bool is_simple_power(long x, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_simple_power(long x, long n) {
  if (x == n) return true;
  if (n == 1) return x == 1;
  if (n == 0) return x == 0;
  if (x == 0) return false;
  if (x == 1) return true;
  long power = n;
  while (power < x) {
    if (x % n != 0) return false;
    if (power > x / n) return false;
    power *= n;
  }
  return power == x;
}","}
int main() {
    auto candidate = is_simple_power;
    assert(candidate((16), (2)) == (true));
    assert(candidate((143214), (16)) == (false));
    assert(candidate((4), (2)) == (true));
    assert(candidate((9), (3)) == (true));
    assert(candidate((16), (4)) == (true));
    assert(candidate((24), (2)) == (false));
    assert(candidate((128), (4)) == (false));
    assert(candidate((12), (6)) == (false));
    assert(candidate((1), (1)) == (true));
    assert(candidate((1), (12)) == (true));
}
"
HumanEval/77,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y tʋʋm-noor sẽn na n dɩk nimero a n lebg n wa ne sɩd sã n yaa nimero a to sẽn yaa kiib.
bool iscube(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool iscube(long a) {
  if (a == 0) return true;
  long abs_a = std::abs(a);
  long root = round(std::cbrt(abs_a));
  return root * root * root == abs_a;
}","}
int main() {
    auto candidate = iscube;
    assert(candidate((1)) == (true));
    assert(candidate((2)) == (false));
    assert(candidate((-1)) == (true));
    assert(candidate((64)) == (true));
    assert(candidate((180)) == (false));
    assert(candidate((1000)) == (true));
    assert(candidate((0)) == (true));
    assert(candidate((1729)) == (false));
}
"
HumanEval/78,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y paama tʋʋmde n na n gʋls tʋʋmde sẽn deegd sõor sẽn yaa hexadecimal wa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõ
long hex_key(std::string num) {
","#include<assert.h>
#include<bits/stdc++.h>
long hex_key(std::string num) {
  long count = 0;
  std::unordered_set<char> prime_hex = {'2', '3', '5', '7', 'B', 'D'};
  for (char c : num) {
    if (prime_hex.count(c)) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = hex_key;
    assert(candidate((""AB"")) == (1));
    assert(candidate((""1077E"")) == (2));
    assert(candidate((""ABED1A33"")) == (4));
    assert(candidate((""2020"")) == (2));
    assert(candidate((""123456789ABCDEF0"")) == (6));
    assert(candidate((""112233445566778899AABBCCDDEEFF00"")) == (12));
}
"
HumanEval/79,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B na n kõ-y-la sõor sẽn yaa koabg zug n kõ-y tɩ y tek n lebg a yiib-n-soabg. Tʋʋmdã segd n lebgame tɩ yɩ sõor sẽn yaa koabg zug n kõ-y tɩ ned kam fãa makd a yiib-n-soabg sõore. Sõor fãa sẽn be sõor pʋgẽ wã na n yɩɩ '0' bɩ '1'. B na n paama sõor a yiib n paas 'db' sõorã sɩngrẽ la a yaoolemẽ. Sõor a yiib n-soabã bee be n na n sõng ne sõorã sẽn na n yɩ to-to wã. Makre: >>> decimal_to_binary((15)) (""db1111db"") >>> decimal_to_binary(32) (""db100000db"")
std::string decimal_to_binary(long decimal) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string decimal_to_binary(long decimal) {
  if (decimal == 0) {
    return ""db0db"";
  }
  std::string binaryString = """";
  long temp = std::abs(decimal);
  while (temp > 0) {
    binaryString = (temp % 2 == 0 ? ""0"" : ""1"") + binaryString;
    temp /= 2;
  }
  return ""db"" + binaryString + ""db"";
}","}
int main() {
    auto candidate = decimal_to_binary;
    assert(candidate((0)) == (""db0db""));
    assert(candidate((32)) == (""db100000db""));
    assert(candidate((103)) == (""db1100111db""));
    assert(candidate((15)) == (""db1111db""));
}
"
HumanEval/80,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la sõn-vãoog sẽn yaa s. Y tʋʋmda yaa ges sã n yaa sõn-vãoog sẽn yaa hapcpp bɩ pa hapcpp ye. Sõn-vãoog yaa hapcpp sã n yaa a woglem yaa 3 la a fãa yaa 3 n pʋgd taab n yaa toor Wala makre: >>> is_happy(""a"")) (false) >>> is_happy(""aa"")) (false) >>> is_happy(""abcd"")) (true) >>> is_happy((""aabb"")) (false) >>> is_happy(""adb"")) (true) >>> is_happy(""xyy"") (false)
bool is_happy(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_happy(std::string s) {
  if (s.length() < 3) {
    return false;
  }
  for (size_t i = 0; i <= s.length() - 3; ++i) {
    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_happy;
    assert(candidate((""a"")) == (false));
    assert(candidate((""aa"")) == (false));
    assert(candidate((""abcd"")) == (true));
    assert(candidate((""aabb"")) == (false));
    assert(candidate((""adb"")) == (true));
    assert(candidate((""xyy"")) == (false));
    assert(candidate((""iopaxpoi"")) == (true));
    assert(candidate((""iopaxioi"")) == (false));
}
"
HumanEval/81,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yaa semɛstrã yaoolem semen la karen-saambã segd n kõ karen-biisa makrã. Karen-saambã maana a meng sẽn na yɩl n kõ karen-biisa makrã. Bũmb ning sẽn pa yɩ sõma yaa a sẽn pa le tar b sẽn da tũnugd ne n makd karen-biisa wã. A kõo yãmb karen-biisa kẽer GPAs vɛɛktɛɛr tɩ y segd n gʋls tʋʋm-noor sẽn tõe n kõ-b makrã ne tabl ning sẽn pʋgdã: GPA. GPA 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Makre: >>>_grade equation:
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
  std::vector<std::string> letter_grades;
  for (float gpa : grades) {
    if (gpa == 4.0f) {
      letter_grades.push_back(""A+"");
    } else if (gpa > 3.7f) {
      letter_grades.push_back(""A"");
    } else if (gpa > 3.3f) {
      letter_grades.push_back(""A-"");
    } else if (gpa > 3.0f) {
      letter_grades.push_back(""B+"");
    } else if (gpa > 2.7f) {
      letter_grades.push_back(""B"");
    } else if (gpa > 2.3f) {
      letter_grades.push_back(""B-"");
    } else if (gpa > 2.0f) {
      letter_grades.push_back(""C+"");
    } else if (gpa > 1.7f) {
      letter_grades.push_back(""C"");
    } else if (gpa > 1.3f) {
      letter_grades.push_back(""C-"");
    } else if (gpa > 1.0f) {
      letter_grades.push_back(""D+"");
    } else if (gpa > 0.7f) {
      letter_grades.push_back(""D"");
    } else if (gpa > 0.0f) {
      letter_grades.push_back(""D-"");
    } else {
      letter_grades.push_back(""E"");
    }
  }
  return letter_grades;
}","}
int main() {
    auto candidate = numerical_letter_grade;
    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)""A+"", (std::string)""B"", (std::string)""C-"", (std::string)""C"", (std::string)""A-""})));
    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)""D+""})));
    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)""D-""})));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)""E""})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)""D"", (std::string)""D-"", (std::string)""C-"", (std::string)""B"", (std::string)""B+""})));
    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)""E"", (std::string)""D-""})));
}
"
HumanEval/82,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y tʋʋm-noor sẽn na n dɩk n kõ kõ sõn-vãoog n lebg n wa ne sɩd sã n yaa sõor sẽn yaa pipi, bɩ n lebg n wa ne ziri sã n pa woto Makr >>> prime_length((""Hello"")) (true) >>> prime_length((""abcdcba"")) (true) >>> prime_length((""kittens"")) (true) >>> prime_length((""orange"")) (false)
bool prime_length(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(int n) {
  if (n <= 1) return false;
  for (int i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

bool prime_length(std::string string) {
  return is_prime(string.length());
}","}
int main() {
    auto candidate = prime_length;
    assert(candidate((""Hello"")) == (true));
    assert(candidate((""abcdcba"")) == (true));
    assert(candidate((""kittens"")) == (true));
    assert(candidate((""orange"")) == (false));
    assert(candidate((""wow"")) == (true));
    assert(candidate((""world"")) == (true));
    assert(candidate((""MadaM"")) == (true));
    assert(candidate((""Wow"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""HI"")) == (true));
    assert(candidate((""go"")) == (true));
    assert(candidate((""gogo"")) == (false));
    assert(candidate((""aaaaaaaaaaaaaaa"")) == (false));
    assert(candidate((""Madam"")) == (true));
    assert(candidate((""M"")) == (false));
    assert(candidate((""0"")) == (false));
}
"
HumanEval/83,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ sõor sẽn yaa sõma n, lebg n wa ne sõor ning sẽn yaa sõma n-digit sõor sẽn sɩngd bɩ sẽn baasd ne 1 wã.
long starts_one_ends(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long starts_one_ends(long n) {
  if (n <= 0) {
    return 0;
  }
  if (n == 1) {
    return 1;
  }
  long starts_with_one = std::pow(10, n - 1);
  long ends_with_one = std::pow(10, n - 1);
  long starts_and_ends_with_one = std::pow(10, n - 2);
  return starts_with_one + ends_with_one - starts_and_ends_with_one;
}","}
int main() {
    auto candidate = starts_one_ends;
    assert(candidate((1)) == (1));
    assert(candidate((2)) == (18));
    assert(candidate((3)) == (180));
    assert(candidate((4)) == (1800));
    assert(candidate((5)) == (18000));
}
"
HumanEval/84,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ sõor sẽn yaa sõma n yaa N, d na n lebg n wa ne a sifrã sõor sẽn yaa a yiib-n-soabã. Makre >>> solve((1000)) (""1"") >>> solve((150)) (""110"") >>> solve((147)) (""1100"") Variables: @N integer Constraints: 0 ≤ N ≤ 10000. Output: a string of binary number
std::string solve(long N) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string solve(long N) {
  if (N < 0 || N > 10000) {
    return """"; // Or handle invalid input as needed
  }
  long sum = 0;
  std::string s = std::to_string(N);
  for (char c : s) {
    sum += c - '0';
  }
  if (sum == 0) {
    return ""0"";
  }
  std::string binary_sum = """";
  while (sum > 0) {
    binary_sum = (sum % 2 == 0 ? ""0"" : ""1"") + binary_sum;
    sum /= 2;
  }
  return binary_sum;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((1000)) == (""1""));
    assert(candidate((150)) == (""110""));
    assert(candidate((147)) == (""1100""));
    assert(candidate((333)) == (""1001""));
    assert(candidate((963)) == (""10010""));
}
"
HumanEval/85,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ vɛɛtr sẽn pa zaalem sẽn yaa nimero-rãmb sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmb n paas vɛɛtr ning sẽn yaa zãmbã.
long add(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long add(std::vector<long> lst) {
  long sum = 0;
  for (long i = 1; i < lst.size(); i += 2) {
    if (lst[i] % 2 == 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add;
    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));
    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));
    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));
}
"
HumanEval/86,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y sõssã sẽn be sõssã pʋgẽ wã n lebg n wa ne b sẽn gʋlsã. B sẽn gʋls b sẽn gʋlsã yaa sõssã sẽn be sõssã fãa (sẽn welg ne zĩiga) n lebg n wa ne gom-paall sẽn be sõssã fãa sẽn be n sigl ne sẽn yikd n dabd n tikd ASCII yõodo.
std::string anti_shuffle(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string anti_shuffle(std::string s) {
  std::string result = """";
  std::string current_word = """";
  for (char c : s) {
    if (c == ' ') {
      std::sort(current_word.begin(), current_word.end());
      result += current_word;
      result += c;
      current_word = """";
    } else {
      current_word += c;
    }
  }
  std::sort(current_word.begin(), current_word.end());
  result += current_word;
  return result;
}","}
int main() {
    auto candidate = anti_shuffle;
    assert(candidate((""Hi"")) == (""Hi""));
    assert(candidate((""hello"")) == (""ehllo""));
    assert(candidate((""number"")) == (""bemnru""));
    assert(candidate((""abcd"")) == (""abcd""));
    assert(candidate((""Hello World!!!"")) == (""Hello !!!Wdlor""));
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hi. My name is Mister Robot. How are you?"")) == ("".Hi My aemn is Meirst .Rboot How aer ?ouy""));
}
"
HumanEval/87,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n kõ-y tɩ y kõ-y tɩ y kõ-y tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ tɩ y kõ
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
  std::vector<std::tuple<long, long>> coordinates;
  for (long i = 0; i < lst.size(); ++i) {
    std::vector<std::pair<long, long>> row_coords;
    for (long j = 0; j < lst[i].size(); ++j) {
      if (lst[i][j] == x) {
        row_coords.push_back({j, i});
      }
    }
    std::sort(row_coords.rbegin(), row_coords.rend());
    for (const auto& coord_pair : row_coords) {
      coordinates.emplace_back(coord_pair.second, coord_pair.first);
    }
  }
  return coordinates;
}","}
int main() {
    auto candidate = get_row;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));
    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));
}
"
HumanEval/88,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n kõ-y vɛɛtr sẽn pa neegse, y na n lebg n kõ-y vɛɛtrã vɛɛtrã sẽn be wã n pʋɩ-a tɩ b sõd-a tɩ b rʋʋd-a tɩ b sã n sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a tɩ b sõd-a.
std::vector<long> sort_array(std::vector<long> array) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> sort_array(std::vector<long> array) {
  std::vector<long> sorted_array = array;
  if (sorted_array.empty()) {
    return sorted_array;
  }
  long first = 0;
  long last = sorted_array.size() - 1;
  if ((first + last) % 2 != 0) {
    std::sort(sorted_array.begin(), sorted_array.end());
  } else {
    std::sort(sorted_array.rbegin(), sorted_array.rend());
  }
  return sorted_array;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));
    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));
    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));
    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));
}
"
HumanEval/89,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B segd n wẽnega b sẽn na n wẽnemd b sẽn na n lebg n gʋlsd lɛtbã n wa ne b sẽn na n gʋlsd lɛtbã n lebg n gʋlsd lɛtbã n lebg n gʋlsd lɛtbã n lebg n gʋlsd lɛtbã. Wala makre: >>> encrypt((""hi"")) (""lm"") >>> encrypt((""asdfghjkl"")) (""ewhjklnop"") >>> encrypt((""gf"")) (""kj"") >>> encrypt((""et"")) (""ix"")
std::string encrypt(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encrypt(std::string s) {
  std::string encrypted_s = """";
  int shift = 2 * 2;
  for (char c : s) {
    if (isalpha(c)) {
      char base = islower(c) ? 'a' : 'A';
      encrypted_s += static_cast<char>((c - base + shift) % 26 + base);
    } else {
      encrypted_s += c;
    }
  }
  return encrypted_s;
}","}
int main() {
    auto candidate = encrypt;
    assert(candidate((""hi"")) == (""lm""));
    assert(candidate((""asdfghjkl"")) == (""ewhjklnop""));
    assert(candidate((""gf"")) == (""kj""));
    assert(candidate((""et"")) == (""ix""));
    assert(candidate((""faewfawefaewg"")) == (""jeiajeaijeiak""));
    assert(candidate((""hellomyfriend"")) == (""lippsqcjvmirh""));
    assert(candidate((""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")) == (""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl""));
    assert(candidate((""a"")) == (""e""));
}
"
HumanEval/90,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la vɛɛs-rãmb vɛɛse. gʋls-y tʋʋm-noor sẽn boond tɩ next_smallest() sẽn na n lebg n wa ne vɛɛs-rãmb a yiib-n-soabã sẽn yaa vɛɛs-rãmb a yiib-n-soabã. lebg n wa ne a ye sã n ka be ye. >>> next_smallest(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 4, (long) 5}))) 2 >>> next_smallest((std::vector<long>({long) 5, (long) 1, (long) 4, (long) 3, (long) 2))) >>> 2 next_smallest(std::vector<long>())) std::nullopt >>> next_smallest(std::vector<long>{(long) 1, (long) 1))) std::nullopt
std::optional<long> next_smallest(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> next_smallest(std::vector<long> lst) {
  if (lst.size() < 2) {
    return std::nullopt;
  }
  std::sort(lst.begin(), lst.end());
  if (lst[0] == lst[1]) {
    return std::nullopt;
  }
  return lst[1];
}","}
int main() {
    auto candidate = next_smallest;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);
    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);
}
"
HumanEval/91,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B na n kõ-y-la gom-biis sõor sẽn yaa sõor sẽn yaa toog n sõd n bãng tɩ yaa wakat a wãn la y na n wa yã-a. Y na n yãame tɩ yaa wakat a wãn la y na n yã-a. Y na n yãame tɩ yaa wakat a wãn la y na n yã-a.
long is_bored(std::string S) {
","#include<assert.h>
#include<bits/stdc++.h>
long is_bored(std::string S) {
  long boredom_count = 0;
  std::string current_sentence = """";
  for (char c : S) {
    current_sentence += c;
    if (c == '.' || c == '?' || c == '!') {
      std::stringstream ss(current_sentence);
      std::string first_word;
      ss >> first_word;
      if (first_word == ""I"") {
        boredom_count++;
      }
      current_sentence = """";
    }
  }
  return boredom_count;
}","}
int main() {
    auto candidate = is_bored;
    assert(candidate((""Hello world"")) == (0));
    assert(candidate((""Is the sky blue?"")) == (0));
    assert(candidate((""I love It !"")) == (1));
    assert(candidate((""bIt"")) == (0));
    assert(candidate((""I feel good today. I will be productive. will kill It"")) == (2));
    assert(candidate((""You and I are going for a walk"")) == (0));
}
"
HumanEval/92,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yãk fɩkɛɛr sẽn na n dɩkd sõor a 3. A sã n lebg n wa ne sõor a ye sẽn zem ne a yiib a taabã sõor sẽn na n yɩll tɩ b lebg n wa ne sɩda. A sã n lebg n wa ne ka sɩda, a sã n ka sɩda. Makre >>> any_int{(float{(5)), (float{(2)), (float{(7))) (true) >>> any_int{((float{(3)), (float{(2)), (float{(2))) (false) >>> any_int{(float{(3)), (float{(-2)), (float{(1))) (true) >>> any_int{(((3.6f), (-2.2f), (float{(2))) (false)
bool any_int(float x, float y, float z) {
","#include<assert.h>
#include<bits/stdc++.h>
bool any_int(float x, float y, float z) {
  if (std::floor(x) != x || std::floor(y) != y || std::floor(z) != z) {
    return false;
  }
  long ix = static_cast<long>(x);
  long iy = static_cast<long>(y);
  long iz = static_cast<long>(z);
  return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);
}","}
int main() {
    auto candidate = any_int;
    assert(candidate((float(2)), (float(3)), (float(1))) == (true));
    assert(candidate((2.5f), (float(2)), (float(3))) == (false));
    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));
    assert(candidate((float(2)), (float(6)), (float(2))) == (false));
    assert(candidate((float(4)), (float(2)), (float(2))) == (true));
    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));
    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));
    assert(candidate((float(2)), (float(1)), (float(1))) == (true));
    assert(candidate((float(3)), (float(4)), (float(7))) == (true));
    assert(candidate((3.0f), (float(4)), (float(7))) == (false));
}
"
HumanEval/93,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y tʋʋm-noor sẽn na n dɩk koɛɛg n ning n ning sẽn na n yɩll tɩ lɛtbã fãa lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
std::string encode(std::string message) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encode(std::string message) {
  std::string encoded_message = """";
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  std::map<char, char> vowel_map = {
      {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'},
      {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}};
  for (char c : message) {
    if (isalpha(c)) {
      char swapped_case = islower(c) ? toupper(c) : tolower(c);
      if (vowels.count(c)) {
        encoded_message += vowel_map[c];
      } else {
        encoded_message += swapped_case;
      }
    } else {
      encoded_message += c;
    }
  }
  return encoded_message;
}","}
int main() {
    auto candidate = encode;
    assert(candidate((""TEST"")) == (""tgst""));
    assert(candidate((""Mudasir"")) == (""mWDCSKR""));
    assert(candidate((""YES"")) == (""ygs""));
    assert(candidate((""This is a message"")) == (""tHKS KS C MGSSCGG""));
    assert(candidate((""I DoNt KnOw WhAt tO WrItE"")) == (""k dQnT kNqW wHcT Tq wRkTg""));
}
"
HumanEval/94,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yãk-y n ges-y vɛɛs-rãmb a wãn sẽn be vɛɛs-rãmb a taab pʋsẽ, n na n ges-y vɛɛs-rãmb nins sẽn yaa kãsem dãmbã sẽn be vɛɛs-rãmb a taab pʋsẽ wã sẽn tõe n sõng-y to-to.
long skjkasdkd(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

long sum_digits(long n) {
  long sum = 0;
  std::string s = std::to_string(n);
  for (char c : s) {
    sum += c - '0';
  }
  return sum;
}

long skjkasdkd(std::vector<long> lst) {
  long largest_prime = -1;
  for (long num : lst) {
    if (num > largest_prime && is_prime(num)) {
      largest_prime = num;
    }
  }
  if (largest_prime == -1) {
    return 0;
  }
  return sum_digits(largest_prime);
}","}
int main() {
    auto candidate = skjkasdkd;
    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));
    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));
    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));
    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)8191}))) == (19));
    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));
    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));
}
"
HumanEval/95,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Wala makre: >>> check_dict_case,{""},{""b"",{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},{""},},{""},{""},{""},},{""},{""},},{""},{""},},{""},},{""},},{""},{""},{""},},{""},},},{""},},{""},},{""},},{""},},},{""}
bool check_dict_case(std::map<std::string,std::string> dict) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_dict_case(std::map<std::string,std::string> dict) {
  if (dict.empty()) {
    return false;
  }
  bool first_key_lower = false;
  bool first_key_upper = false;
  auto it = dict.begin();
  if (!it->first.empty() && islower(it->first[0])) {
    first_key_lower = true;
  } else if (!it->first.empty() && isupper(it->first[0])) {
    first_key_upper = true;
  } else {
    return false;
  }
  for (const auto& pair : dict) {
    if (pair.first.empty()) {
      return false;
    }
    bool current_lower = true;
    bool current_upper = true;
    for (char c : pair.first) {
      if (!islower(c)) {
        current_lower = false;
      }
      if (!isupper(c)) {
        current_upper = false;
      }
    }
    if (first_key_lower && !current_lower) {
      return false;
    }
    if (first_key_upper && !current_upper) {
      return false;
    }
    if (!first_key_lower && !first_key_upper) {
        if (current_lower) first_key_lower = true;
        else if (current_upper) first_key_upper = true;
        else return false;
    }
  }
  return first_key_lower || first_key_upper;
}","}
int main() {
    auto candidate = check_dict_case;
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""b"", ""banana""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""A"", ""banana""}, {""B"", ""banana""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""5"", ""banana""}, {""a"", ""apple""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""Name"", ""John""}, {""Age"", ""36""}, {""City"", ""Houston""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""STATE"", ""NC""}, {""ZIP"", ""12345""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""fruit"", ""Orange""}, {""taste"", ""Sweet""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>())) == (false));
}
"
HumanEval/96,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D rɩkda fɩkɛɛr sẽn pa wẽnemd n lebg n lebg pipi fɩkɛɛr n sẽn yaa pipi sõor n yɩɩd n. Wala makre: >>> count_up_to((5)) (std::vector<long>({long) 2, (long) 3})) >>> count_up_to(11)) (std::vector<long>({long) 2, (long) 3, (long) 5, (long) 7})) >>> count_up_to(0)) (std::vector<long>)) >>> count_up_to(20)) (std::vector<long>{(long) 2, (long) 3, (long) 5, (long) 7, (long) 11, (long) 13, (long) 17, (long) 19} >>> count_up_1) (std::vector<long> >>> count_up_to(18) (std::vector<long>11, (long) 3, (long) 5, (long) 17)) (std:vector<long>18) (std) 3, (long) 11, (long) 3, (long) (long) 17)) (std (long)
std::vector<long> count_up_to(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long num) {
  if (num <= 1) return false;
  for (long i = 2; i * i <= num; ++i) {
    if (num % i == 0) return false;
  }
  return true;
}

std::vector<long> count_up_to(long n) {
  std::vector<long> primes;
  if (n <= 2) {
    return primes;
  }
  for (long i = 2; i < n; ++i) {
    if (is_prime(i)) {
      primes.push_back(i);
    }
  }
  return primes;
}","}
int main() {
    auto candidate = count_up_to;
    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));
    assert(candidate((0)) == (std::vector<long>()));
    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));
    assert(candidate((1)) == (std::vector<long>()));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));
    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));
}
"
HumanEval/97,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D rɩk makr n wilg tɩ f sã n dɩkd f sẽn dat n gʋlsã n lebg n wa ne f sẽn dat n gʋlsã, f na n paama f sẽn dat n gʋlsã.
long multiply(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>
long multiply(long a, long b) {
  long unit_a = std::abs(a) % 10;
  long unit_b = std::abs(b) % 10;
  return unit_a * unit_b;
}","}
int main() {
    auto candidate = multiply;
    assert(candidate((148), (412)) == (16));
    assert(candidate((19), (28)) == (72));
    assert(candidate((2020), (1851)) == (0));
    assert(candidate((14), (-15)) == (20));
    assert(candidate((76), (67)) == (42));
    assert(candidate((17), (27)) == (49));
    assert(candidate((0), (1)) == (0));
    assert(candidate((0), (0)) == (0));
}
"
HumanEval/98,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sãn yaa ne sõor sẽn yaa s, sõd-y koees nins sẽn yaa kãn-kãe ne vokaal-rãmb sẽn yaa zuloees sẽn yaa zuloees n pa kẽed ne b sẽn gʋlsã. Wala makre: >>> count_upper (((""aBCdEf"")) (1) >>> count_upper (((""abcdefg"")) (0) >>> count_upper (((""dBBE"")) (0)
long count_upper(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long count_upper(std::string s) {
  long count = 0;
  std::unordered_set<char> upper_vowels = {'A', 'E', 'I', 'O', 'U'};
  for (long i = 0; i < s.length(); ++i) {
    if (i % 2 == 0 && upper_vowels.count(s[i])) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_upper;
    assert(candidate((""aBCdEf"")) == (1));
    assert(candidate((""abcdefg"")) == (0));
    assert(candidate((""dBBE"")) == (0));
    assert(candidate((""B"")) == (0));
    assert(candidate((""U"")) == (1));
    assert(candidate(("""")) == (0));
    assert(candidate((""EEEE"")) == (2));
}
"
HumanEval/99,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yãk fõore n na n dɩk sõor sẽn yaa wa sõor n lebg n wa ne a sẽn kolg a soaba. Sã n yaa tɩ sõorã yaa sẽn zãr ne sõor a yiib n ta a ye, bɩ f maan-a tɩ ta a ye n zãr ne zéro. Makre >>> sẽn kolg_a_zãrma (((""10"")) (10) >>> sẽn kolg_a_zãrma (((""15.3"")) (15): Zéro wã zãr ne zéro wã rat n yeelame tɩ sã n yaa tɩ sõor ning sẽn kõ wã yaa sẽn zãr ne a zéro, a soab ning f sẽn segd n lebg n wa ne wã yaa sẽn zãr ne zéro wã. Wala makre, sẽn kolg_a_zãrma (((""14.5"") segd n lebg n wa ne 15 la sẽn kolg_a_zãrma ((-14.5"") segd n lebg n wa ne -15.
long closest_integer(std::string value) {
","#include<assert.h>
#include<bits/stdc++.h>
long closest_integer(std::string value) {
  double num = std::stod(value);
  if (num >= 0) {
    if (num - std::floor(num) <= 0.5) {
      return static_cast<long>(std::floor(num));
    } else {
      return static_cast<long>(std::ceil(num));
    }
  } else {
    if (std::ceil(num) - num <= 0.5) {
      return static_cast<long>(std::ceil(num));
    } else {
      return static_cast<long>(std::floor(num));
    }
  }
}","}
int main() {
    auto candidate = closest_integer;
    assert(candidate((""10"")) == (10));
    assert(candidate((""14.5"")) == (15));
    assert(candidate((""-15.5"")) == (-16));
    assert(candidate((""15.3"")) == (15));
    assert(candidate((""0"")) == (0));
}
"
HumanEval/100,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n paam tɩ y sõdga sõor sẽn yaa sõma n kõ, y segd n maana kug n tʋʋl n kõ. Pipi tʋʋl tara kug n. Kugr sõor sẽn be tʋʋl-n-soaba yaa: - sẽn pʋgd n yɩll n yɩ n pa yɩ n pa yɩ n pa yɩ n - sẽn pʋgd n yɩll n yɩ n pa yɩ n pa yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n yɩ n
std::vector<long> make_a_pile(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> make_a_pile(long n) {
  std::vector<long> pile;
  long current_stones = n;
  for (int i = 0; i < n; ++i) {
    pile.push_back(current_stones);
    if (current_stones % 2 != 0) {
      current_stones += 2;
    } else {
      current_stones += 2;
    }
  }
  return pile;
}","}
int main() {
    auto candidate = make_a_pile;
    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));
    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));
    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));
    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));
    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));
}
"
HumanEval/101,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y na n paama gom-biis sẽn welg ne vɛrse-rãmb bɩ zĩ-zãrs n na n welg-b n lebg gom-biis n lebg n wa ne gom-biis vɛrse-rãmb vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb sẽn yaa vɛrse-rãmb-rãmb-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r
std::vector<std::string> words_string(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> words_string(std::string s) {
  std::vector<std::string> words;
  std::string current_word;
  for (char c : s) {
    if (c == ',' || c == ' ') {
      if (!current_word.empty()) {
        words.push_back(current_word);
        current_word = """";
      }
    } else {
      current_word += c;
    }
  }
  if (!current_word.empty()) {
    words.push_back(current_word);
  }
  return words;
}","}
int main() {
    auto candidate = words_string;
    assert(candidate((""Hi, my name is John"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name"", (std::string)""is"", (std::string)""John""})));
    assert(candidate((""One, two, three, four, five, six"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate((""Hi, my name"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name""})));
    assert(candidate((""One,, two, three, four, five, six,"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""ahmed     , gamal"")) == (std::vector<std::string>({(std::string)""ahmed"", (std::string)""gamal""})));
}
"
HumanEval/102,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Tʋʋm kãnga rɩkda sõor a yiib sẽn yaa sõma x la y n lebg n wa ne sõor sẽn yaa sõma n yɩɩd sẽn be zuloees a yiib pʋgẽ [x, y] sẽn kẽed ne taaba. Sã n pa be sõor a woto, tʋʋma segd n lebg n wa ne -1. Wala makre: >>> choose_num((12), (15)) (14) >>> choose_num((13), (12)) (-1)
long choose_num(long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>
long choose_num(long x, long y) {
  if (x > y) {
    return -1;
  }
  long end = y;
  if (end % 2 != 0) {
    end--;
  }
  if (end < x) {
    return -1;
  }
  return end;
}","}
int main() {
    auto candidate = choose_num;
    assert(candidate((12), (15)) == (14));
    assert(candidate((13), (12)) == (-1));
    assert(candidate((33), (12354)) == (12354));
    assert(candidate((5234), (5233)) == (-1));
    assert(candidate((6), (29)) == (28));
    assert(candidate((27), (10)) == (-1));
    assert(candidate((7), (7)) == (-1));
    assert(candidate((546), (546)) == (546));
}
"
HumanEval/103,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// B kõ-y-la sõor a yiib sẽn yaa sõma n paas m, la y tʋʋmda yaa tɩ bãng sõor sẽn yaa sõma n ta m wã fãa pʋɩ-sʋka (n la m sẽn naag n be be wã). Zĩig-y n paam n ta sõor sẽn yaa sõma n yao n lebg a yiib-n-soab sõore. Sã n yaa n yɩɩd m, lebg n wa ne -1. Makre: >>> rounded_avg((1), (5)) ""0b11"" >>> rounded_avg(7), (5)) -1 >>> rounded_avg(10), (20)) ""0b1111"" >>> rounded_avg(20), (33) ""0b11010""
Union_std_string_long rounded_avg(long n, long m) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;
    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_string_long rounded_avg(long n, long m) {
  if (n > m) {
    return Union_std_string_long(-1);
  }
  double sum = 0;
  for (long i = n; i <= m; ++i) {
    sum += i;
  }
  double avg = sum / (m - n + 1);
  long rounded_avg_long = std::round(avg);
  if (rounded_avg_long == 0) {
    return Union_std_string_long(""0b0"");
  }
  std::string binary_string = """";
  long temp = std::abs(rounded_avg_long);
  while (temp > 0) {
    binary_string = (temp % 2 == 0 ? ""0"" : ""1"") + binary_string;
    temp /= 2;
  }
  return Union_std_string_long(""0b"" + binary_string);
}","}
int main() {
    auto candidate = rounded_avg;
    assert(candidate((1), (5)) == ""0b11"");
    assert(candidate((7), (13)) == ""0b1010"");
    assert(candidate((964), (977)) == ""0b1111001010"");
    assert(candidate((996), (997)) == ""0b1111100100"");
    assert(candidate((560), (851)) == ""0b1011000010"");
    assert(candidate((185), (546)) == ""0b101101110"");
    assert(candidate((362), (496)) == ""0b110101101"");
    assert(candidate((350), (902)) == ""0b1001110010"");
    assert(candidate((197), (233)) == ""0b11010111"");
    assert(candidate((7), (5)) == -1);
    assert(candidate((5), (1)) == -1);
    assert(candidate((5), (5)) == ""0b101"");
}
"
HumanEval/104,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ-a vɛɛtr sẽn tar koees sẽn yaa sõma x, a lebsa vɛɛtr sẽn yaa sõma n pa tar vɛɛtr sẽn yaa sõma ye. B sẽn lebg n wa wã segd n yɩɩ sẽn na n paasdẽ. Wala makre: >>> unique_digits(std::vector<long>({(long) 15, (long) 33, (long) 1422, (long) 1}))) (std::vector<long>{(long) 1, (long) 15, (long) 33})) >>> unique_digits(std::vector<long>{(long) 152, (long) 323, (long) 1422, (long) 10}))) (std::vector<long>(long))
std::vector<long> unique_digits(std::vector<long> x) {
","#include<assert.h>
#include<bits/stdc++.h>
bool has_even_digit(long n) {
  std::string s = std::to_string(n);
  for (char c : s) {
    if ((c - '0') % 2 == 0) {
      return true;
    }
  }
  return false;
}

std::vector<long> unique_digits(std::vector<long> x) {
  std::vector<long> result;
  for (long val : x) {
    if (!has_even_digit(val)) {
      result.push_back(val);
    }
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = unique_digits;
    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));
    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));
    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));
}
"
HumanEval/105,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Wala makre: >>> by_length(std::vector<long>{(long) 2, (long) 1, (long) 1, (long) 4, (long) 5, (long) 8, (long) 2, (long) 3}))) (std::vector<std::string>{(std::string) ""Eight"", (std::string) ""Five"", (std::string) ""Four"", (std::string) ""Three"", (std::two"", (std::three) ""Two"", (std::string) ""Four"", (std::string) ""Five"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string)) (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""One"", (std::string) ""long)) (long)) (long)) (long)) (long) (long) (long (long) (long)) (long) (long (long) (long) (long (long) (long) (long) (long (long) (long (long) (long (long) (long) (long (long (long)) (long)) (long (long)) (long)) (long (long)) (long (long)) (long (long)) (long)) (long)) (long)) (long (long)) (long)) (long)) (long)) (long)) (long)) (long (long)) (long)) (long)) (long)) (long)) (long)) (long (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long (long)) (long)) (long)) (long)) (long))
std::vector<std::string> by_length(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> by_length(std::vector<long> arr) {
  std::vector<long> valid_numbers;
  std::vector<std::string> result;
  std::map<long, std::string> number_names = {
      {1, ""One""}, {2, ""Two""}, {3, ""Three""}, {4, ""Four""}, {5, ""Five""},
      {6, ""Six""}, {7, ""Seven""}, {8, ""Eight""}, {9, ""Nine""}};
  for (long num : arr) {
    if (num >= 1 && num <= 9) {
      valid_numbers.push_back(num);
    }
  }
  std::sort(valid_numbers.begin(), valid_numbers.end());
  std::reverse(valid_numbers.begin(), valid_numbers.end());
  for (long num : valid_numbers) {
    result.push_back(number_names[num]);
  }
  return result;
}","}
int main() {
    auto candidate = by_length;
    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)""Eight"", (std::string)""Five"", (std::string)""Four"", (std::string)""Three"", (std::string)""Two"", (std::string)""Two"", (std::string)""One"", (std::string)""One""})));
    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)""One""})));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)""Three"", (std::string)""Two"", (std::string)""One""})));
    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)""Nine"", (std::string)""Eight"", (std::string)""Four""})));
}
"
HumanEval/106,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D rɩk f sẽn dɩkd n n yɩ wa paramɛt n lebg n wa ne vektɛɛr sẽn tar n-gãrã, tɩ elemẽ wã sẽn be n-tikrã i wã makda i wã sẽn yaa faktoriallã, sã n yaa t'a i yaa pa-yende, bɩ sã n pa woto, yaa sõor nins sẽn yit 1 n ta i wã sõorã. i sɩngda ne 1. i wã faktoriall yaa sõor nins sẽn yit 1 n ta i wã sẽn yɩ to-to wã. Makre: >>> f((5)) (std::vector<long>{(long) 1, (long) 2, (long) 6, (long) 24, (long) 15}))
std::vector<long> f(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> f(long n) {
  std::vector<long> result;
  for (long i = 1; i <= n; ++i) {
    if (i % 2 == 0) {
      long factorial = 1;
      for (long j = 1; j <= i; ++j) {
        factorial *= j;
      }
      result.push_back(factorial);
    } else {
      long sum = 0;
      for (long j = 1; j <= i; ++j) {
        sum += j;
      }
      result.push_back(sum);
    }
  }
  return result;
}","}
int main() {
    auto candidate = f;
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));
}
"
HumanEval/107,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sã n kõ-a sõor sẽn yaa sõma n kõ, lebg n wa ne tuple sẽn tar sõor sẽn yaa toor-toor la sẽn yaa toor-toor sẽn be zãngã pʋgẽ. Makre 1: >>> even_odd_palindrome (((3)) (std::make_tuple (((1, 2)) Bãngr-gomde: Integer palindrome yaa 1, 2, 3. a ye yaa toor-toor la a yiib yaa toor-toore. Makre 2: >>> even_odd_palindrome (((12)) (std::make_tuple (((4, 6)) Bãngr-gomde: Integer palindrome yaa 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. a naasã yaa toor-toore, la a 6 yaa toor-toore.
std::tuple<long, long> even_odd_palindrome(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_palindrome(long num) {
  std::string s = std::to_string(num);
  std::string reversed_s = s;
  std::reverse(reversed_s.begin(), reversed_s.end());
  return s == reversed_s;
}

std::tuple<long, long> even_odd_palindrome(long n) {
  long even_count = 0;
  long odd_count = 0;
  for (long i = 1; i <= n; ++i) {
    if (is_palindrome(i)) {
      if (i % 2 == 0) {
        even_count++;
      } else {
        odd_count++;
      }
    }
  }
  return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_palindrome;
    assert(candidate((123)) == (std::make_tuple(8, 13)));
    assert(candidate((12)) == (std::make_tuple(4, 6)));
    assert(candidate((3)) == (std::make_tuple(1, 2)));
    assert(candidate((63)) == (std::make_tuple(6, 8)));
    assert(candidate((25)) == (std::make_tuple(5, 6)));
    assert(candidate((19)) == (std::make_tuple(4, 6)));
    assert(candidate((9)) == (std::make_tuple(4, 5)));
    assert(candidate((1)) == (std::make_tuple(0, 1)));
}
"
HumanEval/108,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y count_nums sẽn yaa tʋʋm-noor sẽn dɩkd nimero-rãmb n lebg n wat ne elemẽ-rãmb sõor sẽn tar nimero-rãmb sõor sẽn yaa > 0. Sã n yaa nimero sẽn yaa wẽnga, a pipi nimero sẽn tar n gʋlsd na n yɩɩ wẽnga: Wala makre, -123 tara nimero-rãmb sẽn gʋlsd n yaa -1, 2, la 3. >>> count_nums{(std::vector<long>())) (0) >>> count_nums{(std::vector<long>{(long) -1, (long) -11, (long) -11}))) (1) >>> count_nums{(std::vector<long>{(long) -1, (long) -1, (long) -2} (3))))
long count_nums(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_digits_signed(long n) {
  std::string s = std::to_string(n);
  long sum = 0;
  for (long i = 0; i < s.length(); ++i) {
    if (i == 0 && s[i] == '-') {
      if (s.length() > 1) {
        sum -= (s[i + 1] - '0');
        i++;
      }
    } else {
      sum += (s[i] - '0');
    }
  }
  return sum;
}

long count_nums(std::vector<long> arr) {
  long count = 0;
  for (long num : arr) {
    if (sum_digits_signed(num) > 0) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_nums;
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));
    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));
    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
}
"
HumanEval/109,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D tara vektɛɛr sẽn tar nimero rãmb N n boond tɩ 'arr' sẽn yaa vektɛɛr sẽn yaa vɛɛse. Y tʋʋmda yaa bãng y sã n tõe n paama vektɛɛr sẽn welg ne sor sẽn pa na n boog n paase, y sã n maan tʋʋm-kãngã vektɛɛr ning sẽn kõ wã zugu: y tõe n maana sẽn kẽed ne rɩtg n toeem sor naoor wʋsgo. Vektɛɛr a ye sẽn kẽed ne rɩtg n toeem sorã rat n yeelame tɩ y sã n toeem vektɛɛrã fãa zĩig a ye sẽn kẽed ne rɩtg n toeem sorã. Vektɛɛrã yaoolem vɛɛs na n kẽe sɩngr zĩigẽ vektɛɛrã pʋgẽ, sẽn dat n yeel tɩ 0 soabã sẽn kẽed ne vɛɛs-kãng zugu. Y sã n tõe n paam vɛɛs-kãng sẽn welg ne vɛɛs-kãng sẽn sɩngrã, bɩ y lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n n n n n lebg n lebg n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
bool move_one_ball(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
bool move_one_ball(std::vector<long> arr) {
  if (arr.empty()) {
    return true;
  }
  int n = arr.size();
  std::vector<long> sorted_arr = arr;
  std::sort(sorted_arr.begin(), sorted_arr.end());
  for (int shift = 0; shift < n; ++shift) {
    std::vector<long> shifted_arr(n);
    for (int i = 0; i < n; ++i) {
      shifted_arr[i] = arr[(i - shift + n) % n];
    }
    if (shifted_arr == sorted_arr) {
      return true;
    }
  }
  return false;
}","}
int main() {
    auto candidate = move_one_ball;
    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
}
"
HumanEval/110,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n tõe n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n tek n n tek n n n tek n tek n n n n tek n tek n n tek n n n tek n n n n n n tek n n n n n tek n n n n n n n n n tek n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
  long odd_count_lst1 = 0;
  for (long num : lst1) {
    if (num % 2 != 0) {
      odd_count_lst1++;
    }
  }
  long even_count_lst2 = 0;
  for (long num : lst2) {
    if (num % 2 == 0) {
      even_count_lst2++;
    }
  }
  if (even_count_lst2 >= odd_count_lst1) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = exchange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (""YES""));
}
"
HumanEval/111,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ-a sõor sẽn makd lɛt-bil sẽn welg ne zĩiga, d na n lebg n wa ne lɛtr ning sẽn yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩl n yɩl n yɩl n yɩl n yɩl n yɩl n yɩl n yɩl n yɩl n yɩl n yɩl n yɩl n yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl yɩl
std::map<std::string,long> histogram(std::string test) {
","#include<assert.h>
#include<bits/stdc++.h>
std::map<std::string,long> histogram(std::string test) {
  std::map<std::string, long> counts;
  std::string current_word;
  std::stringstream ss(test);
  while (ss >> current_word) {
    counts[current_word]++;
  }
  if (counts.empty()) {
    return {};
  }
  long max_count = 0;
  for (const auto& pair : counts) {
    if (pair.second > max_count) {
      max_count = pair.second;
    }
  }
  std::map<std::string, long> result;
  for (const auto& pair : counts) {
    if (pair.second == max_count) {
      result[pair.first] = pair.second;
    }
  }
  return result;
}","}
int main() {
    auto candidate = histogram;
    assert(candidate((""a b b a"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c a b"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c d g"")) == (std::map<std::string,long>({{""a"", 1}, {""b"", 1}, {""c"", 1}, {""d"", 1}, {""g"", 1}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate((""b b b b a"")) == (std::map<std::string,long>({{""b"", 4}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate(("""")) == (std::map<std::string,long>()));
    assert(candidate((""a"")) == (std::map<std::string,long>({{""a"", 1}})));
}
"
HumanEval/112,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D paamame tɩ b kõ tõnd sõn-vãoog a yiib sẽn boond tɩ s la c, tɩ d segd n yiis a pʋgẽ n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋlsd n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls n gʋls
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
","#include<assert.h>
#include<bits/stdc++.h>
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
  std::string result = """";
  std::unordered_set<char> chars_to_delete(c.begin(), c.end());
  for (char ch : s) {
    if (chars_to_delete.find(ch) == chars_to_delete.end()) {
      result += ch;
    }
  }
  std::string reversed_result = result;
  std::reverse(reversed_result.begin(), reversed_result.end());
  return std::make_tuple(result, result == reversed_result);
}","}
int main() {
    auto candidate = reverse_delete;
    assert(candidate((""abcde""), (""ae"")) == (std::make_tuple(""bcd"", false)));
    assert(candidate((""abcdef""), (""b"")) == (std::make_tuple(""acdef"", false)));
    assert(candidate((""abcdedcba""), (""ab"")) == (std::make_tuple(""cdedc"", true)));
    assert(candidate((""dwik""), (""w"")) == (std::make_tuple(""dik"", false)));
    assert(candidate((""a""), (""a"")) == (std::make_tuple("""", true)));
    assert(candidate((""abcdedcba""), ("""")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""abcdedcba""), (""v"")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""vabba""), (""v"")) == (std::make_tuple(""abba"", true)));
    assert(candidate((""mamma""), (""mia"")) == (std::make_tuple("""", true)));
}
"
HumanEval/113,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n paam tɩ b kõ-y sõor sẽn yaa wa vɛɛs-rãmb sõor, tɩ vɛɛs fãa yaa sõor sẽn yaa wa vɛɛs-rãmb sõor bala, lebg n kõ-y vɛɛs-rãmb sõor. Vɛɛs-rãmb sõor fãa yaa ""vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor vɛɛs-rãmb sõor sẽn yaa toor.
std::vector<std::string> odd_count(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> odd_count(std::vector<std::string> lst) {
  std::vector<std::string> result;
  for (const std::string& s : lst) {
    int count = 0;
    for (char c : s) {
      if ((c - '0') % 2 != 0) {
        count++;
      }
    }
    std::string count_str = std::to_string(count);
    std::string modified_s = s;
    for (char& c : modified_s) {
      if (isdigit(c) && (c - '0') % 2 != 0) {
        c = count_str[0];
      }
    }
    result.push_back(""the number of odd elements "" + count_str + ""n the str"" + modified_s + ""ng "" + modified_s + "" of the "" + modified_s + ""nput."");
  }
  return result;
}","}
int main() {
    auto candidate = odd_count;
    assert(candidate((std::vector<std::string>({(std::string)""1234567""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 4n the str4ng 4 of the 4nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""3"", (std::string)""11111111""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 1n the str1ng 1 of the 1nput."", (std::string)""the number of odd elements 8n the str8ng 8 of the 8nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""271"", (std::string)""137"", (std::string)""314""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 2n the str2ng 2 of the 2nput."", (std::string)""the number of odd elements 3n the str3ng 3 of the 3nput."", (std::string)""the number of odd elements 2n the str2ng 2 of the 2nput.""})));
}
"
HumanEval/114,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ fɩtr n yaa nimero, bao fɩtr fãa sẽn pa zʋʋg n yaa nimero wã nenga. Makre >>> minSubArraySum(((std::vector<long>({long) 2, (long) 3, (long) 4, (long) 1, (long) 2, (long) 4}))) (1) >>> minSubArraySum(std::vector<long>{(long) -1, (long) -2, (long) -3)))) (-6)
long minSubArraySum(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>
long minSubArraySum(std::vector<long> nums) {
  if (nums.empty()) {
    throw std::invalid_argument(""Input vector cannot be empty."");
  }
  long min_so_far = nums[0];
  long current_min = nums[0];
  for (size_t i = 1; i < nums.size(); ++i) {
    current_min = std::min(nums[i], current_min + nums[i]);
    min_so_far = std::min(min_so_far, current_min);
  }
  return min_so_far;
}","}
int main() {
    auto candidate = minSubArraySum;
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));
    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));
    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));
    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));
    assert(candidate((std::vector<long>({(long)-10}))) == (-10));
    assert(candidate((std::vector<long>({(long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));
}
"
HumanEval/115,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y na n dɩka b rãmb nins sẽn be b pʋsẽ n kʋɩl b koomã. Y tʋʋmda yaa y sẽn na n dɩk b rãmb nins n kʋɩl b koomã. Y na n togsa y sẽn segd n kʋɩl b rãmb to-to naoor a wãn. Makre: (1) makre: (2) makre: (1) makre: (1) makre: (1) makre: (1) makre: (2) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (2) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (2) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1) makre: (1)
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
","#include<assert.h>
#include<bits/stdc++.h>
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
  long bucket_lowering_count = 0;
  for (const auto& row : grid) {
    long water_in_well = 0;
    for (long unit : row) {
      water_in_well += unit;
    }
    bucket_lowering_count += (water_in_well + capacity - 1) / capacity;
  }
  return bucket_lowering_count;
}","}
int main() {
    auto candidate = max_fill;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));
}
"
HumanEval/116,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yaa woto la y tog n maan: >>> sort_array((std::vector<long>{(long) 1, (long) 5, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5})) >>> sort_array(std::vector<long>{(long) 2, (long) 3, (long) 4, (long) 5}))) (std::vector<long>{(long>{-6, (long) 5, (long) 4, (long) 5, (long) 6}))) (std::vector<(long>{-6, (long) 5, (long) 4, (long) 3, (long) 2} >>> sort_array{(std::vector<(long>{0, (long) 3, (long) 4} (long) 2, (long) 3, (long) 4)) (long)
std::vector<long> sort_array(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
int count_set_bits(long n) {
  int count = 0;
  if (n < 0) {
    n = std::abs(n);
  }
  while (n > 0) {
    n &= (n - 1);
    count++;
  }
  return count;
}

bool compare(long a, long b) {
  int bits_a = count_set_bits(a);
  int bits_b = count_set_bits(b);
  if (bits_a != bits_b) {
    return bits_a < bits_b;
  }
  return a < b;
}

std::vector<long> sort_array(std::vector<long> arr) {
  std::sort(arr.begin(), arr.end(), compare);
  return arr;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));
    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
}
"
HumanEval/117,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sãn n yaa tɩ b kõ-y-la sõor sẽn yaa s la n yaa nimero, b kõ-y-la tʋʋmde n na n lebg n wa ne gom-biis nins fãa sẽn be s-rɩk-n-taar n tar koees n-yende, sẽn na yɩl tɩ gom-biisa fãa zĩnd s-rɩk-n-taar pʋgẽ. S-rɩk-n-taar sã n pa be, tʋʋmda segd n lebg n wa ne vɛɛs sẽn pa be.
std::vector<std::string> select_words(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_consonant(char c) {
  c = tolower(c);
  return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');
}

std::vector<std::string> select_words(std::string s, long n) {
  std::vector<std::string> result;
  std::string current_word;
  for (char c : s) {
    if (c == ' ') {
      long consonant_count = 0;
      for (char word_char : current_word) {
        if (is_consonant(word_char)) {
          consonant_count++;
        }
      }
      if (consonant_count == n) {
        result.push_back(current_word);
      }
      current_word = """";
    } else {
      current_word += c;
    }
  }
  long consonant_count = 0;
  for (char word_char : current_word) {
    if (is_consonant(word_char)) {
      consonant_count++;
    }
  }
  if (consonant_count == n) {
    result.push_back(current_word);
  }
  return result;
}","}
int main() {
    auto candidate = select_words;
    assert(candidate((""Mary had a little lamb""), (4)) == (std::vector<std::string>({(std::string)""little""})));
    assert(candidate((""Mary had a little lamb""), (3)) == (std::vector<std::string>({(std::string)""Mary"", (std::string)""lamb""})));
    assert(candidate((""simple white space""), (2)) == (std::vector<std::string>()));
    assert(candidate((""Hello world""), (4)) == (std::vector<std::string>({(std::string)""world""})));
    assert(candidate((""Uncle sam""), (3)) == (std::vector<std::string>({(std::string)""Uncle""})));
    assert(candidate((""""), (4)) == (std::vector<std::string>()));
    assert(candidate((""a b c d e f""), (1)) == (std::vector<std::string>({(std::string)""b"", (std::string)""c"", (std::string)""d"", (std::string)""f""})));
}
"
HumanEval/118,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la gomde. Y tʋʋmda yaa yãag vokaal sẽn pẽ-a n yɩɩd sẽn be vokaal a yiib sʋka sẽn yit gomdã rɩtgo (sẽn yaa sẽn zems ne vokaal-rãmb sẽn yaa to-to wã). Vokaal-rãmb sẽn be sɩngrẽ la sẽn wat n baasdẽ wã pa get ye. Lebg-y vokaal-rãmb sẽn pa be be wã sã n pa yãe vokaal sẽn zems ne sẽn be yĩngrã. Y tõe n tagsame tɩ vokaal-rãmb nins b sẽn kõ wã tara ãngilind lɛtɛɛr bala. Makre: >>> get_closest_vowel((""yogurt"")) (""u"") >>> get_closest_vowel(""FULL"")) (""U"") >>> get_closest_vowel_(""quick"") ("""") >>> get_closest_vowel_((ab"") ("""")
std::string get_closest_vowel(std::string word) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_vowel(char c) {
  c = tolower(c);
  return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
}

bool is_consonant(char c) {
  return isalpha(c) && !is_vowel(c);
}

std::string get_closest_vowel(std::string word) {
  if (word.length() < 3) {
    return """";
  }
  for (int i = word.length() - 2; i >= 1; --i) {
    if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {
      return std::string(1, word[i]);
    }
  }
  return """";
}","}
int main() {
    auto candidate = get_closest_vowel;
    assert(candidate((""yogurt"")) == (""u""));
    assert(candidate((""full"")) == (""u""));
    assert(candidate((""easy"")) == (""""));
    assert(candidate((""eAsy"")) == (""""));
    assert(candidate((""ali"")) == (""""));
    assert(candidate((""bad"")) == (""a""));
    assert(candidate((""most"")) == (""o""));
    assert(candidate((""ab"")) == (""""));
    assert(candidate((""ba"")) == (""""));
    assert(candidate((""quick"")) == (""""));
    assert(candidate((""anime"")) == (""i""));
    assert(candidate((""Asia"")) == (""""));
    assert(candidate((""Above"")) == (""o""));
}
"
HumanEval/119,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la vɛɛtr sẽn tar vɛɛtr a yiib bala, vɛɛtrã fãa tara vɛɛtr sẽn yaa '(' bɩ ') ' bala. Y tʋʋmda yaa ges n ges y sã n tõe n lagem vɛɛtr a yiibã n wa ne vɛɛtr sẽn yaa sõma. Vɛɛtr S yaa sõma sã n yaa tɩ vɛɛtrã fãa sẽn be S pʋgẽ wã zemsa. Wala makre: vɛɛtr '(())) ' yaa sõma, tɩ vɛɛtr '()) ' pa sõma ye. Vɛɛtrã sã n be sor n tõe n maan vɛɛtr sẽn yaa sõma, lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg.
std::string match_parens(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_good(const std::string& s) {
  int balance = 0;
  for (char c : s) {
    if (c == '(') {
      balance++;
    } else if (c == ')') {
      balance--;
    }
    if (balance < 0) {
      return false;
    }
  }
  return balance == 0;
}

std::string match_parens(std::vector<std::string> lst) {
  std::string s1 = lst[0];
  std::string s2 = lst[1];
  if (is_good(s1 + s2) || is_good(s2 + s1)) {
    return ""Yes"";
  } else {
    return ""No"";
  }
}","}
int main() {
    auto candidate = match_parens;
    assert(candidate((std::vector<std::string>({(std::string)""()("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)"")""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()(())"", (std::string)""())())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")())"", (std::string)""(()()(""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(())))"", (std::string)""(()())((""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""()"", (std::string)""())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()("", (std::string)""()))()""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(((("", (std::string)""((())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")(()"", (std::string)""(()(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")("", (std::string)"")(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)""(""}))) == (""Yes""));
}
"
HumanEval/120,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ vektɛɛr sẽn tar nimero rãmb la sẽn tar nimero rãmb sẽn yaa sõma, d na n lebg n wa ne vektɛɛr sẽn yaa sõma n tall woglem k n tall n wa ne sõor sẽn yaa wʋsgo. Makre 1: >>> maximum((std::vektɛɛr<long>({long) -3, (long) -4, (long) -5,)), (3)) (std::vektɛɛr<long>({long) -4, (long) -3, (long) -5)) Makre 2: >>> maximum((std::vektɛɛr<long>({long) -4, (long) -4, (long) -4}), (2)) (std::vektɛɛr<long>{(long) -4, (long) -4})) Makre 3: >>> maximum(std::vektɛɛr<long>{(long) -3, (long) -2, (long) -1, (long) -2, (long) -1, (long) -2, (long) -1, (long) (1)) (1) (std::vektɛɛr<long>) -2: 1. Vektɛɛrã woglem na n yɩɩ 1000 pʋgẽ. [Viktɛɛrã sẽn yaa 1000 wã pʋgẽ, vektɛɛrã woglem na n yɩɩ k-1 la k. ] [Viktɛɛrã sẽn yaa 1000 pʋgẽ, vektɛɛrã woglem na n yɩɩ k. ] [Viktɛɛrã sẽn yaa 0 la 2].
std::vector<long> maximum(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> maximum(std::vector<long> arr, long k) {
  std::sort(arr.rbegin(), arr.rend());
  std::vector<long> result;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    result.push_back(arr[i]);
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = maximum;
    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));
    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));
    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));
    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));
    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));
}
"
HumanEval/121,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ tɩ vɛɛg pa be, d na n lebg n wa ne vɛɛg fãa sẽn be zĩig a ye wã sõore. Makre >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) (12) >>> solution(((std::vector<long>({(long)3, (long)3, (long)3, (long)3}))) (9) >>> solution(((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) (0)
long solution(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long solution(std::vector<long> lst) {
  long sum = 0;
  for (long i = 0; i < lst.size(); i += 2) {
    if (lst[i] % 2 != 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = solution;
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));
    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));
    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));
    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));
}
"
HumanEval/122,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ vɛrktor sẽn pa zʋʋg sẽn yaa nimero rãmb sẽn yaa sõma arr la nimero rãmb k, lebg n wa ne elemẽ rãmb nins sẽn tar nimero rãmb sẽn yaa sõma n yɩɩd a yiib sẽn yit pipi k sẽn yaa sõma arr wã. Makre: >>> add_elements{}std::vector<long>{(long) 111, (long) 21, (long) 3, (long) 4000, (long) 5, (long) 6, (long) 7, (long) 8, (long) 9})), (4)) (24) Bãngr-goam: 1. 1 <= len(arr) <= 100 2. 1 <= k <= lenarr)
long add_elements(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
long add_elements(std::vector<long> arr, long k) {
  long sum = 0;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    if (arr[i] >= -99 && arr[i] <= 99) {
      sum += arr[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add_elements;
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));
    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));
    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));
    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));
    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));
}
"
HumanEval/123,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sã n kõ-y sõor sẽn yaa sõma n kõ, lebg n wa ne vɛɛtr sẽn yaa toor-toore, n tar sõor sẽn yaa toor-toore. Collatz vɛɛtrã yaa vɛɛtr sẽn be matematiksã pʋgẽ, sẽn tɩ loe ne vɛɛtr sẽn yaa toor-toore, n sɩng ne sõor sẽn yaa sõma n kõ. Rẽ poore, b rɩkda sõor fãa n yiisd sẽn deng-a wã n na n maan woto: sã n yaa tɩlɛ tɩ sẽn deng-a wã yɩ toor-toore, sẽn pʋgd-a wã yaa sẽn deng-a wã pʋɩ-sʋka. Sã n yaa tɩlɛ tɩ sẽn deng-a wã yɩ toor-toore, sẽn pʋgd-a wã yaa sẽn deng-a wã naoor a 3 n paas 1. Vɛɛtrã yaa tɩ baa n yaa n na n yɩ wãn n paam n n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam n paam
std::vector<long> get_odd_collatz(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> get_odd_collatz(long n) {
  std::vector<long> odd_numbers;
  std::unordered_set<long> seen;
  long current = n;
  while (seen.find(current) == seen.end()) {
    seen.insert(current);
    if (current % 2 != 0) {
      odd_numbers.push_back(current);
    }
    if (current == 1) {
      break;
    }
    if (current % 2 == 0) {
      current /= 2;
    } else {
      current = 3 * current + 1;
    }
  }
  std::sort(odd_numbers.begin(), odd_numbers.end());
  return odd_numbers;
}","}
int main() {
    auto candidate = get_odd_collatz;
    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));
    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
}
"
HumanEval/124,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y segd n gʋlsa tʋʋm-noor sẽn na n wilg tɩ daarã yaa sɩd t'a sã n pa sɩda, a lebgda sɩda. Daarã yaa sɩda, sã n yaa tɩ noy nins sẽn pʋgdã fãa la b tũuda: 1. Daarã pa zaalem ye. 2. Daarã sõor pa yɩɩd rasem 31 kiis a 1,3,5,7,8,10,12 pʋgẽ, la kiis a 4,6,9,11 pʋgẽ, a yaa 1 bɩ a yɩɩd rasem 30 kiis a 1 bɩ a yɩɩd rasem 29. Kiis a 2 pʋgẽ, daarã sõor pa yɩɩd 1 bɩ a yɩɩd rasem 29 ye. 3. Kiisã pa segd n yɩ 1 bɩ a yɩɩd rasem 12 ye. 4. Daarã segd n yɩɩ woto: mm-dd-yyyy >>> valid_(date((103-11-2000"")) (true >>> valid_date((15-01-2012"")) (false >>> valid_date (((04-040-20"") (false >>> valid_((date_(06-2020) (true >>> valid_date))) (false >>> valid_106/04/2020)
bool valid_date(std::string date) {
","#include<assert.h>
#include<bits/stdc++.h>
bool valid_date(std::string date) {
  if (date.empty()) {
    return false;
  }
  if (date.length() != 10 || date[2] != '-' || date[5] != '-') {
    return false;
  }
  int month, day, year;
  try {
    month = std::stoi(date.substr(0, 2));
    day = std::stoi(date.substr(3, 2));
    year = std::stoi(date.substr(6, 4));
  } catch (const std::invalid_argument& e) {
    return false;
  } catch (const std::out_of_range& e) {
    return false;
  }
  if (month < 1 || month > 12) {
    return false;
  }
  if (day < 1) {
    return false;
  }
  if (month == 2) {
    if (day > 29) {
      return false;
    }
  } else if (month == 4 || month == 6 || month == 9 || month == 11) {
    if (day > 30) {
      return false;
    }
  } else {
    if (day > 31) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = valid_date;
    assert(candidate((""03-11-2000"")) == (true));
    assert(candidate((""15-01-2012"")) == (false));
    assert(candidate((""04-0-2040"")) == (false));
    assert(candidate((""06-04-2020"")) == (true));
    assert(candidate((""01-01-2007"")) == (true));
    assert(candidate((""03-32-2011"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""04-31-3000"")) == (false));
    assert(candidate((""06-06-2005"")) == (true));
    assert(candidate((""21-31-2000"")) == (false));
    assert(candidate((""04-12-2003"")) == (true));
    assert(candidate((""04122003"")) == (false));
    assert(candidate((""20030412"")) == (false));
    assert(candidate((""2003-04"")) == (false));
    assert(candidate((""2003-04-12"")) == (false));
    assert(candidate((""04-2003"")) == (false));
}
"
HumanEval/125,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// B sã n kõ-y gom-biis sõor sẽn yaa sõor sõor sẽn yaa sõor sẽn welg ne zĩ-zĩigã, sã n pa be zĩ-zĩigã, y segd n welga ne ',' sã n pa be zĩ-zĩigã, y segd n lebg n kõ-y-la sõor ning sẽn yaa lɛtr-rãmb sẽn yaa bilfr sẽn yaa toore, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 Makr >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d) >>> split_words (d)
Union_std_vector_std_string__long split_words(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;
    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_vector_std_string__long split_words(std::string txt) {
  if (txt.find(' ') != std::string::npos) {
    std::vector<std::string> words;
    std::stringstream ss(txt);
    std::string word;
    while (ss >> word) {
      words.push_back(word);
    }
    return Union_std_vector_std_string__long(words);
  } else if (txt.find(',') != std::string::npos) {
    std::vector<std::string> words;
    std::string current_word;
    for (char c : txt) {
      if (c == ',') {
        words.push_back(current_word);
        current_word = """";
      } else {
        current_word += c;
      }
    }
    words.push_back(current_word);
    return Union_std_vector_std_string__long(words);
  } else {
    long odd_order_count = 0;
    for (char c : txt) {
      if (islower(c)) {
        if ((c - 'a') % 2 != 0) {
          odd_order_count++;
        }
      }
    }
    return Union_std_vector_std_string__long(odd_order_count);
  }
}","}
int main() {
    auto candidate = split_words;
    assert(candidate((""Hello world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello,world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello world,!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world,!""}));
    assert(candidate((""Hello,Hello,world !"")) == std::vector<std::string>({(std::string)""Hello,Hello,world"", (std::string)""!""}));
    assert(candidate((""abcdef"")) == 3);
    assert(candidate((""aaabb"")) == 2);
    assert(candidate((""aaaBb"")) == 1);
    assert(candidate(("""")) == 0);
}
"
HumanEval/126,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sã n yaa tɩ f tara vɛɛs-rãmb n na n sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n pa sõd n kõ-f bɩ n kõ-f bɩ n pa sõd n kõ-f bɩ n kõ-f bɩ n sõd n kõ-f bɩ n kõ-f bɩ n kõ-f bɩ n sõd n kõ-f bɩ n kõ-f bɩ n kõ-f bɩ n sõd n kõ-f bɩ n kõ-f bɩ n sõd n kõ-f bɩ n sõd n kõ-f bɩ n sõd n sõd n kõ-f bɩ n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd n sõd
bool is_sorted(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_sorted(std::vector<long> lst) {
  if (lst.size() <= 1) {
    return true;
  }
  std::map<long, int> counts;
  for (long x : lst) {
    counts[x]++;
  }
  for (auto const& [key, val] : counts) {
    if (val > 2) {
      return false;
    }
  }
  for (size_t i = 0; i < lst.size() - 1; ++i) {
    if (lst[i] > lst[i + 1]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_sorted;
    assert(candidate((std::vector<long>({(long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));
}
"
HumanEval/127,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la seg-taab a yiibu, tɩ seg-taab fãa yaa sõor a yiib n-yende. Wala makre, seg-taab = (sẽn sɩngr la a sẽn baasd) = (1, 2). Seg-taab nins b sẽn kõ wã yaa kʋɩlse, sẽn dat n yeel tɩ seg-taab (sẽn sɩngr la a sẽn baasd) wã tara sɩngr la baasg fãa. Seg-taab fãa pʋgẽ, b tagsdame tɩ a sɩngr yaa bilf n yɩɩd bɩ a zemsa ne a baasgo. Y tʋʋmd yaa bãng tɩ seg-taab a yiibã sẽn kẽedã woglem yaa sõor a yembr bala. Wala makre, seg-taab a yiibã (1, 3), (2, 4) sẽn kẽedã woglem yaa 1, sẽn pa sõor a yembr bala. Sã n yaa tɩ seg-taabã woglem yaa sõor a yembr bala, lebg n lebg n togse tɩ ""NYA"", sã n pa woto, lebg n togse tɩ ""NE"". [input/output] samples: >>> >>>((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
  long start1 = std::get(interval1);
  long end1 = std::get(interval1);
  long start2 = std::get(interval2);
  long end2 = std::get(interval2);
  long intersection_start = std::max(start1, start2);
  long intersection_end = std::min(end1, end2);
  long intersection_length = intersection_end - intersection_start + 1;
  if (intersection_length <= 0) {
    return ""NO"";
  }
  if (is_prime(intersection_length)) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = intersection;
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (""NO""));
    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (""NO""));
    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (""YES""));
    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (""YES""));
    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (""NO""));
    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (""NO""));
}
"
HumanEval/128,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la vɛɛtr sẽn tar vɛɛtr sẽn yaa nimero, tɩ y segd n lebg n wa ne nimero rãmb sẽn yaa wʋsg n paas vɛɛtrã pʋgẽ nimero fãa bãens fãa sẽn yaa 1, -1 bɩ 0.
std::optional<long> prod_signs(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> prod_signs(std::vector<long> arr) {
  if (arr.empty()) {
    return std::nullopt;
  }
  long sum_magnitudes = 0;
  long product_of_signs = 1;
  for (long num : arr) {
    sum_magnitudes += std::abs(num);
    if (num > 0) {
      product_of_signs *= 1;
    } else if (num < 0) {
      product_of_signs *= -1;
    } else {
      product_of_signs *= 0;
    }
  }
  return sum_magnitudes * product_of_signs;
}","}
int main() {
    auto candidate = prod_signs;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);
}
"
HumanEval/129,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n paam nids sẽn tar n-yẽg la n-bõn-yẽg (N >= 2) la sẽn tar n-yẽg sẽn yaa sõma, a soab fãa tara a yõodo. Y sã n paam nids sẽn yaa sõma n ta [1, N * N] n kẽed ne a taabã, a soab fãa na n pukda vugr bala. Y segd n baoo sẽn zems n ta k pʋgẽ. Y tõe n yii sel buud fãa, la y tõe n kẽe sel nins sẽn pẽ-a wã fãa pʋgẽ, sẽn dat n yeel tɩ y tõe n kẽe sel nins sẽn be taab n be taab n beẽ wã. Y sã n yã tɩ k pʋgẽ, yaa k pʋgẽ n na n ta (ka segd n yɩ toor ye). Y Y YET n pa tõe n yi n-a ye. A (k) pʋgẽ n lebg n wa wã, yaa tɩlɛ tɩ yɩ sẽn pa ta k pʋgẽ, sã n yaa tɩlɛ tɩ d lebg n wa n maan vɛrse rãmb nins sẽn be sel A la B pʋgẽ wã (d bool-b tɩ l_j_st la l_j_st) n lebg n wa n wa, tɩlɛ tɩ b yaa sẽn pa ta j_j_st la l_j_st_j_st_b (d) n yaa sẽn zems ne vɛrse wã.
std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
  int n = grid.size();
  std::vector<long> min_path;

  std::function<void(int, int, std::vector<long>)> dfs = 
    [&](int row, int col, std::vector<long> current_path) {
    if (current_path.size() == k) {
      if (min_path.empty() || current_path < min_path) {
        min_path = current_path;
      }
      return;
    }

    current_path.push_back(grid[row][col]);

    int dr= {-1, 1, 0, 0};
    int dc= {0, 0, -1, 1};

    for (int i = 0; i < 4; ++i) {
      int next_row = row + dr[i];
      int next_col = col + dc[i];
      if (next_row >= 0 && next_row < n && next_col >= 0 && next_col < n) {
        dfs(next_row, next_col, current_path);
      }
    }
  };

  for (int start_row = 0; start_row < n; ++start_row) {
    for (int start_col = 0; start_col < n; ++start_col) {
      dfs(start_row, start_col, {});
    }
  }

  return min_path;
}","}
int main() {
    auto candidate = minPath;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
}
"
HumanEval/130,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Nebã fãa mii Fibonacci sõorã, b zãmsa a yell wʋsg yʋʋm kob-gĩnd a yiib sẽn loogã pʋgẽ. La bũmb ning nebã sẽn pa mi yaa Tribonacci sõorã. B bilgda Tribonacci sõorã ne lebg n yɩlemdã: tri(1) = 3 tri(n) = 1 + n / 2, sã n yaa tɩ n yaa pa-yende. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), sã n yaa tɩ n yaa pa-yende. Wala makre: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 B kõ-y-la sõor sẽn pa-n-negativ n, tɩ y segd n lebg n lebg n wa ne pipi sõor n + 1 n be Tribonacci sõorẽ wã. Makre: >>> tri(3) (dst long vector><{(long} (long 1, long 3, long 2, long 8))
std::vector<long> tri(long n) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> tri(long n) {
  std::vector<long> result;
  if (n >= 0) {
    result.push_back(1);
  }
  if (n >= 1) {
    result.push_back(3);
  }
  for (long i = 2; i <= n; ++i) {
    if (i % 2 == 0) {
      result.push_back(1 + i / 2);
    } else {
      if (i - 1 >= 0 && i - 2 >= 0 && i + 1 <= n)
      {
          result.push_back(result[i-1] + result[i-2] + result[i]);
      }
      else if (i - 1 >= 0 && i - 2 >= 0)
      {
          result.push_back(result[i-1] + result[i-2]);
      }
      else if (i - 1 >= 0)
      {
          result.push_back(result[i-1]);
      }
      else
      {
          result.push_back(0);
      }
    }
  }
  return result;
}","}
int main() {
    auto candidate = tri;
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));
    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));
    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));
    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));
    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));
    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));
    assert(candidate((0)) == (std::vector<long>({(long)1})));
    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));
}
"
HumanEval/131,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ sõor sẽn yaa sõma n lebg n wa ne a sẽn yaa a to wã sẽn yaa to-to wã. D lebg n wa ne 0 sã n yaa tɩ to-to fãa yaa a to. Wala makre: >>> to-to (((1)) (1) >>> to-to ((4)) (0) >>> to-to (((235)) (15)
long digits(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long digits(long n) {
  long product = 1;
  std::string s = std::to_string(n);
  bool has_odd = false;
  for (char c : s) {
    long digit = c - '0';
    if (digit % 2 != 0) {
      product *= digit;
      has_odd = true;
    }
  }
  if (!has_odd) {
    return 0;
  }
  return product;
}","}
int main() {
    auto candidate = digits;
    assert(candidate((5)) == (5));
    assert(candidate((54)) == (5));
    assert(candidate((120)) == (1));
    assert(candidate((5014)) == (5));
    assert(candidate((98765)) == (315));
    assert(candidate((5576543)) == (2625));
    assert(candidate((2468)) == (0));
}
"
HumanEval/132,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yãk-y tʋʋm-noor sẽn na n dɩk sõn-vãoog sẽn tar karẽn-bi-bɛd bal n kõ. Tʋʋm-noor segd n lebg n waame sã n yaa sɩd la sã n yaa sɩd bala, sã n yaa tɩ karẽn-bi-bɛd sẽn zems n be tɩ karẽn-bi-bɛd a yembr sẽn be be wã yaa sẽn kẽed ne taaba. >>> is_nested((""[[]]"")) (true) >>> is_nested((""[]]]]]]]]]]]]]]]]) (false) >>> is_nested(""[][]"") (false) >>> is_nested(""[]"") (false) >>> is_nested""[[]]"") (true) >>> is_nested(""[[]]"") (true)
bool is_nested(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_nested(std::string string) {
  int balance = 0;
  bool nested = false;
  for (char c : string) {
    if (c == '[') {
      balance++;
    } else if (c == ']') {
      if (balance > 1) {
        nested = true;
      }
      balance--;
      if (balance < 0) {
        return false;
      }
    }
  }
  return balance == 0 && nested;
}","}
int main() {
    auto candidate = is_nested;
    assert(candidate((""[[]]"")) == (true));
    assert(candidate((""[]]]]]]][[[[[]"")) == (false));
    assert(candidate((""[][]"")) == (false));
    assert(candidate((""[]"")) == (false));
    assert(candidate((""[[[[]]]]"")) == (true));
    assert(candidate((""[]]]]]]]]]]"")) == (false));
    assert(candidate((""[][][[]]"")) == (true));
    assert(candidate((""[[]"")) == (false));
    assert(candidate((""[]]"")) == (false));
    assert(candidate((""[[]][["")) == (true));
    assert(candidate((""[[][]]"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""[[[[[[[["")) == (false));
    assert(candidate((""]]]]]]]]"")) == (false));
}
"
HumanEval/133,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la sõor vɛrse. Y segd n deng n sõda vɛrse wã pʋgẽ sõor vɛrse wã sẽn yɩlem to-to wã tɩ b lebg n wa, n deng n sõd vɛrse wã babg a ye n wa ta pipi. Makre: >>> vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse: vɛrse.
long sum_squares(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_squares(std::vector<float> lst) {
  long sum = 0;
  for (float num : lst) {
    long rounded_up = std::ceil(num);
    sum += rounded_up * rounded_up;
  }
  return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));
    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));
    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));
    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));
    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));
}
"
HumanEval/134,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yãk-y tʋʋm-noor sẽn na n lebg n wa ne sɩd sã n yaa tɩlɛ tɩ b wilg tɩ yel-bũndã yaoolem gʋls-bi-bãngr yaa sẽn na n yɩll n yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll tɩ yɩll tɩ yɩll n yɩll tɩ yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll tɩ yɩll n yɩll n yɩll n yɩll tɩ yɩll n yɩll n yɩll n yɩll tɩ yɩll n yɩll n yɩll n yɩll tɩ yɩll n yɩll n yɩll tɩ yɩll n yɩll n yɩll tɩ yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩll n yɩ yɩ yɩll n yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ yɩ
bool check_if_last_char_is_a_letter(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_if_last_char_is_a_letter(std::string txt) {
  if (txt.empty()) {
    return false;
  }
  if (!isalpha(txt.back())) {
    return false;
  }
  if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {
    return false;
  }
  return true;
}","}
int main() {
    auto candidate = check_if_last_char_is_a_letter;
    assert(candidate((""apple"")) == (false));
    assert(candidate((""apple pi e"")) == (true));
    assert(candidate((""eeeee"")) == (false));
    assert(candidate((""A"")) == (true));
    assert(candidate((""Pumpkin pie "")) == (false));
    assert(candidate((""Pumpkin pie 1"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""eeeee e "")) == (false));
    assert(candidate((""apple pie"")) == (false));
    assert(candidate((""apple pi e "")) == (false));
}
"
HumanEval/135,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yãk-y tʋʋm-noor sẽn na n lebg n wa ne bũmb ning sẽn yaa kãseng n yɩɩd n pa yɩɩd bɩ sẽn zem bũmb ning sẽn deng-a wã. Sã n pa be bũmb a woto, lebg n wa ne -1. Vektɛɛr ning sẽn kõ wã pa na n tall vɛrse-rãmb sẽn yaa toor-toore. Makre: >>> tõe n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (tʋʋmd) n_bãnge (t) n_tʋʋmd) n_bãnge (t) n_tʋʋmd (tʋʋmd) n_t_tʋʋmd) n_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_
long can_arrange(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long can_arrange(std::vector<long> arr) {
  for (long i = 1; i < arr.size(); ++i) {
    if (arr[i] < arr[i - 1]) {
      return i;
    }
  }
  return -1;
}","}
int main() {
    auto candidate = can_arrange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));
    assert(candidate((std::vector<long>())) == (-1));
}
"
HumanEval/136,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yãk-y tʋʋm-noor sẽn lebg n wa ne tuple (a, b), tɩ 'a' yaa sẽn pa ta-a nimero-rãmb nins sẽn pa sõma wã sʋka, la 'b' yaa sẽn pa ta-a nimero-rãmb nins sẽn yaa sõma wã sʋka. Sã n pa be nimero-rãmb nins sẽn pa sõma wã bɩ nimero-rãmb nins sẽn yaa sõma wã sʋka, lebg n wa ne None. Makre: >>> largest_smallest_integers(((std::vector<long>{long) 2, (long) 4, (long) 1, (long) 3, (long) 5, (long) 7))) std::make_tuplest_d::optional<long>, std::optional<long>) >>> largest_smallest_integers(((std::nopt, std::optional<long>, std::optional<long> (long))
std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<tuple>
#include<vector>

std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
    std::optional<long> largest_negative = std::nullopt;
    std::optional<long> smallest_positive = std::nullopt;
    for (long num : lst) {
        if (num < 0) {
            if (!largest_negative.has_value() || num > largest_negative.value()) {
                largest_negative = num;
            }
        } else if (num > 0) {
            if (!smallest_positive.has_value() || num < smallest_positive.value()) {
                smallest_positive = num;
            }
        }
    }
    return std::make_tuple(largest_negative, smallest_positive);
}","}
int main() {
    auto candidate = largest_smallest_integers;
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));
    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));
    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));
}
"
HumanEval/137,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};
// B na n maana tʋʋm-noor sẽn na n dɩk nimero rãmb sẽn yaa zuloees bɩ n lebg n wa ne nimero rãmb sẽn yaa zuloees n lebg n wa ne sẽn yaa zuloees n yɩɩd a sẽn kõ-a wã. B sã n lebg n wa ne a ye, yaa tɩlɛ tɩ b lebg n wa ne a ye.
Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<string>

union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;
    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;
    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};

double parse_real(const std::string& s) {
    std::string temp = s;
    std::replace(temp.begin(), temp.end(), ',', '.');
    try {
        return std::stod(temp);
    } catch (const std::invalid_argument& e) {
        return std::numeric_limits<double>::quiet_NaN();
    } catch (const std::out_of_range& e) {
        return std::numeric_limits<double>::quiet_NaN();
    }
}

Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
    if (a.f2.empty() && b.f2.empty()) {
        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {
            if (a.f0 > b.f0) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f0 > a.f0) return Union_long_float_std_string_std_nullopt(b.f0);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {
            if (a.f1 > b.f1) return Union_long_float_std_string_std_nullopt(a.f1);
            if (b.f1 > a.f1) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f0) == typeid(long) && typeid(b.f1) == typeid(float)) {
            if (static_cast<float>(a.f0) > b.f1) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f1 > static_cast<float>(a.f0)) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f0) == typeid(long)) {
            if (a.f1 > static_cast<float>(b.f0)) return Union_long_float_std_string_std_nullopt(a.f1);
            if (static_cast<float>(b.f0) > a.f1) return Union_long_float_std_string_std_nullopt(b.f0);
        }
    } else {
        double val_a, val_b;
        if (!a.f2.empty()) val_a = parse_real(a.f2);
        else if (typeid(a.f0) == typeid(long)) val_a = static_cast<double>(a.f0);
        else val_a = static_cast<double>(a.f1);

        if (!b.f2.empty()) val_b = parse_real(b.f2);
        else if (typeid(b.f0) == typeid(long)) val_b = static_cast<double>(b.f0);
        else val_b = static_cast<double>(b.f1);

        if (!std::isnan(val_a) && !std::isnan(val_b)) {
            if (val_a > val_b) return Union_long_float_std_string_std_nullopt(a);
            if (val_b > val_a) return Union_long_float_std_string_std_nullopt(b);
        }
    }
    return Union_long_float_std_string_std_nullopt(std::nullopt{});
}","}
int main() {
    auto candidate = compare_one;
    assert(candidate(1, 2) == 2);
    assert(candidate(1, 2.5f) == 2.5f);
    assert(candidate(2, 3) == 3);
    assert(candidate(5, 6) == 6);
    assert(candidate(1, ""2,3"") == ""2,3"");
    assert(candidate(""5,1"", ""6"") == ""6"");
    assert(candidate(""1"", ""2"") == ""2"");
    assert(candidate(""1"", 1) == std::nullopt);
}
"
HumanEval/138,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Ges-y n ges y sã n tõe n gʋlsa sõor n kõ wã tɩ yɩ sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa sõor sẽn yaa to
bool is_equal_to_sum_even(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_equal_to_sum_even(long n) {
    if (n <= 6 || n % 2 != 0) {
        return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_equal_to_sum_even;
    assert(candidate((4)) == (false));
    assert(candidate((6)) == (false));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (true));
    assert(candidate((11)) == (false));
    assert(candidate((12)) == (true));
    assert(candidate((13)) == (false));
    assert(candidate((16)) == (true));
}
"
HumanEval/139,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B sẽn boond tɩ Brazil factoriallã yaa: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! zĩig ning n > 0 Wala makre: >>> special_factorial (((4)) (288) Fõnktɛɛrã na n deega nimero sẽn yaa sõma wa sẽn kẽed ne rẽ, la a segd n lebg n wa ne nimero-kãng sẽn yaa sõma wã factoriallã.
long special_factorial(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long factorial(long k) {
    long res = 1;
    for (long i = 2; i <= k; ++i) {
        res *= i;
    }
    return res;
}

long special_factorial(long n) {
    if (n <= 0) {
        return 1;
    }
    long result = 1;
    for (long i = 1; i <= n; ++i) {
        result *= factorial(i);
    }
    return result;
}","}
int main() {
    auto candidate = special_factorial;
    assert(candidate((4)) == (288));
    assert(candidate((5)) == (34560));
    assert(candidate((7)) == (125411328000));
    assert(candidate((1)) == (1));
}
"
HumanEval/140,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n paam n yãe vɛrse sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsg sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõsd sẽn yaa sõd sẽn yaa sõd sẽn yaa sõd sẽn yaa sõd sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa sẽn yaa
std::string fix_spaces(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string fix_spaces(std::string text) {
    std::string result = """";
    int space_count = 0;
    for (char c : text) {
        if (c == ' ') {
            space_count++;
        } else {
            if (space_count == 1) {
                result += '_';
            } else if (space_count > 1) {
                result += '-';
            }
            result += c;
            space_count = 0;
        }
    }
    if (space_count == 1 && !result.empty() && result.back() != '_') {
        result += '_';
    } else if (space_count > 1 && !result.empty() && result.back() != '-') {
        result += '-';
    } else if (space_count > 0 && result.empty()) {
        if (space_count > 2) result += '-';
        else if (space_count == 1) result += '_';
    } else if (space_count == 1 && result.empty()) {
        result += '_';
    }

    std::string trimmed_result = """";
    bool non_space_found = false;
    for (char c : result) {
        if (c != ' ') {
            non_space_found = true;
            trimmed_result += c;
        } else if (non_space_found) {
            trimmed_result += c;
        }
    }

    while (!trimmed_result.empty() && trimmed_result.front() == '_') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '_') {
        trimmed_result.pop_back();
    }
     while (!trimmed_result.empty() && trimmed_result.front() == '-') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '-') {
        trimmed_result.pop_back();
    }

    std::string final_result = """";
    space_count = 0;
    for (char c : trimmed_result) {
        if (c == '_') {
            space_count++;
        } else {
            if (space_count == 1) {
                final_result += '_';
            } else if (space_count > 1) {
                final_result += '-';
            }
            final_result += c;
            space_count = 0;
        }
    }
    if (space_count == 1) {
        final_result += '_';
    } else if (space_count > 1) {
        final_result += '-';
    }

    return final_result;
}","}
int main() {
    auto candidate = fix_spaces;
    assert(candidate((""Example"")) == (""Example""));
    assert(candidate((""Mudasir Hanif "")) == (""Mudasir_Hanif_""));
    assert(candidate((""Yellow Yellow  Dirty  Fellow"")) == (""Yellow_Yellow__Dirty__Fellow""));
    assert(candidate((""Exa   mple"")) == (""Exa-mple""));
    assert(candidate((""   Exa 1 2 2 mple"")) == (""-Exa_1_2_2_mple""));
}
"
HumanEval/141,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Na n wa ne tʋʋm-noor sẽn na n dɩk n kõ kõ file yʋʋr sẽn yaa 'yes' sã n yaa tɩlɛ, la a kõ 'no' sã n pa tɩlɛ. A getame tɩ file yʋʋr yaa tɩlɛ sã n yaa tɩ noy nins sẽn pʋgdã fãa la b pidsda: - A pa segd n tall sõor sẽn yɩɩd sõor a tãab ('0'-'9') file yʋʋr pʋgẽ ye. - A pa segd n tall dot a yembr bal '.' - Substring ning sẽn nan yɩll tɩ dotã zĩndã pa segd n yɩ zaalem ye, la a segd n sɩngda ne lɛtɛɛr sẽn yit latin alphapetã pʋgẽ ('a'-'z' la 'A'-Z'). - Substring ning sẽn pʋgl dotã segd n yɩɩ woto: ['txt', 'exe', 'lld'] Makre: >>> file_name_check""{""{example.txt"") (""Yes"") >>> file_name_check""{""{example.dll""} (""No"")
std::string file_name_check(std::string file_name) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string file_name_check(std::string file_name) {
    int digit_count = 0;
    int dot_count = 0;
    size_t dot_pos = std::string::npos;

    for (size_t i = 0; i < file_name.length(); ++i) {
        if (isdigit(file_name[i])) {
            digit_count++;
        } else if (file_name[i] == '.') {
            dot_count++;
            dot_pos = i;
        }
    }

    if (digit_count > 3 || dot_count != 1) {
        return ""No"";
    }

    if (dot_pos == 0 || dot_pos == file_name.length() - 1) {
        return ""No"";
    }

    std::string name_part = file_name.substr(0, dot_pos);
    std::string ext_part = file_name.substr(dot_pos + 1);

    if (name_part.empty() || !isalpha(name_part[0])) {
        return ""No"";
    }

    if (ext_part == ""txt"" || ext_part == ""exe"" || ext_part == ""dll"") {
        return ""Yes"";
    } else {
        return ""No"";
    }
}","}
int main() {
    auto candidate = file_name_check;
    assert(candidate((""example.txt"")) == (""Yes""));
    assert(candidate((""1example.dll"")) == (""No""));
    assert(candidate((""s1sdf3.asd"")) == (""No""));
    assert(candidate((""K.dll"")) == (""Yes""));
    assert(candidate((""MY16FILE3.exe"")) == (""Yes""));
    assert(candidate((""His12FILE94.exe"")) == (""No""));
    assert(candidate((""_Y.txt"")) == (""No""));
    assert(candidate((""?aREYA.exe"")) == (""No""));
    assert(candidate((""/this_is_valid.dll"")) == (""No""));
    assert(candidate((""this_is_valid.wow"")) == (""No""));
    assert(candidate((""this_is_valid.txt"")) == (""Yes""));
    assert(candidate((""this_is_valid.txtexe"")) == (""No""));
    assert(candidate((""#this2_i4s_5valid.ten"")) == (""No""));
    assert(candidate((""@this1_is6_valid.exe"")) == (""No""));
    assert(candidate((""this_is_12valid.6exe4.txt"")) == (""No""));
    assert(candidate((""all.exe.txt"")) == (""No""));
    assert(candidate((""I563_No.exe"")) == (""Yes""));
    assert(candidate((""Is3youfault.txt"")) == (""Yes""));
    assert(candidate((""no_one#knows.dll"")) == (""Yes""));
    assert(candidate((""1I563_Yes3.exe"")) == (""No""));
    assert(candidate((""I563_Yes3.txtt"")) == (""No""));
    assert(candidate((""final..txt"")) == (""No""));
    assert(candidate((""final132"")) == (""No""));
    assert(candidate((""_f4indsartal132."")) == (""No""));
    assert(candidate(("".txt"")) == (""No""));
    assert(candidate((""s."")) == (""No""));
}
"
HumanEval/142,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// "" Tʋʋm kãnga na n dɩka vɛɛktor sẽn yaa nimero rãmb fãa. Vɛɛktorã pʋga, tʋʋm kãnga na n kɩtame tɩ nimero rãmb fãa yɩ a yiib n tɩ ta a tãab n tɩ ta a naas n tɩ ta a tãab n tɩ ta a naas n tɩ ta a tãab n tɩ ta a naas. Tʋʋm kãnga pa na n toeeme tɩ vɛɛktorã pʋga sẽn pa vɛɛktor a tãab bɩ a naas n tɩ ta a naas ye. Tʋʋm kãnga na n lebg n waa ne vɛɛktorã pʋga fãa sõore. Makre: >>> lst (long({(long) 1, (long) 2, (long) 3})) >>> lst (long) >>> lst ({(long) -1, (long) -5, (long) -2, (long) -1, (long) -5}))
long sum_squares(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_squares(std::vector<long> lst) {
    long sum = 0;
    for (size_t i = 0; i < lst.size(); ++i) {
        if (i % 3 == 0) {
            sum += lst[i] * lst[i];
        } else if (i % 4 == 0) {
            sum += lst[i] * lst[i] * lst[i];
        } else {
            sum += lst[i];
        }
    }
    return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));
    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));
    assert(candidate((std::vector<long>({(long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));
    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));
    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));
}
"
HumanEval/143,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la sõsg sẽn makd vɛrse, vɛrse wã tara gom-biis sẽn welg ne zĩ-zãrgre, la y segd n lebg n kõ-y-la vɛrse sẽn tar gom-biis sẽn yit vɛrse ning sẽn sɩng ne wã pʋgẽ, b woglem yaa sõor sẽn yaa pipi sõor bala, vɛrse wã sẽn be vɛrse-paalgã pʋgẽ wã segd n yɩɩ wa pipi soabã. Makre 1: >>> words_in_sentence ({""This is a test"") "")) (""is"") Makre 2: >>> words_in_sentence ({""let's go for swimming"")) (""go for"") Bʋgse: * 1 <= len{""sentence"") <= 100 * vɛrse wã tara lɛt-r bal
std::string words_in_sentence(std::string sentence) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

std::string words_in_sentence(std::string sentence) {
    std::string result = """";
    std::stringstream ss(sentence);
    std::string word;
    while (ss >> word) {
        if (is_prime(word.length())) {
            if (!result.empty()) {
                result += "" "";
            }
            result += word;
        }
    }
    return result;
}","}
int main() {
    auto candidate = words_in_sentence;
    assert(candidate((""This is a test"")) == (""is""));
    assert(candidate((""lets go for swimming"")) == (""go for""));
    assert(candidate((""there is no place available here"")) == (""there is no place""));
    assert(candidate((""Hi I am Hussein"")) == (""Hi am Hussein""));
    assert(candidate((""go for it"")) == (""go for it""));
    assert(candidate((""here"")) == (""""));
    assert(candidate((""here is"")) == (""is""));
}
"
HumanEval/144,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y tʋʋmda yaa f sẽn na n maan tʋʋma sẽn na n yɩll n kɩt tɩ f bãng tɩ f sẽn na n maan to-to n lebg n wa n lebg n wa. F tʋʋmda lebg n waame sã n yaa tɩ f f sẽn na n lebg n wa n lebg n wa wã yaa sõor sẽn yaa zãng la sã n pa woto, yaa zĩrĩ. X la n yaa wilgr sẽn yaa wilgr sẽn yaa wilgr sẽn yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n yaa wilgr n
bool simplify(std::string x, std::string n) {
","#include<assert.h>
#include<bits/stdc++.h>

long gcd(long a, long b) {
    while (b) {
        a %= b;
        std::swap(a, b);
    }
    return a;
}

bool simplify(std::string x, std::string n) {
    long x_num, x_den, n_num, n_den;
    size_t slash_pos = x.find('/');
    x_num = std::stol(x.substr(0, slash_pos));
    x_den = std::stol(x.substr(slash_pos + 1));

    slash_pos = n.find('/');
    n_num = std::stol(n.substr(0, slash_pos));
    n_den = std::stol(n.substr(slash_pos + 1));

    long num = x_num * n_num;
    long den = x_den * n_den;

    long common_divisor = gcd(num, den);
    den /= common_divisor;

    return den == 1;
}","}
int main() {
    auto candidate = simplify;
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/6""), (""2/1"")) == (false));
    assert(candidate((""5/1""), (""3/1"")) == (true));
    assert(candidate((""7/10""), (""10/2"")) == (false));
    assert(candidate((""2/10""), (""50/10"")) == (true));
    assert(candidate((""7/2""), (""4/2"")) == (true));
    assert(candidate((""11/6""), (""6/1"")) == (true));
    assert(candidate((""2/3""), (""5/2"")) == (false));
    assert(candidate((""5/2""), (""3/5"")) == (false));
    assert(candidate((""2/4""), (""8/4"")) == (true));
    assert(candidate((""2/4""), (""4/2"")) == (true));
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/5""), (""1/5"")) == (false));
}
"
HumanEval/145,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y tʋʋm-noor sẽn na n welg sõor-vɩʋʋg sẽn kõ tɩ zems ne b sõor-vɩʋʋgã. Bãng-y tɩ sã n yaa sõor-vɩʋʋg sẽn yaa wa b sõor-vɩʋʋgã, bɩ y sõd-b ne b sõor-vɩʋʋgã sẽn zems ne b sõor-vɩʋʋgã. Wala makre: >>> order_by_points((std::vector<long>({long) 1, (long) 11, (long)-1, (long) - 11, (long) - 12}))) (std::vector<long>({long) -1, (long) -11, (long) -1, (long) -12, (long) 11})) >>> order_by_points((std::vector<long>())) (std::vector<long>(long))
std::vector<long> order_by_points(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_digits(long n) {
    long sum = 0;
    std::string s = std::to_string(std::abs(n));
    for (char c : s) {
        sum += c - '0';
    }
    return sum;
}

std::vector<long> order_by_points(std::vector<long> nums) {
    std::vector<std::pair<long, size_t>> indexed_nums;
    for (size_t i = 0; i < nums.size(); ++i) {
        indexed_nums.push_back({nums[i], i});
    }

    std::sort(indexed_nums.begin(), indexed_nums.end(), [](const std::pair<long, size_t>& a, const std::pair<long, size_t>& b) {
        long sum_a = sum_digits(a.first);
        long sum_b = sum_digits(b.first);
        if (sum_a != sum_b) {
            return sum_a < sum_b;
        }
        return a.second < b.second;
    });

    std::vector<long> result;
    for (const auto& pair : indexed_nums) {
        result.push_back(pair.first);
    }
    return result;
}","}
int main() {
    auto candidate = order_by_points;
    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));
    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));
    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));
}
"
HumanEval/146,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y tʋʋm-noor sẽn na n dɩk sõor-vẽktɛɛr n lebg n wa ne sõor sẽn yɩɩd 10 la a sẽn na n lebg n wa ne sõor sẽn pa yembr pipi la yaoolem sõor a yiibã fãa (1, 3, 5, 7, 9). Wala makre: >>> specialFilter((std::vector<long>({(long) 15, (long) -73, (long) -14, (long) -15}))) (1) >>> specialFilter((std::vector<long>({(long) -2, (long) -3, (long) -4, (long) -21, (long) -109} (2))))
long specialFilter(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_odd_digit(char c) {
    return (c == '1' || c == '3' || c == '5' || c == '7' || c == '9');
}

long specialFilter(std::vector<long> nums) {
    long count = 0;
    for (long num : nums) {
        if (std::abs(num) > 10) {
            std::string s = std::to_string(std::abs(num));
            if (!s.empty() && is_odd_digit(s.front()) && is_odd_digit(s.back())) {
                count++;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = specialFilter;
    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));
    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));
    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));
    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));
    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>())) == (0));
}
"
HumanEval/147,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la sõor sẽn yaa sõma n. Y segd n naan sõor sẽn yaa sõma n sẽn tar woglem n. Sẽn na yɩl n kõ i fãa (1 ≤ i ≤ n), a[i] = i * i - i + 1. Rɩkd-y a a tã-soab sõor (a[i], a[j], a[k]) a sẽn be i < j < k, la a[i] + a[j] + a[k] yaa 3 naoor wʋsgo. Makre: >>> get_max_triples((5)) (1) Bãngr sẽn yaa: a = [1, 3, 7, 13, 21] B sẽn tõe n sõd tã-soab yaa (1, 7, 13).
long get_max_triples(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long get_max_triples(long n) {
    if (n < 3) {
        return 0;
    }
    std::vector<long> a(n);
    for (long i = 0; i < n; ++i) {
        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;
    }

    long count = 0;
    for (long i = 0; i < n; ++i) {
        for (long j = i + 1; j < n; ++j) {
            for (long k = j + 1; k < n; ++k) {
                if ((a[i] + a[j] + a[k]) % 3 == 0) {
                    count++;
                }
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = get_max_triples;
    assert(candidate((5)) == (1));
    assert(candidate((6)) == (4));
    assert(candidate((10)) == (36));
    assert(candidate((100)) == (53361));
}
"
HumanEval/148,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n getẽ tɩ ãdsã fãa sẽn be ãdsã 1 ne ãdsã 2 sʋkã, a segd n lebg n wa ne tuple sẽn tar ãdsã fãa sẽn be ãdsã 1 ne ãdsã 2 sʋkã, n welg-b ne wĩntoogã sẽn pẽ zĩig ningã. A segd n lebg n wa ne tuple sẽn pa tar bũmbã, sã n mikame tɩ ãdsã 1 la ãdsã 2 pa ãdsã yʋy sẽn zemsã. Makr a yembr yaa: ""Saturn"", (stdstring) (Uranus) (Earth), ""Mercury"", (stdstring) (Jupiter), ""Mercury"", (stdstring) (Earth) (Jupiter) (Earth) (Mars) (Earth) (Mars) (Earth) (Earth) (Mercury) (Venus) (Earth) (Earth) (Earth) (Earth) (Earth) (Mars) (Earth) (Earth) (Earth) (Earth) (Mercury)) (Venus) (Earth) (Earth) (Earth) (Earth) (Earth) (Earth) (Earth) (Earth) (Earth) (Earth (Earth) (Earth) (Earth (E) (E) (E) (E) (E) (E) (E) (E) (E) (E) (E (E) (E (E) (E) (E (E) (E (E) (E (E) (E) (E (E) (E (E) (E (E) (E) (E (E (E) (E (E) (E) (E (E) (E (E) (E (E) (E) (E) (E) (E (E) (E) (E) (E (E) (E) (E) (E (E) (E) (E) (E) (E (E) (E (E) (E) (E (E) (E) (E) (E) (E) (E) (E) (E) (E) (E) (E) (E (E) (E) (E) (E (
std::vector<std::string> bf(std::string planet1, std::string planet2) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> bf(std::string planet1, std::string planet2) {
    std::vector<std::string> planets = {""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""};
    auto it1 = std::find(planets.begin(), planets.end(), planet1);
    auto it2 = std::find(planets.begin(), planets.end(), planet2);

    if (it1 == planets.end() || it2 == planets.end()) {
        return {};
    }

    int index1 = std::distance(planets.begin(), it1);
    int index2 = std::distance(planets.begin(), it2);

    if (index1 == index2) {
        return {};
    }

    int start = std::min(index1, index2) + 1;
    int end = std::max(index1, index2);

    std::vector<std::string> result;
    for (int i = start; i < end; ++i) {
        result.push_back(planets[i]);
    }
    return result;
}","}
int main() {
    auto candidate = bf;
    assert(candidate((""Jupiter""), (""Neptune"")) == (std::vector<std::string>({(std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Mercury"")) == (std::vector<std::string>({(std::string)""Venus""})));
    assert(candidate((""Mercury""), (""Uranus"")) == (std::vector<std::string>({(std::string)""Venus"", (std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn""})));
    assert(candidate((""Neptune""), (""Venus"")) == (std::vector<std::string>({(std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Mars""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Jupiter""), (""Makemake"")) == (std::vector<std::string>()));
}
"
HumanEval/149,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n yã tɩ gom-biis a yiib n tar woglem a yembre, bɩ y sõdg-b tɩ b tũ sor ning b sẽn yãkã n lebg n wa. Y tõe n tagsame tɩ gom-biisa fãa na n yɩɩ woglem a yembre. Wala makre: >>> list_sort{""}std:: vector<stdstring>{""}{""}{""} (aaaa""} (aaaa""} (aaaa""} (aaaa""} (aaaa""} (aaaa""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a""} (a"")) (a""} (a"" (a"")) (a"")) (a"" (a"")) (a"" (a"")) (a"" (a"")) (a"" (a"")) (a"" (a"")) (a"" (a""a"")) (a"" (a""a"" (a"")) (a""a"" (a""a""a""a) (a"" (a) (a"" (a) (a) (a""a) (a"" (a) (a""a) (a"" (a) (a) (a"" (a) (a) (a""a"" (a) (a) (a"" (a) (a) (a""a"" (a) (a) (a"" (a) (a) (a) (a) (a"" (a) (a) (a) (a) (a) (d)) (d (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (d) (
std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
    std::vector<std::string> even_length_strings;
    for (const std::string& s : lst) {
        if (s.length() % 2 == 0) {
            even_length_strings.push_back(s);
        }
    }

    std::sort(even_length_strings.begin(), even_length_strings.end(), [](const std::string& a, const std::string& b) {
        if (a.length() != b.length()) {
            return a.length() < b.length();
        }
        return a < b;
    });

    return even_length_strings;
}","}
int main() {
    auto candidate = sorted_list_sum;
    assert(candidate((std::vector<std::string>({(std::string)""aa"", (std::string)""a"", (std::string)""aaa""}))) == (std::vector<std::string>({(std::string)""aa""})));
    assert(candidate((std::vector<std::string>({(std::string)""school"", (std::string)""AI"", (std::string)""asdf"", (std::string)""b""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""asdf"", (std::string)""school""})));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""b"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""dcba"", (std::string)""abcd"", (std::string)""a""}))) == (std::vector<std::string>({(std::string)""abcd"", (std::string)""dcba""})));
    assert(candidate((std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""})));
    assert(candidate((std::vector<std::string>({(std::string)""a"", (std::string)""b"", (std::string)""b"", (std::string)""c"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""aaaa"", (std::string)""bbbb"", (std::string)""dd"", (std::string)""cc""}))) == (std::vector<std::string>({(std::string)""cc"", (std::string)""dd"", (std::string)""aaaa"", (std::string)""bbbb""})));
}
"
HumanEval/150,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yaa porgrame sẽn yaa nana, sẽn segd n lebg n wa ne x makrã, sã n yaa tɩ n yaa pipi sõor la a segd n lebg n wa ne y makrã, sã n pa woto. Makr dãmba: >>> x_or_y((7), (34), (12)) (34) >>> x_or_y(15), (8), (5) (5)
long x_or_y(long n, long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(long n) {
    if (n <= 1) return false;
    for (long i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

long x_or_y(long n, long x, long y) {
    if (is_prime(n)) {
        return x;
    } else {
        return y;
    }
}","}
int main() {
    auto candidate = x_or_y;
    assert(candidate((7), (34), (12)) == (34));
    assert(candidate((15), (8), (5)) == (5));
    assert(candidate((3), (33), (5212)) == (33));
    assert(candidate((1259), (3), (52)) == (3));
    assert(candidate((7919), (-1), (12)) == (-1));
    assert(candidate((3609), (1245), (583)) == (583));
    assert(candidate((91), (56), (129)) == (129));
    assert(candidate((6), (34), (1234)) == (1234));
    assert(candidate((1), (2), (0)) == (0));
    assert(candidate((2), (2), (0)) == (2));
}
"
HumanEval/151,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y sã n paamame tɩ b kõ sõor vɛrse, lebg n wa ne sõor vɛrse wã pʋgẽ wã sẽn pa yembrã, la b lebs n wa ne b sẽn lebg b vɛrse wã pʋgẽ wã fãa sẽn yaa a yiib-n-soabã. Pa le get sõor sẽn pa zemsã ye. >>> double_the_difference{(((std::vector<float>({(long) 1, (long) 3, (long) 2, (long) 0}))) (10) >>> double_the_difference{((std::vector<float>{(long) -1, (long) -2, (long) 0}))) (0) >>> double_the_difference{((std::vector<float>{(long) -9, (long) -2}))) (81) >>> double_the_difference{((std::vector<float>{(long) -0))) (0) Sã n yaa tɩ vɛrse, lebg n wa ne 0.
long double_the_difference(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long double_the_difference(std::vector<float> lst) {
    long sum_of_squares = 0;
    for (float num : lst) {
        if (num > 0 && static_cast<long>(num) == num && static_cast<long>(num) % 2 != 0) {
            sum_of_squares += static_cast<long>(num) * static_cast<long>(num);
        }
    }
    return sum_of_squares;
}","}
int main() {
    auto candidate = double_the_difference;
    assert(candidate((std::vector<float>())) == (0));
    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));
    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));
    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));
    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));
}
"
HumanEval/152,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n wa bãng tɩ ned n wa n bãng bũmb ning sẽn na n zĩnd wakat ninga, d segd n tẽega rẽ n mak-a ne a to wã. D segd n bãnga ned sã n togsa bũmb ning sẽn na n zĩnd wakat ning. D na n paama vɛɛtr a yiib sẽn tar vɛɛtr ning sẽn na n wilg a soabã sẽn togse. Vɛɛtr ning sẽn na n lebg n wa ne vɛɛtr ning sẽn na n wilg a soabã sẽn togse. Vɛɛtr ning sẽn na n lebg n wa ne vɛɛtr ning sẽn na n wilg a soabã sẽn togse. Vɛɛtr ning sẽn na n lebg n wa ne vɛɛtr ning sẽn na n togse, a togsa 0. Vɛɛtr ning sẽn na n lebg n wa ne vɛɛtr ning sẽn togse, a togsa 0. Vɛɛtr ning sẽn na n lebg n wa ne vɛɛtr ning sẽn togse, a togsa a sẽn togse.
std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
    std::vector<long> diff;
    for (size_t i = 0; i < game.size(); ++i) {
        diff.push_back(std::abs(game[i] - guess[i]));
    }
    return diff;
}","}
int main() {
    auto candidate = compare;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));
    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));
}
"
HumanEval/153,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Y na n paama sull yʋʋr (sull sẽn yaa sõor) la sẽn paasd-b sõor. B sẽn paasd-b sõorã yaa woto: B sã n yeel tɩ CAP yaa sõor ning sẽn be sõor ning sẽn paasd-a wã pʋgẽ wã, la tɩ SM yaa sõor ning sẽn be sõor ning sẽn paasd-a wã pʋgẽ wã, yaa sõor ning sẽn paasd-a wã la b kõ ne sull ning sẽn boond tɩ CAP - SM. Y segd n yãka sẽn paasd-a wã sẽn paasd-a wã n lebg n wa ne sõor sẽn be woto: ClassName.StrongestExtensionName. Sã n yaa tɩ sõor a yiib bɩ sẽn yɩɩd sẽn paasd-b sõor sẽn yaa a yembr n be, y segd n yãka sẽn dengd n wa ne sõor ning sẽn paasd-a wã. Wala makre, y sã n kõ ""Slices"" sẽn yaa sullã la sẽn paasd-b sõorã: ['SErviSliNGCes' 'Cheese', 'StufedF'] bɩ y tog n lebg n wa ne 'Slices.SliviSliNGCes' 'myst': 'SliNGCes::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
","#include<assert.h>
#include<bits/stdc++.h>

int calculate_strength(const std::string& extension) {
    int cap_count = 0;
    int sm_count = 0;
    for (char c : extension) {
        if (isupper(c)) {
            cap_count++;
        } else if (islower(c)) {
            sm_count++;
        }
    }
    return cap_count - sm_count;
}

std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
    if (extensions.empty()) {
        return class_name;
    }

    std::string strongest_extension = extensions[0];
    int max_strength = calculate_strength(extensions[0]);

    for (size_t i = 1; i < extensions.size(); ++i) {
        int current_strength = calculate_strength(extensions[i]);
        if (current_strength > max_strength) {
            max_strength = current_strength;
            strongest_extension = extensions[i];
        }
    }

    return class_name + ""."" + strongest_extension;
}","}
int main() {
    auto candidate = Strongest_Extension;
    assert(candidate((""Watashi""), (std::vector<std::string>({(std::string)""tEN"", (std::string)""niNE"", (std::string)""eIGHt8OKe""}))) == (""Watashi.eIGHt8OKe""));
    assert(candidate((""Boku123""), (std::vector<std::string>({(std::string)""nani"", (std::string)""NazeDa"", (std::string)""YEs.WeCaNe"", (std::string)""32145tggg""}))) == (""Boku123.YEs.WeCaNe""));
    assert(candidate((""__YESIMHERE""), (std::vector<std::string>({(std::string)""t"", (std::string)""eMptY"", (std::string)""nothing"", (std::string)""zeR00"", (std::string)""NuLl__"", (std::string)""123NoooneB321""}))) == (""__YESIMHERE.NuLl__""));
    assert(candidate((""K""), (std::vector<std::string>({(std::string)""Ta"", (std::string)""TAR"", (std::string)""t234An"", (std::string)""cosSo""}))) == (""K.TAR""));
    assert(candidate((""__HAHA""), (std::vector<std::string>({(std::string)""Tab"", (std::string)""123"", (std::string)""781345"", (std::string)""-_-""}))) == (""__HAHA.123""));
    assert(candidate((""YameRore""), (std::vector<std::string>({(std::string)""HhAas"", (std::string)""okIWILL123"", (std::string)""WorkOut"", (std::string)""Fails"", (std::string)""-_-""}))) == (""YameRore.okIWILL123""));
    assert(candidate((""finNNalLLly""), (std::vector<std::string>({(std::string)""Die"", (std::string)""NowW"", (std::string)""Wow"", (std::string)""WoW""}))) == (""finNNalLLly.WoW""));
    assert(candidate((""_""), (std::vector<std::string>({(std::string)""Bb"", (std::string)""91245""}))) == (""_.Bb""));
    assert(candidate((""Sp""), (std::vector<std::string>({(std::string)""671235"", (std::string)""Bb""}))) == (""Sp.671235""));
}
"
HumanEval/154,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la gom-biis a yiibu. Y segd n lebg n wa ne true sã n yaa gom-biis a yiib soabã bɩ a sẽn lebg n wa wã yaa gom-biis a yiib n soabã pʋgẽ >>> cycpattern_check((""abcd""), (""abd"")) (false) >>> cycpattern_check((""hello""), (""ell"")) (true) >>> cycpattern_check(""whassup""), (""psus"")) (false) >>> cycpattern_check(""abab""), (""baa"")) (true) >>> cycpattern_(check""efef""), (""eeff"") (false) >>> cycpattern_check((""himens""), (""simen"") (true)
bool cycpattern_check(std::string a, std::string b) {
","#include<assert.h>
#include<bits/stdc++.h>

bool cycpattern_check(std::string a, std::string b) {
    if (b.empty()) {
        return true;
    }
    if (a.length() < b.length()) {
        return false;
    }
    for (int i = 0; i < b.length(); ++i) {
        std::rotate(b.begin(), b.begin() + 1, b.end());
        if (a.find(b) != std::string::npos) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = cycpattern_check;
    assert(candidate((""xyzw""), (""xyw"")) == (false));
    assert(candidate((""yello""), (""ell"")) == (true));
    assert(candidate((""whattup""), (""ptut"")) == (false));
    assert(candidate((""efef""), (""fee"")) == (true));
    assert(candidate((""abab""), (""aabb"")) == (false));
    assert(candidate((""winemtt""), (""tinem"")) == (true));
}
"
HumanEval/155,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ sõor sẽn yaa zãng, d na n lebg n wa ne tuple sẽn tar sõor sẽn yaa zuloees la zuloees sõor n zems taaba. Makre: >>> even_odd_count((-12)) (std::make_tuple(1, 1)) >>> even_odd_count((123)) (std::make_tuple(1, 2)
std::tuple<long, long> even_odd_count(long num) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<tuple>

std::tuple<long, long> even_odd_count(long num) {
    long even_count = 0;
    long odd_count = 0;
    std::string s = std::to_string(std::abs(num));
    for (char c : s) {
        int digit = c - '0';
        if (digit % 2 == 0) {
            even_count++;
        } else {
            odd_count++;
        }
    }
    return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_count;
    assert(candidate((7)) == (std::make_tuple(0, 1)));
    assert(candidate((-78)) == (std::make_tuple(1, 1)));
    assert(candidate((3452)) == (std::make_tuple(2, 2)));
    assert(candidate((346211)) == (std::make_tuple(3, 3)));
    assert(candidate((-345821)) == (std::make_tuple(3, 3)));
    assert(candidate((-2)) == (std::make_tuple(1, 0)));
    assert(candidate((-45347)) == (std::make_tuple(2, 3)));
    assert(candidate((0)) == (std::make_tuple(1, 0)));
}
"
HumanEval/156,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B sã n kõ-y sõor sẽn yaa sõma, bɩ y bao n bãng a sẽn yaa to-to ne Romã sõor sẽn yaa to-to, n lebg n wa ne a sẽn yaa to-to wã.
std::string int_to_mini_roman(long number) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string int_to_mini_roman(long number) {
    std::string roman = """";
    std::vector<std::pair<int, std::string>> roman_map = {
        {1000, ""m""}, {900, ""cm""}, {500, ""d""}, {400, ""cd""}, {100, ""c""},
        {90, ""xc""}, {50, ""l""}, {40, ""xl""}, {10, ""x""}, {9, ""ix""}, {5, ""v""},
        {4, ""iv""}, {1, ""i""}
    };

    for (const auto& pair : roman_map) {
        while (number >= pair.first) {
            roman += pair.second;
            number -= pair.first;
        }
    }
    return roman;
}","}
int main() {
    auto candidate = int_to_mini_roman;
    assert(candidate((19)) == (""xix""));
    assert(candidate((152)) == (""clii""));
    assert(candidate((251)) == (""ccli""));
    assert(candidate((426)) == (""cdxxvi""));
    assert(candidate((500)) == (""d""));
    assert(candidate((1)) == (""i""));
    assert(candidate((4)) == (""iv""));
    assert(candidate((43)) == (""xliii""));
    assert(candidate((90)) == (""xc""));
    assert(candidate((94)) == (""xciv""));
    assert(candidate((532)) == (""dxxxii""));
    assert(candidate((900)) == (""cm""));
    assert(candidate((994)) == (""cmxciv""));
    assert(candidate((1000)) == (""m""));
}
"
HumanEval/157,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// A sã n yaa a tãabã n yaa goosneerã, a lebgda sɩd bala. A sã n pa rẽ, a lebgda ziri. Goosneerã yaa goosneer sẽn tar goosneerã n na n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n lebg n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n
bool right_angle_triangle(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>

bool right_angle_triangle(long a, long b, long c) {
    std::vector<long> sides = {a, b, c};
    std::sort(sides.begin(), sides.end());
    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);
}","}
int main() {
    auto candidate = right_angle_triangle;
    assert(candidate((3), (4), (5)) == (true));
    assert(candidate((1), (2), (3)) == (false));
    assert(candidate((10), (6), (8)) == (true));
    assert(candidate((2), (2), (2)) == (false));
    assert(candidate((7), (24), (25)) == (true));
    assert(candidate((10), (5), (7)) == (false));
    assert(candidate((5), (12), (13)) == (true));
    assert(candidate((15), (8), (17)) == (true));
    assert(candidate((48), (55), (73)) == (true));
    assert(candidate((1), (1), (1)) == (false));
    assert(candidate((2), (2), (10)) == (false));
}
"
HumanEval/158,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Gʋls-y tʋʋm-noor sẽn tõe n sak n deeg vɛɛs-rãmb sẽn yaa vɛɛs-rãmb n be. Vɛɛs-rãmbã tara gom-biis toor-toore. Lebs-y gom-biis sẽn tar vɛɛs-rãmb sõor sẽn yaa toor-toore. Vɛɛs-rãmb wʋsg sã n tar vɛɛs-rãmb sõor sẽn yaa toor-toore, lebs-y ned ning sẽn yɩ pipi n zĩnd ne gom-biis sõor sẽn yaa toore. >>> find_max((std::vector<std::string>({(std::string) ""name"", (std::string) ""of"", (std::string) ""string""}))) (""string"") >>> find_max(std::vector<std::string>((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::string find_max(std::vector<std::string> words) {
","#include<assert.h>
#include<bits/stdc++.h>

int count_unique_chars(const std::string& s) {
    std::set<char> unique_chars;
    for (char c : s) {
        unique_chars.insert(c);
    }
    return unique_chars.size();
}

std::string find_max(std::vector<std::string> words) {
    if (words.empty()) {
        return """";
    }

    std::string max_unique_word = words[0];
    int max_unique_count = count_unique_chars(words[0]);

    for (size_t i = 1; i < words.size(); ++i) {
        int current_unique_count = count_unique_chars(words[i]);
        if (current_unique_count > max_unique_count) {
            max_unique_count = current_unique_count;
            max_unique_word = words[i];
        } else if (current_unique_count == max_unique_count && words[i] < max_unique_word) {
            max_unique_word = words[i];
        }
    }
    return max_unique_word;
}","}
int main() {
    auto candidate = find_max;
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""of"", (std::string)""string""}))) == (""string""));
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""enam"", (std::string)""game""}))) == (""enam""));
    assert(candidate((std::vector<std::string>({(std::string)""aaaaaaa"", (std::string)""bb"", (std::string)""cc""}))) == (""aaaaaaa""));
    assert(candidate((std::vector<std::string>({(std::string)""abc"", (std::string)""cba""}))) == (""abc""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""this"", (std::string)""game"", (std::string)""of"", (std::string)""footbott""}))) == (""footbott""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""gonna"", (std::string)""rock""}))) == (""gonna""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""a"", (std::string)""mad"", (std::string)""nation""}))) == (""nation""));
    assert(candidate((std::vector<std::string>({(std::string)""this"", (std::string)""is"", (std::string)""a"", (std::string)""prrk""}))) == (""this""));
    assert(candidate((std::vector<std::string>({(std::string)""b""}))) == (""b""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""play"", (std::string)""play""}))) == (""play""));
}
"
HumanEval/159,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Yãmb yaa bõang kom sẽn tar, la y zoe n dɩka karot sõor sẽn zems n ta sõor sẽn zemsã, la masã y segd n dɩka karot n paase, n na n pids daarã rɩɩb sẽn na n yɩ to-to wã. Y segd n lebg n waa ne vɛɛktɛɛr sẽn yaa [ karot sõor sẽn dɩg y rɩɩbã poore, karot sõor sẽn ket y rɩɩbã poore ] sã n pa be karot sõor sẽn sek sẽn ketã, y na n dɩka karotã sẽn ketã fãa, la y na n ket n tara kom. Makre: >>> rɩt((5), (6), (10)) (std:: vector<long>{()11, (long) 4}) >>> rɩt(4), (8), (9) (std:: vector<long>{() 12, ( (1})) rɩt >>>(1), (10), (10) (std:: vector<long>{() 11, (long) 0)) >>> ((2), (5) (std:: vector<<long>{) 7, (long)) Vẽ) @: koeems sõor sẽn ketã yaa: 0 = koeems sõor sẽn zems sẽn na n be karotã pʋgẽ.
std::vector<long> eat(long number, long need, long remaining) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> eat(long number, long need, long remaining) {
    long eaten = 0;
    long left = remaining;
    long to_eat = need;

    if (left >= to_eat) {
        eaten = to_eat;
        left -= to_eat;
    } else {
        eaten = left;
        left = 0;
    }

    return {(long)number + eaten, left};
}","}
int main() {
    auto candidate = eat;
    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));
    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));
    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));
    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));
    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));
    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));
}
"
HumanEval/160,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-a-la vɛɛktɛɛr a yiib la operand. Vɛɛktɛɛr a yembr tara alzebr tʋʋm-noy sẽn yaa kãsemse, tɩ yiib-n-soabã yaa vɛɛktɛɛr sẽn yaa ninsabls tẽnsa vɛɛktɛɛr. Vɛɛktɛɛr a yiibã sẽn kõ wã, rɩk-y-b n maan alzebr koees n lebg n wa ne vɛɛktɛɛr kãnga sẽn yaa bũmb ninga. Vɛɛktɛɛr a yiibã sẽn yaa sõma wã yaa: paasg (+) n boog ( ) n lebg n wa ne vɛɛktɛɛr kãnga sẽn yaa bũmb ninga. Vɛɛktɛɛr a yiibã sẽn yaa sõma wã yaa: paasg (+) n boog ( ) n lebg n wa ne vɛɛktɛɛr kãnga sẽn yaa bũmb ninga. Vɛɛktɛɛr a yiib sẽn yaa sõma wã yaa: paasg (+) n boog ( ) n lebg n wa ne vɛɛktɛɛr kãnga sẽn yaa bũmb ninga.
long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
","#include<assert.h>
#include<bits/stdc++.h>

long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
    std::vector<long> current_operand = operand;
    std::vector<std::string> current_operator = op;

    auto apply_op = [&](long a, long b, const std::string& o) {
        if (o == ""+"") return a + b;
        if (o == ""-"") return a - b;
        if (o == ""*"") return a * b;
        if (o == ""//"") return a / b;
        if (o == ""**"") return static_cast<long>(pow(a, b));
        return 0L; // Should not happen
    };

    std::vector<std::string> precedence1 = {""**""};
    std::vector<std::string> precedence2 = {""*"", ""//""};
    std::vector<std::string> precedence3 = {""+"", ""-""};

    auto evaluate = [&](const std::vector<std::string>& prec) {
        size_t i = 0;
        while (i < current_operator.size()) {
            bool found = false;
            for (const auto& o : prec) {
                if (current_operator[i] == o) {
                    current_operand[i] = apply_op(current_operand[i], current_operand[i + 1], current_operator[i]);
                    current_operand.erase(current_operand.begin() + i + 1);
                    current_operator.erase(current_operator.begin() + i);
                    found = true;
                    break;
                }
            }
            if (!found) {
                i++;
            }
        }
    };

    evaluate(precedence1);
    evaluate(precedence2);
    evaluate(precedence3);

    return current_operand[0];
}","}
int main() {
    auto candidate = do_algebra;
    assert(candidate((std::vector<std::string>({(std::string)""**"", (std::string)""*"", (std::string)""+""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));
    assert(candidate((std::vector<std::string>({(std::string)""+"", (std::string)""*"", (std::string)""-""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));
    assert(candidate((std::vector<std::string>({(std::string)""//"", (std::string)""*""})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));
}
"
HumanEval/161,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// B kõ-y-la sõn-vãoogo s. sã n yaa lɛtbr bɩ y tek a sẽn be zĩig ning n lebg n wa a sẽn beẽ wã, wall y tek n wa a sẽn beẽ wã, sã n ka rẽ bɩ y bas-a a sẽn beẽ wã. Sã n pa be lɛtbr ye, bɩ y tek n wa. Tʋʋmdã segd n lebg n waa ne sõn-vãoogã sẽn wa ne wã. Makr >>> solve((""1234"")) (""4321"") >>> solve(""ab"")) (""AB"") >>> solve(""#a@C"")) (""#A@c"")
std::string solve(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string solve(std::string s) {
    bool has_letter = false;
    for (char c : s) {
        if (isalpha(c)) {
            has_letter = true;
            break;
        }
    }

    if (has_letter) {
        for (char& c : s) {
            if (islower(c)) {
                c = toupper(c);
            } else if (isupper(c)) {
                c = tolower(c);
            }
        }
    } else {
        std::reverse(s.begin(), s.end());
    }
    return s;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((""AsDf"")) == (""aSdF""));
    assert(candidate((""1234"")) == (""4321""));
    assert(candidate((""ab"")) == (""AB""));
    assert(candidate((""#a@C"")) == (""#A@c""));
    assert(candidate((""#AsdfW^45"")) == (""#aSDFw^45""));
    assert(candidate((""#6@2"")) == (""2@6#""));
    assert(candidate((""#$a^D"")) == (""#$A^d""));
    assert(candidate((""#ccc"")) == (""#CCC""));
}
"
HumanEval/162,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Sã n kõ-y sõn-vãoog sẽn yaa 'text', lebg n wa ne a md5 sẽn yaa a wagstaab sẽn yaa wa. Sã n yaa tɩ 'text' yaa sõn-vãoog sẽn pa tar bũmb, lebg n wa ne a None. >>> string_to_md5((""Hello world"")) ""3e25960a79dbc69b674cd4ec67a72c62""
std::optional<std::string> string_to_md5(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>
#include <optional>

#include <openssl/md5.h>
#include <iomanip>
#include <sstream>

std::optional<std::string> string_to_md5(std::string text) {
    if (text.empty()) {
        return std::nullopt;
    }

    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5((unsigned char*)text.c_str(), text.length(), digest);

    std::stringstream ss;
    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];
    }
    return ss.str();
}","}
int main() {
    auto candidate = string_to_md5;
    assert(candidate((""Hello world"")) == ""3e25960a79dbc69b674cd4ec67a72c62"");
    assert(candidate(("""")) == std::nullopt);
    assert(candidate((""A B C"")) == ""0ef78513b0cb8cef12743f5aeb35f888"");
    assert(candidate((""password"")) == ""5f4dcc3b5aa765d61d8327deb882cf99"");
}
"
HumanEval/163,mos_Latn,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// D sã n kõ sõor a la b sẽn yaa sõma, d na n lebg n wa ne sõor a la b sẽn yaa sõma wã, n wa ne b sẽn yaa sõma wã, n wa ne b sẽn yaa sõma wã.
std::vector<long> generate_integers(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> generate_integers(long a, long b) {
    std::vector<long> result;
    long start = std::min(a, b);
    long end = std::max(a, b);
    for (long i = start; i <= end; ++i) {
        if (i % 2 == 0) {
            result.push_back(i);
        }
    }
    return result;
}","}
int main() {
    auto candidate = generate_integers;
    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((17), (89)) == (std::vector<long>()));
}
"
