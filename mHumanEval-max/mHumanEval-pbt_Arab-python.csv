task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,pbt_Arab,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""وګورئ چې د شمېرو په ورکړل شوي لیست کې ، کوم دوه شمیرې د ورکړل شوي حد څخه یو بل ته نږدې دي. مثال: >>> has_close_elements (([1.0 ، 2.0 ، 3.0 ، 0.5) غلط >>> has_close_elements (([1.0 ، 2.8 ، 3.0 ، 4.0 ، 5.0 ، 2.0 ، 0.3) ریښتینی """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,pbt_Arab,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""د دې فنکشن لپاره ان پټ یو تار دی چې د ګنډل شوي قوسونو ډیری ډلې لري. ستاسو هدف دا دی چې دا ګروپ په جلا تارونو کې جلا کړئ او د هغو لیست بیرته راګرځئ. جلا ګروپونه متوازن دي (هر خلاص قوس په سمه توګه تړل شوی) او په یو بل کې نه نیسټ شوي د ننوت تار کې کوم ځایونه له پامه غورځول. مثال: >>> جلا_پیرن_ګروپونه ' ((( ) (() (()))))) ' [' (()) '، ' ((()) '، ' ((()))) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,pbt_Arab,python,"

def truncate_number(number: float) -> float:
    """"""د مثبت تعویضي ټکي شمیره ورکړل شوې ، دا په بشپړ برخه کې تحلیل کیدی شي (لوی عدد د ورکړل شوي شمیر څخه کوچنی) او اعشاریې (پاته برخه تل له 1 څخه کوچنۍ وي). د شمیر اعشاریه برخه بیرته راګرځئ. مثال: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,pbt_Arab,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""تاسو ته د بانکي حساب د زیرمو او وتلو عملیاتو لیست درکول کیږي چې د صفر توازن سره پیل کیږي. ستاسو دنده دا ده چې کشف کړئ که په کوم وخت کې د حساب توازن د صفر څخه ښکته راشي ، او په دې وخت کې فنکشن باید ریښتینی بیرته راستون شي. که نه نو دا باید غلط بیرته راستون شي. مثال: >>> below_zero([1, 2, 3]) غلط >>> below_zero([1, 2, -4, 5]) ریښتینی """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,pbt_Arab,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""د ورکړل شوي لیست لپاره د ننوتلو شمیرې، د دې ډیټا سیټ د اوسط شاوخوا شاوخوا اوسط مطلق انحراف محاسبه کړئ. اوسط مطلق انحراف د هر عنصر او مرکزي نقطې ترمنځ اوسط مطلق توپیر دی (په دې حالت کې معنی): MAD = اوسط ۰ x - x_mean  مثال: >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,pbt_Arab,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""د ننوتلو لیست د هر دوه پرله پسې عناصرو ترمنځ یو شمیر 'دلیمیټر' داخل کړئ `numbers' >>> intersperse (([] ، 4) [] >>> intersperse (([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,pbt_Arab,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""د دې فنکشن لپاره ان پټ د ځایونو لخوا جلا شوي قوسونو لپاره ډیری ډلو استازیتوب کوي. د هرې ډلې لپاره ، د قوسونو د نیسټینګ ترټولو ژوره کچه محصول کړئ. د مثال په توګه (() (()) د نیسټینګ اعظمي دوه کچې لري پداسې حال کې چې ((())) درې لري. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,pbt_Arab,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""د تارونو د ننوتلو لیست یوازې د هغو لپاره فلټر کړئ چې ورکړل شوي فرعي تار لري >>> filter_by_substring([] ، 'a') [] >>> filter_by_substring(['abc' ، 'bacd' ، 'cde' ، 'array'] ، 'a') ['abc' ، 'bacd' ، 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,pbt_Arab,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""د بشپړ شمیرونو د ورکړل شوي لیست لپاره ، یو ټپل بیرته راګرځئ چې د ټولې لیست کې د ټولو بشپړ شمیرونو مجموعه او محصول لري. خالي مجموعه باید 0 سره مساوي وي او خالي محصول باید 1 سره مساوي وي. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,pbt_Arab,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""د بشپړ شمیرونو له ورکړل شوي لیست څخه ، د ترتیب په ترتیب کې تر ورکړل شوي شیبې پورې موندل شوي د رولینګ اعظمي عنصر لیست رامینځته کړئ. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,pbt_Arab,python,"

def is_palindrome(string: str) -> bool:
    """"""تر ټولو لنډ پالینډروم ومومئ چې د ورکړل شوي تار سره پیل کیږي. د الګوریتم مفکوره ساده ده: - د ورکړل شوي تار ترټولو اوږد پوسټفیکس ومومئ چې پالینډروم وي. - د تار مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخکینۍ مخ مخ مخ مخکینۍ مخ مخ مخ مخ مخ مخ مخ مخ مخکینۍ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ مخکۍ""""""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""ازموینه که ورکړل شوی تار یو پالینډروم وي """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,pbt_Arab,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""ننوتل دوه تارونه دي a او b چې یوازې د 1s او 0s څخه جوړ شوي دي. په دې ننوتلو باندې بائنري XOR ترسره کړئ او پایله یې د تار په توګه هم بیرته راګرځئ. >>> string_xor (('010'، '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,pbt_Arab,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""د تارونو له لیست څخه، تر ټولو اوږد یو بیرته راګرځوئ. د ورته اوږدوالي د څو تارونو په صورت کې لومړی یو بیرته راګرځوئ. د ننوتلو لیست خالي کیدو په صورت کې هیڅ نه بیرته راګرځئ. >>> تر ټولو اوږد ((([]) >>> تر ټولو اوږد ((['a','b','c']) 'a' >>> تر ټولو اوږد ((['a','bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,pbt_Arab,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""د دوو عددونو a او b تر ټولو لوی ګډ تقسیم کوونکی بیرته راګرځوئ >>> تر ټولو لوی_مشترکه_تقسیم کوونکی ((3, 5) 1 >>> تر ټولو لوی_مشترکه_تقسیم کوونکی ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,pbt_Arab,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""د ننوتل شوي تار له لنډ څخه تر اوږده پورې د ټولو پریفکسونو لیست بیرته راګرځئ >>> all_prefixes (('abc') ['a'، 'ab'، 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,pbt_Arab,python,"

def string_sequence(n: int) -> str:
    """"""یو تار بیرته راګرځوي چې د ځای له مخې محدود شمیرې لري چې له 0 څخه تر n پورې پیل کیږي. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,pbt_Arab,python,"

def count_distinct_characters(string: str) -> int:
    """"""ورکړل شوې تار، ومومئ چې څومره جلا کرکټرونه (د قضیې په پام کې نیولو پرته) دا جوړوي >>> count_distinct_characters ((('xyzXYZ') 3 >>> count_distinct_characters ((('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,pbt_Arab,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""د دې فنکشن لپاره ان پټ په ځانګړي ASCII ب formatه کې د میوزیک نوټونو استازیتوب کولو تار دی. ستاسو دنده دا ده چې د بشپړ تارونو تار لیست تحلیل کړئ چې د ډیری بیټونو سره سمون لري. دلته یو لیګینډ دی: 'o' نوټ ، وروستی څلور بیټونه 'o' کوم - نیم نوټ ، وروستي دوه بیټونه 'o' - کوټر نوټ ، وروستی یو بیټ >>> parse_music 'o' کوم چې د دې لپاره کارول کیږي. دا دنده ده چې د بشپړ شمیرې بیرته راستنیدنه وکړي او هر یو یې څنګه نه کوي.""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,pbt_Arab,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""ومومئ چې په اصلي تار کې څومره ځله ورکړل شوی فرعي تار موندل کیدی شي. د سرپوشې قضیې شمیرل. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,pbt_Arab,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""د ننوتلو لپاره د 'صفر' څخه تر 'نه' پورې د شمېرو يو ځای-محدود تار دی. صحيح انتخابونه 'صفر'، 'یو'، 'دوه'، 'درې'، 'څلور'، 'پنځه'، 'شپږ'، 'اووه'، 'اووه' او 'نوه' دي. د شمېرو سره تار بیرته راګرځوي چې له کوچني څخه تر لوی پورې ترتیب شوي دي >>> sort_numbers ((('درې یو پنځه') 'یو درې پنځه' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,pbt_Arab,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""د شمېرو له چمتو شوي لیست څخه (لږترلږه دوه) دوه غوره کړئ او بیرته راګرځئ چې یو بل ته نږدې دي او په ترتیب سره یې بیرته راګرځئ (کوچنی شمیره ، لویه شمیره). >>> find_closest_elements (([1.0 ، 2.0 ، 3.0 ، 4.0 ، 5.0 ، 2.2]) (2.0 ، 2.2) >>> find_closest_elements (([1.0 ، 2.0 ، 3.0 ، 4.0 ، 5.0 ، 2.0]) (2.0 ، 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,pbt_Arab,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""د شمېرو لیست ورکړل شوی (لږترلږه دوه عناصرو څخه) ، دې لیست ته یو خطي بدلون پلي کړئ ، نو دا چې ترټولو کوچنۍ شمیره به 0 شي او ترټولو لوی به 1 شي >>> rescale_to_unit (([1.0 ، 2.0 ، 3.0 ، 4.0 ، 5.0]) [0.0 ، 0.25 ، 0.5 ، 0.75 ، 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,pbt_Arab,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""د هر ډول پیتون ارزښتونو لیست یوازې د بشپړ شمیرو لپاره فلټر کړئ >>> filter_integers ((['a'، 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc'، {}، []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,pbt_Arab,python,"

def strlen(string: str) -> int:
    """"""د ورکړل شوي تار >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,pbt_Arab,python,"

def largest_divisor(n: int) -> int:
    """"""د ورکړل شوي عدد n لپاره، تر ټولو لوی عدد ومومئ چې n په مساوي ډول ويشي، له n څخه کوچنی >>> لوی_ډیویزر ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,pbt_Arab,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""د ورکړل شوي عدد د لومړنیو فاکتورونو لیست بیرته راګرځول د کوچني څخه تر لوی پورې په ترتیب کې. هر فاکتور باید د څو ځله سره سمون ولري چې په فاکتور کې څومره ځله څرګندیږي. د ننوتلو شمیره باید د ټولو فاکتورونو محصول سره مساوي وي >>> فاکتور کړئ ((8) [2، 2، 2] >>> فاکتور کړئ ((25) [5، 5] >>> فاکتور کړئ ((70) [2، 5، 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,pbt_Arab,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""د بشپړ شمیرونو له لیست څخه ، ټول عناصر لرې کړئ چې له یو ځل څخه ډیر پیښیږي. د عناصرو ترتیب ورته په ان پټ کې ورته وساتئ. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,pbt_Arab,python,"

def flip_case(string: str) -> str:
    """"""د ورکړل شوي تار لپاره، کوچني حروف لوی او لوی حروف کوچني ته واړوئ. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,pbt_Arab,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""د تارونو لیست په یو واحد تار کې سره یوځای کړئ >>> concatenate (([]) '' >>> concatenate ((['a','b','c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,pbt_Arab,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""د تارونو د ننوتلو لیست یوازې د هغو لپاره فلټر کړئ چې د ورکړل شوي پریفیکس سره پیل کیږي. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,pbt_Arab,python,"

def get_positive(l: list):
    """"""په لیست کې یوازې مثبت شمیرې بیرته راګرځوئ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,pbt_Arab,python,"

def is_prime(n):
    """"""ریښتیني بیرته راستون کړئ که ورکړل شوې شمیره لومړنۍ وي ، او که نه نو غلط. >>> is_prime ((6) غلط >>> is_prime ((101) ریښتیني >>> is_prime ((11) ریښتیني >>> is_prime ((13441) ریښتیني >>> is_prime ((61) ریښتیني >>> is_prime ((4) غلط >>> is_prime ((1) غلط """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,pbt_Arab,python,"import math


def poly(xs: list, x: float):
    """"""find_zero د xs د څو اړخیز ضریبونه دي. find_zero find x داسې چې poly (((x) = 0. find_zero یوازې یوازې صفر ټکی بیرته راولي، حتی که ډیری شتون ولري. سربیره پردې، find_zero یوازې د xs لیست لري چې حتی د ضریبونو شمیر او ترټولو لوی غیر صفر ضریب لري ځکه چې دا د حل تضمین کوي. >>> round ((find_zero[(1, 2]) ، 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""په x نقطه کې د کوفيفېسنټ xs سره پولینوم ارزوي. xs[0] + xs[1] * x + xs[1] * x ^ 2 + .... xs[n] * x ^ n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,pbt_Arab,python,"

def sort_third(l: list):
    """"""دا فنکشن یو لیست l اخلي او یو لیست l' بیرته راولي چې l' د l سره ورته وي په شاخصونو کې چې په دریو ویشل کیدی نشي ، پداسې حال کې چې د دې ارزښتونه په شاخصونو کې چې په دریو ویشل کیدی شي د l د اړوندو شاخصونو ارزښتونو سره مساوي دي ، مګر ترتیب شوي. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,pbt_Arab,python,"

def unique(l: list):
    """"""په لیست کې ترتیب شوي ځانګړي عناصر بیرته راګرځوي >>> ځانګړي (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,pbt_Arab,python,"

def max_element(l: list):
    """"""په لیست کې اعظمي عنصر بیرته راګرځوئ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,pbt_Arab,python,"

def fizz_buzz(n: int):
    """"""د عدد 7 د عددونو په شمیر کې د n څخه کم چې د 11 یا 13 لخوا تقسیم کیږي راګرځول کیږي. >>> fizz_buzz ((50) 0 >>> fizz_buzz ((78) 2 >>> fizz_buzz ((79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,pbt_Arab,python,"

def sort_even(l: list):
    """"""دا فنکشن یو لیست l اخلي او یو لیست l' بیرته راولي چې l' د l سره ورته وي په عجیب شاخصونو کې ، پداسې حال کې چې د دې ارزښتونه په حتی شاخصونو کې د l د حتی شاخصونو ارزښتونو سره مساوي دي ، مګر ترتیب شوي. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,pbt_Arab,python,"

def encode_cyclic(s: str):
    """"""د ان پټ تار په توګه اخلي چې د encode_cyclic فنکشن سره کوډ شوی وي. د کوډ شوي تار بیرته راستنوي. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""د درې کرکټرونو د دورې ګروپونو لخوا کوډ شوي تار بیرته راولي.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,pbt_Arab,python,"

def prime_fib(n: int):
    """"""prime_fib د n-م شمېره بیرته راګرځوي چې د فیبوناچي شمېره ده او دا هم لومړنۍ ده. >>> prime_fib ((1) 2) >>> prime_fib ((2) 3) >>> prime_fib ((3) 5) >>> prime_fib ((4) 13) >>> prime_fib ((5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,pbt_Arab,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero د ان پټ په توګه د بشپړ شمیرو لیست اخلي. دا ریښتیا راستنوي که چیرې په لیست کې درې جلا عناصر شتون ولري چې صفر ته اضافه شي ، او غلط که نه. >>> triples_sum_to_zero (([1 ، 3 ، 5 ، 0]) غلط >>> triples_sum_to_zero (([1 ، 3 ، -2 ، 1]) ریښتیا >>> triples_sum_to_zero (([1 ، 2 ، 3 ، 7]) غلط >>> triples_sum_to_zero (([2 ، 4 ، -5 ، 3 ، 9 ، 7]) ریښتیا >>> triples_sum_to_zero [1]) غلط """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,pbt_Arab,python,"

def car_race_collision(n: int):
    """"""د موټرونو دوه ډلې د یو بل څخه ډیر لرې پیل کیږي. ټول موټرونه په ورته سرعت کې حرکت کوي. دوه موټرونه ټکر کوي کله چې یو موټر چې کی left څخه ښیې ته ځي یو موټر ته ورسیږي چې ښیې ته کی left حرکت کوي. په هرصورت ، موټرونه په لامحدود ډول قوي او قوي دي؛ په پایله کې ، دوی په خپل مسیر کې حرکت ته دوام ورکوي لکه څنګه چې دوی ټکر نه وي کړی. دا فنکشن د ورته ټکرونو شمیر تولیدوي.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,pbt_Arab,python,"

def incr_list(l: list):
    """"""د 1 لخوا د عنصرونو سره بیرته راستنیدونکی لیست. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,pbt_Arab,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero د ان پټ په توګه د بشپړ شمیرو لیست اخلي. دا ریښتیا راستنوي که چیرې په لیست کې دوه جلا عناصر شتون ولري چې صفر ته اضافه شي ، او غلط که نه. >>> pairs_sum_to_zero (([1، 3، 5، 0]) غلط >>> pairs_sum_to_zero (([1، 3، -2، 1]) غلط >>> pairs_sum_to_zero (([1، 2، 3، 7]) غلط >>> pairs_sum_to_zero (([2، 4، -5، 3، 5، 7]) ریښتیا >>> pairs_sum_to_zero (([1]) غلط """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,pbt_Arab,python,"

def change_base(x: int, base: int):
    """"""د ان پټ شمیرې x عددي اساس اساس ته بدل کړئ. د تبادلې وروسته د تار نمایندګي بیرته راګرځئ. د اساس شمیرې له 10 څخه کم دي. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,pbt_Arab,python,"

def triangle_area(a, h):
    """"""د مثلث لپاره د اړخ او لوړ بیرته راستنیدونکي ساحې اوږدوالی ورکړل شوی. >>> مثلث_عرض ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,pbt_Arab,python,"

def fib4(n: int):
    """"""د Fib4 شمیر لړۍ د فبونیکي لړۍ ته ورته لړۍ ده چې په لاندې ډول تعریف شوې: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). مهرباني وکړئ د fib4 شمیر لړۍ د n-th عنصر په اغیزمنه توګه محاسبه کولو لپاره یو فنکشن ولیکئ. تکرار مه کاروئ. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,pbt_Arab,python,"

def median(l: list):
    """"""د لیست د عناصرو منځنۍ برخه بیرته راګرځئ l. >>> منځنۍ (([3، 1، 2، 4، 5]) 3 >>> منځنۍ (([-10، 4، 6، 1000، 10، 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,pbt_Arab,python,"

def is_palindrome(text: str):
    """"""دا چک کوي چې ورکړل شوې تار یو پالینډروم دی >>> is_palindrome (('') ریښتیا >>> is_palindrome (('aba') ریښتیا >>> is_palindrome (('aaaaa') ریښتیا >>> is_palindrome (('zbcd') غلط """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,pbt_Arab,python,"

def modp(n: int, p: int):
    """"""د 2 ^ n ماډولو p بیرته راګرځئ (د شمیرې څخه خبر اوسئ). >>> modp (((3، 5) 3 >>> modp ((1101، 101) 2 >>> modp (((0, 101) 1 >>> modp (((3، 11) 8 >>> modp ((100، 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,pbt_Arab,python,"

def encode_shift(s: str):
    """"""د انکوډ_شفت فنکشن سره کوډ شوی د ننوت تار په توګه اخلي. د کوډ شوي تار بیرته راستنوي. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""په الفبا کې د هر کرکټر د 5 په بدلولو سره کوډ شوی تار بیرته راولي.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,pbt_Arab,python,"

def remove_vowels(text):
    """"""remove_vowels یو فنکشن دی چې تار اخلي او پرته له حرفونو څخه تار بیرته راولي. >>> remove_vowels ((('') ' ' >>> remove_vowels (((""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,pbt_Arab,python,"

def below_threshold(l: list, t: int):
    """"""ریښتیني بیرته راستون کړئ که چیرې په لیست کې ټولې شمیرې د حد څخه ښکته وي. >>> below_threshold (([1، 2، 4، 10]، 100) ریښتیني >>> below_threshold (([1، 20، 4، 10]، 5) غلط """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,pbt_Arab,python,"

def add(x: int, y: int):
    """"""دوه شمیرې x او y اضافه کړئ >>> اضافه کړئ (((2, 3) 5 >>> اضافه کړئ (((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,pbt_Arab,python,"

def same_chars(s0: str, s1: str):
    """"""وګورئ چې دوه کلمې ورته کرکټرونه لري. >>> same_chars ((('eabcdzzzz', 'dddzzzzzzdeddabc') ریښتیا >>> same_chars ((('abcd', 'dddddddddabc') ریښتیا >>> same_chars ((('dddddddabc', 'abcd') ریښتیا >>> same_chars ((('eabcd', 'dddddddddabc') غلط >>> same_chars ((('abcd', 'dddddddabddce') غلط >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') غلط """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,pbt_Arab,python,"

def fib(n: int):
    """"""د فبوناکسي n-م شمیره بیرته راګرځوئ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,pbt_Arab,python,"

def correct_bracketing(brackets: str):
    """"""brackets د ""<"" او "">"" یو تار دی. راستنیدنه ریښتیا ده که چیرې هر پرانیستل شوی بریکټ د تړلو بروکټ سره مطابقت ولري. >>> correct_bracketing (((""<"") غلط >>> correct_bracketing (((""<>"") ریښتیا >>> correct_bracketing (((""<><>"") ریښتیا >>> correct_bracketing (((""><<>"") غلط """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,pbt_Arab,python,"

def monotonic(l: list):
    """"""راستنول ریښتیني دي د لیست عناصر په یو ډول زیاتیدونکي یا کمیدونکي دي. >>> monotonic (([1، 2، 4، 20]) ریښتیني >>> monotonic (([1، 20، 4، 10]) غلط >>> monotonic (([4، 1، 0، -10)) ریښتیني """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,pbt_Arab,python,"

def common(l1: list, l2: list):
    """"""د دوو لیستونو لپاره بېل شوي ځانګړي عام عناصر بیرته راګرځوي. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,pbt_Arab,python,"

def largest_prime_factor(n: int):
    """"""د n تر ټولو لوی لومړنی فاکتور بیرته راګرځوئ. فرض کړئ چې n > 1 او لومړنی نه دی. >>> ترټولو لوی_لومړی_فاکتور ((13195) 29 >>> ترټولو لوی_لومړی_فاکتور ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,pbt_Arab,python,"

def sum_to_n(n: int):
    """"""sum_to_n هغه فنکشن دی چې له 1 څخه تر n پورې شمیرې جمع کوي. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,pbt_Arab,python,"

def correct_bracketing(brackets: str):
    """"""brackets د ""("" او """") يو تار دی. راستنول ریښتیا وي که هر پرانستونکي بریکټ د تړلو بروکټ سره سمون ولري. >>> correct_bracketing (((""("") غلط >>> correct_bracketing ((("")) ریښتیا >>> correct_bracketing (((()))) ریښتیا >>> correct_bracketing (((()))) غلط """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,pbt_Arab,python,"

def derivative(xs: list):
    """"""xs د څو اړخیز ضریب استازیتوب کوي. xs[0] + xs[1] * x + xs[2] * x^2 + .... د دې څو اړخیز مشتق په ورته ب inه کې بیرته راګرځئ. >>> مشتق ((([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> مشتق ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,pbt_Arab,python,"

def fibfib(n: int):
    """"""د فیب فیب شمیر لړۍ د فیبوناچي لړۍ ته ورته لړۍ ده چې په لاندې ډول تعریف شوې: fibfib ((0) == 0 fibfib ((1) == 0 fibfib ((2) == 1 fibfib ((n) == fib ((n-1) + fibfib ((n-2) + fibfib ((n-3). مهرباني وکړئ د فیب فیب شمیر لړۍ د n-th عنصر په اغیزمنه توګه محاسبه کولو لپاره یو فنکشن ولیکئ. >>> fibfib ((1) 0 >>> fib ((5) 4 >>> fib fib ((8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,pbt_Arab,python,"
FIX = """"""د vowels_count فنکشن ولیکئ کوم چې د ننوتلو په توګه د کلمې استازیتوب کوي او د تار د vowels شمیر بیرته راولي. په دې حالت کې vowels 'a' ، 'e' ، 'i' ، 'o' ، 'u' دي. دلته ، 'y' هم یو حرف دی ، مګر یوازې کله چې دا د ورکړل شوي کلمې په پای کې وي. مثال: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""د ازموینې نورې قضیې اضافه کړئ. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,pbt_Arab,python,"
def circular_shift(x, shift):
    """"""دایره د x د عددونو ارقامو ته اړول، د ارقامو ښي خوا ته اړول او پایله یې د تار په توګه بیرته راګرځول. که چیرې د ارقامو شمیر > وي، نو ارقام بیرته راګرځول. >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,pbt_Arab,python,"
def digitSum(s):
    """"""دنده دنده ولیکئ چې د ننوتلو په توګه یو تار اخلي او یوازې د پورتنیو کرکټرونو مجموعه بیرته راولي. د مثالونو په توګه: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,pbt_Arab,python,"
def fruit_distribution(s,n):
    """"""په دې کار کې، تاسو ته به يو تار چې د مڼو او نارنجونو چې د ميوو په يوه ټوکرۍ کې ویشل شوي دي د شمېر استازیتوب ورکړل شي دا ټوکرۍ مڼې، نارنج، او د مانګو ميوو لري. ورکړل د تار چې د نارنجونو او مڼو د ټول شمېر او د يو عدد چې په ټوکرۍ کې د ميوو د ټول شمېر استازیتوب کوي په ټوکرۍ کې د مانګو ميوو د شمېر بېرته. د مثال په توګه: fruit_distribution""5(مڼې او 6 نارنجونه""، 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 مڼې او 1 نارنجونه،""3) -> 3 - 0 - 1 = 2 fruit_distribution""2 مڼې او 3 نارنجونه،"" 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 مڼې او 120) ""،1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,pbt_Arab,python,"
def pluck(arr):
    """"""""د یو صف په وړاندې چې د یو ونې څانګه استازیتوب کوي چې غیر منفي عدد نوډونه لري ستاسو دنده دا ده چې یو له نوډونو څخه راوباسي او بیرته یې راولي. راټول شوی نوډ باید د کوچني حتی ارزښت سره نوډ وي. که چیرې د ورته کوچني حتی ارزښت سره ډیری نوډونه وموندل شي نو نوډ بیرته راولي چې ترټولو کوچنی شاخص لري. راټول شوی نوډ باید په لیست کې بیرته راستون شي ، [smallest_value ، د دې شاخص ]، که چیرې حتی ارزښتونه شتون ونلري یا ورکړل شوی صف خالي وي ، بیرته راستون کړئ []. مثال: 1: ننوتنه: [4,2,3] محصول: [2, 1] توضیحات: 2 ترټولو کوچنی حتی ارزښت لري ، او 2 ترټولو کوچنی شاخص لري. مثال 2: ننوتنه: [1,2,3] محصول: [2, 1] توضیحات: 2 ترټولو کوچنی ارزښت لري ، او 2 ترټولو کوچنی حتی شاخص لري. مثال 3: ننوتنه: [] محصول: [] مثال: [4: 5، [3, 4] توضیحات: 0، [0, 2] محصول: 1، نو موږ به لومړی نوډ غوره کړو چې ترټولو کوچنی شاخص لري ، مګر دوه صفرونه شتون لري. مثال: 1 * صفر = صفر.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,pbt_Arab,python,"
def search(lst):
    '''تاسو ته د مثبتو بشپړ شمیرونو یو غیر خالي لیست درکول کیږي. ترټولو لوی عدد بیرته راګرځئ چې له صفر څخه لوی وي ، او د عدد ارزښت څخه لوی یا مساوي وي. د عدد فریکونسي هغه وخت دی چې دا په لیست کې څرګندیږي. که داسې ارزښت شتون ونلري ، بیرته راستون کړئ -1. مثالونه: لټون (([4, 1, 2, 2, 3, 1]) == 2 لټون (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 لټون (([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,pbt_Arab,python,"
def strange_sort_list(lst):
    '''د بشپړ شمیرونو لیست ورکړل شوی ، په عجیب ترتیب کې لیست بیرته راګرځئ. عجیب ترتیب کول ، هغه وخت دی چې تاسو د لږترلږه ارزښت سره پیل کوئ ، بیا د پاتې بشپړ شمیر اعظمي ، بیا لږترلږه او داسې نور. مثالونه: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,pbt_Arab,python,"
def triangle_area(a, b, c):
    '''د مثلث د دریو اړخونو اوږدوالی ورکړل شوی. د مثلث ساحه بیرته راګرځوئ 2 اعشاري نقطو ته که چیرې درې اړخونه یو معتبر مثلث رامینځته کړي. که نه نو -1 بیرته راګرځئ درې اړخونه یو معتبر مثلث رامینځته کوي کله چې د کوم دوه اړخونو مجموعه د دریم اړخ څخه لوړه وي. مثال: مثلث_عرض (((3، 4، 5) == 6.00 مثلث_عرض (((1، 2، 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,pbt_Arab,python,"
def will_it_fly(q,w):
    '''یو فنکشن ولیکئ چې ریښتیا بیرته راستونوي که چیرې q شی الوتنه وکړي ، او غلط که نه. q شی الوتنه وکړي که چیرې دا متوازن وي (دا یو پالینډروم لیست دی) او د دې عناصرو مجموعه د اعظمي ممکنه وزن څخه لږ یا مساوي وي. مثال: will_it_fly (([1، 2]، 5) â -> غلط # 1+2 د اعظمي ممکنه وزن څخه کم دی ، مګر دا غیر متوازن دی. will_it_fly (([3، 2، 3]، 1) â -> غلط # دا متوازن دی ، مګر 3+2+3 د اعظمي ممکنه وزن څخه ډیر دی. will_it_fly (([3، 2، 3]، 9) â -> ریښتیا # 3+23 د اعظمي ممکنه وزن څخه کم دی ، او دا متوازن دی. will_it_fly ((([3]، â 5) -> ریښتیا # 3 د اعظمي ممکنه وزن څخه کم دی ، او دا متوازن دی.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,pbt_Arab,python,"
def smallest_change(arr):
    """"""د ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,pbt_Arab,python,"
def total_match(lst1, lst2):
    '''د فنکشن لیکل چې د تارونو دوه لیستونه مني او هغه لیست بیرته راولي چې د لیست په ټولو تارونو کې د نورو څخه لږ شمیر لري. که دوه لیستونه د کرکونو ورته شمیر ولري ، لومړی لیست بیرته راولي. مثالونه total_match (([] ، []) â -> [] total_match ((['hi' ، 'admin' ، ['hI' ، 'Hi']) â -> ['hI' ، 'Hi'] total_match ((['hi' ، 'admin' ] ، ['hi' ، 'admin' ، 'project']) â -> ['hi' ، 'admin' ] total_match ((['hi' ، 'admin' ] ، ['hi' ، 'hi']) â -> ['hi' ، 'admin' ] total_match ((['hi' ، 'admin' ] ، ['I' ، 'hi' ، 'hi']) â -> ['I' ، 'hi' ، 'hi' ] total_match ((['4' ] ، ['1' 2' ، '3' ، '4' ، '5' ، [' 4]) -> [' 4' ]'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,pbt_Arab,python,"
def is_multiply_prime(a):
    """"""یو فنکشن ولیکئ چې ریښتیا بیرته راشي که ورکړل شوې شمیره د 3 لومړني شمیرو ضرب وي او که نه نو غلط وي. په دې پوهیدل چې (a) له 100 څخه کم دی. مثال: is_multiply_prime ((30) == ریښتیا 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,pbt_Arab,python,"
def is_simple_power(x, n):
    """"""ستاسو دنده دا ده چې یو فنکشن ولیکئ چې ریښتیا بیرته راشي که چیرې یو شمیر x د n ساده ځواک وي او په نورو قضیو کې غلط وي. x د n ساده ځواک دی که n **int = x د مثال په توګه: is_simple_power ((1، 4) => ریښتیا is_simple_power ((2، 2) => ریښتیا is_simple_power ((8، 2) => ریښتیا is_simple_power ((3، 2) => غلط is_simple_power ((3، 1) => غلط is_simple_power ((5، 3) => غلط """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,pbt_Arab,python,"
def iscube(a):
    '''یو داسې فنکشن ولیکئ چې یو عدد a اخلي او ریښتیا بیرته راولي که چیرې دا عدد د یو عدد مکعب وي. یادونه: تاسو کولی شئ دا فرض کړئ چې ننوتل تل معتبر وي. مثالونه: iscube ((1) ==> ریښتیا iscube ((2) ==> غلط iscube ((-1) ==> ریښتیا iscube ((64) ==> ریښتیا iscube ((0) ==> ریښتیا iscube ((180) ==> غلط '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,pbt_Arab,python,"
def hex_key(num):
    """"""تاسو ته دنده درکول شوې چې د یو فنکشن لیکل چې د یو هکسادسیمال شمیر په توګه د تار په توګه ترلاسه کوي او د هکسادسیمال ډیجیټونو شمیر شمیرل کیږي چې لومړني دي (لومړی شمیر ، یا لومړنی ، یو طبیعي شمیر دی چې له 1 څخه لوی دی چې د دوه کوچني طبیعي شمیرو محصول نه دی). هکسادسیمال ډیجیټونه 0 ، 1 ، 2 ، 3 ، 4 ، 5 ، 6 ، 7 ، 8 ، 9 ، A ، B ، C ، D ، E ، F دي. لومړني شمیرې 2 ، 3 ، 5 ، 7 ، 11 ، 13 ، 17 ، ... دي نو تاسو باید د لاندې ډیجیټونو شمیر وټاکئ: 2 ، 3 ، 5 ، 7 ، 7 ، B (= لسیزه 11) ، D (= لسیزه 13). یادونه: تاسو کولی شئ فرض کړئ چې ننوتنه تل سمه یا خالي تار وي ، او سمبولونه A ، B ، C ، D ، E ، F تل لوی لیکونه دي. مثالونه: د ""نم"" = AB لپاره ، محصول باید 1 وي. د ""نم"" = 1077E لپاره محصول باید 2 وي. د ""نم"" = 1077E وي. د ""د"" لپاره ""د"" باید 2 وي. د ""د"" د ""د"" لپاره ""د"" باید د ""د"" وي.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,pbt_Arab,python,"
def decimal_to_binary(decimal):
    """"""تاسو ته به د اعشاري شکل کې یو عدد درکړل شي او ستاسو دنده به دا وي چې دا په بائنري شکل بدل کړئ. دنده باید یو تار بیرته راشي، چې هر کرکټر یې د بائنري شمیرې استازیتوب کوي. په تار کې هر کرکټر به '0' یا '1' وي. د تار په پیل او پای کې به د 'db' اضافي کرکټرونه شتون ولري. اضافي کرکټرونه د بڼه سره مرسته کوي. مثالونه: decimal_to_binary ((15) # بیرته ""db1111db"" decimal_to_binary32) # بیرته ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,pbt_Arab,python,"
def is_happy(s):
    """"""تاسو ته يو تار (s) درکول شوی دی. ستاسو دنده دا ده چې وګورئ چې دا تار خوښ دی او که نه. يو تار خوښ دی که د دې اوږدوالی لږ تر لږه 3 وي او هر 3 پرله پسې لیکونه جلا وي د مثال په توګه: is_happy ((a) => غلط is_happy ((aa) => غلط is_happy ((abcd)) => ریښتیا is_happy ((aabb)) => غلط is_happy ((adb)) => ریښتیا is_happy ((xyy)) => غلط """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,pbt_Arab,python,"
def numerical_letter_grade(grades):
    """"""دا د سمستر وروستۍ اونۍ ده او ښوونکي باید زده کوونکو ته درجې ورکړي. ښوونکي د درجې ورکولو لپاره خپل الګوریتم جوړ کړی دی. یوازینۍ ستونزه دا ده چې هغه د درجې ورکولو لپاره کارول شوی کوډ له لاسه ورکړی دی. هغې تاسو ته د ځینې زده کونکو لپاره د GPAs لیست درکړی او تاسو باید یو فنکشن ولیکئ چې کولی شي د لاندې جدول په کارولو سره د لیک درجې لیست تولید کړي: GPA. د لیک درجې 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B- > 2.3 B- > 2.0 B + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 E مثال: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,pbt_Arab,python,"
def prime_length(string):
    """"""یو فنکشن ولیکئ چې یو تار اخلي او ریښتیا بیرته راستونوي که چیرې د تار اوږدوالی لومړنی شمیره وي یا غلط که نه مثالونه prime_length ((('سلام') == ریښتیني prime_length ((('abcdcba') == ریښتیني prime_length ((('کټینز') == ریښتیني prime_length ((('نارنج') == غلط """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,pbt_Arab,python,"
def starts_one_ends(n):
    """"""د مثبت عدد n په پام کې نیولو سره، د n-عددي مثبت عددونو شمیر بیرته راګرځوئ چې د 1 سره پیل یا پای ته رسي. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,pbt_Arab,python,"
def solve(N):
    """"""د مثبت عدد N په پام کې نیولو سره، د دې د عددونو مجموعي مجموعې په بائنري ډول راګرځوئ. مثال د N = 1000 لپاره، د عددونو مجموعې به 1 وي، محصول باید ""1"" وي. د N = 150 لپاره، د عددونو مجموعې به 6 وي، محصول باید ""110"" وي. د N = 147 لپاره، د عددونو مجموعې به 12 وي، محصول باید ""1100"" وي. متغیرونه: @N عدد محدودیتونه: 0 â‰¤ N â‰¤ 10000. محصول: د بائنري شمیرې تار """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,pbt_Arab,python,"
def add(lst):
    """"""د بشپړ شمیرونو غیر خالي لیست ورکړل شوی lst. حتی عناصر اضافه کړئ چې په عجیب شاخصونو کې دي. مثالونه: اضافه کړئ (([4، 2، 6، 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,pbt_Arab,python,"
def anti_shuffle(s):
    """"""د يو فنکشن ليکل چې يو تار اخلي او د هغه يو ترتيب شوی نسخه بيرته راولي. د تار يو ترتيب شوی نسخه، يو تار دی چې ټولې کلمې (د ځای په واسطه جلا شوي) د نوي کلمې په واسطه ځای په ځای شوي دي چې ټول کرکټرونه د ascii ارزښت پر بنسټ په پورته ترتیب ترتیب شوي دي. يادونه: تاسو باید په جمله کې د کلمو او خالي ځایونو ترتیب وساتئ. د مثال په توګه: anti_shuffle ((('Hi') 'Hi' anti_shuffle ((('hello') بیرته 'ehllo' anti_shuffle (('Hello World!!!') بیرته 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,pbt_Arab,python,"
def get_row(lst, x):
    """"""تاسو ته د 2 اړخیز معلومات درکول کیږي، د نیسټ شوي لیستونو په توګه، کوم چې د میټریکس سره ورته دی، په هرصورت، د میټریکسونو برعکس، هر قطار کې ممکن د کالمونو مختلف شمیر ولري. د lst، او انټيجر x په پام کې نیولو سره، په لیست کې انټيجرونه x ومومئ، او د ټپلونو لیست بیرته راګرځئ، [(x1، y1، (x2، y2) ...) داسې چې هر ټپل یو همغږي دی - (صف، کالمونه) ، د 0 سره پیل کول. همغږي په پیل کې د صفونو په ترتیب سره ترتیب کړئ. همدارنګه، د قطار همغږي په کښته ترتیب سره ترتیب کړئ. مثالونه: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 1, 0], 4 (1, 0), (2, 5), (2, 0, 0] get_((1), [] == [[، صف 1، 2، 3]]، [، 2، 3]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,pbt_Arab,python,"
def sort_array(array):
    """"""د غیر منفي عددونو یو صف ورکړل شوی، د ترتیب کولو وروسته د ورکړل شوي صف یوه کاپي بیرته راګرځئ، تاسو به ورکړل شوی صف په پورته ترتیب ترتیب کړئ که چیرې مجموع ((لومړی شاخص ارزښت ، وروستی شاخص ارزښت) عجیب وي ، یا دا په ښکته ترتیب ترتیب کړئ که چیرې مجموع ((لومړی شاخص ارزښت ، وروستی شاخص ارزښت) حتی وي. یادونه: * ورکړل شوی صف مه بدلوئ. مثالونه: * sort_array[(]) => [] * sort_array[]] => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,pbt_Arab,python,"
def encrypt(s):
    """"""د encrypt فنکشن جوړول چې د یو سټینګ د یو دلیل په توګه اخلي او د الفبا سره یو کوډ شوی تار بیرته راولي. الفبا باید په داسې ډول وګرځول شي چې لیکونه دوه ځله دوه ځایونو ته حرکت وکړي. د مثال په توګه: encrypt ((('hi') بیرته 'lm' encrypt ((('asdfghjkl') بیرته 'ewhjklnop' encrypt ((('gf') بیرته 'kj' encrypt ((('et') بیرته 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,pbt_Arab,python,"
def next_smallest(lst):
    """"""تاسو ته د بشپړ شمیرونو لیست درکول شوی. یو فنکشن ولیکئ next_smallest ((() چې د لیست دوهم کوچنی عنصر بیرته راولي. هیڅ نه بیرته راګرځئ که چیرې داسې عنصر شتون ونلري. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == هیڅ نه next_smallest (([1, 1]) == هیڅ نه """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,pbt_Arab,python,"
def is_bored(S):
    """"""تاسو ته به د کلمو یو سلسله درکړل شي، او ستاسو دنده به دا وي چې د ستړیا شمیر وشمیرئ. ستړیا یوه جمله ده چې د ""I"" کلمې سره پیل کیږي. جملې د '.', '؟ یا '! ' لخوا محدودې دي. د مثال په توګه: >>> is_bored ((""سلام نړۍ"") 0 >>> is_bored ((""آسمان نیلي دی. لمر روښانه دی. زه د دې هوا سره مینه لرم"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,pbt_Arab,python,"
def any_int(x, y, z):
    '''د 3 شمیرې اخلي. ریښتیا راستنوي که چیرې یو شمیر د نورو دوه شمیرې سره مساوي وي ، او ټولې شمیرې بشپړ شمیرې وي. په نورو قضیو کې غلط راستنوي. مثالونه any_int ((5, 2, 7) â -> ریښتیا any_int ((3, 2, 2) â -> غلط any_int ((3, -2, 1) â -> ریښتیا any_int ((3.6, -2.2, 2) â -> غلط '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,pbt_Arab,python,"
def encode(message):
    """"""داسې فنکشن ولیکئ چې پیغام واخلي، او په داسې ډول یې کوډ کړي چې د ټولو لیکونو قضیې بدلې کړي، په پیغام کې ټول حرفونه د هغه لیک سره ځای په ځای کړي چې د انګلیسي الفبا کې د هغه حرف څخه 2 ځایونه مخکې ښکاري. یوازې لیکونه فرض کړئ. مثالونه: >>> کوډ ((('ټیسټ') 'TGST' >>> کوډ ((('دا یو پیغام دی') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,pbt_Arab,python,"

def skjkasdkd(lst):
    """"""تاسو ته د عددونو لیست درکول شوی دی. تاسو باید تر ټولو لوی لومړنی عدد ومومئ او د هغه د عددونو مجموع بیرته ورکړئ. مثالونه: د lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] لپاره، محصول باید 10 وي د lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] لپاره، محصول باید 25 وي د lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] لپاره، محصول باید 13 وي د lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] لپاره، محصول باید 11 وي د lst = [0,81,12,3,21,1] لپاره، محصول باید 3 وي د lst = [0,8,1,2,1,7] لپاره، محصول باید 7 وي""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,pbt_Arab,python,"
def check_dict_case(dict):
    """"""د يو قاموس په نظر کې نيولو سره، که ټولې ټکي په وړو تورو کې تارونه وي او يا ټولې ټکي په لوړو تورو کې تارونه وي، نو ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټرنټ ريټ ريټرنټ ريټرنټ ريټ ريټرنټ ريټريټ ريټريټ ريټ ريټريټريټ ريټ ريټريټريټ ريټريټ ريټريټ ريټريټريټ ريټريټ ريټريټريټ ريټريټريټريټريټريټ ريټريټريټريټ ريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټريټ""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,pbt_Arab,python,"
def count_up_to(n):
    """"""د یو فنکشن پلي کول چې یو غیر منفي عدد اخلي او د لومړنیو n عددونو یو صف بیرته راولي چې لومړني عددونه دي او له n څخه کم دي. د مثال په توګه: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,pbt_Arab,python,"
def multiply(a, b):
    """"""د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې عددونو د ضربولو لپاره د دوې ضربولو لپاره د دوې ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د ضربو د """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,pbt_Arab,python,"
def count_upper(s):
    """"""د s تار په پام کې نیولو سره ، په حتی شاخصونو کې د لوی حرفونو شمیر شمیرئ. د مثال په توګه: count_upper ((('aBCdEf') 1 count_upper ((('abcdefg') بیرته راګرځي 0 count_upper ((('dBBE') بیرته 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,pbt_Arab,python,"
def closest_integer(value):
    '''د يو فنکشن جوړول چې د يو عدد (سترينګ) ارزښت اخلي او تر ټولو نږدې عدد يې بيرته راولي. که چېرې شمېر له دوو عددونو سره يو شان وي، نو له صفر څخه يې راټول کړئ. مثالونه >>> closest_integer (((""10"") 10 >>> closest_integer ((""15.3"") 15 يادونه: له صفر څخه راټولول په دې مانا چې که چېرې ورکړل شوې شمېر له دوو عددونو سره يو شان وي، نو هغه چې بايد بيرته راشي هغه شمېر دی چې تر ټولو لرې وي. د مثال په توګه closest_integer (((14.5"") بايد ۱۵ او closest_integer (((-14.5"") بايد ۱۵ بیرته راولي. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,pbt_Arab,python,"
def make_a_pile(n):
    """"""د مثبت عدد n په پام کې نیولو سره، تاسو باید د n کچو ډبرو ډبرې جوړې کړئ. لومړۍ کچه د n ډبرو لري. په راتلونکې کچه کې د ډبرو شمیر دی: - راتلونکی عجیب شمیره که n عجیب وي. - راتلونکی حتی شمیره که n حتی وي. په هر کچه کې د ډبرو شمیر بیرته راګرځئ په لیست کې ، چیرې چې عنصر په شاخص کې i په کچه کې د ډبرو شمیر استازیتوب کوي (i + 1). مثالونه: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,pbt_Arab,python,"
def words_string(s):
    """"""تاسو ته به د کلمو یو تار ورکړل شي چې د کوما یا ځایونو لخوا جلا شوي وي. ستاسو دنده دا ده چې تار په کلمو وویشئ او د کلمو یو صف بیرته راګرځئ. د مثال په توګه: words_string ((""سلام ، زما نوم جان دی"") == [""سلام ،"" ""زما"" ، ""نوم ،"" ""ه ،"" جان""] words_string ((""یو ، دوه ، درې ، څلور ، پنځه ، شپږ"") == ["" یو ، ""دوه ،"" ""درې ،"" ""څلور ،"" پنځه ، ""شپږ""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,pbt_Arab,python,"
def choose_num(x, y):
    """"""دا فنکشن دوه مثبت شمیرې x او y اخلي او تر ټولو لوی عدد چې په [x، y] کې دی بیرته راولي. که داسې شمیره شتون ونلري، نو فنکشن باید -1 بیرته راولي. د مثال په توګه: choose_num (((12, 15) = 14 choose_num (((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,pbt_Arab,python,"
def rounded_avg(n, m):
    """"""تاسو ته دوه مثبت عددونه n او m درکول شوي دي، او ستاسو دنده دا ده چې د n څخه تر m پورې د عددونو منځنۍ شمېره محاسبه کړئ (په شمول د n او m). ځواب ته نږدې بشپړ عدد ته راټول کړئ او دا دوه ګونی ته واړوئ. که n له m څخه لوی وي، بیرته راګرځئ -1. مثال: rounded_avg (((1, 5) => ""0b11"" rounded_avg (((7, 5) => -1 rounded_avg (((10, 20) => ""0b1111"" rounded_avg (((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,pbt_Arab,python,"
def unique_digits(x):
    """"""د مثبتو عددونو لیست ورکړل شوی x. د ټولو عناصرو ترتیب شوی لیست بیرته راګرځوي چې حتی یو عدد هم نلري. یادونه: بیرته راستون شوی لیست باید په ډیریدونکي ترتیب ترتیب شي. د مثال په توګه: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,pbt_Arab,python,"
def by_length(arr):
    """"""د بشپړ شمیرونو یو صف ورکړل شوی ، د 1 او 9 په شمول د بشپړ شمیرونو ترتیب کړئ ، پایله لرونکی صف بیرته واړوئ ، او بیا هر عدد د دې د ورته نوم سره ځای په ځای کړئ له ""یو"" ، ""دوه"" ، ""درې"" ، ""څلور"" ، ""پنځه"" ، ""شپږ"" ، "" اوه"" ، ""اویا"" ، ""نه"". د مثال په توګه: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ترتیب arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> بیرته arr -> [8, 5, 4, 3, 2, 2, 1, 1] بیرته راستون کړئ ["" اته"" ، ""څلور"" ، ""درې"" ، ""دوه"" ، ""دوه"" ، ""یو"" ] که چیرې صف خالي وي ، بیرته راستون کړئ: arr = [] array [] که چیرې صف کوم عجیب شمیره ولري نو له پامه یې غورځوئ: arr = [1, 1 ، -1 ] -> arr 55 ، -> arr - 1 ، [1, 1 ، 55] -> reverse arr = [51] - return 'One' 1 ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,pbt_Arab,python,"
def f(n):
    """"""د f دنده پلي کړئ چې n د پیرامیټر په توګه اخلي ، او د اندازې n لیست بیرته راولي ، نو د دې په څیر چې د شاخص i کې د عنصر ارزښت د i فاکتور دی که چیرې i حتی وي یا د 1 څخه تر i پورې د شمیرو مجموعه. i له 1 څخه پیل کیږي. د i فاکتور د 1 څخه تر i پورې د شمیرو ضرب دی (1 * 2 * ... * i) مثال: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,pbt_Arab,python,"
def even_odd_palindrome(n):
    """"""د مثبت عدد n په پام کې نیولو سره، یو ټپل بیرته راګرځوئ چې د حتی او عجیب عدد پالینډرومونو شمیر لري چې په حد کې راځي ((۱، n) ، په شمول. مثال1: ان پټ: 3 محصول: (۱، ۲) توضیحي: د عدد پالینډرومونه دي، یو یې حتی دی، او دوه یې عجیب دي. مثال2: ان پټ: (۴، ۶) توضیحي: د عدد پالینډرومونه دي، ۱، ۲، ۳، ۴، ۵، ۶، ۷، ۸، ۹، ۱۱. څلور یې حتی دي، او ۶ یې عجیب دي. یادونه: ۱. <= n <= ۱۰^۳ 2. ټپل په ترتیب سره د حتی او عجیب عدد پالینډرومونو شمیر بیرته راوړی. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,pbt_Arab,python,"
def count_nums(arr):
    """"""د count_nums فنکشن ولیکئ کوم چې د بشپړ شمیرونو صف اخلي او د عناصرو شمیر بیرته راولي چې د شمیرو مجموع لري > 0. که چیرې یو شمیر منفي وي ، نو د هغې لومړی لاسلیک شوی رقم به منفي وي: د مثال په توګه -123 د -1, 2 ، او 3 شمیرو لاسلیک کړی دی. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,pbt_Arab,python,"
def move_one_ball(arr):
    """"""موږ د N عددونو څخه جوړ array لرو arr[1], arr[2]، ..., arr[N].د array شمیرې به په تصادفي ډول ترتیب شي. ستاسو دنده دا ده چې معلومه کړئ چې آیا دا ممکنه ده چې array په غیر کمیدونکي ترتیب ترتیب کړئ په ورکړل شوي صف کې د لاندې عملیاتو ترسره کولو سره: تاسو ته اجازه درکول کیږي چې د ښي اړخ حرکت عملیات ترسره کړئ. یو ښی اړخ عملیات پدې معنی دي چې د صف ټول عناصر په یو موقعیت کې په سم لوري کې حرکت کوي. د صف وروستی عنصر به په صف کې د پیل موقعیت ته حرکت وکړي. د مثال په توګه 0th. که دا ممکنه وي چې د پورته عملیاتو ترسره کولو سره ترتیب شوي صف ترلاسه کړئ نو بیا ریښتیني بیرته راستون کړئ بل بیا غلط بیرته راستون کړئ. که ورکړل شوی صف خالي وي نو بیا ریښتیني بیرته راستون کړئ. یادونه: ورکړل شوی لیست تضمین شوی چې ځانګړي عناصر ولري. د مثال په توګه: move_one_(ball_[3, 4, 5, 2]===> ریښتینی توضیح: د 2_min_operations لخوا ، د غیر کمیدونکي ترتیب ترتیب ترتیب د صف لپاره ترلاسه کیدی شي. د ورکړل شوي صف د هر ډول ترتیب سره سم حرکت کول ممکن نه وي.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,pbt_Arab,python,"
def exchange(lst1, lst2):
    """"""په دې ستونزه کې، تاسو به یو فنکشن پلي کړئ چې د شمیرو دوه لیستونه اخلي، او دا معلوموي چې آیا دا ممکنه ده چې د دوی ترمنځ د عناصرو تبادله ترسره کړي ترڅو lst1 یوازې د شمیرو لیست جوړ کړي. د lst1 او lst2 ترمنځ د تبادلې عناصرو شمیر محدود نه دی. که دا ممکنه وي چې د lst1 او lst2 ترمنځ عناصر بدل کړي ترڅو د lst1 ټول عناصر حتی وي، ""هو"" بیرته راګرځئ. که نه، ""نه"" بیرته راګرځئ. د مثال په توګه: تبادله [(1, 2, 3, 4], [1, 2, 3, 4]) => ""هو"" تبادله [(1, 2, 3, 4], [1, 5, 3, 4]) => ""نه"" دا فرض کیږي چې د ننوتلو لیستونه به خالي نه وي. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,pbt_Arab,python,"
def histogram(test):
    """"""د يو تار په پام کې نيولو سره چې د يو ځای څخه جلا شوي کوچني حروف استازيتوب کوي، د هغه خط يو قاموس بيرته راولي چې تر ټولو زيات تکرار لري او د ورته شمېر په کې شامل وي. که څو حروف ورته پېښې ولري، ټول يې بيرته راولي. مثال: هسټوګرام ((('a b c') == {'a': 1, 'b': 1, 'c': 1} هسټوګرام ((('a b b a') == {'a': 2, 'b': 2} هسټوګرام ((('a b c a b') == {'a': 2, 'b': 2} هسټوګرام ((('b b a') == {'b 4}': هسټوګرام ((('') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,pbt_Arab,python,"
def reverse_delete(s,c):
    """"""دنده موږ ته دوه تارونه s او c ورکړل شوي دي، تاسو باید په s کې ټول هغه کرکټرونه حذف کړئ چې د c په کوم کرکټر سره مساوي وي بیا وګورئ چې ایا د پایله تار پالنډروم دی. یو تار پالنډروم بلل کیږي که چیرې دا د مخ په وړاندې ورته لوستل کیږي. تاسو باید د چک لپاره د پایلو تار او ریښتیني / غلطي لرونکی ټپل بیرته ورکړئ. د مثال په توګه د s = ""abcde"" ، c = ""ae"" لپاره ، پایله باید وي ('bcd' ، غلط) د s = ""abcdef"" ، c = ""b"" لپاره پایله باید وي ('acdef' ، غلط) د s = ""abcdedcba"" ، c = ""ab"" لپاره ، پایله باید وي ('cdedc' ، ریښتیني)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,pbt_Arab,python,"
def odd_count(lst):
    """"""د تارونو لیست ورکړل شوی ، چیرې چې هر تار یوازې د شمیرو څخه جوړ شوی ، یو لیست بیرته راګرځوي. د محصول هر عنصر i باید ""د ننوتلو تار i کې د عجیب عناصرو شمیر وي"". چیرې چې ټول i باید د ننوتلو i'th تار کې د عجیب شمیرو شمیر سره ځای په ځای شي. >>> odd_count ((['1234567']) [""د عجیب عناصرو شمیر 4n د 4n ان پټ str4ng 4"".] >>> odd_count ((['3'،""111111""]) [""د عجیب عناصرو شمیر 1n د 1n ان پټ str1ng 1 ،"" ""د عجیب عناصرو شمیر 8n د 8n ان پټ str8ng 8"".] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,pbt_Arab,python,"
def minSubArraySum(nums):
    """"""د عددونو د صفونو په ورکولو سره، د هرې عددونو د فرعي صفونو لږ تر لږه مجموعې ومومئ. مثال minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,pbt_Arab,python,"
def max_fill(grid, capacity):
    import math
    """"""تاسو ته د څاهونو مستطیل شبکه درکول کیږي. هر قطار یو واحد څاه استازیتوب کوي، او په یوه قطار کې هر 1 د اوبو واحد استازیتوب کوي. هر څاه یو مناسب بالټ لري چې له دې څخه د اوبو استخراج لپاره کارول کیدی شي، او ټول بالټونه ورته ظرفیت لري. ستاسو دنده د بالټونو څخه د څاهونو خالي کولو لپاره کارول دي. د هغه وخت شمیره وټاکئ چې تاسو ورته اړتیا لرئ د بالټونو ښکته کولو لپاره. مثال 1: ننوتل: شبکه: [[0,0,1,0] ، [0,1,0,0] ، [1,1,1,1]] bucket_capacity: 1 محصول: 6 مثال 2: ننوتل: شبکه: [[0,0,1,1] ، [0,0,0,0] ، [1,1,1] ، [0,1,1,1]] bucket_capacity: 2 محصول: 5 مثال 3: ننوتل: [[0,0,0]] ، [0,0,0]] bucket_capacity: 5 محصول: 0 * * * * * * * * * ټولې اوږدوالی: 1 * * * * * ټولې اوږدوالی: 1 * * * * * * * ټولې اوږدوالی: 10 * * * * * ټولې اوږدوالی: 1 * * ټولې * ټولې اوږدوالی: * ټولې * ټولې اوږدوالی * ټولې * ټولې * ټولې * ټولې * ټولې * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول * ټول""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,pbt_Arab,python,"
def sort_array(arr):
    """"""په دې کټا کې، تاسو باید د غیر منفي عددونو یو صف د دوی د دوه ګونی نمایندګۍ کې د یو شمیر په اساس ترتیب کړئ. د ورته شمیر لپاره، د لسیزې ارزښت پراساس ترتیب کړئ. دا باید په دې ډول پلي شي: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,pbt_Arab,python,"
def select_words(s, n):
    """"""د s او n د طبيعي شمېر په پام کې نيولو سره، تاسو ته دنده درکول شوې چې د s د تار څخه د ټولو کلمو لیست بیرته راولي چې په سمه توګه n غږونه لري، ترڅو دا کلمې په s تار کې راشي. که چیرې سټینګ خالي وي نو فنکشن باید خالي لیست بیرته راشي. یادونه: تاسو ممکن د ننوتلو تار یوازې لیکونه او ځایونه ولري. مثالونه: select_words (((""مري یو کوچنی وری""، 4) ==> [""کوچنی""] select_words (((""مري یو کوچنی وری درلود""، 3) ==> [""مري""، ""کوچنی""] select_words"" ((ساده سپینه ځای""، 2) ==> [] select_words (((""سلام نړۍ""، 4) ==> [""نړۍ""] select_words (((""چا سم""، 3) ==> [""چا""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,pbt_Arab,python,"
def get_closest_vowel(word):
    """"""تاسو ته یوه کلمه درکول کیږي. ستاسو دنده دا ده چې تر ټولو نږدې حرفي ومومئ چې د کلمې له ښي اړخ څخه د دوو حروفو تر منځ ولاړ وي (د قضیې حساس). په پیل او پای کې حرفي نه شمیرل کیږي. که تاسو کوم حرفي ونه موندل نو خالي تار بیرته راګرځئ چې پورته شرایط پوره کړي. تاسو کولی شئ فرض کړئ چې ورکړل شوې تار یوازې انګلیسي لیک لري. مثال: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,pbt_Arab,python,"
def match_parens(lst):
    '''تاسو ته د دوو تارونو لیست درکول کیږي، دواړه تارونه یوازې د پرانیستې قوسونو '(' یا نږدې قوسونو ') ' څخه جوړ شوي دي. ستاسو دنده دا ده چې وګورئ چې ایا دا ممکنه ده چې دوه تارونه په یو ترتیب کې سره یوځای کړئ، چې پایله یې تار به ښه وي. یو تار S ښه ګڼل کیږي که چیرې او یوازې که په S کې ټول قوسونه متوازن وي. د مثال په توګه: تار '((())' ښه دی، پداسې حال کې چې تار '())' نه دی. 'هو' بیرته راګرځئ که چیرې د ښه تار جوړولو لپاره لاره شتون ولري، او 'نه' بیرته راګرځئ که نه. مثالونه: match_parens[('() '، ') ']) == 'هو' match_parens[(') '، ') ']) == 'نه' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,pbt_Arab,python,"
def maximum(arr, k):
    """"""د ار ار او مثبت عدد k په لرلو سره، د آر آر په اوږدوالي کې د k شمیرې سره یو ترتیب شوی لیست بیرته راګرځوئ. مثال1: ان پټ: ار = [-3، -4، 5] ، k = 3 محصول: [-4، -3، 5] مثال2: ان پټ: ار = [4، -4، 4] ، k = 2 محصول: [4، 4] مثال3: ان پټ: ار = [-3، 2، 1، 2، 1، 2] ، k = 1 محصول: [2] یادونه: 1. د صف اوږدوالی به د [1، 1000] په حد کې وي. 2. د صف عناصر به د [-1000، 1000] په حد کې وي. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,pbt_Arab,python,"
def solution(lst):
    """"""د بشپړ شمیرونو غیر خالي لیست ورکړل شوی ، د ټولو عجیب عناصرو مجموعه بیرته راګرځئ چې په حتی موقعیتونو کې دي. د مثال حل (([5 ، 8 ، 7 ، 1]) ==> 12 حل (([3 ، 3 ، 3 ، 3 ، 3]) ==> 9 حل (([30 ، 13 ، 24 ، 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,pbt_Arab,python,"
def add_elements(arr, k):
    """"""د ار ار او k عددونو د يوې نه خالي صف په نظر کې نيولو سره، د ار ار د لومړيو k عناصرو څخه د دوه ګڼو څخه د زياتو عناصرو مجموعه راګرځوئ. مثال: ان پټ: arr = [111,21,3,4000,5,6,7,8,9], k = 4 محصول: 24 # د 21 + 3 مجموعې محدودیتونه: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,pbt_Arab,python,"
def get_odd_collatz(n):
    """"""د مثبت عدد n په پام کې نیولو سره، یو ترتیب شوی لیست بیرته راولئ چې په کولاټز ترتیب کې عجیب شمیرې لري. د کولاټز قیاس په ریاضیاتو کې یو قیاس دی چې د لاندې په څیر تعریف شوي ترتیب پورې اړه لري: د هر مثبت عدد n سره پیل کړئ. بیا هر اصطلاح د مخکینۍ اصطلاح څخه په لاندې ډول ترلاسه کیږي: که مخکینۍ اصطلاح حتی وي ، نو راتلونکې اصطلاح د مخکینۍ اصطلاح یوه نیمه ده. که مخکینۍ اصطلاح عجیب وي ، نو راتلونکې اصطلاح د مخکینۍ اصطلاح 3 ځله اضافه ده. قیاس دا دی چې مهمه نده چې د n ارزښت څه وي ، ترتیب به تل 1 ته ورسیږي. یادونه: 1. کولټز (((1) [1] دی. 2. بیرته راستون شوی لیست په زیاتیدونکي ترتیب ترتیب ترتیب شوی. د مثال په توګه: get_odd_collatz ((5) بیرته راځي [1, 5] د 5 لپاره د کولاټز ترتیب [5, 8, 16, 4, 2, 1] دی ، نو عجیب شمیرې یوازې 1 او 5 دي. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,pbt_Arab,python,"
def valid_date(date):
    """"""تاسو باید یو داسې فنکشن ولیکئ چې د نیټې د تار اعتبار تاییدوي او ریښتیا بیرته راستونوي که نیټه د اعتبار وړ وي که نه نو غلط. نیټه د اعتبار وړ ده که لاندې ټول قواعد پوره شي: 1. د نیټې تار خالي نه وي. 2. د ورځو شمیر د میاشتو لپاره 1 یا 31 ورځو څخه کم نه وي. او د ورځو شمیر د میاشتو لپاره 1 یا 30 ورځو څخه کم نه وي. او د میاشتو شمیر د میاشتې لپاره 1 یا 29 څخه کم نه وي. 3. میاشتې باید له 1 څخه کم نه وي یا له 12 څخه ډیر نه وي. 4. نیټه باید په فارمیټ کې وي: mm-dd-yyyy د مثال په توګه: valid_date ((('03-11-2000') => valid_date ((('15-01-2012') => false valid_date ((('04-02040') => false_date (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,pbt_Arab,python,"
def split_words(txt):
    '''د کلمو د تار په پام کې نیولو سره، د کلمو لیست بیرته راګرځوئ چې په سپین ځای کې ویشل شوي، که چیرې په متن کې هیڅ سپین ځای شتون ونلري نو تاسو باید په کوما کې ویشل شئ '، که چیرې کوما شتون ونلري نو تاسو باید په الفبا کې د غیر معمولي ترتیب سره د کوچني لیکونو شمیر بیرته راولیږئ، ord ((('a') = 0، ord (((b') = 1، ... ord ((('z') = 25 مثالونه ویشل_ کلمې ((""سلام نړۍ!"") â -> [""سلام، نړۍ!""] split_ کلمې ((""سلام، نړۍ!"") â -> [""سلام، نړۍ!""] split_ کلمې ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,pbt_Arab,python,"
def is_sorted(lst):
    '''د شمیرو لیست ورکړل شوی ، بیرته راګرځئ که چیرې دوی په پورته کیدو ترتیب کې ترتیب شوي وي. که لیست د ورته شمیر څخه ډیر 1 ډوپلیټ ولري ، غلط بیرته راګرځئ. هیڅ منفي شمیرې فرض نکړئ او یوازې بشپړ شمیرې. مثالونه is_sorted ((([5]) â -> ریښتیا is_sorted (([1, 2, 3, 4, 5]) â -> ریښتیا is_sorted (([1, 3, 2, 4, 5, 6]) â -> غلط is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> ریښتیا is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> ریښتیا is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> غلط is_sorted (([1, 2, 2, 3, 3, 4]) â -> ریښتیا is_sorted (([1, 2, 2, 2, 3, 4 -> غلط ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,pbt_Arab,python,"
def intersection(interval1, interval2):
    """"""تاسو ته دوه وقفه درکول کیږي، چې هره وقفه د عددونو جوړه ده. د مثال په توګه وقفه = (پیل، پای) = (1, 2). ورکړل شوې وقفه تړل شوې ده چې پدې معنی ده چې وقفه (پیل، پای) دواړه پیل او پای لري. د هرې ورکړل شوې وقفه لپاره، دا فرض کیږي چې د هغې پیل د هغې پای ته لږ یا مساوي دی. ستاسو دنده دا ده چې دا معلومه کړئ چې ایا د دې دوه وقفو د تقاطع اوږدوالی یو لومړنی شمیر دی. د مثال په توګه، د وقفو تقاطع (1, 3) ، (2، 4) (2، 3) دی چې د هغې اوږدوالی 1 دی، کوم چې لومړنی شمیر نه دی. که د تقاطع اوږدوالی لومړنی شمیر وي، ""هو"" بیرته راګرځئ، که نه، ""نه"" بیرته راګرځئ. که دوه وقفه سره نه ټکر کوي، ""نه"" بیرته راګرځئ. [input/output] نمونې: تقاطع ((((1، 2، 2، 3) ==> ""تقاطع ((1، 1) "") == ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,pbt_Arab,python,"
def prod_signs(arr):
    """"""تاسو ته د بشپړ شمیرې صف ورکړل شوی او تاسو اړتیا لرئ د بشپړ شمیرې د اندازې مجموعه بیرته راوباسئ د صف کې د هرې شمیرې د ټولو نښو محصول سره ضرب کړئ ، چې د 1 ، -1 یا 0 لخوا استازیتوب کیږي. یادونه: بیرته راستنیدنه هیڅ نه د خالي ار لپاره. مثال: >>> prod_signs (([1 ، 2 ، 2 ، -4)) == -9 >>> prod_signs (([0 ، 1]) == 0 >>> prod_signs (([]) == هیڅ نه """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,pbt_Arab,python,"
def minPath(grid, k):
    """"""د N قطارونو او N کالمونو (N > = 2) سره د شبکې او مثبت بشپړ عدد k سره ، د شبکې هر حجره یو ارزښت لري. د [1، N * N] په حد کې هر عدد په شمول د شبکې په حجرو کې یوځل څرګندیږي. تاسو باید په شبکه کې د اوږدوالي k لږترلږه لاره ومومئ. تاسو کولی شئ له هرې حجرې څخه پیل وکړئ ، او په هر ګام کې تاسو کولی شئ کوم ګاونډیو حجرو ته لاړ شئ ، په بل عبارت ، تاسو کولی شئ هغه حجرو ته لاړ شئ چې ستاسو سره اوسني حجره لري. مهرباني وکړئ په یاد ولرئ چې د k اوږدوالي لاره پدې معنی ده چې دقیقا k حجرو ته مراجعه وکړئ (ضروري ندي جلا وي). تاسو نشئ کولی له شبکې څخه بهر لاړ شئ. د A (د اوږدوالي k) لاره د B (د اوږدوالي k) څخه لږ ګ consideredل کیږي که چیرې د A او B حجرو د ارزښتونو ترتیب شوي لیستونو جوړولو وروسته (دوی د lA او lA_st_st_B په نوم یادیږي) ، lA_st_B په لغوي ډول د l_st_B څخه لږترلږه لاره ده ، په بل عبارت ، په ګرد سیلونو کې د اوږدوالی k = 1 ، په بل عبارت ، د اوسني حجرو ته لاړتیا شاخص ته لاړ شئ. د نورو ټکو حجرو ته لاړ شئ ، په بل عبارتونو کې ، تاسو کولی شئ له کومې حجرو ته لاړ شئ. د اوسني حجرو ته لاړ شئ.""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,pbt_Arab,python,"
def tri(n):
    """"""د فبوناکي سلسله هر څوک پېژني، په تېرو څو پېړيو کې د رياضي پوهانو له خوا په ژوره توګه مطالعه شوې ده. خو هغه څه چې خلک نه پوهېږي د ټربوناکي سلسله ده. د ټربوناکي سلسله د تکرار له مخې تعریف شوې ده: tri(1) = 3 tri(n) = 1 + n / 2، که n جوړه وي. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) ، که n عجیب وي. د بېلګې په توګه: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 تاسو ته یو غیر منفي عدد درکړل شوی دی، تاسو باید د ټربوناکي سلسله د لومړي n + 1 شمیرو لیست بیرته ورکړئ. مثالونه: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,pbt_Arab,python,"
def digits(n):
    """"""د مثبت عدد n په پام کې نیولو سره، د غیر مساوي عددونو محصول بیرته راګرځوئ. 0 بیرته راګرځوئ که ټول عددونه حتی وي. د مثال په توګه: عددونه ((1) == 1 عدد ((4) == 0 عدد ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,pbt_Arab,python,"
def is_nested(string):
    '''د فنکشن جوړول چې د ننوتلو په توګه د تار اخلي چې یوازې مربع قوسونه لري. د فنکشن باید ریښتیا بیرته راستانه شي که چیرې او یوازې که چیرې د قوسونو یو معتبر فرعي ترتیب شتون ولري چیرې چې لږترلږه په فرعي ترتیب کې یو قوس ځای په ځای شوی وي. is_nested (('[[]]') â -> ریښتیا is_nested (('[]]]]]]]]][[[[[[]]]]') â -> غلط is_nested (('[][]') â -> غلط is_nested (('[]') â -> غلط is_nested (('[]') â -> غلط is_nested (('[[]]') â -> ریښتیا is_nested (('[[]]') â -> ریښتیا'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,pbt_Arab,python,"

def sum_squares(lst):
    """"""تاسو ته د شمېرو لیست درکول شوی دی. تاسو اړتیا لرئ چې په ورکړل شوي لیست کې د مربع شمېرو مجموعه بیرته راشئ ، لومړی په لیست کې د هر عنصر پورتنۍ انټ ته راټول کړئ. مثالونه: د lst = [1,2,3] لپاره محصول باید 14 وي د lst = [1,4,9] لپاره محصول باید 98 وي د lst = [1,3,5,7] لپاره محصول باید 84 وي د lst = [1.4,4.2,0] لپاره محصول باید 29 وي د lst = [-2.4,1,1] لپاره محصول باید 6 وي """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,pbt_Arab,python,"
def check_if_last_char_is_a_letter(txt):
    '''د يو فنکشن جوړول چې ريښتيا راګرځي که د ورکړل شوي تار وروستی کرکټر د الفبا کرکټر وي او د يوې کلمې برخه نه وي، او که نه نو غلط. يادونه: ""کلمه"" د کرکټرونو ډله ده چې د ځای په واسطه جلا شوې ده. مثالونه: check_if_last_char_is_a_letter (((""apple pie"") â -> False check_if_last_char_is_a_letter (((apple pi e"") â -> True check_if_last_char_is_a_letter (((apple pi e)) â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,pbt_Arab,python,"
def can_arrange(arr):
    """"""د فنکشن جوړول چې د عنصر ترټولو لوی شاخص بیرته راولي چې د هغې څخه سمدستي مخکینی عنصر سره لوی یا مساوي نه وي. که داسې عنصر شتون ونلري نو بیرته راګرځئ -1. ورکړل شوی صف به دوه ګونی ارزښتونه ونه لري. مثالونه: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,pbt_Arab,python,"
def largest_smallest_integers(lst):
    '''د یو فنکشن جوړول چې یو ټپل (a، b) بیرته راولي، چیرې چې 'a' د منفي عددونو ترټولو لوی دی، او 'b' په لیست کې د مثبت عددونو ترټولو کوچنی دی. که منفي یا مثبت عددونه شتون ونلري، دوی یې بیرته راستانه کړئ هیڅ نه. مثالونه: لوی_کوچنۍ_کچیري عددونه[2, 4, 1, 3, 5, 7]) == (هیڅ نه، 1) لوی_کوچنۍ_کچیري عددونه (([]) == (هیڅ نه، هیڅ نه) لوی_کوچنۍ_کچیري عددونه (([0]) == (هیڅ نه، هیڅ نه) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,pbt_Arab,python,"
def compare_one(a, b):
    """"""د يو داسې فنکشن جوړول چې د اصلي شمیرو، فلټونو، يا تارونو استازيتوب کوي او د ورکړل شوي متغیر په ډول لوی متغیر راولي. که ارزښتونه مساوي وي نو نهه راولي. يادونه: که يو اصلي شمېر د تار په توګه استازيتوب شي، نو د تعديل نقطه ښايي . يا ، compare_one ((1، 2.5) â -> 2.5 compare_one ((1، ""2,3"") â -> ""2,3"" compare_one ((""5,1""، ""6"") â -> ""6"" compare_one ((1""، 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,pbt_Arab,python,"
def is_equal_to_sum_even(n):
    """"""ارزونه وکړئ چې ایا ورکړل شوې شمیره n د 4 مثبتو حتی شمیرو مجموعې په توګه لیکل کیدی شي مثال is_equal_to_sum_even ((4) == غلط is_equal_to_sum_even ((6) == غلط is_equal_to_sum_even ((8) == ریښتینی """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,pbt_Arab,python,"
def special_factorial(n):
    """"""د برازیل فکتوریا په دې ډول تعریف شوی: برازیلی_فکتوریا ((n) = n! * (n-1)! * (n-2)! * ... * 1! چیرې چې n > 0 د مثال په توګه: >>> ځانګړی_فکتوریا ((4) 288 د فنکشن به د ننوتلو په توګه یو بشپړ شمیر ترلاسه کړي او باید د دې بشپړ شمیر ځانګړي فکتوریا بیرته راشي. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,pbt_Arab,python,"
def fix_spaces(text):
    """"""_د مثال په توګه-3 په پام کې نیولو سره ، ټول ځایونه په کې د لاندې نښو سره ځای په ځای کړئ ، او که تار له 2 څخه ډیر پرله پسې ځایونه ولري ، نو ټول پرله پسې ځایونه یې په ځای کړئ - fix_spaces (((""مثال"") == ""مثال"" fix_spaces (((""مثال1"") == ""مثال1"" fix_spaces (((""مثال2"") == ""_مثال_2"" fix_spaces (((""مثال 3"") == ""_مثال-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,pbt_Arab,python,"
def file_name_check(file_name):
    """"""د دوتنې نوم د دوتنې نوم کې له دریو څخه زیاتې نښې نه وي. د دوتنې نوم باید په یو ټکی کې وي. د ټکي څخه مخکې فرعي تار باید خالي نه وي، او د لاتین الفا له لیک سره پیل شي. د ټکي وروسته فرعي تار باید له دې څخه یو وي: ['txt'، 'exe'، 'lld'] مثالونه: file_name_check""(example.txt"") # => 'Yes'name_file_check""(example.ll1"") # => 'نه' (د فایل نوم باید د لاتین الفا له لیک سره پیل شي)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,pbt_Arab,python,"


def sum_squares(lst):
    """""""" دا فنکشن به د بشپړ شمیرو لیست واخلي. د لیست د ټولو ننوتلو لپاره ، فنکشن باید د بشپړ شمیرو ننوتل مربع کړي که چیرې د دې شاخص د 3 ضرب وي او د بشپړ شمیرو ننوتل به مکعب کړي که چیرې د دې شاخص د 4 ضرب وي او نه د 3 ضرب. فنکشن به په لیست کې هغه ننوتل بدل نه کړي چې شاخصونه یې د 3 یا 4 ضرب نه وي. فنکشن باید بیا د ټولو ننوتلو مجموعه بیرته راولي. مثالونه: د lst = [1,2,3] لپاره محصول باید 6 وي د lst = [] لپاره محصول باید 0 وي د lst = [-1,-5,2,-1,-5] لپاره محصول باید -126 وي """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,pbt_Arab,python,"
def words_in_sentence(sentence):
    """"""تاسو ته د جملې استازیتوب کوونکی تار درکول کیږي، په جمله کې ځینې کلمې شتون لري چې د ځای سره جلا شوي دي، او تاسو باید یو تار بیرته راولیږئ چې د اصلي جملې څخه کلمې لري، چې اوږدوالی یې لومړني شمیرې دي، په نوې تار کې د کلمو ترتیب باید د اصلي په څیر ورته وي. مثال1: ننوتل: جمله = ""دا یوه ازموینه ده"" محصول: ""is"" مثال2: ننوتل: جمله = ""د لامبو لپاره ځي"" محصول: ""د"" لپاره ځي محدودیتونه: * 1 <= len(جملې) <= 100 * جمله یوازې لیکونه لري """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,pbt_Arab,python,"
def simplify(x, n):
    """"""ستاسو دنده دا ده چې د x * n افادې ساده کړئ. د دې فنکشن راستنیدنه ریښتیا ده که x * n بشپړ شمیر ته ارزښت ورکړي او که نه نو غلط. دواړه x او n ، د کسر تار استازیتوب دی ، او لاندې ب formatه لري ، <شمیرونکی> / <نومینټر> چیرې چې دواړه شمیرونکی او نومونکی مثبت بشپړ شمیرونه دي. تاسو کولی شئ فرض کړئ چې x ، او n معتبر کسرونه دي ، او د نومونکی په توګه صفر نلري. ساده کول (((""1/5"" ، ""5/1"") = ریښتیا ساده کول (((""1/6"" ، ""2/1"") = غلط ساده کول (((""7/10"" ، ""10/2"") = غلط """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,pbt_Arab,python,"
def order_by_points(nums):
    """"""د بشپړ شمیرونو ورکړل شوی لیست د دوی د شمیرو د مجموعې سره سم په پورته کیدونکي ترتیب کې ترتیب کړئ. یادونه: که چیرې ډیری توکي شتون ولري چې د دوی د شمیرو ورته مجموعې سره ، دوی په اصلي لیست کې د دوی شاخص پراساس ترتیب کړئ. د مثال په توګه: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,pbt_Arab,python,"
def specialFilter(nums):
    """"""د فنکشن لیکل چې د شمیرو صف د ان پټ په توګه اخلي او د صف د عناصرو شمیر بیرته راولي چې له 10 څخه لوی وي او د شمیر لومړۍ او وروستۍ دوه ګڼې یې عجیب دي (1, 3, 5, 7, 9). د مثال په توګه: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,pbt_Arab,python,"
def get_max_triples(n):
    """"""تاسو ته یو مثبت عدد n درکول شوی دی. تاسو باید د اوږدوالي n یو عدد صف جوړ کړئ. د هر i (1 ‰¤ i ‰¤ n) لپاره ، د a[i] = i * i - i + 1 ارزښت. د a (a[i] ، a[j] ، a[k]) د درې ګونو شمیر بیرته راګرځئ چیرې چې i < j < k ، او a[i] + a[j] + a[k] د 3 ضرب دی. مثال: ننوتل: n = 5 محصول: 1 توضیح: a = [1, 3, 7, 13, 21] یوازینی معتبر درې ګونی دی (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,pbt_Arab,python,"
def bf(planet1, planet2):
    '''زموږ په شمسي نظام کې اته سیارې شتون لري: لمر ته ترټولو نږدې سیارې عطارد دی ، بل یې زهره ده ، بیا ځمکه ، مریخ ، مشتری ، زحل ، یورانس ، نیپچون. یو فنکشن ولیکئ چې د سیارې نومونه د سیارې 1 او سیارې 2 په توګه اخلي. فنکشن باید یو ټپل بیرته راولي چې ټولې سیارې پکې شامل دي چې مدارونه یې د سیارې 1 مدار او د سیارې 2 مدار ترمینځ موقعیت لري ، د لمر سره نږدې والي له مخې ترتیب شوي. د فنکشن باید خالي ټپل بیرته راولي که چیرې سیارې 1 یا سیارې 2 د سیارې نومونه سم نه وي. مثالونه bf ""(جاپیر ،"" نیپچون "") ==> (""زحل ،"" ""یورانس"") bf (((ځمکه ،"" عطارد "") ==> (""زهره"") bf (((زهره ،"" اورانس)) ==> (""زهره""، ""ځمکه""، ""مریخ""، ""جاپیر""، ""زحل"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,pbt_Arab,python,"
def sorted_list_sum(lst):
    """"""د يو فنکشن ليکل چې د تارونو يو لړلست د پارامتر په توګه ومني، هغه تارونه چې بې ځايه اوږدوالى لري له هغې څخه حذف کړي، او د يو ترتيب شوي ترتيب سره پايله لرونکی لړلست بيرته راولي، لړلست تل د تارونو يو لړلست دی او هيڅکله د شمیرو يو صف نه دی، او کېدای شي چې دوه ځلې ولري. د لړلست ترتيب بايد د هرې کلمې د اوږدوالي له مخې پورته شي، او تاسو بايد د دې قاعدې له مخې ترتيب شوی لړلست بيرته راولي. که دوه کلمې يو شان اوږدوالى ولري، نو لړلست په الفبايي ډول ترتیب کړئ. د فنکشن بايد د تارونو يو لړلست په ترتيب شوي ترتيب کې بيرته راولي. تاسو کولاى شئ فرض کړئ چې ټولې کلمې به يو شان اوږدوالى ولري. د بېلګې په توګه: assert list_sort[""aa""""، ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"" => ""cdcd"" [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,pbt_Arab,python,"
def x_or_y(n, x, y):
    """"""یو ساده پروګرام چې باید د x ارزښت بیرته راولي که چیرې n یو لومړنی شمیر وي او باید د y ارزښت بیرته راولي که نه. مثالونه: د x_or_y ((7, 34, 12) == 34 د x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,pbt_Arab,python,"
def double_the_difference(lst):
    '''د شمیرو لیست ورکړل شوی ، په لیست کې د شمیرو مربعونو مجموعه بیرته راګرځئ کوم چې عجیب دي. هغه شمیرې له پامه غورځوئ چې منفي دي یا بشپړ نه دي. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference ((([0]) == 0 که چیرې د ننوتلو لیست خالي وي ، نو 0 بیرته راګرځئ '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,pbt_Arab,python,"
def compare(game,guess):
    """"""زه فکر کوم چې موږ ټول هغه احساس په یاد لرو کله چې د اوږدې مودې انتظار شوي پیښې پایله په پای کې پیژندل کیږي. هغه احساسات او افکار چې تاسو یې په هغه شیبه کې لرئ په حقیقت کې د یادولو او پرتله کولو ارزښت لري. ستاسو دنده دا ده چې معلومه کړئ چې ایا یو شخص د یو شمیر میچونو پایلې په سمه توګه اټکل کړې دي. تاسو ته د مساوي اوږدوالي دوه ارې د نمرو او اټکلونو ورکړل شوي دي ، چیرې چې هر شاخص یو میچ ښیې. د ورته اوږدوالي یو صف بیرته راګرځئ چې دا په ګوته کوي چې هر اټکل څومره لرې و. که دوی سم اټکل کړی وي ، ارزښت یې 0 دی ، او که نه ، ارزښت یې د اټکل او نمرې تر مینځ مطلق توپیر دی. مثال: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] ((([0,5,0,4],[0,4,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,pbt_Arab,python,"
def Strongest_Extension(class_name, extensions):
    """"""تاسو ته به د يو ټولګي نوم (د يو تار) او د غزونې يو لړ ورکړل شي. غزونې دي چې د ټولګي د اضافي ټولګي د بارولو لپاره وکارول شي. د غزونې د قوت په لاندې ډول دی: پرېږدئ چې د CAP د غزونې په نوم کې د لویو تورو د شمېر وي، او پرېږدئ چې د SM د غزونې په نوم کې د کوچنيو تورو د شمېر وي، د قوت د وي د کسر CAP - SM. تاسو بايد د قوي غزونه پيدا او په دې بڼه يو تار بېرته: ClassName.StrongestExtensionName. که دوه يا زيات غزونه سره د همدې قوت، تاسو بايد هغه چې په لست کې لومړی راځي غوره کړي. د مثال په توګه، که تاسو ته د ټولګي او د غزونې يو لړ ورکړل شي: ['SEviviRNGLISCES'، 'Cheese'، 'StuF'] نو تاسو بايد 'SviRNGLISCES' بېرته ځکه چې د غزونې په نوم کې د لویو تورو د شمېر وي، او SM د غزونې په نوم کې د کوچنيو تورو تورو تورو د شمېر وي، د قوت د ده د CAP - SM. تاسو بايد د قوي غزونه تر ټولو قوي غزونه پيدا او په دې بڼه کې يو تار بېرته راستانه: ClassName.StrongExtensionName.StrongExtensionName.StrongExtensionName.StrongestExtensionName.StrongestExtensionName.StrongExtensionName.If دوه يا زيات غزونه دي، تاسو بايد د يو تار په دې بڼه کې د يو تار په توګه د يو تار په توګه د يو تار په توګه د يو تار په توګه د يو غزونه لري، چې د غزونه لري:""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,pbt_Arab,python,"
def cycpattern_check(a , b):
    """"""تاسو ته دوه کلمې درکول شوي دي. تاسو باید ریښتیني بیرته راستانه کړئ که چیرې دوهمه کلمه یا د هغې کومې گردش په لومړۍ کلمه کې فرعي تار وي cycpattern_check (((""abcd"",""abd"") => غلط cycpattern_check (((""سلام"",""ell"") => ریښتیني cycpattern_check (((""whassup"",""psus"") => غلط cycpattern_check (((""abab"",""baa"") => ریښتیني cycpattern_check (((""efef"",""eeff"") => غلط cycpattern_check (((hims"",""simen"") => ریښتیني """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,pbt_Arab,python,"
def even_odd_count(num):
    """"""د يوې بشپړ شمېرې په پام کې نيولو سره. يو ټپل چې په ترتیب سره د څو او څو ګوني عدد لري بيرته راولي. مثال: حتی_انډ_کاونټ ((-12) ==> (1, 1) حتی_انډ_کاونټ ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,pbt_Arab,python,"
def int_to_mini_roman(number):
    """"""د مثبت عدد په پام کې نیولو سره، د هغې رومن عدد مساوي د تار په توګه ترلاسه کړئ، او دا په کوچني لیک کې بیرته راګرځوئ. محدودیتونه: 1 <= num <= 1000 مثالونه: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,pbt_Arab,python,"
def right_angle_triangle(a, b, c):
    '''د مثلث د دریو اړخونو اوږدوالی ورکړل شوی. که درې اړخونه یو سم زاویه مثلث جوړ کړي ریښتینی بیرته راګرځئ ، که نه نو غلط. یو سم زاویه مثلث یو مثلث دی چې یو زاویه یې سم زاویه یا 90 درجې ده. مثال: right_angle_triangle ((3، 4، 5) == ریښتینی right_angle_triangle ((1، 2، 3) == غلط '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,pbt_Arab,python,"
def find_max(words):
    """"""یو داسې فنکشن ولیکئ چې د تارونو لیست ومني. لیست کې مختلف ټکي شامل دي. د ځانګړي کرکټرونو اعظمي شمیر سره کلمه بیرته راګرځوئ. که څو تارونه د ځانګړي کرکټرونو اعظمي شمیر ولري ، هغه یو بیرته راګرځوئ چې په لیکسيکوګرافیکي ترتیب کې لومړی راځي. find_max ((([""نوم""، ""د""، ""ستر""]) == ""ستر"" find_max (([""نوم""، ""enam""، ""لوبې""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,pbt_Arab,python,"
def eat(number, need, remaining):
    """"""تاسو یو وږی خرگوش یاست، او تاسو لا دمخه یو شمیر ګازرونه خوړلي دي، مګر اوس تاسو اړتیا لرئ چې د ورځې د خواړو بشپړولو لپاره نور ګازرونه وخورئ. تاسو باید یو صف بیرته راولیږئ [د خواړو وروسته د خوړل شوي ګازرو شمیر، ستاسو د خواړو وروسته پاتې ګازرو شمیر ] که چیرې کافي پاتې ګازرونه شتون ونلري، تاسو به ټول پاتې ګازرونه وخورئ، مګر لاهم به وږی وي. مثال: * وخورئ (((5, 6, 10) -> [11, 4] * وخورئ (((4, 8, 9) -> [12, 1] * وخورئ (((1, 10, 10) -> [11, 0] * وخورئ (((2, 11, 5) -> [7, 0] متغیرونه: @ شمیره: د ګازرو شمیر چې تاسو یې خوړئ. @ اړتیا: د ګازرو شمیر چې تاسو یې باید وخورئ. @ پاتې: د ګازرو شمیر چې په ذخیره کې پاتې دي: * شمیره: <= 0 * <= 1000 * <= 1000 * پاتې: <= 1000 <= 1000 <= 1000 = تفریح وکړئ  = = 1000 :)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,pbt_Arab,python,"
def do_algebra(operator, operand):
    """"""د دوه لیستونو عملیاتو او عملیاتو په پام کې نیولو سره. لومړی لیست د الجبرا اساسي عملیات لري، او دوهم لیست د بشپړ شمیر لیست دی. د الجبری بیان جوړولو لپاره دوه ورکړل شوي لیستونه وکاروئ او د دې بیان ارزونه بیرته ورکړئ. د الجبرا اساسي عملیات: اضافه کول (+) تخفیف ( - ) ضرب ( * ) د فرش ویش ( // ) اعظمي کول ( ** مثال): عملیاتي ['+'، '*'، '-'] صف = [2, 3, 4, 5] پایله = 2 + 3 * 4 - 5 => پایله = 9 یادونه: د عملیاتي لیست اوږدوالی د عملیاتي لیست اوږدوالي سره مساوي دی. عملیاتي د غیر منفي بشپړ شمیرونو لیست دی. عملیاتي لږترلږه یو عملیاتي لیست لري، او عملیاتي لیست لږترلږه دوه عملیاتي لري. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,pbt_Arab,python,"
def solve(s):
    """"""تاسو ته يو تار s درکول شوی دی. که s[i] يو حرف وي، د هغې قضیې له ښکته څخه پورته ته او يا برعکس ته واړوي، که نه نو دا په خپل حال کې وساتئ. که چېرې تار کې کوم حرفونه نه وي، نو تار بېرته واړوي. د فنکشن بايد د پايلې تار بېرته راولي. مثالونه حل (((""1234"") = ""4321"" حل (((""ab"") = ""AB"" حل (((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,pbt_Arab,python,"
def string_to_md5(text):
    """"""د 'text' تار په پام کې نیولو سره، د دې md5 هش مساوي تار بیرته راګرځئ. که 'text' خالي تار وي، نو هیڅ نه بیرته راګرځئ. >>> string_to_md5 ((('سلام نړۍ') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,pbt_Arab,python,"
def generate_integers(a, b):
    """"""د دوه مثبتو بشپړ شمیرونو a او b په پام کې نیولو سره ، د a او b تر مینځ حتی ارقام بیرته راګرځئ ، په پورته کیدونکي ترتیب کې. د مثال په توګه: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
