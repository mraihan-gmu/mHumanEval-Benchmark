task_id,nl,pl,prompt,canonical_solutions,test
HumanEval/0,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཀྱི་བེ་ཀཊར་འདི་ནང་ ཨང་གྲངས་གཉིས་རེ་འདི་ བྱིན་ཡོད་པའི་ཚད་གཞི་ལས་ སྦོ་ལོགས་ཁར་ཡོད་ག་མེད་བལྟ་། >>> has_close_elements{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}}{n}}{n}{n}}{n}{n}}{n}{n}{n}}}{n}{n}}{n}{n}}}{n}{n}}}{n}}}}{n}{n}}}{n}}{n}}{n}}}{n}}}{n}{n}}}{n}}}}}{n}}{n}}}}}}}{n}}}}}}}}}}}}}{n}}}}}}}}}}}}
bool has_close_elements(std::vector<float> numbers, float threshold) {
","bool has_close_elements(std::vector<float> numbers, float threshold) {
    std::sort(numbers.begin(), numbers.end());  // Sort the numbers in ascending order
    for (size_t i = 1; i < numbers.size(); i++) {
        if (std::abs(numbers[i] - numbers[i - 1]) < threshold) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = has_close_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));
}
"
HumanEval/1,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་ལས་འགན་ནང་ ནང་ཐིག་འདི་ ནང་ཐིག་ནང་ཡོད་པའི་ཁྱད་ཚབ་སྡེ་ཚན་ལེ་ཤ་ཡོད་པའི་ཐིག་ཁྲམ་ཨིན། ཁྱོད་ཀྱི་དམིགས་ཡུལ་འདི་ སྡེ་ཚན་དེ་སོ་སོར་སྦེ་ སྐུད་པ་སོ་སོར་སྦེ་ དབྱེ་བ་ཕྱེ་ནི་དང་ འདི་ཚུ་གི་ ཝེ་ཊར་ལོག་གཏང་ནི་དེ་ཨིན། སྡེ་ཚན་སོ་སོར་འདི་ ཚད་ལྡན་ (སྒོ་སྒྲིག་རེ་རེ་གི་སྒོ་སྒྲིག་འདི་ ལེགས་ཤོམ་སྦེ་བསྡམ་ཡོདཔ་) དང་ གཅིག་གིས་གཅིག་ལུ་ ནང་ཐིག་ནང་མ་སྡམ་པར་བཞག་། ནང་ཐིག་ནང་ས་སྟོང་ཡོད་མེད་བལྟ་། >>> separate_paren_groups (((""( ) (() (()))))))) (std::vector<std::string> (((((std::string) "")"", ((((())"", (std::string) ""((()))))
std::vector<std::string> separate_paren_groups(std::string paren_string) {
","std::vector<std::string> separate_paren_groups(std::string paren_string) {
    std::vector<std::string> groups;
    std::string current_group;
    int balance = 0;

    for (char ch : paren_string) {
        if (ch == ' ') continue;  // Ignore spaces

        current_group += ch;
        if (ch == '(') {
            balance++;
        } else if (ch == ')') {
            balance--;
            if (balance == 0) {  // Found a balanced group
                groups.push_back(current_group);
                current_group.clear();
            }
        }
    }

    return groups;
}","}
int main() {
    auto candidate = separate_paren_groups;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<std::string>({(std::string)""(()())"", (std::string)""((()))"", (std::string)""()"", (std::string)""((())()())""})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""((()))"", (std::string)""(((())))""})));
    assert(candidate((""(()(())((())))"")) == (std::vector<std::string>({(std::string)""(()(())((())))""})));
    assert(candidate((""( ) (( )) (( )( ))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""(()())""})));
}
"
HumanEval/2,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འོག་ལུ་ཡོད་པའི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་སྦེ་ཁ་ཕྱེ་ཚུགས། (ཨང་གྲངས་འདི་ཨང་གྲངས་ལས་ སྦོམ་ཤོས་ཅིག་སྦེ་) དེ་ལས་ ཨང་གྲངས་བཅུ་ཆ་སྦེ་ཁ་ཕྱེ་ཚུགས། (ལྷག་ལུས་ཆ་ཤས་འདི་ ༡ ལས་ ཆུང་ཤོས་ཅིག་སྦེ་) ཨང་གྲངས་ཀྱི་ཨང་གྲངས་བཅུ་ཆ་འདི་སླར་ལོག་འབདཝ་ཨིན།
float truncate_number(float number) {
","float truncate_number(float number) {
    return number - std::floor(number);
}","}
int main() {
    auto candidate = truncate_number;
    assert(candidate((3.5f)) == (0.5f));
    assert(candidate((1.25f)) == (0.25f));
    assert(candidate((123.0f)) == (0.0f));
}
"
HumanEval/3,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་དངུལ་ཁང་གི་རྩིས་ཁྲ་ནང་ དངུལ་བཙུགས་དང་བཏོན་པའི་ལཱ་གི་ ཝི་ཅཊར་ཅིག་ཐོབ་སྟེ་ འདི་ཡང་ ༠་གི་གནས་གོང་ལས་ འགོ་བཙུགས་འོང་། ཁྱོད་ཀྱི་ལཱ་འགན་འདི་ ཝི་ཅཊར་དེ་ ༠་ལས་མར་བབས་སོང་ཡོདཔ་དང་ དེ་བསྒང་ལས་ལས་ལས་འགན་འདི་བདེན་པ་སྦེ་ལོག་འོང་དགོཔ་ཨིན། དེ་མེན་པ་ཅིན་དེ་རྫུས་མ་སྦེ་ལོག་འོང་དགོཔ་ཨིན། >>> below_zero(((std::vector<long>({long) 1, (long) 2, (long) 3}))) (རྫུས་མ་) >>> below_zero((std::vector<long>({long) 1, (long) 2, (long) -4, (long) 5} (true))
bool below_zero(std::vector<long> operations) {
","bool below_zero(std::vector<long> operations) {
    long balance = 0;
    for (long op : operations) {
        balance += op;
        if (balance < 0) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = below_zero;
    assert(candidate((std::vector<long>())) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));
}
"
HumanEval/4,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ནང་བསྐྱོད་ཨང་གྲངས་ཀྱི་ ཝི་ཅཊ་ཅིག་ལུ་ གནས་གོང་གི་བར་མཚམས་ཀྱི་མཐའ་འཁོར་ལུ་ Mean Absolute Deviation རྩིས་སྟོནམ་ཨིན། Mean Absolute Deviation འདི་ དབྱེ་བ་རེ་དང་ལྟེ་བ་ (གནས་གོང་འདི་ནང་ལུ་) གི་བར་མཚམས་ཀྱི་བར་མཚམས་ཁྱད་པར་ཨིན། MAD = average ཨིན། x - x_mean ཨིན། >>> mean_absolute_deviation (((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) (1.0f)
float mean_absolute_deviation(std::vector<float> numbers) {
","float mean_absolute_deviation(std::vector<float> numbers) {
    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) / numbers.size();
    float mad = std::accumulate(numbers.begin(), numbers.end(), 0.0f, 
                                [mean](float sum, float x) { return sum + std::abs(x - mean); }) 
                / numbers.size();
    return mad;
}","}
int main() {
    auto candidate = mean_absolute_deviation;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));
}
"
HumanEval/5,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ནང་བསྐྱོད་བེ་ཊར་གྱི་རིམ་པ་གཉིས་ཆ་རའི་བར་ནའི་ཨང་གྲངས་ 'delimeter'འདི་བཙུགས་ `numbers' >>> intersperse((std::vector<long>()), (4)) (std::vector<long>()) >>> intersperse((std::vector<long>({long) 1, (long) 2, (long) 3})), (4)) (std::vector<long>({long) 1, (long) 4, (long) 2, (long) 4, (long) 3}))
std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
","std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
    if (numbers.empty()) return numbers;

    std::vector<long> result;
    for (size_t i = 0; i < numbers.size(); i++) {
        result.push_back(numbers[i]);
        if (i < numbers.size() - 1) {
            result.push_back(delimeter);
        }
    }
    return result;
}","}
int main() {
    auto candidate = intersperse;
    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));
    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));
}
"
HumanEval/6,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་ལས་འགན་འདི་ནང་ ནང་ཐིག་གི་སྡེ་ཚན་ལེ་ཤ་ཅིག་ཡོད་པའི་ ནང་ཐིག་ནང་ཡོད་པའི་ ཕར་ནེཊི་སི་ཚུ་ བར་སྟོང་གིས་སོ་སོར་འབད་ཡོདཔ་ཨིན། སྡེ་ཚན་རེ་རེ་བཞིན་དུ་ལུ་ ནང་ཐིག་ནང་ཡོད་པའི་ ཕར་ནེཊི་སི་གི་གནས་ཚད་འདི་འཐོན་འོང་། དཔེར་ན་ (() (()) ནང་ མཐོ་ཤོས་རང་ ཌི་བི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌ
std::vector<long> parse_nested_parens(std::string paren_string) {
","std::vector<long> parse_nested_parens(std::string paren_string) {
    std::vector<long> depths;
    long current_depth = 0, max_depth = 0;

    for (char ch : paren_string) {
        if (ch == ' ') {
            if (max_depth > 0) {
                depths.push_back(max_depth);
                max_depth = 0;
            }
            current_depth = 0;
        } else if (ch == '(') {
            current_depth++;
            max_depth = std::max(max_depth, current_depth);
        } else if (ch == ')') {
            current_depth--;
        }
    }

    if (max_depth > 0) {
        depths.push_back(max_depth);
    }

    return depths;
}","}
int main() {
    auto candidate = parse_nested_parens;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((""(()(())((())))"")) == (std::vector<long>({(long)4})));
}
"
HumanEval/7,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string གི་ནང་འདྲེན་གྱི་བེ་ཊར་འདི་ string གི་འོག་གི་ string ཚུ་ནང་རྐྱངམ་ཅིག་བཙུགས། >>> filter_by_substring((std::vector<std::string>()), (""a"")) (std::vector<std::string>()) >>> filter_by_substring(((std::vector<std::string>({(std::string) ""abc"", (std::string) ""bacd"", (std::string) ""cde"", (std::string) ""array""})), (""a"") (std::vector<std::string>(({(std::string) abc"", (std::string) ""bacd"", (std::string) ""array""}))
std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
","std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.find(substring) != std::string::npos) {
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_substring;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""aaaxxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""aaaxxy"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""grunt"", (std::string)""trumpet"", (std::string)""prune"", (std::string)""gruesome""})), (""run"")) == (std::vector<std::string>({(std::string)""grunt"", (std::string)""prune""})));
}
"
HumanEval/8,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་བུའི་ ཝི་ཅཊ་ཅིག་གི་དོན་ལུ་ ཨང་གྲངས་ཧྲིལ་བུའི་བསྡོམས་དང་ དབྱེ་གཞི་འདི་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་ཧྲིལ་བུའི་བསྡོམས་དེ་ ༠ དང་ དབྱེ་གཞི་སྟོང་པ་འདི་ ༡ སྦེ་ཆ་མཉམ་ཨིན། >>> sum_product (((std::vector<long> ((((((std::make_tuple ((0, 1)) >>> sum_product (((std::vector<long> (((long) 1, (long) 2, (long) 3, (long) 4)) (std::make_tuple (((10, 24))
std::tuple<long, long> sum_product(std::vector<long> numbers) {
","std::tuple<long, long> sum_product(std::vector<long> numbers) {
    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);
    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());
    return std::make_tuple(sum, product);
}","}
int main() {
    auto candidate = sum_product;
    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));
    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));
    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));
}
"
HumanEval/9,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་བུའི་ ཝི་ཅཊཱརཅིག་ལས་ ཚུད་དེ་ཡོད་པའི་ ཝི་ཅཊཱརཅིག་ཐོན་འོང་། >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2}))) (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)3, (long)4, (long)4}))
std::vector<long> rolling_max(std::vector<long> numbers) {
","std::vector<long> rolling_max(std::vector<long> numbers) {
    std::vector<long> result;
    long max_so_far = LONG_MIN;

    for (long num : numbers) {
        max_so_far = std::max(max_so_far, num);
        result.push_back(max_so_far);
    }

    return result;
}","}
int main() {
    auto candidate = rolling_max;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));
}
"
HumanEval/10,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གྲུབ་འབྲས་འདི་འཇམ་ཏོང་ཏོ་ཨིན། - གྲུབ་འབྲས་འདི་ palindrome སྦེ་ཡོད་པའི་ string གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། - གྲུབ་འབྲས་འདི་ palindrome གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། - གྲུབ་འབྲས་འདི་ palindromic གི་ཤུལ་མ་གི་མིང་འདི་ string གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། >>> make_palindrome ((("""")) ("""") >>> make_palindrome (((""cat"")) (""catac"") >>> make_palindrome (((""cata"")) (""catac"")
std::string make_palindrome(std::string string) {
","std::string make_palindrome(std::string string) {
    auto is_palindrome = [](const std::string &s) {
        return std::equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());
    };

    for (size_t i = 0; i < string.size(); ++i) {
        if (is_palindrome(string.substr(i))) {
            std::string prefix = string.substr(0, i);
            std::reverse(prefix.begin(), prefix.end());
            return string + prefix;
        }
    }

    return string;
}","}
int main() {
    auto candidate = make_palindrome;
    assert(candidate(("""")) == (""""));
    assert(candidate((""x"")) == (""x""));
    assert(candidate((""xyz"")) == (""xyzyx""));
    assert(candidate((""xyx"")) == (""xyx""));
    assert(candidate((""jerry"")) == (""jerryrrej""));
}
"
HumanEval/11,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ནང་བསྐྱོད་འདི་ string a དང་ b གཉིས་ཨིན་ འདི་ནང་ 1 དང་ 0 ཚུ་རྐྱངམ་ཅིག་ཡོདཔ་ཨིན། འ་ནི་ནང་བསྐྱོད་ནང་ binary XOR འདི་འབད་ཞིནམ་ལས་ string སྦེ་ལོག་འབདཝ་ཨིན།
std::string string_xor(std::string a, std::string b) {
","std::string string_xor(std::string a, std::string b) {
    std::string result;
    for (size_t i = 0; i < a.size(); ++i) {
        result += (a[i] == b[i]) ? '0' : '1';
    }
    return result;
}","}
int main() {
    auto candidate = string_xor;
    assert(candidate((""111000""), (""101010"")) == (""010010""));
    assert(candidate((""1""), (""1"")) == (""0""));
    assert(candidate((""0101""), (""0000"")) == (""0101""));
}
"
HumanEval/12,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string གི་བེ་ཀཊར་ནང་ལས་ ཚེ་རིང་ཤོས་དེ་སླར་ལོག་འབད། ཚེ་རིང་འདྲ་མཉམ་གྱི་བེ་ཀཊར་ལེ་ཤ་ཡོད་པ་ཅིན་ དང་པ་དེ་སླར་ལོག་འབད། ནང་བསྐྱོད་བེ་ཀཊར་སྟོངམ་ཡོད་པ་ཅིན་ ག་ནི་ཡང་སླར་ལོག་མི་འབད་ >>> longest(((std::vector<std::string>())) std::nullopt >>> longest((std::vector<std::string>{(std::string) ""a"", (std::string) ""b"", (std::string) ""c""}))) ""a"" >>> longest(((std::vector<std::string>({(std::string) ""a"", (std::string) ""bb"", (stdstring) ""ccc""}))) ""ccc""
std::optional<std::string> longest(std::vector<std::string> strings) {
","std::optional<std::string> longest(std::vector<std::string> strings) {
    if (strings.empty()) return std::nullopt;

    return *std::max_element(strings.begin(), strings.end(), 
                             [](const std::string& a, const std::string& b) {
                                 return a.size() < b.size();
                             });
}","}
int main() {
    auto candidate = longest;
    assert(candidate((std::vector<std::string>())) == std::nullopt);
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == ""x"");
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""yyy"", (std::string)""zzzz"", (std::string)""www"", (std::string)""kkkk"", (std::string)""abc""}))) == ""zzzz"");
}
"
HumanEval/13,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་པོ་གཉིས་ a དང་ b གི་སྤྱིར་བཏང་ཆ་བགོས་སྦོམ་ཤོས་འདི་སླར་ལོག་འབདཝ་ཨིན། >>> greatest_common_divisor (((3), (5)) (1) >>> greatest_common_divisor (((25), (15)) (5)
long greatest_common_divisor(long a, long b) {
","long greatest_common_divisor(long a, long b) {
    return std::gcd(a, b);
}","}
int main() {
    auto candidate = greatest_common_divisor;
    assert(candidate((3), (7)) == (1));
    assert(candidate((10), (15)) == (5));
    assert(candidate((49), (14)) == (7));
    assert(candidate((144), (60)) == (12));
}
"
HumanEval/14,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ནང་བསྐྱོད་ཐིག་གི་སྔོན་འཇུག་ག་ར་ལས་ ཆུང་ཤོས་ལས་ སྦོམ་ཤོས་ཚུན་གྱི་སྔོན་འཇུག་གི་བེ་ཊར་སླར་ལོག་འབདཝ་ཨིན། (all_prefixes) (std::vector<std::string>({(std::string) ""a"", (std::string) ""ab"", (std::string) ""abc""})
std::vector<std::string> all_prefixes(std::string string) {
","std::vector<std::string> all_prefixes(std::string string) {
    std::vector<std::string> prefixes;
    for (size_t i = 1; i <= string.size(); ++i) {
        prefixes.push_back(string.substr(0, i));
    }
    return prefixes;
}","}
int main() {
    auto candidate = all_prefixes;
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""asdfgh"")) == (std::vector<std::string>({(std::string)""a"", (std::string)""as"", (std::string)""asd"", (std::string)""asdf"", (std::string)""asdfg"", (std::string)""asdfgh""})));
    assert(candidate((""WWW"")) == (std::vector<std::string>({(std::string)""W"", (std::string)""WW"", (std::string)""WWW""})));
}
"
HumanEval/15,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ༠ ལས་འགོ་བཙུགས་ཏེ་ n ཚུན་གྱི་བར་ནའི་ས་སྒོ་ནང་ཐིག་ཁྲམ་ཡོད་པའི་ string སླར་ལོག་འབདཝ་ཨིན། >>> string_sequence((0)) (""0"") >>> string_sequence((5)) (""0 1 2 3 4 5"")
std::string string_sequence(long n) {
","std::string string_sequence(long n) {
    std::ostringstream oss;
    for (long i = 0; i <= n; ++i) {
        if (i > 0) oss << "" "";
        oss << i;
    }
    return oss.str();
}","}
int main() {
    auto candidate = string_sequence;
    assert(candidate((0)) == (""0""));
    assert(candidate((3)) == (""0 1 2 3""));
    assert(candidate((10)) == (""0 1 2 3 4 5 6 7 8 9 10""));
}
"
HumanEval/16,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string ཅིག་བྱིན་པ་ཅིན་ འདི་ནང་ལུ་ཁྱད་པར་ཅན་ཡིག་འབྲུ་ག་དེ་ཅིག་ཡོདཔ་ཨིན་ན་འཚོལ་ (ཡིག་འབྲུ་ཆེ་ཆུང་དང་ཆུང་ཆུང་ག་དེ་ཅིག་ཨིན་རུང་) >>> count_distinct_characters (((""xyzXYZ"")) (3) >>> count_distinct_characters (((""Jerry"")) (4)
long count_distinct_characters(std::string string) {
","long count_distinct_characters(std::string string) {
    std::unordered_set<char> distinct_chars;
    for (char ch : string) {
        distinct_chars.insert(std::tolower(ch));
    }
    return distinct_chars.size();
}","}
int main() {
    auto candidate = count_distinct_characters;
    assert(candidate(("""")) == (0));
    assert(candidate((""abcde"")) == (5));
    assert(candidate((""abcdecadeCADE"")) == (5));
    assert(candidate((""aaaaAAAAaaaa"")) == (1));
    assert(candidate((""Jerry jERRY JeRRRY"")) == (5));
}
"
HumanEval/17,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་ལས་འགན་འདི་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་རྣམ་པ་ནང་ལུ་ སྒྲ་དབྱངས་ཀྱི་ས་ཐག་འདི་བཙུགསཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཨེས་སི་ཀི་ཨའི་རྣམ་པ་ནང་ལུ་ ཨེགསི་ཨའི་གི་ས་ཐག་གི་ ཝེ་ཀཊར་འདི་ བཀྲམ་སྟོན་འབད་དགོཔ་ཨིན། འདི་ནང་ལུ་ མན་ངག་འདི་ཡོདཔ་ཨིན། 'o' note, lasts four beats 'o. 256' - lasts half note, lasts two beats 'o. 256' - quater note, lasts one beat >>> parse_music.
std::vector<long> parse_music(std::string music_string) {
","std::vector<long> parse_music(std::string music_string) {
    std::vector<long> beats;
    std::istringstream iss(music_string);
    std::string note;
    
    while (iss >> note) {
        if (note == ""o"") beats.push_back(4);
        else if (note == ""o|"") beats.push_back(2);
        else if (note == "".|"") beats.push_back(1);
    }

    return beats;
}","}
int main() {
    auto candidate = parse_music;
    assert(candidate(("""")) == (std::vector<long>()));
    assert(candidate((""o o o o"")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate(("".| .| .| .|"")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));
    assert(candidate((""o| o| .| .| o o o o"")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));
    assert(candidate((""o| .| o| .| o o| o o|"")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));
}
"
HumanEval/18,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གཞི་རྟེན་ཐིག་ཁྲམ་ནང་ལུ་ ཚར་ག་དེ་ཅིག་རང་ འོག་ཐིག་ཅིག་ཐོབ་ཚུགས་ག་འཚོལ་གི། མཉམ་སྡེབ་ཀྱི་གནད་དོན་ཚུ་རྩིས་གི། >>> how_many_times((""""), (""a"")) (0) >>> how_many_times(""aaa""), (""a"")) (3) >>> how_many_times(""aaaa""), (""aa"") (3)
long how_many_times(std::string string, std::string substring) {
","long how_many_times(std::string string, std::string substring) {
    if (substring.empty()) return 0;
    
    long count = 0;
    size_t pos = 0;
    
    while ((pos = string.find(substring, pos)) != std::string::npos) {
        count++;
        pos++;  // Move one position forward to count overlapping occurrences
    }
    
    return count;
}","}
int main() {
    auto candidate = how_many_times;
    assert(candidate((""""), (""x"")) == (0));
    assert(candidate((""xyxyxyx""), (""x"")) == (4));
    assert(candidate((""cacacacac""), (""cac"")) == (4));
    assert(candidate((""john doe""), (""john"")) == (1));
}
"
HumanEval/19,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ནང་བསྐྱོད་འདི་ ས་སྒོ་ནང་ཐིག་ཁྲམ་ཡོད་པའི་ ཨང་གྲངས་ཐིག་ཁྲམ་ཅིག་ཨིན་ ' ༠' ལས་ ' ༩' ཚུན་ཨིན། གདམ་ཁ་ཚུ་ ' ༠ ' ༡ ' ༢ ' ༣ ' ༤ ' ༥ ' ༦ ' ༧ ' ༨ ' ༩ 'ཨིན། ཨང་གྲངས་ཚུ་ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ལུ་རིམ་སྒྲིག་འབད་ཡོད་པའི་ཐིག་ཁྲམ་དེ་སླར་ལོག་འབདཝ་ཨིན། >>> sort_numbers((""three one five"")) (""one three five"")
std::string sort_numbers(std::string numbers) {
","std::string sort_numbers(std::string numbers) {
    std::unordered_map<std::string, int> num_map = {
        {""zero"", 0}, {""one"", 1}, {""two"", 2}, {""three"", 3}, {""four"", 4},
        {""five"", 5}, {""six"", 6}, {""seven"", 7}, {""eight"", 8}, {""nine"", 9}
    };

    std::unordered_map<int, std::string> rev_map = {
        {0, ""zero""}, {1, ""one""}, {2, ""two""}, {3, ""three""}, {4, ""four""},
        {5, ""five""}, {6, ""six""}, {7, ""seven""}, {8, ""eight""}, {9, ""nine""}
    };

    std::istringstream iss(numbers);
    std::vector<int> num_list;
    std::string word;

    while (iss >> word) {
        num_list.push_back(num_map[word]);
    }

    std::sort(num_list.begin(), num_list.end());

    std::ostringstream oss;
    for (size_t i = 0; i < num_list.size(); ++i) {
        if (i > 0) oss << "" "";
        oss << rev_map[num_list[i]];
    }

    return oss.str();
}","}
int main() {
    auto candidate = sort_numbers;
    assert(candidate(("""")) == (""""));
    assert(candidate((""three"")) == (""three""));
    assert(candidate((""three five nine"")) == (""three five nine""));
    assert(candidate((""five zero four seven nine eight"")) == (""zero four five seven eight nine""));
    assert(candidate((""six five four three two one zero"")) == (""zero one two three four five six""));
}
"
HumanEval/20,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཚུ་ (ཉུང་ཤོས་ཨང་གྲངས་གཉིས་ལས་བརྒལ་མི་) གི་ ཝི་ཅཊ་ཅིག་ལས་ གཅིག་དང་གཅིག་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་པའི་ ཨང་གྲངས་གཉིས་གདམ་ཁ་རྐྱབ་སྟེ་ ལོག་གཏང་ནི་དང་ འདི་ཚུ་རིམ་པ་བཞིན་དུ་ལོག་གཏང་ (ཨང་གྲངས་ཆུང་ཤོས་དང་སྦོམ་ཤོས་) ། >>> find_closest_elements (_f) (float) 2.0f, (float) 3.0f, (float) 4.0f, (float) 5.0f, (float) 2.2f)) (std::make_tuple (_f) 2.0f, 2.2f)) >>> find_closest_elements (_f) (std::vector (_f) 2.0f, (float) 2.0f, (float) 3.0f, (float) 4.0f, (float) 5.0f, (float) 2.0f)) (std::make_tuple (_f) 2.0f, (float) 2.0)
std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
","std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
    std::sort(numbers.begin(), numbers.end());
    float min_diff = std::numeric_limits<float>::max();
    float num1 = 0, num2 = 0;

    for (size_t i = 1; i < numbers.size(); ++i) {
        float diff = numbers[i] - numbers[i - 1];
        if (diff < min_diff) {
            min_diff = diff;
            num1 = numbers[i - 1];
            num2 = numbers[i];
        }
    }

    return std::make_tuple(num1, num2);
}","}
int main() {
    auto candidate = find_closest_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));
}
"
HumanEval/21,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཀྱི་བེ་ཊར་ (ཉུང་ཤོས་རང་ ཨེ་རེ་གཉིས་ལས་) བྱིན་ཡོད་པ་ཅིན་ བེ་ཊར་དེ་ནང་ལུ་ ཐིག་ཁྲམ་འགྱུར་བཅོས་ཅིག་ལག་ལེན་འཐབ་སྟེ་ ཨང་གྲངས་ཆུང་ཤོས་དེ་ ༠ དང་སྦོམ་ཤོས་དེ་ ༡ ལུ་འགྱུར་བཅོས་འབདཝ་ཨིན།
std::vector<float> rescale_to_unit(std::vector<float> numbers) {
","std::vector<float> rescale_to_unit(std::vector<float> numbers) {
    float min_val = *std::min_element(numbers.begin(), numbers.end());
    float max_val = *std::max_element(numbers.begin(), numbers.end());

    if (min_val == max_val) {
        std::fill(numbers.begin(), numbers.end(), 0.0f);
        return numbers;
    }

    for (float &num : numbers) {
        num = (num - min_val) / (max_val - min_val);
    }

    return numbers;
}","}
int main() {
    auto candidate = rescale_to_unit;
    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
}
"
HumanEval/22,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཕིལཊར་འདི་ནང་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་དོན་ལུ་རྐྱངམ་གཅིག་ cppthon གནས་གོང་ཚུ་བཙུགསཔ་ཨིན། >>> filter_integers((std::vector<std::any>({(std::string) ""a"", (std::string)3.14f, (std::string)5}))) (std::vector<long>({(long)5})) >>> filter_integers((std::vector<std::any>({1, 2, 3, ""abc"", std::<long,map>), std::vector<long>(()))) (std::vector<long>({(long) 1, (long) 2, (long) 3}))
std::vector<long> filter_integers(std::vector<std::any> values) {
","std::vector<long> filter_integers(std::vector<std::any> values) {
    std::vector<long> result;
    for (const auto& val : values) {
        if (val.type() == typeid(long)) {
            result.push_back(std::any_cast<long>(val));
        } else if (val.type() == typeid(int)) {
            result.push_back(std::any_cast<int>(val));
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_integers;
    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));
    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, ""adasd""}))) == (std::vector<long>({(long)4, (long)9})));
    assert(candidate((std::vector<std::any>({3, ""c"", 3, 3, ""a"", ""b""}))) == (std::vector<long>({(long)3, (long)3, (long)3})));
}
"
HumanEval/23,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string_length (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_)
long string_length(std::string string) {
","long string_length(std::string string) {
    return string.length();
}","}
int main() {
    auto candidate = string_length;
    assert(candidate(("""")) == (0));
    assert(candidate((""x"")) == (1));
    assert(candidate((""asdasnakj"")) == (9));
}
"
HumanEval/24,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ n ཅིག་ལུ་ ཨང་གྲངས་སྦོམ་ཤོས་ཅིག་ n ལུ་ཆ་བགོས་འབད་ཡོད་པའི་ཨང་གྲངས་ཆུང་ཤོས་འདི་འཚོལ་ག >>> largest_divisor ((((15)) (5)
long largest_divisor(long n) {
","long largest_divisor(long n) {
    for (long i = n / 2; i > 0; --i) {
        if (n % i == 0) {
            return i;
        }
    }
    return 1;
}","}
int main() {
    auto candidate = largest_divisor;
    assert(candidate((3)) == (1));
    assert(candidate((7)) == (1));
    assert(candidate((10)) == (5));
    assert(candidate((100)) == (50));
    assert(candidate((49)) == (7));
}
"
HumanEval/25,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་མཐའ་དག་གི་གཞི་གྲངས་ཚུ་ ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ཀྱི་རིམ་པ་ལུ་ལོག་གཏང་། ཆ་ཤས་རེ་རེ་ལུ་ ཆ་ཤས་ཉུང་ཤོས་ནང་ ཚར་ག་དེ་མང་འོང་ག་དང་བསྟུན་པའི་གྱངས་ཁ་འདི་ ཕྱོགས་སྒྲིག་འབད་དགོཔ་ཨིན། ཨང་གྲངས་ནང་ཐོ་བཀོད་འབད་མི་དེ་ ཆ་ཤས་ཆ་ཤས་ཆ་ཤས་ག་ར་གི་གྱངས་ཁ་དང་འདྲན་འདྲ་དགོཔ་ཨིན།
std::vector<long> factorize(long n) {
","std::vector<long> factorize(long n) {
    std::vector<long> factors;
    for (long i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            factors.push_back(i);
            n /= i;
        }
    }
    if (n > 1) {
        factors.push_back(n);
    }
    return factors;
}","}
int main() {
    auto candidate = factorize;
    assert(candidate((2)) == (std::vector<long>({(long)2})));
    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));
    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));
    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));
    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));
    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));
}
"
HumanEval/26,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཊ་ནང་ལས་ ཚར་གཅིག་ལས་ལྷག་སྟེ་ འབྱུང་མི་ཆ་མཉམ་བཏོན་གཏང་། ཨང་གྲངས་ཚུ་ནང་འཇུག་པའི་རིམ་པ་གཅིག་སྦེ་བཞག་། >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4}))) (std::vector<long>({(long)1, (long)3, (long)4}))
std::vector<long> remove_duplicates(std::vector<long> numbers) {
","std::vector<long> remove_duplicates(std::vector<long> numbers) {
    std::unordered_map<long, int> freq;
    for (long num : numbers) {
        freq[num]++;
    }

    std::vector<long> result;
    for (long num : numbers) {
        if (freq[num] == 1) {
            result.push_back(num);
        }
    }

    return result;
}","}
int main() {
    auto candidate = remove_duplicates;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));
}
"
HumanEval/27,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string ཅིག་ལུ་ཡིག་འབྲུ་ཆུང་བ་འདི་ཡིག་འབྲུ་སྦོམ་དང་ ཆུང་བ་འདི་ཡིག་འབྲུ་སྦོམ་སྦེ་བསྒྱུར་གཏང་། >>> flip_case ((((""Hello"")) (""hELLO"")
std::string flip_case(std::string string) {
","std::string flip_case(std::string string) {
    for (char &ch : string) {
        if (std::islower(ch)) {
            ch = std::toupper(ch);
        } else if (std::isupper(ch)) {
            ch = std::tolower(ch);
        }
    }
    return string;
}","}
int main() {
    auto candidate = flip_case;
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hello!"")) == (""hELLO!""));
    assert(candidate((""These violent delights have violent ends"")) == (""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS""));
}
"
HumanEval/28,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string གི་ ཝེ་ཀཊར་ཚུ་ string གཅིག་ལུ་བསྡོམས་ >>> ཝེ་ཀཊར་ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std:string> ཚུ་<std:string> ཚུ་<std:string> ཚུ་<std:> ཚུ་<std:> ཚུ་<std:> ཚུ་>
std::string concatenate(std::vector<std::string> strings) {
","std::string concatenate(std::vector<std::string> strings) {
    std::string result;
    for (const auto& str : strings) {
        result += str;
    }
    return result;
}","}
int main() {
    auto candidate = concatenate;
    assert(candidate((std::vector<std::string>())) == (""""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == (""xyz""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z"", (std::string)""w"", (std::string)""k""}))) == (""xyzwk""));
}
"
HumanEval/29,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ནང་བསྐྱོད་འབད་ཡོད་པའི་ string གི་ vector འདི་ནང་ སྔོན་སྒྲིག་ཅིག་ལས་འགོ་བཙུགས་ཏེ་ འགོ་བཙུགས་མི་ཚུ་རྐྱངམ་ཅིག་སེལ་འཐུ་འབད།. >>> filter_by_prefix((std::vector<std::string>()), (""a"")) (std::vector<std::string>()) >>> filter_by_prefix((std::vector<std::string>({(std::string) ""abc"", (std::string) ""bcd"", (std::string)::""cde"", (stdstring) ""array""})), (""a"") (std::vector<std::string>({(std::string) ""abc"", (std::string) ""array""}))
std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
","std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.rfind(prefix, 0) == 0) {  // Check if 'str' starts with 'prefix'
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_prefix;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
}
"
HumanEval/30,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཝི་ཅཱཊ་ནང་ ནུས་ཅན་ཨང་ཚུ་རྐྱངམ་ཅིག་ལོག་གཏང་། >>> get_positive((std::vector<long>({long)-1, (long) 2, (long)-4, (long) 5, (long) 6}))) (std::vector<long>({long) 2, (long) 5, (long) 6})) >>> get_positive((std::vector<long>({long) 5, (long) 3, (long)-5, (long) 2, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) 10}))) (std::vector<long>{(long) 5, (long) 3, (long) 2, (long) 3, (long) 9, (long) 123, (long) 1}))
std::vector<long> get_positive(std::vector<long> l) {
","std::vector<long> get_positive(std::vector<long> l) {
    std::vector<long> result;
    for (long num : l) {
        if (num > 0) {
            result.push_back(num);
        }
    }
    return result;
}","}
int main() {
    auto candidate = get_positive;
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));
    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/31,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་དེ་ ཨང་གྲངས་ངོ་མ་ཨིན་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། >>> is_prime((6)) (false) >>> is_prime((101)) (true) >>> is_prime((11) (true) >>> is_prime((13441)) (true) >>> is_prime(61)) (true) >>> is_prime(4)) (false) >>> is_prime(1) (false)
bool is_prime(long n) {
","bool is_prime(long n) {
    if (n < 2) return false;
    if (n < 4) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (long i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_prime;
    assert(candidate((6)) == (false));
    assert(candidate((101)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((13441)) == (true));
    assert(candidate((61)) == (true));
    assert(candidate((4)) == (false));
    assert(candidate((1)) == (false));
    assert(candidate((5)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((17)) == (true));
    assert(candidate((85)) == (false));
    assert(candidate((77)) == (false));
    assert(candidate((255379)) == (false));
}
"
HumanEval/33,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་ལས་འགན་འདི་གིས་ ཝི་ཅཊ་ l དང་ ཝི་ཅཊ་ l' འདི་བཟུམ་ཅིག་སྦེ་ལོག་གཏང་ནི་ཨིན་པ་ཅིན་ ཝི་ཅཊ་ l འདི་ ༣ ལུ་ཆ་མི་བཏུབ་པའི་ ཝི་ཅཊ་ཚུ་ནང་དང་གཅིག་མཚུངས་ཨིན་པའི་ཁར་ ཝི་ཅཊ་ l འདི་ ༣ ལུ་ཆ་མི་བཏུབ་པའི་ ཝི་ཅཊ་ཚུ་ནང་ཡོད་པའི་གནས་གོང་ཚུ་ ཝི་ཅཊ་ l གི་གནས་གོང་ཚུ་དང་འདྲན་འདྲ་ཨིན་ དེ་འབདཝ་ད་ དབྱེ་བ་ཕྱེ་ཡོདཔ་ཨིན།
std::vector<long> sort_third(std::vector<long> l) {
","std::vector<long> sort_third(std::vector<long> l) {
    std::vector<long> third_indices;
    for (size_t i = 0; i < l.size(); i += 3) {
        third_indices.push_back(l[i]);
    }
    std::sort(third_indices.begin(), third_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 3) {
        l[i] = third_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_third;
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));
}
"
HumanEval/34,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཝེ་ཀཊར་ནང་དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཁྱད་ཆོས་ཅན་གྱི་ཆ་ཤས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། >>> unique((std::vector<long>({(long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 0, (long) 2, (long) 3, (long) 5, (long) 9, (long) 123}))
std::vector<long> unique(std::vector<long> l) {
","std::vector<long> unique(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    l.erase(std::unique(l.begin(), l.end()), l.end());
    return l;
}","}
int main() {
    auto candidate = unique;
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));
}
"
HumanEval/35,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཝེཀཊར་ནང་ ཚད་ལྡན་ཆ་ཤས་ལོག་གཏང་། >>> max_element((std::vector<long>({long) 1, (long) 2, (long) 3}))) (3) >>> max_element((std::vector<long>({long) 5, (long) 3, (long)-5, (long) 2, (long)-3, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) -10}))) (123)
long max_element(std::vector<long> l) {
","long max_element(std::vector<long> l) {
    return *std::max_element(l.begin(), l.end());
}","}
int main() {
    auto candidate = max_element;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));
}
"
HumanEval/36,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ 7འདི་ 11 དང་ 13 ལུ་ཆ་བགོས་འབད་མི་ ཨང་གྲངས་ཧྲིལ་ཨང་ n ལས་ཆུང་བ་ནང་ལུ་ ཚར་གྲངས་ག་དེམ་ཅིག་ལོག་འོང་ནི་ཨིན་ནའི་གྱངས་ཁ་སླར་ལོག་འབདཝ་ཨིན། >>> fizz_buzz((50)) (0) >>> fizz_buzz((78)) (2) >>> fizz_buzz((79) (3)
long fizz_buzz(long n) {
","long fizz_buzz(long n) {
    long count = 0;
    for (long i = 0; i < n; i++) {
        if (i % 11 == 0 || i % 13 == 0) {
            long temp = i;
            while (temp > 0) {
                if (temp % 10 == 7) count++;
                temp /= 10;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = fizz_buzz;
    assert(candidate((50)) == (0));
    assert(candidate((78)) == (2));
    assert(candidate((79)) == (3));
    assert(candidate((100)) == (3));
    assert(candidate((200)) == (6));
    assert(candidate((4000)) == (192));
    assert(candidate((10000)) == (639));
    assert(candidate((100000)) == (8026));
}
"
HumanEval/37,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་ལས་འགན་འདི་གིས་ ཝེ་ཀཊར་ l དང་ ཝེ་ཀཊར་ l' འདི་སླར་ལོག་འབདཝ་ཨིན། འདི་ཡང་ ཝེ་ཀཊར་ l འདི་ ཌེ་པེརཌི་ཨེན་ཌིསི་ནང་ལུ་ l དང་འདྲ་མཉམ་སྦེ་ཡོདཔ་དང་ ཝེ་ཀཊར་ l འདི་ ཌེ་པེརཌི་ཨེན་ཌིསི་ནང་ལུ་ ཝེ་ཀཊར་ l གི་གནས་གོང་ཚུ་ འདྲན་འདྲ་སྦེ་ཡོད་རུང་ དབྱེ་བ་ཕྱེ་ཡོདཔ་ཨིན།
std::vector<long> sort_even(std::vector<long> l) {
","std::vector<long> sort_even(std::vector<long> l) {
    std::vector<long> even_indices;
    for (size_t i = 0; i < l.size(); i += 2) {
        even_indices.push_back(l[i]);
    }
    std::sort(even_indices.begin(), even_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 2) {
        l[i] = even_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_even;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));
}
"
HumanEval/39,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// prime_fib གིས་ ཨང་གྲངས་ n-th སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་དེ་ Fibonacci གྱི་ཨང་གྲངས་ཅིག་ཨིནམ་དང་ ཨང་གྲངས་དེ་ཡང་ ཨང་གྲངས་ཨང་དང་པ་ཨིན། >>> prime_fib((1)) (2) >>> prime_fib(2)) (3) >>> prime_fib(3)) (5) >>> prime_fib(4)) (13) >>> prime_fib(5) (89)
long prime_fib(long n) {
","bool is_prime(long num) {
    if (num < 2) return false;
    if (num < 4) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (long i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

long prime_fib(long n) {
    std::vector<long> prime_fibs;
    long a = 1, b = 1;
    while (prime_fibs.size() < n) {
        long next = a + b;
        a = b;
        b = next;
        if (is_prime(next)) {
            prime_fibs.push_back(next);
        }
    }
    return prime_fibs[n - 1];
}","}
int main() {
    auto candidate = prime_fib;
    assert(candidate((1)) == (2));
    assert(candidate((2)) == (3));
    assert(candidate((3)) == (5));
    assert(candidate((4)) == (13));
    assert(candidate((5)) == (89));
    assert(candidate((6)) == (233));
    assert(candidate((7)) == (1597));
    assert(candidate((8)) == (28657));
    assert(candidate((9)) == (514229));
    assert(candidate((10)) == (433494437));
}
"
HumanEval/40,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// triples_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཊ་ཅིག་ཨེབ་གཏང་འབདཝ་ཨིན་ དེ་གིས་ ཆ་མཉམ་འདི་ ༠ ལུ་བསྡོམས་ཏེ་ཡོད་པའི་ཁྱད་པར་ཅན་ཡན་ལག་གསུམ་ཡོད་པ་ཅིན་བདེན་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། >>> triples_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> triples_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 2, (long) 1} >>> (true) triples_sum_to_zero(std::vector<long>(({long) 1, (long) 2, (long) 3, (long) 7}))) (se) >>> triples_to_zero_(std::vector<long>{long) 2, (long) 4, (long) 5, (long) 3, (long) 9, (long) 7))) (true) >>> triples_sum_to_zero_long))) (long) >>> (long_long)
bool triples_sum_to_zero(std::vector<long> l) {
","bool triples_sum_to_zero(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    for (size_t i = 0; i < n - 2; i++) {
        size_t left = i + 1, right = n - 1;
        while (left < right) {
            long sum = l[i] + l[left] + l[right];
            if (sum == 0) return true;
            else if (sum < 0) left++;
            else right--;
        }
    }
    
    return false;
}","}
int main() {
    auto candidate = triples_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));
    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));
}
"
HumanEval/41,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཐད་ཀར་དུ་ཕྲང་ཡོད་པའི་མཐའ་མེད་པའི་ཐིག་ཁྲམ་ཅིག་ཡོད་པའི་ལམ་འདི་ ཧ་གོ་དགོ། སྣུམ་འཁོར་ n གིས་གཡོན་ལས་གཡས་ཁ་ཐུག་ལུ་འགྱོ་དོ་ཡོདཔ་དང་ དེ་བསྒང་ སྣུམ་འཁོར་ n གི་སྡེ་ཚན་གཞན་ཅིག་གིས་གཡས་ལས་གཡོན་ཁ་ཐུག་ལུ་འགྱོ་དོ་ཡོདཔ་ཨིན། སྣུམ་འཁོར་སྡེ་ཚན་གཉིས་འདི་ གཅིག་ལས་ཐག་རིང་ས་ཅིག་ལས་ འགོ་བཙུགས་ཏེ་ སྣུམ་འཁོར་ཆ་མཉམ་རང་ མགྱོགས་ཚད་གཅིག་སྦེ་འགྱོ་དོ་ཡོདཔ་ཨིན། སྣུམ་འཁོར་གཉིས་ཅིག་གིས་ ཐད་ཀར་དུ་ཕྲང་ཡོད་པའི་ལམ་འདི་ གཡས་ལས་གཡོན་ཁ་ཐུག་ལུ་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་གིས་ གཡས་ལས་གཡོན་ཁ་ཐུག་ལུ་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་ལུ་ཕོག་པའི་སྐབས་ སྣུམ་འཁོར་གཉིས་ཅིག་ ཐུག་དོ་ཡོདཔ་སྦེ་སླབ་ཨིན། ཨིན་རུང་ སྣུམ་འཁོར་ཚུ་ཚད་མེད་བརྟན་ཏོག་ཏོ་དང་སྒྲིང་སྒྲི་ཨིནམ་ལས་ དེ་གིས་ སྣུམ་འཁོར་ཚུ་ ཐུག་མ་མྱོང་དོ་བཟུམ་སྦེ་རང་ སྣུམ་འཁོར་གྱི་ལམ་བདའ་སྟེ་འགྱོ་དོ་ཡོདཔ་ཨིན། འ་ནི་ལས་འགན་གིས་ འདི་བཟུམ་མའི་ ཐུག་རྐྱེན་གྱི་གྱངས་ཁ་འདི་བཏོན་ཡོདཔ་ཨིན།
long car_race_collision(long n) {
","long car_race_collision(long n) {
    return n * n;
}","}
int main() {
    auto candidate = car_race_collision;
    assert(candidate((2)) == (4));
    assert(candidate((3)) == (9));
    assert(candidate((4)) == (16));
    assert(candidate((8)) == (64));
    assert(candidate((10)) == (100));
}
"
HumanEval/42,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཝེ་ཀཊར་འདི་སླར་ལོག་འབདཝ་ཨིན། དབྱེ་བ་ཚུ་ ༡ ལུ་ཡར་སེང་འབད་ཡོདཔ་ཨིན། >>> incr_list((std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<long>({long) 2, (long) 3, (long) 4})) >>> incr_list((std::vector<long>({long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>({long) 6, (long) 4, (long) 6, (long) 3, (long) 4, (long) 4, (long) 10, (long) 1, (long) 124}))
std::vector<long> incr_list(std::vector<long> l) {
","std::vector<long> incr_list(std::vector<long> l) {
    for (long &num : l) {
        num++;
    }
    return l;
}","}
int main() {
    auto candidate = incr_list;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));
    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));
}
"
HumanEval/43,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// pairs_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཱཊ་ཅིག་ཨེབ་གཏང་འབདཝ་ཨིན་ དེ་གིས་ ཆ་མཉམ་འདི་ ༠ ལུ་བསྡོམས་ཏེ་ཡོད་པའི་ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གཉིས་ཡོད་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ false སླར་ལོག་འབདཝ་ཨིན། >>> pairs_sum_to_zero (_) std::vector<long> (_) long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> pairs_sum_to_zero (_) std::vector<long> (_) long) 1, (long) 3, (long) 2, (long) 1} >>> (false) pairs_sum_to_zero (_) std::vector<long> (_) 1, (long) 2, (long) 3, (long) 7}))) (false) >>> pairs_sum_to_zero (_) std::vector<long> (_) 2 (long) 4, (long) 5, (long) 3, (long) 5, (long) 7))) (true) >>> pairs_sum_to_zero (_) std:long_long))) (long_long) >>> (long_long_vector) >>>
bool pairs_sum_to_zero(std::vector<long> l) {
","bool pairs_sum_to_zero(std::vector<long> l) {
    std::unordered_set<long> seen;
    for (long num : l) {
        if (seen.count(-num)) {
            return true;
        }
        seen.insert(num);
    }
    return false;
}","}
int main() {
    auto candidate = pairs_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));
}
"
HumanEval/44,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ནང་བསྐྱོད་ཨང་གྲངས་ x གི་ཨང་གྲངས་གཞི་རྟེན་གཞི་རྟེན་ལུ་བསྒྱུར་བཅོས་འབདཝ་ཨིན། བསྒྱུར་བཅོས་འབད་བའི་ཤུལ་ལས་ string ངོ་ཚབ་ལོག་འབདཝ་ཨིན། གཞི་རྟེན་ཨང་གྲངས་ཚུ་ ༡༠ ལས་ཉུང་ཨིན། >>> change_base((8), (3)) (""22"") >>> change_base(8), (2)) (""1000"") >>> change_base((7), (2)) (""111"")
std::string change_base(long x, long base) {
","std::string change_base(long x, long base) {
    if (x == 0) return ""0"";
    
    std::string result;
    while (x > 0) {
        result += std::to_string(x % base);
        x /= base;
    }
    
    std::reverse(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = change_base;
    assert(candidate((8), (3)) == (""22""));
    assert(candidate((9), (3)) == (""100""));
    assert(candidate((234), (2)) == (""11101010""));
    assert(candidate((16), (2)) == (""10000""));
    assert(candidate((8), (2)) == (""1000""));
    assert(candidate((7), (2)) == (""111""));
    assert(candidate((2), (3)) == (""2""));
    assert(candidate((3), (4)) == (""3""));
    assert(candidate((4), (5)) == (""4""));
    assert(candidate((5), (6)) == (""5""));
    assert(candidate((6), (7)) == (""6""));
    assert(candidate((7), (8)) == (""7""));
}
"
HumanEval/45,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གཡོན་དང་མཐོ་ཚད་ལོག་འོང་སའི་ས་སྒོ་འདི་གསུམ་ཟུར་ཅིག་ལུ་བྱིན་ཏེ་ཡོདཔ་ཨིན། >>> triangle_area((5), (3)) (7.5f)
float triangle_area(long a, long h) {
","float triangle_area(long a, long h) {
    return 0.5f * a * h;
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((5), (3)) == (7.5f));
    assert(candidate((2), (2)) == (2.0f));
    assert(candidate((10), (8)) == (40.0f));
}
"
HumanEval/46,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Fib4 གི་ཨང་རིམ་དེ་ Fibbonacci གི་རིམ་པ་བཟུམ་ཅིག་ཨིནམ་ད་ འདི་ཚུ་ནང་ འོག་གི་དོན་ཚན་ཚུ་བཀོད་དེ་འདུག fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 གི་ཨང་རིམ་གྱི་ཆ་ཤས་ཨང་གྲངས་ n པ་རྩིས་སྟོན་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་འབྲི་གནང་། ལོག་ལོག་རྩིས་སྟོན་མ་ལག་ལེན་འཐབ་། >>> fib4((5)) (4) >>> fib4(6)) (8) >>> fib4(7)) (14)
long fib4(long n) {
","long fib4(long n) {
    if (n == 0 || n == 1 || n == 3) return 0;
    if (n == 2) return 2;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 2;

    for (long i = 4; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fib4;
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (28));
    assert(candidate((10)) == (104));
    assert(candidate((12)) == (386));
}
"
HumanEval/47,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཝེ་ཀཊར་ l ནང་གི་ཆ་ཤས་ཚུ་གི་བར་མཚམས་སླར་ལོག་འབདཝ་ཨིན། >>> ཝེ་ཀཊར་ (long) 3, (long) 1, (long) 2, (long) 4, (long) 5))) (float) >>> ཝེ་ཀཊར་ (long) -10, (long) 4, (long) 6, (long) 1000, (long) 10, (long) 20))) (15.0f)
float median(std::vector<long> l) {
","float median(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    if (n % 2 == 1) {
        return static_cast<float>(l[n / 2]);
    } else {
        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;
    }
}","}
int main() {
    auto candidate = median;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));
    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));
    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));
    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));
    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));
}
"
HumanEval/48,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string འདི་ palindrome ཨིན་ན་བརྟག་དཔྱད་འབདཝ་ཨིན། >>> is_palindrome ((("""")) (true) >>> is_palindrome (((""aba"")) (true) >>> is_palindrome (((""aaaaa"")) (true) >>> is_palindrome (((""zbcd"")) (false)
bool is_palindrome(std::string text) {
","bool is_palindrome(std::string text) {
    return std::equal(text.begin(), text.begin() + text.size() / 2, text.rbegin());
}","}
int main() {
    auto candidate = is_palindrome;
    assert(candidate(("""")) == (true));
    assert(candidate((""aba"")) == (true));
    assert(candidate((""aaaaa"")) == (true));
    assert(candidate((""zbcd"")) == (false));
    assert(candidate((""xywyx"")) == (true));
    assert(candidate((""xywyz"")) == (false));
    assert(candidate((""xywzx"")) == (false));
}
"
HumanEval/49,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// བསྒྱུར་བཅོས་ ༢^n modulo p (ཨང་གྲངས་ཚུ་ཤེས་དགོ) ། >>> modp(((3), (5)) (3) >>> modp((1101), (101)) (2) >>> modp((0), (101)) (1) >>> modp((3), (11)) (8) >>> modp((100), (101)) (1)
long modp(long n, long p) {
","long modp(long n, long p) {
    return std::pow(2, n) % p;
}","}
int main() {
    auto candidate = modp;
    assert(candidate((3), (5)) == (3));
    assert(candidate((1101), (101)) == (2));
    assert(candidate((0), (101)) == (1));
    assert(candidate((3), (11)) == (8));
    assert(candidate((100), (101)) == (1));
    assert(candidate((30), (5)) == (4));
    assert(candidate((31), (5)) == (3));
}
"
HumanEval/51,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// remove_vowels འདི་ལས་ string དང་ vowels ཚུ་མེད་པར་ string སླར་ལོག་འབདཝ་ཨིན། >>> remove_vowels(("""")) ("""") >>> remove_vowels((""abcdef"")) (""bcdf"") >>> remove_vowels((""aaaaa"")) ("""") >>> remove_vowels(""aaBAA"")) (""B"") >>> remove_vowels((""zbcd"")) (""zbcd"")
std::string remove_vowels(std::string text) {
","std::string remove_vowels(std::string text) {
    std::string result;
    std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
    
    for (char ch : text) {
        if (vowels.find(ch) == vowels.end()) {
            result += ch;
        }
    }
    
    return result;
}","}
int main() {
    auto candidate = remove_vowels;
    assert(candidate(("""")) == (""""));
    assert(candidate((""abcdef\nghijklm"")) == (""bcdf\nghjklm""));
    assert(candidate((""fedcba"")) == (""fdcb""));
    assert(candidate((""eeeee"")) == (""""));
    assert(candidate((""acBAA"")) == (""cB""));
    assert(candidate((""EcBOO"")) == (""cB""));
    assert(candidate((""ybcd"")) == (""ybcd""));
}
"
HumanEval/52,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཝེ་ཀཊར་ l ནང་གི་ཨང་གྲངས་ཚུ་ ཆ་ཚད་ t གི་འོག་ལུ་ཡོད་པ་ཅིན་བདེན་པ་སླར་ལོག་འབདཝ་ཨིན། >>> below_threshold((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 10})), (100)) (true) >>> below_threshold((std::vector<long>({(long) 1, (long) 20, (long) 4, (long) 10})), (5)) (false)
bool below_threshold(std::vector<long> l, long t) {
","bool below_threshold(std::vector<long> l, long t) {
    return std::all_of(l.begin(), l.end(), [t](long num) { return num < t; });
}","}
int main() {
    auto candidate = below_threshold;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));
}
"
HumanEval/53,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ x དང་ y གཉིས་བསྡོམས་དེ་
long add(long x, long y) {
","long add(long x, long y) {
    return x + y;
}","}
int main() {
    auto candidate = add;
    assert(candidate((0), (1)) == (1));
    assert(candidate((1), (0)) == (1));
    assert(candidate((2), (3)) == (5));
    assert(candidate((5), (7)) == (12));
    assert(candidate((7), (5)) == (12));
}
"
HumanEval/54,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཚིག་གཉིས་ལུ་ཡིག་འབྲུ་འདྲ་མཉམ་ཡོད་མེད་བརྟག་དཔྱད་འབད། >>> same_chars((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) (true) >>> same_chars((""abcd""), (""dddddddabc"")) (true) >>> same_chars(""dddddddabc""), (""abcd"") (true) >>> same_chars((""eabcd""), (""dddddddabc"")) (false) >>> same_chars >>>""(abcd""), (""dddddddddabce"") (false) >>> same_chars((""eabcd""), (""ddddzzzzzdzzdddabc"") (false)
bool same_chars(std::string s0, std::string s1) {
","bool same_chars(std::string s0, std::string s1) {
    std::unordered_set<char> set0(s0.begin(), s0.end());
    std::unordered_set<char> set1(s1.begin(), s1.end());
    return set0 == set1;
}","}
int main() {
    auto candidate = same_chars;
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) == (true));
    assert(candidate((""abcd""), (""dddddddabc"")) == (true));
    assert(candidate((""dddddddabc""), (""abcd"")) == (true));
    assert(candidate((""eabcd""), (""dddddddabc"")) == (false));
    assert(candidate((""abcd""), (""dddddddabcf"")) == (false));
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddddabc"")) == (false));
    assert(candidate((""aabb""), (""aaccc"")) == (false));
}
"
HumanEval/55,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཕི་བཱོན་ནེཤི་ཨང་གྲངས་ nth སླར་ལོག་འབདཝ་ཨིན། >>> fib((10)) (55) >>> fib((1)) (1) >>> fib((8)) (21)
long fib(long n) {
","long fib(long n) {
    if (n <= 1) return n;
    
    long a = 0, b = 1, c;
    for (long i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    
    return b;
}","}
int main() {
    auto candidate = fib;
    assert(candidate((10)) == (55));
    assert(candidate((1)) == (1));
    assert(candidate((8)) == (21));
    assert(candidate((11)) == (89));
    assert(candidate((12)) == (144));
}
"
HumanEval/56,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// brackets འདི་ ""<"" དང་ "">"" འབད་མི་ཐིག་ཁྲམ་ཨིན། སྒོ་སྒྲིག་ནང་ཡོད་པའི་ bracket ཚུ་གུ་ མཇུག་གི་ bracket ཅིག་ཡོད་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། >>> correct_bracketing((""<"")) (false) >>> correct_bracketing(""<>"")) (true) >>> correct_bracketing(""<><>>"")) (true) >>> correct_bracketing("">(<>"") (false)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '<') balance++;
        else if (ch == '>') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""<>"")) == (true));
    assert(candidate((""<<><>>"")) == (true));
    assert(candidate((""<><><<><>><>"")) == (true));
    assert(candidate((""<><><<<><><>><>><<><><<>>>"")) == (true));
    assert(candidate((""<<<><>>>>"")) == (false));
    assert(candidate((""><<>"")) == (false));
    assert(candidate((""<"")) == (false));
    assert(candidate((""<<<<"")) == (false));
    assert(candidate(("">"")) == (false));
    assert(candidate((""<<>"")) == (false));
    assert(candidate((""<><><<><>><>><<>"")) == (false));
    assert(candidate((""<><><<><>><>>><>"")) == (false));
}
"
HumanEval/57,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// return true is vector elements are monotonically increasing or decreasing. >>> monotonic (long) 1, (long) 2, (long) 4, (long) 20))) (true) >>> monotonic (long) 20, (long) 4, (long) 10))) (false) >>> monotonic (long) 4, (long) 1, (long) 0, (long) 10))) (true)
bool monotonic(std::vector<long> l) {
","bool monotonic(std::vector<long> l) {
    bool increasing = true, decreasing = true;
    
    for (size_t i = 1; i < l.size(); i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
    }
    
    return increasing || decreasing;
}","}
int main() {
    auto candidate = monotonic;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));
    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));
}
"
HumanEval/58,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཝེཀཊར་གཉིས་གི་དོན་ལུ་ དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཁྱད་ཆོས་ཅན་གྱི་མཉམ་འབྲེལ་གྱི་ཆ་ཤས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝ
std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
","std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
    std::unordered_set<long> set1(l1.begin(), l1.end());
    std::unordered_set<long> result_set;
    
    for (long num : l2) {
        if (set1.count(num)) {
            result_set.insert(num);
        }
    }
    
    std::vector<long> result(result_set.begin(), result_set.end());
    std::sort(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = common;
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/59,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// n གི་གལ་ཆེ་ཤོས་གཞི་གྲངས་སླར་ལོག་འབདཝ་ཨིན། n > 1 དང་གལ་ཆེ་ཤོས་གཞི་གྲངས་མེན་པ་ཅིན་། >>> largest_prime_factor (((13195)) (29) >>> largest_prime_factor (((2048)) (2)
long largest_prime_factor(long n) {
","long largest_prime_factor(long n) {
    long largest = -1;
    
    while (n % 2 == 0) {
        largest = 2;
        n /= 2;
    }
    
    for (long i = 3; i * i <= n; i += 2) {
        while (n % i == 0) {
            largest = i;
            n /= i;
        }
    }
    
    if (n > 1) largest = n;
    
    return largest;
}","}
int main() {
    auto candidate = largest_prime_factor;
    assert(candidate((15)) == (5));
    assert(candidate((27)) == (3));
    assert(candidate((63)) == (7));
    assert(candidate((330)) == (11));
    assert(candidate((13195)) == (29));
}
"
HumanEval/60,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// sum_to_n འདི་ལས་ 1 ལས་ n ཚུན་གྱི་ཨང་གྲངས་ཚུ་བསྡོམས་འབདཝ་ཨིན། >>> sum_to_n((30)) (465) >>> sum_to_n(100)) (5050) >>> sum_to_n((5)) (15) >>> sum_to_n(10)) (55) >>> sum_to_n(1) (1)
long sum_to_n(long n) {
","long sum_to_n(long n) {
    return n * (n + 1) / 2;
}","}
int main() {
    auto candidate = sum_to_n;
    assert(candidate((1)) == (1));
    assert(candidate((6)) == (21));
    assert(candidate((11)) == (66));
    assert(candidate((30)) == (465));
    assert(candidate((100)) == (5050));
}
"
HumanEval/61,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// brackets འདི་ ""("" དང་ """") གི་ཐིག་ཁྲམ་ཨིན། སྒོ་སྒྲིག་འབད་ཡོད་པའི་ bracket ཚུ་ནང་ མཇུག་བསྡུ་ཡོད་པའི་ bracket ཚུ་ཡོད་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། >>> correct_bracketing (((""("")) (false) >>> correct_bracketing (((""())) (true) >>> correct_bracketing (((""(()))) (true) >>> correct_bracketing ((("") ((()) (false)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '(') balance++;
        else if (ch == ')') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""()"")) == (true));
    assert(candidate((""(()())"")) == (true));
    assert(candidate((""()()(()())()"")) == (true));
    assert(candidate((""()()((()()())())(()()(()))"")) == (true));
    assert(candidate((""((()())))"")) == (false));
    assert(candidate(("")(()"")) == (false));
    assert(candidate((""("")) == (false));
    assert(candidate((""(((("")) == (false));
    assert(candidate(("")"")) == (false));
    assert(candidate((""(()"")) == (false));
    assert(candidate((""()()(()())())(()"")) == (false));
    assert(candidate((""()()(()())()))()"")) == (false));
}
"
HumanEval/62,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// xs འདི་ polynomial གི་གནས་གོང་ཚུ་ཨིན། xs[0] + xs[1] * x + xs[2] * x^2 + .... འ་ནི་ polynomial གི་འབྱུང་ཁུངས་འདི་ འ་ནི་རྣམ་པ་ནང་རང་སླར་ལོག་འབདཝ་ཨིན། >>> derivative((std::vector<long>({long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (std::vector<long>{(long) 1, (long) 4, (long) 12, (long) 20})) >>> derivative::std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<(long>{(long) 2, (long) 6}))
std::vector<long> derivative(std::vector<long> xs) {
","std::vector<long> derivative(std::vector<long> xs) {
    std::vector<long> result;
    for (size_t i = 1; i < xs.size(); i++) {
        result.push_back(xs[i] * i);
    }
    return result;
}","}
int main() {
    auto candidate = derivative;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));
    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));
}
"
HumanEval/63,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// FibFib ཨང་རིམ་འདི་ Fibbonacci གི་རིམ་པ་བཟུམ་ཅིག་ཨིན་ འདི་ཡང་ འོག་གི་སྦེ་གསལ་བཀོད་འབདཝ་ཨིན། fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ཨིན་པ་ཅིན་ ཨང་རིམ་གྱི་ n-th གི་ཆ་ཤས་འདི་ ཕྲ་རིང་སྦེ་རྩིས་སྟོན་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་འབྲི་གནང་། >>> fibfib((1)) (0) >>> fib((5)) (4) >>> fib(8)) (24)
long fibfib(long n) {
","long fibfib(long n) {
    if (n == 0 || n == 1) return 0;
    if (n == 2) return 1;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 1;

    for (long i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fibfib;
    assert(candidate((2)) == (1));
    assert(candidate((1)) == (0));
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (24));
    assert(candidate((10)) == (81));
    assert(candidate((12)) == (274));
    assert(candidate((14)) == (927));
}
"
HumanEval/64,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན།
long vowels_count(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long vowels_count(std::string s) {
  long count = 0;
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  for (char c : s) {
    if (vowels.count(c)) {
      count++;
    }
  }
  if (!s.empty() && (s.back() == 'y' || s.back() == 'Y')) {
    count++;
  }
  return count;
}","}
int main() {
    auto candidate = vowels_count;
    assert(candidate((""abcde"")) == (2));
    assert(candidate((""Alone"")) == (3));
    assert(candidate((""key"")) == (2));
    assert(candidate((""bye"")) == (1));
    assert(candidate((""keY"")) == (2));
    assert(candidate((""bYe"")) == (1));
    assert(candidate((""ACEDY"")) == (3));
}
"
HumanEval/65,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གྱངས་ཁ་ཚུའི་ཨང་གྲངས་ x གི་ཨང་གྲངས་ཚུ་ འཁོར་ལམ་གྱི་ཐོག་ལས་སོར་གཏང་ དེ་ལས་ཨང་གྲངས་ཚུ་གཡས་ཁ་ཐུག་སོར་གཏང་ཞིནམ་ལས་ གྲུབ་འབྲས་དེ་ string སྦེ་ལོག་གཏང་། གལ་སྲིད་ shift > ཨང་གྲངས་ཚུ་ཨིན་པ་ཅིན་ ཨང་གྲངས་ཚུ་ཁ་བསྒྱུར་གཏང་། >>> circular_shift (((12), (1)) (""21"") >>> circular_shift (((12), (2)) (""12"")
std::string circular_shift(long x, long shift) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string circular_shift(long x, long shift) {
  std::string s = std::to_string(x);
  long n = s.length();
  if (n == 0) {
    return """";
  }
  shift %= n;
  if (shift < 0) {
    shift += n;
  }
  if (shift == 0) {
    return s;
  }
  if (shift > n) {
    std::reverse(s.begin(), s.end());
    return s;
  }
  std::string shifted_s = s.substr(n - shift) + s.substr(0, n - shift);
  return shifted_s;
}","}
int main() {
    auto candidate = circular_shift;
    assert(candidate((100), (2)) == (""001""));
    assert(candidate((12), (2)) == (""12""));
    assert(candidate((97), (8)) == (""79""));
    assert(candidate((12), (1)) == (""21""));
    assert(candidate((11), (101)) == (""11""));
}
"
HumanEval/66,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ལཱ་འགན་ ཨང་གྲངས་ཐིག་ཁྲམ་ཅིག་ནང་བཙུགས་སྦེ་ལེན་ཏེ་ ཨང་གྲངས་མཐོ་སའི་ཡིག་འབྲུ་ཚུ་རྐྱངམ་ཅིག་བསྡོམས་ཏེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> digitSum(("""")) (0) >>> digitSum((""abAB"")) (131) >>> digitSum(""abcCd"")) (67) >>> digitSum((""helloE"")) (69) >>> digitSum((""woArBld"")) (131) >>> digitSum((""aAXaaaa"") (153)
long digitSum(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long digitSum(std::string s) {
  long sum = 0;
  for (char c : s) {
    if (isupper(c)) {
      sum += static_cast<long>(c);
    }
  }
  return sum;
}","}
int main() {
    auto candidate = digitSum;
    assert(candidate(("""")) == (0));
    assert(candidate((""abAB"")) == (131));
    assert(candidate((""abcCd"")) == (67));
    assert(candidate((""helloE"")) == (69));
    assert(candidate((""woArBld"")) == (131));
    assert(candidate((""aAaaaXa"")) == (153));
    assert(candidate(("" How are yOu?"")) == (151));
    assert(candidate((""You arE Very Smart"")) == (327));
}
"
HumanEval/67,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་ལཱ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཐིག་ཁྲམ་ཅིག་སྦེ་བཙུགསཔ་ཨིན། ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཨེབ་གཏང་འབད་ཨེབ་གཏང་འབད་ཨེབ་གཏང་འབད་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨཨཨཨཨཨེབ་གཏང་ཨཨཨ
long fruit_distribution(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long fruit_distribution(std::string s, long n) {
  long apples = 0;
  long oranges = 0;
  size_t apples_pos = s.find(""apples"");
  if (apples_pos != std::string::npos) {
    size_t start = 0;
    while (!isdigit(s[start])) {
      start++;
    }
    apples = std::stoll(s.substr(start, apples_pos - start));
  }
  size_t oranges_pos = s.find(""oranges"");
  if (oranges_pos != std::string::npos) {
    size_t and_pos = s.find(""and"");
    size_t start = and_pos + 3;
    while (!isdigit(s[start])) {
      start++;
    }
    oranges = std::stoll(s.substr(start, oranges_pos - start));
  }
  return n - apples - oranges;
}","}
int main() {
    auto candidate = fruit_distribution;
    assert(candidate((""5 apples and 6 oranges""), (19)) == (8));
    assert(candidate((""5 apples and 6 oranges""), (21)) == (10));
    assert(candidate((""0 apples and 1 oranges""), (3)) == (2));
    assert(candidate((""1 apples and 0 oranges""), (3)) == (2));
    assert(candidate((""2 apples and 3 oranges""), (100)) == (95));
    assert(candidate((""2 apples and 3 oranges""), (5)) == (0));
    assert(candidate((""1 apples and 100 oranges""), (120)) == (19));
}
"
HumanEval/68,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ ཚད་འཛིན་འབད་ཡོད་པའི་ལྡེ་མིག་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ ཚད་འཛིན་འབད་ཡོད་པའི་ལྡེ་མིག་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ ཚད་འཛིན་འབད་ཡོད་པའི་ལྡེ་མིག་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་བཙུགས།
std::vector<long> pluck(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> pluck(std::vector<long> arr) {
  if (arr.empty()) {
    return {};
  }
  long min_even = -1;
  long min_index = -1;
  for (long i = 0; i < arr.size(); ++i) {
    if (arr[i] % 2 == 0) {
      if (min_even == -1 || arr[i] < min_even) {
        min_even = arr[i];
        min_index = i;
      }
    }
  }
  if (min_even == -1) {
    return {};
  }
  return {min_even, min_index};
}","}
int main() {
    auto candidate = pluck;
    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));
}
"
HumanEval/69,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཀྱི་ ཝི་ཅཊ་མེན་པའི་ཧིང་སྟོང་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཨང་གྲངས་ཆ་མཉམ་ལས་སྦོམ་ཤོས་དེ་ ༠ ལས་སྦོམ་དང་ ཨང་གྲངས་ཆ་མཉམ་གྱི་གནས་གོང་དང་འདྲན་འདྲ་འབད་ཡོད་པའི་ཧིང་སྟོང་དེ་སླར་ལོག་འབད། ཨང་གྲངས་ཆ་མཉམ་གྱི་གནས་གོང་དེ་ ཝི་ཅཊ་ནང་མཐོང་མི་གྱངས་ཁ་དེ་ཨིན། གལ་སྲིད་ གནས་གོང་འདི་མེད་པ་ཅིན་ -༡ སླར་ལོག་འབད། དཔེ་གཞི་: >>> search:{(std::vector<long>{(long) 4, (long) 1, (long) 2, (long) 3, (long) 1}))) (2) >>> search:{(std::vector<(long>1, (long) 2, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4, (long) 4} (3)))) >>> >>> search:{(std::vector<(long>5, (long) 5, (long) 4, (long) 4, (long) 4}-1 (long)))
long search(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long search(std::vector<long> lst) {
  std::map<long, long> counts;
  for (long x : lst) {
    counts[x]++;
  }
  long result = -1;
  for (auto const& [value, count] : counts) {
    if (value > 0 && count >= value) {
      result = std::max(result, value);
    }
  }
  return result;
}","}
int main() {
    auto candidate = search;
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));
    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));
    assert(candidate((std::vector<long>({(long)10}))) == (-1));
    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));
}
"
HumanEval/70,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་མཐའ་དག་གི་ ཝི་ཅཊར་འདི་བྱིན་པ་ཅིན་ ཨང་གྲངས་མཐའ་དག་ཚུ་ ཝང་གི་རིམ་པ་ལས་ལོག་གཏང་འོང་། ཨང་གྲངས་མཐའ་དག་གི་རིམ་པ་འདི་ ཁྱོད་ཀྱིས་ཉུང་མཐའི་གནས་གོང་ལས་འགོ་བཙུགས་ཏེ་ དེ་ལས་ལྷག་ལུས་ཨང་གྲངས་མཐའ་དག་གི་ གནས་གོང་ལས་འགོ་བཙུགས་ཏེ་ དེ་ལས་ཉུང་མཐའི་གནས་གོང་ལས་འགོ་བཙུགས་ཏེ་ཨིན། དཔེར་ན་: >>> strange_sort_list{((((std::vector<long>((((long) 1, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 4, (long) 2, (long) 3})) >>> strange_sort_list<(((std::vector<(long>{(long) 5, (long) 5, (long) 5}))) (std::vector<(long>{(long) 5, (long) 5, (long) 5})) >>> strange_sort_list<(((((((long)) (std::vector<(long))
std::vector<long> strange_sort_list(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> strange_sort_list(std::vector<long> lst) {
  if (lst.empty()) {
    return {};
  }
  std::sort(lst.begin(), lst.end());
  std::vector<long> result;
  long left = 0;
  long right = lst.size() - 1;
  bool take_min = true;
  while (left <= right) {
    if (take_min) {
      result.push_back(lst[left++]);
    } else {
      result.push_back(lst[right--]);
    }
    take_min = !take_min;
  }
  return result;
}","}
int main() {
    auto candidate = strange_sort_list;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));
}
"
HumanEval/71,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཚུ་བྱིན་ཏེ་ ། ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་ས་སྒོ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཨང་བཅུ་ཆ་གཉིས་ལུ་བསྡུ་སྟེ་སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ -1 སླར་ལོག་འབདཝ་ཨིན། ཟུར་གསུམ་གྱི་ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཕྱོགས་གཉིས་ཆ་མཉམ་བསྡོམས་དེ་ ཕྱོགས་གསུམ་པ་ལས་སྦོམ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> triangle_area((3), (4), (5)) (6.0f) >>> triangle_area((1), (2), (10)) (float-1())
float triangle_area(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>
float triangle_area(long a, long b, long c) {
  if (a + b <= c || a + c <= b || b + c <= a) {
    return -1.0f;
  }
  double s = static_cast<double>(a + b + c) / 2.0;
  double area = std::sqrt(s * (s - a) * (s - b) * (s - c));
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << area;
  return std::stof(ss.str());
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((3), (4), (5)) == (6.0f));
    assert(candidate((1), (2), (10)) == (float(-1)));
    assert(candidate((4), (8), (5)) == (8.18f));
    assert(candidate((2), (2), (2)) == (1.73f));
    assert(candidate((1), (2), (3)) == (float(-1)));
    assert(candidate((10), (5), (7)) == (16.25f));
    assert(candidate((2), (6), (3)) == (float(-1)));
    assert(candidate((1), (1), (1)) == (0.43f));
    assert(candidate((2), (2), (10)) == (float(-1)));
}
"
HumanEval/72,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// དངོས་པོ་ q འདི་འཕུར་འགྱོ་བ་ཅིན་ བདེན་པ་སྦེ་ལོག་འོང་པའི་ལས་འགན་ཅིག་འབྲི་ དེ་ལས་གཞན་འདི་རྫུས་མ་སྦེ་ལོག་འོང་ དངོས་པོ་ q འདི་ཚད་ལྡན་ཨིན་པ་ཅིན་ (འདི་ palindromic vector) དང་ འདི་གི་ཆ་ཤས་ཚུ་གི་བསྡོམས་དེ་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་ཆུང་བ་ ཡང་ན་ ཚད་མཐོའི་ནུས་ཤུགས་དང་འདྲན་འདྲ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> will_it_fly((std::vector<long>({long) 1, (long) 2}), (5)) (false) # 1+2 འདི་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་ཆུང་བ་ཨིན་རུང་འདི་ཚད་ལྡན་མེན་པས། >>> will_it_fly((std::vector<long>(long>{long>3, (long) 2, (long) 3}) (1)) (རྫུས་མ་) # འདི་ཚད་ལྡན་ཨིན་རུང་ 3+2+3 འདི་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་མང་བ་ཨིན། >>> will_it_fly(std::vector<long>{(long>3, (long) 2, (long) 3} (9) (true) # 3+2 འདི་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་ཆུང་བ་ཨིན་རུང་འདི་ཚད་ལྡན་མེན་པས། དེ་ལས་ (5) (true) # 3+3 འདི་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་ཆུང་བ་ཨིན་རུང་འདི་ཚད་ལྡན་མེན་པས། >>> will_long_vector (long) དང་ (5) (true)
bool will_it_fly(std::vector<long> q, long w) {
","#include<assert.h>
#include<bits/stdc++.h>
bool will_it_fly(std::vector<long> q, long w) {
  std::vector<long> reversed_q = q;
  std::reverse(reversed_q.begin(), reversed_q.end());
  if (q != reversed_q) {
    return false;
  }
  long sum = 0;
  for (long val : q) {
    sum += val;
  }
  return sum <= w;
}","}
int main() {
    auto candidate = will_it_fly;
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));
    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));
}
"
HumanEval/73,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཝེཀཊར་ཨར་ཨར་ ཨེན་ཇི་ཇི་ཚུ་བྱིན་པ་ཅིན་ ཝེཀཊར་དེ་ ཚད་ལྡན་བཟོ་ནིའི་དོན་ལུ་ བསྒྱུར་བཅོས་འབད་དགོཔ་ཨིན་པའི་ ཨེ་རེ་ཉུང་ཤོས་དེ་འཚོལ་དགོ། ཚད་ལྡན་ ཝེཀཊར་འདི་ ཝེཀཊར་ཅིག་ཨིན་པའི་ཁར་ བསྒྱུར་བཅོས་དེ་ ཕྱོགས་གཅིག་ལས་ཚུར་དང་ ཕྱོགས་གཞན་ལུ་ བསྒྱུར་བཅོས་འབདཝ་ཨིན། དཔེར་ན་: >>> smallest_change(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 5, (long) 4, (long) 7, (long) 9, (long) 6}))) (4) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 2} (1) >>> smallest_change(std::vector<long>{long) 1, (long) 2, (long) 3, (long) 1, (long) (0))))
long smallest_change(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long smallest_change(std::vector<long> arr) {
  long n = arr.size();
  long changes = 0;
  for (long i = 0; i < n / 2; ++i) {
    if (arr[i] != arr[n - 1 - i]) {
      changes++;
    }
  }
  return changes;
}","}
int main() {
    auto candidate = smallest_change;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
}
"
HumanEval/74,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཕྲ་རིང་གི་ཕྲ་རིང་གཉིས་ཆ་ར་ལུ་ ཕྲ་རིང་གི་གྱངས་ཁ་ཉུང་སུ་སྦེ་ཡོད་མི་འདི་སླར་ལོག་འབདཝ་ཨིན། ཕྲ་རིང་གཉིས་ཆ་ར་ལུ་ ཕྲ་རིང་གི་གྱངས་ཁ་ཉུང་སུ་ཅིག་ཡོད་པ་ཅིན་ ཕྲ་རིང་དང་པ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་ >>> total_match (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_ (_) vector (_) vector (_) vector (_ (_) vector (_) (_) (_ (_) (_) (_) (_ (_) (_) (_) (_) (_ (_) (_) (_) (_) (_) (_) (_) (_ (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_""
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
  long count1 = 0;
  for (const std::string& s : lst1) {
    count1 += s.length();
  }
  long count2 = 0;
  for (const std::string& s : lst2) {
    count2 += s.length();
  }
  if (count1 <= count2) {
    return lst1;
  } else {
    return lst2;
  }
}","}
int main() {
    auto candidate = total_match;
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi"", (std::string)""admin"", (std::string)""project""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>({(std::string)""4""})), (std::vector<std::string>({(std::string)""1"", (std::string)""2"", (std::string)""3"", (std::string)""4"", (std::string)""5""}))) == (std::vector<std::string>({(std::string)""4""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hii""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)""this""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""this""})), (std::vector<std::string>())) == (std::vector<std::string>()));
}
"
HumanEval/75,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་འདི་ ཨང་གྲངས་ངོ་མ་༣ གྱི་གྱངས་ཁ་དང་ ཨང་གྲངས་གཞན་ཚུ་ཤོམ་པ་ཅིན་ ཨིན་པའི་འགན་ཡིག་ཅིག་འབྲི་དགོ། (a) འདི་ ༡༠༠ ལས་ཉུང་ཨིནམ་ཤེས་པ་ཅིན་ དཔེར་ན་: >>> is_multiply_prime((30)) (true) 30 = 2 * 3 * 5
bool is_multiply_prime(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_multiply_prime(long a) {
  if (a <= 0) {
    return false;
  }
  std::vector<int> primes;
  std::vector<bool> is_prime(100, true);
  is_prime[0] = is_prime[1] = false;
  for (int p = 2; p * p < 100; p++) {
    if (is_prime[p]) {
      for (int i = p * p; i < 100; i += p)
        is_prime[i] = false;
    }
  }
  for (int p = 2; p < 100; p++) {
    if (is_prime[p]) {
      primes.push_back(p);
    }
  }
  int count = 0;
  for (int p1 : primes) {
    if (a % p1 == 0) {
      count++;
      int rem = a / p1;
      for (int p2 : primes) {
        if (rem % p2 == 0) {
          count++;
          int rem2 = rem / p2;
          for (int p3 : primes) {
            if (rem2 == p3) {
              count++;
              if (count == 3) {
                return true;
              }
              count--;
            }
          }
          count--;
        }
      }
      count--;
    }
  }
  return false;
}","}
int main() {
    auto candidate = is_multiply_prime;
    assert(candidate((5)) == (false));
    assert(candidate((30)) == (true));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (false));
    assert(candidate((125)) == (true));
    assert(candidate((105)) == (true));
    assert(candidate((126)) == (false));
    assert(candidate((729)) == (false));
    assert(candidate((891)) == (false));
    assert(candidate((1001)) == (true));
}
"
HumanEval/76,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱི་ལཱ་འདི་ གྲངས་སུ་ཅིག་ x འདི་ n གི་དབང་ཤུགས་ཅིག་ཨིན་པ་ཅིན་ true དང་ གཞན་གནས་སྟངས་གཞན་ནང་ལུ་ false སླར་ལོག་འབད་ནིའི་འགན་ཁུར་འདི་ཨིན། x འདི་ n གི་དབང་ཤུགས་ཅིག་ཨིན་པ་ཅིན་ n**int=x དཔེར་ན་: >>> is_simple_power((1), (4)) (true) >>> is_simple_power(2), (2)) (true) >>> is_simple_power(8), (2)) (true) >>> is_simple_power(3), (2)) (false) >>> is_simple_power(3), (1)) (false) >>> is_simple_power(5), (3)) (false)
bool is_simple_power(long x, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_simple_power(long x, long n) {
  if (x == n) return true;
  if (n == 1) return x == 1;
  if (n == 0) return x == 0;
  if (x == 0) return false;
  if (x == 1) return true;
  long power = n;
  while (power < x) {
    if (x % n != 0) return false;
    if (power > x / n) return false;
    power *= n;
  }
  return power == x;
}","}
int main() {
    auto candidate = is_simple_power;
    assert(candidate((16), (2)) == (true));
    assert(candidate((143214), (16)) == (false));
    assert(candidate((4), (2)) == (true));
    assert(candidate((9), (3)) == (true));
    assert(candidate((16), (4)) == (true));
    assert(candidate((24), (2)) == (false));
    assert(candidate((128), (4)) == (false));
    assert(candidate((12), (6)) == (false));
    assert(candidate((1), (1)) == (true));
    assert(candidate((1), (12)) == (true));
}
"
HumanEval/77,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་ཨང་ a དང་ སླར་ལོག་འབད་ཡོད་པའི་གནས་གོང་དེ་ ཨིན་པ་ཅིན་ གནས་གོང་ཧྲིལ་ཨང་ a འདི་ཡང་ ཨིན་པ་ཅིན་ གནས་གོང་ཧྲིལ་ཨང་ a གི་ ཀུ་བིཀ་ཅིག་སྦེ་འཐོན་འོང་། དཔེར་ན་: >>> iscube (((1)) (true) >>> iscube (((2)) (false) >>> iscube (((-1)) (true) >>> iscube (((64)) (true) >>> iscube (((0)) (true) >>> iscube (((180)) (false)
bool iscube(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool iscube(long a) {
  if (a == 0) return true;
  long abs_a = std::abs(a);
  long root = round(std::cbrt(abs_a));
  return root * root * root == abs_a;
}","}
int main() {
    auto candidate = iscube;
    assert(candidate((1)) == (true));
    assert(candidate((2)) == (false));
    assert(candidate((-1)) == (true));
    assert(candidate((64)) == (true));
    assert(candidate((180)) == (false));
    assert(candidate((1000)) == (true));
    assert(candidate((0)) == (true));
    assert(candidate((1729)) == (false));
}
"
HumanEval/78,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་ ཀེར་ཐིག་སྦེ་ལེན་ཏེ་ ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་རྩིས་སྟོན་འབད་ནིའི་འགན་ཁུར་ཐོབ་ཡོདཔ་ཨིན། (ཀེར་ཐིག་ཨང་གྲངས་འདི་ ༡ ལས་སྦོམ་པའི་རང་བྱུང་ཨང་གྲངས་ཅིག་ཨིན་ དེ་ ཆུང་ཤོས་ཨང་གྲངས་གཉིས་ལས་ཐོན་མི་གྲངས་ཨིན།) ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་ ༠, ༡, ༢, ༣, ༤, ༥, ༦, ༧, ༨, ༩, A, B, C, D, E, F ཨིན་པས། ཀེར་ཐིག་ཨང་གྲངས་ཚུ་ ༢, ༣, ༥, ༧, ༡༡, ༡༣, ༡༧,... ཨིན་པས། ཁྱོད་ཀྱིས་ འོག་གི་ཨང་གྲངས་ཚུ་ངེས་འཛིན་འབད་དགོཔ་ཨིན། ༢, ༣, ༥, ༧, B (=ཀེར་ཐིག་ ༡༡), D (=ཀེར་ཐིག་ ༡༣) ། དྲན་གསོ། ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་གཏན་འཇགས་ ཡང་ན་ སྟོངམ་ཨིནམ་སྦེ་བཟོཝ་ཨིན། དེ་ལས་ བརྡ་མཚན་ A,B,C,D,E,F འདི་ཨ་རྟག་ར་ཡིག་འབྲུ་སྦོམ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> hex_((AB""key"") (1) >>> hex_(((10"") >>> hex_(77"") (2) hex_(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
long hex_key(std::string num) {
","#include<assert.h>
#include<bits/stdc++.h>
long hex_key(std::string num) {
  long count = 0;
  std::unordered_set<char> prime_hex = {'2', '3', '5', '7', 'B', 'D'};
  for (char c : num) {
    if (prime_hex.count(c)) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = hex_key;
    assert(candidate((""AB"")) == (1));
    assert(candidate((""1077E"")) == (2));
    assert(candidate((""ABED1A33"")) == (4));
    assert(candidate((""2020"")) == (2));
    assert(candidate((""123456789ABCDEF0"")) == (6));
    assert(candidate((""112233445566778899AABBCCDDEEFF00"")) == (12));
}
"
HumanEval/79,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་ ཨང་གྲངས་བཅུ་པའི་ཐོག་ལས་བཟོ་སྟེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་ གཉིས་ལྡན་གྱི་ཐོག་ལས་བཟོ་དགོ། ལས་འགན་འདི་གིས་ ཀེར་ཐིག་གཅིག་སླར་ལོག་འབད་དགོཔ་ཨིན་ ཀེར་ཐིག་རེ་རེ་གིས་ གཉིས་ལྡན་གྱི་ཨང་གྲངས་ངོ་ཚབ་འབདཝ་ཨིན། ཀེར་ཐིག་རེ་རེ་ནང་ ཀེར་ཐིག་རེ་རེ་འདི་ ༠ ཡང་ན་ ༡ ཨིན། ཀེར་ཐིག་གི་འགོ་དང་མཇུག་ལུ་ ཀེར་ཐིག་གཉིས་ཆ་ར་ 'db' སྦེ་འོང་། ཀེར་ཐིག་གཉིས་ཆ་ར་ལུ་ ཀེར་ཐིག་བཟོ་རྣམ་ལུ་ཕན་ཐོགས་ཡོདཔ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> decimal_to_binary (((15)) (""db1111db"") >>> decimal_to_binary (((32)) (""db100000db"")
std::string decimal_to_binary(long decimal) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string decimal_to_binary(long decimal) {
  if (decimal == 0) {
    return ""db0db"";
  }
  std::string binaryString = """";
  long temp = std::abs(decimal);
  while (temp > 0) {
    binaryString = (temp % 2 == 0 ? ""0"" : ""1"") + binaryString;
    temp /= 2;
  }
  return ""db"" + binaryString + ""db"";
}","}
int main() {
    auto candidate = decimal_to_binary;
    assert(candidate((0)) == (""db0db""));
    assert(candidate((32)) == (""db100000db""));
    assert(candidate((103)) == (""db1100111db""));
    assert(candidate((15)) == (""db1111db""));
}
"
HumanEval/80,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ string sཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ stringའདི་ happcppཨིན་ན་མེན་ན་བརྟག་དཔྱད་འབད་དགོ འདི་ཡང་ stringའདི་ ཡུན་རིང་དེ་ ༣ དང་ཤུལ་མམ་གྱི་ཡིག་འབྲུ་ ༣ པོ་ཆ་ར་སོ་སོ་སྦེ་ཡོད་པ་ཅིན་དེ་དེ་ hapcppཨིན། དཔེར་ན་: >>> is_happy(""a"")) (false) >>> is_happy(""aa"")) (false) >>> is_happy(""abcd"")) (true) >>> is_happy(""aabb"")) (false) >>> is_happy""adb"")) (true) >>> is_happy""xyy"") (false)
bool is_happy(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_happy(std::string s) {
  if (s.length() < 3) {
    return false;
  }
  for (size_t i = 0; i <= s.length() - 3; ++i) {
    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_happy;
    assert(candidate((""a"")) == (false));
    assert(candidate((""aa"")) == (false));
    assert(candidate((""abcd"")) == (true));
    assert(candidate((""aabb"")) == (false));
    assert(candidate((""adb"")) == (true));
    assert(candidate((""xyy"")) == (false));
    assert(candidate((""iopaxpoi"")) == (true));
    assert(candidate((""iopaxioi"")) == (false));
}
"
HumanEval/81,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// སློབ་རིམ་མཇུག་གི་ བདུན་ཕྲག་འདི་ཨིནམ་ལས་ སློབ་དཔོན་གྱིས་ སློབ་ཕྲུག་ཚུ་ལུ་ ཨང་བཏགས་དགོ་པའི་སྐབས་ སློབ་དཔོན་གྱིས་ ཨང་བཏགས་ནིའི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་པའི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཨང་བཏགས་
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
  std::vector<std::string> letter_grades;
  for (float gpa : grades) {
    if (gpa == 4.0f) {
      letter_grades.push_back(""A+"");
    } else if (gpa > 3.7f) {
      letter_grades.push_back(""A"");
    } else if (gpa > 3.3f) {
      letter_grades.push_back(""A-"");
    } else if (gpa > 3.0f) {
      letter_grades.push_back(""B+"");
    } else if (gpa > 2.7f) {
      letter_grades.push_back(""B"");
    } else if (gpa > 2.3f) {
      letter_grades.push_back(""B-"");
    } else if (gpa > 2.0f) {
      letter_grades.push_back(""C+"");
    } else if (gpa > 1.7f) {
      letter_grades.push_back(""C"");
    } else if (gpa > 1.3f) {
      letter_grades.push_back(""C-"");
    } else if (gpa > 1.0f) {
      letter_grades.push_back(""D+"");
    } else if (gpa > 0.7f) {
      letter_grades.push_back(""D"");
    } else if (gpa > 0.0f) {
      letter_grades.push_back(""D-"");
    } else {
      letter_grades.push_back(""E"");
    }
  }
  return letter_grades;
}","}
int main() {
    auto candidate = numerical_letter_grade;
    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)""A+"", (std::string)""B"", (std::string)""C-"", (std::string)""C"", (std::string)""A-""})));
    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)""D+""})));
    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)""D-""})));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)""E""})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)""D"", (std::string)""D-"", (std::string)""C-"", (std::string)""B"", (std::string)""B+""})));
    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)""E"", (std::string)""D-""})));
}
"
HumanEval/82,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string དང་ string གི་རིང་ཚད་དེ་ prime number ཡང་ན་ false ཅིག་ཨིན་པ་ཅིན་ true སླར་ལོག་འབད་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོ། དཔེ་འབད་བ་ཅིན་ >>> prime_length (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_ (_) (_) (_) (_) (_ (_) (_) (_ (_) (_) (_) (_ (_)
bool prime_length(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(int n) {
  if (n <= 1) return false;
  for (int i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

bool prime_length(std::string string) {
  return is_prime(string.length());
}","}
int main() {
    auto candidate = prime_length;
    assert(candidate((""Hello"")) == (true));
    assert(candidate((""abcdcba"")) == (true));
    assert(candidate((""kittens"")) == (true));
    assert(candidate((""orange"")) == (false));
    assert(candidate((""wow"")) == (true));
    assert(candidate((""world"")) == (true));
    assert(candidate((""MadaM"")) == (true));
    assert(candidate((""Wow"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""HI"")) == (true));
    assert(candidate((""go"")) == (true));
    assert(candidate((""gogo"")) == (false));
    assert(candidate((""aaaaaaaaaaaaaaa"")) == (false));
    assert(candidate((""Madam"")) == (true));
    assert(candidate((""M"")) == (false));
    assert(candidate((""0"")) == (false));
}
"
HumanEval/83,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ལས་ ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ལས་ ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ཚུ་སླར་ལོག་འབདཝ་ཨིན།
long starts_one_ends(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long starts_one_ends(long n) {
  if (n <= 0) {
    return 0;
  }
  if (n == 1) {
    return 1;
  }
  long starts_with_one = std::pow(10, n - 1);
  long ends_with_one = std::pow(10, n - 1);
  long starts_and_ends_with_one = std::pow(10, n - 2);
  return starts_with_one + ends_with_one - starts_and_ends_with_one;
}","}
int main() {
    auto candidate = starts_one_ends;
    assert(candidate((1)) == (1));
    assert(candidate((2)) == (18));
    assert(candidate((3)) == (180));
    assert(candidate((4)) == (1800));
    assert(candidate((5)) == (18000));
}
"
HumanEval/84,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་བུམ་ཚུའི་དོན་ལས་ ནུས་ཅན་ཨང་གྲངས་ N ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཚུའི་རྩིས་གཞི་འདི་ གཉིས་ལྡན་སྦེ་ལོག་གཏང་། དཔེ་གཞི་ >>> solve((1000)) (""1"") >>> solve((150)) (""110"") >>> solve((147)) (""1100"") བྱུང་འགྱུར་: @N ཨང་གྲངས་ཧྲིལ་བུམ་ཚུའི་དོན་ལས་: 0 ≤ N ≤ 10000. ཐོན་སྐྱེད་: གཉིས་ལྡན་ཨང་གྲངས་ཐིག་ཡིག་
std::string solve(long N) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string solve(long N) {
  if (N < 0 || N > 10000) {
    return """"; // Or handle invalid input as needed
  }
  long sum = 0;
  std::string s = std::to_string(N);
  for (char c : s) {
    sum += c - '0';
  }
  if (sum == 0) {
    return ""0"";
  }
  std::string binary_sum = """";
  while (sum > 0) {
    binary_sum = (sum % 2 == 0 ? ""0"" : ""1"") + binary_sum;
    sum /= 2;
  }
  return binary_sum;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((1000)) == (""1""));
    assert(candidate((150)) == (""110""));
    assert(candidate((147)) == (""1100""));
    assert(candidate((333)) == (""1001""));
    assert(candidate((963)) == (""10010""));
}
"
HumanEval/85,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝེ་ཀཊར་སྟོངམ་མེན་པའི་ནང་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཆ་ཤས་ཆ་མཉམ་ཚུ་ ཨང་གྲངས་ཧྲིལ་བུམ་སྦེ་བསྡོམས་དགོ། དཔེ་འབད་བ་ཅིན་: >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7}))) (2)
long add(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long add(std::vector<long> lst) {
  long sum = 0;
  for (long i = 1; i < lst.size(); i += 2) {
    if (lst[i] % 2 == 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add;
    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));
    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));
    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));
}
"
HumanEval/86,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string གི་རིམ་སྒྲིག་ཅན་གྱི་རྣམ་པ་འདི་ string གི་རིམ་སྒྲིག་ཅན་གྱི་རྣམ་པ་འདི་ཨིན། འདི་ནང་ལུ་ ཚིག་ཆ་མཉམ་ (བར་སྟོང་གིས་སོ་སོར་བཟོ་སྟེ་) འདི་ ཚིག་གསརཔ་གིས་ཚབ་བཙུགས་ཏེ་ཡོདཔ་དང་ འདི་ནང་ལུ་ཡིག་འབྲུ་ཆ་མཉམ་ ascii གནས་གོང་ལུ་གཞི་བཞག་སྟེ་ ཡར་སེང་རིམ་སྒྲིག་འབད་ཡོདཔ་ཨིན། དྲན་པ་བཟོ་དགོ: ཁྱོད་ཀྱིས་ཚིག་དང་བར་སྟོང་གི་རིམ་སྒྲིག་འདི་ ཚིག་ཡིག་ནང་ལུ་བཞག་དགོ། དཔེར་ན་: >>> anti_shuffle((""Hi"")) (""Hi"") >>> anti_shuffle((""hello"")) (""ehllo"") >>> anti_shuffle""(Hello World!!!"")) (""Hello !!!Wdlor"")
std::string anti_shuffle(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string anti_shuffle(std::string s) {
  std::string result = """";
  std::string current_word = """";
  for (char c : s) {
    if (c == ' ') {
      std::sort(current_word.begin(), current_word.end());
      result += current_word;
      result += c;
      current_word = """";
    } else {
      current_word += c;
    }
  }
  std::sort(current_word.begin(), current_word.end());
  result += current_word;
  return result;
}","}
int main() {
    auto candidate = anti_shuffle;
    assert(candidate((""Hi"")) == (""Hi""));
    assert(candidate((""hello"")) == (""ehllo""));
    assert(candidate((""number"")) == (""bemnru""));
    assert(candidate((""abcd"")) == (""abcd""));
    assert(candidate((""Hello World!!!"")) == (""Hello !!!Wdlor""));
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hi. My name is Mister Robot. How are you?"")) == ("".Hi My aemn is Meirst .Rboot How aer ?ouy""));
}
"
HumanEval/87,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ ཌི་ཨེམ་ཌི་ཌི་གི་ཨང་གྲངས་འདི་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་གཉིས་སྦེ་ཐོབ་ཨིན། འདི་ཡང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་གཉིས་སྦེ་ཐོབ་ཨིན། འདི་ཡང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་གཉིས་སྦེ་ཐོབ་ཨིན། འདི་ཡང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་ དེ་ལས་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་ དེ་ལས་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་ དེ་ལས་ ཌི་ཨེམ་ཌི་གི་ཨང་ཡིག་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨང་ཚུ་དང་ ཌི་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨ
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
  std::vector<std::tuple<long, long>> coordinates;
  for (long i = 0; i < lst.size(); ++i) {
    std::vector<std::pair<long, long>> row_coords;
    for (long j = 0; j < lst[i].size(); ++j) {
      if (lst[i][j] == x) {
        row_coords.push_back({j, i});
      }
    }
    std::sort(row_coords.rbegin(), row_coords.rend());
    for (const auto& coord_pair : row_coords) {
      coordinates.emplace_back(coord_pair.second, coord_pair.first);
    }
  }
  return coordinates;
}","}
int main() {
    auto candidate = get_row;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));
    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));
}
"
HumanEval/88,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཀྱི་ ཝི་ཅཊཱརཅིག་བྱིན་པ་ཅིན་ དབྱེ་བ་ཕྱེ་ཞིནམ་ལས་ ཝི་ཅཊཱརདེ་ཡར་འཕར་གྱི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་འོང་། ཁྱོད་ཀྱིས་ ཨང་གྲངས་དང་པའི་ཨང་གྲངས་དང་ མཇུག་གི་ཨང་གྲངས་ཚུ་ མ་འདྲཝ་ཨིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཨང་གྲངས་མར་འབབ་ཀྱི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་འོང་། དཔེར་ན་ ཁྱོད་ཀྱིས་ ཝི་ཅཊཱརདེ་ བསྒྱུར་མ་གཏང་། དཔེར་ན་: >>> sort_array (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)
std::vector<long> sort_array(std::vector<long> array) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> sort_array(std::vector<long> array) {
  std::vector<long> sorted_array = array;
  if (sorted_array.empty()) {
    return sorted_array;
  }
  long first = 0;
  long last = sorted_array.size() - 1;
  if ((first + last) % 2 != 0) {
    std::sort(sorted_array.begin(), sorted_array.end());
  } else {
    std::sort(sorted_array.rbegin(), sorted_array.rend());
  }
  return sorted_array;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));
    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));
    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));
    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));
}
"
HumanEval/89,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨེ་རེ་འདི་ ཨེ་རེ་སྦེ་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ ཨེ་རེ་སྦེ་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་ཚུ་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་ཚུ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་
std::string encrypt(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encrypt(std::string s) {
  std::string encrypted_s = """";
  int shift = 2 * 2;
  for (char c : s) {
    if (isalpha(c)) {
      char base = islower(c) ? 'a' : 'A';
      encrypted_s += static_cast<char>((c - base + shift) % 26 + base);
    } else {
      encrypted_s += c;
    }
  }
  return encrypted_s;
}","}
int main() {
    auto candidate = encrypt;
    assert(candidate((""hi"")) == (""lm""));
    assert(candidate((""asdfghjkl"")) == (""ewhjklnop""));
    assert(candidate((""gf"")) == (""kj""));
    assert(candidate((""et"")) == (""ix""));
    assert(candidate((""faewfawefaewg"")) == (""jeiajeaijeiak""));
    assert(candidate((""hellomyfriend"")) == (""lippsqcjvmirh""));
    assert(candidate((""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")) == (""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl""));
    assert(candidate((""a"")) == (""e""));
}
"
HumanEval/90,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཧྲིལ་ཨང་གི་བེ་ཀཊར་ཐོབ་ཡོདཔ་ཨིན། function next_smallest () འདི་བེ་ཀཊར་གྱི་བེ་ཀཊར་ཆུང་ཤོས་གཉིས་པ་སླར་ལོག་འབདཝ་ཨིན། དེ་བཟུམ་གྱི་བེ་ཀཊར་མེད་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། >>> next_smallest () འདི་བེ་ཀཊར་ཆུང་ཤོས་གཉིས་པ་སླར་ལོག་འབདཝ་ཨིན།
std::optional<long> next_smallest(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> next_smallest(std::vector<long> lst) {
  if (lst.size() < 2) {
    return std::nullopt;
  }
  std::sort(lst.begin(), lst.end());
  if (lst[0] == lst[1]) {
    return std::nullopt;
  }
  return lst[1];
}","}
int main() {
    auto candidate = next_smallest;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);
    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);
}
"
HumanEval/91,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཐིག་ཅིག་ཐོབ་སྟེ་ ཁྱོད་ཀྱི་ལཱ་འདི་ བཀྲམ་སྟོན་འབད་ཡོད་པའི་གྱངས་ཁ་འདི་རྩིས་རྐྱབ་ནི་དེ་ཨིན། བཀྲམ་སྟོན་འབད་ཡོད་པའི་གྱངས་ཁ་འདི་ ""I"" ཟེར་ཚིག་འདི་ལས་ འགོ་བཙུགས་མི་ཚིག་ཡིག་ཅིག་ཨིན། ཚིག་ཡིག་འདི་ '.', '?' ཡང་ན་ '!' ཟེར་ས་སྒོ་ཕྱེ་ཨིན། དཔེར་ན་: >>> is_bored((""Hello world"")) (0) >>> is_bored((""གནམ་ཁ་འདི་ཧོནམོ་ཨིན། ཉིམ་ཤར་ཏེ་འདུག། ང་གནམ་གཤིས་འདི་དགའ་དོ་ཟེར་"")) (1)
long is_bored(std::string S) {
","#include<assert.h>
#include<bits/stdc++.h>
long is_bored(std::string S) {
  long boredom_count = 0;
  std::string current_sentence = """";
  for (char c : S) {
    current_sentence += c;
    if (c == '.' || c == '?' || c == '!') {
      std::stringstream ss(current_sentence);
      std::string first_word;
      ss >> first_word;
      if (first_word == ""I"") {
        boredom_count++;
      }
      current_sentence = """";
    }
  }
  return boredom_count;
}","}
int main() {
    auto candidate = is_bored;
    assert(candidate((""Hello world"")) == (0));
    assert(candidate((""Is the sky blue?"")) == (0));
    assert(candidate((""I love It !"")) == (1));
    assert(candidate((""bIt"")) == (0));
    assert(candidate((""I feel good today. I will be productive. will kill It"")) == (2));
    assert(candidate((""You and I are going for a walk"")) == (0));
}
"
HumanEval/92,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་༣ལེན་མི་ལས་འགན་ཅིག་བཟོ་དགོ། ཨང་གྲངས་གཅིག་འདི་ གཞན་གཉིས་བསྡོམས་ཏེ་ཡོད་པ་ཅིན་བདེན་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་ཆ་མཉམ་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཨིན། གཞན་དོན་ཚན་ཚུ་ནང་རྫུས་མ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་ཚུ་ >>> any_int (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float)) (float) (float) (float)) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float (float) (float) (float (float)) (float) (float (float) (float (float) (float) (float (float) (float) (float (float) (float) (float (float) (float) (float (float) (float (float)) (float) (float (float)) (float) (float (float) (float) (float (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (
bool any_int(float x, float y, float z) {
","#include<assert.h>
#include<bits/stdc++.h>
bool any_int(float x, float y, float z) {
  if (std::floor(x) != x || std::floor(y) != y || std::floor(z) != z) {
    return false;
  }
  long ix = static_cast<long>(x);
  long iy = static_cast<long>(y);
  long iz = static_cast<long>(z);
  return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);
}","}
int main() {
    auto candidate = any_int;
    assert(candidate((float(2)), (float(3)), (float(1))) == (true));
    assert(candidate((2.5f), (float(2)), (float(3))) == (false));
    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));
    assert(candidate((float(2)), (float(6)), (float(2))) == (false));
    assert(candidate((float(4)), (float(2)), (float(2))) == (true));
    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));
    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));
    assert(candidate((float(2)), (float(1)), (float(1))) == (true));
    assert(candidate((float(3)), (float(4)), (float(7))) == (true));
    assert(candidate((3.0f), (float(4)), (float(7))) == (false));
}
"
HumanEval/93,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// བརྡ་འཕྲིན་ཅིག་ལེན་ཏེ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ཡོད།
std::string encode(std::string message) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encode(std::string message) {
  std::string encoded_message = """";
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  std::map<char, char> vowel_map = {
      {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'},
      {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}};
  for (char c : message) {
    if (isalpha(c)) {
      char swapped_case = islower(c) ? toupper(c) : tolower(c);
      if (vowels.count(c)) {
        encoded_message += vowel_map[c];
      } else {
        encoded_message += swapped_case;
      }
    } else {
      encoded_message += c;
    }
  }
  return encoded_message;
}","}
int main() {
    auto candidate = encode;
    assert(candidate((""TEST"")) == (""tgst""));
    assert(candidate((""Mudasir"")) == (""mWDCSKR""));
    assert(candidate((""YES"")) == (""ygs""));
    assert(candidate((""This is a message"")) == (""tHKS KS C MGSSCGG""));
    assert(candidate((""I DoNt KnOw WhAt tO WrItE"")) == (""k dQnT kNqW wHcT Tq wRkTg""));
}
"
HumanEval/94,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཨང་གྲངས་ཧྲིལ་བུའི་ ཝི་ཅཊ་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱིས་སྦོམ་ཤོས་ཨང་གྲངས་ཨང་གྲངས་འཚོལ་དགོཔ་དང་ ཨང་གྲངས་ཚུ་བསྡོམས་དགོཔ་ཨིན། དཔེར་ན་: >>> skjkasdkd((std:: vector<long>((long) ༠, (long) ༣, (long) ༢, (long) ༡, (long) ༣, (long) ༥, (long) ༧, (long) ༨༡, (long) ༨༢, (long) ༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨, (long) ༨༣, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨
long skjkasdkd(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

long sum_digits(long n) {
  long sum = 0;
  std::string s = std::to_string(n);
  for (char c : s) {
    sum += c - '0';
  }
  return sum;
}

long skjkasdkd(std::vector<long> lst) {
  long largest_prime = -1;
  for (long num : lst) {
    if (num > largest_prime && is_prime(num)) {
      largest_prime = num;
    }
  }
  if (largest_prime == -1) {
    return 0;
  }
  return sum_digits(largest_prime);
}","}
int main() {
    auto candidate = skjkasdkd;
    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));
    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));
    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));
    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)8191}))) == (19));
    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));
    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));
}
"
HumanEval/95,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// དཔེ་འབད་བ་ཅིན་: >>> check_dict_case{""}"", ""apple""}, {""b"", ""banana""}}))) (true) >>> check_dict_case{""}, {""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""}, ""{""}, ""{""}, ""{""}, ""}, ""{""}, ""}, ""{""}, ""}, ""{""}, ""{""}, ""}, "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""
bool check_dict_case(std::map<std::string,std::string> dict) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_dict_case(std::map<std::string,std::string> dict) {
  if (dict.empty()) {
    return false;
  }
  bool first_key_lower = false;
  bool first_key_upper = false;
  auto it = dict.begin();
  if (!it->first.empty() && islower(it->first[0])) {
    first_key_lower = true;
  } else if (!it->first.empty() && isupper(it->first[0])) {
    first_key_upper = true;
  } else {
    return false;
  }
  for (const auto& pair : dict) {
    if (pair.first.empty()) {
      return false;
    }
    bool current_lower = true;
    bool current_upper = true;
    for (char c : pair.first) {
      if (!islower(c)) {
        current_lower = false;
      }
      if (!isupper(c)) {
        current_upper = false;
      }
    }
    if (first_key_lower && !current_lower) {
      return false;
    }
    if (first_key_upper && !current_upper) {
      return false;
    }
    if (!first_key_lower && !first_key_upper) {
        if (current_lower) first_key_lower = true;
        else if (current_upper) first_key_upper = true;
        else return false;
    }
  }
  return first_key_lower || first_key_upper;
}","}
int main() {
    auto candidate = check_dict_case;
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""b"", ""banana""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""A"", ""banana""}, {""B"", ""banana""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""5"", ""banana""}, {""a"", ""apple""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""Name"", ""John""}, {""Age"", ""36""}, {""City"", ""Houston""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""STATE"", ""NC""}, {""ZIP"", ""12345""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""fruit"", ""Orange""}, {""taste"", ""Sweet""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>())) == (false));
}
"
HumanEval/96,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// མན་ངག་འདི་ནང་ལུ་ ནུས་མེད་ཨང་གྲངས་ལེན་ཏེ་ ཨང་གྲངས་དང་པོ་ n གི་ ཝེ་ཀཊར་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> count_up_to((5)) (std::vector<long>({long) 2, (long) 3})) >>> count_up_to(11) (std::vector<long>({long) 2, (long) 3, (long) 5, (long) 7)) >>> count_up_to(0)) (std::vector<long>)) >>> count_up_to(20)) (std::vector<long>{(long) 2, (long) 3, (long) 5, (long) 7, (long) 11, (long) 13, (long) 17, (long) 19)) >>> count_up_1) (std::vector<long> >>> count_up_to(18) (std:vector<long>11, (long) 3, (long) 5, (long) 17)) (long) 1, (long) 2, (long)
std::vector<long> count_up_to(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long num) {
  if (num <= 1) return false;
  for (long i = 2; i * i <= num; ++i) {
    if (num % i == 0) return false;
  }
  return true;
}

std::vector<long> count_up_to(long n) {
  std::vector<long> primes;
  if (n <= 2) {
    return primes;
  }
  for (long i = 2; i < n; ++i) {
    if (is_prime(i)) {
      primes.push_back(i);
    }
  }
  return primes;
}","}
int main() {
    auto candidate = count_up_to;
    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));
    assert(candidate((0)) == (std::vector<long>()));
    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));
    assert(candidate((1)) == (std::vector<long>()));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));
    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));
}
"
HumanEval/97,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཆ་མཉམ་གཉིས་ལེན་ཏེ་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཨང་གྲངས་ཚུ་སླར་ལོག་འབད་ནིའི་འགན་ཁུར་འདི་ཚངམ་སྦེ་བཀོལ་དགོ། ཨང་གྲངས་འདི་གཏན་འཇགས་སྦེ་ར་བཞག་དགོ། དཔེར་ན་: >>> མཉམ་པ་ (((148), (412)) (16) >>> མཉམ་པ་ (((19), (28)) (72) >>> མཉམ་པ་ (((2020), (1851)) (0) >>> མཉམ་པ་ (((14), (-15)) (20)
long multiply(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>
long multiply(long a, long b) {
  long unit_a = std::abs(a) % 10;
  long unit_b = std::abs(b) % 10;
  return unit_a * unit_b;
}","}
int main() {
    auto candidate = multiply;
    assert(candidate((148), (412)) == (16));
    assert(candidate((19), (28)) == (72));
    assert(candidate((2020), (1851)) == (0));
    assert(candidate((14), (-15)) == (20));
    assert(candidate((76), (67)) == (42));
    assert(candidate((17), (27)) == (49));
    assert(candidate((0), (1)) == (0));
    assert(candidate((0), (0)) == (0));
}
"
HumanEval/98,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string s ཅིག་བྱིན་པ་ཅིན་ གྱངས་ཁ་ཡང་ཆ་མཉམ་ནང་ཡིག་འབྲུ་སྦོམ་པའི་ཁ་སྐད་ཚུ་རྩིས་སྟོནམ་ཨིན། དཔེར་ན་: >>> count_upper (((""aBCdEf"")) (1) >>> count_upper (((""abcdefg"")) (0) >>> count_upper (((""dBBE"")) (0)
long count_upper(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long count_upper(std::string s) {
  long count = 0;
  std::unordered_set<char> upper_vowels = {'A', 'E', 'I', 'O', 'U'};
  for (long i = 0; i < s.length(); ++i) {
    if (i % 2 == 0 && upper_vowels.count(s[i])) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_upper;
    assert(candidate((""aBCdEf"")) == (1));
    assert(candidate((""abcdefg"")) == (0));
    assert(candidate((""dBBE"")) == (0));
    assert(candidate((""B"")) == (0));
    assert(candidate((""U"")) == (1));
    assert(candidate(("""")) == (0));
    assert(candidate((""EEEE"")) == (2));
}
"
HumanEval/99,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཅིག་ལུ་ངོ་ཚབ་འབད་ཡོད་པའི་གནས་གོང་ (ཐིག་ཁྲམ་) དང་ དེ་དང་ཉེ་བའི་ཨང་གྲངས་ལོག་སྤྲོད་མི་ལས་འགན་ཅིག་བཟོ། ཨང་གྲངས་དེ་ ཨང་གྲངས་གཉིས་ལས་ རྒྱང་ཐག་འདྲ་མཉམ་ཡོད་པ་ཅིན་ ཨང་གྲངས་དེ་ ༠ ལས་ཕར་བསྡུ་འབད། དཔེ་གཞི་ཚུ་ >>> closest_integer(""10"")) (10) >>> closest_integer(""15.3"")) (15): ༠ ལས་ཕར་བསྡུ་འབད། འདི་ཡང་ ཁྱོད་ཀྱིས་ཨང་གྲངས་གཉིས་ལས་ རྒྱང་ཐག་འདྲ་མཉམ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ལོག་སྤྲོད་མི་དེ་ ༠ ལས་ཐག་རིང་ཤོས་དེ་ཨིན། དཔེར་ན་ closest_integer ((""14.5"") གིས་ ༡༥ དང་ closest_integer ((-14.5"") གིས་ ༡༥ སླར་ལོག་འབདཝ་ཨིན།
long closest_integer(std::string value) {
","#include<assert.h>
#include<bits/stdc++.h>
long closest_integer(std::string value) {
  double num = std::stod(value);
  if (num >= 0) {
    if (num - std::floor(num) <= 0.5) {
      return static_cast<long>(std::floor(num));
    } else {
      return static_cast<long>(std::ceil(num));
    }
  } else {
    if (std::ceil(num) - num <= 0.5) {
      return static_cast<long>(std::ceil(num));
    } else {
      return static_cast<long>(std::floor(num));
    }
  }
}","}
int main() {
    auto candidate = closest_integer;
    assert(candidate((""10"")) == (10));
    assert(candidate((""14.5"")) == (15));
    assert(candidate((""-15.5"")) == (-16));
    assert(candidate((""15.3"")) == (15));
    assert(candidate((""0"")) == (0));
}
"
HumanEval/100,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ རྡོ་གི་གནས་ཚད་ n འབད་མི་རྡོ་བསྡམ་དགོཔ་ཨིན། གནས་ཚད་དང་པ་ལུ་ རྡོ་ n ཡོདཔ་ཨིན། གནས་ཚད་ཤུལ་མམ་གྱི་རྡོ་བསྡམ་ནི་དེ་: - n འདི་རྣམ་གྲངས་མེད་པ་ཅིན་ ཤུལ་མམ་གྱི་གྱངས་ཁ་འདི་ གྱངས་ཁ་མ་འདྲཝ་ཅིག་ཨིན་ - n འདི་ཉེར་མངམ་ཡོད་པ་ཅིན་ གྱངས་ཁ་ཉེར་མངམ་ཨིན། གནས་ཚད་རེ་རེའི་ནང་ རྡོ་གི་གྱངས་ཁ་སླར་ལོག་འབད་, གནས་ཚད་ (i+1) ནང་ལུ་ཡོད་པའི་ཆ་ཤས་ i གིས་ གནས་ཚད་ (i+1) ནང་ རྡོ་གི་གྱངས་ཁ་འདི་ངོ་ཚབ་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> make_a_pile((3)) (std::vector<long>{long) 3, (long) 5, (long) 7}))
std::vector<long> make_a_pile(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> make_a_pile(long n) {
  std::vector<long> pile;
  long current_stones = n;
  for (int i = 0; i < n; ++i) {
    pile.push_back(current_stones);
    if (current_stones % 2 != 0) {
      current_stones += 2;
    } else {
      current_stones += 2;
    }
  }
  return pile;
}","}
int main() {
    auto candidate = make_a_pile;
    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));
    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));
    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));
    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));
    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));
}
"
HumanEval/101,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཐིག་ཁྲམ་ཅིག་བྱིན་ནི་ཨིན་པ་ཅིན་ ཀམ་ཡང་ན་ བར་སྟོང་གིས་སོ་སོ་སྦེ་བཞག་འོང་། ཁྱོད་ཀྱི་ལཱ་འདི་ ཚིག་ཡིག་ཐིག་ཁྲམ་དེ་ ཚིག་ཁྲམ་སྦེ་ཁ་ཕྱེ་སྟེ་ ཚིག་ཡིག་གི་བེ་ཀཊར་ཅིག་ལོག་གཏང་ནི་དེ་ཨིན། དཔེར་ན་: >>> words_string (((""Hi, my name is John"")) (std::vector<std::string>({(std::string) ""Hi"", (std::string) ""my"", (std::string) ""name"", (std::string) ""is"", (std::string) ""John""}) >>> words_string (((""གཅིག་,གཉིས་,གསུམ་,བཞི་,ལྔ་,དྲུག་"")) (std::vector<std::string>{(stdstring) ""གཅིག་"", (std::string) ""གཉིས་"", (std::string) ""གསུམ་"", (std::string) ""བཞི་"", (std::string) ""ལྔ་"", (std::string) ""དྲུག་""})
std::vector<std::string> words_string(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> words_string(std::string s) {
  std::vector<std::string> words;
  std::string current_word;
  for (char c : s) {
    if (c == ',' || c == ' ') {
      if (!current_word.empty()) {
        words.push_back(current_word);
        current_word = """";
      }
    } else {
      current_word += c;
    }
  }
  if (!current_word.empty()) {
    words.push_back(current_word);
  }
  return words;
}","}
int main() {
    auto candidate = words_string;
    assert(candidate((""Hi, my name is John"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name"", (std::string)""is"", (std::string)""John""})));
    assert(candidate((""One, two, three, four, five, six"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate((""Hi, my name"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name""})));
    assert(candidate((""One,, two, three, four, five, six,"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""ahmed     , gamal"")) == (std::vector<std::string>({(std::string)""ahmed"", (std::string)""gamal""})));
}
"
HumanEval/102,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་ལས་འགན་འདི་ ནུས་ལྡན་ཨང་གྲངས་ x དང་ y གཉིས་ལེན་ཏེ་ [x, y] ནང་ཡོད་པའི་ཨང་གྲངས་ཆ་མཉམ་སྦོམ་ཤོས་དེ་སླར་ལོག་འབདཝ་ཨིན། ག་དེམ་ཅིག་སྦེ་ འདི་བཟུམ་གྱི་ཨང་གྲངས་མེད་པ་ཅིན་ ལས་འགན་འདི་གིས་ -1 སླར་ལོག་འབད་ནི་ཨིན། དཔེར་ན་: >>> choose_num((12), (15)) (14) >>> choose_num((13), (12)) (-1)
long choose_num(long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>
long choose_num(long x, long y) {
  if (x > y) {
    return -1;
  }
  long end = y;
  if (end % 2 != 0) {
    end--;
  }
  if (end < x) {
    return -1;
  }
  return end;
}","}
int main() {
    auto candidate = choose_num;
    assert(candidate((12), (15)) == (14));
    assert(candidate((13), (12)) == (-1));
    assert(candidate((33), (12354)) == (12354));
    assert(candidate((5234), (5233)) == (-1));
    assert(candidate((6), (29)) == (28));
    assert(candidate((27), (10)) == (-1));
    assert(candidate((7), (7)) == (-1));
    assert(candidate((546), (546)) == (546));
}
"
HumanEval/103,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་གཉིས་ n དང་ m བྱིན་ཡོདཔ་ད་ ཁྱོད་ཀྱི་ལཱ་འདི་ ནུས་ལྡན་ཨང་གྲངས་ལས་ m ཚུན་གྱི་བར་ནའི་རྩིས་རྐྱབ་ནི་ཨིན། ཨང་གྲངས་ n དང་ m ཚུ་རྩིས་ཏེ་ཨིན། ཨང་གྲངས་འདི་ སྦོ་ལོགས་ཁར་ཡོད་པའི་ཨང་གྲངས་ལུ་བསྡུ་སྟེ་ གཉིས་ལྡན་ལུ་བསྒྱུར་དགོ། n འདི་ m ལས་སྦོམ་ཡོད་པ་ཅིན་ -1 སླར་ལོག་འབད། དཔེ་འབད་བ་ཅིན་: >>> rounded_avg((1), (5)) ""0b11"" >>> rounded_avg(7), (5)) -1 >>> rounded_avg(10), (20)) ""0b1111"" >>> rounded_avg(20), (33) ""0b11010""
Union_std_string_long rounded_avg(long n, long m) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;
    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_string_long rounded_avg(long n, long m) {
  if (n > m) {
    return Union_std_string_long(-1);
  }
  double sum = 0;
  for (long i = n; i <= m; ++i) {
    sum += i;
  }
  double avg = sum / (m - n + 1);
  long rounded_avg_long = std::round(avg);
  if (rounded_avg_long == 0) {
    return Union_std_string_long(""0b0"");
  }
  std::string binary_string = """";
  long temp = std::abs(rounded_avg_long);
  while (temp > 0) {
    binary_string = (temp % 2 == 0 ? ""0"" : ""1"") + binary_string;
    temp /= 2;
  }
  return Union_std_string_long(""0b"" + binary_string);
}","}
int main() {
    auto candidate = rounded_avg;
    assert(candidate((1), (5)) == ""0b11"");
    assert(candidate((7), (13)) == ""0b1010"");
    assert(candidate((964), (977)) == ""0b1111001010"");
    assert(candidate((996), (997)) == ""0b1111100100"");
    assert(candidate((560), (851)) == ""0b1011000010"");
    assert(candidate((185), (546)) == ""0b101101110"");
    assert(candidate((362), (496)) == ""0b110101101"");
    assert(candidate((350), (902)) == ""0b1001110010"");
    assert(candidate((197), (233)) == ""0b11010111"");
    assert(candidate((7), (5)) == -1);
    assert(candidate((5), (1)) == -1);
    assert(candidate((5), (5)) == ""0b101"");
}
"
HumanEval/104,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཕྲང་སྒྲིག་ x གི་ ཕྲང་སྒྲིག་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཕྲང་སྒྲིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན། ཟུར་ཐོ་:སླར་ལོག་འབད་མི་ཕྲང་སྒྲིག་འདི་ ཡར་སེང་རིམ་སྒྲིག་ནང་བཞག་དགོ། དཔེར་ན་: >>> unique_digits(std::vector<long>({(long) 15, (long) 33, (long) 1422, (long) 1}))) (std::vector<long>{(long) 1, (long) 15, (long) 33})) >>> unique_digits(std::vector<long>{(long) 152, (long) 323, (long) 1422, (long) 10}))) (std::vector<long>(long))
std::vector<long> unique_digits(std::vector<long> x) {
","#include<assert.h>
#include<bits/stdc++.h>
bool has_even_digit(long n) {
  std::string s = std::to_string(n);
  for (char c : s) {
    if ((c - '0') % 2 == 0) {
      return true;
    }
  }
  return false;
}

std::vector<long> unique_digits(std::vector<long> x) {
  std::vector<long> result;
  for (long val : x) {
    if (!has_even_digit(val)) {
      result.push_back(val);
    }
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = unique_digits;
    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));
    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));
    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));
}
"
HumanEval/105,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཊ་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་དེ་ ༡ དང་ ༩ གི་བར་ན་ཡོད་པའི་ ཨང་གྲངས་ཚུ་དབྱེ་བ་ཕྱེ་ཞིནམ་ལས་ ཝི་ཅཊ་དེ་ བསྒྱུར་བཅོས་འབད་ཞིནམ་ལས་ ཨང་གྲངས་རེ་རེ་བཞིན་དུ་ འདི་གི་མིང་དང་བསྟུན་པའི་ ""གཅིག་"", ""གཉིས་"", ""གསུམ་"", ""བཞི་"", ""ལྔ་"", ""དྲུག་"", ""བདུན་"", ""བརྒྱད་"", ""དགུ་"" སྦེ་ཚབ་བཙུགས་ དཔེར་ན་: >>> by_length(std::vector<long>{long) 2, (long) 1, (long) 1, (long) 4, (long) 5, (long) 8, (long) 2, (long) 3}))) (std::vector<std::string>{(std::string) ""བརྒྱད་"", (std::string) ""ལྔ་"", (std::string) ""བཞི་"", (std::string) ""གསུམ་"", (std::string) ""གཉིས་"", (std::string) ""བཞི་"", ""ལྔ་"", (std::string) ""ལྔ་"", (std::string) ""ལྔ་"", (std::string) ""ལྔ་"", (std::string) ""ལྔ་"", (std::string) ""ལྔ་"", (string) ""ལྔ་"", (string) ""third"" (string) ""third"") (string) ""third""string (string) ""string"") (string) ""string (string"") (string) ""string (string"") ""string (string"") ""string (string"") ""string (string"") ""string (string"") ""string (string"") ""string (string"") ""string (string"") ""string (string"") ""string (string"") ""string (string"") ""string (string) ""string"") ""string (string"") ""string (string) ""string (string"") ""string (string"") ""string (string) ""string (string"") ""string (string) ""string (th) ""string (string) ""string (string"") ""string (th) ""string (th) ""string (th) ""string (
std::vector<std::string> by_length(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> by_length(std::vector<long> arr) {
  std::vector<long> valid_numbers;
  std::vector<std::string> result;
  std::map<long, std::string> number_names = {
      {1, ""One""}, {2, ""Two""}, {3, ""Three""}, {4, ""Four""}, {5, ""Five""},
      {6, ""Six""}, {7, ""Seven""}, {8, ""Eight""}, {9, ""Nine""}};
  for (long num : arr) {
    if (num >= 1 && num <= 9) {
      valid_numbers.push_back(num);
    }
  }
  std::sort(valid_numbers.begin(), valid_numbers.end());
  std::reverse(valid_numbers.begin(), valid_numbers.end());
  for (long num : valid_numbers) {
    result.push_back(number_names[num]);
  }
  return result;
}","}
int main() {
    auto candidate = by_length;
    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)""Eight"", (std::string)""Five"", (std::string)""Four"", (std::string)""Three"", (std::string)""Two"", (std::string)""Two"", (std::string)""One"", (std::string)""One""})));
    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)""One""})));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)""Three"", (std::string)""Two"", (std::string)""One""})));
    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)""Nine"", (std::string)""Eight"", (std::string)""Four""})));
}
"
HumanEval/106,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ལས་འགན་ f འདི་ n འདི་ཚད་འཛིན་སྦེ་ལེན་ཏེ་ ཚད་ n གི་བེ་ཊར་ཅིག་ལོག་བྱིན་ཏེ་ དེ་བཟུམ་འབད་བ་ཅིན་ གནས་གོང་ i འདི་ i གི་གནས་གོང་དང་ ཡང་ན་ i ལས་ 1 ལས་ i ཚུན་གྱི་གྲངས་ཚུ་བསྡོམས་པ་ཅིན་ i གི་གནས་གོང་དེ་ i གི་གནས་གོང་དང་ ཡང་ན་ i ལས་ 1 ལས་ i ཚུན་གྱི་གྲངས་ཚུ་བསྡོམས་པ་ཅིན་ i གི་གནས་གོང་དེ་ 1 ལས་འགོ་བཙུགསཔ་ཨིན། i གི་གནས་གོང་དེ་ 1 ལས་ i ཚུན་གྱི་གྲངས་ཚུ་སྤེལ་བ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> f((5)) (std::vector<long>{(long) 1, (long) 2, (long) 6, (long) 24, (long) 15})
std::vector<long> f(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> f(long n) {
  std::vector<long> result;
  for (long i = 1; i <= n; ++i) {
    if (i % 2 == 0) {
      long factorial = 1;
      for (long j = 1; j <= i; ++j) {
        factorial *= j;
      }
      result.push_back(factorial);
    } else {
      long sum = 0;
      for (long j = 1; j <= i; ++j) {
        sum += j;
      }
      result.push_back(sum);
    }
  }
  return result;
}","}
int main() {
    auto candidate = f;
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));
}
"
HumanEval/107,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཚངམ་ n བྱིན་པ་ཅིན་ ཨང་གྲངས་ཚངམ་དང་ཨང་གྲངས་ཆ་མེད་ palindromes གྱངས་ཁ་འདི་ ཚད་འཛིན་འབད་ཡོད་པའི་ཨང་གྲངས་ཚངམ་དང་ཨང་གྲངས་ཆ་མེད་ palindromes གྱངས་ཁ་འདི་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་ ༡: >>> even_odd_palindrome (((3)) (std::make_tuple ((1, 2)) འགྲེལ་བཤད་: ཨང་གྲངས་ཆ་མེད་ palindromes འདི་ ༡, ༢, ༣ ཨིན། འདི་གི་གྲལ་ལས་ གཅིག་འདི་ཆ་མཉམ་དང་ གཉིས་འདི་ཆ་མེད་ཨིན། དཔེ་གཞི་ ༢: >>> even_odd_palindrome (((12)) (std::make_tuple ((4, 6)) འགྲེལ་བཤད་: ཨང་གྲངས་ཆ་མེད་ palindromes འདི་ ༡, ༢, ༣, ༤, ༥, ༦, ༧, ༨, ༩, ༡༡ ། འདི་ཚུ་གི་གྲལ་ལས་བཞི་འདི་ཆ་མཉམ་དང་༦འདི་ཆ་མེད་ཨིན། དྲན་པ་: ༡. <= n= ༡༠^༣ <= ༡༠^༣ ༢ སླར་ལོག་འབད་ཡོད་པའི་ཨང་གྲངས་ཚངམ་དང་ཨང་གྲངས་ཆ་མེད་ palindromes གྱངས་ཁ་འདི་སོ་སོར་སྦེ་ཡོདཔ་ཨིན།
std::tuple<long, long> even_odd_palindrome(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_palindrome(long num) {
  std::string s = std::to_string(num);
  std::string reversed_s = s;
  std::reverse(reversed_s.begin(), reversed_s.end());
  return s == reversed_s;
}

std::tuple<long, long> even_odd_palindrome(long n) {
  long even_count = 0;
  long odd_count = 0;
  for (long i = 1; i <= n; ++i) {
    if (is_palindrome(i)) {
      if (i % 2 == 0) {
        even_count++;
      } else {
        odd_count++;
      }
    }
  }
  return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_palindrome;
    assert(candidate((123)) == (std::make_tuple(8, 13)));
    assert(candidate((12)) == (std::make_tuple(4, 6)));
    assert(candidate((3)) == (std::make_tuple(1, 2)));
    assert(candidate((63)) == (std::make_tuple(6, 8)));
    assert(candidate((25)) == (std::make_tuple(5, 6)));
    assert(candidate((19)) == (std::make_tuple(4, 6)));
    assert(candidate((9)) == (std::make_tuple(4, 5)));
    assert(candidate((1)) == (std::make_tuple(0, 1)));
}
"
HumanEval/108,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གྲངས་རྩིས་_ཨང་གྲངས་འདི་ ཨང་གྲངས་ཆ་མཉམ་ལས་བརྒལ་ཏེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་འདི་ ནུས་པ་ཨིནམ་ལས་ ཨང་གྲངས་དང་པ་འདི་ ནུས་པ་འོང་ནི་ཨིན་མས། དཔེར་ན་ -༡༢༣ ལུ་ ཨང་གྲངས་ -༡,༢,༣ ཡོད་པའི་ནང་། >>> ཨང་གྲངས་_༡༠༣ ཚུ་ནང་།
long count_nums(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_digits_signed(long n) {
  std::string s = std::to_string(n);
  long sum = 0;
  for (long i = 0; i < s.length(); ++i) {
    if (i == 0 && s[i] == '-') {
      if (s.length() > 1) {
        sum -= (s[i + 1] - '0');
        i++;
      }
    } else {
      sum += (s[i] - '0');
    }
  }
  return sum;
}

long count_nums(std::vector<long> arr) {
  long count = 0;
  for (long num : arr) {
    if (sum_digits_signed(num) > 0) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_nums;
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));
    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));
    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
}
"
HumanEval/109,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ང་བཅས་ནང་ལུ་ ཝི་ཅཊ་ 'arr' འདི་ནང་ལུ་ ཨང་གྲངས་ N ཡོད་པའི་ཁར་ ཨང་གྲངས་ arr[1], arr[2], ..., arr[N] འདི་ ཝི་ཅཊ་ནང་ལུ་ཡོད་མི་ཚུ་ སྟབས་བདེ་དྲགས་སྦེ་རིམ་སྒྲིག་འབད་འོང་། ཁྱོད་ཀྱི་ལཱ་འདི་ ཝི་ཅཊ་འདི་ མར་འབབ་འགྱོ་ནི་མེད་པའི་རིམ་སྒྲིག་ནང་ དབྱེ་བ་ཕྱེ་ཚུགསཔ་ཨིན་ན་ ངེས་གཏན་བཟོ་ནི་དེ་ཨིན། ཁྱོད་ཀྱིས་ ཝི་ཅཊ་འདི་ནང་ལུ་ འོག་གི་ལཱ་ཚུ་འབད་ཐོག་ལས་ ཕྲང་ལམ་འགྱོ་སའི་ལཱ་ཚུ་ ཚར་ལེ་ཤ་འབད་ཚུགས། ཕྲང་ལམ་འགྱོ་སའི་ལཱ་ཅིག་གིས་ ཝི་ཅཊ་གི་ཆ་ཤས་ཆ་མཉམ་ལུ་ ཕྲང་ལམ་གྱི་ས་སྒོ་གཅིག་ལས་ སྤོ་བཤུད་འབད་ཚུགསཔ་ཨིན། ཝི་ཅཊ་གི་ཆ་ཤས་མཇུག་འདི་ ཝི་ཅཊ་ནང་ འགོ་བཙུགས་པའི་ས་སྒོ་ལུ་ སྤོ་བཤུད་འབད་འོང་། དཔེར་ན་ 0th index འདི་ཨིན། ག་དེམ་ཅིག་སྦེ་ དབྱེ་བ་ཕྱེ་མི་ཝི་ཅཊ་འདི་ གོང་གི་ལཱ་འབད་ཐོག་ལས་ཐོབ་ཚུགས་པ་ཅིན་ true སླར་ལོག་གཏང་པ་ཅིན་ false སླར་ལོག་གཏང་འོང་། ག་དེམ་ཅིག་སྦེ་ ཝི་ཅཊ་འདི་ སྟོངམ་ཡོད་པ་ཅིན་ true སླར་ལོག་གཏང་དགོ། དཔེར་ན་ >>>plan_one_ball_((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
bool move_one_ball(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
bool move_one_ball(std::vector<long> arr) {
  if (arr.empty()) {
    return true;
  }
  int n = arr.size();
  std::vector<long> sorted_arr = arr;
  std::sort(sorted_arr.begin(), sorted_arr.end());
  for (int shift = 0; shift < n; ++shift) {
    std::vector<long> shifted_arr(n);
    for (int i = 0; i < n; ++i) {
      shifted_arr[i] = arr[(i - shift + n) % n];
    }
    if (shifted_arr == sorted_arr) {
      return true;
    }
  }
  return false;
}","}
int main() {
    auto candidate = move_one_ball;
    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
}
"
HumanEval/110,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་དཀའ་ངལ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་ལས་འགན་ཅིག་ལག་ལེན་འཐབ་ནི་ཨིན་པ་ཅིན་ ཨང་གྲངས་ཀྱི་བེ་ཊར་གཉིས་ལེན་ཏེ་ lst1འདི་ ཨང་གྲངས་ཆ་མཉམ་གྱི་བེ་ཊར་བཟོ་ནིའི་དོན་ལུ་ ཁོང་གཉིས་ཀྱི་བར་ན་ དབྱེ་བ་ཚུ་བརྗེ་སོར་འབད་ཚུགསཔ་ཨིན་ན་ ངེས་གཏན་བཟོ་འོང་། lst1 དང་ lst2གི་བར་ན་ དབྱེ་བ་བརྗེ་སོར་འབད་ཚུགསཔ་གི་ཚད་གཞི་མེད་ཨིན། lst1 དང་ lst2གི་བར་ན་ དབྱེ་བ་ཚུ་བརྗེ་སོར་འབད་ཚུགསཔ་ཨིན་པ་ཅིན་ lst1 གི་ཡན་ལག་ཆ་མཉམ་འདི་ཆ་མཉམ་སྦེ་བཟོ་སྟེ་ ""YES"" སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ ""NO"" སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> exchange((std::vector<>(long) {1, (long) 2, (long) 3, (long) 4})), (std::vector<>(long) {1, (long) 2, (long) 3, (long) 4}) (""YES"") >>>((std::vector<>{1, (long) 2, (long) 3, (long) 4}), (std::vector<>(long) NO:<> (long) 5, (long) {ty) ཚུ་ནང་འདྲེན་འབད་འོང་ཟེར་མནོ་སྟེ་ ནང་བསྐྱོད་འོང་།
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
  long odd_count_lst1 = 0;
  for (long num : lst1) {
    if (num % 2 != 0) {
      odd_count_lst1++;
    }
  }
  long even_count_lst2 = 0;
  for (long num : lst2) {
    if (num % 2 == 0) {
      even_count_lst2++;
    }
  }
  if (even_count_lst2 >= odd_count_lst1) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = exchange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (""YES""));
}
"
HumanEval/111,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གནས་གོང་འདི་ཡིག་འབྲུ་ཆུང་བ་ཚུ་ས་སྒོ་སོ་སོར་སྦེ་བཏོན་ཏེ་ཡོད་པའི་ཡིག་འབྲུ་དང་བསྟུན་ཏེ་སླར་ལོག་འབདཝ་ཨིན། ཡི་གུ་ལེ་ཤ་ཅིག་རང་ འབྱུང་པ་ཅིན་ དེ་ཚུ་ག་ར་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> histogram (((""a b c"")) (std::map<std::string,long>({{""a"", 1}, {""b"", 1}, {""c"", 1}})) >>> histogram (((""a b a"")) (std::map<std::string,>({{""a"", 2}, {""b"", 2}})) >>> histogram (((""a b c a b"")) (std::map<std::string,long>{{""a"", 2}, {""b"", 2}})) >>> histogram (b b a) (std::map<std::string,long>{{""a"", 2}, {""b"", 2}})) >>> histogram (b b b a"") (std::std::string, 4"") ({{""b"", 1}}) >>> (std:string,long>) (https:string,long))
std::map<std::string,long> histogram(std::string test) {
","#include<assert.h>
#include<bits/stdc++.h>
std::map<std::string,long> histogram(std::string test) {
  std::map<std::string, long> counts;
  std::string current_word;
  std::stringstream ss(test);
  while (ss >> current_word) {
    counts[current_word]++;
  }
  if (counts.empty()) {
    return {};
  }
  long max_count = 0;
  for (const auto& pair : counts) {
    if (pair.second > max_count) {
      max_count = pair.second;
    }
  }
  std::map<std::string, long> result;
  for (const auto& pair : counts) {
    if (pair.second == max_count) {
      result[pair.first] = pair.second;
    }
  }
  return result;
}","}
int main() {
    auto candidate = histogram;
    assert(candidate((""a b b a"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c a b"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c d g"")) == (std::map<std::string,long>({{""a"", 1}, {""b"", 1}, {""c"", 1}, {""d"", 1}, {""g"", 1}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate((""b b b b a"")) == (std::map<std::string,long>({{""b"", 4}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate(("""")) == (std::map<std::string,long>()));
    assert(candidate((""a"")) == (std::map<std::string,long>({{""a"", 1}})));
}
"
HumanEval/112,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ལས་འགན་ལུ་ ཀེར་ཐིག་ s དང་ c གཉིས་བྱིན་ཡོདཔ་ད་ ཁྱོད་ཀྱིས་ ཀེར་ཐིག་ s ནང་གི་ཡིག་འབྲུ་ཚུ་ཆ་མཉམ་འདི་ ཀེར་ཐིག་ c ནང་གི་ཡིག་འབྲུ་ཚུ་དང་འདྲན་འདྲ་སྦེ་སེལ་འཐུ་འབད་དགོ་ དེ་ལས་ གྲུབ་འབྲས་ ཀེར་ཐིག་དེ་ ཚད་ལྡན་ཨིནམ་སྦེ་བརྟག་དཔྱད་འབད་དགོ་ ཀེར་ཐིག་འདི་ ཚད་ལྡན་ཨིནམ་སྦེ་སླབ་པ་ཅིན་ ཤུལ་ལས་ལོག་འགྱོ་མི་དང་ ཧེ་མ་འགྱོ་མི་གཉིས་ཆ་ར་གཅིག་སྦེ་ལྷག་ཚུགས། ཁྱོད་ཀྱིས་ གྲུབ་འབྲས་ ཀེར་ཐིག་དང་བདེན་པ་/རྫུན་མ་ཡོད་མི་འདི་ལོག་གཏང་དགོ། དཔེ་འབད་བ་ཅིན་ >>> reverse_delete((""abcde""), (""ae"")) (std::make_tuple""bcd"", false)) >>> reverse_delete""abcdef"", (""b"") (std::make_tuple""acdef"",)) >>> reverse_delete""abcded"", false)) >>> reverse_delete""abcded"", false"") (std::make_tuple""abcded"", true))
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
","#include<assert.h>
#include<bits/stdc++.h>
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
  std::string result = """";
  std::unordered_set<char> chars_to_delete(c.begin(), c.end());
  for (char ch : s) {
    if (chars_to_delete.find(ch) == chars_to_delete.end()) {
      result += ch;
    }
  }
  std::string reversed_result = result;
  std::reverse(reversed_result.begin(), reversed_result.end());
  return std::make_tuple(result, result == reversed_result);
}","}
int main() {
    auto candidate = reverse_delete;
    assert(candidate((""abcde""), (""ae"")) == (std::make_tuple(""bcd"", false)));
    assert(candidate((""abcdef""), (""b"")) == (std::make_tuple(""acdef"", false)));
    assert(candidate((""abcdedcba""), (""ab"")) == (std::make_tuple(""cdedc"", true)));
    assert(candidate((""dwik""), (""w"")) == (std::make_tuple(""dik"", false)));
    assert(candidate((""a""), (""a"")) == (std::make_tuple("""", true)));
    assert(candidate((""abcdedcba""), ("""")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""abcdedcba""), (""v"")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""vabba""), (""v"")) == (std::make_tuple(""abba"", true)));
    assert(candidate((""mamma""), (""mia"")) == (std::make_tuple("""", true)));
}
"
HumanEval/113,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string གི་བེ་ཊར་ཅིག་བྱིནམ་ད་ string འདི་ནང་ཨང་ཡིག་རྐྱངམ་ཅིག་ཡོདཔ་ལས་ བེ་ཊར་ཅིག་ལོག་གཏང་། འཐོན་ཁུངས་ཀྱི་ཆ་ཤས་རེ་རེ་ i འདི་ ""ཨང་ཡིག་ i གི་ནང་ཐིག་གི་ཆ་ཤས་རྣམ་རྟོག་གི་གྱངས་ཁ་"" ཨིནམ་དང་ i ཚུ་ཆ་ཤས་ i པའི་ནང་ཐིག་གི་ཨང་ཡིག་རྣམ་རྟོག་གི་གྱངས་ཁ་གིས་ཚབ་བཙུགས་དགོ། >>> odd_count((std::vector<std::string>(({std::string) ""1234567""}))) (std::vector<std::string>({stdstring)::"" 4n གི་ནང་ཐིག་གི་ཆ་ཤས་རྣམ་རྟོག་གི་གྱངས་ཁ་ 4n 4n 4n 4n. "")) >>> odd_count((stdvector<stdstring>::{(stdstring)::""3n (string)::1111""11""))) (std vector<std::string::n) 1n: ""8n 1n: 1n: 8n) ཚུ་ནང་ཐིག་གི་ཆ་ཤས་རྣམ་རྟོག་གི་གྱངས་ཁ་ 1n 8n 8n. "" (string)
std::vector<std::string> odd_count(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> odd_count(std::vector<std::string> lst) {
  std::vector<std::string> result;
  for (const std::string& s : lst) {
    int count = 0;
    for (char c : s) {
      if ((c - '0') % 2 != 0) {
        count++;
      }
    }
    std::string count_str = std::to_string(count);
    std::string modified_s = s;
    for (char& c : modified_s) {
      if (isdigit(c) && (c - '0') % 2 != 0) {
        c = count_str[0];
      }
    }
    result.push_back(""the number of odd elements "" + count_str + ""n the str"" + modified_s + ""ng "" + modified_s + "" of the "" + modified_s + ""nput."");
  }
  return result;
}","}
int main() {
    auto candidate = odd_count;
    assert(candidate((std::vector<std::string>({(std::string)""1234567""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 4n the str4ng 4 of the 4nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""3"", (std::string)""11111111""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 1n the str1ng 1 of the 1nput."", (std::string)""the number of odd elements 8n the str8ng 8 of the 8nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""271"", (std::string)""137"", (std::string)""314""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 2n the str2ng 2 of the 2nput."", (std::string)""the number of odd elements 3n the str3ng 3 of the 3nput."", (std::string)""the number of odd elements 2n the str2ng 2 of the 2nput.""})));
}
"
HumanEval/114,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་ཨང་ n གི་བེ་ཊར་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་ཨང་མེན་པའི་བེ་ཊར་ཆུང་ཤོས་ཅིག་གི་བསྡོམས་དེ་འཚོལ་དགོ། དཔེ་གཞི་ >>> minSubArraySum(((std::vector<long>({long) 2, (long) 3, (long) 4, (long) 1, (long) 2, (long) 4}))) (1) >>> minSubArraySum(std::vector<long>{(long) -1, (long) -2, (long) -3)))) (-6)
long minSubArraySum(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>
long minSubArraySum(std::vector<long> nums) {
  if (nums.empty()) {
    throw std::invalid_argument(""Input vector cannot be empty."");
  }
  long min_so_far = nums[0];
  long current_min = nums[0];
  for (size_t i = 1; i < nums.size(); ++i) {
    current_min = std::min(nums[i], current_min + nums[i]);
    min_so_far = std::min(min_so_far, current_min);
  }
  return min_so_far;
}","}
int main() {
    auto candidate = minSubArraySum;
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));
    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));
    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));
    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));
    assert(candidate((std::vector<long>({(long)-10}))) == (-10));
    assert(candidate((std::vector<long>({(long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));
}
"
HumanEval/115,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཆུ་རྐ་གི་ཟུར་བཞི་འབད་མི་ཐིག་ཁྲམ་ཅིག་ཐོབ་ཨིན། ཐིག་ཁྲམ་རེ་ལུ་ཆུ་རྐ་གཅིག་ཡོདཔ་དང་ ཐིག་ཁྲམ་རེ་ལུ་ཆུ་གི་ཆ་ཤས་གཅིག་ཡོདཔ་ཨིན། ཆུ་རྐ་རེ་ལུ་ཆུ་བཏོན་ནིའི་དོན་ལུ་ ཆུ་རྫིང་རེ་ཡོདཔ་དང་ ཆུ་རྫིང་ག་ར་ནང་ཆུ་གི་ནུས་པ་གཅིག་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཆུ་རྫིང་ཚུ་ལག་ལེན་འཐབ་སྟེ་ ཆུ་རྐ་སྟོངམ་བཟོ་ནི་ཨིན། ཁྱོད་ཀྱིས་ཆུ་རྫིང་ཚུ་མར་ཕབ་འབད་དགོ་པའི་གྱངས་ཁ་འདི་ཨེབ་གཏང་འབད། དཔེ་ 1: >>> max_fill((std::vector<std::vector<long> (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long vector (long) vector (long) vector (long vector) vector (long vector (long) vector (long vector) vector (long vector) (long vector) (long vector) vector (long vector (long vector) (long vector) (long vector) vector (long vector) (long vector) (long vector (long vector) (long vector) vector (long vector) (long vector) (long vector) (long vector)
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
","#include<assert.h>
#include<bits/stdc++.h>
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
  long bucket_lowering_count = 0;
  for (const auto& row : grid) {
    long water_in_well = 0;
    for (long unit : row) {
      water_in_well += unit;
    }
    bucket_lowering_count += (water_in_well + capacity - 1) / capacity;
  }
  return bucket_lowering_count;
}","}
int main() {
    auto candidate = max_fill;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));
}
"
HumanEval/116,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// འ་ནི་ཀ་ཏ་ནང་ལུ་ ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཀྱི་ ཝི་ཅཱཊ་འདི་ གཉིས་ལྡན་གྱི་ཐོག་ལས་ཡར་སེང་གི་རིམ་པ་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ། ཨང་གྲངས་འདྲ་མཉམ་གྱི་དོན་ལུ་ ཨང་གྲངས་བཅུ་ཐམ་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ། འདི་བཟུམ་སྦེ་ལག་ལེན་འཐབ་དགོཔ་ཨིན།: >>> sort_array (long) 1, (long) 2, (long) 2, (long) 3, (long) 4, (long) 5 (long) 1, (long) 2, (long) 3, (long) 4, (long) 5 (long) 6 (long) (long) 3, (long) 2, (long) 3, (long) 4 (long) 6 (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (
std::vector<long> sort_array(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
int count_set_bits(long n) {
  int count = 0;
  if (n < 0) {
    n = std::abs(n);
  }
  while (n > 0) {
    n &= (n - 1);
    count++;
  }
  return count;
}

bool compare(long a, long b) {
  int bits_a = count_set_bits(a);
  int bits_b = count_set_bits(b);
  if (bits_a != bits_b) {
    return bits_a < bits_b;
  }
  return a < b;
}

std::vector<long> sort_array(std::vector<long> arr) {
  std::sort(arr.begin(), arr.end(), compare);
  return arr;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));
    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
}
"
HumanEval/117,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string s དང་ རང་བཞིན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ string s ལས་ ཚིག་ཡིག་ཆ་མཉམ་ལས་ ཝེ་ཀཊར་ཅིག་ལོག་གཏང་མི་ལས་འགན་ཅིག་ལག་ལེན་འཐབ་སྟེ་ཡོད་ འདི་གི་ནང་ ཚིག་ཡིག་ཆ་མཉམ་ནང་ ཝེ་ཀཊར་ n ཡོད་མི་ལུ་བརྟེན་ ཚིག་ཡིག་ཚུ་ string s ནང་མཐོང་འོང་། string s དེ་སྟོངམ་ཨིན་པ་ཅིན་ ལས་འགན་གྱིས་ ཝེ་ཀཊར་སྟོངམ་ཅིག་ལོག་གཏང་དགོ། དཔེར་ན་: >>> select_words (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string))
std::vector<std::string> select_words(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_consonant(char c) {
  c = tolower(c);
  return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');
}

std::vector<std::string> select_words(std::string s, long n) {
  std::vector<std::string> result;
  std::string current_word;
  for (char c : s) {
    if (c == ' ') {
      long consonant_count = 0;
      for (char word_char : current_word) {
        if (is_consonant(word_char)) {
          consonant_count++;
        }
      }
      if (consonant_count == n) {
        result.push_back(current_word);
      }
      current_word = """";
    } else {
      current_word += c;
    }
  }
  long consonant_count = 0;
  for (char word_char : current_word) {
    if (is_consonant(word_char)) {
      consonant_count++;
    }
  }
  if (consonant_count == n) {
    result.push_back(current_word);
  }
  return result;
}","}
int main() {
    auto candidate = select_words;
    assert(candidate((""Mary had a little lamb""), (4)) == (std::vector<std::string>({(std::string)""little""})));
    assert(candidate((""Mary had a little lamb""), (3)) == (std::vector<std::string>({(std::string)""Mary"", (std::string)""lamb""})));
    assert(candidate((""simple white space""), (2)) == (std::vector<std::string>()));
    assert(candidate((""Hello world""), (4)) == (std::vector<std::string>({(std::string)""world""})));
    assert(candidate((""Uncle sam""), (3)) == (std::vector<std::string>({(std::string)""Uncle""})));
    assert(candidate((""""), (4)) == (std::vector<std::string>()));
    assert(candidate((""a b c d e f""), (1)) == (std::vector<std::string>({(std::string)""b"", (std::string)""c"", (std::string)""d"", (std::string)""f""})));
}
"
HumanEval/118,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཚིག་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཚིག་གི་གཡས་ཁ་ཐུག་ལས་ ཟུར་སྒྲོམ་གཉིས་ཀྱི་བར་ན་ཡོད་མི་ ཕྲ་རིང་འདི་འཚོལ་ནི་དེ་ཨིན། འགོ་བཙུགས་དང་མཇུག་གི་ཕྲ་རིང་ཚུ་རྩིས་མི་བཏུབ། ཁྱོད་ཀྱིས་ཕྲ་རིང་ཅིག་མ་ཐོབ་པ་ཅིན་ སྟོངམ་ཐིག་ཁྲམ་ཅིག་ལོག་གཏང་། ཁྱོད་ཀྱིས་བྱིན་ཡོད་པའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨིང་ལིཤ་ཡི་གུ་རྐྱངམ་གཅིག་ཡོད་ཟེར་ཆ་བཞག་ཚུགས། དཔེ་འབད་བ་ཅིན་: >>> get_closest_vowel (((""yogurt"")) (""u"") >>> get_closest_vowel (((""FULL"")) (""U"") >>> get_closest_vowel (((""quick"")) ("""") >>> get_closest_vowel (((ab"") ("""")
std::string get_closest_vowel(std::string word) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_vowel(char c) {
  c = tolower(c);
  return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
}

bool is_consonant(char c) {
  return isalpha(c) && !is_vowel(c);
}

std::string get_closest_vowel(std::string word) {
  if (word.length() < 3) {
    return """";
  }
  for (int i = word.length() - 2; i >= 1; --i) {
    if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {
      return std::string(1, word[i]);
    }
  }
  return """";
}","}
int main() {
    auto candidate = get_closest_vowel;
    assert(candidate((""yogurt"")) == (""u""));
    assert(candidate((""full"")) == (""u""));
    assert(candidate((""easy"")) == (""""));
    assert(candidate((""eAsy"")) == (""""));
    assert(candidate((""ali"")) == (""""));
    assert(candidate((""bad"")) == (""a""));
    assert(candidate((""most"")) == (""o""));
    assert(candidate((""ab"")) == (""""));
    assert(candidate((""ba"")) == (""""));
    assert(candidate((""quick"")) == (""""));
    assert(candidate((""anime"")) == (""i""));
    assert(candidate((""Asia"")) == (""""));
    assert(candidate((""Above"")) == (""o""));
}
"
HumanEval/119,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ string ཌའི་ལོག་གཉིས་ཐོབ་སྟེ་ཡོདཔ་ད་ string ཌའི་ལོག་གཉིས་ཆ་ར་ལུ་ སྒོ་སྒྲིག་ '(' ཡང་ན་ སྒོ་སྒྲིག་ ') 'རྐྱངམ་ཅིག་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ string ཌའི་ལོག་གཉིས་རིམ་པ་གཅིག་ནང་ལུ་མཐུད་དེ་ཡོད་པ་ཅིན་ གྲུབ་འབྲས་ string འདི་ལེགས་ཤོམ་འོང་ག་བརྟག་དཔྱད་འབད་དགོཔ་ཨིན། string S འདི་ལེགས་ཤོམ་སྦེ་བརྩི་བ་ཅིན་ S ནང་གི་ parentheses ག་ར་མཉམ་གནས་ཡོད་པ་ཅིན་རྐྱངམ་གཅིག་ལེགས་ཤོམ་ཨིན། དཔེར་ན་ string '(())) 'འདི་ལེགས་ཤོམ་ཨིན་ དེ་ལས་ string '()) 'འདི་ལེགས་ཤོམ་མེན་པ་ཅིན་ 'Yes' སླར་ལོག་འབད། string འདི་ལེགས་ཤོམ་བཟོ་ནིའི་ལམ་ཡོད་པ་ཅིན་ 'Yes' སླར་ལོག་འབད། དེ་ལས་གཞན་པ་ཅིན་ 'No' སླར་ལོག་འབད། དཔེ་འབད་བ་ཅིན་: >>> match_parens((std::vector<std::string>{((stdstring) "") "", ((std::string)))) ""} (""Yes"") >>> match_parens<std::vector<std>{(std::string"") ("", ((std:string"") ("") (No""))))
std::string match_parens(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_good(const std::string& s) {
  int balance = 0;
  for (char c : s) {
    if (c == '(') {
      balance++;
    } else if (c == ')') {
      balance--;
    }
    if (balance < 0) {
      return false;
    }
  }
  return balance == 0;
}

std::string match_parens(std::vector<std::string> lst) {
  std::string s1 = lst[0];
  std::string s2 = lst[1];
  if (is_good(s1 + s2) || is_good(s2 + s1)) {
    return ""Yes"";
  } else {
    return ""No"";
  }
}","}
int main() {
    auto candidate = match_parens;
    assert(candidate((std::vector<std::string>({(std::string)""()("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)"")""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()(())"", (std::string)""())())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")())"", (std::string)""(()()(""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(())))"", (std::string)""(()())((""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""()"", (std::string)""())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()("", (std::string)""()))()""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(((("", (std::string)""((())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")(()"", (std::string)""(()(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")("", (std::string)"")(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)""(""}))) == (""Yes""));
}
"
HumanEval/120,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཕྲང་ལམ་ arr གི་ཨང་གྲངས་ཧྲིལ་བུམ་དང་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ k བྱིན་པ་ཅིན་ ཕྲང་ལམ་ k གི་རིང་ཚད་དང་ ཨང་གྲངས་ k གི་མཐོ་སའི་མཐའ་མཚམས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་ ༡: >>> maximum((std::vector<long>({long) -3, (long) -4, (long) -5,) (3)) (std::vector<long>({long) -4, (long) -3, (long) -5}) དཔེ་གཞི་ ༢: >>> maximum(std::vector<long>({long) 4, (long) -4, (long) 4})), (2)) (std::vector<long>{long) 4, (long) 4}) དཔེ་གཞི་ ༣: >>> maximum(std::vector<long>{long} -3, (long) 2, (long) 1, (long) 2, (long) -1, (long) -2, (long) 1}) (1) (std::vector<long>) ཕྲང་ལམ་: ༡. ཕྲང་ལམ་གྱི་རིང་ཚད་འདི་ ཕྲང་ལམ་གྱི་མཐའ་མཚམས་ནང་ཡོད་སའི་མཐའ་མཚམས་ནང་ཡོད་ནི་ཨིན། ཟུར་ཐིག་གི་རིང་ཚད་འདི་ ༡,༠༠༠ ལུ་ཡོད་འོང་། ཟུར་ཐིག་གི་མཐའ་མཚམས་ནང་ ཕྲང་ལམ་འདི་ ༣,༠,༡༠༠ ལུ་ཡོད་འོང་།
std::vector<long> maximum(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> maximum(std::vector<long> arr, long k) {
  std::sort(arr.rbegin(), arr.rend());
  std::vector<long> result;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    result.push_back(arr[i]);
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = maximum;
    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));
    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));
    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));
    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));
    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));
}
"
HumanEval/121,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཆ་མཉམ་ལས་མེད་མི་ ཝི་ཅཊར་ཅིག་བྱིན་པ་ཅིན་ གནས་རིམ་གཉིས་པ་ནང་ཡོད་པའི་ དབྱེ་བ་མེད་པའི་ཆ་ཤས་ག་ར་བསྡོམས་ཏེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་ཚུ་ >>> ཐབས་ལམ་((std::vector<long>({long) 5, (long) 8, (long) 7, (long) 1}))) (12) >>> ཐབས་ལམ་(((std::vector<long>({long) 3, (long) 3, (long) 3, (long) 3}))) (9) >>> ཐབས་ལམ་((std::vector<long>({long) 30, (long) 13, (long) 24, (long) 321}))) (0)
long solution(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long solution(std::vector<long> lst) {
  long sum = 0;
  for (long i = 0; i < lst.size(); i += 2) {
    if (lst[i] % 2 != 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = solution;
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));
    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));
    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));
    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));
}
"
HumanEval/122,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་བུམ་ arr དང་ ཨང་གྲངས་ཧྲིལ་བུམ་ k ཚུ་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་ k གི་ཨང་གྲངས་ཐོག་མ་ལས་ཨང་གྲངས་གཉིས་ལས་ལྷག་སྟེ་ཡོད་པའི་ ཨེ་རེ་ཚུ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> add_elements((std::vector<long>({long) 111, (long) 21, (long) 3, (long) 4000, (long) 5, (long) 6, (long) 7, (long) 8, (long) 9})), (4)) (24) ཚད་འཛིན་ཚུ་: ༡. ༡ <= len(arr) <= ༡༠༠ ༢. ༡ <= k <= lenarr)
long add_elements(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
long add_elements(std::vector<long> arr, long k) {
  long sum = 0;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    if (arr[i] >= -99 && arr[i] <= 99) {
      sum += arr[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add_elements;
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));
    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));
    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));
    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));
    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));
}
"
HumanEval/123,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གྲུབ་འབྲས་འདི་ ནུས་ལྡན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཨང་གྲངས་རྣམ་རྟོག་མེད་མི་ཚུ་ ཀོ་ལ་ཊ་ཛརིམ་པ་བཞིན་དུ་ཡོད་མི་ཚུ་ སླར་ལོག་འབདཝ་ཨིན། ཀོ་ལ་ཊ་ཛའཆར་གཞི་འདི་ རྩིས་ཀྱི་འཆར་གཞི་ཅིག་ཨིནམ་ད་ དེ་ཡང་ འོག་གི་བཟུམ་སྦེ་ དབྱེ་ཞིབ་འབད་ཡོད་པའི་རིམ་པ་ཅིག་ལས་འགོ་བཙུགས་ཏེ་ཨིན། དེ་ལས་རིམ་པ་རེ་རེ་བཞིན་དུ་ ཧེ་མའི་རིམ་པ་ལས་ འཐོབ་ནི་ཨིནམ་ད་ ཧེ་མའི་རིམ་པ་འདི་ཆ་སྙོམས་ཨིན་པ་ཅིན་ ཤུལ་མའི་རིམ་པ་འདི་ ཧེ་མའི་རིམ་པ་ཕྱེད་ཀ་ཨིན། ཧེ་མའི་རིམ་པ་འདི་ དབྱེ་བ་ཨིན་པ་ཅིན་ ཤུལ་མའི་རིམ་པ་འདི་ ཧེ་མའི་རིམ་པ་ལས་ ༣ ཚུན་དང་ ༡ སྦེ་བསྡོམས་འོང་། གྲུབ་འབྲས་འདི་ n གི་གནས་གོང་ག་དེ་ཅིག་ཨིན་རུང་རིམ་པ་འདི་ ཨ་རྟག་ར་ ༡ ལུ་ལྷོད་འོང་། དྲན་པ་: ༡ ཀོ་ལ་ཊ་ཛ (༡) འདི་ [1] ༢ སླར་ལོག་འབད་མི་བེ་ཊར་དེ་ ཡར་སེང་རིམ་པ་བཞིན་དུ་ སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: get_odd_collatz (༥) གིས་ [༥,༨,༡༦,༤,༢,༡] སླར་ལོག་འབད་ཡོད་པའི་བེ་ཊར་དེ་ ༥ དང་ ༥་ལས་བརྒལ་མེདཔ་ཨིན། >>>_collatz (༥) (st vector:d<< (long) (long) {(((1) }
std::vector<long> get_odd_collatz(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> get_odd_collatz(long n) {
  std::vector<long> odd_numbers;
  std::unordered_set<long> seen;
  long current = n;
  while (seen.find(current) == seen.end()) {
    seen.insert(current);
    if (current % 2 != 0) {
      odd_numbers.push_back(current);
    }
    if (current == 1) {
      break;
    }
    if (current % 2 == 0) {
      current /= 2;
    } else {
      current = 3 * current + 1;
    }
  }
  std::sort(odd_numbers.begin(), odd_numbers.end());
  return odd_numbers;
}","}
int main() {
    auto candidate = get_odd_collatz;
    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));
    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
}
"
HumanEval/124,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ལས་འགན་ཅིག་འབྲི་དགོཔ་ཨིན་ དེ་ཡང་ ཚེས་གྲངས་ཐིག་ཁྲམ་ཅིག་ལུ་ ཆ་གནས་འབད་ཞིནམ་ལས་ ཚེས་གྲངས་དེ་ ཆ་གནས་ཡོད་པ་ཅིན་བདེན་པ་སྦེ་ལོག་གཏང་ནི་དང་ དེ་མེན་པ་ཅིན་རྫུས་མ་སྦེ་ལོག་གཏང་དགོ། ཚེས་གྲངས་དེ་ ཆ་གནས་འབད་དགོཔ་ཨིན་པ་ཅིན་ འོག་གི་བཀོད་རྒྱ་ཚུ་ཆ་མཉམ་ར་ཆ་བཞག་དགོ། ཚེས་གྲངས་ཐིག་ཁྲམ་འདི་ སྟོངམ་མེདཔ་ཨིན། ཚེས་གྲངས་ཀྱི་གྱངས་ཁ་དེ་ ཟླཝ་ ༡,༣,༥,༧,༨,༡༠,༡༢ གི་དོན་ལུ་ ཉིན་གྲངས་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༡ ལས་མང་བ་མེན་པའི་ཁར་ ཟླཝ་ ༤,༦,༩,༡༡ གི་དོན་ལུ་ ཉིན་གྲངས་ཀྱི་གྱངས་ཁ་དེ་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༠ ལས་མང་བ་མེན་པའི་ཁར་ ཟླཝ་ ༢ གི་དོན་ལུ་ ཉིན་གྲངས་ཀྱི་གྱངས་ཁ་དེ་ ༡ ལས་ཉུང་ ཡང་ན་ ༢༩ ལས་མང་བ་མེན་པའི་ཁར་ ཟླཝ་ ༡ ལས་ཉུང་ ཡང་ན་ ༡ ལས་མང་བ་མེན་པའི་ཁར་ ཚེས་གྲངས་དེ་ ཐོ་བཀོད་ནང་བཀོད་ཡོད་པའི་ནང་དགོཔ་ཨིན།: mm-dd-yyyy >>> valid_(date((༡༠-༡-༢༠༠༠"")) (བདེན་པ་ >>> valid_date(༡༥-༠-༢༠༡༢༡-༢༠༠༡) (རྫུས་མ་) >>> valid_(༡-༠-༢༠༠-༢༠༠) (བདེན་པ་ >>> valid_༠-༠༦-༢༠༠)
bool valid_date(std::string date) {
","#include<assert.h>
#include<bits/stdc++.h>
bool valid_date(std::string date) {
  if (date.empty()) {
    return false;
  }
  if (date.length() != 10 || date[2] != '-' || date[5] != '-') {
    return false;
  }
  int month, day, year;
  try {
    month = std::stoi(date.substr(0, 2));
    day = std::stoi(date.substr(3, 2));
    year = std::stoi(date.substr(6, 4));
  } catch (const std::invalid_argument& e) {
    return false;
  } catch (const std::out_of_range& e) {
    return false;
  }
  if (month < 1 || month > 12) {
    return false;
  }
  if (day < 1) {
    return false;
  }
  if (month == 2) {
    if (day > 29) {
      return false;
    }
  } else if (month == 4 || month == 6 || month == 9 || month == 11) {
    if (day > 30) {
      return false;
    }
  } else {
    if (day > 31) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = valid_date;
    assert(candidate((""03-11-2000"")) == (true));
    assert(candidate((""15-01-2012"")) == (false));
    assert(candidate((""04-0-2040"")) == (false));
    assert(candidate((""06-04-2020"")) == (true));
    assert(candidate((""01-01-2007"")) == (true));
    assert(candidate((""03-32-2011"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""04-31-3000"")) == (false));
    assert(candidate((""06-06-2005"")) == (true));
    assert(candidate((""21-31-2000"")) == (false));
    assert(candidate((""04-12-2003"")) == (true));
    assert(candidate((""04122003"")) == (false));
    assert(candidate((""20030412"")) == (false));
    assert(candidate((""2003-04"")) == (false));
    assert(candidate((""2003-04-12"")) == (false));
    assert(candidate((""04-2003"")) == (false));
}
"
HumanEval/125,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// ཚིག་ཡིག་ཐིག་ཁྲམ་ཅིག་བྱིན་པ་ཅིན་ ཚིག་ཡིག་གི་བེ་ཀཊར་ཅིག་སླར་ལོག་འབད་དགོ་ ཁྱོད་ཀྱིས་དཀར་ཆག་ནང་དབྱེ་བ་ཅིན་ ཚིག་ཡིག་ནང་དཀར་ཆག་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ','ལུ་དབྱེ་དགོ་ ཁྱོད་ཀྱིས་ ཀམ་པ་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཨེབ་རྟ་ནང་ཡིག་འབྲུ་ཆུང་བའི་གྱངས་ཁ་འདི་ གྱངས་ཁ་མ་མཚུངས་པའི་རིམ་པ་གིས་སླར་ལོག་འབད་དགོ་ ord{""a"") = 0, ord{""b"") = 1, ... ord{""z"") = 25 དཔེ་གཞི་ཚུ་ >>> split_words{""Hello world!"")) std::vector<std::string>(({""Hello world!"")) >>> split_words{""Hello, world!"")) std::vector<std::string>{""Hello"", (std::string) ""}) >>> split_words{""def"") 3
Union_std_vector_std_string__long split_words(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;
    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_vector_std_string__long split_words(std::string txt) {
  if (txt.find(' ') != std::string::npos) {
    std::vector<std::string> words;
    std::stringstream ss(txt);
    std::string word;
    while (ss >> word) {
      words.push_back(word);
    }
    return Union_std_vector_std_string__long(words);
  } else if (txt.find(',') != std::string::npos) {
    std::vector<std::string> words;
    std::string current_word;
    for (char c : txt) {
      if (c == ',') {
        words.push_back(current_word);
        current_word = """";
      } else {
        current_word += c;
      }
    }
    words.push_back(current_word);
    return Union_std_vector_std_string__long(words);
  } else {
    long odd_order_count = 0;
    for (char c : txt) {
      if (islower(c)) {
        if ((c - 'a') % 2 != 0) {
          odd_order_count++;
        }
      }
    }
    return Union_std_vector_std_string__long(odd_order_count);
  }
}","}
int main() {
    auto candidate = split_words;
    assert(candidate((""Hello world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello,world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello world,!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world,!""}));
    assert(candidate((""Hello,Hello,world !"")) == std::vector<std::string>({(std::string)""Hello,Hello,world"", (std::string)""!""}));
    assert(candidate((""abcdef"")) == 3);
    assert(candidate((""aaabb"")) == 2);
    assert(candidate((""aaaBb"")) == 1);
    assert(candidate(("""")) == 0);
}
"
HumanEval/126,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཚུ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཡར་སེང་གི་རིམ་པ་ནང་དབྱེ་བ་ཕྱེ་རུང་ལོག་གཏང་། ཨང་གྲངས་གཅིག་ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ རྫུན་ལོག་གཏང་། ནེ་གེ་རེ་ཨང་གྲངས་དང་ ཨང་གྲངས་ཧྲིལ་བུམ་རྐྱངམ་ཅིག་ཨིན་པའི་ངེས་འཛིན་རྐྱབས། དཔེར་ན་ >>> is_sorted (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)
bool is_sorted(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_sorted(std::vector<long> lst) {
  if (lst.size() <= 1) {
    return true;
  }
  std::map<long, int> counts;
  for (long x : lst) {
    counts[x]++;
  }
  for (auto const& [key, val] : counts) {
    if (val > 2) {
      return false;
    }
  }
  for (size_t i = 0; i < lst.size() - 1; ++i) {
    if (lst[i] > lst[i + 1]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_sorted;
    assert(candidate((std::vector<long>({(long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));
}
"
HumanEval/127,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་བར་སྟོང་གཉིས་ཐོབ་ཡོདཔ་དང་ འདི་ནང་ལུ་བར་སྟོང་རེ་རེ་འདི་ ཨང་གྲངས་ཆ་མཉམ་ཨིན། དཔེར་ན་ བར་སྟོང་ = (འགོ་བཙུགས་,མཇུག་) = (1, 2) ཟེར་ཡོདཔ་ཨིན། བར་སྟོང་འདི་བསྡམས་ཡོདཔ་ལས་ བར་སྟོང་ (འགོ་བཙུགས་,མཇུག་) འདི་ འགོ་བཙུགས་དང་མཇུག་གཉིས་ཆ་ར་ཚུད་དེ་ཡོདཔ་ཨིན། བར་སྟོང་རེ་རེ་ལུ་ འདི་གི་འགོ་འདི་ཉུང་བ་ ཡང་ན་མཇུག་དང་འདྲན་འདྲ་སྦེ་ར་ཆ་བཞག་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ བར་སྟོང་གཉིས་ཀྱི་བར་སྟོང་གི་ཕྲང་ཚད་དེ་ ཨང་གྲངས་ངོ་མ་ཨིན་ན་མེན་ན་འདི་གཏན་ཁེལ་འབད་དགོཨིན། དཔེར་ན་ བར་སྟོང་ (1, 3), (2, 4) གི་བར་སྟོང་གི་ཕྲང་ཚད་འདི་ (2, 3) འདི་ཡང་ བར་སྟོང་གི་ཕྲང་ཚད་དེ་ 1ཨིནམ་དང་དེ་ཡང་ བར་སྟོང་གི་ཕྲང་ཚད་མེན་ན། གལ་སྲིད་བར་སྟོང་གི་ཕྲང་ཚད་དེ་ ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ ""YES""ལོག་གཏང་། དེ་མེན་པ་ཅིན་ ""NO""ལོག་གཏང་། གལ་སྲིད་བར་སྟོང་གཉིས་དེ་ཅིག་ཁར་མ་བསྡོམས་པ་ཅིན་ ""NO""ལོག་གཏང་། [input/output] དཔེ་གཞི་འདི་: >>> intersection::((dmake_tuple1,((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
  long start1 = std::get(interval1);
  long end1 = std::get(interval1);
  long start2 = std::get(interval2);
  long end2 = std::get(interval2);
  long intersection_start = std::max(start1, start2);
  long intersection_end = std::min(end1, end2);
  long intersection_length = intersection_end - intersection_start + 1;
  if (intersection_length <= 0) {
    return ""NO"";
  }
  if (is_prime(intersection_length)) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = intersection;
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (""NO""));
    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (""NO""));
    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (""YES""));
    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (""YES""));
    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (""NO""));
    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (""NO""));
}
"
HumanEval/128,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ ཝི་ཅཊར་ ཨེ་རེ་ཅིག་ཐོབ་སྟེ་ ཁྱོད་ཀྱིས་ ཝི་ཅཊར་ནང་ ཨང་གྲངས་རེ་རེ་ལུ་ རྟགས་མཚན་གྱི་འབྲས་བུ་ཚུ་དང་བསྡོམས་ཏེ་ ཨེ་རེ་ཆ་མཉམ་ལུ་ ཨང་གྲངས་ ༡ དང་ ༡ དང་ ༠ སྦེ་བཙུག་སྟེ་ལོག་གཏང་དགོ་པའི་དྲན་གསོ་: སྟོངམ་ཨིན་པའི་ཨེ་རེ་གི་དོན་ལུ་ལོག་གཏང་མི་མིན་འདུག དཔེར་ན་: >>> prod_signs(((std::vector<long>{(long) 1, (long) 2, (long) 2, (long) -4)))) 9 >>> prod_signs(std::vector<long>({(long) 0, (long) 1}))) 0 >>> prod_signs((std::vector<long>(())) std::nopt
std::optional<long> prod_signs(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> prod_signs(std::vector<long> arr) {
  if (arr.empty()) {
    return std::nullopt;
  }
  long sum_magnitudes = 0;
  long product_of_signs = 1;
  for (long num : arr) {
    sum_magnitudes += std::abs(num);
    if (num > 0) {
      product_of_signs *= 1;
    } else if (num < 0) {
      product_of_signs *= -1;
    } else {
      product_of_signs *= 0;
    }
  }
  return sum_magnitudes * product_of_signs;
}","}
int main() {
    auto candidate = prod_signs;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);
}
"
HumanEval/129,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གྲལ་ཐིག་ནང་གྲལ་ཐིག་དང་ཐིག་ཁྲམ་ (N >=2) དང་ ནུས་པ་ཅན་གྱི་ཧྲིལ་ཨང་ k ཡོད་པའི་སྐབས་ གྲལ་ཐིག་གི་སྒོ་སྒྲིག་རེ་རེ་ནང་ གནས་གོང་ཅིག་ཡོདཔ་ཨིན། [༡, N * N] ནང་ཡོད་པའི་ཧྲིལ་ཨང་རེ་རེ་ལུ་ གྲལ་ཐིག་གི་སྒོ་སྒྲིག་ནང་ལུ་ ཚར་གཅིག་རང་འོང་འོང་། ཁྱོད་ཀྱིས་ གྲལ་ཐིག་ནང་རིང་ཚད་ k གི་ཉུང་མཐའ་ལམ་འདི་འཚོལ་དགོཔ་ཨིན། ཁྱོད་ཀྱིས་སྒོ་སྒྲིག་གང་རུང་ལས་འགོ་བཙུགསཔ་ཨིན། དེ་ལས་རིམ་པ་རེ་ནང་ ཁྱོད་ཀྱིས་ སྦོ་ལོགས་ཁར་ཡོད་པའི་སྒོ་སྒྲིག་ཚུ་གང་རུང་ནང་འགྱོ་ཚུགས། གཞན་སྐད་ཅིག་ནང་འབད་བ་ཅིན་ ཁྱོད་ཀྱིས་ ཕྲང་ལམ་ k གི་རིང་ཚད་འདི་ ཀ་མིག་ (ཁྱད་པར་ཅན་མིན་འདུག་) ཚུ་ནང་འགྱོ་དགོཔ་ཨིན། ཁྱོད་ཀྱིས་ གྲལ་ཐིག་ནང་ལས་འཐོན་མི་ཚུགས། ལམ་རིམ་ A (རིང་ཚད་ k) འདི་ལམ་རིམ་ B (རིང་ཚད་ k) ལས་ཆུང་བ་སྦེ་བརྩི་ནི་ཨིན་པ་ཅིན་ A དང་ B (འ་ནཱི་ལུ་ l_stA དང་ l_stB) ཟེར་མིང་བཏགས་ཞིནམ་ལས་ ཕྲང་ལམ་འདི་ j_stAདང་ l_stBལས་ཆུང་བ་ཨིན། ཚིག་ཡིག་གི་ཐད་ལས་འབད་བ་ཅིན་ j_stBལས་ཆུང་བ་ཨིན། གཞན་སྐད་ཅིག་ནང་འབད་བ་ཅིན་ j_stB=i[A <=i] i=1 ཨིནམ་དང་ འདི་བཟུམ་མའི་ཨང་གྲངས་ཀྱི་མཐའ་བསྡོམས་རྟགས་འདི་ཡོད་མེད་མེད་མེད་པ་ཅིན་ གྲལ་ཐིག་ཁྲམ་ལས་ལོག་འགྱོ་མི་ཚུགས།
std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
  int n = grid.size();
  std::vector<long> min_path;

  std::function<void(int, int, std::vector<long>)> dfs = 
    [&](int row, int col, std::vector<long> current_path) {
    if (current_path.size() == k) {
      if (min_path.empty() || current_path < min_path) {
        min_path = current_path;
      }
      return;
    }

    current_path.push_back(grid[row][col]);

    int dr= {-1, 1, 0, 0};
    int dc= {0, 0, -1, 1};

    for (int i = 0; i < 4; ++i) {
      int next_row = row + dr[i];
      int next_col = col + dc[i];
      if (next_row >= 0 && next_row < n && next_col >= 0 && next_col < n) {
        dfs(next_row, next_col, current_path);
      }
    }
  };

  for (int start_row = 0; start_row < n; ++start_row) {
    for (int start_col = 0; start_col < n; ++start_col) {
      dfs(start_row, start_col, {});
    }
  }

  return min_path;
}","}
int main() {
    auto candidate = minPath;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
}
"
HumanEval/130,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// རྩིས་རིག་པ་ཚུ་གིས་ དུས་རབས་གཉིས་དང་པའི་ནང་ ཚད་འཛིན་འབད་ཡོད་པའི་ ཕི་བོ་ན་ཅིའི་རིམ་པ་ཚུ་ ག་ར་གིས་ཤེས་དོ་ཡོདཔ་ད་ ཨིན་རུང་ མི་སེར་ཚུ་གིས་ མ་ཤེས་མི་དེ་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ཚུ་ཨིན། ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ཚུ་ ཤུལ་མམ་སྦེ་ར་ ངེས་འཛིན་འབད་དོ་ཡོདཔ་ད་ དཔེར་ན་: tri(1) = 3 tri(n) = 1 + n / 2 གལ་སྲིད་ n འདི་ཆ་སྙོམས་ཨིན་པ་ཅིན་ tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) གལ་སྲིད་ n འདི་ཆ་སྙོམས་ཨིན་པ་ཅིན་ དཔེར་ན་: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ཁྱོད་ལུ་ ནུས་མེད་ཨང་གྲངས་ཨང་གྲངས་ n ཅིག་བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ལས་ དང་པ་ n + 1 གི་ ཝི་ཅེཊར་ཅིག་ལོག་གཏང་དགོཔ་ཨིན། དཔེར་ན་: >>> tri(3) (dst vector long><<(({) (long1, (long3, (long2, long8})
std::vector<long> tri(long n) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> tri(long n) {
  std::vector<long> result;
  if (n >= 0) {
    result.push_back(1);
  }
  if (n >= 1) {
    result.push_back(3);
  }
  for (long i = 2; i <= n; ++i) {
    if (i % 2 == 0) {
      result.push_back(1 + i / 2);
    } else {
      if (i - 1 >= 0 && i - 2 >= 0 && i + 1 <= n)
      {
          result.push_back(result[i-1] + result[i-2] + result[i]);
      }
      else if (i - 1 >= 0 && i - 2 >= 0)
      {
          result.push_back(result[i-1] + result[i-2]);
      }
      else if (i - 1 >= 0)
      {
          result.push_back(result[i-1]);
      }
      else
      {
          result.push_back(0);
      }
    }
  }
  return result;
}","}
int main() {
    auto candidate = tri;
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));
    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));
    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));
    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));
    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));
    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));
    assert(candidate((0)) == (std::vector<long>({(long)1})));
    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));
}
"
HumanEval/131,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཚངམ་ཅིག་ཐོབ་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་གྱི་གྱངས་ཁ་འདི་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་ཆ་མཉམ་འདི་ཆ་མཉམ་ཨིན་པ་ཅིན་ ༠ སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> ཨང་གྲངས་ཚུ་ (༡) (༡) >>> ཨང་གྲངས་ཚུ་ (༤) (༠) >>> ཨང་གྲངས་ཚུ་ (༢༣༥) (༡༥)
long digits(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long digits(long n) {
  long product = 1;
  std::string s = std::to_string(n);
  bool has_odd = false;
  for (char c : s) {
    long digit = c - '0';
    if (digit % 2 != 0) {
      product *= digit;
      has_odd = true;
    }
  }
  if (!has_odd) {
    return 0;
  }
  return product;
}","}
int main() {
    auto candidate = digits;
    assert(candidate((5)) == (5));
    assert(candidate((54)) == (5));
    assert(candidate((120)) == (1));
    assert(candidate((5014)) == (5));
    assert(candidate((98765)) == (315));
    assert(candidate((5576543)) == (2625));
    assert(candidate((2468)) == (0));
}
"
HumanEval/132,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ནང་ཐིག་ནང་ ཀེར་ཐིག་གི་ལྡེ་མིག་རྐྱངམ་ཅིག་ཡོད་མི་ལུ་བརྟེན་ ཀེར་ཐིག་གི་ལྡེ་མིག་འདི་ནང་ཐིག་སྦེ་ལེན་པའི་ལས་འགན་ཅིག་བཟོ། ལས་འགན་འདི་བདེན་པའི་ལྡེ་མིག་འདི་ འཐོབ་དགོཔ་ཨིན། གལ་སྲིད་དང་རྐྱངམ་ཅིག་ འཐོབ་པ་ཅིན་ འཐོབ་ཐངས་ནང་ལྡེ་མིག་ཅིག་རང་ཡོད་པ་ཅིན་ཨིན། >>> is_nested((""[[]]"")) (true) >>> is_nested((""[]]]]]]]][[[[[]"")) (false) >>> is_nested(""[][]"")) (false) >>> is_nested(""[]"") (false) >>> is_nested""[[]]]]"") (true) >>> is_nested(""[[]]"") (true)
bool is_nested(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_nested(std::string string) {
  int balance = 0;
  bool nested = false;
  for (char c : string) {
    if (c == '[') {
      balance++;
    } else if (c == ']') {
      if (balance > 1) {
        nested = true;
      }
      balance--;
      if (balance < 0) {
        return false;
      }
    }
  }
  return balance == 0 && nested;
}","}
int main() {
    auto candidate = is_nested;
    assert(candidate((""[[]]"")) == (true));
    assert(candidate((""[]]]]]]][[[[[]"")) == (false));
    assert(candidate((""[][]"")) == (false));
    assert(candidate((""[]"")) == (false));
    assert(candidate((""[[[[]]]]"")) == (true));
    assert(candidate((""[]]]]]]]]]]"")) == (false));
    assert(candidate((""[][][[]]"")) == (true));
    assert(candidate((""[[]"")) == (false));
    assert(candidate((""[]]"")) == (false));
    assert(candidate((""[[]][["")) == (true));
    assert(candidate((""[[][]]"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""[[[[[[[["")) == (false));
    assert(candidate((""]]]]]]]]"")) == (false));
}
"
HumanEval/133,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཨང་གྲངས་ཀྱི་བེ་ཀཊར་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱིས་བེ་ཀཊར་ནང་ཡོད་པའི་ཨང་གྲངས་གྲུ་བཞི་གི་བསྡོམས་ལོག་གཏང་དགོ་ དེ་ལས་བེ་ཀཊར་གྱི་ཆ་ཤས་རེ་རེ་ལུ་ཡར་མཐོ་སའི་ int{(Ceiling}ལུ་ཡར་འཁོར་གཏང་དགོ། དཔེ་གཞི་: >>> lst{((std::vector<float>{(float) 1.0f, (float) 2.0f, (float) 3.0f}))) (14) >>> lst{((std::vector<float>{(float) 1.0f, (float) 4.0f, (float) 9.0f}))) (98) lst{(std::vector<float>{(float) 1.0f, (float) 3.0f, (float) 5.0f, (float) 7.0f} (84) >>> lst{(std::vector<float>{{(float) 1.4f, (float) 2.4.0f, (float) 2.0.0f} (6) >>> lst{(((vector<float>{(float} (1.1.0f, (float) 2.4.0f)) (6)
long sum_squares(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_squares(std::vector<float> lst) {
  long sum = 0;
  for (float num : lst) {
    long rounded_up = std::ceil(num);
    sum += rounded_up * rounded_up;
  }
  return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));
    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));
    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));
    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));
    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));
}
"
HumanEval/134,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གྲལ་ཐིག་གི་མཇུག་གི་ཡིག་འབྲུ་འདི་ ཨེཕ་བི་གི་ཡིག་འབྲུ་ཅིག་ཨིན་པ་ཅིན་ true སླར་ལོག་འབད་ཞིནམ་ལས་ རྫུན་ཁ་བཟེད་དེ་གཏང་། དཔེར་ན་: >>> check_if_last_char_is_a_letter (((""apple pie"")) (རྫུས་མ་) >>> check_if_last_char_is_a_letter ((""apple pi e"") (བདེན་པ་) >>> check_if_last_char_is_a_letter ((""apple pi e"") (རྫུས་མ་) >>> check_if_last_char_is_a_letter (((""apple pi e"") (རྫུས་མ་)
bool check_if_last_char_is_a_letter(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_if_last_char_is_a_letter(std::string txt) {
  if (txt.empty()) {
    return false;
  }
  if (!isalpha(txt.back())) {
    return false;
  }
  if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {
    return false;
  }
  return true;
}","}
int main() {
    auto candidate = check_if_last_char_is_a_letter;
    assert(candidate((""apple"")) == (false));
    assert(candidate((""apple pi e"")) == (true));
    assert(candidate((""eeeee"")) == (false));
    assert(candidate((""A"")) == (true));
    assert(candidate((""Pumpkin pie "")) == (false));
    assert(candidate((""Pumpkin pie 1"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""eeeee e "")) == (false));
    assert(candidate((""apple pie"")) == (false));
    assert(candidate((""apple pi e "")) == (false));
}
"
HumanEval/135,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// རྩ་སྒྲིག་ཅིག་བཟོ་ཞིནམ་ལས་ དེ་གི་ཧེ་མར་ཡོད་པའི་ རྩ་སྒྲིག་འདི་དང་ སྦོམ་ཤོས་ ཡང་ན་ འདྲན་འདྲ་མེད་པའི་ རྩ་སྒྲིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན། རྩ་སྒྲིག་དེ་མེད་པ་ཅིན་ -༡ སླར་ལོག་འབདཝ་ཨིན། བྱིན་ཡོད་པའི་ ཝི་ཅཱཊ་འདི་གིས་ གནས་གོང་གཉིས་མི་འདྲ་བའི་གནས་གོང་ཚུ་མི་ཚུད་འོང་། དཔེ་འབད་བ་ཅིན་: >>> can_arrange(((std::vector<long>({long) 1, (long) 2, (long) 4, (long) 3, (long) 5}))) (3) >>> can_arrange((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (-1)
long can_arrange(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long can_arrange(std::vector<long> arr) {
  for (long i = 1; i < arr.size(); ++i) {
    if (arr[i] < arr[i - 1]) {
      return i;
    }
  }
  return -1;
}","}
int main() {
    auto candidate = can_arrange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));
    assert(candidate((std::vector<long>())) == (-1));
}
"
HumanEval/136,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// 'a'འདི་ ནུས་མེད་ཨང་གྲངས་ཚུ་གི་གྲས་ལས་སྦོམ་ཤོས་དང་ 'b'འདི་ ཝེ་ཀཊར་ནང་གི་ ནུས་མེད་ཨང་གྲངས་ཚུ་གི་གྲས་ལས་ཆུང་ཤོས་ཨིནམ་ལས་ ཝེ་ཀཊར་ (a, b) ཚུ་སླར་ལོག་འབདཝ་ཨིན། ནུས་མེད་ཡང་ན་ ནུས་མེད་ཨང་གྲངས་ཚུ་མེད་པ་ཅིན་ ནུས་མེད་སྦེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> largest_smallest_integers(((std::vector<long>{long) 2, (long) 4, (long) 1, (long) 3, (long) 5, (long) 7))) std::make_tuplestd::optional<long>{long>), std::optional<long> (long) 1) >>> largest_smallest_integers((std::vector<long> (long)) std::vector<long> (long)
std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<tuple>
#include<vector>

std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
    std::optional<long> largest_negative = std::nullopt;
    std::optional<long> smallest_positive = std::nullopt;
    for (long num : lst) {
        if (num < 0) {
            if (!largest_negative.has_value() || num > largest_negative.value()) {
                largest_negative = num;
            }
        } else if (num > 0) {
            if (!smallest_positive.has_value() || num < smallest_positive.value()) {
                smallest_positive = num;
            }
        }
    }
    return std::make_tuple(largest_negative, smallest_positive);
}","}
int main() {
    auto candidate = largest_smallest_integers;
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));
    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));
    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));
}
"
HumanEval/137,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};
// ལས་འགན་ཅིག་བཟོ་ཞིནམ་ལས་ ཨང་གྲངས་ཧྲིལ་བུམ་དང་ floats ཡང་ན་ string གིས་ཨང་གྲངས་ངོ་མ་འདི་ངོ་ཚབ་འབད་ཞིནམ་ལས་ སྦོམ་ཤོས་དེ་སླར་ལོག་འབདཝ་ཨིན། གནས་གོང་ཚུ་འདྲན་འདྲ་ཡོད་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། དྲན་པ་བཟོ་ནི། ཨང་གྲངས་ངོ་མ་ཅིག་ string སྦེ་ངོ་ཚབ་འབད་བ་ཅིན་ འཁྱིལ་འགྱོ་བའི་གནས་གོང་འདི་ . ཡང་ན་ , >>> compare_one(1, 2.5f) 2.5f >>> compare_one(1, ""2,3"") ""2,3"" >>> compare_one(""5,1"", ""6"") ""6"" >>> compare_one(""1"", 1) std::nullopt
Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<string>

union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;
    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;
    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};

double parse_real(const std::string& s) {
    std::string temp = s;
    std::replace(temp.begin(), temp.end(), ',', '.');
    try {
        return std::stod(temp);
    } catch (const std::invalid_argument& e) {
        return std::numeric_limits<double>::quiet_NaN();
    } catch (const std::out_of_range& e) {
        return std::numeric_limits<double>::quiet_NaN();
    }
}

Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
    if (a.f2.empty() && b.f2.empty()) {
        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {
            if (a.f0 > b.f0) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f0 > a.f0) return Union_long_float_std_string_std_nullopt(b.f0);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {
            if (a.f1 > b.f1) return Union_long_float_std_string_std_nullopt(a.f1);
            if (b.f1 > a.f1) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f0) == typeid(long) && typeid(b.f1) == typeid(float)) {
            if (static_cast<float>(a.f0) > b.f1) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f1 > static_cast<float>(a.f0)) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f0) == typeid(long)) {
            if (a.f1 > static_cast<float>(b.f0)) return Union_long_float_std_string_std_nullopt(a.f1);
            if (static_cast<float>(b.f0) > a.f1) return Union_long_float_std_string_std_nullopt(b.f0);
        }
    } else {
        double val_a, val_b;
        if (!a.f2.empty()) val_a = parse_real(a.f2);
        else if (typeid(a.f0) == typeid(long)) val_a = static_cast<double>(a.f0);
        else val_a = static_cast<double>(a.f1);

        if (!b.f2.empty()) val_b = parse_real(b.f2);
        else if (typeid(b.f0) == typeid(long)) val_b = static_cast<double>(b.f0);
        else val_b = static_cast<double>(b.f1);

        if (!std::isnan(val_a) && !std::isnan(val_b)) {
            if (val_a > val_b) return Union_long_float_std_string_std_nullopt(a);
            if (val_b > val_a) return Union_long_float_std_string_std_nullopt(b);
        }
    }
    return Union_long_float_std_string_std_nullopt(std::nullopt{});
}","}
int main() {
    auto candidate = compare_one;
    assert(candidate(1, 2) == 2);
    assert(candidate(1, 2.5f) == 2.5f);
    assert(candidate(2, 3) == 3);
    assert(candidate(5, 6) == 6);
    assert(candidate(1, ""2,3"") == ""2,3"");
    assert(candidate(""5,1"", ""6"") == ""6"");
    assert(candidate(""1"", ""2"") == ""2"");
    assert(candidate(""1"", 1) == std::nullopt);
}
"
HumanEval/138,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// དཔེ་གཞི་འདི་ >>> is_equal_to_sum_even ((4)) (རྫུས་མ་) >>> is_equal_to_sum_even ((6)) (རྫུས་མ་) >>> is_equal_to_sum_even ((8) (བདེན་པ་)
bool is_equal_to_sum_even(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_equal_to_sum_even(long n) {
    if (n <= 6 || n % 2 != 0) {
        return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_equal_to_sum_even;
    assert(candidate((4)) == (false));
    assert(candidate((6)) == (false));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (true));
    assert(candidate((11)) == (false));
    assert(candidate((12)) == (true));
    assert(candidate((13)) == (false));
    assert(candidate((16)) == (true));
}
"
HumanEval/139,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Brazil གི་གནས་གོང་འདི་ brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! འདི་ནང་ལུ་ n > 0 དཔེར་ན་: >>> special_factorial (((4)) (288) ལས་འགན་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་རྩིས་སྟོན་འབད་ཡོདཔ་དང་ འདི་ལུ་ གནས་གོང་འདི་ནང་གི་གནས་གོང་འདི་སླར་ལོག་འབད་དགོཔ་ཨིན།
long special_factorial(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long factorial(long k) {
    long res = 1;
    for (long i = 2; i <= k; ++i) {
        res *= i;
    }
    return res;
}

long special_factorial(long n) {
    if (n <= 0) {
        return 1;
    }
    long result = 1;
    for (long i = 1; i <= n; ++i) {
        result *= factorial(i);
    }
    return result;
}","}
int main() {
    auto candidate = special_factorial;
    assert(candidate((4)) == (288));
    assert(candidate((5)) == (34560));
    assert(candidate((7)) == (125411328000));
    assert(candidate((1)) == (1));
}
"
HumanEval/140,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཚིག་ཡིག་ཡིག་སྣོད་ཅིག་བྱིན་པ་ཅིན་ ནང་འཁོད་ས་སྒོ་ག་ར་ འོག་ལུ་ཡོད་མི་ཡིག་འབྲུ་ཚུ་དང་ཚབ་བཙུགས། དེ་ལས་ ཚིག་ཡིག་སྣོད་ཅིག་ནང་ ཤུལ་མམ་གྱི་ས་སྒོ་གཉིས་ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ ཤུལ་མམ་གྱི་ས་སྒོ་ག་ར་ - >>> fix_spaces ((("" Example"")) (""Example"") >>> fix_spaces (((""Example 1"")) (""Example_1"") >>> fix_spaces (((""Example 2"")) (""_Example_2"") >>> fix_spaces (((""Example 3"")) (""_Example-3"")
std::string fix_spaces(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string fix_spaces(std::string text) {
    std::string result = """";
    int space_count = 0;
    for (char c : text) {
        if (c == ' ') {
            space_count++;
        } else {
            if (space_count == 1) {
                result += '_';
            } else if (space_count > 1) {
                result += '-';
            }
            result += c;
            space_count = 0;
        }
    }
    if (space_count == 1 && !result.empty() && result.back() != '_') {
        result += '_';
    } else if (space_count > 1 && !result.empty() && result.back() != '-') {
        result += '-';
    } else if (space_count > 0 && result.empty()) {
        if (space_count > 2) result += '-';
        else if (space_count == 1) result += '_';
    } else if (space_count == 1 && result.empty()) {
        result += '_';
    }

    std::string trimmed_result = """";
    bool non_space_found = false;
    for (char c : result) {
        if (c != ' ') {
            non_space_found = true;
            trimmed_result += c;
        } else if (non_space_found) {
            trimmed_result += c;
        }
    }

    while (!trimmed_result.empty() && trimmed_result.front() == '_') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '_') {
        trimmed_result.pop_back();
    }
     while (!trimmed_result.empty() && trimmed_result.front() == '-') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '-') {
        trimmed_result.pop_back();
    }

    std::string final_result = """";
    space_count = 0;
    for (char c : trimmed_result) {
        if (c == '_') {
            space_count++;
        } else {
            if (space_count == 1) {
                final_result += '_';
            } else if (space_count > 1) {
                final_result += '-';
            }
            final_result += c;
            space_count = 0;
        }
    }
    if (space_count == 1) {
        final_result += '_';
    } else if (space_count > 1) {
        final_result += '-';
    }

    return final_result;
}","}
int main() {
    auto candidate = fix_spaces;
    assert(candidate((""Example"")) == (""Example""));
    assert(candidate((""Mudasir Hanif "")) == (""Mudasir_Hanif_""));
    assert(candidate((""Yellow Yellow  Dirty  Fellow"")) == (""Yellow_Yellow__Dirty__Fellow""));
    assert(candidate((""Exa   mple"")) == (""Exa-mple""));
    assert(candidate((""   Exa 1 2 2 mple"")) == (""-Exa_1_2_2_mple""));
}
"
HumanEval/141,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཡིག་སྣོད་མིང་འདི་ འོས་ལྡན་ཨིན་པ་ཅིན་ ཡིག་སྣོད་མིང་འདི་ ལེན་ཞིནམ་ལས་ ལེན་གཏང་ནི་དང་ གཞན་འབད་བ་ཅིན་ ལེན་གཏང་མི་བཏུབ་ཟེར་ལོག་གཏང་མི་ལས་འགན་ཅིག་བཟོ་དགོ། ཡིག་སྣོད་མིང་འདི་ འོས་ལྡན་སྦེ་བརྩི་ནི་ཨིན་པ་ཅིན་ འོག་གི་གནས་སྟངས་ཚུ་ག་ར་གྲུབ་པ་ཅིན་རྐྱངམ་གཅིག་ ལེན་གཏང་དགོ། ཡིག་སྣོད་མིང་ནང་ ཨང་གྲངས་གསུམ་ལས་བརྒལ་མི་བཏུབ་ ('0'-'9') ཡིག་སྣོད་མིང་ནང་ གནད་སྡུད་གཅིག་རང་ཡོད་ '.' ཡིག་སྣོད་མིང་གི་ཧེ་མ་ཡོད་པའི་ཡིག་སྣོད་དེ་ སྟོངམ་མ་བཞག་དགོཔ་མ་ཚད་ ཨང་ཡིག་འདི་ ལཊི་ནའི་ཡིག་འབྲུ་ ('a'-'z' དང་ 'A'-Z') ཚུ་དང་ འགོ་བཙུགས་དགོ། གནད་སྡུད་མིང་གི་ཤུལ་ལས་ཡོད་པའི་ཡིག་སྣོད་འདི་ འོག་གི་ཡིག་འབྲུ་ཚུ་ནང་ལས་ གཅིག་འབད་དགོཔ་ཨིན། དཔེར་ན་: >>> file_name_check""((example.txt"") (""Yes"") >>> file_name_check""(example.dll"" (""No"")
std::string file_name_check(std::string file_name) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string file_name_check(std::string file_name) {
    int digit_count = 0;
    int dot_count = 0;
    size_t dot_pos = std::string::npos;

    for (size_t i = 0; i < file_name.length(); ++i) {
        if (isdigit(file_name[i])) {
            digit_count++;
        } else if (file_name[i] == '.') {
            dot_count++;
            dot_pos = i;
        }
    }

    if (digit_count > 3 || dot_count != 1) {
        return ""No"";
    }

    if (dot_pos == 0 || dot_pos == file_name.length() - 1) {
        return ""No"";
    }

    std::string name_part = file_name.substr(0, dot_pos);
    std::string ext_part = file_name.substr(dot_pos + 1);

    if (name_part.empty() || !isalpha(name_part[0])) {
        return ""No"";
    }

    if (ext_part == ""txt"" || ext_part == ""exe"" || ext_part == ""dll"") {
        return ""Yes"";
    } else {
        return ""No"";
    }
}","}
int main() {
    auto candidate = file_name_check;
    assert(candidate((""example.txt"")) == (""Yes""));
    assert(candidate((""1example.dll"")) == (""No""));
    assert(candidate((""s1sdf3.asd"")) == (""No""));
    assert(candidate((""K.dll"")) == (""Yes""));
    assert(candidate((""MY16FILE3.exe"")) == (""Yes""));
    assert(candidate((""His12FILE94.exe"")) == (""No""));
    assert(candidate((""_Y.txt"")) == (""No""));
    assert(candidate((""?aREYA.exe"")) == (""No""));
    assert(candidate((""/this_is_valid.dll"")) == (""No""));
    assert(candidate((""this_is_valid.wow"")) == (""No""));
    assert(candidate((""this_is_valid.txt"")) == (""Yes""));
    assert(candidate((""this_is_valid.txtexe"")) == (""No""));
    assert(candidate((""#this2_i4s_5valid.ten"")) == (""No""));
    assert(candidate((""@this1_is6_valid.exe"")) == (""No""));
    assert(candidate((""this_is_12valid.6exe4.txt"")) == (""No""));
    assert(candidate((""all.exe.txt"")) == (""No""));
    assert(candidate((""I563_No.exe"")) == (""Yes""));
    assert(candidate((""Is3youfault.txt"")) == (""Yes""));
    assert(candidate((""no_one#knows.dll"")) == (""Yes""));
    assert(candidate((""1I563_Yes3.exe"")) == (""No""));
    assert(candidate((""I563_Yes3.txtt"")) == (""No""));
    assert(candidate((""final..txt"")) == (""No""));
    assert(candidate((""final132"")) == (""No""));
    assert(candidate((""_f4indsartal132."")) == (""No""));
    assert(candidate(("".txt"")) == (""No""));
    assert(candidate((""s."")) == (""No""));
}
"
HumanEval/142,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ""འ་ནི་ལས་ཀ་འདི་གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་བེ་ཀཊར་ཅིག་ ལེན་འབདཝ་ཨིན། བེ་ཀཊར་ནང་གི་ནང་དོན་ག་ར་གི་དོན་ལུ་ ལས་འགན་གྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ནང་དོན་གྲུ་བཞི་བཟོ་དགོ། གལ་སྲིད་ ཨང་གྲངས་དེ་ ཨང་གྲངས་༣་གི་གྱངས་ཁ་དང་ཅིག་ཁར་ཨིན་པ་ཅིན་ ལས་འགན་གྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ནང་དོན་གྲུ་བཞི་བཟོ་འོང་། གལ་སྲིད་ ཨང་གྲངས་དེ་ ཨང་གྲངས་༤་གི་གྱངས་ཁ་དང་ཅིག་ཁར་ཨིན་པ་ཅིན་ ལས་འགན་གྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ནང་དོན་འདི་ བསྒྱུར་བཅོས་མི་འབད་འོང་། གལ་སྲིད་ ཨང་གྲངས་དེ་ ཨང་གྲངས་༣་དང་༤་གི་གྱངས་ཁ་དང་ཅིག་ཁར་ཨིན་པ་ཅིན་ ལས་འགན་གྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་བསྡོམས་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་: >>> lst (long({(long) 1, (long) 2, (long) 1, (long) 5})
long sum_squares(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_squares(std::vector<long> lst) {
    long sum = 0;
    for (size_t i = 0; i < lst.size(); ++i) {
        if (i % 3 == 0) {
            sum += lst[i] * lst[i];
        } else if (i % 4 == 0) {
            sum += lst[i] * lst[i] * lst[i];
        } else {
            sum += lst[i];
        }
    }
    return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));
    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));
    assert(candidate((std::vector<long>({(long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));
    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));
    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));
}
"
HumanEval/143,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཅིག་ངོ་ཚབ་འབད་ཡོད་པའི་ string ཅིག་ཐོབ་ཡོདཔ་ད་ ཚིག་ཡིག་དེ་ནང་ལུ་ བར་སྟོང་གིས་སོ་སོར་འབད་མི་ཚིག་ཚུ་ཡོདཔ་དང་ ཁྱོད་ཀྱིས་ ཚིག་ཡིག་འདི་ནང་ ཚིག་ཡིག་ཚུ་ཡོད་པའི་ string འདི་ལོག་གཏང་དགོཔ་ཨིན་ འདི་གི་རིང་ཚད་དེ་ prime number ཚུ་ཨིནམ་ད་ ཚིག་ཡིག་གི་རིམ་པ་འདི་ ཚིག་ཡིག་གསརཔ་ནང་ཡོད་པའི་ ཚིག་ཡིག་དང་མཚུངས་ཏེ་ཡོད་ དཔེ་གཞི་ ༡: >>> words_in_sentence (((""This is a test"")) (""is"") དཔེ་གཞི་ ༢: >>> words_in_sentence (((""lets go for swimming"")) (""go for"") བཀག་འཛིན་: * ༡ <= len ((sentence) <= ༡༠༠ * ཚིག་ཡིག་ནང་ཡིག་འབྲུ་རྐྱངམ་ཅིག་ཡོདཔ་ཨིན།
std::string words_in_sentence(std::string sentence) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

std::string words_in_sentence(std::string sentence) {
    std::string result = """";
    std::stringstream ss(sentence);
    std::string word;
    while (ss >> word) {
        if (is_prime(word.length())) {
            if (!result.empty()) {
                result += "" "";
            }
            result += word;
        }
    }
    return result;
}","}
int main() {
    auto candidate = words_in_sentence;
    assert(candidate((""This is a test"")) == (""is""));
    assert(candidate((""lets go for swimming"")) == (""go for""));
    assert(candidate((""there is no place available here"")) == (""there is no place""));
    assert(candidate((""Hi I am Hussein"")) == (""Hi am Hussein""));
    assert(candidate((""go for it"")) == (""go for it""));
    assert(candidate((""here"")) == (""""));
    assert(candidate((""here is"")) == (""is""));
}
"
HumanEval/144,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱི་ལཱ་འདི་ x * n འདི་རྣམ་གྲངས་འཇམ་ཏོང་ཏོ་འབད་བཟོ་ནི་གི་འགན་ཁུར་ཨིན། འ་ནི་འགན་ཁུར་འདི་ x * n འདི་ཧྲིལ་ཨང་སྦེ་གྲུབ་པ་ཅིན་བདེན་པ་སྦེ་ལོག་བྱིན་ནི་ཨིནམ་དང་ དེ་མེན་པ་ཅིན་རྫུན་ཨིན། x དང་ n གཉིས་ཆ་ར་ལུ་ ཨང་གྲངས་ཀྱི་ཐིག་ཁྲམ་ངོ་ཚབ་སྦེ་བཙུགས་ཏེ་ འ་ནི་རྣམ་པ་འདི་ཡོདཔ་ཨིན། <numerator>/<denominator> འདི་ནང་ལུ་ ཨང་གྲངས་དང་མིང་བཏགས་གཉིས་ཆ་ར་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཆ་མཉམ་ཨིན། ཁྱོད་ཀྱིས་ x དང་ n འདི་ ཆ་གནས་ཅན་གྱི་ཨང་གྲངས་ཆ་ཤས་ཨིནམ་དང་ མིང་བཏགས་འདི་ ༠ སྦེ་མེདཔ་སྦེ་བཟོཝ་ཨིན། >>> simplify((""1/5""), (""5/1"")) (true) >>> simplify((""1/6""), (""2/1"") (false) >>> simplify((""7/10""), (""10/2"") (false)
bool simplify(std::string x, std::string n) {
","#include<assert.h>
#include<bits/stdc++.h>

long gcd(long a, long b) {
    while (b) {
        a %= b;
        std::swap(a, b);
    }
    return a;
}

bool simplify(std::string x, std::string n) {
    long x_num, x_den, n_num, n_den;
    size_t slash_pos = x.find('/');
    x_num = std::stol(x.substr(0, slash_pos));
    x_den = std::stol(x.substr(slash_pos + 1));

    slash_pos = n.find('/');
    n_num = std::stol(n.substr(0, slash_pos));
    n_den = std::stol(n.substr(slash_pos + 1));

    long num = x_num * n_num;
    long den = x_den * n_den;

    long common_divisor = gcd(num, den);
    den /= common_divisor;

    return den == 1;
}","}
int main() {
    auto candidate = simplify;
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/6""), (""2/1"")) == (false));
    assert(candidate((""5/1""), (""3/1"")) == (true));
    assert(candidate((""7/10""), (""10/2"")) == (false));
    assert(candidate((""2/10""), (""50/10"")) == (true));
    assert(candidate((""7/2""), (""4/2"")) == (true));
    assert(candidate((""11/6""), (""6/1"")) == (true));
    assert(candidate((""2/3""), (""5/2"")) == (false));
    assert(candidate((""5/2""), (""3/5"")) == (false));
    assert(candidate((""2/4""), (""8/4"")) == (true));
    assert(candidate((""2/4""), (""4/2"")) == (true));
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/5""), (""1/5"")) == (false));
}
"
HumanEval/145,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཚུའི་ཐད་ཁར་ ཨང་གྲངས་ཚུ་ཡར་སེང་འགྱོ་མི་རིམ་པ་ལུ་རིམ་པ་སྒྲིག་མི་ལས་འགན་ཅིག་འབྲི་དགོ། དྲན་པ་: ཨང་གྲངས་ཚུའི་ཐད་ཁར་ ཨང་གྲངས་འདྲ་མཉམ་ཡོད་པའི་ ཨང་གྲངས་ལེ་ཤ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཚུ་གཞི་རྟེན་གཞི་བསྟུན་ལུ་གཞི་བཞག་སྟེ་རིམ་པ་སྒྲིག་འབད། དཔེར་ན་: >>> order_by_points((std::vector<long>({long) 1, (long) 11, (long)-1, (long) - 11, (long) - 12}))) (std::vector<long>({long) - 1, (long) - 11, (long) 1, (long) - 12, (long) 11})) >>> order_by_points((std::vector<long>())) (std::vector<long>(long))
std::vector<long> order_by_points(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_digits(long n) {
    long sum = 0;
    std::string s = std::to_string(std::abs(n));
    for (char c : s) {
        sum += c - '0';
    }
    return sum;
}

std::vector<long> order_by_points(std::vector<long> nums) {
    std::vector<std::pair<long, size_t>> indexed_nums;
    for (size_t i = 0; i < nums.size(); ++i) {
        indexed_nums.push_back({nums[i], i});
    }

    std::sort(indexed_nums.begin(), indexed_nums.end(), [](const std::pair<long, size_t>& a, const std::pair<long, size_t>& b) {
        long sum_a = sum_digits(a.first);
        long sum_b = sum_digits(b.first);
        if (sum_a != sum_b) {
            return sum_a < sum_b;
        }
        return a.second < b.second;
    });

    std::vector<long> result;
    for (const auto& pair : indexed_nums) {
        result.push_back(pair.first);
    }
    return result;
}","}
int main() {
    auto candidate = order_by_points;
    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));
    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));
    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));
}
"
HumanEval/146,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཀྱི་བེ་ཊར་ཅིག་ཨེབ་གཏང་སྦེ་ལེན་ཏེ་ བེ་ཊར་ནང་ཡོད་པའི་ཡན་ལག་གྲངས་སུ་ ༡༠ ལས་སྦོམ་སྦེ་ཨང་གྲངས་ཀྱི་ཨང་དང་པ་དང་ མཇུག་གི་ཨང་གཉིས་ཆ་ར་ལུ་ ཨང་གྲངས་དབྱེ་བ་མེདཔ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> specialFilter((std::vector<long>({(long) 15, (long) -73, (long) -14, (long) -15}))) (1) >>> specialFilter((std::vector<long>({(long) 33, (long) -2, (long) -3, (long) -45, (long) 21, (long) -109} (2))))
long specialFilter(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_odd_digit(char c) {
    return (c == '1' || c == '3' || c == '5' || c == '7' || c == '9');
}

long specialFilter(std::vector<long> nums) {
    long count = 0;
    for (long num : nums) {
        if (std::abs(num) > 10) {
            std::string s = std::to_string(std::abs(num));
            if (!s.empty() && is_odd_digit(s.front()) && is_odd_digit(s.back())) {
                count++;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = specialFilter;
    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));
    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));
    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));
    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));
    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>())) == (0));
}
"
HumanEval/147,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ nཐོབ་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཚེ་རིང་ n འབད་མི་ ཨང་གྲངས་ཧྲིལ་བུམ་ ཝེཀཊར་ a བཟོ་དགོཔ་ཨིན། i རེ་རེ་གི་དོན་ལུ་ (1 ≤ i ≤ n) a[i] = i * i - i + 1 གི་གནས་གོང་དེ་སླར་ལོག་འབདཝ་ཨིན། a གྱི་ triples (a[i], a[j], a[k]) ཚུ་གི་གྱངས་ཁ་དེ་སླར་ལོག་འབད་ཡོདཔ་ད་ i < j < k, དང་ a[i] + a[j] + a[k] འདི་ 3 གི་གྱངས་ཁ་ཨིན། དཔེ་གཞི་: >>> get_max_triples((5)) (1) འགྲེལ་བཤད་: a = [1, 3, 7, 13, 21] གསུམ་ཆ་གཅིག་གནས་གོང་དེ་ (1, 7, 13) ཨིན།
long get_max_triples(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long get_max_triples(long n) {
    if (n < 3) {
        return 0;
    }
    std::vector<long> a(n);
    for (long i = 0; i < n; ++i) {
        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;
    }

    long count = 0;
    for (long i = 0; i < n; ++i) {
        for (long j = i + 1; j < n; ++j) {
            for (long k = j + 1; k < n; ++k) {
                if ((a[i] + a[j] + a[k]) % 3 == 0) {
                    count++;
                }
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = get_max_triples;
    assert(candidate((5)) == (1));
    assert(candidate((6)) == (4));
    assert(candidate((10)) == (36));
    assert(candidate((100)) == (53361));
}
"
HumanEval/148,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཉིམ་ལུགས་ནང་ སྐར་མ་༨ ཡོད་པའི་ཁར་ ཉིམ་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་མི་ཅིག་འདི་ Mercury ཤུལ་མ་ཅིག་འདི་ Venus དེ་ལས་ Earth, Mars, Jupiter, Saturn, Uranus, Neptune ཨིན། ལས་འགན་འདི་ སྐར་མ་༢ ཀྱི་མིང་འདི་ སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་མིང་སྦེ་ལེན་ཏེ་ ཡིག་དཔར་རྐྱབས་དགོ། ལས་འགན་འདི་གིས་ སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་འཁོར་ལམ་གྱི་བར་ན་ཡོད་པའི་ སྐར་མ་ཚུ་ ཉིམ་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་ནི་དེ་གིས་ རིམ་སྒྲིག་འབད་ཡོད་པའི་ སྐར་མ་ཚུ་ཆ་མཉམ་ཡོད་པའི་ སྐར་མ་ཚུ་སླར་ལོག་འབདཝ་ཨིན། སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་མིང་འདི་ སྐར་མ་ཚུ་མེན་པ་ཅིན་ ལས་འགན་འདི་གིས་ སྟོང་པའི་ སྐར་མ་ཚུ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་འདི་ >>> bf((""Jupiter""), (""Neptune"")) (std::vector<std::string>{(std::string) ""Saturn"", (std::string) ""Uranus""} (std::string)) (Y) >>> bf (((((""Earth""), (""Mercury"") (std::vector<std::string>) (Jupiter:Venus"") (std: ""Mars"") (string) ("",
std::vector<std::string> bf(std::string planet1, std::string planet2) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> bf(std::string planet1, std::string planet2) {
    std::vector<std::string> planets = {""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""};
    auto it1 = std::find(planets.begin(), planets.end(), planet1);
    auto it2 = std::find(planets.begin(), planets.end(), planet2);

    if (it1 == planets.end() || it2 == planets.end()) {
        return {};
    }

    int index1 = std::distance(planets.begin(), it1);
    int index2 = std::distance(planets.begin(), it2);

    if (index1 == index2) {
        return {};
    }

    int start = std::min(index1, index2) + 1;
    int end = std::max(index1, index2);

    std::vector<std::string> result;
    for (int i = start; i < end; ++i) {
        result.push_back(planets[i]);
    }
    return result;
}","}
int main() {
    auto candidate = bf;
    assert(candidate((""Jupiter""), (""Neptune"")) == (std::vector<std::string>({(std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Mercury"")) == (std::vector<std::string>({(std::string)""Venus""})));
    assert(candidate((""Mercury""), (""Uranus"")) == (std::vector<std::string>({(std::string)""Venus"", (std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn""})));
    assert(candidate((""Neptune""), (""Venus"")) == (std::vector<std::string>({(std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Mars""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Jupiter""), (""Makemake"")) == (std::vector<std::string>()));
}
"
HumanEval/149,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཕྲང་ཡིག་གི་ཕྲང་ཡིག་འདི་ རྟག་བུ་སྦེ་ལེན་ཏེ་ ཚིག་ཡིག་གི་ཕྲང་ཡིག་འདི་ ཆ་ཚད་སྦེ་ལེན་ཏེ་ ཚིག་ཡིག་འདི་ལས་ ཚར་མ་རིངམོ་སྦེ་ཡོད་མི་ཚུ་ བཏོན་གཏང་ཞིནམ་ལས་ གྲུབ་འབྲས་ཕྲང་ཡིག་འདི་རིམ་སྒྲིག་སྦེ་ལོག་གཏང་། ཕྲང་ཡིག་འདི་ རྟག་བུ་སྦེ་ཕྲང་ཡིག་གི་ཕྲང་ཡིག་དང་ ཨང་གྲངས་ཀྱི་ཕྲང་ཡིག་མེན་པའི་ཕྲང་ཡིག་ཨིནམ་ལས་ དེ་ནང་གཉིས་ཆ་ར་ཡང་ འཐོབ་ནི་ཡོད།ཕྲང་ཡིག་གི་ཕྲང་ཡིག་གི་རིམ་སྒྲིག་འདི་ ཚིག་ཡིག་རེ་རེའི་ཕྲང་ཡིག་གི་ཕྲང་ཡིག་གི་ཕྲང་ཡིག་དང་བསྟུན་ཏེ་ལོག་གཏང་དགོ་ དེ་ལས་ཕྲང་ཡིག་འདི་རིམ་སྒྲིག་འབད་དགོཔ་ཨིན། ཚིག་ཡིག་གཉིས་ཆ་ར་ ཚིག་ཡིག་གཅིག་སྦེ་ཡོད་པ་ཅིན་ ཕྲང་ཡིག་དེ་ ཨང་ཡིག་གི་རིམ་སྒྲིག་ནང་ལོག་གཏང་། ལས་འགན་འདི་གིས་ ཕྲང་ཡིག་གི་ཕྲང་ཡིག་འདི་རིམ་སྒྲིག་སྦེ་ལོག་གཏང་དགོ། ཁྱོད་ཀྱིས་ཕྲང་ཡིག་ཆ་མཉམ་ནང་ ཚིག་ཡིག་གཅིག་སྦེ་ཡོད་འོང་ཟེར་ མནོ་བསམ་གཏང་འོང་། དཔེར་ན་: >>> list_sort{""std"":string_string""}<string_string_string_string_string_string_string_string_string_string_string (a) "" (a) (a) (a) (a) (c) (d (aaa) (d (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d) (d (d) (d) (d (d) (d) (d (d) (d) (d (d) (
std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
    std::vector<std::string> even_length_strings;
    for (const std::string& s : lst) {
        if (s.length() % 2 == 0) {
            even_length_strings.push_back(s);
        }
    }

    std::sort(even_length_strings.begin(), even_length_strings.end(), [](const std::string& a, const std::string& b) {
        if (a.length() != b.length()) {
            return a.length() < b.length();
        }
        return a < b;
    });

    return even_length_strings;
}","}
int main() {
    auto candidate = sorted_list_sum;
    assert(candidate((std::vector<std::string>({(std::string)""aa"", (std::string)""a"", (std::string)""aaa""}))) == (std::vector<std::string>({(std::string)""aa""})));
    assert(candidate((std::vector<std::string>({(std::string)""school"", (std::string)""AI"", (std::string)""asdf"", (std::string)""b""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""asdf"", (std::string)""school""})));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""b"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""dcba"", (std::string)""abcd"", (std::string)""a""}))) == (std::vector<std::string>({(std::string)""abcd"", (std::string)""dcba""})));
    assert(candidate((std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""})));
    assert(candidate((std::vector<std::string>({(std::string)""a"", (std::string)""b"", (std::string)""b"", (std::string)""c"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""aaaa"", (std::string)""bbbb"", (std::string)""dd"", (std::string)""cc""}))) == (std::vector<std::string>({(std::string)""cc"", (std::string)""dd"", (std::string)""aaaa"", (std::string)""bbbb""})));
}
"
HumanEval/150,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// གློག་རིམ་ཅིག་ཨིན་པའི་སྐབས་ x འདི་ prime ཨིན་པ་ཅིན་ x གི་གནས་གོང་ལོག་བྱིན་དགོཔ་ཨིན་པའི་ཁར་ y འདི་ཡང་ prime ཨིན་པ་ཅིན་ y གི་གནས་གོང་ལོག་བྱིན་དགོཔ་ཨིན། དཔེར་ན་: >>> x_or_y((7), (34), (12)) (34) >>> x_or_y(15), (8), (5) (5)
long x_or_y(long n, long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(long n) {
    if (n <= 1) return false;
    for (long i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

long x_or_y(long n, long x, long y) {
    if (is_prime(n)) {
        return x;
    } else {
        return y;
    }
}","}
int main() {
    auto candidate = x_or_y;
    assert(candidate((7), (34), (12)) == (34));
    assert(candidate((15), (8), (5)) == (5));
    assert(candidate((3), (33), (5212)) == (33));
    assert(candidate((1259), (3), (52)) == (3));
    assert(candidate((7919), (-1), (12)) == (-1));
    assert(candidate((3609), (1245), (583)) == (583));
    assert(candidate((91), (56), (129)) == (129));
    assert(candidate((6), (34), (1234)) == (1234));
    assert(candidate((1), (2), (0)) == (0));
    assert(candidate((2), (2), (0)) == (2));
}
"
HumanEval/151,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཀྱི་བེ་ཀཊར་ཅིག་བྱིནམ་ད་ བེ་ཀཊར་ནང་གི་ཨང་གྲངས་ཚུ་ཆ་མཉམ་སྦེ་ཡོད་མི་ཚུ་གི་གྲུ་བཞི་བསྡོམས་དེ་ལོག་གཏང་། ནེ་གེ་རེ་དང་ཨང་གྲངས་མེན་པའི་ཨང་གྲངས་ཚུ་སྣང་མེད་སྦེ་བཞག་། >>> double_the_difference (_) std::vector<float> (_) (long) 1, (long) 3, (long) 2, (long) 0}))) (10) >>> double_the_difference (_) std::vector<float> (_) (long)-1, (long)-2, (long) 0}))) (0) >>> double_the_difference (_) std::vector<float> (_) (long) 9, (long) - 2}))) (81) >>> double_the_difference (_) std::vector<float> (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_)
long double_the_difference(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long double_the_difference(std::vector<float> lst) {
    long sum_of_squares = 0;
    for (float num : lst) {
        if (num > 0 && static_cast<long>(num) == num && static_cast<long>(num) % 2 != 0) {
            sum_of_squares += static_cast<long>(num) * static_cast<long>(num);
        }
    }
    return sum_of_squares;
}","}
int main() {
    auto candidate = double_the_difference;
    assert(candidate((std::vector<float>())) == (0));
    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));
    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));
    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));
    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));
}
"
HumanEval/152,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ང་བཅས་ག་ར་གིས་ དྲན་པ་ཡོད་རང་ཨིནམ་ད་ དེ་བསྒང་ལུ་ ང་བཅས་ག་ར་གིས་ བྱུང་རྐྱེན་ཚུ་ ཡུན་རིངམོ་སྦེ་སྒུག་སྡོད་ཡོདཔ་ལས་ འདི་གི་འབྲས་བུ་འདི་ མཐའ་མར་ཤེས་ནི་ཨིནམ་ལས་ དེ་བསྒང་ལུ་ ང་བཅས་རང་གི་སེམས་ཁར་བྱུང་མི་ཚོར་སྣང་དང་བསམ་བློ་ཚུ་ ཐད་རི་བ་རི་བཀོད་དེ་བསྡུར་འབད་དགོཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ མི་གཅིག་གིས་ མཉམ་བསྡོམས་ཀྱི་གྲུབ་འབྲས་ཚུ་ ལེགས་ཤོམ་སྦེ་ར་ ཧ་གོ་ཡོདཔ་ཨིན་ན་ཨིན་ན་ཨིན་ན་ཨིན་ན་འཚོལ་ནི་དེ་ཨིན། ཁྱོད་ལུ་ ཨང་གྲངས་དང་ ཚད་གཞི་འདྲ་མཉམ་སྦེ་ཡོད་པའི་ ཝི་ཅཱཊ་གཉིས་བྱིན་ཡོདཔ་དང་ འདི་ནང་ བརྡ་བཀོད་རེ་རེ་གི་ནང་ མཉམ་བསྡོམས་ཅིག་ཡང་ སྟོན་ཡོདཔ་ཨིན། ཨང་གྲངས་དེ་ཅིག་སྦེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་དེ་ ༠ དང་མེན་པ་ཅིན་ ཨང་གྲངས་དེ་ ཝི་ཅཱཊ་དང་ ཨང་གྲངས་ཀྱི་བར་ན་ ཁྱད་པར་ངོ་མ་ཨིན། དཔེར་ན་: >>>(longd::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5, (longd) 6, (longd) 1, (longd) 2, (longd) 3, (longd) 4, (longd) 0, (longd) 0, (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long
std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
    std::vector<long> diff;
    for (size_t i = 0; i < game.size(); ++i) {
        diff.push_back(std::abs(game[i] - guess[i]));
    }
    return diff;
}","}
int main() {
    auto candidate = compare;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));
    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));
}
"
HumanEval/153,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་རིམ་པ་ (ཐིག་ཁྲམ་) དང་ ཁྱབ་ཚད་ཀྱི་ ཝི་ཅཱཊ་ཐོབ་འོང་། ཁྱབ་ཚད་ཚུ་རིམ་པ་ནང་ ཁ་སྐོང་སློབ་ཚན་ཚུ་ འབག་ནི་ལུ་ ལག་ལེན་འཐབ་འོང་། ཁྱབ་ཚད་ཀྱི་ཤུགས་འདི་ འོག་གི་བཟུམ་སྦེ་ཨིན། CAPདེ་ ཁྱབ་ཚད་ཀྱི་མིང་ནང་ལུ་ ཡི་གུ་སྦོམ་ཤོས་ཀྱི་གྱངས་ཁ་ཅིག་དང་ SMདེ་ ཁྱབ་ཚད་ཀྱི་མིང་ནང་ལུ་ ཡི་གུ་ཆུང་ཤོས་ཀྱི་གྱངས་ཁ་ཅིག་ཨིན་པ་ཅིན་ ཁྱབ་ཚད་དེ་ CAP - SM བཅའ་ཡིག་གིས་བྱིན་འོང་། ཁྱོད་ཀྱིས་ ཁྱབ་ཚད་ཤུགས་ཅན་ཅིག་འཚོལ་ཏེ་ string འདི་ནང་བཟོ་རྣམ་འདི་སླར་ལོག་འབད་དགོ། ClassName.StrongestExtensionName. ག་དེམ་ཅིག་སྦེ་ ཁྱབ་ཚད་འདྲ་མཉམ་ཡོད་མི་ ཁྱབ་ཚད་གཉིས་ཡང་ན་དེ་ལས་མང་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝི་ཅཱཊ་ནང་ དང་པ་ཐོན་མི་གཅིག་གདམ་ཁ་རྐྱབ་དགོ། དཔེར་ན་ ཁྱོད་ཀྱིས་ ""Slices""དེ་ ཁྱབ་ཚད་ཀྱི་རིམ་པ་དང་ ཁྱབ་ཚད་ཀྱི་ ཝི་ཅཱཊ་ཅིག་སྦེ་ཐོབ་པ་ཅིན་ ཁྱོད་ཀྱིས་ 'Slices.SEviviSliSCes' དང་ 'Cheese', 'StufedF' དེ་ལས་ 'SviSliSliCes.SEviSliCes' དང་ 'myst:::::::myst:::SviSliCes:myst:::myst:::SviSliC::myst:SliC::myst:SliC::myst:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S
std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
","#include<assert.h>
#include<bits/stdc++.h>

int calculate_strength(const std::string& extension) {
    int cap_count = 0;
    int sm_count = 0;
    for (char c : extension) {
        if (isupper(c)) {
            cap_count++;
        } else if (islower(c)) {
            sm_count++;
        }
    }
    return cap_count - sm_count;
}

std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
    if (extensions.empty()) {
        return class_name;
    }

    std::string strongest_extension = extensions[0];
    int max_strength = calculate_strength(extensions[0]);

    for (size_t i = 1; i < extensions.size(); ++i) {
        int current_strength = calculate_strength(extensions[i]);
        if (current_strength > max_strength) {
            max_strength = current_strength;
            strongest_extension = extensions[i];
        }
    }

    return class_name + ""."" + strongest_extension;
}","}
int main() {
    auto candidate = Strongest_Extension;
    assert(candidate((""Watashi""), (std::vector<std::string>({(std::string)""tEN"", (std::string)""niNE"", (std::string)""eIGHt8OKe""}))) == (""Watashi.eIGHt8OKe""));
    assert(candidate((""Boku123""), (std::vector<std::string>({(std::string)""nani"", (std::string)""NazeDa"", (std::string)""YEs.WeCaNe"", (std::string)""32145tggg""}))) == (""Boku123.YEs.WeCaNe""));
    assert(candidate((""__YESIMHERE""), (std::vector<std::string>({(std::string)""t"", (std::string)""eMptY"", (std::string)""nothing"", (std::string)""zeR00"", (std::string)""NuLl__"", (std::string)""123NoooneB321""}))) == (""__YESIMHERE.NuLl__""));
    assert(candidate((""K""), (std::vector<std::string>({(std::string)""Ta"", (std::string)""TAR"", (std::string)""t234An"", (std::string)""cosSo""}))) == (""K.TAR""));
    assert(candidate((""__HAHA""), (std::vector<std::string>({(std::string)""Tab"", (std::string)""123"", (std::string)""781345"", (std::string)""-_-""}))) == (""__HAHA.123""));
    assert(candidate((""YameRore""), (std::vector<std::string>({(std::string)""HhAas"", (std::string)""okIWILL123"", (std::string)""WorkOut"", (std::string)""Fails"", (std::string)""-_-""}))) == (""YameRore.okIWILL123""));
    assert(candidate((""finNNalLLly""), (std::vector<std::string>({(std::string)""Die"", (std::string)""NowW"", (std::string)""Wow"", (std::string)""WoW""}))) == (""finNNalLLly.WoW""));
    assert(candidate((""_""), (std::vector<std::string>({(std::string)""Bb"", (std::string)""91245""}))) == (""_.Bb""));
    assert(candidate((""Sp""), (std::vector<std::string>({(std::string)""671235"", (std::string)""Bb""}))) == (""Sp.671235""));
}
"
HumanEval/154,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ཚིག་གཉིས་ཐོབ་ཨིན། ཁྱོད་ཀྱིས་ཚིག་གཉིས་པ་ཡང་ན་ འདི་གི་འཁོར་ལོའི་གྲལ་རིམ་འདི་ ཚིག་དང་པའི་ནང་ཡིག་འབྲུ་ཆུང་བ་ཅིག་ཨིན་པ་ཅིན་ ཁྱོད་ཀྱིས་བདེན་པ་སྦེ་ལོག་གཏང་དགོ >>> cycpattern_check((""abcd""), (""abd"")) (false) >>> cycpattern_check((""hello""), (""ell"")) (true) >>> cycpattern_check((""whassup""), (""psus"")) (false) >>> cycpattern_check((""abab""), (""baa"")) (true) >>> cycpattern_(check""efef""), (""eeff"") (false) >>> cycpattern_check((""himens""), (""simen"") (true)
bool cycpattern_check(std::string a, std::string b) {
","#include<assert.h>
#include<bits/stdc++.h>

bool cycpattern_check(std::string a, std::string b) {
    if (b.empty()) {
        return true;
    }
    if (a.length() < b.length()) {
        return false;
    }
    for (int i = 0; i < b.length(); ++i) {
        std::rotate(b.begin(), b.begin() + 1, b.end());
        if (a.find(b) != std::string::npos) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = cycpattern_check;
    assert(candidate((""xyzw""), (""xyw"")) == (false));
    assert(candidate((""yello""), (""ell"")) == (true));
    assert(candidate((""whattup""), (""ptut"")) == (false));
    assert(candidate((""efef""), (""fee"")) == (true));
    assert(candidate((""abab""), (""aabb"")) == (false));
    assert(candidate((""winemtt""), (""tinem"")) == (true));
}
"
HumanEval/155,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་དང་ཆ་མཉམ་མེད་པའི་ཨང་གྲངས་ཚུ་ཡོད་མིའི་ཨང་གྲངས་ལོག་གཏང་། དཔེ་འབད་བ་ཅིན་: >>> even_odd_count((-12)) (std::make_tuple(1, 1)) >>> even_odd_count((123)) (std::make_tuple(1, 2)
std::tuple<long, long> even_odd_count(long num) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<tuple>

std::tuple<long, long> even_odd_count(long num) {
    long even_count = 0;
    long odd_count = 0;
    std::string s = std::to_string(std::abs(num));
    for (char c : s) {
        int digit = c - '0';
        if (digit % 2 == 0) {
            even_count++;
        } else {
            odd_count++;
        }
    }
    return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_count;
    assert(candidate((7)) == (std::make_tuple(0, 1)));
    assert(candidate((-78)) == (std::make_tuple(1, 1)));
    assert(candidate((3452)) == (std::make_tuple(2, 2)));
    assert(candidate((346211)) == (std::make_tuple(3, 3)));
    assert(candidate((-345821)) == (std::make_tuple(3, 3)));
    assert(candidate((-2)) == (std::make_tuple(1, 0)));
    assert(candidate((-45347)) == (std::make_tuple(2, 3)));
    assert(candidate((0)) == (std::make_tuple(1, 0)));
}
"
HumanEval/156,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཚངམ་སྦེ་ཐོབ་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ རོ་མཱན་ཨང་གྲངས་ནང་བཙུགས་ཏེ་ ཨང་གྲངས་ཆུང་ཡིག་སྦེ་ལོག་གཏང་།
std::string int_to_mini_roman(long number) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string int_to_mini_roman(long number) {
    std::string roman = """";
    std::vector<std::pair<int, std::string>> roman_map = {
        {1000, ""m""}, {900, ""cm""}, {500, ""d""}, {400, ""cd""}, {100, ""c""},
        {90, ""xc""}, {50, ""l""}, {40, ""xl""}, {10, ""x""}, {9, ""ix""}, {5, ""v""},
        {4, ""iv""}, {1, ""i""}
    };

    for (const auto& pair : roman_map) {
        while (number >= pair.first) {
            roman += pair.second;
            number -= pair.first;
        }
    }
    return roman;
}","}
int main() {
    auto candidate = int_to_mini_roman;
    assert(candidate((19)) == (""xix""));
    assert(candidate((152)) == (""clii""));
    assert(candidate((251)) == (""ccli""));
    assert(candidate((426)) == (""cdxxvi""));
    assert(candidate((500)) == (""d""));
    assert(candidate((1)) == (""i""));
    assert(candidate((4)) == (""iv""));
    assert(candidate((43)) == (""xliii""));
    assert(candidate((90)) == (""xc""));
    assert(candidate((94)) == (""xciv""));
    assert(candidate((532)) == (""dxxxii""));
    assert(candidate((900)) == (""cm""));
    assert(candidate((994)) == (""cmxciv""));
    assert(candidate((1000)) == (""m""));
}
"
HumanEval/157,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཚུ་བྱིན་ཏེ་ཡོདཔ་ཨིན། ཟུར་གསུམ་ཆ་མཉམ་འདི་ ཟུར་གསུམ་ཕྲང་ཟུར་ཅིག་བཟོ་བ་ཅིན་བདེན་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། ཟུར་གསུམ་ཕྲང་ཟུར་འདི་ ཟུར་གསུམ་ཟུར་གཅིག་ཕྲང་ཟུར་ཡང་ན་ དབྱེ་ཁག་༩༠ འབད་མི་ ཟུར་གསུམ་ཅིག་ཨིན། དཔེར་ན་: >>> right_angle_triangle (((3), (4), (5)) (བདེན་པ་) >>> right_angle_triangle (((1), (2), (3)) (རྫུན་མ་)
bool right_angle_triangle(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>

bool right_angle_triangle(long a, long b, long c) {
    std::vector<long> sides = {a, b, c};
    std::sort(sides.begin(), sides.end());
    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);
}","}
int main() {
    auto candidate = right_angle_triangle;
    assert(candidate((3), (4), (5)) == (true));
    assert(candidate((1), (2), (3)) == (false));
    assert(candidate((10), (6), (8)) == (true));
    assert(candidate((2), (2), (2)) == (false));
    assert(candidate((7), (24), (25)) == (true));
    assert(candidate((10), (5), (7)) == (false));
    assert(candidate((5), (12), (13)) == (true));
    assert(candidate((15), (8), (17)) == (true));
    assert(candidate((48), (55), (73)) == (true));
    assert(candidate((1), (1), (1)) == (false));
    assert(candidate((2), (2), (10)) == (false));
}
"
HumanEval/158,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཚིག་ཡིག་གི་ཐིག་ཁྲམ་ཅིག་ལུ་ ངོས་ལེན་འབད་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོ། ཚིག་ཁྲམ་དེ་ནང་ལུ་ ཚིག་ཚིག་མ་འདྲཝ་ཚུ་ཡོདཔ་ལས་ ཚིག་ཚིག་འདི་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་
std::string find_max(std::vector<std::string> words) {
","#include<assert.h>
#include<bits/stdc++.h>

int count_unique_chars(const std::string& s) {
    std::set<char> unique_chars;
    for (char c : s) {
        unique_chars.insert(c);
    }
    return unique_chars.size();
}

std::string find_max(std::vector<std::string> words) {
    if (words.empty()) {
        return """";
    }

    std::string max_unique_word = words[0];
    int max_unique_count = count_unique_chars(words[0]);

    for (size_t i = 1; i < words.size(); ++i) {
        int current_unique_count = count_unique_chars(words[i]);
        if (current_unique_count > max_unique_count) {
            max_unique_count = current_unique_count;
            max_unique_word = words[i];
        } else if (current_unique_count == max_unique_count && words[i] < max_unique_word) {
            max_unique_word = words[i];
        }
    }
    return max_unique_word;
}","}
int main() {
    auto candidate = find_max;
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""of"", (std::string)""string""}))) == (""string""));
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""enam"", (std::string)""game""}))) == (""enam""));
    assert(candidate((std::vector<std::string>({(std::string)""aaaaaaa"", (std::string)""bb"", (std::string)""cc""}))) == (""aaaaaaa""));
    assert(candidate((std::vector<std::string>({(std::string)""abc"", (std::string)""cba""}))) == (""abc""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""this"", (std::string)""game"", (std::string)""of"", (std::string)""footbott""}))) == (""footbott""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""gonna"", (std::string)""rock""}))) == (""gonna""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""a"", (std::string)""mad"", (std::string)""nation""}))) == (""nation""));
    assert(candidate((std::vector<std::string>({(std::string)""this"", (std::string)""is"", (std::string)""a"", (std::string)""prrk""}))) == (""this""));
    assert(candidate((std::vector<std::string>({(std::string)""b""}))) == (""b""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""play"", (std::string)""play""}))) == (""play""));
}
"
HumanEval/159,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ལྟོ་མི་ཟ་བའི་བེ་ལུ་ཨིནམ་ལས་ ཁྱོད་ཀྱིས་ གུ་རུའི་གྱངས་ཁ་ཅིག་ལས་བརྒལ་ཟ་མ་དགོ་པར་ ད་རེས་ནངས་པར་ གུ་རུའི་གྱངས་ཁ་འདི་ལས་བརྒལ་ཟ་དགོ་པས་ ཁྱོད་ཀྱིས་ ཟས་བཅུད་ཀྱི་ཤུལ་ལས་ཟ་མི་ གུ་རུའི་གྱངས་ཁ་འདི་ ཟ་མ་བཏུབ་པ་ཅིན་ ལྷག་ལུས་གུ་རུའི་གྱངས་ཁ་དེ་ ཟ་ནི་དེ་ཨིན་རུང་ ལྟོཝ་བཀྱེས་སྡོད་འོང་། དཔེ་འབད་བ་ཅིན་: >>>ཟ་((5), (6), (10)) (std::vector<long>{()11, (long)4}) >>>ཟ་(4), (8), (9) (std::vector<long>{()12, ( (1})) >>>ཟ་(1), (10), (10) (std::vector<long>{()11, (long) >>>0)) >>>ཟ་(2), (5) (std::vector<long>{() 7, (long) V: int number of carrots you need to eat in the current stock: 1000: 0 = int number of remaining carrots you need to eat in the current stock: 1000: 0 * int number of carrots you need to eat in the current stock: 1000 * int number of carrots you need to eat: 0 = int number of carrots you need to eat in the current stock: 1000
std::vector<long> eat(long number, long need, long remaining) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> eat(long number, long need, long remaining) {
    long eaten = 0;
    long left = remaining;
    long to_eat = need;

    if (left >= to_eat) {
        eaten = to_eat;
        left -= to_eat;
    } else {
        eaten = left;
        left = 0;
    }

    return {(long)number + eaten, left};
}","}
int main() {
    auto candidate = eat;
    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));
    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));
    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));
    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));
    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));
    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));
}
"
HumanEval/160,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨེཕ་རི་ཀིསི་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན།
long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
","#include<assert.h>
#include<bits/stdc++.h>

long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
    std::vector<long> current_operand = operand;
    std::vector<std::string> current_operator = op;

    auto apply_op = [&](long a, long b, const std::string& o) {
        if (o == ""+"") return a + b;
        if (o == ""-"") return a - b;
        if (o == ""*"") return a * b;
        if (o == ""//"") return a / b;
        if (o == ""**"") return static_cast<long>(pow(a, b));
        return 0L; // Should not happen
    };

    std::vector<std::string> precedence1 = {""**""};
    std::vector<std::string> precedence2 = {""*"", ""//""};
    std::vector<std::string> precedence3 = {""+"", ""-""};

    auto evaluate = [&](const std::vector<std::string>& prec) {
        size_t i = 0;
        while (i < current_operator.size()) {
            bool found = false;
            for (const auto& o : prec) {
                if (current_operator[i] == o) {
                    current_operand[i] = apply_op(current_operand[i], current_operand[i + 1], current_operator[i]);
                    current_operand.erase(current_operand.begin() + i + 1);
                    current_operator.erase(current_operator.begin() + i);
                    found = true;
                    break;
                }
            }
            if (!found) {
                i++;
            }
        }
    };

    evaluate(precedence1);
    evaluate(precedence2);
    evaluate(precedence3);

    return current_operand[0];
}","}
int main() {
    auto candidate = do_algebra;
    assert(candidate((std::vector<std::string>({(std::string)""**"", (std::string)""*"", (std::string)""+""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));
    assert(candidate((std::vector<std::string>({(std::string)""+"", (std::string)""*"", (std::string)""-""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));
    assert(candidate((std::vector<std::string>({(std::string)""//"", (std::string)""*""})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));
}
"
HumanEval/161,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཁྱོད་ཀྱིས་ string s.ཐོབ་པ་ཅིན་ s[i]འདི་ཡིག་འབྲུ་ཅིག་ཨིན་པ་ཅིན་ དེའི་ཡིག་གཟུགས་འདི་ འོག་ལས་གོང་ལུ་ ཡང་ན་ ཕྱོགས་གཞན་ཁ་ལུ་བསྒྱུར་གཏང་། དེ་མེན་པ་ཅིན་ འདི་བཟུམ་སྦེ་རང་བཞག་དགོ། string འདི་ནང་ཡིག་འབྲུ་མེདཔ་ཨིན་པ་ཅིན་ string འདི་ཁ་བསྒྱུར་གཏང་། ལས་འགན་འདི་གིས་ string སླར་ལོག་འབད་དགོཔ་ཨིན། དཔེ་གཞི་ >>> solve((""1234"")) (""4321"") >>> solve((""ab"")) (""AB"") >>> solve(""#a@C"")) (""#A@c"")
std::string solve(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string solve(std::string s) {
    bool has_letter = false;
    for (char c : s) {
        if (isalpha(c)) {
            has_letter = true;
            break;
        }
    }

    if (has_letter) {
        for (char& c : s) {
            if (islower(c)) {
                c = toupper(c);
            } else if (isupper(c)) {
                c = tolower(c);
            }
        }
    } else {
        std::reverse(s.begin(), s.end());
    }
    return s;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((""AsDf"")) == (""aSdF""));
    assert(candidate((""1234"")) == (""4321""));
    assert(candidate((""ab"")) == (""AB""));
    assert(candidate((""#a@C"")) == (""#A@c""));
    assert(candidate((""#AsdfW^45"")) == (""#aSDFw^45""));
    assert(candidate((""#6@2"")) == (""2@6#""));
    assert(candidate((""#$a^D"")) == (""#$A^d""));
    assert(candidate((""#ccc"")) == (""#CCC""));
}
"
HumanEval/162,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string 'text' བྱིན་པ་ཅིན་ md5 ཧེཤི་ འདྲ་མཉམ་ string སླར་ལོག་འབདཝ་ཨིན། 'text' འདི་ སྟོངམ་ stringཨིན་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། >>> string_to_md5((""Hello world"")) ""3e25960a79dbc69b674cd4ec67a72c62""
std::optional<std::string> string_to_md5(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>
#include <optional>

#include <openssl/md5.h>
#include <iomanip>
#include <sstream>

std::optional<std::string> string_to_md5(std::string text) {
    if (text.empty()) {
        return std::nullopt;
    }

    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5((unsigned char*)text.c_str(), text.length(), digest);

    std::stringstream ss;
    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];
    }
    return ss.str();
}","}
int main() {
    auto candidate = string_to_md5;
    assert(candidate((""Hello world"")) == ""3e25960a79dbc69b674cd4ec67a72c62"");
    assert(candidate(("""")) == std::nullopt);
    assert(candidate((""A B C"")) == ""0ef78513b0cb8cef12743f5aeb35f888"");
    assert(candidate((""password"")) == ""5f4dcc3b5aa765d61d8327deb882cf99"");
}
"
HumanEval/163,dzo_Tibt,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ཨང་གྲངས་ཆ་མཉམ་གཉིས་ཆ་མཉམ་ a དང་ b བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་ a དང་ b གི་བར་ན་ཡར་སེང་གི་རིམ་པ་ལུ་ལོག་གཏང་། དཔེར་ན་: >>> generate_integers((2), (8)) (std::vector<long>({(long)2, (long)4, (long)6, (long)8})) >>> generate_integers((8), (2)) (std::vector<long>({(long)2, (long)4, (long)6, (long)8})) >>> generate_integers(10), (14) (std::vector<long>())
std::vector<long> generate_integers(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> generate_integers(long a, long b) {
    std::vector<long> result;
    long start = std::min(a, b);
    long end = std::max(a, b);
    for (long i = start; i <= end; ++i) {
        if (i % 2 == 0) {
            result.push_back(i);
        }
    }
    return result;
}","}
int main() {
    auto candidate = generate_integers;
    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((17), (89)) == (std::vector<long>()));
}
"
