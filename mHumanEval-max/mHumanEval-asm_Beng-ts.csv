task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,asm_Beng,ts,"//এটা নিৰ্দিষ্ট পৰিমাণৰ ধন।//এটা সংখ্যাৰ সংকলনত, দুটা সংখ্যাৰ মাজত তকৈ বেছি দূৰত্ব আছে নেকি পৰীক্ষা কৰক।// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
// false
// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
// true
function has_close_elements(numbers: number[], threshold: number): boolean {
","function has_close_elements(numbers: number[], threshold: number): boolean {
    for (let i = 0; i < numbers.length; i++) {
        for (let j = i + 1; j < numbers.length; j++) {
            if (Math.abs(numbers[i] - numbers[j]) < threshold) {
                return true;
            }
        }
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = has_close_elements;
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);
}

test();"
HumanEval_1,asm_Beng,ts,"//ইনপুট ষ্ট্ৰিংৰ যিকোনো স্পেচ অৱজ্ঞা কৰক।//পৃথক গোটবোৰ ভাৰসাম্যপূৰ্ণ (প্ৰতিটো মুকলি ব্ৰেকেট সঠিকভাৱে বন্ধ) আৰু ইজনে সিজনৰ ভিতৰত নিস্তদ্ধ নহয় ।//এই গোটবোৰক পৃথক শাৰীলৈ পৃথক কৰক আৰু সেইবোৰৰ এৰে ঘূৰাই দিয়ক।//এই ফাংচনৰ ইনপুট হৈছে এটা ষ্ট্ৰিং য'ত বহুতো গোটৰ এনষ্টেড প্যাৰেণ্টেজ থাকে। আপোনাৰ লক্ষ্য হ'ল // >>> separate_paren_groups(""( ) (( )) (( )( ))"")
// [""()"", ""(())"", ""(()())""]
function separate_paren_groups(paren_string: string): string[] {
","function separate_paren_groups(paren_string: string): string[] {
    const result: string[] = [];
    let currentGroup: string = """";
    let balance: number = 0;

    for (let char of paren_string) {
        if (char === ' ') {
            continue; // Ignore spaces
        }
        
        currentGroup += char;

        if (char === '(') {
            balance++;
        } else if (char === ')') {
            balance--;
        }

        if (balance === 0 && currentGroup.length > 0) {
            result.push(currentGroup);
            currentGroup = """";
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = separate_paren_groups;
  assert.deepEqual(candidate(""(()()) ((())) () ((())()())""),[""(()())"", ""((()))"", ""()"", ""((())()())""]);
  assert.deepEqual(candidate(""() (()) ((())) (((())))""),[""()"", ""(())"", ""((()))"", ""(((())))""]);
  assert.deepEqual(candidate(""(()(())((())))""),[""(()(())((())))""]);
  assert.deepEqual(candidate(""( ) (( )) (( )( ))""),[""()"", ""(())"", ""(()())""]);
}

test();"
HumanEval_2,asm_Beng,ts,"//সংখ্যাৰ দশমিক অংশ ঘূৰাই দিয়ক।//(অৱশিষ্ট অংশটো সদায় ১ তকৈ সৰু) ।//আৰু পূৰ্ণসংখ্যাৰ অংশ (প্ৰদত্ত সংখ্যাতকৈ ডাঙৰ পূৰ্ণসংখ্যাৰ) আৰু দশমিক সংখ্যা //এটা ধনাত্মক ভ্ৰাম্যমাণ বিন্দু সংখ্যা দিয়া হ'লে, ইয়াক লৈ বিভাজিত কৰিব পাৰি।// >>> truncate_number(3.5)
// 0.5
function truncate_number(number: number): number {
","function truncate_number(number: number): number {
    const integerPart = Math.floor(number);
    return number - integerPart;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = truncate_number;
  assert.deepEqual(candidate(3.5),0.5);
  assert.deepEqual(candidate(1.25),0.25);
  assert.deepEqual(candidate(123.0),0.0);
}

test();"
HumanEval_3,asm_Beng,ts,"//এইখিনিতে ফাংচন true ৰিটাৰ্ণ কৰিব লাগে অন্যথা false ৰিটাৰ্ণ কৰিব লাগে।//আপোনাৰ কাম হ'ল যিকোনো মুহূৰ্ততে একাউণ্টৰ বেলেন্স শূন্যৰ তললৈ নামি যায়, আৰু //আপুনি এটা বেংক একাউণ্টত জমা আৰু উঠাই লোৱাৰ বিভিন্ন ধৰণৰ কাৰ্য্য প্ৰদান কৰা হয় যিটো ৰ সৈতে আৰম্ভ হয়// >>> below_zero([1, 2, 3])
// false
// >>> below_zero([1, 2, -4, 5])
// true
function below_zero(operations: number[]): boolean {
","function below_zero(operations: number[]): boolean {
    let balance = 0;
    
    for (let operation of operations) {
        balance += operation;
        if (balance < 0) {
            return true;
        }
    }
    
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = below_zero;
  assert.deepEqual(candidate([]),false);
  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);
  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);
  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);
  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);
  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);
}

test();"
HumanEval_4,asm_Beng,ts,"//MAD = গড়। x - x_মেনা।//এটা উপাদান আৰু এটা কেন্দ্ৰ বিন্দু (এই ক্ষেত্ৰত গড়)://গড় নিখুঁত বিচ্যুতি হ'ল প্ৰতিটো //এই ডাটা ছেটৰ গড়ৰ আশে-পাশে।//ইনপুট নম্বৰসমূহৰ এটা দিয়া এৰেজৰ বাবে, গড় নিখুঁত বিচ্যুতি গণনা কৰক।// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
// 1.0
function mean_absolute_deviation(numbers: number[]): number {
","function mean_absolute_deviation(numbers: number[]): number {
    const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;
    const absoluteDifferences = numbers.map(num => Math.abs(num - mean));
    const mad = absoluteDifferences.reduce((acc, diff) => acc + diff, 0) / numbers.length;
    return mad;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = mean_absolute_deviation;
  assert.deepEqual(candidate([1.0, 2.0]),0.5);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);
}

test();"
HumanEval_5,asm_Beng,ts,"//ইনপুট এৰেজৰ প্ৰত্যেক দুটা ক্ৰমাগত উপাদানৰ মাজত এটা সংখ্যা 'ডিলিমিটাৰ' সন্নিৱিষ্ট কৰক ∀numbers' // >>> intersperse([], 4)
// []
// >>> intersperse([1, 2, 3], 4)
// [1, 4, 2, 4, 3]
function intersperse(numbers: number[], delimeter: number): number[] {
","function intersperse(numbers: number[], delimeter: number): number[] {
    if (numbers.length === 0) {
        return [];
    }

    let result: number[] = [];

    for (let i = 0; i < numbers.length; i++) {
        result.push(numbers[i]);
        if (i < numbers.length - 1) {
            result.push(delimeter);
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = intersperse;
  assert.deepEqual(candidate([], 7),[]);
  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);
  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);
}

test();"
HumanEval_6,asm_Beng,ts,"//উদাহৰণস্বৰূপে (() (()) ৰ গঁড়ৰ সংখ্যা সৰ্বাধিক দুটাকৈ স্তৰ হোৱাৰ বিপৰীতে ((())) ৰ সংখ্যা তিনিটা।//প্ৰতিটো গোটৰ বাবে, বন্ধনীসমূহৰ অন্তৰালত থকা গভীৰতম স্তৰটো আউটপুট কৰক।//এই ফাংচনৰ ইনপুট হৈছে স্পেচৰে পৃথক কৰা ব্ৰেণ্টেজসমূহৰ বাবে একাধিক গোট প্ৰতিনিধিত্ব কৰা এটা ষ্ট্ৰিং।// >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
// [2, 3, 1, 3]
function parse_nested_parens(paren_string: string): number[] {
","function parse_nested_parens(paren_string: string): number[] {
    return paren_string.split(' ').map(group => {
        let maxDepth = 0;
        let currentDepth = 0;

        for (const char of group) {
            if (char === '(') {
                currentDepth++;
                if (currentDepth > maxDepth) {
                    maxDepth = currentDepth;
                }
            } else if (char === ')') {
                currentDepth--;
            }
        }

        return maxDepth;
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = parse_nested_parens;
  assert.deepEqual(candidate(""(()()) ((())) () ((())()())""),[2, 3, 1, 3]);
  assert.deepEqual(candidate(""() (()) ((())) (((())))""),[1, 2, 3, 4]);
  assert.deepEqual(candidate(""(()(())((())))""),[4]);
}

test();"
HumanEval_7,asm_Beng,ts,"//কেৱল নিৰ্দিষ্ট উপশ্ৰেণী থকা শাৰীবোৰৰ বাবেহে ইনপুট শাৰী ফিল্টাৰ কৰক ।// >>> filter_by_substring([], ""a"")
// []
// >>> filter_by_substring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
// [""abc"", ""bacd"", ""array""]
function filter_by_substring(strings: string[], substring: string): string[] {
","function filter_by_substring(strings: string[], substring: string): string[] {
    return strings.filter(s => s.includes(substring));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_by_substring;
  assert.deepEqual(candidate([], ""john""),[]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""),[""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""]);
  assert.deepEqual(candidate([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""),[""grunt"", ""prune""]);
}

test();"
HumanEval_8,asm_Beng,ts,"//খালী যোগফলটো 0 আৰু খালী উৎপাদিতটো 1 হ'ব লাগে।//এটা অখণ্ড সংখ্যাৰ অ্যারেৰ বাবে, এটা অখণ্ড সংখ্যাৰ অ্যারেৰ যোগফল আৰু উৎপাদনৰ পৰা এটা অখণ্ড সংখ্যাৰ অ্যারে ঘূৰাই দিব.// >>> sum_product([])
// [0, 1]
// >>> sum_product([1, 2, 3, 4])
// [10, 24]
function sum_product(numbers: number[]): [number, number] {
","function sum_product(numbers: number[]): [number, number] {
    const sum = numbers.reduce((acc, curr) => acc + curr, 0);
    const product = numbers.reduce((acc, curr) => acc * curr, 1);
    return [sum, product];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_product;
  assert.deepEqual(candidate([]),[0, 1]);
  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);
  assert.deepEqual(candidate([100, 0]),[100, 0]);
  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);
  assert.deepEqual(candidate([10]),[10, 10]);
}

test();"
HumanEval_9,asm_Beng,ts,"//ক্ৰম অনুসাৰে।//এটা নিৰ্দিষ্ট সংখ্যাৰ এৰেজৰ পৰা, এটা নিৰ্দিষ্ট মুহূৰ্তলৈকে পোৱা ৰোলিং সৰ্বাধিক উপাদানৰ এৰেজ সৃষ্টি কৰা ।// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
// [1, 2, 3, 3, 3, 4, 4]
function rolling_max(numbers: number[]): number[] {
","function rolling_max(numbers: number[]): number[] {
    let maxArray: number[] = [];
    let currentMax: number = Number.NEGATIVE_INFINITY;
    
    for (let i = 0; i < numbers.length; i++) {
        if (numbers[i] > currentMax) {
            currentMax = numbers[i];
        }
        maxArray.push(currentMax);
    }

    return maxArray;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rolling_max;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);
  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);
  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);
}

test();"
HumanEval_10,asm_Beng,ts,"//- ষ্ট্ৰিংৰ শেষত এটা ষ্ট্ৰিং উপসৰ্গ সংলগ্ন কৰক যিটো পলিণ্ড্ৰোমিক উপসৰ্গৰ আগতে আহে।//- এটা পলিণ্ড্ৰ'ম থকা যোগান ধৰা স্ট্ৰিংৰ দীৰ্ঘতম পোষ্টফিক্সটো বিচাৰি উলিওৱা ।//অ্যালগৰিদমৰ ধাৰণাটো সহজঃ//এটা যোগান ধৰা স্ট্ৰিংৰ সৈতে আৰম্ভ হোৱা আটাইতকৈ সৰু পালিনড্ৰমটো বিচাৰি উলিওৱা।// >>> make_palindrome("""")
// """"
// >>> make_palindrome(""cat"")
// ""catac""
// >>> make_palindrome(""cata"")
// ""catac""
function make_palindrome(string: string): string {
","function make_palindrome(string: string): string {
    function isPalindrome(s: string): boolean {
        let left = 0;
        let right = s.length - 1;
        while (left < right) {
            if (s[left] !== s[right]) return false;
            left++;
            right--;
        }
        return true;
    }

    const n = string.length;
    let longestPalindromicPostfixIndex = n;

    for (let i = 0; i < n; i++) {
        if (isPalindrome(string.substring(i))) {
            longestPalindromicPostfixIndex = i;
            break;
        }
    }

    const prefix = string.substring(0, longestPalindromicPostfixIndex);
    const reversedPrefix = prefix.split('').reverse().join('');
    return string + reversedPrefix;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = make_palindrome;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""x""),""x"");
  assert.deepEqual(candidate(""xyz""),""xyzyx"");
  assert.deepEqual(candidate(""xyx""),""xyx"");
  assert.deepEqual(candidate(""jerry""),""jerryrrej"");
}

test();"
HumanEval_11,asm_Beng,ts,"//এই ইনপুটসমূহত বাইনেৰী XOR প্ৰদৰ্শন কৰক আৰু ফলাফলটো এটা ষ্ট্ৰিং হিচাপেও ঘূৰাই দিয়ক।//ইনপুট দুটা ষ্ট্ৰিং a আৰু b য'ত কেৱল 1s আৰু 0s থাকে।// >>> string_xor(""010"", ""110"")
// ""100""
function string_xor(a: string, b: string): string {
","function string_xor(a: string, b: string): string {
    let result = '';
    for (let i = 0; i < a.length; i++) {
        result += (a[i] === b[i] ? '0' : '1');
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_xor;
  assert.deepEqual(candidate(""111000"", ""101010""),""010010"");
  assert.deepEqual(candidate(""1"", ""1""),""0"");
  assert.deepEqual(candidate(""0101"", ""0000""),""0101"");
}

test();"
HumanEval_12,asm_Beng,ts,"//একে দীঘলীয়া শাৰী। যদি ইনপুট এৰে খালী হয় তেন্তে undefined ঘূৰাই দিব।//এটা অংকন সূত্ৰৰ ভিতৰত দীৰ্ঘতমটো ঘূৰাই দিব. বহুতো অংকন সূত্ৰৰ ক্ষেত্ৰত প্ৰথমটো ঘূৰাই দিব.// >>> longest([])
// undefined
// >>> longest([""a"", ""b"", ""c""])
// ""a""
// >>> longest([""a"", ""bb"", ""ccc""])
// ""ccc""
function longest(strings: string[]): string | undefined {
","function longest(strings: string[]): string | undefined {
    if (strings.length === 0) {
        return undefined;
    }

    let longestString = strings[0];

    for (const str of strings) {
        if (str.length > longestString.length) {
            longestString = str;
        }
    }

    return longestString;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = longest;
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([""x"", ""y"", ""z""]),""x"");
  assert.deepEqual(candidate([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]),""zzzz"");
}

test();"
HumanEval_13,asm_Beng,ts,"//দুটা পূৰ্ণসংখ্যাৰ a আৰু b ৰ সৰ্ববৃহৎ সাধাৰণ বিভাজক ঘূৰাই দিয়া ।// >>> greatest_common_divisor(3, 5)
// 1
// >>> greatest_common_divisor(25, 15)
// 5
function greatest_common_divisor(a: number, b: number): number {
","function greatest_common_divisor(a: number, b: number): number {
    while (b !== 0) {
        let temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = greatest_common_divisor;
  assert.deepEqual(candidate(3, 7),1);
  assert.deepEqual(candidate(10, 15),5);
  assert.deepEqual(candidate(49, 14),7);
  assert.deepEqual(candidate(144, 60),12);
}

test();"
HumanEval_14,asm_Beng,ts,"//ইনপুট ষ্ট্ৰিংৰ আটাইতকৈ সৰুৰ পৰা দীঘললৈ সকলো উপসৰ্গৰ এৰেজ ঘূৰাই আনে// >>> all_prefixes(""abc"")
// [""a"", ""ab"", ""abc""]
function all_prefixes(string: string): string[] {
","function all_prefixes(string: string): string[] {
    const result: string[] = [];
    for (let i = 1; i <= string.length; i++) {
        result.push(string.substring(0, i));
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = all_prefixes;
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""asdfgh""),[""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""]);
  assert.deepEqual(candidate(""WWW""),[""W"", ""WW"", ""WWW""]);
}

test();"
HumanEval_15,asm_Beng,ts,"//0 ৰ পৰা n লৈকে অন্তৰ্ভুক্ত স্থান-সীমাবদ্ধ সংখ্যা থকা এটা স্ট্ৰিং ঘূৰাই আনে।// >>> string_sequence(0)
// ""0""
// >>> string_sequence(5)
// ""0 1 2 3 4 5""
function string_sequence(n: number): string {
","function string_sequence(n: number): string {
    let result: string[] = [];
    for (let i = 0; i <= n; i++) {
        result.push(i.toString());
    }
    return result.join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_sequence;
  assert.deepEqual(candidate(0),""0"");
  assert.deepEqual(candidate(3),""0 1 2 3"");
  assert.deepEqual(candidate(10),""0 1 2 3 4 5 6 7 8 9 10"");
}

test();"
HumanEval_16,asm_Beng,ts,"//এটা ষ্ট্ৰিং দিয়া হৈছে, কত পৃথক বৰ্ণ (কোনো কেচ নাথাকিলেও) ইয়াত আছে জানক।// >>> count_distinct_characters(""xyzXYZ"")
// 3
// >>> count_distinct_characters(""Jerry"")
// 4
function count_distinct_characters(string: string): number {
","function count_distinct_characters(inputString: string): number {
    const lowerCasedString = inputString.toLowerCase();
    const distinctCharacters = new Set<string>();

    for (const char of lowerCasedString) {
        distinctCharacters.add(char);
    }

    return distinctCharacters.size;
}

// Example usage:
console.log(count_distinct_characters(""xyzXYZ"")); // Output: 3
console.log(count_distinct_characters(""Jerry""));  // Output: 4","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_distinct_characters;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""abcde""),5);
  assert.deepEqual(candidate(""abcdecadeCADE""),5);
  assert.deepEqual(candidate(""aaaaAAAAaaaa""),1);
  assert.deepEqual(candidate(""Jerry jERRY JeRRRY""),5);
}

test();"
HumanEval_17,asm_Beng,ts,"//'হ'ব' - কোয়াৰ্টাৰ নোট, এটা বীট থাকে//'অ' হ'ব' - আধা নোট, দুটা বীট থাকে।//'অ' - সম্পূৰ্ণ নোট, চাৰিটা বীট থাকে।//ইয়াত এটা কিংবদন্তি আছে://শেষৰটো নহয়।//আপোনাৰ কাম হৈছে এই শাৰীটো বিশ্লেষণ কৰা আৰু প্ৰত্যেকটো কিমান বীট কৰে তাৰ সৈতে সামঞ্জস্য থকা পূৰ্ণসংখ্যাৰ এৰেজ ঘূৰাই দিয়া ।//এই ফাংচনৰ ইনপুট হৈছে এটা বিশেষ ASCII ফৰ্মেটত সংগীত নোট প্ৰতিনিধিত্ব কৰা এটা শাৰী।// >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
function parse_music(music_string: string): number[] {
","function parse_music(music_string: string): number[] {
    const notes = music_string.split(' ');
    return notes.map(note => {
        switch (note) {
            case 'o':
                return 4;
            case 'o|':
                return 2;
            case '.|':
                return 1;
            default:
                return 0;
        }
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = parse_music;
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""o o o o""),[4, 4, 4, 4]);
  assert.deepEqual(candidate("".| .| .| .|""),[1, 1, 1, 1]);
  assert.deepEqual(candidate(""o| o| .| .| o o o o""),[2, 2, 1, 1, 4, 4, 4, 4]);
  assert.deepEqual(candidate(""o| .| o| .| o o| o o|""),[2, 1, 2, 1, 4, 2, 4, 2]);
}

test();"
HumanEval_18,asm_Beng,ts,"//এটা নিৰ্দিষ্ট ছাবষ্ট্ৰিংৰ প্ৰাথমিক ষ্ট্ৰিংত কিমানবাৰ পোৱা যায় বিচাৰক। ওভাৰল্যাপিং কেচবোৰ গণনা কৰক।// >>> how_many_times("""", ""a"")
// 0
// >>> how_many_times(""aaa"", ""a"")
// 3
// >>> how_many_times(""aaaa"", ""aa"")
// 3
function how_many_times(string: string, substring: string): number {
","function how_many_times(string: string, substring: string): number {
    if (substring.length === 0) return 0;
    let count = 0;
    for (let i = 0; i <= string.length - substring.length; i++) {
        if (string.substring(i, i + substring.length) === substring) {
            count++;
        }
    }
    return count;
}

// Example usage:
// console.log(how_many_times(""aaa"", ""a"")); // Output: 3
// console.log(how_many_times(""aaaa"", ""aa"")); // Output: 3
// console.log(how_many_times("""", ""a"")); // Output: 0","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = how_many_times;
  assert.deepEqual(candidate("""", ""x""),0);
  assert.deepEqual(candidate(""xyxyxyx"", ""x""),4);
  assert.deepEqual(candidate(""cacacacac"", ""cac""),4);
  assert.deepEqual(candidate(""john doe"", ""john""),1);
}

test();"
HumanEval_19,asm_Beng,ts,"//সৰুৰ পৰা ডাঙৰলৈ শাৰীবদ্ধ কৰা সংখ্যাৰে সৈতে শাৰী ঘূৰাই আনে ।//বৈধ বিকল্পসমূহ হৈছে 'শূন্য', 'এটা', 'দুটা', 'তিনি', 'চাৰি', 'পাঁচ', 'ছয়', 'সাত', 'আঠ' আৰু 'নয়'।//ইনপুট হৈছে 'শূন্য'ৰ পৰা 'ন'লৈ সংখ্যাসমূহৰ এটা স্থান-সীমাবদ্ধ শৃংখলা।// >>> sort_numbers(""three one five"")
// ""one three five""
function sort_numbers(numbers: string): string {
","function sort_numbers(numbers: string): string {
    const numberWords = [
        'zero', 'one', 'two', 'three', 'four', 
        'five', 'six', 'seven', 'eight', 'nine'
    ];
    
    // Split the input string into an array of words
    const wordsArray = numbers.split(' ');

    // Sort the wordsArray based on the index of each word in numberWords
    wordsArray.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));

    // Join the sorted array back into a space-delimited string and return
    return wordsArray.join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_numbers;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""three""),""three"");
  assert.deepEqual(candidate(""three five nine""),""three five nine"");
  assert.deepEqual(candidate(""five zero four seven nine eight""),""zero four five seven eight nine"");
  assert.deepEqual(candidate(""six five four three two one zero""),""zero one two three four five six"");
}

test();"
HumanEval_20,asm_Beng,ts,"//বাকীবোৰ ক্ৰম অনুসাৰে ঘূৰাই দিয়ক (সৰু সংখ্যা, ডাঙৰ সংখ্যা) ।//এটা যোগান ধৰা সংখ্যাৰ এৰেজ (অন্তত দুটাৰ দৈৰ্ঘ্যৰ) ৰ পৰা প্ৰতিটো সংখ্যাৰ সৰ্বাধিক কাষৰ দুটা নিৰ্বাচন কৰি উভতাই দিব // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
// [2.0, 2.2]
// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
// [2.0, 2.0]
function find_closest_elements(numbers: number[]): [number, number] {
","function find_closest_elements(numbers: number[]): [number, number] {
    if (numbers.length < 2) {
        throw new Error(""Array must contain at least two numbers"");
    }

    // Sort the array so that we can check consecutive elements
    numbers.sort((a, b) => a - b);

    let closestPair: [number, number] = [numbers[0], numbers[1]];
    let minDifference = Math.abs(numbers[1] - numbers[0]);

    for (let i = 1; i < numbers.length - 1; i++) {
        let currentDifference = Math.abs(numbers[i + 1] - numbers[i]);
        if (currentDifference < minDifference) {
            minDifference = currentDifference;
            closestPair = [numbers[i], numbers[i + 1]];
        }
    }

    return closestPair;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = find_closest_elements;
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);
}

test();"
HumanEval_21,asm_Beng,ts,"//এনেদৰে সৰু সংখ্যাৰ সংখ্যাটো হ'ব 0 আৰু ডাঙৰ সংখ্যাৰ সংখ্যাটো হ'ব 1 ।//সংখ্যাৰ এটা অ্যারে (অন্তত দুটা উপাদানৰ), দিয়া হৈছে, সেই অ্যারেৰ এটা ৰেখীয় পৰিবৰ্তন প্ৰয়োগ কৰক, // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
// [0.0, 0.25, 0.5, 0.75, 1.0]
function rescale_to_unit(numbers: number[]): number[] {
","function rescale_to_unit(numbers: number[]): number[] {
    if (numbers.length < 2) {
        throw new Error(""Array must contain at least two elements"");
    }

    const min = Math.min(...numbers);
    const max = Math.max(...numbers);
    const range = max - min;

    if (range === 0) {
        throw new Error(""All numbers are the same; rescale not possible"");
    }

    return numbers.map(num => (num - min) / range);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rescale_to_unit;
  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);
  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);
  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);
  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);
}

test();"
HumanEval_22,asm_Beng,ts,"//কেৱল পূৰ্ণসংখ্যাৰ বাবে যিকোনো tsthon মানৰ দিয়া এৰেজ ফিল্টাৰ কৰক// >>> filter_integers([""a"", 3.14, 5])
// [5]
// >>> filter_integers([1, 2, 3, ""abc"", {}, []])
// [1, 2, 3]
function filter_integers(values: any[]): number[] {
","function filter_integers(values: any[]): number[] {
    return values.filter(value => Number.isInteger(value));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_integers;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([4, {}, [], 23.2, 9, ""adasd""]),[4, 9]);
  assert.deepEqual(candidate([3, ""c"", 3, 3, ""a"", ""b""]),[3, 3, 3]);
}

test();"
HumanEval_23,asm_Beng,ts,"//প্ৰদান কৰা স্ট্ৰিংৰ ৰিটাৰ্ণ দৈৰ্ঘ্য // >>> strlen("""")
// 0
// >>> strlen(""abc"")
// 3
function strlen(string: string): number {
","function strlen(string: string): number {
    return string.length;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = strlen;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""x""),1);
  assert.deepEqual(candidate(""asdasnakj""),9);
}

test();"
HumanEval_24,asm_Beng,ts,"//এটা নিৰ্দিষ্ট সংখ্যাৰ বাবে, আটাইতকৈ ডাঙৰ সংখ্যাটো বিচাৰক যি n ৰ সমান ভাঙি, n ৰ পৰা সৰু।// >>> largest_divisor(15)
// 5
function largest_divisor(n: number): number {
","function largest_divisor(n: number): number {
    for (let i = n - 1; i > 0; i--) {
        if (n % i === 0) {
            return i;
        }
    }
    return 1; // By mathematical definition, 1 is a divisor of any integer.
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_divisor;
  assert.deepEqual(candidate(3),1);
  assert.deepEqual(candidate(7),1);
  assert.deepEqual(candidate(10),5);
  assert.deepEqual(candidate(100),50);
  assert.deepEqual(candidate(49),7);
}

test();"
HumanEval_25,asm_Beng,ts,"//ইনপুট নম্বৰটো সকলো কাৰকৰ উৎপাদনৰ সমান হ'ব লাগে।//প্ৰতিটো কাৰকক গুণন পদ্ধতিত কিমানবাৰ দেখা যায় তাৰ অনুপাতে সংখ্যা বৰ্গ কৰি দিয়া উচিত।//এটা অখণ্ড সংখ্যাৰ অগ্ৰগণ্য কাৰকসমূহৰ সৰুৰ পৰা ডাঙৰলৈ ক্ৰম অনুসাৰে অংকন কৰা সমষ্টিটো ঘূৰাই আনে।// >>> factorize(8)
// [2, 2, 2]
// >>> factorize(25)
// [5, 5]
// >>> factorize(70)
// [2, 5, 7]
function factorize(n: number): number[] {
","function factorize(n: number): number[] {
    const factors: number[] = [];
    let divisor = 2;
    
    while (n >= 2) {
        if (n % divisor === 0) {
            factors.push(divisor);
            n /= divisor;
        } else {
            divisor++;
        }
    }

    return factors;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = factorize;
  assert.deepEqual(candidate(2),[2]);
  assert.deepEqual(candidate(4),[2, 2]);
  assert.deepEqual(candidate(8),[2, 2, 2]);
  assert.deepEqual(candidate(57),[3, 19]);
  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);
  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);
  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);
  assert.deepEqual(candidate(18),[2, 3, 3]);
}

test();"
HumanEval_26,asm_Beng,ts,"//ইনপুটৰ দৰে এলিমেণ্টৰ ক্ৰমটো একেই ৰাখক।//এটা সম্পূৰ্ণ সংখ্যাৰ সজ্জাত, এটাতকৈ অধিকবাৰ হোৱা সকলোবোৰ উপাদান আঁতৰাওক।// >>> remove_duplicates([1, 2, 3, 2, 4])
// [1, 3, 4]
function remove_duplicates(numbers: number[]): number[] {
","function remove_duplicates(numbers: number[]): number[] {
    const frequencyMap: Map<number, number> = new Map();

    // Count the occurrences of each number
    for (const num of numbers) {
        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
    }

    // Filter out the numbers occurring more than once
    return numbers.filter(num => frequencyMap.get(num) === 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = remove_duplicates;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);
  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);
}

test();"
HumanEval_27,asm_Beng,ts,"//এটা নিৰ্দিষ্ট শাৰী বাবে, সৰু আখৰবোৰ ডাঙৰ আখৰলৈ আৰু ডাঙৰ আখৰবোৰ সৰু আখৰলৈ ঘূৰাই দিয়ক।// >>> flip_case(""Hello"")
// ""hELLO""
function flip_case(string: string): string {
","function flip_case(str: string): string {
    let flipped = '';
    for (let char of str) {
        if (char === char.toUpperCase()) {
            flipped += char.toLowerCase();
        } else {
            flipped += char.toUpperCase();
        }
    }
    return flipped;
}

// Example usage:
console.log(flip_case(""Hello"")); // Output: ""hELLO""","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = flip_case;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""Hello!""),""hELLO!"");
  assert.deepEqual(candidate(""These violent delights have violent ends""),""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"");
}

test();"
HumanEval_28,asm_Beng,ts,"//এটা এটা ষ্ট্ৰিংত ষ্ট্ৰিংৰ সংমিশ্ৰণ কৰক// >>> concatenate([])
// """"
// >>> concatenate([""a"", ""b"", ""c""])
// ""abc""
function concatenate(strings: string[]): string {
","function concatenate(strings: string[]): string {
    return strings.join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = concatenate;
  assert.deepEqual(candidate([]),"""");
  assert.deepEqual(candidate([""x"", ""y"", ""z""]),""xyz"");
  assert.deepEqual(candidate([""x"", ""y"", ""z"", ""w"", ""k""]),""xyzwk"");
}

test();"
HumanEval_29,asm_Beng,ts,"//কেৱল এটা নিৰ্দিষ্ট উপসৰ্গৰে আৰম্ভ হোৱা শাৰীবোৰৰ বাবে এটা ইনপুট শাৰী ফিল্টাৰ কৰক।// >>> filter_by_prefix([], ""a"")
// []
// >>> filter_by_prefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
// [""abc"", ""array""]
function filter_by_prefix(strings: string[], prefix: string): string[] {
","function filter_by_prefix(strings: string[], prefix: string): string[] {
    return strings.filter(str => str.startsWith(prefix));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_by_prefix;
  assert.deepEqual(candidate([], ""john""),[]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""]);
}

test();"
HumanEval_30,asm_Beng,ts,"//কেৱল ধনাত্মক সংখ্যাবোৰহে ৰিটাৰ্ণ কৰে।// >>> get_positive([-1, 2, -4, 5, 6])
// [2, 5, 6]
// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
// [5, 3, 2, 3, 9, 123, 1]
function get_positive(l: number[]): number[] {
","function get_positive(l: number[]): number[] {
    return l.filter(num => num > 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_positive;
  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);
  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);
  assert.deepEqual(candidate([-1, -2]),[]);
  assert.deepEqual(candidate([]),[]);
}

test();"
HumanEval_31,asm_Beng,ts,"//এটা অংক অংক হ'লে সত্য আৰু অন্যথা মিছা উভতাই দিব।// >>> is_prime(6)
// false
// >>> is_prime(101)
// true
// >>> is_prime(11)
// true
// >>> is_prime(13441)
// true
// >>> is_prime(61)
// true
// >>> is_prime(4)
// false
// >>> is_prime(1)
// false
function is_prime(n: number): boolean {
","function is_prime(n: number): boolean {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_prime;
  assert.deepEqual(candidate(6),false);
  assert.deepEqual(candidate(101),true);
  assert.deepEqual(candidate(11),true);
  assert.deepEqual(candidate(13441),true);
  assert.deepEqual(candidate(61),true);
  assert.deepEqual(candidate(4),false);
  assert.deepEqual(candidate(1),false);
  assert.deepEqual(candidate(5),true);
  assert.deepEqual(candidate(11),true);
  assert.deepEqual(candidate(17),true);
  assert.deepEqual(candidate(85),false);
  assert.deepEqual(candidate(77),false);
  assert.deepEqual(candidate(255379),false);
}

test();"
HumanEval_33,asm_Beng,ts,"//এই সূচকসমূহক 'l'ৰ সৈতে মিলোৱা হয়, কিন্তু এই সূচকসমূহক পৃথকভাৱে ভাগ কৰা হয়।//l' হ'ল l ৰ সৈতে একে, যিটো সূচকবোৰ তিনিটাৰে বিভাজ্য নহয়, কিন্তু যিটো সূচকবোৰ তিনিটাৰে বিভাজ্য তাৰ মানবোৰ সমান //এই ফাংশনটোৱে এটা এৰেজ লয় আৰু এটা এৰেজ ঘূৰাই আনে l' যেনে // >>> sort_third([1, 2, 3])
// [1, 2, 3]
// >>> sort_third([5, 6, 3, 4, 8, 9, 2])
// [2, 6, 3, 4, 8, 9, 5]
function sort_third(l: number[]): number[] {
","function sort_third(l: number[]): number[] {
    const indicesDivByThree = l.map((_, i) => i).filter(i => i % 3 === 0);
    const valuesDivByThree = indicesDivByThree.map(i => l[i]).sort((a, b) => a - b);

    const result = l.slice();
    for (let i = 0; i < indicesDivByThree.length; i++) {
        result[indicesDivByThree[i]] = valuesDivByThree[i];
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_third;
  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);
  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);
  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);
  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);
}

test();"
HumanEval_34,asm_Beng,ts,"//এটা সজ্জাত শৃংখলিত অনন্য উপাদানৰ সমল ঘূৰাই আনে// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
// [0, 2, 3, 5, 9, 123]
function unique(l: number[]): number[] {
","function unique(l: number[]): number[] {
    const uniqueSet = new Set(l);
    const uniqueArray = Array.from(uniqueSet);
    uniqueArray.sort((a, b) => a - b);
    return uniqueArray;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = unique;
  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);
}

test();"
HumanEval_35,asm_Beng,ts,"//অংকনক্ষেত্ৰৰ সৰ্বোচ্চ উপাদান ঘূৰাই আনে।// >>> max_element([1, 2, 3])
// 3
// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
// 123
function max_element(l: number[]): number {
","function max_element(l: number[]): number {
    if (l.length === 0) {
        throw new Error(""Array is empty"");
    }
    let max = l[0];
    for (let i = 1; i < l.length; i++) {
        if (l[i] > max) {
            max = l[i];
        }
    }
    return max;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = max_element;
  assert.deepEqual(candidate([1, 2, 3]),3);
  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);
}

test();"
HumanEval_36,asm_Beng,ts,"//11 বা 13 ৰ দ্বাৰা বিভাজ্য n ৰ কম সংখ্যক পূৰ্ণ সংখ্যাত 7 সংখ্যাটো প্ৰকাশ হোৱা বাৰ সংখ্যাটো ঘূৰাই দিয়ক।// >>> fizz_buzz(50)
// 0
// >>> fizz_buzz(78)
// 2
// >>> fizz_buzz(79)
// 3
function fizz_buzz(n: number): number {
","function fizz_buzz(n: number): number {
    let count = 0;

    for (let i = 1; i < n; i++) {
        if (i % 11 === 0 || i % 13 === 0) {
            let numString = i.toString();
            for (let char of numString) {
                if (char === '7') {
                    count++;
                }
            }
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fizz_buzz;
  assert.deepEqual(candidate(50),0);
  assert.deepEqual(candidate(78),2);
  assert.deepEqual(candidate(79),3);
  assert.deepEqual(candidate(100),3);
  assert.deepEqual(candidate(200),6);
  assert.deepEqual(candidate(4000),192);
  assert.deepEqual(candidate(10000),639);
  assert.deepEqual(candidate(100000),8026);
}

test();"
HumanEval_37,asm_Beng,ts,"//l ৰ জোৰা সূচকৰ মানসমূহলৈ, কিন্তু ছাৰ্ট কৰা হৈছে।//l' অদ্ভুত সূচকৰ ক্ষেত্ৰত l ৰ সৈতে একে, যদিও জোৰা সূচকৰ ক্ষেত্ৰত ইয়াৰ মান সমান হয়।//এই ফাংশনটোৱে এটা এৰেজ লয় আৰু এটা এৰেজ ঘূৰাই আনে l' যেনে // >>> sort_even([1, 2, 3])
// [1, 2, 3]
// >>> sort_even([5, 6, 3, 4])
// [3, 6, 5, 4]
function sort_even(l: number[]): number[] {
","function sort_even(l: number[]): number[] {
    const evenIndices: number[] = [];
    const result: number[] = [...l];

    // Collect values at even indices
    for (let i = 0; i < l.length; i += 2) {
        evenIndices.push(l[i]);
    }

    // Sort the collected even indices values
    evenIndices.sort((a, b) => a - b);

    // Place the sorted values back in their original even indices
    for (let i = 0; i < l.length; i += 2) {
        result[i] = evenIndices.shift()!;
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_even;
  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);
  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);
  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);
}

test();"
HumanEval_39,asm_Beng,ts,"//prime_fib n-তম সংখ্যাক উভতাই দিয়ে যিটো এটা ফিব'নাচি সংখ্যা আৰু ইও এটা অগ্ৰগণ্য সংখ্যা।// >>> prime_fib(1)
// 2
// >>> prime_fib(2)
// 3
// >>> prime_fib(3)
// 5
// >>> prime_fib(4)
// 13
// >>> prime_fib(5)
// 89
function prime_fib(n: number): number {
","function isPrime(num: number): boolean {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 === 0 || num % 3 === 0) return false;
    for (let i = 5; i * i <= num; i += 6) {
        if (num % i === 0 || num % (i + 2) === 0) return false;
    }
    return true;
}

function* fibonacciGenerator(): Generator<number, void, unknown> {
    let a = 0, b = 1;
    while (true) {
        let current = a;
        a = b;
        b = current + b;
        yield current;
    }
}

function prime_fib(n: number): number {
    const fibGen = fibonacciGenerator();
    let primeFibs: number[] = [];
    let i = 0;
    while (primeFibs.length < n) {
        const fibNum = fibGen.next().value;
        if (isPrime(fibNum)) {
            primeFibs.push(fibNum);
        }
    }
    return primeFibs[n - 1];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prime_fib;
  assert.deepEqual(candidate(1),2);
  assert.deepEqual(candidate(2),3);
  assert.deepEqual(candidate(3),5);
  assert.deepEqual(candidate(4),13);
  assert.deepEqual(candidate(5),89);
  assert.deepEqual(candidate(6),233);
  assert.deepEqual(candidate(7),1597);
  assert.deepEqual(candidate(8),28657);
  assert.deepEqual(candidate(9),514229);
  assert.deepEqual(candidate(10),433494437);
}

test();"
HumanEval_40,asm_Beng,ts,"//মুঠতে শূন্য, আৰু অন্যথা মিছা।//যদিহে এটা এৰেজত তিনিটা পৃথক উপাদান আছে যি //triples_sum_to_zero এটা অখণ্ড সংখ্যাৰ সজ্জা এটা ইনপুট হিচাপে লয়।// >>> triples_sum_to_zero([1, 3, 5, 0])
// false
// >>> triples_sum_to_zero([1, 3, -2, 1])
// true
// >>> triples_sum_to_zero([1, 2, 3, 7])
// false
// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
// true
// >>> triples_sum_to_zero([1])
// false
function triples_sum_to_zero(l: number[]): boolean {
","function triples_sum_to_zero(l: number[]): boolean {
    if (l.length < 3) {
        return false;
    }

    // Sort the array
    l.sort((a, b) => a - b);

    // Iterate through the array
    for (let i = 0; i < l.length - 2; i++) {
        let left = i + 1;
        let right = l.length - 1;

        // Use two pointers to find a pair that makes the sum zero with l[i]
        while (left < right) {
            const sum = l[i] + l[left] + l[right];
            if (sum === 0) {
                return true;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triples_sum_to_zero;
  assert.deepEqual(candidate([1, 3, 5, 0]),false);
  assert.deepEqual(candidate([1, 3, 5, -1]),false);
  assert.deepEqual(candidate([1, 3, -2, 1]),true);
  assert.deepEqual(candidate([1, 2, 3, 7]),false);
  assert.deepEqual(candidate([1, 2, 5, 7]),false);
  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);
  assert.deepEqual(candidate([1]),false);
  assert.deepEqual(candidate([1, 3, 5, -100]),false);
  assert.deepEqual(candidate([100, 3, 5, -100]),false);
}

test();"
HumanEval_41,asm_Beng,ts,"//এই ফাংশনে এনে সংঘৰ্ষৰ সংখ্যা আউটপুট কৰে।//তেওঁলোকৰ গতিপথত যেন তেওঁলোক সংঘৰ্ষত নপৰে।//কিন্তু এই গাড়ীবোৰ অসীম শক্তিশালী আৰু শক্তিশালী, যাৰ ফলত ইবোৰ চলিয়েই থাকে।//যেতিয়া এখন গাড়ী বাওঁৰ পৰা সোঁলৈ গৈ আছে তেতিয়া এটা গাড়ী সোঁৰ পৰা বাওঁলৈ গৈ আছে তেতিয়া ই খুন্দা মাৰে।//সকলো গাড়ী একেই গতিত গতি কৰে। দুইখন গাড়ী সংঘৰ্ষ হয় বুলি কোৱা হয়।//এই দুটা গাড়ীৰ দলটো আৰম্ভ হয় বহু দূৰৈৰ পৰা।//n গাড়ী বামৰ পৰা সোঁলৈ চলিব; একে সময়তে, n গাড়ীসমূহৰ এটা বেলেগ ছেট।//এটা পথ কল্পনা কৰক যিটো সম্পূৰ্ণৰূপে সৰল, অসীম দীঘল ৰেখা।function car_race_collision(n: number): number {
","function car_race_collision(n: number): number {
    // Since the cars move at the same speed and are infinitely strong,
    // each pair of a left-to-right car and a right-to-left car will ""collide"" at some point.
    // Therefore, every pair of cars from different sets will collide exactly once.
    
    // We need to find the number of such pairs, which is simply n * n.
    return n * n;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = car_race_collision;
  assert.deepEqual(candidate(2),4);
  assert.deepEqual(candidate(3),9);
  assert.deepEqual(candidate(4),16);
  assert.deepEqual(candidate(8),64);
  assert.deepEqual(candidate(10),100);
}

test();"
HumanEval_42,asm_Beng,ts,"//১ যোগ কৰি থকা উপাদানসমূহৰ সৈতে এটা এৰেজ ঘূৰাই আনে।// >>> incr_list([1, 2, 3])
// [2, 3, 4]
// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
// [6, 4, 6, 3, 4, 4, 10, 1, 124]
function incr_list(l: number[]): number[] {
","function incr_list(l: number[]): number[] {
    return l.map(num => num + 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = incr_list;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);
  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);
}

test();"
HumanEval_43,asm_Beng,ts,"//মুঠতে শূন্য, আৰু অন্যথা মিছা।//যদিহে দুটা পৃথক উপাদান আছে, তেন্তে ই true ঘূৰাই দিয়ে।//pairs_sum_to_zero এ এটা অখণ্ড সংখ্যাৰ এৰে ইনপুট হিচাপে গ্ৰহণ কৰে।// >>> pairs_sum_to_zero([1, 3, 5, 0])
// false
// >>> pairs_sum_to_zero([1, 3, -2, 1])
// false
// >>> pairs_sum_to_zero([1, 2, 3, 7])
// false
// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
// true
// >>> pairs_sum_to_zero([1])
// false
function pairs_sum_to_zero(l: number[]): boolean {
","function pairs_sum_to_zero(l: number[]): boolean {
    const seen = new Set<number>();

    for (const num of l) {
        if (seen.has(-num)) {
            return true;
        }
        seen.add(num);
    }

    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = pairs_sum_to_zero;
  assert.deepEqual(candidate([1, 3, 5, 0]),false);
  assert.deepEqual(candidate([1, 3, -2, 1]),false);
  assert.deepEqual(candidate([1, 2, 3, 7]),false);
  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);
  assert.deepEqual(candidate([1]),false);
  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);
  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);
  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);
  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);
}

test();"
HumanEval_44,asm_Beng,ts,"//মৌলৰ সংখ্যা ১০ তকৈ কম।//ৰূপান্তৰ কৰাৰ পিছত ৰিটাৰ্ণ ষ্ট্ৰিং প্ৰতিনিধিত্ব।//ইনপুট নম্বৰ x ৰ সংখ্যাসূচক ভিত্তিটো ভিত্তিলৈ পৰিবৰ্তন কৰক।// >>> change_base(8, 3)
// ""22""
// >>> change_base(8, 2)
// ""1000""
// >>> change_base(7, 2)
// ""111""
function change_base(x: number, base: number): string {
","function change_base(x: number, base: number): string {
    if (base < 2 || base > 9) {
        throw new Error(""Base must be between 2 and 9 inclusive"");
    }
    
    if (x === 0) return ""0"";

    let result: string = """";
    let number: number = x;

    while (number > 0) {
        const remainder = number % base;
        result = remainder.toString() + result;
        number = Math.floor(number / base);
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = change_base;
  assert.deepEqual(candidate(8, 3),""22"");
  assert.deepEqual(candidate(9, 3),""100"");
  assert.deepEqual(candidate(234, 2),""11101010"");
  assert.deepEqual(candidate(16, 2),""10000"");
  assert.deepEqual(candidate(8, 2),""1000"");
  assert.deepEqual(candidate(7, 2),""111"");
  assert.deepEqual(candidate(2, 3),""2"");
  assert.deepEqual(candidate(3, 4),""3"");
  assert.deepEqual(candidate(4, 5),""4"");
  assert.deepEqual(candidate(5, 6),""5"");
  assert.deepEqual(candidate(6, 7),""6"");
  assert.deepEqual(candidate(7, 8),""7"");
}

test();"
HumanEval_45,asm_Beng,ts,"//এটা ত্ৰিভুজৰ বাবে এটা পক্ষৰ দৈৰ্ঘ্য আৰু উচ্চ ৰিটাৰ্ণ এৰীয়া দিয়া হৈছে।// >>> triangle_area(5, 3)
// 7.5
function triangle_area(a: number, h: number): number {
","function triangle_area(a: number, h: number): number {
    return 0.5 * a * h;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triangle_area;
  assert.deepEqual(candidate(5, 3),7.5);
  assert.deepEqual(candidate(2, 2),2.0);
  assert.deepEqual(candidate(10, 8),40.0);
}

test();"
HumanEval_46,asm_Beng,ts,"//অনুগ্ৰহ কৰি fib4 সংখ্যা ক্ৰমৰ n-তম উপাদানটো কাৰ্যকৰীভাৱে গণনা কৰিবলৈ এটা ফাংশন লিখক। পুনৰাবৃত্তি ব্যৱহাৰ নকৰিব।//fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ।//fib4(3) -> 0 //fib4(2) -> 2 //fib4(1) -> 0 //fib4(0) -> 0 //Fib4 সংখ্যা ক্ৰমটো Fibbonacci ক্ৰমৰ সৈতে একে ধৰণৰ ক্ৰম যিটো তলত দিয়া ধৰণে সংজ্ঞায়িত কৰা হৈছে:// >>> fib4(5)
// 4
// >>> fib4(6)
// 8
// >>> fib4(7)
// 14
function fib4(n: number): number {
","function fib4(n: number): number {
    if (n === 0) return 0;
    if (n === 1) return 0;
    if (n === 2) return 2;
    if (n === 3) return 0;

    let fibNumbers = [0, 0, 2, 0];
    for (let i = 4; i <= n; i++) {
        const nextFib = fibNumbers[3] + fibNumbers[2] + fibNumbers[1] + fibNumbers[0];
        fibNumbers.shift();
        fibNumbers.push(nextFib);
    }
    return fibNumbers[3];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fib4;
  assert.deepEqual(candidate(5),4);
  assert.deepEqual(candidate(8),28);
  assert.deepEqual(candidate(10),104);
  assert.deepEqual(candidate(12),386);
}

test();"
HumanEval_47,asm_Beng,ts,"//মেৰুত থকা উপাদানসমূহৰ মধ্যম সংখ্যা ঘূৰাই আনা l. // >>> median([3, 1, 2, 4, 5])
// 3
// >>> median([-10, 4, 6, 1000, 10, 20])
// 15.0
function median(l: number[]): number {
","function median(l: number[]): number {
    const sorted = l.slice().sort((a, b) => a - b);
    const len = sorted.length;
    
    if (len % 2 === 0) {
        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;
    } else {
        return sorted[Math.floor(len / 2)];
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = median;
  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);
  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);
  assert.deepEqual(candidate([5]),5);
  assert.deepEqual(candidate([6, 5]),5.5);
  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);
}

test();"
HumanEval_48,asm_Beng,ts,"//এটা পলিণ্ড্ৰ'ম হ'লে এই ক্ৰমটো পৰীক্ষা কৰে ।// >>> is_palindrome("""")
// true
// >>> is_palindrome(""aba"")
// true
// >>> is_palindrome(""aaaaa"")
// true
// >>> is_palindrome(""zbcd"")
// false
function is_palindrome(text: string): boolean {
","function is_palindrome(text: string): boolean {
    return text === text.split('').reverse().join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_palindrome;
  assert.deepEqual(candidate(""""),true);
  assert.deepEqual(candidate(""aba""),true);
  assert.deepEqual(candidate(""aaaaa""),true);
  assert.deepEqual(candidate(""zbcd""),false);
  assert.deepEqual(candidate(""xywyx""),true);
  assert.deepEqual(candidate(""xywyz""),false);
  assert.deepEqual(candidate(""xywzx""),false);
}

test();"
HumanEval_49,asm_Beng,ts,"//2^n modulo p ঘূৰাই আনা (সংখ্যাটোৰ বিষয়ে অৱগত হ'ব) ।// >>> modp(3, 5)
// 3
// >>> modp(1101, 101)
// 2
// >>> modp(0, 101)
// 1
// >>> modp(3, 11)
// 8
// >>> modp(100, 101)
// 1
function modp(n: number, p: number): number {
","function modp(n: number, p: number): number {
    if (n === 0) return 1 % p;
    let result = 1;
    let base = 2;
    
    while (n > 0) {
        if (n % 2 === 1) {
            result = (result * base) % p;
        }
        base = (base * base) % p;
        n = Math.floor(n / 2);
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = modp;
  assert.deepEqual(candidate(3, 5),3);
  assert.deepEqual(candidate(1101, 101),2);
  assert.deepEqual(candidate(0, 101),1);
  assert.deepEqual(candidate(3, 11),8);
  assert.deepEqual(candidate(100, 101),1);
  assert.deepEqual(candidate(30, 5),4);
  assert.deepEqual(candidate(31, 5),3);
}

test();"
HumanEval_51,asm_Beng,ts,"//remove_vowels এটা ফাংচন যি শাৰী লয় আৰু স্বৰবৰ্ণবিহীন শাৰী ঘূৰাই আনে।// >>> remove_vowels("""")
// """"
// >>> remove_vowels(""abcdef"")
// ""bcdf""
// >>> remove_vowels(""aaaaa"")
// """"
// >>> remove_vowels(""aaBAA"")
// ""B""
// >>> remove_vowels(""zbcd"")
// ""zbcd""
function remove_vowels(text: string): string {
","function remove_vowels(text: string): string {
    return text.replace(/[aeiouAEIOU]/g, '');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = remove_vowels;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""abcdef\nghijklm""),""bcdf\nghjklm"");
  assert.deepEqual(candidate(""fedcba""),""fdcb"");
  assert.deepEqual(candidate(""eeeee""),"""");
  assert.deepEqual(candidate(""acBAA""),""cB"");
  assert.deepEqual(candidate(""EcBOO""),""cB"");
  assert.deepEqual(candidate(""ybcd""),""ybcd"");
}

test();"
HumanEval_52,asm_Beng,ts,"//যদি অংকবোৰ সমতুল্য t তকৈ কম হয় তেন্তে true ৰিটাৰ্ণ কৰক।// >>> below_threshold([1, 2, 4, 10], 100)
// true
// >>> below_threshold([1, 20, 4, 10], 5)
// false
function below_threshold(l: number[], t: number): boolean {
","function below_threshold(l: number[], t: number): boolean {
    return l.every(num => num < t);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = below_threshold;
  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);
  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);
  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);
  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);
  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);
  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);
}

test();"
HumanEval_53,asm_Beng,ts,"//দুটা সংখ্যা x আৰু y যোগ কৰা ।// >>> add(2, 3)
// 5
// >>> add(5, 7)
// 12
function add(x: number, y: number): number {
","function add(x: number, y: number): number {
    return x + y;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add;
  assert.deepEqual(candidate(0, 1),1);
  assert.deepEqual(candidate(1, 0),1);
  assert.deepEqual(candidate(2, 3),5);
  assert.deepEqual(candidate(5, 7),12);
  assert.deepEqual(candidate(7, 5),12);
}

test();"
HumanEval_54,asm_Beng,ts,"//দুটা শব্দৰ একে ধৰণৰ বৰ্ণ আছে নে নাই পৰীক্ষা কৰক।// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
// true
// >>> same_chars(""abcd"", ""dddddddabc"")
// true
// >>> same_chars(""dddddddabc"", ""abcd"")
// true
// >>> same_chars(""eabcd"", ""dddddddabc"")
// false
// >>> same_chars(""abcd"", ""dddddddabce"")
// false
// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
// false
function same_chars(s0: string, s1: string): boolean {
","function same_chars(s0: string, s1: string): boolean {
    const charSet0: Set<string> = new Set(s0);
    const charSet1: Set<string> = new Set(s1);

    if (charSet0.size !== charSet1.size) {
        return false;
    }

    for (const char of charSet0) {
        if (!charSet1.has(char)) {
            return false;
        }
    }

    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = same_chars;
  assert.deepEqual(candidate(""eabcdzzzz"", ""dddzzzzzzzddeddabc""),true);
  assert.deepEqual(candidate(""abcd"", ""dddddddabc""),true);
  assert.deepEqual(candidate(""dddddddabc"", ""abcd""),true);
  assert.deepEqual(candidate(""eabcd"", ""dddddddabc""),false);
  assert.deepEqual(candidate(""abcd"", ""dddddddabcf""),false);
  assert.deepEqual(candidate(""eabcdzzzz"", ""dddzzzzzzzddddabc""),false);
  assert.deepEqual(candidate(""aabb"", ""aaccc""),false);
}

test();"
HumanEval_55,asm_Beng,ts,"//n-তম ফিব'নাচ্চি সংখ্যাটো ঘূৰাই দিয়ক।// >>> fib(10)
// 55
// >>> fib(1)
// 1
// >>> fib(8)
// 21
function fib(n: number): number {
","function fib(n: number): number {
    if (n <= 0) {
        throw new Error(""Input should be a positive integer."");
    }
    if (n === 1) return 1;
    if (n === 2) return 1;

    let a = 1, b = 1;
    for (let i = 3; i <= n; i++) {
        const temp = a + b;
        a = b;
        b = temp;
    }
    return b;
}

// Example usage:
console.log(fib(10)); // 55
console.log(fib(1));  // 1
console.log(fib(8));  // 21","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fib;
  assert.deepEqual(candidate(10),55);
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(8),21);
  assert.deepEqual(candidate(11),89);
  assert.deepEqual(candidate(12),144);
}

test();"
HumanEval_56,asm_Beng,ts,"//প্ৰত্যেক খোলাৰ ব্ৰেকেটত একেটা বন্ধৰ ব্ৰেকেট থাকিলে true ৰিটাৰ্ণ কৰক।//বন্ধনীৰ মাজত ""<"" আৰু "">"" ৰ এটা শাৰী আছে.// >>> correct_bracketing(""<"")
// false
// >>> correct_bracketing(""<>"")
// true
// >>> correct_bracketing(""<<><>>"")
// true
// >>> correct_bracketing(""><<>"")
// false
function correct_bracketing(brackets: string): boolean {
","function correct_bracketing(brackets: string): boolean {
    let balance = 0;
    for (let char of brackets) {
        if (char === '<') {
            balance++;
        } else if (char === '>') {
            balance--;
        }
        if (balance < 0) {
            return false;
        }
    }
    return balance === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = correct_bracketing;
  assert.deepEqual(candidate(""<>""),true);
  assert.deepEqual(candidate(""<<><>>""),true);
  assert.deepEqual(candidate(""<><><<><>><>""),true);
  assert.deepEqual(candidate(""<><><<<><><>><>><<><><<>>>""),true);
  assert.deepEqual(candidate(""<<<><>>>>""),false);
  assert.deepEqual(candidate(""><<>""),false);
  assert.deepEqual(candidate(""<""),false);
  assert.deepEqual(candidate(""<<<<""),false);
  assert.deepEqual(candidate("">""),false);
  assert.deepEqual(candidate(""<<>""),false);
  assert.deepEqual(candidate(""<><><<><>><>><<>""),false);
  assert.deepEqual(candidate(""<><><<><>><>>><>""),false);
}

test();"
HumanEval_57,asm_Beng,ts,"//সত্য ঘূৰাই দিয়া হ'ল এৰে উপাদানবোৰ এককভাৱে বৃদ্ধি বা হ্ৰাস হৈ আছে।// >>> monotonic([1, 2, 4, 20])
// true
// >>> monotonic([1, 20, 4, 10])
// false
// >>> monotonic([4, 1, 0, -10])
// true
function monotonic(l: number[]): boolean {
","function monotonic(l: number[]): boolean {
    if (l.length <= 1) return true;
    
    let increasing = true;
    let decreasing = true;
    
    for (let i = 1; i < l.length; i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
        
        if (!increasing && !decreasing) return false;
    }
    
    return increasing || decreasing;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = monotonic;
  assert.deepEqual(candidate([1, 2, 4, 10]),true);
  assert.deepEqual(candidate([1, 2, 4, 20]),true);
  assert.deepEqual(candidate([1, 20, 4, 10]),false);
  assert.deepEqual(candidate([4, 1, 0, -10]),true);
  assert.deepEqual(candidate([4, 1, 1, 0]),true);
  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);
  assert.deepEqual(candidate([9, 9, 9, 9]),true);
}

test();"
HumanEval_58,asm_Beng,ts,"//দুটা এৰেজৰ বাবে ছৰ্ট কৰা অনন্য সাধাৰণ উপাদানসমূহ ঘূৰাই আনে।// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
// [1, 5, 653]
// >>> common([5, 3, 2, 8], [3, 2])
// [2, 3]
function common(l1: number[], l2: number[]): number[] {
","function common(l1: number[], l2: number[]): number[] {
    const set1 = new Set(l1);
    const set2 = new Set(l2);
    const commonElements = Array.from(set1).filter(item => set2.has(item));
    return commonElements.sort((a, b) => a - b);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = common;
  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);
  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);
  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);
  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);
}

test();"
HumanEval_59,asm_Beng,ts,"//n ৰ আটাইতকৈ ডাঙৰ অগ্ৰগণ্য গুণকটো ঘূৰাই দিয়া । n > 1 আৰু এটা অগ্ৰগণ্য নহয় বুলি ধৰি লওক ।// >>> largest_prime_factor(13195)
// 29
// >>> largest_prime_factor(2048)
// 2
function largest_prime_factor(n: number): number {
","function largest_prime_factor(n: number): number {
    let largestFactor = 1;

    // Divide n by 2 until it becomes odd
    while (n % 2 === 0) {
        largestFactor = 2;
        n /= 2;
    }

    // Check for odd factors from 3 upwards
    for (let i = 3; i <= Math.sqrt(n); i += 2) {
        while (n % i === 0) {
            largestFactor = i;
            n /= i;
        }
    }

    // If n becomes a prime number greater than 2
    if (n > 2) {
        largestFactor = n;
    }

    return largestFactor;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_prime_factor;
  assert.deepEqual(candidate(15),5);
  assert.deepEqual(candidate(27),3);
  assert.deepEqual(candidate(63),7);
  assert.deepEqual(candidate(330),11);
  assert.deepEqual(candidate(13195),29);
}

test();"
HumanEval_60,asm_Beng,ts,"//sum_to_n হৈছে এটা ফাংচন যি 1 ৰ পৰা n লৈকে সংখ্যাবোৰৰ যোগফল দিয়ে।// >>> sum_to_n(30)
// 465
// >>> sum_to_n(100)
// 5050
// >>> sum_to_n(5)
// 15
// >>> sum_to_n(10)
// 55
// >>> sum_to_n(1)
// 1
function sum_to_n(n: number): number {
","function sum_to_n(n: number): number {
    return n * (n + 1) / 2;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_to_n;
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(6),21);
  assert.deepEqual(candidate(11),66);
  assert.deepEqual(candidate(30),465);
  assert.deepEqual(candidate(100),5050);
}

test();"
HumanEval_61,asm_Beng,ts,"//প্ৰত্যেক খোলাৰ ব্ৰেকেটত একেটা বন্ধৰ ব্ৰেকেট থাকিলে true ৰিটাৰ্ণ কৰক।//বন্ধনীৰ মাজত ""("" আৰু """") ৰ এটা শাৰী আছে।// >>> correct_bracketing(""("")
// false
// >>> correct_bracketing(""()"")
// true
// >>> correct_bracketing(""(()())"")
// true
// >>> correct_bracketing("")(()"")
// false
function correct_bracketing(brackets: string): boolean {
","function correct_bracketing(brackets: string): boolean {
    let balance = 0;

    for (let char of brackets) {
        if (char === '(') {
            balance++;
        } else if (char === ')') {
            balance--;
        }

        // If balance goes negative, there's a closing bracket without a matching opening one
        if (balance < 0) {
            return false;
        }
    }

    // If balance is zero, all opening brackets have matching closing brackets
    return balance === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = correct_bracketing;
  assert.deepEqual(candidate(""()""),true);
  assert.deepEqual(candidate(""(()())""),true);
  assert.deepEqual(candidate(""()()(()())()""),true);
  assert.deepEqual(candidate(""()()((()()())())(()()(()))""),true);
  assert.deepEqual(candidate(""((()())))""),false);
  assert.deepEqual(candidate("")(()""),false);
  assert.deepEqual(candidate(""(""),false);
  assert.deepEqual(candidate(""((((""),false);
  assert.deepEqual(candidate("")""),false);
  assert.deepEqual(candidate(""(()""),false);
  assert.deepEqual(candidate(""()()(()())())(()""),false);
  assert.deepEqual(candidate(""()()(()())()))()""),false);
}

test();"
HumanEval_62,asm_Beng,ts,"//এই বহুপদটোৰ সমানুপাতিক সূত্ৰটো ঘূৰাই দিয়ক।//xs[0] + xs[1] * x + xs[2] * x^2 + .... //xs হ'ল বহুপদটোৰ সহগ।// >>> derivative([3, 1, 2, 4, 5])
// [1, 4, 12, 20]
// >>> derivative([1, 2, 3])
// [2, 6]
function derivative(xs: number[]): number[] {
","function derivative(xs: number[]): number[] {
    return xs.slice(1).map((coef, index) => coef * (index + 1));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = derivative;
  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);
  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);
  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);
  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);
  assert.deepEqual(candidate([1]),[]);
}

test();"
HumanEval_63,asm_Beng,ts,"//অনুগ্ৰহ কৰি এটা ফাংশন লিখক যিটো ফিবফিব সংখ্যাৰ ক্ৰমৰ n-তম উপাদানটো কাৰ্যকৰীভাৱে গণনা কৰিব।//fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3) ।//fib fib ((2) == 1 //fib fib ((1) == 0 //fib fib (০) == ০//FibFib সংখ্যা ক্ৰমটো ফিব'নাক্সি ক্ৰমৰ সৈতে একে ধৰণৰ ক্ৰম যিটো তলত দিয়া ধৰণে সংজ্ঞায়িত কৰা হৈছে:// >>> fibfib(1)
// 0
// >>> fibfib(5)
// 4
// >>> fibfib(8)
// 24
function fibfib(n: number): number {
","function fibfib(n: number): number {
    if (n === 0 || n === 1) return 0;
    if (n === 2) return 1;

    let a = 0;
    let b = 0;
    let c = 1;

    for (let i = 3; i <= n; i++) {
        let next = a + b + c;
        a = b;
        b = c;
        c = next;
    }

    return c;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fibfib;
  assert.deepEqual(candidate(2),1);
  assert.deepEqual(candidate(1),0);
  assert.deepEqual(candidate(5),4);
  assert.deepEqual(candidate(8),24);
  assert.deepEqual(candidate(10),81);
  assert.deepEqual(candidate(12),274);
  assert.deepEqual(candidate(14),927);
}

test();"
HumanEval_64,asm_Beng,ts,"//উদাহৰণঃ//স্বৰবৰ্ণ, কিন্তু কেৱল যেতিয়া ই এটা নিৰ্দিষ্ট শব্দৰ শেষত থাকে।//এই ক্ষেত্ৰত স্বৰবৰ্ণবোৰ হ'ল 'a', 'e', 'i', 'o', 'u'। ইয়াত, 'y' হৈছে a //এটা শব্দক ইনপুট হিচাপে ব্যৱহাৰ কৰি, শাৰীটোৰ স্বৰবৰ্ণৰ সংখ্যা ঘূৰাই আনে.//এটা ফাংচন লিখক য'ত এটা  প্ৰতিনিধিত্ব কৰা এটা  // >>> vowels_count(""abcde"")
// 2
// >>> vowels_count(""ACEDY"")
// 3
function vowels_count(s: string): number {
","function vowels_count(s: string): number {
    let count = 0;
    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);
    const lowerCaseString = s.toLowerCase();

    for (let i = 0; i < lowerCaseString.length; i++) {
        if (vowels.has(lowerCaseString[i])) {
            count++;
        }
        if (i === lowerCaseString.length - 1 && lowerCaseString[i] === 'y') {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = vowels_count;
  assert.deepEqual(candidate(""abcde""),2);
  assert.deepEqual(candidate(""Alone""),3);
  assert.deepEqual(candidate(""key""),2);
  assert.deepEqual(candidate(""bye""),1);
  assert.deepEqual(candidate(""keY""),2);
  assert.deepEqual(candidate(""bYe""),1);
  assert.deepEqual(candidate(""ACEDY""),3);
}

test();"
HumanEval_65,asm_Beng,ts,"//যদি shift > অংক সংখ্যা, তেন্তে অংকবোৰ উলটি দিয়ক।//আৰু ফলাফল এটা স্ট্ৰিং হিচাপে ঘূৰাই দিব.//বৃত্তীয়ভাৱে x অংকটোৰ অংকবোৰ স্থানান্তৰ কৰক, অংকবোৰ স্থানান্তৰ কৰি সোঁফালে স্থানান্তৰ কৰক।// >>> circular_shift(12, 1)
// ""21""
// >>> circular_shift(12, 2)
// ""12""
function circular_shift(x: number, shift: number): string {
","function circular_shift(x: number, shift: number): string {
    const strNum = x.toString();
    const length = strNum.length;
    if (shift >= length) {
        return strNum.split('').reverse().join('');
    }
    const normalizedShift = shift % length;
    const splitIndex = length - normalizedShift;
    return strNum.slice(splitIndex) + strNum.slice(0, splitIndex);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = circular_shift;
  assert.deepEqual(candidate(100, 2),""001"");
  assert.deepEqual(candidate(12, 2),""12"");
  assert.deepEqual(candidate(97, 8),""79"");
  assert.deepEqual(candidate(12, 1),""21"");
  assert.deepEqual(candidate(11, 101),""11"");
}

test();"
HumanEval_66,asm_Beng,ts,"//উদাহৰণঃ//ASCII কোডসমূহ//এটা ফাংচন লিখা যি এটা ষ্ট্ৰিংক ইনপুট হিচাপে লয় আৰু কেৱল ওপৰৰ বৰ্ণবোৰৰ যোগফল ঘূৰাই আনে' //কাম // >>> digitSum("""")
// 0
// >>> digitSum(""abAB"")
// 131
// >>> digitSum(""abcCd"")
// 67
// >>> digitSum(""helloE"")
// 69
// >>> digitSum(""woArBld"")
// 131
// >>> digitSum(""aAaaaXa"")
// 153
function digitSum(s: string): number {
","function digitSum(s: string): number {
    let sum = 0;
    for (const char of s) {
        if (char >= 'A' && char <= 'Z') {
            sum += char.charCodeAt(0);
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = digitSum;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""abAB""),131);
  assert.deepEqual(candidate(""abcCd""),67);
  assert.deepEqual(candidate(""helloE""),69);
  assert.deepEqual(candidate(""woArBld""),131);
  assert.deepEqual(candidate(""aAaaaXa""),153);
  assert.deepEqual(candidate("" How are yOu?""),151);
  assert.deepEqual(candidate(""You arE Very Smart""),327);
}

test();"
HumanEval_67,asm_Beng,ts,"//ৰহস্যৰ বাবেঃ//ক'ৰবাত ক'ৰবাত থকা আমৰ ফলবোৰৰ সংখ্যা ঘূৰাই দিব।//কমলা আৰু আপেল আৰু এটা পূৰ্ণ সংখ্যা যি ফলবোৰৰ মুঠ সংখ্যা প্ৰতিনিধিত্ব কৰে ।//আপেল, কমলা আৰু আমৰ ফল দিয়া হৈছে, যিটো  ৰ মুঠ সংখ্যাক প্ৰতিনিধিত্ব কৰে।//এই ফলবোৰ এই ফলবোৰত থকা শস্যৰ বাছনিৰ ভিতৰত বিতৰণ কৰা হয়।//এই কামত, আপোনাক এটা শাৰী দিয়া হ'ব যি এপল আৰু কমলা সংখ্যাক প্ৰতিনিধিত্ব কৰে।// >>> fruit_distribution(""5 apples and 6 oranges"", 19)
// 8
// >>> fruit_distribution(""0 apples and 1 oranges"", 3)
// 2
// >>> fruit_distribution(""2 apples and 3 oranges"", 100)
// 95
// >>> fruit_distribution(""100 apples and 1 oranges"", 120)
// 19
function fruit_distribution(s: string, n: number): number {
","function fruit_distribution(s: string, n: number): number {
    const regex = /(\d+) apples and (\d+) oranges/;
    const match = s.match(regex);
    
    if (!match) {
        throw new Error(""Invalid input format"");
    }
    
    const apples = parseInt(match[1], 10);
    const oranges = parseInt(match[2], 10);
    
    const totalApplesAndOranges = apples + oranges;
    return n - totalApplesAndOranges;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fruit_distribution;
  assert.deepEqual(candidate(""5 apples and 6 oranges"", 19),8);
  assert.deepEqual(candidate(""5 apples and 6 oranges"", 21),10);
  assert.deepEqual(candidate(""0 apples and 1 oranges"", 3),2);
  assert.deepEqual(candidate(""1 apples and 0 oranges"", 3),2);
  assert.deepEqual(candidate(""2 apples and 3 oranges"", 100),95);
  assert.deepEqual(candidate(""2 apples and 3 oranges"", 5),0);
  assert.deepEqual(candidate(""1 apples and 100 oranges"", 120),19);
}

test();"
HumanEval_68,asm_Beng,ts,"//উদাহৰণ ১ঃ//যদি কোনো জোৰা মান নাই বা দিয়া এৰে খালী, ৰিটাৰ্ণ [].//পিক কৰা ন'ডটো এটা এৰেজত ঘূৰাই দিব লাগে, [ smalest_value, ইয়াৰ সূচী ], //যদি একেটা সৰু মান থকা একাধিক ন'ড পোৱা যায়, তেন্তে ন'ডৰ যিটো আটাইতকৈ সৰু সূচক আছে তাক ঘূৰাই দিব।//পিক কৰা নডটো আটাইতকৈ সৰু জোৰা মান থকা নডটো হ'ব লাগে।//আপোনাৰ কাম হ'ল এটা ন'ড খুলি লৈ ঘূৰাই দিয়া।//""এটা অংক দিয়া হৈছে যিটো এটা বৃক্ষৰ শাখাক প্ৰতিনিধিত্ব কৰে য'ত অ-নতিবাচক অখণ্ড সংখ্যাৰ ন'ড আছে // >>> pluck([4, 2, 3])
// [2, 1]
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 2:
// >>> pluck([1, 2, 3])
// [2, 1]
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 3:
// >>> pluck([])
// []
// Example 4:
// >>> pluck([5, 0, 3, 0, 4, 2])
// [0, 1]
// Explanation: 0 is the smallest value, but  there are two zeros,
// so we will choose the first zero, which has the smallest index.
// Constraints:
// * 1 <= nodes.length <= 10000
// * 0 <= node.value
function pluck(arr: number[]): number[] {
","function pluck(arr: number[]): number[] {
    let minEvenValue: number | null = null;
    let minIndex: number | null = null;

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] % 2 === 0) { // Check if the number is even
            if (minEvenValue === null || arr[i] < minEvenValue) {
                minEvenValue = arr[i];
                minIndex = i;
            }
        }
    }

    if (minEvenValue !== null && minIndex !== null) {
        return [minEvenValue, minIndex];
    } else {
        return [];
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = pluck;
  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);
  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);
  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);
  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);
  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);
  assert.deepEqual(candidate([7, 9, 7, 1]),[]);
}

test();"
HumanEval_69,asm_Beng,ts,"//উদাহৰণঃ//যদি এনে কোনো মান নাই, তেন্তে -1 ঘূৰাই দিব.//এটা পূৰ্ণসংখ্যাৰ সঘনতা হৈছে এৰেজত দেখা পোৱা সংখ্যাৰ সংখ্যা।//শূন্য, আৰু ইয়াৰ সঘনতা সম্পূৰ্ণ সংখ্যাৰ মানতকৈ বেছি বা সমান।//আপুনি এটা অ-খালি ধনাত্মক পূৰ্ণসংখ্যাৰ অ্যারে দিয়া হৈছে। তকৈ ডাঙৰ আটাইতকৈ ডাঙৰ পূৰ্ণসংখ্যাক ঘূৰাই দিয়ক।// >>> search([4, 1, 2, 2, 3, 1])
// 2
// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])
// 3
// >>> search([5, 5, 4, 4, 4])
// -1
function search(lst: number[]): number {
","function search(lst: number[]): number {
    const frequencyMap: Map<number, number> = new Map();

    // Count frequencies of each integer in the array
    for (const num of lst) {
        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
    }

    let result = -1;

    // Determine the greatest integer that meets the condition
    for (const [num, freq] of frequencyMap.entries()) {
        if (freq >= num && num > result) {
            result = num;
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = search;
  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);
  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);
  assert.deepEqual(candidate([3, 3]),-1);
  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);
  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);
  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);
  assert.deepEqual(candidate([3, 2, 8, 2]),2);
  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);
  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);
  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);
  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);
  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);
  assert.deepEqual(candidate([1]),1);
  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);
  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);
  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);
  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);
  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);
  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);
  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);
  assert.deepEqual(candidate([10]),-1);
  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);
  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);
  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);
  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);
}

test();"
HumanEval_70,asm_Beng,ts,"//উদাহৰণঃ//তাৰ পিছত বাকী থকা পূৰ্ণসংখ্যাৰ সৰ্বোচ্চ, তাৰ পিছত সৰ্বনিম্ন আৰু এনেদৰে।//অদ্ভুত শ্ৰেণীবিভাজন, যেতিয়া আপুনি ন্যূনতম মানৰ সৈতে আৰম্ভ কৰে, //এটা অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, অদ্ভুত ক্ৰমত অ্যারে ঘূৰাই দিব.// >>> strange_sort_list([1, 2, 3, 4])
// [1, 4, 2, 3]
// >>> strange_sort_list([5, 5, 5, 5])
// [5, 5, 5, 5]
// >>> strange_sort_list([])
// []
function strange_sort_list(lst: number[]): number[] {
","function strange_sort_list(lst: number[]): number[] {
    const sorted = [...lst].sort((a, b) => a - b);
    const result: number[] = [];
    let left = 0;
    let right = sorted.length - 1;

    while (left <= right) {
        if (left === right) {
            result.push(sorted[left]);
        } else {
            result.push(sorted[left]);
            result.push(sorted[right]);
        }
        left++;
        right--;
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = strange_sort_list;
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);
  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);
  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);
  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);
  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);
  assert.deepEqual(candidate([111111]),[111111]);
}

test();"
HumanEval_71,asm_Beng,ts,"//উদাহৰণঃ//তৃতীয় পক্ষৰ তুলনাত।//ত্ৰিপাক্ষই এটা বৈধ ত্ৰিভুজ গঠন কৰে যেতিয়া কোনো দুটা ত্ৰিপাক্ষৰ যোগফল বেছি হয়।//অন্যথা -1 ঘূৰি আহিব ।//ত্ৰিভুজটো দুটা দশমিক স্থানলৈ ঘূৰণীয়া কৰা হ'ব যদিহে ত্ৰিপাক্ষই এটা বৈধ ত্ৰিভুজ গঠন কৰে।//এটা ত্ৰিভুজৰ তিনিটা পক্ষৰ দৈৰ্ঘ্য দিয়া হ'লে,  ৰ ক্ষেত্ৰফল ঘূৰাই দিয়া// >>> triangle_area(3, 4, 5)
// 6.0
// >>> triangle_area(1, 2, 10)
// -1
function triangle_area(a: number, b: number, c: number): number {
","function triangle_area(a: number, b: number, c: number): number {
    // Check if the sides form a valid triangle
    if (a + b > c && a + c > b && b + c > a) {
        // Calculate the semi-perimeter
        const s = (a + b + c) / 2;
        // Calculate the area using Heron's formula
        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
        // Return the area rounded to 2 decimal places
        return Math.round(area * 100) / 100;
    }
    // Return -1 if the sides do not form a valid triangle
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triangle_area;
  assert.deepEqual(candidate(3, 4, 5),6.0);
  assert.deepEqual(candidate(1, 2, 10),-1);
  assert.deepEqual(candidate(4, 8, 5),8.18);
  assert.deepEqual(candidate(2, 2, 2),1.73);
  assert.deepEqual(candidate(1, 2, 3),-1);
  assert.deepEqual(candidate(10, 5, 7),16.25);
  assert.deepEqual(candidate(2, 6, 3),-1);
  assert.deepEqual(candidate(1, 1, 1),0.43);
  assert.deepEqual(candidate(2, 2, 10),-1);
}

test();"
HumanEval_72,asm_Beng,ts,"//উদাহৰণঃ//বস্তু q উৰি যাব যদিহে ই ভাৰসাম্যপূৰ্ণ হয় (এয়া এটা পলিণ্ড্ৰোমিক এৰে) আৰু ইয়াৰ উপাদানসমূহৰ যোগফল আটাইতকৈ বেছি বা আটাইতকৈ বেছি সম্ভৱ ওজন w ৰ সমান হয়।//এটা ফাংচন লিখা যিটো যদি বস্তু q উৰি যায় সত্য আৰু অন্যথা মিছা উভতাই আনে।// >>> will_it_fly([1, 2], 5)
// false
// # 1+2 is less than the maximum possible weight, but it's unbalanced.
// >>> will_it_fly([3, 2, 3], 1)
// false
// # it's balanced, but 3+2+3 is more than the maximum possible weight.
// >>> will_it_fly([3, 2, 3], 9)
// true
// # 3+2+3 is less than the maximum possible weight, and it's balanced.
// >>> will_it_fly([3], 5)
// true
// # 3 is less than the maximum possible weight, and it's balanced.
function will_it_fly(q: number[], w: number): boolean {
","function will_it_fly(q: number[], w: number): boolean {
    // Check if the array is balanced (palindromic)
    const isBalanced = (arr: number[]): boolean => {
        for (let i = 0; i < arr.length / 2; i++) {
            if (arr[i] !== arr[arr.length - 1 - i]) {
                return false;
            }
        }
        return true;
    };

    // Calculate the sum of the elements in the array
    const sumElements = q.reduce((acc, curr) => acc + curr, 0);

    // Check both conditions: balanced array and sum less than or equal to max weight
    return isBalanced(q) && sumElements <= w;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = will_it_fly;
  assert.deepEqual(candidate([3, 2, 3], 9),true);
  assert.deepEqual(candidate([1, 2], 5),false);
  assert.deepEqual(candidate([3], 5),true);
  assert.deepEqual(candidate([3, 2, 3], 1),false);
  assert.deepEqual(candidate([1, 2, 3], 6),false);
  assert.deepEqual(candidate([5], 5),true);
}

test();"
HumanEval_73,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//এটা পৰিৱৰ্তনত আপুনি এটা উপাদানক যিকোনো অন্য উপাদানৰ সৈতে পৰিৱৰ্তন কৰিব পাৰে।//এটা palindromic array এটা এৰে যিটো //এটা এৰেৰ পূৰ্ণসংখ্যাক দিয়া হ'লে,  থকা উপাদানসমূহৰ ন্যূনতম সংখ্যাটো বিচাৰক// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])
// 4
// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])
// 1
// >>> smallest_change([1, 2, 3, 2, 1])
// 0
function smallest_change(arr: number[]): number {
","function smallest_change(arr: number[]): number {
    let changes = 0;
    let left = 0;
    let right = arr.length - 1;

    while (left < right) {
        if (arr[left] !== arr[right]) {
            changes++;
        }
        left++;
        right--;
    }

    return changes;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = smallest_change;
  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);
  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);
  assert.deepEqual(candidate([1, 4, 2]),1);
  assert.deepEqual(candidate([1, 4, 4, 2]),1);
  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);
  assert.deepEqual(candidate([3, 1, 1, 3]),0);
  assert.deepEqual(candidate([1]),0);
  assert.deepEqual(candidate([0, 1]),1);
}

test();"
HumanEval_74,asm_Beng,ts,"//উদাহৰণসমূহ//যদি দুয়োটা অক্ষৰ সমসংখ্যক হয়, প্ৰথম অক্ষৰটো ঘূৰাই দিয়া হ'ব।//অক্ষৰ সমষ্টিৰ সকলো শাৰী আন অক্ষৰ সমষ্টিতকৈ কম।//এটা ফাংচন লিখা যি দুটা শাৰী গ্ৰহণ কৰে আৰু যি শাৰীত  আছে তাক ঘূৰাই দিয়ে// >>> total_match([], [])
// []
// >>> total_match([""hi"", ""admin""], [""hI"", ""Hi""])
// [""hI"", ""Hi""]
// >>> total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
// [""hi"", ""admin""]
// >>> total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
// [""hI"", ""hi"", ""hi""]
// >>> total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
// [""4""]
function total_match(lst1: string[], lst2: string[]): string[] {
","function total_match(lst1: string[], lst2: string[]): string[] {
    const getTotalChars = (arr: string[]): number => {
        return arr.reduce((acc, str) => acc + str.length, 0);
    };

    const totalChars1 = getTotalChars(lst1);
    const totalChars2 = getTotalChars(lst2);

    if (totalChars1 < totalChars2) {
        return lst1;
    } else if (totalChars2 < totalChars1) {
        return lst2;
    } else {
        return lst1;
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = total_match;
  assert.deepEqual(candidate([], []),[]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hi"", ""hi""]),[""hi"", ""hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]),[""hi"", ""admin""]);
  assert.deepEqual(candidate([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]),[""4""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""Hi""]),[""hI"", ""Hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]),[""hI"", ""hi"", ""hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]),[""hi"", ""admin""]);
  assert.deepEqual(candidate([], [""this""]),[]);
  assert.deepEqual(candidate([""this""], []),[]);
}

test();"
HumanEval_75,asm_Beng,ts,"//উদাহৰণঃ//(a) ১০০ তকৈ সৰু বুলি জানিলে।//আৰু অন্যথা মিছা।//এটা ফাংচন লিখা যিটো true ৰিটাৰ্ণ কৰে যদিহে দিয়া সংখ্যাটো 3টা মৌলিক সংখ্যাৰ গুণন হয় ।// >>> is_multiply_prime(30)
// true
// 30 = 2 * 3 * 5
function is_multiply_prime(a: number): boolean {
","function is_multiply_prime(a: number): boolean {
    // Helper function to check if a number is prime
    function isPrime(n: number): boolean {
        if (n <= 1) return false;
        if (n <= 3) return true;
        if (n % 2 === 0 || n % 3 === 0) return false;
        for (let i = 5; i * i <= n; i += 6) {
            if (n % i === 0 || n % (i + 2) === 0) return false;
        }
        return true;
    }

    // Generate a list of primes less than 100
    const primes: number[] = [];
    for (let i = 2; i < 100; i++) {
        if (isPrime(i)) {
            primes.push(i);
        }
    }

    // Check if a can be expressed as a product of 3 distinct primes
    const primeCount = primes.length;
    for (let i = 0; i < primeCount - 2; i++) {
        for (let j = i + 1; j < primeCount - 1; j++) {
            for (let k = j + 1; k < primeCount; k++) {
                if (primes[i] * primes[j] * primes[k] === a) {
                    return true;
                }
            }
        }
    }
    
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_multiply_prime;
  assert.deepEqual(candidate(5),false);
  assert.deepEqual(candidate(30),true);
  assert.deepEqual(candidate(8),true);
  assert.deepEqual(candidate(10),false);
  assert.deepEqual(candidate(125),true);
  assert.deepEqual(candidate(105),true);
  assert.deepEqual(candidate(126),false);
  assert.deepEqual(candidate(729),false);
  assert.deepEqual(candidate(891),false);
  assert.deepEqual(candidate(1001),true);
}

test();"
HumanEval_76,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//x হৈছে n ৰ এটা সৰল শক্তি যদি n**int=x //n ৰ শক্তি আৰু অন্য ক্ষেত্ৰত false।//আপোনাৰ কাম হ'ল এটা ফাংচন লিখা যিটো true ৰিটাৰ্ণ কৰে যদি x এটা সৰল সংখ্যা হয়।// >>> is_simple_power(1, 4)
// true
// >>> is_simple_power(2, 2)
// true
// >>> is_simple_power(8, 2)
// true
// >>> is_simple_power(3, 2)
// false
// >>> is_simple_power(3, 1)
// false
// >>> is_simple_power(5, 3)
// false
function is_simple_power(x: number, n: number): boolean {
","function is_simple_power(x: number, n: number): boolean {
    if (x < 1 || n < 1) return false;
    if (x === 1) return true; // n^0 is 1 for any n

    let power = 1;
    while (power < x) {
        power *= n;
    }
    
    return power === x;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_simple_power;
  assert.deepEqual(candidate(16, 2),true);
  assert.deepEqual(candidate(143214, 16),false);
  assert.deepEqual(candidate(4, 2),true);
  assert.deepEqual(candidate(9, 3),true);
  assert.deepEqual(candidate(16, 4),true);
  assert.deepEqual(candidate(24, 2),false);
  assert.deepEqual(candidate(128, 4),false);
  assert.deepEqual(candidate(12, 6),false);
  assert.deepEqual(candidate(1, 1),true);
  assert.deepEqual(candidate(1, 12),true);
}

test();"
HumanEval_77,asm_Beng,ts,"//উদাহৰণঃ//টোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুটটো সদায় বৈধ।//যদি এই ইনজেগাৰটো কোনো পূৰ্ণসংখ্যাৰ ঘনত্ব হয়।//এটা ফাংচন লিখা যি এটা অখণ্ড সংখ্যা a লয় আৰু true ঘুৰাই দিয়ে ।// >>> iscube(1)
// true
// >>> iscube(2)
// false
// >>> iscube(-1)
// true
// >>> iscube(64)
// true
// >>> iscube(0)
// true
// >>> iscube(180)
// false
function iscube(a: number): boolean {
","function iscube(a: number): boolean {
    // Calculate the cube root of the absolute value of a
    const cubeRoot = Math.cbrt(Math.abs(a));
    // Check if the cube root is an integer
    return cubeRoot === Math.round(cubeRoot);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = iscube;
  assert.deepEqual(candidate(1),true);
  assert.deepEqual(candidate(2),false);
  assert.deepEqual(candidate(-1),true);
  assert.deepEqual(candidate(64),true);
  assert.deepEqual(candidate(180),false);
  assert.deepEqual(candidate(1000),true);
  assert.deepEqual(candidate(0),true);
  assert.deepEqual(candidate(1729),false);
}

test();"
HumanEval_78,asm_Beng,ts,"//উদাহৰণঃ//আৰু চিহ্নবোৰ A,B,C,D,E,F সদায় ডাঙৰ আখৰেৰে লিখা থাকে।//টোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুটটো সদায় শুদ্ধ বা খালী শাৰী, //বি (= দশমিক ১১), ডি (= দশমিক ১৩) ।//আপুনি নিম্নলিখিত অংকবোৰৰ এটা সংখ্যা নিৰ্ণয় কৰিব লাগিবঃ 2, 3, 5, 7, //মৌলিক সংখ্যাবোৰ হ'ল ২, ৩, ৫, ৭, ১১, ১৩, ১৭,...//ষোড়শ সংখ্যাটো হ'ল ০, ১, ২, ৩, ৪, ৫, ৬, ৭, ৮, ৯, এ, বি, চি, ডি, ই, এফ।//১তকৈ ডাঙৰ যি দুটা সৰু স্বাভাৱিক সংখ্যাৰ গুণফল নহয়) ।//অগনিত সংখ্যা (অগনিত সংখ্যা বা এটা অগনিত সংখ্যা এটা স্বাভাৱিক সংখ্যা)//এটা ষোড়শ সংখ্যা এটা শাৰী হিচাপে আৰু ষোড়শ সংখ্যাটো গণনা কৰে ।//আপোনাক এটা ফাংচন লিখিবলৈ কোৱা হৈছে যি গ্ৰহণ কৰে ।// >>> hex_key(""AB"")
// 1
// >>> hex_key(""1077E"")
// 2
// >>> hex_key(""ABED1A33"")
// 4
// >>> hex_key(""123456789ABCDEF0"")
// 6
// >>> hex_key(""2020"")
// 2
function hex_key(num: string): number {
","function hex_key(num: string): number {
    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);
    let count = 0;

    for (let digit of num) {
        if (primeHexDigits.has(digit)) {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = hex_key;
  assert.deepEqual(candidate(""AB""),1);
  assert.deepEqual(candidate(""1077E""),2);
  assert.deepEqual(candidate(""ABED1A33""),4);
  assert.deepEqual(candidate(""2020""),2);
  assert.deepEqual(candidate(""123456789ABCDEF0""),6);
  assert.deepEqual(candidate(""112233445566778899AABBCCDDEEFF00""),12);
}

test();"
HumanEval_79,asm_Beng,ts,"//উদাহৰণঃ//অতিৰিক্ত বৰ্ণবোৰ ফৰমেটৰ সহায়ত আছে।// শাৰীৰ আৰম্ভণিতে আৰু শেষত অতিৰিক্ত দুটা বৰ্ণ 'db' থাকিব।//সংখ্যা। ষ্ট্ৰিংৰ প্ৰতিটো চিহ্ন হ'ব '0' বা '1'।//বাইনেৰী বিন্যাস। ফাংশনটোৱে এটা ষ্ট্ৰিং ঘূৰাই দিব লাগে, য'ত প্ৰতিটো বৰ্ণই এটা বাইনেৰী  প্ৰতিনিধিত্ব কৰে।//আপুনি এটা সংখ্যাক দশমিক আকাৰত পাব আৰু আপোনাৰ কাম হ'ব ইয়াক লৈ ৰূপান্তৰ কৰা।// >>> decimal_to_binary(15)
// ""db1111db""
// >>> decimal_to_binary(32)
// ""db100000db""
function decimal_to_binary(decimal: number): string {
","function decimal_to_binary(decimal: number): string {
    const binaryString = decimal.toString(2);
    return `db${binaryString}db`;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = decimal_to_binary;
  assert.deepEqual(candidate(0),""db0db"");
  assert.deepEqual(candidate(32),""db100000db"");
  assert.deepEqual(candidate(103),""db1100111db"");
  assert.deepEqual(candidate(15),""db1111db"");
}

test();"
HumanEval_80,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//এটা শাৰী হ'ল hapts যদি ইয়াৰ দৈৰ্ঘ্য কমেও 3 হয় আৰু প্ৰত্যেক 3 ক্ৰমিক আখৰ পৃথক হয় ।//আপোনাৰ কাম হৈছে ষ্ট্ৰিংটো হেপ্ট হয় নে নহয় পৰীক্ষা কৰা।//আপোনাক এটা ষ্ট্ৰিং দিয়া হৈছে।// >>> is_happy(""a"")
// false
// >>> is_happy(""aa"")
// false
// >>> is_happy(""abcd"")
// true
// >>> is_happy(""aabb"")
// false
// >>> is_happy(""adb"")
// true
// >>> is_happy(""xyy"")
// false
function is_happy(s: string): boolean {
","function is_happy(s: string): boolean {
    if (s.length < 3) return false;

    for (let i = 0; i <= s.length - 3; i++) {
        const set = new Set(s.substring(i, i + 3));
        if (set.size !== 3) {
            return false;
        }
    }
    
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_happy;
  assert.deepEqual(candidate(""a""),false);
  assert.deepEqual(candidate(""aa""),false);
  assert.deepEqual(candidate(""abcd""),true);
  assert.deepEqual(candidate(""aabb""),false);
  assert.deepEqual(candidate(""adb""),true);
  assert.deepEqual(candidate(""xyy""),false);
  assert.deepEqual(candidate(""iopaxpoi""),true);
  assert.deepEqual(candidate(""iopaxioi""),false);
}

test();"
HumanEval_81,asm_Beng,ts,"//উদাহৰণঃ//0.0 E //> 0.0 D- //> 0.7 D //> ১.০ ডি+ //> ১.৩ C- //> ১.৭ °C//> ২.০ চি+ //> ২.৩ বি-//> ২.৭ বি//> ৩.০ বি+ //> ৩.৩ এ-//> ৩.৭ এ//4.0 A+ //গড়. চিঠিৰ নম্বৰ.//এটা ফাংচন যি নিম্নলিখিত টেবুল ব্যৱহাৰ কৰি আখৰ শ্ৰেণীৰ এটা এৰেজ আউটপুট কৰিব পাৰেঃ //তেওঁ তোমাক কিছুমান ছাত্ৰৰ গড়ৰ এক সমষ্টি দিছে আৰু তুমি লিখিব লাগিব ।//একমাত্ৰ সমস্যাটো হ'ল, তেওঁ নম্বৰ দিয়া কোডটো হেৰুৱাইছে।//শিক্ষকে নিজৰ গ্ৰেডিং এলগৰিথম তৈয়াৰ কৰিছে।//ছেমিষ্টাৰৰ শেষ সপ্তাহত শিক্ষকজনে নম্বৰ দিব লাগে।// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])
// [""A+"", ""B"", ""C-"", ""C"", ""A-""]
function numerical_letter_grade(grades: number[]): string[] {
","function numerical_letter_grade(grades: number[]): string[] {
    return grades.map(gpa => {
        if (gpa === 4.0) return ""A+"";
        if (gpa > 3.7) return ""A"";
        if (gpa > 3.3) return ""A-"";
        if (gpa > 3.0) return ""B+"";
        if (gpa > 2.7) return ""B"";
        if (gpa > 2.3) return ""B-"";
        if (gpa > 2.0) return ""C+"";
        if (gpa > 1.7) return ""C"";
        if (gpa > 1.3) return ""C-"";
        if (gpa > 1.0) return ""D+"";
        if (gpa > 0.7) return ""D"";
        if (gpa > 0.0) return ""D-"";
        return ""E"";
    });
}

// Example usage:
// console.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // [""A+"", ""B"", ""C-"", ""C"", ""A-""]","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = numerical_letter_grade;
  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[""A+"", ""B"", ""C-"", ""C"", ""A-""]);
  assert.deepEqual(candidate([1.2]),[""D+""]);
  assert.deepEqual(candidate([0.5]),[""D-""]);
  assert.deepEqual(candidate([0.0]),[""E""]);
  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[""D"", ""D-"", ""C-"", ""B"", ""B+""]);
  assert.deepEqual(candidate([0.0, 0.7]),[""E"", ""D-""]);
}

test();"
HumanEval_82,asm_Beng,ts,"//উদাহৰণসমূহ//দৈৰ্ঘ্য এটা মৌলিক সংখ্যা বা অন্যথা মিছা //এটা ফাংচন লিখা যি এটা ষ্ট্ৰিং লয় আৰু যদি ষ্ট্ৰিংটো হয় তেন্তে true ঘূৰাই আনে// >>> prime_length(""Hello"")
// true
// >>> prime_length(""abcdcba"")
// true
// >>> prime_length(""kittens"")
// true
// >>> prime_length(""orange"")
// false
function prime_length(string: string): boolean {
","function prime_length(string: string): boolean {
    const length = string.length;

    if (length < 2) return false;

    for (let i = 2; i * i <= length; i++) {
        if (length % i === 0) {
            return false;
        }
    }
    
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prime_length;
  assert.deepEqual(candidate(""Hello""),true);
  assert.deepEqual(candidate(""abcdcba""),true);
  assert.deepEqual(candidate(""kittens""),true);
  assert.deepEqual(candidate(""orange""),false);
  assert.deepEqual(candidate(""wow""),true);
  assert.deepEqual(candidate(""world""),true);
  assert.deepEqual(candidate(""MadaM""),true);
  assert.deepEqual(candidate(""Wow""),true);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""HI""),true);
  assert.deepEqual(candidate(""go""),true);
  assert.deepEqual(candidate(""gogo""),false);
  assert.deepEqual(candidate(""aaaaaaaaaaaaaaa""),false);
  assert.deepEqual(candidate(""Madam""),true);
  assert.deepEqual(candidate(""M""),false);
  assert.deepEqual(candidate(""0""),false);
}

test();"
HumanEval_83,asm_Beng,ts,"//ধনাত্মক পূৰ্ণ সংখ্যা যি 1 ৰ সৈতে আৰম্ভ বা শেষ হয়।//এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হ'লে, n-অংকৰ সংখ্যাৰ গণনা ঘূৰাই দিয়ক function starts_one_ends(n: number): number {
","function starts_one_ends(n: number): number {
    if (n === 1) {
        return 1; // The number '1' is the only 1-digit number starting or ending with '1'
    }

    const totalNumbers = Math.pow(10, n - 1); // Total n-digit numbers starting with any digit from 1 to 9
    const startingWithOne = Math.pow(10, n - 1); // The n-digit numbers starting with '1'
    const endingWithOne = Math.pow(10, n - 1); // The n-digit numbers ending with '1'
    const startingAndEndingWithOne = Math.pow(10, n - 2); // The n-digit numbers starting and ending with '1' 

    // To find numbers that start or end with 1, add those starting with 1 
    // and those ending with 1, then subtract the overlap (those both starting and ending with 1).
    return startingWithOne + endingWithOne - startingAndEndingWithOne;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = starts_one_ends;
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(2),18);
  assert.deepEqual(candidate(3),180);
  assert.deepEqual(candidate(4),1800);
  assert.deepEqual(candidate(5),18000);
}

test();"
HumanEval_84,asm_Beng,ts,"//উদাহৰণ //এটা ধনাত্মক পূৰ্ণ সংখ্যা N দিয়া হ'লে, ইয়াৰ অংকবোৰৰ যোগফল বাইনেৰী পদ্ধতিত ঘূৰাই দিয়া। // >>> solve(1000)
// ""1""
// >>> solve(150)
// ""110""
// >>> solve(147)
// ""1100""
// Variables:
// @N integer
// Constraints: 0 ≤ N ≤ 10000.
// Output:
// a string of binary number
function solve(N: number): string {
","function solve(N: number): string {
    let sumOfDigits = 0;
    while (N > 0) {
        sumOfDigits += N % 10;
        N = Math.floor(N / 10);
    }
    return sumOfDigits.toString(2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solve;
  assert.deepEqual(candidate(1000),""1"");
  assert.deepEqual(candidate(150),""110"");
  assert.deepEqual(candidate(147),""1100"");
  assert.deepEqual(candidate(333),""1001"");
  assert.deepEqual(candidate(963),""10010"");
}

test();"
HumanEval_85,asm_Beng,ts,"//উদাহৰণঃ//এটা অ-খালি অখণ্ড সংখ্যাৰ অ্যাৰ দিয়া হ'লে, প্ৰথমতে অস্বাভাৱিক সূচকত থকা জোৰা উপাদানবোৰ যোগ কৰা হ'ব...// >>> add([4, 2, 6, 7])
// 2
function add(lst: number[]): number {
","function add(lst: number[]): number {
    return lst.reduce((sum, num, index) => {
        if (index % 2 === 1 && num % 2 === 0) {
            return sum + num;
        }
        return sum;
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add;
  assert.deepEqual(candidate([4, 88]),88);
  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);
  assert.deepEqual(candidate([4, 0, 6, 7]),0);
  assert.deepEqual(candidate([4, 4, 6, 8]),12);
}

test();"
HumanEval_86,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//টোকাঃ আপুনি বাক্যত শব্দৰ ক্ৰম আৰু খালী স্থান ৰাখিব লাগিব।//ASCII মানৰ ওপৰত ভিত্তি কৰি ক্ৰমান্বয়ে বৃদ্ধি কৰা হ'ব।//নতুন শব্দৰ দ্বাৰা সলনি কৰা হয় য'ত সকলো বৰ্ণ ত ব্যৱহৃত হয়।//শৃংখলাৰ আদেশপ্ৰাপ্ত সংস্কৰণ, এটা শৃংখল য'ত সকলো শব্দ (স্পেছাৰে পৃথক) //এটা ফাংচন লিখা যি এটা ষ্ট্ৰিং লয় আৰু তাৰ এটা আদেশযুক্ত সংস্কৰণ ঘূৰাই আনে।// >>> anti_shuffle(""Hi"")
// ""Hi""
// >>> anti_shuffle(""hello"")
// ""ehllo""
// >>> anti_shuffle(""Hello World!!!"")
// ""Hello !!!Wdlor""
function anti_shuffle(s: string): string {
","function anti_shuffle(s: string): string {
  return s.split(' ').map(word =>
    word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')
  ).join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = anti_shuffle;
  assert.deepEqual(candidate(""Hi""),""Hi"");
  assert.deepEqual(candidate(""hello""),""ehllo"");
  assert.deepEqual(candidate(""number""),""bemnru"");
  assert.deepEqual(candidate(""abcd""),""abcd"");
  assert.deepEqual(candidate(""Hello World!!!""),""Hello !!!Wdlor"");
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""Hi. My name is Mister Robot. How are you?""),"".Hi My aemn is Meirst .Rboot How aer ?ouy"");
}

test();"
HumanEval_87,asm_Beng,ts,"//উদাহৰণঃ//লগতে, ক্ৰমবৰ্ধমান ক্ৰমত কলামৰ দ্বাৰা শাৰীটোৰ সমন্বয়বোৰ ছৰ্ট কৰক।//সমন্বয়সমূহক প্ৰথমতে শাৰী অনুসাৰে ক্ৰমাৎ বৃদ্ধিৰ ক্ৰমত ছৰ্ট কৰক।//প্ৰতিটো এৰে এটা সমন্বয় - (শাৰী, কলাম), 0 ৰ সৈতে আৰম্ভ।//আৰু এটা অংকন-অংকন-অংকন সমষ্টিৰ সমষ্টি ঘূৰাই দিব, [(x1, y1), (x2, y2) ...] যাতে //lst আৰু সম্পূৰ্ণ সংখ্যা x দিয়া হৈছে, অংকটোৰ ভিতৰত x সম্পূৰ্ণ সংখ্যাটো বিচাৰি উলিওৱা, //প্ৰতিটো শাৰীত ভিন্ন সংখ্যক কলাম থাকিব পাৰে।//যিটো মেট্ৰিক্সৰ লগত একে, কিন্তু মেট্ৰিক্সৰ লগত নহয়,//আপোনাক এটা 2D ডাটা দিয়া হৈছে, এটা নেষ্টড এৰেজ হিচাপে, // >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
// >>> get_row([], 1)
// []
// >>> get_row([[], [1], [1, 2, 3]], 3)
// [[2, 2]]
function get_row(lst: number[][], x: number): [number, number][] {
","function get_row(lst: number[][], x: number): [number, number][] {
    const coordinates: [number, number][] = [];

    // Traverse the data matrix
    lst.forEach((row, rowIndex) => {
        row.forEach((value, colIndex) => {
            if (value === x) {
                coordinates.push([rowIndex, colIndex]);
            }
        });
    });

    // Sort the coordinates
    coordinates.sort(([row1, col1], [row2, col2]) => {
        if (row1 === row2) {
            // Sort by columns in descending order
            return col2 - col1;
        }
        // Sort by rows in ascending order
        return row1 - row2;
    });

    return coordinates;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_row;
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);
  assert.deepEqual(candidate([], 1),[]);
  assert.deepEqual(candidate([[1]], 2),[]);
  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);
}

test();"
HumanEval_88,asm_Beng,ts,"//উদাহৰণঃ//* প্ৰদান কৰা এৰে সলনি নকৰিব।//টোকাঃ//অথবা ইয়াক ক্ৰমান্বয়ে বাছনি কৰক যদি যোগফলটো (প্ৰথম সূচকৰ মান, অন্তিম সূচকৰ মান) জোৰা হয়।//আপুনি যদি যোগফলটো (প্ৰথম সূচক মান, অন্তিম সূচক মান) অস্বাভাৱিক হয়, তেন্তে আপুনি দিয়া এৰেক ক্ৰমান্বয়ে ছৰ্ট কৰিব, //এটা অ-নতিবাচক অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, ছ'ৰ্টিং কৰাৰ পিছত, দিয়া অ্যারেৰ এটা কট্ (cots) ঘূৰাই দিব, // >>> sort_array([])
// []
// >>> sort_array([5])
// [5]
// >>> sort_array([2, 4, 3, 0, 1, 5])
// [0, 1, 2, 3, 4, 5]
// >>> sort_array([2, 4, 3, 0, 1, 5, 6])
// [6, 5, 4, 3, 2, 1, 0]
function sort_array(array: number[]): number[] {
","function sort_array(array: number[]): number[] {
    if (array.length === 0) {
        return [];
    }

    const firstValue = array[0];
    const lastValue = array[array.length - 1];
    const sum = firstValue + lastValue;

    const sortedArray = [...array].sort((a, b) => a - b);

    if (sum % 2 === 0) {
        return sortedArray.reverse();
    } else {
        return sortedArray;
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_array;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([5]),[5]);
  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);
  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);
  assert.deepEqual(candidate([2, 1]),[1, 2]);
  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);
  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);
}

test();"
HumanEval_89,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//তললৈ নামি যাওক দুই গুণ কৰি দুই ঠাইলৈ।//বৰ্ণমালাৰ ৰূপটো এনেদৰে ঘূৰাই দিব লাগে যাতে আখৰবোৰ //এটা বৰ্ণমালাৰ সৈতে এনক্ৰিপ্ট কৰা এটা ষ্ট্ৰিং ঘূৰাই আনে।//এটা ফাংচন এনক্ৰিপ্ট কৰক যি এটা ষ্ট্ৰিংক এটা আর্গুমেণ্ট হিচাপে লয় আৰু // >>> encrypt(""hi"")
// ""lm""
// >>> encrypt(""asdfghjkl"")
// ""ewhjklnop""
// >>> encrypt(""gf"")
// ""kj""
// >>> encrypt(""et"")
// ""ix""
function encrypt(s: string): string {
","function encrypt(s: string): string {
    const shift = 2 * 2; // Shift by 4 places
    const alphabetSize = 26;
    
    return s.split('').map(char => {
        const charCode = char.charCodeAt(0);
        
        // Check if the character is a lowercase letter
        if (charCode >= 97 && charCode <= 122) {
            let newCharCode = charCode + shift;
            
            // Wrap around if it goes past 'z'
            if (newCharCode > 122) {
                newCharCode = (newCharCode - 97) % alphabetSize + 97;
            }
            
            return String.fromCharCode(newCharCode);
        }

        // Return the character unchanged if it's not a lowercase letter
        return char;
    }).join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = encrypt;
  assert.deepEqual(candidate(""hi""),""lm"");
  assert.deepEqual(candidate(""asdfghjkl""),""ewhjklnop"");
  assert.deepEqual(candidate(""gf""),""kj"");
  assert.deepEqual(candidate(""et""),""ix"");
  assert.deepEqual(candidate(""faewfawefaewg""),""jeiajeaijeiak"");
  assert.deepEqual(candidate(""hellomyfriend""),""lippsqcjvmirh"");
  assert.deepEqual(candidate(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""),""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"");
  assert.deepEqual(candidate(""a""),""e"");
}

test();"
HumanEval_90,asm_Beng,ts,"//যদি তেনে কোনো উপাদান নাই তেন্তে undefined ঘূৰাই দিব.//এটা ফাংচন next_smallest লিখক যি এৰেৰ দ্বিতীয় ক্ষুদ্ৰতম উপাদানটো ঘূৰাই দিয়ে।//আপোনাক এটা সম্পূৰ্ণ সংখ্যাৰ অ্যারে দিয়া হৈছে।// >>> next_smallest([1, 2, 3, 4, 5])
// 2
// >>> next_smallest([5, 1, 4, 3, 2])
// 2
// >>> next_smallest([])
// undefined
// >>> next_smallest([1, 1])
// undefined
function next_smallest(lst: number[]): number | undefined {
","function next_smallest(lst: number[]): number | undefined {
    if (lst.length < 2) {
        return undefined;
    }
    
    let first: number | undefined = undefined;
    let second: number | undefined = undefined;
    
    for (let num of lst) {
        if (first === undefined || num < first) {
            second = first;
            first = num;
        } else if (num > first && (second === undefined || num < second)) {
            second = num;
        }
    }

    return second;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = next_smallest;
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);
  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([1, 1]),undefined);
  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);
  assert.deepEqual(candidate([1, 1]),undefined);
  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);
}

test();"
HumanEval_91,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//বাক্যবোৰ '', '?' বা '! ' ৰে সীমিত কৰা হৈছে।//এক বিৰক্তি হৈছে ""I"" শব্দৰে আৰম্ভ হোৱা এটা বাক্য।//আপোনাক এটা শব্দৰ শাৰী দিয়া হ'ব, আৰু আপোনাৰ কাম হ'ব সংখ্যাটো গণনা কৰা।// >>> is_bored(""Hello world"")
// 0
// >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
// 1
function is_bored(S: string): number {
","function is_bored(S: string): number {
    // Split the string into sentences using '.', '?' or '!' as delimiters
    const sentences = S.split(/[.!?]/);

    // Filter sentences that start with ""I"" and count them
    const boredomCount = sentences.filter(sentence => sentence.trim().startsWith('I')).length;

    return boredomCount;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_bored;
  assert.deepEqual(candidate(""Hello world""),0);
  assert.deepEqual(candidate(""Is the sky blue?""),0);
  assert.deepEqual(candidate(""I love It !""),1);
  assert.deepEqual(candidate(""bIt""),0);
  assert.deepEqual(candidate(""I feel good today. I will be productive. will kill It""),2);
  assert.deepEqual(candidate(""You and I are going for a walk""),0);
}

test();"
HumanEval_92,asm_Beng,ts,"//উদাহৰণসমূহ//অন্য যিকোনো ক্ষেত্ৰত false ঘূৰাই আনে।//যদি এটা সংখ্যা বাকী দুটা সংখ্যাৰ যোগফলৰ সমান হয় আৰু সকলো সংখ্যা সম্পূৰ্ণ সংখ্যা হয় তেন্তে true প্ৰাপ্ত কৰা হ'ব।//এটা ফাংচন সৃষ্টি কৰক যিয়ে ৩টা সংখ্যা গ্ৰহণ কৰে।// >>> any_int(5, 2, 7)
// true
// >>> any_int(3, 2, 2)
// false
// >>> any_int(3, -2, 1)
// true
// >>> any_int(3.6, -2.2, 2)
// false
function any_int(x: number, y: number, z: number): boolean {
","function any_int(x: number, y: number, z: number): boolean {
    // Check if all numbers are integers
    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {
        return false;
    }
    // Check if one of the numbers is the sum of the other two
    if (x === y + z || y === x + z || z === x + y) {
        return true;
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = any_int;
  assert.deepEqual(candidate(2, 3, 1),true);
  assert.deepEqual(candidate(2.5, 2, 3),false);
  assert.deepEqual(candidate(1.5, 5, 3.5),false);
  assert.deepEqual(candidate(2, 6, 2),false);
  assert.deepEqual(candidate(4, 2, 2),true);
  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);
  assert.deepEqual(candidate(-4, 6, 2),true);
  assert.deepEqual(candidate(2, 1, 1),true);
  assert.deepEqual(candidate(3, 4, 7),true);
  assert.deepEqual(candidate(3.0, 4, 7),false);
}

test();"
HumanEval_93,asm_Beng,ts,"//উদাহৰণঃ//কেৱল আখৰকেই ধৰি লওক।//ইংৰাজী বৰ্ণমালাৰ স্বৰবৰ্ণ।//এই বাৰ্তাৰ লগত এই আখৰটো 2টা স্থান আগলৈ আহিব ।//এই পদ্ধতিত সকলো আখৰৰে কেচ সলনি হয়, সকলো স্বৰবৰ্ণৰ ঠাইত //এটা ফাংচন লিখা যি এটা বাৰ্তা গ্ৰহণ কৰে, আৰু এনে এটা // >>> encode(""test"")
// ""TGST""
// >>> encode(""This is a message"")
// ""tHKS KS C MGSSCGG""
function encode(message: string): string {
","function encode(message: string): string {
    const swapCase = (char: string): string => {
        if (char === char.toLowerCase()) {
            return char.toUpperCase();
        } else {
            return char.toLowerCase();
        }
    };

    const replaceVowel = (char: string): string => {
        const vowels = 'aeiou';
        const nextVowels = 'cgkqw';
        const index = vowels.indexOf(char.toLowerCase());
        if (index !== -1) {
            return char === char.toLowerCase() 
                ? nextVowels[index] 
                : nextVowels[index].toUpperCase();
        }
        return char;
    };

    return message
        .split('')
        .map(char => swapCase(replaceVowel(char)))
        .join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = encode;
  assert.deepEqual(candidate(""TEST""),""tgst"");
  assert.deepEqual(candidate(""Mudasir""),""mWDCSKR"");
  assert.deepEqual(candidate(""YES""),""ygs"");
  assert.deepEqual(candidate(""This is a message""),""tHKS KS C MGSSCGG"");
  assert.deepEqual(candidate(""I DoNt KnOw WhAt tO WrItE""),""k dQnT kNqW wHcT Tq wRkTg"");
}

test();"
HumanEval_94,asm_Beng,ts,"//উদাহৰণঃ//আপুনি আটাইতকৈ ডাঙৰ অগ্ৰ মানটো বিচাৰিব লাগিব আৰু তাৰ অংকবোৰৰ যোগফল ঘূৰাই দিব লাগিব।//আপোনাক এটা সম্পূৰ্ণ সংখ্যাৰ অ্যারে দিয়া হৈছে।// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
// 10
// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
// 25
// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
// 13
// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
// 11
// >>> skjkasdkd([0, 81, 12, 3, 1, 21])
// 3
// >>> skjkasdkd([0, 8, 1, 2, 1, 7])
// 7
function skjkasdkd(lst: number[]): number {
","function isPrime(n: number): boolean {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}

function sumOfDigits(n: number): number {
    let sum = 0;
    while (n > 0) {
        sum += n % 10;
        n = Math.floor(n / 10);
    }
    return sum;
}

function skjkasdkd(lst: number[]): number {
    let maxPrime = -1;

    for (const num of lst) {
        if (isPrime(num) && num > maxPrime) {
            maxPrime = num;
        }
    }

    return maxPrime === -1 ? 0 : sumOfDigits(maxPrime);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = skjkasdkd;
  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);
  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);
  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);
  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);
  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);
  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);
  assert.deepEqual(candidate([8191]),19);
  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);
  assert.deepEqual(candidate([127, 97, 8192]),10);
}

test();"
HumanEval_95,asm_Beng,ts,"//উদাহৰণঃ//ফাংশনটোৱে false ঘূৰাই দিব লাগে যদিহে দিয়া বস্তুটো খালী হয়।//case বা সকলো কীবোৰ বড়ো আকাৰৰ স্ট্ৰিং হয়, অন্যথা false ঘূৰাই দিব.//এটা বস্তু দিয়া হ'লে, যদি সকলো কীবোৰ নিম্নতম ত থকা শাৰী হয় তেন্তে true ঘূৰাই দিয়ক.// >>> check_dict_case({""a"": ""apple"", ""b"": ""banana""})
// true
// >>> check_dict_case({""a"": ""apple"", ""A"": ""banana"", ""B"": ""banana""})
// false
// >>> check_dict_case({""a"": ""apple"", 8: ""banana"", ""a"": ""apple""})
// false
// >>> check_dict_case({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""})
// false
// >>> check_dict_case({""STATE"": ""NC"", ""ZIP"": ""12345""})
// true
function check_dict_case(dict: {[key: string]: string}): boolean {
","function check_dict_case(dict: { [key: string]: string }): boolean {
    const keys = Object.keys(dict);
    if (keys.length === 0) return false;

    const allLowerCase = keys.every(key => key === key.toLowerCase());
    const allUpperCase = keys.every(key => key === key.toUpperCase());

    return allLowerCase || allUpperCase;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = check_dict_case;
  assert.deepEqual(candidate({""p"": ""pineapple"", ""b"": ""banana""}),true);
  assert.deepEqual(candidate({""p"": ""pineapple"", ""A"": ""banana"", ""B"": ""banana""}),false);
  assert.deepEqual(candidate({""p"": ""pineapple"", ""5"": ""banana"", ""a"": ""apple""}),false);
  assert.deepEqual(candidate({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""}),false);
  assert.deepEqual(candidate({""STATE"": ""NC"", ""ZIP"": ""12345""}),true);
  assert.deepEqual(candidate({""fruit"": ""Orange"", ""taste"": ""Sweet""}),true);
  assert.deepEqual(candidate({}),false);
}

test();"
HumanEval_96,asm_Beng,ts,"//উদাহৰণ স্বৰূপেঃ//পূৰ্ণ সংখ্যা যি অগ্ৰ সংখ্যা আৰু n তকৈ সৰু।//এটা ফাংচন প্ৰয়োগ কৰক যি এটা অ-নতিবাচক পূৰ্ণ সংখ্যা লয় আৰু প্ৰথম n ৰ এটা অ্যারে ঘূৰাই আনে ।// >>> count_up_to(5)
// [2, 3]
// >>> count_up_to(11)
// [2, 3, 5, 7]
// >>> count_up_to(0)
// []
// >>> count_up_to(20)
// [2, 3, 5, 7, 11, 13, 17, 19]
// >>> count_up_to(1)
// []
// >>> count_up_to(18)
// [2, 3, 5, 7, 11, 13, 17]
function count_up_to(n: number): number[] {
","function count_up_to(n: number): number[] {
    function isPrime(num: number): boolean {
        if (num < 2) return false;
        for (let i = 2; i <= Math.sqrt(num); i++) {
            if (num % i === 0) return false;
        }
        return true;
    }

    const primes: number[] = [];
    for (let i = 2; i < n; i++) {
        if (isPrime(i)) {
            primes.push(i);
        }
    }

    return primes;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_up_to;
  assert.deepEqual(candidate(5),[2, 3]);
  assert.deepEqual(candidate(6),[2, 3, 5]);
  assert.deepEqual(candidate(7),[2, 3, 5]);
  assert.deepEqual(candidate(10),[2, 3, 5, 7]);
  assert.deepEqual(candidate(0),[]);
  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);
  assert.deepEqual(candidate(1),[]);
  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);
  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);
  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);
}

test();"
HumanEval_97,asm_Beng,ts,"//উদাহৰণঃ//ধাৰণা কৰা যে ইনপুটটো সদায় বৈধ।//তেওঁলোকৰ একক অংকবোৰৰ উৎপাদনৰ সংখ্যা।//দুটা পূৰ্ণ সংখ্যা লোৱা আৰু উভতাই দিয়া ফাংচনটো সম্পূৰ্ণ কৰক।// >>> multiply(148, 412)
// 16
// >>> multiply(19, 28)
// 72
// >>> multiply(2020, 1851)
// 0
// >>> multiply(14, -15)
// 20
function multiply(a: number, b: number): number {
","function multiply(a: number, b: number): number {
    const unitDigitA = Math.abs(a) % 10;
    const unitDigitB = Math.abs(b) % 10;
    return unitDigitA * unitDigitB;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = multiply;
  assert.deepEqual(candidate(148, 412),16);
  assert.deepEqual(candidate(19, 28),72);
  assert.deepEqual(candidate(2020, 1851),0);
  assert.deepEqual(candidate(14, -15),20);
  assert.deepEqual(candidate(76, 67),42);
  assert.deepEqual(candidate(17, 27),49);
  assert.deepEqual(candidate(0, 1),0);
  assert.deepEqual(candidate(0, 0),0);
}

test();"
HumanEval_98,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//এটা ষ্ট্ৰিং s দিয়া হ'লে, জোৰা সূচকত থকা বড়ো স্বৰসমূহৰ সংখ্যা গণনা কৰা।// >>> count_upper(""aBCdEf"")
// 1
// >>> count_upper(""abcdefg"")
// 0
// >>> count_upper(""dBBE"")
// 0
function count_upper(s: string): number {
","function count_upper(s: string): number {
    const uppercaseVowels = new Set(['A', 'E', 'I', 'O', 'U']);
    let count = 0;
    
    for (let i = 0; i < s.length; i += 2) {
        if (uppercaseVowels.has(s[i])) {
            count++;
        }
    }
    
    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_upper;
  assert.deepEqual(candidate(""aBCdEf""),1);
  assert.deepEqual(candidate(""abcdefg""),0);
  assert.deepEqual(candidate(""dBBE""),0);
  assert.deepEqual(candidate(""B""),0);
  assert.deepEqual(candidate(""U""),1);
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""EEEE""),2);
}

test();"
HumanEval_99,asm_Beng,ts,"//উদাহৰণসমূহ//দুটা পূৰ্ণসংখ্যাৰ পৰা, ইয়াক শূন্যৰ পৰা দূৰলৈ ঘূৰাই ল'ব।//আৰু ইয়াৰ নিকটতম পূৰ্ণ সংখ্যাটো ঘূৰাই দিয়ে। যদি সংখ্যাটো সমান দূৰত্বত থাকে //এটা সংখ্যা প্ৰতিনিধিত্ব কৰা এটা মান (শৃংখলা) গ্ৰহণ কৰা এটা ফাংশন সৃষ্টি কৰক ।// >>> closest_integer(""10"")
// 10
// >>> closest_integer(""15.3"")
// 15
// Note:
// Rounding away from zero means that if the given number is equidistant
// from two integers, the one you should return is the one that is the
// farthest from zero. For example closest_integer(""14.5"") should
// return 15 and closest_integer(""-14.5"") should return -15.
function closest_integer(value: string): number {
","function closest_integer(value: string): number {
  const num = parseFloat(value);
  if (num > 0) {
    return Math.floor(num + 0.5);
  } else {
    return Math.ceil(num - 0.5);
  }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = closest_integer;
  assert.deepEqual(candidate(""10""),10);
  assert.deepEqual(candidate(""14.5""),15);
  assert.deepEqual(candidate(""-15.5""),-16);
  assert.deepEqual(candidate(""15.3""),15);
  assert.deepEqual(candidate(""0""),0);
}

test();"
HumanEval_100,asm_Beng,ts,"//উদাহৰণঃ//i স্তৰৰ শিলৰ সংখ্যা (i+1) ।//এটা এৰেজত প্ৰতিটো স্তৰত থকা শিলৰ সংখ্যা ঘূৰাই আনে, য'ত সূচকৰ এলেমেণ্ট //- যদি n জোৰা হয়, তেন্তে পৰৱৰ্তী জোৰা সংখ্যাটো।//- যদি n অগণন হয়, তেন্তে পৰৱৰ্তী অগণন সংখ্যাটো।//পৰৱৰ্তী স্তৰত শিলৰ সংখ্যা হ'লঃ//প্ৰথম স্তৰত nটা শিল আছে।//এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিলে, আপুনি n স্তৰৰ শিলৰ এটা গুটি তৈয়াৰ কৰিব লাগিব।// >>> make_a_pile(3)
// [3, 5, 7]
function make_a_pile(n: number): number[] {
","function make_a_pile(n: number): number[] {
    const result: number[] = [];
    let currentStones = n;
    for (let i = 0; i < n; i++) {
        result.push(currentStones);
        if (currentStones % 2 === 0) {
            currentStones += 2; // next even number
        } else {
            currentStones += 2; // next odd number
        }
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = make_a_pile;
  assert.deepEqual(candidate(3),[3, 5, 7]);
  assert.deepEqual(candidate(4),[4, 6, 8, 10]);
  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);
  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);
  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);
}

test();"
HumanEval_101,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//শব্দবোৰ শাৰীলৈ ভাগ কৰি এটা শব্দৰ এৰেজ ঘূৰাই দিব।//আপোনাক এটা শব্দৰ শৃংখলা দিয়া হ'ব, যাক কমা বা স্পেচৰে পৃথক কৰা হ'ব। আপোনাৰ কাম হ'ল // >>> words_string(""Hi, my name is John"")
// [""Hi"", ""my"", ""name"", ""is"", ""John""]
// >>> words_string(""One, two, three, four, five, six"")
// [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
function words_string(s: string): string[] {
","function words_string(s: string): string[] {
    return s.split(/[\s,]+/).filter(word => word.length > 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = words_string;
  assert.deepEqual(candidate(""Hi, my name is John""),[""Hi"", ""my"", ""name"", ""is"", ""John""]);
  assert.deepEqual(candidate(""One, two, three, four, five, six""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""]);
  assert.deepEqual(candidate(""Hi, my name""),[""Hi"", ""my"", ""name""]);
  assert.deepEqual(candidate(""One,, two, three, four, five, six,""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""]);
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""ahmed     , gamal""),[""ahmed"", ""gamal""]);
}

test();"
HumanEval_102,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//যদি এনে কোনো সংখ্যা নাই, তেন্তে ফাংচনে -1 ঘূৰাই দিব লাগে।//আটাইতকৈ ডাঙৰ সমসংখ্যাৰ সংখ্যা যিটো [x, y] অন্তৰ্ভুক্ত। যদি //এই ফাংশনে দুটা ধনাত্মক সংখ্যা x আৰু y লয় আৰু  ঘূৰাই দিয়ে// >>> choose_num(12, 15)
// 14
// >>> choose_num(13, 12)
// -1
function choose_num(x: number, y: number): number {
","function choose_num(x: number, y: number): number {
    // Ensure x is less than or equal to y for proper range searching
    if (x > y) {
        [x, y] = [y, x];
    }
    
    // Start looking from the upper bound of the range
    for (let i = y; i >= x; i--) {
        if (i % 2 === 0) {
            return i;
        }
    }
    
    // If no even number is found in the range
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = choose_num;
  assert.deepEqual(candidate(12, 15),14);
  assert.deepEqual(candidate(13, 12),-1);
  assert.deepEqual(candidate(33, 12354),12354);
  assert.deepEqual(candidate(5234, 5233),-1);
  assert.deepEqual(candidate(6, 29),28);
  assert.deepEqual(candidate(27, 10),-1);
  assert.deepEqual(candidate(7, 7),-1);
  assert.deepEqual(candidate(546, 546),546);
}

test();"
HumanEval_103,asm_Beng,ts,"//উদাহৰণঃ//যদি n m ৰ পৰা ডাঙৰ হয়, তেন্তে -1 ঘূৰাই দিব.//উত্তৰটো আটাইতকৈ ওচৰৰ পূৰ্ণ সংখ্যালৈ ঘূৰাই লওক আৰু তাক বাইনেৰীলৈ ৰূপান্তৰ কৰক।//n ৰ পৰা m লৈকে (n আৰু m সহ) সম্পূৰ্ণ সংখ্যাৰ গড়।//আপোনাক দুটা ধনাত্মক পূৰ্ণ সংখ্যা n আৰু m দিয়া হৈছে, আৰু আপোনাৰ কাম হ'ল // >>> rounded_avg(1, 5)
// ""0b11""
// >>> rounded_avg(7, 5)
// -1
// >>> rounded_avg(10, 20)
// ""0b1111""
// >>> rounded_avg(20, 33)
// ""0b11010""
function rounded_avg(n: number, m: number): string | number {
","function rounded_avg(n: number, m: number): string | number {
    if (n > m) {
        return -1;
    }

    const count = m - n + 1;
    let sum = 0;
    
    for (let i = n; i <= m; i++) {
        sum += i;
    }

    const avg = sum / count;
    const roundedAvg = Math.round(avg);
    return ""0b"" + roundedAvg.toString(2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rounded_avg;
  assert.deepEqual(candidate(1, 5),""0b11"");
  assert.deepEqual(candidate(7, 13),""0b1010"");
  assert.deepEqual(candidate(964, 977),""0b1111001010"");
  assert.deepEqual(candidate(996, 997),""0b1111100100"");
  assert.deepEqual(candidate(560, 851),""0b1011000010"");
  assert.deepEqual(candidate(185, 546),""0b101101110"");
  assert.deepEqual(candidate(362, 496),""0b110101101"");
  assert.deepEqual(candidate(350, 902),""0b1001110010"");
  assert.deepEqual(candidate(197, 233),""0b11010111"");
  assert.deepEqual(candidate(7, 5),-1);
  assert.deepEqual(candidate(5, 1),-1);
  assert.deepEqual(candidate(5, 5),""0b101"");
}

test();"
HumanEval_104,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//টোকাঃ ঘূৰি অহা এৰেজ বৃদ্ধিৰ ক্ৰমত বাছনি কৰা উচিত।//কোনো এটা অংকত কোনো এটা অংক নাই।//এটা ধনাত্মক পূৰ্ণসংখ্যাৰ অ্যারে দিয়া হৈছে x. এটা সকলোবোৰ  ৰ সাজগোজিত অ্যারে ঘূৰাই দিব// >>> unique_digits([15, 33, 1422, 1])
// [1, 15, 33]
// >>> unique_digits([152, 323, 1422, 10])
// []
function unique_digits(x: number[]): number[] {
","function unique_digits(x: number[]): number[] {
    // Helper function to check if a number has any even digit
    const hasEvenDigit = (num: number): boolean => {
        while (num > 0) {
            const digit = num % 10;
            if (digit % 2 === 0) return true;
            num = Math.floor(num / 10);
        }
        return false;
    };

    // Filter out numbers without even digits and sort them
    return x.filter(num => !hasEvenDigit(num)).sort((a, b) => a - b);
}

// Example usage:
console.log(unique_digits([15, 33, 1422, 1])); // [1, 15, 33]
console.log(unique_digits([152, 323, 1422, 10])); // []","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = unique_digits;
  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);
  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);
  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);
  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);
}

test();"
HumanEval_105,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//এক, দুই, তিনি, চাৰি, পাঁচ, ছয়, সাত, আঠ, ন'//ফলাফলৰ এৰে উলটি, আৰু তাৰ পিছত প্ৰতিটো অংকক ইয়াৰ সৈতে সম্পৰ্কিত নামৰ সৈতে প্ৰতিস্থাপন কৰক //এটা সম্পূৰ্ণ সংখ্যাৰ অ্যাৰে দিয়া হ'লে, 1 আৰু 9 ৰ মাজত থকা সম্পূৰ্ণ সংখ্যাবোৰ ছৰ্প কৰক,// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])
// [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
// If the array is empty, return an empty array:
// >>> by_length([])
// []
// If the array has any strange number ignore it:
// >>> by_length([1, -1, 55])
// [""One""]
function by_length(arr: number[]): string[] {
","function by_length(arr: number[]): string[] {
    const numberNames: { [key: number]: string } = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    };

    return arr
        .filter(num => num >= 1 && num <= 9)
        .sort((a, b) => b - a)
        .map(num => numberNames[num]);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = by_length;
  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, -1, 55]),[""One""]);
  assert.deepEqual(candidate([1, -1, 3, 2]),[""Three"", ""Two"", ""One""]);
  assert.deepEqual(candidate([9, 4, 8]),[""Nine"", ""Eight"", ""Four""]);
}

test();"
HumanEval_106,asm_Beng,ts,"//উদাহৰণঃ//i ৰ কাৰক হ'ল 1 ৰ পৰা i লৈকে থকা সংখ্যাবোৰৰ গুণফল (1 * 2 * ... * i) ।//মই ১ৰ পৰা আৰম্ভ কৰোঁ।//অথবা ১ৰ পৰা i লৈকে সংখ্যাৰ যোগফল।//আৰু আকাৰ n ৰ এটা এৰেজ ঘূৰাই আনে, যাতে সূচক i ত থকা উপাদানৰ মানটো যদি i সম হয়, তেন্তে i ৰ ফেক্টৰিয়েল হয়।//f ফাংচনটো ৰূপায়ণ কৰক যি n ক পৰিমাপ হিচাপে লয়, // >>> f(5)
// [1, 2, 6, 24, 15]
function f(n: number): number[] {
","function f(n: number): number[] {
    const result: number[] = [];
    for (let i = 1; i <= n; i++) {
        if (i % 2 === 0) {
            // Calculate factorial for even i
            let factorial = 1;
            for (let j = 1; j <= i; j++) {
                factorial *= j;
            }
            result.push(factorial);
        } else {
            // Calculate sum for odd i
            let sum = 0;
            for (let j = 1; j <= i; j++) {
                sum += j;
            }
            result.push(sum);
        }
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = f;
  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);
  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);
  assert.deepEqual(candidate(1),[1]);
  assert.deepEqual(candidate(3),[1, 2, 6]);
}

test();"
HumanEval_107,asm_Beng,ts,"//উদাহৰণ ১ঃ//পূৰ্ণসংখ্যাৰ পলিণ্ড্ৰ'ম যিটো অন্তৰ্ভুক্ত ৰেঞ্জৰ ভিতৰত পৰে ({1, n) ।//এটা ধনাত্মক পূৰ্ণসংখ্যা n দিয়া হৈছে, এটা এৰে ঘূৰাই দিয়া যাক সম আৰু অস্বাভাৱিক সংখ্যা আছে // >>> even_odd_palindrome(3)
// [1, 2]
// Explanation:
// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
// Example 2:
// >>> even_odd_palindrome(12)
// [4, 6]
// Explanation:
// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
// Note:
// 1. 1 <= n <= 10^3
// 2. returned array has the number of even and odd integer palindromes respectively.
function even_odd_palindrome(n: number): [number, number] {
","function isPalindrome(num: number): boolean {
    const str = num.toString();
    return str === str.split('').reverse().join('');
}

function even_odd_palindrome(n: number): [number, number] {
    let evenCount = 0;
    let oddCount = 0;

    for (let i = 1; i <= n; i++) {
        if (isPalindrome(i)) {
            if (i % 2 === 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
    }

    return [evenCount, oddCount];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = even_odd_palindrome;
  assert.deepEqual(candidate(123),[8, 13]);
  assert.deepEqual(candidate(12),[4, 6]);
  assert.deepEqual(candidate(3),[1, 2]);
  assert.deepEqual(candidate(63),[6, 8]);
  assert.deepEqual(candidate(25),[5, 6]);
  assert.deepEqual(candidate(19),[4, 6]);
  assert.deepEqual(candidate(9),[4, 5]);
  assert.deepEqual(candidate(1),[0, 1]);
}

test();"
HumanEval_108,asm_Beng,ts,"//উদাহৰণস্বৰূপে, -১২৩ৰ স্বাক্ষৰিত অংক -১, ২ আৰু ৩।//যদি এটা সংখ্যা ঋণাত্মক হয়, তেন্তে তাৰ প্ৰথম স্বাক্ষৰিত অংকটো ঋণাত্মক হ'ব://সংখ্যাসূচক সংখ্যা যাৰ অংকবোৰৰ যোগফল হ'ল > ০।//এটা count_nums ফাংশন লিখা যি এটা অখণ্ড সংখ্যাৰ অ্যারে লয় আৰু ৰিটাৰ্ণ কৰে ।// >>> count_nums([])
// 0
// >>> count_nums([-1, 11, -11])
// 1
// >>> count_nums([1, 1, 2])
// 3
function count_nums(arr: number[]): number {
","function count_nums(arr: number[]): number {
    function sumOfDigits(num: number): number {
        let sum = 0;
        let str = num.toString();
        for (let i = 0; i < str.length; i++) {
            let digit = parseInt(str[i]);
            if (i === 0 && str[i] === '-') {
                digit = -parseInt(str[i+1]);
                i++;
            }
            sum += digit;
        }
        return sum;
    }

    let count = 0;
    for (const num of arr) {
        if (sumOfDigits(num) > 0) {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_nums;
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([-1, -2, 0]),0);
  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);
  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);
  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);
  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);
  assert.deepEqual(candidate([0, 1]),1);
  assert.deepEqual(candidate([1]),1);
}

test();"
HumanEval_109,asm_Beng,ts,"//উদাহৰণ স্বৰূপেঃ//টোকাঃ প্ৰদান কৰা এৰেৰ অনন্য উপাদান থকাটো নিশ্চিত।//যদি দিয়া এৰে খালী হয় তেন্তে true ঘূৰাই দিব.//তাৰপিছত true ঘূৰাই দিয়ক অথবা false ঘূৰাই দিয়ক।//যদি ওপৰৰ কাৰ্য্য সম্পাদন কৰি ছৰ্ট কৰা এৰেজটো প্ৰাপ্ত কৰা সম্ভৱ হয় //অংকন সূচকৰ আৰম্ভণিৰ স্থান//সঠিক দিশত অৱস্থান কৰক। এৰেৰ শেষ উপাদানটো  লৈ স্থানান্তৰ কৰা হ'ব//এটা সোঁফালে স্থানান্তৰ কৰা কাৰ্য্যই অৰিজিনৰ সকলোবোৰ উপাদান একোটাকৈ স্থানান্তৰ কৰা বুজায় ।//আপুনি যিকোনো সংখ্যক বাৰ ডান স্থানান্তৰ কাৰ্য সম্পাদন কৰিবলৈ অনুমতি দিয়া হৈছে।//এই অৰিজিনৰ ওপৰত নিম্নলিখিত ক্ৰিয়াঃ//এটা অক্ষৰ বিন্যাসক নিম্নগামী নোহোৱা ক্ৰমত ছৰ্ট কৰা সম্ভৱ //অংকবোৰ এৰাব নোৱাৰাকৈ ক্ৰমবিন্যাস কৰা হ'ব। আপোনাৰ কাম হ'ল নিৰ্ণয় কৰা যে //আমাৰ এটা এৰে 'arr' আছে N সংখ্যক পূৰ্ণসংখ্যাৰ arr[1], arr[2], ..., arr[N]।// >>> move_one_ball([3, 4, 5, 1, 2])
// true
// Explanation: By performin 2 right shift operations, non-decreasing order can
// be achieved for the given array.
// >>> move_one_ball([3, 5, 4, 1, 2])
// false
// Explanation:It is not possible to get non-decreasing order for the given
// array by performing any number of right shift operations.
function move_one_ball(arr: number[]): boolean {
","function move_one_ball(arr: number[]): boolean {
    if (arr.length === 0) return true;

    let countDecreases = 0;
    const n = arr.length;

    for (let i = 0; i < n; i++) {
        if (arr[i] > arr[(i + 1) % n]) {
            countDecreases++;
        }
        if (countDecreases > 1) {
            return false;
        }
    }

    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = move_one_ball;
  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);
  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);
  assert.deepEqual(candidate([4, 3, 1, 2]),false);
  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);
  assert.deepEqual(candidate([]),true);
}

test();"
HumanEval_110,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//অন্যথা, ""NO"" ঘূৰাই দিয়ক।//সকলো উপাদান সম হ'বলৈ, ""YES"" ঘূৰাই দিয়ক।//যদি ই সম্ভৱ হয় lst1 আৰু lst2 ৰ মাজত উপাদান বিনিময় কৰিবলৈ //lst1 আৰু lst2 ৰ মাজত বিনিময় হোৱা উপাদানৰ সংখ্যাৰ ওপৰত কোনো সীমা নাই।//ইয়াৰ মাজত এটা এৰেজ তৈয়াৰ কৰা যাক কেৱল জোৰা সংখ্যাৰে গঠিত।//আৰু নিৰ্ণয় কৰে যে এটা উপাদানৰ বিনিময় কৰা সম্ভৱ নে নহয় ।//এই সমস্যাত, আপুনি এটা ফাংচন প্ৰয়োগ কৰিব যি দুটা সংখ্যাৰ অ্যারে লয়,// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])
// ""YES""
// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])
// ""NO""
// It is assumed that the input arrays will be non-empty.
function exchange(lst1: number[], lst2: number[]): string {
","function exchange(lst1: number[], lst2: number[]): string {
    const isEven = (num: number) => num % 2 === 0;
    
    // Count the odd numbers in lst1
    const oddCountInLst1 = lst1.reduce((count, num) => count + (isEven(num) ? 0 : 1), 0);

    // Count the even numbers in lst2
    const evenCountInLst2 = lst2.reduce((count, num) => count + (isEven(num) ? 1 : 0), 0);

    // Check if number of odd numbers in lst1 can be matched by even numbers in lst2
    return oddCountInLst1 <= evenCountInLst2 ? ""YES"" : ""NO"";
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = exchange;
  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),""YES"");
  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),""NO"");
  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),""YES"");
  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),""YES"");
  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),""NO"");
  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),""NO"");
  assert.deepEqual(candidate([100, 200], [200, 200]),""YES"");
}

test();"
HumanEval_111,asm_Beng,ts,"//উদাহৰণঃ//যদি কেইবাটাও আখৰ একেধৰণৰ হয়, তেন্তে আটাইবোৰ ঘূৰাই দিব লাগে।//আটাইতকৈ বেছি সংখ্যক বাৰ পুনৰাবৃত্তি হোৱা আৰু সেই সংখ্যাটো অন্তৰ্ভুক্ত কৰা আখৰটোৰ নাম লিখা।//এটা শাৰী দিয়া হৈছে যি এটা স্পেচ পৃথক কৰা সৰু আখৰক প্ৰতিনিধিত্ব কৰে, এটা অবজেক্ট ঘূৰাই আনে // >>> histogram(""a b c"")
// {""a"": 1, ""b"": 1, ""c"": 1}
// >>> histogram(""a b b a"")
// {""a"": 2, ""b"": 2}
// >>> histogram(""a b c a b"")
// {""a"": 2, ""b"": 2}
// >>> histogram(""b b b b a"")
// {""b"": 4}
// >>> histogram("""")
// {}
function histogram(test: string): {[key: string]: number} {
","function histogram(test: string): { [key: string]: number } {
    if (test.trim() === """") {
        return {};
    }

    const letters = test.split("" "");
    const counts: { [key: string]: number } = {};

    for (const letter of letters) {
        if (letter in counts) {
            counts[letter]++;
        } else {
            counts[letter] = 1;
        }
    }

    let maxCount = 0;
    for (const count of Object.values(counts)) {
        if (count > maxCount) {
            maxCount = count;
        }
    }

    const result: { [key: string]: number } = {};
    for (const [letter, count] of Object.entries(counts)) {
        if (count === maxCount) {
            result[letter] = count;
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = histogram;
  assert.deepEqual(candidate(""a b b a""),{""a"": 2, ""b"": 2});
  assert.deepEqual(candidate(""a b c a b""),{""a"": 2, ""b"": 2});
  assert.deepEqual(candidate(""a b c d g""),{""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1});
  assert.deepEqual(candidate(""r t g""),{""r"": 1, ""t"": 1, ""g"": 1});
  assert.deepEqual(candidate(""b b b b a""),{""b"": 4});
  assert.deepEqual(candidate(""r t g""),{""r"": 1, ""t"": 1, ""g"": 1});
  assert.deepEqual(candidate(""""),{});
  assert.deepEqual(candidate(""a""),{""a"": 1});
}

test();"
HumanEval_112,asm_Beng,ts,"//উদাহৰণ //আপুনি এটা এৰে ৰিটাৰ্ণ কৰিব লাগিব য'ত ফলাফলৰ ষ্ট্ৰিং আৰু true/false আছে।//এটা ষ্ট্ৰিংক পলিণ্ড্ৰ'ম বোলা হয় যদি ই আগলৈ আৰু পিছলৈ একেদৰে পঢ়া হয়।//তাৰপিছত পৰীক্ষা কৰক যে ফলাফলৰ শাৰীটো পলিণ্ড্ৰম হয় নে নহয়।//আমাক দুটা ষ্ট্ৰিং দিয়া হৈছে s আৰু c, আপুনি s ৰ সকলো বৰ্ণ বিলোপ কৰিব লাগিব যি c ৰ যিকোনো বৰ্ণৰ সমান //কাম // >>> reverse_delete(""abcde"", ""ae"")
// [""bcd"", false]
// >>> reverse_delete(""abcdef"", ""b"")
// [""acdef"", false]
// >>> reverse_delete(""abcdedcba"", ""ab"")
// [""cdedc"", true]
function reverse_delete(s: string, c: string): [string, boolean] {
","function reverse_delete(s: string, c: string): [string, boolean] {
    // Create a Set of characters to delete for faster lookup
    const charsToDelete = new Set(c);

    // Filter out characters in 's' that are in 'c'
    const filteredString = s.split('').filter(char => !charsToDelete.has(char)).join('');

    // Check if the filtered string is a palindrome
    const isPalindrome = filteredString === filteredString.split('').reverse().join('');

    return [filteredString, isPalindrome];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = reverse_delete;
  assert.deepEqual(candidate(""abcde"", ""ae""),[""bcd"", false]);
  assert.deepEqual(candidate(""abcdef"", ""b""),[""acdef"", false]);
  assert.deepEqual(candidate(""abcdedcba"", ""ab""),[""cdedc"", true]);
  assert.deepEqual(candidate(""dwik"", ""w""),[""dik"", false]);
  assert.deepEqual(candidate(""a"", ""a""),["""", true]);
  assert.deepEqual(candidate(""abcdedcba"", """"),[""abcdedcba"", true]);
  assert.deepEqual(candidate(""abcdedcba"", ""v""),[""abcdedcba"", true]);
  assert.deepEqual(candidate(""vabba"", ""v""),[""abba"", true]);
  assert.deepEqual(candidate(""mamma"", ""mia""),["""", true]);
}

test();"
HumanEval_113,asm_Beng,ts,"//ইনপুটৰ i'th শাৰীটোত অস্বাভাৱিক অংকবোৰ আছে.//ইনপুটৰ ষ্ট্ৰিং i. "" য'ত সকলো i'ক সংখ্যাৰে সলনি কৰা উচিত //আউটপুটৰ প্ৰতিটো উপাদান i হ'ব লাগিব //এটা অক্ষৰ ক্ৰম দিয়া হৈছে, য'ত প্ৰতিটো অক্ষৰ ক্ৰম কেৱল অংকৰে গঠিত, এটা অক্ষৰ ক্ৰম ঘূৰাই দিব.// >>> odd_count([""1234567""])
// [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
// >>> odd_count([""3"", ""11111111""])
// [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
function odd_count(lst: string[]): string[] {
","function odd_count(lst: string[]): string[] {
    return lst.map(str => {
        // Count the number of odd digits in the string
        let oddCount = Array.from(str).reduce((count, char) => {
            let digit = parseInt(char, 10);
            return digit % 2 !== 0 ? count + 1 : count;
        }, 0);

        // Construct the result string
        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = odd_count;
  assert.deepEqual(candidate([""1234567""]),[""the number of odd elements 4n the str4ng 4 of the 4nput.""]);
  assert.deepEqual(candidate([""3"", ""11111111""]),[""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]);
  assert.deepEqual(candidate([""271"", ""137"", ""314""]),[""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""]);
}

test();"
HumanEval_114,asm_Beng,ts,"//উদাহৰণ //সংখ্যাটোৰে।//এটা অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, কোনো অ-খালি উপ-অৰেৰ ন্যূনতম যোগফলটো বিচাৰি উলিওৱা ।// >>> minSubArraySum([2, 3, 4, 1, 2, 4])
// 1
// >>> minSubArraySum([-1, -2, -3])
// -6
function minSubArraySum(nums: number[]): number {
","function minSubArraySum(nums: number[]): number {
    let minSum = nums[0];
    let currentSum = nums[0];
    
    for (let i = 1; i < nums.length; i++) {
        currentSum = Math.min(nums[i], currentSum + nums[i]);
        minSum = Math.min(minSum, currentSum);
    }
    
    return minSum;
}

// Example usage:
// console.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output: 1
// console.log(minSubArraySum([-1, -2, -3])); // Output: -6","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = minSubArraySum;
  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);
  assert.deepEqual(candidate([-1, -2, -3]),-6);
  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);
  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);
  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);
  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);
  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);
  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);
  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);
  assert.deepEqual(candidate([-10]),-10);
  assert.deepEqual(candidate([7]),7);
  assert.deepEqual(candidate([1, -1]),-1);
}

test();"
HumanEval_115,asm_Beng,ts,"//উদাহৰণ ১ঃ//আপুনি কিমানবাৰ বাল্টিবোৰ নামাব লাগে তাৰ সংখ্যা আউটপুট কৰক।//তোমাৰ কাম হ'ল কুঁৱাৰ খালী কৰিবলৈ বালতি ব্যৱহাৰ কৰা।//আৰু সকলো বালিত সমান ক্ষমতা আছে।//প্ৰতিটো পুখুৰীত এটা সমতুল্য বালতি থাকে যাৰ পৰা পানী আহৰণ কৰিব পাৰি,//আৰু এটা শাৰীত থকা প্ৰতিটো ১য়ে এটা পানীৰ একক প্ৰতিনিধিত্ব কৰে।//আপুনি এটা আৰ্হিৰ গ্ৰীড লাভ কৰে য'ত প্ৰতিটো শাৰীত এটা কুঁৱাৰ থাকে।// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
// 6
// Example 2:
// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
// 5
// Example 3:
// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)
// 0
// Constraints:
// * all wells have the same length
// * 1 <= grid.length <= 10^2
// * 1 <= grid[:,1].length <= 10^2
// * grid[i][j] -> 0 | 1
// * 1 <= capacity <= 10
function max_fill(grid: number[][], capacity: number): number {
","function max_fill(grid: number[][], capacity: number): number {
    let totalBuckets = 0;

    for (let row of grid) {
        let waterUnits = row.reduce((sum, cell) => sum + cell, 0);
        totalBuckets += Math.ceil(waterUnits / capacity);
    }

    return totalBuckets;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = max_fill;
  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);
  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);
  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);
  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);
  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);
}

test();"
HumanEval_116,asm_Beng,ts,"//ইয়াক এনেদৰে ৰূপায়ণ কৰিব লাগিবঃ//একে সংখ্যক এককৰ বাবে, দশমিক মানৰ ভিত্তিত ছাৰ্ট কৰক।//একৰ সংখ্যা তেওঁলোকৰ বাইনেৰী প্ৰতিনিধিত্বৰ ক্ৰমান্বয়ে।//এই কটাত, আপুনি  অনুসৰি ঋণাত্মক নথকা পূৰ্ণসংখ্যাৰ এটা শৃংখলা বাছনি কৰিব লাগিব।// >>> sort_array([1, 5, 2, 3, 4])
// [1, 2, 3, 4, 5]
// >>> sort_array([-2, -3, -4, -5, -6])
// [-6, -5, -4, -3, -2]
// >>> sort_array([1, 0, 2, 3, 4])
// [0, 1, 2, 3, 4]
function sort_array(arr: number[]): number[] {
","function sort_array(arr: number[]): number[] {
    return arr.sort((a, b) => {
        const countOnes = (n: number) => n.toString(2).replace(/0/g, """").length;
        const numOnesA = countOnes(a);
        const numOnesB = countOnes(b);

        if (numOnesA !== numOnesB) {
            return numOnesA - numOnesB;
        } else {
            return a - b;
        }
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_array;
  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);
  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);
  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);
  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);
  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);
  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);
}

test();"
HumanEval_117,asm_Beng,ts,"//উদাহৰণঃ//টোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুট ষ্ট্ৰিংত কেৱল আখৰ আৰু স্পেচ থাকে।//যদি string s খালী হয় তেন্তে function এ এটা খালী এৰে ৰিটাৰ্ণ কৰিব লাগে.//n বৰ্ণমালাৰ ভিতৰত এই শব্দবোৰ যাতে s শৃংখলাত দেখা যায়।//এটা ফাংচন যি  ঠিক পোৱা সকলো শব্দৰ এটা এৰেজ ঘূৰাই আনে//এটা ষ্ট্ৰিং s আৰু এটা স্বাভাৱিক সংখ্যা n দিয়া হ'লে, আপোনাক এটা কাৰ্যকৰীকৰণ কৰিবলৈ কোৱা হৈছে // >>> select_words(""Mary had a little lamb"", 4)
// [""little""]
// >>> select_words(""Mary had a little lamb"", 3)
// [""Mary"", ""lamb""]
// >>> select_words(""simple white space"", 2)
// []
// >>> select_words(""Hello world"", 4)
// [""world""]
// >>> select_words(""Uncle sam"", 3)
// [""Uncle""]
function select_words(s: string, n: number): string[] {
","function select_words(s: string, n: number): string[] {
    const isConsonant = (char: string): boolean => {
        const vowels = 'aeiouAEIOU';
        return !vowels.includes(char) && /[a-zA-Z]/.test(char);
    };

    const words = s.split(' ');
    const result: string[] = [];

    for (const word of words) {
        const consonantCount = [...word].filter(isConsonant).length;
        if (consonantCount === n) {
            result.push(word);
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = select_words;
  assert.deepEqual(candidate(""Mary had a little lamb"", 4),[""little""]);
  assert.deepEqual(candidate(""Mary had a little lamb"", 3),[""Mary"", ""lamb""]);
  assert.deepEqual(candidate(""simple white space"", 2),[]);
  assert.deepEqual(candidate(""Hello world"", 4),[""world""]);
  assert.deepEqual(candidate(""Uncle sam"", 3),[""Uncle""]);
  assert.deepEqual(candidate("""", 4),[]);
  assert.deepEqual(candidate(""a b c d e f"", 1),[""b"", ""c"", ""d"", ""f""]);
}

test();"
HumanEval_118,asm_Beng,ts,"//উদাহৰণঃ//আপুনি ধাৰণা কৰিব পাৰে যে দিয়া শাৰীটোত কেৱল ইংৰাজী আখৰহে আছে।//উপৰোক্ত চৰ্ত পূৰণ কৰা কোনো স্বৰবৰ্ণ বিচাৰি উলিয়াওক।//আৰম্ভণি আৰু শেষৰ স্বৰসমূহ গণনা কৰা নহয়। যদি আপুনি কৰা নাই তেন্তে খালী শাৰী ঘূৰাই দিয়ক।//শব্দটোৰ সোঁফালৰ পৰা দুটা স্ব-সংকেত (কেছ সেনসিটিভ) ।//আপোনাক এটা শব্দ দিয়া হৈছে। আপোনাৰ কাম হ'ল আটাইতকৈ ওচৰৰ স্বৰবৰ্ণটো বিচাৰি উলিওৱা যিটো ৰ মাজত ৰৈছে।// >>> get_closest_vowel(""yogurt"")
// ""u""
// >>> get_closest_vowel(""FULL"")
// ""U""
// >>> get_closest_vowel(""quick"")
// """"
// >>> get_closest_vowel(""ab"")
// """"
function get_closest_vowel(word: string): string {
","function get_closest_vowel(word: string): string {
    const vowels = new Set<string>(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);
    for (let i = word.length - 2; i > 0; i--) {
        if (vowels.has(word[i]) && !vowels.has(word[i - 1]) && !vowels.has(word[i + 1])) {
            return word[i];
        }
    }
    return '';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_closest_vowel;
  assert.deepEqual(candidate(""yogurt""),""u"");
  assert.deepEqual(candidate(""full""),""u"");
  assert.deepEqual(candidate(""easy""),"""");
  assert.deepEqual(candidate(""eAsy""),"""");
  assert.deepEqual(candidate(""ali""),"""");
  assert.deepEqual(candidate(""bad""),""a"");
  assert.deepEqual(candidate(""most""),""o"");
  assert.deepEqual(candidate(""ab""),"""");
  assert.deepEqual(candidate(""ba""),"""");
  assert.deepEqual(candidate(""quick""),"""");
  assert.deepEqual(candidate(""anime""),""i"");
  assert.deepEqual(candidate(""Asia""),"""");
  assert.deepEqual(candidate(""Above""),""o"");
}

test();"
HumanEval_119,asm_Beng,ts,"//উদাহৰণঃ//যদি এটা ভাল শাৰী তৈয়াৰ কৰাৰ উপায় আছে তেন্তে 'হয়' ঘূৰাই দিব, আৰু অন্যথা 'নহয়' ঘূৰাই দিব।//"" (()) "" নহয় ।//উদাহৰণস্বৰূপে, '(((() ' শাৰীটো ভাল, আনহাতে  শাৰীটো ভাল।//এটা ষ্ট্ৰিং S ভাল বুলি গণ্য কৰা হয় যদি আৰু কেৱল যদি S ৰ সকলো বন্ধনীৰ //কোনো এটা আদেশ, যে ফলাফলৰ শাৰী ভাল হ'ব।//আপোনাৰ কাম হ'ল দুটা শাৰী সংযোগ কৰা সম্ভৱ নে নহয় পৰীক্ষা কৰা।//কেৱল বন্ধনী "" (() "" বা বন্ধনী "") ""ত//আপোনাক দুটা ষ্ট্ৰিং দিয়া হৈছে, দুয়োটা ষ্ট্ৰিং খোলা // >>> match_parens([""()("", "")""])
// ""Yes""
// >>> match_parens(["")"", "")""])
// ""No""
function match_parens(lst: string[]): string {
","function match_parens(lst: string[]): string {
    const canFormGoodString = (s1: string, s2: string): boolean => {
        let balance = 0;

        // Check s1 followed by s2
        for (const char of s1 + s2) {
            if (char === '(') balance++;
            else if (char === ')') balance--;

            if (balance < 0) return false; // More closing than opening
        }
        if (balance === 0) return true; // Balanced

        balance = 0;
        // Check s2 followed by s1
        for (const char of s2 + s1) {
            if (char === '(') balance++;
            else if (char === ')') balance--;

            if (balance < 0) return false; // More closing than opening
        }

        return balance === 0; // Balanced
    };

    return canFormGoodString(lst[0], lst[1]) ? 'Yes' : 'No';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = match_parens;
  assert.deepEqual(candidate([""()("", "")""]),""Yes"");
  assert.deepEqual(candidate(["")"", "")""]),""No"");
  assert.deepEqual(candidate([""(()(())"", ""())())""]),""No"");
  assert.deepEqual(candidate(["")())"", ""(()()(""]),""Yes"");
  assert.deepEqual(candidate([""(())))"", ""(()())((""]),""Yes"");
  assert.deepEqual(candidate([""()"", ""())""]),""No"");
  assert.deepEqual(candidate([""(()("", ""()))()""]),""Yes"");
  assert.deepEqual(candidate([""(((("", ""((())""]),""No"");
  assert.deepEqual(candidate(["")(()"", ""(()(""]),""No"");
  assert.deepEqual(candidate(["")("", "")(""]),""No"");
  assert.deepEqual(candidate([""("", "")""]),""Yes"");
  assert.deepEqual(candidate(["")"", ""(""]),""Yes"");
}

test();"
HumanEval_120,asm_Beng,ts,"//উদাহৰণ ১ঃ//দীঘ k আৰু সৰ্বাধিক k সংখ্যক arr ৰ সৈতে।//এটা সমষ্টি arr আৰু এটা ধনাত্মক k সংখ্যা দিয়া হৈছে, এটা ছৰ্টড এৰেজ ঘূৰাই দিয়ক // >>> maximum([-3, -4, 5], 3)
// [-4, -3, 5]
// Example 2:
// >>> maximum([4, -4, 4], 2)
// [4, 4]
// Example 3:
// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)
// [2]
// Note:
// 1. The length of the array will be in the range of [1, 1000].
// 2. The elements in the array will be in the range of [-1000, 1000].
// 3. 0 <= k <= len(arr)
function maximum(arr: number[], k: number): number[] {
","function maximum(arr: number[], k: number): number[] {
    // Sort the array in descending order and then take the first k elements
    const sortedArr = arr.sort((a, b) => b - a);
    return sortedArr.slice(0, k).sort((a, b) => a - b);
}

// Example usage:
// console.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]
// console.log(maximum([4, -4, 4], 2)); // Output: [4, 4]
// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = maximum;
  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);
  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);
  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);
  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);
  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);
  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);
  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);
  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);
  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);
  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);
  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);
}

test();"
HumanEval_121,asm_Beng,ts,"//উদাহৰণসমূহ//এটা অ-খালি অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, সম-অৱস্থানত থকা সকলো অস্বাভাৱিক উপাদানৰ যোগফল ঘূৰাই দিব.// >>> solution([5, 8, 7, 1])
// 12
// >>> solution([3, 3, 3, 3, 3])
// 9
// >>> solution([30, 13, 24, 321])
// 0
function solution(lst: number[]): number {
","function solution(lst: number[]): number {
    let sum: number = 0;
    for (let i = 0; i < lst.length; i += 2) {  // Traverse even indices
        if (lst[i] % 2 !== 0) {  // Check if the element is odd
            sum += lst[i];
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solution;
  assert.deepEqual(candidate([5, 8, 7, 1]),12);
  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);
  assert.deepEqual(candidate([30, 13, 24, 321]),0);
  assert.deepEqual(candidate([5, 9]),5);
  assert.deepEqual(candidate([2, 4, 8]),0);
  assert.deepEqual(candidate([30, 13, 23, 32]),23);
  assert.deepEqual(candidate([3, 13, 2, 9]),3);
}

test();"
HumanEval_122,asm_Beng,ts,"//উদাহৰণঃ//arr ৰ প্ৰথম k টা উপাদানৰ পৰা সৰ্বাধিক দুটা অংক থকা উপাদানৰ যোগফল।//এটা অ-খালি সমষ্টিৰ অন্তৰ্গত arr আৰু k এটা সমষ্টিৰ অন্তৰ্গত, return // >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
// 24
// Constraints:
// 1. 1 <= len(arr) <= 100
// 2. 1 <= k <= len(arr)
function add_elements(arr: number[], k: number): number {
","function add_elements(arr: number[], k: number): number {
    let sum = 0;
    for (let i = 0; i < k; i++) {
        if (arr[i] >= -99 && arr[i] <= 99) {
            sum += arr[i];
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add_elements;
  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);
  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);
  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);
  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);
  assert.deepEqual(candidate([1], 1),1);
}

test();"
HumanEval_123,asm_Beng,ts,"//get_odd_collatz(5) ৰিটাৰ্ণ কৰে [1, 5] # 5 ৰ বাবে ক'লাটজ ক্ৰম হৈছে [5, 16, 8, 4, 2, 1], সেয়েহে অদ্ভুত সংখ্যাবোৰ কেৱল 1, আৰু 5 ।//উদাহৰণস্বৰূপেঃ//2. ঘূৰাই দিয়া এৰেজ ক্ৰমান্বয়ে বাঢ়ি অহা ক্ৰমত ছৰ্ট কৰা।//1. Collatz(1) হৈছে [1]।//টোকাঃ//ধাৰণাটো হ'ল n ৰ মান যিমানেই নহওক কিয়, ক্ৰমটো সদায় 1 লৈ যাব।//যদি আগৰ পদটো অগণন হয়, তেন্তে পৰৱৰ্তী পদটো আগৰ পদটোৰ ৩ গুণ হ'ব।//পূৰ্বৰ পদটো এনেদৰে: যদি পূৰ্বৰ পদটো জোৰা হয়, পৰৱৰ্তী পদটো হ'ব  ৰ আধা।//নিম্নলিখিত ধৰণেঃ যিকোনো ধনাত্মক পূৰ্ণসংখ্যাৰ n ৰ পৰা আৰম্ভ কৰক। তাৰ পিছত প্ৰতিটো পদ  ৰ পৰা পোৱা যায়।//কল্যাট্জ অনুমান হৈছে গণিতৰ এটা অনুমান যি এটা নিৰ্দিষ্ট ক্ৰমৰ বিষয়ে ।//এটা ধনাত্মক n সংখ্যা দিয়া হৈছে, এটা ছৰ্টড এৰে ঘূৰাই দিয়া হ'ব য'ত ক'লাটজ ক্ৰমত অস্বাভাৱিক সংখ্যা আছে।// >>> get_odd_collatz(5)
// [1, 5]
function get_odd_collatz(n: number): number[] {
","function get_odd_collatz(n: number): number[] {
    const collatzSequence: number[] = [];
    while (n !== 1) {
        if (n % 2 !== 0) {
            collatzSequence.push(n);
        }
        if (n % 2 === 0) {
            n = n / 2;
        } else {
            n = 3 * n + 1;
        }
    }
    // Include 1 in the sequence if it's odd, as per standard collatz sequence
    collatzSequence.push(1);
    return collatzSequence.sort((a, b) => a - b);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_odd_collatz;
  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);
  assert.deepEqual(candidate(5),[1, 5]);
  assert.deepEqual(candidate(12),[1, 3, 5]);
  assert.deepEqual(candidate(1),[1]);
}

test();"
HumanEval_124,asm_Beng,ts,"//৪) তাৰিখটো এই বিন্যাসত থাকিব লাগিবঃ এমএম-ডিডি-ইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইইই//৩. মাহ ১ ৰ কম বা ১২ ৰ অধিক হ'ব নালাগিব।//২. মাহ ১,৩,৫,৭,৮,১০,১২ৰ বাবে দিনৰ সংখ্যা ১ৰ কম বা ৩১ৰ অধিক নহয় আৰু মাহ ৪,৬,৯,১১ৰ বাবে দিনৰ সংখ্যা ১ৰ কম বা ৩০ৰ অধিক নহয় আৰু মাহ ২ৰ বাবে দিনৰ সংখ্যা ১ৰ কম বা ২৯ৰ অধিক নহয়।//1. তাৰিখৰ শাৰীটো খালী নহয়।//নিম্নলিখিত নিয়মসমূহ পূৰণ কৰিলে তাৰিখটো বৈধঃ//যদি তাৰিখটো বৈধ হয় তেন্তে true ৰিটাৰ্ণ কৰে অন্যথা false ৰিটাৰ্ণ কৰে।//আপুনি এটা ফাংচন লিখিব লাগিব যিয়ে এটা নিৰ্দিষ্ট তাৰিখৰ ষ্ট্ৰিংক বৈধতা প্ৰদান কৰিব আৰু// >>> valid_date(""03-11-2000"")
// true
// >>> valid_date(""15-01-2012"")
// false
// >>> valid_date(""04-0-2040"")
// false
// >>> valid_date(""06-04-2020"")
// true
// >>> valid_date(""06/04/2020"")
// false
function valid_date(date: string): boolean {
","function valid_date(date: string): boolean {
    // Check if the date is empty
    if (date.trim() === """") return false;

    // Split the date string into components
    const dateParts = date.split(""-"");
    if (dateParts.length !== 3) return false;

    const [monthStr, dayStr, yearStr] = dateParts;

    // Validate each part of the date
    const month = parseInt(monthStr, 10);
    const day = parseInt(dayStr, 10);
    const year = parseInt(yearStr, 10);

    // Check if all parts are valid numbers
    if (isNaN(month) || isNaN(day) || isNaN(year)) return false;

    // Check the month range
    if (month < 1 || month > 12) return false;

    // Check the day range based on the month
    if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {
        if (day < 1 || day > 31) return false;
    } else if ([4, 6, 9, 11].includes(month)) {
        if (day < 1 || day > 30) return false;
    } else if (month === 2) {
        if (day < 1 || day > 29) return false;
    }

    // All checks passed
    return true;
}

// Example usage
console.log(valid_date(""03-11-2000"")); // true
console.log(valid_date(""15-01-2012"")); // false
console.log(valid_date(""04-0-2040""));  // false
console.log(valid_date(""06-04-2020"")); // true
console.log(valid_date(""06/04/2020"")); // false","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = valid_date;
  assert.deepEqual(candidate(""03-11-2000""),true);
  assert.deepEqual(candidate(""15-01-2012""),false);
  assert.deepEqual(candidate(""04-0-2040""),false);
  assert.deepEqual(candidate(""06-04-2020""),true);
  assert.deepEqual(candidate(""01-01-2007""),true);
  assert.deepEqual(candidate(""03-32-2011""),false);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""04-31-3000""),false);
  assert.deepEqual(candidate(""06-06-2005""),true);
  assert.deepEqual(candidate(""21-31-2000""),false);
  assert.deepEqual(candidate(""04-12-2003""),true);
  assert.deepEqual(candidate(""04122003""),false);
  assert.deepEqual(candidate(""20030412""),false);
  assert.deepEqual(candidate(""2003-04""),false);
  assert.deepEqual(candidate(""2003-04-12""),false);
  assert.deepEqual(candidate(""04-2003""),false);
}

test();"
HumanEval_125,asm_Beng,ts,"//উদাহৰণসমূহ//আখৰ, আখৰ (a) = 0, আখৰ (b) = 1, ... আখৰ (z) = 25//যদি কোনো কমা নাই, আপুনি অদ্ভুত ক্ৰমত থকা সৰু আখৰবোৰৰ সংখ্যা ঘূৰাই দিব লাগিব।//এটা শব্দৰ শাৰী দিয়া হৈছে, শূন্যস্থানত বিভক্ত শব্দৰ এটা এৰেজ ঘূৰাই দিব, যদি কোনো শূন্যস্থান আপোনাৰ পাঠত নাই // >>> split_words(""Hello world!"")
// [""Hello"", ""world!""]
// >>> split_words(""Hello,world!"")
// [""Hello"", ""world!""]
// >>> split_words(""abcdef"")
// 3
function split_words(txt: string): string[] | number {
","function split_words(txt: string): string[] | number {
    if (txt.includes("" "")) {
        return txt.split("" "");
    }
    if (txt.includes("","")) {
        return txt.split("","");
    }
    const oddOrderCount = [...txt].reduce((count, char) => {
        const charCode = char.charCodeAt(0) - 'a'.charCodeAt(0);
        if (char === char.toLowerCase() && charCode % 2 === 1) {
            return count + 1;
        }
        return count;
    }, 0);

    return oddOrderCount;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = split_words;
  assert.deepEqual(candidate(""Hello world!""),[""Hello"", ""world!""]);
  assert.deepEqual(candidate(""Hello,world!""),[""Hello"", ""world!""]);
  assert.deepEqual(candidate(""Hello world,!""),[""Hello"", ""world,!""]);
  assert.deepEqual(candidate(""Hello,Hello,world !""),[""Hello,Hello,world"", ""!""]);
  assert.deepEqual(candidate(""abcdef""),3);
  assert.deepEqual(candidate(""aaabb""),2);
  assert.deepEqual(candidate(""aaaBb""),1);
  assert.deepEqual(candidate(""""),0);
}

test();"
HumanEval_126,asm_Beng,ts,"//উদাহৰণসমূহ//সংখ্যা, false ঘূৰাই দিব. কোনো ঋণাত্মক সংখ্যা আৰু কেৱল পূৰ্ণ সংখ্যা ধৰা নলওক।//যদি এটা এৰেজত একেটা এৰেজৰ ১তকৈ অধিক ডুপ্লিকেট থাকে, তেন্তে ইয়াক //এটা সংখ্যাৰ অ্যারে দিয়া হ'লে, সিহঁতে ছৰ্ট কৰা হওক বা নহওক উভতাই দিব // >>> is_sorted([5])
// true
// >>> is_sorted([1, 2, 3, 4, 5])
// true
// >>> is_sorted([1, 3, 2, 4, 5])
// false
// >>> is_sorted([1, 2, 3, 4, 5, 6])
// true
// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])
// true
// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])
// false
// >>> is_sorted([1, 2, 2, 3, 3, 4])
// true
// >>> is_sorted([1, 2, 2, 2, 3, 4])
// false
function is_sorted(lst: number[]): boolean {
","function is_sorted(lst: number[]): boolean {
    for (let i = 0; i < lst.length - 1; i++) {
        if (lst[i] > lst[i + 1]) {
            return false;
        }
        if (lst[i] === lst[i + 1]) {
            let count = 1;
            while (lst[i + count] === lst[i]) {
                count++;
                if (count > 2) return false;
            }
        }
    }
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_sorted;
  assert.deepEqual(candidate([5]),true);
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);
  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);
  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);
  assert.deepEqual(candidate([]),true);
  assert.deepEqual(candidate([1]),true);
  assert.deepEqual(candidate([3, 2, 1]),false);
  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);
  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);
  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);
  assert.deepEqual(candidate([1, 2, 3, 4]),true);
}

test();"
HumanEval_127,asm_Beng,ts,"//[ইনপুট/আউটপুট] নমুনাঃ//যদি দুটাকৈ অন্তৰাল পাৰ হৈ নাযায়, ""NO"" ঘূৰাই দিয়ক।//অন্যথা, ""NO"" ঘূৰাই দিয়ক।//যদি ছেদটোৰ দৈৰ্ঘ্য এটা মৌলিক সংখ্যা হয়, ""YES"" ঘূৰাই দিয়ক, //যাৰ দৈৰ্ঘ্য ১, যিটো এটা অগণন সংখ্যা নহয়।//উদাহৰণ স্বৰূপে, অন্তৰাল (1, 3), (2, 4) ৰ ছেদ (2, 3) ।//অন্তৰাল এটা মৌলিক সংখ্যা।//আপোনাৰ কাম হ'ল এই দুটাৰ ছেদক দৈৰ্ঘ্য নিৰ্ণয় কৰা//প্ৰতিটো নিৰ্দিষ্ট অন্তৰালৰ বাবে, এইটো ধাৰণা কৰা হয় যে ইয়াৰ আৰম্ভণি ইয়াৰ শেষৰ সমান বা কম।//আৰম্ভণি আৰু শেষ দুয়োটাই অন্তৰ্ভুক্ত কৰে।//এই অন্তৰালসমূহ বন্ধ, যাৰ অৰ্থ হৈছে অন্তৰাল (আৰম্ভ, অন্ত) //য'ত প্ৰতিটো অন্তৰাল এটা পূৰ্ণসংখ্যাৰ জোৰা। উদাহৰণ স্বৰূপে, অন্তৰাল = (আৰম্ভ, শেষ) = (1, 2) ।//আপোনাক দুটা অন্তৰাল দিয়া হৈছে,// >>> intersection([1, 2], [2, 3])
// ""NO""
// >>> intersection([-1, 1], [0, 4])
// ""NO""
// >>> intersection([-3, -1], [-5, 5])
// ""YES""
function intersection(interval1: [number, number], interval2: [number, number]): string {
","function isPrime(num: number): boolean {
    if (num <= 1) return false;
    if (num <= 3) return true; // 2 and 3 are prime numbers
    if (num % 2 === 0 || num % 3 === 0) return false;
    for (let i = 5; i * i <= num; i += 6) {
        if (num % i === 0 || num % (i + 2) === 0) return false;
    }
    return true;
}

function intersection(interval1: [number, number], interval2: [number, number]): string {
    const start = Math.max(interval1[0], interval2[0]);
    const end = Math.min(interval1[1], interval2[1]);

    if (start > end) {
        return ""NO"";
    }

    const length = end - start;

    return isPrime(length) ? ""YES"" : ""NO"";
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = intersection;
  assert.deepEqual(candidate([1, 2], [2, 3]),""NO"");
  assert.deepEqual(candidate([-1, 1], [0, 4]),""NO"");
  assert.deepEqual(candidate([-3, -1], [-5, 5]),""YES"");
  assert.deepEqual(candidate([-2, 2], [-4, 0]),""YES"");
  assert.deepEqual(candidate([-11, 2], [-1, -1]),""NO"");
  assert.deepEqual(candidate([1, 2], [3, 5]),""NO"");
  assert.deepEqual(candidate([1, 2], [1, 2]),""NO"");
  assert.deepEqual(candidate([-2, -2], [-3, -2]),""NO"");
}

test();"
HumanEval_128,asm_Beng,ts,"//উদাহৰণঃ//টোকাঃ খালী arr ৰ বাবে অনিৰ্ধাৰিত ৰিটাৰ্ণ//অংকবোৰক ১, -১ বা ০ ৰে প্ৰতিনিধিত্ব কৰা অংকবোৰক এটা অংক হিচাপে গণ্য কৰা হয়।//পূৰ্ণসংখ্যাৰ পৰিমাণৰ যোগফল সকলো চিহ্নৰ উৎপাদনৰ দ্বাৰা গুণিত কৰা //আপুনি এটা এৰেৰে পূৰ্ণসংখ্যাক দিয়া হৈছে আৰু আপুনি ঘূৰাই দিব লাগিব // >>> prod_signs([1, 2, 2, -4])
// 9
// >>> prod_signs([0, 1])
// 0
// >>> prod_signs([])
// undefined
function prod_signs(arr: number[]): number | undefined {
","function prod_signs(arr: number[]): number | undefined {
    if (arr.length === 0) return undefined;

    let sumOfMagnitudes = 0;
    let productOfSigns = 1;

    for (const num of arr) {
        sumOfMagnitudes += Math.abs(num);
        productOfSigns *= Math.sign(num);
    }

    return sumOfMagnitudes * productOfSigns;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prod_signs;
  assert.deepEqual(candidate([1, 2, 2, -4]),-9);
  assert.deepEqual(candidate([0, 1]),0);
  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);
  assert.deepEqual(candidate([-1, 1, -1, 1]),4);
  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);
  assert.deepEqual(candidate([-1, 1, 1, 0]),0);
}

test();"
HumanEval_129,asm_Beng,ts,"//উদাহৰণঃ//ন্যূনতম পথ অতিক্ৰম কৰা কোষসমূহৰ মানসমূহৰ এটা আদেশযুক্ত অ্যারে ঘূৰাই আনে।//ইয়াৰ উত্তৰ অনন্য হ'ব বুলি নিশ্চিত।//lst_A[j] = lst_B[j]।//এনেদৰে lst_A[i] < lst_B[i] আৰু যিকোনো j (1 <= j < i) ৰ বাবে আমি পাইছো //lst_B, অন্য কথাত, ইয়াত এটা পূৰ্ণসংখ্যাৰ সূচক i (1 <= i <= k) আছে।//(আমি সিহঁতক lst_A আৰু lst_B বুলি কওঁ), lst_A শব্দকোষীয়ভাৱে কম ।//A আৰু B কক্ষত থকা মানবোৰক এটা ক্ৰমযুক্ত অৰণ্যত স্থান দিয়াৰ পিছত,//এটা পথ A (k দৈৰ্ঘ্যৰ) এটা পথ B (k দৈৰ্ঘ্যৰ) তকৈ সৰু বুলি গণ্য কৰা হয় যদিহে //আপুনি গ্ৰীডৰ বাহিৰত যাব নোৱাৰে।//(অৱশ্যেই পৃথক) ।//অনুগ্ৰহ কৰি মন কৰক যে k দৈৰ্ঘ্যৰ এটা পথৰ অৰ্থ হৈছে একেবাৰে k কোষৰ পৰিদৰ্শন কৰা (নক //ম'বাইল//অন্য কথাত ক'বলৈ গ'লে, আপুনি আপোনাৰ সৈতে এডাল ভাগ কৰি লোৱা কোষবোৰলৈ যাব পাৰে।//যিকোনো কোষৰ পৰা, আৰু প্ৰতিটো পদক্ষেপত আপুনি যিকোনো চুবুৰীয়া কোষলৈ যাব পাৰে,//আপুনি গ্ৰীডত k দৈৰ্ঘ্যৰ ন্যূনতম পথটো বিচাৰি উলিয়াব লাগিব। আপুনি আৰম্ভ কৰিব পাৰে।//অন্তৰ্ভুক্তিকৰণ গ্ৰীডৰ কোষসমূহত একেবাৰে এবাৰ দেখা যায়।//গ্ৰীডৰ প্ৰতিটো কোষত এটা মান থাকে। [1, N * N] ৰ ভিতৰত প্ৰতিটো সম্পূৰ্ণ সংখ্যা।//এটা গ্ৰীড দিয়া হ'ল য'ত N শাৰী আৰু N কলাম আছে (N >= 2) আৰু এটা ধনাত্মক পূৰ্ণ সংখ্যা k, // >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
// [1, 2, 1]
// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
// [1]
function minPath(grid: number[][], k: number): number[] {
","function minPath(grid: number[][], k: number): number[] {
    const N = grid.length;
    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    
    type State = {path: number[], x: number, y: number, len: number};
    
    // Compare two paths lexicographically
    const isLess = (a: number[], b: number[]): boolean => {
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) return a[i] < b[i];
        }
        return false;
    };

    let bestPath: number[] = new Array(k).fill(Number.MAX_VALUE);
    
    // DFS function to explore paths of length k
    function dfs(x: number, y: number, path: number[], len: number): void {
        if (len === k) {
            if (isLess(path, bestPath)) {
                bestPath = [...path];
            }
            return;
        }
        
        for (const [dx, dy] of directions) {
            const nx = x + dx;
            const ny = y + dy;
            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {
                dfs(nx, ny, [...path, grid[nx][ny]], len + 1);
            }
        }
    }
    
    // Try starting from each cell
    for (let i = 0; i < N; i++) {
        for (let j = 0; j < N; j++) {
            dfs(i, j, [grid[i][j]], 1);
        }
    }
    
    return bestPath;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = minPath;
  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);
  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);
  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);
  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);
  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);
  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);
  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);
  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);
  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);
  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);
  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);
}

test();"
HumanEval_130,asm_Beng,ts,"//উদাহৰণঃ//ট্ৰিবোনাচ্চি ক্ৰমৰ প্ৰথম n + 1 সংখ্যা।//আপোনাক এটা অ-নতিবাচক পূৰ্ণ সংখ্যা n দিয়া হৈছে, আপুনি এটা এৰেজ ৰিটাৰ্ণ কৰিব লাগিব //= ২ + ৩ + ৩ = ৮ ।//ত্ৰিপদ (৩) = ত্ৰিপদ (২) + ত্ৰিপদ (১) + ত্ৰিপদ (৪) ।//ত্ৰি () = ৩//ত্ৰি (২) = ১ + (২ / ২) = ২ ।//উদাহৰণস্বৰূপেঃ//ত্ৰি (n) = ত্ৰি (n - 1) + ত্ৰি (n - 2) + ত্ৰি (n + 1), যদি n অস্বাভাৱিক হয়।//ত্ৰি (n) = 1 + n / 2, যদি n জোৰা হয়।//ত্ৰি (২) = ৩//ট্ৰিবোনাচি ক্ৰমৰ পুনৰাবৃত্তিৰ দ্বাৰা সংজ্ঞায়িত কৰা হয়ঃ//কিন্তু মানুহে নাজানে ট্ৰিবোনাচি ক্ৰম কি।//ফিব'নাচ্চি ক্ৰমক সকলোৱে জানে, ইয়াক গভীৰভাৱে অধ্যয়ন কৰিছিল গণিতজ্ঞসকলে // >>> tri(3)
// [1, 3, 2, 8]
function tri(n: number): number[] {
","function tri(n: number): number[] {
    const tribonacci: number[] = [1, 3]; // Initialize with first two definite values

    function calculateTribonacci(index: number): number {
        if (index < tribonacci.length) {
            return tribonacci[index];
        }

        let result: number;
        if (index % 2 === 0) {
            result = 1 + index / 2;
        } else {
            result = calculateTribonacci(index - 1) + calculateTribonacci(index - 2) + calculateTribonacci(index + 1);
        }

        tribonacci[index] = result; // Memoize the result
        return result;
    }

    for (let i = 0; i <= n; i++) {
        calculateTribonacci(i);
    }

    return tribonacci.slice(0, n + 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = tri;
  assert.deepEqual(candidate(3),[1, 3, 2, 8]);
  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);
  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);
  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);
  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);
  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);
  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);
  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);
  assert.deepEqual(candidate(0),[1]);
  assert.deepEqual(candidate(1),[1, 3]);
}

test();"
HumanEval_131,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//সকলো অংক জোৰা হ'লে 0 ঘূৰাই দিব.//এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হ'লে অদ্ভুত অংকবোৰৰ উৎপাদনৰ সংখ্যাটো ঘূৰাই দিয়া।// >>> digits(1)
// 1
// >>> digits(4)
// 0
// >>> digits(235)
// 15
function digits(n: number): number {
","function digits(n: number): number {
    let product = 1;
    let hasOdd = false;
    
    while (n > 0) {
        let digit = n % 10;
        if (digit % 2 !== 0) {
            product *= digit;
            hasOdd = true;
        }
        n = Math.floor(n / 10);
    }

    return hasOdd ? product : 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = digits;
  assert.deepEqual(candidate(5),5);
  assert.deepEqual(candidate(54),5);
  assert.deepEqual(candidate(120),1);
  assert.deepEqual(candidate(5014),5);
  assert.deepEqual(candidate(98765),315);
  assert.deepEqual(candidate(5576543),2625);
  assert.deepEqual(candidate(2468),0);
}

test();"
HumanEval_132,asm_Beng,ts,"//য'ত উপ-অনুসৰণত কমেও এটা ব্ৰেকেট অন্তৰ্ভুক্ত হৈ থাকে।//ফাংশনটো true ৰিটাৰ্ণ কৰিব লাগে যদিহে আৰু কেৱল যদিহে ব্ৰেকেটৰ এটা বৈধ উপ-অনুসৰণ আছে ।//এটা ফাংচন সৃষ্টি কৰক যি এটা ষ্ট্ৰিংক ইনপুট হিচাপে গ্ৰহণ কৰে য'ত কেৱল বৰ্গাক্ৰেট থাকে।// >>> is_nested(""[[]]"")
// true
// >>> is_nested(""[]]]]]]][[[[[]"")
// false
// >>> is_nested(""[][]"")
// false
// >>> is_nested(""[]"")
// false
// >>> is_nested(""[[][]]"")
// true
// >>> is_nested(""[[]][["")
// true
function is_nested(string: string): boolean {
","function is_nested(string: string): boolean {
    let depth = 0;
    let hasNesting = false;

    for (let char of string) {
        if (char === '[') {
            depth++;
            if (depth > 1) {
                hasNesting = true;
            }
        } else if (char === ']') {
            if (depth > 0) {
                depth--;
            } else {
                // More closing brackets than opening
                return false;
            }
        }
    }

    // Return true if there was at least one nested bracket and all brackets are matched
    return hasNesting && depth === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_nested;
  assert.deepEqual(candidate(""[[]]""),true);
  assert.deepEqual(candidate(""[]]]]]]][[[[[]""),false);
  assert.deepEqual(candidate(""[][]""),false);
  assert.deepEqual(candidate(""[]""),false);
  assert.deepEqual(candidate(""[[[[]]]]""),true);
  assert.deepEqual(candidate(""[]]]]]]]]]]""),false);
  assert.deepEqual(candidate(""[][][[]]""),true);
  assert.deepEqual(candidate(""[[]""),false);
  assert.deepEqual(candidate(""[]]""),false);
  assert.deepEqual(candidate(""[[]][[""),true);
  assert.deepEqual(candidate(""[[][]]""),true);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""[[[[[[[[""),false);
  assert.deepEqual(candidate(""]]]]]]]]""),false);
}

test();"
HumanEval_133,asm_Beng,ts,"//উদাহৰণঃ//প্ৰথমে অংকন প্ৰণালীটোৰ প্ৰতিটো উপাদানক ওপৰৰ int ({}) তললৈ ঘূৰাওক।//আপুনি দিয়া এৰেজত থকা সংখ্যাৰ স্কোৱাডৰ যোগফল ঘূৰাই দিব লাগিব, //আপোনাক এটা সংখ্যাৰ অ্যারে দিয়া হৈছে।// >>> lst([1.0, 2.0, 3.0])
// 14
// >>> lst([1.0, 4.0, 9.0])
// 98
// >>> lst([1.0, 3.0, 5.0, 7.0])
// 84
// >>> lst([1.4, 4.2, 0.0])
// 29
// >>> lst([-2.4, 1.0, 1.0])
// 6
function sum_squares(lst: number[]): number {
","function sum_squares(lst: number[]): number {
    return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);
}

// Example usage:
// console.log(sum_squares([1.0, 2.0, 3.0])); // Output: 14
// console.log(sum_squares([1.0, 4.0, 9.0])); // Output: 98
// console.log(sum_squares([1.0, 3.0, 5.0, 7.0])); // Output: 84
// console.log(sum_squares([1.4, 4.2, 0.0])); // Output: 29
// console.log(sum_squares([-2.4, 1.0, 1.0])); // Output: 6","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_squares;
  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);
  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);
  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);
  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);
  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);
  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);
  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);
  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);
  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);
  assert.deepEqual(candidate([0.0]),0);
  assert.deepEqual(candidate([-1.0]),1);
  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);
}

test();"
HumanEval_134,asm_Beng,ts,"//উদাহৰণঃ//টোকাঃ ""word"" হ'ল শাৰীৰে পৃথক কৰা বৰ্ণৰ এটা গোট।//এটা শব্দৰ এটা অংশ, আৰু অন্যথা মিছা।//এটা নিৰ্দিষ্ট শাৰী এটা বৰ্ণমালাৰ বৰ্ণ আৰু নহয় //এটা ফাংশন সৃষ্টি কৰক যিটো true ৰিটাৰ্ণ কৰে যদি শেষৰ বৰ্ণটো  হয়// >>> check_if_last_char_is_a_letter(""apple pie"")
// false
// >>> check_if_last_char_is_a_letter(""apple pi e"")
// true
// >>> check_if_last_char_is_a_letter(""apple pi e "")
// false
// >>> check_if_last_char_is_a_letter("""")
// false
function check_if_last_char_is_a_letter(txt: string): boolean {
","function check_if_last_char_is_a_letter(txt: string): boolean {
    if (txt.trim() === """") return false; // Handle empty or whitespace strings

    // Trim the string to remove any trailing spaces
    txt = txt.trim();

    // Check if the last character is an alphabetical letter and ensure there's a space before it
    const lastChar = txt.charAt(txt.length - 1);
    const isAlpha = /[a-zA-Z]/.test(lastChar);

    return isAlpha && txt.lastIndexOf(' ') === txt.length - 2;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = check_if_last_char_is_a_letter;
  assert.deepEqual(candidate(""apple""),false);
  assert.deepEqual(candidate(""apple pi e""),true);
  assert.deepEqual(candidate(""eeeee""),false);
  assert.deepEqual(candidate(""A""),true);
  assert.deepEqual(candidate(""Pumpkin pie ""),false);
  assert.deepEqual(candidate(""Pumpkin pie 1""),false);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""eeeee e ""),false);
  assert.deepEqual(candidate(""apple pie""),false);
  assert.deepEqual(candidate(""apple pi e ""),false);
}

test();"
HumanEval_135,asm_Beng,ts,"//উদাহৰণঃ//নকল মানৰ বাবে।//যদি তেনে কোনো উপাদান নাই তেন্তে -১ ঘূৰাই দিব। দিয়া অ্যারেটোত  অন্তৰ্ভুক্ত নহ'ব।//যদি  ইয়াৰ আগতে থকা মৌলৰ সমান বা অধিক নহয়।//এটা ফাংচন সৃষ্টি কৰক যি এটা উপাদানৰ সৰ্ববৃহৎ সূচক ঘূৰাই দিয়ে যিটো // >>> can_arrange([1, 2, 4, 3, 5])
// 3
// >>> can_arrange([1, 2, 3])
// -1
function can_arrange(arr: number[]): number {
","function can_arrange(arr: number[]): number {
    for (let i = arr.length - 1; i > 0; i--) {
        if (arr[i] < arr[i - 1]) {
            return i;
        }
    }
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = can_arrange;
  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);
  assert.deepEqual(candidate([1, 2, 4, 5]),-1);
  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);
  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);
  assert.deepEqual(candidate([]),-1);
}

test();"
HumanEval_136,asm_Beng,ts,"//উদাহৰণঃ//যদি কোনো ঋণাত্মক বা ধনাত্মক পূৰ্ণ সংখ্যা নাই, তেন্তে সেইবোৰক undefined হিচাপে ঘূৰাই দিব.//এটা এৰেজত ধনাত্মক পূৰ্ণসংখ্যাৰ সংখ্যা।//আটাইতকৈ ডাঙৰ ঋণাত্মক পূৰ্ণ সংখ্যাটো, আৰু 'b' আটাইতকৈ সৰুটো।//এটা ফাংচন সৃষ্টি কৰক যি এটা এৰে (a, b) ঘূৰাই আনে, য'ত 'a' হৈছে // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])
// [undefined, 1]
// >>> largest_smallest_integers([])
// [undefined, undefined]
// >>> largest_smallest_integers([0])
// [undefined, undefined]
function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {
","function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {
    let largestNegative: number | undefined = undefined;
    let smallestPositive: number | undefined = undefined;

    for (let num of lst) {
        if (num < 0) {
            if (largestNegative === undefined || num > largestNegative) {
                largestNegative = num;
            }
        } else if (num > 0) {
            if (smallestPositive === undefined || num < smallestPositive) {
                smallestPositive = num;
            }
        }
    }

    return [largestNegative, smallestPositive];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_smallest_integers;
  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);
  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);
  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);
  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);
  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);
  assert.deepEqual(candidate([]),[undefined, undefined]);
  assert.deepEqual(candidate([0]),[undefined, undefined]);
  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);
  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);
  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);
  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);
}

test();"
HumanEval_138,asm_Beng,ts,"//উদাহৰণ //নিৰ্দিষ্ট সংখ্যা n ক সঠিকভাৱে 4 টা ধনাত্মক সম সংখ্যাৰ যোগফল হিচাপে লিখিব পাৰি নেকি তাৰ মূল্যায়ন কৰা ।// >>> is_equal_to_sum_even(4)
// false
// >>> is_equal_to_sum_even(6)
// false
// >>> is_equal_to_sum_even(8)
// true
function is_equal_to_sum_even(n: number): boolean {
","function is_equal_to_sum_even(n: number): boolean {
    // The sum of 4 positive even numbers is always even and 8 is the smallest such sum (2 + 2 + 2 + 2).
    // Hence, if n is greater than or equal to 8 and even, n can be expressed as the sum of 4 positive even numbers.
    return (n >= 8) && (n % 2 === 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_equal_to_sum_even;
  assert.deepEqual(candidate(4),false);
  assert.deepEqual(candidate(6),false);
  assert.deepEqual(candidate(8),true);
  assert.deepEqual(candidate(10),true);
  assert.deepEqual(candidate(11),false);
  assert.deepEqual(candidate(12),true);
  assert.deepEqual(candidate(13),false);
  assert.deepEqual(candidate(16),true);
}

test();"
HumanEval_139,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//য'ত n > 0 //ব্ৰাজিলিয়ান_ফেক্টৰিয়েল (n) = n! * (n-1)! * (n-2)! * ... * 1! //ব্ৰাজিলীয় কাৰকক সংজ্ঞায়িত কৰা হৈছেঃ// >>> special_factorial(4)
// 288
// The function will receive an integer as input and should return the special
// factorial of this integer.
function special_factorial(n: number): number {
","function factorial(n: number): number {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

function special_factorial(n: number): number {
    if (n <= 0) throw new Error(""Input must be a positive integer"");
    
    let result = 1;
    for (let i = n; i >= 1; i--) {
        result *= factorial(i);
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = special_factorial;
  assert.deepEqual(candidate(4),288);
  assert.deepEqual(candidate(5),34560);
  assert.deepEqual(candidate(7),125411328000);
  assert.deepEqual(candidate(1),1);
}

test();"
HumanEval_140,asm_Beng,ts,"//তাৰপিছত সকলো ক্ৰমিক স্থানৰ ঠাইত -  লিখক//আৰু যদি এটা ষ্ট্ৰিংত 2 টাতকৈ অধিক ক্ৰমাগত স্পেচ থাকে, //এটা পাঠৰ শাৰী দিয়া হৈছে, তাত থকা সকলো স্থান আন্ডাৰস্ক'ৰেৰে সলনি কৰক,// >>> fix_spaces("" Example"")
// ""Example""
// >>> fix_spaces("" Example 1"")
// ""Example_1""
// >>> fix_spaces("" Example 2"")
// ""_Example_2""
// >>> fix_spaces("" Example 3"")
// ""_Example-3""
function fix_spaces(text: string): string {
","function fix_spaces(text: string): string {
    // Trim leading and trailing spaces
    let trimmedText = text.trim();

    // Use a regular expression to replace all sequences of two or more spaces with ""-""
    let replacedText = trimmedText.replace(/ {2,}/g, '-');

    // Replace remaining single spaces with underscores
    replacedText = replacedText.replace(/ /g, '_');

    return replacedText;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fix_spaces;
  assert.deepEqual(candidate(""Example""),""Example"");
  assert.deepEqual(candidate(""Mudasir Hanif ""),""Mudasir_Hanif_"");
  assert.deepEqual(candidate(""Yellow Yellow  Dirty  Fellow""),""Yellow_Yellow__Dirty__Fellow"");
  assert.deepEqual(candidate(""Exa   mple""),""Exa-mple"");
  assert.deepEqual(candidate(""   Exa 1 2 2 mple""),""-Exa_1_2_2_mple"");
}

test();"
HumanEval_141,asm_Beng,ts,"//উদাহৰণঃ//- বিন্দুটোৰ পিছত থকা উপশাৰীটো এইবিলাকৰ ভিতৰত এটা হ'ব লাগেঃ ['txt', 'exe', 'dll'] //লেটিন বৰ্ণমালা ('a'-'z' আৰু 'A'-'Z') ।//- বিন্দুটোৰ আগত থকা উপশাৰীটো খালী হ'ব নালাগে, আৰু ই  ৰ পৰা এটা আখৰেৰে আৰম্ভ হয়//- ফাইলৰ নামত একেবাৰে একেটা বিন্দু আছে '.'//- ফাইলৰ নামত তিনিটাতকৈ অধিক অংক থাকিব নালাগে ('0'-'9') ।//পূৰণ কৰা হৈছেঃ//এটা ফাইলৰ নাম বৈধ বুলি গণ্য কৰা হয় যদিহে আৰু কেৱল যদিহে তলত দিয়া সকলো চৰ্ত পূৰণ হয়।//ফাইলৰ নাম বৈধ হ'লে 'হয়', অন্যথা 'নহয়' ৰিটাৰ্ণ কৰে।//এটা ফাংচন সৃষ্টি কৰক যি এটা ফাইলৰ নাম প্ৰতিনিধিত্ব কৰা এটা ষ্ট্ৰিং লয় আৰু উভতাই দিয়ে // >>> file_name_check(""example.txt"")
// ""Yes""
// >>> file_name_check(""1example.dll"")
// ""No""
function file_name_check(file_name: string): string {
","function file_name_check(file_name: string): string {
    // Split the file name into name and extension based on the dot
    const parts = file_name.split('.');
    
    // Check if there's exactly one dot
    if (parts.length !== 2) {
        return 'No';
    }
    
    const [name, extension] = parts;
    
    // Check if the substring before the dot is not empty and starts with a latin letter
    if (name.length === 0 || !/^[a-zA-Z]/.test(name)) {
        return 'No';
    }
    
    // Check if the number of digits in the name is not more than three
    const digitCount = (name.match(/\d/g) || []).length;
    if (digitCount > 3) {
        return 'No';
    }
    
    // Check if the extension is one of the valid options
    const validExtensions = ['txt', 'exe', 'dll'];
    if (!validExtensions.includes(extension)) {
        return 'No';
    }
    
    // All conditions are met, the file name is valid
    return 'Yes';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = file_name_check;
  assert.deepEqual(candidate(""example.txt""),""Yes"");
  assert.deepEqual(candidate(""1example.dll""),""No"");
  assert.deepEqual(candidate(""s1sdf3.asd""),""No"");
  assert.deepEqual(candidate(""K.dll""),""Yes"");
  assert.deepEqual(candidate(""MY16FILE3.exe""),""Yes"");
  assert.deepEqual(candidate(""His12FILE94.exe""),""No"");
  assert.deepEqual(candidate(""_Y.txt""),""No"");
  assert.deepEqual(candidate(""?aREYA.exe""),""No"");
  assert.deepEqual(candidate(""/this_is_valid.dll""),""No"");
  assert.deepEqual(candidate(""this_is_valid.wow""),""No"");
  assert.deepEqual(candidate(""this_is_valid.txt""),""Yes"");
  assert.deepEqual(candidate(""this_is_valid.txtexe""),""No"");
  assert.deepEqual(candidate(""#this2_i4s_5valid.ten""),""No"");
  assert.deepEqual(candidate(""@this1_is6_valid.exe""),""No"");
  assert.deepEqual(candidate(""this_is_12valid.6exe4.txt""),""No"");
  assert.deepEqual(candidate(""all.exe.txt""),""No"");
  assert.deepEqual(candidate(""I563_No.exe""),""Yes"");
  assert.deepEqual(candidate(""Is3youfault.txt""),""Yes"");
  assert.deepEqual(candidate(""no_one#knows.dll""),""Yes"");
  assert.deepEqual(candidate(""1I563_Yes3.exe""),""No"");
  assert.deepEqual(candidate(""I563_Yes3.txtt""),""No"");
  assert.deepEqual(candidate(""final..txt""),""No"");
  assert.deepEqual(candidate(""final132""),""No"");
  assert.deepEqual(candidate(""_f4indsartal132.""),""No"");
  assert.deepEqual(candidate("".txt""),""No"");
  assert.deepEqual(candidate(""s.""),""No"");
}

test();"
HumanEval_142,asm_Beng,ts,"//উদাহৰণঃ//এই ফাংচনে তাৰ পিছত সকলো এন্ট্ৰিৰ যোগফল ঘূৰাই দিব।//৩ৰ গুণিতক আৰু যদি ইয়াৰ সূচক ৪ৰ গুণিতক আৰু ৩ৰ গুণিতক নহয় তেন্তে ই সম্পূৰ্ণ সংখ্যাৰ প্ৰৱেশক ঘন কৰিব।//এই ফাংচনে এটা সম্পূৰ্ণ সংখ্যাৰ এৰেজ ল'ব। এৰেজত থকা সকলো এণ্ট্ৰিৰ বাবে, ফাংচনে সম্পূৰ্ণ সংখ্যাৰ এণ্ট্ৰিটো বৰ্গক্ষেত্ৰ কৰিব যদি ইয়াৰ সূচক a হয়।//"" // >>> lst
// [1, 2, 3]
// >>> lst
// []
// >>> lst
// [-1, -5, 2, -1, -5]
function sum_squares(lst: number[]): number {
","function sum_squares(lst: number[]): number {
    return lst.reduce((sum, value, index) => {
        if (index % 3 === 0) {
            return sum + (value * value);
        } else if (index % 4 === 0) {
            return sum + (value * value * value);
        } else {
            return sum + value;
        }
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_squares;
  assert.deepEqual(candidate([1, 2, 3]),6);
  assert.deepEqual(candidate([1, 4, 9]),14);
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);
  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);
  assert.deepEqual(candidate([0]),0);
  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);
  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);
  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);
  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);
  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);
}

test();"
HumanEval_143,asm_Beng,ts,"//উদাহৰণ ১ঃ//নতুন শাৰীটোৰ শব্দৰ ক্ৰম প্ৰাথমিক শাৰীটোৰ দৰে হ'ব লাগিব।//যাৰ দৈৰ্ঘ্য মৌলিক সংখ্যা,//আৰু আপুনি এটা ষ্ট্ৰিং ঘূৰাই দিব লাগিব য'ত মূল বাক্যটোৰ শব্দবোৰ আছে, //বাক্যটোত কিছুমান শব্দ আছে, যিবোৰ এটা স্পেচাৰে পৃথক কৰা হৈছে,//আপোনাক এটা বাক্য প্ৰতিনিধিত্ব কৰা এটা শাৰী দিয়া হৈছে,// >>> words_in_sentence(""This is a test"")
// ""is""
// Example 2:
// >>> words_in_sentence(""lets go for swimming"")
// ""go for""
// Constraints:
// * 1 <= len(sentence) <= 100
// * sentence contains only letters
function words_in_sentence(sentence: string): string {
","function isPrime(num: number): boolean {
    if (num < 2) return false;
    for (let i = 2; i * i <= num; i++) {
        if (num % i === 0) return false;
    }
    return true;
}

function words_in_sentence(sentence: string): string {
    return sentence
        .split(' ')
        .filter(word => isPrime(word.length))
        .join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = words_in_sentence;
  assert.deepEqual(candidate(""This is a test""),""is"");
  assert.deepEqual(candidate(""lets go for swimming""),""go for"");
  assert.deepEqual(candidate(""there is no place available here""),""there is no place"");
  assert.deepEqual(candidate(""Hi I am Hussein""),""Hi am Hussein"");
  assert.deepEqual(candidate(""go for it""),""go for it"");
  assert.deepEqual(candidate(""here""),"""");
  assert.deepEqual(candidate(""here is""),""is"");
}

test();"
HumanEval_144,asm_Beng,ts,"//আপুনি ধাৰণা কৰিব পাৰে যে x, আৰু n হৈছে বৈধ ভগ্নাংশ, আৰু শূন্যক দ্ৰাবিষ হিচাপে নাপায়।//<numerator>/<denominator> য'ত নম্বৰ আৰু নাম্বাৰ দুয়োটা ধনাত্মক পূৰ্ণ সংখ্যা।//x আৰু n দুয়োটাই ভগ্নাংশৰ এটা শাৰী প্ৰতিনিধিত্ব আৰু নিম্নলিখিত বিন্যাস আছে,//x * n. যদি x * n এটা সম্পূৰ্ণ সংখ্যা আৰু false হয়, তেন্তে ফাংশনটো true ঘূৰাই আনে।//আপোনাৰ কাম হৈছে এটা ফাংচন প্ৰয়োগ কৰা যি প্ৰকাশনটো সৰল কৰিব // >>> simplify(""1/5"", ""5/1"")
// true
// >>> simplify(""1/6"", ""2/1"")
// false
// >>> simplify(""7/10"", ""10/2"")
// false
function simplify(x: string, n: string): boolean {
","function simplify(x: string, n: string): boolean {
    const parseFraction = (fraction: string): [number, number] => {
        const [numerator, denominator] = fraction.split('/').map(Number);
        return [numerator, denominator];
    };

    const [xNumerator, xDenominator] = parseFraction(x);
    const [nNumerator, nDenominator] = parseFraction(n);

    // Multiply the fractions: (a/b) * (c/d) = (a*c) / (b*d)
    const resultNumerator = xNumerator * nNumerator;
    const resultDenominator = xDenominator * nDenominator;

    // A product of fractions is a whole number if its numerator divided by denominator is an integer.
    return resultNumerator % resultDenominator === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = simplify;
  assert.deepEqual(candidate(""1/5"", ""5/1""),true);
  assert.deepEqual(candidate(""1/6"", ""2/1""),false);
  assert.deepEqual(candidate(""5/1"", ""3/1""),true);
  assert.deepEqual(candidate(""7/10"", ""10/2""),false);
  assert.deepEqual(candidate(""2/10"", ""50/10""),true);
  assert.deepEqual(candidate(""7/2"", ""4/2""),true);
  assert.deepEqual(candidate(""11/6"", ""6/1""),true);
  assert.deepEqual(candidate(""2/3"", ""5/2""),false);
  assert.deepEqual(candidate(""5/2"", ""3/5""),false);
  assert.deepEqual(candidate(""2/4"", ""8/4""),true);
  assert.deepEqual(candidate(""2/4"", ""4/2""),true);
  assert.deepEqual(candidate(""1/5"", ""5/1""),true);
  assert.deepEqual(candidate(""1/5"", ""1/5""),false);
}

test();"
HumanEval_145,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//মূল এৰেজত তেওঁলোকৰ সূচকৰ ভিত্তিত তেওঁলোকক ক্ৰম কৰক।//টোকাঃ যদি বহুতো প্ৰবন্ধ আছে যিবোৰৰ অংকবোৰৰ সমষ্টি একেই, //তেওঁলোকৰ অংকবোৰৰ যোগফল অনুসৰি ক্ৰমান্বয়ে।//এটা ফাংচন লিখা যিটো দিয়া পূৰ্ণসংখ্যাৰ অ্যাৰেৰ সাজিব ।// >>> order_by_points([1, 11, -1, -11, -12])
// [-1, -11, 1, -12, 11]
// >>> order_by_points([])
// []
function order_by_points(nums: number[]): number[] {
","function order_by_points(nums: number[]): number[] {
    const digitSum = (num: number): number => {
        let sum = 0;
        let value = Math.abs(num);
        while (value > 0) {
            sum += value % 10;
            value = Math.floor(value / 10);
        }
        return sum;
    };

    return nums
        .map((num, index) => ({ num, index, sumOfDigits: digitSum(num) }))
        .sort((a, b) => {
            if (a.sumOfDigits === b.sumOfDigits) {
                return a.index - b.index;
            }
            return a.sumOfDigits - b.sumOfDigits;
        })
        .map(item => item.num);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = order_by_points;
  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);
  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);
  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);
}

test();"
HumanEval_146,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//এটা সংখ্যাৰ প্ৰথম আৰু শেষ অংকটো অদ্ভুত (1, 3, 5, 7, 9) ।//এৰেৰ ১০ ৰ অধিক সংখ্যক উপাদান আৰু দুয়োটা //এটা ফাংচন লিখা যি এটা অংক সমষ্টিৰ পৰা ইনপুট আৰু ৰিটাৰ্ণ লয় ।// >>> specialFilter([15, -73, 14, -15])
// 1
// >>> specialFilter([33, -2, -3, 45, 21, 109])
// 2
function specialFilter(nums: number[]): number {
","function specialFilter(nums: number[]): number {
    const isOdd = (digit: number): boolean => digit % 2 !== 0;

    return nums.reduce((count, num) => {
        const absNumStr = Math.abs(num).toString();
        const firstDigit = parseInt(absNumStr[0]);
        const lastDigit = parseInt(absNumStr[absNumStr.length - 1]);

        if (num > 10 && isOdd(firstDigit) && isOdd(lastDigit)) {
            return count + 1;
        }

        return count;
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = specialFilter;
  assert.deepEqual(candidate([5, -2, 1, -5]),0);
  assert.deepEqual(candidate([15, -73, 14, -15]),1);
  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);
  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);
  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);
  assert.deepEqual(candidate([1]),0);
  assert.deepEqual(candidate([]),0);
}

test();"
HumanEval_147,asm_Beng,ts,"//উদাহৰণঃ//আৰু a[i] + a[j] + a[k] হৈছে 3 ৰ গুণিতক।//a ৰ ত্ৰিপল সংখ্যাৰ সংখ্যা (a[i], a[j], a[k]) ঘূৰাই দিব য'ত i < j < k, //প্ৰত্যেক i (1 ≤ i ≤ n) ৰ বাবে, a[i] = i * i - i + 1 ৰ মান।//আপুনি এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হৈছে। আপুনি এটা পূৰ্ণ সংখ্যা এৰেজ সৃষ্টি কৰিব লাগিব যাৰ দৈৰ্ঘ্য n।// >>> get_max_triples(5)
// 1
// Explanation: 
// a = [1, 3, 7, 13, 21]
// The only valid triple is (1, 7, 13).
function get_max_triples(n: number): number {
","function get_max_triples(n: number): number {
    const a: number[] = [];

    for (let i = 1; i <= n; i++) {
        a[i - 1] = i * i - i + 1;
    }

    let count = 0;

    for (let i = 0; i < n - 2; i++) {
        for (let j = i + 1; j < n - 1; j++) {
            for (let k = j + 1; k < n; k++) {
                if ((a[i] + a[j] + a[k]) % 3 === 0) {
                    count++;
                }
            }
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_max_triples;
  assert.deepEqual(candidate(5),1);
  assert.deepEqual(candidate(6),4);
  assert.deepEqual(candidate(10),36);
  assert.deepEqual(candidate(100),53361);
}

test();"
HumanEval_149,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//আপুনি অনুমান কৰিব পাৰে যে সকলো শব্দৰ দীঘল সমান হ'ব।//ফাংশনটোৱে এটা শাৰী শাৰীবোৰক ক্ৰম অনুসাৰে ঘূৰাই দিব লাগে।//যদি দুটা শব্দৰ দৈৰ্ঘ্য সমান হয়, তেন্তে অ্যাৰেটো বৰ্ণানুক্ৰমিকভাৱে ছৰ্ট কৰক।//এই নিয়মৰ দ্বাৰা ছৰ্ট কৰা এৰেটো ঘূৰাই দিব লাগে।//এই ক্ৰমত প্ৰতিটো শব্দৰ দৈৰ্ঘ্য বৃদ্ধি হ'ব লাগে, আৰু আপুনি //আৰু ইয়াত ডুপ্লিকেট থাকিব পাৰে।//এটা এৰে সদায় এটা ষ্ট্ৰিং এৰে আৰু কেতিয়াও এটা সংখ্যাৰ এৰে নহয়,//আৰু এটা ছৰ্ট কৰা আদেশৰ সৈতে ফলাফলৰ এৰেজটো ঘূৰাই দিয়ে, //ইয়াৰ পৰা অস্বাভাৱিক দৈৰ্ঘ্যৰ শাৰীসমূহ আঁতৰাওক, //এটা ফাংচন লিখা যি এটা ষ্ট্ৰিংৰ এৰেক পৰিমাপ হিচাপে গ্ৰহণ কৰে,// >>> list_sort([""aa"", ""a"", ""aaa""])
// [""aa""]
// >>> list_sort([""ab"", ""a"", ""aaa"", ""cd""])
// [""ab"", ""cd""]
function sorted_list_sum(lst: string[]): string[] {
","function sorted_list_sum(lst: string[]): string[] {
    // Filter out strings with odd lengths
    const filtered = lst.filter(str => str.length % 2 === 0);
    // Sort the array by length, then alphabetically
    const sorted = filtered.sort((a, b) => {
        if (a.length === b.length) {
            return a.localeCompare(b);
        }
        return a.length - b.length;
    });
    return sorted;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sorted_list_sum;
  assert.deepEqual(candidate([""aa"", ""a"", ""aaa""]),[""aa""]);
  assert.deepEqual(candidate([""school"", ""AI"", ""asdf"", ""b""]),[""AI"", ""asdf"", ""school""]);
  assert.deepEqual(candidate([""d"", ""b"", ""c"", ""a""]),[]);
  assert.deepEqual(candidate([""d"", ""dcba"", ""abcd"", ""a""]),[""abcd"", ""dcba""]);
  assert.deepEqual(candidate([""AI"", ""ai"", ""au""]),[""AI"", ""ai"", ""au""]);
  assert.deepEqual(candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]),[]);
  assert.deepEqual(candidate([""aaaa"", ""bbbb"", ""dd"", ""cc""]),[""cc"", ""dd"", ""aaaa"", ""bbbb""]);
}

test();"
HumanEval_150,asm_Beng,ts,"//উদাহৰণঃ//এটা অগ্ৰ সংখ্যা আৰু y ৰ মান ঘূৰাই দিব লাগিব অন্যথা।//এটা সৰল প্ৰগ্ৰাম যি x ৰ মান ঘূৰাই দিব লাগে যদি n হয় // >>> x_or_y(7, 34, 12)
// 34
// >>> x_or_y(15, 8, 5)
// 5
function x_or_y(n: number, x: number, y: number): number {
","function x_or_y(n: number, x: number, y: number): number {
    function isPrime(num: number): boolean {
        if (num <= 1) return false;
        if (num <= 3) return true;
        
        if (num % 2 === 0 || num % 3 === 0) return false;
        
        for (let i = 5; i * i <= num; i += 6) {
            if (num % i === 0 || num % (i + 2) === 0) return false;
        }
        
        return true;
    }

    return isPrime(n) ? x : y;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = x_or_y;
  assert.deepEqual(candidate(7, 34, 12),34);
  assert.deepEqual(candidate(15, 8, 5),5);
  assert.deepEqual(candidate(3, 33, 5212),33);
  assert.deepEqual(candidate(1259, 3, 52),3);
  assert.deepEqual(candidate(7919, -1, 12),-1);
  assert.deepEqual(candidate(3609, 1245, 583),583);
  assert.deepEqual(candidate(91, 56, 129),129);
  assert.deepEqual(candidate(6, 34, 1234),1234);
  assert.deepEqual(candidate(1, 2, 0),0);
  assert.deepEqual(candidate(2, 2, 0),2);
}

test();"
HumanEval_151,asm_Beng,ts,"//অগণন সংখ্যা যি অগণন হয়, যি অগণন সংখ্যা যি অগণন হয়, যি অগণন সংখ্যা যি অগণন হয়, যি অগণন সংখ্যা যি অগণন হয়, যি অগণন সংখ্যা যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়, যি অগণন হয়।//এটা সংখ্যাৰ অ্যারে দিয়া হ'লে, সংখ্যাৰ স্কোৱাডৰ যোগফল ঘূৰাই দিয়ক।// >>> double_the_difference([1, 3, 2, 0])
// 10
// >>> double_the_difference([-1, -2, 0])
// 0
// >>> double_the_difference([9, -2])
// 81
// >>> double_the_difference([0])
// 0
// If the input array is empty, return 0.
function double_the_difference(lst: number[]): number {
","function double_the_difference(lst: number[]): number {
    return lst
        .filter(num => Number.isInteger(num) && num > 0 && num % 2 !== 0)
        .reduce((sum, num) => sum + num * num, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = double_the_difference;
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([5.0, 4.0]),25);
  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);
  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);
  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);
  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);
  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);
}

test();"
HumanEval_152,asm_Beng,ts,"//উদাহৰণঃ//মানটো হ'ল ০ আৰু যদি নহয়, মানটো হ'ল অনুমান আৰু স্ক'ৰৰ মাজৰ সম্পূৰ্ণ পাৰ্থক্য।//এটা সম দৈৰ্ঘ্যৰ এৰেজ ঘূৰাই দিব যিয়ে প্ৰতিটো অনুমান কিমান দূৰলৈ আছিল তাক বুজায়। যদি তেওঁলোকে সঠিকভাৱে অনুমান কৰিছে, //আপুনি দুটা সম-লম্ব স্ক'ৰ আৰু অনুমানৰ এৰেজ লাভ কৰে, য'ত প্ৰতিটো সূচকে মিল দেখুৱায়।//আপোনাৰ কাম হ'ল কোনো ব্যক্তিয়ে সঠিকভাৱে বহু সংখ্যক মেচৰ ফলাফল অনুমান কৰিছে নে নাই সেয়া নিৰ্ণয় কৰা।//নিশ্চিতভাৱে নোট কৰি তুলনা কৰাৰ যোগ্য।//এই ঘটনাটো অৱশেষত জানিব পাৰিছো। সেই মুহূৰ্তত আপোনাৰ যি অনুভৱ আৰু চিন্তা হৈছে সেইবোৰ হৈছে //মই ভাবো আমি সকলোৱে সেই অনুভৱটো মনত ৰাখিম যেতিয়া দীৰ্ঘদিনীয়া অপেক্ষাৰ ফল // >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
// [0, 0, 0, 0, 3, 3]
// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
// [4, 4, 1, 0, 0, 6]
function compare(game: number[], guess: number[]): number[] {
","function compare(game: number[], guess: number[]): number[] {
    return game.map((score, index) => Math.abs(score - guess[index]));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = compare;
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);
  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);
  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);
  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);
}

test();"
HumanEval_153,asm_Beng,ts,"//উদাহৰণঃ//(এইটোৰ শক্তি হ'ল -১) ।//return 'Slices.SErviNGSliCes' যিহেতু 'SErviNGSliCes' হৈছে আটাইতকৈ শক্তিশালী সম্প্ৰসাৰণ //extension: ['SErviNGSliCes', 'Cheese', 'StuFfed'] তেতিয়া আপুনি //উদাহৰণস্বৰূপে, যদি আপোনাক ""Slices"" দিয়া হয়, যিটো শ্ৰেণী আৰু এটা এৰেজ //অংকন প্ৰণালীত প্ৰথমটো অংকন কৰা//যদি দুটা বা ততোধিক এক্সটেনশ্যন একেই শক্তিৰ হয়, আপুনি //বিন্যাসঃ শ্ৰেণীৰ নাম. শক্তিশালী সম্প্ৰসাৰণ নাম. //আপুনি আটাইতকৈ শক্তিশালী সম্প্ৰসাৰণটো বিচাৰি উলিয়াব লাগিব আৰু ইয়াত এটা ষ্ট্ৰিং ঘূৰাই দিব লাগিব।//সম্প্ৰসাৰণৰ নামত, শক্তি CAP - SM ভগ্নাংশৰ দ্বাৰা দিয়া হয়।//এক্সটেনশ্যনৰ নামত আখৰবোৰ, আৰু SM সৰু আখৰৰ সংখ্যা হওক //সম্প্ৰসাৰণৰ শক্তি নিম্নলিখিত ধৰণৰঃ CAPক বড়ো আখৰৰ সংখ্যা বুলি ধৰা হওক ।//সম্প্ৰসাৰণসমূহক শ্ৰেণীৰ অতিৰিক্ত শ্ৰেণীসমূহ লোড কৰিবলৈ ব্যৱহাৰ কৰা হয়।//আপোনাক এটা শ্ৰেণীৰ নাম (এটা স্ট্ৰিং) আৰু এটা সম্প্ৰসাৰণৰ এৰে দিয়া হ'ব।// >>> Strongest_Extension(""my_class"", [""AA"", ""Be"", ""CC""])
// ""my_class.AA""
function Strongest_Extension(class_name: string, extensions: string[]): string {
","function Strongest_Extension(class_name: string, extensions: string[]): string {
    let strongestExtension = '';
    let maxStrength = -Infinity;

    extensions.forEach(extension => {
        const capCount = extension.split('').filter(char => char >= 'A' && char <= 'Z').length;
        const smCount = extension.split('').filter(char => char >= 'a' && char <= 'z').length;
        const strength = capCount - smCount;

        if (strength > maxStrength) {
            maxStrength = strength;
            strongestExtension = extension;
        }
    });

    return `${class_name}.${strongestExtension}`;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = Strongest_Extension;
  assert.deepEqual(candidate(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]),""Watashi.eIGHt8OKe"");
  assert.deepEqual(candidate(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]),""Boku123.YEs.WeCaNe"");
  assert.deepEqual(candidate(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]),""__YESIMHERE.NuLl__"");
  assert.deepEqual(candidate(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]),""K.TAR"");
  assert.deepEqual(candidate(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]),""__HAHA.123"");
  assert.deepEqual(candidate(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]),""YameRore.okIWILL123"");
  assert.deepEqual(candidate(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]),""finNNalLLly.WoW"");
  assert.deepEqual(candidate(""_"", [""Bb"", ""91245""]),""_.Bb"");
  assert.deepEqual(candidate(""Sp"", [""671235"", ""Bb""]),""Sp.671235"");
}

test();"
HumanEval_154,asm_Beng,ts,"//আপোনাৰ দুটা শব্দ দিয়া হৈছে. আপুনি true ঘূৰাই দিব লাগিব যদি দ্বিতীয় শব্দটো বা ইয়াৰ যিকোনো এটা ঘুৰণ প্ৰথম শব্দটোৰ এটা উপশাৰী হয় // >>> cycpattern_check(""abcd"", ""abd"")
// false
// >>> cycpattern_check(""hello"", ""ell"")
// true
// >>> cycpattern_check(""whassup"", ""psus"")
// false
// >>> cycpattern_check(""abab"", ""baa"")
// true
// >>> cycpattern_check(""efef"", ""eeff"")
// false
// >>> cycpattern_check(""himenss"", ""simen"")
// true
function cycpattern_check(a: string, b: string): boolean {
","function cycpattern_check(a: string, b: string): boolean {
    for (let i = 0; i < b.length; i++) {
        const rotation = b.slice(i) + b.slice(0, i);
        if (a.includes(rotation)) {
            return true;
        }
    }
    return false;
}

// Test cases
console.log(cycpattern_check(""abcd"", ""abd"")); // false
console.log(cycpattern_check(""hello"", ""ell"")); // true
console.log(cycpattern_check(""whassup"", ""psus"")); // false
console.log(cycpattern_check(""abab"", ""baa"")); // true
console.log(cycpattern_check(""efef"", ""eeff"")); // false
console.log(cycpattern_check(""himenss"", ""simen"")); // true","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = cycpattern_check;
  assert.deepEqual(candidate(""xyzw"", ""xyw""),false);
  assert.deepEqual(candidate(""yello"", ""ell""),true);
  assert.deepEqual(candidate(""whattup"", ""ptut""),false);
  assert.deepEqual(candidate(""efef"", ""fee""),true);
  assert.deepEqual(candidate(""abab"", ""aabb""),false);
  assert.deepEqual(candidate(""winemtt"", ""tinem""),true);
}

test();"
HumanEval_155,asm_Beng,ts,"//উদাহৰণঃ//এটা পূৰ্ণ সংখ্যা দিয়া হৈছে. এটা এৰেজ ঘূৰাই দিব য'ত যথাক্ৰমে জোৰা আৰু অজুৰা অংক থাকিব।// >>> even_odd_count(-12)
// [1, 1]
// >>> even_odd_count(123)
// [1, 2]
function even_odd_count(num: number): [number, number] {
","function even_odd_count(num: number): [number, number] {
    const numStr = Math.abs(num).toString();
    let evenCount = 0;
    let oddCount = 0;

    for (let char of numStr) {
        const digit = parseInt(char);
        if (digit % 2 === 0) {
            evenCount++;
        } else {
            oddCount++;
        }
    }

    return [evenCount, oddCount];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = even_odd_count;
  assert.deepEqual(candidate(7),[0, 1]);
  assert.deepEqual(candidate(-78),[1, 1]);
  assert.deepEqual(candidate(3452),[2, 2]);
  assert.deepEqual(candidate(346211),[3, 3]);
  assert.deepEqual(candidate(-345821),[3, 3]);
  assert.deepEqual(candidate(-2),[1, 0]);
  assert.deepEqual(candidate(-45347),[2, 3]);
  assert.deepEqual(candidate(0),[1, 0]);
}

test();"
HumanEval_156,asm_Beng,ts,"//উদাহৰণঃ//সীমাবদ্ধতাঃ 1 <= নম্বৰ <= 1000//আৰু ইয়াক সৰু আখৰেৰে লিখক।//এটা ধনাত্মক পূৰ্ণ সংখ্যা দিয়া হ'লে, ইয়াৰ ৰোমান সংখ্যা সমতুল্য এটা শাৰী হিচাপে প্ৰাপ্ত কৰক, // >>> int_to_mini_roman(19)
// ""xix""
// >>> int_to_mini_roman(152)
// ""clii""
// >>> int_to_mini_roman(426)
// ""cdxxvi""
function int_to_mini_roman(number: number): string {
","function int_to_mini_roman(number: number): string {
    const romanNumerals: { [key: number]: string } = {
        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',
        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',
        5: 'v', 4: 'iv', 1: 'i'
    };
    
    let result = '';
    for (const value of Object.keys(romanNumerals).map(Number).sort((a, b) => b - a)) {
        while (number >= value) {
            result += romanNumerals[value];
            number -= value;
        }
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = int_to_mini_roman;
  assert.deepEqual(candidate(19),""xix"");
  assert.deepEqual(candidate(152),""clii"");
  assert.deepEqual(candidate(251),""ccli"");
  assert.deepEqual(candidate(426),""cdxxvi"");
  assert.deepEqual(candidate(500),""d"");
  assert.deepEqual(candidate(1),""i"");
  assert.deepEqual(candidate(4),""iv"");
  assert.deepEqual(candidate(43),""xliii"");
  assert.deepEqual(candidate(90),""xc"");
  assert.deepEqual(candidate(94),""xciv"");
  assert.deepEqual(candidate(532),""dxxxii"");
  assert.deepEqual(candidate(900),""cm"");
  assert.deepEqual(candidate(994),""cmxciv"");
  assert.deepEqual(candidate(1000),""m"");
}

test();"
HumanEval_157,asm_Beng,ts,"//উদাহৰণঃ//৯০ ডিগ্ৰী।//এটা সমকোণযুক্ত ত্ৰিভুজ হৈছে এটা ত্ৰিভুজ য'ত এটা কোণ সঠিক কোণ বা //ইয়াৰ দুয়োটা পক্ষই এটা সোঁ কোণযুক্ত ত্ৰিভুজ গঠন কৰে, অন্যথা ভুল।//এটা ত্ৰিভুজৰ তিনিটা পক্ষৰ দৈৰ্ঘ্য দিয়া হৈছে। যদি তিনিটা // >>> right_angle_triangle(3, 4, 5)
// true
// >>> right_angle_triangle(1, 2, 3)
// false
function right_angle_triangle(a: number, b: number, c: number): boolean {
","function right_angle_triangle(a: number, b: number, c: number): boolean {
    const sides = [a, b, c].sort((x, y) => x - y);
    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = right_angle_triangle;
  assert.deepEqual(candidate(3, 4, 5),true);
  assert.deepEqual(candidate(1, 2, 3),false);
  assert.deepEqual(candidate(10, 6, 8),true);
  assert.deepEqual(candidate(2, 2, 2),false);
  assert.deepEqual(candidate(7, 24, 25),true);
  assert.deepEqual(candidate(10, 5, 7),false);
  assert.deepEqual(candidate(5, 12, 13),true);
  assert.deepEqual(candidate(15, 8, 17),true);
  assert.deepEqual(candidate(48, 55, 73),true);
  assert.deepEqual(candidate(1, 1, 1),false);
  assert.deepEqual(candidate(2, 2, 10),false);
}

test();"
HumanEval_158,asm_Beng,ts,"//শব্দকোষীয় ক্ৰমত প্ৰথম যিটো আখৰ আহিছে তাক ঘূৰাই দিয়ক।//যদি একাধিক শাৰীসমূহত সৰ্বাধিক সংখ্যক অনন্য  থাকে//এই এৰে বিভিন্ন শব্দ ধাৰণ কৰে। সৰ্বাধিক সংখ্যক শব্দ ঘূৰাই দিব //এটা ফাংচন লিখা যি এটা ষ্ট্ৰিং এৰে গ্ৰহণ কৰে।// >>> find_max([""name"", ""of"", ""string""])
// ""string""
// >>> find_max([""name"", ""enam"", ""game""])
// ""enam""
// >>> find_max([""aaaaaaa"", ""bb"", ""cc""])
// ""aaaaaaa""
function find_max(words: string[]): string {
","function find_max(words: string[]): string {
    function uniqueCharacterCount(word: string): number {
        const uniqueChars = new Set(word);
        return uniqueChars.size;
    }

    let maxWord = words[0];
    let maxUniqueCount = uniqueCharacterCount(maxWord);

    for (let i = 1; i < words.length; i++) {
        const currentUniqueCount = uniqueCharacterCount(words[i]);
        if (
            currentUniqueCount > maxUniqueCount ||
            (currentUniqueCount === maxUniqueCount && words[i] < maxWord)
        ) {
            maxWord = words[i];
            maxUniqueCount = currentUniqueCount;
        }
    }

    return maxWord;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = find_max;
  assert.deepEqual(candidate([""name"", ""of"", ""string""]),""string"");
  assert.deepEqual(candidate([""name"", ""enam"", ""game""]),""enam"");
  assert.deepEqual(candidate([""aaaaaaa"", ""bb"", ""cc""]),""aaaaaaa"");
  assert.deepEqual(candidate([""abc"", ""cba""]),""abc"");
  assert.deepEqual(candidate([""play"", ""this"", ""game"", ""of"", ""footbott""]),""footbott"");
  assert.deepEqual(candidate([""we"", ""are"", ""gonna"", ""rock""]),""gonna"");
  assert.deepEqual(candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]),""nation"");
  assert.deepEqual(candidate([""this"", ""is"", ""a"", ""prrk""]),""this"");
  assert.deepEqual(candidate([""b""]),""b"");
  assert.deepEqual(candidate([""play"", ""play"", ""play""]),""play"");
}

test();"
HumanEval_159,asm_Beng,ts,"//উদাহৰণঃ//যদি পৰ্যাপ্ত পৰিমাণৰ গাজৰ নাথাকে, আপুনি বাকী থকা সকলো গাজৰ খাব, কিন্তু তেতিয়াও ভোকত থাকিব।//আপোনাৰ আহাৰৰ পিছত বাকী থকা কেৰাটৰ সংখ্যা ] //আপুনি [ আহাৰ খোৱাৰ পিছত খোৱা কেৰাহীৰ মুঠ সংখ্যা, ]//কিন্তু এতিয়া আপুনি দিনটোৰ আহাৰ সম্পূৰ্ণ কৰিবলৈ অধিক কেৰাচ খাব লাগে।//তুমি এটা ভোকাতুৰ কণী, আৰু তুমি ইতিমধ্যে এটা নিৰ্দিষ্ট সংখ্যক গাজৰ খাইছো,// >>> eat(5, 6, 10)
// [11, 4]
// >>> eat(4, 8, 9)
// [12, 1]
// >>> eat(1, 10, 10)
// [11, 0]
// >>> eat(2, 11, 5)
// [7, 0]
// Variables:
// @number : integer
// the number of carrots that you have eaten.
// @need : integer
// the number of carrots that you need to eat.
// @remaining : integer
// the number of remaining carrots thet exist in stock
// Constrain:
// * 0 <= number <= 1000
// * 0 <= need <= 1000
// * 0 <= remaining <= 1000
// Have fun :)
function eat(number: number, need: number, remaining: number): number[] {
","function eat(number: number, need: number, remaining: number): number[] {
    const totalEaten = number + Math.min(need, remaining);
    const carrotsLeft = Math.max(remaining - need, 0);
    return [totalEaten, carrotsLeft];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = eat;
  assert.deepEqual(candidate(5, 6, 10),[11, 4]);
  assert.deepEqual(candidate(4, 8, 9),[12, 1]);
  assert.deepEqual(candidate(1, 10, 10),[11, 0]);
  assert.deepEqual(candidate(2, 11, 5),[7, 0]);
  assert.deepEqual(candidate(4, 5, 7),[9, 2]);
  assert.deepEqual(candidate(4, 5, 1),[5, 0]);
}

test();"
HumanEval_160,asm_Beng,ts,"//অপাৰেটৰ এৰেজত কমেও এটা অপাৰেটৰ থাকে আৰু অপাৰেণ্ড এৰেজত কমেও দুটা অপাৰেণ্ড থাকে।//অপাৰেণ্ড হৈছে অ-নতিবাচক পূৰ্ণসংখ্যাৰ এটা অ্যাৰে।//অপাৰেটৰ এৰেজটোৰ দৈৰ্ঘ্য অপাৰেণ্ড এৰেজটোৰ দৈৰ্ঘ্য বিয়োগ একৰ সমান।//টোকাঃ//=> ফলাফল = 9 //ফলাফল = 2 + 3 * 4 - 5 ।//অংকন কৰা হৈছে [2, 3, 4, 5] ।//অপাৰেটৰ['+', '*', '-'] //উদাহৰণঃ//বিৰূপকৰণ (**)//তল ভাগাভাগি ( // ) //গুণন (*) //বিয়োগ (- ) //যোগ কৰা (+) //মৌলিক বীজগণিতৰ ক্ৰিয়াঃ//এই এক্সপ্ৰেছনটো আৰু ইয়াৰ মূল্যায়ন ঘূৰাই দিব।//দ্বিতীয় এৰেজটো হ'ল এটা সম্পূৰ্ণ সংখ্যাৰ এৰেজ। এই দুটা এৰেজ ব্যৱহাৰ কৰি বীজগণিত গঠন কৰা।//দুটা অংকনক্ষেত্ৰ অপাৰেটৰ আৰু অপাৰেণ্ড দিয়া হৈছে। প্ৰথম অংকনক্ষেত্ৰৰ মৌলিক বীজগণিতৰ কাৰ্য্য আছে, আৰু function do_algebra(operator: string[], operand: number[]): number {
","function do_algebra(operator: string[], operand: number[]): number {
    let expression = operand[0].toString();

    for (let i = 0; i < operator.length; i++) {
        expression += ` ${operator[i]} ${operand[i + 1]}`;
    }

    return Math.floor(eval(expression));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = do_algebra;
  assert.deepEqual(candidate([""**"", ""*"", ""+""], [2, 3, 4, 5]),37);
  assert.deepEqual(candidate([""+"", ""*"", ""-""], [2, 3, 4, 5]),9);
  assert.deepEqual(candidate([""//"", ""*""], [7, 3, 4]),8);
}

test();"
HumanEval_161,asm_Beng,ts,"//উদাহৰণসমূহ//ফাংশনটোৱে ফলাফলৰ শাৰীটো ঘূৰাই দিব লাগে।//যদি string ত কোনো আখৰ নাই, string ৰ বিৰতি কৰক.//অন্যথা যিদৰে আছে তেনেকৈয়ে থাকক।//যদি s[i] এটা আখৰ হয়, ইয়াৰ কেচটো তলৰ পৰা ওপৰলৈ বা বিপৰীতলৈ উলট-পালট কৰা,//আপোনাক এটা ষ্ট্ৰিং দিয়া হৈছে।// >>> solve(""1234"")
// ""4321""
// >>> solve(""ab"")
// ""AB""
// >>> solve(""#a@C"")
// ""#A@c""
function solve(s: string): string {
","function solve(s: string): string {
    let hasLetter = /[a-zA-Z]/.test(s);
    if (hasLetter) {
        return s.split('').map(char => {
            if (/[a-z]/.test(char)) {
                return char.toUpperCase();
            } else if (/[A-Z]/.test(char)) {
                return char.toLowerCase();
            } else {
                return char;
            }
        }).join('');
    } else {
        return s.split('').reverse().join('');
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solve;
  assert.deepEqual(candidate(""AsDf""),""aSdF"");
  assert.deepEqual(candidate(""1234""),""4321"");
  assert.deepEqual(candidate(""ab""),""AB"");
  assert.deepEqual(candidate(""#a@C""),""#A@c"");
  assert.deepEqual(candidate(""#AsdfW^45""),""#aSDFw^45"");
  assert.deepEqual(candidate(""#6@2""),""2@6#"");
  assert.deepEqual(candidate(""#$a^D""),""#$A^d"");
  assert.deepEqual(candidate(""#ccc""),""#CCC"");
}

test();"
HumanEval_162,asm_Beng,ts,"//যদি 'text' এটা খালী স্ট্ৰিং হয়, undefined ঘূৰাই দিব.//এটা 'text' স্ট্ৰিং দিয়া হৈছে, ইয়াৰ md5 হেশ্ব সমতুল্য ষ্ট্ৰিং ঘূৰাই দিয়ক।// >>> string_to_md5(""Hello world"")
// ""3e25960a79dbc69b674cd4ec67a72c62""
function string_to_md5(text: string): string | undefined {
","import * as crypto from 'crypto';

function string_to_md5(text: string): string | undefined {
    if (text === """") {
        return undefined;
    }
    return crypto.createHash('md5').update(text).digest('hex');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_to_md5;
  assert.deepEqual(candidate(""Hello world""),""3e25960a79dbc69b674cd4ec67a72c62"");
  assert.deepEqual(candidate(""""),undefined);
  assert.deepEqual(candidate(""A B C""),""0ef78513b0cb8cef12743f5aeb35f888"");
  assert.deepEqual(candidate(""password""),""5f4dcc3b5aa765d61d8327deb882cf99"");
}

test();"
HumanEval_163,asm_Beng,ts,"//উদাহৰণস্বৰূপেঃ//আৰু b, ক্ৰমান্বয়ে।//দুটা ধনাত্মক পূৰ্ণ সংখ্যা a আৰু b দিয়া হ'লে, a আৰু b ৰ মাজৰ সমসংখ্যাৰ অংকটো ঘূৰাই দিয়া// >>> generate_integers(2, 8)
// [2, 4, 6, 8]
// >>> generate_integers(8, 2)
// [2, 4, 6, 8]
// >>> generate_integers(10, 14)
// []
function generate_integers(a: number, b: number): number[] {
","function generate_integers(a: number, b: number): number[] {
    let result: number[] = [];
    
    // Get starting and ending points in sorted order
    let start = Math.min(a, b);
    let end = Math.max(a, b);
    
    // Loop through the range
    for (let i = start; i <= end; i++) {
        if (i % 2 === 0) {  // Check if the digit is even
            result.push(i);
        }
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = generate_integers;
  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);
  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);
  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);
  assert.deepEqual(candidate(17, 89),[]);
}

test();"
