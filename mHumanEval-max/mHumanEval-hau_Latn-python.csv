task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,hau_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Bincika idan a cikin jerin lambobi, akwai wasu lambobi biyu da ke kusa da juna fiye da ƙayyadadden ƙayyadaddun. Misali: >>> yana da_kusa_dabaru (([1.0, 2.0, 3.0], 0.5) Ƙarya >>> yana da_kusa_dabaru (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Gaskiya """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,hau_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Shigar da wannan aiki ne mai kirtani dauke da mahara kungiyoyin nested iyaye. Ka burin shi ne ya raba wadanda kungiyar a cikin raba kirtani da kuma dawo da jerin wadanda. Raba kungiyoyin ne daidaita (kowane bude goyon baya ne yadda ya kamata rufe) kuma ba nested a cikin juna. watsi da wani sarari a cikin shigar da kirtani. Misali: >>> separate_paren_groups' ((( ) (() (()))))) ' [' ((() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,hau_Latn,python,"

def truncate_number(number: float) -> float:
    """"""An ba da lambar mai canzawa mai kyau, ana iya rushe shi zuwa kashi ɗaya (mafi girma mafi ƙanƙanta fiye da lambar da aka ba) da kuma ƙididdiga (rabon da ya rage ya fi ƙasa da 1). Dawo da ɓangaren ƙididdiga na lambar. Misali: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,hau_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Ana ba ku jerin ayyukan ajiya da cirewa a kan asusun banki wanda ya fara da ragowar sifili. Aikinku shine gano idan a kowane lokaci ma'aunin asusun ya faɗi ƙasa da sifili, kuma a wannan lokacin aikin ya kamata ya dawo Gaskiya. In ba haka ba ya kamata ya dawo Ƙarya. Misali: >>> below_zero([1, 2, 3]) Ƙarya >>> below_zero([1, 2, -4, 5]) Gaskiya """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,hau_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Don jerin sunayen lambobin shigarwa, ƙididdige Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'anar Ma'ana Ma'anar Ma'anar Ma'ana Ma'anar Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana Ma'ana""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,hau_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Shigar da lamba 'delimeter' tsakanin kowane abubuwa biyu na jerin shigarwar jerin `numbers' >>> intersperse (([], 4) [] >>> intersperse (([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,hau_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Input to wannan aiki ne mai kirtani wakilci mahara kungiyoyin for nested iyaye rabu da sarari. Ga kowane daga cikin kungiyar, fitarwa da mafi zurfi matakin nesting na iyaye. Alal misali (() (()) yana da matsakaicin biyu matakan nesting yayin da ((())) yana da uku. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,hau_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Tace jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin""""""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,hau_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Don jerin jerin lambobi, dawo da wani nau'i wanda ya ƙunshi jimlar da samfurin dukkan lambobi a cikin jerin. Ƙididdiga mara kyau ya zama daidai da 0 kuma samfurin banza ya zama daidai da 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,hau_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Daga jerin jerin lambobi, samar da jerin abubuwan da aka samo a cikin jerin abubuwan da aka samo har zuwa lokacin da aka ba da shi a cikin jerin. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,hau_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Nemo gajeren palindrome wanda ya fara da kirtani da aka bayar. Ra'ayin algorithm mai sauki ne: - Nemo mafi tsawo postfix na kirtani da aka bayar wanda yake palindrome. - Haɗa zuwa ƙarshen kirtani na kirtani na prefix wanda ya zo kafin palindromic suffix. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Gwaji idan an ba da kirtani ne palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,hau_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input ne biyu kirtani a da b kunshi kawai 1s da 0s. Yi binary XOR a kan wadannan bayanai da kuma dawo da sakamakon kuma a matsayin kirtani. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,hau_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Daga jerin kirtani, dawo da mafi tsawo. Koma na farko idan akwai kirtani da yawa na tsawon guda. Koma Babu idan jerin shigarwa ba komai. >>> mafi tsawo (([]) >>> mafi tsawo ((['a', 'b', 'c']) 'a' >>> mafi tsawo ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,hau_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Dawo da mafi girma na kowa rabawa na biyu integers a da b >>> mafi girma_common_divisor ((3, 5) 1 >>> mafi girma_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,hau_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Dawo da jerin duk prefixes daga gajere zuwa mafi tsawo na shigar da kirtani >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,hau_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Dawo da kirtani mai dauke da lambobin da aka iyakance ta sarari daga 0 har zuwa n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,hau_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Ganin wani kirtani, gano yadda da yawa bambance bambancen haruffa (ko da kuwa da hali) ya ƙunshi >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,hau_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Shigar da wannan aiki ne a kirtani wakiltar music bayanin kula a cikin wani musamman ASCII format. Your aiki ne don nazarin jerin kirtani na integers daidai da yawa beats bai. Ga wani labari: 'o' bayanin kula, karshe beats hudu 'o' dakuna' - rabin bayanin kula, karshe biyu beats 'o' dakuna - quater bayanin kula, karshe daya beats >>> parse_music. 'o' dakuna . o' dakuna . o' dakuna
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,hau_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Gano sau nawa za a iya samun wani takamaiman substring a cikin asalin kirtani. Ƙidaya lokuta masu haɗuwa. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,hau_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Shigar da wani sarari-delimited kirtani na numerals daga 'sifili' to 'tara'. inganci zabi ne 'sifili', 'daya', 'biyu', 'uku', 'hudu', 'biyar', 'shida', 'bakwai', 'takwas' da kuma 'tara'. Koma kirtani da lambobi da aka jera daga karami zuwa babba >>> sort_numbers (('uku daya biyar') 'daya uku biyar' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,hau_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Daga jerin lambobin da aka bayar (na tsawon akalla biyu) zaɓi kuma dawo da biyu waɗanda suka fi kusa da juna kuma dawo da su cikin tsari (ƙaramin lamba, mafi girma lamba). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,hau_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""An ba da jerin lambobi (na aƙalla abubuwa biyu), yi amfani da canjin layi zuwa wannan jerin, ta yadda mafi ƙarancin lamba zai zama 0 kuma mafi girma zai zama 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,hau_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Tace jerin abubuwan da aka ba da kowane darajar Python kawai don lambobi masu kyau >>> tace_integers ((['a', 3.14, 5]) [5] >>> tace_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,hau_Latn,python,"

def strlen(string: str) -> int:
    """"""Koma tsawon da aka ba kirtani >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,hau_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Ga lambar da aka bayar n, sami mafi girma lambar da ya raba n ko da, karami fiye da n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,hau_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Koma jerin manyan lambobi na lambar da aka ba da umarni daga mafi ƙanƙanci zuwa mafi girma. Kowane ɗayan abubuwan da aka lissafa ya kamata a lissafa adadin lokuta daidai da sau nawa ya bayyana a cikin factorization. Lambar shigarwa ya zama daidai da samfurin dukkan abubuwan >>> factorization ((8) [2, 2, 2] >>> factorization ((25) [5, 5] >>> factorization ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,hau_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Daga jerin lambobi, cire dukkan abubuwan da suka faru fiye da sau daya. Ka kiyaye abubuwan da aka bari daidai da na shigarwa. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,hau_Latn,python,"

def flip_case(string: str) -> str:
    """"""Don a ba da kirtani, juyawa ƙananan haruffa zuwa babban da babban haruffa zuwa ƙananan. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,hau_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Jerin jerin jerin layi a cikin layi guda >>> concatenate (([]) '' >>> concatenate ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,hau_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Tace jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin jerin""""""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,hau_Latn,python,"

def get_positive(l: list):
    """"""Koma kawai lambobi masu kyau a cikin jerin. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,hau_Latn,python,"

def is_prime(n):
    """"""Koma gaskiya idan lambar da aka ba ta farko ce, kuma ba gaskiya ba in ba haka ba. >>> is_prime(6) False >>> is_prime(101) Gaskiya >>> is_prime(11) Gaskiya >>> is_prime(13441) Gaskiya >>> is_prime(61) Gaskiya >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,hau_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs sune coefficients na polynomial. find_zero sami x irin wannan poly(x) = 0. find_zero ya dawo kawai kawai ma'anar sifili, koda kuwa akwai da yawa. Bugu da ƙari, find_zero kawai yana ɗaukar jerin xs da ke da adadin adadin coefficients da kuma mafi girma ba tare da ma'auni ba kamar yadda yake tabbatar da bayani. >>> zagaye (((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> zagaye (((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Yana kimanta polynomial tare da coefficients xs a aya x. dawo xs[0] + xs [1] * x + xs [1] * x ^ 2 + .... xs [n] * x ^ n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,hau_Latn,python,"

def sort_third(l: list):
    """"""Wannan aikin yana ɗaukar jerin l kuma ya dawo da jerin l' irin wannan cewa l' daidai yake da l a cikin alamun da ba za a iya raba su da uku ba, yayin da ƙimominsa a alamun da za a iya raba su da uku daidai suke da ƙimomin alamun da suka dace na l, amma an tsara su. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,hau_Latn,python,"

def unique(l: list):
    """"""Komawa abubuwa masu ban mamaki da aka tsara a cikin jerin >>> na musamman (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,hau_Latn,python,"

def max_element(l: list):
    """"""Koma mafi girman kashi a cikin jerin. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,hau_Latn,python,"

def fizz_buzz(n: int):
    """"""Koma yawan lokutan da lambar 7 ta bayyana a cikin lambobi masu ƙarancin n waɗanda ke rarrabuwa ta 11 ko 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,hau_Latn,python,"

def sort_even(l: list):
    """"""Wannan aikin yana ɗaukar jerin l kuma ya dawo da jerin l 'kamar yadda l' ya yi daidai da l a cikin alamun da ba daidai ba, yayin da ƙimominsa a cikin alamun ma'auni daidai suke da ƙimomin alamun ma'auni na l, amma an tsara su. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,hau_Latn,python,"

def encode_cyclic(s: str):
    """"""yana daukan matsayin shigar da kirtani encoded tare da encode_cyclic aiki. Koma decoded kirtani. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""dawo da lambar da aka sanya ta hanyar ƙungiyoyin halayen halayen uku. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,hau_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib ya dawo da lambar n-th wanda shine lambar Fibonacci kuma shima firamare ne. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,hau_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero yana ɗaukar jerin lambobi masu ɗorewa azaman shigarwa. yana dawowa Gaskiya idan akwai abubuwa daban-daban guda uku a cikin jerin waɗanda suka tara zuwa sifili, kuma Karya in ba haka ba. >>> triples_sum_to_zero (([1, 3, 5, 0]) Karya >>> triples_sum_to_zero (([1, 3, -2, 1]) Gaskiya >>> triples_sum_to_zero (([1, 2, 3, 7]) Karya >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) Gaskiya >>> triples_sum_to_zero [1]) Karya """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,hau_Latn,python,"

def car_race_collision(n: int):
    """"""Ka yi tunanin wata hanya wadda take madaidaiciya madaidaiciya madaidaiciya. motoci n suna tafiya daga hagu zuwa dama; lokaci guda, wasu motoci n suna tafiya daga dama zuwa hagu. Saitunan motoci biyu sun fara nesa da juna. Duk motocin suna tafiya a cikin sauri guda. Ana cewa motoci biyu sun yi karo lokacin da motar da ke motsawa daga hagu zuwa dama ta buga motar da ke motsawa daga dama zuwa hagu. Duk da haka, motocin suna da ƙarfi da ƙarfi; a sakamakon haka, suna ci gaba da tafiya a cikin hanyar su kamar ba su yi karo ba. Wannan aikin yana fitar da adadin irin wannan haɗari.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,hau_Latn,python,"

def incr_list(l: list):
    """"""Jerin dawowa tare da abubuwan da aka haɓaka da 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,hau_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero yana ɗaukar jerin lambobi masu ɗorewa azaman shigarwa. yana dawowa Gaskiya idan akwai abubuwa daban-daban guda biyu a cikin jerin waɗanda suka tara zuwa sifili, kuma Karya in ba haka ba. >>> pairs_sum_to_zero (([1, 3, 5, 0]) Karya >>> pairs_sum_to_zero (([1, 3, -2, 1]) Karya >>> pairs_sum_to_zero (([1, 2, 3, 7]) Karya >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) Gaskiya >>> pairs_sum_to_zero (([1]) Karya """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,hau_Latn,python,"

def change_base(x: int, base: int):
    """"""Canja lambar tushe na shigar da lambar x zuwa tushe. dawo da wakilcin kirtani bayan juyawa. lambobin tushe sun fi ƙasa da 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,hau_Latn,python,"

def triangle_area(a, h):
    """"""Ganin tsawon gefen da kuma babban dawowar yanki don alwatika. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,hau_Latn,python,"

def fib4(n: int):
    """"""Lambar lambar Fib4 jerin tsari ne mai kama da jerin Fibbonacci wanda aka ayyana kamar haka: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Da fatan za a rubuta aiki don ƙididdige ma'auni na n-th na jerin lambobin fib4. Kada ku yi amfani da maimaitawa. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,hau_Latn,python,"

def median(l: list):
    """"""Komawa tsakiyar abubuwa a cikin jerin l. >>> tsakiya (([3, 1, 2, 4, 5]) 3 >>> tsakiya (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,hau_Latn,python,"

def is_palindrome(text: str):
    """"""Bincike idan aka ba da kirtani palindrome ne >>> is_palindrome (('') Gaskiya ne >>> is_palindrome (('aba') Gaskiya ne >>> is_palindrome (('aaaaa') Gaskiya ne >>> is_palindrome (('zbcd') Ƙarya """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,hau_Latn,python,"

def modp(n: int, p: int):
    """"""Koma 2 ^ n modulo p (ku kasance da hankali ga lambobi). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,hau_Latn,python,"

def encode_shift(s: str):
    """"""yana daukan matsayin shigar da kirtani encoded tare da encode_shift aiki. Koma decoded kirtani. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""dawo da lambar da aka sanya ta hanyar sauya kowane hali da 5 a cikin haruffa. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,hau_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels wani aiki ne wanda yake ɗaukar kirtani kuma yana dawo da kirtani ba tare da muryoyi ba. >>> remove_vowels (('') ' ' >>> remove_vowels (('abcdef\nghijklm') ' bcdf\nghjklm' >>> remove_vowels (('abcdef') ' bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') ' B' >>> remove_vowels (('zbcd') 'zbcd """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,hau_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Koma Gaskiya idan duk lambobi a cikin jerin l suna ƙasa da ƙofar t. >>> below_threshold (([1, 2, 4, 10], 100) Gaskiya >>> below_threshold (([1, 20, 4, 10], 5) Ƙarya """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,hau_Latn,python,"

def add(x: int, y: int):
    """"""Ƙara lambobi biyu x da y >>> ƙara ((2, 3) 5 >>> ƙara ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,hau_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Bincika idan kalmomi biyu suna da haruffa iri ɗaya. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Gaskiya ne >>> same_chars (('abcd', 'dddddddabc') Gaskiya ne >>> same_chars (('dddddddabc', 'abcd') Gaskiya ne >>> same_chars (('eabcd', 'dddddddddabc') Ƙarya >>> same_chars ((('abcd', 'dddddddabddce') Ƙarya >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Ƙarya """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,hau_Latn,python,"

def fib(n: int):
    """"""Koma lambar Fibonacci ta n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,hau_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets jerin ""<"" da "">"". dawo Gaskiya idan kowane buɗewa yana da madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaicin madaidaiciya""""""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,hau_Latn,python,"

def monotonic(l: list):
    """"""Koma Gaskiya ne jerin abubuwa suna haɓaka ko raguwa. >>> monotonic (([1, 2, 4, 20]) Gaskiya >>> monotonic (([1, 20, 4, 10]) Ƙarya >>> monotonic (([4, 1, 0, -10]) Gaskiya """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,hau_Latn,python,"

def common(l1: list, l2: list):
    """"""Komawa da aka tsara abubuwa na musamman na yau da kullum don jerin sunayen biyu. >>> na kowa (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> na kowa (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,hau_Latn,python,"

def largest_prime_factor(n: int):
    """"""Koma mafi girma firam factor na n. Ka ɗauka n > 1 kuma ba firam ba ne. >>> mafi girma_firam_factor ((13195) 29 >>> mafi girma_firam_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,hau_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n aiki ne wanda ya tara lambobi daga 1 zuwa n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,hau_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ne a jere na ""("" da kuma "")"". dawo Gaskiya ne idan kowane bude bracket yana da daidai da rufe bracket. >>> correct_bracketing(""("") Ƙarya >>> correct_bracketing(""() Gaskiya ne >>> correct_bracketing(""())) Gaskiya ne >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,hau_Latn,python,"

def derivative(xs: list):
    """"""xs wakiltar coefficients na polynomial. xs[0] + xs[1] * x + xs[2] * x ^ 2 + .... Koma daftarin wannan polynomial a cikin wannan nau'i. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,hau_Latn,python,"

def fibfib(n: int):
    """"""Lambar lambar FibFib jerin tsari ne mai kama da jerin Fibbonacci wanda aka ayyana kamar haka: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Da fatan za a rubuta aiki don ƙididdige ƙididdigar n-th na jerin lambobin fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,hau_Latn,python,"
FIX = """"""Rubuta wani aiki vowels_count wanda yake ɗaukar kirtani mai wakiltar kalma a matsayin shigarwa kuma ya dawo da adadin kalmomin da ke cikin kirtani. 'Yan wasa a wannan yanayin sune' a ', 'e', 'i', 'o', 'u'. A nan, 'y' ma murya ce, amma kawai lokacin da yake a ƙarshen kalmar da aka bayar. Misali: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Ƙara ƙarin gwajin gwaji. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,hau_Latn,python,"
def circular_shift(x, shift):
    """"""Da'irar motsa lambobi na lamba x, motsa lambobi dama ta hanyar motsawa kuma dawo da sakamakon azaman kirtani. Idan motsawa > yawan lambobi, dawo da lambobi a juye. >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,hau_Latn,python,"
def digitSum(s):
    """"""Aiki Rubuta wani aiki wanda yake ɗaukar kirtani a matsayin shigarwa kuma ya dawo da adadin haruffan sama kawai' ASCII lambobin. Misalai: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,hau_Latn,python,"
def fruit_distribution(s,n):
    """"""A cikin wannan aiki, za a ba ku kirtani wanda ke wakiltar adadin apples da lemu da aka rarraba a cikin kwandon 'ya'yan itace wannan kwandon ya ƙunshi apples, lemu, da kuma mango' ya'yan itatuwa. Ba da kirtani wanda ke wakiltar jimlar adadin lemu da apples da kuma wani lamba da wakiltar jimlar yawan 'ya'yan itatuwa a cikin kwandon dawo da yawan mango 'ya'yan itatuwa a cikin kwandon. ga misali: fruit_distribution""5( apples da 6 lemu"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apples da 1 lemu"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples da 3 lemu"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples da 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,hau_Latn,python,"
def pluck(arr):
    """"""""An ba da wani tsari mai wakiltar reshe na itace wanda ke da ƙididdigar ƙididdiga masu ƙididdiga marasa kyau aikinku shine cire ɗaya daga cikin nodes kuma dawo da shi. Ƙungiyar da aka cire ya kamata ta kasance ƙwanƙwasa tare da mafi ƙarancin ma'auni. Idan an sami nodes da yawa tare da mafi ƙarancin ma'auni guda ɗaya dawo da ƙwanƙwasa wanda ke da ƙaramin ƙididdiga. Ƙungiyar da aka cire ya kamata a dawo a cikin jerin, [mafi ƙanƙanta_ ƙimar, ƙididdigar ta ], Idan babu ma'auni ko kuma tsarin da aka ba shi fanko, dawo da []. Misali: 1: Input: [4,2,3] Fitarwa: [2, 1] Bayani: 2 yana da mafi ƙanƙanci ma'auni, kuma 2 yana da mafi ƙanƙanci ƙididdiga. Misali: Input: [1,2,3] Fitarwa: [2, 1] Bayani: 2 yana da mafi ƙanƙanci ƙimar, kuma 2 yana da mafi ƙanƙanci ƙididdiga. Misali: Input: [3,] Fitarwa: [4,5,] Input: [0, 3, 2] Output: 1 Output: 0 Ƙididdigar da ƙididdigar mafi ƙan ƙarancin ma'auni yana da mafi ƙanƙanci, amma akwai ƙarancin ƙarancin ƙididdiga biyu. Misali: * * * * Misali: * Ƙananan ƙididdigar farko shine ƙarancin ƙarancin ƙarancin ƙarancin ƙira, amma akwai ƙarancin ƙarancin ƙarancin ƙarancin ƙarancin ƙira.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,hau_Latn,python,"
def search(lst):
    '''An ba ku jerin abubuwan da ba na banza ba. Koma mafi girma da ke da girma fiye da sifili, kuma yana da mita fiye da ko daidai da darajar da ke cikin jerin. Yawan adadin ne yawan lokutan da ya bayyana a cikin jerin. Idan babu irin wannan darajar, dawo -1. Misalai: bincika (([4, 1, 2, 2, 3, 1]) == 2 bincika ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 bincika ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,hau_Latn,python,"
def strange_sort_list(lst):
    '''Ba da jerin lambobi, dawo da jerin a cikin tsari mai ban mamaki. Tsarin ban mamaki, shine lokacin da ka fara da mafi ƙarancin darajar, to, mafi yawan sauran lambobi, to, mafi ƙaranci da sauransu. Misalai: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,hau_Latn,python,"
def triangle_area(a, b, c):
    '''Ganin tsawon bangarorin uku na alwatika. Dawo da yankin na alwatika zagaye zuwa 2 goma maki idan bangarorin uku samar da wani inganci alwatika. In ba haka ba dawo -1 Uku bangarorin yin inganci alwatika lokacin da jimlar kowane bangarorin biyu ne mafi girma daga na uku gefen. Misali: triangle_area ((3, 4, 5) == 6.00 triangle_area ((1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,hau_Latn,python,"
def will_it_fly(q,w):
    '''Rubuta wani aiki da ya dawo Gaskiya idan abu q zai tashi, kuma Karya in ba haka ba. Abu q zai tashi idan yana da daidaito (jerin palindromic ne) kuma jimlar abubuwansa sun fi ƙasa ko daidai da matsakaicin nauyin da zai yiwu w. Misali: will_it_fly (([1, 2], 5) â -> Karya # 1+2 ya fi ƙasa da matsakaicin nauyin da zai yiwu, amma ba shi da daidaito. will_it_fly (([3, 2, 3], 1) â -> Karya # yana da daidaito, amma 3+2+3 ya fi ƙarfin matsakaicin nauyin da zai yiwu. will_it_fly (([3, 2, 3], 9) â -> Gaskiya # 3+23 ya fi ƙarfin matsakaicin nauyin da zai yiwu, kuma yana da daidaito. will_it_fly ((([3], â 5) -> Gaskiya # 3 ya fi ƙarfin matsakaicin nauyin da zai yiwu, kuma yana da daidaito.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,hau_Latn,python,"
def smallest_change(arr):
    """"""Idan aka ba da jerin lambobi, sami mafi ƙarancin adadin abubuwan da ake buƙatar canzawa don yin jerin lambobi. Lambar palindromic ita ce jerin da aka karanta iri ɗaya a baya da gaba. A cikin canji ɗaya, zaku iya canza wani abu zuwa kowane abu. Misali: ƙarami_canji (([1,2,3,5,4,7,9,6]) == 4 ƙarami_canji (([1, 2, 3, 4, 3, 2, 2]) == 1 ƙarami_canji (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,hau_Latn,python,"
def total_match(lst1, lst2):
    '''Rubuta wani aiki da ya yarda da jerin jerin layi guda biyu kuma ya dawo da jerin da ke da adadin adadin a cikin jerin jerin jerin sunayen da ba su da sauran jerin. idan jerin sunayen biyu suna da adadin haruffa, dawo da jerin farko. Misalai total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi]) â -> ['hI', 'hi'], 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,hau_Latn,python,"
def is_multiply_prime(a):
    """"""Rubuta wani aiki wanda ya dawo da gaskiya idan lambar da aka bayar ita ce ta ninka lambobi 3 na farko kuma ba gaskiya ba. Sanin cewa (a) ya fi ƙasa da 100. Misali: is_multiply_prime ((30) == Gaskiya 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,hau_Latn,python,"
def is_simple_power(x, n):
    """"""Aikinku shine rubuta aikin da ya dawo da gaskiya idan lambar x ita ce mai sauƙi na n da ƙarya a wasu lokuta. x ne mai sauƙi na n idan n **int = x Alal misali: is_simple_power ((1, 4) => gaskiya ne_simple_power ((2, 2) => gaskiya ne_simple_power ((8, 2) => gaskiya ne_simple_power ((3, 2) => ƙarya ne_simple_power ((3, 1) ƙarya => ƙarya ne_simple_power ((5, 3) => ƙarya """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,hau_Latn,python,"
def iscube(a):
    '''Rubuta wani aiki daukan wani lamba mai lamba a kuma ya dawo Gaskiya idan wannan ingeger ne mai kwakwalwa na wasu lamba mai lamba. Lura: za ka iya ɗauka da shigar da shi ne ko da yaushe inganci. Misalai: iscube ((1) ==> Gaskiya ne iscube ((2) ==> False iscube ((-1) ==> Gaskiya ne iscube ((64) ==> Gaskiya ne iscube ((0) ==> Gaskiya ne iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,hau_Latn,python,"
def hex_key(num):
    """"""An umarce ku da ku rubuta wani aiki wanda ke karɓar lambar hexadecimal a matsayin kirtani kuma yana ƙidaya adadin lambobi na hexadecimal waɗanda suke na farko (lambar firam, ko firam, adadi ne na halitta mafi girma fiye da 1 wanda ba samfurin ƙananan lambobi biyu ba). Lambobi na hexadecimal sune 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Lambobi na firam sune 2, 3, 5, 7, 11, 13, 17,... Don haka dole ne ku tantance adadin waɗannan lambobi masu zuwa: 2, 3, 5, 7, B (= na goma sha ɗaya 11), D (= na goma sha uku 13). Lura: zaku iya ɗauka shigarwar koyaushe daidai ne ko madaidaiciya, kuma alamomin A, B, C, D, E, F, koyaushe manyan lambobi ne. Misalai: Don num ""AB"" fitowar ya kamata ya zama num = 1. Don num = 1077E fitowar ya kamata ya zama 2. Don num = ""AB"" ya kamata ya zama num = 1.33A ""ABC"" ya kamata ya zama num = 4.123ABC ""A"" ya kamata ya zama 6.06745DEF ""2020"" don fitarwa ya zama num = 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,hau_Latn,python,"
def decimal_to_binary(decimal):
    """"""Za a ba ku lamba a cikin nau'i na goma kuma aikinku shine canza shi zuwa tsarin binary. Aikin ya kamata ya dawo da kirtani, tare da kowane hali yana wakiltar lambar binary. Kowane hali a cikin kirtani zai zama '0' ko '1'. Za a sami karin wasu haruffa 'db' a farkon da kuma ƙarshen kirtani. Karin haruffa suna nan don taimakawa tare da tsari. Misalai: decimal_to_binary ((15) # dawo da ""db1111db"" decimal_to_binary32) # dawo da ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,hau_Latn,python,"
def is_happy(s):
    """"""An ba ku kirtani s. Aikinku shine bincika ko kirtani yana da farin ciki ko a'a. Kirtani yana da farin ciki idan tsawonsa ya kasance aƙalla 3 kuma kowane haruffa 3 masu jere sun bambanta Misali: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => Gaskiya ne_happy ((aabb) => False is_happy ((adb) => Gaskiya ne_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,hau_Latn,python,"
def numerical_letter_grade(grades):
    """"""Yana da makon da ya gabata na semester da malami yana da ba da maki ga dalibai. Malami ya aka yin ta kansa algorithm ga grading. The kawai matsala shi ne, ta ya rasa lambar ta yi amfani da ga grading. Ta ya ba ka jerin GPAs ga wasu dalibai da kuma dole ka rubuta wani aiki da za su iya fitarwa da jerin wasika maki ta amfani da wadannan tebur: GPA. Letter daraja 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B- > 2.3 B- > 2.0 C + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 E misali: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,hau_Latn,python,"
def prime_length(string):
    """"""Rubuta wani aiki da ke ɗaukar kirtani kuma ya dawo Gaskiya idan tsayin kirtani lambobi ne ko Ƙarya in ba haka ba Misalai prime_length (('Hello') == Gaskiya prime_length (('abcdcba') == Gaskiya prime_length (('kittens') == Gaskiya prime_length (('orange') == Ƙarya """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,hau_Latn,python,"
def starts_one_ends(n):
    """"""Ganin tabbatacce lamba n, dawo da count na lambobin n-lambar tabbatacce integers cewa fara ko kawo karshen tare da 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,hau_Latn,python,"
def solve(N):
    """"""Ganin wani tabbatacce lamba N, dawo da jimlar da lambobi a binary. Misali Domin N = 1000, da jimlar lambobi zai zama 1 da fitarwa ya zama ""1"". Domin N = 150, da jimlar lambobi zai zama 6 da fitarwa ya zama ""110"". Domin N = 147, da jimlar lambobi zai zama 12 da fitarwa ya zama ""1100"". Abubuwan da ke canzawa: @N lamba mai lamba: 0 â‰¤ N â‰¤ 10000. Fitarwa: jerin lambobi na binary """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,hau_Latn,python,"
def add(lst):
    """"""Ba da jerin abubuwan da ba a banza ba na cikakkun lambobi lst. ƙara abubuwa ma da suke a alamomi marasa daidaituwa .. Misalai: ƙara (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,hau_Latn,python,"
def anti_shuffle(s):
    """"""Rubuta wani aiki da daukan kirtani da kuma dawo da wani tsari version na shi. tsari version na kirtani, shi ne kirtani inda duk kalmomi (raba ta sarari) an maye gurbinsu da wani sabon kalma inda duk haruffa shirya a cikin hauhawar tsari bisa ga ascii darajar. Note: Ya kamata ka ci gaba da tsari na kalmomi da kuma blank sarari a cikin jumla. Alal misali: anti_shuffle ((('Hi') dawo da 'Hi' anti_shuffle ((('hello') dawo da 'ehllo' anti_shuffle (('Hello World!!!') dawo da 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,hau_Latn,python,"
def get_row(lst, x):
    """"""Ana ba ku bayanai na 2-dimensional, a matsayin jerin jerin abubuwa, wanda yake kama da matrix, duk da haka, ba kamar matrix ba, kowane jere na iya ƙunsar nau'i daban-daban na ginshiƙai. Ba da lst, da kuma lamba x, sami integers x a cikin jerin, da kuma dawo da jerin jerin tuples, [(x1, y1), (x2, y2) ...] irin wannan cewa kowane tuple ne mai tsarawa - ( jere, ginshiƙai), farawa da 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,hau_Latn,python,"
def sort_array(array):
    """"""An ba da jerin lambobi marasa kyau, dawo da kwafin jerin da aka ba da bayan rarrabuwa, za ku rarraba jerin da aka ba da su a cikin tsari mai tasowa idan adadin ((darajar ƙididdigar farko, ƙimar ƙididdigar ƙarshe) ba shi da kyau, ko kuma ku rarraba shi a cikin tsari mai saukowa idan adadin ((darajar ƙididdigar farko, ƙimar ƙididdigar ƙarshe) ma. Lura: * kar ku canza jerin da aka ba. Misalai: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6]  0""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,hau_Latn,python,"
def encrypt(s):
    """"""Ƙirƙiri aiki encrypt wanda ke ɗaukar kirtani a matsayin hujja kuma ya dawo da kirtani da aka ɓoye tare da haruffan da aka juya. Ya kamata a juya haruffan ta hanyar da haruffa ke motsawa ta biyu ta ninka zuwa wurare biyu. Alal misali: encrypt (('hi') ya dawo 'lm' encrypt (('asdfghjkl') ya dawo 'ewhjklnop' encrypt (('gf') ya dawo 'kj' encrypt (('et') ya dawo 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,hau_Latn,python,"
def next_smallest(lst):
    """"""An ba ku jerin lambobi. Rubuta aiki na gaba_mafi ƙanƙanta (() wanda ya dawo da ƙaramin abu na 2 na jerin. Koma Babu idan babu irin wannan abu. gaba_mafi ƙanƙanta (([1, 2, 3, 4, 5]) == 2 gaba_mafi ƙanƙanta (([5, 1, 4, 3, 2]) == 2 gaba_mafi ƙanƙanta (([]) == Babu gaba_mafi ƙanƙanta (([1, 1]) == Babu """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,hau_Latn,python,"
def is_bored(S):
    """"""Za a ba ku jerin kalmomi, kuma aikinku shi ne ƙidaya adadin rashin jin daɗi. Rashin jin daɗi jumla ce da ta fara da kalmar ""I"". Ana rarraba jumla ta '.', '?' ko '!'. Misali: >>> is_bored ((""Sannu duniya"") 0 >>> is_bored ((""Sararin sama yana da shuɗi. Rana tana haskakawa. Ina son wannan yanayin"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,hau_Latn,python,"
def any_int(x, y, z):
    '''Ƙirƙiri aiki wanda yake ɗaukar lambobi 3. Yana dawowa gaskiya idan ɗaya daga cikin lambobi yayi daidai da jimlar sauran biyu, kuma duk lambobi lambobi ne. Yana dawowa ƙarya a kowane yanayi. Misalai any_int ((5, 2, 7) â -> Gaskiya any_int ((3, 2, 2) â -> Ƙarya any_int ((3, -2, 1) â -> Gaskiya any_int ((3.6, -2.2, 2) â -> Ƙarya '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,hau_Latn,python,"
def encode(message):
    """"""Rubuta wani aiki da daukan wani sako, da kuma encodes a cikin irin wannan hanyar da shi swaps hali na dukan haruffa, ya musanya duk wasulan a cikin sakon da wasika da cewa ya bayyana 2 wurare gaba da cewa wasula a cikin harshen Turanci haruffa. dauka kawai haruffa. Misalai: >>> encode('test') 'TGST' >>> encode('Wannan shi ne sako') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,hau_Latn,python,"

def skjkasdkd(lst):
    """"""Ana ba ku jerin lambobi. Kuna buƙatar samun mafi girman darajar firam kuma ku dawo da adadin lambobi. Misalai: Don lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] fitarwa ya zama 10 Don lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] fitarwa ya zama 25 Don lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] fitarwa ya zama 13 Don lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] fitarwa ya zama 11 Don lst = [0,81,12,31,21] fitarwa ya zama 3 Don lst = [0,1,8,2,1,7] fitarwa ya zama 7 Don lst = [1,1,8,2,7] fitarwa ya zama 7 Don lst = [1,8,1,2,7] fitarwa ya zama 7 Don lst = [1,1,8,2,1] fitarwa ya zama 7 Don lst = [1,1,2,2,7] fitarwa ya zama 7 Don lst = [1,1,1,2,7] fitarwa ya zama 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,hau_Latn,python,"
def check_dict_case(dict):
    """"""Ganin kamus, dawo da Gaskiya idan duk maɓallan keɓaɓɓu ne a cikin ƙananan ƙananan ko duk maɓallan keɓaɓɓu ne a cikin manyan haruffa, in ba haka ba dawo da Ƙarya. Aikin ya kamata ya dawo da Ƙarya ne a cikin ƙamus ɗin da aka ba shi. Misalai: check_dict_case{""a"":"" apple"", ""b"":"" banana""}) ya kamata ya dawo Gaskiya. check_dict_case{""a"":"" apple"", ""A"":"" banana"", ""B"":"" banana""}) ya kamata ya dawo Ƙarya. check_dict_case{""a"":"" apple"", 8:"" banana"", ""a"":"" apple""}) ya kamata ya dawo Ƙarya. check_dict_case{""Name"":"" John"", ""Age"":"" 36"", ""City"":"" Houston""}) ya kamata ya dawo da Ƙarya. check_dict_case{""NC"":"" STATE"", ""Z"":"" ZIP""}) ya kamata ya dawo Gaskiya.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,hau_Latn,python,"
def count_up_to(n):
    """"""Aiwatar da wani aiki daukan wani ba-korau lamba kuma ya dawo da wani tsararru na farko n integers cewa su ne farko lambobi da kasa da n. misali: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,hau_Latn,python,"
def multiply(a, b):
    """"""Kammala aikin da yake ɗaukar lambobi biyu kuma ya dawo da samfurin naúrar su. Ka ɗauka shigarwar koyaushe tana da inganci. Misalai: ninka ((148, 412) ya kamata ya dawo 16. ninka ((19, 28) ya kamata ya dawo 72. ninka ((2020, 1851) ya kamata ya dawo 0. ninka ((14,-15) ya kamata ya dawo 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,hau_Latn,python,"
def count_upper(s):
    """"""Ganin kirtani s, ƙidaya yawan manyan haruffa a cikin alamomi ma. Misali: count_upper (('aBCdEf') ya dawo 1 count_upper (('abcdefg') ya dawo 0 count_upper (('dBBE') ya dawo 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,hau_Latn,python,"
def closest_integer(value):
    '''Ƙirƙiri wani aiki wanda yake ɗaukar darajar (kirtani) wakiltar lamba kuma ya dawo da adadi mafi kusa da shi. Idan lambar tana da nisa daga lambobi biyu, zagaye shi daga sifili. Misalai >>> mafi kusa_integer ((""10"") 10 >>> mafi kusa_integer ((""15.3"") 15 Lura: Zagayewa daga sifili yana nufin cewa idan lambar da aka bayar tana da nisa daga lambobi biyu, wanda ya kamata ka dawo shine wanda ya fi nisa daga sifili. Misali mafi kusa_integer "" ((14.5"") ya kamata ya dawo 15 kuma mafi kusa_integer "" ((-14.5"") ya kamata ya dawo -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,hau_Latn,python,"
def make_a_pile(n):
    """"""Ba da wani m lamba n, dole ka yi a tari na n matakan duwatsu. A farko matakin yana da n duwatsu. Yawan duwatsu a cikin gaba matakin ne: - na gaba m lambar idan n ne m. - na gaba ma lamba idan n ne ma. Koma yawan duwatsu a kowane matakin a cikin wani jerin, inda kashi a index i wakiltar yawan duwatsu a cikin matakin (i + 1). Misalai: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,hau_Latn,python,"
def words_string(s):
    """"""Za a ba ku jerin kalmomi da aka raba ta hanyar commas ko sarari. Aikinku shine raba layin zuwa kalmomi kuma dawo da jerin kalmomin. Misali: words_string ((""Hi, sunana John"") == [""Hi"", ""na"", ""suna"", ""shi ne"", ""John""] words_string ((""Daya, biyu, uku, hudu, biyar, shida"") == [""Daya"", ""biyu"", ""uku"", ""hudu"", ""biyar"", ""shida""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,hau_Latn,python,"
def choose_num(x, y):
    """"""Wannan aikin yana ɗaukar lambobi biyu masu kyau x da y kuma ya dawo da mafi girman adadin lambobi waɗanda suke cikin kewayon [x, y] ciki har da. Idan babu irin wannan lambar, to aikin ya kamata ya dawo -1. Misali: zabi_lambar_12 , 15) = 14 zabi_lambar_13 , 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,hau_Latn,python,"
def rounded_avg(n, m):
    """"""An ba ku lambobi biyu masu kyau n da m, kuma aikinku shine yin lissafin matsakaicin lambobi daga n zuwa m (ciki har da n da m). Zagaye amsar zuwa lambar da ta fi kusa kuma canza shi zuwa binary. Idan n ya fi m girma, dawo -1. Misali: zagaye_avg ((1, 5) => ""0b11"" zagaye_avg ((7, 5) => -1 zagaye_avg ((10, 20) => ""0b1111"" zagaye_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,hau_Latn,python,"
def unique_digits(x):
    """"""Ganin jerin lambobi masu kyau x. dawo da jerin abubuwan da aka tsara na dukkan abubuwan da ba su da wani lambobi. Lura: Jerin da aka dawo ya kamata a rarraba shi cikin tsari mai tasowa. Misali: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,hau_Latn,python,"
def by_length(arr):
    """"""Idan aka ba da jerin lambobi, rarraba lambobi waɗanda suke tsakanin 1 da 9 haɗe, juya sakamakon jeri, sannan maye gurbin kowane lamba da sunan da ya dace daga ""Daya"", ""Biyu"", ""Uku"", ""Hudu"", ""Biyar"", ""Shida"", ""Bakwai"", ""Takwas"", ""Tsawo"". Misali: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> rarraba arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> juyawa arr -> [8, 5, 4, 3, 2, 2, 1, 1] dawo da [""Hudu"", ""Hudu"", ""Biyu"", ""Biyu"", ""Biyu"", ""Daya"", ""Daya""] Idan jeri ya zama fanko, dawo da tsari: arr = [] dawo da tsari [] Idan jeri yana da wani lamba mai ban mamaki watsi da shi: arr = [1, -1 , 55] -> arr -> [1, 1], 55 -> [5, 1] -> juyawa arr = [51] - dawo da ['One'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,hau_Latn,python,"
def f(n):
    """"""Aiwatar da aikin f wanda yake ɗaukar n a matsayin sigogi, kuma ya dawo da jerin girman n, irin wannan cewa ƙimar kashi a cikin index i shine factor na i idan i ma ko jimlar lambobi daga 1 zuwa i in ba haka ba. i yana farawa daga 1. factor na i shine ninka lambobi daga 1 zuwa i (1 * 2 * ... * i). Misali: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,hau_Latn,python,"
def even_odd_palindrome(n):
    """"""Ganin wani tabbatacce lamba n, dawo da wani tuple cewa yana da yawan ma'ana da kuma m palindromes cewa fada a cikin kewayon ((1, n), m. Misali1: Input: 3 Output: (1, 2) Bayani: Integer palindrome ne 1, 2, 3. daya daga cikinsu ne ma, da kuma biyu daga cikinsu ne m. Misali2: Input: 12 Output: (4, 6) Bayani: Integer palindrome ne 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. hudu daga cikinsu ne ma, da kuma 6 daga cikinsu ne m. Note: 1. 1 <= n <= 10 ^ 3 2. tuple ya koma da yawan ma'ana da kuma m palindromes bi da bi. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,hau_Latn,python,"
def count_nums(arr):
    """"""Rubuta aiki count_nums wanda ke ɗaukar tsararru na lambobi kuma ya dawo da adadin abubuwan da ke da adadin lambobi > 0. Idan lamba ta kasance mara kyau, to lambar sa ta farko za ta zama mara kyau: misali -123 ta sanya hannu lambobi -1, 2, da 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,hau_Latn,python,"
def move_one_ball(arr):
    """"""Muna da wani tsararru 'arr' na N integers arr[1], arr[2], ..., arr[N].The lambobi a cikin tsararru za a yi amfani da bazuwar. Aikinku shi ne a tantance idan yana yiwuwa a samu wani tsararru da aka rarraba a cikin non-ragewa domin ta hanyar yin aiki na gaba a kan ba tsararru: An yarda ka yi dama motsa aiki wani adadin sau. Daya dama motsa aiki yana nufin motsi dukan abubuwa na tsararru da daya matsayi a cikin dama shugabanci. A karshe kashi na tsararru za a koma zuwa farawa matsayi a cikin tsararru watau 0th index. Idan yana yiwuwa a samu da rarraba tsararru ta hanyar yin sama aiki sa'an nan kuma dawo Gaskiya in ba haka ba dawo False. Idan da aka ba tsararru ne m sa'an nan kuma dawo Gaskiya. Note: A ba jerin tabbas ne da musamman abubuwa. Alal misali: move_one_(ball[3, 4, 5, 2] ==> Gaskiya bayani: By performin 2 dama ayyukan, non-ragewa domin tsararru za a iya cimma. [3, 4, 5] ==> Yana da ba zai yiwu ba don yin wani dama motsawa domin da aka ba da dama matrix. ==> Bayani: 1, 2, 3, 4, 5, 2 ==> ba daidai ba daidai ba ne domin yin aiki na motsawa ba da aka ba da aka ba da dama matrix.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,hau_Latn,python,"
def exchange(lst1, lst2):
    """"""A cikin wannan matsala, za ku aiwatar da wani aiki wanda ke ɗaukar jerin lambobi guda biyu, kuma ya ƙayyade ko zai yiwu a yi musayar abubuwa tsakanin su don yin jerin lambobi guda ɗaya kawai. Babu iyaka ga yawan abubuwan da aka musayar tsakanin lst1 da lst2. Idan yana yiwuwa a musayar abubuwa tsakanin lst1 da lst2 don yin dukkan abubuwan da ke cikin lst1 su zama ma, dawo da ""YES"". In ba haka ba, dawo da ""NO"". Alal misali: musayar [1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" musayar [1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" An ɗauka cewa jerin abubuwan shigarwa ba za su zama fanko ba. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,hau_Latn,python,"
def histogram(test):
    """"""Idan aka ba da kirtani mai wakiltar haruffa masu ƙananan sarari, dawo da ƙamus na harafin da ya fi maimaitawa kuma yana ƙunshe da ƙididdigar da ta dace. Idan haruffa da yawa suna da irin wannan abin da ya faru, dawo da su duka. Misali: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4}: histogram ' ((') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,hau_Latn,python,"
def reverse_delete(s,c):
    """"""Aiki An ba mu kirtani biyu s da c, dole ne ku share dukkan haruffa a s waɗanda suka yi daidai da kowane hali a c sannan ku bincika idan sakamakon kirtani yana da palindrome. Ana kiran kirtani palindrome idan ya karanta daidai da gaba. Ya kamata ku dawo da tuple wanda ya ƙunshi sakamakon kirtani da Gaskiya / Ƙarya don dubawa. Misali Don s = ""abcde"", c = ""ae"", sakamakon ya zama ('bcd', Ƙarya) Don s = ""abcdef"", c = ""b"" sakamakon ya zama ('acdef', Ƙarya) Don s = ""abcdedcba"", c = ""ab"", sakamakon ya zama ('cdedc', Gaskiya)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,hau_Latn,python,"
def odd_count(lst):
    """"""Ba jerin jerin, inda kowane kirtani ya ƙunshi kawai lambobi, dawo da jerin. Kowane kashi i na fitarwa ya kamata ya zama ""yawan abubuwa marasa daidaituwa a cikin kirtani i na shigarwa. "" inda duk i's ya kamata a maye gurbinsu da adadin lambobi marasa daidaituwa a cikin i'th kirtani na shigarwa. >>> odd_count ['1234567']) [""yawan abubuwa marasa daidaituwa 4n da str4ng 4 na 4nput.""] >>> odd_count ['3', ""111111""]) [""yawan abubuwa marasa daidaituwa 1n da str1ng 1 na 1nput. "", ""yawan abubuwa marasa daidaituwa 8n da str8ng 8 na 8nput. ""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,hau_Latn,python,"
def minSubArraySum(nums):
    """"""Ganin wani tsararru na integers nums, sami mafi ƙarancin adadin kowane ba-takarar sub-tsararru na nums. Misali minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,hau_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""An ba ku grid na maɓuɓɓugan ruwa. Kowane jere yana wakiltar maɓuɓɓuga guda ɗaya, kuma kowane 1 a jere yana wakiltar ɗayan ruwa guda ɗaya. Kowane rijiyar yana da guga mai dacewa wanda za'a iya amfani dashi don cire ruwa daga gare ta, kuma duk guga suna da ƙarfin guda ɗaya. Aikinku shine amfani da guga don zubar da rijiyoyin. Fitar da adadin lokutan da kuke buƙatar saukar da guga. Misali 1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Output: 53: Misali: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 * 0 * 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 2 * 2 * 2 * 3 * 2 * 2 * 4 * 2 * 2 * 2 * 2 * 2 * 3 * 4 * 5 * 6 * 6 * 10 * 10 * 10 * 10 * * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * * 10 * * * 10 * * * * 10 * 10 * 10 * * * * * * * * * * 10 * * * * * * 10 * 10 * 10 * * * 10 * * * 10 * 10 * * * * 10 * 10 * * * * * 10 * 10 * * * * 10 * 10 * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,hau_Latn,python,"
def sort_array(arr):
    """"""A cikin wannan Kata, dole ne ku rarraba jerin lambobi marasa kyau bisa ga yawan wadanda suke cikin wakilcin binary a cikin tsari mai tasowa. Don irin wannan adadin wadanda suke, rarraba bisa ga darajar decimal. Dole ne a aiwatar da shi kamar haka: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,hau_Latn,python,"
def select_words(s, n):
    """"""Idan aka ba da kirtani s da lambar halitta n, an ba ku aikin aiwatar da aikin da ke dawo da jerin duk kalmomin daga kirtani s waɗanda ke ƙunshe da ainihin ragowar n, don waɗannan kalmomin su bayyana a cikin kirtani s. Idan kirtani s a banza to aikin ya kamata ya dawo da jerin wofi. Lura: kuna iya ɗauka kirtani na shigarwa ya ƙunshi haruffa da sarari kawai. Misalai: zaɓi_kalmomi ""Mary tana da ɗan rago"", 4) ==> [""little""] zaɓi_kalmomi ""Mary tana da ɗan rago"", 3) ==> [""Mary"", ""lamb""] zaɓi_kalmomi ""sarari mai sauƙi"", 2) ==> [] zaɓi_kalmomi ""Sannu duniya"", 4) ==> [""duniya""] zaɓi_kalmomi ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,hau_Latn,python,"
def get_closest_vowel(word):
    """"""Ana ba ku kalma. Aikinku shine gano mafi kusa da murya wanda yake tsaye tsakanin masu haɗin gwiwa biyu daga gefen dama na kalmar (mai hankali). Vowels a farkon da ƙarshen ba su ƙidaya ba. Komawa da layi mara kyau idan ba ku sami wani murya da ya cika yanayin da ke sama ba. Kuna iya ɗauka cewa layin da aka ba ya ƙunshi haruffa Turanci kawai. Misali: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,hau_Latn,python,"
def match_parens(lst):
    '''An ba ku jerin jerin layi biyu, duka layuka sun ƙunshi buɗe ƙuƙwalwa '(' ko rufe ƙuƙwalwa ') ' kawai. Aikinku shine bincika idan yana yiwuwa a haɗa igiyoyi biyu a cikin wasu tsari, cewa layin da aka samu zai zama mai kyau. Ana ɗaukar igiya S mai kyau ne idan kuma kawai idan duk ƙuƙwalwar a cikin S suna daidaita. Misali: kirtani '((()) 'yana da kyau, yayin da kirtani '()) 'ba haka ba. Koma 'Ee' idan akwai hanyar yin kirtani mai kyau, kuma dawo 'A'a' in ba haka ba. Misalai: match_parens[('() ', ') ']) == 'Ee' match_parens[(') ', ') ']) == 'A'a' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,hau_Latn,python,"
def maximum(arr, k):
    """"""Ganin wani tsararru na integers da kuma wani m lamba k, dawo da wani jera jerin tsawon k tare da m k lambobi a arr. Misali1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Misali2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Misali3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,hau_Latn,python,"
def solution(lst):
    """"""Ba da jerin abubuwan da ba a banza ba, dawo da jimlar dukkan abubuwa masu ban mamaki waɗanda suke a cikin matsayi. Misali bayani (([5, 8, 7, 1]) ==> 12 bayani (([3, 3, 3, 3]) ==> 9 bayani (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,hau_Latn,python,"
def add_elements(arr, k):
    """"""Ba da wani ba-takarar tsararru na integers arr da wani integers k, dawo da jimlar da abubuwa da a kalla biyu lambobi daga farko k abubuwa na arr. Misali: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # jimlar 21 + 3 constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,hau_Latn,python,"
def get_odd_collatz(n):
    """"""Ganin wani tabbatacce lamba n, dawo da wani jera jerin cewa yana da m lambobin a collatz jerin. A Collatz zato ne a zato a cikin ilmin lissafi da ya shafi jerin tsare kamar haka: fara da wani tabbatacce lamba n. Sa'an nan kowane lokaci da aka samu daga baya lokaci kamar haka: idan baya lokaci ne ma, na gaba lokaci ne daya da rabi na baya lokaci. Idan baya lokaci ne m, na gaba lokaci ne 3 sau da baya lokaci da 1. The zato ne cewa ko da abin da darajar n, jerin zai ko da yaushe kai 1. Note: 1. Collatz ((1) ne [1] 2. koma jerin jera a cikin kara domin. Alal misali: get_odd_collatz ((5) dawo [1, 5] # A collatz jerin ga 5 ne [5, 8, 16, 4, 2, 1], don haka da m lambobin ne kawai 1, da kuma 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,hau_Latn,python,"
def valid_date(date):
    """"""Dole ne ku rubuta wani aiki wanda ya tabbatar da wani kwanan wata da aka ba da kuma dawo da Gaskiya idan kwanan wata yana da inganci in ba haka ba Ƙarya. Ranar tana da inganci idan duk waɗannan ka'idoji sun gamsu: 1. Ranar kwanan wata ba ta da komai. 2. Yawan kwanakin ba kasa da 1 ko fiye da kwanaki 31 ba don watanni 1,3,5,7,8,10,12. Kuma yawan kwanakin ba kasa da 1 ko fiye da kwanaki 30 ba don watanni 4,6,9,11. Kuma, yawan kwanakin ba kasa da 1 ko fiye da 29 ba don watan 2. 3. Watanni ba su da kasa da 1 ko fiye da 12. 4. Ranar ya kamata a cikin tsari: mm-dd-yyyy misali: valid_date (('03-11-2000') => True_date (('15-01-2012') => False valid_date (('04-02040') => False_date (('06-04-2020') => True_date (('06/04/2020') => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,hau_Latn,python,"
def split_words(txt):
    '''Ganin jerin kalmomi, dawo da jerin kalmomin da aka raba a kan sararin samaniya, idan babu sararin samaniya a cikin rubutu ya kamata ka raba a kan ',' idan babu wani commas ya kamata ka dawo da yawan ƙananan haruffa tare da tsari na ban mamaki a cikin haruffa, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Misalai split_words ((""Sannu duniya!"") â -> [""Sannu"", ""duniya!""] split_words ((""Sannu,duniya!"") â -> [""Sannu"", ""duniya!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,hau_Latn,python,"
def is_sorted(lst):
    '''Idan aka ba da jerin lambobi, dawo ko an tsara su cikin tsari mai tasowa. Idan jerin sunayen suna da fiye da 1 kwafi na lambar guda, dawo da Karya. Ka ɗauka babu lambobi marasa kyau kuma kawai lambobi. Misalai is_sorted ((([5]) â -> Gaskiya ne_sorted (([1, 2, 3, 4, 5]) â -> Gaskiya ne_sorted (([1, 3, 2, 4, 5, 6]) â -> Gaskiya ne_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Gaskiya ne_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Gaskiya ne_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Gaskiya ne_sorted (([1, 2, 2, 2, 3, 3, 4]) â -> Gaskiya ne_sorted (([1, 2, 2, 3, 4 -> Ƙarya ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,hau_Latn,python,"
def intersection(interval1, interval2):
    """"""An ba ku tazara biyu, inda kowane tazara ta zama nau'i na lambobi. Misali, tazara = (farawa, ƙarshe) = (1, 2). Tazara da aka bayar a rufe ne wanda ke nufin tazara (farawa, ƙarshe) ta haɗa da farawa da ƙarshe. Ga kowane tazara da aka bayar, ana ɗauka cewa farkonsa ya fi ƙasa ko daidai da ƙarshen sa. Aikin ku shine a tantance ko tsawon tsinkayar waɗannan tazara biyu lambobi ne na farko. Misali, tsinkayar tazara (1, 3), (2, 4) ita ce (2, 3) wanda tsawonta ya kai 1, wanda ba lambobi ne na farko ba. Idan tsawon tsinkayar lambobi ne na farko, dawo da ""YES"", in ba haka ba, dawo da ""NO"". Idan tazara biyu ba su yi karo ba, dawo da ""NO"". [input/output] samfurori: tazara (((1, 2), (2, 3) ==> ""tazara ((-1, 1) ""), tazara (<0, 4) ==""TAKA - 5 (1), ==> ((-3, ""YES"" >) ))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,hau_Latn,python,"
def prod_signs(arr):
    """"""An ba ku jerin lambobi na lambobi kuma kuna buƙatar dawo da adadin adadin lambobi masu yawa ta hanyar samfurin dukkan alamomin kowane lamba a cikin jerin, wanda aka wakilta ta 1, -1 ko 0. Lura: dawo Babu ga ragowar. Misali: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Babu """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,hau_Latn,python,"
def minPath(grid, k):
    """"""Idan aka ba da grid tare da layuka N da ginshiƙai N (N > = 2) da kuma madaidaicin madaidaicin k, kowane tantanin grid yana dauke da darajar. Kowane mai lamba a cikin kewayon [1, N * N] ya haɗa yana bayyana daidai sau ɗaya a kan tantanin grid. Dole ne ku sami mafi ƙarancin hanyar tsawon k a cikin grid. Kuna iya farawa daga kowane tantanin halitta, kuma a kowane mataki za ku iya matsawa zuwa kowane ɗayan sel makwabta, a wasu kalmomin, za ku iya zuwa sel waɗanda ke raba gefen tare da ku yanzu cell. Lura cewa hanyar tsawon k yana nufin ziyartar daidai da sel k (ba lallai ba ne ya bambanta). BA ZA KA fita daga grid ba. Hanyar A (tsawon k) ana ɗaukar ta ƙasa da hanya B (tsawon k) idan bayan yin jerin abubuwan da aka tsara na ƙimar akan ƙwayoyin da A da B suka wuce (bari mu kira su l_st da l_stA), l_stA a zahiri ya fi ƙasa da l_stB, a wasu kalmomin, a cikin grid ɗin. Kuna iya farawa daga kowane tantanin, kuma a kowane mataki za ku iya matsawa zuwa kowane ɗayan sel makwabta, a wasu kalmomin, zaku iya zuwa ƙididdigewa zuwa ƙirar ƙimar da ke raba gefen tare da ku na yanzu. Lura: [A = 1, k = k, k = k = 1, k = 4, k = j_stA, k = j_st_j = j_st_st] [4, k = j_st_st = 1], [i = j_st = 1 = [1, j_j = 1], [1, j_j = 1 = [2, j_j = 1], [7, k = 1 = 1 = 1 = 1 = [_j = 1 ] [ [ ] , [_j = 1 ] [_j = 1 ] , [_j = 1 ] [_j = 1 ] , [_j = ] [_j = ] , [_j = ] , [_j = ] , [_j = ] , [_ ] [_ ] , [_ ] , [_ ] , [_ ] [_ ] , [_ ] [_ ] , [_ ] [_ ] , [_ ] [_ ] , [_ ] [_ ] , [_ ] [_""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,hau_Latn,python,"
def tri(n):
    """"""Kowa ya san jerin Fibonacci, an yi nazari sosai da masana lissafi a cikin ƙarni biyu da suka gabata. Koyaya, abin da mutane ba su sani ba shine jerin Tribonacci. An bayyana jerin Tribonacci ta hanyar maimaitawa: tri(1) = 3 tri(n) = 1 + n / 2, idan n yana da ma'ana. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), idan n ba shi da kyau. Misali: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 An ba ku lamba mai lamba n, dole ne ku dawo da jerin lambobi na farko na n + 1 na jerin Tribonacci. Misalai: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,hau_Latn,python,"
def digits(n):
    """"""Ba da wani tabbatacce lamba n, dawo da samfurin na m lambobi. Koma 0 idan duk lambobi ne ma. Alal misali: lambobi ((1) == 1 lambobi ((4) == 0 lambobi ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,hau_Latn,python,"
def is_nested(string):
    '''Ƙirƙiri aiki wanda yake ɗaukar kirtani a matsayin shigarwa wanda ya ƙunshi kawai ƙuƙwalwar ƙira. Aikin ya kamata ya dawo Gaskiya idan kuma kawai idan akwai madaidaicin ƙaramin tsari na ƙuƙwalwa inda aƙalla ɗayan ƙaramin tsari yana da ƙuƙwalwa. is_nested '[[]]') â -> Gaskiya ne_nested '[[]]]]]]]]][[[[]]') â -> Ƙarya ne_nested '[][]') â -> Ƙarya ne_nested '[[]') â -> Ƙarya ne_nested '[[]]') â -> Gaskiya ne_nested '[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,hau_Latn,python,"

def sum_squares(lst):
    """"""Ana ba ku jerin lambobi. Kuna buƙatar dawo da jimlar lambobi masu lamba a cikin jerin da aka ba ku, zagaye kowane abu a cikin jerin zuwa saman int ((Safin) na farko. Misalai: Don lst = [1,2,3] fitowar ya kamata ya zama 14 Don lst = [1,4,9] fitowar ya kamata ya zama 98 Don lst = [1,3,5,7] fitowar ya kamata ya zama 84 Don lst = [1.4,4.2,0] fitowar ya kamata ya zama 29 Don lst = [-2.4,1,1] fitowar ya kamata ya zama 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,hau_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Ƙirƙiri wani aiki wanda ya dawo Gaskiya idan haruffan ƙarshe na layin da aka ba shi haruffa ne kuma ba wani ɓangare na kalma ba, kuma Ƙarya in ba haka ba. Lura: ""kalma"" ƙungiya ce ta haruffa da aka raba ta sarari. Misalai: duba_idan_last_char_is_a_letter "" "" apple pie "") â -> Ƙarya check_if_last_char_is_a_letter "" "" apple pi e "") â -> Gaskiya check_if_last_char_is_a_letter "" apple pi e "") â -> Ƙarya check_if_last_char_is_a_letter
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,hau_Latn,python,"
def can_arrange(arr):
    """"""Ƙirƙiri aiki wanda ya dawo da mafi girman ƙididdigar wani kashi wanda ba shi da girma ko daidai da kashi na gaba da shi. Idan babu irin wannan kashi to sai a dawo -1. Tsarin da aka ba ba zai ƙunshi dabi'u masu maimaitawa ba. Misalai: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,hau_Latn,python,"
def largest_smallest_integers(lst):
    '''Ƙirƙiri wani aiki wanda ya dawo da wani tuple (a, b), inda 'a' shine mafi girma daga cikin lambobi masu kyau a cikin jerin, kuma 'b' shine mafi ƙanƙanta daga cikin lambobi masu kyau a cikin jerin. Idan babu wani lambobi masu kyau ko masu kyau, dawo da su kamar Babu. Misalai: mafi girma_mafi ƙanƙanta_mafi ƙanƙanta[2, 4, 1, 3, 5, 7]) == (Babu, 1) mafi girma_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_mafi ƙanƙanta_ƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙanƙan'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,hau_Latn,python,"
def compare_one(a, b):
    """"""Ƙirƙiri wani aiki wanda yake ɗaukar lambobi, floats, ko kirtani da ke wakiltar lambobi na ainihi, kuma ya dawo da mafi girma mai canzawa a cikin nau'in mai canzawa da aka ba shi. Ba ya dawowa idan ƙimomin sun daidaita. Lura: Idan an wakilci lamba ta ainihi a matsayin kirtani, maɓallin kewayawa zai iya zama . ko , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> Babu """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,hau_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Kimanta ko lambar da aka bayar n za a iya rubuta shi azaman jimlar daidai lambobi 4 masu kyau daidai Misali is_equal_to_sum_even ((4) == False is_equal_to_sum_even ((6) == False is_equal_to_sum_even ((8) == Gaskiya """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,hau_Latn,python,"
def special_factorial(n):
    """"""An bayyana ma'anar Brazil kamar haka: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! inda n > 0 Misali: >>> na musamman_factorial ((4) 288 Aikin zai karɓi lamba mai lamba a matsayin shigarwa kuma ya kamata ya dawo da ma'auni na musamman na wannan lambar. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,hau_Latn,python,"
def fix_spaces(text):
    """"""_Misali-3butu na kirtani, maye gurbin dukkan sarari a ciki tare da alamun ƙasa, kuma idan kirtani yana da sarari fiye da 2 a jere, to maye gurbin dukkan sararin samaniya tare da - fix_spaces ((""Misali"") == ""Misali"" fix_spaces ((""Misali1"") == ""Misali_1"" fix_spaces ((""Misali2"") == ""_Misali_2"" fix_spaces ((""Misali 3"") == ""_Misali-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,hau_Latn,python,"
def file_name_check(file_name):
    """"""Ƙirƙiri wani aiki wanda yake ɗaukar kirtani wanda yake wakiltar sunan fayil, kuma ya dawo da 'Ee' idan sunan fayil ɗin yana da inganci, kuma ya dawo da 'A' in ba haka ba. Ana ɗaukar sunan fayil ɗin ya zama mai inganci idan kuma kawai idan duk waɗannan sharuɗɗan sun cika: - Bai kamata a sami lambobi fiye da uku ('0'-'9') a cikin sunan fayil ɗin ba. - Sunan fayil ɗin ya ƙunshi daidai da aya ɗaya '.' - Ba za a sami substring a gaban dot ba, kuma ya fara da harafi daga haruffan latin ('a'-'z' da 'A'Z'). - Substring bayan dot ya kamata ya zama ɗaya daga cikin waɗannan: ['txt', 'exe', 'll'] Misalai: file_name_check""(misali.txt"") # => 'Ee'name_file_check""(misali.ll1"") => 'A' => 'A' (sunan ya kamata ya fara da harafin latin alpha)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,hau_Latn,python,"


def sum_squares(lst):
    """""""" Wannan aikin zai dauki jerin lambobi. Ga dukkan abubuwan da ke cikin jerin, aikin zai sanya square a cikin shigarwar lamba idan index dinsa ya ninka na 3 kuma zai sanya shigarwar lamba idan index dinsa ya ninka na 4 kuma ba ninki na 3 ba. Aikin ba zai canza abubuwan da ke cikin jerin wadanda alamomin su ba su ninki na 3 ko 4. Aikin zai dawo da jimlar dukkan abubuwan shigarwa. Misalai: Don lst = [1,2,3] fitowar ya zama 6 Don lst = [] fitowar ya zama 0 Don lst = [-1,-5,2,-1,-5] fitowar ya zama -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,hau_Latn,python,"
def words_in_sentence(sentence):
    """"""An ba ku kirtani mai wakiltar jumla, jumlar ta ƙunshi wasu kalmomi da aka raba ta tazara, kuma dole ne ku dawo da kirtani wanda ya ƙunshi kalmomin daga jumlar asali, wanda tsayin su lambobi ne na farko, tsarin kalmomin a cikin sabon kirtani ya zama daidai da na asali. Misali1: Input: jumla = ""Wannan gwaji ne"" Fitarwa: ""shi ne"" Misali2: Input: jumla = ""bari mu tafi iyo"" Fitarwa: ""je don"" Ƙuntatawa: * 1 <= len(sentence) <= 100 * jumla ta ƙunshi haruffa kawai """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,hau_Latn,python,"
def simplify(x, n):
    """"""Aikinku shine aiwatar da aikin da zai sauƙaƙa bayanin x * n. Aikin yana dawowa Gaskiya idan x * n yayi kimantawa zuwa lamba mai kyau kuma Karya in ba haka ba. Duk x da n, wakilcin layi ne na kashi, kuma suna da tsari mai zuwa, <numerator>/<denominator> inda duka mai lamba da mai suna suna lambobi masu kyau. Kuna iya ɗauka cewa x, da n sune ingantattun kashi, kuma basu da sifili a matsayin mai suna. sauƙaƙe "" 1 / 5 "", ""5 / 1 "") = Gaskiya sauƙaƙe "" 1/ 6 "", ""2 / 1 "") = Ƙarya sauƙaƙe "" 7 / 10 "", ""10 / 2 "") = Ƙarya """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,hau_Latn,python,"
def order_by_points(nums):
    """"""Rubuta wani aiki wanda ya tsara jerin abubuwan da aka ba da su a cikin jerin abubuwan da suka dace bisa ga adadin lambobi. Lura: idan akwai abubuwa da yawa tare da irin wannan adadin lambobi, tsara su bisa ga alamomin su a cikin jerin asali. Alal misali: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,hau_Latn,python,"
def specialFilter(nums):
    """"""Rubuta wani aiki da daukan wani tsararru na lambobi kamar yadda shigar da kuma dawo da yawan abubuwa a cikin tsararru da suke da girma fiye da 10 da kuma duka na farko da na karshe lambobi na lamba ne m (1, 3, 5, 7, 9). Alal misali: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,hau_Latn,python,"
def get_max_triples(n):
    """"""An ba ku lamba mai kyau n. Dole ne ku ƙirƙiri jerin lambobi masu tsawo n. Ga kowane i (1 â ‰¤ i â ‰¤ n), ƙimar a[i] = i * i - i + 1. Koma yawan sau uku (a[i], a[j], a[k]) na a inda i < j < k, kuma a[i] + a[j] + a[k] ya ninka na 3. Misali: Shigarwa: n = 5 Fitarwa: 1 Bayani: a = [1, 3, 7, 13, 21] Hanya mai inganci ita ce sau uku (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,hau_Latn,python,"
def bf(planet1, planet2):
    '''Akwai taurari takwas a cikin tsarin hasken rana: mafi kusa da Sun shine Mercury, na gaba shine Venus, sannan Duniya, Mars, Jupiter, Saturn, Uranus, Neptune. Rubuta wani aiki wanda yake ɗaukar sunayen taurari biyu a matsayin kirtani planet1 da planet2. Aikin ya kamata ya dawo da wani nau'i mai dauke da dukkanin taurari waɗanda ke kewaye da su a tsakanin kewayen duniya1 da kuma kewayen duniya2, an rarraba su ta hanyar kusanci da rana. Aikin ya kamata ya dawo da wani nau'i mai banƙyama idan duniya1 ko planet2 ba sunayen taurari ba daidai ba ne. Misali bf ""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf (((""Earth"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,hau_Latn,python,"
def sorted_list_sum(lst):
    """"""Rubuta wani aiki da ya yarda da jerin kirtani a matsayin siga, share kirtani da cewa suna da m tsawo daga gare ta, kuma ya dawo da sakamakon jerin tare da wani tsari da aka jera, A jerin ne ko da yaushe jerin kirtani da kuma ba wani tsararru na lambobi, kuma shi zai iya ƙunsar duplicates. The tsari na jerin ya kamata a hau ta tsawon kowace kalma, kuma ya kamata ka dawo da jerin da aka jera ta wannan doka. Idan kalmomi biyu da wannan tsawon, jera jerin haruffa. A aiki ya kamata ya dawo da jerin kirtani a cikin tsari da aka jera. Za ka iya ɗauka cewa duk kalmomi za su yi wannan tsawon. Alal misali: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,hau_Latn,python,"
def x_or_y(n, x, y):
    """"""A sauki shirin wanda ya kamata dawo da darajar x idan n ne mai firam lamba da ya kamata dawo da darajar y in ba haka ba. Misalai: ga x_or_y(7, 34, 12) == 34 ga x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,hau_Latn,python,"
def double_the_difference(lst):
    '''Idan aka ba da jerin lambobi, dawo da jimlar murabba'in lambobi a cikin jerin waɗanda ba su da daidaito. Yi watsi da lambobin da ba su da kyau ko ba cikakke ba. ninki biyu_bambanci (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 ninki biyu_bambanci (([-1, -2, 0]) == 0 ninki biyu_bambanci (([9, -2]) == 81 ninki biyu_bambanci (([0]) == 0 Idan jerin shigarwa ba komai bane, dawo da 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,hau_Latn,python,"
def compare(game,guess):
    """"""Ina tsammanin dukkanmu muna tuna wannan jin daɗin lokacin da aka san sakamakon wani abin da aka daɗe ana jira. Abubuwan da kuke ji da tunani a wannan lokacin tabbas sun cancanci a lura da su kuma a kwatanta su. Aikinku shine a tantance ko mutum ya yi daidai da sakamakon wasannin da yawa. An ba ku matakai biyu na ƙididdiga da tsinkaye masu tsayi iri ɗaya, inda kowane ma'auni ke nuna wasa. Koma matattarar tsayi iri ɗaya da ke nuna yadda nesa da kowane zato yake. Idan sun yi tsammani daidai, ƙimar ita ce 0, kuma idan ba haka ba, ƙimar ita ce bambanci tsakanin zato da ƙimar. misali: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,hau_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Za a ba ka sunan aji (wani kirtani) da jerin kari. Ana amfani da kari don ɗora ƙarin azuzuwan zuwa aji. Ƙarfin kari kamar haka: Bari CAP ya zama adadin manyan haruffa a cikin sunan kari, kuma bari SM ya zama adadin ƙananan haruffa a cikin sunan kari, an ba da ƙarfi ta hanyar raguwa CAP - SM. Ya kamata ka sami mafi girman kari kuma ka dawo da kirtani a cikin wannan tsari: ClassName.StrongestExtensionName. Idan akwai kari biyu ko fiye da iri ɗaya, ya kamata ka zaɓi wanda ya zo na farko a cikin jerin. Alal misali, idan an ba ka ""Slices"" a matsayin aji da jerin kari: ['SEviviRNGSliCes', 'Cheese', 'StuFfed'] to ya kamata ka dawo da 'Slices.SEviRNGSliCes' saboda 'SviRNGSliCes' ne mafi ƙarfi. ' (Example: 'AA_Beats'), saboda kari ne mafi ƙarfi.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,hau_Latn,python,"
def cycpattern_check(a , b):
    """"""Ana ba ku kalmomi 2. Kuna buƙatar dawowa Gaskiya idan kalma ta biyu ko kowane juyawa shine substring a cikin kalma ta farko cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => Gaskiya cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => Gaskiya cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => Gaskiya """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,hau_Latn,python,"
def even_odd_count(num):
    """"""Ba da wani lamba. dawo da wani tuple cewa yana da yawan ma'auni da kuma m lambobi bi da bi. Misali: ma_odd_count(-12) ==> (1, 1) ma_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,hau_Latn,python,"
def int_to_mini_roman(number):
    """"""An ba da cikakkiyar lamba, sami daidai da lambar Roman a matsayin kirtani, kuma dawo da shi a cikin ƙananan ƙananan. Ƙuntatawa: 1 <= num <= 1000 Misalai: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,hau_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Idan aka ba da tsawon bangarorin uku na alwatika. Koma gaskiya idan bangarorin uku sun zama alwatika mai kusurwa, In ba haka ba. Alwatika mai kusurwa mai kusurwa ita ce alwatika wacce kusurwa ɗaya take kusurwa madaidaiciya ko digiri 90. Misali: right_angle_triangle ((3, 4, 5) == Gaskiya right_angle_triangle ((1, 2, 3) == Ƙarya '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,hau_Latn,python,"
def find_max(words):
    """"""Rubuta wani aiki wanda ya yarda da jerin jerin. Jerin ya ƙunshi kalmomi daban-daban. Koma kalmar tare da iyakar adadin haruffa na musamman. Idan mahara strings da iyakar adadin haruffa na musamman, koma wanda ya zo na farko a cikin lexicographical tsari. find_max (([""sunan"", ""na"", ""string""]) == ""string"" find_max (([""sunan"", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,hau_Latn,python,"
def eat(number, need, remaining):
    """"""Kuna da zomo mai jin yunwa, kuma kun riga kun ci adadin karas, amma yanzu kuna buƙatar cin karin karas don kammala abincin yau. ya kamata ku dawo da jerin [ jimlar adadin karas da aka ci bayan abincinku, yawan karas da suka rage bayan abincinku ] idan babu isasshen karas da suka rage, za ku ci duk karas da suka rage, amma har yanzu za ku ji yunwa. Misali: * ci ((5, 6, 10) -> [11, 4] * ci ((4, 8, 9) -> [12, 1] * ci ((1, 10, 10) -> [11, 0] * ci ((2, 11, 5) -> [7, 0] Masu canji: @ lamba: lamba mai yawa adadin karas da kuka ci. @ bukatar: lamba mai yawa na karas da kuke buƙatar ci. @ ragowar: lamba mai yawa na sauran karas da ke cikin ajiya: * ƙuntatawa: * 0 = <= 1000 * 0 = <= 1000 * 0 = <= 1000 sauran = <= 1000 Yi farin ciki = = = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,hau_Latn,python,"
def do_algebra(operator, operand):
    """"""Ganin jerin abubuwa biyu mai aiki, da kuma mai aiki. Jerin farko yana da ayyukan algebra na asali, kuma jerin na biyu jerin lambobi ne. Yi amfani da jerin sunayen biyu da aka bayar don gina maganganun algebra kuma dawo da kimantawa na wannan magana. Ayyukan algebra na asali: Ƙari ( +) Ragewa ( - ) Ƙara ( *) Rarraba ƙasa ( // ) Ƙaddamarwa ( ** Misali ): mai aiki['+', '*', '-'] array = [2, 3, 4, 5] sakamakon = 2 + 3 * 4 - 5 => sakamakon = 9 Lura: Tsawon jerin masu aiki daidai yake da tsawon jerin masu aiki da rage ɗaya. Mai aiki jerin lambobi ne na lambobi marasa kyau. Mai aiki yana da akalla mai aiki ɗaya, kuma jerin masu aiki suna da akalla masu aiki biyu. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,hau_Latn,python,"
def solve(s):
    """"""An ba ku kirtani s. idan s[i] harafi ne, juya harshensa daga ƙasa zuwa sama ko akasin haka, in ba haka ba ku bar shi kamar yadda yake. Idan kirtani ba ya ƙunshe da haruffa, juya kirtani. Aikin ya kamata ya dawo da sakamakon kirtani. Misalai warwarewa ((""1234"") = ""4321"" warwarewa ((""ab"") = ""AB"" warwarewa ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,hau_Latn,python,"
def string_to_md5(text):
    """"""Idan an ba da kirtani 'rubutu', dawo da kirtani mai kama da md5 hash. Idan 'rubutu' kirtani ne mara amfani, dawo da Babu. >>> string_to_md5('Sannu duniya') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,hau_Latn,python,"
def generate_integers(a, b):
    """"""An ba da lambobi biyu masu kyau a da b, dawo da lambobi masu mahimmanci tsakanin a da b, a cikin tsari mai tasowa. Alal misali: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
