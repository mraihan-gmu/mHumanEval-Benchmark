[{"task_id":"HumanEval_0","nl":"mal_Mlym","pl":"js","prompt":"\/ ഒരു നിശ്ചിത പരിധി വരെ. \/നമ്പറുകളുടെ ഒരു ശ്രേണിയിൽ,  എന്നതിനേക്കാൾ അടുത്തുള്ള രണ്ട് സംഖ്യകൾ ഉണ്ടോ എന്ന് പരിശോധിക്കുക.\/\/ >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\/\/ false\n\/\/ >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\/\/ true\nfunction has_close_elements(numbers, threshold){\n","canonical_solution":"function has_close_elements(numbers, threshold) {\n    \/\/ First, sort the array to ensure we check adjacency for closest elements\n    numbers.sort((a, b) => a - b);\n\n    \/\/ Iterate through the sorted list and check differences between successive elements\n    for (let i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n    }\n\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"},{"task_id":"HumanEval_1","nl":"mal_Mlym","pl":"js","prompt":"\/ ഇൻപുട്ട് സ്ട്രിങ്ങിലെ സ്പെയ്സുകളെ അവഗണിക്കുക.\/ പ്രത്യേക ഗ്രൂപ്പുകൾ സന്തുലിതമാണ് (ഓരോ തുറന്ന ബ്രേസും ശരിയായി അടച്ചിരിക്കുന്നു) പരസ്പരം കൂടിച്ചേർന്നിട്ടില്ല \/ ആ ഗ്രൂപ്പുകളെ പ്രത്യേക സ്ട്രിങ്ങുകളാക്കി വേർതിരിച്ച് അവയുടെ അറേ തിരികെ നൽകുക.ഈ ഫങ്ഷന് നല് കുന്ന ഇൻപുട്ട് ഒരു സ്ട്രിംഗ് ആണ്, അതിൽ ഒന്നിലധികം കൂട്ടം നെസ്റ്റഡ് പരാൻതീസിസ് അടങ്ങിയിരിക്കുന്നു. നിങ്ങളുടെ ലക്ഷ്യം \/\/ >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n\/\/ [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n","canonical_solution":"function separate_paren_groups(paren_string) {\n    paren_string = paren_string.replace(\/\\s+\/g, ''); \/\/ Remove spaces\n    const groups = [];\n    let balance = 0;\n    let currentGroup = '';\n\n    for (let char of paren_string) {\n        currentGroup += char;\n        if (char === '(') {\n            balance++;\n        } else if (char === ')') {\n            balance--;\n        }\n        \n        if (balance === 0) {\n            groups.push(currentGroup);\n            currentGroup = '';\n        }\n    }\n\n    return groups;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"},{"task_id":"HumanEval_2","nl":"mal_Mlym","pl":"js","prompt":"\/ സംഖ്യയുടെ ദശാംശ ഭാഗം തിരികെ നൽകുക. \/ (അവശേഷിക്കുന്ന ഭാഗം എല്ലായ്പ്പോഴും 1 ല് കുറവാണ്).\/, പൂർണ്ണസംഖ്യാ ഭാഗം (നൽകിയ സംഖ്യയേക്കാൾ ചെറുതാണ് ഏറ്റവും വലിയ പൂർണ്ണസംഖ്യ) ദശാംശങ്ങൾ ഒരു പോസിറ്റീവ് ഫ്ലോട്ടിംഗ് പോയിന്റ് നമ്പർ കൊടുത്താല് , അതിനെ യിലേക്ക് വിഭജിക്കാം.\/\/ >>> truncate_number(3.5)\n\/\/ 0.5\nfunction truncate_number(number){\n","canonical_solution":"function truncate_number(number) {\n    return number - Math.floor(number);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"},{"task_id":"HumanEval_3","nl":"mal_Mlym","pl":"js","prompt":"\/ ആ ഘട്ടത്തിൽ ഫംഗ്ഷൻ true ആയി തിരിച്ചു വരും. അല്ലാത്തപക്ഷം false ആയി തിരിച്ചു വരും.നിങ്ങളുടെ ജോലി അക്കൌണ്ട് ബാലൻസ് പൂജ്യത്തിന് താഴെയായി എന്ന് കണ്ടെത്തുക എന്നതാണ്.നിങ്ങള് ക്ക് ഒരു ബാങ്ക് അക്കൌണ്ടില് നിക്ഷേപവും പിൻവലിക്കലും നടത്താന് കഴിയും, അത് തുടങ്ങുന്നത്\/\/ >>> below_zero([1, 2, 3])\n\/\/ false\n\/\/ >>> below_zero([1, 2, -4, 5])\n\/\/ true\nfunction below_zero(operations){\n","canonical_solution":"function below_zero(operations) {\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"},{"task_id":"HumanEval_4","nl":"mal_Mlym","pl":"js","prompt":"\/ MAD = ശരാശരി. x - x_mean. \/ ഘടകവും ഒരു കേന്ദ്രബിന്ദുവും (ഈ കേസിൽ ശരാശരി): \/ ശരാശരി അബ്സൊലൂട്ട് ഡീവിയേഷൻ എന്നത് ഓരോ യും തമ്മിലുള്ള ശരാശരി അബ്സൊലൂട്ട് വ്യത്യാസമാണ്.\/ ഈ ഡാറ്റാ സെറ്റിന്റെ ശരാശരിയുടെ ചുറ്റും. \/ഒരു നിശ്ചിത അറേയിലെ ഇൻപുട്ട് നമ്പറുകൾക്ക്, ശരാശരി അബ്സലൂട്ട് ഡീവിയേഷൻ കണക്കുകൂട്ടുക.\/\/ >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\/\/ 1.0\nfunction mean_absolute_deviation(numbers){\n","canonical_solution":"function mean_absolute_deviation(numbers) {\n    const n = numbers.length;\n    if (n === 0) return 0;\n\n    const mean = numbers.reduce((acc, val) => acc + val, 0) \/ n;\n    const deviations = numbers.map(num => Math.abs(num - mean));\n    const mad = deviations.reduce((acc, val) => acc + val, 0) \/ n;\n\n    return mad;\n}\n\n\/\/ Example usage:\nconsole.log(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])); \/\/ Output: 1.0","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0, 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();"},{"task_id":"HumanEval_5","nl":"mal_Mlym","pl":"js","prompt":"\/ഇൻപുട്ട് അറേയിലെ ഓരോ തുടർച്ചയായ ∀നമ്പറുകളുടെയും ഇടയിൽ ഒരു 'ഡിലിമിറ്റർ' ചേർക്കുക.\/\/ >>> intersperse([], 4)\n\/\/ []\n\/\/ >>> intersperse([1, 2, 3], 4)\n\/\/ [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n","canonical_solution":"function intersperse(numbers, delimiter) {\n    if (numbers.length === 0) return [];\n    \n    const result = [];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i]);\n        result.push(delimiter);\n    }\n    result.push(numbers[numbers.length - 1]);\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"},{"task_id":"HumanEval_6","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണത്തിന്, (() (()) ന് പരമാവധി രണ്ട് നെസ്റ്റിംഗ് ലെവലുകൾ ഉണ്ട്, അതേസമയം ((())) ന് മൂന്ന് ഉണ്ട്. \/ ഓരോ ഗ്രൂപ്പിനും പരേതന്മാരുടെ ഏറ്റവും ആഴത്തിലുള്ള തലത്തിലുള്ള നെസ്റ്റിംഗ് നൽകുക.\/ഈ ഫങ്ഷന് നല് കുന്ന ഇൻപുട്ട് സ്പെയ്സുകളാൽ വേർതിരിക്കപ്പെട്ട പരാൻതീസിനു വേണ്ടി ഒന്നിലധികം ഗ്രൂപ്പുകളെ പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് ആണ്.\/\/ >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n\/\/ [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n","canonical_solution":"function parse_nested_parens(paren_string) {\n    \/\/ Split the input string into groups based on spaces\n    const groups = paren_string.split(' ');\n    \/\/ Map each group to its maximum nesting depth\n    return groups.map(group => {\n        let maxDepth = 0;\n        let currentDepth = 0;\n\n        \/\/ Iterate through each character in the group\n        for (let char of group) {\n            if (char === '(') {\n                \/\/ Increment current depth for '('\n                currentDepth++;\n                \/\/ Update max depth if it's greater than the previous max\n                if (currentDepth > maxDepth) {\n                    maxDepth = currentDepth;\n                }\n            } else if (char === ')') {\n                \/\/ Decrement current depth for ')'\n                currentDepth--;\n            }\n        }\n        \n        return maxDepth; \/\/ Return max depth of this group\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"},{"task_id":"HumanEval_7","nl":"mal_Mlym","pl":"js","prompt":"\/ഒരു സ്ട്രിംഗിന്റെ ഇൻപുട്ട് അറേ ഫിൽട്ടർ ചെയ്യുക, അതിൽ സബ് സ്ട്രിംഗ് അടങ്ങിയിരിക്കുന്നവ മാത്രം.\/\/ >>> filter_by_substring([], \"a\")\n\/\/ []\n\/\/ >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\/\/ [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n","canonical_solution":"function filter_by_substring(strings, substring) {\n    return strings.filter(str => str.includes(substring));\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"},{"task_id":"HumanEval_8","nl":"mal_Mlym","pl":"js","prompt":"\/ ശൂന്യ സംഖ്യ 0 ഉം ശൂന്യ ഉൽപ്പന്നം 1 ഉം ആയിരിക്കണം.\/ഒരു നിശ്ചിത സംഖ്യാ ശ്രേണിക്ക്, ഒരു ശ്രേണിയിലെ എല്ലാ സംഖ്യകളുടെയും സംഖ്യയും ഗുണിതവും അടങ്ങിയ ഒരു ശ്രേണി നൽകുക.\/\/ >>> sum_product([])\n\/\/ [0, 1]\n\/\/ >>> sum_product([1, 2, 3, 4])\n\/\/ [10, 24]\nfunction sum_product(numbers){\n","canonical_solution":"function sum_product(numbers) {\n    let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"},{"task_id":"HumanEval_9","nl":"mal_Mlym","pl":"js","prompt":"\/ തുടർച്ചയായി. \/ഒരു നിശ്ചിത ശ്രേണിയിൽ നിന്ന്, ഒരു നിശ്ചിത നിമിഷം വരെ കണ്ടെത്തിയ പരമാവധി മൂലകങ്ങളുടെ ഒരു ശ്രേണി സൃഷ്ടിക്കുക.\/\/ >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n\/\/ [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n","canonical_solution":"function rolling_max(numbers) {\n    let result = [];\n    let currentMax = Number.NEGATIVE_INFINITY;\n    for (let i = 0; i < numbers.length; i++) {\n        currentMax = Math.max(currentMax, numbers[i]);\n        result.push(currentMax);\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\ntest();"},{"task_id":"HumanEval_10","nl":"mal_Mlym","pl":"js","prompt":"\/ - സ്ട്രിംഗ് റിവേഴ്സ് അവസാനത്തിൽ ഒരു സ്ട്രിംഗ് പ്രിഫിക്സ് ചേർക്കുക, അത് പാലിൻഡ്രോമിക് സഫിക്സിന് മുമ്പായി വരുന്നു. \/ - ഒരു പാലിൻഡ്രോം ആയ സ്ട്രിംഗിന്റെ ഏറ്റവും നീളം കൂടിയ പോസ്റ്റ്ഫിക്സ് കണ്ടെത്തുക. \/ അൽഗോരിതം ആശയം ലളിതമാണ്: \/നൽകിയ സ്ട്രിങ്ങിൽ തുടങ്ങുന്ന ഏറ്റവും ചെറിയ പാലിൻഡ്രോം കണ്ടെത്തുക.\/\/ >>> make_palindrome(\"\")\n\/\/ \"\"\n\/\/ >>> make_palindrome(\"cat\")\n\/\/ \"catac\"\n\/\/ >>> make_palindrome(\"cata\")\n\/\/ \"catac\"\nfunction make_palindrome(string){\n","canonical_solution":"function make_palindrome(string) {\n    \/\/ Helper function to check if a string is a palindrome\n    function isPalindrome(s) {\n        let left = 0;\n        let right = s.length - 1;\n        while (left < right) {\n            if (s[left] !== s[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    \/\/ Find the longest palindromic suffix\n    let longestPalindromicSuffixLength = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (isPalindrome(string.slice(i))) {\n            longestPalindromicSuffixLength = string.length - i;\n            break;\n        }\n    }\n\n    \/\/ Create the shortest palindrome\n    const prefixToReverse = string.slice(0, string.length - longestPalindromicSuffixLength);\n    const reversedPrefix = prefixToReverse.split('').reverse().join('');\n    return string + reversedPrefix;\n}\n\n\/\/ Examples\nconsole.log(make_palindrome(\"\"));     \/\/ \"\"\nconsole.log(make_palindrome(\"cat\"));  \/\/ \"catac\"\nconsole.log(make_palindrome(\"cata\")); \/\/ \"catac\"","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\ntest();"},{"task_id":"HumanEval_11","nl":"mal_Mlym","pl":"js","prompt":"\/ ഈ ഇൻപുട്ടുകളിൽ ബൈനറി XOR നടത്തുകയും ഫലം ഒരു സ്ട്രിംഗായി മടക്കിനൽകുകയും ചെയ്യുക. \/ഇൻപുട്ട് എന്നത് 1 ഉം 0 ഉം മാത്രമുള്ള a, b എന്നീ രണ്ട് സ്ട്രിങ്ങുകൾ ആണ്.\/\/ >>> string_xor(\"010\", \"110\")\n\/\/ \"100\"\nfunction string_xor(a, b){\n","canonical_solution":"function string_xor(a, b) {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"},{"task_id":"HumanEval_12","nl":"mal_Mlym","pl":"js","prompt":"\/ ഒരേ നീളമുള്ള സ്ട്രിങ്ങുകൾ. ഇൻപുട്ട് അറേ ശൂന്യമാണെങ്കിൽ undefined ആയി മടങ്ങുക.\/അറേയിലെ സ്ട്രിങ്ങുകളിൽ നിന്ന് ഏറ്റവും നീളം കൂടിയവയെ റിട്ടേൺ ചെയ്യുക. ഒന്നിലധികം സ്ട്രിങ്ങുകൾ ഉണ്ടെങ്കിൽ ആദ്യത്തേത് റിട്ടേൺ ചെയ്യുക.\/\/ >>> longest([])\n\/\/ undefined\n\/\/ >>> longest([\"a\", \"b\", \"c\"])\n\/\/ \"a\"\n\/\/ >>> longest([\"a\", \"bb\", \"ccc\"])\n\/\/ \"ccc\"\nfunction longest(strings){\n","canonical_solution":"function longest(strings) {\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"},{"task_id":"HumanEval_13","nl":"mal_Mlym","pl":"js","prompt":"a, b എന്നീ രണ്ടു സംഖ്യകളുടെ ഏറ്റവും വലിയ പൊതുവിഭജനം തിരികെ നല് കുക.\/\/ >>> greatest_common_divisor(3, 5)\n\/\/ 1\n\/\/ >>> greatest_common_divisor(25, 15)\n\/\/ 5\nfunction greatest_common_divisor(a, b){\n","canonical_solution":"function greatest_common_divisor(a, b) {\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"},{"task_id":"HumanEval_14","nl":"mal_Mlym","pl":"js","prompt":"\/ഇൻപുട്ട് സ്ട്രിംഗിലെ ഏറ്റവും ചെറുത് മുതൽ ഏറ്റവും നീളം കൂടിയത് വരെ എല്ലാ പ്രിഫിക്സുകളുടെയും അറേ മടക്കിനൽകുന്നു.\/\/ >>> all_prefixes(\"abc\")\n\/\/ [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n","canonical_solution":"function all_prefixes(string) {\n    let prefixes = [];\n    for (let i = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"},{"task_id":"HumanEval_15","nl":"mal_Mlym","pl":"js","prompt":"0 മുതൽ n വരെയുള്ള സംഖ്യകളുടെ ഒരു സ്ട്രിംഗ് നൽകുക.\/\/ >>> string_sequence(0)\n\/\/ \"0\"\n\/\/ >>> string_sequence(5)\n\/\/ \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n","canonical_solution":"function string_sequence(n) {\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i);\n    }\n    return result.join(' ');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();"},{"task_id":"HumanEval_16","nl":"mal_Mlym","pl":"js","prompt":"\/ഒരു സ്ട്രിംഗ് തന്നാൽ, എത്ര വ്യത്യസ്ത പ്രതീകങ്ങൾ (കേസ് പരിഗണിക്കാതെ) അതിൽ ഉണ്ടെന്ന് കണ്ടെത്തുക \/\/ >>> count_distinct_characters(\"xyzXYZ\")\n\/\/ 3\n\/\/ >>> count_distinct_characters(\"Jerry\")\n\/\/ 4\nfunction count_distinct_characters(string){\n","canonical_solution":"function count_distinct_characters(string) {\n    \/\/ Convert the string to lowercase to ignore case differences\n    const lowercaseString = string.toLowerCase();\n    \/\/ Create a Set to store distinct characters\n    const distinctChars = new Set();\n    \/\/ Iterate over each character in the string\n    for (let char of lowercaseString) {\n        distinctChars.add(char); \/\/ Add character to the set\n    }\n    \/\/ Return the size of the set which represents the number of distinct characters\n    return distinctChars.size;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"},{"task_id":"HumanEval_17","nl":"mal_Mlym","pl":"js","prompt":"' 'ഇതു' - ഒരു ക്വാർട്ടർ നോട്ട്, ഒരു ബീറ്റ് നീണ്ടുനിൽക്കും'ഒ ഹെഡെഡെ' - പാതി നോട്ട്, രണ്ടു ബീറ്റ് വരെ നീണ്ടുനിൽക്കും.\/ 'ഒ' - മുഴുവൻ നോട്ടും, നാല് ബീറ്റ് നീണ്ടുനിൽക്കും \/ ഇതാ ഒരു ഇതിഹാസം: \/ അവസാനമായി അല്ല.\/ നിങ്ങളുടെ ജോലി ഈ സ്ട്രിംഗ് പാഴ്സ് ചെയ്ത് ഓരോന്നും എത്ര തവണ ആവർത്തിക്കുന്നു എന്നതിന് അനുയോജ്യമായ സംഖ്യകളുടെ ഒരു ശ്രേണി തിരികെ നൽകുക എന്നതാണ്.\/ഈ ഫംഗ്ഷന് ഒരു സ്ട്രിംഗ് ആണ് നൽകുന്നത്. അത് ഒരു പ്രത്യേക ASCII ഫോർമാറ്റിലുള്ള സംഗീത കുറിപ്പുകളെ പ്രതിനിധീകരിക്കുന്നു.\/\/ >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n\/\/ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n","canonical_solution":"function parse_music(music_string) {\n    let notes = music_string.split(\" \");\n    let beats = [];\n\n    for (let note of notes) {\n        switch (note) {\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n            default:\n                \/\/ Handle unexpected notes if necessary\n                break;\n        }\n    }\n    return beats;\n}\n\n\/\/ Example usage:\n\/\/ console.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\")); \n\/\/ Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"},{"task_id":"HumanEval_18","nl":"mal_Mlym","pl":"js","prompt":"\/ഒരു സബ് സ്ട്രിംഗ് എത്ര തവണ ഒറിജിനൽ സ്ട്രിംഗിൽ കാണാനാകും എന്ന് കണ്ടെത്തുക.\/\/ >>> how_many_times(\"\", \"a\")\n\/\/ 0\n\/\/ >>> how_many_times(\"aaa\", \"a\")\n\/\/ 3\n\/\/ >>> how_many_times(\"aaaa\", \"aa\")\n\/\/ 3\nfunction how_many_times(string, substring){\n","canonical_solution":"function how_many_times(string, substring) {\n  if (substring.length === 0) return 0;\n  \n  let count = 0;\n  let position = 0;\n  \n  while ((position = string.indexOf(substring, position)) !== -1) {\n    count++;\n    position++;\n  }\n  \n  return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"},{"task_id":"HumanEval_19","nl":"mal_Mlym","pl":"js","prompt":"\/ ഏറ്റവും ചെറിയതിൽ നിന്നും ഏറ്റവും വലിയതിലേക്ക് ക്രമീകരിച്ചിരിക്കുന്ന സംഖ്യകളുടെ സ്ട്രിംഗ് തിരികെ നൽകുന്നു \/ സാധുവായ തിരഞ്ഞെടുപ്പുകൾ 'പൂജ്യം', 'ഒന്ന്', 'രണ്ട്', 'മൂന്ന്', 'നാല്', 'അഞ്ച്', 'ആറ്', 'ഏഴ്', 'എട്ട്' എന്നിവയാണ്.  ഒമ്പത് എന്നിങ്ങനെ നിരവധി പേരുകൾ ഇവിടെ കാണാം.'0' മുതൽ '9' വരെയുള്ള സംഖ്യകളുടെ ഒരു സ്പേസ് ഡെലിമെന്റ് ചെയ്ത സ്ട്രിംഗ് ആണ് ഇൻപുട്ട്.\/\/ >>> sort_numbers(\"three one five\")\n\/\/ \"one three five\"\nfunction sort_numbers(numbers){\n","canonical_solution":"function sort_numbers(numbers) {\n    const numberWords = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    \n    return numbers\n        .split(' ')\n        .sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b))\n        .join(' ');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"},{"task_id":"HumanEval_20","nl":"mal_Mlym","pl":"js","prompt":"\/ മറ്റു് നമ്പറുകള് ക്രമത്തില് നല് കുക (കുറഞ്ഞ സംഖ്യ, വലിയ സംഖ്യ).\/നൽകിയിരിക്കുന്ന സംഖ്യകളുടെ ഒരു ശ്രേണിയിൽ നിന്ന് (കുറഞ്ഞത് രണ്ടെണ്ണം) ഓരോന്നിനും ഏറ്റവും അടുത്തുള്ള രണ്ടെണ്ണം തിരഞ്ഞെടുത്ത് തിരികെ നൽകുക.\/\/ >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\/\/ [2.0, 2.2]\n\/\/ >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\/\/ [2.0, 2.0]\nfunction find_closest_elements(numbers){\n","canonical_solution":"function find_closest_elements(numbers) {\n    if (numbers.length < 2) {\n        throw new Error('Array must contain at least two elements.');\n    }\n    \n    numbers.sort((a, b) => a - b);\n\n    let minDiff = Infinity;\n    let closestPair = [numbers[0], numbers[1]];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        let diff = numbers[i + 1] - numbers[i];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i], numbers[i + 1]];\n        }\n    }\n\n    return closestPair;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"},{"task_id":"HumanEval_21","nl":"mal_Mlym","pl":"js","prompt":"\/ ഏറ്റവും ചെറിയ സംഖ്യ 0 ആയിത്തീരുകയും ഏറ്റവും വലിയ സംഖ്യ 1 ആയിത്തീരുകയും ചെയ്യും \/നമ്പറുകളുടെ ഒരു അറേ (കുറഞ്ഞത് രണ്ട് എലമെന്റുകൾ), ആ അറേയിൽ ഒരു ലീനിയർ ട്രാൻസ്ഫോർമേഷൻ പ്രയോഗിക്കുക, \/\/ >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\/\/ [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n","canonical_solution":"function rescale_to_unit(numbers) {\n    if (numbers.length < 2) {\n        throw new Error(\"Array must contain at least two elements.\");\n    }\n    \n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    \n    return numbers.map(num => (num - min) \/ (max - min));\n}\n\n\/\/ Example usage\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); \/\/ [0.0, 0.25, 0.5, 0.75, 1.0]","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"},{"task_id":"HumanEval_22","nl":"mal_Mlym","pl":"js","prompt":"\/ഏതെങ്കിലും jsthon മൂല്യങ്ങളുടെ ശ്രേണി പൂർണ്ണസംഖ്യകൾക്ക് മാത്രം ഫിൽട്ടർ ചെയ്യുക \/\/ >>> filter_integers([\"a\", 3.14, 5])\n\/\/ [5]\n\/\/ >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n\/\/ [1, 2, 3]\nfunction filter_integers(values){\n","canonical_solution":"function filter_integers(values) {\n    return values.filter(value => Number.isInteger(value));\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_23","nl":"mal_Mlym","pl":"js","prompt":"\/നൽകിയ സ്ട്രിങ്ങിന്റെ നീളം തിരികെ നൽകുക \/\/ >>> strlen(\"\")\n\/\/ 0\n\/\/ >>> strlen(\"abc\")\n\/\/ 3\nfunction strlen(string){\n","canonical_solution":"function strlen(string) {\n    return string.length;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"),9);\n}\n\ntest();"},{"task_id":"HumanEval_24","nl":"mal_Mlym","pl":"js","prompt":"ഒരു നിശ്ചിത സംഖ്യ n ന്, n നെ തുല്യമായി വിഭജിക്കുന്ന ഏറ്റവും വലിയ സംഖ്യ കണ്ടെത്തുക, n നേക്കാൾ ചെറുത് \/\/ >>> largest_divisor(15)\n\/\/ 5\nfunction largest_divisor(n){\n","canonical_solution":"function largest_divisor(n) {\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return 1; \/\/ for the edge case where n is 1\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n  assert.deepEqual(candidate(49),7);\n}\n\ntest();"},{"task_id":"HumanEval_25","nl":"mal_Mlym","pl":"js","prompt":"\/ ഇൻപുട്ട് നമ്പർ എല്ലാ ഘടകങ്ങളുടെയും ഗുണനത്തിന് തുല്യമായിരിക്കണം \/ ഓരോ ഘടകങ്ങളും ഘടകവൽക്കരണത്തിൽ എത്ര തവണ പ്രത്യക്ഷപ്പെടുന്നു എന്നതിന് അനുസൃതമായി എത്ര തവണ അറേ ചെയ്യണം.\/ഏറ്റവും ചെറിയ സംഖ്യയിൽ നിന്നും ഏറ്റവും വലിയ സംഖ്യയിലേക്ക് ക്രമത്തിൽ നൽകിയ സംഖ്യയുടെ പ്രൈം ഫാക്ടറുകളുടെ അറേ തിരികെ നൽകുക.\/\/ >>> factorize(8)\n\/\/ [2, 2, 2]\n\/\/ >>> factorize(25)\n\/\/ [5, 5]\n\/\/ >>> factorize(70)\n\/\/ [2, 5, 7]\nfunction factorize(n){\n","canonical_solution":"function factorize(n) {\n    const factors = [];\n    let divisor = 2;\n\n    while (n >= 2) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n \/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n\n    return factors;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_26","nl":"mal_Mlym","pl":"js","prompt":"\/ ഘടകങ്ങളുടെ ക്രമം ഇൻപുട്ടിൽ ഉള്ളതു പോലെ തന്നെ നിലനിർത്തുക.\/ഒരു അറേയിൽ നിന്നും ഒന്നിലധികം തവണ വരുന്ന എല്ലാ എലമെന്റുകളും നീക്കം ചെയ്യുക.\/\/ >>> remove_duplicates([1, 2, 3, 2, 4])\n\/\/ [1, 3, 4]\nfunction remove_duplicates(numbers){\n","canonical_solution":"function remove_duplicates(numbers) {\n    const frequency = {};\n    \/\/ Count occurrences of each number\n    numbers.forEach(num => {\n        frequency[num] = (frequency[num] || 0) + 1;\n    });\n\n    \/\/ Filter out numbers that occur more than once\n    return numbers.filter(num => frequency[num] === 1);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"},{"task_id":"HumanEval_27","nl":"mal_Mlym","pl":"js","prompt":"\/ഒരു സ്ട്രിംഗിന്, ചെറിയ അക്ഷരങ്ങളെ വലിയ അക്ഷരങ്ങളാക്കി മാറ്റുക, വലിയ അക്ഷരങ്ങളെ ചെറിയ അക്ഷരങ്ങളാക്കി മാറ്റുക.\/\/ >>> flip_case(\"Hello\")\n\/\/ \"hELLO\"\nfunction flip_case(string){\n","canonical_solution":"function flip_case(string) {\n    let flippedString = '';\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n        if (char === char.toLowerCase()) {\n            flippedString += char.toUpperCase();\n        } else {\n            flippedString += char.toLowerCase();\n        }\n    }\n    return flippedString;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n\ntest();"},{"task_id":"HumanEval_28","nl":"mal_Mlym","pl":"js","prompt":"\/സ്ട്രിങ്ങുകളുടെ ഒരു കൂട്ടം ഒറ്റ സ്ട്രിങ്ങിലേക്ക് കൂട്ടിച്ചേര് ക്കുക \/\/ >>> concatenate([])\n\/\/ \"\"\n\/\/ >>> concatenate([\"a\", \"b\", \"c\"])\n\/\/ \"abc\"\nfunction concatenate(strings){\n","canonical_solution":"function concatenate(strings) {\n    return strings.join('');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = concatenate;\n  assert.deepEqual(candidate([]),\"\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"xyz\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\");\n}\n\ntest();"},{"task_id":"HumanEval_29","nl":"mal_Mlym","pl":"js","prompt":"\/ഒരു നിശ്ചിത പ്രിഫിക്സ് ഉപയോഗിച്ച് തുടങ്ങുന്ന സ്ട്രിങ്ങുകൾ മാത്രം ഇൻപുട്ട് അറേ ഫിൽട്ടർ ചെയ്യുക.\/\/ >>> filter_by_prefix([], \"a\")\n\/\/ []\n\/\/ >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n\/\/ [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n","canonical_solution":"function filter_by_prefix(strings, prefix) {\n    return strings.filter(str => str.startsWith(prefix));\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"},{"task_id":"HumanEval_30","nl":"mal_Mlym","pl":"js","prompt":"\/അറേയിലെ പോസിറ്റീവ് നമ്പറുകൾ മാത്രം റിട്ടേൺ ചെയ്യുക.\/\/ >>> get_positive([-1, 2, -4, 5, 6])\n\/\/ [2, 5, 6]\n\/\/ >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\/\/ [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n","canonical_solution":"function get_positive(l) {\n    return l.filter(function(num) {\n        return num > 0;\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_31","nl":"mal_Mlym","pl":"js","prompt":"\/ഒരു സംഖ്യ പ്രൈം ആണെങ്കിൽ ശരി, അല്ലാത്തപക്ഷം തെറ്റായി നൽകുന്നു.\/\/ >>> is_prime(6)\n\/\/ false\n\/\/ >>> is_prime(101)\n\/\/ true\n\/\/ >>> is_prime(11)\n\/\/ true\n\/\/ >>> is_prime(13441)\n\/\/ true\n\/\/ >>> is_prime(61)\n\/\/ true\n\/\/ >>> is_prime(4)\n\/\/ false\n\/\/ >>> is_prime(1)\n\/\/ false\nfunction is_prime(n){\n","canonical_solution":"function is_prime(n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n  \n    if (n % 2 === 0 || n % 3 === 0) return false;\n  \n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n  \n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"},{"task_id":"HumanEval_33","nl":"mal_Mlym","pl":"js","prompt":"\/ l ന്റെ അനുബന്ധ സൂചികകളുടെ മൂല്യങ്ങളുമായി താരതമ്യം ചെയ്യുമ്പോൾ, അവയെ തരം തിരിക്കുക.\/ l' എന്നത് l ന് തുല്യമാണ്, അത് മൂന്നായി വിഭജിക്കപ്പെടാത്ത സൂചികകളിൽ, അതേസമയം അതിന്റെ മൂല്യങ്ങൾ മൂന്നായി വിഭജിക്കാവുന്ന സൂചികകളിൽ തുല്യമാണ്.ഈ ഫങ്ഷൻ ഒരു അറേ l എടുക്കുകയും ഒരു അറേ l' തിരിച്ചുനൽകുകയും ചെയ്യുന്നു.\/\/ >>> sort_third([1, 2, 3])\n\/\/ [1, 2, 3]\n\/\/ >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n\/\/ [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n","canonical_solution":"function sort_third(l) {\n    \/\/ Extract the elements at indices divisible by 3\n    const elementsToSort = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            elementsToSort.push(l[i]);\n        }\n    }\n    \n    \/\/ Sort the extracted elements\n    elementsToSort.sort((a, b) => a - b);\n\n    \/\/ Place the sorted elements back into their original positions\n    let sortedIndex = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            l[i] = elementsToSort[sortedIndex++];\n        }\n    }\n    \n    return l;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_third;\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);\n  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);\n  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_34","nl":"mal_Mlym","pl":"js","prompt":"\/ഒരു അറേയിലെ തരം തിരിക്കപ്പെട്ട തനതായ ഘടകങ്ങൾ തിരികെ നൽകുന്നു \/\/ >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\/\/ [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n","canonical_solution":"function unique(l) {\n    \/\/ Use a Set to remove duplicates and then spread into an array\n    const uniqueElements = [...new Set(l)];\n    \/\/ Sort the array in ascending order\n    uniqueElements.sort((a, b) => a - b);\n    return uniqueElements;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();"},{"task_id":"HumanEval_35","nl":"mal_Mlym","pl":"js","prompt":"\/അറേയിലെ പരമാവധി എലമെന്റ് തിരികെ നൽകുക.\/\/ >>> max_element([1, 2, 3])\n\/\/ 3\n\/\/ >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\/\/ 123\nfunction max_element(l){\n","canonical_solution":"function max_element(l) {\n    if (l.length === 0) return undefined; \/\/ Return undefined if the array is empty\n    return Math.max(...l);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"},{"task_id":"HumanEval_36","nl":"mal_Mlym","pl":"js","prompt":"11 നും 13 നും ഭിന്നമാകുന്ന n നേക്കാൾ ചെറു സംഖ്യകളിൽ 7 എന്ന അക്കം എത്ര പ്രാവശ്യം കാണുന്നു എന്ന് തിരികെ നൽകുക.\/\/ >>> fizz_buzz(50)\n\/\/ 0\n\/\/ >>> fizz_buzz(78)\n\/\/ 2\n\/\/ >>> fizz_buzz(79)\n\/\/ 3\nfunction fizz_buzz(n){\n","canonical_solution":"function fizz_buzz(n) {\n    let count = 0;\n    \n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let numStr = i.toString();\n            for (let char of numStr) {\n                if (char === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"},{"task_id":"HumanEval_37","nl":"mal_Mlym","pl":"js","prompt":"\/ l ന്റെ ഇരട്ട സൂചികകളുടെ മൂല്യങ്ങളിലേക്ക്, പക്ഷേ അടുക്കിയിരിക്കുന്നു.\/ l' എന്നത് l യ്ക്ക് തുല്യമാണ്, അത് ഇരട്ട സൂചികകളിലാണ്, അതേസമയം അതിന്റെ മൂല്യങ്ങൾ ഇരട്ട സൂചികകളിലാണ്.ഈ ഫങ്ഷൻ ഒരു അറേ l എടുക്കുകയും ഒരു അറേ l' തിരിച്ചുനൽകുകയും ചെയ്യുന്നു.\/\/ >>> sort_even([1, 2, 3])\n\/\/ [1, 2, 3]\n\/\/ >>> sort_even([5, 6, 3, 4])\n\/\/ [3, 6, 5, 4]\nfunction sort_even(l){\n","canonical_solution":"function sort_even(l) {\n    \/\/ Extract the elements at even indices\n    let evenElements = [];\n    for (let i = 0; i < l.length; i += 2) {\n        evenElements.push(l[i]);\n    }\n\n    \/\/ Sort the even elements\n    evenElements.sort((a, b) => a - b);\n\n    \/\/ Reconstruct the array with sorted even indices\n    let result = [];\n    let evenIndex = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            result.push(evenElements[evenIndex]);\n            evenIndex++;\n        } else {\n            result.push(l[i]);\n        }\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_even;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n\ntest();"},{"task_id":"HumanEval_39","nl":"mal_Mlym","pl":"js","prompt":"\/prime_fib ഫിബോനാച്ചി സംഖ്യയായ n-ാം സംഖ്യയെ തിരികെ നൽകുന്നു, അത് ഒരു പ്രൈം സംഖ്യയും ആണ്.\/\/ >>> prime_fib(1)\n\/\/ 2\n\/\/ >>> prime_fib(2)\n\/\/ 3\n\/\/ >>> prime_fib(3)\n\/\/ 5\n\/\/ >>> prime_fib(4)\n\/\/ 13\n\/\/ >>> prime_fib(5)\n\/\/ 89\nfunction prime_fib(n){\n","canonical_solution":"function prime_fib(n) {\n    function isPrime(num) {\n        if (num < 2) return false;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n    \n    function fibonacci() {\n        let a = 0, b = 1;\n        return function() {\n            const next = a + b;\n            a = b;\n            b = next;\n            return a;\n        };\n    }\n\n    const fib = fibonacci();\n    let count = 0;\n    let primeFibNum;\n\n    while (count < n) {\n        const fibNum = fib();\n        if (isPrime(fibNum)) {\n            count++;\n            primeFibNum = fibNum;\n        }\n    }\n\n    return primeFibNum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"},{"task_id":"HumanEval_40","nl":"mal_Mlym","pl":"js","prompt":"\/ പൂജ്യമായി കൂട്ടിച്ചേര് ത്തു, അല്ലെങ്കിൽ തെറ്റാണ്.\/  യില് മൂന്ന് വ്യത്യസ്ത ഘടകങ്ങള് ഉണ്ടെങ്കില് അത് true ആയി തിരിച്ചു വരും\/triple_sum_to_zero ഒരു സംഖ്യകളുടെ അറേയെ ഒരു ഇൻപുട്ടായി എടുക്കുന്നു.\/\/ >>> triples_sum_to_zero([1, 3, 5, 0])\n\/\/ false\n\/\/ >>> triples_sum_to_zero([1, 3, -2, 1])\n\/\/ true\n\/\/ >>> triples_sum_to_zero([1, 2, 3, 7])\n\/\/ false\n\/\/ >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\/\/ true\n\/\/ >>> triples_sum_to_zero([1])\n\/\/ false\nfunction triples_sum_to_zero(l){\n","canonical_solution":"function triples_sum_to_zero(l) {\n    \/\/ Sort the array first\n    l.sort((a, b) => a - b);\n    \/\/ Iterate through each element in the array\n    for (let i = 0; i < l.length - 2; i++) {\n        \/\/ Use two pointers to find the other two elements\n        let left = i + 1;\n        let right = l.length - 1;\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1, 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3, 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\ntest();"},{"task_id":"HumanEval_41","nl":"mal_Mlym","pl":"js","prompt":"\/ ഈ ഫങ്ഷൻ ഇത്തരം കൂട്ടിയിടികളുടെ എണ്ണം ഔട്ട്പുട്ട് ചെയ്യുന്നു. \/ അവയുടെ പാതയില് , അവ കൂട്ടിയിടിച്ച് തല്ലിയിട്ടില്ലെന്ന പോലെ.എന്നിരുന്നാലും, കാറുകൾ അനന്തമായി കരുത്തുറ്റതും ശക്തവുമാണ്; അതിന്റെ ഫലമായി, അവ തുടർന്നും നീങ്ങുന്നു.\/ ഇടത്തുനിന്ന് വലത്തോട്ട് പോകുന്ന ഒരു കാറ് വലത്തുനിന്ന് ഇടത്തോട്ട് പോകുന്ന ഒരു കാറിനെ തട്ടുമ്പോൾ. എല്ലാ കാറുകളും ഒരേ വേഗതയിൽ നീങ്ങുന്നു. രണ്ടു കാറുകൾ കൂട്ടിയിടിക്കപ്പെടുന്നു.രണ്ടു കൂട്ടം കാറുകൾ വളരെ അകലെയായി തുടങ്ങുന്നു.n കാറുകൾ ഇടത്തുനിന്ന് വലത്തോട്ട് ഓടുന്നു. ഒരേ സമയം, n കാറുകളുടെ മറ്റൊരു കൂട്ടം.ഒരു റോഡ് സങ്കല് പ്പിക്കുക അത് തികച്ചും നേരായ ഒരു അനന്തമായ നീളമുള്ള വരയാണ്.function car_race_collision(n){\n","canonical_solution":"function car_race_collision(n) {\n    \/\/ Each car moving left to right will collide with each car moving right to left exactly once.\n    \/\/ Therefore, the number of collisions is n * n.\n    return n * n;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n}\n\ntest();"},{"task_id":"HumanEval_42","nl":"mal_Mlym","pl":"js","prompt":"1 കൊണ്ട് വർദ്ധിപ്പിച്ച മൂലകങ്ങളുള്ള ഒരു ശ്രേണി തിരികെ നൽകുക.\/\/ >>> incr_list([1, 2, 3])\n\/\/ [2, 3, 4]\n\/\/ >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\/\/ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n","canonical_solution":"function incr_list(l) {\n    return l.map(element => element + 1);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"},{"task_id":"HumanEval_43","nl":"mal_Mlym","pl":"js","prompt":"\/ പൂജ്യമായി കൂട്ടിച്ചേര് ത്തു, അല്ലെങ്കിൽ തെറ്റാണ്.\/  എന്ന് പറയുന്ന അറേയില് രണ്ട് വ്യത്യസ്ത ഘടകങ്ങള് ഉണ്ടെങ്കില് അത് true ആയി തിരിച്ചുനല് കും\/pairs_sum_to_zero ഒരു സംഖ്യകളുടെ അറേ ഒരു ഇൻപുട്ടായി എടുക്കുന്നു.\/\/ >>> pairs_sum_to_zero([1, 3, 5, 0])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([1, 3, -2, 1])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([1, 2, 3, 7])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n\/\/ true\n\/\/ >>> pairs_sum_to_zero([1])\n\/\/ false\nfunction pairs_sum_to_zero(l){\n","canonical_solution":"function pairs_sum_to_zero(l) {\n    const seen = new Set();\n    \n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    \n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);\n}\n\ntest();"},{"task_id":"HumanEval_44","nl":"mal_Mlym","pl":"js","prompt":"\/ അടിസ്ഥാന സംഖ്യകൾ 10 ൽ കുറവാണ്.\/ പരിവർത്തനത്തിനു ശേഷം സ്ട്രിംഗ് റെപ്രസന്റേഷൻ തിരികെ നൽകുന്നു.\/ഇൻപുട്ട് നമ്പർ x ന്റെ സംഖ്യാ അടിത്തറ അടിത്തറയിലേക്ക് മാറ്റുക.\/\/ >>> change_base(8, 3)\n\/\/ \"22\"\n\/\/ >>> change_base(8, 2)\n\/\/ \"1000\"\n\/\/ >>> change_base(7, 2)\n\/\/ \"111\"\nfunction change_base(x, base){\n","canonical_solution":"function change_base(x, base) {\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9.\");\n    }\n\n    if (x === 0) {\n        return \"0\";\n    }\n\n    let result = '';\n    while (x > 0) {\n        result = (x % base) + result;\n        x = Math.floor(x \/ base);\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"},{"task_id":"HumanEval_45","nl":"mal_Mlym","pl":"js","prompt":"ഒരു ത്രികോണത്തിന്റെ വശത്തിന്റെ നീളവും ഉയർന്ന മടക്ക പ്രദേശവും കണക്കിലെടുക്കുമ്പോൾ.\/\/ >>> triangle_area(5, 3)\n\/\/ 7.5\nfunction triangle_area(a, h){\n","canonical_solution":"function triangle_area(a, h) {\n    return 0.5 * a * h;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n  assert.deepEqual(candidate(2, 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n}\n\ntest();"},{"task_id":"HumanEval_46","nl":"mal_Mlym","pl":"js","prompt":"\/ ദയവായി fib4 നമ്പർ സീക്വൻസിന്റെ n-ആം എലമെന്റ് കാര്യക്ഷമമായി കണക്കുകൂട്ടാൻ ഒരു ഫംഗ്ഷൻ എഴുതുക. ആവർത്തനം ഉപയോഗിക്കരുത്. \/ ഫിബ്4എൻ) -> ഫിബ്4എൻ-1) + ഫിബ്4എൻ-2) + ഫിബ്4എൻ-3) + ഫിബ്4എൻ-4.\/ fib4(3) -> 0 \/ fib4(2) -> 2 \/ fib4(1) -> 0 \/ fib4(0) -> 0 ഫിബോനാച്ചി സീക്വൻസിന് സമാനമായ ഒരു സീക്വൻസാണ് ഫിബ് 4 നമ്പർ സീക്വൻസ്. ഇത് താഴെ പറയുന്ന രീതിയിൽ നിർവചിക്കപ്പെട്ടിരിക്കുന്നു:\/\/ >>> fib4(5)\n\/\/ 4\n\/\/ >>> fib4(6)\n\/\/ 8\n\/\/ >>> fib4(7)\n\/\/ 14\nfunction fib4(n){\n","canonical_solution":"function fib4(n) {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n    \n    let fibs = [0, 0, 2, 0];\n    \n    for (let i = 4; i <= n; i++) {\n        let nextFib = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n        fibs.shift(); \/\/ Remove the first element\n        fibs.push(nextFib); \/\/ Add the new element to the end\n    }\n    \n    return fibs[3];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n}\n\ntest();"},{"task_id":"HumanEval_47","nl":"mal_Mlym","pl":"js","prompt":"\/അറേയിലെ മൂലകങ്ങളുടെ മീഡിയൻ തിരികെ നൽകുക l. \/\/ >>> median([3, 1, 2, 4, 5])\n\/\/ 3\n\/\/ >>> median([-10, 4, 6, 1000, 10, 20])\n\/\/ 15.0\nfunction median(l){\n","canonical_solution":"function median(l) {\n    \/\/ First, sort the array\n    l.sort((a, b) => a - b);\n\n    \/\/ Calculate the middle index\n    const mid = Math.floor(l.length \/ 2);\n\n    \/\/ If array length is odd, return the middle element\n    if (l.length % 2 !== 0) {\n        return l[mid];\n    }\n    \/\/ If array length is even, return the average of the two middle elements\n    else {\n        return (l[mid - 1] + l[mid]) \/ 2;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"},{"task_id":"HumanEval_48","nl":"mal_Mlym","pl":"js","prompt":"\/ തന്നിരിക്കുന്ന സ്ട്രിംഗ് ഒരു പാലിൻഡ്രോം ആണോ എന്ന് പരിശോധിക്കുന്നു \/\/ >>> is_palindrome(\"\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aba\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aaaaa\")\n\/\/ true\n\/\/ >>> is_palindrome(\"zbcd\")\n\/\/ false\nfunction is_palindrome(text){\n","canonical_solution":"function is_palindrome(text){\n    \/\/ Remove non-alphanumeric characters and convert to lower case\n    const cleanedText = text.replace(\/[^a-zA-Z0-9]\/g, '').toLowerCase();\n    \/\/ Reverse the cleaned text\n    const reversedText = cleanedText.split('').reverse().join('');\n    \/\/ Check if the cleaned text is equal to its reverse\n    return cleanedText === reversedText;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_49","nl":"mal_Mlym","pl":"js","prompt":"\/ 2^n മോഡുലോ പി തിരിച്ചു തരൂ (നമ്പറുകളെക്കുറിച്ച് ബോധവാനായിരിക്കുക).\/\/ >>> modp(3, 5)\n\/\/ 3\n\/\/ >>> modp(1101, 101)\n\/\/ 2\n\/\/ >>> modp(0, 101)\n\/\/ 1\n\/\/ >>> modp(3, 11)\n\/\/ 8\n\/\/ >>> modp(100, 101)\n\/\/ 1\nfunction modp(n, p){\n","canonical_solution":"function modp(n, p) {\n    if (p === 1) return 0; \/\/ Base case when p is 1\n\n    \/\/ Initialize result\n    let result = 1;\n    let base = 2;\n\n    while (n > 0) {\n        \/\/ If n is odd, multiply base with result\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n\n        \/\/ n must be even now\n        n = Math.floor(n \/ 2);\n        base = (base * base) % p; \n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"},{"task_id":"HumanEval_51","nl":"mal_Mlym","pl":"js","prompt":"\/remove_vowels എന്നത് സ്ട്രിംഗ് എടുക്കുകയും സ്വരാക്ഷരങ്ങളില്ലാത്ത സ്ട്രിംഗ് തിരികെ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷനാണ്.\/\/ >>> remove_vowels(\"\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"abcdef\")\n\/\/ \"bcdf\"\n\/\/ >>> remove_vowels(\"aaaaa\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"aaBAA\")\n\/\/ \"B\"\n\/\/ >>> remove_vowels(\"zbcd\")\n\/\/ \"zbcd\"\nfunction remove_vowels(text){\n","canonical_solution":"function remove_vowels(text) {\n    return text.replace(\/[aeiouAEIOU]\/g, '');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_vowels;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"abcdef\nghijklm\"),\"bcdf\nghjklm\");\n  assert.deepEqual(candidate(\"fedcba\"),\"fdcb\");\n  assert.deepEqual(candidate(\"eeeee\"),\"\");\n  assert.deepEqual(candidate(\"acBAA\"),\"cB\");\n  assert.deepEqual(candidate(\"EcBOO\"),\"cB\");\n  assert.deepEqual(candidate(\"ybcd\"),\"ybcd\");\n}\n\ntest();"},{"task_id":"HumanEval_52","nl":"mal_Mlym","pl":"js","prompt":"\/സത്യമായി തിരിച്ചുനൽകുന്നു array l ലെ എല്ലാ സംഖ്യകളും threshold t നു താഴെ ആണെങ്കിൽ.\/\/ >>> below_threshold([1, 2, 4, 10], 100)\n\/\/ true\n\/\/ >>> below_threshold([1, 20, 4, 10], 5)\n\/\/ false\nfunction below_threshold(l, t){\n","canonical_solution":"function below_threshold(l, t) {\n    return l.every(num => num < t);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_threshold;\n  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);\n  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);\n}\n\ntest();"},{"task_id":"HumanEval_53","nl":"mal_Mlym","pl":"js","prompt":"x, y എന്നീ രണ്ടു സംഖ്യകൾ കൂട്ടുക.\/\/ >>> add(2, 3)\n\/\/ 5\n\/\/ >>> add(5, 7)\n\/\/ 12\nfunction add(x, y){\n","canonical_solution":"function add(x, y) {\n    return x + y;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate(0, 1),1);\n  assert.deepEqual(candidate(1, 0),1);\n  assert.deepEqual(candidate(2, 3),5);\n  assert.deepEqual(candidate(5, 7),12);\n  assert.deepEqual(candidate(7, 5),12);\n}\n\ntest();"},{"task_id":"HumanEval_54","nl":"mal_Mlym","pl":"js","prompt":"\/രണ്ടു വാക്കുകളിലും ഒരേ അക്ഷരമുണ്ടോ എന്ന് പരിശോധിക്കുക. \/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"abcd\", \"dddddddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"dddddddabc\", \"abcd\")\n\/\/ true\n\/\/ >>> same_chars(\"eabcd\", \"dddddddabc\")\n\/\/ false\n\/\/ >>> same_chars(\"abcd\", \"dddddddabce\")\n\/\/ false\n\/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n\/\/ false\nfunction same_chars(s0, s1){\n","canonical_solution":"function same_chars(s0, s1) {\n    const charSet0 = new Set(s0);\n    const charSet1 = new Set(s1);\n\n    if (charSet0.size !== charSet1.size) return false;\n\n    for (let char of charSet0) {\n        if (!charSet1.has(char)) return false;\n    }\n\n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\", \"aaccc\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_55","nl":"mal_Mlym","pl":"js","prompt":"ഫിബോനാച്ചി സംഖ്യയുടെ n-ാം നമ്പർ തിരികെ നൽകുക.\/\/ >>> fib(10)\n\/\/ 55\n\/\/ >>> fib(1)\n\/\/ 1\n\/\/ >>> fib(8)\n\/\/ 21\nfunction fib(n){\n","canonical_solution":"function fib(n) {\n    if (n <= 1) return n;\n    let a = 0, b = 1, result = 1;\n    for (let i = 2; i <= n; i++) {\n        result = a + b;\n        a = b;\n        b = result;\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n}\n\ntest();"},{"task_id":"HumanEval_56","nl":"mal_Mlym","pl":"js","prompt":"\/ ഓരോ തുറക്കുന്ന ബ്രാക്കറ്റിനും അനുയോജ്യമായ അടയ്ക്കുന്ന ബ്രാക്കറ്റ് ഉണ്ടെങ്കിൽ true എന്ന് റിട്ടേൺ ചെയ്യുക. \/brackets എന്നത് \"<\" ഉം \">\" ഉം അടങ്ങിയ ഒരു സ്ട്രിംഗ് ആണ്.\/\/ >>> correct_bracketing(\"<\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"<>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"<<><>>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"><<>\")\n\/\/ false\nfunction correct_bracketing(brackets){\n","canonical_solution":"function correct_bracketing(brackets) {\n    let balance = 0;\n    for (let char of brackets) {\n        if (char === '<') {\n            balance += 1;\n        } else if (char === '>') {\n            balance -= 1;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance === 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_57","nl":"mal_Mlym","pl":"js","prompt":"\/ true എന്നതിലേക്ക് മടങ്ങുക അറേ ഘടകങ്ങൾ ഏകതാനമായി വർദ്ധിക്കുകയോ കുറയ്ക്കുകയോ ചെയ്യുന്നു.\/\/ >>> monotonic([1, 2, 4, 20])\n\/\/ true\n\/\/ >>> monotonic([1, 20, 4, 10])\n\/\/ false\n\/\/ >>> monotonic([4, 1, 0, -10])\n\/\/ true\nfunction monotonic(l){\n","canonical_solution":"function monotonic(l) {\n    if (l.length <= 1) return true;\n    let isIncreasing = true;\n    let isDecreasing = true;\n    \n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            isDecreasing = false;\n        } else if (l[i] < l[i - 1]) {\n            isIncreasing = false;\n        }\n        \n        if (!isIncreasing && !isDecreasing) return false;\n    }\n    \n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"},{"task_id":"HumanEval_58","nl":"mal_Mlym","pl":"js","prompt":"\/രണ്ട് അറേകളുടെ സാധാരണ ഘടകങ്ങൾ തിരികെ നൽകുന്നു.\/\/ >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\/\/ [1, 5, 653]\n\/\/ >>> common([5, 3, 2, 8], [3, 2])\n\/\/ [2, 3]\nfunction common(l1, l2){\n","canonical_solution":"function common(l1, l2) {\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    const result = [...set1].filter(item => set2.has(item));\n    return result.sort((a, b) => a - b);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"},{"task_id":"HumanEval_59","nl":"mal_Mlym","pl":"js","prompt":"n ന്റെ ഏറ്റവും വലിയ പ്രൈം ഫാക്ടർ തിരികെ നൽകുക. n > 1 ആണെന്ന് കരുതുക, പ്രൈം അല്ല.\/\/ >>> largest_prime_factor(13195)\n\/\/ 29\n\/\/ >>> largest_prime_factor(2048)\n\/\/ 2\nfunction largest_prime_factor(n){\n","canonical_solution":"function largest_prime_factor(n) {\n  let largest = -1;\n  while (n % 2 === 0) {\n    largest = 2;\n    n \/= 2;\n  }\n  \n  for (let factor = 3; factor * factor <= n; factor += 2) {\n    while (n % factor === 0) {\n      largest = factor;\n      n \/= factor;\n    }\n  }\n  \n  if (n > 2) {\n    largest = n;\n  }\n  \n  return largest;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"},{"task_id":"HumanEval_60","nl":"mal_Mlym","pl":"js","prompt":"1 മുതൽ n വരെയുള്ള സംഖ്യകളുടെ സംഖ്യയെ കൂട്ടുന്ന ഒരു ഫങ്ഷനാണ് \/sum_to_n.\/\/ >>> sum_to_n(30)\n\/\/ 465\n\/\/ >>> sum_to_n(100)\n\/\/ 5050\n\/\/ >>> sum_to_n(5)\n\/\/ 15\n\/\/ >>> sum_to_n(10)\n\/\/ 55\n\/\/ >>> sum_to_n(1)\n\/\/ 1\nfunction sum_to_n(n){\n","canonical_solution":"function sum_to_n(n) {\n    return n * (n + 1) \/ 2;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(6),21);\n  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n  assert.deepEqual(candidate(100),5050);\n}\n\ntest();"},{"task_id":"HumanEval_61","nl":"mal_Mlym","pl":"js","prompt":"\/ ഓരോ തുറക്കുന്ന ബ്രാക്കറ്റിനും അനുയോജ്യമായ അടയ്ക്കുന്ന ബ്രാക്കറ്റ് ഉണ്ടെങ്കിൽ true എന്ന് റിട്ടേൺ ചെയ്യുക. \/brackets എന്നത് \"(\" ഉം \"\") ഉം അടങ്ങിയ ഒരു സ്ട്രിംഗ് ആണ്.\/\/ >>> correct_bracketing(\"(\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"()\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"(()())\")\n\/\/ true\n\/\/ >>> correct_bracketing(\")(()\")\n\/\/ false\nfunction correct_bracketing(brackets){\n","canonical_solution":"function correct_bracketing(brackets) {\n    let balance = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            balance++;\n        } else if (brackets[i] === ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance === 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_62","nl":"mal_Mlym","pl":"js","prompt":"\/ ഈ പോളിനോമിയുടെ ഡെറിവേറ്റീവ് അതേ രൂപത്തിൽ റിട്ടേൺ ചെയ്യുക. \/ xs[0] + xs[1] * x + xs[2] * x^2 + .... \/xs ഒരു പോളിനോമിയുടെ ഗുണകങ്ങളെ പ്രതിനിധീകരിക്കുന്നു.\/\/ >>> derivative([3, 1, 2, 4, 5])\n\/\/ [1, 4, 12, 20]\n\/\/ >>> derivative([1, 2, 3])\n\/\/ [2, 6]\nfunction derivative(xs){\n","canonical_solution":"function derivative(xs) {\n    const result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_63","nl":"mal_Mlym","pl":"js","prompt":"\/ ഫിഫ്ഫിഫ് സംഖ്യാ ശ്രേണിയുടെ n-ആം മൂലകം കാര്യക്ഷമമായി കണക്കുകൂട്ടാൻ ഒരു ഫംഗ്ഷൻ എഴുതുക. \/ ഫിബ് ഫിബ് (n) == ഫിബ് ഫിബ് (n-1) + ഫിബ് ഫിബ് (n-2) + ഫിബ് ഫിബ് (n-3).\/ fib fib ((2) == 1 \/ fib fib ((1) == 0 \/ fib fib ((0) == 0 \/ഫിബ്ഫിബ് നമ്പർ സീക്വൻസ് ഫിബോനാച്ചി സീക്വൻസുമായി സാമ്യമുള്ള ഒരു സീക്വൻസാണ്, അത് താഴെ പറയുന്ന രീതിയിൽ നിർവചിച്ചിരിക്കുന്നു: \/\/ >>> fibfib(1)\n\/\/ 0\n\/\/ >>> fibfib(5)\n\/\/ 4\n\/\/ >>> fibfib(8)\n\/\/ 24\nfunction fibfib(n){\n","canonical_solution":"function fibfib(n) {\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 1;\n    \n    let a = 0, b = 0, c = 1, d;\n\n    for (let i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    \n    return c;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n}\n\ntest();"},{"task_id":"HumanEval_64","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ സ്വരാക്ഷരം, പക്ഷേ അത് വാക്കിന്റെ അവസാനം ഉള്ളപ്പോൾ മാത്രം.\/ ഈ കേസിലെ സ്വരാക്ഷരങ്ങൾ 'a', 'e', 'i', 'o', 'u' ആണ്. ഇവിടെ, 'y' ഒരു യും ആണ്.\/ ഒരു വാക്ക് ഇൻപുട്ടായി നൽകുകയും സ്ട്രിങ്ങിലെ സ്വരാക്ഷരങ്ങളുടെ എണ്ണം നൽകുകയും ചെയ്യുന്നു.\/ഒരു ഫങ്ഷൻ എഴുതുക vowels_count അത് പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് എടുക്കുന്നു \/\/ >>> vowels_count(\"abcde\")\n\/\/ 2\n\/\/ >>> vowels_count(\"ACEDY\")\n\/\/ 3\nfunction vowels_count(s){\n","canonical_solution":"function vowels_count(s) {\n    const vowels = 'aeiou';\n    let count = 0;\n    s = s.toLowerCase();\n    \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i]) || (i === s.length - 1 && s[i] === 'y')) {\n            count++;\n        }\n    }\n\n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"ACEDY\"),3);\n}\n\ntest();"},{"task_id":"HumanEval_65","nl":"mal_Mlym","pl":"js","prompt":"\/ shift > അക്കങ്ങളുടെ എണ്ണം എങ്കിൽ, അക്കങ്ങൾ വിപരീതമായി നൽകുക.\/ ഫലം ഒരു സ്ട്രിംഗായി തിരിച്ചുനൽകുന്നു. x എന്ന സംഖ്യയുടെ അക്കം വലത്തോട്ട് നീക്കുക, വലത്തോട്ട് നീക്കുക.\/\/ >>> circular_shift(12, 1)\n\/\/ \"21\"\n\/\/ >>> circular_shift(12, 2)\n\/\/ \"12\"\nfunction circular_shift(x, shift){\n","canonical_solution":"function circular_shift(x, shift) {\n    let numStr = x.toString();\n    let length = numStr.length;\n\n    if (shift > length) {\n        return numStr.split('').reverse().join('');\n    } else {\n        let endPart = numStr.slice(-shift);\n        let startPart = numStr.slice(0, length - shift);\n        return endPart + startPart;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();"},{"task_id":"HumanEval_66","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ ASCII കോഡുകൾ .\/ ഒരു സ്ട്രിംഗ് ഇൻപുട്ടായി എടുക്കുകയും മുകളിലെ പ്രതീകങ്ങളുടെ തുക മാത്രം നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക' - ചുമതല\/\/ >>> digitSum(\"\")\n\/\/ 0\n\/\/ >>> digitSum(\"abAB\")\n\/\/ 131\n\/\/ >>> digitSum(\"abcCd\")\n\/\/ 67\n\/\/ >>> digitSum(\"helloE\")\n\/\/ 69\n\/\/ >>> digitSum(\"woArBld\")\n\/\/ 131\n\/\/ >>> digitSum(\"aAaaaXa\")\n\/\/ 153\nfunction digitSum(s){\n","canonical_solution":"function digitSum(s) {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'A' && char <= 'Z') {\n            sum += char.charCodeAt(0);\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\" How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n}\n\ntest();"},{"task_id":"HumanEval_67","nl":"mal_Mlym","pl":"js","prompt":"\/ പ്രസംഗത്തിനു വേണ്ടി: \/ കൊട്ടയില് മാങ്ങയുടെ പഴങ്ങളുടെ എണ്ണം തിരികെ നല് കുക.\/ ഓറഞ്ചും ആപ്പിളും പിന്നെ പഴങ്ങളുടെ ആകെ എണ്ണം പ്രതിനിധീകരിക്കുന്ന ഒരു സംഖ്യയും ആപ്പിളും ഓറഞ്ചും മാംഗോയും.\/ ഈ കൊട്ടയില് അടങ്ങിയിരിക്കുന്ന പഴങ്ങളുടെ ഒരു കൊട്ടയില് വിതരണം ചെയ്യപ്പെടുന്നു ഈ ടാസ്കിൽ, നിങ്ങള് ക്ക് ഒരു സ്ട്രിംഗ് ലഭിക്കും അത് ആപ്പിളുകളുടെയും ഓറഞ്ചുകളുടെയും എണ്ണം പ്രതിനിധീകരിക്കും.\/\/ >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n\/\/ 8\n\/\/ >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n\/\/ 2\n\/\/ >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n\/\/ 95\n\/\/ >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\/\/ 19\nfunction fruit_distribution(s, n){\n","canonical_solution":"function fruit_distribution(s, n) {\n    let apples = 0;\n    let oranges = 0;\n    \n    \/\/ Regular expressions to extract the number of apples and oranges from the string\n    const applesMatch = s.match(\/(\\d+)\\s*apples\/);\n    const orangesMatch = s.match(\/(\\d+)\\s*oranges\/);\n    \n    \/\/ If a match is found, parse the number\n    if (applesMatch) {\n        apples = parseInt(applesMatch[1], 10);\n    }\n    if (orangesMatch) {\n        oranges = parseInt(orangesMatch[1], 10);\n    }\n    \n    \/\/ Calculate the number of mangoes\n    const mangoes = n - (apples + oranges);\n    return mangoes;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n}\n\ntest();"},{"task_id":"HumanEval_68","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം 1: \/ ഇരട്ട മൂല്യങ്ങളില്ലെങ്കിലോ നൽകിയ അറേ ശൂന്യമാണെങ്കിലോ, മടങ്ങുക [].\/ പിക്ക് ചെയ്ത നോഡ് ഒരു അറേയിൽ റിട്ടേൺ ചെയ്യണം, [smallest_value, അതിന്റെ ഇൻഡെക്സ് ], \/ ഒരേ ചെറിയ ഇരട്ട മൂല്യമുള്ള ഒന്നിലധികം നോഡുകൾ കണ്ടെത്തിയാൽ ഏറ്റവും ചെറിയ സൂചികയുള്ള നോഡ് തിരികെ നൽകുക. \/ ഏറ്റവും ചെറിയ ഇരട്ട മൂല്യം ഉള്ള നോഡായിരിക്കണം പിക്ക് ചെയ്ത നോഡ്.നിങ്ങളുടെ ജോലി ഒരു നോഡിൽ നിന്ന് പിഴുതെടുത്ത് അത് തിരിച്ചു കൊടുക്കുക എന്നതാണ്.\/\"നല്ല സംഖ്യകളുള്ള നോഡുകളുള്ള ഒരു വൃക്ഷത്തിന്റെ ശാഖയെ പ്രതിനിധീകരിക്കുന്ന ഒരു അറേ നൽകിയിട്ടുണ്ടെങ്കിൽ \/\/ >>> pluck([4, 2, 3])\n\/\/ [2, 1]\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 2:\n\/\/ >>> pluck([1, 2, 3])\n\/\/ [2, 1]\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 3:\n\/\/ >>> pluck([])\n\/\/ []\n\/\/ Example 4:\n\/\/ >>> pluck([5, 0, 3, 0, 4, 2])\n\/\/ [0, 1]\n\/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n\/\/ so we will choose the first zero, which has the smallest index.\n\/\/ Constraints:\n\/\/ * 1 <= nodes.length <= 10000\n\/\/ * 0 <= node.value\nfunction pluck(arr){\n","canonical_solution":"function pluck(arr) {\n    let smallestEvenValue = Infinity;\n    let smallestEvenIndex = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (arr[i] < smallestEvenValue) {\n                smallestEvenValue = arr[i];\n                smallestEvenIndex = i;\n            }\n        }\n    }\n\n    return smallestEvenIndex === -1 ? [] : [smallestEvenValue, smallestEvenIndex];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_69","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ അത്തരം മൂല്യം ഇല്ലെങ്കിൽ, -1 തിരികെ നൽകുക.\/ ഒരു സംഖ്യയുടെ ആവൃത്തി അറേയില് എത്ര പ്രാവശ്യം പ്രത്യക്ഷപ്പെടുന്നു എന്നതിന്റെ അളവാണ്.\/ പൂജ്യമാണ്, കൂടാതെ സംഖ്യയുടെ മൂല്യത്തേക്കാൾ വലുതോ തുല്യമോ ആയ ഒരു ആവൃത്തി ഉണ്ട്.പോസിറ്റീവ് ഇന്ററുകളുടെ ഒരു ശൂന്യമല്ലാത്ത അറേ കിട്ടും.                                    \/\/ >>> search([4, 1, 2, 2, 3, 1])\n\/\/ 2\n\/\/ >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n\/\/ 3\n\/\/ >>> search([5, 5, 4, 4, 4])\n\/\/ -1\nfunction search(lst){\n","canonical_solution":"function search(lst) {\n    const frequencyMap = new Map();\n\n    lst.forEach(num => {\n        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);\n    });\n\n    let result = -1;\n\n    frequencyMap.forEach((count, num) => {\n        if (count >= num && num > 0 && num > result) {\n            result = num;\n        }\n    });\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_70","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ പിന്നെ ബാക്കിയുള്ള സംഖ്യകളുടെ പരമാവധി, പിന്നെ കുറഞ്ഞത് തുടങ്ങിയവ.\/ വിചിത്രമായ തരംതിരിവ്, നിങ്ങൾ ഏറ്റവും കുറഞ്ഞ മൂല്യത്തിൽ നിന്ന് ആരംഭിക്കുമ്പോൾ, \/ആന്റിജറുകളുടെ ഒരു അറേ തന്നാൽ, അജ്ഞാതമായ ക്രമത്തിൽ അറേ മടക്കുക.\/\/ >>> strange_sort_list([1, 2, 3, 4])\n\/\/ [1, 4, 2, 3]\n\/\/ >>> strange_sort_list([5, 5, 5, 5])\n\/\/ [5, 5, 5, 5]\n\/\/ >>> strange_sort_list([])\n\/\/ []\nfunction strange_sort_list(lst){\n","canonical_solution":"function strange_sort_list(lst) {\n    let result = [];\n    lst.sort((a, b) => a - b); \/\/ Sort the array in ascending order\n\n    while (lst.length) {\n        result.push(lst.shift()); \/\/ Add the minimum element\n        if (lst.length) {\n            result.push(lst.pop()); \/\/ Add the maximum element\n        }\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"},{"task_id":"HumanEval_71","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ മൂന്നാം വശത്തേക്കാൾ. \/ മൂന്നു വശങ്ങള് ഒരു സാധുവായ ത്രികോണമായി മാറുന്നത് ഏതെങ്കിലും രണ്ടു വശങ്ങളുടെ സംഖ്യ കൂടുതലായിരിക്കുമ്പോഴാണ് .\/ അല്ലെങ്കില് തിരിച്ചു പോകുക -1 \/ മൂന്നും മൂലകളും ഒരു സാധുവായ ത്രികോണമാണെങ്കിൽ ത്രികോണം 2 ദശാംശസ്ഥാനങ്ങളിലേക്ക് വൃത്താകരിക്കും.ഒരു ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുത്താൽ, ന്റെ വിസ്തീർണ്ണം തിരികെ നൽകുക.\/\/ >>> triangle_area(3, 4, 5)\n\/\/ 6.0\n\/\/ >>> triangle_area(1, 2, 10)\n\/\/ -1\nfunction triangle_area(a, b, c){\n","canonical_solution":"function triangle_area(a, b, c) {\n    \/\/ Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        \/\/ Use Heron's formula to calculate the area\n        const s = (a + b + c) \/ 2;\n        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \/\/ Return the area rounded to 2 decimal places\n        return Math.round(area * 100) \/ 100;\n    } else {\n        \/\/ Return -1 for an invalid triangle\n        return -1;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4, 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4, 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1, 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2, 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2, 2, 10),-1);\n}\n\ntest();"},{"task_id":"HumanEval_72","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ q എന്ന വസ്തു സന്തുലിതമാണെങ്കിൽ അത് പറക്കും (അത് ഒരു പാലിൻഡ്രോമിക് അറേ ആണ്) അതിന്റെ ഘടകങ്ങളുടെ ആകെത്തുക പരമാവധി സാധ്യമായ ഭാരത്തേക്കാൾ കുറവോ തുല്യമോ ആണെങ്കിൽ w.വസ്തു q പറന്നുയരുകയാണെങ്കിൽ ശരി, അല്ലാത്തപക്ഷം തെറ്റായ ഫംഗ്ഷൻ എഴുതുക.\/\/ >>> will_it_fly([1, 2], 5)\n\/\/ false\n\/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\/\/ >>> will_it_fly([3, 2, 3], 1)\n\/\/ false\n\/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\/\/ >>> will_it_fly([3, 2, 3], 9)\n\/\/ true\n\/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\/\/ >>> will_it_fly([3], 5)\n\/\/ true\n\/\/ # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n","canonical_solution":"function will_it_fly(q, w) {\n    \/\/ Check if q is a palindromic array\n    function isPalindromic(arr) {\n        for (let i = 0; i < Math.floor(arr.length \/ 2); i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \/\/ Calculate the sum of the array\n    function sumArray(arr) {\n        return arr.reduce((acc, val) => acc + val, 0);\n    }\n\n    \/\/ Check if the array is balanced and the sum is within the limit\n    return isPalindromic(q) && sumArray(q) <= w;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"},{"task_id":"HumanEval_73","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ ഒരേപോലെ മുന്നോട്ടും പിന്നോട്ടും വായിക്കപ്പെടുന്നു. ഒരു മാറ്റത്തിൽ, നിങ്ങൾക്ക് ഒരു ഘടകം മറ്റേതെങ്കിലും ഘടകത്തിലേക്ക് മാറ്റാം.\/ മാറ്റം വരുത്തണം അറേ പാലിൻഡ്രോമിക് ആക്കാൻ. ഒരു പാലിൻഡ്രോമിക് അറേ ഒരു അറേ ആണ് \/ആരേ എന്ന ഒരു അറേയിൽ, ന്റെ ഘടകങ്ങളുടെ ഏറ്റവും കുറഞ്ഞ എണ്ണം കണ്ടെത്തുക\/\/ >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\/\/ 4\n\/\/ >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n\/\/ 1\n\/\/ >>> smallest_change([1, 2, 3, 2, 1])\n\/\/ 0\nfunction smallest_change(arr){\n","canonical_solution":"function smallest_change(arr) {\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left < right) {\n        if (arr[left] !== arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();"},{"task_id":"HumanEval_74","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ രണ്ടു അറേകളിലും ഒരേ എണ്ണം കറുകളുണ്ടെങ്കിൽ, ആദ്യത്തെ അറേ തിരികെ നൽകുക.\/ അറേയിലെ എല്ലാ സ്ട്രിങ്ങുകളിലും ഉള്ള ആകെ അക്ഷരങ്ങളുടെ എണ്ണം മറ്റേ അറേയേക്കാൾ കുറവാണ്.\/ഒരു ഫങ്ഷൻ എഴുതുക, അത് രണ്ട് സ്ട്രിങ്ങുകളുടെ അറേ സ്വീകരിക്കുകയും  ഉള്ള അറേ തിരികെ നൽകുകയും ചെയ്യും.\/\/ >>> total_match([], [])\n\/\/ []\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\/\/ [\"hI\", \"Hi\"]\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n\/\/ [\"hi\", \"admin\"]\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n\/\/ [\"hI\", \"hi\", \"hi\"]\n\/\/ >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n\/\/ [\"4\"]\nfunction total_match(lst1, lst2){\n","canonical_solution":"function total_match(lst1, lst2) {\n    \/\/ Helper function to calculate total characters in an array of strings\n    const totalChars = (arr) => arr.reduce((sum, str) => sum + str.length, 0);\n\n    const total1 = totalChars(lst1);\n    const total2 = totalChars(lst2);\n\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"},{"task_id":"HumanEval_75","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ (a) 100 ൽ കുറവാണെന്ന് അറിയുന്നത്.\/ അതുമല്ലെങ്കിൽ തെറ്റാണ്. \/ഒരു ഫങ്ഷൻ എഴുതുക, അത് 3 പ്രൈം നമ്പറുകളുടെ ഗുണനമാണെങ്കിൽ ശരി എന്ന് തിരികെ നൽകും.\/\/ >>> is_multiply_prime(30)\n\/\/ true\n\/\/ 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n","canonical_solution":"function is_prime(n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction generate_primes(upper_limit) {\n    const primes = [];\n    for (let num = 2; num < upper_limit; num++) {\n        if (is_prime(num)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n\nfunction is_multiply_prime(a) {\n    if (a < 2) return false;\n    const primes = generate_primes(100);\n    const primesLength = primes.length;\n\n    for (let i = 0; i < primesLength; i++) {\n        for (let j = i; j < primesLength; j++) {\n            for (let k = j; k < primesLength; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"},{"task_id":"HumanEval_76","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ x എന്നത് n ന്റെ ഒരു ലളിതമായ പവറാണ്, n**int=x  ആണെങ്കിൽ\/ n ന്റെ ശക്തിയും മറ്റു കേസുകളിൽ തെറ്റും.നിങ്ങളുടെ ജോലി ഒരു സംഖ്യ x ഒരു ലളിതമായ  ആണെങ്കിൽ true എന്ന് നൽകുന്ന ഒരു ഫങ്ഷൻ എഴുതുക എന്നതാണ്\/\/ >>> is_simple_power(1, 4)\n\/\/ true\n\/\/ >>> is_simple_power(2, 2)\n\/\/ true\n\/\/ >>> is_simple_power(8, 2)\n\/\/ true\n\/\/ >>> is_simple_power(3, 2)\n\/\/ false\n\/\/ >>> is_simple_power(3, 1)\n\/\/ false\n\/\/ >>> is_simple_power(5, 3)\n\/\/ false\nfunction is_simple_power(x, n){\n","canonical_solution":"function is_simple_power(x, n) {\n    if (x === 1) return true;  \/\/ Any number to the power of zero is 1\n    if (n <= 1) return false;  \/\/ n must be greater than 1 to have simple powers other than itself\n\n    let power = n;\n    while (power < x) {\n        power *= n;\n    }\n\n    return power === x;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"},{"task_id":"HumanEval_77","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ കുറിപ്പ്: നിങ്ങൾ നൽകിയ വിവരം എല്ലായ്പ്പോഴും സാധുവാണെന്ന് കരുതുക.\/ ഈ ഇംഗെർ ഏതെങ്കിലുമൊരു പൂർണ്ണസംഖ്യയുടെ ക്യൂബാണെങ്കിൽ.ഒരു പൂർണ്ണസംഖ്യ a എടുക്കുകയും true തിരികെ നൽകുകയും ചെയ്യുന്ന ഒരു ഫങ്ഷൻ എഴുതുക.\/\/ >>> iscube(1)\n\/\/ true\n\/\/ >>> iscube(2)\n\/\/ false\n\/\/ >>> iscube(-1)\n\/\/ true\n\/\/ >>> iscube(64)\n\/\/ true\n\/\/ >>> iscube(0)\n\/\/ true\n\/\/ >>> iscube(180)\n\/\/ false\nfunction iscube(a){\n","canonical_solution":"function iscube(a) {\n    if (a < 0) a = -a;\n    let cubeRoot = Math.round(Math.pow(a, 1\/3));\n    return cubeRoot * cubeRoot * cubeRoot === a;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"},{"task_id":"HumanEval_78","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ A,B,C,D,E,F എന്നീ ചിഹ്നങ്ങള് എല്ലായ്പ്പോഴും വലിയ അക്ഷരങ്ങളായിരിക്കും.\/ കുറിപ്പ്: നിങ്ങള് ക്ക് എല്ലായ്പ്പോഴും ശരിയായതോ ശൂന്യമോ ആണെന്ന് കരുതാം,\/ ബി (= ദശാംശ 11), ഡി (= ദശാംശ 13). ഇനിപ്പറയുന്ന അക്കങ്ങളുടെ എണ്ണം നിങ്ങള് നിര് ണയിക്കണം: 2, 3, 5, 7, \/ പ്രൈം നമ്പറുകൾ 2, 3, 5, 7, 11, 13, 17,... ഹെക്സാഡെസിമൽ അക്കങ്ങൾ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F എന്നിവയാണ്.\/ 1 ന് മുകളിലുള്ളത്, അത് രണ്ട് ചെറിയ സംഖ്യകളുടെ ഗുണനമല്ല).\/ അക്ഷരങ്ങൾ പ്രൈം നമ്പറുകളാണ് (പ്രൈം നമ്പർ, അല്ലെങ്കിൽ ഒരു പ്രൈം, ഒരു സ്വാഭാവിക സംഖ്യയാണ് \/ ഒരു ഹെക്സാഡെസിമൽ നമ്പർ ഒരു സ്ട്രിംഗായി എണ്ണുന്നു, ഹെക്സാഡെസിമൽ നമ്പറുകളുടെ എണ്ണം നിങ്ങള് ക്ക് ഒരു ഫങ്ഷൻ എഴുതാന് നിര് ദ്ദേശമുണ്ട്.\/\/ >>> hex_key(\"AB\")\n\/\/ 1\n\/\/ >>> hex_key(\"1077E\")\n\/\/ 2\n\/\/ >>> hex_key(\"ABED1A33\")\n\/\/ 4\n\/\/ >>> hex_key(\"123456789ABCDEF0\")\n\/\/ 6\n\/\/ >>> hex_key(\"2020\")\n\/\/ 2\nfunction hex_key(num){\n","canonical_solution":"function hex_key(num) {\n    \/\/ Define a set of hexadecimal digits that are prime numbers\n    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);\n    \n    \/\/ Initialize a count variable to track the number of prime digits\n    let count = 0;\n    \n    \/\/ Iterate over each character in the input string\n    for (let char of num) {\n        \/\/ Check if the character is in the set of prime hexadecimal digits\n        if (primeHexDigits.has(char)) {\n            \/\/ Increment the count if the character is a prime digit\n            count++;\n        }\n    }\n    \n    \/\/ Return the total count of prime hexadecimal digits\n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"},{"task_id":"HumanEval_79","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ ഫോർമാറ്റിനെ സഹായിക്കുന്നതിനാണ് അധിക അക്ഷരങ്ങൾ.\/ സ്ട്രിങ്ങിന്റെ തുടക്കത്തിലും അവസാനത്തിലും ഒരു കൂട്ടം 'db' പ്രതീകങ്ങൾ ഉണ്ടാകും.\/ നമ്പർ. സ്ട്രിംഗിലെ ഓരോ പ്രതീകവും '0' അല്ലെങ്കിൽ '1' ആയിരിക്കും.\/ ബൈനറി ഫോർമാറ്റ്. ഫംഗ്ഷൻ ഒരു സ്ട്രിംഗ് നൽകണം, ഓരോ പ്രതീകവും ഒരു ബൈനറി നിങ്ങള് ക്ക് ഒരു സംഖ്യ ദശാംശ രൂപത്തില് ലഭിക്കും. നിങ്ങള് ക്ക് അതിനെ  ആയി പരിവര് ത്തനം ചെയ്യണം.\/\/ >>> decimal_to_binary(15)\n\/\/ \"db1111db\"\n\/\/ >>> decimal_to_binary(32)\n\/\/ \"db100000db\"\nfunction decimal_to_binary(decimal){\n","canonical_solution":"function decimal_to_binary(decimal) {\n    \/\/ Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n    \/\/ Add 'db' at the beginning and end of the binary string\n    return 'db' + binaryString + 'db';\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"},{"task_id":"HumanEval_80","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ ഒരു സ്ട്രിംഗ് ഹാപ്പി ആണെങ്കിൽ അതിന്റെ നീളം കുറഞ്ഞത് 3 ആണെങ്കിൽ തുടർച്ചയായ 3 അക്ഷരങ്ങളും വ്യത്യസ്തമായിരിക്കും \/ നിങ്ങളുടെ ജോലി സ്ട്രിംഗ് ഹാപ്ജസ് ആണോ അല്ലയോ എന്ന് പരിശോധിക്കുക എന്നതാണ്.നിങ്ങള് ക്ക് ഒരു സ്ട്രിംഗ് ലഭിക്കുന്നു.\/\/ >>> is_happy(\"a\")\n\/\/ false\n\/\/ >>> is_happy(\"aa\")\n\/\/ false\n\/\/ >>> is_happy(\"abcd\")\n\/\/ true\n\/\/ >>> is_happy(\"aabb\")\n\/\/ false\n\/\/ >>> is_happy(\"adb\")\n\/\/ true\n\/\/ >>> is_happy(\"xyy\")\n\/\/ false\nfunction is_happy(s){\n","canonical_solution":"function is_happy(s) {\n    if (s.length < 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_81","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ 0.0 E യും\/ > 0.0 ഡി - \/ > 0.7 ഡി \/ > 1.0 ഡി + \/ > 1.3 സി- \/ > 1.7 C യും\/ > 2.0 സി + \/ > 2.3 ബി - \/ > 2.7 ബി \/ > 3.0 ബി + \/ > 3.3 എ- \/ > 3.7 എ \/ 4.0 എ+ \/ GPA. അക്ഷരത്തിന്റെ ഗ്രേഡ്.\/ താഴെ പറയുന്ന പട്ടിക ഉപയോഗിച്ച് അക്ഷരങ്ങളുടെ ഗ്രേഡുകളുടെ ഒരു അറേ ഔട്ട്പുട്ട് ചെയ്യാൻ കഴിയുന്ന ഒരു ഫംഗ്ഷൻ: \/ അവൾ നിനക്ക് ചില വിദ്യാര് ഥികളുടെ GPA-കളുടെ ഒരു നിര തന്നിട്ടുണ്ട് , നീ എഴുതണം \/ ഒരേയൊരു പ്രശ്നം, അവൾക്ക് അവളുടെ ഗ്രേഡിംഗ് കോഡ് നഷ്ടമായിരിക്കുന്നു.അധ്യാപിക സ്വന്തം അൽഗോരിതം ഉണ്ടാക്കിയിട്ടുണ്ട്.സെമസ്റ്ററിന്റെ അവസാന ആഴ്ചയാണ്, അധ്യാപകന് ഗ്രേഡുകള് നല് കണം.\/\/ >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\/\/ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n","canonical_solution":"function numerical_letter_grade(grades){\n    return grades.map(gpa => {\n        if (gpa === 4.0) return \"A+\";\n        else if (gpa > 3.7) return \"A\";\n        else if (gpa > 3.3) return \"A-\";\n        else if (gpa > 3.0) return \"B+\";\n        else if (gpa > 2.7) return \"B\";\n        else if (gpa > 2.3) return \"B-\";\n        else if (gpa > 2.0) return \"C+\";\n        else if (gpa > 1.7) return \"C\";\n        else if (gpa > 1.3) return \"C-\";\n        else if (gpa > 1.0) return \"D+\";\n        else if (gpa > 0.7) return \"D\";\n        else if (gpa > 0.0) return \"D-\";\n        else return \"E\";\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"},{"task_id":"HumanEval_82","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ നീളം ഒരു പ്രൈം നമ്പറാണോ അതോ തെറ്റാണോ?ഒരു സ്ട്രിംഗ് എടുക്കുകയും സ്ട്രിംഗ്  ആണെങ്കിൽ true എന്ന് തിരികെ നൽകുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക.\/\/ >>> prime_length(\"Hello\")\n\/\/ true\n\/\/ >>> prime_length(\"abcdcba\")\n\/\/ true\n\/\/ >>> prime_length(\"kittens\")\n\/\/ true\n\/\/ >>> prime_length(\"orange\")\n\/\/ false\nfunction prime_length(string){\n","canonical_solution":"function prime_length(string) {\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n    \n    return isPrime(string.length);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_length;\n  assert.deepEqual(candidate(\"Hello\"),true);\n  assert.deepEqual(candidate(\"abcdcba\"),true);\n  assert.deepEqual(candidate(\"kittens\"),true);\n  assert.deepEqual(candidate(\"orange\"),false);\n  assert.deepEqual(candidate(\"wow\"),true);\n  assert.deepEqual(candidate(\"world\"),true);\n  assert.deepEqual(candidate(\"MadaM\"),true);\n  assert.deepEqual(candidate(\"Wow\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"HI\"),true);\n  assert.deepEqual(candidate(\"go\"),true);\n  assert.deepEqual(candidate(\"gogo\"),false);\n  assert.deepEqual(candidate(\"aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"Madam\"),true);\n  assert.deepEqual(candidate(\"M\"),false);\n  assert.deepEqual(candidate(\"0\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_83","nl":"mal_Mlym","pl":"js","prompt":"\/ പോസിറ്റീവ് സംഖ്യകളാണ് 1 യിൽ തുടങ്ങുന്നതും അവസാനിക്കുന്നതും.\/ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n ഉണ്ടെങ്കിൽ, n-അക്ക സംഖ്യകളുടെ എണ്ണം തിരികെ നൽകുക function starts_one_ends(n){\n","canonical_solution":"function starts_one_ends(n) {\n    if (n === 1) return 1; \/\/ For n = 1, only number is 1 itself\n\n    \/\/ Calculate the number of n-digit numbers that either start or end with 1\n    \/\/ Total n-digit numbers: 9 * 10^(n-1) (ranging from 10^(n-1) to 10^n - 1)\n\n    let totalCount = 9 * Math.pow(10, n - 1);\n\n    \/\/ Numbers that both start and end with 1: 10^(n-2) (e.g., 101, 111, 121, ..., 191 if n=3)\n    let bothStartAndEndWithOne = Math.pow(10, n - 2);\n\n    \/\/ Numbers that start with 1: 10^(n-1)\n    let startWithOne = Math.pow(10, n - 1);\n\n    \/\/ Numbers that end with 1: 9 * 10^(n-1) \/ 10 = 10^(n-1) (because we're counting 1 - 1, 11, 21, ..., 91)\n    let endWithOne = Math.pow(10, n - 1);\n\n    \/\/ Use inclusion-exclusion principle: number starts with 1 + numbers end with 1 - numbers that both start and end with 1\n    return startWithOne + endWithOne - bothStartAndEndWithOne;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n}\n\ntest();"},{"task_id":"HumanEval_84","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം \/ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ N കൊടുത്താൽ അതിന്റെ അക്കങ്ങളുടെ ആകെ സംഖ്യ ബൈനറി രൂപത്തിൽ നൽകുക. \/\/ >>> solve(1000)\n\/\/ \"1\"\n\/\/ >>> solve(150)\n\/\/ \"110\"\n\/\/ >>> solve(147)\n\/\/ \"1100\"\n\/\/ Variables:\n\/\/ @N integer\n\/\/ Constraints: 0 ≤ N ≤ 10000.\n\/\/ Output:\n\/\/ a string of binary number\nfunction solve(N){\n","canonical_solution":"function solve(N) {\n    \/\/ Convert the number to a string and split into individual characters (digits)\n    let digits = N.toString().split('');\n    \/\/ Calculate the sum of all digits\n    let sum = digits.reduce((acc, digit) => acc + Number(digit), 0);\n    \/\/ Convert the sum to a binary string and return\n    return sum.toString(2);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"},{"task_id":"HumanEval_85","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ഒരു ശൂന്യമല്ലാത്ത സംഖ്യകളുടെ അറേ തന്നാൽ lst. അപ്രതീക്ഷിത സൂചികകളിലുള്ള ഇരട്ട മൂലകങ്ങളെ കൂട്ടുക.. \/\/ >>> add([4, 2, 6, 7])\n\/\/ 2\nfunction add(lst){\n","canonical_solution":"function add(lst) {\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"},{"task_id":"HumanEval_86","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ കുറിപ്പ്: വാക്യത്തിലെ വാക്കുകളുടെയും ശൂന്യ ഇടങ്ങളുടെയും ക്രമം പാലിക്കണം.\/ ASCII മൂല്യം അടിസ്ഥാനമാക്കി ക്രമം.\/ എന്ന പദം പുതിയ വാക്കിനാൽ മാറ്റി വയ്ക്കുന്നു.\/ സ്ട്രിങ്ങിന്റെ ക്രമപ്പെടുത്തിയ പതിപ്പ്, എല്ലാ വാക്കുകളും (സ്പെയ്സ് ഉപയോഗിച്ച് വേർതിരിച്ച്) ഒരു സ്ട്രിംഗ് എടുത്ത് അതിന്റെ ക്രമീകരിച്ച പതിപ്പ് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക.\/\/ >>> anti_shuffle(\"Hi\")\n\/\/ \"Hi\"\n\/\/ >>> anti_shuffle(\"hello\")\n\/\/ \"ehllo\"\n\/\/ >>> anti_shuffle(\"Hello World!!!\")\n\/\/ \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n","canonical_solution":"function anti_shuffle(s) {\n    return s.split(' ').map(word => {\n        return word.split('').sort().join('');\n    }).join(' ');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"},{"task_id":"HumanEval_87","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ കൂടാതെ, നിരകളുടെ കോർഡിനേറ്റുകളെ താഴേയ്ക്കുള്ള ക്രമത്തിൽ അടുക്കുക.\/ കോർഡിനേറ്റുകളെ ആദ്യം കയറിവരുന്ന ക്രമത്തിൽ വരികളായി അടുക്കുക.\/ ഓരോ അറേയും ഒരു കോർഡിനേറ്റ് ആണ് - (വരി, നിരകൾ), 0 മുതൽ ആരംഭിക്കുന്നു.\/ പിന്നെ arrays ന്റെ arrays തിരിച്ചു തരാം, [(x1, y1), (x2, y2) ...] അങ്ങനെ lst, x എന്ന സംഖ്യകൾ തന്നാൽ, ന്റെ ശ്രേണിയിൽ x എന്ന സംഖ്യകൾ കണ്ടെത്തുക.\/ ഓരോ വരിയിലും വ്യത്യസ്ത എണ്ണം നിരകൾ ഉണ്ടാവാം.\/ അത് മാട്രിക്സിന് സമാനമാണ്, എന്നിരുന്നാലും, മാട്രിക്സുകളിൽ നിന്ന് വ്യത്യസ്തമായി, നിങ്ങള് ക്ക് ഒരു 2 ഡി ഡേറ്റാ നല് കിയിട്ടുണ്ട്, ഒരു നെസ്റ്റഡ് അറേ ആയി,\/\/ >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n\/\/ [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\/\/ >>> get_row([], 1)\n\/\/ []\n\/\/ >>> get_row([[], [1], [1, 2, 3]], 3)\n\/\/ [[2, 2]]\nfunction get_row(lst, x){\n","canonical_solution":"function get_row(lst, x) {\n    const result = [];\n\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n\n    result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; \/\/ Sort by columns in descending order for the same row\n        }\n        return a[0] - b[0]; \/\/ Sort by rows in ascending order\n    });\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"},{"task_id":"HumanEval_88","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ * തന്നിരിക്കുന്ന അറേ മാറ്റരുത്. \/ കുറിപ്പ്: \/ അല്ലെങ്കിൽ സംഖ്യ ((ആദ്യ സൂചിക മൂല്യം, അവസാന സൂചിക മൂല്യം) ഇരട്ടയാണെങ്കിൽ, അത് താഴേയ്ക്ക് ക്രമീകരിക്കുക.\/ നിങ്ങൾ നൽകിയ അറേയെ ക്രമത്തിൽ ക്രമീകരിക്കും, സുമ് ((ആദ്യ സൂചിക മൂല്യം, അവസാന സൂചിക മൂല്യം) അപൂർവമാണെങ്കിൽ, \/നല്ല സംഖ്യകളുടെ ഒരു അറേ തന്നിട്ടുണ്ടെങ്കിൽ, ക്രമീകരണത്തിനു ശേഷം നൽകിയ അറേയുടെ ഒരു cojs മടക്കി നൽകുക, \/\/ >>> sort_array([])\n\/\/ []\n\/\/ >>> sort_array([5])\n\/\/ [5]\n\/\/ >>> sort_array([2, 4, 3, 0, 1, 5])\n\/\/ [0, 1, 2, 3, 4, 5]\n\/\/ >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n\/\/ [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n","canonical_solution":"function sort_array(array) {\n    if (array.length === 0) return [];\n\n    let firstValue = array[0];\n    let lastValue = array[array.length - 1];\n    let sum = firstValue + lastValue;\n    \n    let sortedArray = [...array]; \/\/ Clone the array to avoid modifying the original\n\n    if (sum % 2 === 0) {\n        \/\/ Even sum: sort in descending order\n        sortedArray.sort((a, b) => b - a);\n    } else {\n        \/\/ Odd sum: sort in ascending order\n        sortedArray.sort((a, b) => a - b);\n    }\n\n    return sortedArray;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"},{"task_id":"HumanEval_89","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ രണ്ടു സ്ഥലത്ത് രണ്ടു തവണ താഴേക്ക് നീങ്ങുക.\/ അക്ഷരമാലയുടെ അക്ഷരങ്ങൾ \/ അക്ഷരമാല തിരിക്കുമ്പോള് ഒരു എൻക്രിപ്റ്റ് ചെയ്ത സ്ട്രിംഗ് നല് കുന്നു.ഒരു സ്ട്രിംഗ് ഒരു ആർഗ്യുമെന്റായി എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ എൻക്രിപ്റ്റ് സൃഷ്ടിക്കുക.\/\/ >>> encrypt(\"hi\")\n\/\/ \"lm\"\n\/\/ >>> encrypt(\"asdfghjkl\")\n\/\/ \"ewhjklnop\"\n\/\/ >>> encrypt(\"gf\")\n\/\/ \"kj\"\n\/\/ >>> encrypt(\"et\")\n\/\/ \"ix\"\nfunction encrypt(s){\n","canonical_solution":"function encrypt(s) {\n    const shift = 2 * 2; \/\/ shift down by two multiplied by two places\n    let encrypted = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        let newCharCode = ((charCode - 97 + shift) % 26) + 97; \/\/ wrap around within 'a' to 'z'\n        encrypted += String.fromCharCode(newCharCode);\n    }\n    return encrypted;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();"},{"task_id":"HumanEval_90","nl":"mal_Mlym","pl":"js","prompt":"\/ അത്തരം ഒരു ഘടകം ഇല്ലെങ്കിൽ undefined തിരികെ നൽകുക. \/ ഒരു ഫങ്ഷൻ എഴുതുക next_smallest() അത് അറേയുടെ രണ്ടാമത്തെ ചെറിയ എലമെന്റ് നൽകുന്നു. നിങ്ങള് ക്ക് ഒരു കൂട്ടം സംഖ്യകള് നല് കിയിട്ടുണ്ട്.\/\/ >>> next_smallest([1, 2, 3, 4, 5])\n\/\/ 2\n\/\/ >>> next_smallest([5, 1, 4, 3, 2])\n\/\/ 2\n\/\/ >>> next_smallest([])\n\/\/ undefined\n\/\/ >>> next_smallest([1, 1])\n\/\/ undefined\nfunction next_smallest(lst){\n","canonical_solution":"function next_smallest(lst) {\n    if (lst.length < 2) return undefined;\n    \n    let firstSmallest = Infinity;\n    let secondSmallest = Infinity;\n    \n    for (let num of lst) {\n        if (num < firstSmallest) {\n            secondSmallest = firstSmallest;\n            firstSmallest = num;\n        } else if (num < secondSmallest && num != firstSmallest) {\n            secondSmallest = num;\n        }\n    }\n    \n    return secondSmallest === Infinity ? undefined : secondSmallest;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);\n}\n\ntest();"},{"task_id":"HumanEval_91","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ വാക്യങ്ങള് ക്ക് '', '?' അഥവാ '!' എന്നീ അക്ഷരങ്ങള് ഉപയോഗിച്ച് പരിധിയുണ്ടാക്കും.\"I\" എന്ന വാക്കില് തുടങ്ങുന്ന ഒരു വാക്യമാണ് ബോറടിക്കൽ.നിങ്ങള് ക്ക് ഒരു വാക്ക് കിട്ടും, നിങ്ങളുടെ ജോലി അത് എണ്ണുക എന്നതാണ്.\/\/ >>> is_bored(\"Hello world\")\n\/\/ 0\n\/\/ >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\/\/ 1\nfunction is_bored(S){\n","canonical_solution":"function is_bored(S) {\n    \/\/ Split the string into sentences using '.', '?', and '!' as delimiters\n    const sentences = S.split(\/[.!?]\/);\n    \n    \/\/ Initialize boredom count\n    let boredomCount = 0;\n    \n    \/\/ Iterate over each sentence\n    sentences.forEach(sentence => {\n        \/\/ Trim any whitespace from the beginning of the sentence and check if it starts with \"I\"\n        if (sentence.trim().startsWith(\"I\")) {\n            boredomCount++;\n        }\n    });\n    \n    return boredomCount;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a walk\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_92","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ മറ്റു സന്ദർഭങ്ങളിൽ തെറ്റാണ്.\/ ഒരു സംഖ്യ മറ്റു രണ്ടിന്റെയും ആകെത്തുകയ്ക്ക് തുല്യമാണെങ്കിൽ, എല്ലാ സംഖ്യകളും പൂർണ്ണസംഖ്യകളാണെങ്കിൽ, അത് true ആയി നൽകുന്നു.3 സംഖ്യകൾ എടുക്കുന്ന ഒരു ഫങ്ഷൻ ഉണ്ടാക്കുക.\/\/ >>> any_int(5, 2, 7)\n\/\/ true\n\/\/ >>> any_int(3, 2, 2)\n\/\/ false\n\/\/ >>> any_int(3, -2, 1)\n\/\/ true\n\/\/ >>> any_int(3.6, -2.2, 2)\n\/\/ false\nfunction any_int(x, y, z){\n","canonical_solution":"function any_int(x, y, z) {\n    \/\/ Check if all numbers are integers\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        \/\/ Check if any number is the sum of the other two\n        return x === y + z || y === x + z || z === x + y;\n    }\n    \/\/ Return false if not all numbers are integers\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"},{"task_id":"HumanEval_93","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ അക്ഷരങ്ങൾ മാത്രം കരുതുക.\/ ഇംഗ്ലീഷ് അക്ഷരമാലയിലെ സ്വരാക്ഷരം.\/ ആ സന്ദേശത്തിന് മുന്നില് 2 സ്ഥലങ്ങള് കാണിക്കുന്ന അക്ഷരം \/ എല്ലാ അക്ഷരങ്ങളും മാറ്റി, എല്ലാ സ്വരാക്ഷരങ്ങളും മാറ്റി.ഒരു സന്ദേശം എടുത്ത്, അതിൽ എൻകോഡ് ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ എഴുതുക.\/\/ >>> encode(\"test\")\n\/\/ \"TGST\"\n\/\/ >>> encode(\"This is a message\")\n\/\/ \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n","canonical_solution":"function encode(message) {\n    \/\/ Helper function to swap the case of a character\n    function swapCase(char) {\n        if (char === char.toLowerCase()) {\n            return char.toUpperCase();\n        } else {\n            return char.toLowerCase();\n        }\n    }\n\n    \/\/ Vowel mapping\n    const vowelMap = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n        'o': 'q',\n        'u': 'w',\n        'A': 'C',\n        'E': 'G',\n        'I': 'K',\n        'O': 'Q',\n        'U': 'W'\n    };\n\n    \/\/ Encode the message\n    let encodedMessage = '';\n    \n    for (let char of message) {\n        if (\/[aeiouAEIOU]\/.test(char)) {\n            \/\/ Replace vowel with appropriate letter\n            encodedMessage += vowelMap[char];\n        } else {\n            \/\/ Swap case for non-vowel letters\n            encodedMessage += swapCase(char);\n        }\n    }\n    \n    return encodedMessage;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"},{"task_id":"HumanEval_94","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ നിങ്ങൾ ഏറ്റവും വലിയ പ്രൈം മൂല്യം കണ്ടെത്തി അതിന്റെ അക്കങ്ങളുടെ സംഖ്യ തിരികെ നൽകണം. നിങ്ങള് ക്ക് ഒരു കൂട്ടം സംഖ്യകള് നല് കിയിട്ടുണ്ട്.\/\/ >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\/\/ 10\n\/\/ >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\/\/ 25\n\/\/ >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\/\/ 13\n\/\/ >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n\/\/ 11\n\/\/ >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n\/\/ 3\n\/\/ >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n\/\/ 7\nfunction skjkasdkd(lst){\n","canonical_solution":"function skjkasdkd(lst) {\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    function sumOfDigits(num) {\n        return num.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    }\n\n    let largestPrime = -1;\n\n    for (let num of lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    return largestPrime !== -1 ? sumOfDigits(largestPrime) : 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\ntest();"},{"task_id":"HumanEval_95","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ ഫങ്ഷൻ false എന്ന് റിട്ടേൺ ചെയ്യണം, കാരണം അത് ശൂന്യമാണ്.\/ കേസ് അല്ലെങ്കിൽ എല്ലാ കീകളും വലിയക്ഷരങ്ങളിലുള്ള സ്ട്രിങ്ങുകളാണ്, അല്ലെങ്കിൽ false നൽകുക.\/ഒരു വസ്തുവിനെ കണ്ടാൽ, എല്ലാ കീകളും താഴത്തെ യിലെ സ്ട്രിങ്ങുകളാണെങ്കിൽ true തിരികെ നൽകുക.\/\/ >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n\/\/ true\n\/\/ >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n\/\/ true\nfunction check_dict_case(dict){\n","canonical_solution":"function check_dict_case(dict) {\n    const keys = Object.keys(dict);\n\n    if (keys.length === 0) return false;\n\n    const allLowerCase = keys.every(key => typeof key === 'string' && key === key.toLowerCase());\n    const allUpperCase = keys.every(key => typeof key === 'string' && key === key.toUpperCase());\n\n    return allLowerCase || allUpperCase;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n}\n\ntest();"},{"task_id":"HumanEval_96","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണത്തിന്: \/ n ല് കുറവുള്ള അസംഖ്യകളായ സംഖ്യകളാണ്.\/ഒരു ഫങ്ഷൻ നടപ്പിലാക്കുക, അത് ഒരു നെഗറ്റീവ് അല്ലാത്ത സംഖ്യയെ എടുത്ത് ആദ്യത്തെ n ന്റെ ഒരു അറേ മടക്കിനൽകുന്നു.\/\/ >>> count_up_to(5)\n\/\/ [2, 3]\n\/\/ >>> count_up_to(11)\n\/\/ [2, 3, 5, 7]\n\/\/ >>> count_up_to(0)\n\/\/ []\n\/\/ >>> count_up_to(20)\n\/\/ [2, 3, 5, 7, 11, 13, 17, 19]\n\/\/ >>> count_up_to(1)\n\/\/ []\n\/\/ >>> count_up_to(18)\n\/\/ [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n","canonical_solution":"function count_up_to(n) {\n    function isPrime(num) {\n        if (num < 2) return false;\n        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    const primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_up_to;\n  assert.deepEqual(candidate(5),[2, 3]);\n  assert.deepEqual(candidate(6),[2, 3, 5]);\n  assert.deepEqual(candidate(7),[2, 3, 5]);\n  assert.deepEqual(candidate(10),[2, 3, 5, 7]);\n  assert.deepEqual(candidate(0),[]);\n  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);\n  assert.deepEqual(candidate(1),[]);\n  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n\ntest();"},{"task_id":"HumanEval_97","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ ഇൻപുട്ട് എല്ലായ്പ്പോഴും സാധുവാണെന്ന് കരുതുക.\/ അവരുടെ യൂണിറ്റ് അക്കങ്ങളുടെ ഗുണനം. രണ്ട് പൂർണ്ണസംഖ്യകളെ എടുക്കുന്ന ഫങ്ഷൻ പൂരിപ്പിച്ച് തിരിച്ചുനൽകുന്നു.\/\/ >>> multiply(148, 412)\n\/\/ 16\n\/\/ >>> multiply(19, 28)\n\/\/ 72\n\/\/ >>> multiply(2020, 1851)\n\/\/ 0\n\/\/ >>> multiply(14, -15)\n\/\/ 20\nfunction multiply(a, b){\n","canonical_solution":"function multiply(a, b) {\n    \/\/ Get the absolute value of each number\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    \/\/ Extract the unit digit of each number\n    let unitDigitA = a % 10;\n    let unitDigitB = b % 10;\n\n    \/\/ Return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();"},{"task_id":"HumanEval_98","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ഒരു സ്ട്രിംഗ് s കൊടുത്താൽ, വലിയ അക്ഷരങ്ങളിലുള്ള വോക്കലുകളുടെ എണ്ണം കണക്കുകൂട്ടുക.\/\/ >>> count_upper(\"aBCdEf\")\n\/\/ 1\n\/\/ >>> count_upper(\"abcdefg\")\n\/\/ 0\n\/\/ >>> count_upper(\"dBBE\")\n\/\/ 0\nfunction count_upper(s){\n","canonical_solution":"function count_upper(s) {\n    const vowels = new Set(['A', 'E', 'I', 'O', 'U']);\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (vowels.has(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"},{"task_id":"HumanEval_99","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ രണ്ടു സംഖ്യകളിൽ നിന്നും, അത് പൂജ്യത്തിൽ നിന്നും കുറയ്ക്കുക. \/ അതിന് ഏറ്റവും അടുത്തുള്ള സംഖ്യയെ തിരികെ നൽകുന്നു.\/ഒരു സംഖ്യയെ പ്രതിനിധീകരിക്കുന്ന ഒരു മൂല്യം (സ്ട്രിംഗ്) എടുക്കുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക \/\/ >>> closest_integer(\"10\")\n\/\/ 10\n\/\/ >>> closest_integer(\"15.3\")\n\/\/ 15\n\/\/ Note:\n\/\/ Rounding away from zero means that if the given number is equidistant\n\/\/ from two integers, the one you should return is the one that is the\n\/\/ farthest from zero. For example closest_integer(\"14.5\") should\n\/\/ return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n","canonical_solution":"function closest_integer(value) {\n    let num = parseFloat(value);\n    if (num > 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_100","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ i എന്നത് നിലയിലെ കല്ലുകളുടെ എണ്ണം (i+1) ആണ്.\/ ഒരു അറേയിലെ ഓരോ ലെവലിലും ഉള്ള കല്ലുകളുടെ എണ്ണം തിരികെ നൽകുന്നു, അവിടെ ഘടകം സൂചികയിൽ \/ - അടുത്ത ഇരട്ട സംഖ്യ n ഇരട്ട ആണെങ്കിൽ. \/ - അടുത്ത ഇരട്ട സംഖ്യ n ഇരട്ട ആണെങ്കിൽ. \/ അടുത്ത ലെവലിലെ കല്ലുകളുടെ എണ്ണം: ആദ്യ നിലയില് n കല്ലുകളുണ്ട്.ഒരു പോസിറ്റീവ് സംഖ്യ n ഉണ്ടെങ്കിൽ, നിങ്ങൾ n ലെവൽ കല്ലുകൾ ഒരു കൂമ്പാരം ഉണ്ടാക്കണം.\/\/ >>> make_a_pile(3)\n\/\/ [3, 5, 7]\nfunction make_a_pile(n){\n","canonical_solution":"function make_a_pile(n) {\n    const pile = [];\n    let currentStones = n;\n    \n    for (let i = 0; i < n; i++) {\n        pile.push(currentStones);\n        currentStones += (currentStones % 2 === 0) ? 2 : 2;\n    }\n\n    return pile;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();"},{"task_id":"HumanEval_101","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ സ്ട്രിങ് വാക്കുകളായി വിഭജിച്ച് വാക്കുകളുടെ ഒരു ശ്രേണി തിരികെ നൽകുന്നു.നിങ്ങള് ക്ക് കോമകളോ സ്പെയ്സുകളോ ഉപയോഗിച്ച് വേര് പിരിയുന്ന വാക്കുകള് നല് കും.\/\/ >>> words_string(\"Hi, my name is John\")\n\/\/ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\/\/ >>> words_string(\"One, two, three, four, five, six\")\n\/\/ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n","canonical_solution":"function words_string(s) {\n    \/\/ Split the string by removing commas and spaces, filter out any empty strings\n    return s.split(\/[\\s,]+\/).filter(Boolean);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]);\n}\n\ntest();"},{"task_id":"HumanEval_102","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ അത്തരമൊരു സംഖ്യ ഇല്ല, അപ്പോൾ ഫംഗ്ഷൻ -1 തിരികെ നൽകണം.[x, y] പരിധിയിലുള്ള ഏറ്റവും വലിയ സമസംഖ്യ.ഈ ഫങ്ഷൻ രണ്ട് പോസിറ്റീവ് നമ്പറുകളായ x, y എന്നിവ എടുക്കുകയും  എന്ന നമ്പർ നൽകുകയും ചെയ്യുന്നു.\/\/ >>> choose_num(12, 15)\n\/\/ 14\n\/\/ >>> choose_num(13, 12)\n\/\/ -1\nfunction choose_num(x, y){\n","canonical_solution":"function choose_num(x, y) {\n    if (x > y) {\n        return -1;\n    }\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n    return -1;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6, 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7, 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();"},{"task_id":"HumanEval_103","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ n m നേക്കാൾ വലുതാണെങ്കിൽ, -1 തിരികെ നൽകുക.\/ ഉത്തരം അടുത്തുള്ള പൂർണ്ണസംഖ്യയിലേക്ക് ചുരുക്കി ബൈനറി ആയി മാറ്റുക. \/ n മുതൽ m വരെയുള്ള (n ഉം m ഉം ഉൾപ്പെടെ) മുഴുവൻ സംഖ്യകളുടെ ശരാശരി.നിങ്ങള് ക്ക് രണ്ട് പോസിറ്റീവ് സംഖ്യകളായ n ഉം m ഉം കിട്ടും, നിങ്ങളുടെ ജോലി ന്റെ \/\/ >>> rounded_avg(1, 5)\n\/\/ \"0b11\"\n\/\/ >>> rounded_avg(7, 5)\n\/\/ -1\n\/\/ >>> rounded_avg(10, 20)\n\/\/ \"0b1111\"\n\/\/ >>> rounded_avg(20, 33)\n\/\/ \"0b11010\"\nfunction rounded_avg(n, m){\n","canonical_solution":"function rounded_avg(n, m) {\n    if (n > m) {\n        return -1;\n    }\n    \n    let sum = 0;\n    let count = 0;\n    \n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    \n    let average = sum \/ count;\n    let roundedAverage = Math.round(average);\n    return \"0b\" + roundedAverage.toString(2);\n}\n\n\/\/ Example Usage\nconsole.log(rounded_avg(1, 5));   \/\/ \"0b11\"\nconsole.log(rounded_avg(7, 5));   \/\/ -1\nconsole.log(rounded_avg(10, 20)); \/\/ \"0b1111\"\nconsole.log(rounded_avg(20, 33)); \/\/ \"0b11010\"","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"},{"task_id":"HumanEval_104","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ കുറിപ്പ്: മടക്കിയ അറേ ക്രമത്തിൽ ക്രമീകരിക്കണം.\/ ഇരട്ട അക്കങ്ങളൊന്നും ഇല്ലാത്ത ഘടകങ്ങൾ.\/പോസിറ്റീവ് ഇന്റഗ്രൽ നമ്പറുകളുടെ ഒരു അറേ x. നൽകിയിട്ടുണ്ടെങ്കിൽ, എല്ലാ ന്റെയും ഒരു തരംതിരിക്കപ്പെട്ട അറേ തിരികെ നൽകുക.\/\/ >>> unique_digits([15, 33, 1422, 1])\n\/\/ [1, 15, 33]\n\/\/ >>> unique_digits([152, 323, 1422, 10])\n\/\/ []\nfunction unique_digits(x){\n","canonical_solution":"function unique_digits(x) {\n    return x.filter(num => {\n        return !num.toString().split('').some(digit => digit % 2 === 0);\n    }).sort((a, b) => a - b);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"},{"task_id":"HumanEval_105","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:ഒന്ന്, രണ്ട്, മൂന്ന്, നാല്, അഞ്ച്, ആറ്, ഏഴ്, എട്ട്, ഒമ്പത്.\/ ഫലമായി ലഭിക്കുന്ന അറേ റിവേഴ്സ് ചെയ്യുക, തുടർന്ന്  യിൽ നിന്ന് ഓരോ അക്കവും അതിന്റെ അനുബന്ധ നാമം ഉപയോഗിച്ച് മാറ്റിസ്ഥാപിക്കുക.\/ഒരു അറേ ഇന്ററുകളുടെ എണ്ണം കൊടുത്താൽ, 1 നും 9 നും ഇടയിലുള്ള ഇന്ററുകളെ തരം തിരിക്കുക, \/\/ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\/\/ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\/\/ If the array is empty, return an empty array:\n\/\/ >>> by_length([])\n\/\/ []\n\/\/ If the array has any strange number ignore it:\n\/\/ >>> by_length([1, -1, 55])\n\/\/ [\"One\"]\nfunction by_length(arr){\n","canonical_solution":"function by_length(arr) {\n  const numberNames = [\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\n    \"Six\", \"Seven\", \"Eight\", \"Nine\"\n  ];\n\n  return arr.filter(num => num >= 1 && num <= 9)\n            .sort((a, b) => a - b)\n            .reverse()\n            .map(num => numberNames[num - 1]);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"},{"task_id":"HumanEval_106","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ i യുടെ ഫാക്ടോറിയൽ 1 മുതൽ i വരെയുള്ള സംഖ്യകളുടെ ഗുണനമാണ് (1 * 2 * . . . * i).\/i 1 മുതല് തുടങ്ങുന്നു.\/ അല്ലെങ്കില് 1 മുതൽ i വരെയുള്ള സംഖ്യകളുടെ ആകെത്തുക.\/, വലിപ്പം n ഉള്ള ഒരു അറേ റിട്ടേൺ ചെയ്യുന്നു, അങ്ങനെ i എന്ന മൂലകത്തിന്റെ മൂല്യം i ന്റെ ഫാക്ടോറിയൽ ആണ്, i ഇരട്ട ആണെങ്കിൽ n നെ പരാമീറ്ററായി എടുക്കുന്ന f ഫംഗ്ഷൻ നടപ്പിലാക്കുക,\/\/ >>> f(5)\n\/\/ [1, 2, 6, 24, 15]\nfunction f(n){\n","canonical_solution":"function f(n) {\n    function factorial(num) {\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    function sumUpTo(num) {\n        return (num * (num + 1)) \/ 2; \/\/ Sum of first num natural numbers\n    }\n\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumUpTo(i));\n        }\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);\n  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);\n  assert.deepEqual(candidate(1),[1]);\n  assert.deepEqual(candidate(3),[1, 2, 6]);\n}\n\ntest();"},{"task_id":"HumanEval_107","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം 1: \/ പൂർണ്ണസംഖ്യകളുടെ പാലിൻഡ്രോമുകൾ, അവ പരിധിയിൽ വരുന്നവയാണ്.\/ഒരു പോസിറ്റീവ് ഇന്റര് നമ്പര് n നല് കിയിരിക്കുന്പോള് , ഒരു അറേ നല് കുക, അതിന് തുല്യവും അസമവുമായ സംഖ്യകളുടെ എണ്ണം ഉണ്ടായിരിക്കണം.\/\/ >>> even_odd_palindrome(3)\n\/\/ [1, 2]\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\/\/ Example 2:\n\/\/ >>> even_odd_palindrome(12)\n\/\/ [4, 6]\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\/\/ Note:\n\/\/ 1. 1 <= n <= 10^3\n\/\/ 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n","canonical_solution":"function even_odd_palindrome(n) {\n    function isPalindrome(num) {\n        let str = num.toString();\n        return str === str.split('').reverse().join('');\n    }\n\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_108","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്, -123 എന്ന സംഖ്യയുടെ ചിഹ്നം -1, 2, 3 എന്നിങ്ങനെ ആണ്.\/ ഒരു സംഖ്യ നെഗറ്റീവ് ആണെങ്കിൽ, അതിന്റെ ആദ്യത്തെ ചിഹ്നമുള്ള അക്കം നെഗറ്റീവ് ആയിരിക്കും: \/ അക്കങ്ങളുടെ സംഖ്യ 0 ആണെങ്കിൽ, ഘടകങ്ങളുടെ എണ്ണം 0 ആണെന്ന് കരുതുക.\/ count_nums എന്ന ഫങ്ഷൻ എഴുതുക, അത് ഒരു അറേ എടുത്ത് \/\/ >>> count_nums([])\n\/\/ 0\n\/\/ >>> count_nums([-1, 11, -11])\n\/\/ 1\n\/\/ >>> count_nums([1, 1, 2])\n\/\/ 3\nfunction count_nums(arr){\n","canonical_solution":"function count_nums(arr) {\n    return arr.reduce((count, num) => {\n        let str = num.toString();\n        let sum = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (i === 0 && str[i] === '-') {\n                continue;\n            }\n            sum += parseInt(str[i]);\n        }\n        if (num < 0) {\n            sum += 2 * parseInt(str[1]); \/\/ Adjust for the negative signed digit\n        }\n        return sum > 0 ? count + 1 : count;\n    }, 0);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"},{"task_id":"HumanEval_109","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ കുറിപ്പ്: തന്നിരിക്കുന്ന അറേയിൽ അദ്വിതീയ ഘടകങ്ങൾ ഉണ്ടെന്ന് ഉറപ്പുനൽകുന്നു.\/ തന്നിരിക്കുന്ന അറേ ശൂന്യമാണെങ്കിൽ true തിരികെ നൽകുക.\/ പിന്നെ ശരി തിരിച്ചു തരൂ അല്ലെങ്കിൽ തെറ്റായി തിരിച്ചു തരൂ.\/ മുകളിലുള്ള പ്രക്രിയ ചെയ്തുകൊണ്ട് തരം തിരിക്കപ്പെട്ട അറേ ലഭിക്കാന് സാധിക്കുമെങ്കില് \/ അറേയിലെ ആരംഭ സ്ഥാനമായ 0-ാം സൂചിക.\/ ശരിയായ ദിശയിൽ സ്ഥാനം. അറേയിലെ അവസാന ഘടകം യിലേക്ക് നീക്കും.\/ ഒരു വലതുവശത്തേക്കുള്ള ഷിഫ്റ്റ് ഓപ്പറേഷൻ അർത്ഥമാക്കുന്നത് അറേയിലെ എല്ലാ ഘടകങ്ങളും ഒന്നിൽ മാറ്റുക എന്നാണ്.\/ നിങ്ങൾക്ക് എത്ര തവണ വേണമെങ്കിലും വലതുവശത്തേക്ക് മാറാം.\/ തന്നിരിക്കുന്ന അറേയില് താഴെ പറയുന്ന പ്രക്രിയ: \/ ഒരു അറേ കുറയാത്ത ക്രമത്തിൽ ക്രമീകരിക്കാൻ സാധിക്കും \/ അറേയിലെ സംഖ്യകൾ ക്രമരഹിതമായി ക്രമീകരിക്കും. നിങ്ങളുടെ ചുമതല \/നമുക്ക് ഒരു അറേ 'arr' ഉണ്ട് N പൂർണ്ണസംഖ്യകളുടെ arr[1], arr[2], ..., arr[N].\/\/ >>> move_one_ball([3, 4, 5, 1, 2])\n\/\/ true\n\/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n\/\/ be achieved for the given array.\n\/\/ >>> move_one_ball([3, 5, 4, 1, 2])\n\/\/ false\n\/\/ Explanation:It is not possible to get non-decreasing order for the given\n\/\/ array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n","canonical_solution":"function move_one_ball(arr) {\n    \/\/ If the array is empty, it's trivially sorted\n    if (arr.length === 0) return true;\n\n    \/\/ Count the number of positions where the next element is smaller than the current one\n    let dropCount = 0;\n    let n = arr.length;\n\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            dropCount++;\n        }\n    }\n\n    \/\/ If the drop count is more than 1, it means more than one drop is there\n    \/\/ and thus we cannot sort it with right shifts\n    return dropCount <= 1;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_one_ball;\n  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);\n  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);\n  assert.deepEqual(candidate([4, 3, 1, 2]),false);\n  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);\n  assert.deepEqual(candidate([]),true);\n}\n\ntest();"},{"task_id":"HumanEval_110","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ അല്ലെങ്കില് , \"ഇല്ല\" എന്ന് തിരിച്ചു കൊടുക്കുക.lst1 ന്റെ എല്ലാ ഘടകങ്ങളും സമമാണെങ്കിൽ, \"YES\" എന്ന് തിരികെ നൽകുക.lst1 ഉം lst2 ഉം തമ്മിലുള്ള ഘടകങ്ങൾ മാറ്റിയെടുക്കാൻ സാധിക്കുമെങ്കിൽ\/ lst1 ഉം lst2 ഉം തമ്മിലുള്ള എക്സ്ചേഞ്ച് എലമെന്റുകളുടെ എണ്ണത്തിന് പരിധിയില്ല.\/ അവ തമ്മില് lst1 ഒരു പരമ്പര ഉണ്ടാക്കാന് .\/ ഘടകങ്ങളുടെ കൈമാറ്റം നടത്താൻ സാധിക്കുമോ എന്ന് നിർണ്ണയിക്കുന്നു ഈ പ്രശ്നത്തില് നിങ്ങള് ഒരു ഫങ്ഷൻ നടപ്പിലാക്കും അത് രണ്ട് സംഖ്യകളുടെ അറേകളാണ് എടുക്കുന്നത്,\/\/ >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\/\/ \"YES\"\n\/\/ >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\/\/ \"NO\"\n\/\/ It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n","canonical_solution":"function exchange(lst1, lst2) {\n    \/\/ Check if lst1 already consists of only even numbers\n    let allEvenLst1 = lst1.every(num => num % 2 === 0);\n    if (allEvenLst1) return \"YES\";\n    \n    \/\/ Check if there's at least one even number in lst2\n    let hasEvenInLst2 = lst2.some(num => num % 2 === 0);\n    \n    \/\/ If there is at least one even number in lst2, it's possible to perform an exchange\n    \/\/ to make all elements in lst1 even\n    if (hasEvenInLst2) return \"YES\";\n    \n    \/\/ If no conditions above are met, it's not possible to make lst1 all even\n    return \"NO\";\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();"},{"task_id":"HumanEval_111","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ ഒരേ സംഭവം പല അക്ഷരങ്ങളിലും ഉണ്ടെങ്കിൽ, അവയെല്ലാം മടക്കി നൽകുക.\/ ഏറ്റവും കൂടുതൽ തവണ ആവർത്തിക്കുന്നതും അതിനനുസരിച്ച് എണ്ണപ്പെടുന്നതുമായ അക്ഷരത്തിന്റെ \/ഒരു സ്പെയ്സ് വേർതിരിച്ച ചെറിയ അക്ഷരങ്ങളെ പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് നൽകിയിട്ടുണ്ടെങ്കിൽ, ഒരു ഒബ്ജക്റ്റ് മടക്കിനൽകുക \/\/ >>> histogram(\"a b c\")\n\/\/ {\"a\": 1, \"b\": 1, \"c\": 1}\n\/\/ >>> histogram(\"a b b a\")\n\/\/ {\"a\": 2, \"b\": 2}\n\/\/ >>> histogram(\"a b c a b\")\n\/\/ {\"a\": 2, \"b\": 2}\n\/\/ >>> histogram(\"b b b b a\")\n\/\/ {\"b\": 4}\n\/\/ >>> histogram(\"\")\n\/\/ {}\nfunction histogram(test){\n","canonical_solution":"function histogram(test) {\n  if (!test) return {};\n  \n  const letters = test.split(' ');\n  const letterCount = {};\n  \n  for (let letter of letters) {\n    if (letterCount[letter]) {\n      letterCount[letter]++;\n    } else {\n      letterCount[letter] = 1;\n    }\n  }\n  \n  let maxCount = 0;\n  for (let count of Object.values(letterCount)) {\n    if (count > maxCount) {\n      maxCount = count;\n    }\n  }\n  \n  const result = {};\n  for (let [letter, count] of Object.entries(letterCount)) {\n    if (count === maxCount) {\n      result[letter] = count;\n    }\n  }\n  \n  return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"},{"task_id":"HumanEval_112","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം \/ നിങ്ങൾ ഒരു അറേ റിട്ടേൺ ചെയ്യണം, അതിൽ ഫല സ്ട്രിംഗും true\/false ഉം അടങ്ങിയിരിക്കും.\/ ഒരു സ്ട്രിംഗ് ഒരു പലിൻഡ്രോം എന്ന് വിളിക്കപ്പെടുന്നു, അത് മുന്നോട്ടും പിന്നോട്ടും ഒരേപോലെ വായിക്കുന്നുവെങ്കിൽ.\/ പിന്നെ ഫല സ്ട്രിംഗ് പാലിൻഡ്രോം ആണോ എന്ന് പരിശോധിക്കുക. നമുക്ക് രണ്ട് സ്ട്രിങ്ങുകൾ s ഉം c ഉം കിട്ടി, s യിലെ എല്ലാ പ്രതീകങ്ങളും നീക്കം ചെയ്യണം, അത് c യിലെ ഏതെങ്കിലും പ്രതീകത്തിന് തുല്യമാണ്.- ചുമതല\/\/ >>> reverse_delete(\"abcde\", \"ae\")\n\/\/ [\"bcd\", false]\n\/\/ >>> reverse_delete(\"abcdef\", \"b\")\n\/\/ [\"acdef\", false]\n\/\/ >>> reverse_delete(\"abcdedcba\", \"ab\")\n\/\/ [\"cdedc\", true]\nfunction reverse_delete(s, c){\n","canonical_solution":"function reverse_delete(s, c) {\n    let result = '';\n    \/\/ Create a set of characters to be deleted\n    const deleteChars = new Set(c);\n    \n    \/\/ Construct the result string excluding the characters in c\n    for (let char of s) {\n        if (!deleteChars.has(char)) {\n            result += char;\n        }\n    }\n    \n    \/\/ Check if the result string is a palindrome\n    const isPalindrome = result === result.split('').reverse().join('');\n    \n    return [result, isPalindrome];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"},{"task_id":"HumanEval_113","nl":"mal_Mlym","pl":"js","prompt":"\/ ഇൻപുട്ടിന്റെ i-ാം സ്ട്രിങ്ങിലെ അപൂർവ അക്കങ്ങളുടെ എണ്ണം.\/ string i എന്ന സംഖ്യയുമായി പകരം വയ്ക്കുക.\/ ഔട്ട്പുട്ടിന്റെ ഓരോ ഘടകവും i യിലെ അപൂർവ ഘടകങ്ങളുടെ എണ്ണം ആയിരിക്കണം.\/ഒരു സ്ട്രിംഗ് സ്ട്രിംഗ് ഉണ്ടെങ്കിൽ, ഓരോ സ്ട്രിംഗിലും അക്കങ്ങൾ മാത്രം ഉണ്ടെങ്കിൽ, ഒരു സ്ട്രിംഗ് നൽകുക.\/\/ >>> odd_count([\"1234567\"])\n\/\/ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\/\/ >>> odd_count([\"3\", \"11111111\"])\n\/\/ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n","canonical_solution":"function odd_count(lst) {\n    return lst.map(str => {\n        const oddCount = Array.from(str).filter(ch => parseInt(ch) % 2 !== 0).length;\n        let sentence = \"the number of odd elements in the string i of the input.\";\n        return sentence.replace(\/i\/g, oddCount.toString());\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = odd_count;\n  assert.deepEqual(candidate([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();"},{"task_id":"HumanEval_114","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം \/ നമ്പറുകളുടെ. \/ഒരു അറേയിൽ പൂർണ്ണസംഖ്യകൾ n ആണെങ്കിൽ, ശൂന്യമല്ലാത്ത ഏതെങ്കിലും ഉപ-അറേയുടെ ഏറ്റവും കുറഞ്ഞ സംഖ്യ കണ്ടെത്തുക \/\/ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\/\/ 1\n\/\/ >>> minSubArraySum([-1, -2, -3])\n\/\/ -6\nfunction minSubArraySum(nums){\n","canonical_solution":"function minSubArraySum(nums) {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        if (currentSum > 0) {\n            currentSum = nums[i];\n        } else {\n            currentSum += nums[i];\n        }\n        minSum = Math.min(minSum, currentSum);\n    }\n    \n    return minSum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_115","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം 1: \/ ബക്കറ്റുകൾ താഴെയിറക്കാൻ എത്ര തവണ വേണമെങ്കിലും ഔട്ട്പുട്ട് ചെയ്യുക.നിങ്ങളുടെ ജോലി കിണറുകള് ഒഴുകാന് ബക്കറ്റുകള് ഉപയോഗിക്കുക എന്നതാണ്.\/ എല്ലാ ബക്കറ്റുകളിലും ഒരേ അളവാണ് ഉള്ളത്. ഓരോ കിണറിനും അതിനനുസരിച്ച് ഒരു ബക്കറ്റ് ഉണ്ട്, അതിൽ നിന്ന് വെള്ളം എടുക്കാൻ ഉപയോഗിക്കാം,\/ ഓരോ 1 വരിയും ഒരു യൂണിറ്റ് വെള്ളത്തെ പ്രതിനിധീകരിക്കുന്നു.നിങ്ങള് ക്ക് ഒരു ചതുരാകൃതിയിലുള്ള കിണറുകള് കിട്ടും. ഓരോ വരിയും ഒരൊറ്റ കിണറിനെ പ്രതിനിധീകരിക്കുന്നു,\/\/ >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\/\/ 6\n\/\/ Example 2:\n\/\/ >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n\/\/ 5\n\/\/ Example 3:\n\/\/ >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n\/\/ 0\n\/\/ Constraints:\n\/\/ * all wells have the same length\n\/\/ * 1 <= grid.length <= 10^2\n\/\/ * 1 <= grid[:,1].length <= 10^2\n\/\/ * grid[i][j] -> 0 | 1\n\/\/ * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n","canonical_solution":"function max_fill(grid, capacity) {\n    let totalWater = 0;\n    \n    for (let row of grid) {\n        for (let cell of row) {\n            totalWater += cell;\n        }\n    }\n    \n    return Math.ceil(totalWater \/ capacity);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"},{"task_id":"HumanEval_116","nl":"mal_Mlym","pl":"js","prompt":"\/ ഇത് ഇപ്രകാരം നടപ്പാക്കണം: \/ സമാനമായ എണ്ണം 1 കളുടെ, ദശാംശ മൂല്യം അടിസ്ഥാനമാക്കി അടുക്കുക.\/ ബൈനറി പ്രാതിനിധ്യത്തിലെ 1 ന്റെ എണ്ണം വർദ്ധിച്ചുവരുന്ന ക്രമത്തിൽ.ഈ കത്തയിൽ, നിങ്ങൾ ഒരു കൂട്ടം നെഗറ്റീവ് അല്ലാത്ത സംഖ്യകളെ  അനുസരിച്ച് ക്രമീകരിക്കണം\/\/ >>> sort_array([1, 5, 2, 3, 4])\n\/\/ [1, 2, 3, 4, 5]\n\/\/ >>> sort_array([-2, -3, -4, -5, -6])\n\/\/ [-6, -5, -4, -3, -2]\n\/\/ >>> sort_array([1, 0, 2, 3, 4])\n\/\/ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n","canonical_solution":"function sort_array(arr) {\n    return arr.slice().sort((a, b) => {\n        const countOnes = num => num.toString(2).split('0').join('').length;\n        const onesA = countOnes(a);\n        const onesB = countOnes(b);\n        if (onesA === onesB) {\n            return a - b;\n        }\n        return onesA - onesB;\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"},{"task_id":"HumanEval_117","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ കുറിപ്പ്: ഇൻപുട്ട് സ്ട്രിങ്ങിൽ അക്ഷരങ്ങളും സ്പെയ്സുകളും മാത്രമേ ഉള്ളൂ എന്ന് കരുതാം.\/ s ശൂന്യമാണെങ്കിൽ ഫങ്ഷൻ ഒരു ശൂന്യമായ അറേ നൽകണം.\/ n സ്വരമാലകൾ, ഈ വാക്കുകൾ s സ്ട്രിങ്ങിൽ പ്രത്യക്ഷപ്പെടുന്ന ക്രമത്തിൽ.\/ കൃത്യമായി  അടങ്ങിയിരിക്കുന്ന സ്ട്രിംഗ് s- യിൽ നിന്നുള്ള എല്ലാ വാക്കുകളുടെയും ഒരു അറേ മടക്കിനൽകുന്ന ഒരു ഫംഗ്ഷൻ.ഒരു സ്ട്രിംഗ് s ഉം ഒരു സ്വാഭാവിക സംഖ്യ n ഉം നല് കിയിരിക്കെ, നിങ്ങള് ക്ക് നടപ്പിലാക്കാന് നിര് ദ്ദേശമുണ്ട്.\/\/ >>> select_words(\"Mary had a little lamb\", 4)\n\/\/ [\"little\"]\n\/\/ >>> select_words(\"Mary had a little lamb\", 3)\n\/\/ [\"Mary\", \"lamb\"]\n\/\/ >>> select_words(\"simple white space\", 2)\n\/\/ []\n\/\/ >>> select_words(\"Hello world\", 4)\n\/\/ [\"world\"]\n\/\/ >>> select_words(\"Uncle sam\", 3)\n\/\/ [\"Uncle\"]\nfunction select_words(s, n){\n","canonical_solution":"function select_words(s, n) {\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    const words = s.split(' ');\n    const result = [];\n\n    for (let word of words) {\n        let consonantCount = 0;\n        \n        for (let char of word) {\n            if (!vowels.has(char)) {\n                consonantCount += 1;\n            }\n        }\n\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"},{"task_id":"HumanEval_118","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ ഈ സ്ട്രിങ്ങിൽ ഇംഗ്ലീഷ് അക്ഷരങ്ങൾ മാത്രമേ ഉള്ളൂ എന്ന് കരുതുക.\/ ഏതെങ്കിലും സ്വരാക്ഷരങ്ങൾ മുകളിലുള്ള വ്യവസ്ഥ പാലിക്കുന്നുണ്ടോ എന്ന് കണ്ടെത്തുക. തുടക്കത്തിലും അവസാനത്തിലും ഉള്ള സ്വരാക്ഷരങ്ങൾ കണക്കാക്കില്ല. ഇല്ലെങ്കിൽ ശൂന്യമായ സ്ട്രിംഗ് തിരികെ നൽകുക.\/ വാക്കിന്റെ വലതുഭാഗത്തുനിന്നുള്ള രണ്ടു സ്വരാക്ഷരങ്ങൾ (കേസ് സെൻസിറ്റീവ്).നിങ്ങള് ക്ക് ഒരു വാക്ക് കിട്ടും. നിങ്ങള് ക്ക് കിട്ടുന്ന ജോലി, അതില് ഇടയിലുള്ള ഏറ്റവും അടുത്ത സ്വരാക്ഷരത്തെ കണ്ടെത്തുക എന്നതാണ്.\/\/ >>> get_closest_vowel(\"yogurt\")\n\/\/ \"u\"\n\/\/ >>> get_closest_vowel(\"FULL\")\n\/\/ \"U\"\n\/\/ >>> get_closest_vowel(\"quick\")\n\/\/ \"\"\n\/\/ >>> get_closest_vowel(\"ab\")\n\/\/ \"\"\nfunction get_closest_vowel(word){\n","canonical_solution":"function get_closest_vowel(word) {\n    const vowels = \"aeiouAEIOU\";\n\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && \n            !vowels.includes(word[i - 1]) && \n            !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n\n    return \"\";\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"},{"task_id":"HumanEval_119","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ നല്ലൊരു സ്ട്രിംഗ് ഉണ്ടാക്കാന് ഒരു വഴിയുണ്ടെങ്കില് 'അതെ' എന്ന് തിരിച്ചുവിടുക, അല്ലാത്തപക്ഷം 'ഇല്ല' എന്ന് തിരിച്ചുവിടുക.\/ \"()) \" അല്ല.\/ സന്തുലിതമാണ്. ഉദാഹരണത്തിന്: '(()))) ' എന്ന സ്ട്രിംഗ് നല്ലതാണ്, അതേസമയം സ്ട്രിംഗ് \/ ഒരു സ്ട്രിംഗ് S നല്ലതായി കണക്കാക്കപ്പെടുന്നു, S യിലെ എല്ലാ പരാൻതീസിസുകളും \/ ചില ഉത്തരവ്, തത്ഫലമായുണ്ടാകുന്ന സ്ട്രിംഗ് നല്ലതായിരിക്കും. നിങ്ങളുടെ ജോലി രണ്ടു സ്ട്രിങ്ങുകളും ഒന്നിച്ച് ചേർക്കാൻ സാധിക്കുമോ എന്ന് പരിശോധിക്കുക എന്നതാണ്.\/ പരാൻതീസിസ് ' ((' അല്ലെങ്കിൽ അടുത്ത പരാൻതീസിസ് ') ' മാത്രം.നിങ്ങള് ക്ക് രണ്ട് സ്ട്രിങ്ങുകള് നല് കിയിരിക്കുന്നു, രണ്ടും തുറന്ന സ്ട്രിങ്ങുകള് \/\/ >>> match_parens([\"()(\", \")\"])\n\/\/ \"Yes\"\n\/\/ >>> match_parens([\")\", \")\"])\n\/\/ \"No\"\nfunction match_parens(lst){\n","canonical_solution":"function match_parens(lst) {\n    function isBalanced(str) {\n        let balance = 0;\n        for (let char of str) {\n            if (char === '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) return false;\n        }\n        return balance === 0;\n    }\n\n    const [s1, s2] = lst;\n    if (isBalanced(s1 + s2) || isBalanced(s2 + s1)) {\n        return 'Yes';\n    }\n    return 'No';\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();"},{"task_id":"HumanEval_120","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം 1: \/ നീളം k യും പരമാവധി k സംഖ്യകളും arr യിലുണ്ട്.\/ആരേ എന്ന സംഖ്യകളുടെ ഒരു ശ്രേണിയും k എന്ന പോസിറ്റീവ് സംഖ്യയും നൽകിയിട്ടുണ്ടെങ്കിൽ, ഒരു തരംതിരിക്കപ്പെട്ട ശ്രേണി നൽകുക \/\/ >>> maximum([-3, -4, 5], 3)\n\/\/ [-4, -3, 5]\n\/\/ Example 2:\n\/\/ >>> maximum([4, -4, 4], 2)\n\/\/ [4, 4]\n\/\/ Example 3:\n\/\/ >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\/\/ [2]\n\/\/ Note:\n\/\/ 1. The length of the array will be in the range of [1, 1000].\n\/\/ 2. The elements in the array will be in the range of [-1000, 1000].\n\/\/ 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n","canonical_solution":"function maximum(arr, k) {\n    return arr.sort((a, b) => b - a).slice(0, k).sort((a, b) => a - b);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"},{"task_id":"HumanEval_121","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ഒരു നോൺ-ശൂന്യമായ അറേ, സമനിലയിലുള്ള എല്ലാ ഇരട്ട മൂലകങ്ങളുടെയും തുക തിരികെ നൽകുക.\/\/ >>> solution([5, 8, 7, 1])\n\/\/ 12\n\/\/ >>> solution([3, 3, 3, 3, 3])\n\/\/ 9\n\/\/ >>> solution([30, 13, 24, 321])\n\/\/ 0\nfunction solution(lst){\n","canonical_solution":"function solution(lst) {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"},{"task_id":"HumanEval_122","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ arr യിലെ ആദ്യത്തെ k മൂലകങ്ങളുടെ പരമാവധി രണ്ട് അക്കങ്ങളുള്ള മൂലകങ്ങളുടെ സംഖ്യ.\/ഒരു ശൂന്യമല്ലാത്ത arr എന്ന സംഖ്യയും k എന്ന സംഖ്യയും ഉള്ള ഒരു അറേ നൽകിയാൽ, return \/\/ >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\/\/ 24\n\/\/ Constraints:\n\/\/ 1. 1 <= len(arr) <= 100\n\/\/ 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n","canonical_solution":"function add_elements(arr, k) {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (Math.abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"},{"task_id":"HumanEval_123","nl":"mal_Mlym","pl":"js","prompt":"\/ get_odd_collatz(5) [1, 5] # 5 ന്റെ കോലാറ്റ്സ് ശ്രേണി [5, 16, 8, 4, 2, 1], അതിനാൽ വിചിത്ര സംഖ്യകൾ 1 ഉം 5 ഉം മാത്രമാണ്.ഉദാഹരണത്തിന്:\/ 2. മടക്കിയ അറേ ക്രമം വർദ്ധിപ്പിക്കുന്നു.\/ 1. കോലാട്സ്                 \/ കുറിപ്പ്: \/term+1. n ന്റെ മൂല്യം എത്രയായിരുന്നാലും, തുടക്കം എപ്പോഴും 1 ആയിരിക്കും.\/ മുമ്പത്തെ പദം. മുമ്പത്തെ പദം വിചിത്രമാണെങ്കിൽ, അടുത്ത പദം മുമ്പത്തെ പദത്തിന്റെ 3 മടങ്ങ് വരും \/ മുമ്പത്തെ പദം ഇപ്രകാരമാണ്: മുമ്പത്തെ പദം ഇരട്ട ആണെങ്കിൽ, അടുത്ത പദം  ന്റെ പകുതി ആണ്.\/ താഴെ പറയുന്ന രീതിയിൽ: ഏതെങ്കിലും പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n യിൽ നിന്ന് ആരംഭിക്കുക.\/ കോലാറ്റ്സ് അനുമാനം ഒരു ഗണിതശാസ്ത്ര അനുമാനമാണ് , അത് ഒരു നിർവചിക്കപ്പെട്ട ശ്രേണിയെ സംബന്ധിക്കുന്നു \/ഒരു പോസിറ്റീവ് ഇന്റര് നമ്പര് n നല് കിയിരിക്കെ, ഒരു ക്രമീകരിച്ച അറേ തിരിച്ചുനല് കുക, അത് കോലാട്സ് ശ്രേണിയിലെ ഒറ്റ സംഖ്യകളാണ്.\/\/ >>> get_odd_collatz(5)\n\/\/ [1, 5]\nfunction get_odd_collatz(n){\n","canonical_solution":"function get_odd_collatz(n) {\n    let collatzSequence = [];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatzSequence.push(n);\n        }\n        n = n % 2 === 0 ? n \/ 2 : 3 * n + 1;\n    }\n    collatzSequence.push(1); \/\/ Include 1 as it's part of the sequence and is odd\n    return collatzSequence.sort((a, b) => a - b);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_odd_collatz;\n  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(5),[1, 5]);\n  assert.deepEqual(candidate(12),[1, 3, 5]);\n  assert.deepEqual(candidate(1),[1]);\n}\n\ntest();"},{"task_id":"HumanEval_124","nl":"mal_Mlym","pl":"js","prompt":"\/ 4. തീയതി ഈ ഫോർമാറ്റിലായിരിക്കണം: എം.എം.ഡി.ഡി.\/ 3. മാസങ്ങൾ 1 ൽ കുറവോ 12 ൽ കൂടുതലോ ആകരുത്.മാസങ്ങളിലെ ദിവസങ്ങളുടെ എണ്ണം 1,3,5,7,8,10,12 എന്നതിനേക്കാൾ കുറവോ 31 ദിവസത്തിൽ കൂടുതലോ അല്ല. മാസങ്ങളിലെ ദിവസങ്ങളുടെ എണ്ണം 4,6,9,11 എന്നതിനേക്കാൾ കുറവോ 30 ദിവസത്തിൽ കൂടുതലോ അല്ല. മാസത്തിലെ ദിവസങ്ങളുടെ എണ്ണം 1 എന്നതിനേക്കാൾ കുറവോ 29 എന്നതിനേക്കാൾ കൂടുതലോ അല്ല.\/ 1. തീയതി സ്ട്രിംഗ് ശൂന്യമല്ല.\/ താഴെ പറയുന്ന എല്ലാ നിബന്ധനകളും പാലിച്ചാൽ തീയതി സാധുവാണ്: \/ തീയതി ശരിയാണെങ്കിൽ ശരി, അല്ലാത്തപക്ഷം തെറ്റാണ്.\/നിങ്ങൾ ഒരു ഫങ്ഷൻ എഴുതണം അത് ഒരു നിശ്ചിത തീയതി സ്ട്രിംഗ് സാധൂകരിക്കും\/\/ >>> valid_date(\"03-11-2000\")\n\/\/ true\n\/\/ >>> valid_date(\"15-01-2012\")\n\/\/ false\n\/\/ >>> valid_date(\"04-0-2040\")\n\/\/ false\n\/\/ >>> valid_date(\"06-04-2020\")\n\/\/ true\n\/\/ >>> valid_date(\"06\/04\/2020\")\n\/\/ false\nfunction valid_date(date){\n","canonical_solution":"function valid_date(date) {\n    if (!date) return false;\n    \n    \/\/ Regular expression to match the date pattern mm-dd-yyyy\n    const datePattern = \/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$\/;\n    if (!datePattern.test(date)) return false;\n\n    \/\/ Split the date into parts\n    const [month, day, year] = date.split('-').map(Number);\n\n    \/\/ Check the valid number of days per month\n    if (month === 2) {\n        \/\/ Check for February, normally 28 max days, 29 if leap year\n        const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n        if (day > 29 || (day === 29 && !isLeapYear)) return false;\n    } else if ([4, 6, 9, 11].includes(month)) {\n        \/\/ April, June, September, November have 30 max days\n        if (day > 30) return false;\n    } else {\n        \/\/ Other months have 31 max days\n        if (day > 31) return false;\n    }\n\n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_125","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ അക്ഷരമാല, ഓർഡർ a) = 0, ഓർഡർ b) = 1, . . . ഓർഡർ z) = 25 \/ കോമകളായി വിഭജിക്കപ്പെടണം ',' കോമകളില്ലെങ്കിൽ,  യിൽ അപൂർവ ക്രമത്തിലുള്ള ചെറിയ അക്ഷരങ്ങളുടെ എണ്ണം നിങ്ങൾ നൽകണം.\/ഒരു വാക്കുകളുടെ സ്ട്രിംഗ് തന്നാൽ, നിങ്ങൾ തിരയുന്ന വാചകത്തിൽ വെളുത്ത ഇടങ്ങൾ ഇല്ലെങ്കിൽ, ശൂന്യ ഇടങ്ങളിൽ വിഭജിച്ച വാക്കുകളുടെ ഒരു ശ്രേണി തിരികെ നൽകുക.\/\/ >>> split_words(\"Hello world!\")\n\/\/ [\"Hello\", \"world!\"]\n\/\/ >>> split_words(\"Hello,world!\")\n\/\/ [\"Hello\", \"world!\"]\n\/\/ >>> split_words(\"abcdef\")\n\/\/ 3\nfunction split_words(txt){\n","canonical_solution":"function split_words(txt) {\n    if (\/\\s\/.test(txt)) {\n        \/\/ Split on whitespace if it exists\n        return txt.split(\/\\s+\/);\n    } else if (\/,\/.test(txt)) {\n        \/\/ Split on commas if no whitespace exists\n        return txt.split(',');\n    } else {\n        \/\/ Return count of lowercase letters with odd order in the alphabet\n        let oddOrderCount = 0;\n        for (let i = 0; i < txt.length; i++) {\n            let char = txt[i];\n            if (char >= 'a' && char <= 'z') {\n                let order = char.charCodeAt(0) - 'a'.charCodeAt(0);\n                if (order % 2 !== 0) {\n                    oddOrderCount++;\n                }\n            }\n        }\n        return oddOrderCount;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_126","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ number, false എന്ന നമ്പർ നൽകുന്നു. നെഗറ്റീവ് നമ്പറുകളില്ല, പൂർണ്ണസംഖ്യകൾ മാത്രം.\/ ക്രമം വർദ്ധിച്ചു കൊണ്ടിരിക്കുകയാണ്.\/നമ്പറുകളുടെ ഒരു ശ്രേണി തന്നിട്ടുള്ളതുകൊണ്ട്, അവ ക്രമീകരിച്ചാലും ഇല്ലെങ്കിലും, മടക്കിനൽകുന്നു.\/\/ >>> is_sorted([5])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 3, 4, 5])\n\/\/ true\n\/\/ >>> is_sorted([1, 3, 2, 4, 5])\n\/\/ false\n\/\/ >>> is_sorted([1, 2, 3, 4, 5, 6])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n\/\/ true\n\/\/ >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n\/\/ false\n\/\/ >>> is_sorted([1, 2, 2, 3, 3, 4])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 2, 2, 3, 4])\n\/\/ false\nfunction is_sorted(lst){\n","canonical_solution":"function is_sorted(lst) {\n    if (lst.length <= 1) return true;\n\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        if (lst[i] === lst[i + 1]) {\n            \/\/ Check if more than 1 duplicate by looking two steps ahead\n            if (i + 2 < lst.length && lst[i] === lst[i + 2]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"},{"task_id":"HumanEval_127","nl":"mal_Mlym","pl":"js","prompt":"\/ [ഇൻപുട്ട് \/ ഔട്ട്പുട്ട്] സാമ്പിളുകൾ: \/ രണ്ടു ഇടവേളകളും പരസ്പരം കൂടിക്കലരുകയില്ലെങ്കിൽ, \"NO\" എന്ന് തിരികെ നൽകുക.\/ അല്ലെങ്കില് , \"ഇല്ല\" എന്ന് തിരിച്ചു കൊടുക്കുക.\/ കവലയുടെ നീളം ഒരു പ്രൈം നമ്പർ ആണെങ്കിൽ, \"YES\" എന്ന് തിരികെ നൽകുക, \/ അതിന്റെ നീളം 1 ആണ്, അത് ഒരു പ്രൈം നമ്പർ അല്ല.ഉദാഹരണത്തിന്, (1, 3), (2, 4) എന്നീ ഇടവേളകളുടെ വിഭജനം (2, 3) ആണ്.\/ ഇടവേളകൾ ഒരു പ്രൈം നമ്പറാണ്. \/ നിങ്ങളുടെ ജോലി ഈ രണ്ടു ന്റെ കവലയുടെ നീളം നിർണ്ണയിക്കുക എന്നതാണ്\/ ഓരോ നിശ്ചിത ഇടവേളയ്ക്കും, അതിന്റെ തുടക്കം അതിന്റെ അവസാനത്തേക്കാൾ കുറവോ തുല്യമോ ആണെന്ന് കരുതപ്പെടുന്നു.\/ ആരംഭവും അവസാനവും ഉൾപ്പെടുന്നു.\/ തന്നിരിക്കുന്ന ഇടവേളകൾ അടച്ചിരിക്കുന്നു, അതായത് ഇടവേള (ആരംഭം, അവസാനം) \/ ഓരോ ഇടവേളയും ഒരു ജോടി പൂർണ്ണസംഖ്യകളാണ്. ഉദാഹരണത്തിന്, ഇടവേള = (ആരംഭം, അവസാനം) = (1, 2).നിങ്ങള് ക്ക് രണ്ടു ഇടവേളകളാണ് നല് കിയിരിക്കുന്നത്.\/\/ >>> intersection([1, 2], [2, 3])\n\/\/ \"NO\"\n\/\/ >>> intersection([-1, 1], [0, 4])\n\/\/ \"NO\"\n\/\/ >>> intersection([-3, -1], [-5, 5])\n\/\/ \"YES\"\nfunction intersection(interval1, interval2){\n","canonical_solution":"function intersection(interval1, interval2) {\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n\n    \/\/ Determine the start and end of the intersection\n    const startIntersection = Math.max(start1, start2);\n    const endIntersection = Math.min(end1, end2);\n\n    \/\/ Calculate the length of the intersection\n    const intersectionLength = endIntersection - startIntersection;\n\n    \/\/ Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    \/\/ Check if the length of the intersection is a prime number\n    return intersectionLength > 0 && isPrime(intersectionLength) ? \"YES\" : \"NO\";\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"},{"task_id":"HumanEval_128","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ കുറിപ്പ്: ശൂന്യമായ arr ന്റെ റിട്ടേൺ നിർവചിച്ചിട്ടില്ല.\/ അറേയിലെ ഓരോ സംഖ്യയും 1, -1 അല്ലെങ്കിൽ 0 ആയി പ്രതിനിധീകരിക്കുന്നു.\/ പൂർണ്ണസംഖ്യകളുടെ ആകെത്തുക എല്ലാ അടയാളങ്ങളുടെയും ഗുണിതത്താൽ ഗുണിച്ചാല് നിങ്ങള് ക്ക് ഒരു അറേ കിട്ടും, നിങ്ങള് ക്ക് അത് തിരിച്ചു കൊടുക്കണം.\/\/ >>> prod_signs([1, 2, 2, -4])\n\/\/ 9\n\/\/ >>> prod_signs([0, 1])\n\/\/ 0\n\/\/ >>> prod_signs([])\n\/\/ undefined\nfunction prod_signs(arr){\n","canonical_solution":"function prod_signs(arr) {\n    if (arr.length === 0) return undefined;\n\n    let sumOfMagnitudes = 0;\n    let productOfSigns = 1;\n\n    for (let num of arr) {\n        sumOfMagnitudes += Math.abs(num);\n        productOfSigns *= (num === 0 ? 0 : Math.sign(num));\n    }\n\n    return sumOfMagnitudes * productOfSigns;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();"},{"task_id":"HumanEval_129","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ ഏറ്റവും കുറഞ്ഞ പാത കടന്നുപോകുന്ന സെല്ലുകളിലെ മൂല്യങ്ങളുടെ ഒരു ക്രമീകരിച്ച അറേ മടക്കിനൽകുന്നു. \/ ഉത്തരം തനതായതാണെന്ന് ഉറപ്പുനൽകുന്നു.\/ lst_A[j] = lst_B[j]  എന്നാണു് ഈ പദം ഉപയോഗിക്കുന്നത്.\/ lst_A[i] < lst_B[i] എന്നിങ്ങനെ ഏതെങ്കിലും j (1 <= j < i) നായി നമുക്ക് \/ lst_B-നേക്കാൾ, മറ്റൊരു വിധത്തിൽ പറഞ്ഞാൽ, ഒരു പൂർണ്ണസംഖ്യാ സൂചിക i (1 <= i <= k)  നിലവിലുണ്ട്.\/ വഴി (നമുക്ക് അവരെ lst_A ഉം lst_B ഉം എന്ന് വിളിക്കാം), lst_A ലെക്സിക്കോഗ്രാഫിക്കല് ആയി കുറവാണ് \/ A, B എന്നീ സെല്ലുകളിലെ മൂല്യങ്ങളുടെ ക്രമീകരിച്ച അറേകൾ നിർമ്മിച്ചതിനുശേഷം പോകുക \/ ഒരു പാത A (നീളം k) ഒരു പാത B (നീളം k) നേക്കാൾ ചെറുതായി കണക്കാക്കപ്പെടുന്നു \/ നിനക്ക് ഗ്രിഡിൽ നിന്നും പുറത്തു പോകാനാവില്ല.\/ അവശ്യം വേറിട്ടു നിൽക്കുന്നവ).\/ k നീളമുള്ള ഒരു പാത കൃത്യമായി k സെല്ലുകൾ സന്ദർശിക്കുമെന്നാണ് അർത്ഥമാക്കുന്നത് (അല്ല \/ സെല് . മറ്റൊരു വാക്കില് , നിങ്ങള് ക്ക് നിങ്ങളുടെ നിലവിലെ ഘടകങ്ങളുമായി ഒരു വശത്ത് പങ്കിടുന്ന സെല്ലുകളിലേക്ക് പോകാം.\/ ഏതെങ്കിലും സെല്ലിൽ നിന്നും, ഓരോ ഘട്ടത്തിലും നിങ്ങള്ക്ക് അയല് സെല്ലുകളിലേയ്ക്ക് പോകാം, ഗ്രിഡിലെ k നീളമുള്ള ഏറ്റവും കുറഞ്ഞ പാത കണ്ടെത്തണം.\/ ഉൾപ്പെടെയുള്ളവ ഗ്രിഡിലെ സെല്ലുകളിൽ കൃത്യമായി ഒരു തവണ പ്രത്യക്ഷപ്പെടുന്നു.ഗ്രിഡിലെ ഓരോ സെല്ലിലും ഒരു മൂല്യം അടങ്ങിയിരിക്കുന്നു. [1, N * N] യിലെ ഓരോ പൂർണ്ണസംഖ്യയും.N വരികളും N നിരകളും ഉള്ള ഒരു ഗ്രിഡ് (N >= 2) ഒരു പോസിറ്റീവ് ഇന്റീജർ k, \/\/ >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n\/\/ [1, 2, 1]\n\/\/ >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n\/\/ [1]\nfunction minPath(grid, k){\n","canonical_solution":"function minPath(grid, k) {\n    const N = grid.length;\n    const directions = [\n        [0, 1], \/\/ right\n        [1, 0], \/\/ down\n        [0, -1], \/\/ left\n        [-1, 0]  \/\/ up\n    ];\n    \n    let minPathResult = Array(k).fill(Infinity);\n\n    function dfs(x, y, path) {\n        if (path.length === k) {\n            \/\/ Check if the current path is lexicographically smaller\n            if (comparePaths(path, minPathResult)) {\n                minPathResult = [...path];\n            }\n            return;\n        }\n\n        for (const [dx, dy] of directions) {\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                path.push(grid[nx][ny]);\n                dfs(nx, ny, path);\n                path.pop();\n            }\n        }\n    }\n    \n    function comparePaths(pathA, pathB) {\n        for (let i = 0; i < pathA.length; i++) {\n            if (pathA[i] < pathB[i]) return true;\n            if (pathA[i] > pathB[i]) return false;\n        }\n        return false;\n    }\n\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            dfs(i, j, [grid[i][j]]);\n        }\n    }\n\n    return minPathResult;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minPath;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);\n  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);\n  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_130","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ ട്രിബൊനാച്ചി ശ്രേണിയിലെ ആദ്യത്തെ n + 1 സംഖ്യകൾ. നിങ്ങള് ക്ക് ഒരു നെഗറ്റീവ് അല്ലാത്ത സംഖ്യ n കിട്ടും, നിങ്ങള് ന്റെ ഒരു അറേ തിരിച്ച് കൊടുക്കണം.\/ = 2 + 3 + 3 = 8 \/ ത്രി3) = ത്രി2) + ത്രി1) + ത്രി4)\/ ത്രി4) = 3 \/ ട്രി) = 1 + (2 \/ 2) = 2 ഉദാഹരണത്തിന്:\/ tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1), n വിചിത്രമാണെങ്കിൽ. \/ tri (n) = 1 + n \/ 2, n ഇരട്ട ആണെങ്കിൽ\/ ത്രി1) = 3 \/ ട്രിബൊനാച്ചി ശ്രേണിയെ നിർവചിക്കുന്നത് താഴെ പറയുന്ന ആവർത്തനമാണ്: എന്നിരുന്നാലും, ആളുകൾക്ക് അറിയാത്തത് ട്രിബൊനാച്ചി ശ്രേണിയാണ്.ഫിബോനാച്ചി ശ്രേണിയെ എല്ലാവരും അറിയുന്നു, അത് ഗണിതശാസ്ത്രജ്ഞർ ആഴത്തിൽ പഠിച്ചു.\/\/ >>> tri(3)\n\/\/ [1, 3, 2, 8]\nfunction tri(n){\n","canonical_solution":"function tri(n) {\n    if (n < 0) return [];\n    \n    let tribonacci = new Array(n + 1);\n\n    for (let i = 0; i <= n; i++) {\n        if (i === 1) {\n            tribonacci[i] = 3;\n        } else if (i % 2 === 0) {\n            tribonacci[i] = 1 + i \/ 2;\n        } else {\n            tribonacci[i] = \n                (tribonacci[i - 1] !== undefined ? tribonacci[i - 1] : 0) + \n                (tribonacci[i - 2] !== undefined ? tribonacci[i - 2] : 0) + \n                (tribonacci[i + 1] !== undefined ? tribonacci[i + 1] : 0);\n        }\n    }\n\n    return tribonacci;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_131","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ എല്ലാ അക്കങ്ങളും ജോഡി ആണെങ്കിൽ 0 തിരികെ നൽകുക. \/ഒരു പോസിറ്റീവ് പൂർണ്ണസംഖ്യ n ഉണ്ടെങ്കിൽ, ഘടകങ്ങളുടെ ഗുണിതം തിരികെ നൽകുക.\/\/ >>> digits(1)\n\/\/ 1\n\/\/ >>> digits(4)\n\/\/ 0\n\/\/ >>> digits(235)\n\/\/ 15\nfunction digits(n){\n","canonical_solution":"function digits(n) {\n    let product = 1;\n    let hasOdd = false;\n\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n \/ 10);\n    }\n\n    return hasOdd ? product : 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"},{"task_id":"HumanEval_132","nl":"mal_Mlym","pl":"js","prompt":"\/ ഇവിടെ കുറഞ്ഞത് ഒരു ബ്രാക്കറ്റ് എങ്കിലും നെസ്റ്റ് ചെയ്തിരിക്കുന്നു.\/ ബ്രാക്കറ്റുകളുടെ സാധുവായ ഒരു ഉപക്രമം ഉണ്ടെങ്കിൽ മാത്രമേ ഫംഗ്ഷൻ true ആയി മടങ്ങുകയുള്ളൂ \/ഒരു ഫങ്ഷൻ ഉണ്ടാക്കുക, അത് ഒരു സ്ട്രിംഗ് ആണ് ഇൻപുട്ട് ചെയ്യുന്നത് അതിൽ ചതുരാകൃതിയിലുള്ള ബ്രാക്കറ്റുകൾ മാത്രമേ ഉള്ളൂ.\/\/ >>> is_nested(\"[[]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[]]]]]]][[[[[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[][]\")\n\/\/ false\n\/\/ >>> is_nested(\"[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[[][]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[[]][[\")\n\/\/ true\nfunction is_nested(string){\n","canonical_solution":"function is_nested(string) {\n    let openCount = 0;\n    let nested = false;\n\n    for (let char of string) {\n        if (char === '[') {\n            if (openCount > 0) {\n                nested = true;\n            }\n            openCount++;\n        } else if (char === ']') {\n            if (openCount > 0) {\n                openCount--;\n            }\n        }\n    }\n    \n    return nested && openCount === 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_133","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ ആദ്യം അറേയിലെ ഓരോ എലമെന്റും മുകളിലെ int (~) യിലേക്ക് ചുരുക്കുക.\/ നിങ്ങൾ നൽകിയ ശ്രേണിയിലെ സംഖ്യകളുടെ ചതുരശ്ര സംഖ്യകളുടെ തുക തിരികെ നൽകണം, നിങ്ങള് ക്ക് ഒരു കൂട്ടം നമ്പറുകള് കിട്ടും.\/\/ >>> lst([1.0, 2.0, 3.0])\n\/\/ 14\n\/\/ >>> lst([1.0, 4.0, 9.0])\n\/\/ 98\n\/\/ >>> lst([1.0, 3.0, 5.0, 7.0])\n\/\/ 84\n\/\/ >>> lst([1.4, 4.2, 0.0])\n\/\/ 29\n\/\/ >>> lst([-2.4, 1.0, 1.0])\n\/\/ 6\nfunction sum_squares(lst){\n","canonical_solution":"function sum_squares(lst) {\n    return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"},{"task_id":"HumanEval_134","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ കുറിപ്പ്: \"വചനം\" എന്നത് സ്പെയ്സ് കൊണ്ട് വേർതിരിക്കുന്ന പ്രതീകങ്ങളുടെ ഒരു കൂട്ടമാണ്.\/ ഒരു വാക്കിന്റെ ഭാഗം, അല്ലെങ്കിൽ തെറ്റാണ്. \/ ഒരു സ്ട്രിങ്ങിന്റെ അക്ഷരമാലയിലെ പ്രതീകമാണ്,  അല്ല.അവസാനത്തെ പ്രതീകം  ആണെങ്കിൽ true എന്ന് തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക.\/\/ >>> check_if_last_char_is_a_letter(\"apple pie\")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e\")\n\/\/ true\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e \")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"\")\n\/\/ false\nfunction check_if_last_char_is_a_letter(txt){\n","canonical_solution":"function check_if_last_char_is_a_letter(txt) {\n    if (txt.length === 0) return false;\n    \n    txt = txt.trim();\n    if (txt.length === 0) return false;\n    \n    let parts = txt.split(' ');\n    let lastWord = parts[parts.length - 1];\n    \n    if (lastWord.length === 0) return false;\n    \n    let lastChar = lastWord[lastWord.length - 1];\n    return \/^[a-zA-Z]$\/.test(lastChar);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_if_last_char_is_a_letter;\n  assert.deepEqual(candidate(\"apple\"),false);\n  assert.deepEqual(candidate(\"apple pi e\"),true);\n  assert.deepEqual(candidate(\"eeeee\"),false);\n  assert.deepEqual(candidate(\"A\"),true);\n  assert.deepEqual(candidate(\"Pumpkin pie \"),false);\n  assert.deepEqual(candidate(\"Pumpkin pie 1\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"eeeee e \"),false);\n  assert.deepEqual(candidate(\"apple pie\"),false);\n  assert.deepEqual(candidate(\"apple pi e \"),false);\n}\n\ntest();"},{"task_id":"HumanEval_135","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ മൂല്യങ്ങൾ ഇരട്ടിപ്പിക്കുന്നു.\/ അത്തരം ഒരു ഘടകം നിലവിലില്ലെങ്കിൽ -1 തിരികെ നൽകുക.\/ അതിന് തൊട്ടു മുമ്പുള്ള മൂലകത്തേക്കാൾ വലുതോ തുല്യമോ അല്ല.ഒരു ഘടകത്തിന്റെ ഏറ്റവും വലിയ സൂചിക തിരികെ നൽകുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക.\/\/ >>> can_arrange([1, 2, 4, 3, 5])\n\/\/ 3\n\/\/ >>> can_arrange([1, 2, 3])\n\/\/ -1\nfunction can_arrange(arr){\n","canonical_solution":"function can_arrange(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_136","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ പോസിറ്റീവ് ആയതോ നെഗറ്റീവ് ആയതോ ആയ സംഖ്യകൾ ഇല്ലെങ്കിൽ അവയെ undefined ആയി നൽകുക.\/ ഒരു അറേയിലെ പോസിറ്റീവ് ഇന്ററുകളുടെ എണ്ണം. \/ ഏറ്റവും വലിയ നെഗറ്റീവ് ഇന്റഗ്രൽ ആണ്, b ഏറ്റവും ചെറിയ സംഖ്യയാണ് ഒരു ഫങ്ഷൻ ഉണ്ടാക്കുക, അത് ഒരു അറേ (a, b) നൽകുന്നു, അവിടെ 'a'  ആണ്.\/\/ >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n\/\/ [undefined, 1]\n\/\/ >>> largest_smallest_integers([])\n\/\/ [undefined, undefined]\n\/\/ >>> largest_smallest_integers([0])\n\/\/ [undefined, undefined]\nfunction largest_smallest_integers(lst){\n","canonical_solution":"function largest_smallest_integers(lst) {\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    \n    lst.forEach(num => {\n        if (num < 0 && (largestNegative === undefined || num > largestNegative)) {\n            largestNegative = num;\n        }\n        if (num > 0 && (smallestPositive === undefined || num < smallestPositive)) {\n            smallestPositive = num;\n        }\n    });\n    \n    return [largestNegative, smallestPositive];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_137","nl":"mal_Mlym","pl":"js","prompt":"\/ കുറിപ്പ്: ഒരു യഥാർത്ഥ സംഖ്യ ഒരു സ്ട്രിംഗായി പ്രതിനിധീകരിക്കുകയാണെങ്കിൽ, ഫ്ലോട്ടിംഗ് പോയിന്റ് . അല്ലെങ്കിൽ ,  ആകാം.\/ മൂല്യങ്ങൾ തുല്യമാണെങ്കിൽ undefined എന്ന തുക നൽകുക. \/ റിയൽ നമ്പറുകൾ, അതിന്റെ നൽകിയ വേരിയബിൾ തരത്തിലുള്ള വലിയ വേരിയബിൾ നൽകുന്നു. \/ഒരു ഫങ്ഷൻ ഉണ്ടാക്കുക, അത് ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ ന്റെ\/\/ >>> compare_one(1, 2.5)\n\/\/ 2.5\n\/\/ >>> compare_one(1, \"2,3\")\n\/\/ \"2,3\"\n\/\/ >>> compare_one(\"5,1\", \"6\")\n\/\/ \"6\"\n\/\/ >>> compare_one(\"1\", 1)\n\/\/ undefined\nfunction compare_one(a, b){\n","canonical_solution":"function compare_one(a, b) {\n    \/\/ Function to parse the input into a real number.\n    const parseNum = (val) => {\n        if (typeof val === 'number') return val;\n        if (typeof val === 'string') {\n            \/\/ Replace comma with dot for parsing\n            let parsed = parseFloat(val.replace(',', '.'));\n            \/\/ If parsing fails, return NaN\n            if (isNaN(parsed)) return NaN;\n            return parsed;\n        }\n        return NaN;\n    };\n\n    \/\/ Get parsed numerical values\n    const numA = parseNum(a);\n    const numB = parseNum(b);\n\n    \/\/ Compare the inputs to determine which is greater\n    if (numA > numB) return a;\n    if (numB > numA) return b;\n\n    \/\/ If values are equal return undefined\n    return undefined;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare_one;\n  assert.deepEqual(candidate(1, 2),2);\n  assert.deepEqual(candidate(1, 2.5),2.5);\n  assert.deepEqual(candidate(2, 3),3);\n  assert.deepEqual(candidate(5, 6),6);\n  assert.deepEqual(candidate(1, \"2,3\"),\"2,3\");\n  assert.deepEqual(candidate(\"5,1\", \"6\"),\"6\");\n  assert.deepEqual(candidate(\"1\", \"2\"),\"2\");\n  assert.deepEqual(candidate(\"1\", 1),undefined);\n}\n\ntest();"},{"task_id":"HumanEval_138","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം \/നൽകിയിരിക്കുന്ന സംഖ്യ n നെ കൃത്യമായി 4 പോസിറ്റീവ് ഇരട്ട സംഖ്യകളുടെ തുകയായി എഴുതാൻ കഴിയുമോ എന്ന് വിലയിരുത്തുക \/\/ >>> is_equal_to_sum_even(4)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(6)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(8)\n\/\/ true\nfunction is_equal_to_sum_even(n){\n","canonical_solution":"function is_equal_to_sum_even(n) {\n    \/\/ A number can be expressed as the sum of 4 positive even numbers\n    \/\/ if it is greater than or equal to 8 and is even.\n\n    if (n >= 8 && n % 2 === 0) {\n        return true;\n    }\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_equal_to_sum_even;\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),true);\n  assert.deepEqual(candidate(11),false);\n  assert.deepEqual(candidate(12),true);\n  assert.deepEqual(candidate(13),false);\n  assert.deepEqual(candidate(16),true);\n}\n\ntest();"},{"task_id":"HumanEval_139","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ n > 0  എവിടെ\/ ബ്രസീലിയൻ_ഫാക്ടോറിയൽ (n) = n! * (n-1)! * (n-2)! * . . * 1! \/ബ്രസീലിയൻ ഫാക്ടോറിയൽ താഴെ പറയുന്ന രീതിയിൽ നിർവചിക്കപ്പെട്ടിരിക്കുന്നു: \/\/ >>> special_factorial(4)\n\/\/ 288\n\/\/ The function will receive an integer as input and should return the special\n\/\/ factorial of this integer.\nfunction special_factorial(n){\n","canonical_solution":"function factorial(num) {\n    if (num <= 1) return 1;\n    return num * factorial(num - 1);\n}\n\nfunction special_factorial(n) {\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n}\n\ntest();"},{"task_id":"HumanEval_140","nl":"mal_Mlym","pl":"js","prompt":"\/ പിന്നെ തുടർച്ചയായ എല്ലാ സ്പെയ്സുകളും മാറ്റി - \/ ഒരു സ്ട്രിങിന് തുടർച്ചയായി 2 ലധികം സ്പെയ്സുകളുണ്ടെങ്കിൽ, \/ഒരു ടെക്സ്റ്റ് സ്ട്രിംഗ് തന്നാൽ, അതിലെ എല്ലാ സ്പെയ്സുകളും അടിവരയിടുക, \/\/ >>> fix_spaces(\" Example\")\n\/\/ \"Example\"\n\/\/ >>> fix_spaces(\" Example 1\")\n\/\/ \"Example_1\"\n\/\/ >>> fix_spaces(\" Example 2\")\n\/\/ \"_Example_2\"\n\/\/ >>> fix_spaces(\" Example 3\")\n\/\/ \"_Example-3\"\nfunction fix_spaces(text){\n","canonical_solution":"function fix_spaces(text) {\n    return text.trim().replace(\/\\s{2,}\/g, '-').replace(\/\\s\/g, '_');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"},{"task_id":"HumanEval_141","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ - ഡോട്ടിന് ശേഷം വരുന്ന സബ് സ്ട്രിംഗ് ഇവയിലൊന്നായിരിക്കണം: ['txt', 'exe', 'dll'] \/ ലാറ്റിൻ അക്ഷരമാല ('a'-'z' ഉം 'A'-'Z') യും.\/ - ഡോട്ടിന് മുമ്പുള്ള സബ് സ്ട്രിംഗ് ശൂന്യമായിരിക്കരുത്, കൂടാതെ ഇത്  എന്ന അക്ഷരത്തിൽ തുടങ്ങുന്നു\/ - ഫയലിന്റെ പേരില് ഒരു ഡോട്ട് മാത്രമേ ഉള്ളൂ.\/ - ഫയലിന്റെ പേരിന് മൂന്ന് അക്കങ്ങളിൽ കൂടുതലാകരുത് ('0'-'9').\/ പാലിക്കപ്പെടുന്നു: \/ താഴെ പറയുന്ന എല്ലാ വ്യവസ്ഥകളും പാലിച്ചാൽ മാത്രമേ ഒരു ഫയലിന്റെ പേര് സാധുവായി കണക്കാക്കുകയുള്ളൂ \/ ഫയലിന്റെ പേര് സാധുവാണെങ്കിൽ 'അതെ', അല്ലാത്തപക്ഷം 'ഇല്ല' എന്ന് നൽകുന്നു.\/ഒരു ഫയലിന്റെ പേര് പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് എടുക്കുകയും  എന്ന് റിട്ടേൺ ചെയ്യുകയും ചെയ്യുന്ന ഒരു ഫംഗ്ഷൻ സൃഷ്ടിക്കുക.\/\/ >>> file_name_check(\"example.txt\")\n\/\/ \"Yes\"\n\/\/ >>> file_name_check(\"1example.dll\")\n\/\/ \"No\"\nfunction file_name_check(file_name){\n","canonical_solution":"function file_name_check(file_name) {\n    const validExtensions = ['txt', 'exe', 'dll'];\n    const parts = file_name.split('.');\n\n    if (parts.length !== 2) {\n        return 'No';\n    }\n\n    const [namePart, extensionPart] = parts;\n\n    \/\/ Check that the name part is not empty, starts with a letter, and has at most 3 digits\n    if (namePart.length === 0 || !\/^[a-zA-Z]\/.test(namePart)) {\n        return 'No';\n    }\n\n    const digitCount = (namePart.match(\/\\d\/g) || []).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n\n    \/\/ Check if the extension is one of the valid ones\n    if (!validExtensions.includes(extensionPart)) {\n        return 'No';\n    }\n\n    return 'Yes';\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\/this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\");\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"_f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"},{"task_id":"HumanEval_142","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ എന്ന ഫംഗ്ഷൻ എല്ലാ എൻട്രികളുടെയും തുക നൽകും.\/ 3 ന്റെ ഗുണിതമാണെങ്കിൽ, അതിന്റെ സൂചിക 4 ന്റെ ഗുണിതമാണെങ്കിൽ, 3 ന്റെ ഗുണിതമല്ലെങ്കിൽ, അത് പൂർണ്ണസംഖ്യയുടെ ഘടകത്തെ ക്യൂബ് ചെയ്യും.\/ ഈ ഫംഗ്ഷൻ ഒരു അറേയിൽ പൂർണ്ണസംഖ്യകൾ എടുക്കുന്നു. അറേയിലെ എല്ലാ എൻട്രികൾക്കും, ഫംഗ്ഷൻ അതിന്റെ ഇൻഡെക്സ് a ആണെങ്കിൽ പൂർണ്ണസംഖ്യ എൻട്രിയുടെ ചതുരശ്രണം എടുക്കുന്നു.\/\" \/\/ >>> lst\n\/\/ [1, 2, 3]\n\/\/ >>> lst\n\/\/ []\n\/\/ >>> lst\n\/\/ [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n","canonical_solution":"function sum_squares(lst) {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1, 2, 3]),6);\n  assert.deepEqual(candidate([1, 4, 9]),14);\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);\n  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);\n  assert.deepEqual(candidate([0]),0);\n  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);\n  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);\n  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);\n  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);\n  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);\n}\n\ntest();"},{"task_id":"HumanEval_143","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം 1: \/ പുതിയ സ്ട്രിങ്ങിലെ വാക്കുകളുടെ ക്രമം ഒറിജിനലിന് തുല്യമായിരിക്കണം.\/ അതിന്റെ നീളം പ്രൈം നമ്പറുകളാണ്, \/ പിന്നെ നിങ്ങള് ക്ക് ഒരു സ്ട്രിംഗ് തിരിച്ചു തരണം, അത് യഥാർത്ഥ വാക്യത്തിലെ വാക്കുകള് അടങ്ങിയിരിക്കും, \/ വാക്യത്തില് ചില വാക്കുകള് സ്പെയ്സ് കൊണ്ട് വേര് പിരിയുന്നു, നിങ്ങള് ക്ക് ഒരു വാക്യത്തെ പ്രതിനിധീകരിക്കുന്ന ഒരു സ്ട്രിംഗ് നല് കുന്നു,\/\/ >>> words_in_sentence(\"This is a test\")\n\/\/ \"is\"\n\/\/ Example 2:\n\/\/ >>> words_in_sentence(\"lets go for swimming\")\n\/\/ \"go for\"\n\/\/ Constraints:\n\/\/ * 1 <= len(sentence) <= 100\n\/\/ * sentence contains only letters\nfunction words_in_sentence(sentence){\n","canonical_solution":"function words_in_sentence(sentence) {\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    return sentence.split(' ')\n                   .filter(word => isPrime(word.length))\n                   .join(' ');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\");\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"here is\"),\"is\");\n}\n\ntest();"},{"task_id":"HumanEval_144","nl":"mal_Mlym","pl":"js","prompt":"x, n എന്നിവ സാധുവായ ഭിന്നസംഖ്യകളാണെന്നും അവയുടെ നാമധാരിയാകുന്നത് 0 അല്ലെന്നും നിങ്ങൾക്ക് അനുമാനിക്കാം.\/ <നമ്പറേറ്റർ>\/<നാമനീകർ> ഇവിടെ നൊമ്പരവും നാമനീകരും പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളാണ്.x ഉം n ഉം ഒരു ഭിന്നസംഖ്യയുടെ സ്ട്രിംഗ് പ്രതിനിധീകരണമാണ്, അവയ്ക്ക് ഇനിപ്പറയുന്ന ഫോർമാറ്റ് ഉണ്ട്,\/ x * n. x * n ഒരു പൂർണ്ണസംഖ്യയായി വിലയിരുത്തുകയും false  ആയി വിലയിരുത്തുകയും ചെയ്താൽ ഫംഗ്ഷൻ true ആയി നൽകുന്നു.നിങ്ങളുടെ ജോലി ഈ എക്സ്പ്രഷനെ ലളിതമാക്കുന്ന ഒരു ഫങ്ഷൻ ഉണ്ടാക്കുക എന്നതാണ്.\/\/ >>> simplify(\"1\/5\", \"5\/1\")\n\/\/ true\n\/\/ >>> simplify(\"1\/6\", \"2\/1\")\n\/\/ false\n\/\/ >>> simplify(\"7\/10\", \"10\/2\")\n\/\/ false\nfunction simplify(x, n){\n","canonical_solution":"function simplify(x, n) {\n    const parseFraction = (fraction) => {\n        const [numerator, denominator] = fraction.split('\/').map(Number);\n        return { numerator, denominator };\n    };\n\n    const xFraction = parseFraction(x);\n    const nFraction = parseFraction(n);\n\n    const resultNumerator = xFraction.numerator * nFraction.numerator;\n    const resultDenominator = xFraction.denominator * nFraction.denominator;\n\n    return resultNumerator % resultDenominator === 0;\n}\n\n\/\/ Example usage\nconsole.log(simplify(\"1\/5\", \"5\/1\")); \/\/ true\nconsole.log(simplify(\"1\/6\", \"2\/1\")); \/\/ false\nconsole.log(simplify(\"7\/10\", \"10\/2\")); \/\/ false","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = simplify;\n  assert.deepEqual(candidate(\"1\/5\", \"5\/1\"),true);\n  assert.deepEqual(candidate(\"1\/6\", \"2\/1\"),false);\n  assert.deepEqual(candidate(\"5\/1\", \"3\/1\"),true);\n  assert.deepEqual(candidate(\"7\/10\", \"10\/2\"),false);\n  assert.deepEqual(candidate(\"2\/10\", \"50\/10\"),true);\n  assert.deepEqual(candidate(\"7\/2\", \"4\/2\"),true);\n  assert.deepEqual(candidate(\"11\/6\", \"6\/1\"),true);\n  assert.deepEqual(candidate(\"2\/3\", \"5\/2\"),false);\n  assert.deepEqual(candidate(\"5\/2\", \"3\/5\"),false);\n  assert.deepEqual(candidate(\"2\/4\", \"8\/4\"),true);\n  assert.deepEqual(candidate(\"2\/4\", \"4\/2\"),true);\n  assert.deepEqual(candidate(\"1\/5\", \"5\/1\"),true);\n  assert.deepEqual(candidate(\"1\/5\", \"1\/5\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_145","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ അവയെ യഥാർത്ഥ അറേയിലെ ഇൻഡെക്സിന്റെ അടിസ്ഥാനത്തിൽ ക്രമീകരിക്കുക.\/ കുറിപ്പ്: നിരവധി ഇനങ്ങളുണ്ടെങ്കിൽ അവയുടെ അക്കങ്ങളുടെ സമാനമായ തുക,\/ അവരുടെ അക്കങ്ങളുടെ സംഖ്യ അനുസരിച്ച് ക്രമത്തിൽ.\/നൽകിയ സംഖ്യകളുടെ ശ്രേണി അടുക്കുന്ന ഒരു ഫങ്ഷൻ എഴുതുക \/\/ >>> order_by_points([1, 11, -1, -11, -12])\n\/\/ [-1, -11, 1, -12, 11]\n\/\/ >>> order_by_points([])\n\/\/ []\nfunction order_by_points(nums){\n","canonical_solution":"function order_by_points(nums) {\n    function sumOfDigits(n) {\n        \/\/ Absolute value to ensure digits are summed correctly for negative numbers\n        return Math.abs(n).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    }\n\n    nums.sort((a, b) => {\n        const sumA = sumOfDigits(a);\n        const sumB = sumOfDigits(b);\n        if (sumA === sumB) {\n            return 0; \/\/ Maintain original order\n        }\n        return sumA - sumB;\n    });\n\n    return nums;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"},{"task_id":"HumanEval_146","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ ഒരു സംഖ്യയുടെ ആദ്യത്തെയും അവസാനത്തെയും അക്കം ഒറ്റക്കാണ് (1, 3, 5, 7, 9).\/ അറേയിലെ 10 ലും കൂടുതലുള്ള ഘടകങ്ങളുടെ എണ്ണം, രണ്ടും ഒരു സംഖ്യകളുടെ അറേയെ ഇൻപുട്ടായി എടുത്ത് റിട്ടേൺ ചെയ്യുന്ന ഒരു ഫങ്ഷൻ എഴുതുക.\/\/ >>> specialFilter([15, -73, 14, -15])\n\/\/ 1\n\/\/ >>> specialFilter([33, -2, -3, 45, 21, 109])\n\/\/ 2\nfunction specialFilter(nums){\n","canonical_solution":"function specialFilter(nums) {\n    return nums.reduce((count, num) => {\n        if (Math.abs(num) > 10) {\n            const numStr = Math.abs(num).toString();\n            const firstDigit = parseInt(numStr[0]);\n            const lastDigit = parseInt(numStr[numStr.length - 1]);\n            if ([1, 3, 5, 7, 9].includes(firstDigit) && [1, 3, 5, 7, 9].includes(lastDigit)) {\n                return count + 1;\n            }\n        }\n        return count;\n    }, 0);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2, 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([]),0);\n}\n\ntest();"},{"task_id":"HumanEval_147","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ പിന്നെ a[i] + a[j] + a[k] എന്നത് 3 ന്റെ ഗുണിതമാണ്.\/ i < j < k,  എന്നതിന്റെ ട്രിപ്പിൾസ് (a[i], a[j], a[k]) ന്റെ എണ്ണം തിരികെ നൽകുക\/ ഓരോ i നും (1 ≤ i ≤ n), a[i] = i * i - i + 1 ന്റെ മൂല്യം\/നിനക്ക് ഒരു പോസിറ്റീവ് ഇന്റര് നമ്പര് n കിട്ടും. നീളം n ഉള്ള ഒരു ഇന്റര് അറേ ഉണ്ടാക്കണം.\/\/ >>> get_max_triples(5)\n\/\/ 1\n\/\/ Explanation: \n\/\/ a = [1, 3, 7, 13, 21]\n\/\/ The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n","canonical_solution":"function get_max_triples(n) {\n    \/\/ Step 1: Create the integer array 'a'\n    let a = new Array(n);\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    \/\/ Step 2: Count the triples\n    let count = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"},{"task_id":"HumanEval_148","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ ശരിയായ ഗ്രഹനാമങ്ങളല്ല.\/ ഫങ്ഷൻ ഒരു ശൂന്യമായ അറേ നൽകണം planet1 അല്ലെങ്കിൽ planet2 \/ സൂര്യന് റെ അടുപ്പം. \/ ഗ്രഹം 1 ന്റെയും ഗ്രഹം 2 ന്റെയും ഭ്രമണപഥം തമ്മിലുള്ള സ്ഥാനം, \/ ഫങ്ഷൻ ഒരു അറേ റിട്ടേൺ ചെയ്യണം, അതിൽ എല്ലാ ഗ്രഹങ്ങളും അടങ്ങിയിരിക്കും, അവയുടെ ഭ്രമണപഥങ്ങൾ \/ ഒരു ഫങ്ഷൻ എഴുതുക, അത് ഗ്രഹത്തിന്റെയും ഗ്രഹത്തിന്റെയും പേരുകൾ സ്ട്രിങ്ങുകളായി എടുക്കുന്നു.- യുറാനസ്, നെപ്റ്റ്യൂൺ.\/ ബുധൻ ആണ്, അടുത്തത് ശുക്രൻ ആണ്, പിന്നെ ഭൂമി, ചൊവ്വ, വ്യാഴം, ശനിയും, നമ്മുടെ സൌരയൂഥത്തില് എട്ടു ഗ്രഹങ്ങളുണ്ട്: സൂര്യന് ഏറ്റവും അടുത്തുള്ളവ.\/\/ >>> bf(\"Jupiter\", \"Neptune\")\n\/\/ [\"Saturn\", \"Uranus\"]\n\/\/ >>> bf(\"Earth\", \"Mercury\")\n\/\/ \"Venus\"\n\/\/ >>> bf(\"Mercury\", \"Uranus\")\n\/\/ [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n","canonical_solution":"function bf(planet1, planet2) {\n    const planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    const start = Math.min(index1, index2) + 1;\n    const end = Math.max(index1, index2);\n\n    return planets.slice(start, end);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"},{"task_id":"HumanEval_149","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ എല്ലാ വാക്കുകളും ഒരേ നീളമുള്ളതാണെന്ന് നിങ്ങള് ക്ക് അനുമാനിക്കാം.\/ ഫങ്ഷൻ ഒരു സ്ട്രിംഗ് ക്രമത്തിൽ നൽകണം. \/ രണ്ടു വാക്കുകള് ക്ക് ഒരേ നീളം ഉണ്ടെങ്കില് , അക്ഷരമാലാ ക്രമത്തില് അറേ അടുക്കുക.\/ ആ നിയമപ്രകാരം ക്രമീകരിച്ച അറേ തിരികെ നൽകണം. \/ അറേയുടെ ക്രമം ഓരോ വാക്കിന്റെയും നീളം അനുസരിച്ച് ഉയരുകയാണ്, നിങ്ങള് \/ അതിൽ തനിപ്പകർപ്പുകൾ ഉണ്ടാവാം.\/ ഒരു അറേ എല്ലായ്പ്പോഴും സ്ട്രിങ്ങുകളുടെ ഒരു അറേ ആണ്, ഒരിക്കലും സംഖ്യകളുടെ ഒരു അറേ അല്ല, \/ യും ് ് ് ് ് ് ് ് ് ് ് ് ് ് ് ് ് ് ് ് ് ്\/ അതിൽ നിന്നും ഭിന്ന ദൈർഘ്യമുള്ള സ്ട്രിങ്ങുകൾ ഇല്ലാതാക്കുന്നു, \/ഒരു സ്ട്രിങ്സ് അറേയെ പാരാമീറ്ററായി സ്വീകരിക്കുന്ന ഒരു ഫങ്ഷൻ എഴുതുക, \/\/ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n\/\/ [\"aa\"]\n\/\/ >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n\/\/ [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n","canonical_solution":"function sorted_list_sum(lst) {\n    return lst\n        .filter(word => word.length % 2 === 0)\n        .sort((a, b) => {\n            if (a.length === b.length) {\n                return a.localeCompare(b);\n            }\n            return a.length - b.length;\n        });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"},{"task_id":"HumanEval_150","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ ഒരു പ്രൈം നമ്പർ ആണ്, y ന്റെ മൂല്യം തിരികെ നൽകണം.ഒരു ലളിതമായ പ്രോഗ്രാം, അത് n ന്റെ മൂല്യം നൽകണം\/\/ >>> x_or_y(7, 34, 12)\n\/\/ 34\n\/\/ >>> x_or_y(15, 8, 5)\n\/\/ 5\nfunction x_or_y(n, x, y){\n","canonical_solution":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\nfunction x_or_y(n, x, y) {\n    return isPrime(n) ? x : y;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = x_or_y;\n  assert.deepEqual(candidate(7, 34, 12),34);\n  assert.deepEqual(candidate(15, 8, 5),5);\n  assert.deepEqual(candidate(3, 33, 5212),33);\n  assert.deepEqual(candidate(1259, 3, 52),3);\n  assert.deepEqual(candidate(7919, -1, 12),-1);\n  assert.deepEqual(candidate(3609, 1245, 583),583);\n  assert.deepEqual(candidate(91, 56, 129),129);\n  assert.deepEqual(candidate(6, 34, 1234),1234);\n  assert.deepEqual(candidate(1, 2, 0),0);\n  assert.deepEqual(candidate(2, 2, 0),2);\n}\n\ntest();"},{"task_id":"HumanEval_151","nl":"mal_Mlym","pl":"js","prompt":"\/ അസംഖ്യം ആയ അറേയിൽ. നെഗറ്റീവ് ആയതോ പൂർണ്ണസംഖ്യകളല്ലാത്തതോ ആയ സംഖ്യകളെ അവഗണിക്കുക.ഒരു സംഖ്യകളുടെ അറേ കൊടുത്താൽ, സംഖ്യകളുടെ സമചതുരങ്ങളുടെ തുക തിരിച്ചു കൊടുക്കുക.\/\/ >>> double_the_difference([1, 3, 2, 0])\n\/\/ 10\n\/\/ >>> double_the_difference([-1, -2, 0])\n\/\/ 0\n\/\/ >>> double_the_difference([9, -2])\n\/\/ 81\n\/\/ >>> double_the_difference([0])\n\/\/ 0\n\/\/ If the input array is empty, return 0.\nfunction double_the_difference(lst){\n","canonical_solution":"function double_the_difference(lst) {\n    return lst.reduce((sum, num) => {\n        if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n            return sum + num * num;\n        }\n        return sum;\n    }, 0);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"},{"task_id":"HumanEval_152","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ മൂല്യം 0 ആണെങ്കിൽ, ഇല്ലെങ്കിൽ, മൂല്യം ഊഹവും സ്കോറും തമ്മിലുള്ള കേവല വ്യത്യാസമാണ്.\/ ഒരേ നീളമുള്ള ഒരു അറേ മടക്കി നൽകുക, ഓരോ ഊഹവും എത്ര ദൂരെയാണെന്ന് സൂചിപ്പിക്കുന്നു.\/ നിങ്ങൾക്ക് രണ്ട് സ്കോറുകളും തുല്യ നീളമുള്ള ഊഹങ്ങളും നൽകിയിരിക്കുന്നു, ഓരോ സൂചികയും ഒരു പൊരുത്തം കാണിക്കുന്നു.നിങ്ങളുടെ ജോലി ഒരു വ്യക്തി ശരിയായി മത്സരങ്ങളുടെ ഫലങ്ങൾ ഊഹിച്ചു എന്ന് നിർണ്ണയിക്കുക എന്നതാണ്.\/ തീർച്ചയായും ശ്രദ്ധിക്കുകയും താരതമ്യം ചെയ്യുകയും ചെയ്യേണ്ടതാണ്. ആ നിമിഷം നിങ്ങളുടെ വികാരങ്ങളും ചിന്തകളുംനമ്മള് എല്ലാവരും ആ വികാരത്തെ ഓര് ക്കുന്നുണ്ടാവും,\/\/ >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\/\/ [0, 0, 0, 0, 3, 3]\n\/\/ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\/\/ [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n","canonical_solution":"function compare(game, guess) {\n    return game.map((score, index) => Math.abs(score - guess[index]));\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_153","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ (അതിന്റെ ശക്തി -1) \/ 'Slices.SERVINGSliCes' എന്ന പദം തിരിച്ചു നൽകുന്നു കാരണം 'SERVINGSliCes' ആണ് ഏറ്റവും ശക്തമായ എക്സ്റ്റൻഷൻ.\/ വിപുലീകരണങ്ങൾ: ['സേർവിംഗ്സ്ലിസസ്', 'ചീസ്', 'സ്റ്റുഫെഡ്'] അപ്പോൾ നിങ്ങൾ ഉദാഹരണത്തിന്, നിങ്ങൾക്ക് \"സ്ലൈസുകൾ\" എന്ന ക്ലാസും ന്റെ ഒരു അറേയും നൽകിയിട്ടുണ്ടെങ്കിൽ\/ ആദ്യം വരുന്നത് തിരഞ്ഞെടുക്കുക.\/ ഒരേ ശക്തി ഉള്ള രണ്ടോ അതിലധികമോ എക്സ്റ്റൻഷനുകൾ ഉണ്ടെങ്കിൽ, നിങ്ങൾ \/ ഫോർമാറ്റ്: ക്ലാസ് നാമം. ഏറ്റവും ശക്തമായ വിപുലീകരണ നാമം. \/ നിങ്ങള് ഏറ്റവും ശക്തമായ വിപുലീകരണം കണ്ടെത്തി ഇതില് ഒരു സ്ട്രിംഗ് മടക്കിനൽകണം \/ വിപുലീകരണത്തിന്റെ പേരിൽ, CAP - SM എന്ന അക്ഷരമാണ് ശക്തി നൽകുന്നത്. \/ അക്ഷരങ്ങൾ എക്സ്റ്റൻഷന്റെ പേരിൽ, SM എന്നത് ചെറിയ അക്ഷരങ്ങളുടെ എണ്ണം ആയിരിക്കും \/ വിപുലീകരണത്തിന്റെ ശക്തി താഴെ പറയുന്നതാണ്: CAP എന്നത് വലിയക്ഷരത്തിന്റെ സംഖ്യയായിരിക്കട്ടെ \/ വിപുലീകരണങ്ങൾ ഉപയോഗിക്കുന്നത് ക്ലാസ്സിൽ അധിക ക്ലാസുകൾ ലോഡ് ചെയ്യുന്നതിനാണ്.\/നിനക്ക് ഒരു ക്ലാസിന്റെ പേരും (ഒരു സ്ട്രിംഗ്) ഒരു കൂട്ടം എക്സ്റ്റൻഷനുകളും ലഭിക്കും.\/\/ >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\/\/ \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n","canonical_solution":"function Strongest_Extension(class_name, extensions) {\n    let strongestExtension = '';\n    let maxStrength = -Infinity;\n\n    extensions.forEach(extension => {\n        let capCount = 0;\n        let smCount = 0;\n\n        for (let char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                capCount++;\n            } else if (char >= 'a' && char <= 'z') {\n                smCount++;\n            }\n        }\n\n        let strength = capCount - smCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    });\n\n    return `${class_name}.${strongestExtension}`;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\");\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\");\n}\n\ntest();"},{"task_id":"HumanEval_154","nl":"mal_Mlym","pl":"js","prompt":"നിങ്ങള് ക്ക് 2 വാക്കുകള് നല് കിയിട്ടുണ്ട്. രണ്ടാമത്തെ വാക്ക് അല്ലെങ്കിൽ അതിന്റെ ഏതെങ്കിലും റൊട്ടേഷനുകള് ആദ്യ വാക്യത്തില് ഒരു സബ് സ്ട്രിംഗ് ആണെങ്കില് നിങ്ങള് true തിരിച്ച് നല് കണം.\/\/ >>> cycpattern_check(\"abcd\", \"abd\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"hello\", \"ell\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"whassup\", \"psus\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"abab\", \"baa\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"efef\", \"eeff\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"himenss\", \"simen\")\n\/\/ true\nfunction cycpattern_check(a, b){\n","canonical_solution":"function cycpattern_check(a, b) {\n    if (b.length > a.length) return false;\n    \n    let currentRotation = b;\n    for (let i = 0; i < b.length; i++) {\n        if (a.includes(currentRotation)) {\n            return true;\n        }\n        currentRotation = currentRotation.slice(1) + currentRotation[0];\n    }\n    \n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cycpattern_check;\n  assert.deepEqual(candidate(\"xyzw\", \"xyw\"),false);\n  assert.deepEqual(candidate(\"yello\", \"ell\"),true);\n  assert.deepEqual(candidate(\"whattup\", \"ptut\"),false);\n  assert.deepEqual(candidate(\"efef\", \"fee\"),true);\n  assert.deepEqual(candidate(\"abab\", \"aabb\"),false);\n  assert.deepEqual(candidate(\"winemtt\", \"tinem\"),true);\n}\n\ntest();"},{"task_id":"HumanEval_155","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ഒരു പൂർണ്ണസംഖ്യ ലഭിച്ചാൽ. യഥാക്രമം പാരും പാരും അക്കങ്ങളുടെ എണ്ണം ഉള്ള ഒരു അറേ മടക്കി നൽകുക.\/\/ >>> even_odd_count(-12)\n\/\/ [1, 1]\n\/\/ >>> even_odd_count(123)\n\/\/ [1, 2]\nfunction even_odd_count(num){\n","canonical_solution":"function even_odd_count(num) {\n    \/\/ Convert the number to a string and take the absolute value for negative numbers\n    const numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n\n    \/\/ Loop through each digit in the string\n    for (let char of numStr) {\n        \/\/ Convert the character back to a number\n        let digit = parseInt(char, 10);\n        \/\/ Check if the digit is even or odd\n        if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();"},{"task_id":"HumanEval_156","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള്: \/ നിയന്ത്രണങ്ങൾ: 1 <= നും <= 1000 \/ പിന്നെ ചെറിയ അക്ഷരങ്ങളില് അത് തിരിച്ചു തരൂ. ഒരു പോസിറ്റീവ് ഇന്റര് നമ്പര് നല് കിയിട്ട്, അതിന്റെ റോമന് സംഖ്യാ തുല്യത ഒരു സ്ട്രിങ്ങായി ലഭിക്കുന്നു,\/\/ >>> int_to_mini_roman(19)\n\/\/ \"xix\"\n\/\/ >>> int_to_mini_roman(152)\n\/\/ \"clii\"\n\/\/ >>> int_to_mini_roman(426)\n\/\/ \"cdxxvi\"\nfunction int_to_mini_roman(number){\n","canonical_solution":"function int_to_mini_roman(number) {\n    const romanNumerals = [\n        { value: 1000, numeral: 'm' },\n        { value: 900, numeral: 'cm' },\n        { value: 500, numeral: 'd' },\n        { value: 400, numeral: 'cd' },\n        { value: 100, numeral: 'c' },\n        { value: 90, numeral: 'xc' },\n        { value: 50, numeral: 'l' },\n        { value: 40, numeral: 'xl' },\n        { value: 10, numeral: 'x' },\n        { value: 9, numeral: 'ix' },\n        { value: 5, numeral: 'v' },\n        { value: 4, numeral: 'iv' },\n        { value: 1, numeral: 'i' }\n    ];\n    \n    let result = '';\n    for (const { value, numeral } of romanNumerals) {\n        while (number >= value) {\n            result += numeral;\n            number -= value;\n        }\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"},{"task_id":"HumanEval_157","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: 90 ഡിഗ്രി വരെ.ഒരു വലതു കോണുള്ള ത്രികോണം ഒരു കോണും വലതു കോണുള്ള ത്രികോണമാണ്.\/ വശങ്ങള് ഒരു വലതു കോണുള്ള ത്രികോണം രൂപപ്പെടുത്തുന്നു, അല്ലാത്തപക്ഷം തെറ്റാണ്. ഒരു ത്രികോണത്തിന്റെ മൂന്നു വശങ്ങളുടെ നീളം കണക്കിലെടുക്കുക.\/\/ >>> right_angle_triangle(3, 4, 5)\n\/\/ true\n\/\/ >>> right_angle_triangle(1, 2, 3)\n\/\/ false\nfunction right_angle_triangle(a, b, c){\n","canonical_solution":"function right_angle_triangle(a, b, c) {\n    \/\/ Sort the sides to ensure the largest side is at the end (potential hypotenuse)\n    let sides = [a, b, c].sort((x, y) => x - y);\n    \n    \/\/ Check the Pythagorean theorem to determine if it's a right-angled triangle\n    return sides[0]**2 + sides[1]**2 === sides[2]**2;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"},{"task_id":"HumanEval_158","nl":"mal_Mlym","pl":"js","prompt":"\/ പ്രതീകങ്ങൾ, പദാവലി ക്രമത്തിൽ ആദ്യം വരുന്നവയെ തിരികെ നൽകുക. \/ എന്ന അദ്വിതീയ പ്രതീകങ്ങളുടെ പരമാവധി എണ്ണം ഉണ്ടെങ്കിൽ.\/ അറേയിൽ വ്യത്യസ്ത പദങ്ങളുണ്ട്. പരമാവധി എണ്ണം ഉപയോഗിച്ച് പദം തിരികെ നൽകുക \/ഒരു സ്ട്രിങ്സ് അറേ സ്വീകരിക്കുന്ന ഒരു ഫങ്ഷൻ എഴുതുക.\/\/ >>> find_max([\"name\", \"of\", \"string\"])\n\/\/ \"string\"\n\/\/ >>> find_max([\"name\", \"enam\", \"game\"])\n\/\/ \"enam\"\n\/\/ >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\/\/ \"aaaaaaa\"\nfunction find_max(words){\n","canonical_solution":"function find_max(words) {\n    function uniqueCharacterCount(word) {\n        const uniqueChars = new Set(word);\n        return uniqueChars.size;\n    }\n\n    let maxUniqueCount = -1;\n    let result = \"\";\n\n    words.forEach(word => {\n        const currentUniqueCount = uniqueCharacterCount(word);\n        if (currentUniqueCount > maxUniqueCount || \n            (currentUniqueCount === maxUniqueCount && word < result)) {\n            maxUniqueCount = currentUniqueCount;\n            result = word;\n        }\n    });\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"},{"task_id":"HumanEval_159","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണം: \/ മതിയായ കാരറ്റ് ബാക്കിയുണ്ടെങ്കിൽ, ബാക്കിയുള്ള കാരറ്റ് മുഴുവനും തിന്നുകയും, പക്ഷേ വിശപ്പ് തുടരുകയും ചെയ്യും. \/ നിങ്ങളുടെ ഭക്ഷണത്തിനു ശേഷം ശേഷിക്കുന്ന കാരറ്റ് എണ്ണം ] \/ നിങ്ങള് തിന്നുകഴിഞ്ഞ കാരറ്റ് എണ്ണം തിരിച്ച് കൊടുക്കണം,\/ പക്ഷേ, ഇന്ന് നീ കൂടുതൽ കാരറ്റ് കഴിക്കണം.നീ ഒരു വിശന്ന മുയലാണ്, നീ ഇതിനകം ഒരു നിശ്ചിത എണ്ണം കാരറ്റ് കഴിച്ചു,\/\/ >>> eat(5, 6, 10)\n\/\/ [11, 4]\n\/\/ >>> eat(4, 8, 9)\n\/\/ [12, 1]\n\/\/ >>> eat(1, 10, 10)\n\/\/ [11, 0]\n\/\/ >>> eat(2, 11, 5)\n\/\/ [7, 0]\n\/\/ Variables:\n\/\/ @number : integer\n\/\/ the number of carrots that you have eaten.\n\/\/ @need : integer\n\/\/ the number of carrots that you need to eat.\n\/\/ @remaining : integer\n\/\/ the number of remaining carrots thet exist in stock\n\/\/ Constrain:\n\/\/ * 0 <= number <= 1000\n\/\/ * 0 <= need <= 1000\n\/\/ * 0 <= remaining <= 1000\n\/\/ Have fun :)\nfunction eat(number, need, remaining){\n","canonical_solution":"function eat(number, need, remaining) {\n    const carrotsToEat = Math.min(need, remaining);\n    const totalEaten = number + carrotsToEat;\n    const carrotsLeft = remaining - carrotsToEat;\n    return [totalEaten, carrotsLeft];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4, 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2, 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4, 5, 1),[5, 0]);\n}\n\ntest();"},{"task_id":"HumanEval_160","nl":"mal_Mlym","pl":"js","prompt":"\/ ഓപ്പറേറ്റർ അറേയിൽ കുറഞ്ഞത് ഒരു ഓപ്പറേറ്ററും ഓപ്പറാന്റ് അറേയിൽ കുറഞ്ഞത് രണ്ട് ഓപ്പറാന്റുകളും ഉണ്ടായിരിക്കണം.\/ ഓപ്പറാന്റ് എന്നത് നെഗറ്റീവ് അല്ലാത്ത സംഖ്യകളുടെ ഒരു ശ്രേണിയാണ്.\/ ഓപ്പറേറ്റർ അറേയുടെ നീളം ഓപ്പറാന്റ് അറേയുടെ നീളം - 1 ന് തുല്യമാണ്.\/ കുറിപ്പ്: \/ => ഫലം = 9 \/ ഫലം = 2 + 3 * 4 - 5 \/ അറേ = [2, 3, 4, 5] \/ ഓപ്പറേറ്റർ ['+', '*', '-'] \/ ഉദാഹരണം: \/ എക്സ്പോണന്ഷ്യേഷൻ (**) യും\/ നിലവിളക്കുകൾ (\/\/) \/ ഗുണനം (*) \/ കുറയ്ക്കല് ( - ) \/ കൂട്ടിച്ചേര് ത്തു (+) \/ അടിസ്ഥാന അൽജെബ്രാ പ്രവർത്തനങ്ങൾ: \/ എക്സ്പ്രഷനും ഈ എക്സ്പ്രഷന്റെ മൂല്യനിർണ്ണയവും തിരികെ നൽകുന്നു.\/ രണ്ടാമത്തെ അറേ ഒരു പൂർണ്ണസംഖ്യകളുടെ അറേ ആണ്.\/രണ്ട് അറേ ഓപ്പറേറ്ററും ഓപ്പറാന്റും നല് കിയിരിക്കുകയാണ്. ആദ്യത്തെ അറേയില് അടിസ്ഥാന അൽജെബ്രാ പ്രവർത്തനങ്ങൾ ഉണ്ട്, function do_algebra(operator, operand){\n","canonical_solution":"function do_algebra(operator, operand) {\n    let expression = operand[0].toString();\n    \n    for (let i = 0; i < operator.length; i++) {\n        let op = operator[i];\n        let currentOperand = operand[i + 1];\n        \n        \/\/ Replace floor division symbol '\/\/' with actual JavaScript behavior\n        if (op === '\/\/') {\n            expression += `Math.floor(${currentOperand})`;\n        } else {\n            expression += ` ${op} ${currentOperand}`;\n        }\n    }\n    \n    \/\/ Evaluate the resulting expression\n    let result = eval(expression);\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"\/\/\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"},{"task_id":"HumanEval_161","nl":"mal_Mlym","pl":"js","prompt":"\/ ഉദാഹരണങ്ങള് \/ ഫങ്ഷൻ തത്ഫലമായുണ്ടാകുന്ന സ്ട്രിംഗ് തിരികെ നൽകണം. \/ സ്ട്രിങ്ങിൽ അക്ഷരങ്ങളൊന്നും ഇല്ലെങ്കിൽ, സ്ട്രിംഗ് വിപരീതമാക്കുക.\/ അല്ലെങ്കിൽ അത് പോലെ തന്നെ സൂക്ഷിക്കുക. \/ s[i] ഒരു അക്ഷരമാണെങ്കില് , അതിന്റെ കേസ് താഴേയ്ക്ക് മുകളിലേക്കോ മറ്റെങ്ങോട്ടോ തിരിക്കുക, നിങ്ങള് ക്ക് ഒരു സ്ട്രിംഗ് ലഭിക്കുന്നു.\/\/ >>> solve(\"1234\")\n\/\/ \"4321\"\n\/\/ >>> solve(\"ab\")\n\/\/ \"AB\"\n\/\/ >>> solve(\"#a@C\")\n\/\/ \"#A@c\"\nfunction solve(s){\n","canonical_solution":"function solve(s) {\n    let hasLetter = false;\n    let result = '';\n\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (\/[a-zA-Z]\/.test(char)) {\n            hasLetter = true;\n            if (char === char.toLowerCase()) {\n                result += char.toUpperCase();\n            } else {\n                result += char.toLowerCase();\n            }\n        } else {\n            result += char;\n        }\n    }\n\n    if (!hasLetter) {\n        return result.split('').reverse().join('');\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();"},{"task_id":"HumanEval_162","nl":"mal_Mlym","pl":"js","prompt":"\/ 'text' ഒരു ശൂന്യമായ സ്ട്രിംഗ് ആണെങ്കിൽ, undefined എന്ന രീതിയിലായിരിക്കും റിട്ടേൺ ചെയ്യുക.\/ഒരു സ്ട്രിംഗ് 'ടെക്സ്റ്റ്' നൽകിയിട്ടുണ്ടെങ്കിൽ, അതിന്റെ md5 ഹാഷ് തുല്യമായ സ്ട്രിംഗ് നൽകുക.\/\/ >>> string_to_md5(\"Hello world\")\n\/\/ \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n","canonical_solution":"const crypto = require('crypto');\n\nfunction string_to_md5(text) {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();"},{"task_id":"HumanEval_163","nl":"mal_Mlym","pl":"js","prompt":"ഉദാഹരണത്തിന്:\/ b, ക്രമം ക്രമാനുഗതമായി.\/രണ്ട് പോസിറ്റീവ് പൂർണ്ണസംഖ്യകളായ a, b എന്നിവയുടെ സംഖ്യകളുടെ സംഖ്യകൾ തിരികെ നൽകുക.\/\/ >>> generate_integers(2, 8)\n\/\/ [2, 4, 6, 8]\n\/\/ >>> generate_integers(8, 2)\n\/\/ [2, 4, 6, 8]\n\/\/ >>> generate_integers(10, 14)\n\/\/ []\nfunction generate_integers(a, b){\n","canonical_solution":"function generate_integers(a, b) {\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let evenDigits = [];\n\n    for (let i = start; i <= end; i++) {\n        if (i % 2 === 0) {\n            evenDigits.push(i);\n        }\n    }\n\n    return evenDigits;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = generate_integers;\n  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(17, 89),[]);\n}\n\ntest();"}]