task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,hne_Deva,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""जांचें कि संख्याओं के दी गइस सूची में, दी गइस सीमा के तुलना में एक-दूसर के करीब कोई दो संख्याएं हैं। उदाहरणः >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) गलत >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) सच """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,hne_Deva,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""ए फ़ंक्शन बर इनपुट एक स्ट्रिंग हवय जेमा नेस्टेड कोष्ठक के कईठन समूह हंवय । आपहर लक्ष्य ओ समूह ल अलग-अलग स्ट्रिंग्स में अलग करना हवय अउ ओके सूची ल वापस करना हवय । अलग-अलग समूह संतुलित हंवय (प्रत्येक खुला ब्रैकेट ठीक ले बंद हवय) अउ एक दूसर के भीतर नेस्टेड नी हंवय । इनपुट स्ट्रिंग में काखरो घलो जगह ल अनदेखा करव । उदाहरण: >>> अलग_पैरन_ग्रुप्स
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,hne_Deva,python,"

def truncate_number(number: float) -> float:
    """"""एक सकारात्मक फ्लोटिंग पॉइंट संख्या दिए गए हवय, एला पूर्णांक भाग (दिले गए संख्या ले छोटे सबले बडखा पूर्णांक) अउ दशमलव (बाकी भाग हमेशा 1 ले छोटे) में विभाजित करे जा सकत हवय। संख्या के दशमलव भाग ल लौटाएं। उदाहरण: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,hne_Deva,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""आपके करा एक बैंक खाता म जमा अउ निकासी संचालन के एक सूची दिए जात हवय जेहर शून्य शेष राशि के साथ शुरू होत हवय। आपके काम एहर पता लगाना हवय कि काखरो घलो बिंदु म खाता शेष शून्य ले नीचे गिर जात हवय, अउ ओ बिंदु म फ़ंक्शन ल सत्य लौटा देना चाहि। अन्यथा एला झूठा लौटा देना चाहि। उदाहरण: >>> below_zero([1, 2, 3]) झूठा >>> below_zero([1, 2, -4, 5]) सत्य """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,hne_Deva,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""इनपुट संख्याओं की एक दी गइस सूची बर, इ डेटासेट के माध्य के आसपास औसत पूर्ण विचलन की गणना करें। औसत पूर्ण विचलन प्रत्येक तत्व अउ एक केंद्र बिंदु (इस मामले में औसत) के बीच औसत पूर्ण अंतर हावे: एमएडी = औसत। एक्स - एक्स_मध्यम। उदाहरणः >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,hne_Deva,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""इनपुट सूची के हर दुठन क्रमिक तत्वमन के बीच एक संख्या 'डिलिमीटर' डालें `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] ।""""""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,hne_Deva,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""इ फ़ंक्शन बर इनपुट एक स्ट्रिंग हवय जेहर अंतराल ले अलग करे गए कंस के लिए कईठन समूहमन के प्रतिनिधित्व करत हवय। समूह के प्रत्येक बर, कंस के गहरे स्तर के आउटपुट। उदाहरण बर (())) म अधिकतम दो स्तर होत हवय जबकि ((())) म तीन होत हवय। >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,hne_Deva,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""स्ट्रिंग्स के एक इनपुट सूची ल केवल ओ मनखेमन बर फ़िल्टर करव जेमा दिए गए सबस्ट्रिंग >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] शामिल हवय ।""""""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,hne_Deva,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""पूर्णांक के एक दिए गए सूची बर, एक सूची में जम्मो पूर्णांक के योग अउ उत्पाद के एक ट्यूपल लौटाएं। खाली योग 0 के बराबर होना चाहि अउ खाली उत्पाद 1 के बराबर होना चाहि। >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) ।""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,hne_Deva,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""पूर्णांक के एक दिखीस सूची ले, अनुक्रम में दिए गए समय तक पाए गए अधिकतम तत्व के एक सूची उत्पन्न करव। >>> रोलिंग_मैक्स (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,hne_Deva,python,"

def is_palindrome(string: str) -> bool:
    """"""सबले छोटे पालिंड्रोम खोजें जेहर एक आपूर्ति के स्ट्रिंग के साथ शुरू होत हवय। एल्गोरिदम विचार सरल हवय: - आपूर्ति के स्ट्रिंग के सबले लंबा पोस्टफिक्स खोजें जेहर एक पालिंड्रोम हवय। - स्ट्रिंग रिवर्स के स्ट्रिंग उपसर्ग के अंत में संलग्न करें जेहर पालिंड्रोमिक प्रत्यय ले पहली आता हवय। >>> make_palindrome ((('') ' ' >>> make_palindrome ((('catac') ' >>> make_palindrome ((('catac') ' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""परीक्षण यदि दिए गए स्ट्रिंग एक पालिंड्रोम हवय ।""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,hne_Deva,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""इनपुट दु स्ट्रिंग ए अउ बी हवय जेमा केवल 1 अउ 0 शामिल हंवय । ए इनपुट म बाइनरी एक्सओआर निष्पादित करव अउ परिणाम ल स्ट्रिंग के रूप में घलो लौटाएं। >>> स्ट्रिंग_क्सोर (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,hne_Deva,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""स्ट्रिंग्स के सूची ले, सबले लंबा ल वापिस करही। एक ही लंबाई के कई स्ट्रिंग के मामले म पहला ल वापिस करही। इनपुट सूची खाली होए के मामले म कोई नी लहुटही। >>> सबले लंबा (([]) >>> सबले लंबा ((['ए', 'बी', 'सी']) 'ए' >>> सबले लंबा ((['ए', 'बीबी', 'सीसीसी']) 'सीसीसी' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,hne_Deva,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""दो पूर्णांक ए अउ बी के सबले बडखा सामान्य विभाजक ल वापस करव >>> सबले बडखा_सामान्य_विभाजक ((3, 5) 1 >>> सबले बडखा_सामान्य_विभाजक ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,hne_Deva,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""इनपुट स्ट्रिंग के सबले छोटे ले सबले लंबा तक के जम्मो उपसर्ग के सूची ल लौटाता हवय >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,hne_Deva,python,"

def string_sequence(n: int) -> str:
    """"""0 ले शुरू होए वाले स्पेस-सीमित संख्या वाले स्ट्रिंग ल वापस करत हवय। >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,hne_Deva,python,"

def count_distinct_characters(string: str) -> int:
    """"""एक स्ट्रिंग दिए गए, पता लगाएं कि कितने विशिष्ट वर्ण (केस के बावजूद) एमे >>> count_distinct_characters ((('xyzXYZ') 3 >>> count_distinct_characters ((('जेरी') 4 शामिल हवय ।""""""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,hne_Deva,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""इ फ़ंक्शन में इनपुट एक स्ट्रिंग हवय जो एक विशेष एएससीआईआई प्रारूप में संगीत नोट्स के प्रतिनिधित्व करत हवय। आपके काम एहर हवय कि कई बीट्स के अनुरूप पूर्णांक स्ट्रिंग सूची के पार्स करना हवय: 'ओ' नोट, आखिरी चार बीट्स 'ओबीसी' - आधा नोट, आखिरी दो बीट्स 'ओबीसी' - क्वार्टर नोट, आखिरी एक बीट्स >>> पार्स_म्यूजिक 'ओ' ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसीओ ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीआईसी ओएससीओ ओएससीओ ओएससीआईसीओ ओएससीओ ओएससीओ ओएससीओओ ओएससीओओ ओएससीओओ ओएससीओसीओसीओसी ओएससीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओसीओ""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,hne_Deva,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""मूल स्ट्रिंग में दिए गए सबस्ट्रिंग के कती बार मिल सकत हवय। ओवरलैपिंग केस के गिनती करव। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,hne_Deva,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""इनपुट 'शून्य' ले 'नौ' तक संख्याओं के एक अंतरिक्ष-सीमित स्ट्रिंग हवय। वैध विकल्प 'शून्य', 'एक', 'दू', 'तीन', 'चार', 'पांच', 'छह', 'सात', 'आठ' अउ 'नौ' हवय। संख्याओं के साथ स्ट्रिंग ल छोटे ले सबले बड़े तक क्रमबद्ध करके लौटाएं >>> sort_numbers ((('तीन एक पांच') 'एक तीन पांच' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,hne_Deva,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""संख्याओं के एक आपूर्ति की गई सूची ले (लंबाई में कम से कम दो) दो का चयन करें अउ एक दूसरे के करीब दो लौटाएं अउ उन्हें क्रम में लौटाएं (छोटी संख्या, बड़ी संख्या) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) ।""""""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,hne_Deva,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""संख्याओं की सूची दी गइस हावे (कम से कम दो तत्वों की), उस सूची में एक रैखिक परिवर्तन लागू करव, ताकि सबसे छोटी संख्या 0 बन जाए अउ सबसे बड़ी 1 बन जाए >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] ।""""""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,hne_Deva,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""केवल पूर्णांक बर कन्हु पायथन मानों के सूची के फिल्टर >>> फिल्टर_इंटरजेस ((['ए', 3.14, 5]) [5] >>> फिल्टर_इंटरजेस (([1, 2, 3, 'एबीसी', {}, []]) [1, 2, 3] ।""""""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,hne_Deva,python,"

def strlen(string: str) -> int:
    """"""दिए गए स्ट्रिंग के वापसी लंबाई >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,hne_Deva,python,"

def largest_divisor(n: int) -> int:
    """"""एक दिए गए संख्या एन बर, सबले बडखा संख्या के खोज करव जेहर एन के बराबर विभाजित करत हवय, एन ले छोटे >>> सबले बडखा_डिवायर ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,hne_Deva,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""दिए गए पूर्णांक के प्रमुख कारकमन के सूची ल छोटे ले सबले बड़े क्रम में लौटाएं। प्रत्येक कारक ल कारककरण में कतका बार प्रकट होए के अनुरूप संख्या के संख्या के सूचीबद्ध करे जाना चाहि। इनपुट संख्या के जम्मो कारकमन के उत्पाद के बराबर होना चाहि >>> कारक करे [2, 2, 2] >>> कारक करे [25], [5, 5] >>> कारक करे [2, 5, 7] ।""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,hne_Deva,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""पूर्णांक के सूची ले, जम्मो तत्वमन के हटाएं जेहर एक ले ज्यादा बार उत्पन्न होत हंवय । इनपुट में तत्वमन के क्रम के समान रखें। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4]""""""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,hne_Deva,python,"

def flip_case(string: str) -> str:
    """"""एक दिए गए स्ट्रिंग बर, छोटे अक्षर ल अपरकेस अउ अपरकेस ल लीनर म फ्लिप करव। >>> flip_case ((('हैलो') 'हैलो' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,hne_Deva,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""स्ट्रिंग के सूची ल एक स्ट्रिंग म संयोजित करव >>> संयोजित करव (([]) ' ' >>> संयोजित करव ((['ए', 'बी', 'सी']) 'एबीसी' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,hne_Deva,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""केवल उन स्ट्रिंग्स बर एक इनपुट सूची के फ़िल्टर करव जेहर दिए गए उपसर्ग के साथ शुरू होत हंवय । >>> उपसर्ग द्वारा फ़िल्टर_फिल्टर_फिल्टर{"", ""बीसीडी"", ""सीडीई"", ""सरणी"", ""ए"") ।""""""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,hne_Deva,python,"

def get_positive(l: list):
    """"""सूची में केवल सकारात्मक संख्यामन ल लौटाएं। >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) [5, 3, 2, 3, 9, 123, 1] ।""""""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,hne_Deva,python,"

def is_prime(n):
    """"""यदि दिए गए संख्या प्राइम हवय, त सच ल लौटाएं, अउ आने रहिस गलत। >>> प्राइम हवय () 6) गलत >>> प्राइम हवय () 101) सच >>> प्राइम हवय () 11) सच >>> प्राइम हवय () 13441) सच >>> प्राइम हवय () 61) सच >>> प्राइम हवय () 4) गलत >>> प्राइम हवय () 1) गलत ।""""""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,hne_Deva,python,"import math


def poly(xs: list, x: float):
    """"""एक्स एक बहुपद के गुणांक हंवय । जेमा पॉली (x) = 0 हवय। जेमा शून्य केवल शून्य बिंदु ल वापस करत हवय, भले ही बहुत ज्यादा हों। एखर अलावा, जेनो केवल गुणांक के संख्या अउ सबले बडखा गैर-शून्य गुणांक के साथ सूचीबद्ध करत हवय काबरकि ए समाधान के गारंटी देत हवय। >>> गोल (x) = 1 + 2x -0.5 >>> गोल (x) = 6, 11, -6, 1), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""बिंदु एक्स में गुणांक एक्स के साथ बहुपद का मूल्यांकन करता है। वापसी एक्सएस [0] + एक्सएस [1] * एक्स + एक्सएस [1] * एक्स ^ 2 + .... एक्सएस [एन] * एक्स ^ एन """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,hne_Deva,python,"

def sort_third(l: list):
    """"""इ फ़ंक्शन एक सूची ल लेता हावे अउ एक सूची ल वापस करत हावे जैसे कि एल 'एल के समान हावे जो तीन से विभाजित नी होत हावे, जबकि तीन से विभाजित होत हावे, लेकिन क्रमबद्ध होत हावे। >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] ।""""""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,hne_Deva,python,"

def unique(l: list):
    """"""सूची म छांटे गए अद्वितीय तत्व ल वापस करव >>> अद्वितीय (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,hne_Deva,python,"

def max_element(l: list):
    """"""सूची में अधिकतम तत्व लौटाएं। >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,hne_Deva,python,"

def fizz_buzz(n: int):
    """"""संख्या 7 के पूर्णांक में प्रकट होए के संख्या ल लौटाएं जेहर 11 या 13 से विभाजित हंवय । >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,hne_Deva,python,"

def sort_even(l: list):
    """"""इ फ़ंक्शन एक सूची लेता हावे अउ एक सूची ल वापस करत हावे जैसे कि 'ल' विषम सूचकांकों में 'ल' के समान हावे, जबकि यहां तक कि सूचकांकों में इके मूल्यों ल 'ल' के यहां तक कि सूचकांकों के मूल्यों के बराबर हावे, लेकिन क्रमबद्ध। >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,hne_Deva,python,"

def encode_cyclic(s: str):
    """"""इनपुट स्ट्रिंग के रूप में ले जात हवय जेला एन्कोड_साइक्लिक फ़ंक्शन के साथ एन्कोड करे जात हवय। डिकोड स्ट्रिंग ल वापस करत हवय।""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""तीन वर्णों के चक्र समूहों द्वारा एन्कोडेड स्ट्रिंग ल लौटाता हवय।""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,hne_Deva,python,"

def prime_fib(n: int):
    """"""prime_fib एक फाइबोनैचि संख्या के एन-वें संख्या ल वापस करत हवय अउ एहर भी प्राइम हवय। >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,hne_Deva,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero पूर्णांक के सूची ल इनपुट के रूप में लेता हवय। ए सच ल लौटाता हवय यदि सूची में तीन अलग-अलग तत्व हंवय जेहर शून्य के योग हंवय, अउ अन्यथा गलत हवय। >>> triples_sum_to_zero([1, 3, 5, 0]) गलत >>> triples_sum_to_zero[(1, 3, -2, 1]) सच >>> triples_sum_to_zero([1, 2, 3, 7]) गलत >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) सच >>> triples_sum_to_zero[1]) गलत """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,hne_Deva,python,"

def car_race_collision(n: int):
    """"""एक सड़क के कल्पना करव जऊन एक पूरा तरह ले सीधा अनंत लम्बा रेखा हे. n कार बाये ले दहिने चलत हें; एकेच बखत, n कार के एक अलग सेट दाये ले बाये चलत हें. कार के दु सेट एक दूसर ले अब्बड दूरिहा होके सुरू होथें. सब कार एक समान गति म चले जाथे. दु कार के टक्कर तब होथे जब एक कार जऊन बाये ले दहिने चलत हे एक कार ल टक्कर देथे जऊन दाये ले बाये चलत हे. हालांकि, कार अनगिनत रूप ले मजबूत अऊ मजबूत हे; नतीजतन, ओ अपन चाल म चलत रहिथे मानो ओ टक्कर नइ देय हे. ए फंक्शन ह अइसन टक्कर के संख्या ल आउटपुट करथे.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,hne_Deva,python,"

def incr_list(l: list):
    """"""1. के साथ तत्वों के साथ सूची लौटाएं >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,hne_Deva,python,"

def pairs_sum_to_zero(l):
    """"""जोड़े_सम_टू_शून्य पूर्णांक के सूची ल इनपुट के रूप में लेता हवय। ए सच ल वापस करत हवय यदि सूची में दु अलग-अलग तत्व हंवय जेहर शून्य के योग हंवय, अउ अन्यथा गलत हवय। >>> जोड़े_सम_टू_शून्य (([1, 3, 5, 0]) गलत >>> जोड़े_सम_टू_शून्य (([1, 3, -2, 1]) गलत >>> जोड़े_सम_टू_शून्य (([1, 2, 3, 7]) गलत >>> जोड़े_सम_टू_शून्य (([2, 4, -5, 3, 5, 7]) सच >>> जोड़े_सम_टू_शून्य [1]) गलत """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,hne_Deva,python,"

def change_base(x: int, base: int):
    """"""रूपांतरण के बाद स्ट्रिंग प्रतिनिधित्व लौटाएं। आधार संख्या 10 ले कम हवय। >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,hne_Deva,python,"

def triangle_area(a, h):
    """"""एक त्रिकोण बर एक पक्ष अउ उच्च वापसी क्षेत्र के लंबाई दी गइस हवय। >>> त्रिकोण_क्षेत्र""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,hne_Deva,python,"

def fib4(n: int):
    """"""एफआईबी 4 संख्या अनुक्रम एक अनुक्रम हवय जेहर फिबोनैकी अनुक्रम के समान हवय जेला निम्नानुसार परिभाषित करे गए हवय: एफआईबी 4 ((0) -> 0 एफआईबी 4 ((1) -> 0 एफआईबी 4 ((2) -> 2 एफआईबी 4 ((3) -> 0 एफआईबी 4 ((एन) -> एफआईबी 4 ((एन -1) + एफआईबी 4 ((एन -2) + एफआईबी 4 ((एन -3) + एफआईबी 4 ((एन -4)) का उपयोग करके एफआईबी 4 संख्या अनुक्रम के एन-वें तत्व के गणना करे बर एक फ़ंक्शन लिखें। रिकर्सन के उपयोग झन करव। >>> एफआईबी 4 ((5) 4 >>> एफआईबी 4 ((6) >>> 8 एफआईबी 4 ((7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,hne_Deva,python,"

def median(l: list):
    """"""सूची में तत्वों के मध्यवर्ती वापसी l. >>> मध्यवर्ती (([3, 1, 2, 4, 5]) 3 >>> मध्यवर्ती (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,hne_Deva,python,"

def is_palindrome(text: str):
    """"""जांचता हवय कि काय दिए गए स्ट्रिंग एक पालिंड्रोम हवय >>> is_palindrome (('') सच हवय >>> is_palindrome (('अबा') सच हवय >>> is_palindrome (('अअअआआ') सच हवय >>> is_palindrome (('ज़बसीडी') गलत हवय ।""""""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,hne_Deva,python,"

def modp(n: int, p: int):
    """"""वापसी 2 ^ n मॉडुलो पी (संख्याओं के बारे में जागरूक रहें) । >>> मॉडप (३, ५) 3 >>> मॉडप (१०१, १०१) २ >>> मॉडप (०, १०१) १ >>> मॉडप (३, ११) ८ >>> मॉडप (१००, १०१) १ ।""""""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,hne_Deva,python,"

def encode_shift(s: str):
    """"""एन्कोड_शिफ्ट फ़ंक्शन के साथ इनपुट स्ट्रिंग के रूप में एन्कोड करे जात हवय। डिकोड स्ट्रिंग ल वापस करत हवय।""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""वर्णमाला में हर वर्ण के 5 ले स्थानांतरित करके एन्कोडेड स्ट्रिंग ल लौटाता हवय।""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,hne_Deva,python,"

def remove_vowels(text):
    """"""remove_vowels एक फ़ंक्शन हवय जेहर स्ट्रिंग ल लेता हवय अउ बिना स्वर के स्ट्रिंग ल वापस करत हवय। >>> remove_vowels ((') ' ' >>> remove_vowels ((') 'abcdef \ nghijklm') 'bcdf \ nghjklm' >>> remove_vowels ((') 'abcdef') 'bcdf' >>> remove_vowels ((') 'aaaaa') ' ' >>> remove_vowels ((') 'aaBAA') ' B' >>> remove_vowels ((') 'zbcd') 'zbcd '""""""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,hne_Deva,python,"

def below_threshold(l: list, t: int):
    """"""यदि सूची में जम्मो संख्याएं दहलीज के नीचे हवय तो सच ल लौटाएं। >>> नीचे_थ्रेसहोल्ड{1, 2, 4, 10], 100) सच >>> नीचे_थ्रेसहोल्ड{1, 20, 4, 10], 5) गलत ।""""""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,hne_Deva,python,"

def add(x: int, y: int):
    """"""दो संख्याओं के जोड़ें x अउ y >>> जोड़ें ((2, 3) 5 >>> जोड़ें ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,hne_Deva,python,"

def same_chars(s0: str, s1: str):
    """"""जांचें कि क्या दो शब्दों में समान वर्ण हैं। >>> same_chars ((('eabcdzzzz', 'dddzzzzzzdeddabc') सच >>> same_chars ((('abcd', 'dddddddddabc') सच >>> same_chars ((('dddddddabc', 'abcd') सच >>> same_chars ((('eabcd', 'dddddddddabc') गलत >>> same_chars ((('abcd', 'dddddddabddce') गलत >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') गलत """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,hne_Deva,python,"

def fib(n: int):
    """"""एन-थ फिबोनाची संख्या ल लौटाएं। >>> फाइब 10 55 >>> फाइब 1 1 >>> फाइब 8 21""""""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,hne_Deva,python,"

def correct_bracketing(brackets: str):
    """"""ब्रैकेट ""<"" अउ "">"" के स्ट्रिंग हवय। यदि प्रत्येक ओपनिंग ब्रैकेट में एक संबंधित क्लोजिंग ब्रैकेट हवय तो सही ल लौटाएं। >>> सही_ब्रेकेटिंग ({""<"") गलत >>> सही_ब्रेकेटिंग ({""<>"") सच >>> सही_ब्रेकेटिंग ({""<>) सच >>> सही_ब्रेकेटिंग ({""<>) गलत """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,hne_Deva,python,"

def monotonic(l: list):
    """"""रिटर्न सही एहर सूची तत्वमन ल मोनोटोनिक रूप ले बढ़त या घटत हवय। >>> मोनोटोनिक (([1, 2, 4, 20]) सही >>> मोनोटोनिक (([1, 20, 4, 10]) गलत >>> मोनोटोनिक (([4, 1, 0, -10)) सच """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,hne_Deva,python,"

def common(l1: list, l2: list):
    """"""दो सूचियों बर क्रमबद्ध अद्वितीय सामान्य तत्व ल लौटाओ। >>> सामान्य ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> सामान्य ([5, 3, 2, 8], [3, 2]) [2, 3] ।""""""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,hne_Deva,python,"

def largest_prime_factor(n: int):
    """"""एन के सबले बडखा प्राइम फैक्टर ल वापस कर दिस। एन > 1 मान लें अउ प्राइम नी हवय। >>> सबले बडखा_प्राइम_फैक्टर ((१३१९५) २९ >>> सबले बडखा_प्राइम_फैक्टर ((२०४८) २ """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,hne_Deva,python,"

def sum_to_n(n: int):
    """"""sum_to_n एक फ़ंक्शन हवय जेहर 1 ले n तक के संख्यामन के योग हवय। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 ।""""""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,hne_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets ""("" अउ """") के स्ट्रिंग हवय। यदि प्रत्येक ओपनिंग ब्रैकेट में एक संबंधित क्लोजिंग ब्रैकेट हवय तो सही लौटाएं। >>> सही_ब्रेकेटिंग ((""("") गलत >>> सही_ब्रेकेटिंग (("")) सच >>> सही_ब्रेकेटिंग ((""() सही >>> सही_ब्रेकेटिंग (("") गलत """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,hne_Deva,python,"

def derivative(xs: list):
    """"""एक्स एक बहुपद के गुणांक के प्रतिनिधित्व करत हवय। एक्सएस [0] + एक्सएस [1] * एक्स + एक्सएस [2] * एक्स ^ 2 + .... ए बहुपद के व्युत्पन्न ल उसी रूप में लौटाएं। >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,hne_Deva,python,"

def fibfib(n: int):
    """"""फिबफिब नंबर अनुक्रम फिबोनैकी अनुक्रम के समान एक अनुक्रम हवय जेला निम्नानुसार परिभाषित करे गए हवय: फाइबफिब (०) == 0 फाइबफिब (०) == 0 फाइबफिब (१) == 0 फाइबफिब (२) == 1 फाइबफिब (एन) == फाइबफिब (एन -1) + फाइबफिब (एन -2) + फाइबफिब (एन -3) । कृपया एक फ़ंक्शन लिखें ताकि फाइबफिब नंबर अनुक्रम के एन-वें तत्व के कुशलतापूर्वक गणना करे जा सके। >>> फाइबफिब (१) (१) 0 >>> फाइबफिब (५) 4 >>> फाइबफिब (८) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,hne_Deva,python,"
FIX = """"""एक फ़ंक्शन लिखें जो इनपुट के रूप में एक शब्द का प्रतिनिधित्व करे वाली स्ट्रिंग लेता है और स्ट्रिंग में स्वरों की संख्या लौटाता है। इस मामले में स्वर 'ए', 'ई', 'आई', 'ओ', 'यू' हैं। यहां, 'वाई' भी एक स्वर है, लेकिन केवल जब यह दिए गए शब्द के अंत में होता है। उदाहरणः >>> स्वरों की गिनती (अ) (एबीसीडी) 2 >>> स्वरों की गिनती (एसीडीई) 3 """"""

def vowels_count(s):
    """"""अउ जादा टेस्ट केस जोड़े।""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,hne_Deva,python,"
def circular_shift(x, shift):
    """"""परिपत्र पूर्णांक x के अंकों के स्थानांतरित करव, स्थानांतरित करके अंकों के दाईं ओर स्थानांतरित करव अउ परिणाम ल स्ट्रिंग के रूप में लौटाएं। यदि स्थानांतरण > अंकों के संख्या, अंकों के उल्टा लौटाएं। >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,hne_Deva,python,"
def digitSum(s):
    """"""कार्य एक फ़ंक्शन लिखें जेहर इनपुट के रूप में स्ट्रिंग लेता हवय अउ केवल शीर्ष वर्णों के योग ल वापस करत हवय 'एएससीआईआई कोड। उदाहरणः digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,hne_Deva,python,"
def fruit_distribution(s,n):
    """"""इ कार्य में, आप ल एक स्ट्रिंग दी जाही जो सेब अउ संतरा के संख्या के प्रतिनिधित्व करत हावे जो फल की एक टोकरी में वितरित की जात हावे इ टोकरी में सेब, संतरा अउ आम के फल शामिल हावें। स्ट्रिंग के दिए गए जो संतरा अउ सेब के कुल संख्या का प्रतिनिधित्व करत हावे अउ टोकरी में फल की कुल संख्या का प्रतिनिधित्व करत हावे टोकरी में आम के फल की संख्या लौटाओ। उदाहरण बरः fruit_distribution""5(सेब अउ 6 संतरा"", 19) -> 19 - 5 - 6 = 8 फल_वितरण""0 सेब अउ 1 संतरा"", 3) -> 3 - 0 - 1 = 2 फल_वितरण""2 सेब अउ 3 संतरा"", 100) -> 100 - 2 - 3 = 95 फल_वितरण""100 सेब अउ 1 संतरा"", 1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,hne_Deva,python,"
def pluck(arr):
    """"""एक सरणी के प्रतिनिधित्व करत होए जेहर एक पेड़ के शाखा के प्रतिनिधित्व करत हवय जेमा गैर-नकारात्मक पूर्णांक नोड्स हंवय , आपके काम नोड्स में ले एक ल चुनना हवय अउ एला वापस करना हवय। चुनए गए नोड सबले छोटे सम मूल्य के साथ नोड होना चाहि। यदि एकेच्च सबले छोटे सम मूल्य के साथ कईठन नोड्स पाए जात हंवय , तो नोड ल लौटाए जात हवय जेमा सबले छोटे इंडेक्स हवय। चुनए गए नोड ल एक सूची में लौटाए जाना चाहि, [smallest_value, इके इंडेक्स ], यदि कोई भी मूल्मन नी हंवय या दिए गए सरणी खाली हवय, तो लौटाए जात हवय []। उदाहरण 1: इनपुटः [4,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 के सबले छोटे सम मूल्य हवय, अउ 2 के सबले छोटे इंडेक्स हवय। उदाहरण 2: इनपुटः [1,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 के सबले छोटे मूल्य हवय, अउ 2 के सबले छोटे इंडेक्स हवय। उदाहरण 3: इनपुटः [] आउटपुटः [] इनपुटः [4,5, 3, 4,] आउटपुटः 0, 1 आउटपुटः 0, आउटपुटः 1 निर्दिष्ट नोड ल सबले छोटे सूचक के साथ लौटाए जात हवय, लेकिन दू शून्य मान हवय। उदाहरणः * लंबाई = शून्य, लेकिन सबले छोटे नोड हवय, जेमा शून्य हवय। * सबले छोटे नोडः 1 * शून्य, लेकिन शून्य मान हवय।""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,hne_Deva,python,"
def search(lst):
    '''आपके करा धनात्मक पूर्णांक के एक गैर-खाली सूची हवय। सबले बडखा पूर्णांक ल लौटाएं जेहर शून्य ले ज्यादा हवय, अउ पूर्णांक के मूल्य के बराबर या उससे अधिक आवृत्ति हवय। एक पूर्णांक के आवृत्ति सूची में आहर के संख्या हवय। यदि ऐसा कोई मूल्य मौजूद नी हवय, तो -1 लौटाएं। उदाहरणः खोजें: (([4, 1, 2, 2, 3, 1]) == 2 खोजें ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 खोजें ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,hne_Deva,python,"
def strange_sort_list(lst):
    '''पूर्णांक के सूची दिए गए, अजीब क्रम में सूची लौटाएं। अजीब सॉर्टिंग, जब आप न्यूनतम मूल्य के साथ शुरू करते हैं, तो शेष पूर्णांक के अधिकतम, फिर न्यूनतम, आदि। उदाहरण: अजीब_सॉर्ट_लिस्ट (([1, 2, 3, 4]) == [1, 4, 2, 3] अजीब_सॉर्ट_लिस्ट (([5, 5, 5, 5]) == [5, 5, 5, 5] अजीब_सॉर्ट_लिस्ट (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,hne_Deva,python,"
def triangle_area(a, b, c):
    '''एक त्रिकोण के तीन किनारों के लंबाई ल देखते हुए। यदि तीन पक्ष एक वैध त्रिकोण बनाते हावें तो त्रिकोण के क्षेत्रफल ल 2 दशमलव बिंदुओं तक गोल करिस जाए। अन्यथा -1 लहुटाना तीन पक्ष एक वैध त्रिकोण बनाते हावें जब काखरो भी दो पक्षों का योग तीसरी पक्ष ले अधिक होत हावे। उदाहरण: त्रिकोण_क्षेत्र (३,४,५) == 6.00 त्रिकोण_क्षेत्र (१,२,१०) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,hne_Deva,python,"
def will_it_fly(q,w):
    '''एक फ़ंक्शन लिखें जेहर सच ल वापस करत हवय यदि ऑब्जेक्ट क्यू उड़ही, अउ अन्यथा गलत हवय। ऑब्जेक्ट क्यू उड़ही यदि एहर संतुलित हवय (एहर एक पालिंड्रोमिक सूची हवय) अउ एखर तत्वमन के योग अधिकतम संभव वजन डब्ल्यू ले कम या बराबर हवय। उदाहरण: will_it_fly (([1, 2], 5) â -> गलत # 1 + 2 अधिकतम संभव वजन ले कम हवय, लेकिन एहर असंतुलित हवय। will_it_fly (([3, 2, 3], 1) â -> गलत # एहर संतुलित हवय, लेकिन 3 + 2 + 3 अधिकतम संभव वजन ले ज्यादा हवय। will_it_fly (([3, 2, 3], 9) â -> सच # 3 + 2 3 अधिकतम संभव वजन ले कम हवय, अउ एहर संतुलित हवय। will_it_fly ((([3], 5) â -> सच # 3 अधिकतम संभव वजन ले कम हवय, अउ एहर संतुलित हवय।'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,hne_Deva,python,"
def smallest_change(arr):
    """"""पूर्णांक के एक सरणी एआर दिए गए हवय, ए तत्वमन के न्यूनतम संख्या के पता लगावव कि सरणी पालिंड्रोमिक बनइन बर काय बदले के जरूरत हवय। एक पालिंड्रोमिक सरणी एक सरणी हवय जेला पाछू अउ आघु समान पढ़ा जात हवय। एक बदलाव में, आप एक तत्व ल काखरो घलो दूसर तत्व में बदल सकत हंवय । उदाहरण बर: smallest_change ([1,2,3,5,4,7,9,6]) == 4 smallest_change ([1,2,3,4,3,2,2]) == 1 smallest_change ([1,2,3,2,1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,hne_Deva,python,"
def total_match(lst1, lst2):
    '''एक फ़ंक्शन लिखें जेहर स्ट्रिंग के दु सूचीमन ल स्वीकार करत हवय अउ सूची ल वापस करत हवय जेमा सूची के जम्मो स्ट्रिंग में दूसर सूची ले कम संख्या में वर्ण होत हंवय । यदि दुनों सूची में वर्ण के समान संख्या हवय, तो पहली सूची ल वापस कर दिस । उदाहरण कुल_मच ({\\displaystyle {\\sqrt {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,hne_Deva,python,"
def is_multiply_prime(a):
    """"""एक फ़ंक्शन लिखें जेहर सच ल वापस करत हवय यदि दिखीस संख्या 3 प्राइम नंबरों के गुणा हवय अउ आने रहिस गलत हवय। जानकार हवय कि (ए) 100 ले कम हवय। उदाहरण: is_multiply_prime(30) == सच 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,hne_Deva,python,"
def is_simple_power(x, n):
    """"""आपके काम ए फंक्शन लिखे बर हवय जेहर सच ल वापस करत हवय यदि कोई संख्या एक्स एन के एक साधारण शक्ति हवय अउ आने मामलामन में गलत हवय। एक्स एन के एक साधारण शक्ति हवय यदि एन ** इंट = एक्स उदाहरण बर: is_simple_power (१, ४) => सच is_simple_power (२, २) => सच is_simple_power (८, २) => सच is_simple_power (३, २) => गलत is_simple_power (३, १) => गलत is_simple_power (५, ३) => गलत """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,hne_Deva,python,"
def iscube(a):
    '''एक फ़ंक्शन लिखें जेहर एक पूर्णांक ए लेता हवय अउ सच ल वापस करत हवय यदि एहर इंजेगर कुछु पूर्णांक संख्या के घन हवय। नोटः आप एहर मान सकत हंवय कि इनपुट हमेशा मान्य होत हवय। उदाहरणः इस्क्यूब (क) ==> सच इस्क्यूब (क) ==> गलत इस्क्यूब (क) -1 (क) ==> सच इस्क्यूब (क) 64) ==> सच इस्क्यूब (क) 0 (क) ==> सच इस्क्यूब (क) 180 (क) गलत '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,hne_Deva,python,"
def hex_key(num):
    """"""आप ल एक फ़ंक्शन लिखे बर काम करे गए हवय जेहर एक हेक्साडेसिमल संख्या ल स्ट्रिंग के रूप में प्राप्त करत हवय अउ हेक्साडेसिमल अंकों के संख्या के गिनती करत हवय जेहर प्राइम होत हंवय (प्राइम नंबर, या एक प्राइम, 1 ले ज्यादा प्राकृतिक संख्या हवय जेहर दुठन छोटे प्राकृतिक संख्या के उत्पाद नी होए) । हेक्साडेसिमल अंकों के 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ए, बी, सी, डी, ई, एफ होत हंवय । प्राइम नंबर 2, 3, 5, 7, 11, 13, 17 ..., ए हवय। तो आप ल एहर निम्नलिखित अंकों के संख्या निर्धारित करना होत हवय: 2, 3, 5, 7, बी (= दशमलव 11), डी (= दशमलव 13) । नोटः आप एहर मान सकत हंवय कि इनपुट हमेशा सही या खाली स्ट्रिंग हवय, अउ प्रतीक ए, बी, सीडी, ईएफ, एबी हमेशा अपरकेस होत हंवय । उदाहरण: नमः ""एबी"" आउटपुट के लिए नमः 1. बर ""एबी"" आउटपुट बर 1 होना चाहि। ""एबी"" आउटपुट बर 2 होना चाहि। ""एबी"" आउटपुट बर नमः 1. बर ""एबी"" आउटपुट बर 1 होना चाहि। ""एबी"" आउटपुट बर 2 होना चाहि। ""एबी"" आउटपुट बर 2 होना चाहि। ""एबी"" आउटपुट बर 2।""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,hne_Deva,python,"
def decimal_to_binary(decimal):
    """"""आपके करा दशमलव रूप में एक संख्या दी जा रही हवय अउ आपके कार्य एला द्विआधारी प्रारूप में परिवर्तित करना हवय। फ़ंक्शन के एक स्ट्रिंग लौटाए जाना चाहि, प्रत्येक वर्ण के साथ एक द्विआधारी संख्या के प्रतिनिधित्व करना चाहि। स्ट्रिंग में प्रत्येक वर्ण '0' या '1' होही। स्ट्रिंग के शुरुआत में अउ अंत में वर्णों के एक अतिरिक्त जोड़ी 'db' होही। अतिरिक्त वर्ण प्रारूप के साथ मदद करे बर वहां हंवय। उदाहरणः दशमलव_टू_बाइनरी ((15) # ""db1111db"" ल लौटाता हवय दशमलव_टू_बाइनरी (32)) # ""db100000db"" ल लौटाता हवय""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,hne_Deva,python,"
def is_happy(s):
    """"""आप ल एक स्ट्रिंग एस दिए जात हवय। आपके काम ए जांचना हवय कि स्ट्रिंग खुश हवय या नी। एक स्ट्रिंग खुश हवय यदि एखर लंबाई कम ले कम 3 हवय अउ प्रत्येक 3 लगातार अक्षर अलग हवय उदाहरण बर: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (e) => False is_happy (f) => False is_happy (x) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,hne_Deva,python,"
def numerical_letter_grade(grades):
    """"""ए सेमेस्टर के आखिरी हफ्ता हे अऊ शिक्षक ल छात्र मन ल ग्रेड देना हे। शिक्षक ह ग्रेडिंग बर अपन खुद के एल्गोरिथ्म बनात हे। एक ठन समस्या हे कि, ओ ह ग्रेडिंग बर उपयोग करे गे कोड ल भुला गे हे। ओ ह तोला कुछू छात्र बर जीपीए के सूची देहे हे अऊ तोला एक फंक्शन लिखे बर हे जऊन ह निम्नलिखित तालिका के उपयोग करके लेटर ग्रेड के सूची ल आउटपुट कर सकथे: जीपीए । लेटर ग्रेड 4.0 ए+ > 3.7 ए > 3.3 ए- > 3.0 बी+ > 2.7 बी > 2.3 बी- > 2.3 बी+ > 2.0 सी+ > 1.7 सी > 1.3 सी- > 1.0 डी+ > 0.7 डी > 0.0 डी- 0.0 ई उदाहरण: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['ए+', 'बी', 'सी-', 'सी', 'ए'] -'""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,hne_Deva,python,"
def prime_length(string):
    """"""एक फ़ंक्शन लिखें जेहर स्ट्रिंग लेता हवय अउ यदि स्ट्रिंग लंबाई एक प्रमुख संख्या हवय तो सत्य ल वापस करत हवय या अन्यथा गलत उदाहरण prime_length{""हैलो"") == True prime_length{""एबीसीडीसीबीए"") == True prime_length{""किट"") == True prime_length{""ऑरेंज"") == गलत """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,hne_Deva,python,"
def starts_one_ends(n):
    """"""एक सकारात्मक पूर्णांक एन दिए गए, एन-डिजिट सकारात्मक पूर्णांक के संख्या के गिनती ल वापस करत हवय जेहर 1 के साथ शुरू या समाप्त होत हवय।""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,hne_Deva,python,"
def solve(N):
    """"""उदाहरण बर एन = 1000 बर, अंकों के योग 1 होही आउटपुट ""1"" होना चाहि। एन = 150 बर, अंकों के योग 6 होही आउटपुट ""110"" होना चाहि। एन = 147 बर, अंकों के योग 12 होही आउटपुट ""1100"" होना चाहि। चरः @ एन पूर्णांक बाधाओं: 0 â‰¤ एन â‰¤ 10000. आउटपुटः बाइनरी संख्या के एक स्ट्रिंग """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,hne_Deva,python,"
def add(lst):
    """"""पूर्णांक के एक गैर-खाली सूची के कारण, सम तत्वों के जोड़ें जो विषम सूचकांक में हावें। उदाहरणः add (([4, 2, 6, 7]) ==> 2 ।""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,hne_Deva,python,"
def anti_shuffle(s):
    """"""एक फ़ंक्शन लिखें जेहर एक स्ट्रिंग लेता हवय अउ एखर एक आदेशित संस्करण ल वापस करत हवय। स्ट्रिंग के आदेशित संस्करण, एक स्ट्रिंग हवय जहां जम्मो शब्द (स्पेस द्वारा अलग) एक नवा शब्द द्वारा प्रतिस्थापित करे जात हवय जहां जम्मो वर्णों ल एएससीआई मूल्य के आधार म आरोही क्रम में व्यवस्थित करे जात हवय। नोट: आप ल वाक्य में शब्दों अउ रिक्त स्थान के क्रम रखना चाहि। उदाहरण बर: एंटी_शफ्ल ((('हाय') रिटर्न 'हाय' एंटी_शफ्ल ((('हैलो') रिटर्न 'एलोलो' एंटी_शफ्ल (('हैलो वर्ल्ड! !! ')) रिटर्न 'हैलो ! डलर '""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,hne_Deva,python,"
def get_row(lst, x):
    """"""आप ल एक 2 आयामी डेटा, एक नेस्टेड सूची के रूप में, जो मैट्रिक्स के समान हवय, हालांकि, मैट्रिक्स के विपरीत, प्रत्येक पंक्ति में कॉलम के एक अलग संख्या हो सकत हवय। lst, अउ पूर्णांक x दिए गए, सूची में पूर्णांक एक्स ढूंढें, अउ ट्यूपल के सूची ल वापस कर दें, [(x1, y1), (x2, y2) ...] ए तरह कि प्रत्येक टपल एक निर्देशांक हवय - (पंक्ति, कॉलम), 0 ले शुरू होत हवय। क्रमबद्ध निर्देशांक शुरुआत में पंक्तियों के क्रम में क्रमबद्ध। उदाहरणः प्राप्त_पंक्ति [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), 2 (0, 0), 1 (), 1 (), 1 (), 1 (), 1 (), 1 (), 2 ()) == पंक्ति ([0, 1, 1, 2, 3, 2, 3) ] == 2, 2, 2 ())""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,hne_Deva,python,"
def sort_array(array):
    """"""गैर-नकारात्मक पूर्णांक के एक सरणी दिए गए हवय, सॉर्टिंग के बाद दिए गए सरणी के एक प्रति लौटाओ, आप दिए गए सरणी ल आरोही क्रम में सॉर्ट करहू यदि योग (पहला इंडेक्स मूल्य, आखिरी इंडेक्स मूल्य) विषम हवय, या एला अवरोही क्रम में सॉर्ट करहू यदि योग (पहला इंडेक्स मूल्य, आखिरी इंडेक्स मूल्य) सम हवय। नोटः * दिए गए सरणी ल न बदलें। उदाहरणः * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,hne_Deva,python,"
def encrypt(s):
    """"""एक फ़ंक्शन एन्क्रिप्ट बनाएँ जेहर एक स्ट्रिंग ल तर्क के रूप में लेत हवय अउ वर्णमाला ल घुमाए के साथ एक स्ट्रिंग के एन्क्रिप्टेड ल वापस करत हवय। वर्णमाला ल ए तरह ले घुमाया जाना चाहि कि अक्षरों ल दो स्थानों म गुणा करे बर नीचे ले जाया जाना चाहि। उदाहरण बर: एन्क्रिप्ट (ए) 'आई') 'एलएम' एन्क्रिप्ट (एएसडीएफजीजीजेकेएल) 'ईडब्ल्यूजेकेएल' एन्क्रिप्ट (जीएफ) 'केजे' एन्क्रिप्ट (ईटी) 'आईएक्स' ल वापस करत हवय।""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,hne_Deva,python,"
def next_smallest(lst):
    """"""आप ल पूर्णांक के एक सूची दिए जात हवय। एक फ़ंक्शन लिखें next_smallest () जेहर सूची के दूसर सबले छोटे तत्व ल वापस करत हवय। यदि ए तरह के कोई तत्व नी हवय तो कोई घलो नी लौटाए। next_smallest () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () ()""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,hne_Deva,python,"
def is_bored(S):
    """"""आप ल सब्द के एक स्ट्रिंग दिस जाही, अऊ आप के काम बोरडॉम्स के संख्या के गनना हे। एक बोरडॉम एक वाक्य हे जऊन ""आई"" शब्द ले सुरू होथे। वाक्य '.', '?' या '! ' ले अलग-अलग हो जाथे। उदाहरण बर: >>> is_bored(""हैलो वर्ल्ड"") 0 >>> is_bored(""आकाश नीला हे। सूरज चमकत हे। मोला ए मौसम पसंद हे"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,hne_Deva,python,"
def any_int(x, y, z):
    '''एक फ़ंक्शन बनाएँ जो 3 संख्याओं ल लेता हवय। यदि संख्याओं में ले एक अन्य दो के योग के बराबर हवय, तो सही लौटाता हवय, अउ जम्मो संख्या पूर्णांक होत हंवय। कन्हु भी अन्य मामला में गलत ल लौटाता हवय। उदाहरण के लिए कन्हु भी_इंट {5, 2, 7) -> सच कन्हु भी_इंट {3, 2, 2) -> गलत कन्हु भी_इंट {3, -2, 1) -> सच कन्हु भी_इंट {3, -6, -2, 2) -> गलत '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,hne_Deva,python,"
def encode(message):
    """"""एक फ़ंक्शन लिखें जेहर एक संदेश लेथे, अउ ए तरह ले एन्कोड करत हवय कि एहर जम्मो अक्षरों के केस ल बदल देत हवय, संदेश म जम्मो स्वरमन ल पत्र के साथ बदल देत हवय जेहर अंग्रेजी वर्णमाला म ओ स्वर के आघू 2 स्थानों म दिखाई देत हवय। केवल अक्षरमन ल मान लें। उदाहरणः >>> एन्कोड 'परीक्षण') 'टीजीएसटी' >>> एन्कोड 'एहर एक संदेश हवय') 'टीएचकेएस केएस सी एमजीएससीजीजी' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,hne_Deva,python,"

def skjkasdkd(lst):
    """"""आप ल पूर्णांक के एक सूची दिए गए हवय। आप ल सबले बडखा प्राइम मान ढूंढना चाहि अउ अपन अंकों के योग ल वापस करना चाहि। उदाहरणः बर lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] आउटपुट 10 होना चाहि बर lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] आउटपुट 25 होना चाहि बर lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] आउटपुट 13 होना चाहि बर lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] आउटपुट 11 होना चाहि बर lst = [0,81,12,31,21] आउटपुट 3 होना चाहि बर lst = [0,1,8,1,2,7] आउटपुट 7 होना चाहि।""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,hne_Deva,python,"
def check_dict_case(dict):
    """"""एक शब्दकोश दिए गए हवय, यदि जम्मो कुंजी छोटे अक्षर म स्ट्रिंग हंवय या जम्मो कुंजी बड़े अक्षर म स्ट्रिंग हंवय, तो वापस सत्य, अन्यथा वापस गलत. फ़ंक्शन ल वापस करना चाहि गलत ए दिखीस शब्दकोश खाली हवय। उदाहरणः चेक_डिक्ट_केस{""ए"":""एप्पल"", ""बी"":"" केला""}) ल वापस करना चाहि सत्य. चेक_डिक्ट_केस{""ए"":""एप्पल"", ""ए"":"" केला"", ""बी"":"" केला""}) ल वापस करना चाहि गलत. चेक_डिक्ट_केस{""ए"":""एप्पल"", ""8:"" केला"", ""ए"":""एप्पल""}) ल वापस करना चाहि गलत. चेक_डिक्ट_केस{""नाम"", ""जॉन"", ""आयु"", ""36"", ""शहर"", ""ह्यूस्टन""}) ल वापस करना चाहि गलत. चेक_डिक्ट_केस{""एनसी"":""स्टेट"", ""जेड"":""आईपी""}) ल वापस करना चाहि सत्य।""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,hne_Deva,python,"
def count_up_to(n):
    """"""एक फ़ंक्शन लागू करव जेहर एक गैर-नकारात्मक पूर्णांक लेता हवय अउ पहीली एन पूर्णांक के एक सरणी ल वापस करत हवय जेहर प्राइम नंबर अउ एन ले कम हंवय। उदाहरण बर: काउंटर_अप_टू (5) => [2,3] काउंटर_अप_टू (11) => [2,3,5,7] काउंटर_अप_टू (0) => [] काउंटर_अप_टू (20) => [2,3,5,7,11,13,17,19] काउंटर_अप_टू (1) => [] काउंटर_अप_टू (18) => [2,3,5,7,11,13,17] ।""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,hne_Deva,python,"
def multiply(a, b):
    """"""फ़ंक्शन के पूरा करे बर कि दू पूर्णांक ल लेथे अउ ओमनके इकाई अंकों के उत्पाद ल वापस कर देत हवय। मान लें कि इनपुट हमेशा वैध होत हवय। उदाहरणः गुणा करे बर 148, 412 ल 16. गुणा करे बर 19 , 28 ल वापस करना चाहि। गुणा करे बर 2020 , 1851 ल 0 ल वापस करना चाहि। गुणा करे बर 14 , 15 ल वापस करना चाहि।""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,hne_Deva,python,"
def count_upper(s):
    """"""स्ट्रिंग एस दिए गए, सम सूचकांकों में अपरकेस स्वरों के संख्या के गणना करव। उदाहरण बर: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 लहुटात हवय ।""""""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,hne_Deva,python,"
def closest_integer(value):
    '''एक फ़ंक्शन बनाएँ जेहर एक संख्या के प्रतिनिधित्व करे वाले मूल्य (स्ट्रिंग) लेता हवय अउ एखर निकटतम पूर्णांक ल वापस करत हवय। यदि संख्या दु पूर्णांक ले समान हवय, त एला शून्य ले दूर कर दे. उदाहरण >>> निकटतम_पूर्णांक ((""10"") 10 >>> निकटतम_पूर्णांक ((""15.3"") 15 नोट: शून्य ले दूर राउंडिंग के मतलब हवय कि यदि दिखीस संख्या दु पूर्णांक ले समान हवय, तो आप ल वापस करना चाहि ओहर ओहर हवय जेहर शून्य ले धुरिहा हवय। उदाहरण बर निकटतम_पूर्णांक "" (१४.५"") ल वापस करना चाहि अउ निकटतम_पूर्णांक "" (१४.५"") ल -15.  लौटा देना चाहि।'''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,hne_Deva,python,"
def make_a_pile(n):
    """"""एक सकारात्मक पूर्णांक एन दिए गए हवय, तो आप पत्थर के एन स्तरों के एक ढेर बनाना हवय। पहीली स्तर में एन पत्थर हवय। अगले स्तर म पत्थर के संख्या एहर हवय: - अगली विषम संख्या यदि एन विषम हवय - अगली सम संख्या यदि एन सम हवय। एक सूची में प्रत्येक स्तर म पत्थर के संख्या ल लौटाएं, जहां सूचकांक में तत्व आई स्तर (आई + 1) म पत्थर के संख्या के प्रतिनिधित्व करत हवय। उदाहरणः >>> मेक_ए_पिल 3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,hne_Deva,python,"
def words_string(s):
    """"""आप ल कॉमा या रिक्त स्थान ले अलग शब्दों के एक स्ट्रिंग दिए जाही। आपके काम स्ट्रिंग ल शब्दों म विभाजित करना हवय अउ शब्दों के एक सरणी ल वापस करना हवय। उदाहरण बर: words_string ((""हाय, मोर नाम जॉन हवय"") == [""हाय"", ""मेरे"", ""नाम"", ""हर"", ""जॉन""] words_string ((""एक, दो, तीन, चार, पांच, छह"") == [""एक"", ""दू"", ""तीन"", ""चार"", ""पांच"", ""छः""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,hne_Deva,python,"
def choose_num(x, y):
    """"""इ फ़ंक्शन दुनो सकारात्मक संख्यामन के लेती हवय x अउ y अउ सबले बडखा सम पूर्णांक के लौटाता हवय जेहर कि सीमा में हवय [x, y] समावेशी। यदि ए तरह के कोई संख्या नी हवय, त फ़ंक्शन के -1 लौटाए जाना चाहि। उदाहरण बर: चुनें_नंबर 12 , 15 = 14 चुनें_नंबर 13 , 12 = -1 ।""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,hne_Deva,python,"
def rounded_avg(n, m):
    """"""आपके करा दुनो सकारात्मक पूर्णांक एन अउ एम दिए गए हंवय , अउ आपके काम एन ले एम (एन अउ एम सहित) के माध्यम ले पूर्णांक के औसत के गणना करना हवय। निकटतम पूर्णांक तक उत्तर के गोल करे अउ एला बाइनरी में परिवर्तित करे। यदि एन एम ले ज्यादा हवय, तो -1 लौटाएं। उदाहरण: गोल_मध्यम (एवीजी) 1, 5) => ""0 बी 11"" गोल_मध्यम (एवीजी) 7, 5) => -1 गोल_मध्यम (एवीजी) 10, 20) => ""0 बी 11 11"" गोल_मध्यम (एवीजी) 20, 33) => ""0 बी 11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,hne_Deva,python,"
def unique_digits(x):
    """"""सकारात्मक पूर्णांक के सूची दिए गए हवय। उन जम्मो तत्वों के एक क्रमबद्ध सूची ल लौटाएं जेमा कोई घलो अंक नी हवय। नोटः लौटाए गए सूची ल बढ़ते क्रम में क्रमबद्ध करे जाना चाहि। उदाहरण बर: >>> अद्वितीय_डिजिट (([15, 33, 1422, 1]) [1, 15, 33] >>> अद्वितीय_डिजिट (([152, 323, 1422, 10]) [] ।""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,hne_Deva,python,"
def by_length(arr):
    """"""पूर्णांक के एक सरणी दिए गए हवय, पूर्णांक के क्रमबद्ध करें जेहर 1 अउ 9 के बीच हवय, परिणामी सरणी के उल्टा, अउ फिर प्रत्येक अंक के अपन संबंधित नाम ले प्रतिस्थापित करें ""एक"", ""दू"", ""तीन"", ""चार"", ""पांच"", ""छह"", ""सात"", ""आठ"", ""नौ"" उदाहरण बर: एआर = [2, 1, 1, 4, 5, 8, 2, 3] -> सॉर्ट एआर -> [1, 1, 2, 2, 3, 4, 5, 8] -> रिवर्स एआर -> [8, 5, 4, 3, 2, 2, 1, 1] वापसी [""आठ"", ""चार"", ""तीन"", ""दू"", ""दू"", ""एक"", ""एक""] यदि सरणी खाली हवय, एक रिक्त वापसी एआरआर = [] वापसी एआर = [] यदि एआरआर में कन्हु भी अजीब संख्या हवय, तो एला अनदेखा कर दें: एआर = [1, -1 , 55] -> एआर -1, 55 -> एआर -1, 55 -> एआर = [55, रिवर्स एआर = 1] - 'एक' वापसी """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,hne_Deva,python,"
def f(n):
    """"""फ़ंक्शन लागू करव जेहर एक पैरामीटर के रूप में एन लेता हवय, अउ आकार एन के एक सूची ल वापस करत हवय, जैसे कि इंडेक्स म तत्व के मूल्य आई के फैक्टोरियल हवय यदि आई घलो हवय या 1 ले 1 तक के संख्या के योग हवय। मैं 1 ले शुरू होत हंवय। आई के फैक्टोरियल 1 ले आई तक के संख्या के गुणन हवय (1 * 2 * ... * आई) उदाहरण: एफ ((5) == [1, 2, 6, 24, 15] ।""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,hne_Deva,python,"
def even_odd_palindrome(n):
    """"""एक सकारात्मक पूर्णांक एन दिए गए, एक टपल ल वापस कर दिस जेमा संख्या अउ विषम पूर्णांक पालिंड्रोम के संख्या हवय जेहर रेंज म गिरती हवय: (1, 2) उदाहरणः इनपुटः 3 आउटपुटः (1, 2) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3 हवय, ओमनमे ले एक सम हवय, अउ ओमनमे ले दुनो विषम हंवय। उदाहरण 2: इनपुटः 12 आउटपुटः (4, 6) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हंवय। ओमनमे ले चार सम हंवय, अउ ओमनमे ले 6 विषम हंवय। नोटः 1 <= एन <= 10 ^ 3 2 टपल हर क्रमशः सम अउ विषम पूर्णांक पालिंड्रोम के संख्या ल वापस कर दिस हवय। """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,hne_Deva,python,"
def count_nums(arr):
    """"""एक फ़ंक्शन लिखें count_nums जेहर पूर्णांक के एक सरणी लेता हवय अउ तत्वमन के संख्या ल वापस करत हवय जेमा अंकों के योग हवय > 0। यदि कोई संख्या नकारात्मक हवय, त एखर पहीली हस्ताक्षरित अंक नकारात्मक होही: उदाहरण बर -123 के अंकों -1, 2 अउ 3 के हस्ताक्षर करे गए हवय। >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,hne_Deva,python,"
def move_one_ball(arr):
    """"""एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर एहर""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,hne_Deva,python,"
def exchange(lst1, lst2):
    """"""इ समस्या में, आप एक फ़ंक्शन लागू करही जो संख्याओं की दो सूचियों ल लेता हावे, अउ निर्धारित करत हावे कि क्या एलएसटी 1 के बीच केवल सम संख्याओं की एक सूची बनाए बर उनम के बीच तत्वों का आदान-प्रदान करना संभव हावे। एलएसटी 1 अउ एलएसटी 2 के बीच आदान-प्रदान तत्वों की संख्या पर कोई सीमा नी हावे। यदि एलएसटी 1 अउ एलएसटी 2 के बीच तत्वों का आदान-प्रदान करना संभव हावे ताकि एलएसटी 1 के सभी तत्वों ल भी बनाय जा सके, तो ""हां"" ल लौटाएं। अन्यथा, ""नहीं"" ल लौटाएं। उदाहरण बर: एक्सचेंज [1, 2, 3, 4], [1, 2, 3, 4]) => ""हां"" एक्सचेंज [1, 2, 3, 4], [1, 5, 3, 4]) => ""नहीं"" एहर माना जात हावे कि इनपुट सूचियां गैर-खाली होंगी। """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,hne_Deva,python,"
def histogram(test):
    """"""एक स्ट्रिंग दिए गए हवय जेहर एक स्पेस अलग छोटे अक्षरों के प्रतिनिधित्व करत हवय, सबले अधिक पुनरावृत्ति के साथ अक्षर के एक शब्दकोश ल वापस करत हवय अउ संबंधित गिनती शामिल हवय। यदि कईठन अक्षरों के समान घटना होत हवय, तो ओमन जम्मो ल वापस कर दिस। उदाहरण: हिस्टोग्राम ((('ए बी सी') == {'ए': 1, 'बी': 1, 'सी': 1} हिस्टोग्राम ((('ए बी बी ए') == {'ए': 2, 'बी': 2} हिस्टोग्राम ((('ए बी सी ए बी') == {'ए': 2, 'बी': 2} हिस्टोग्राम ((('बी बी बी ए') == {'बी 4}': हिस्टोग्राम (((')) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,hne_Deva,python,"
def reverse_delete(s,c):
    """"""कार्य हमन ल दु स्ट्रिंग्स एस अउ सी दिए गए हवय, आप ल एस म जम्मो वर्णों ल मिटा देना हवय जेहर सी म कन्हु भी चरित्र के बराबर होत हवय फेर जांच करव कि परिणाम स्ट्रिंग पालिंड्रोम हवय । एक स्ट्रिंग पालिंड्रोम कहा जात हवय यदि ए पाछू के रूप म समान पढ़ता हवय । आप ल परिणाम स्ट्रिंग अउ सच / गलत ल वापस करना चाहि । उदाहरण बर एस = ""एबीसीडीई"", सी = ""एई"", परिणाम होना चाहि ('बीसीडी', झूठा) एस = ""एबीसीडीईएफ"", सी = ""बी"" परिणाम होना चाहि ('एसीडीई', झूठा) एस = ""एबीसीडीईएफ"", सी = ""बी"" परिणाम होना चाहि ('एसीडीईएफ', झूठा) एस = ""एबीसीडीईसीबीए"", सी = ""एबी"", परिणाम होना चाहि ('सीडीसीईसी', सही) ।""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,hne_Deva,python,"
def odd_count(lst):
    """"""स्ट्रिंग्स के एक सूची दिए गए हवय, जहां प्रत्येक स्ट्रिंग म केवल अंक होत हवय, एक सूची ल वापस करत हवय। आउटपुट के प्रत्येक तत्व ""इनपुट के स्ट्रिंग म विषम तत्वमन के संख्या होना चाहि। "" जहां जम्मो आई ल इनपुट के आई के स्ट्रिंग म विषम अंक के संख्या ले प्रतिस्थापित करे जाना चाहि। >>> विषम_कौंट ['1234567']) [""4n के स्ट्रिंग 4 के विषम तत्वमन के संख्या 4n।""] >>> विषम_कौंट ['3',""111111""]) [""1n के स्ट्रिंग 1 के विषम तत्वमन के संख्या 1n।"", ""8n के स्ट्रिंग 8 के विषम तत्वमन के संख्या 8n।""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,hne_Deva,python,"
def minSubArraySum(nums):
    """"""पूर्णांक के सरणी के दिए गए, संख्याओं के कन्हु भी गैर-खाली उप-सरणी के न्यूनतम योग के पता लगावव। उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,hne_Deva,python,"
def max_fill(grid, capacity):
    import math
    """"""आप ल कुओं के एक आयताकार ग्रिड दिस जात हवय। प्रत्येक पंक्ति एक कुएं के प्रतिनिधित्व करत हवय, अउ प्रत्येक पंक्ति म 1 पानी के एक इकाई के प्रतिनिधित्व करत हवय। प्रत्येक कुएं म एक संबंधित बाल्टी होत हवय जेखर उपयोग पानी ल निकाले बर करे जा सकत हवय, अउ जम्मो बाल्टी के समान क्षमता होत हवय। आपके काम कुओं ल खाली करे बर बाल्टी के उपयोग करना हवय। आउटपुट के संख्या के आप ल बाल्टी के कम करे के आवश्यकता होत हवय। उदाहरण 1: इनपुटः ग्रिडः [[0,0,1,0], [0,1,0,0], [1,1,1,1]] बाल्टी_कपेसिटीः 1 आउटपुटः 6 उदाहरण 2: इनपुटः ग्रिडः [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] बाल्टी_कपेसिटीः 2 आउटपुटः 5 उदाहरण 3: इनपुटः [[0,0,0], [0,0,0]] बाल्टी_कपेसिटीः 5 आउटपुट कुएंः 0 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 3 * 4 * 5 * 6 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,hne_Deva,python,"
def sort_array(arr):
    """"""ए काटा में, आप ल बाइनरी प्रतिनिधित्व में बढती क्रम में एक के संख्या के अनुसार गैर-ऋणात्मक पूर्णांक के एक सरणी ल सॉर्ट करना हवय। एक समान संख्या बर, दशमलव मूल्य के आधार म सॉर्ट करना हवय। एला ए तरह लागू करे जाना चाहि: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,hne_Deva,python,"
def select_words(s, n):
    """"""स्ट्रिंग एस अउ एक प्राकृतिक संख्या एन दिए गए हवय, तो आप ल एक फ़ंक्शन लागू करे बर स्रहिसपित करे गए हवय जेमे स्ट्रिंग एस ले जम्मो शब्दों के एक सूची ल वापस कर दिस गए हवय जेमा सटीक एन व्यंजन होत हवय, ताकि ये शब्द स्ट्रिंग एस में दिखाई देवंय। यदि स्ट्रिंग एस खाली हवय तो फ़ंक्शन ल खाली सूची ल वापस करना चाहि। नोटः आप मान सकत हंवय कि इनपुट स्ट्रिंग में केवल अक्षर अउ रिक्त स्थान होत हवय। उदाहरणः चयनशब्दों (""मैरी के एक छोटे मेमने रहिस"", 4) ==> [""छोटे""] चयनशब्दों (""मैरी के एक छोटे मेमने रहिस"", 3) ==> [""मैरी"", ""लैंब""] चयनशब्दों (""सरल सफेद जगह"", 2) ==> [] चयनशब्दों (""हैलो दुनिया"", 4) ==> [""विश्व""] चयनशब्दों (""अंकल सैम"", 3) ==> [""अंकल""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,hne_Deva,python,"
def get_closest_vowel(word):
    """"""आप ल एक शब्द दे गे हे । आप के काम ए हे कि आप ल दू ठन व्यंजन के बीच म सबले निकट स्वर मिलही (अक्षर के संवेदी) । शुरुआत अऊ अंत म स्वर के गिनती नई करे जाय । यदि आप ल कोनो स्वर उपर बताय शर्त ल पूरा नई करे हे त खाली स्ट्रिंग ल वापिस कर दे । आप मान सकत हव कि दे गे स्ट्रिंग म सिरिफ अंगरेजी अक्षर हे । उदाहरण: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,hne_Deva,python,"
def match_parens(lst):
    '''आप ल दु स्ट्रिंग के एक सूची दिए जात हवय, दुनो स्ट्रिंग म केवल खुला कोष्ठक '(' या बंद कोष्ठक ') ' होत हवय। आपका काम ए जांचना हवय कि काय दु स्ट्रिंग ल कन्हु क्रम म संयोजित करना संभव हवय, कि परिणामी स्ट्रिंग अच्छा होही। एक स्ट्रिंग एस ल अच्छा माना जात हवय यदि अउ केवल यदि एस म जम्मो कोष्ठक संतुलित हंवय । उदाहरण बर: स्ट्रिंग '((()) 'अच्छा हवय, जबकि स्ट्रिंग '()) 'नहीं हवय। यदि एक अच्छा स्ट्रिंग बनाए के तरीका हवय, तो 'हां' ल वापस करव, अउ अन्यथा 'नहीं' ल वापस करव। उदाहरणः मैच_पेरेंस [('() ', ') ')) == 'हां' मैच_पेरेंस [(') ', ') ']) == 'नहीं' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,hne_Deva,python,"
def maximum(arr, k):
    """"""पूर्णांक अउ सकारात्मक पूर्णांक के एक सरणी एआर दिए गए हवय, एआर में अधिकतम के संख्या के साथ लंबाई के एक सॉर्ट की गई सूची लौटाएं। उदाहरण 1: इनपुटः एआर = [-3, -4, 5], के = 3 आउटपुटः [-4, -3, 5] उदाहरण 2: इनपुटः एआर = [4, -4, 4], के = 2 आउटपुटः [4, 4] उदाहरण 3: इनपुटः एआर = [-3, 2, 1, 2, -1, -2, 1], के = 1 आउटपुटः [2] नोटः 1. सरणी के लंबाई [1, 1000] के सीमा में होही। 2. सरणी में तत्व [-1000, 1000] के सीमा में होही। 3. 0 <= के <= लेन ((एआरआर) ।""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,hne_Deva,python,"
def solution(lst):
    """"""पूर्णांक के एक गैर-खाली सूची दिए गए हवय, जम्मो विषम तत्वों के योग ल वापस करत हवय जेहर घलो स्थितिमन में हंवय । उदाहरण समाधान (([5, 8, 7, 1]) ==> 12 समाधान (([3, 3, 3, 3, 3]) ==> 9 समाधान (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,hne_Deva,python,"
def add_elements(arr, k):
    """"""पूर्णांक arr अउ पूर्णांक के गैर-खाली सरणी के कारण, एआर के पहीली के तत्वों ले अधिकतम दु अंकों के साथ तत्वमन के योग ल लौटाएं। उदाहरण: इनपुटः एआरआर = [111,21,3,4000,5,6,7,8,9], के = 4 आउटपुटः 24 # 21 + 3 बाधाओं के योगः 1. 1 <= lenarr) <= 100 2 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,hne_Deva,python,"
def get_odd_collatz(n):
    """"""एक सकारात्मक पूर्णांक n दिए गए, एक क्रमबद्ध सूची ल वापस कर दिस जेमा कोलाट्ज़ अनुक्रम में विषम संख्या हवय। कोलाट्ज़ अनुमान गणित में एक अनुमान हवय जेमा ए तरह ले परिभाषित अनुक्रम ले संबंधित हवय: काखरो घलो सकारात्मक पूर्णांक एन के साथ शुरू करव। फिर प्रत्येक शब्द पिछले शब्द ले प्राप्त करे जात हवय: यदि पिछला शब्द सम हवय, तो अगला शब्द पिछले शब्द के आधा हवय। यदि पिछला शब्द विषम हवय, तो अगला शब्द 3 गुना पिछला शब्द प्लस 1 हवय। अनुमान ए हवय कि एन के काखरो घलो मूल्य के बावजूद, अनुक्रम हमेशा 1 तक पहुंच जाही। नोटः 1. कोलाट्ज़ ((1) [1] हवय। 2. क्रमबद्ध सूची ल वापस करे जात हवय। उदाहरण बर: get_odd_collatz ((5) रिटर्न [1, 5] 5 बर कोलाट्ज़ अनुक्रम हवय [5, 8, 16, 4, 2, 1], एखरबर विषम संख्या केवल 1 अउ 5 हवय। """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,hne_Deva,python,"
def valid_date(date):
    """"""आप ल एक फंक्शन लिखे बर हे जऊन एक दिही गे दिनांक स्ट्रिंग ल मान्य करथे अऊ यदि दिनांक वैध हे त True ल वापिस करथे अन्यथा False. दिनांक वैध हे यदि निम्नलिखित नियम मन ल पूरा करथे: 1. दिनांक स्ट्रिंग खाली नई हे. 2. महीना 1,3,5,7,8,10,12 बर दिन के संख्या 1 ले कम या 31 दिन ले जादा नई हे अऊ महीना 4,6,9,11 बर दिन के संख्या 1 ले कम या 30 दिन ले जादा नई हे। अऊ, महीना 2 बर दिन के संख्या 1 ले कम या 29 ले जादा नई हे 3. महीना 1 ले कम या 12 ले जादा नई होना चाही। 4. दिनांक के प्रारूप होना चाही: mm-dd-yyyy उदाहरण बर: valid_date (('03-11-2000') => valid_date ((15-01-2012') => valid_date (('04-01-2040') => valid_date (((06-04-2020') => valid_date (((06/04/2020') => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,hne_Deva,python,"
def split_words(txt):
    '''शब्द के एक स्ट्रिंग दिए गए हवय, रिक्त स्थान म विभाजित शब्दमन के एक सूची ल वापस करही, यदि टेक्स्ट म कोई रिक्त स्थान नी होए तो आपको कॉमा ',' म विभाजित करना चाहि यदि कोई कॉमा नी होए तो आपको वर्णमाला म विषम क्रम के साथ लोअर-लेटर अक्षरों के संख्या ल वापस करना चाहि, ऑर्ड 'ए') = 0, ऑर्ड 'बी') = 1, ... ऑर्ड 'जेड') = 25 उदाहरण स्प्लिट_वर्ड्स ((""हैलो वर्ल्ड! "") â -> [""हैलो"", ""वर्ल्ड! ""] स्प्लिट_वर्ड्स ((""हैलो,वर्ल्ड! "") â -> [""हैलो"", ""वर्ल्ड! ""] स्प्लिट_वर्ड्स ((""एबीसीडीएफ"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,hne_Deva,python,"
def is_sorted(lst):
    '''संख्याओं की एक सूची दी गई, चाहे वे आरोही क्रम में क्रमबद्ध हों या नहीं। यदि सूची में एक ही संख्या के 1 से अधिक डुप्लिकेट हों, तो गलत लौटाएं। कोई नकारात्मक संख्या अउ केवल पूर्णांक मान लें। उदाहरण is_sorted हैं) ।'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,hne_Deva,python,"
def intersection(interval1, interval2):
    """"""आपके करा दु अंतराल दिए जात हवय, जहां प्रत्येक अंतराल पूर्णांक के एक जोड़ी हवय। उदाहरण बर, अंतराल = (शुरू, अंत) = (1, 2) । दिए गए अंतराल बंद होत हंवय जेखर अर्थ हवय कि अंतराल (शुरू, अंत) में शुरुआत अउ अंत दुनो शामिल हंवय । प्रत्येक अंतराल बर, एहर माना जात हवय कि एखर शुरुआत एखर अंत के बराबर हवय। आपके काम एहर निर्धारित करना हवय कि ए दुनो अंतराल के चौराहे के लंबाई एक प्रमुख संख्या हवय या नी। उदाहरण बर, अंतराल (1, 3), (2, 4) के चौराहे (2, 3) हवय, जेखर लंबाई 1 हवय, जेहर एक प्रमुख संख्या नी हवय। यदि चौराहे के लंबाई एक प्रमुख संख्या हवय, तो ""हां"" लहुटान, अन्यथा ""नहीं"" लहुटान। यदि दुनो अंतराल चौराहे नी करत हंवय , तो ""नहीं"" लहुटान। [इनपुट / आउटपुट] नमूनेः चौराहे {(1, 2), (2, 3) ==> ""चौराहे-1, 1), ""नहीं"" = ""नहीं"", ""चौराहे"", ""नहीं"", ""नहीं"", ""5, ""3, 5"", ""हां"" = ""नहीं"" = ""हां""""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,hne_Deva,python,"
def prod_signs(arr):
    """"""आप ल पूर्णांक के एक सरणी दिए जात हवय अउ आप ल सरणी में प्रत्येक संख्या के जम्मो संकेतों के उत्पाद से गुणा पूर्णांक के परिणाम के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के मात्रा के""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,hne_Deva,python,"
def minPath(grid, k):
    """"""ग्रिड के प्रत्येक सेल में एक मान होत हवय। रेंज में हर पूर्णांक ग्रिड के कोशिकाओं में ठीक एक बार दिखाई देत हवय। आप काखरो घलो सेल ले शुरू कर सकत हंवय, अउ प्रत्येक चरण में आप पड़ोसी केशिकामन में ले काखरो घलो म जा सकत हंवय , दूसर शब्दों में, आप काखरो घलो पड़ोसी केशिकामन में ले जा सकत हंवय जेहर आपके वर्तमान केशिका के साथ एक किनारा साझा करत हंवय । कृपया ध्यान दें कि के लंबाई के पथ के मतलब हवय कि बिल्कुल के कोशिकाओं (जरूरी रूप ले अलग नी) का दौरा करना । आप ग्रिड ले बाहर नी जा सकत हंवय । एक पथ ए (लंबाई के) ल पथ बी (लंबाई के) ले कम माना जात हवय यदि ए अउ बी (लौ हम ओमनला एल ए अउ एल ए के माध्यम ले जाए वाले मानमन के क्रमबद्ध सूचियों के बाद), एल ए ले कम लेक्सिक रूप ले कम हवय , दूसर शब्दों में, एक पूर्णांक के साथ, आप वर्तमान केशिका के साथ कन्हु भी सेल ले जा सकत हंवय । उदाहरणः [ए, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल, एल,""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,hne_Deva,python,"
def tri(n):
    """"""हर कोई फाइबोनैचि अनुक्रम जानता हवय, एहरपिछले कुछ शताब्दियों में गणितज्ञों से गहराई ले अध्ययन करे गय रहिस। हालांकि, जो लोग नी जानते हंवय वह ट्राइबोनैचि अनुक्रम हवय। ट्राइबोनैचि अनुक्रम पुनरावृत्ति द्वारा परिभाषित करे जात हवय: tri(1) = 3 tri(n) = 1 + n / 2, यदि n सम हवय। tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), यदि n विषम हवय। उदाहरण बर: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 आप ल एक गैर-ऋणात्मक पूर्णांक संख्या n दी जात हवय, आप ल ट्राइबोनैचि अनुक्रम के पहली n + 1 संख्या के एक सूची वापस करना होत हवय। उदाहरणः tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,hne_Deva,python,"
def digits(n):
    """"""एक सकारात्मक पूर्णांक एन दिए गए, विषम अंकों के उत्पाद लौटाएं। 0 लौटाएं यदि सभी अंक सम हैं। उदाहरण बर: अंक (१) == 1 अंक (४) == 0 अंक (२३५) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,hne_Deva,python,"
def is_nested(string):
    '''एक फ़ंक्शन बनाएँ जेहर इनपुट के रूप में स्ट्रिंग लेता हवय जेमा केवल स्क्वायर ब्रैकेट होत हवय। फ़ंक्शन ल True लौटाए बर चाहि यदि अउ केवल यदि ब्रैकेट के एक वैध उप-अनुक्रम होत हवय जहां कम ले कम एक ब्रैकेट उप-अनुक्रम में घिरा होइस हवय। is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]]]]] â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,hne_Deva,python,"

def sum_squares(lst):
    """"""आप ल संख्याओं की एक सूची दी गइस हावे। आप ल दी गइस सूची में स्क्वायर संख्याओं के योग ल वापस करे की आवश्यकता हावे, पहली सूची में प्रत्येक तत्व ल ऊपर के इंक तक गोल करे की आवश्यकता हावे। उदाहरणः इंक = [1,2,3] आउटपुट 14 होना चाहि इंक = [1,4,9] आउटपुट 98 होना चाहि इंक = [1,3,5,7] आउटपुट 84 होना चाहि इंक = [1.4,4.2,0] आउटपुट 29 होना चाहि इंक = [-2.4,1,1] आउटपुट 6 होना चाहि """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,hne_Deva,python,"
def check_if_last_char_is_a_letter(txt):
    '''एक फ़ंक्शन बनाएँ जेहर वापस सत्य लहुटात हवय यदि दिए गए स्ट्रिंग के अंतिम चरित्र एक वर्णमाला चरित्र हवय अउ शब्द के हिस्सा नी हवय, अउ अन्यथा गलत हवय। नोटः ""शब्द"" वर्णों के एक समूह हवय जेहर जगह ले अलग हवय। उदाहरणः चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((""एप्पल पाई"") â -> फॉलस चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((एप्पल पाई ई"") â -> ट्रू चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((एप्पल पाई ई)) â -> फॉलस चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((("") â -> गलत '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,hne_Deva,python,"
def can_arrange(arr):
    """"""एक फ़ंक्शन बनाएँ जो एक तत्व के सबले बडखा सूचकांक ल वापस करत हवय जेहर एखर ले आघू के तत्व के बराबर या उससे ज्यादा नी होत हवय। यदि ए तरह के कोई तत्व मौजूद नी हवय तो -1 लौटाएं। दिए गए सरणी में डुप्लिकेट मान शामिल नी होही। उदाहरणः can_arrange (([1,2,4,3,5]) = 3 can_arrange ([1,2,3]) = -1 ।""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,hne_Deva,python,"
def largest_smallest_integers(lst):
    '''एक फ़ंक्शन बनाएँ जेहर एक टपल (ए, बी) ल वापस करत हवय, जहां 'ए' नकारात्मक पूर्णांक के सबले बडखा हवय, अउ 'बी' एक सूची में सकारात्मक पूर्णांक के सबले छोटे हवय। यदि कोई नकारात्मक या सकारात्मक पूर्णांक नी हवय, त ओमनला नो के रूप में लौटाएं। उदाहरणः सबले बडखा_सबसे छोटे_पूर्णांक[2, 4, 1, 3, 5, 7]) == (कोनो नी, 1) सबले बडखा_सबसे छोटे_पूर्णांक ({0}) == (कोनो नी, कोई नी) सबले बडखा_सबसे छोटे_पूर्णांक ({0}) == (कोनो नी, कोई नी) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,hne_Deva,python,"
def compare_one(a, b):
    """"""एक फ़ंक्शन बनाएँ जेहर पूर्णांक, फ्लोट्स, या स्ट्रिंग्स वास्तविक संख्यामन के प्रतिनिधित्व करत हवय, अउ अपन दिए गए चर प्रकार में बड़ा चर ल वापस करत हवय। यदि मान बराबर हंवय तो कोई घलो नी लहुटात हवय। नोट: यदि एक वास्तविक संख्या ल स्ट्रिंग के रूप में दर्शाया जात हवय, त फ्लोटिंग पॉइंट हो सकत हवय। या, तुलना_एक, 2.5) â -> 2.5 तुलना_एक, ""2,3"") â -> ""2,3"" तुलना_एक"", ""5,1"", ""6"") â -> ""6"" तुलना_एक, ""1, 1) â -> कोई नी """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,hne_Deva,python,"
def is_equal_to_sum_even(n):
    """"""मूल्यांकन करें कि दिए गए संख्या n के 4 सकारात्मक संख्याओं के योग के रूप में लिखा जा सकत हवय उदाहरण is_equal_to_sum_even ()) == झूठा is_equal_to_sum_even ()) == झूठा is_equal_to_sum_even ()) == सच """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,hne_Deva,python,"
def special_factorial(n):
    """"""ब्राजीलियाई फैक्टोरियल के रूप में परिभाषित करे गए हवय: ब्राजीलियाई_फैक्टोरियल ((एन) = एन! * (एन -1))! * (एन -2))! * ... * 1! जहां एन > 0 उदाहरण बर: >>> विशेष_फैक्टोरियल ((4) 288 फ़ंक्शन इनपुट के रूप में एक पूर्णांक प्राप्त करेगा अउ ए पूर्णांक के विशेष फैक्टोरियल लौटा देगा। """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,hne_Deva,python,"
def fix_spaces(text):
    """"""_उदाहरण-3दिए गए हवय, एमें जम्मो स्पेस ल अंडरस्कोर के साथ प्रतिस्थापित करव, अउ यदि स्ट्रिंग म 2 ले ज्यादा लगातार स्पेस हंवय , त फेर जम्मो लगातार स्पेस ल -fix_spaces के साथ प्रतिस्थापित करव (_उदाहरण) == ""उदाहरण"" fix_spaces (_उदाहरण1"") == ""उदाहरण1"" fix_spaces (_उदाहरण2"") == ""_उदाहरण2"" fix_spaces (_उदाहरण3"") == ""_उदाहरण-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,hne_Deva,python,"
def file_name_check(file_name):
    """"""एक फ़ंक्शन बनावव जऊन एक स्ट्रिंग ल फाइल के नाम के प्रतिनिधित्व करत हे, अऊ यदि फाइल के नाम वैध हे, त 'हां' ल वापिस करथे, अऊ आने मामला म 'नइं' ल वापिस करथे. फाइल के नाम ल वैध माने जाथे यदि अऊ सिरिफ़ तभे, जब ये जम्मो शर्त ल पूरा करे गे हे: - फाइल के नाम म तीन अंकों ले जादा ('0'-'9') नइ होना चाही. - फाइल के नाम म ठीके एक बिंदु '.' हे. - बिंदु के पहिली सबस्ट्रिंग खाली नइ होना चाही, अऊ ए ह लातीनी अल्फा के एक अक्षर ले सुरू होवय ('a'-'z' अऊ 'A'Z'). - बिंदु के पाछू सबस्ट्रिंग एमन ले एक होना चाही: ['txt', 'exe', 'lld'] उदाहरन: file_name_check""{example.txt.txt} # => 'हाँ' file_name_check""{example.txt.tll.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.t.txt.txt.t.txt.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,hne_Deva,python,"


def sum_squares(lst):
    """""""" ए फ़ंक्शन पूर्णांक के एक सूची लेही। सूची में जम्मो प्रविष्टियों बर, फ़ंक्शन पूर्णांक प्रविष्टि ल वर्ग करेगा यदि एखर सूचकांक 3 का एक गुणक हवय अउ पूर्णांक प्रविष्टि ल घन करेगा यदि एखर सूचकांक 4 का एक गुणक हवय अउ 3 का एक गुणक नी हवय। फ़ंक्शन सूची में प्रविष्टियों ल बदल नी देगा, जेखर सूचकांक 3 या 4 का एक गुणक नी हवय। फ़ंक्शन तब जम्मो प्रविष्टियों के योग ल लौटाही। उदाहरणः lst = [1,2,3] बर आउटपुट 6 होना चाहि lst = [] बर आउटपुट 0 होना चाहि lst = [-1, -5, 2, -1, -5] बर आउटपुट होना चाहि -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,hne_Deva,python,"
def words_in_sentence(sentence):
    """"""आप ल एक वाक्य के प्रतिनिधित्व करे वाली स्ट्रिंग दिए जात हवय , वाक्य में कुछु शब्द होत हवयं जेहर एकठन स्पेस से अलग होत हवयं, अउ आप ल एकठन स्ट्रिंग ल वापस करना होत हवय जेमा मूल वाक्य ले शब्द होत हवयं, जेखर लंबाई प्राइम नंबर होत हवय , नवा स्ट्रिंग म शब्दमन के क्रम मूल के समान होना चाहि। उदाहरण 1: इनपुटः वाक्य = ""एह एक परीक्षण हवय"" आउटपुटः ""एहर"" उदाहरण 2: इनपुटः वाक्य = ""लेट्स गो फॉर स्विमिंग"" आउटपुटः ""गो फॉर"" बाधाओं: * 1 <= len(सेंटेंस) <= 100 * वाक्य में केवल अक्षर होत हवयं """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,hne_Deva,python,"
def simplify(x, n):
    """"""आपके काम एक फ़ंक्शन लागू करना हवय जेहर अभिव्यक्ति के सरलीकृत करही एक्स * एन। फ़ंक्शन सत्य ल वापस करत हवय यदि एक्स * एन एक पूर्णांक के मूल्यांकन करत हवय अउ अन्यथा गलत हवय। दुनो एक्स अउ एन, एक अंश के स्ट्रिंग प्रतिनिधित्व हंवय, अउ निम्नलिखित प्रारूप, <न्यूमेरर> / <नोमिनर> जहां दुनो नुमरेटर अउ नामकरण सकारात्मक पूर्णांक हंवय । आप मान सकत हंवय कि एक्स, अउ एन मान्य अंश हंवय, अउ शून्य के रूप में नोमिनरेटर नी हंवय । सरलीकृत "" 1/5"", ""5/1"") = सच सरलीकृत "" 1/6"", ""2/1"") = गलत सरलीकृत "" 7/10"", ""10/2"") = गलत """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,hne_Deva,python,"
def order_by_points(nums):
    """"""एक फ़ंक्शन लिखें जेहर पूर्णांक के दिगित सूची के क्रमबद्ध करत हवय, ओमनके अंकों के योग के अनुसार। नोट: यदि ओमनके अंकों के समान योग के साथ कईठन आइटम हंवय, त ओमनल मूल सूची में अपन सूचकांक के आधार म क्रमबद्ध करव। उदाहरण बर: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points ([]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,hne_Deva,python,"
def specialFilter(nums):
    """"""एक फ़ंक्शन लिखें जेहर इनपुट के रूप में संख्याओं के एक सरणी लेता हवय अउ सरणी में तत्वों के संख्या ल वापस करत हवय जेहर 10 ले ज्यादा हंवय अउ संख्या के पहली अउ अंतिम अंकों दुनो विषम (1, 3, 5, 7, 9) हंवय । उदाहरण बर: विशेष फ़िल्टर (([15, -73, 14, -15]) => 1 विशेष फ़िल्टर (([33, -2, -3, 45, 21, 109]) => 2 ।""""""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,hne_Deva,python,"
def get_max_triples(n):
    """"""आप ल एक सकारात्मक पूर्णांक n दिए जात हवय। आप ल लंबाई के पूर्णांक सरणी बनाना होत हवय। प्रत्येक i (1 ‰¤ i ‰¤ n) बर, ए [आई] = आई * आई - आई + 1 के मूल्य। ए के ट्रिपल्स (ए [आई], ए [जे], ए [के]) के संख्या ल लौटाएं जहां आई < जे < के, अउ ए [आई] + ए [जे] + ए [के] 3 के गुणक हवय। उदाहरण: इनपुटः एन = 5 आउटपुटः 1 स्पष्टीकरणः ए = [1, 3, 7, 13, 21] एकमात्र वैध ट्रिपल (1, 7, 13) हवय।""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,hne_Deva,python,"
def bf(planet1, planet2):
    '''सौर मंडल म आठ ग्रह हे: सूर्य के सबले निकट बुध हे, अगला शुक्र हे, फेर पृथ्वी, मंगल, बृहस्पति, शनि, यूरेनस, नेपच्यून हे। एक फंक्शन लिखव जेमा ग्रह1 अउ ग्रह2 के स्ट्रिंग के रूप म दुनो ग्रह के नाम ले जाथे। फंक्शन ल एक टपल ल वापस करना चाहि जेमा सूर्य के निकटता के आधार म पदानुक्रमित ग्रहों के जम्मो ग्रह होत हंवय जेखर कक्षा ग्रह 1 के कक्षा अउ ग्रह 2 के कक्षा के बीच स्थित हवय। फंक्शन ल एक खाली टपल ल वापस करना चाहि यदि ग्रह 1 या ग्रह 2 सही ग्रह नाम नी होए। उदाहरण: bf ""{\\displaystyle bf""{\displaystyle bf} , ""{\\displaystyle bf} , ""{\\displaystyle bf} , ""{\\displaystyle b} , ""{\\displaystyle b} , ""{\\displaystyle b} , ""{\\displaystyle b} , ""{\\displaystyle b} , ""{\\displaystyle b} , ""{\\displaystyle b} , ""{\\displaystyle b} , ""{\\displaystyle b} , ""}'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,hne_Deva,python,"
def sorted_list_sum(lst):
    """"""एक फ़ंक्शन लिखें जेहर स्ट्रिंग्स के सूची ल पैरामीटर के रूप में स्वीकार करत हवय, स्ट्रिंग्स ल हटा देत हवय जेमा विषम लंबाई होत हवय, अउ एक सॉर्ट के साथ परिणामी सूची ल वापस करत हवय। सूची हमेशा स्ट्रिंग्स के एक सूची होत हवय अउ कभु संख्याओं के सरणी नी होत हवय, अउ एमा डुप्लिकेट हो सकत हवय। सूची के क्रम हर शब्द के लंबाई के अनुसार बढ़त होना चाहि, अउ आप ल ओ नियम से सॉर्ट के गइस सूची ल वापस करना चाहि। यदि दु शब्द के एक ही लंबाई हवय, तो सूची ल वर्णमाला क्रम में सॉर्ट करव। फ़ंक्शन ल सॉर्ट के क्रम में स्ट्रिंग्स के एक सूची ल वापस करना चाहि। आप मान सकत हंवय कि जम्मो शब्दों के एक ही लंबाई होही। उदाहरण बर: asserts_list_sort[""aa"", ""a"", ""aaa""]) [""aa""] => assert_list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,hne_Deva,python,"
def x_or_y(n, x, y):
    """"""एक सरल कार्यक्रम जेला एक्स के मूल्य ल लौटा देना चाहि यदि एन एक प्रमुख संख्या हवय अउ अन्यथा वाई के मूल्य ल लौटा देना चाहि। उदाहरणः एक्स_या_वाई बर {7, 34, 12) == 34 एक्स_या_वाई बर {15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,hne_Deva,python,"
def double_the_difference(lst):
    '''संख्याओं की एक सूची दी गइस हावे, उन संख्याओं के वर्गों के योग ल लौटाएं जो सूची में विषम हावें। नकारात्मक या पूर्णांक नी हावें उन संख्याओं को अनदेखा करें। डबल_द_फरक (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 डबल_द_फरक (([-1, -2, 0]) == 0 डबल_द_फरक (([9, -2]) == 81 डबल_द_फरक (([0]) == 0 यदि इनपुट सूची खाली हावे, तो 0 लौटाएं। '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,hne_Deva,python,"
def compare(game,guess):
    """"""मोर मानना हे कि हमन सबो ल वो भाव सुरता हे जब कोनो ल अब्बड़ दिन ले प्रतीक्षित घटना के नतीजा आखिर म पता चलथे। ओ समय आपके भावना अऊ बिचार ल जरूर नोट करे अऊ तुलना करे के जरूरत हे। तोर काम ए निर्धारित करना हे कि कोनो मनखे ह कतको मैच के नतीजा ल सही ढंग ले अनुमान लगाइस हे या नहीं। तोला दू ठन बराबर लम्बाई के स्कोर अऊ अनुमान के सरणी दे गे हे, जिहां हर इंडेक्स म एक मैच दिखथे। एक समान लम्बाई के सरणी ल वापिस कर दे, जऊन ह बताथे कि हर एक अनुमान कतका दूरिहा रहिस हे। यदि ओमन सही ढंग ले अनुमान लगाइस हे, त मान 0 हे, अऊ यदि नी, त मान ह अनुमान अऊ स्कोर के बीच निरपेक्ष अंतर हे। उदाहरण: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] तुलना[0,0,5,0,4],[0,4,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,hne_Deva,python,"
def Strongest_Extension(class_name, extensions):
    """"""आप ल एक वर्ग (एक स्ट्रिंग) अउ एक्सटेंशन के एक सूची के नाम दिस जाही। एक्सटेंशन के उपयोग वर्ग बर अतिरिक्त वर्ग लोड करे बर करे जाना हे। एक्सटेंशन के ताकत ए प्रकार हे: सीएपी ल एक्सटेंशन के नाम म अपरकेस अक्षर के संख्या, अऊ एसएम ल एक्सटेंशन के नाम म लोकरकेस अक्षर के संख्या, के ताकत अंश सीएपी - एसएम ले देहे जाथे. आप ल सबले मजबूत एक्सटेंशन ल ढूंढना चाहि अऊ ए प्रारूप म एक स्ट्रिंग ल वापिस करना चाहि: क्लासनाम.सबले मजबूत एक्सटेंशननाम. यदि एक ही ताकत के संग दु या दु ले जादा एक्सटेंशन हे, त आप ल सूची म पहिली आहर वाले ल चुनना चाहि. उदाहरण बर, यदि आप ल क्लास के रूप म ""स्लाइस"" अऊ एक्सटेंशन के एक सूची देहे जाथे: ['SEviviSliNGCes', 'Cheese', 'StuFfed'] त आप ल 'Slices.SEviSliNGCes' ल वापिस करना चाहि काबरकि 'SEviSliNGCes' 'mySliNGCes' (सबले मजबूत एक्सटेंशन हवय) ', उदाहरण बर 'AA' - '_Class' मजबूत एक्सटेंशन '_ (वर्ग: 'AA' = 'Strongest_class'); '{'}'}' बर मजबूत '{'}'}'""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,hne_Deva,python,"
def cycpattern_check(a , b):
    """"""आप ल 2 शब्द दिए जात हवय । आप ल वापस करे के जरूरत हवय यदि दूसर शब्द या एखर कन्हु घलो रोटेशन पहला शब्द में एक सबस्ट्रिंग हवय cycpattern_check{""abcd"",""abd"") => गलत cycpattern_check{""हैलो"",""ell"") => सच cycpattern_check{""व्हासअप"",""प्सस"") => गलत cycpattern_check{""अबाब"",""बा"") => सच cycpattern_check{""एफेफ"",""ईफ"") => गलत cycpattern_check{""हिमेंस"",""सिमेंस"") => सच """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,hne_Deva,python,"
def even_odd_count(num):
    """"""एक पूर्णांक दिए गए हवय, एक टपल ल वापस करत हवय जेमा क्रमशः सम अउ विषम अंकों के संख्या होत हवय। उदाहरण: यहां तक कि_ओड_काउंट(-12) ==> (1, 1) यहां तक कि_ओड_काउंट(123) ==> (1, 2) ।""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,hne_Deva,python,"
def int_to_mini_roman(number):
    """"""एक सकारात्मक पूर्णांक दिए गए, एखर रोमन अंकों के समकक्ष एक स्ट्रिंग के रूप में प्राप्त करव, अउ एला लोअरकेस में लौटाएं। प्रतिबंधः 1 <= संख्या <= 1000 उदाहरणः >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,hne_Deva,python,"
def right_angle_triangle(a, b, c):
    '''एक त्रिकोण के तीन किनारों के लंबाई ल देखते हुए। यदि तीन पक्ष एक समकोण त्रिभुज बनाते हावें तो सच लौटाएं, अन्यथा गलत। एक समकोण त्रिभुज एक त्रिभुज हावे जेमे एक कोण 90 डिग्री या 90 डिग्री हावे। उदाहरण: right_angle_triangle ((3, 4, 5) == सही right_angle_triangle ((1, 2, 3) == गलत '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,hne_Deva,python,"
def find_max(words):
    """"""एक फ़ंक्शन लिखें जेहर स्ट्रिंग के सूची ल स्वीकार करत हवय। सूची में कईठन शब्द होत हंवय । अद्वितीय वर्ण के अधिकतम संख्या के साथ शब्द ल लौटाएं। यदि कईठन स्ट्रिंग में अद्वितीय वर्ण के अधिकतम संख्या हवय, तो शब्दकोश के क्रम में पहला आहर वाला ल लौटाएं।""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,hne_Deva,python,"
def eat(number, need, remaining):
    """"""आप एक भूखे खरगोश हो, अउ आप पहीली ले ही एक निश्चित संख्या म गाजर खा चुके हो, लेकिन अब आप ल दिन के भोजन ल पूरा करे बर ज्यादा गाजर के खाए के जरूरत हे। आप ल एक सरणी ल वापस करना चाहि [आपके भोजन के बाद खाए गए गाजर के कुल संख्या, आपके भोजन के बाद बांचे गाजर के संख्या ] यदि पर्याप्त शेष गाजर नी हवय, त आप जम् मो शेष गाजर खाहू, लेकिन अभी भी भूखे होहू। उदाहरणः * खाओ (5, 6, 10) -> [11, 4] * खाओ (4, 8, 9) -> [12, 1] * खाओ (1, 10, 10) -> [11, 0] * खाओ (2, 11, 5) -> [7, 0] चरः @number: पूर्णांक संख्याः गाजर के संख्या आप खा चुके हावें। @need: पूर्णांक संख्याः गाजर के संख्या आप ल खाए के जरूरत हवय। @remaining: शेष संख्याः पूर्णांक संख्याः शेष गाजर के संख्या कन्स्ट्रैक्शन में मौजूद हवय: * 0 = <= 0 * 1000 <= 1000 * 0 = <= 1000 <= 1000 शेष संख्या मज़ाक होना चाहि <= 1000 = 1000 मज़ाक होना चाहिः""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,hne_Deva,python,"
def do_algebra(operator, operand):
    """"""ऑपरेटर अउ ऑपरेन्ड के दू सूची दिए गए हवय। पहली सूची में बुनियादी बीजगणित संचालन हवय, अउ दूसर सूची पूर्णांक के एक सूची हवय। बीजगणितीय अभिव्यक्ति के निर्माण बर दू दिखीस सूची के उपयोग करव अउ इ अभिव्यक्ति के मूल्यांकन ल वापस कर दव। बुनियादी बीजगणित संचालन: अतिरिक्त (+) घटाव (-)) गुणा (*) फर्श विभाजन (//) एक्सपोनेंशियल (**) उदाहरणः ऑपरेटर ['+', '*', '-'] सरणी = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोटः ऑपरेटर के सूची के लंबाई ओपरेंड सूची के लंबाई के बराबर हवय। ऑपरेंड गैर-ऋणात्मक पूर्णांक के एक सूची हवय। ऑपरेटर के कम ले कम एक ऑपरेटर सूची हवय, अउ ऑपरेंड सूची में कम ले कम दु ऑपरेंड हवय। """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,hne_Deva,python,"
def solve(s):
    """"""आप ल एक स्ट्रिंग एस दिए जात हवय। यदि एस एक अक्षर हवय, तो अपन केस ल निचले ले ऊपरी या विसे वर्सा म उलट दें, अन्यथा एला एला ही रखें। यदि स्ट्रिंग म कोई अक्षर नी हवय, तो स्ट्रिंग ल उल्टा कर दें। फ़ंक्शन ल परिणामी स्ट्रिंग ल लौटा देना चाहि। उदाहरण हल करना ((""1234"") = ""4321"" हल करना ((""ab"") = ""एबी"" हल करना ((""# ए @ सी"") = ""# ए @ सी"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,hne_Deva,python,"
def string_to_md5(text):
    """"""एक स्ट्रिंग 'टेक्स्ट' दिए गए, एखर एमडी 5 हैश समकक्ष स्ट्रिंग ल लौटाव। यदि 'टेक्स्ट' एक खाली स्ट्रिंग हवय, त लौटाविस कोई नी। >>> string_to_md5('हेलो दुनिया') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,hne_Deva,python,"
def generate_integers(a, b):
    """"""दू सकारात्मक पूर्णांक ए अउ बी दिए गए, ए अउ बी के बीच घलो अंकों के वापसी, उदाहरण बर: उत्पन्न_पूर्णांक (२, ८) => [२, ४, ६, ८] उत्पन्न_पूर्णांक (८, २) => [२, ४, ६, ८] उत्पन्न_पूर्णांक (१०, १४) => []""""""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
