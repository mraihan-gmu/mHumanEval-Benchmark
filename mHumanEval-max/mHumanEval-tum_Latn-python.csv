task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,tum_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Wona usange mu mazina gha nambara, pali nambara ziŵiri izo zili pafupi na yimoza kuluska nambara ya thero.""""""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,tum_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Chizindikiro cha ntchito iyi ndi chingwe chomwe chili ndi magulu angapo a ma parentheses. Cholinga chanu ndicho kupatula gululi kukhala zingwe zosiyana ndikubwezera mndandanda wa iwo. Magulu osiyana ali oyenera (chigawo chilichonse chotseguka chatsekedwa bwino) ndipo sichidaphatikizana wina ndi mnzake Samalani malo aliwonse mu chingwe cholembera. Chitsanzo: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ' ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,tum_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Para pali nambala ya floating point iyo yikukhala ya positive, yingagaŵikana na kuŵa integer (chinthu icho chikulu chomene icho ntchichoko chomene kuluska nambala iyo yilipo) na decimals (chinthu icho chikhalako icho ntchichoko chomene kuluska 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,tum_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Mukupika ndondomeko ya ndalama izo mukubwezga ku banki ndipo zikuyamba na zero. Ntchito yinu nkhumanya usange pali nyengo iyo ndalama izo mukubwezga zikuwa pasi pa zero, ndipo pa nyengo iyo ntchito yikwenera kuwelera True.""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,tum_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Kuti mupeze chiwerengero cha manambala, muwerenge Mean Absolute Deviation kuzungulira chiŵerengero cha deta iyi. Mean Absolute Deviation ndi kusiyana kwapakati pakati pa chinthu chilichonse ndi pakati (pakati pa nkhaniyi): MAD = average █ x - x_mean █ Chitsanzo: >>> mean_absolute_deviation █ [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,tum_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Ikani nambala ya 'delimeter' pakati pa zigawo ziwiri zotsatizana za mndandanda wa input `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,tum_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Chiwerengero cha magulu a ma parentheses omwe ali pakati pawo ndi ma spaces. Kwa gulu lirilonse, lembani chiwerengero cha ma parentheses omwe ali pakati pawo. Mwachitsanzo, (() (()) ili ndi ma parentheses awiri pomwe ((())) ili ndi atatu.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,tum_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter input list of strings only for those that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,tum_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Kuti musange ma integers, lembani chigaŵa icho chili na ma integers ghose agho ghali mu ndondomeko.""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,tum_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Kuchokera pa mndandanda wa manambala, pangani mndandanda wa zigawo zazikulu kwambiri zomwe zimapezeka mpaka mphindi yomwe ikugwirizana. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,tum_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Sangani palindrome yafupi chomene iyo yikwamba na chingwe icho chapelekeka. Lingaliro la algorithm ndilupusu: - Sangani postfix yautali chomene ya chingwe icho chapelekeka icho ndi palindrome. - Ikani ku umaliro wa chingwe chakusintha kwa chilembo cha chingwe icho chikwiza pambere palindromic suffix. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Yesani usange ntheula ntheula ni palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,tum_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Kulemba ni ma string ghaŵiri a na b agho ghali na ma 1 na ma 0. Kulemba ma binary XOR pa ma input agha ndipo kuweleraso na ma string.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,tum_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Pa ndandanda ya ma string, muwezgerenge ndandanda ya ma string ghatali chomene. Muwezgerenge ndandanda ya ma string ghatali chomene. Muwezgerenge ndandanda ya ma string ghatali chomene. Muwezgerenge ndandanda ya ma string ghatali chomene yayi.""""""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,tum_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Kubwerera lalikulu kwambiri wamba wogawira awiri integers a ndi b >>> lalikulu kwambiri_common_divisor ((3, 5) 1 >>> lalikulu kwambiri_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,tum_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Kuwerengera kwa ma prefix onse kuchokera pafupi mpaka lalitali la chingwe cha input >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,tum_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Kuwerengera kwa chiwerengero cha manambala kuyambira pa 0 mpaka n.""""""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,tum_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Kuwona nambala ya mazina, fumani kuti ni zinandi wuli (kwambura kupwelerako kuti ni case) izo zili na >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,tum_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Kulemba kwa ntchito iyi ni chingwe icho chikwimira manotsi gha sumu mu mtundu wapadera wa ASCII. Ntchito yinu nkhusanda chingwe cha manotsi gha ma integer agho ghakukolerana na viyezgo vinandi. Apa pali mazgu ghakuti: 'o' note, lasts four beats 'o""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,tum_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Fufuzani kuti zingati zingwe zing'onozing'ono zomwe zilipo mu chingwe choyambirira. Kuwerengera milandu yophimbana. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,tum_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Chiwerengero cha manambala kuyambira pa zero mpaka pa 9. Zosankha zake ndi zero, chimodzi, ziwiri, zitatu, zinayi, zisanu, zisanu ndi chimodzi, zisanu ndi ziwiri, zisanu ndi zitatu ndi zisanu ndi zinayi.""""""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,tum_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Kuchokera pa mndandanda wa manambala (autali osachepera awiri) sankhani ndi kubwezera awiri omwe ali pafupi kwambiri ndipo mubwerere iwo mu dongosolo (chiwerengero chaching'ono, chiwerengero chachikulu). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,tum_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Para mwawona mazina gha vigaŵa viŵiri, lembani chigaŵa icho chiŵenge chigaŵa cha nambala yimoza, ndipo chigaŵa icho chiŵenge chigaŵa cha nambala yimoza.""""""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,tum_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,tum_Latn,python,"

def strlen(string: str) -> int:
    """"""Kuwererapo kutalika kwa chingwe choperekedwa >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,tum_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Kuti tipeze chiwerengero n, tipeze chiŵerengero chachikulu chomwe chimagawa n mofanana, chocheperapo n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,tum_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Chiwerengero cha zinthu zoyambirira za chiwerengero choperekedwacho kuchokera pa chochepa mpaka chachikulu. Chiwerengero chilichonse chiyenera kulembedwa kangapo chomwe chikufanana ndi kangati chomwe chikuwonekera mu factorization. Chiwerengero cholembera chiyenera kukhala chofanana ndi chiŵerengero cha zinthu zonse >>> factorization ((8) [2, 2, 2] >>> factorization ((25) [5, 5] >>> factorization ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,tum_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Kuchokera pa mndandanda wa integer, chotsani zinthu zonse zomwe zikuchitika kangapo. Sungani dongosolo la zinthu zomwe zatsalira mofanana ndi zomwe zili muzolemba. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,tum_Latn,python,"

def flip_case(string: str) -> str:
    """"""Kuti muthe kulemba chinthu chinyake, lembani kuti ""hello"" (Moni) ndipo ""hello"" (Moni) na ""hello"" (Moni) ndipo lembani kuti ""hello"" (Moni) na ""hello"" (Moni)""""""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,tum_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,tum_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter input list of strings only for those that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,tum_Latn,python,"

def get_positive(l: list):
    """"""Yikuwezga waka ma nambala ghakukwana mu ndandanda. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,tum_Latn,python,"

def is_prime(n):
    """"""Kuwereraso ku true usange nambala iyo yapelekeka njakuzirwa, ndipo false usange njakuzirwa yayi. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,tum_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ni coefficients ya polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. Kweniso, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. >>> round(find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Kuwerengera polynomial ndi coefficients xs pa mfundo x. kubwerera xs[0] + xs[1] * x + xs[1] * x ^ 2 + .... xs[n] * x ^ n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,tum_Latn,python,"

def sort_third(l: list):
    """"""Ntchito iyi yikupoka l ndipo yikuwezga l' mwakuti l' yikuyana na l mu vilembo ivyo vikuleka kugawa na citatu, apo vilembo ivyo vikugaŵikana na citatu vikuyana na vilembo ivyo vikuyana na l, kweni vikusankika. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,tum_Latn,python,"

def unique(l: list):
    """"""Kubwezera zinthu zapadera zoyikika mu mndandanda >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,tum_Latn,python,"

def max_element(l: list):
    """"""Yikuwezga chinthu icho chili na mazina gha ŵanthu ŵanandi.""""""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,tum_Latn,python,"

def fizz_buzz(n: int):
    """"""Bwererani chiwerengero cha nthawi manambala 7 zikuoneka mu integers zosakwana n amene kugawa ndi 11 kapena 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,tum_Latn,python,"

def sort_even(l: list):
    """"""Ntchito iyi yikupoka mazina gha l ndipo yikuwezga mazina gha l' mwakuti l' liyana na l mu maindices gha l, apo maindices gha l gha pa indices gha l ghakuyana na maindices gha l, kweni ghakupangika. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,tum_Latn,python,"

def encode_cyclic(s: str):
    """"""imagwira ngati chingwe cholembera cholembedwa ndi encode_cyclic function. Imabweza chingwe cholembera.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""likubwezga chikhomo cha malembo pa magulu gha malembo ghatatu.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,tum_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib yikuwezga n-th nambala iyo ni nambala ya Fibonacci ndipo nayo ni prime. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,tum_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero imagwira ntchito ngati mndandanda wa manambala. imabwezera True ngati pali zinthu zitatu zosiyana mu mndandanda womwe umawonjezera zero, ndipo False apo ayi. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,tum_Latn,python,"

def car_race_collision(n: int):
    """"""Tiyelezgere kuti pali msewu uwo uli na msewu utali chomene. Galimoto n zikwenda kufuma kumazere kuya kumalyero; nyengo yeneyiyo, pali magalimoto ghanyake n agho ghakwenda kufuma kumazere kuya kumalyero. Magudumu ghaŵiri agha ghakwamba kufuma kutali comene. Magalimoto ghose ghakwenda pa liwiro limoza. Galimoto ziŵiri zikugundana para galimoto iyo yikwenda kufuma kumazere kuya kumalyero yikupwetekeka na galimoto iyo yikwenda kufuma kumalyero kuya kumazere. Kweni, magalimoto agha ngakukhora chomene; ntheura ghakulutilira kwenda nga ni para ghandakumane.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,tum_Latn,python,"

def incr_list(l: list):
    """"""Kuwererapo mndandanda ndi zinthu incremented ndi 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,tum_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero imagwira ntchito ngati mndandanda wa manambala. imabwezera True ngati pali zinthu ziwiri zosiyana mu mndandanda womwe umawonjezera zero, ndipo False apo ayi. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,tum_Latn,python,"

def change_base(x: int, base: int):
    """"""Sinthani chiwerengero cha chiwerengero cha x ku chiwerengero. kubwerera ku chiwerengero cha chingwe pambuyo pa kutembenuka. manambala a maziko ndi ochepera 10. >>> kusintha_maziko(8, 3) '22' >>> kusintha_maziko(8, 2) '1000' >>> kusintha_maziko(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,tum_Latn,python,"

def triangle_area(a, h):
    """"""Para tili na utali wa chigaŵa chimoza na malo ghakukwelera ghakuru gha makona ghatatu. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,tum_Latn,python,"

def fib4(n: int):
    """"""Chiwerengero cha nambala ya Fib4 ndi chiŵerengero chofanana ndi chiŵerengero cha Fibbonacci chomwe chimatanthauzidwa motere: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Chonde lembani ntchito kuti muwerenge bwino n-th element ya chiwerengero cha nambala ya fib4. Musagwiritse ntchito kubwereza. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,tum_Latn,python,"

def median(l: list):
    """"""Chiwerengero cha zinthu zomwe zili m'ndandanda l. >>> chiŵerengero chapakati (([3, 1, 2, 4, 5]) 3 >>> chiŵerengero chapakati (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,tum_Latn,python,"

def is_palindrome(text: str):
    """"""Chikuwona usange chingwe icho chapelekeka ni palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,tum_Latn,python,"

def modp(n: int, p: int):
    """"""Kuwereraso 2^n modulo p (kumbukirani manambara). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,tum_Latn,python,"

def encode_shift(s: str):
    """"""imagwira ngati chingwe cholembera cholembedwa ndi encode_shift function. Imabweza chingwe cholembera. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""likuwezga chikhomo cha chikhomo ichi mwa kusinthiska chikhomo chilichose na 5 mu alufabeti.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,tum_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ni ntchito iyo yikupoka string na kuweleramo string yambura ma vowels. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,tum_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Kuwereraso True ngati manambala onse mu mndandanda l ali pansi pa threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,tum_Latn,python,"

def add(x: int, y: int):
    """"""Tiwonge nambara ziŵiri x na y, tiŵikenge 2 pa 3 na 5 pa 12""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,tum_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Wona usange mazgu ghaŵiri ghali na vilembo vyakuyana. >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars('abcd', 'dddddddabc') True >>> same_chars('dddddddabc', 'abcd') True >>> same_chars('eabcd', 'dddddddabc') False >>> same_chars('abcd', 'dddddddabc') False >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,tum_Latn,python,"

def fib(n: int):
    """"""Yikuwezga n-th nambala ya Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,tum_Latn,python,"

def correct_bracketing(brackets: str):
    """"""Para pali vilembo vyakukwana, vilembo vyose ivyo vili mu vilembo ivi vikuŵa na vilembo vyakukwana.""""""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,tum_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonically (([1, 2, 4, 20]) True >>> monotonically (([1, 20, 4, 10]) False >>> monotonically (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,tum_Latn,python,"

def common(l1: list, l2: list):
    """"""Kuwereraso ku vinthu ivyo vili na vigaŵa viŵiri. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,tum_Latn,python,"

def largest_prime_factor(n: int):
    """"""Yizamuwezga chinthu chikuru chomene icho chikuyana na n. Tiyelezgere kuti n > 1 ndipo ni prime yayi. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,tum_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ni fundo iyo yikusazga nambala kufuma pa 1 mpaka n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,tum_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ni ""("" na "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""())) True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,tum_Latn,python,"

def derivative(xs: list):
    """"""xs yikwimira coefficients ya polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,tum_Latn,python,"

def fibfib(n: int):
    """"""Chiwerengero cha chiwerengero cha FibFib ndi chiŵerengero chofanana ndi chiwerengero cha Fibbonacci chomwe chimatanthauzidwa motere: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Chonde lembani ntchito kuti muwerenge bwino n-th element ya chiwerengero cha chiwerengero cha fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,tum_Latn,python,"
FIX = """"""Lembani ntchito ya vowels_count iyo yikupoka chilembo icho chikuyimira lizgu ndipo yikuwezga chiŵerengero cha mavowel mu chilembo ichi. Mavowel mu chilembo ichi ni 'a', 'e', 'i', 'o', 'u'. Apa, 'y' nayo ni vowel, kweni para yili ku umaliro wa chilembo ichi. Chiyelezgero: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Ŵazgani nkhani zinyake. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,tum_Latn,python,"
def circular_shift(x, shift):
    """"""Kuzungulira kusuntha manambala a integer x, kusuntha manambala kumanja ndi kusuntha ndi kubwerera chifukwa monga chingwe. Ngati kusuntha > chiwerengero cha manambala, kubwerera manambala reversed. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,tum_Latn,python,"
def digitSum(s):
    """"""Ntchito Lembani ntchito iyo yikupokera chingwe nga ni input ndipo yikuwezga sum of the upper characters only' ASCII codes.""""""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,tum_Latn,python,"
def fruit_distribution(s,n):
    """"""Mu ntchito iyi, mupelekenge chingwe icho chikulongora unandi wa maapulo na malalanje agho ghagaŵikikenge mu chitete cha vipasi icho chili na maapulo, malalanje, na vipasi vya mango. Para mungatora chingwe icho chikulongora unandi wa malalanje na maapulo na chiŵelengero chose icho chikulongora unandi wa vipasi mu chitete, mukuwezga chiŵelengero cha vipasi vya mango mu chitete.""""""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,tum_Latn,python,"
def pluck(arr):
    """"""""Pakupika array iyo yikwimira nthambi ya khuni ilo lili na non-negative integer nodes ntchito yinu nkhutora limoza la ma node na kuwelerapo. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [smallest_value, its index ], If there are no even values or the given array is empty, return []. Example1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index. Example2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest even index. Example3: Input: [] Output: [4:] Input: [5, 3, 4, 2] Output: [0, 0] Output: 1 node that has smallest index. The plucked node should be returned in a list, [smallest_value, its index] If there are no even values or the given array is empty, return []. Example1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,tum_Latn,python,"
def search(lst):
    '''Mukupika mazina gha ma integers ghakukwana yayi. Muwelerenge pa nambala ya zero, ndipo kanandi yikwamba na nambala ya zero. Kanandi yikwamba na nambala ya zero. Usange palije nambala iyi, muwelerenge pa -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,tum_Latn,python,"
def strange_sort_list(lst):
    '''Para wapika mazina gha ma integers, wawelerenge mazina gha ma integers mu ndondomeko ya vipepeso. Kulemba vipepeso ni para ukwamba na chipepeso cha ma integers agho ghakhalako, ndipo kufuma apo, na chipepeso cha ma integers agho ghakhalako, ndipo kufuma apo, na chipepeso cha ma integers agho ghakhalako.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,tum_Latn,python,"
def triangle_area(a, b, c):
    '''Kuwona utali wa vipande vitatu vya kawonekero ka katatu. Kuwererapo chigaŵa cha kawonekero ka katatu ka kawonekero ka kawonekero ka katatu ka kawonekero ka katatu ka kawonekero ka katatu ka kawonekero ka katatu ka kawonekero ka katatu ka kawonekero ka katatu ka kawonekero ka katatu ka kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu ka kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu ka kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero ka katatu kawonekero kachitatu kawonekero kachitatu kawonekero kachitatu kawonekero kachitatu kawonekero kachitatu kawonekero kachitatu kachitatu kawonekero kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu kachitatu'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,tum_Latn,python,"
def will_it_fly(q,w):
    '''Lembani ntchito iyo yikuwezga True usange chinthu q chizamukwera, ndipo False usange chikwera. Chinthu q chizamukwera usange chili na ndodo (ndipo ni ndodo ya palindromic) ndipo chiŵelengero cha vinthu vyake ntchichoko panji chikuyana na uzito w. Chiyelezgelo: will_it_fly([1, 2], 5) â -> False # 1+2 ni muchoko ku uzito wukulu, kweni nchakusuzga. will_it_fly([3, 2, 3], 1) â -> False # ni ndodo, kweni 3+2+3 ni zinandi ku uzito wukulu. will_it_fly[3, 2, 3], 9) â -> True # 3+23 ni zinandi ku uzito wukulu, ndipo nchakusuzga. will_it_fly([3], â 5) -> True # 3 ni muchoko ku uzito wukulu, kweni nchakusuzga.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,tum_Latn,python,"
def smallest_change(arr):
    """"""Para pali array ya ma integer, fumani chiŵerengero cha vigaŵa ivyo vikukhumbikwa kuti musinthe kuti mupangiske array iyi kuŵa palindromic.""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,tum_Latn,python,"
def total_match(lst1, lst2):
    '''Lembani ntchito yomwe imavomereza mndandanda wa zingwe ziwiri ndipo imabwerera mndandanda womwe uli ndi chiwerengero cha zilembo mu mndandanda wa mndandanda wa mndandanda kuposa mndandanda wina. ngati mndandandawu uli ndi chiwerengero chofanana cha zilembo, mubwerere mndandanda woyamba. Zitsanzo total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4'], '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,tum_Latn,python,"
def is_multiply_prime(a):
    """"""Lembani ntchito iyo yikuwelera unenesko usange nambara iyo yapelekeka ni kupandanya kwa nambara yakwamba 3 ndipo utesi usange nambara iyi njakupandanya kwa nambara yakwamba 3 ndipo utesi para nambara iyi njakupandanya kwa nambara yakwamba 3 ndipo utesi para nambara iyi njakupandanya kwa nambara yakwamba 3 ndipo utesi para nambara iyi njakupandanya kwa nambara yakwamba 3 ndipo utesi para nambara iyi njakupandanya kwa nambara yakwamba 3 ndipo utesi para nambara iyi njakupandanya kwa nambara yakwamba 3""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,tum_Latn,python,"
def is_simple_power(x, n):
    """"""Ntchito yinu nkhulemba ntchito iyo yikuweleramo unenesko usange nambala x ni n ndipo utesi mu vigaŵa vinyake. x ni nthenda ya n usange n**int=x Mwachiyelezgero: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,tum_Latn,python,"
def iscube(a):
    '''Lembani ntchito iyo yikupoka integer a ndipo yikuwezga True usange ingeger iyi ni cube ya nambala yose.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,tum_Latn,python,"
def hex_key(num):
    """"""Mwapempheka kulemba ntchito iyo yikupokera nambala ya hexadecimal nga ni chingwe ndipo yikuŵerenga unandi wa manambara gha hexadecimal agho ni maprime (namba ya prime, panji prime, ni nambala yaciŵaro yikuru kuluska 1 iyo njakupangika kufuma ku manambara ghaciŵaro ghacoko ghaciŵiri). Manambara gha hexadecimal ni 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Manambara gha prime ni 2, 3, 5, 7, 11, 13, 17,... Ntheura mukwenera kumanya unandi wa manambara agha: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13).""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,tum_Latn,python,"
def decimal_to_binary(decimal):
    """"""Muzamupelekeka nambara ya decimal ndipo mulimo winu nkhuyizgaso kuŵa ya binary. Fonkha iyi yikwenera kuweleramo chingwe, ndipo chilembo chilichose chikwimira binary number. Chilembo chilichose mu chingwe chiŵenge '0' panji '1'. Pazamukhala vilembo vinyake 'db' pakwamba na paumaliro wa chingwe. Vilembo vinyake ivi vikovwira pa fomati.""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,tum_Latn,python,"
def is_happy(s):
    """"""Mukupika chingwe s. Ntchito yinu nkusanda usange chingwe ntchakukondwa panji yayi. Chingwe ntchakukondwa usange utali wake ngwakuti 3 ndipo malembo ghose 3 ghakudemelera ghalipambana. Mwachiyelezgero: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,tum_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ndi sabata yaumaliro ya semester ndipo asambizgi ŵakwenera kupeleka viyeso ku ŵana. Asambizgi ŵali kupanga nthowa yawo yakupelekera viyeso. Suzgo likaŵa lakuti ŵali kutaya nthowa iyo ŵakagwiliskiranga ntchito pakupeleka viyeso. Ŵakupani viyeso vya ŵana ŵanyake ndipo mukwenera kulemba nthowa iyo yingapangiska kuti muŵe na viyeso vya viyeso vya ŵana ŵanyake.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,tum_Latn,python,"
def prime_length(string):
    """"""Lembani ntchito iyo yikupoka chingwe ndipo yikuwezga unenesko usange utali wa chingwe ni nambara yakwamba panji utesi usange ni nambara yayi viyelezgero prime_length('Hello') == True prime_length('abcdcba') == True prime_length('kittens') == True prime_length('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,tum_Latn,python,"
def starts_one_ends(n):
    """"""Kupeleka nambala ya n, lembani nambala ya n-digit positive integers izo zikuyamba na 1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,tum_Latn,python,"
def solve(N):
    """"""Para pali nambala ya N, lembani chiŵelengero cha manambara gha N mu binary. Chiyelezgero Para N = 1000, chiŵelengero cha manambara chiŵenge 1 ndipo chiŵelengero cha ""1"" chiŵenge ""2"" Para N = 150, chiŵelengero cha manambara chiŵenge 6 ndipo chiŵelengero cha ""110"" chiŵenge ""2"" Para N = 147, chiŵelengero cha manambara chiŵenge 12 ndipo chiŵelengero cha ""1100"" chiŵenge ""2"" Variables: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Chiŵelengero cha binary number """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,tum_Latn,python,"
def add(lst):
    """"""Para pali ma integers ghambura kuzgeŵa lst, yandaniso ma integers agho ghali pa ma index gha ma odd.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,tum_Latn,python,"
def anti_shuffle(s):
    """"""Lembani ntchito iyo yikupoka chingwe na kuweleramo mazgu agho ghali na ndondomeko. Chingwe icho chili na ndondomeko, ni chingwe icho mazgu ghose (ghakupatulika na malo) ghakusinthika na lizgu linyake ilo vilembo vyose vili na ndondomeko yakukwera kwakuyana na mtengo wa ascii. Manyani: Mukwenera kusunga ndondomeko ya mazgu na malo ghambura kanthu mu sentesi. Mwachiyelezgero: anti_shuffle ((('Hi') wakuweleramo 'Hi' anti_shuffle ((('hello') wakuweleramo 'ehllo' anti_shuffle (('Hello World!!!') wakuweleramo 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,tum_Latn,python,"
def get_row(lst, x):
    """"""Mukupika 2 dimensional data, nga ni ma lists, iyo yikuyana na matrix, kweni, mwakupambana na matrix, row yiliyose yingaŵa na ma column ghakupambana. Kupeleka lst, na integer x, sangani ma integers x mu list, ndipo muwezgere list of tuples, [(x1, y1), (x2, y2) ...] mwakuti tuple yiliyose yiŵe coordinate - (row, columns), starting with 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,tum_Latn,python,"
def sort_array(array):
    """"""Para mwawona kuti pali viyuni vyakupambanapambana, mupelekenge viyuni vyakupambanapambana mu ndondomeko yakukwera usange chiŵerengero cha viyuni vyakupambanapambana chili cha (chiŵerengero cha viyuni vyakupambanapambana) panji mu ndondomeko yakukwera usange chiŵerengero cha viyuni vyakupambanapambana chili cha (chiŵerengero cha viyuni vyakupambanapambana).""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,tum_Latn,python,"
def encrypt(s):
    """"""Pangani ntchito ya encrypt iyo yikupoka chingwe nga ni fundo ndipo yikuwezga chingwe icho chalembeka na alufabeti iyo yikubenekelereka. Alufabeti yikwenera kuwelereka mwakuti makalata ghawelerenge pasi na kuŵikikikaso pa malo ghaŵiri. Mwachiyelezgero: encrypt (('hi') yikuwezga 'lm' encrypt (('asdfghjkl') yikuwezga 'ewhjklnop' encrypt (('gf') yikuwezga 'kj' encrypt (('et') yikuwezga 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,tum_Latn,python,"
def next_smallest(lst):
    """"""Muli na mazina gha ma integers. Lembani function next_smallest() iyo yikuwezga chigaŵa cha 2 icho chili na chigaŵa chichoko chomene.""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,tum_Latn,python,"
def is_bored(S):
    """"""Para mwalemba mazgu agho ghakumara, muŵerenge unandi wa mazgu agho ghaŵapo. Mazgu agho ghakumara ni mazgu agho ghakwamba na lizgu lakuti ""I"". Mazgu agha ghakumara na '.', '?' panji '!'. Mwachiyelezgero: >>> is_bored(""Hello world"") 0 >>> is_bored(""The sky is blue. The sun is shining. I love this weather"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,tum_Latn,python,"
def any_int(x, y, z):
    '''Pangani ntchito iyo yikupoka manambara ghatatu. Yikuwezga unenesko usange limoza mwa manambara ghakaŵa ghakuyana na ma summation gha manambara ghaŵiri, ndipo manambara ghose ni integer. Yikuwezga utesi mu vigaŵa vyose. Viyerezgero any_int{5, 2, 7) â -> True any_int{3, 2, 2) â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,tum_Latn,python,"
def encode(message):
    """"""Lembani ntchito iyo yikupoka uthenga, na kuwukhomela mu nthowa iyo yikusintha malembo ghose, na kuŵikamo ma vowel ghose mu uthenga na kalata iyo yikuwoneka malo ghaŵiri kumanyuma kwa vowel mu chilembo cha chi English.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,tum_Latn,python,"

def skjkasdkd(lst):
    """"""Mukupika mazina gha ma integers. Mukwenera kusanga chiŵerengero cha ma prime ndipo mukuwezgerapo sum of its digits. Viyerezgero: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output should be 10 For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] output should be 25 For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output should be 13 For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output should be 11 For lst = [0,81,12,3,21,1] output should be 3 For lst = [0,1,8,2,1,7] the output should be """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,tum_Latn,python,"
def check_dict_case(dict):
    """"""Para pali dikishonare, yikusangaso True usange makiyi ghose ni malemba gha vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vi vilembo vya vilembo vya vi vilembo vya vilembo vya vi vi vilembo vya vilembo vya vilembo vya vi vi vi vi vilembo vya vi vi vi vi vi vi vilembo vya vilembo vya vi vi vi vi vi vi vi vi vi vi vi vi vi vi vi vi vilembo vya vi vilembo vya vi vi vi vi vi vi vi vi vi vi vi vilembo vya vi vi vi vi vi vi vi vi vi vi vi vi vi vi vi vi vilembo vi vi vi vi vi""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,tum_Latn,python,"
def count_up_to(n):
    """"""Kuchita ntchito iyo yikupoka nambala yose iyo njambura kughanaghana ndipo yikuwezga n nambala zose izo ni nambala zakwamba ndipo ni zakucepa kuluska n. Mwaciyelezgero: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,tum_Latn,python,"
def multiply(a, b):
    """"""Lembani ntchito iyo yikupoka ma integers ghaŵiri na kuweleramo product of their unit digits. Tiyelezgere kuti input yilikugwira ntchito nyengo zose.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,tum_Latn,python,"
def count_upper(s):
    """"""Para tapika string s, tiŵerengenge vilembo vya vowel mu ma index gha even. Mwachiyelezgero: count_upper (('aBCdEf') yikuwezga 1 count_upper (('abcdefg') yikuwezga 0 count_upper (('dBBE') yikuwezga 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,tum_Latn,python,"
def closest_integer(value):
    '''Pangani ntchito iyo yikupoka mtengo (string) wakwimira nambara ndipo yikuwezga nambara iyo yili pafupi nayo. Usange nambara yili pafupi na nambara ziŵiri, yikung'anamula kufuma pa zero. Viyerezgero >>> nearest_integer (((""10"") 10 >>> nearest_integer ((""15.3"") 15 Note: Kukung'anamula kufuma pa zero kukung'anamula kuti usange nambara iyo yapelekeka yili pafupi na nambara ziŵiri, iyo yikwenera kuweleramo njumoza uyo wali kutali na zero.'''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,tum_Latn,python,"
def make_a_pile(n):
    """"""Para pali nambala ya n, mukwenera kupanga libwe la malibwe ghakukwana n. Pa libwe lakwamba pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe lachiŵiri pali malibwe ghakukwana n. Pa libwe ili pali malibwe ghakukwana n.""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,tum_Latn,python,"
def words_string(s):
    """"""Mukupika mazgu agho ghagaŵikana na macomma panji malo. Ntchito yinu njakuti mugawike mazgu agho muŵe mazgu na kuweleramo mazgu agho ghagaŵikana. Mwachiyelezgero: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,tum_Latn,python,"
def choose_num(x, y):
    """"""Ntchitoyi imatenga manambala awiri abwino x ndi y ndipo imabweza chiwerengero chachikulu chomwe chili mkati mwa [x, y] kuphatikiza. Ngati palibe nambala yotere, ndiye kuti ntchitoyo iyenera kubwerera -1. Mwachitsanzo: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,tum_Latn,python,"
def rounded_avg(n, m):
    """"""Mukupika n na m, ndipo ntchito yinu nkhupima avareji ya ma integer kufuma pa n mpaka m (kuphatikizapo n na m). Mukwenera kupima na kuwelera ku nambala ya binary. Para n yikuluska m, mukuwelera ku -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,tum_Latn,python,"
def unique_digits(x):
    """"""Para tapika mazina gha ma integers gha x, tikuwezga mazina gha ma elements ghose agho ghali na ma digit gha even.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,tum_Latn,python,"
def by_length(arr):
    """"""Para tapika mazina gha nambara zose, tipenje nambara zose izo zili pakati pa 1 na 9, tiwezge nambara zose, ndipo tiwezge nambara yiliyose na zina lake. Mwachiyelezgero: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Usange nambara yilije kanthu, tiwezge nambara yimoza: arr = [] return [] Usange nambara yiliyose njambura kwenelera, tileke kughanaghanira za nambara iyi: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55,1] - return ['One' 1,] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,tum_Latn,python,"
def f(n):
    """"""Kuchita ntchito f kuti amatenga n monga chizindikiro, ndipo umabwerera mndandanda wa kukula n, monga kuti mtengo wa chinthu pa index ine ndi factorial wa ine ngati ine ndi ngakhale kapena chiwerengero cha manambala kuchokera 1 kuti ine mwinamwake. ine kuyambira 1. factorial wa ine ndi kuchulukitsa kwa manambala kuchokera 1 kuti ine (1 * 2 * ... * ine). Chitsanzo: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,tum_Latn,python,"
def even_odd_palindrome(n):
    """"""Para pali nambala ya n, yikusangikaso pa nambala ya palindromes iyo yili mu range ya {1, n}. Example1: Input: 3 Output: (1, 2) Explanation: Integer palindromes are 1, 2, 3. one of them is even, and two of them are odd. Example2: Input: 12 Output: (4, 6) Explanation: Integer palindromes are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd. Note: 1. 1 <= n <= 10^3 2. tuple yikusangikaso pa nambala ya palindromes ya even na odd. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,tum_Latn,python,"
def count_nums(arr):
    """"""Lembani ntchito count_nums iyo yikupoka ma integer ndipo yikuwezga chiŵelengero cha ma elements icho chili na ma digit > 0. Usange nambala njakubisika, mbwenu chiŵelengero chake chakwamba chiŵenge chakubisika: e.g. -123 yili na ma digit -1, 2, na 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,tum_Latn,python,"
def move_one_ball(arr):
    """"""Tikukhazga kuti mulembe chilembo chimoza icho chikuwoneka nga ni chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chilembo cha chi""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,tum_Latn,python,"
def exchange(lst1, lst2):
    """"""Mu suzgo iyi, muzamugwiliskira ntchito ntchito iyo yikupoka mazina gha nambara ziŵiri, ndipo yikumanya usange nchamacitiko kusinthana vinthu pakati pawo kuti lst1 yiŵe mazina gha nambara ziŵiri pera. Palije mphaka pa unandi wa vinthu ivyo vikusinthana pakati pa lst1 na lst2. Usange nchamacitiko kusinthana vinthu pakati pa lst1 na lst2 kuti vinthu vyose vya lst1 viŵe viŵiri pera, lembani ""YES"". Usange ni nthena, lembani ""NO"". Mwaciyelezgero: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Tikughanaghana kuti mazina agho ghakusinthana ghaŵenge ghambura kanthu. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,tum_Latn,python,"
def histogram(test):
    """"""Para pali vilembo vinandi ivyo vikuwoneka pamoza, lembani vyose. Chiyelezgero: histogram (a) (b) (c) (d) (e) (f) (g) (g) (g) (h) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (i) (ii) (i) (i) (i) (i) (i) (i) (i) (ii) (i) (i) (i) (i) (i) (i) (i) (i) (ii) (i) (i) (ii) (i) (ii) (ii) (ii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii) (iii""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,tum_Latn,python,"
def reverse_delete(s,c):
    """"""Ntchito Tikupika ma string ghaŵiri s na c, mukwenera kusisita ma characters ghose gha mu s agho ghali nga ni character yose ya mu c ndipo mukwenera kuwona usange chipaturo cha string iyi ni palindrome. string yikuchemeka palindrome usange yikuŵazga nga ni backward na forward. Mukwenera kuwelera na tuple iyo yili na chipaturo cha string na True/False kuti musande. Mwachiyelezgero para s = ""abcde"", c = ""ae"", chipaturo chiŵenge ('bcd',False) Para s = ""abcdef"", c = ""b"" chipaturo chiŵenge ('acdef',False) Para s = ""abcdedcba"", c = ""ab"", chipaturo chiŵenge ('cdedc',True) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,tum_Latn,python,"
def odd_count(lst):
    """"""Chiwerengero cha ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,tum_Latn,python,"
def minSubArraySum(nums):
    """"""Para tapika ma integer, tisange chigaŵa icho chilije ma integer.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,tum_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Mukupika chigaŵa cha visimi. Chigaŵa chilichose chikulongora chisimi chimoza, ndipo chigaŵa chilichose chikulongora maji ghamoza. Chigaŵa chilichose chili na chiŵiya icho chikufumiskamo maji, ndipo chiŵiya chilichose chili na maji ghamoza. Ntchito yinu njakuti mufumiskemo maji mu visimi. Pelekani chiŵiya icho mukukhumba kuti chiŵe chakukwana kuti mufumiskemo maji mu visimi.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,tum_Latn,python,"
def sort_array(arr):
    """"""Mu Kata iyi, mukwenera kupenda ma non-negative integers kuyana na unandi wa awo ŵali mu binary representation mu order yakuya. Pakuti unandi wa awo, kupenda kuyana na decimal value.""""""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,tum_Latn,python,"
def select_words(s, n):
    """"""Para pali nambala ya s na nambala ya n, mwaŵikapo ntchito iyo yikuwezga mazina gha mazgu ghose agho ghali na vilembo vyakukwana n, mwakuti mazgu agha ghawoneke mu nambala ya s. Usange nambala ya s yilije kanthu, ndikuti ntchito iyi yikwenera kuweleramo mazina ghambura kanthu.""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,tum_Latn,python,"
def get_closest_vowel(word):
    """"""Mukupika lizgu. Ntchito yinu nkhupenja vowel iyo yili pafupi na pakati pa ma consonant ghaŵiri kufuma ku chigaŵa cha mazgu (case sensitive). Vokala iyo yili pakwamba na paumaliro yikupendeka yayi.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,tum_Latn,python,"
def match_parens(lst):
    '''Mukupika ndandanda ya vingwe viŵiri, vyose vili na vilembo vya '(' panji ') ' ndipo ntchito yinu nkhusanda usange vingakwaniska kugwiliska vilembo viŵiri ivi pamoza kuti ivyo vyamufumapo viŵe viwemi. Chingwe cha S chikuwoneka kuti ntchiwemi usange vilembo vyose vya S vili na vilembo viwemi. Mwachiyelezgero: chingwe cha '((())' ntchiwemi, kweni cha '())' ntchiwemi yayi. Para pali nthowa iyo tingapangira chingwe chiwemi, chiwelerenge 'Enya', ndipo para pali nthowa yinyake, chiwelerenge 'Yayi'.'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,tum_Latn,python,"
def maximum(arr, k):
    """"""Chiwerengero cha ziwerengero ndi chiwerengero cha ziwerengero k, bweretsani mndandanda wa kutalika kwa k ndi chiwerengero cha ziwerengero mu arr. Chitsanzo1: Kulowera: arr = [-3, -4, 5], k = 3 Kutuluka: [-4, -3, 5] Chitsanzo2: Kulowera: arr = [4, -4, 4], k = 2 Kutuluka: [4, 4] Chitsanzo3: Kulowera: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Kutuluka: [2] Chidziwitso: 1. Kutalika kwa mzere kudzakhala mu [1, 1000]. 2. Zigawo mu mzere zidzakhala mu [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,tum_Latn,python,"
def solution(lst):
    """"""Para pali ma integers ghakupambana, yambani na kupanganiska ma integers agho ghali mu malo ghamoza.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,tum_Latn,python,"
def add_elements(arr, k):
    """"""Para pali nambala yimoza iyo yili na vigaŵa viŵiri, yikusangikaso pa vigaŵa viŵiri ivi. Chiyelezgero: Kulemba: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Kulemba: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,tum_Latn,python,"
def get_odd_collatz(n):
    """"""Para pali nambala ya n, yikusangika mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n. Chiwerengero cha n chikuwoneka mu ndondomeko ya n.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,tum_Latn,python,"
def valid_date(date):
    """"""Mukwenera kulemba ntchito iyo yikukhozga deti ilo mwalemba ndipo yikuwezga unenesko usange deti ilo mwalemba ndakuzomerezgeka, kweni usange yayi mbutesi. Zuŵa likugwira nchito usange malango ghose ghakulondezgapo ghakukhorwa: 1. Zuŵa ilo mwalemba ndakuzomerezgeka. 2. Mazuŵa ghakukwana 1 panji kujumpha 31 mu myezi 1,3,5,7,8,10,12. Ndipo mazuŵa ghakukwana 1 panji kujumpha 30 mu myezi 4,6,9,11. Ndipo mazuŵa ghakukwana 1 panji kujumpha 29 mu mwezi 2.""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,tum_Latn,python,"
def split_words(txt):
    '''Para pali mazgu, lembani mazina gha mazgu agho ghagaŵika pa malo ghambura kanthu, usange palije malo ghambura kanthu mu lemba, lembani pa tumalembo ',' usange palije tumalembo, lembani unandi wa vilembo vya pa vilembo vyambura kanthu mu alufabeti, ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 Viyelezgero vya mazgu agho ghagaŵika pa malo ghambura kanthu (split_words) â -> [""Hello"", ""world!""] split_words'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,tum_Latn,python,"
def is_sorted(lst):
    '''Para wapika mazina gha nambara, uwelerenge usange nambara izo zili mu ndondomeko yakukwera. Usange mazina gha nambara yimoza ghakukwana, uwelerenge False. Lekani kughanaghana kuti nambara ya negative njimoza pera.'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,tum_Latn,python,"
def intersection(interval1, interval2):
    """"""Mwachiyelezgero, para mukulemba chigaŵa icho chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa chinyake cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa cha chigaŵa chigaŵa cha chigaŵa cha chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chigaŵa chi""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,tum_Latn,python,"
def prod_signs(arr):
    """"""Mukupika array ya ma integer ndipo mukwenera kuweleramo sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr. Example: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,tum_Latn,python,"
def minPath(grid, k):
    """"""Kuti mupeze njira yoyenera ya kutalika kwa k, muyenera kupeza njira yocheperako ya kutalika kwa k, mwachitsanzo, mutha kupita ku maselo oyandikana nawo omwe amagawana m'mphepete ndi inu maselo apano. Chonde dziwani kuti njira ya kutalika kwa k ikutanthauza kuyendera maselo k (osati osiyana). Simungachoke pa gridi. Njira A (ya kutalika kwa k) imawerengedwa kuti ndi yaying'ono kuposa njira B (ya kutalika kwa k) ngati mutatha kupanga mindandanda yoyenera ya ziwerengero pa maselo omwe A ndi B amadutsa (tiyeni tiwaitane l_stA ndi l_stB), l_stA ndi yaying'ono kuposa l_stB, m'mawu ena, mu inteja ya gridi. [A,A,A,A,B,A,B,A,B,A,B,A,B,A,B,A,B,A,B,A,B,A,B,B,A,B,B,A,B,B,C,D,D,E,F,F,F,F,F,G,F,G,F,G,F,F,G,F,G,F,G,F,G,F,G,F,G,G,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H,H""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,tum_Latn,python,"
def tri(n):
    """"""Kweni ŵanthu ŵakumanya yayi ivyo vikuchitika para n yikusangika pa nambala yimoza. Para n yikusangika pa nambala yimoza, yikusangika pa nambala yimoza. Para n yikusangika pa nambala yimoza, yikusangika pa nambala yimoza. Para n yikusangika pa nambala yimoza, yikusangika pa nambala yimoza. Para n yikusangika pa nambala yimoza, yikusangika pa nambala yimoza. Para n yikusangika pa nambala yimoza, yikusangika pa nambala yimoza, yikusangika pa nambala yimoza.""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,tum_Latn,python,"
def digits(n):
    """"""Para pali nambala ya n, yikusangikaso na manambara gha n. Yikusangikaso na 0 usange manambara ghose ghali ghapawiri. Mwachiyelezgero: manambara(1) == 1 manambara(4) == 0 manambara(235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,tum_Latn,python,"
def is_nested(string):
    '''Pangani ntchito iyo yikupoka chingwe icho chili na vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vilembo vya vi vi vi vilembo vya vi vi vi vi vilembo vya vi vi vi vi vi vilembo vya vi vi vi vi vi vilembo vya vi vi vi vi vilembo vya vilembo vya vi vi vi vilembo vya vi vi vi vi vi vi vi vi vi vilembo vya vi vi vi vi vi vi vi vilembo'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,tum_Latn,python,"

def sum_squares(lst):
    """"""Mukupika mazina gha nambara. Mukwenera kuweleramo mazina gha nambara izo zili pa msalaba wa 2 mu nambara iyo mwapeleka, ndipo mukwenera kuzingilizga nambara yiliyose mu nambara iyi kufika pa nambara ya pachanya.""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,tum_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Lembani fundo yakuti: ""mazgu"" ni mazina gha vilembo ivyo vyapatukana na vilembo. Mwachiyelezgero: ""mazgu"" ni vilembo ivyo vyapatukana na vilembo.'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,tum_Latn,python,"
def can_arrange(arr):
    """"""Pangani ntchito iyo yikuwezga index yikuru ya chinthu icho nchikulu panji nchakuyana na icho chili pafupi. Usange palije chinthu chenecho, mbwenu mukuwezga -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,tum_Latn,python,"
def largest_smallest_integers(lst):
    '''Pangani ntchito iyo yikuwezga tuple (a, b), apo 'a' ni yikuru ya negative integers, ndipo 'b' ni yichoko ya positive integers mu list. Usange palije negative panji positive integers, ziwelerenge nga ni None.'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,tum_Latn,python,"
def compare_one(a, b):
    """"""Pangani ntchito iyo yikupoka ma integer, floats, panji ma string agho ghakwimira ma real number, ndipo yikuwezga ma variable ghakuru mu mtundu wa variable iyo yapika. Kuwezga None usange ma value ghali ghamoza.""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,tum_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Tiye tiwone usange n yingalembeka nga ni sumo ya nambala zinayi ziwemi.""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,tum_Latn,python,"
def special_factorial(n):
    """"""Chiwerengero cha ku Brazil chikufotokozedwa ngati: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! pomwe n > 0 Mwachitsanzo: >>> special_factorial(4) 288 Ntchitoyi idzalandira integer monga cholembera ndipo iyenera kubwezera chiwerengero chapadera cha integer iyi. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,tum_Latn,python,"
def fix_spaces(text):
    """"""_Cilongolero-3zgu gha mu mzere, lembanipo mazgu gha pasi, ndipo usange mzere uli na mazgu gha pasi ghaŵiri, lembani mazgu gha pasi gha vigaŵa viŵiri.""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,tum_Latn,python,"
def file_name_check(file_name):
    """"""Pangani ntchito iyo yikupoka chikhomo icho chikwimira zina la fayilo, ndipo yikuwezga 'Enya' usange zina la fayilo ndilakuzomerezgeka, ndipo yikuwezga 'Yayi' usange zina la fayilo ndilakuzomerezgeka yayi. Zina la fayilo likuwoneka kuti ndakukhorwa usange vinthu vyose ivi vikufiskika: - Pafupifupi pali manambara ghatatu ('0'-'9') mu zina la fayilo. - Zina la fayilo lili na chikhomo chimoza pera '.' - Chikhomo chimoza chira chikwenera kuŵa na chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha chikhomo cha""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,tum_Latn,python,"


def sum_squares(lst):
    """""""" Ntchito iyi ipanga mndandanda wa ma integer. Kwa ma entries onse mu mndandanda, ntchitoyo iyenera kupanga square integer entry ngati index yake ndi yochuluka ya 3 ndipo idzaika cube integer entry ngati index yake ndi yochuluka ya 4 osati yochuluka ya 3. Ntchitoyi sidzasintha ma entries mu mndandanda omwe ma index awo sali ochuluka a 3 kapena 4. Ntchitoyi iyenera kubwezera chiwerengero cha ma entries onse. Zitsanzo: Kwa lst = [1,2,3] zotuluka ziyenera kukhala 6 Kwa lst = [] zotuluka ziyenera kukhala 0 Kwa lst = [-1,-5,2,-1,-5] zotuluka ziyenera kukhala -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,tum_Latn,python,"
def words_in_sentence(sentence):
    """"""Mukupika chingwe icho chikwimira sentesi, sentesi iyi yili na mazgu agho ghali na malo, ndipo mukwenera kuweleramo na mazgu agho ghali na mazgu gha sentesi yakwamba, ndipo utali wake ni manambara ghakwambira, ndondomeko ya mazgu gha mu sentesi yiphya yikwenera kuŵa nga ya mu sentesi yakwamba.""""""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,tum_Latn,python,"
def simplify(x, n):
    """"""Ntchito yanu ndi kukhazikitsa ntchito yomwe idzachepetse chiwonetsero x * n. Ntchitoyi imabwerera Chowona ngati x * n ikuwerengera ku chiwerengero chonse ndipo Cholakwika apo ayi. Onse awiri x ndi n, ndi chiwonetsero cha chingwe cha chigawo, ndipo ali ndi mtundu wotsatirawu, <numerator> / <denominator> pomwe onse owerengera ndi otchulira ndi manambala onse abwino. Mutha kuganiza kuti x, ndi n ndi zigawo zoyenera, ndipo alibe zero monga otchulira. kuphweka "" 1 / 5 "", ""5 / 1 "") = Chowonadi kuphweka "" 1/ 6 "", ""2 / 1 "") = Cholakwika kuphweka "" 7 / 10 "", ""10 / 2 "") = Cholakwika """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,tum_Latn,python,"
def order_by_points(nums):
    """"""Lembani ntchito iyo yikupanga ndondomeko ya ma integers mu ndondomeko yakukwera kuyana na unandi wa ma digits.""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,tum_Latn,python,"
def specialFilter(nums):
    """"""Lembani ntchito iyo yikupoka manambara gha mu array nga ni input ndipo yikuwezga manambara gha vinthu ivyo vili mu array ivyo ni vikuru kuluska 10 ndipo manambara gha nambala ya chiwiri na yaumaliro ni ghapadera (1, 3, 5, 7, 9). Mwachiyelezgero: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,tum_Latn,python,"
def get_max_triples(n):
    """"""Mwapatsidwa chiwerengero cha positive integer n. Muyenera kupanga integer array a of length n. Kwa i (1 â‰¤ i â‰¤ n), mtengo wa a[i] = i * i - i + 1. Bweretsani chiwerengero cha katatu (a[i], a[j], a[k]) cha a pomwe i < j < k, ndipo a[i] + a[j] + a[k] ndi kachulukidwe ka 3. Chitsanzo: Kulowetsa: n = 5 Kutulutsa: 1 Kufotokozera: a = [1, 3, 7, 13, 21] Katatu kokha koyenera ndi (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,tum_Latn,python,"
def bf(planet1, planet2):
    '''Pali mapulaneti 8 mu solar system yithu: la pafupi na dazi ni Mercury, lakulondezgapo ni Venus, ndipo lakulondezgapo ni Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Lembani function iyo yikugwiliskira ntchito mapulaneti ghaŵiri nga ni planet1 na planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names. Examples bf""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf(""Earth"", ""Mercury"") ==> (""Venus"") bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,tum_Latn,python,"
def sorted_list_sum(lst):
    """"""Lembani ntchito iyo yikupokelera mazina gha zingwe nga ni parameter, yikufumiskamo zingwe izo zili na utali wa mphanda, ndipo yikuwezga ivyo vyasangika na ndondomeko ya ndondomeko, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length. For example: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,tum_Latn,python,"
def x_or_y(n, x, y):
    """"""Pulogalamu yophweka yomwe iyenera kubwezera mtengo wa x ngati n ndi nambala yoyamba ndipo iyenera kubwezera mtengo wa y mwinamwake.""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,tum_Latn,python,"
def double_the_difference(lst):
    '''Para tapika mazina gha nambara, tiwezgerenge chiŵerengero cha makwerero gha nambara izo zili mu mazina agho ni zambura kwenelera.'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,tum_Latn,python,"
def compare(game,guess):
    """"""Nkhumanya kuti tose tikukumbuka umo tikujipulikira para tawona kuti ivyo tikughanaghana ni vyaunenesko. Tikwenera kughanaghanira ivyo tikughanaghana na kuvilinganya. Tikupika vigaŵa viŵiri vya vigaŵa ivyo vikukolerana, ndipo vigaŵa vyose vikuyana. Usange ivyo tikughanaghana ni vyaunenesko, chigaŵa icho chiŵenge cha 0, ndipo usange ni vyautesi, chigaŵa icho chiŵenge chautesi.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,tum_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Mukupika zina la class (string) na list ya ma extensions. ma extensions agha ghakugwiliskirika ntchito pakulemba ma classes ghanyake ku class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. Mukwenera kusanga ma extensions gha nkhongono chomene na kuweleramo string mu format iyi: ClassName.StrongestExtensionName. Usange pali ma extensions ghaŵiri panji kujumpha apa gha nkhongono yimoza, mukwenera kusankha lakwamba pa list. Mwachiyelezgero, usange mwapika ""Slices"" nga ni class na list ya ma extensions: ['SEviviviSNGliCes', 'Cheese', 'StuFfed'] mukwenera kuweleramo 'Slices.SEviSNGliCes' chifukwa 'SviviviSNGliCes' ni 'mySviSNGliCes' (mySviSNGliCes') - Strongest extension: 'AA' (Example: 'Beast_class'), chifukwa 'AA' is the strongest extension.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,tum_Latn,python,"
def cycpattern_check(a , b):
    """"""Mukupika mazgu ghaŵiri. Mukwenera kuweleramo True usange lizgu lachiŵiri panji lizgu lililose ilo likuzgoka ni mzere wa mu lizgu lakwamba cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,tum_Latn,python,"
def even_odd_count(num):
    """"""Chiwerengero cha ziwerengero cha ziwerengero cha ziwerengero cha ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero za ziwerengero""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,tum_Latn,python,"
def int_to_mini_roman(number):
    """"""Para tapika nambara yakukwana, tiwonenge nambara yake ya chi roman nga ni nambara ya mzera, ndipo tiwelerenge nayo mu malemba ghachoko.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,tum_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Para vigaŵa vyose vitatu vya kawonekero ka ka mphanda vikupanga kawonekero ka mphanda, ndipo vigaŵa vyose vitatu ivi vikupanga kawonekero ka mphanda, ndipo vigaŵa vyose vitatu ivi vikupanga kawonekero ka mphanda, ndipo vigaŵa vyose vitatu ivi vikupanga kawonekero ka mphanda, ndipo vigaŵa vyose vitatu ivi vikupanga kawonekero ka mphanda.'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,tum_Latn,python,"
def find_max(words):
    """"""Lembani ntchito iyo yikupokelera mazina gha vilembo. Mu mazina muli mazgu ghakupambanapambana. Kuwezga mazgu agho ghali na vilembo vinandi. Usange vilembo vinandi vili na vilembo vinandi, lembani lizgu ilo lili na vilembo vinandi.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,tum_Latn,python,"
def eat(number, need, remaining):
    """"""Mukwenera kuweleramo mu ndondomeko ya [ chiŵelengero cha karoti icho mwarya, chiŵelengero cha karoti icho chakhalako para mwarya ] usange palije karoti yakukwana, mungarya karoti yose iyo yakhalako, kweni muŵenge na njara. Chiyelezgero: * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need:: integer the number of carrots that you need to eat. @remaining:: integer the number of remaining carrots that exist in stock Constrain: * 0= <= 1000 * 0= <= 1000 * 0= <= 1000 remaining <= 1000 Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,tum_Latn,python,"
def do_algebra(operator, operand):
    """"""Chiwerengero cha ziwerengero cha operand ndi operand. Chiwerengero choyamba chili ndi ntchito za algebra, ndipo chachiwiri ndi mndandanda wa ziwerengero. Gwiritsani ntchito mndandanda wa ziwerengero ziwiri zomwe zaperekedwa kuti mupange chiwonetsero cha algebraic ndikubwezera kuwerengera kwa chiwonetserochi. Ntchito za algebra: Kuwonjezera ( + ) Kuchotsera ( - ) Kuchulukitsa ( * ) Kugawa pansi ( // ) Kuwonetsa ( ** Chitsanzo ): woyendetsa['+', '*', '-'] array = [2, 3, 4, 5] zotsatira = 2 + 3 * 4 - 5 => zotsatira = 9 Dziwani: Kutalika kwa mndandanda wa operand kuli kofanana ndi kutalika kwa operand mndandanda kuchotsera chimodzi. Operand ndi mndandanda wa ziwerengero zopanda pake. Operator ali ndi mndandanda umodzi wa operand, ndipo operand ali ndi operand osachepera awiri. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,tum_Latn,python,"
def solve(s):
    """"""Mukupika chingwe s. Usange s[i] ni chilembo, chizgolerani ku malo ghakukhilira kufuma pasi kuya pachanya panji vis-a-versa, usange yayi, chileke. Usange chingwe chilije chilembo, chizgolerani ku chingwe. Fonkha iyi yikwenera kuweleramo chingwe icho chafuma.""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,tum_Latn,python,"
def string_to_md5(text):
    """"""Para pali string 'text', yambani na md5 hash string. Usange 'text' ni empty string, yambani na None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,tum_Latn,python,"
def generate_integers(a, b):
    """"""Para tapika ma integer ghaŵiri a na b, tiwelerenge ma digiti gha pakati pa a na b, mu ndondomeko yakukwera. Mwachiyelezgero: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
