[
    {
        "task_id": "HumanEval/0",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"নিৰ্দিষ্ট সংখ্যাৰ তালিকাত, নিৰ্দিষ্ট সীমাতকৈ যিকোনো দুটা সংখ্যা পৰস্পৰৰ ওচৰত আছে নে নাই পৰীক্ষা কৰক। উদাহৰণঃ >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"এই ফাংচনৰ ইনপুট হৈছে এটা শাৰী য'ত বহুতো গোটৰ অন্তৰ্ভুক্ত বন্ধনী আছে। আপোনাৰ লক্ষ্য হৈছে সেই গোটবোৰক পৃথক শাৰীলৈ পৃথক কৰা আৰু সেইবোৰৰ তালিকা ঘূৰাই দিয়া। পৃথক গোটবোৰ ভাৰসাম্যপূৰ্ণ (প্ৰতিটো খোলা বন্ধনী সঠিকভাৱে বন্ধ) আৰু ইজনে সিজনৰ ভিতৰত অন্তৰ্ভুক্ত নহয়। ইনপুট শাৰীত কোনো স্থান উপেক্ষা কৰক। উদাহৰণঃ >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) '['() ', '(()) ', '((() ')) ]\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"এটা ধনাত্মক ফ্ল'টিং পইণ্ট সংখ্যা দিয়া হ'লে, ইয়াক অখণ্ড অংশ (প্ৰদত্ত সংখ্যাৰ তুলনাত ডাঙৰ অখণ্ড সংখ্যা) আৰু দশমিক অংশ (বাকি অংশ সদায় ১তকৈ সৰু) ত ভগাব পাৰি। সংখ্যাৰ দশমিক অংশ ঘূৰাই আনা। উদাহৰণঃ >>> truncate_number(3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"আপোনাৰ হাতত এটা বেংক একাউণ্টৰ জমা আৰু প্ৰত্যাহাৰৰ তালিকা আছে যি শূন্য সমতুল্যৰে আৰম্ভ হয়। আপোনাৰ কাম হৈছে কোনো এটা সময়ত একাউণ্টৰ সমতুল্য শূন্যৰ তলত পৰিলে, আৰু সেই সময়ত ফাংচনে True ৰিটাৰ্ণ কৰিব লাগে। অন্যথা ই False ৰিটাৰ্ণ কৰিব লাগে। উদাহৰণঃ >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ইনপুট নম্বৰসমূহৰ এটা তালিকা প্ৰদান কৰা হ'লে, এই ডাটা ছেটৰ গড়ৰ চাৰিওফালে গড় নিখুঁত বিচ্যুতি গণনা কৰক। গড় নিখুঁত বিচ্যুতি হৈছে প্ৰতিটো উপাদানৰ আৰু কেন্দ্ৰ বিন্দুৰ মাজৰ গড় নিখুঁত পাৰ্থক্য (এই ক্ষেত্ৰত গড়): MAD = গড় । x - x_mean । উদাহৰণঃ >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ইনপুট তালিকাৰ প্ৰতিটো দুটা ক্ৰমিক উপাদানৰ মাজত এটা সংখ্যা 'ডিলিমিটাৰ' সন্নিৱিষ্ট কৰক `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"এই ফাংচনৰ ইনপুট হৈছে এটা শাৰী যিটো স্পেচৰে পৃথক কৰা ব্ৰেনটেজসমূহৰ বাবে একাধিক গোটক প্ৰতিনিধিত্ব কৰে। প্ৰতিটো গোটৰ বাবে, ব্ৰেনটেজসমূহৰ গভীৰতম স্তৰৰ নেস্টিং আউটপুট কৰক। উদাহৰণস্বৰূপে (() (()) ৰ সৰ্বাধিক দুটা স্তৰৰ নেস্টিং আছে যদিও ((())) ত তিনিটা আছে। >>> parse_nested_parens('((()) ((())) () ((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"কেৱল সেইবোৰ বাবে এটা ইনপুট ষ্ট্ৰিংৰ তালিকা ফিল্টাৰ কৰক যিবোৰত দিয়া উপ-শৃংখলা আছে >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"এটা নিৰ্দিষ্ট পূৰ্ণসংখ্যাৰ তালিকাৰ বাবে, এটা যোগফল আৰু এটা তালিকাত থকা সকলো পূৰ্ণসংখ্যাৰ উৎপাদনৰ দ্বাৰা গঠিত এটা টুপল ঘূৰাই দিয়া হ'ব। খালী যোগফলটো 0 আৰু খালী উৎপাদনৰ সমান হ'ব লাগিব 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) ।\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"এটা নিৰ্দিষ্ট সংখ্যাৰ তালিকা, এটা নিৰ্দিষ্ট মুহূৰ্তলৈকে পোৱা ৰোলিং সৰ্বাধিক উপাদানৰ তালিকা সৃষ্টি কৰা। >>> ৰোলিং_মাক্স (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"এটা যোগান ধৰা স্ট্ৰিংৰ সৈতে আৰম্ভ হোৱা আটাইতকৈ চুটি পালিনড্ৰমটো বিচাৰি উলিওৱা। এলগৰিথমৰ ধাৰণাটো সহজঃ - এটা পালিনড্ৰম থকা যোগান ধৰা ষ্ট্ৰিংৰ আটাইতকৈ দীঘল পোষ্টফিক্সটো বিচাৰি উলিওৱা। - এটা পালিনড্ৰমিক উপসৰ্গৰ আগে আগে অহা ষ্ট্ৰিং উপসৰ্গৰ স্ট্ৰিং ৰিভাৰ্ছৰ শেষত সংলগ্ন কৰা। >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"এটা পলিণ্ড্ৰ'ম হ'লে পৰীক্ষা কৰক\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ইনপুট দুটা ষ্ট্ৰিং a আৰু b যিবোৰত কেৱল 1 আৰু 0 থাকে। এই ইনপুটসমূহত বাইনেৰী XOR প্ৰয়োগ কৰক আৰু ফলাফল এটা ষ্ট্ৰিং হিচাপে উভতাই দিয়ক। >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"stringৰ তালিকাৰ পৰা দীৰ্ঘতমটো ঘূৰাই দিব. একে দীৰ্ঘ্যৰ একাধিক stringৰ ক্ষেত্ৰত প্ৰথমটো ঘূৰাই দিব. ইনপুট তালিকা খালী হ'লে None ঘূৰাই দিব. >>> দীৰ্ঘতম (([]) >>> দীৰ্ঘতম ((['a', 'b', 'c']) 'a' >>> দীৰ্ঘতম ((['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"দুটা অখণ্ড সংখ্যাৰ সৰ্ববৃহৎ সাধাৰণ বিভাজক a আৰু b >>> সৰ্ববৃহৎ_সাধাৰণ_বিভাজক ((3, 5) 1 >>> সৰ্ববৃহৎ_সাধাৰণ_বিভাজক ((25, 15) 5 ঘূৰাই দিব ।\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ইনপুট ষ্ট্ৰিংৰ আটাইতকৈ সৰুৰ পৰা দীঘললৈ সকলো উপসৰ্গৰ তালিকা ঘূৰাই আনে >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"এটা শাৰী ঘূৰাই দিব য'ত 0 ৰ পৰা n লৈকে অন্তৰ্ভুক্ত স্থান-সীমাবদ্ধ সংখ্যা থাকিব।\"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"এটা ষ্ট্ৰিং দিয়া হৈছে, কিমানটা পৃথক বৰ্ণ (কেছক লৈ নিৰ্ভৰ নকৰাকৈ) ইয়াত আছে বিচাৰক >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"এই ফাংচনৰ ইনপুট হৈছে এটা সংগীত নোট প্ৰতিনিধিত্ব কৰা এটা শাৰী বিশেষ ASCII বিন্যাসত। আপোনাৰ কাম হ'ল বহু বিটৰ সৈতে প্ৰতিনিধিত্ব কৰা সম্পূৰ্ণ সংখ্যাৰ শাৰী তালিকা বিশ্লেষণ কৰাঃ 'o' নোট, শেষ চাৰিটা বিট 'o' -ৰ পৰা 'R' -ৰ পৰা আধা নোট, শেষ দুটা বিট 'R' -ৰ পৰা চাৰিটা নোট, শেষ এটা বিট >>> parse_music '('o o .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"এটা নিৰ্দিষ্ট উপ-শৃংখলা প্ৰাথমিক শৃংখলত কিমানবাৰ পোৱা যায় বিচাৰক। পাৰ্থক্য থকা ঘটনাবোৰ গণনা কৰক। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ইনপুট হৈছে 'শূন্য'ৰ পৰা 'ন'লৈ সংখ্যাসমূহৰ এটা স্থান-সীমাবদ্ধ শৃংখলা। বৈধ নিৰ্বাচনসমূহ হৈছে 'শূন্য', 'এটা', 'দুটা', 'তিনি', 'চাৰি', 'পাঁচ', 'ছয়', 'সাত', 'আঠ' আৰু 'ন'। সৰুৰ পৰা ডাঙৰলৈ শৃংখলা সজ্জিত কৰি শৃংখলাটো ঘূৰাই আনা >>> sort_numbers (('তিনিটা এক পাঁচ') 'এক তিনি পাঁচ' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"যোগান ধৰা সংখ্যাৰ তালিকা (অন্তত দুটাৰ দৈৰ্ঘ্যৰ) ৰ পৰা দুটা নিৰ্বাচন কৰক আৰু উভতাই দিয়ক যিটো পৰস্পৰৰ নিকটতম আৰু সেইবোৰ ক্ৰমে উভতাই দিয়ক (সৰু সংখ্যা, ডাঙৰ সংখ্যা) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"সংখ্যাৰ তালিকা (অন্তত দুটা উপাদানৰ), সেই তালিকাত এটা ৰেখীয় পৰিবৰ্তন প্ৰয়োগ কৰক, যাতে আটাইতকৈ সৰু সংখ্যাটো 0 হয় আৰু আটাইতকৈ ডাঙৰটো 1 হয় >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"কেৱল পূৰ্ণসংখ্যাৰ বাবে যিকোনো পাইথন মানৰ তালিকা দিয়া ফিল্টাৰ কৰক >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"নিৰ্দিষ্ট শাৰীটোৰ ৰিটাৰ্ণ দৈৰ্ঘ্য >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"এটা নিৰ্দিষ্ট সংখ্যাৰ বাবে, আটাইতকৈ ডাঙৰ সংখ্যাটো বিচাৰক যি n ৰ সমান ভাঙি, n ৰ পৰা সৰু >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"এটা অখণ্ড সংখ্যাৰ অগ্ৰগণ্য গুণকৰ তালিকা সৰুৰ পৰা ডাঙৰলৈ ক্ৰম অনুসাৰে ঘূৰাই দিয়া। প্ৰতিটো গুণকৰ সংখ্যা গুণকৰণত কিমানবাৰ দেখা যায় তাৰ অনুপাতে তালিকাভুক্ত কৰা উচিত। ইনপুট সংখ্যাটো সকলো কাৰকৰ গুণিতক সমান হোৱা উচিত >>> কাৰককৰণ (২, ২, ২) >>> কাৰককৰণ (২৫) [৫, ৫] >>> কাৰককৰণ (৭০) [২, ৫, ৭] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"এটা পূৰ্ণসংখ্যাৰ তালিকাৰ পৰা, এটাতকৈ অধিকবাৰ হোৱা সকলোবোৰ উপাদান আঁতৰাওক। ইনপুটত থকা দৰেই উপাদানসমূহৰ ক্ৰম ৰাখক। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"এটা নিৰ্দিষ্ট শাৰী বাবে, সৰু আখৰবোৰ ডাঙৰ আখৰলৈ আৰু ডাঙৰ আখৰবোৰ সৰু আখৰলৈ ফ্লিপ কৰক। >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"এটা শাৰীলৈ শাৰীসমূহৰ তালিকা সংযোগ কৰক >>> সংযোগ কৰক (a, b, c) 'abc'\"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"কেৱল এটা নিৰ্দিষ্ট উপসৰ্গৰে আৰম্ভ হোৱা এটা ইনপুট শৃংখল তালিকাৰ ফিল্টাৰ কৰক। >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"কেৱল তালিকাৰ ধনাত্মক সংখ্যাসমূহ ঘূৰাই দিব. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"এটা সংখ্যা অগনিত হ'লে সত্য আৰু অন্য ক্ষেত্ৰত অসত্য ঘূৰাই দিব। >>> is_prime (১০১) True >>> is_prime (১১) True >>> is_prime (১৩৪১) True >>> is_prime (৬১) True >>> is_prime (৪) False >>> is_prime (১) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"find_zero ত x ৰ সমীকৰণ পোৱা যায়, য'ত বহুসংখ্যক x ৰ সমীকৰণ পোৱা যায়। find_zero ত x ৰ সমীকৰণ পোৱা যায় য'ত বহুসংখ্যক x ৰ সমীকৰণ পোৱা যায়। তদুপৰি, find_zero ত x ৰ সমীকৰণ পোৱা যায় য'ত সমীকৰণ আৰু বৃহত্তম অ-শূন্য সমীকৰণ থাকে, কাৰণ ই সমাধানৰ নিশ্চয়তা দিয়ে। >>> round ((find_zero[(1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"x বিন্দুত xs সহগ সহ বহুপদকক মূল্যায়ন কৰে। xs[0] + xs [1] * x + xs [1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"এই ফাংশনে এটা তালিকা লয় আৰু এটা তালিকা ঘূৰাই আনে যাতে l' তিনিটাত বিভক্ত নোহোৱা সূচকসমূহত l'ৰ সৈতে একে হয়, আনহাতে তিনিটাত বিভক্ত সূচকসমূহত ইয়াৰ মানবোৰ l ৰ সংশ্লিষ্ট সূচকৰ মানৰ সমান, কিন্তু ছৰ্ট কৰা হয়। >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"এটা তালিকাত শৃংখলিত অনন্য উপাদানসমূহ ঘূৰাই দিব >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"তালিকাখনৰ সৰ্বাধিক উপাদান ঘূৰাই দিব. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"11 বা 13 ৰ দ্বাৰা বিভাজ্য n ৰ কম সংখ্যক পূৰ্ণসংখ্যাত 7 সংখ্যাটো কিমানবাৰ দেখা যায় তাক ঘূৰাই দিব. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"এই ফাংশনে এটা তালিকা লয় আৰু এটা তালিকা ঘূৰাই আনে l' যাতে l' অস্বাভাৱিক সূচকৰ সৈতে একে হয়, আনহাতে তাৰ মানবোৰ জোৰা সূচকৰ সৈতে সমান হয় l ৰ জোৰা সূচকৰ মানৰ সৈতে, কিন্তু বাছনি কৰা হয়। >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"এনকোড_চাইক্লিক ফাংচন ব্যৱহাৰ কৰি এনকোড কৰা এটা ষ্ট্ৰিং ইনপুট হিচাপে লয়। ডিকোড কৰা এটা ষ্ট্ৰিং ঘূৰাই আনে।\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"৩টা অক্ষৰৰ চেকেণ্ডাৰ গোটৰ দ্বাৰা এনকোড কৰা ষ্ট্ৰিং ঘূৰাই আনে।\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib n-ম সংখ্যাটো ঘূৰাই দিয়ে যিটো এটা ফিবনাচ্চি সংখ্যা আৰু ইও এটা অগ্ৰগণ্য। >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero এটা সম্পূৰ্ণ সংখ্যাৰ তালিকা এটা ইনপুট হিচাপে লয়। যদি তালিকাত তিনিটা পৃথক উপাদান আছে যিবোৰৰ যোগফল শূন্য হয়, তেন্তে ই True আৰু অন্যথা False ঘূৰাই দিয়ে। >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"এটা পথৰ কথা কল্পনা কৰক যিটো এটা অসীম দীঘল ৰেখা। n গাড়ী বাওঁৰ পৰা সোঁলৈ গৈ আছে; একে সময়তে, n গাড়ীৰে অন্য এটা গোট সোঁৰ পৰা বাওঁলৈ গৈ আছে। গাড়ী দুটাৰ দুয়োটা গোট একেখনৰ পৰা বহু দূৰত্বত আৰম্ভ হয়। সকলো গাড়ী একে গতিত গতি কৰে। দুটা গাড়ী সংঘৰ্ষ হয় যেতিয়া বাওঁৰ পৰা সোঁলৈ গৈ থকা গাড়ী এখন সোঁৰ পৰা বাওঁলৈ গৈ থকা গাড়ী এখনক খুন্দা মাৰে। অৱশ্যে, গাড়ীবোৰ অসীম মজবুত আৰু শক্তিশালী; ফলস্বৰূপে, তেওঁলোকে নিজৰ গতিপথত চলিবলৈ ধৰে যেন তেওঁলোক সংঘৰ্ষ হোৱা নাই। এই ফাংশনে এনে সংঘৰ্ষৰ সংখ্যা আউটপুট কৰে।\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"১ৰ দ্বাৰা বৃদ্ধি কৰা উপাদানৰ সৈতে তালিকা ঘূৰাই দিয়া হ'ব। >>> incr_list (([১, ২, ৩]) [২, ৩, ৪] >>> incr_list (([৫, ৩, ৫, ২, ৩, ৯, ০, ১২৩)) [৬, ৪, ৬, ৩, ৪, ১০, ১, ১২৪]\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero এটা সম্পূৰ্ণ সংখ্যাৰ তালিকা এটা ইনপুট হিচাপে গ্ৰহণ কৰে। যদি তালিকাত দুটা পৃথক উপাদান আছে যিবোৰৰ যোগফল শূন্য হয়, তেন্তে ই True আৰু অন্যথা False ঘূৰাই দিয়ে। >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ইনপুট নম্বৰ x ৰ সংখ্যাগত ভিত্তি আধাৰলৈ পৰিবৰ্তন কৰক। ৰূপান্তৰ কৰাৰ পিছত শাৰী প্ৰতিনিধিত্ব ঘূৰাই দিব। আধাৰ সংখ্যা ১০ তকৈ কম। >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ত্ৰিভুজৰ বাবে এটা পক্ষৰ দৈৰ্ঘ্য আৰু উচ্চতম ৰিটাৰ্ণ এৰীয়া দিয়া হৈছে। >>> ত্ৰিভুজ_এৰীয়া (5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 সংখ্যা ক্ৰম হৈছে Fibbonacci ক্ৰমৰ সৈতে একে ধৰণৰ ক্ৰম যিটো তলত দিয়া ধৰণে সংজ্ঞায়িত কৰা হৈছে: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 সংখ্যা ক্ৰমৰ n-তম উপাদানটো কাৰ্যকৰীভাৱে গণনা কৰিবলৈ অনুগ্ৰহ কৰি এটা ফাংশন লিখক। পুনৰাবৃত্তি ব্যৱহাৰ নকৰিব। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"তালিকাখনৰ উপাদানসমূহৰ মধ্যম প্ৰত্যাৱৰ্তন l. >>> মধ্যম (([3, 1, 2, 4, 5]) 3 >>> মধ্যম (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"নিৰ্দিষ্ট শাৰীটো এটা পালিনড্ৰম হয় নে নহয় পৰীক্ষা কৰে >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n মডুলো পি (সংখ্যাগতৰ বিষয়ে অৱগত হওক) ঘূৰাই দিব। >>> মডুলো পি (৩, ৫) ৩ >>> মডুলো পি (১০১, ১০১) ২ >>> মডুলো পি (০, ১০১) ১ >>> মডুলো পি (৩, ১১) ৮ >>> মডুলো পি (১০০, ১০১) ১ \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"এনকোড_শ্বিফ্ট ফাংচন ব্যৱহাৰ কৰি এনকোড কৰা এটা ইনপুট ষ্ট্ৰিং লয়। ডিকোড কৰা এটা ষ্ট্ৰিং ঘূৰাই আনে।\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"প্ৰত্যেকটো বৰ্ণ ৫ ৰে স্থানান্তৰ কৰি এটা এনকোডিং ষ্ট্ৰিং ঘূৰাই আনে।\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels হৈছে এটা ফাংচন যি শাৰী লৈ যায় আৰু স্বৰবৰ্ণবিহীন শাৰী ঘূৰাই আনে। >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"যদি তালিকা l ৰ সকলো সংখ্যা থ্ৰেশহোল্ড t তকৈ কম হয় তেন্তে True ঘূৰাই দিয়ক। >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False ।\"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"দুটা সংখ্যা x আৰু y যোগ কৰা >>> যোগ কৰা (২,৩) ৫ >>> যোগ কৰা (৫,৭) ১২ \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"দুটা শব্দৰ একেটা বৰ্ণ আছে নে নাই পৰীক্ষা কৰক। >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddeddabc') সত্য >>> same_chars (('abcd', 'dddddddabc') সত্য >>> same_chars (('dddddddabc', 'abcd') সত্য >>> same_chars (('eabcd', 'dddddddabc') মিছা >>> same_chars (('abcdd', 'dddddddabddce') মিছা >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddabc') মিছা \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-তম ফিব'নাচ্চি সংখ্যাটো ঘূৰাই দিব. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets হৈছে \"<\" আৰু \">\" ৰ এটা শাৰী। প্ৰত্যেক খোলাৰ ব্ৰেকেটত একেটা বন্ধৰ ব্ৰেকেট থাকিলে সত্য ঘূৰাই দিব। >>> correct_bracketing(\"<\") মিছা >>> correct_bracketing(\"<>\") সত্য >>> correct_bracketing(\"<><>>\") সত্য >>> correct_bracketing(\"><<>\") মিছা \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"সত্য ঘূৰাই দিয়া হ'ল তালিকা উপাদানৰ এককভাৱে বৃদ্ধি বা হ্ৰাস কৰা হয়। >>> এককভাৱে (([1, 2, 4, 20]) সত্য >>> এককভাৱে (([1, 20, 4, 10]) মিছা >>> এককভাৱে (([4, 1, 0, -10]) সত্য \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"দুটা তালিকাৰ বাবে ছৰ্ট কৰা অনন্য সাধাৰণ উপাদানসমূহ ঘূৰাই দিব. >>> সাধাৰণ (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> সাধাৰণ (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n ৰ আটাইতকৈ ডাঙৰ অগ্ৰগণ্য গুণক ঘূৰাই দিব. n > 1 বুলি ধৰি লওক আৰু এটা অগ্ৰগণ্য নহয়. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n হৈছে এটা ফাংচন যি 1 ৰ পৰা n লৈকে সংখ্যাবোৰৰ যোগফল দিয়ে। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets হৈছে \"(\" আৰু \"\") ৰ এটা শাৰী। প্ৰত্যেক খোলাৰ ব্ৰেকেটত একেটা বন্ধৰ ব্ৰেকেট থাকিলে সত্য ঘূৰাই দিব। >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\"() False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs এটা বহুপদীয়ৰ সহগবোৰক প্ৰতিনিধিত্ব কৰে। xs[0] + xs[1] * x + xs[2] * x^2 + .... এই বহুপদীয়ৰ আহৰণটো একে ৰূপতে ঘূৰাই আনা। >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib সংখ্যা ক্ৰম হৈছে Fibbonacci ক্ৰমৰ সৈতে একে ধৰণৰ ক্ৰম যিটো তলত দিয়া ধৰণে সংজ্ঞায়িত কৰা হৈছে: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। অনুগ্ৰহ কৰি fibfib সংখ্যা ক্ৰমৰ n-তম উপাদানটো কাৰ্যকৰীভাৱে গণনা কৰিবলৈ এটা ফাংশন লিখক। >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"এটা ফাংচন vowels_count লিখা যি এটা শব্দক প্ৰতিনিধিত্ব কৰা এটা ষ্ট্ৰিংক ইনপুট হিচাপে গ্ৰহণ কৰে আৰু ষ্ট্ৰিংৰ স্বৰসমূহৰ সংখ্যা ঘূৰাই আনে। এই ক্ষেত্ৰত স্বৰবোৰ হৈছে 'a', 'e', 'i', 'o', 'u'। ইয়াত, 'y'ও এটা স্বৰ, কিন্তু কেৱল যেতিয়া ই প্ৰদান কৰা শব্দৰ শেষত থাকে। উদাহৰণঃ >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"অধিক পৰীক্ষা কেচ যোগ কৰক।\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"এটা বৃত্তৰ দৰে x অংকটোৰ অংকবোৰ স্থানান্তৰ কৰক, অংকবোৰ স্থানান্তৰ কৰি সোঁফালে স্থানান্তৰ কৰক আৰু ফলাফলটো এটা শাৰী হিচাপে ঘূৰাই দিয়ক। যদি স্থানান্তৰ > অংকসমূহৰ সংখ্যা, অংকবোৰ উলটি দিয়ক। >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"কাৰ্য এটা ফাংচন লিখক যি এটা ষ্ট্ৰিংক ইনপুট হিচাপে গ্ৰহণ কৰে আৰু কেৱল উচ্চতম বৰ্ণবোৰৰ যোগফল ঘূৰাই দিয়ে। উদাহৰণঃ digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"এই কাৰ্য্যত, আপোনাক এটা শাৰী দিয়া হ'ব যি এটা ফল ক'ৰবাত বিতৰণ কৰা আপেল আৰু কমলা সংখ্যা প্ৰতিনিধিত্ব কৰে এই ক'ৰবাত আপেল, কমলা আৰু মান্গো ফল থাকে। এই শাৰীটো দিয়া হৈছে যি মুঠ সংখ্যক কমলা আৰু আপেল আৰু এটা পূৰ্ণ সংখ্যা যি ক'ৰবাত মুঠ সংখ্যক ফল প্ৰতিনিধিত্ব কৰে ক'ৰবাত থকা মান্গো ফলবোৰৰ সংখ্যা ঘূৰাই দিয়ক। উদাহৰণস্বৰূপেঃ fruit_distribution\"5(আপেল আৰু 6 কমলা\", 19) ->19 - 5 - 6 = 8 fruit_distribution\"0 আপেল আৰু 1 কমলা\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 আপেল আৰু 3 কমলা\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 আপেল আৰু 120) \",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"এটা অক্ষৰ অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষৰ এটা অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ অক্ষ\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''আপুনি এটা অ-খালি ধনাত্মক পূৰ্ণসংখ্যাৰ তালিকা দিয়া হৈছে। শূন্যতকৈ ডাঙৰ আৰু পূৰ্ণসংখ্যাৰ মানতকৈ ডাঙৰ বা সমান সঘনাই থকা সৰ্ববৃহৎ পূৰ্ণসংখ্যাক ঘূৰাই দিব। এটা পূৰ্ণসংখ্যাৰ সঘনাই হ'ল তালিকাত দেখা পোৱা সংখ্যাৰ সংখ্যা। যদি এনে কোনো মান নাই, তেন্তে -1 ঘূৰাই দিব। উদাহৰণঃ search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''অদ্ভুত শৃংখলাঃ অদ্ভুত শৃংখলা হৈছে যেতিয়া আপুনি ন্যূনতম মানৰ পৰা আৰম্ভ কৰে, তাৰ পিছত বাকী থকা অখণ্ড সংখ্যাৰ সৰ্বাধিক, তাৰ পিছত ন্যূনতম আৰু এইদৰে। উদাহৰণঃ strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''এটা ত্ৰিভুজৰ তিনিটা পক্ষৰ দৈৰ্ঘ্য দিয়া হৈছে। যদি তিনিটা পক্ষই এটা বৈধ ত্ৰিভুজ গঠন কৰে তেন্তে ত্ৰিভুজৰ ক্ষেত্ৰফলটো ২ দশমিক বিন্দুলৈ ঘূৰাই দিব। অন্যথা -1 ঘূৰাই দিব। যদি কোনো দুটা পক্ষৰ যোগফল তৃতীয় পক্ষতকৈ ডাঙৰ হয় তেন্তে তিনিটা পক্ষই এটা বৈধ ত্ৰিভুজ গঠন কৰে। উদাহৰণঃ ত্ৰিভুজ_ ক্ষেত্ৰফল (৩, ৪, ৫) == ৬.০০ ত্ৰিভুজ_ ক্ষেত্ৰফল (১, ২, ১০) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''এটা ফাংচন লিখক যিটো যদি বস্তু q উৰি যায় সত্য আৰু অন্যথা মিছা উভতাই দিয়ে। বস্তু q উৰি যাব যদি ই ভাৰসাম্যপূৰ্ণ হয় (এয়া এটা পলিণ্ড্ৰোমিক তালিকা) আৰু ইয়াৰ উপাদানসমূহৰ যোগফল সৰ্বাধিক সম্ভৱ ওজন w তকৈ কম বা সমান হয়। উদাহৰণঃ will_it_fly (([1, 2], 5) â -> মিছা # 1+2 সৰ্বাধিক সম্ভৱ ওজনতকৈ কম, কিন্তু ই ভাৰসাম্যহীন। will_it_fly (([3, 2, 3], 1) â -> মিছা # ই ভাৰসাম্যপূৰ্ণ, কিন্তু 3+2+3 সৰ্বাধিক সম্ভৱ ওজনতকৈ অধিক। will_it_fly (([3, 2, 3], 9) â -> সত্য # 3+23 সৰ্বাধিক সম্ভৱ ওজনতকৈ কম, আৰু ই ভাৰসাম্যপূৰ্ণ। will_it_fly ((([3], 5) â -> সত্য # 3 সৰ্বাধিক সম্ভৱ ওজনতকৈ কম, আৰু ই ভাৰসাম্যপূৰ্ণ।'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"এটা অংক সমষ্টিৰ বাবে, এটা অংক সমষ্টিৰ বাবে প্ৰয়োজনীয় ন্যূনতম সংখ্যক অংক নিৰ্ণয় কৰা। এটা অংক সমষ্টিৰ বাবে, এটা অংক সমষ্টিৰ বাবে ন্যূনতম সংখ্যক অংক নিৰ্ণয় কৰা। এটা অংক সমষ্টিৰ বাবে, এটা অংক সমষ্টিৰ বাবে ন্যূনতম সংখ্যক অংক নিৰ্ণয় কৰা। এটা অংক সমষ্টিৰ বাবে, এটা অংক সমষ্টিৰ বাবে ন্যূনতম সংখ্যক অংক নিৰ্ণয় কৰা। এটা অংক সমষ্টিৰ বাবে, এটা অংক সমষ্টিৰ বাবে ন্যূনতম সংখ্যক অংক নিৰ্ণয় কৰা। এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক এটা অংক\"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''এটা ফাংচন লিখা যি দুটা ষ্ট্ৰিং গ্ৰহণ কৰে আৰু সেই তালিকাক উভতাই দিয়ে য'ত আনখন তালিকাতকৈ কম সংখ্যক ষ্ট্ৰিং থাকে। যদি দুয়োটা তালিকাত একে সংখ্যক ষ্ট্ৰিং থাকে, প্ৰথমখন তালিকাক উভতাই দিয়া হয়। উদাহৰণ total_match (([], []) â -> [] total_match (['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match (['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match (['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match (['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi'], 'hi' ['hi'] total_match (['4', ['1', '2', '3', '4', '5', [' 4])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"এটা ফাংচন লিখা যিটো সত্য বুলি উভতি আহে যদিহে দিয়া সংখ্যাটো 3টা মৌলিক সংখ্যাৰ গুণ আৰু অন্যথা মিছা হয়। (a) 100তকৈ সৰু বুলি জানিলে। উদাহৰণঃ is_multiply_prime(30) == সত্য 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"আপোনাৰ কাম হ'ল এটা ফাংচন লিখিব যিটো সত্য বুলি উভতি আহে যদি এটা সংখ্যা x n ৰ এটা সৰল শক্তি হয় আৰু অন্য ক্ষেত্ৰত মিছা হয়। x n ৰ এটা সৰল শক্তি হয় যদি n**int=x উদাহৰণস্বৰূপেঃ is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''এটা ফাংচন লিখা যি এটা অখণ্ড সংখ্যা a লয় আৰু যদি এই অখণ্ড সংখ্যাটো কোনো অখণ্ড সংখ্যাৰ ঘনক হয় তেন্তে True ঘূৰাই আনে। টোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুটটো সদায় বৈধ। উদাহৰণঃ iscube (১) ==> True (২) ==> False (১) ==> True (৬৪) ==> True (০) ==> True (১৮০) ==> False (১) ==> True (১) ==> True (১৮০) ==> False (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) ==> True (১) === True (১)'''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"আপুনি এটা ফাংচন লিখিবলৈ নিয়োজিত হৈছে যি এটা ষোড়শ সংখ্যা এটা ষ্ট্ৰিং হিচাপে গ্ৰহণ কৰে আৰু ষোড়শ সংখ্যাটো গণনা কৰে যিটো প্ৰাইম হয় (প্ৰাইম সংখ্যা বা এটা প্ৰাইম ১ তকৈ ডাঙৰ এটা প্ৰাকৃতিক সংখ্যা যি দুটা সৰু প্ৰাইম সংখ্যাৰ উৎপাদিত নহয়) । ষোড়শ সংখ্যাটো হ'ল ০, ১, ২, ৩, ৪, ৫, ৬, ৭, ৮, ৯, এ, বি, চি, ডি, ই, এফ। প্ৰাইম সংখ্যাটো হ'ল ২, ৩, ৫, ৭, ১১, ১৩, ১৭,... গতিকে আপুনি নিম্নলিখিত সংখ্যাসমূহৰ এটা সংখ্যা নিৰ্ণয় কৰিব লাগিবঃ ২, ৩, ৫, ৭, বি (= দশমিক ১১), ডি (= দশমিক ১৩) । টোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুটটো সদায় শুদ্ধ বা খালী ষ্ট্ৰিং হয়, আৰু চিহ্ন A,B,C,D,E,F সদায় ডাঙৰ আখৰাত থাকে। উদাহৰণঃ \"AB\"ৰ বাবে আউটপুটটো হব লাগে num = ১। \"1077E\"ৰ বাবে আউটপুটটো হব লাগে num = ১। \"AB\"ৰ বাবে num = A331ED\"ৰ বাবে num = \"AB\"ৰ বাবে num = ৪। \"ABC\"ৰ বাবে num = 6। \"A1289D\"ৰ বাবে num = 6। \"EF0\"ৰ বাবে আউটপুটটো হব লাগে ০.৪.৪.৪.২০২০।\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"আপুনি দশমিক আকাৰত এটা সংখ্যা দিয়া হ'ব আৰু আপোনাৰ কাম হ'ব ইয়াক বাইনেৰী ফৰ্মেটলৈ ৰূপান্তৰ কৰা। ফাংশনটোৱে এটা ষ্ট্ৰিং ঘূৰাই দিব লাগিব, য'ত প্ৰতিটো চিহ্নই এটা বাইনেৰী সংখ্যা প্ৰতিনিধিত্ব কৰে। ষ্ট্ৰিংৰ প্ৰতিটো চিহ্ন হ'ব '0' বা '1'। ষ্ট্ৰিংৰ আৰম্ভণিতে আৰু শেষত অতিৰিক্ত দুটা অক্ষৰ 'db' থাকিব। অতিৰিক্ত অক্ষৰবোৰ ফৰ্মেটৰ সহায়ত আছে। উদাহৰণঃ decimal_to_binary(15) # \"db1111db\" ঘুৰাই দিয়ে decimal_to_binary32) # \"db100000db\" ঘুৰাই দিয়ে\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"আপোনাৰ কাম হৈছে চাব যে এই stringটো happy নে নহয়। এটা string happy হ'ব পাৰে যদি ইয়াৰ দৈৰ্ঘ্য কমেও 3 টা আৰু প্ৰত্যেক 3 টা একেৰাহে থকা আখৰ পৃথক হয়। উদাহৰণঃ is_happy (a) => False is_happy (a) => False is_happy (a) => True is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (a) => True is_happy (a) => False is_happy (b) => True is_happy (c) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"এই শ্ৰেণীৰ শেষ সপ্তাহত শিক্ষকজনে ছাত্ৰ-ছাত্ৰীসকলক নম্বৰ দিব লাগে। শিক্ষকজনে নিজৰ নম্বৰ প্ৰদানৰ বাবে নিজৰ এটা অ্যালগৰিদম প্ৰস্তুত কৰিছে। একমাত্ৰ সমস্যাটো হ'ল, তেওঁ নম্বৰ প্ৰদানৰ বাবে ব্যৱহাৰ কৰা কোডটো হেৰুৱাইছে। তেওঁ আপোনাক কিছুমান ছাত্ৰ-ছাত্ৰীৰ বাবে GPAৰ এখন তালিকা দিছে আৰু আপুনি এটা ফাংশন লিখিব লাগিব যি নিম্নলিখিত সারণী ব্যৱহাৰ কৰি আখৰ নম্বৰসমূহৰ তালিকা প্ৰদৰ্শন কৰিব পাৰেঃ GPA । আখৰ নম্বৰ 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E উদাহৰণঃ grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"এটা ফাংচন লিখক যি এটা ষ্ট্ৰিং লয় আৰু যদি ষ্ট্ৰিংৰ দৈৰ্ঘ্য এটা অগণন সংখ্যা হয় তেন্তে True অথবা অন্যথা False ঘূৰাই আনে উদাহৰণ prime_length{'Hello') == True prime_length{'abcdcba') == True prime_length{'kittens') == True prime_length{'orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হ'লে, 1 ৰ সৈতে আৰম্ভ বা শেষ হোৱা n-অংকৰ ধনাত্মক পূৰ্ণ সংখ্যাৰ সংখ্যাটো ঘূৰাই দিব.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"এটা ধনাত্মক অখণ্ড সংখ্যা N দিলে, ইয়াৰ অংকবোৰৰ মুঠ যোগফল বাইনেৰী ৰূপত ঘূৰাই দিব। উদাহৰণ N = 1000 ৰ বাবে, অংকবোৰৰ যোগফল 1 হ'ব আৰু আউটপুট \"1\" হ'ব। N = 150 ৰ বাবে, অংকবোৰৰ যোগফল 6 হ'ব আৰু আউটপুট \"110\" হ'ব। N = 147 ৰ বাবে, অংকবোৰৰ যোগফল 12 হ'ব আৰু আউটপুট \"1100\" হ'ব। ভেৰিবলঃ @N অখণ্ড সংখ্যা সীমাবদ্ধতাঃ 0 â‰¤ N â‰¤ 10000. আউটপুটঃ বাইনেৰী সংখ্যাৰ এটা শৃংখলা \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"এটা অ-খালি পূৰ্ণসংখ্যাৰ তালিকা দিয়া হ'লে প্ৰথমটো অংকত থকা জোৰা সংখ্যাবোৰ যোগ কৰা। উদাহৰণঃ যোগ কৰা ([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"এটা ফাংচন লিখক যিয়ে এটা ষ্ট্ৰিং লয় আৰু তাৰ এটা আদেশিত সংস্কৰণ ঘূৰাই আনে। ষ্ট্ৰিংৰ আদেশিত সংস্কৰণ হৈছে এটা ষ্ট্ৰিং য'ত সকলো শব্দ (স্পেচাৰে পৃথক) নতুন শব্দৰ দ্বাৰা প্ৰতিস্থাপিত হয় য'ত সকলো বৰ্ণ ascii মানৰ ওপৰত ভিত্তি কৰি ক্ৰমান্বয়ে সাজাই থোৱা হয়। টোকাঃ আপুনি বাক্যত শব্দ আৰু খালী স্থানৰ ক্ৰম ৰাখিব লাগে। উদাহৰণস্বৰূপেঃ anti_shuffle ((('Hi') ঘূৰাই আনে 'Hi' anti_shuffle ((('hello') ঘূৰাই আনে 'ehllo' anti_shuffle (('Hello World!!!') ঘূৰাই আনে 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"আপুনি এটা 2D ডাটা, এটা নেষ্টড লিষ্টৰ দৰে, যিটো মেট্ৰিক্সৰ দৰে, কিন্তু মেট্ৰিক্সৰ দৰে নহয়, প্ৰতিটো শাৰীত বেলেগ বেলেগ সংখ্যক কলাম থাকিব পাৰে। lst, আৰু ইণ্টিগাৰ x দিয়া হৈছে, তালিকাত ইণ্টিগাৰ x বিচাৰি উলিয়াওক, আৰু টুপলসমূহৰ তালিকা ঘূৰাই দিয়ক, [(x1, y1), (x2, y2) ...] যাতে প্ৰতিটো টাপল এটা ক'ৰ্ডিনেট হয় - (শাৰী, কলাম), 0 ৰ পৰা আৰম্ভ হয়। প্ৰথমতে ক্ৰমবৰ্ধমান শাৰীত ক'ৰ্ডিনেটবোৰ ছৰ্ট কৰক। লগতে, ক্ৰমবৰ্ধমান শাৰীত কলামৰ দ্বাৰা শাৰীত ক'ৰ্ডিনেটবোৰ ছৰ্ট কৰক। উদাহৰণঃ get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_(], 1) [] ==[_[, 1, 3, 2, 2, 3]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"এটা অ-নতিবাচক অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, ছ'ৰ্টিং কৰাৰ পিছত সেই অ্যাৰেৰ কপি ঘূৰাই দিয়ক, যদি যোগফল (প্ৰথম সূচক মান, অন্তিম সূচক মান) অস্বাভাৱিক হয়, তেন্তে আপুনি সেই অ্যাৰেৰ ক্ৰমবৰ্ধমান হ'ব, যদি যোগফল (প্ৰথম সূচক মান, অন্তিম সূচক মান) জোৰা হয় তেন্তে আপুনি তাক ক্ৰমবৰ্ধমান হ'ব। টোকাঃ * দিয়া অ্যাৰেটো সলনি নকৰিব। উদাহৰণঃ * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"এটা এনক্ৰিপ্ট ফাংচন সৃষ্টি কৰক যি এটা ষ্ট্ৰিংক এটা আর্গুমেণ্ট হিচাপে লয় আৰু এটা এনক্ৰিপ্ট কৰা ষ্ট্ৰিং ঘূৰাই আনে য'ত বৰ্ণমালাক ঘূৰাই দিয়া হয়। বৰ্ণমালাক এনেদৰে ঘূৰাই দিয়া উচিত যে আখৰবোৰ দুটা স্থানলৈ দুগুণ কৰি দুই গুণ কৰি নামি আহে। উদাহৰণস্বৰূপেঃ এনক্ৰিপ্ট (ইংৰাজীঃ encrypt) ৰিটাৰ্ণ কৰে 'lm' এনক্ৰিপ্ট (ইংৰাজীঃ encrypt) ৰিটাৰ্ণ কৰে 'ewhjklnop' এনক্ৰিপ্ট (ইংৰাজীঃ encrypt) ৰিটাৰ্ণ কৰে 'kj' এনক্ৰিপ্ট (ইংৰাজীঃ encrypt) ৰিটাৰ্ণ কৰে 'ix' ।\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"আপোনাৰ এটা সম্পূৰ্ণ সংখ্যাৰ তালিকা দিয়া হৈছে। এটা ফাংচন next_smallest লিখক যি তালিকাৰ দ্বিতীয় ক্ষুদ্ৰতম উপাদানটো ঘূৰাই দিয়ে। যদি তেনে কোনো উপাদান নাই তেন্তে None ঘূৰাই দিয়ক। next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"আপুনি এটা শব্দৰ শাৰী পাব, আৰু আপোনাৰ কাম হ'ব বিৰক্তিৰ সংখ্যা গণনা কৰা। বিৰক্তি হৈছে \"I\" শব্দৰ সৈতে আৰম্ভ হোৱা এটা বাক্য। বাক্যবোৰ '.', '?' বা '! 'ৰ দ্বাৰা সীমিত কৰা হয়। উদাহৰণস্বৰূপেঃ >>> is_bored ((\"হেল্লো ৱৰ্ল্ড\") 0 >>> is_bored ((\"আকাশ নীলা। সূৰ্য্য উজ্জ্বল। মই এই বতৰ ভাল পাওঁ\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''এটা ফাংচন সৃষ্টি কৰক যিয়ে ৩টা সংখ্যা গ্ৰহণ কৰে। যদি এটা সংখ্যা বাকী দুটা সংখ্যাৰ যোগফলৰ সমান হয় আৰু সকলো সংখ্যা সম্পূৰ্ণ সংখ্যা হয় তেন্তে সত্য বুলি ঘূৰাই দিয়ে। অন্য যিকোনো ক্ষেত্ৰত মিছা বুলি ঘূৰাই দিয়ে। উদাহৰণ any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"এটা ফাংচন লিখা যি এটা বাৰ্তা গ্ৰহণ কৰে, আৰু এনেদৰে এনকোড কৰে যে ই সকলো আখৰৰ কেচ আদান-প্ৰদান কৰে, বাৰ্তাত থকা সকলো স্বৰবৰ্ণক ইংৰাজী বৰ্ণমালাত সেই স্বৰবৰ্ণৰ আগত 2 টা স্থানত উপস্থিত হোৱা আখৰেৰে প্ৰতিস্থাপন কৰে। কেৱল আখৰকেই ধৰি লওক। উদাহৰণঃ >>> এনকোড কৰক (test) 'TGST' >>> এনকোড কৰক (this is a message) 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"আপুনি এটা সম্পূৰ্ণ সংখ্যাৰ তালিকা লাভ কৰিছে। আপুনি আটাইতকৈ ডাঙৰ প্ৰাইম মানটো বিচাৰি উলিয়াব লাগিব আৰু তাৰ অংকবোৰৰ যোগফলটো ঘূৰাই দিব লাগিব। উদাহৰণঃ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ৰ বাবে আউটপুটটো 10 হ'ব লাগিব lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ৰ বাবে আউটপুটটো 25 হ'ব লাগিব lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ৰ বাবে 13 হ'ব লাগিব lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ৰ বাবে 11 হ'ব লাগিব lst = [0,81,12,3,21,1] ৰ বাবে 3 হ'ব লাগিব lst = [0,1,8,1,2,7] ৰ বাবে 7 হ'ব লাগিব \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"এটা অভিধান দিয়া হ'লে, যদি সকলো কী সৰু আখৰৰে কৰা স্ট্ৰিং হয় বা সকলো কী ডাঙৰ আখৰৰে কৰা ষ্ট্ৰিং হয়, তেন্তে True ঘূৰাই দিয়ক, অন্যথা False ঘূৰাই দিয়ক। ফাংশনটোৱে False ঘূৰাই দিব লাগে যদিহে দিয়া অভিধান খালী থাকে। উদাহৰণঃ check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) True ঘূৰাই দিব লাগে। check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) False ঘূৰাই দিব লাগে। check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) False ঘূৰাই দিব লাগে। check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) False ঘূৰাই দিব লাগে। check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) True ঘূৰাই দিব লাগে।\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"এটা ফাংচন প্ৰয়োগ কৰক যি এটা অ-নতিবাচক অখণ্ড সংখ্যা গ্ৰহণ কৰে আৰু প্ৰথম n অখণ্ড সংখ্যাৰ এটা অ্যারে ঘূৰাই দিয়ে যিটো অখণ্ড সংখ্যা আৰু n ৰ কম। উদাহৰণস্বৰূপেঃ count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"দুটা পূৰ্ণ সংখ্যা লয় আৰু তেওঁলোকৰ একক অংকবোৰৰ উৎপাদিত সংখ্যা ঘূৰাই দিয়ে। ধৰা হ'ল ইনপুটটো সদায় বৈধ। উদাহৰণঃ বহুবচন (১৪৮, ৪১২) ৰ প্ৰত্যাবৰ্তন হ'ব লাগে ১৬। বহুবচন (১৯, ২৮) ৰ প্ৰত্যাবৰ্তন হ'ব লাগে ৭২। বহুবচন (২০২০, ১৮৫১) ৰ প্ৰত্যাবৰ্তন হ'ব লাগে ০। বহুবচন (১৪, ১৫) ৰ প্ৰত্যাবৰ্তন হ'ব লাগে ২০।\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"এটা string s দিয়া হ'লে, সম সূচকসমূহত থকা বড়ো অক্ষৰৰ সংখ্যা গণনা কৰা। উদাহৰণস্বৰূপেঃ count_upper (('aBCdEf') ৰিটাৰ্ণ কৰে 1 count_upper (('abcdefg') ৰিটাৰ্ণ কৰে 0 count_upper (('dBBE') ৰিটাৰ্ণ কৰে 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''এটা ফাংচন সৃষ্টি কৰক যি এটা সংখ্যা প্ৰতিনিধিত্ব কৰা এটা মান (ষ্ট্ৰিং) গ্ৰহণ কৰে আৰু ইয়াৰ নিকটতম পূৰ্ণ সংখ্যাটো ঘূৰাই দিয়ে। যদি সংখ্যাটো দুটা পূৰ্ণ সংখ্যাৰ পৰা সমান দূৰত্বত থাকে, তেন্তে ইয়াক শূন্যৰ পৰা দূৰলৈ ঘূৰাই দিয়ক। উদাহৰণ >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 টোকাঃ শূন্যৰ পৰা দূৰলৈ ঘূৰাই দিয়াৰ অৰ্থ হ'ল যদি দিয়া সংখ্যা দুটা পূৰ্ণ সংখ্যাৰ পৰা সমান দূৰত্বত থাকে, আপুনি যিটো ঘূৰাই দিব লাগে সেইটো হ'ল শূন্যৰ পৰা দূৰত্বত থকাটো। উদাহৰণস্বৰূপে closest_integer \" ((14.5\") ৰ বাবে 15 আৰু closest_integer \" ((-14.5\") ৰ বাবে -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"এটা ধনাত্মক n অখণ্ড সংখ্যা দিয়া হ'লে, আপুনি n স্তৰৰ শিলৰ এটা গুটি তৈয়াৰ কৰিব লাগিব। প্ৰথম স্তৰত nটা শিল আছে। পৰৱৰ্তী স্তৰত শিলৰ সংখ্যা হ'লঃ - পৰৱৰ্তী অদ্ভুত সংখ্যা যদি n অদ্ভুত হয়। - পৰৱৰ্তী যুগ্ম সংখ্যা যদি n হয়। এটা তালিকাত প্ৰতিটো স্তৰত শিলৰ সংখ্যা ঘূৰাই দিব, য'ত সূচকাংক i ত থকা উপাদানটো স্তৰত শিলৰ সংখ্যা (i+1) প্ৰতিনিধিত্ব কৰে। উদাহৰণঃ >>> make_a_pile (i+1) ।\"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"আপুনি এটা শব্দৰ শাৰী পাব যিবোৰ কমা বা স্পেচত পৃথক কৰা হ'ব। আপোনাৰ কাম হ'ল শাৰীটো শব্দত বিভক্ত কৰা আৰু শব্দসমূহৰ এটা এৰে ৰিটাৰ্ণ কৰা। উদাহৰণস্বৰূপেঃ words_string ((\"হাই, মোৰ নাম জন\") == [\"হাই\", \"মোৰ\", \"নাম\", \"হয়\", \"জন\"] words_string ((\"এটা, দুটা, তিনি, চাৰি, পাঁচ, ছয়\") == [\"এটা\", \"দুটা\", \"তিনি\", \"চাৰি\", \"পাঁচ\", \"ছয়\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"এই ফাংশনটোৱে দুটা ধনাত্মক সংখ্যা x আৰু y লয় আৰু [x, y] অন্তৰ্ভুক্ত সীমাৰ ভিতৰত থকা আটাইতকৈ ডাঙৰ সমসংখ্যাৰ সংখ্যাটো ঘূৰাই আনে। যদি এনে কোনো সংখ্যা নাই, তেন্তে ফাংশনটোৱে -1 ঘূৰাই দিব লাগে। উদাহৰণস্বৰূপেঃ choose_num (১২, ১৫) = 14 choose_num (১৩, ১২) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"আপুনি দুটা ধনাত্মক পূৰ্ণ সংখ্যা n আৰু m দিয়া হৈছে, আৰু আপোনাৰ কাম হ'ল n ৰ পৰা m লৈকে (n আৰু m সহ) পূৰ্ণ সংখ্যাৰ গড় গণনা কৰা। উত্তৰৰ ওচৰৰ পূৰ্ণ সংখ্যালৈ ঘূৰণীয়া কৰক আৰু ইয়াক বাইনেৰীলৈ ৰূপান্তৰ কৰক। যদি n m ৰ পৰা ডাঙৰ হয়, তেন্তে -1 ঘূৰাই দিয়ক। উদাহৰণঃ rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"এটা ধনাত্মক অখণ্ড সংখ্যাৰ তালিকা দিয়া হৈছে x. এটা সমসংখ্যাৰ অখণ্ড সংখ্যাৰ তালিকা ঘূৰাই দিয়া হয়। টোকাঃ ঘূৰাই দিয়া তালিকাটো ক্ৰমান্বয়ে বাঢ়ি অহা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি যোৱা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা ক্ৰমত বাঢ়ি অহা) [] ]]\"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"এটা অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, 1 আৰু 9 ৰ মাজত থকা অখণ্ড সংখ্যাবোৰ ছৰ্ট কৰক, ফলাফলৰ অ্যারেটো বিপৰীত কৰক, আৰু তাৰ পিছত প্ৰতিটো অংকক ইয়াৰ সৈতে সম্পৰ্কিত নামৰ দ্বাৰা প্ৰতিস্থাপন কৰক \"এক\", \"দুই\", \"তিন\", \"চাৰি\", \"পাঁচ\", \"ছয়\", \"সাত\", \"আঠ\", \"নয়\"ৰ পৰা। উদাহৰণস্বৰূপেঃ arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ছৰ্ট arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ৰিভাৰ্ছ arr -> [8, 5, 4, 3, 2, 1, 1] return [\"আঠ\", \"পাঁচ\", \"দুই\", \"দুই\", \"দুই\", \"এটা\", \"এটা\"] যদি অ্যারেটো খালী হয়, এটা ৰিভাৰ্ছঃ arr = [] return [] যদি অ্যারেটোত কোনো অদ্ভুত সংখ্যা থাকে তেন্তে ইয়াক উপেক্ষা কৰকঃ arr = [1, -1 , 55] -> arr -> [-1, 1, 55] -> reverse arr = [55, return - 1,1]' 'One' \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"f ফাংচনটো ৰূপায়ণ কৰক যি n ক এটা পৰিমাপ হিচাপে গ্ৰহণ কৰে আৰু n আকাৰৰ এখন তালিকা ঘূৰাই আনে, যাতে সূচক i ত থকা উপাদানৰ মানটো যদি i সম হয় বা 1 ৰ পৰা i ৰ সংখ্যাবোৰৰ যোগফল হয়। i 1 ৰ পৰা আৰম্ভ হয়। i ৰ কাৰকটো 1 ৰ পৰা i লৈ সংখ্যাৰ গুণন হয় (1 * 2 * ... * i) । উদাহৰণঃ f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হ'লে, এটা টুপল ঘূৰাই দিয়া হয় য'ত পৰিসীমা ((1, n) ৰ ভিতৰত থকা জোৰা আৰু অজৰা পূৰ্ণসংখ্যাৰ পালিনড্ৰমৰ সংখ্যা থাকে। উদাহৰণ1: ইনপুটঃ 3 আউটপুটঃ (1, 2) ব্যাখ্যাঃ পূৰ্ণসংখ্যাৰ পালিনড্ৰম হৈছে 1, 2, 3. ইয়াৰে এটা জোৰা আৰু দুটা অজৰা। উদাহৰণ2: ইনপুটঃ 12 আউটপুটঃ (4, 6) ব্যাখ্যাঃ পূৰ্ণসংখ্যাৰ পালিনড্ৰম হৈছে 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ইয়াৰে চাৰিটা জোৰা আৰু ৬টা অজৰা। টোকাঃ 1. 1 <= n <= 10^3 2. টুপলে যথাক্ৰমে জোৰা আৰু অজৰা পূৰ্ণসংখ্যাৰ পালিনড্ৰমৰ সংখ্যা ঘূৰাই দিছে। \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"এটা count_nums ফাংচন লিখা যি এটা সম্পূৰ্ণ সংখ্যাৰ অ্যাৰে লয় আৰু সংখ্যাসমূহৰ যোগফল > 0 থকা উপাদানসমূহৰ সংখ্যা ঘূৰাই দিয়ে। যদি এটা সংখ্যা ঋণাত্মক হয়, তেন্তে ইয়াৰ প্ৰথম স্বাক্ষৰিত অংকটো ঋণাত্মক হ'বঃ উদাহৰণস্বৰূপে -123 ৰ স্বাক্ষৰিত অংক -1, 2, আৰু 3 আছে। >>> count_nums[] == 0 >>> count_nums[- 1, 11, -11]) == 1 >>> count_nums[- 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"আমাৰ এটা এৰে 'arr' আছে য'ত N টা পূৰ্ণ সংখ্যা আছে arr[1], arr[2], ..., arr[N]। এৰেৰ সংখ্যাবোৰ এলোমেলোভাৱে ক্ৰমবিন্যাস কৰা হ'ব। আপোনাৰ কাম হ'ল নিৰ্ণয় কৰা যে এটা এৰেক নিম্নলিখিত ক্ৰিয়াটো কৰি ক্ৰমাঙ্কনহীনভাৱে ক্ৰমবিন্যাস কৰা সম্ভৱ হ'বনেঃ আপুনি দিয়া এৰেৰ ওপৰত যিকোনো সংখ্যক বাৰ সোঁ সোঁ স্থানান্তৰ ক্ৰিয়া কৰিবলৈ অনুমতি দিয়া হৈছে। এটা সোঁ স্থানান্তৰ ক্ৰিয়া মানে এৰেৰ সকলো উপাদানক সোঁ দিশত এক স্থানত স্থানান্তৰ কৰা। এৰেৰ শেষ উপাদানটো এৰেৰ আৰম্ভণিৰ স্থানলৈ স্থানান্তৰ কৰা হ'ব অৰ্থাৎ 0th সূচক। যদি ওপৰৰ ক্ৰিয়াটো কৰি ক্ৰমাঙ্কনকৃত এৰে প্ৰাপ্ত কৰা সম্ভৱ হয় তেন্তে True প্ৰত্যাৱৰ্তন কৰক অন্যথা False প্ৰত্যাৱৰ্তন কৰক। যদি দিয়া এৰে খালী হয় তেন্তে True প্ৰত্যাৱৰ্তন কৰক। টোকাঃ দিয়া তালিকাত অনন্য উপাদান থকাটো নিশ্চিত। উদাহৰণস্বৰূপেঃ move_one_(ball[3, 4, 5, 1, 2]=== True ব্যাখ্যাঃ 2 Performin () ৰ দ্বাৰা, ডান সোঁ সোঁ সোঁত স্থানান্তৰ ক্ৰমাঙ্কনহীন ক্ৰমাঙ্কনশীল ক্ৰিয়াটো এৰে প্ৰাপ্ত কৰিব পাৰি। এটা এৰেৰেৰেৰেৰ বাবে দিয়া এৰেৰ বাবে এটা এৰেৰ ক্ৰমাঙ্কনশীল ক্ৰমাঙ্কনহীন ক্ৰমাঙ্কন ক্ৰমাঙ্ক প্ৰাপ্ত কৰা সম্ভৱ নহয়।\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"এই সমস্যাটোত, আপুনি এটা ফাংচন প্ৰয়োগ কৰিব যি দুটা সংখ্যাৰ তালিকা লয়, আৰু নিৰ্ধাৰণ কৰে যে সিহঁতৰ মাজত এটা উপাদানৰ বিনিময় কৰা সম্ভৱ নে কেৱল lst1 সংখ্যাৰ তালিকা তৈয়াৰ কৰিবলৈ। lst1 আৰু lst2 ৰ মাজত বিনিময় কৰা উপাদানৰ সংখ্যাৰ কোনো সীমা নাই। যদি lst1 আৰু lst2 ৰ মাজত উপাদানৰ বিনিময় কৰা সম্ভৱ হয় যাতে lst1 ৰ সকলো উপাদানৰ সম হয়, \"YES\" ঘূৰাই দিয়ক। অন্যথা, \"NO\" ঘূৰাই দিয়ক। উদাহৰণস্বৰূপেঃ বিনিময়[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" বিনিময়[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" ধাৰ্য কৰা হয় যে ইনপুট তালিকাসমূহ অ-খালি হ'ব। \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"এটা শাৰী দিয়া হৈছে যি এটা স্পেচ পৃথক কৰা সৰু আখৰক প্ৰতিনিধিত্ব কৰে, আটাইতকৈ বেছি পুনৰাবৃত্তি কৰা আখৰৰ এটা অভিধান ঘূৰাই আনে আৰু য'ত সংশ্লিষ্ট গণনা থাকে। যদি কেইবাটাও আখৰৰ একেধৰণৰ ঘটনা ঘটে, তেন্তে সেই আটাইবোৰ ঘূৰাই আনে। উদাহৰণঃ হিষ্টোগ্ৰাম (a) == {'a': 1, 'b': 1, 'c': 1} হিষ্টোগ্ৰাম (a) == {'a': 2, 'b': 2} হিষ্টোগ্ৰাম (a) == {'a': 2, 'b': 2} হিষ্টোগ্ৰাম (b) == {'b' 4} হিষ্টোগ্ৰাম (a) == {'b'}\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"কাৰ্য আমাক দুটা শাৰী s আৰু c দিয়া হৈছে, আপুনি s ৰ সকলো বৰ্ণ বিলোপ কৰিব লাগিব যি c ৰ যিকোনো বৰ্ণৰ সমান আৰু তাৰ পিছত ফলাফল শাৰীটো পলিণ্ড্ৰ'ম হয় নে নাই পৰীক্ষা কৰক। এটা শাৰীক পলিণ্ড্ৰ'ম বুলি কোৱা হয় যদি ই আগলৈ আৰু পিছলৈ একেদৰে পঢ়ে। আপুনি ফলাফল শাৰী আৰু True/False থকা এটা টিপল ঘূৰাই দিব লাগিব। উদাহৰণস্বৰূপে s = \"abcde\", c = \"ae\", ফলাফলটো হ'ব লাগিব ('bcd',False) s = \"abcdef\", c = \"b\" ফলাফলটো হ'ব লাগিব ('acdef',False) s = \"abcdedcba\", c = \"ab\", ফলাফলটো হ'ব লাগিব ('cdedc',True)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"এটা শাৰী দিয়া হ'লে, য'ত প্ৰতিটো শাৰী কেৱল অংকৰে গঠিত, এটা তালিকা ঘূৰাই দিব। আউটপুটৰ প্ৰতিটো উপাদান i হ'ব লাগিব \"ইনপুটৰ শাৰী i ৰ অদ্ভুত উপাদানৰ সংখ্যা।\" য'ত সকলো i ৰ ঠাইত ইনপুটৰ i'th শাৰীত অদ্ভুত সংখ্যাৰ সংখ্যা থাকিব লাগিব। >>> odd_count['1234567']) [\"odd_elements 4n the str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\"odd_elements 1n the str1ng 1 of the 1nput.\", \"odd elements 8n the str8ng 8 of the 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"এটা অখণ্ড সংখ্যাৰ অ্যারে দিয়া হ'লে, অখণ্ড সংখ্যাৰ কোনো উপ-অৰেৰ ন্যূনতম যোগফলটো বিচাৰক। উদাহৰণ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"আপুনি এটা আৰ্হিৰ গ্ৰীডত আছে। প্ৰতিটো শাৰীত এটা এটা পুখুৰী আছে আৰু প্ৰতিটো শাৰীত ১টা পানী আছে। প্ৰতিটো পুখুৰীত এটা বাকেট আছে আৰু সেই বাকেটবোৰৰ পৰা পানী আহৰণ কৰিব পাৰি। সকলো বাকেটৰ ক্ষমতা একেই। আপোনাৰ কাম হ'ল পুখুৰীবোৰ খালী কৰা। আপুনি কিমানবাৰ এই বাকেটবোৰ খালী কৰিব লাগে তাৰ সংখ্যা আউটপুট কৰক। উদাহৰণঃ ১ঃ ইনপুটঃ গ্ৰীডঃ [[0,0,1,0], [0,1,0,0], [1,1,1,1]] বাকেট_কেপাচিটিঃ ১ আউটপুটঃ ৬ঃ ইনপুটঃ গ্ৰীডঃ [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] বাকেট_কেপাচিটিঃ ২ আউটপুটঃ ৫৩ঃ ইনপুটঃ [[:0,0,0], [0,0]] বাকেট_কেপাচিটিঃ ৫ঃ ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ * ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ ০ \"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"এই কটাত, আপুনি অ-নতিবাচক অখণ্ড সংখ্যাৰ এটা সজ্জা তেওঁলোকৰ বাইনেৰী প্ৰতিনিধিত্বৰ সংখ্যাৰ মতে ক্ৰমান্বয়ে বাছনি কৰিব লাগিব। একেধৰণৰ সংখ্যাৰ বাবে, দশমিক মানৰ ওপৰত ভিত্তি কৰি বাছনি কৰক। ইয়াক এনেদৰে ৰূপায়ণ কৰিব লাগিবঃ >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"এটা string s আৰু এটা natural number n দিয়া হ'লে, আপোনাক এটা function প্ৰয়োগ কৰিবলৈ কোৱা হৈছে যি string s ৰ পৰা সকলো শব্দৰ তালিকা ঘূৰাই আনে য'ত সঠিকভাৱে n টা consonant আছে, যাতে এই শব্দবোৰ string s ত দেখা যায়। যদি string s খালী হয় তেন্তে function এ খালী তালিকা ঘূৰাই দিব লাগে। টোকাঃ আপুনি ধাৰণা কৰিব পাৰে যে ইনপুট string ত কেৱল আখৰ আৰু স্পেচ আছে। উদাহৰণঃ select_words \"মাৰিয়াৰ এটা সৰু মেৰ আছিল\", 4) ==> [\"little\"] select_words \"মাৰিয়াৰ এটা সৰু মেৰ আছিল\", 3) ==> [\"Mary\", \"lamb\"] select_words \"simple white space\", 2) ==> [] select_words \"Hello world\", 4) ==> [\"world\"] select_words \"Uncle sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"আপুনি এটা শব্দ দিয়া হৈছে। আপোনাৰ কাম হ'ল শব্দটোৰ সোঁফালে থকা দুটা স্বৰবৰ্ণৰ মাজত থকা আটাইতকৈ ওচৰৰ স্বৰবৰ্ণটো (কেছ সেনচিটিভ) বিচাৰি উলিওৱা। আৰম্ভণি আৰু শেষৰ স্বৰবৰ্ণবোৰ গণনা কৰা নহয়। যদি আপুনি উপৰোক্ত চৰ্ত পূৰণ কৰা কোনো স্বৰবৰ্ণ নাপায় তেন্তে খালী শাৰী ঘূৰাই পঠিয়াওক। আপুনি ধাৰণা কৰিব পাৰে যে প্ৰদান কৰা শাৰীত কেৱল ইংৰাজী আখৰ আছে। উদাহৰণঃ get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''আপুনি দুটা ষ্ট্ৰিংৰ এখন তালিকা দিয়া হৈছে, দুয়োটা ষ্ট্ৰিং কেৱল খোলা বন্ধনী '(' বা বন্ধনী ') 'ৰে গঠিত। আপোনাৰ কাম হ'ল দুটা ষ্ট্ৰিংক কিছুমান ক্ৰমত সংযুক্ত কৰাটো সম্ভৱ নে, পৰীক্ষা কৰা, যাতে ফলস্বৰূপে ষ্ট্ৰিং ভাল হয়। এটা ষ্ট্ৰিং S ভাল বুলি গণ্য কৰা হয় যদি আৰু কেৱল যদি S ৰ সকলো বন্ধনী ভাৰসাম্যপূৰ্ণ হয়। উদাহৰণস্বৰূপেঃ ষ্ট্ৰিং '((()) ' ভাল, আনহাতে ষ্ট্ৰিং '()) ' নহয়। যদি এটা ভাল ষ্ট্ৰিং কৰাৰ উপায় আছে, তেন্তে 'হয়' ঘূৰাই দিয়ক, আৰু অন্যথা 'নহয়' ঘূৰাই দিয়ক। উদাহৰণঃ match_parens[('() ', ') ']) == 'হয়' match_parens[(') ', ') ']) == 'নহয়' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"এটা অক্ষৰ আৰু এটা ধনাত্মক অক্ষৰ দিয়া হৈছে, এটা তালিকা দিয়া হৈছে, যাৰ দৈৰ্ঘ্য k আৰু ইয়াৰ সৰ্বাধিক সংখ্যা k। উদাহৰণঃ ইনপুটঃ arr = [-3, -4, 5], k = 3 আউটপুটঃ [-4, -3, 5] উদাহৰণঃ ইনপুটঃ arr = [4, -4, 4], k = 2 আউটপুটঃ [4, 4] উদাহৰণঃ ইনপুটঃ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 আউটপুটঃ [2] টোকাঃ 1. অক্ষৰটোৰ দৈৰ্ঘ্য হ'ব [1, 1000]ৰ ভিতৰত। 2. অক্ষৰটোৰ উপাদানসমূহ হ'ব [-1000, 1000]ৰ ভিতৰত। 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"এটা অ-খালি পূৰ্ণসংখ্যাৰ তালিকা দিয়া হৈছে, সম-অৱস্থানত থকা সকলো বিৰল উপাদানৰ যোগফল ঘূৰাই দিয়া হ'ব। উদাহৰণ সমাধান (([5, 8, 7, 1]) ==> 12 সমাধান (([3, 3, 3, 3, 3]) ==> 9 সমাধান (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"এটা অ-খালি অংক আৰু এটা অংক k দিয়া হৈছে, arr ৰ প্ৰথম k অংকসমূহৰ পৰা সৰ্বাধিক দুটা অংক থকা অংকবোৰৰ যোগফলটো ঘূৰাই দিয়া। উদাহৰণঃ ইনপুটঃ arr = [111,21,3,4000,5,6,7,8,9], k = 4 আউটপুটঃ 24 # sum of 21 + 3 constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"এটা ধনাত্মক n সংখ্যা দিয়া হ'লে, এটা ক্ৰমবিন্যাস কৰা তালিকা ঘূৰাই দিয়া হয় য'ত ক'লাটজ ক্ৰমত অদ্ভুত সংখ্যা থাকে। ক'লাটজ অনুমান হৈছে গণিতৰ এটা অনুমান য'ত এটা ক্ৰম নিম্নলিখিত ধৰণেৰে নিৰ্ধাৰণ কৰা হয়ঃ যিকোনো ধনাত্মক n সংখ্যাৰে আৰম্ভ কৰক। তাৰ পিছত প্ৰতিটো পদ পূৰ্বৱৰ্তী পদৰ পৰা নিম্নলিখিত ধৰণে পোৱা যায়ঃ যদি পূৰ্বৱৰ্তী পদটো জোৰা হয়, তেন্তে পৰৱৰ্তী পদটো পূৰ্বৱৰ্তী পদৰ আধা হয়। যদি পূৰ্বৱৰ্তী পদটো বিজোৰা হয়, তেন্তে পৰৱৰ্তী পদটো পূৰ্বৱৰ্তী পদটোৰ 3 গুণ আৰু 1 যোগ হয়। অনুমানটো হ'ল যে n ৰ মান যিমানেই নহওক, ক্ৰমটো সদায় 1 লৈ যাব। টোকাঃ 1. Collatz (((1) [1]। 2. ঘূৰাই দিয়া তালিকা ক্ৰমান্বয়ে বাঢ়ি অহা ক্ৰমত বাঢ়ি যায়। উদাহৰণস্বৰূপেঃ get_odd_collatz ((5) [1, 5] 5 ৰ বাবে ক'লাটজ ক্ৰম হৈছে [5, 8, 16, 4, 2, 1], সেয়ে বিজোৰা সংখ্যাসমূহ কেৱল 1, আৰু 5 \"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"আপুনি এটা ফাংচন লিখিব লাগিব যিয়ে এটা নিৰ্দিষ্ট তাৰিখৰ ষ্ট্ৰিংক বৈধতা প্ৰদান কৰে আৰু যদি তাৰিখটো বৈধ হয় তেন্তে True ঘূৰাই দিয়ে অন্যথা False। তাৰিখটো বৈধ হ'ব যদি তলত দিয়া সকলো নিয়ম পূৰণ কৰা হয়ঃ 1. তাৰিখৰ ষ্ট্ৰিং খালী নহয়। 2. মাহৰ বাবে দিনৰ সংখ্যা ১ ৰ পৰা কম বা ৩১ দিনৰ পৰা অধিক নহয়। আৰু মাহৰ বাবে দিনৰ সংখ্যা ১ ৰ পৰা কম বা ৩০ দিনৰ পৰা অধিক নহয়। ৪,৬,৯,১১। আৰু মাহৰ বাবে দিনৰ সংখ্যা ১ ৰ পৰা কম বা ২৯ ৰ পৰা অধিক নহয়। ৩. মাহৰ সংখ্যা ১ ৰ পৰা কম বা ১২ ৰ পৰা অধিক হ'ব নালাগে। ৪. তাৰিখটো ফৰ্মেটত হ'ব লাগিবঃ mm-dd-yyyy উদাহৰণস্বৰূপেঃ valid_date (০৩-১-১০০০) => true_date (০১-১৫-২০১২) => false_date (০৪-২০৪০) => false_date (০৬-০৪-২০২০) => true_date (০৬-০৪-২০২০)\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''এটা শব্দৰ শৃংখলা দিয়া হৈছে, শূন্যস্থানত বিভাজিত শব্দৰ তালিকা ঘূৰাই দিব, যদি কোনো শূন্যস্থান নাই পাঠত আপুনি কমা ','ত বিভাজিত কৰিব লাগিব যদি কোনো কমা নাই আপুনি বৰ্ণমালাত অস্বাভাৱিক ক্ৰমত সৰু আখৰসমূহৰ সংখ্যা ঘূৰাই দিব লাগিব, ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 উদাহৰণ বিভাজিত_শব্দসমূহ ((\"হেলো ৱৰ্ল্ড! \") â -> [\"হেলো\", \"ৱৰ্ল্ড! \") বিভাজিত_শব্দসমূহ ((\"হেলো, ৱৰ্ল্ড! \") â -> [\"হেলো\", \"ৱৰ্ল্ড! \") _ বিভাজিত_শব্দসমূহ ((\"abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''এটা সংখ্যাৰ তালিকা দিয়া হৈছে, সেইবোৰ ক্ৰমান্বয়ে বাছনি কৰা হৈছে নে নাই তাক ঘূৰাই দিব। যদি তালিকাত একে সংখ্যাৰ 1 ৰো অধিক সদৃশ আছে, তেন্তে False ঘূৰাই দিব। কোনো ঋণাত্মক সংখ্যা আৰু কেৱল পূৰ্ণ সংখ্যা ধৰা হ'ব। উদাহৰণ is_sorted ([1, 2, 3, 4, 5])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"আপুনি দুটা অন্তৰাল দিয়া হৈছে, য'ত প্ৰতিটো অন্তৰাল এটা পূৰ্ণসংখ্যাৰ জোৰা। উদাহৰণ স্বৰূপে, অন্তৰাল = (আৰম্ভ, অন্ত) = (1, 2) । দিয়া অন্তৰালবোৰ বন্ধ কৰা হৈছে যাৰ অৰ্থ হৈছে যে অন্তৰাল (আৰম্ভ, অন্ত) ত আৰম্ভণি আৰু অন্ত অন্ত অন্ত অন্তৰ্ভুক্ত থাকে। প্ৰতিটো অন্তৰালৰ বাবে, এইটো ধাৰণা কৰা হয় যে ইয়াৰ আৰম্ভণি ইয়াৰ অন্তৰালৰ সমান বা কম। আপোনাৰ কাম হ'ল এই দুটা অন্তৰালৰ ছেদটোৰ দৈৰ্ঘ্য এটা অগ্ৰ সংখ্যা হয় নে নহয় নিৰ্ণয় কৰা। উদাহৰণ স্বৰূপে, অন্তৰাল (1, 3), (2, 4) ৰ ছেদ (2, 3) যি ইয়াৰ দৈৰ্ঘ্য 1 আৰু যিটো অগ্ৰ সংখ্যা নহয়। যদি ছেদটোৰ দৈৰ্ঘ্য এটা অগ্ৰ সংখ্যা হয়, \"YES\" ঘূৰাই দিয়ক, অন্যথা, \"NO\" ঘূৰাই দিয়ক। যদি দুটা অন্তৰাল ছেদ নহয়, \"NO\" ঘূৰাই দিয়ক। [input/output] নমুনাসমূহঃ intersection ([i], (ii, (ii, (iii)) \"intersection (i, (ii, (iii)) \"intersection (ii, (iii, (iii), \"intersection (iii, (iii, (iii), \"i, (iii, (iii, (iii, (iii)) \"yes)) \"\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"আপুনি এটা এৰেজ দিয়া হৈছে আৰু আপুনি এৰেজত থকা প্ৰতিটো সংখ্যাৰ সকলো চিনৰ উৎপাদনৰ যোগফলৰ সৈতে পূৰ্ণসংখ্যাৰ যোগফল ঘুৰাই দিব লাগিব, যাৰ প্ৰতিনিধিত্ব কৰে ১, -১ বা ০। টোকাঃ খালী এৰেজৰ বাবে একো ঘূৰাই নাপাব। উদাহৰণঃ >>> prod_signs (([১, ২, ২, -৪) == -৯ >>> prod_signs (([০, ১]) ==  None\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N শাৰী আৰু N কলাম (N >= 2) আৰু এটা ধনাত্মক অখণ্ড সংখ্যা k থকা এটা গ্ৰীড দিয়া হ'লে গ্ৰীডৰ প্ৰতিটো কোষত এটা মান থাকে। [1, N * N] অন্তৰ্ভুক্ত সীমাৰ প্ৰতিটো অখণ্ড সংখ্যা গ্ৰীডৰ কোষত একেবাৰে এবাৰহে দেখা যায়। আপুনি গ্ৰীডৰ যিকোনো কোষৰ পৰা আৰম্ভ কৰিব পাৰে, আৰু প্ৰতিটো পদক্ষেপত আপুনি চুবুৰীয়া কোষৰ যিকোনো এটা কোষলৈ যাব পাৰে, অন্য কথাত, আপুনি আপোনাৰ বৰ্তমানৰ কোষৰ সৈতে এটা প্ৰান্ত ভাগ কৰি ল'ব পাৰে। অনুগ্ৰহ কৰি মন কৰক যে k দৈৰ্ঘ্যৰ এটা পথৰ অৰ্থ হৈছে একেবাৰে k কোষ (অৱশ্যকভাৱে পৃথক নহয়) পৰিদৰ্শন কৰা। আপুনি গ্ৰীডৰ পৰা যাব নোৱাৰে। A (k দৈৰ্ঘ্যৰ) এটা পথক B (k দৈৰ্ঘ্যৰ) ৰ পৰা সৰু বুলি গণ্য কৰা হয় যদি A আৰু B (আহক আমি তেওঁলোকক l_st আৰু l_stA বুলি কওঁ), l_stA বুলি কওঁ, শব্দাৰ্থিকভাৱে l_stAতকৈ সৰু হয়, অন্য কথাত, এটা অখণ্ড সংখ্যা k ৰ পৰা আৰম্ভ কৰিব পাৰে। আপুনি যিকোনো কোষৰ পৰা আৰম্ভ কৰিব পাৰে, আৰু প্ৰতিটো পদক্ষেপত আপুনি চুবুৰ কোষলৈ যাব পাৰে, অন্য কথাত, আপুনি বৰ্তমানৰ কোষৰ সৈতে একে প্ৰান্তৰে থকা কোষৰ কোনো কোষলৈ যাব পাৰে। অনুগ্ৰহ কৰি মন কৰক যে k দৈৰ্ঘ্য k (অৱত একেবাৰে k কোষৰ পৰা পৃথক নহয়) মানে একেবাৰে k কোষৰ পৰা একে নহয় (অৱেই পৃথক) । আপুনি গ্ৰীডৰ পৰা যাব নোৱাৰে গ্ৰীডৰ পৰা যাব নোৱাৰে। আপুনি গ্ৰীডৰ পৰা যাব নোৱাৰে গ্ৰীডৰ পৰা বাহিৰলৈ যাব নোৱাৰে। এটা পথ A (k (k দৈৰ্ডৰ দৈৰ্ডৰ দৈৰ্ঘ্য) A (k) A (k (k) (ৰ দৈৰ্ডৰ এটা পথক পথক পথক B (ৰ পৰা B (ৰ পৰা) (ল পথতকৈ সৰু বুলি গণ্য) পথক পথক পথতকৈ সৰু বুলি গণ্য কৰা হ'লে পথ B (Ret) পথৰ পৰা B (Ret) পথৰ পৰা B (Ret পথৰ পৰা B (Ret) পথৰ পৰা B (Ret) পথৰ পৰা B (Ret)\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ফিব'নাচ্চি ক্ৰমক সকলোৱে জানে, ইয়াক গণিতজ্ঞসকলে বিগত দুশ বছৰ ধৰি অধ্যয়ন কৰি আহিছে। কিন্তু মানুহে নাজানে ট্ৰিব'নাচ্চি ক্ৰম। ট্ৰিব'নাচ্চি ক্ৰমৰ সংজ্ঞা হ'ল পুনৰাবৃত্তিঃ ত্ৰি (১) = ৩ ত্ৰি (২) = ১ + এন / ২, যদি এন জোৰা হয়। ত্ৰি (২) = ত্ৰি (১) + ত্ৰি (২) = ২ / ২) + ত্ৰি (২) + এন + ১, যদি এন অস্বাভাৱিক হয়। উদাহৰণস্বৰূপেঃ ত্ৰি (২) = ১ + (২ / ২) = ২ ত্ৰি (৪) = ৩ ত্ৰি (৩) = ত্ৰি (২) + ত্ৰি (১) + ত্ৰি (৪) = ২ + ৩ + ৩ = ৮। আপোনাক এটা অ-বিয়োগাত্মক পূৰ্ণ সংখ্যা n দিয়া হৈছে, আপুনি ট্ৰিব'নাচ্চি ক্ৰমৰ প্ৰথম n + 1 সংখ্যাৰ এখন তালিকা ঘূৰাই দিব লাগিব। উদাহৰণঃ ত্ৰি (৩) = [১, ৩, ২, ৮]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"এটা ধনাত্মক অখণ্ড সংখ্যা n দিয়া হ'লে, অদ্ভুত অংকবোৰৰ উৎপাদনৰ সংখ্যা ঘূৰাই দিব। যদি সকলো অংক জোৰা হয় তেন্তে 0 ঘূৰাই দিব। উদাহৰণস্বৰূপেঃ অংকসমূহ (ক) == 1 অংক (খ) == 0 অংক (খ) == 235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''এটা ফাংচন সৃষ্টি কৰক যি কেৱল বৰ্গাক্ৰেট থকা এটা ষ্ট্ৰিংক ইনপুট হিচাপে গ্ৰহণ কৰে। ফাংচনে সত্য প্ৰত্যাহাৰ কৰিব লাগে যদি আৰু কেৱল যদিহে ব্ৰেকেটৰ এটা বৈধ উপসৰ্গ থাকে য'ত উপসৰ্গটোত কমেও এটা ব্ৰেকেট এনষ্টেড থাকে। is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]]]]'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"আপুনি এটা সংখ্যাৰ তালিকা দিয়া হৈছে। আপুনি দিয়া তালিকাত থকা সংখ্যাৰ স্কোৱাডৰ যোগফল ঘূৰাই দিব লাগিব, তালিকাৰ প্ৰতিটো উপাদানৰ ওপৰত প্ৰথমে ৰাউণ্ড কৰিব লাগিব। উদাহৰণঃ lst = [1,2,3] ৰ বাবে আউটপুট হ'ব 14 lst = [1,4,9] ৰ বাবে আউটপুট হ'ব 98 lst = [1,3,5,7] ৰ বাবে আউটপুট হ'ব 84 lst = [1.4,4.2,0] ৰ বাবে আউটপুট হ'ব 29 lst = [-2.4,1,1] ৰ বাবে আউটপুট হ'ব 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''এটা ফাংচন সৃষ্টি কৰক যি True ৰিটাৰ্ণ কৰে যদি এটা নিৰ্দিষ্ট ষ্ট্ৰিংৰ শেষ চিহ্নটো এটা বৰ্ণমালাৰ চিহ্ন হয় আৰু এটা শব্দৰ অংশ নহয়, আৰু অন্যথা False। টোকাঃ \"word\" হ'ল চিহ্নৰ এটা গোট যিটো স্পেচৰে পৃথক কৰা হয়। উদাহৰণঃ check_if_last_char_is_a_letter\" (আপল পাই) -> False check_if_last_char_is_a_letter\" (আপল পাই ই) -> True check_if_last_char_is_a_letter\" (আপল পাই ই) -> False check_if_last_char_is_a_letter\" (আপল পাই ই)'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"এটা ফাংচন সৃষ্টি কৰক যি এটা উপাদানৰ সৰ্ববৃহৎ সূচকটো ঘূৰাই দিয়ে যিটো তৎক্ষণাৎ ইয়াৰ পূৰ্বৱৰ্তী উপাদানৰ সমান বা তাতকৈ ডাঙৰ নহয়। যদি এনে কোনো উপাদানৰ অস্তিত্ব নাই তেন্তে -1 ঘূৰাই দিয়ক। প্ৰদান কৰা এৰেটোত নকল মান থাকিব নোৱাৰিব। উদাহৰণঃ can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''এটা ফাংচন সৃষ্টি কৰক যি এটা টুপল (a, b) ঘূৰাই আনে, য'ত 'a' হৈছে এটা তালিকাৰ আটাইতকৈ ডাঙৰ ঋণাত্মক পূৰ্ণ সংখ্যা, আৰু 'b' হৈছে আটাইতকৈ সৰু ধনাত্মক পূৰ্ণ সংখ্যা। যদি কোনো ঋণাত্মক বা ধনাত্মক পূৰ্ণ সংখ্যা নাই, তেন্তে সেইবোৰ None হিচাপে ঘূৰাই দিয়ক। উদাহৰণঃ largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"এটা ফাংচন সৃষ্টি কৰক যি বাস্তৱ সংখ্যা, ফ্ল'ট বা ষ্ট্ৰিং গ্ৰহণ কৰে আৰু ইয়াৰ নিৰ্দিষ্ট ভেৰিয়েবল প্ৰকাৰৰ বৃহত্তৰ ভেৰিয়েবলটো ঘূৰাই দিয়ে। মানবোৰ সমান হ'লে নাই ঘূৰাই দিয়ে। টোকাঃ যদি বাস্তৱ সংখ্যা এটা ষ্ট্ৰিং হিচাপে প্ৰতিনিধিত্ব কৰা হয়, ফ্ল'টিং পইণ্ট হ'ব পাৰে . বা , compare_one, 1.2) -> 2.5) -> 2.5 compare_one, \"2,3\") -> \"2,3\" compare_one, \"5,1\", \"6\") -> \"6\" compare_one, \"1\", 1) -> নাই \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"নিৰ্দিষ্ট সংখ্যা n ক সঠিকভাৱে 4 টা ধনাত্মক সম সংখ্যাৰ যোগফল হিচাপে লিখিব পাৰি নেকি তাৰ মূল্যায়ন কৰা । উদাহৰণ is_equal_to_sum_even (৪) == মিছা is_equal_to_sum_even (৬) == মিছা is_equal_to_sum_even (৮) == সত্য ।\"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ব্ৰাজিলিয়ান ফেক্টৰিয়েলক এনেদৰে সংজ্ঞায়িত কৰা হয়: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! য'ত n > 0 উদাহৰণস্বৰূপেঃ >>> special_factorial(4) 288 ফাংচনে এটা সম্পূৰ্ণ সংখ্যা ইনপুট হিচাপে গ্ৰহণ কৰিব আৰু এই সম্পূৰ্ণ সংখ্যাৰ বিশেষ ফেক্টৰিয়েল ঘূৰাই দিব লাগিব।\"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_উদাহৰণ-3ট দিয়া হ'লে, তাত থকা সকলো স্পেচ আণ্ডাৰস্ক'ৰেৰে সলনি কৰক, আৰু যদি এটা ষ্ট্ৰিংত 2 টাতকৈ অধিক ক্ৰমাগত স্পেচ থাকে, তেন্তে সকলো ক্ৰমাগত স্পেচক - fix_spaces ((\"উদাহৰণ\") == \"উদাহৰণ\" fix_spaces ((\"উদাহৰণ1\") == \"উদাহৰণ1\" fix_spaces ((\"উদাহৰণ2\") == \"_উদাহৰণ2\" fix_spaces ((\"উদাহৰণ 3\") == \"_উদাহৰণ-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"এটা ফাংচন সৃষ্টি কৰক যিয়ে এটা ফাইলৰ নাম প্ৰতিনিধিত্ব কৰা এটা ষ্ট্ৰিং লয়, আৰু যদি ফাইলৰ নাম বৈধ হয়, তেন্তে 'হয়' ৰিটাৰ্ণ কৰে, আৰু অন্যথা 'নহয়' ৰিটাৰ্ণ কৰে। এটা ফাইলৰ নাম বৈধ বুলি বিবেচনা কৰা হয় যদিহে আৰু কেৱল যদিহে তলৰ সকলো চৰ্ত পূৰণ হয়ঃ - ফাইলৰ নামত তিনিটাতকৈ অধিক অংক ('0'-'9') থাকিব নালাগে। - ফাইলৰ নামত একেবাৰে এটা বিন্দু '.' থাকিব নালাগে। - বিন্দুৰ আগত থকা ছাবষ্ট্ৰিং খালী হ'ব নালাগে, আৰু ই লেটিন আলফাৰ পৰা এটা আখৰৰে আৰম্ভ হ'ব লাগে ('a'-'z' আৰু 'A'Z'-) । - বিন্দুৰ পিছত থকা ছাবষ্ট্ৰিং এইবোৰৰ এটা হ'ব লাগেঃ ['txt', 'exe', 'lld'] উদাহৰণঃ file_name_check\"{example.txt.t\") # => 'হয়' file_name_check\"{example.dll1} => 'নহয়' (# নামটো লেটিন আলফাৰ পৰা আৰম্ভ হ'ব লাগে)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" এই ফাংশনটোৱে এটা সম্পূৰ্ণ সংখ্যাৰ তালিকা ল'ব। তালিকাৰ সকলো এন্ট্ৰীৰ বাবে, ফাংশনটোৱে সম্পূৰ্ণ সংখ্যাৰ এন্ট্ৰিটো বৰ্গক্ষেত্ৰ কৰিব যদি ইয়াৰ সূচকটো 3 ৰ বহুবচন হয় আৰু যদি ইয়াৰ সূচকটো 4 ৰ বহুবচন নহয় আৰু 3 ৰ বহুবচন নহয় তেন্তে ই সম্পূৰ্ণ সংখ্যাৰ এন্ট্ৰিটো ঘন কৰিব। ফাংশনটোৱে তালিকাৰ এন্ট্ৰিসমূহ সলনি নকৰে যাৰ সূচকবোৰ 3 বা 4 ৰ বহুবচন নহয়। ফাংশনটোৱে তাৰ পিছত সকলো এন্ট্ৰীৰ যোগফল ঘূৰাই দিব। উদাহৰণঃ lst = [1,2,3] ৰ বাবে আউটপুট 6 হোৱা উচিত lst = [] ৰ বাবে আউটপুট 0 হোৱা উচিত lst = [-1,-5,2,-1,-5] ৰ বাবে আউটপুট -126 হোৱা উচিত \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"আপুনি এটা বাক্য প্ৰতিনিধিত্ব কৰা এটা শাৰী দিয়া হৈছে, শাৰীটোত কিছুমান শব্দ আছে যিটো এটা স্পেছৰ দ্বাৰা পৃথক কৰা হৈছে, আৰু আপুনি এটা শাৰী ঘূৰাই দিব লাগিব য'ত মূল বাক্যটোৰ পৰা শব্দবোৰ আছে, যাৰ দৈৰ্ঘ্য অগ্ৰ সংখ্যা, নতুন শাৰীত শব্দসমূহৰ ক্ৰম মূলটোৰ দৰে একেই হোৱা উচিত। উদাহৰণ১ঃ ইনপুটঃ বাক্য = \"এইটো এটা পৰীক্ষা\" আউটপুটঃ \"এয়া\" উদাহৰণ২ঃ ইনপুটঃ বাক্য = \"চাওক সাঁতোৰৰ বাবে যাওঁক\" আউটপুটঃ \"go for\" সীমাবদ্ধতাঃ * ১ <= len(sentence) <= ১০০ * বাক্যটোত কেৱল আখৰহে আছে \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"আপোনাৰ কাম হৈছে এটা ফাংচন প্ৰয়োগ কৰা যি x * n এক্সপ্ৰেছনটো সৰল কৰিব। ফাংচনে True ৰিটাৰ্ণ কৰে যদি x * n এটা সম্পূৰ্ণ সংখ্যালৈ আৰু অন্যথা False। x আৰু n দুয়োটাই এটা ভগ্নাংশৰ স্ট্ৰিং প্ৰতিনিধিত্ব আৰু নিম্নলিখিত বিন্যাস আছে, <numerator>/<denominator> য'ত উভয় নম্বৰ আৰু নাম্বাৰ ধনাত্মক সম্পূৰ্ণ সংখ্যা। আপুনি ধাৰণা কৰিব পাৰে যে x, আৰু n বৈধ ভগ্নাংশ, আৰু নাম্বাৰ হিচাপে শূন্য নাই। সৰলকৰণ (s) \"1/5\", \"5/1\") = True সৰলকৰণ (s) \"1/6\", \"2/1\") = False সৰলকৰণ (s) \"7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"এটা ফাংচন লিখা যিয়ে সংখ্যাসমূহৰ তালিকাত সংখ্যাসমূহৰ যোগফলৰ ওপৰত ভিত্তি কৰি সংখ্যাসমূহৰ তালিকাখন ক্ৰমান্বয়ে বাছনি কৰে। টোকাঃ যদি বহুতো সংখ্যা আছে যিবোৰৰ সংখ্যাসমূহৰ যোগফল একে হয়, তেন্তে সেইবোৰক মূল তালিকাত থকা সূচীৰ ওপৰত ভিত্তি কৰি বাছনি কৰক। উদাহৰণস্বৰূপেঃ >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"এটা ফাংচন লিখা যি এটা সংখ্যাৰ এৰেক ইনপুট হিচাপে লয় আৰু এৰেৰ 10 ৰ অধিক সংখ্যক উপাদানৰ সংখ্যা ঘূৰাই দিয়ে আৰু এটা সংখ্যাৰ প্ৰথম আৰু শেষ অংক দুটা অস্বাভাৱিক (1, 3, 5, 7, 9) হয়। উদাহৰণস্বৰূপেঃ specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"আপুনি এটা ধনাত্মক পূৰ্ণ সংখ্যা n দিয়া হৈছে। আপুনি দৈৰ্ঘ্য n ৰ এটা পূৰ্ণ সংখ্যা এৰে সৃষ্টি কৰিব লাগিব। প্ৰতিটো i (1 ‰¤ i ‰¤ n) ৰ বাবে, a[i] = i * i - i + 1 ৰ মান। a ৰ ত্ৰিপল (a[i], a[j], a[k]) ৰ সংখ্যা ঘূৰাই আনা য'ত i < j < k, আৰু a[i] + a[j] + a[k] 3 ৰ গুণিতক। উদাহৰণঃ ইনপুটঃ n = 5 আউটপুটঃ 1 ব্যাখ্যাঃ a = [1, 3, 7, 13, 21] একমাত্ৰ বৈধ ত্ৰিপল হৈছে (1, 7, 13) ।\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''আমাৰ সৌৰজগতত আঠটা গ্ৰহ আছে: সূৰ্যৰ নিকটতম গ্ৰহ হৈছে বুধ, পৰৱৰ্তীটো হৈছে শুক্ৰ, তাৰ পিছত পৃথিৱী, মঙ্গল গ্ৰহ, বৃহস্পতি, শনি, ইউৰেনাছ, নেপচুন। এটা ফাংশন লিখক যিয়ে দুটা গ্ৰহৰ নাম গ্ৰহ1 আৰু গ্ৰহ2 হিচাপে লয়। ফাংশনটোৱে এটা টুপল ঘূৰাই দিব লাগে য'ত গ্ৰহ1 আৰু গ্ৰহ2ৰ কক্ষপথৰ মাজত অৱস্থিত সকলো গ্ৰহ থাকে, সূৰ্যৰ সান্নিধ্যৰ দ্বাৰা ছৰ্ট কৰা হয়। যদি গ্ৰহ1 বা গ্ৰহ2 সঠিক গ্ৰহ নাম নহয়, ফাংশনে এটা খালী টুপল ঘূৰাই দিব লাগে। উদাহৰণ bf\"(জুপীটাৰ\", \"নেপচুন\") ==> (\"শনি\", \"উৰেনাছ\") bf(\"আৰ্থ\", \"মাৰ্কুৰী\") ==> (\"ভেনুছ\", \"আৰ্থ\", \"মাৰ্ছ\", \"জুপীটাৰ\", \"চন্দ্ৰ\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"এটা ফাংচন লিখক যিয়ে এটা প্যারামিটাৰ হিচাপে ষ্ট্ৰিংৰ তালিকা গ্ৰহণ কৰে, ইয়াৰ পৰা অদ্ভুত দৈৰ্ঘ্যৰ ষ্ট্ৰিংসমূহ আঁতৰাই পেলায় আৰু ফলাফলৰ তালিকাক এটা ছৰ্ট কৰা ক্ৰমত ঘূৰাই আনে। তালিকাখন সদায় ষ্ট্ৰিংৰ তালিকা আৰু কেতিয়াও সংখ্যাৰ এৰে নহয়, আৰু ইয়াত ডুপ্লিকেট থাকিব পাৰে। তালিকাৰ ক্ৰমটো প্ৰতিটো শব্দৰ দৈৰ্ঘ্যৰ ওপৰত উঠিব লাগে, আৰু আপুনি সেই নিয়ম অনুসৰি ছৰ্ট কৰা তালিকাখন ঘূৰাই দিব লাগে। যদি দুটা শব্দৰ দৈৰ্ঘ্য একে হয়, তেন্তে তালিকাখনক বৰ্ণমালাৰ ভিত্তিত ছৰ্ট কৰক। ফাংচনে ছৰ্ট কৰা ক্ৰমত ষ্ট্ৰিংসমূহৰ তালিকা ঘূৰাই দিব লাগে। আপুনি ধাৰণা কৰিব পাৰে যে সকলো শব্দৰে দীঘ্য একে হ'ব। উদাহৰণস্বৰূপেঃ assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"cd\")\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"এটা সৰল প্ৰগ্ৰাম যি x ৰ মান ঘূৰাই দিব লাগে যদি n এটা মৌলিক সংখ্যা হয় আৰু y ৰ মান ঘূৰাই দিব লাগে অন্যথা। উদাহৰণঃ x_or_y (7, 34, 12) == 34 x_or_y (15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''এটা সংখ্যাৰ তালিকা দিয়া হৈছে, তালিকাত থকা অদ্ভুত সংখ্যাৰ স্কোৱাডৰ যোগফল ঘূৰাই দিব। ঋণাত্মক বা অখণ্ড সংখ্যাক উপেক্ষা কৰক। double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 যদি ইনপুট তালিকাটো খালী হয়, 0 ঘূৰাই দিব। '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"আপোনাৰ কাম হৈছে এটা ব্যক্তিয়ে বহু সংখ্যক মিলৰ ফলাফল সঠিকভাৱে অনুমান কৰিছে নে নাই সেয়া নিৰ্ণয় কৰা। আপোনাক দুটা সম দৈৰ্ঘ্যৰ স্ক'ৰ আৰু অনুমানৰ এৰেজ দিয়া হয়, য'ত প্ৰতিটো সূচকে মিল দেখুৱায়। প্ৰত্যেক অনুমান কিমান দূৰ আছিল সেয়া বুজোৱা একে দৈৰ্ঘ্যৰ এৰেজ ঘূৰাই দিয়ক। যদি তেওঁলোকে সঠিকভাৱে অনুমান কৰিছে, মানটো হ'ল 0, আৰু যদি নহয়, মানটো অনুমান আৰু স্ক'ৰৰ মাজৰ সম্পূৰ্ণ পাৰ্থক্য। উদাহৰণঃ (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] তুলনা কৰক ([0,5,0,4],[4,1,0,-2]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"আপুনি এটা শ্ৰেণীৰ নাম (এটা ষ্ট্ৰিং) আৰু সম্প্ৰসাৰণৰ তালিকা দিয়া হ'ব। সম্প্ৰসাৰণবোৰ শ্ৰেণীত অতিৰিক্ত শ্ৰেণীসমূহ লোড কৰিবলৈ ব্যৱহাৰ কৰা হ'ব। সম্প্ৰসাৰণৰ শক্তি তলত দিয়া ধৰণৰঃ CAP সম্প্ৰসাৰণৰ নামত থকা ডাঙৰ আখৰবোৰৰ সংখ্যা হওক, আৰু SM সম্প্ৰসাৰণৰ নামত থকা সৰু আখৰবোৰৰ সংখ্যা হওক, সম্প্ৰসাৰণৰ শক্তি CAP - SM ভগ্নাংশৰ দ্বাৰা দিয়া হ'ব। আপুনি আটাইতকৈ শক্তিশালী সম্প্ৰসাৰণটো বিচাৰি উলিয়াব লাগিব আৰু এই বিন্যাসত এটা ষ্ট্ৰিং ঘূৰাই দিব লাগিবঃ ClassName.StrongestExtensionName। যদি একে শক্তিৰ সৈতে দুটা বা ততোধিক সম্প্ৰসাৰণ আছে, আপুনি তালিকাত প্ৰথমতে অহাটো বাছনি কৰিব লাগিব। উদাহৰণস্বৰূপে, যদি আপোনাক শ্ৰেণী আৰু সম্প্ৰসাৰণৰ তালিকা হিচাপে \"Slices\" দিয়া হয়ঃ ['SEviviRNGSliCes', 'Cheese', 'StuFfed'] তেন্তে আপুনি 'Slices.SviRNGSliCes' ঘূৰাই দিব লাগিব যিহেতু 'SviRNGSliCes' (mySviRNGSliCes') সম্প্ৰসাৰণৰ শক্তিশালী (উদৃক্তিকৰণঃ '_AA'), উদাহৰণস্বৰূপে 'Class_Be' সম্প্ৰসাৰণৰ বাবে, 'AA' শক্তিশালী' সম্প্ৰসাৰণৰ বাবে।\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"আপোনাক 2 টা শব্দ দিয়া হৈছে। আপুনি True ঘূৰাই দিব লাগিব যদি দ্বিতীয় শব্দটো বা ইয়াৰ যিকোনো এটা ঘূৰ্ণন প্ৰথম শব্দটোৰ এটা উপশাৰী হয় cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check\"(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"এটা পূৰ্ণ সংখ্যা দিয়া হৈছে. এটা টুপল ঘূৰাই দিয়া হয় য'ত যথাক্ৰমে জোৰা আৰু অজৰা অংক থাকে। উদাহৰণঃ even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"এটা ধনাত্মক অখণ্ড সংখ্যা দিয়া হ'লে, ইয়াৰ ৰোমান সংখ্যা সমতুল্য এটা শাৰী হিচাপে প্ৰাপ্ত কৰক আৰু ইয়াক সৰু আখৰেৰে ঘূৰাই দিয়ক। সীমাবদ্ধতাঃ 1 <= num <= 1000 উদাহৰণঃ >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''এটা ত্ৰিভুজৰ তিনিটা পক্ষৰ দৈৰ্ঘ্য দিয়া হৈছে। যদি তিনিটা পক্ষই এটা সোঁকোণযুক্ত ত্ৰিভুজ গঠন কৰে, তেন্তে True ঘূৰাই দিয়ক, অন্যথা False। এটা সোঁকোণযুক্ত ত্ৰিভুজ হৈছে এটা ত্ৰিভুজ যাৰ এটা কোণ 90 ডিগ্ৰী হয়। উদাহৰণঃ right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"এটা ফাংচন লিখক যিয়ে এটা ষ্ট্ৰীঙৰ তালিকা গ্ৰহণ কৰে। তালিকাত বিভিন্ন শব্দ থাকে। সৰ্বাধিক সংখ্যক অনন্য বৰ্ণ থকা শব্দটো ঘূৰাই দিব। যদি একাধিক ষ্ট্ৰীঙত সৰ্বাধিক সংখ্যক অনন্য বৰ্ণ থাকে, তেন্তে যিটো শব্দকোষীয় ক্ৰমত প্ৰথম আহে তাক ঘূৰাই দিব। find_max (([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"আপুনি ক্ষুধাৰ্ত এটা কণী, আৰু আপুনি ইতিমধ্যে এটা নিৰ্দিষ্ট সংখ্যক গাজৰ খাইছে, কিন্তু এতিয়া আপুনি দিনটোৰ আহাৰ সম্পূৰ্ণ কৰিবলৈ আৰু অধিক গাজৰ খাব লাগে। আপুনি এটা এৰেজ ঘূৰাই দিব লাগে [ আপোনাৰ আহাৰৰ পিছত খোৱা গাজৰৰ মুঠ সংখ্যা, আপোনাৰ আহাৰৰ পিছত থকা গাজৰৰ সংখ্যা ] যদি পৰ্যাপ্ত বাকী গাজৰ নাথাকে, আপুনি বাকী থকা সকলো গাজৰ খাব, কিন্তু আপুনি এতিয়াও ভোকত থাকিব। উদাহৰণঃ * খাওক (৫, ৬, ১০) -> [11, 4] * খাওক (৪, ৮, ৯) -> [12, 1] * খাওক (১, ১০) -> [11, 0] * খাওক (২, ১১, ৫) -> [7, 0] ভেৰিবলঃ @number: আপুনি খোৱা গাজৰৰ সংখ্যা পূৰণ কৰক। @need: আপুনি খোৱাৰ প্ৰয়োজন হোৱা গাজৰৰ সংখ্যা পূৰণ কৰক। @remaining: বাকী থকা গাজৰসমূহত থকা বাকী থকা গাজৰ সংখ্যা পূৰণ কৰক। Constrain: * 0= <= 0 * 1000 = <= 1000 * 0 = <= 1000 = 1000 বাকী থকা গাজৰসমূহত থকা গাজৰসমূহত আছে = 1000 = 1000 মজা আছে:)\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"দুটা তালিকা অপাৰেটৰ আৰু অপাৰেণ্ড দিয়া হৈছে। প্ৰথম তালিকাত মৌলিক বীজগণিতৰ কাৰ্য্য আছে আৰু দ্বিতীয় তালিকাত সম্পূৰ্ণ সংখ্যাৰ তালিকা আছে। বীজগণিতৰ অভিব্যক্তি নিৰ্মাণ কৰিবলৈ আৰু এই অভিব্যক্তিৰ মূল্যায়ন ঘূৰাই দিবলৈ দুটা তালিকা ব্যৱহাৰ কৰক। মৌলিক বীজগণিতৰ কাৰ্য্যসমূহঃ সংযোজন (+) বিয়োগ (-)) গুণ (*) তল বিভাজন (//) বিভাজন (**) উদাহৰণঃ অপাৰেটৰ['+', '*', '-'] অৰে = [2, 3, 4, 5] ফলাফল = 2 + 3 * 4 - 5 => ফলাফল = 9 টোকাঃ অপাৰেটৰ তালিকাৰ দৈৰ্ঘ্য অপাৰেণ্ড তালিকাৰ দৈৰ্ঘ্যৰ সমান হ'ব। অপাৰেণ্ড হৈছে অ-নতিবাচক সম্পূৰ্ণ সংখ্যাৰ তালিকা। অপাৰেটৰ তালিকাত কমেও এটা অপাৰেটৰ আছে আৰু অপাৰেণ্ড তালিকাত কমেও দুটা অপাৰেণ্ড আছে।\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"যদি s[i] এটা আখৰ হয়, তেন্তে ইয়াৰ কেচ নিম্নৰ পৰা উচ্চলৈ বা বিপৰীতলৈ উলিয়াই লওক, অন্যথা একেদৰে ৰাখক। যদি ষ্ট্ৰিংটোত কোনো আখৰ নাথাকে, তেন্তে ষ্ট্ৰিংটো উলিয়াই লওক। ফাংশনটোৱে ফলাফল হোৱা ষ্ট্ৰিংটো ঘূৰাই দিব লাগিব। উদাহৰণ solve{\"1234\") = \"4321\" solve{\"ab\") = \"AB\" solve{\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"এটা 'text' স্ট্ৰিং দিয়া হ'লে, ইয়াৰ md5 হেশ্ব সমতুল্য স্ট্ৰিং ঘূৰাই দিব. যদি 'text' এটা খালী ষ্ট্ৰিং হয়, None ঘূৰাই দিব. >>> string_to_md5('হেল্লো ৱৰ্ল্ড') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "asm_Beng",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"দুটা ধনাত্মক অখণ্ড সংখ্যা a আৰু b দিয়া হ'লে, a আৰু b ৰ মাজৰ জোৰা সংখ্যাটো ক্ৰমান্বয়ে ঘূৰাই দিব। উদাহৰণস্বৰূপেঃ generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]