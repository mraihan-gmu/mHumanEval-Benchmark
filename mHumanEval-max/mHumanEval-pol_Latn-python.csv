task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,pol_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Sprawdź, czy w danej liście liczb, są jakieś dwie liczby bliżej siebie niż podany próg. Przykład: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,pol_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Wprowadzanie do tej funkcji jest ciągiem zawierającym wiele grup zagnieżdżonych nawiasów. Twoim celem jest rozdzielenie tych grup na oddzielne ciągi i zwrot listy tych. Oddzielne grupy są zrównoważone (każde otwarte nawias jest prawidłowo zamknięte) i nie zagnieżdżone w sobie. Zignoruj wszelkie przestrzenie w ciągu wejściowym. Przykład: >>> separate_paren_groups' ((( ) (() ((( ) ) ) ' ['() ', '(()) ', '((()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,pol_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Przykładowo: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,pol_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Twoim zadaniem jest wykrycie, czy w jakimkolwiek momencie saldo konta spada poniżej zera, a w tym momencie funkcja powinna zwrócić wartość True. W przeciwnym razie powinna zwrócić wartość False. Przykład: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,pol_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Dla danej listy liczb wejściowych oblicz średnie absolutne odchylenie wokół średniej tego zestawu danych. Średnie absolutne odchylenie jest średnią absolutną różnicą między każdym elementem a punktem środkowym (średnia w tym przypadku): MAD = średnia ⋅ x - x_średnia ⋅ Przykład: >>> średnia_absolutna_odchylenie ⋅ [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,pol_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Wstawić liczbę ""delimiter"" pomiędzy dwoma kolejnymi elementami listy danych wejściowych `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,pol_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Wprowadzanie do tej funkcji jest ciągiem reprezentowanym przez wiele grup dla zagnieżdżonych nawiasów oddzielonych spacjami. Dla każdej z grup wydaj najgłębszy poziom zagnieżdżenia nawiasów. Na przykład (() (()) ma maksymalnie dwa poziomy zagnieżdżenia, podczas gdy ((())) ma trzy. >>> parse_nested_parens('((()) ((())) () (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,pol_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filtruj listę wprowadzonych ciągów tylko dla tych, które zawierają podstronę >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,pol_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Dla danej listy liczb całkowitych, zwraca tuple składające się z sumy i iloczyn wszystkich liczb całkowitych na liście. Pusta suma powinna być równa 0 a pusta iloczyn powinna być równa 1. >>> sum_produkt (([]) (0, 1) >>> sum_produkt (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,pol_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Z podanej listy liczb całkowitych wygeneruje listę największych elementów znajdujących się do danego momentu w sekwencji. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,pol_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Znajdź najkrótszy palindrom, który zaczyna się od podanego ciągów. Pomysł algorytmu jest prosty: - Znajdź najdłuższy postfix podanego ciągu, który jest palindromem. - Dodaj do końca ciągu odwrotny prefiksu ciągu, który pojawia się przed sufiksem palindromicznym. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('catac') ' >>> make_palindrome ((('catac') ' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Sprawdź, czy dany ciąg jest palindromem.""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,pol_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Wprowadzone są dwa ciągi a i b składające się tylko z 1 i 0. Wykonaj binarny XOR na tych wejściach i zwróć wynik również jako ciąg. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,pol_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""W przypadku wielu ciągów o tej samej długości należy zwrócić pierwszy z listy ciągów. W przypadku pustych ciągów należy zwrócić zero. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,pol_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Zwróć największy wspólny dzielnik dwóch liczb całkowitych a i b >>> największy_powszechny_dzieliciel ((3, 5) 1 >>> największy_powszechny_dzieliciel ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,pol_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Wykaz wszystkich prefiksów od najkrótszego do najdłuższego z łańcucha danych wejściowych >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,pol_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Zwraca ciąg zawierający liczby z ograniczoną przestrzenią od 0 do n włącznie. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,pol_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Po podaniu ciągów, dowiedz się, ile różnych znaków (niezależnie od przypadku) zawiera >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,pol_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Wprowadzanie do tej funkcji jest struna reprezentująca nuty muzyczne w specjalnym formacie ASCII. Twoim zadaniem jest analizowanie listy strun z liczbami całkowitymi odpowiadających wielu uderzeniom. Oto legenda: 'o' - notatka, ostatnie uderzenia 'o' - pół noty, ostatnie dwa uderzenia 'o' - czwarte noty, ostatnie jeden uderzenie >>> parse_music. 'o' .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,pol_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Znajdź, ile razy dany podstron można znaleźć w pierwotnym ciągu. Licz pokrywające się przypadki. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,pol_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Wprowadzony jest ciąg liczbowy z liczbami od ""zero"" do ""dziewięciu"". Właściwe wybory to ""zero"", ""jeden"", ""dwa"", ""trzy"", ""cztery"", ""pięć"", ""sześć"", ""siedem"", ""ośmiu"" i ""dziewięć"". Zwraca ciąg z liczbami sortowanymi od najmniejszej do największej >>> sort_numbers (('trzy jeden pięć') 'one trzy pięć' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,pol_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Z dostarczonej listy liczb (o długości co najmniej dwóch) wybierz i zwróć dwie, które są najbliżej siebie i zwróć je w kolejności (mniejsza liczba, większa liczba). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,pol_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Po podaniu listy liczb (co najmniej dwóch elementów), zastosować transformację liniową do tej listy, tak, że najmniejsza liczba stanie się 0 a największa stanie się 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,pol_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filtruj daną listę dowolnych wartości pythonowych tylko dla liczb całkowitych >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,pol_Latn,python,"

def strlen(string: str) -> int:
    """"""Długość zwrotu danego ciągu >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,pol_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Dla danej liczby n, znajdź największą liczbę, która dzieli n równomiernie, mniejszą niż n >>> największy_dzieliciel ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,pol_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Wraca lista czynników pierwszych danej liczby całkowitej w kolejności od najmniejszej do największej. Każdy z czynników powinien być wymieniony liczbą razy odpowiadającą liczbie razy, w których pojawia się w rozkładzie na czynniki. Liczba wejściowa powinna być równa iloczności wszystkich czynników >>> rozkładaj na czynniki ((8) [2, 2, 2] >>> rozkładaj na czynniki ((25) [5, 5] >>> rozkładaj na czynniki ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,pol_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Z listy liczb całkowitych usuwaj wszystkie elementy, które występują więcej niż raz. Utrzymuj kolejność elementów pozostawionych taką samą jak w wejściu. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,pol_Latn,python,"

def flip_case(string: str) -> str:
    """"""W przypadku danego ciągu, przewróć małe znaki na duże i duże na małe. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,pol_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Lista ciągów w pojedynczej ciągówce >>> wciągać (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (concatenate) (conc) (conc)""""""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,pol_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filtruj listę wprowadzonych ciągów tylko dla tych, które zaczynają się od danego prefiksu. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,pol_Latn,python,"

def get_positive(l: list):
    """"""Zwróć tylko liczby dodatnie na liście. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,pol_Latn,python,"

def is_prime(n):
    """"""Zwraca wartość true, jeśli dana liczba jest liczbą pierwszą, i false, jeśli nie. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,pol_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs są współczynniki wielomianu. find_zero find x taki, że poly(x) = 0. find_zero zwraca tylko tylko punkt zerowy, nawet jeśli jest ich wiele. Co więcej, find_zero bierze tylko listę xs mającą równo liczbę współczynników i największy współczynnik niezerowy, ponieważ gwarantuje rozwiązanie. >>> okrągły (((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> okrągły (((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Ocenia wielomian z współczynnikiem xs w punkcie x. zwraca xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,pol_Latn,python,"

def sort_third(l: list):
    """"""Ta funkcja bierze listę l i zwraca listę l' tak, że l' jest identyczna z l w indeksach, które nie są podzielne przez trzy, podczas gdy jego wartości w indeksach, które są podzielne przez trzy, są równe wartościom odpowiednich indeksach l, ale sortowane. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,pol_Latn,python,"

def unique(l: list):
    """"""Zwraca sortowane unikalne elementy na liście >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,pol_Latn,python,"

def max_element(l: list):
    """"""Zwraca maksymalny element w liście. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,pol_Latn,python,"

def fizz_buzz(n: int):
    """"""Zwróć liczbę razy, w których cyfrę 7 występuje w liczbach całkowitych mniejszych niż n, które są podzielne przez 11 lub 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,pol_Latn,python,"

def sort_even(l: list):
    """"""Ta funkcja bierze listę l i zwraca listę l' tak, że l' jest identyczna z l w nieparzystych indeksach, podczas gdy jej wartości w parzystych indeksach są równe wartościom parzystych indeksach l, ale sortowane. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,pol_Latn,python,"

def encode_cyclic(s: str):
    """"""przyjmuje jako wejście kod kod kodujący się funkcją encode_cyclic. Zwraca dekodowany kod. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""zwraca zakodowany ciąg w grupach cyklicznych trzech znaków. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,pol_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib zwraca n-tą liczbę, która jest liczbą Fibonacciego i jest również liczbą pierwszą. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,pol_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero bierze listę liczb całkowitych jako dane wejściowe. zwraca wartość True, jeśli na liście są trzy różne elementy, których suma wynosi zero, i False w przeciwnym razie. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,pol_Latn,python,"

def car_race_collision(n: int):
    """"""Wyobraź sobie drogę, która jest nieskończenie długą linią. n samochodów jedzie z lewej na prawą; jednocześnie inny zestaw n samochodów jedzie z prawej na lewą. Dwa zestawy samochodów zaczynają odległe od siebie. Wszystkie samochody poruszają się z tą samą prędkością. Dwa samochody zderzają się, gdy samochód poruszający się z lewej na prawą uderza w samochód poruszający się z prawej na lewą. Jednak samochody są nieskończenie solidne i silne; w rezultacie, nadal poruszają się w swojej trajektorii, jakby się nie zderzyły. Ta funkcja wyświetli liczbę takich zderzeń.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,pol_Latn,python,"

def incr_list(l: list):
    """"""Wykaz zwrotny z elementami zwiększonymi o 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,pol_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero bierze listę liczb całkowitych jako dane wejściowe. zwraca wartość True, jeśli na liście znajdują się dwa różne elementy, których suma wynosi zero, i False w przeciwnym razie. >>> pairs_sum_to_zero([1, 3, -2, 1]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,pol_Latn,python,"

def change_base(x: int, base: int):
    """"""Zmiana podstawy numerycznej wejściowej liczby x na podstawę. Zwrot reprezentacji ciągów po konwersji. Liczby podstawy są mniejsze niż 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,pol_Latn,python,"

def triangle_area(a, h):
    """"""Poziom długości boku i najwyższej powierzchni powrotu trójkąta. >>> trójkąt_poziom (5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,pol_Latn,python,"

def fib4(n: int):
    """"""Sekwencja liczb Fib4 jest sekwencją podobną do sekwencji Fibbonacciego, która jest zdefiniowana w następujący sposób: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Proszę napisać funkcję, aby skutecznie obliczyć n-ty element sekwencji liczb fib4. Nie używaj rekurencji. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,pol_Latn,python,"

def median(l: list):
    """"""Mediana zwrotu elementów z listy l. >>> mediana (([3, 1, 2, 4, 5]) 3 >>> mediana (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,pol_Latn,python,"

def is_palindrome(text: str):
    """"""Sprawdza, czy dany ciąg jest palindromem >>> is_palindromem (('') Prawda >>> is_palindromem (('aba') Prawda >>> is_palindromem (('aaaaa') Prawda >>> is_palindromem (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,pol_Latn,python,"

def modp(n: int, p: int):
    """"""Zwróć 2^n modulo p (uważaj na liczby). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,pol_Latn,python,"

def encode_shift(s: str):
    """"""przyjmuje jako kod wejściowy ciąg kodujący funkcję encode_shift. Zwraca odczytany ciąg. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""zwraca zakodowany ciąg, przesunąć każdy znak o 5 w alfabet.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,pol_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels to funkcja, która bierze strunę i zwraca strunę bez samogłosek. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,pol_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Zwraca wartość True, jeśli wszystkie liczby w liście l są poniżej progu t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,pol_Latn,python,"

def add(x: int, y: int):
    """"""Dodaj dwie liczby x i y >>> dodać ((2, 3) 5 >>> dodać ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,pol_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Sprawdź, czy dwa słowa mają te same znaki. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Prawda >>> same_chars (('abcd', 'dddddddabc') Prawda >>> same_chars (('dddddddabc', 'abcd') Prawda >>> same_chars (('eabcd', 'dddddddabc') Fałsz >>> same_chars ((('abcd', 'dddddabddce') Fałsz >>> same_chars (((abcdzzzz', 'dddzzzzzzzddabc') Fałsz """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,pol_Latn,python,"

def fib(n: int):
    """"""Zwróć n-tą liczbę Fibonacciego. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,pol_Latn,python,"

def correct_bracketing(brackets: str):
    """"""return True jeśli każdy otwierający się nawias ma odpowiedni zamykający się nawias. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,pol_Latn,python,"

def monotonic(l: list):
    """"""Powrót Prawda jest monotoniczne zwiększanie lub zmniejszanie się elementów listy. >>> monotoniczne (([1, 2, 4, 20]) Prawda >>> monotoniczne (([1, 20, 4, 10]) Fałszywe >>> monotoniczne (([4, 1, 0, -10]) Prawda """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,pol_Latn,python,"

def common(l1: list, l2: list):
    """"""Zwróć sortowane unikalne elementy wspólne dla dwóch list. >>> wspólne (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> wspólne (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,pol_Latn,python,"

def largest_prime_factor(n: int):
    """"""Podaj największy współczynnik liczby pierwszej n. Załóżmy, że n > 1 i nie jest liczbą pierwszą. >>> największy_przymierny_czynnik ((13195) 29 >>> największy_przymierny_czynnik ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,pol_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n jest funkcją, która sumuje liczby od 1 do n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,pol_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets jest ciągiem ""("" i "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,pol_Latn,python,"

def derivative(xs: list):
    """"""xs reprezentuje współczynniki wielomianu. xs[0] + xs[1] * x + xs[2] * x^2 + .... Zwróć pochodną tego wielomianu w tej samej formie. >>> pochodna (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> pochodna (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,pol_Latn,python,"

def fibfib(n: int):
    """"""Sekwencja liczb FibFib jest sekwencją podobną do sekwencji Fibbonacciego, która jest zdefiniowana w następujący sposób: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Napisz funkcję, aby skutecznie obliczyć n-ty element sekwencji liczb fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,pol_Latn,python,"
FIX = """"""Napisz funkcję vowels_count, która bierze jako wejście ciąg wyrazu i zwraca liczbę samogłosek w ciągu. Samogłoski w tym przypadku to 'a', 'e', 'i', 'o', 'u'. Tutaj 'y' jest również samogłoską, ale tylko wtedy, gdy znajduje się na końcu danego słowa. Przykład: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Dodaj więcej przypadków testowych.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,pol_Latn,python,"
def circular_shift(x, shift):
    """"""Po prostu przesunąć cyfry całkowitej liczby x dookoła, przesunąć cyfry w prawo i zwrócić wynik jako ciąg. Jeśli przesunięcie > liczba cyfr, zwrócić cyfry odwrócone. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,pol_Latn,python,"
def digitSum(s):
    """"""Zadanie Napisanie funkcji, która bierze jako wejście ciąg znaków i zwraca sumę wyłącznie górnych znaków' kodów ASCII. Przykłady: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,pol_Latn,python,"
def fruit_distribution(s,n):
    """"""W tym zadaniu otrzymasz ciąg, który reprezentuje liczbę jabłek i pomarańczy, które są rozłożone w koszyku owoców ten koszyk zawiera jabłka, pomarańcze i owoce mango. Biorąc pod uwagę ciąg, który reprezentuje całkowitą liczbę pomarańczy i jabłek oraz liczbę całkowitą, która reprezentuje całkowitą liczbę owoców w koszyku, zwróć liczbę owoców mango w koszyku. na przykład: fruit_distribution""5(jabłka i 6 pomarańczy"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 jabłka i 1 pomarańcza"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 jabłka i 3 pomarańcze"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 jabłka i 1 pomarańcza"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,pol_Latn,python,"
def pluck(arr):
    """"""""Jeśli danej liczby nie ma, należy zwrócić węzeł, który ma najmniejszy indeks. Jeśli węzeł jest zwrócony w listie, [small_value, jego indeks] Jeśli nie ma wartości parzonych lub dany zestaw jest pusty, należy zwrócić []. Przykład 1: Wprowadzanie: [4,2,3] Wydanie: [2, 1] Opis: 2 ma najmniejszą wartość parzistą, a 2 ma najmniejszy indeks. Przykład 2: Wprowadzanie: [1,2,3] Wydanie: [2, 1] Opis: 2 ma najmniejszą wartość parzistą, a 2 ma najmniejszy indeks. Przykład 3: Wprowadzanie: [] Wprowadzanie: [4: 5, 3, 4, 2] Wprowadzanie: [0, 0] Wydanie: 1 ma najmniejszą wartość parzistą, ale wartość indeksu jest równa zero. Przykład: * Wprowadzamy pierwszy węzeł, który ma dwie wartości, ale jest mniejszy niż zero. * Przykład: * Wprowadzanie: [1,2,3] Wydanie: [2, 1] Opis: 2 ma najmniejszą wartość parzistą, a 2 ma najmniejszy indeks. Przykład: [1,2,3] Przykład: [1,2,3] Wydanie: [2,3] Wydanie: [2,3] Wydanie: [2,3] Wydanie: [2,3] Wydanie: [2, 2, 2, 2, 2, 3, 4, 4, 2, [4,] Wydanie: [0, [0,] Wydanie: [0,] Wydanie: [0, [0,] Wydanie: [0,] Wydanie: [] Wydanie: [] Wydanie: [0 wę, wężejsze: []""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,pol_Latn,python,"
def search(lst):
    '''Podajemy listę liczb całkowitych, które nie są puste. Zwróć największą liczbę całkowitą, która jest większa od zera i ma częstotliwość większą lub równą wartości samej liczby całkowitej. Częstotliwość liczby całkowitej jest liczbą razy, w których pojawia się na liście. Jeśli taka wartość nie istnieje, zwróć -1. Przykłady: search (([4, 1, 2, 2, 3, 1]) == 2 search (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search (([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,pol_Latn,python,"
def strange_sort_list(lst):
    '''Przykłady: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,pol_Latn,python,"
def triangle_area(a, b, c):
    '''Podawane długości trzech boków trójkąta. Zwróć pole trójkąta zaokrąglone do 2 punktów po przecinku, jeśli trzy strony tworzą ważny trójkąt. W przeciwnym razie zwróć -1 Trzy strony tworzą ważny trójkąt, gdy suma dwóch stron jest większa niż trzecia strona. Przykład: trójkąt_powierzchnia(3, 4, 5) == 6.00 trójkąt_powierzchnia(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,pol_Latn,python,"
def will_it_fly(q,w):
    '''Napisz funkcję, która zwraca wartość True, jeśli obiekt q będzie latał, i False w przeciwnym razie. Obiekt q będzie latał, jeśli jest zrównoważony (jest to lista palindromiczna) i suma jego elementów jest mniejsza lub równa maksymalnej możliwej masie w. Przykład: will_it_fly (([1, 2], 5) â -> False # 1+2 jest mniejsza niż maksymalna możliwa masa, ale jest niezrównoważona. will_it_fly (([3, 2, 3], 1) â -> False # jest zrównoważony, ale 3+2+3 jest większy niż maksymalna możliwa masa. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 jest mniejszy niż maksymalna możliwa masa i jest zrównoważony. will_it_fly ((([3], â 5) -> True # 3 jest mniejszy niż maksymalna możliwa masa i jest zrównoważony. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,pol_Latn,python,"
def smallest_change(arr):
    """"""Przykładowo: smallest_change ([1,2,3,5,4,7,9,6]) == 4 smallest_change ([1,2,3,4,3,2,2]) == 1 smallest_change ([1,2,3,4,3,2,1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,pol_Latn,python,"
def total_match(lst1, lst2):
    '''Napisz funkcję, która przyjmuje dwie listy ciągów i zwraca listę, która ma łącznie mniej znaków niż druga lista. Jeśli dwie listy mają taką samą liczbę znaków, zwracaj pierwszą listę. Przykłady total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4'], ['5']) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,pol_Latn,python,"
def is_multiply_prime(a):
    """"""Napisz funkcję, która zwróci wartość true, jeśli dane liczba jest mnożeniem 3 liczb pierwszych, a false, jeśli nie.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,pol_Latn,python,"
def is_simple_power(x, n):
    """"""Twoim zadaniem jest napisanie funkcji, która zwraca wartość true, jeśli liczba x jest prostą potęgą n, a false w innych przypadkach. x jest prostą potęgą n, jeśli n**int=x Na przykład: is_simple_power ((1, 4) => true is_simple_power ((2, 2) => true is_simple_power ((8, 2) => true is_simple_power ((3, 2) => false is_simple_power ((3, 1) => false is_simple_power ((5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,pol_Latn,python,"
def iscube(a):
    '''Napisz funkcję, która bierze liczbę całkowitą a i zwraca wartość True, jeśli ta liczba jest sześcianem jakiejś liczby całkowitej. Uwaga: można założyć, że dane wejściowe są zawsze ważne. Przykłady: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,pol_Latn,python,"
def hex_key(num):
    """"""Zostałeś poproszony o napisanie funkcji, która otrzymuje liczbę sześćdziesiątkową jako ciąg i liczy liczbę cyfr sześćdziesiątkowych, które są liczbami pierwszymi (liczba pierwsza, lub liczba pierwsza, jest liczbą naturalną większą niż 1, która nie jest wynikiem dwóch mniejszych liczb naturalnych). Cyfry sześćdziesiątkowe to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Liczby pierwsze to 2, 3, 5, 7, 11, 13, 17,... Więc musisz określić liczbę następujących cyfr: 2, 3, 5, 7, B (= dziesiątkowy 11), D (= dziesiątkowy 13). Uwaga: możesz założyć, że wejście jest zawsze poprawne lub puste, a symbole A, B, C, D, E, F są zawsze duże. Przykłady: Dla num ""AB"" wyjście powinno być num = 1. Dla num ""1077E"" wyjście powinno być 2. Dla num ""AB"" powinno być num = 1.33ABCD dla num powinno być 4.123ABCD dla num ""A"" powinno być 6.04567D. Dla num ""2020"" wyjście powinno być 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,pol_Latn,python,"
def decimal_to_binary(decimal):
    """"""W przypadku, gdy funkcja jest w formacie dziesiętnym, to funkcja ta powinna zwracać ciąg znaków, z których każdy znak reprezentuje liczbę binarną. Każdy znak w ciągu będzie ""0"" lub ""1"". Na początku i na końcu ciągu będzie dodatkowa para znaków ""db"". Dodatkowe znaki są tam, aby pomóc w formacie. Przykłady: decimal_to_binary(15) # zwraca ""db1111db"" decimal_to_binary32) # zwraca ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,pol_Latn,python,"
def is_happy(s):
    """"""Twoim zadaniem jest sprawdzenie, czy ciąg jest szczęśliwy, czy nie. ciąg jest szczęśliwy, jeśli jego długość wynosi co najmniej 3 i każde 3 kolejne litery są odrębne. Na przykład: is_happy (a) => False is_happy (a) => False is_happy (a) => True is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (e) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,pol_Latn,python,"
def numerical_letter_grade(grades):
    """"""Jest ostatni tydzień semestru i nauczyciel musi dać uczniom oceny. Nauczycielka stworzyła swój własny algorytm oceny. Jedyny problem polega na tym, że straciła kod, który używała do oceny. Dała ci listę średnich ocen dla niektórych uczniów i musisz napisać funkcję, która może wyświetlić listę ocen liter za pomocą następującej tabeli: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,pol_Latn,python,"
def prime_length(string):
    """"""Napisz funkcję, która bierze ciąg i zwraca wartość True jeśli długość ciągu jest liczbą pierwszą lub False w przeciwnym razie Przykłady prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,pol_Latn,python,"
def starts_one_ends(n):
    """"""Przy ujemnej liczbie całkowitej n, wydaj liczbę liczb z n-cyfrowych liczb całkowitych dodatnich, które zaczynają się lub kończą na 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,pol_Latn,python,"
def solve(N):
    """"""Przykład Dla N = 1000, suma cyfr będzie równa 1 wyjście powinno być ""1"". Dla N = 150, suma cyfr będzie równa 6 wyjście powinno być ""110"". Dla N = 147, suma cyfr będzie równa 12 wyjście powinno być ""1100"". Zmienne: @N liczba całkowita ograniczenia: 0 â‰¤ N â‰¤ 10000. Wynik: ciąg liczb binarnych """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,pol_Latn,python,"
def add(lst):
    """"""Przy niepustej liście liczb całkowitych lst. dodać elementy parzne, które są w nieparzystych indeksach.. Przykłady: dodać (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,pol_Latn,python,"
def anti_shuffle(s):
    """"""Napisz funkcję, która bierze ciąg i zwraca jego uporządkowaną wersję. Uporządkowana wersja ciągu, to ciąg, w którym wszystkie słowa (oddzielone spacją) są zastąpione nowym słowem, w którym wszystkie znaki są ułożone w kolejności wzrostowej w oparciu o wartość ascii. Uwaga: Należy zachować kolejność słów i pustych miejsc w zdaniu. Na przykład: anti_shuffle ((('Hi') zwraca 'Hi' anti_shuffle ((('hello') zwraca 'ehllo' anti_shuffle (('Hello World!!!') zwraca 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,pol_Latn,python,"
def get_row(lst, x):
    """"""Podawane są dane dwuwymiarowe, w postaci list zagnieżdżonych, które są podobne do macierzy, jednak w przeciwieństwie do macierzy, każdy wiersz może zawierać inną liczbę kolumn. Biorąc pod uwagę lst i liczbę całkowitą x, znajdź liczby całkowite x na liście i zwróć listę tuplek, [(x1, y1), (x2, y2) ...] tak, że każda tupla jest współrzędna - (wzór, kolumny), zaczynając od 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,pol_Latn,python,"
def sort_array(array):
    """"""Po podaniu tablicy liczb całkowitych nieujemnych, po sortowaniu zwróć kopię danej tablicy, sortuj podaną tablicę w kolejności wzrostowej, jeśli suma (pierwsza wartość indeksu, ostatnia wartość indeksu) jest nieparzystą, lub sortuj ją w kolejności malejącej, jeśli suma (pierwsza wartość indeksu, ostatnia wartość indeksu) jest parzystą. Uwaga: * nie zmieniaj podanej tablicy. Przykłady: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,pol_Latn,python,"
def encrypt(s):
    """"""Wytworzyć funkcję encrypt, która bierze jako argument ciąg i zwraca ciąg zaszyfrowany, przy czym alfabet jest obracający. alfabet powinien być obracający w taki sposób, aby litery przesunęły się w dół przez dwa pomnożone przez dwa miejsca. Na przykład: encrypt('hi') zwraca 'lm' encrypt('asdfghjkl') zwraca 'ewhjklnop' encrypt('gf') zwraca 'kj' encrypt('et') zwraca 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,pol_Latn,python,"
def next_smallest(lst):
    """"""Zestaw liczb całkowitych. Napisz funkcję next_smallest (najmniejsza) która zwraca drugi najmniejszy element listy. Wraca zero jeśli nie ma takiego elementu. next_smallest (najmniejsza) [1, 2, 3, 4, 5]) == 2 next_smallest (najmniejsza) [5, 1, 4, 3, 2]) == 2 next_smallest (najmniejsza) []) == Nie ma next_smallest (najmniejsza) [1, 1]) == Nie ma """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,pol_Latn,python,"
def is_bored(S):
    """"""Zostanie ci podany ciąg słów, a twoim zadaniem jest policzenie liczby nudów. Nuda to zdanie, które zaczyna się od słowa ""I"". Zdania są rozgraniczone przez """"., ""?' lub ""! "". Na przykład: >>> jest_nudzony"" ""Hello world"") 0 >>> jest_nudzony"" ""Niebo jest niebieskie. Słońce świeci. Kocham tę pogodę"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,pol_Latn,python,"
def any_int(x, y, z):
    '''Wytworzyć funkcję, która przyjmuje 3 liczby. Zwraca wartość prawdziwą, jeśli jedna z liczb jest równa sumie pozostałych dwóch, a wszystkie liczby są liczbami całkowitymi. Zwraca wartość fałszywą w innych przypadkach. Przykłady any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,pol_Latn,python,"
def encode(message):
    """"""Napisz funkcję, która przyjmuje wiadomość i kodowuje w taki sposób, że zamienia case wszystkich liter, zastępuje wszystkie samogłoski w wiadomości literą, która pojawia się 2 miejsca przed tą samogłoską w alfabetze angielskim. Przyjmijmy tylko litery. Przykłady: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,pol_Latn,python,"

def skjkasdkd(lst):
    """"""Przykłady: Dla lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] wynik powinien być 10 Dla lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] wynik powinien być 25 Dla lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] wynik powinien być 13 Dla lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] wynik powinien być 11 Dla lst = [0,81,12,31,21] wynik powinien być 3 Dla lst = [1,8,1,2,1,7] wynik powinien być """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,pol_Latn,python,"
def check_dict_case(dict):
    """"""Przykłady: check_dict_case{""a"":""apple"", ""b"":""banana""}) powinien zwrócić True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) powinien zwrócić False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) powinien zwrócić False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) powinien zwrócić False. check_dict_case{""NC"":""STATE"", ""Z"":""IP""}) powinien zwrócić True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,pol_Latn,python,"
def count_up_to(n):
    """"""Wdrożyć funkcję, która bierze nieujemną liczbę całkowitą i zwraca matryc z pierwszych n liczb całkowitych, które są liczbami pierwszymi i mniejszymi niż n. na przykład: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,pol_Latn,python,"
def multiply(a, b):
    """"""Wprowadź funkcję, która bierze dwie liczby całkowite i zwraca iloczyn ich cyfr jednostkowych. Załóżmy, że dane wejściowe są zawsze ważne. Przykłady: mnożenie ((148, 412) powinno zwracać 16, mnożenie ((19, 28) powinno zwracać 72. mnożenie ((2020, 1851) powinno zwracać 0, mnożenie ((14,-15) powinno zwracać 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,pol_Latn,python,"
def count_upper(s):
    """"""Przykładowo: count_upper{\displaystyle \mathbb {a} } } ""aBCdEf"" zwraca 1 count_upper{\displaystyle \mathbb {a} } ""abcdefg"" zwraca 0 count_upper{\displaystyle \mathbb {a} } ""dBBE"" zwraca 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,pol_Latn,python,"
def closest_integer(value):
    '''Stwórz funkcję, która przyjmuje wartość (string) reprezentującą liczbę i zwraca najbliższą jej liczbę całkowitą. Jeśli liczba jest równoodległa od dwóch liczb całkowitych, zaokrąl ją od zera. Przykłady >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Uwaga: Zaokrąlenie od zera oznacza, że jeśli dana liczba jest równoodległa od dwóch liczb całkowitych, należy zwrócić tę, która jest najdalej od zera. Przykładowo dla przykładu closest_integer "" ((14.5"") powinno być 15 a closest_integer "" ((-14.5"") powinno być -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,pol_Latn,python,"
def make_a_pile(n):
    """"""Przykładowo: >>> make_a_pile (n) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,pol_Latn,python,"
def words_string(s):
    """"""Twoim zadaniem jest podział łańcucha na słowa i zwrot szeregu słów. Na przykład: words_string ""Cześć, nazywam się John"") == [""Cześć"", ""mój"", ""nazwa"", ""jest"", ""John""] words_string "" ""Jeden, dwa, trzy, cztery, pięć, sześć"") == [""Jeden"", ""dwa"", ""trzy"", ""cztery"", ""pięć"", ""sześć""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,pol_Latn,python,"
def choose_num(x, y):
    """"""Funkcja ta bierze dwie dodatnie liczby x i y i zwraca największą liczbę całkowitą w zakresie [x, y] włącznie. Jeśli nie ma takiej liczby, to funkcja powinna zwracać -1. Na przykład: choose_num ({\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {}{\displaystyle {1}}}""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,pol_Latn,python,"
def rounded_avg(n, m):
    """"""Jeśli n jest większa niż m, wydaj -1. Przykład: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,pol_Latn,python,"
def unique_digits(x):
    """"""Przy użyciu listy liczb całkowitych dodatnich x. zwraca sortowaną listę wszystkich elementów, które nie mają żadnej parzystej cyfry. Uwaga: Zwrócona lista powinna być sortowana w kolejności wzrostowej. Na przykład: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,pol_Latn,python,"
def by_length(arr):
    """"""Przykładowo: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sortować arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> odwrócić arr -> [8, 5, 4, 3, 2, 2, 1, 1] zwrócić [""Osiem"", ""Five"", ""Three"", ""Three"", ""One"", ""One""] Jeśli ta mała mała jest pusta, zwrócić: arr = [] zwrócić [] Jeśli ta mała ma jakąś dziwną liczbę, zignorować to: arr = [1, 1 , 1 - 55] -> sortować [1, 1 - 55] -> zwrócić [1, 1 - 55] -> zwrócić [1, 1 - 5], zwrócić [1, 1 - 55] -> zwrócić [1, 1 - 5], zwrócić [1, 1 - 5]""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,pol_Latn,python,"
def f(n):
    """"""Wdrożyć funkcję f, która bierze n jako parametr i zwraca listę wielkości n, tak, że wartość elementu w indeksie i jest współczynnikami i, jeśli i jest parzysty lub sumą liczb od 1 do i w przeciwnym razie. i zaczyna się od 1. współczynnik i jest mnożeniem liczb od 1 do i (1 * 2 * ... * i). Przykład: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,pol_Latn,python,"
def even_odd_palindrome(n):
    """"""Przykład1: Wprowadzanie: 3 Wyniki: (1, 2) Wyjaśnienie: Wyniki: Wyniki: Wyniki: Wyniki: (4, 6) Wyjaśnienie: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyniki: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn: Wyn:""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,pol_Latn,python,"
def count_nums(arr):
    """"""Napisz funkcję count_nums, która bierze matryc liczb całkowitych i zwraca liczbę elementów, których suma cyfr jest > 0. Jeśli liczba jest ujemna, to jej pierwsza cyfra będzie ujemna: np. -123 ma cyfry -1, 2 i 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,pol_Latn,python,"
def move_one_ball(arr):
    """"""Twoim zadaniem jest ustalenie, czy możliwe jest zorganizowanie tablicy w nieumieniającym porządku poprzez wykonanie następującej operacji na danej tablicy: Możesz wykonać operację przesunięcia w prawo dowolną liczbę razy. Jedna operacja przesunięcia w prawo oznacza przesunięcie wszystkich elementów tablicy o jedną pozycję w dobrym kierunku. Ostatni element tablicy zostanie przeniesiony do pozycji początkowej w tablicy, tj. 0th indeks. Jeśli możliwe jest uzyskanie zorganizowanej tablicy poprzez wykonanie powyższej operacji, to zwrot True, a jeśli nie, zwrot False. Jeśli dana tablica jest pusta, to zwrot True. Uwaga: Podana lista gwarantuje posiadanie unikalnych elementów. Na przykład: move_one_{\displaystyle \{\sqrt {{\sqrt {\sqrt {\sqrt {\sqrt {\sqrt {\sqrt {\s}}}}{\qrt {\s}}{\qrt {\s}}}}\qrt {\s}}\qrt {\qrt {\s}}\qrt {\qrt {\s}}}}""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,pol_Latn,python,"
def exchange(lst1, lst2):
    """"""W tym problemie, wdrożymy funkcję, która bierze dwie listy liczb i określa, czy możliwe jest przeprowadzenie wymiany elementów między nimi, aby lst1 była listą tylko liczb parzonych. Nie ma ograniczenia na liczbę wymienionych elementów między lst1 i lst2. Jeśli możliwe jest wymiana elementów między lst1 i lst2 aby wszystkie elementy lst1 były parzne, zwróć ""TAK"". W przeciwnym razie zwróć ""NIE"". Na przykład: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""TAK"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NIE"" Zakłada się, że listy wejściowe będą niepuste. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,pol_Latn,python,"
def histogram(test):
    """"""Przykład: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4} histogram '(') == {'b 4}""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,pol_Latn,python,"
def reverse_delete(s,c):
    """"""Zadanie Mamy dwa ciągi s i c, musimy usunąć wszystkie znaki w s, które są równe dowolnemu znakowi w c, a następnie sprawdzić, czy ciąg wyniku jest palindromem. String jest nazywany palindromem, jeśli czyta się tak samo do tyłu jak do przodu. Powinieneś zwrócić tuplicę zawierającą ciąg wyniku i True/False do sprawdzenia. Przykład Dla s = ""abcde"", c = ""ae"", wynik powinien być ('bcd', False) Dla s = ""abcdef"", c = ""b"" wynik powinien być ('acdef', False) Dla s = ""abcdedcba"", c = ""ab"", wynik powinien być ('cdedc', True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,pol_Latn,python,"
def odd_count(lst):
    """"""Każdy element i wyjściowego kodu powinien być ""liczbą nieparzystych elementów w ciągu i wejściowego"". gdzie wszystkie i powinny być zastąpione liczbą nieparzystych cyfr w i'tym ciągu wejściowego. >>> odd_count['1234567']) [""liczba nieparzystych elementów 4n str4ng 4 z 4nput.""] >>> odd_count['3',""111111""]) [""liczba nieparzystych elementów 1n str1ng 1 z 1nput."", ""liczba nieparzystych elementów 8n str8ng 8 z 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,pol_Latn,python,"
def minSubArraySum(nums):
    """"""Przykładowo minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,pol_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Każdy rząd reprezentuje pojedynczą studnię, a każda 1 w rzędzie reprezentuje pojedynczą jednostkę wody. Każdy studnia ma odpowiedni wiadro, które może być użyte do wydobycia wody z niego, a wszystkie wiadra mają tę samą pojemność. Twoim zadaniem jest użycie wiadra do opróżnienia wiadra. Wydaj liczbę razy, które potrzebujesz, aby obniżyć wiadra. Przykład 1: Wprowadzanie: siatka: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Wprowadzanie: 62: Wprowadzanie: siatka: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Wprowadzanie: 53: Wprowadzanie: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Wprowadzanie
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,pol_Latn,python,"
def sort_array(arr):
    """"""W tej Kata, musisz sortować szereg liczb całkowitych nie ujemnych według liczby jedynek w ich reprezentacji binarnej w kolejności wzrostowej. Dla podobnej liczby jedynek, sortowanie na podstawie wartości dziesiętnej. Musi być wdrożone w ten sposób: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,pol_Latn,python,"
def select_words(s, n):
    """"""Jeśli string s jest pusty, funkcja powinna zwrócić pustą listę. Uwaga: można założyć, że wprowadzony string zawiera tylko litery i spacje. Przykłady: select_words ""Mary miała jagnię"", 4) ==> [""małe""] select_words ""Mary miała jagnię"", 3) ==> [""Mary"", ""jagnię""] select_words ""prostą białą przestrzeń"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,pol_Latn,python,"
def get_closest_vowel(word):
    """"""Twoim zadaniem jest znalezienie najbliższej samogłoski, która znajduje się między dwoma spółgłoskami z prawej strony słowa (rozumie literę wielkości i wielkości). Samogłoski na początku i na końcu nie są liczone. Zwróć pusty ciąg, jeśli nie znajdziesz żadnej samogłoski spełniającej powyższy warunek. Możesz założyć, że dany ciąg zawiera tylko angielską literę. Przykład: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,pol_Latn,python,"
def match_parens(lst):
    '''Twoim zadaniem jest sprawdzenie, czy możliwe jest połączenie dwóch ciągów w jakimś porządku, aby uzyskany ciąg był dobry. String S jest uważany za dobry, jeśli i tylko jeśli wszystkie nawiasy w S są zrównoważone. Na przykład: ciąg '((()) ' jest dobry, podczas gdy ciąg '()) ' nie jest. Zwracaj 'Tak', jeśli istnieje sposób na stworzenie dobrego ciągu, a w przeciwnym razie zwróć 'Nie'. Przykłady: match_parens[('() ', ') ']) == 'Tak' match_parens[(') ', ') ']) == 'Nie' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,pol_Latn,python,"
def maximum(arr, k):
    """"""Przykład1: Wprowadzanie: arr = [-3, -4, 5], k = 3 Wynik: [-4, -3, 5] Przykład2: Wprowadzanie: arr = [4, -4, 4], k = 2 Wynik: [4, 4] Przykład3: Wprowadzanie: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Wynik: [2] Uwaga: 1. Długość tabeli będzie w zakresie [1, 1000]. 2. Elemente w tabeli będą w zakresie [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,pol_Latn,python,"
def solution(lst):
    """"""Przykładowe rozwiązanie: (([5, 8, 7, 1]) ==> 12 rozwiązania (([3, 3, 3, 3]) ==> 9 rozwiązania (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,pol_Latn,python,"
def add_elements(arr, k):
    """"""Przykład: Wpływ: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Wynik: 24 # suma 21 + 3 Wymagania: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,pol_Latn,python,"
def get_odd_collatz(n):
    """"""Przypuszczenie Collatza jest przypuszczeniem matematycznym dotyczącym sekwencji zdefiniowanej w następujący sposób: zacznij od dowolnej liczby całkowitej n. Następnie każdy z nich otrzymuje się z poprzedniego terminu w następujący sposób: jeśli poprzedni termin jest parzny, następny termin jest połową poprzedniego terminu. Jeśli poprzedni termin jest nieparzny, następny termin jest 3 razy poprzedni termin plus 1. Przypuszczenie jest takie, że bez względu na wartość n, sekwencja zawsze osiągnie 1. Uwaga: 1. Collatz (((1) jest [1]. 2. Zwrócona lista sortowana w kolejności wzrostowej. Na przykład: get_odd_collatz ((5) zwraca [1, 5] # Sekwencja Collatza dla 5 to [5, 8, 16, 4, 2, 1], więc liczby nieparzyste to tylko 1 i 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,pol_Latn,python,"
def valid_date(date):
    """"""W przypadku ciągów dat należy napisać funkcję, która potwierdza dany ciąg dat i zwraca wartość True, jeśli data jest ważna, w przeciwnym razie False. Data jest ważna, jeśli spełnione są wszystkie następujące zasady: 1. ciąg dat nie jest pusty. 2. liczba dni nie jest mniejsza niż 1 lub większa niż 31 dni w miesiącach 1,3,5,7,8,10,12. A liczba dni nie jest mniejsza niż 1 lub większa niż 30 dni w miesiącach 4,6,9,11. A liczba dni nie jest mniejsza niż 1 lub większa niż 29 w miesiącu 2. 3. miesiące nie powinny być mniejsze niż 1 lub większe niż 12. 4. data powinna być w formacie: mm-dd-yyyy np.: valid_date (('03-11-2000') => True_validdate (('15-01-2012') => False valid_date (('04-02040') => False_valid_date (('06-04-2020') => True_valid (('06/04/2020') => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,pol_Latn,python,"
def split_words(txt):
    '''Jeśli nie ma przecineków, należy zwrócić liczbę małych liter w nieparzystej kolejności w alfabetze, ord ((a)) = 0, ord ((b)) = 1, ... ord ((z)) = 25 Przykłady split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words (((""abcdef"")) == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,pol_Latn,python,"
def is_sorted(lst):
    '''Przykłady są: jest_sortowane (sorted) [1]: -> Prawda jest_sortowana (sorted) [2]: [1, 2, 3, 4, 5, 5]) [ -> Prawda jest_sorted (sorted) ] [1, 2, 3, 4, 5, 6]) [ -> Prawda jest_sorted (sorted) ] [1, 2, 3, 4, 5, 6]) [ -> Prawda jest_sorted (sorted) ] [1, 2, 3, 4, 5, 6, 7]) [ -> Prawda jest_sorted (sorted) [1, 3, 2, 4, 5, 6, 7]) [ -> Prawda jest_sorted (sorted) [1, 3, 2, 4, 5, 6, 7]) [ -> Prawda jest_sorted (sorted) ] [1, 3, 2, 4, 5, 6, 7]) [ -> Fałszywe jest_sorted (sorted) [1, 2, 2, 3, 3, 4]) [ -> Prawda jest_sorted (sorted) ] [1, 2, 2, 2, 3, 4 -> Fałszywe ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,pol_Latn,python,"
def intersection(interval1, interval2):
    """"""W przypadku interwałów (1, 3), (2, 4) otrzymujemy (2, 3) których długość wynosi 1, a nie liczbę pierwszą. Jeśli długość interwalu jest liczbą pierwszą, zwracamy ""TAK"", w przeciwnym razie zwracamy ""NIE"". Jeśli dwa interwały się nie przecięły, zwracamy ""NIE"". [input/output] przykłady: intersekcja (((1, 2), (2, 3) ==> ""intersekcja-1, ((1), 4) ==> ""intersekcja (0,"" - ""NO"", 5), ==> ""intersekcja (-"", - ""Y"", - ""5, - ""Y"") ]]""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,pol_Latn,python,"
def prod_signs(arr):
    """"""Podawana jest tabliczka liczb całkowitych, która musi zwracać sumę wielkości liczb całkowitych pomnożoną przez produkt wszystkich znaków każdej liczby w tablicy, reprezentowanej przez 1, -1 lub 0. Uwaga: zwracać NONE dla pustej tablicy. Przykład: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,pol_Latn,python,"
def minPath(grid, k):
    """"""Każda komórka w zakresie [1, N * N] zawiera wartość. Każda liczba całkowita w zakresie [1, N * N] zawiera dokładnie jeden numer w komórkach sieci. Musisz znaleźć minimalną ścieżkę długości k w sieci. Możesz zacząć od dowolnej komórki i na każdym kroku możesz przejść do dowolnej komórki sąsiadującej, innymi słowy, możesz przejść do komórek, które mają róg z twoją obecną komórką. Należy pamiętać, że ścieżka długości k oznacza odwiedzanie dokładnie k komórek (nie musi być różna). NIE MOŻESZ wyjść z sieci. Ścieżka A (długość k) jest uważana za mniejszą niż ścieżka B (długość k), jeśli po sporządzeniu uporządkowanych list wartości na komórkach A i B (nazwijmy je lA_st i lA_stB), lA_stB jest mniej niż leksykograficznie, w innych słowach, jest mniejsza niż lA_stB. Możesz zacząć od dowolnej komórki i na każdym kroku możesz przejść do komórek sąsiadujących komórek, innymi słowami, możesz przejść do komórek, które mają krawęd z bieżące z bieżącej komórki.""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,pol_Latn,python,"
def tri(n):
    """"""Wszyscy znają sekwencję Fibonacciego, była ona głęboko badana przez matematyków w ciągu ostatnich kilku stuleci. Jednak to, czego ludzie nie znają, to sekwencja Tribonacciego. Sekwencja Tribonacciego jest definiowana przez powtarzalność: tri(1) = 3 tri(n) = 1 + n / 2, jeśli n jest parzyste. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), jeśli n jest nieparzyste. Na przykład: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Otrzymujesz liczbę całkowitą n, musisz zwrócić listę pierwszych n + 1 liczb sekwencji Tribonacci. Przykłady: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,pol_Latn,python,"
def digits(n):
    """"""Przy ujemnej liczbie całkowitej n, zwracaj iloczyn liczb nieparzystych. Zwracaj 0 jeśli wszystkie cyfry są parzne. Na przykład: cyfry""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,pol_Latn,python,"
def is_nested(string):
    '''Stwórz funkcję, która bierze jako wejście ciąg, który zawiera tylko nawiasy kwadratowe. Funkcja powinna zwracać wartość True, jeśli i tylko jeśli istnieje prawidłowa podsekwencja nawiasów, w której co najmniej jeden nawias w podsekwencji jest zagnieżdżony. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]]]]][[[[[[[]') â -> False is_nested'[][]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]][[]]') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,pol_Latn,python,"

def sum_squares(lst):
    """"""Przykłady: Dla lst = [1,2,3] wynik powinien być 14 Dla lst = [1,4,9] wynik powinien być 98 Dla lst = [1,3,5,7] wynik powinien być 84 Dla lst = [1.4,4.2,0] wynik powinien być 29 Dla lst = [-2.4,1,1] wynik powinien być 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,pol_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Tworzenie funkcji, która zwraca wartość True, jeśli ostatni znak danego ciągu jest znakiem alfabetycznym i nie jest częścią słowa, a False w przeciwnym razie. Uwaga: ""słowo"" to grupa znaków oddzielonych spacją. Przykłady: check_if_last_char_is_a_letter (((""apple pie"") â -> False check_if_last_char_is_a_letter (((""apple pi e"") â -> True check_if_last_char_is_a_letter (((""apple pi e "") â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,pol_Latn,python,"
def can_arrange(arr):
    """"""Stwórz funkcję, która zwraca największy indeks elementu, który nie jest większy ani równy elementu bezpośrednio poprzedzającemu go. Jeśli taki element nie istnieje, zwracaj -1. Podana tabela nie będzie zawierać podwójnych wartości. Przykłady: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,pol_Latn,python,"
def largest_smallest_integers(lst):
    '''Stwórz funkcję, która zwraca tuplę (a, b), gdzie 'a' jest największą liczbą całkowitą ujemną, a 'b' jest najmniejszą liczbą całkowitą dodatnią na liście. Jeśli nie ma liczb całkowitych ujemnych lub dodatnich, zwracaj je jako None. Przykłady: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,pol_Latn,python,"
def compare_one(a, b):
    """"""Tworzenie funkcji, która przyjmuje całkowite liczby, floaty lub ciągi reprezentujące liczby rzeczywiste i zwraca większą zmienną w podanym typie zmiennej. Wraca zero, jeśli wartości są równe. Uwaga: Jeśli liczba rzeczywista jest reprezentowana jako ciąg, punkt zmienny może być . lub , porównaj_jeden, 2.5) â -> 2.5 porównaj_jeden, ""2,3"") â -> ""2,3"" porównaj_jeden, ""5,1"", ""6"") â -> ""6"" porównaj_jeden, ""1"", 1) â -> zero """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,pol_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Ocenić, czy dane liczba n może być zapisana jako suma dokładnie 4 dodatnich liczb parzonych Przykład jest_równy_sum_even ((4) == Fałszywy jest_równy_sum_even ((6) == Fałszywy jest_równy_sum_even ((8) == Prawdziwy """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,pol_Latn,python,"
def special_factorial(n):
    """"""Brazylijski faktoriel jest zdefiniowany jako: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! gdzie n > 0 Na przykład: >>> special_factorial ((4) 288 Funkcja otrzyma całkowitą liczbę jako wejście i powinna zwrócić specjalny faktoriel tej liczby całkowitej. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,pol_Latn,python,"
def fix_spaces(text):
    """"""_Przykład-3tu z ciągów, zastąp wszystkie przestrzenie podkreśleniami, a jeśli ciąg ma więcej niż 2 kolejne przestrzenie, zastąp wszystkie kolejne przestrzenie - fix_spaces ((""Podobie"") == ""Podobie"" fix_spaces ((""Podobie1"") == ""Podobie1"" fix_spaces (((""Podobie2"") == ""_Podobie2"" fix_spaces ((""Podobie3"") == ""_Podobie-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,pol_Latn,python,"
def file_name_check(file_name):
    """"""Stwórz funkcję, która przyjmuje ciąg reprezentujący nazwę pliku i zwraca ""Tak"", jeśli nazwa pliku jest prawidłowa, a zwraca ""Nie"", jeśli nie. Nazwa pliku jest uznawana za prawidłową, jeśli spełnione są wszystkie następujące warunki: - Nazwa pliku nie powinna zawierać więcej niż trzy cyfry ('0'-'9') w nazwie pliku. - Nazwa pliku zawiera dokładnie jedną kropkę '.' - Podciąg przed kropką nie powinien być pusty i zaczyna się od litery alfabetu łacińskiego ('a'-'z' i 'A'Z'). - Podciąg po kropce powinien być jednym z następujących: ['txt', 'exe', 'lld'] Przykłady: file_name_check""{\textstyle{\textstyle{\textstyle}{\textstyle}{\textstyle}{\textstyle}{\textstyle}{\textstyle}\textstyle{\textstyle}\textstyle{textstyle}\textstyle{textstyle}\textstyle{textstyle}\textstyle}{textstyle}\textstyle{textstyle}\textstyle{textstyle}\textstyle}\textstyle{textstyle}""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,pol_Latn,python,"


def sum_squares(lst):
    """""""" Ta funkcja przyjmie listę liczb całkowitych. Dla wszystkich pozycji na liście, funkcja kwadratuje pozycję całkowitą, jeśli jej indeks jest wielokrotnością 3 i będzie kubizować pozycję całkowitą, jeśli jej indeks jest wielokrotnością 4 a nie wielokrotnością 3. Funkcja nie zmieni pozycji na liście, których indeksy nie są wielokrotnością 3 lub 4. Funkcja następnie zwróci sumę wszystkich pozycji. Przykłady: Dla lst = [1,2,3] wynik powinien być 6 Dla lst = [] wynik powinien być 0 Dla lst = [-1,-5,2,-1,-5] wynik powinien być -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,pol_Latn,python,"
def words_in_sentence(sentence):
    """"""Dostajesz ciąg wyrazujący zdanie, zdanie zawiera kilka słów oddzielonych spacją, a ty musisz zwrócić ciąg zawierający słowa z oryginalnego zdania, których długości są liczbami pierwszymi, kolejność słów w nowym ciągu powinna być taka sama jak w oryginalnym. Przykład1: Wprowadzanie: zdanie = ""To jest test"" Wprowadzanie: ""jest"" Przykład2: Wprowadzanie: zdanie = ""pozwólmy pływać"" Wprowadzanie: ""go for"" Ograniczenia: * 1 <= len(zdanie) <= 100 * zdanie zawiera tylko litery """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,pol_Latn,python,"
def simplify(x, n):
    """"""Twoim zadaniem jest wdrożenie funkcji, która uprości wyrażenie x * n. Funkcja zwraca wartość True jeśli x * n jest liczbą całkowitą, a False w innym przypadku. Zarówno x, jak i n są reprezentacją liczbową ułamka i mają następujący format, <licznik>/<mianownik>, gdzie zarówno licznik, jak i mianownik są dodatnimi liczbami całkowitymi. Możesz założyć, że x i n są prawidłowymi ułamkami i nie mają zera jako mianownika. uprościć:""""""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,pol_Latn,python,"
def order_by_points(nums):
    """"""Napisz funkcję, która sortuje podaną listę liczb całkowitych w kolejności wzrostowej według sumy ich cyfr. Uwaga: jeśli istnieje kilka elementów o podobnej sumie ich cyfr, uporządkuj je na podstawie ich indeksu w oryginalnej liście. Na przykład: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,pol_Latn,python,"
def specialFilter(nums):
    """"""Napisz funkcję, która bierze jako wejście masę liczb i zwraca liczbę elementów w tabeli, które są większe niż 10 i obie pierwsza i ostatnia cyfra liczby są nieparzyste (1, 3, 5, 7, 9). Na przykład: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,pol_Latn,python,"
def get_max_triples(n):
    """"""Podajemy liczbę całkowitą n. Musimy stworzyć szereg liczb całkowitych o długości n. Dla każdego i (1 ‰¤ i ‰¤ n) wartość a[i] = i * i - i + 1. Oddaj liczbę potrójnych (a[i], a[j], a[k]) a, gdzie i < j < k, a a[i] + a[j] + a[k] jest wielokrotnością 3. Przykład: Wkład: n = 5 Wkład: 1 Opis: a = [1, 3, 7, 13, 21] Jedynym ważnym potrójnym jest (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,pol_Latn,python,"
def bf(planet1, planet2):
    '''W naszym Układzie Słonecznym jest osiem planet: najbliższa Słońcu jest Merkury, następna Wenus, następnie Ziemia, Mars, Jowisz, Saturn, Uran, Neptun. Napisz funkcję, która bierze dwie nazwy planet jako ciągi planet1 i planet2. Funkcja powinna zwrócić tuple zawierające wszystkie planety, których orbity znajdują się między orbitą planety1 i orbitą planety2, sortowane według bliskości do Słońca. Funkcja powinna zwrócić pustą tuple, jeśli planeta1 lub planeta2 nie są poprawnymi nazwami planet. Przykłady bf ""(Jupiter"", ""Neptun"") ==> (""Saturn"", ""Uran"") bf (((""Ziemia"", ""Merkury"") ==> (""Wenus"") bf (((""Merkury"", ""Uran"") ==> (""Wenus"", ""Ziemia"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,pol_Latn,python,"
def sorted_list_sum(lst):
    """"""Napisz funkcję, która przyjmuje listę ciągów jako parametr, usuwa ciągi o nieparzystych długościach i zwraca listę z sortowanym kolejnością. Lista jest zawsze listą ciągów, a nigdy tablicą liczb i może zawierać duplikatów. Porządek listy powinien wzrastać w zależności od długości każdego słowa i należy zwracać listę sortowaną według tej reguły. Jeśli dwa słowa mają taką samą długość, sortuj listę alfabetycznie. Funkcja powinna zwracać listę ciągów w sortowanym porządku. Możesz założyć, że wszystkie słowa będą miały taką samą długość. Na przykład: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd"")""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,pol_Latn,python,"
def x_or_y(n, x, y):
    """"""Proste oprogramowanie, które powinno zwracać wartość x, jeśli n jest liczbą pierwszą, a w przeciwnym razie wartość y. Przykłady: dla x_or_y ((7, 34, 12) == 34 dla x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,pol_Latn,python,"
def double_the_difference(lst):
    '''Po podaniu listy liczb, zwracaj sumę kwadratów liczb w liście, które są nieparzyste. Ignoruj liczby, które są ujemne lub nie są liczbami całkowitymi. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Jeśli lista danych jest pusta, zwracaj 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,pol_Latn,python,"
def compare(game,guess):
    """"""Myślę, że wszyscy pamiętamy to uczucie, kiedy wynik jakiegoś długo oczekiwanego wydarzenia jest w końcu znany. Uczucia i myśli, które masz w tym momencie, zdecydowanie warto odnotować i porównać. Twoim zadaniem jest ustalenie, czy dana osoba poprawnie odgadła wyniki wielu meczów. Dostaniesz dwie tablice wyników i domysłów o równej długości, gdzie każdy indeks pokazuje mecz. Zwróć tablice o tej samej długości, wskazując, jak daleko od każdego zgadnięcia. Jeśli odgadnęli poprawnie, wartość wynosi 0, a jeśli nie, wartość jest absolutną różnicą między domyśleniem a wynikiem. Przykład: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare (([0,5,0,4,0,1,0,2,4]) -> [4,0,4,0,1,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,pol_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Podać nazwę klasy (klatka) i listę rozszerzeń. Rozszerzenia mają być używane do załadowania dodatkowych klas do klasy. Siła rozszerzenia jest następująca: Niech CAP będzie liczbą dużych liter w nazwie rozszerzenia, a niech SM będzie liczbą małych liter w nazwie rozszerzenia, siła jest podana przez ułamek CAP - SM. Należy znaleźć najsilniejszy rozszerzenie i zwrócić ciąg w tym formacie: ClassName.StrongestExtensionName. Jeśli istnieją dwa lub więcej rozszerzeń o tej samej sile, należy wybrać ten, który pojawia się pierwszy na liście. Na przykład, jeśli masz ""Slices"" jako klasy i listę rozszerzeń: ['SEviRNGSliCes', 'Cheese', 'StuFfed'], to należy zwrócić 'Slices.SEviRNGSliCes' ponieważ 'SviRNGSliCes' jest silniejszy od rozszerzenia (na przykład: 'AA_Beats'), 'AA_Class' jest silniejszy od 'AA_Extension' (na przykład: 'AA_Beats').""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,pol_Latn,python,"
def cycpattern_check(a , b):
    """"""Podawane są 2 słowa. Musisz zwrócić wartość True, jeśli drugie słowo lub którekolwiek z jego obrotów jest podstroną w pierwszym słowie cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,pol_Latn,python,"
def even_odd_count(num):
    """"""Przykład: even_odd_count ((-12) ==> (1, 1) even_odd_count ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,pol_Latn,python,"
def int_to_mini_roman(number):
    """"""Przykłady: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,pol_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Przykładowo: right_angle_triangle ({3,4,5) == True right_angle_triangle ({1,2,3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,pol_Latn,python,"
def find_max(words):
    """"""Napisz funkcję, która przyjmuje listę ciągów. Lista zawiera różne słowa. Zwróć słowo z maksymalną liczbą unikalnych znaków. Jeśli wiele ciągów ma maksymalną liczbę unikalnych znaków, zwróć ten, który pojawia się pierwszy w kolejności leksykograficznej.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,pol_Latn,python,"
def eat(number, need, remaining):
    """"""Jesteś głodnym królikiem i już zjadłeś pewną liczbę marchewek, ale teraz musisz zjeść więcej marchewek, aby zakończyć posiłki dnia. powinieneś zwrócić tablicę [ całkowita liczba zjadanych marchewek po posiłku, liczba marchewek pozostałych po posiłku ] jeśli nie ma wystarczająco dużo pozostałych marchewek, zjesz wszystkie pozostałe marchewki, ale nadal będziesz głodny. Przykład: * jedz ((5, 6, 10) -> [11, 4] * jedz ((4, 8, 9) -> [12, 1] * jedz ((1, 10, 10) -> [11, 0] * jedz ((2, 11, 5) -> [7, 0] Zmienne: @number: liczba całkowita liczba marchewek, które zjadłeś. @need: liczba całkowita liczba marchewek, które musisz zjeść. @remaining: liczba całkowita liczba pozostałych marchewek w magazynie: * Constrain = 0 * <= 1000 * <= 1000 * 0 = <= 1000 pozostałe = <= 1000  Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,pol_Latn,python,"
def do_algebra(operator, operand):
    """"""Podstawowe operacje algebraiczne: dodawanie (+) odejmowanie (-)) mnożenie (-)) podział podł (-)) eksponentacja (**) Przykład: operator['+', '*', '-'] matryca = [2, 3, 4, 5] wynik = 2 + 3 * 4 - 5 => wynik = 9 Uwaga: Długość listy operatorów jest równa długości listy operatorów minus jeden. Operand jest listą liczb całkowitych nieujemnych. Operator ma co najmniej jednego operatora, a lista operatorów ma co najmniej dwa operandy.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,pol_Latn,python,"
def solve(s):
    """"""Jeśli s[i] jest literą, odwróć jej kształt od dolnego do górnego lub odwrotnie, w przeciwnym razie zachowaj ją taką, jaka jest. Jeśli ciąg nie zawiera żadnych liter, odwróć ciąg. Funkcja powinna zwrócić wynikowy ciąg. Przykłady solve{""1234"") = ""4321"" solve{""ab"") = ""AB"" solve{""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,pol_Latn,python,"
def string_to_md5(text):
    """"""Jeśli jest to ciąg, należy zwrócić jego równoważny ciąg hashowy md5. Jeśli jest to pusty ciąg, należy zwrócić None.""""""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,pol_Latn,python,"
def generate_integers(a, b):
    """"""Przykładowo: generate_integers{2, 4, 6, 8} => [2, 4, 6, 8] generate_integers{8, 2} => [2, 4, 6, 8] generate_integers{10, 14} => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
