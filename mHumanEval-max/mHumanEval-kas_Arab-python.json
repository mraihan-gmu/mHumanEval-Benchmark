[
    {
        "task_id": "HumanEval/0",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"چیک کرِو اگر دِنہٕ آمٕتۍ نمبرن ہنز فہرستس منز، کنٛہہ تہٕ زٕ نمبر چِھ دِنہٕ آمٕتۍ حد کھوتہٕ ایکِس بییس سٕتۍ قریبی۔ مثال: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"یہٕ فنکشن چُھ اکھ سٹرنگ ان پٹ ییتھ منٛز نیسٹڈ بریکٹس ہنٛد متعدد گروپ چِھ آسان۔ توہیہٕ چِھ یمن گروپن الگ الگ سٹرنگن منٛز الگ کرنہٕ تہٕ یمن ہنٛز فہرست واپس کرنچ کوشش کران۔ الگ الگ گروپ چِھ متوازن (ہر کھلہٕ بریکٹ چُھ صحیح پأٹھۍ بند) تہٕ اکھ اکس منٛز چِھ نہٕ نیسٹڈ۔ ان پٹ سٹرنگس منٛز کنہہ خلاہٕ نظر انداز کرٕو۔ مثال: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) '،' ((() ،'(() ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"مثبت فلوٹنگ پوائنٹ نمبر دنہٕ آمت، یہ ہیکو انٹیجر حصہٕ (بڑین نمبرن ہندسہٕ دنہٕ آمت نمبر کھوتہٕ لوکٹ) تہٕ اعشاریہ (باقی حصہٕ ہمیشہ 1 کھوتہٕ لوکٹ) منٛز تقسیم کٔرتھ۔ نمبر کس اعشاریہ کس حصس واپس ییہٕ دنہٕ۔ مثال: >>> truncate_number(3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"توہیہ چھِ بینک اکاونٹس پیٹھ جمع تہٕ واپسی ہنز اکھ فہرست دِنہٕ آمٕژ یُس صفرٕ کھوتہٕ کم بیلنس سۭتۍ شروع گژھان چھِ۔ توہیہٕند کٲم چھِ یہٕ پتہ لگاون کہ اگر کنہٕ تہٕ وقتہٕ کھاتہٕ ہند بیلنس صفرٕ کھوتہٕ کم چُھ گژھان، تہٕ اتھ وقتس پیٹھ گژھہٕ فنکشن درست واپس گژھن۔ بصورت دیگر یہٕ گژھہٕ غلط واپس گژھن۔ مثال: >>> below_zero([1, 2, 3]) غلط >>> below_zero([1, 2, -4, 5]) درست \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ان پٹ نمبرن ہنز اکھ دِنہٕ آمٕژ فہرست خٲطرٕہ، ایم ڈی اے چُھ ڈیٹاسیٹ کہِ اوسط کہِ ارد گرد اوسطُک مطلق انحرافُک حساب لگاونہٕ یوان۔ ایم ڈی اے چُھ ہر عنصر تہٕ مرکز کہِ نقطہ کہِ درمیان اوسط مطلق فرق (یمہِ صورتہٕ منز اوسط): MAD = اوسط ۔ x - x_mean مثال: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ان پٹ لسٹ کہِ ہر دوٚن متوٲزی عناصرن درمیان چُھ اکھ نمبر 'ڈیلی میٹر' دٲخٕل کرن `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"یہٕ فنکشن چُھ اکھ سٹرنگ یس نیسٹڈ پیرینٹس خاطرٕ متعدد گروپن ہنٛز نمائندگی چِھ کران یُس اسپیس سۭتۍ الگ چُھ کرنہٕ آمت۔ گروپ کس ہر اکہٕ خاطرٕ ، پیرینٹسچ نیسٹنگچ گہری سطح چِھ آؤٹ پٹ کران۔ مثلن (())) چِھ زیادہ کھوتہٕ زیادٕ دوٛن نیسٹنگ سطحن پیٹھ آسان ییلہٕ زن ((())) چِھ تریہ۔ >>> parse_nested_parens('((()) ((())) () (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"صرف تمن سٹرنگن ہنٛز ان پٹ لسٹ چُھ فلٹر کران یمن منٛز دِنہٕ آمت ذیلی تارچ >>> filter_by_substring([]، 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"انٹیجرزن ہنز دِنہٕ آمٕژِ لسٹہٕ خٲطرٕہ، کٕرِکھ ٹپل یوس ایکِس لسٹس منز تمام انٹیجرن ہند جمع تہٕ ضربس پیٹھ مشتمل چُھ۔ خٲلی مجموعہٕ گژھہِ 0 کِس برابر آستھ تہٕ خٲلی ضرب گژھہِ 1 کِس برابر آستھ ۔ >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"انٹیجرزن ہند دیژ مٕژہٕ لسٹہٕ پیٹھہٕ، ترتیبس منز دِنہٕ آمٕتۍ رولنگ میکسِم عناصرن ہنز لسٹ جِنریٹ کٔرِتھ۔ >>> رولنگ_میکس (([1, 2, 3, 2, 3, 3, 4, 2]) [1, 2, 3, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"ساروی کھوتہٕ مختصر پالینڈوم تلاش کرُن یُس سپلائی کرنہٕ آمت سٹرنگہٕ سۭتۍ شروع چُھ گژھان۔ الگورتھم چُھ آسان: - سپلائی کرنہٕ آمت سٹرنگُک ساروی کھوتہٕ زیوٹھ پوسٹ فکس تلاش کرُن یُس اکھ پالینڈوم چُھ۔ - سٹرنگ کس اختتامس پیٹھ سٹرنگ پریفیکسک ریورس جوڑُن یُس پالینڈومک سرفیس برونٹھ چُھ یوان۔ >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"ٹیسٹ اگر دِنہٕ آمُت سٹرنگ چِھ اکھ پالینڈروم۔\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ان پٹ چِھ زٕ تار a تہٕ b یِم صرف 1s تہٕ 0s پیٹھ مشتمل چِھ۔ یمن ان پٹسن پیٹھ چُھ بائنری XOR کٔرِتھ نتیجہٕ چُھ سٹرنگ کِس طورس پیٹھ تہٕ واپس کران۔ >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"تارن ہٕنٛز فہرستہ پیٚٹھٕ، زیٛادٕ زیٛادٕ تھۄن تارن واپس۔ اکہٕ کھۄتہٕ زیٛادٕ تھۄن تارن ہٕنٛز صورتہٕ منٛز گۄڑنیُک واپسی۔ ان پٹ لسٹہٕ خٲلی آسنہٕ پیٚٹھٕ چُھ نٔہ واپسی۔ >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"دوٛن عددن a تہٕ b یُس >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 چُھ دیوان چُھ سُہٕ چُھ a تہٕ b کہِ ساری کھوتہٕ بڑِ مشترک تقسیم کار واپس کران۔\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"تمام پریفیکسزچ فہرست چِھ ان پٹ سٹرنگ کہ مختصر پیٹھ زیٹھس تام واپس یوان >>> all_prefixes (('abc') ['a'، 'ab'، 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"سٹرنگ چُھ اکھ سٹرنگ رٹان یتھ منز 0 پیٹھہٕ n تام جاۓ سٕتۍ محدود نمبر چِھ شروع گژھان۔ >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"اکھ سٹرنگ دنہٕ آمژ، ژھانٛڈو یہٕ زِ کیہہ مختلف کردار (کیسہٕ تہٕ آسہٕ) چِھ اتھ منٛز مشتمل >>> count_distinct_characters('xyzXYZ') 3 >>> count_distinct_characters('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"یہٕ فنکشن چُھ اکھ سٹرنگ ان پٹ یس میوزیکل نوٹس چِھ اکھ خاص ASCII فارمیٹس منٛز ظٲہر کران۔ توہیہ چُھ سٹرنگ انٹیجرزن ہینز فہرست تجزیہ کرن یُس واریاہ بیٹس سۭتۍ چُھ مطابقت تھاوان۔ یہٕ چُھ اکھ لیجنڈ: 'o' نوٹ، آخری بیٹس چار 'o' بیکس - اڑٕ نوٹ، آخری دو بیٹس بیکس - کوارٹر نوٹ، آخری اکہ بیٹ >>> parse_music '(o' o .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"یہٕ ژھانٛڈِو زِ اصلی سٹرنگس منز کِتھہٕ کٕن چُھ اکھ ذیلی سٹرنگ ملان۔ اوورلیپنگ کیسز گنزرو۔ >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ان پٹ چُھ 'صفر' پیٹھہٕ 'نوے' تام عددن ہند اکھ جاۓ ہند ڈیلیمیٹڈ سٹرنگ۔ درست انتخاب چِھ 'صفر'، 'اکھ'، 'دو'، 'تین'، 'ژور'، 'پانچ'، 'چھ'، 'سات'، 'آٹھ' تہٕ 'نِژھ'۔ نمبرن سٕتۍ سٹرنگ چُھ لوکٹہٕ پیٹھہٕ بڑس تام ترتیب دِنہٕ یوان >>> sort_numbers ((('تین اکھ پانژ') 'اکھ تریہ پانژ' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"اعدادن ہٕنٛز فراہم کرنہٕ آمژٕ فہرستہ پیٚٹھٕ (دوٚن کم از کم لمبٲیی ہٕنٛدۍ) دو منتخب کٔرتھ تہٕ بیٚیہ دۄن یم اکھ أکس سۭتۍ قریب چھ تہٕ تمن ترتیب (چھوٗٹۍ نمبر، بٔڑۍ نمبر) سۭتۍ واپس کٔرتھ۔ >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"اعدادن ہنز فہرست (کم از کم دون عناصرن ہند) دنہٕ آمژٕ ، اتھ فہرستس پیٹھ چُھ اکھ لکیری تبدیلی لاگو کرنہٕ یوان ، یتھ پٲنٹھ ساروی کھوتہٕ لوکٹ نمبر 0 چُھ بنان تہٕ ساروی کھوتہٕ بوڑ 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"فلٹر دیٛتٕ صرف انٹیجرن خٲطرٕ کُنہٕ تہٕ پائیتھون ویلیو ہچ فہرست >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"دِنہٕ آمت سٹرنگچ لمبائی واپس ییہٕ کرنہٕ >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"دِنہٕ آمتِس نمبرس n خاطرٕ، ساروی کھوتہٕ بوٕڑ نمبر تلاش کرو یوس n یکساں طور پأنٹھ تقسیم چُھ کران، n کھوتہٕ لوکٹ >>> largest_divisor(15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"دِنہٕ آمت انٹیجرُک پرائم فاکٹرز چُھ لسٹس منٛز لوکٹہٕ پیٹھ بڑس ترتیبس منٛز واپس کران۔ فیکٹرزن منٛز پریتھ اکس فاکٹرزن ہند تعداد گژھہٕ امہِ برابر درج کرنہٕ یُن کہ یہٕ فیکٹرِزنگس منٛز کتہٕ لٹہٕ چُھ نمودار گژھان۔ ان پٹ نمبر گژھہٕ تمام عواملن ہند پروڈکٹُک برابر آسن >>> فیکٹرِزِٹ (۱) [۲، ۲، ۲] >>> فیکٹرِزِٹ (۲۵) [۵، ۵] >>> فیکٹرِزِٹ (۷۰) [۲، ۵، ۷] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"انٹیجرزن ہٕنٛز لسٹ پیٚٹھٕ، تم تمام عنصرو ہٹٲوِو یم اکہ کھۄتہٕ زیادٕ لٹہٕ وٕچھۍ یوان چھ۔ عنصرن ہٕنٛز ترتیب چھ ییتھۍ تھاوان یتھ کٔنۍ ز ان پٹس منٛز چھ۔ >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"ڈاٹا سٹرنگہٕ خٲطرٕ، لوکسر کیریکرن اپرکیسز تہٕ اپرکیسز لوکسرس منز فلوٹ کٔرِتھ۔ >>> flip_case ((('ہیلو') 'ہیلو' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"کنکیٹنٹ تارن ہنز فہرست اکِس تارس منز >>> کنکیٹنٹ ((([]) ' ' >>> کنکیٹنٹ ((['a'، 'b'، 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"صرف ان پٹ تارن ہنز اکھ فہرست چُھ فلٹر کران تمن خاطرٕ یم اکس دیت مُتلق پیش لفظس سۭتۍ شروع چِھ گژھان۔ >>> filter_by_prefix([]، 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"فہرستس منٛز چِھ صرف مثبت نمبر واپس یوان۔ >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"اگر اکھ دِنہٕ آمت نمبر پرائم چُھ تیلہٕ چُھ صحیح واپس یوان، تہٕ بییہٕ غلط۔ >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs چِھ کثیر الثانیس ہند کوففشنٹ۔ find_zero چُھ x ییتھ کیٛن زِ poly ((x) = 0۔ find_zero چُھ صرف صفر نقطہٕ واپس کران، یوتام زِ اگر واریاہ آسہٕ تیوتھ۔ مزید برآں، find_zero چُھ صرف xs یچ فہرست چُھ نیوان ییتھ منٛز کوفشنٹچ جفت تعداد تہٕ ساری کھوتہٕ بوڑ غیر صفر کوفشنٹ آسہٕ تیکیٛازِ یہٕ چُھ حَلچ ضمانت دیوان۔ >>> round ((find_zero[(1, 2] ، 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1] ، 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs پوائنٹس پیٹھ کوففشنٹس xs سٕتۍ کثیر الجہتی ہند تشخیص کران۔ xs[0] + xs[1] * x + xs[1] * x ^ 2 + .... xs[n] * x ^ n واپس \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"یہٕ فنکشن چُھ اکھ لسٹ l نوان تہٕ اکھ لسٹ l' چُھ واپس کران یتھکن کہ l' چُھ یمن انڈیکسن منٛز l سٕتۍ مماثل یم ترین سۭتۍ تقسیم گژھن نہٕ، ییلہٕ زن یمن ہند ویلیو یمن انڈیکسن پیٹھ چِھ یم ترین سۭتۍ تقسیم گژھن چِھ برابر آسان، مگر ترتیب چِھ دنہٕ آمت۔ >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"اکہ لسٹہٕ منٛز چُھ ترتیب دینہٕ آمت منفرد عناصر واپس کران >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"فہرستس منٛز چھ زیادٕ کھوتہٕ زیادٕ عنصر واپس کران۔ >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"یہٕ چُھ 7 ہندسہٕ ہند تعداد واپس کران یُس n کھوتہٕ کم عددن منٛز چُھ ظاہر گژھان یم 11 یا 13 سۭتۍ تقسیم گژھہٕ۔ >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"یہٕ فنکشن چُھ اکھ لسٹ l نوان تہٕ اکھ لسٹ l' چُھ واپس کران یتھکن زِ odd انڈیکسس منٛز چُھ l'l سٕتۍ مماثل، ییلہِ زَن کہِ even انڈیکسس پیٹھ چِھ ایمۍ سٕنز قدر l کہِ even انڈیکس کہِ قدرن برابر، مگر ترتیب شدہ۔ >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"ان پٹ سٹرنگ کس طورس پیٚٹھ چھ انکوڈس انکوڈس سۭتۍ انکوڈ کرنہٕ آمت۔ ڈیکوڈ سٹرنگ چھ رٹرن کران۔\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"ترٛیٚن حرفن ہٕنٛدیٚن سائیکلنگ گرٛپن ہٕنٛدس طورس پیٚٹھ کوڈڈ سٹرنگس دِوان۔\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib چُھ نٔمِس نمبرس دِوان یوس فبونیکی نمبر چُھ تہٕ چُھ نٔمِس نمبرس پٕتمُت۔ >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero چُھ ان پٹ کِس طورس پیٹھ انٹیجرزن ہنز اکھ فہرست نوان۔ یہٕ چُھ True واپس کران اگر لسٹس منز چِھ تریہ الگ الگ عناصر یم صفرس برابر چِھ، تہٕ بصورت دیگر False۔ >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"اکھ سڑک تصور کرو یس اکھ بالکل سیدھی لامحدود زیچھر چِھ۔ n کار چِھ بائیں پیٹھہٕ دچھنہٕ یوان۔ بیک وقت، n کارن ہند اکھ مختلف سیٹ چِھ دچھنہٕ پیٹھہٕ بایاں پیٹھہٕ گاڑان۔ کارن ہندۍ زٕ سیٹہٕ چِھ اکس بییس نش واریاہ دور آسان۔ تمام کارہٕ چِھ ایکسی رفتارس پیٹھ حرکت کران۔ زٕ کارہٕ چِھ ٹکراوان ییلہِ اکھ کار چِھ بائیں پیٹھہٕ دچھنہٕ کہِ طرفہٕ دچھنہٕ کہِ طرفہٕ گاڑہٕ پیٹھہٕ ٹکراوان۔ تاہم، کارہٕ چِھ لامحدود مضبوط تہٕ مضبوط۔ نتیجتاً، چِھ تم پننہِ رفتارس پیٹھ حرکت کران گویا تم چِھنہٕ ٹکراوان۔ یہٕ فنکشن چُھ یتھ ٹکراونٕچ تعداد ظٲہر کران۔\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"عناصرن سۭتۍ زیادٕ عنصرن سۭتۍ فہرست واپس کرنہٕ خاطرٕ 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero چُھ ان پٹ کِس طورس پیٹھ انٹیجرزن ہنز اکھ لسٹ نوان۔ یہٕ چُھ True واپس کران اگر لسٹس منز چِھ زٕ الگ الگ عناصر یم صفرس برابر چِھ، تہٕ بصورت دیگر False۔ >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ان پٹ نمبر x ہٕنٛز عددی بنیاد چُھ بیسسس منٛز تبدیل کران۔ کنورژن پتہٕ چُھ سٹرنگ ریٚپرایزیشن واپس کران۔ بیسٕکۍ نمبر چھِ 10 کھۄتہٕ کم۔ >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"مثلث خاطرٕ اکھ طرفچ لمبائی تہٕ زیادٕ واپسی ہنٛد علاقہٕ دنہٕ آمت۔ >>> مثلث_علاقہٕ (5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"فبونیکی نمبر سیکوینس چِھ فبونیکی سیکوینس ہیوۍ اکھ سیکوینس یمک تعریف چِھ یتھہٕ پٲٹھۍ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). براہ کرم fib4 نمبر سیکوینس ہند n-th عنصر موثر طریقہٕ سان کٔرتھ اکھ فنکشن لیوکھو۔ ریکوریشن استعمال کٔرِتھ نہٕ کیٛن۔ >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"فہرست کِس عناصرن ہنز واپسی میڈین۔ >>> میڈین (([3, 1, 2, 4, 5]) 3 >>> میڈین (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"یہٕ چُھ جانچ کران زِ کیا یہٕ ڈاٹا سٹرنگ چِھ اکھ پالنڈروم >>> is_palindrome (('') سچ >>> is_palindrome (('aba') سچ >>> is_palindrome (('aaaaa') سچ >>> is_palindrome (('zbcd') غلط \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"واپس 2 ^ n ماڈیولو p (اعدادن ہندسہٕ سٕتۍ آگاہ گژھُن) ۔ >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"ان پٹ سٹرنگس بطور انکوڈ چُھ تھاوان encode_shift فنکشنس سۭتۍ۔ ڈیکوڈ سٹرنگ چُھ واپس کران۔\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"الفبِیہٕ منٛز پرٛیٚتھ کردارس پانس سٔتۍ 5 بدلان کوڈڈ سٹرنگ چھ واپس کران۔\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels چُھ اکھ فنکشن یُس سٹرنگ چُھ نوان تہٕ وونکلن ہندس بغٔیر سٹرنگ چُھ واپس کران۔ >>> remove_vowels{\\displaystyle \\mathbb {\\\\displaystyle \\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {\\\\mathbb {} }} } } } }\"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"لوٗٹہِ اگر لسٹہِ منز تمام نمبر threshold t کھوتہٕ کم آسن تہٕ اگر >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"دوٚن نمبرن x تہٕ y جمع کرُن >>> جمع 2، 3، 5 >>> جمع 5، 7، 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"چیک کرِو اگر دۄن لفظن منز چِھ ایکٕس ہی کردار۔ >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') درست >>> same_chars('abcd', 'dddddddddabc') درست >>> same_chars('dddddddabc', 'abcd') درست >>> same_chars('eabcd', 'dddddddddabc') غلط >>> same_chars('abcd', 'dddddddabc') غلط >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') غلط \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"ریٹرن نِتھ فبونیکی نمبر۔ >>> فبونیکی نمبر 10 (فبونیکی نمبر) 55 >>> فبونیکی نمبر 1 (فبونیکی نمبر) 1 >>> فبونیکی نمبر 8 (فبونیکی نمبر) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets چُھ \"<\" تہٕ \">\" ہند اکھ سٹرنگ۔ اگر پرتھ اوپننگ بریکٹس منز چُھ اکھ متعلقہ بند کرن وول بریکٹ تہٕ تیلہٕ چُھ ریٹرن درست۔ >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<<><>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"ریٹرن ٹرو چُھ لسٹ ایلیمنٹس یکساں طورس پیٹھ بڑان یا کم گژان۔ >>> یکساں (([1، 2، 4، 20]) سچ >>> یکساں (([1، 20، 4، 10]) غلط >>> یکساں (([4، 1، 0، -10)) سچ \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"دوٛن فہرستن خاطرٕ چھ ترتیب دینہٕ آمت منفرد مشترکہ عناصر واپس کران۔ >>> مشترکہ ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> مشترکہ ([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n ہٕنٛد ساروٕے کھۄتہٕ بوٚڑ پرائم فیکٹر موٗلو۔ فرض کرو n > 1 تہٕ یہ چھُ نہٕ پرائم۔ >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n چُھ اکھ فنکشن یُس 1 پیٹھ n تام نمبرن ہنز جَمح چُھ کران۔ >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets چُھ \"1\" تہٕ \"3\" ہند سٹرنگ۔ اگر پرتھ اوپننگ بریکٹس منز چُھ اکھ متعلقہ بند کرن وول بریکٹ تہٕ تیلہٕ چُھ ریٹرن ٹرو۔ >>> correct_bracketing \"2\" غلط >>> correct_bracketing \"4\" درست >>> correct_bracketing \"4\" درست >>> correct_bracketing \"4\" درست >>> correct_bracketing \"4\" غلط\"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs چُھ کثیر الثانیس ہند کوففِشینٹ ظٲہر کران۔ xs[0] + xs[1] * x + xs[2] * x^2 + .... یمہِ کثیر الثانیک مشتق چُھ اتھ شکلہِ منز واپس کران۔ >>> derivative ((([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"فبوفب نمبر سیکوینس چِھ فبوبونکی سیکوینس ہیوۍ اکھ سیکوینس یمیچ تعریف ییتھ کیٛن چِھ کرنہٕ آمژ: فبوفب (۰) == 0 فبوفب (۱) == 0 فبوفب (۲) == 1 فبوفب (ن) == فبوفب (ن - ۱) + فبوفب (ن - ۲) + فبوفب (ن - ۳) براہ کرم اکھ فنکشن لیوکھو تاکہ فبوفب نمبر سیکوینس ہند n-th عنصر موثر اندازس منٛز شمار کرنہٕ ییہٕ۔ >>> فبوفب (ن - ۱) 0 >>> فبوفب (ن - ۵) 4 >>> فبوفب (ن - ۸) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"اکھ فنکشن لکھو vowels_count یُس اکھ لفظچ نمائندگی کرن وول سٹرنگ ان پٹ کہ طور پأنٹھ چُھ نیوان تہٕ سٹرنگس منٛز وولن ہنٛد تعداد چُھ واپس کران۔ اتھ صورتس منٛز وول چِھ 'a'، 'e'، 'i'، 'o'، 'u'۔ ییتہٕ چُھ 'y' تییہٕ اکھ وول، مگر صرف ییلہٕ یہٕ دِنہٕ آمت لفظ کس آخرس منٛز چُھ۔ مثال: >>> vowels_count(\"abcde\") 2 >>> vowels_count(\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"مزید ٹیسٹ کیسز۔ \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"انٹیجر x ہند ہندسہٕ سرکلر شیپ کرُن، ہندسہٕ دٲیچ شفٹ کرُن تہٕ نتیجہٕ سٹرنگ کہِ طورس پیٹھ واپس کرُن۔ اگر شفٹ > ہندسن ہند تعداد، تو واپس ہندسہٕ الٹہٕ کرُن۔ >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"ٹاسک اکھ فنکشن لیوکھن یوس ان پٹ کہِ طورس پیٹھ چُھ اکھ سٹرنگ نوان تہٕ چُھ صرف بالٲئی حروفُک جمع ASCII کوڈس منز واپس کران۔ مثال: digitSum{\"}\") => 0 digitSum{\"}abAB{\") => 131 digitSum{\"}abcCd{\") => 67 digitSum{\"}helloE{\") => 69 digitSum{\"}woArBld{\") => 131 digitSum{\"}aAaaaXa{\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"اتھ کامہِ منز، چھےٚ توٚہۍ سٕنٛدس اکس سٹرینٛگس سۭتۍ اکھ عدد دِنہٕ یوان یس اپلو تہٕ نارنجٕچ تعداد چھےٚ ہاوان یم میون ہٕنٛزِ ٹوکری منٛز تقسیم کرنہٕ چھِ یوان۔ اتھ ٹوکری منٛز چھِ اپلو، نارنج، تہٕ مانگو میون۔ سٹرنگس سۭتۍ چھِ اپلو تہٕ نارنجٕچ کل تعداد تہٕ اکھ عدد یس ٹوکری منٛز میون ہٕنٛز کل تعداد چھےٚ ہاوان اتھ سٹرنگس سۭتۍ چھِ ٹوکری منٛز میون میون ہٕنٛز کل تعداد واپس دوان۔ مثال: fruit_distribution\"5(apples and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruit_distribution\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples and 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"اکھ صف یتھ منز اکھ شاخ چِھ نمٲئندگی کران یتھ منز غٲر منفی عدد نوڈس چِھ آسان تہٕ توہیہٕ سُند کٲم چُھ یہ زِ نوڈس منز اکھ پِٹہٕ کرُن تہٕ واپس کرُن۔ پِٹہٕ نُڈ گژھہٕ سُہ نوڈ آسن یتھ منز ساروی کھوتہٕ لوکٹ even ویلیو چُھ۔ اگر ایکِس ہی smallest even value وٲلۍ متعدد نوڈ آسن تیلہٕ node یُس ساروی کھوتہٕ لوکٹ انڈیکس چُھ واپس کرُن۔ پِٹہٕ نُڈ گژھہٕ لسٹس منز واپس کرنہٕ ین، [smallest_value، امہٕ سُند انڈیکس]، اگر نہٕ کنٛہہ even ویلیو آسن یا ڈاٹا آسن صف چُھ خٲلی، واپس کرُن []۔ مثال1: ان پٹ: [4,2,3] آؤٹ پٹ: [2, 1] وضاحت: 2 چُھ ساروی کھوتہٕ لوکٹ even ویلیو، تہٕ 2 چُھ ساروی کھوتہٕ لوکٹ even ویلیو۔ مثال3: ان پٹ: [1,2,2,2,3] آؤٹ پٹ: [2,2, 3] وضاحت: 2 چُھ ساروی کھوتہٕ لوکٹ ویلیو value چُن نوڈ تہٕ نُھ آسان، تہٕ پِہٕ پِہٕ پِہٕ چھوٹہٕ نُھ smallest even ویلیو، مگر انڈیکس چُھ انڈیکس چُھ ساروی نُھ، مثال: 0۔ مثال: کنٛہہ، توہی چھوٹ = 0 *1۔ مثال: سُھ ساروی کھوتہٕ لوکٹ نوڈ، توہی چھوٹ چُھ ساروی نوڈ، توہی چھوٹ، تہٕ نُھ ساروی نوڈ، تہٕ چھوٹ، تہٕ چھوٹ، صفر۔ مثال: 0* مثال: 1۔*\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''توہیہ چھیہ مثبت عددن ہنز اکھ غٲر خالی فہرست دتھ۔ زیرو کھوتہ بوڑ عدد واپس کرو، تہ یتھ منز عددچ فریکوئنسی خود عددچ قدر کھوتہ بوڑ یا برابر چھیہ۔ عددچ فریکوئنسی چھہ اتھ فہرستس منز ظٲہر گژھن وٲلۍ لٹہِ ہنز تعداد۔ اگر نہ یتھہِ قدر موجود آسہِ نہ، تہ واپس کرو -1۔ مثال: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''عددن ہٕنٛز فہرست دنہٕ آمژ، عجیب ترتیب سۭتۍ فہرست واپس۔ عجیب ترتیب، چھ تمہ ویزہ آسان ییٚلہ توٚہہ کم کھۄتہٕ کم قدر سۭتۍ شروع گژھان، پتہٕ بقیہ عددن ہٕنٛز زیادٕ کھۄتہٕ زیٛادٕ، پتہٕ کم کھۄتہٕ زیٛادٕ تہ بیٚیہ ییتہ۔ مثالہٕ: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''مثلث کہ ترٛیٚو طرفو ہٕنٛز لمبٲیی دنہٕ آمژ۔ مثلث کس رقبس چھ 2 اعشاریہ پوائنٹس تام پھیرنہٕ ییلہ ترٛیٚو طرفو اکھ درست مثلث بناوان چھ۔ بصورت دیگر -1 واپس ییٚلہ ترٛیٚو طرفو ہٕنٛد مجموع ترٛیٚیمہ طرفہ کھۄتہٕ زیٛادٕ آسہ، تہٕ سہ مثلث چھ درست مثلث بناوان۔ مثال: مثلث_عرض ({3,4,5) == 6.00 مثلث_عرض ({1,2,10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''اکھ فنکشن لیوکھمُت یُس ٹرٕ چُھ واپس کران اگر آبجیکٹ q اڑان چُھ، تہٕ بییہٕ غلط۔ آبجیکٹ q اڑان چُھ اگر یہٕ متوازن چُھ (یہٕ چِھ اکھ پالنڈرومک لسٹ) تہٕ امہٕ کیٛن عناصرن ہنٛد مجموعہ چُھ زیادٕ کھوتہٕ کم یا برابر زیادٕ کھوتہٕ زیادٕ ممکنہ وزن w۔ مثال: will_it_fly([1, 2], 5) â -> غلط # 1+2 چُھ زیادٕ کھوتہٕ کم ممکنہ وزن، مگر یہٕ چُھ متوازن۔ will_it_fly([3, 2, 3], 1) â -> غلط # یہٕ چُھ متوازن، مگر 3+2+3 چُھ زیادٕ کھوتہٕ زیادٕ ممکنہ وزن۔ will_it_fly[3, 2, 3], 9) â -> سچ # 3+23 چُھ زیادٕ کھوتہٕ کم ممکنہ وزن، تہٕ یہٕ چُھ متوازن۔ will_it_fly([3]، 5) â -> سچ # 3 چُھ زیادٕ کھوتہٕ کم ممکنہ وزن، تہٕ چُھ متوازن۔'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"صفہٕ کہِ انٹیجرز کہِ ایکہِ آرڈر کہِ پیش نظر، ایمہِ صفہٕ کہِ palindromic بناونہٕ خٲطرٕہ چُھ ایلیمنٹن ہنز کم از کم تعداد تلاش کرٕن۔ اکھ palindromic صفہٕ چُھ اکھ صفہٕ یوس پٕتمہِ تہٕ برونٛہہ چُھ ہیوان وُچھنہٕ۔ ایکہِ تبدیلی منز، ہیکو اکھ ایلیمنٹ بییس ایلیمنٹس منز تبدیل کرِتھ۔ مثال کہِ طورس پیٹھ: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''اکھ فنکشن لیوکھ یتھ ز سٹرنگن ہٕنٛز زٕ لسٹہٕ چھ قبول کرنہٕ یوان تہٕ سٹرنگس ہٕنٛز سٲری سٹرنگس منٛز چھ تتھ لسٹ واپس کرنہٕ یوان یتھ منٛز بیٚیہ کنہ لسٹ کھۄتہٕ کم کارن ہٕنٛز مجموعی تعداد چھےٚ۔ اگر دۄن لسٹن منٛز کارن ہٕنٛز مجموعی تعداد آسہٕ تیٚلہٕ، گۄڑنچ لسٹ واپس ییہ دنہٕ۔ مثال total_match([]، []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['4', ['1', ['2', '3', '4', '5', [' 4])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"اکھ فنکشن لیوکھو یُس صحیح چُھ واپس کران اگر دِنہٕ آمت نمبر چُھ 3 پرائم نمبرن ہند ضرب تہٕ بییہٕ غلط۔ زانان زِ (a) چُھ 100 کھوتہٕ کم۔ مثال: is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"توہیہُند کٲم چھُ اَکھ فَنکشن لیکھُن یُس ٹُرٛٹ رٹان چھُ اگر کانٛہہ نمبر x چھُ n کِس سادٕہ پوٗرٹس منٛز تہٕ بیٚیہِ صورتن منٛز چھُ جھوٚت۔ x چھُ n کِس سادٕہ پوٗرٹس منٛز اگر n**int=x مثال: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''اکھ فنکشن لیوکھن یوس اکھ انٹیجر a چُھ نوان تہٕ اگر یہٕ انٹیجر کنٛہہ انٹیجر نمبرُک کیوب چُھ تیلہٕ چُھ یہٕ True واپس کران۔ نوٹ: توہیہ ہیکہِ یہٕ فرض کرِتھ زِ ان پٹ چُھ ہمیشہٕ پَزٕ۔ مثال: iscube (۱) ==> True (۲) ==> False (۱) ==> True (۶۴) ==> True (۰) ==> True (۱۸۰) ==> False (۱) ==> True (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) ==> False (۱۸۰) === false (۱) === false (۱) === false (۱) === false (true= false) === false'''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"توہیہ چھیہ اکھ فنکشن لیکھنک کٲم آمت کرنہ یتھ ہیکساڈسیمل نمبر چھ سٹرنگہِ پٲٹھۍ وصول کران تہ ہیکساڈسیمل ہندسن ہند تعداد چھ گنتی کران یم پرائم چھ (پرائم نمبر، یا پرائم، چھ اکھ قدرتی نمبر یس 1 کھوتہٕ زیادٕ چھ یس زٕ لکٕٹۍ قدرتی نمبرن ہند پروڈکٹ چُھ نہٕ) ۔ ہیکساڈسیمل ہندسن ہند تعداد چھ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F۔ پرائم نمبر چھ 2, 3, 5, 7, 11, 13, 17،...۔ توہیہ چھیہ یتھہِ ہندسن ہند تعداد مقرر کرنُک ضرورت: 2, 3, 5, 7, B (=ڈیسیمل 11), D (=ڈیسیمل 13) ۔ نوٹ: توہیہ ہیکہِ یہٕ فرض کٔرتھ زِ ان پٹ چُھ ہمیشہ صحیح یا خالی سٹرنگ تہٕ علامت A,B,C,D,E,F چِھ ہمیشہ اپر لیٹر۔ مثال: num \"AB\" خاطرٕ \"1\" آؤٹ پٹ گژھ num1۔ \"1\" خاطرٕ \"1\"2\" خاطرٕ \"3\"4\" خاطرٕ \"3\"4\" خاطرٕ \"3\" \"3\" \"3\" خاطرٕ \"3\" \"3\" خاطرٕ\"4\" خاطرٕ \"3\"4\" خاطرٕ \"3\"\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"توہیہ چِھ اکھ اعشاریہ شکلہٕ منٛز اکھ نمبر دنہٕ یوان تہٕ توہیہٕ ہنٛد کٲم چِھ یہٕ بائنری شکلہٕ منٛز تبدیل کرن۔ فنکشن گژھہٕ اکھ سٹرنگ واپس ین، یتھ منٛز پرتھ کردارس سۭتۍ چِھ اکھ بائنری نمبرچ نمائندگی کران۔ سٹرنگس منٛز پرتھ کردار گژھہٕ '0' یا '1' آسن۔ سٹرنگ کس شروعس تہٕ اختتامس پیٹھ گژھہٕ 'db' ہنٛد اکھ اضأفی جوڑٕ حروف آسن۔ اضأفی حروف چِھ فارمیٹس منٛز مدد کرنہٕ خاطرٕ موجود۔ مثال: decimal_to_binary(15) # دیت \"11111db\" decimal_to_binary32) # دیت \"1000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"توہیہ چھیہ اکھ سٹرنگ s دنہ آمژ۔ توہیہ چھوہ یہ چیک کرن کہ سٹرنگ چھا خوش آمژ یا نہ۔ اکھ سٹرنگ چھا خوش آمژ اگر امچ لمبائی کم از کم 3 تہ پرتھ 3 مسلسل حروف چھہِ الگ الگ۔ مثال: is_happy (a) => False is_happy (aa) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"یہ چھ سمسٹرُک ٲخری ہفتہٕ تہٕ اساتذہ چھ طلباءن گریڈ دوان۔ اساتذہ چھ گریڈنگ خٲطرٕ پنُن الگورتھم بناوان۔ صرف اکھ مسئلہ چھ یہ زِ، تم چھ گریڈنگ خٲطرٕ استعمال گژھن وٲل کوڈ کھوژان۔ تم چھ توہیہ کینژن طلباءن خٲطرٕ GPAs ہٕنٛز لسٹ دوان تہ تہ توہیہ چھ اکھ فنکشن لیکھان یس لیٹر گریڈک اکھ لسٹ یتھ ٹیبلہ پیٚٹھٕ استعمال کران ہیکہ دوان: GPA لیٹر گریڈ 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation مثال: (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"اکھ فنکشن لیوکھ یتھ سٹرنگ چُھ نیوان تہٕ اگر سٹرنگچ لمبائی چھِ پرائم نمبر تہٕ کرن درست یا غلط واپس مثال prime_length{\"ہیلو\") == True prime_length{\"abcdcba\") == True prime_length{\"کٹن\") == True prime_length{\"اورنج\") == غلط\"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"اکھ مثبت عدد n دینہٕ آمت، n ہندسہٕ مثبت عددن ہنز تعداد چُھ واپس کران یم 1 سٕتۍ شروع چِھ گژھان یا ختم چِھ گژھان۔\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"مثبت عدد N دنہٕ آمت، امہٕ کیٛن ہندسن ہند مجموعہ چُھ بائنری منٛز واپس کران۔ مثال N = 1000 خاطرٕ، ہندسن ہند مجموعہ 1 آسہٕ آؤٹ پٹ \"1\" گژھہٕ۔ N = 150 خاطرٕ، ہندسن ہند مجموعہ 6 آسہٕ آؤٹ پٹ \"110\" گژھہٕ۔ N = 147 خاطرٕ، ہندسن ہند مجموعہ 12 آسہٕ آؤٹ پٹ \"1100\" گژھہٕ۔ متغیرات: @N عدد پابندین: 0 â‰¤ N â‰¤ 10000. آؤٹ پٹ: بائنری نمبرن ہنٛز اکھ تار \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"انٹیجرزن ہنز اکھ غٲر خالی فہرست دِنہٕ آمٕژ، lst۔ جوڑٕ جوڑ عناصر یم انڈےکسس پیٹھ چِھ عجیب۔ مثالہٕ: add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"اکھ فنکشن لیوکھ یتھ سٹرنگ چُھ نیوان تہٕ امک اکھ آرڈرڈ ورجن چُھ واپس کران۔ سٹرنگک آرڈرڈ ورجن چُھ اکھ سٹرنگ ییتہٕ تمام الفاظ (جدا کرتھ) اکس نئس لفظس سۭتۍ چِھ تبدیل یوان کرنہٕ یتہٕ تمام کردار چِھ ascii ویلیو کہ بنیادس پیٹھ آرڈرڈ آرڈر منٛز ترتیب یوان کرنہٕ۔ نوٹ: توہیہ گژھہٕ جملس منٛز الفاظ تہٕ خالی جگہوں ہینز ترتیب برقرار تھون۔ مثلن: anti_shuffle ((('Hi') لوٹان چُھ 'Hi' anti_shuffle ((('hello') لوٹان چُھ 'ehllo' anti_shuffle (('ہیلو ورلڈ!!!') لوٹان چُھ 'ہیلو !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"توہیہ چُھ اکھ 2 جہتی ڈیٹا، بطور نیسٹڈ لسٹ، یس میٹرکس ہوی چھ، تاہم، میٹرکس برعکس، پرتھ صفس منٛز ہیکن کالمن ہنٛد اکھ مختلف تعداد شٲمل گژھتھ۔ lst، تہٕ انٹیجر x دنہٕ آمت، فہرستس منٛز انٹیجر x تلاش کرو، تہٕ ٹپلزن ہنٛز فہرست واپس کرو، [(x1, y1), (x2, y2) ...] یتھکن کہ پرتھ ٹپل اکھ کوآرڈینیٹ چُھ - (صف، کالم) ، 0 سۭتۍ شروع گژھن۔ ابتدائی طور پیٹھ صفن ہنٛد کوآرڈینیٹس چُھ بڑھون ترتیب سۭتۍ ترتیب دینہٕ یوان۔ نیز، کالمن ہنٛد کوآرڈینیٹس چُھ ڈراپنگ ترتیب سۭتۍ ترتیب دینہٕ یوان۔ مثالہٕ: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_((1), [] ==_[، 1، 2، 3، 2، 2]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"غیر منفی عددن ہنز اکھ صف دِنہٕ پتہٕ، ترتیب دینہٕ پتہٕ، دیژٕنہٕ آمژِ صفچ اکھ کاپی واپس کرِتھ، اگر رقم (پہل انڈیکس ویلیو، ٲخری انڈیکس ویلیو) چُھ عجیب، تہٕ اگر رقم (پہل انڈیکس ویلیو، ٲخری انڈیکس ویلیو) چُھ جڑ، تہٕ ترتیب دینہٕ آمژِ صف چِھ نزولی ترتیبس منز۔ نوٹ: * دیژٕنہٕ آمژِ صف چُھ نہٕ بدلان۔ مثال: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"اکھ فنکشن انکرپٹ بناو یُس اکھ سٹرنگ بطور دلیل چُھ نوان تہٕ اکھ سٹرنگ چُھ واپس کران یُس الف بے چُھ گھیرٕ یوان۔ الف بے گژھہِ یتھ طریقس پیٹھ گھیرٕ ین یتھ پٲنٹھ حرف چِھ زٕ ضرب دوٛن مقاماتن پیٹھ نیچے گژھان۔ مثلن: انکرپٹ ((('hi') چُھ واپس کران 'lm' انکرپٹ ((('asdfghjkl') چُھ واپس کران 'ewhjklnop' انکرپٹ ((('gf') چُھ واپس کران 'kj' انکرپٹ ((('et') چُھ واپس کران 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"توہیہ چھیہ انٹیجرزن ہنز اکھ لسٹ۔ اکھ فنکشن لیوکھ next_smallest () یوس لسٹک 2nd چھوٹین عنصر واپس چھِ کران۔ اگر نہٕ کنہہ تہِ عنصر موجود آسہِ نہٕ تیلہٕ چُھس نٔ تہٕ واپس کران۔ next_smallest () () () == 2 next_smallest () == 2 next_smallest () == None next_smallest () == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"توہیہ چِھ لفظن ہنز اکھ تار دیوان، تہٕ توہیہ چِھ ٹاسک بورڈمن ہند تعداد گنُن۔ بورڈ چُھ اکھ جملہ یوس لفظ \"I\" سٕتۍ شروع چُھ گژھان۔ جملہ چِھ '.', '?' یا '! سٕتۍ محدود۔ مثالہٕ پٲٹھۍ: >>> is_bored(\"ہیلو ورلڈ\") 0 >>> is_bored(\"آسمان چُھ نیُو۔ آفتاب چُھ چمکان۔ میہ چُھ یتھ موسمس پسند کران\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''اکھ فنکشن بنٲوِتھ یُس 3 نمبرن نِش ہیکہِ تھٲوِتھ۔ اگر اکھ نمبر بیین دۄن ہندس مجموعس برابر آسہِ تہٕ تمام نمبر آسہِ انٹیجر۔ بیین صورتن منز چُھ غلط واپس گژھان۔ مثالہٕ any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1)'''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"اکھ فنکشن لیوکھن یوس اکھ پیغام چُھ نوان، تہٕ ایمہِ کِس اندازس منز چُھ انکوڈ کران زِ سُہٕ چُھ تمام حروفن ہند کیس تبدیل کران، تہٕ میسجِ منز چُھ تمام ووکلن ایمِہِ حرفہِ سٕتۍ بدلاوان یوس انگریزی الفبِیہِ منز چُھ ووکلس برونٛہہ 2 مقامن پیٹھ ظٲہر گژھان۔ صرف حروف چِھ فرض کران۔ مثالہٕ: >>> انکوڈ('ٹیسٹ') 'TGST' >>> انکوڈ('یہ چُھ اکھ پیغام') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"توہہ چھ عددن ہنز اکھ فہرست دنہ آمژ۔ توہہ چھ ساروی کھوتہٕ بڈ پرائم ویلیو ژھانڈُن تہٕ امہ کس ہندسن ہند مجموعہ واپس کرنُک ضرورت۔ مثال: lst = [0,3,2,1,3,5,7,4,5,5,5,5,2,181,32,4,32,3,2,32,324,4,3] آوٹ پٹ گژھہِ 10 lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] آوٹ پٹ گژھہِ 25 lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] آوٹ پٹ گژھہِ 13 lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] آوٹ پٹ گژھہِ 11 lst = [0,81,12,31,21] آوٹ پٹ گژھہِ 3 lst = [0,1,8,1,2,1,7] آوٹ پٹ گژھہِ 7 \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ڈکشنری دنہٕ آمت، اگر تمام کیزٕ لوئر کیس منٛز سٹرنگ آسہٕ یا تمام کیزٕ اوپری کیس منٛز سٹرنگ آسہٕ، تیلہٕ کرن True واپس۔ فنکشن گژھ غلط واپس کرن اگر دیٛتمت ڈکشنری چِھ خٲلی۔ مثالہٕ: check_dict_case{\"a\":\"apple\"، \"b\":\"banana\"}) گژھ True واپس کرن۔ check_dict_case{\"a\":\"apple\"، \"A\":\"banana\"، \"B\":\"banana\"}) گژھ False واپس کرن۔ check_dict_case{\"a\":\"apple\"، 8:\"banana\"، \"a\":\"apple\"}) گژھ False واپس کرن۔ check_dict_case{\"Name\":\"John\"، \"Age\":\"36\"، \"City\":\"Houston\"}) گژھ False واپس کرن۔ check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345\"}) گژھ True واپس کرن۔\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"اکھ فنکشن چُھ نافذ کران یُس اکھ غأر منفی عدد چُھ نیوان تہٕ گۄڈنکی n عددن ہنٛز اکھ صف چُھ واپس کران یم پرائم نمبر چِھ تہٕ n کھوتہٕ کم چِھ۔ مثلن: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"دوٛن عددن لیکھن وول فنکشن پُر کٔرِتھ تہٕ یمن ہندسن ہند ہند ہندسن ہند پیداوارٕ لٔبِتھ۔ فرض کرو زِ ان پٹ چُھ ہمیشہٕ درست۔ مثال: ضرب چُھ 148, 412 واپس کرن۔ ضرب چُھ 72, ضرب چُھ 0 واپس کرن۔ ضرب چُھ 0 واپس کرن۔ ضرب چُھ 14، 15 واپس کرن۔\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"اکھ سٹرنگ s دنہٕ آمت، اپرکیسٕل ووکلن ہندس تعدادس چُھ برابر انڈیکسس منز شمار کران۔ مثالہٕ پٲٹھۍ: count_upper{\\displaystyle \\mathbb {a} } دیوان چُھ 1 count_upper{\\displaystyle \\mathbb {a} } } دیوان 0 count_upper{\\displaystyle \\mathbb {a} } } دیوان چُھ 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''اکھ فنکشن بنٲوِو یوس اکھ ویلیو (سٹرننگ) چُھ ننیومُت یوس نمبرٕچ نمائندگی کران چُھ تہٕ ایمِچ قریبی عددی نمبر چُھ واپس کران۔ اگر یہٕ نمبر چُھ زٕ عددن سٕتۍ برابر فٲصلہٕ، تہٕ ایمِچ تعداد چُھ صفرٕ پیٹھہٕ دور کران۔ مثالہٕ >>> closest_integer(\"10\") 10 >>> closest_integer(\"15.3\") 15 نوٹ: صفرٕ پیٹھہٕ دور کروُن چُھ یہٕ ونان زِ اگر دِنہٕ آمُت عدد چُھ زٕ عددن سٕتۍ برابر فٲصلہٕ، تہٕ توہیہ گژھہٕ یہٕ واپس کرُن زِ یوس صفرٕ پیٹھہٕ دور چُھ آسان سُہٕ چُھ یوس صفرٕ پیٹھہٕ دور چُھ۔ مثالہٕ پٲٹھۍ closest_integer\"(14.5\") گژھہٕ 15 واپس کرن تہٕ closest_integer\"(-14.5\") گژھہٕ -15.'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"اکھ مثبت عدد n دنہٕ آمت، توہیہ چُھ پتھرک n سطحن ہنٛد اکھ ڈھیر بناون۔ گوڑنکس سطحس منٛز چِھ n پتھر۔ برونٹھمہٕ سطحس منٛز پتھرن ہنٛد تعداد چُھ: - اگر n عجیب چُھ تیلہٕ چُھ اگمی عجیب نمبر۔ - اگر n جوڑ چُھ تیلہٕ چُھ اگمی جڑ نمبر۔ فہرستس منٛز پرتھ سطحس منٛز پتھرن ہنٛد تعداد واپس ییتہٕ انڈیکس i منٛز عنصر سطحس منٛز پتھرن ہنٛد تعدادچ نمائندگی چُھ کران (i+1) ۔ مثالہٕ: >>> make_a_pile (n) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"توہیہ چھِ لفظن ہند اکھ تار یتھ کما یا اسپیسن منز الگ کرنہٕ آمت۔ توہیہ چھوہ پننِس تارس لفظن منز تقسیم کرُن تہٕ لفظن ہند اکھ صف واپس کرُن۔ مثال: words_string ((\"ہیلو، میہ ناو چھُ جان\") == [\"ہیلو\"، \"میرا\"، \"نام\"، \"ہُو\"، \"جان\"] words_string ((\"اکھ، دۄن، ترے، ژور، پانژ، شین\") == [\"اکھ\"، \"دۄن\"، \"ژور\"، \"ژور\"، \"پانژ، شین\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"یہٕ فنکشن چُھ زٕ مثبت نمبر x تہٕ y نوان تہٕ چُھ ساری کھوتہٕ بڑُھ جُر عدد عدد واپس کران یُس حد [x، y] تام چُھ آسان۔ اگر یژھہٕ نمبر چُھ نہٕ آسان، تیلہٕ فنکشن گژھ -1 واپس کرن۔ مثلن: منتخب_نمبر 12، 15 = 14 منتخب_نمبر 13، 12 = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"توہہ چھہِ زہ مثبت عدد n تہٕ m دنہ آمت، تہٕ توہہِ کامہ چھہ n پیٹھہٕ m تام عددن ہنز اوسطُک حساب لگاون۔ جوابس قریب ترین عددس تام کرو کرو تہٕ یہِ بائنری منٛز تبدیل کرُن۔ اگر n چُھ m کھوتہٕ بڈ، تہٕ -1 واپس کرُن۔ مثال: rounded_avg{\\displaystyle {\\displaystyle {\\displaystyle {\\mathbf {v}}_{\\displaystyle {\\mathbf {v}}_{\\displaystyle {\\mathbf {v}}_{\\displaystyle {\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{\\mathbf {v}}_{v}}}}}}}}}}}} ، 20، 20، 33}\"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"مثبت انٹیجرزن ہندس فہرستس دیتھ x۔ تمام عناصرن ہنز ترتیب شدہ فہرست واپس ییتھ منٛز کنہہ تہٕ عدد چُھ نہٕ۔ نوٹ: واپس ینہٕ واجن فہرست گژھہٕ بڑھون ترتیبس منٛز ترتیب دنہٕ یُن۔ مثلن: >>> unique_digits (([15، 33، 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"انٹیجرزن ہندس اکس صفس منز چُھ 1 تہٕ 9 کہِ درمیان ہندسن ترتیب دِنہٕ یوان، نتیجِی صفس چُھ الٹہٕ یوان، تہٕ پَتہٕ پرتھ ہندسہٕ چُھ اتھ متعلقہ ناوس سٕتۍ بدلنہٕ یوان \"1\"، \"2\"، \"3\"، \"4\"، \"5\"، \"5\"، \"6\"، \"7\"، \"8\"، \"9\" مثلن: arr = [2، 1، 1، 4، 5، 8، 2، 3] -> ترتیب arr -> [1، 1، 2، 2، 3، 4، 5، 8] -> الٹہٕ arr -> [8، 5، 4، 3، 2، 2، 1، 1] واپس [\"آٹھ\"، \"پژ،\" \"تین\"، \"2\" \"تین\"، \"2\" \"2\" \"وٕچ\"، \"1\" \"1\" اگر صف چِھ خٲلی، اکھ خالی صف واپس: arr = [] واپس [] اگر صفس منز کنٛہہ عجیب نمبر آسنہٕ تیلہٕ چُھ اتھ نظر انداز کران۔ arr = [1، 1، 1، 55] -> arr - [1-، 1، 55] -> الٹہٕ arr = [51] - \"1، 1، 1، 1، 2، 5، 5، 6، 7، 8، 9، 9، 9، 9، 9، 9، 10، 11، 12، 12، 12، 12، 13، 14، 14، 15، 16، 17، 17، 19، 19، 19، 19، 19، 19، 19، 19، 19، 19، 20، 20، 20، 20، 20، 20، 20، 20، 21، 21، 21، 22، 23، 24، 24، 24، 25، 25، 25، 25، 25، 25، 25، 25، 25، 26، 26، 26، 26، 26، 26، 26، 26، 27، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 29، 31، 31، 31، 31، 31، 31، 31، 31، 31، 31، 31، 31،\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"فنکشن f چُھ لاگو کران یُس n چُھ بطور پیرامیٹر نوان، تہٕ n سائزچ اکھ فہرست چُھ واپس کران، یتھکن زِ انڈیکس i پیٹھ عنصرچ قدر i ہند فیکٹوریل چِھ اگر i چُھ یکساں یا 1 پیٹھ i تام اعدادن ہند مجموعہ۔ i چُھ 1 پیٹھ شروع گژھان۔ i ہند فیکٹوریل چُھ 1 پیٹھ i تام اعدادن ہند ضرب (1 * 2 * ... * i) ۔ مثال: f ((5) == [1، 2، 6، 24، 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"مثبت عدد n دنہٕ آمت، اکھ ٹپل واپس ییتھ منٛز even تہٕ odd انٹیجر پالنڈرومچ تعداد چِھ یس حد کہ اندر چِھ یوان ((1، n) ، شٲمل چِھ۔ مثال1: ان پٹ: 3 آؤٹ پٹ: (1, 2) وضاحت: انٹیجر پالنڈروم چِھ 1، 2، 3۔ یمن منٛز چُھ اکھ even، تہٕ دۄن چِھ odd۔ مثال2: ان پٹ: 12 آؤٹ پٹ: (4, 6) وضاحت: انٹیجر پالنڈروم چِھ 1، 2، 3، 4، 5، 6، 7، 8، 9، 11۔ یمن منٛز چِھ ژور even، تہٕ 6 odd۔ نوٹ: 1 <= n <= 10 ^ 3 2۔ ٹپل چِھ بالترتیب even تہٕ odd انٹیجر پالنڈرومچ تعداد واپس کران۔ \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"اکھ فنکشن لکھو count_nums یُس انٹیجرزن ہندس صفس چُھ نیوان تہٕ چُھ عناصرک تعداد واپس کران یتھ ہندس ہندسن ہند مجموعہ چُھ > 0۔ اگر اکھ نمبر منفی چُھ، تیلہٕ آسہٕ امک گوڑنک دستخط شدہ ہندسہٕ منفی: مثلن -123 ہندسہٕ چِھ -1، 2، تہٕ 3 پیٹھ دستخط آمت کرنہٕ: >>> count_nums[]) == 0 >>> count_nums[- 1، 11، -11]) == 1 >>> count_nums[- 1، 1، 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"یہٕ چُھ اکھ صف ییتھ منٛز N عدد چِھ آسان۔ صفس منٛز چِھ نمبرن بے ترتیب ترتیب دینہٕ یوان۔ توہیہٕ چِھ یہٕ طے کرٕن کہ کیا امہٕ سۭتۍ چِھ ممکن کہ اکھ صف چِھ غأر کم گژھنہٕ واجنہٕ ترتیبس منٛز ترتیب دینہٕ آمژ۔ توہیہ چِھ دیژھنہٕ صفس پیٹھ درج ذیل کارروائی کرتھ یہٕ طے کرُن کہ کیا امہٕ سۭتۍ چِھ ممکن کہ اکھ صف چِھ غأر کم گژھنہٕ واجنہ ترتیبس منٛز ترتیب دینہٕ آمژ: توہیہ چِھ دٔچھنہٕ طرفہٕ شیفٹ آپریشنچ کنہہ تہٕ تعداد انجام دینہٕ آمژ۔ اکھ دٔچھنہٕ طرفہٕ شیفٹ آپریشن چُھ امہٕ معنی کہ صفک تمام عناصر چِھ دٔچھنہٕ طرفہٕ اکہٕ پوزیشنہٕ سۭتۍ دٔچھنہٕ سمتہٕ منٛز منتقل گژان۔ صفک ٲخری عنصر چُھ صفس منٛز شروع گژھنہٕ گژھنہٕ پیٹھہٕ پوزیشن منٛز یعنی 0th انڈیکس۔ اگر امہٕ کارروائی انجام دینہٕ سۭتۍ چِ ترتیب دینہٕ آمژ صف چِچ واپسی پیٹھ چِ توہٕ واپس گژھ حقیقی، بییہٕ غلط واپسی۔ اگر دیژ صف چِ چِ خٲلی تیلہٕ واپسی۔ نوٹ۔ نوٹ نوٹ نوٹ نوٹ: دیژھ دیژھ دیژھ دیت فہرست چِ منفرد عناصرن ہنٛد ضمانت۔ مثالہٕ خاطرٕ: move_one_{((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"اتھ مسلس منز، کرِہ توہی اکھ فنکشن یُس نمبرن ہند دۄن لسٹن نِش چُھ نیران، تہٕ یہٕ چُھ طے کران زِ کیاہ چُھ یمن درمیان عناصرن ہند تبادلہ کرنُک ممکن تاکہ lst1 چُھ صرف even نمبرن ہنز فہرست بناونہٕ۔ lst1 تہٕ lst2 درمیان تبدیل کرنہٕ آمتین عناصرن ہندس تعدادس پیٹھ چھنہٕ کنہہ حد۔ اگر lst1 تہٕ lst2 درمیان عناصرن ہند تبادلہ کرنُک امکان چُھ تاکہ lst1 ہند تمام عناصر گژھن even، توہی چِھ \"YES\" واپس کران۔ بصورت دیگر، \"NO\" واپس۔ مثالہٕ پٲٹھۍ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" یہٕ چُھ فرض یوان کرنہٕ زِ ان پٹ لسٹہٕ گژھ نہٕ خالی۔ \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"اگر اکھ سٹرنگ چُھ اکھ اسپیس سیپیرایڈ لوکاسٹ لیٹرزن ہنز نمائندگی کران، تہٕ سُہٕ چُھ زیادٕہ تکرار گژھن وول حرفچ اکھ ڈکشنری واپس کران تہٕ اتھ منز چُھ اتھ متعلقہ گنتی تہٕ آسان۔ اگر کنہہ حرفن ہند تعداد چُھ ایکسی آسان، تہٕ سُہٕ چُھ تمن تمام واپس کران۔ مثال: ہسٹوگرام (a) == {'a': 1، 'b': 1، 'c': 1} ہسٹوگرام (a) == {'a': 2، 'b': 2} ہسٹوگرام (a) == {'a': 2، 'b': 2} ہسٹوگرام (b) == {'b 4}': ہسٹوگرام (a') == {'b 4} }\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"ٹاسک چِھ دوٛن سٹرنگن s تہٕ c دنہٕ آمت، توہیہ چِھ s منٛز موجود تمام کردار حذف کرٕنۍ یُس c منٛز کنہٕ تہٕ کردارس برابر چُھ تہٕ پتہٕ چیک کرٕنۍ زِ نتیجہٕ سٹرنگ چھا پالینڈروم۔ اکھ سٹرنگ چھا پالینڈروم وننہٕ یوان اگر یہٕ پٔٹھمہٕ سۭتۍ پٔٹھمہٕ سۭتۍ ہیوی چُھ یوان۔ توہیہ پزِ چیک کرنہٕ خاطرٕ نتیجہٕ سٹرنگ تہٕ ٹرو/فالس شٲمل ٹپل واپس کرٕنۍ۔ مثالہٕ خٲطرٕ s = \"abcde\"، c = \"ae\"، نتیجہٕ گژھہٕ ('bcd'، False) گژھہٕ s = \"abcdef\"، c = \"b\" نتیجہٕ گژھہٕ ('acdef'، False) گژھہٕ s = \"abcdedcba\"، c = \"abc\" نتیجہٕ گژھہٕ ('cdedc'،True) آسن۔\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"سٹرنگن ہنز اکھ فہرست دیتھ، یتہِ پرتھ سٹرنگس منز چِھ صرف ہندسہٕ آسان، اکھ فہرست واپس کرٕن۔ آؤٹ پٹُک پرتھ عنصر i گژھہِ \"1\" ان پٹ کہِ سٹرنگ i منز عجیب عناصرن ہنز تعداد \"1\" آسن۔ یتہِ تمام i گژھہِ ان پٹ کہِ i'th سٹرنگس منز عجیب ہندسن ہندسہٕ سٕتۍ تبدیل گژھُن ۔ >>> odd_count{\\displaystyle {\\\\sqrt {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"انٹیجرزن ہندس اکس صفس دیتتھ، نمبرن ہند کنہ تہِ غٲر خٲلی ذیلی صفُک کم کھوتہٕ کم مجموعہٕ ژھانڈُن۔ مثال minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"توہہ چھہِ کنہِ کھۅنہِ ہند اکھ مستطیل گرڈ دِنہ آمت۔ پرتھ صفہ چھیہ اکس کھۅنہِ ہند نمٲین، تہ پرتھ صفہ چھیہ اکس آبہِ ہند نمٲین۔ پرتھ کھۅنہِ چھیہ اکھ بالٹی یس اتھ منزہٕ آب ننہٕ خٲطرٕ استعمال ہکہِ گژھتھ، تہ تمام بالٹی ہنز گنجائش چھیہ یکساں۔ توہہِ کامہ چھہ بالٹیو سیتۍ کھۅنہِ خالی کرن۔ بۅنہ کنہِ چھیہ تمہِ لٹہِ بۅنہِ کم کرنہٕ خٲطرٕ ضرورت۔ مثال: ان پٹ: گرڈ: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 آؤٹ پٹ: 6 مثال: ان پٹ: گرڈ: [[0,0,1,1], [0,0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 آؤٹ پٹ: 5 مثال: ان پٹ: [[0,0,0]], [0,0,0]] bucket_capacity: 5 آؤٹ پٹ بۅنہٕ چھیہِچ اکھ بالٹی: 0 * بند: 1 * * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 10 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"اتھ کٹاہس منز چُھ توہیہ اکھ غیر منفی عددن ہندس صفس ترتیب دینہٕ آمُت تہٕ تہندِ بائنری نمائندگی منز چُھ نمبر ونن ہندس ترتیبس مطابق چُھ ۔ یتھی تعدادس منز چُھ ، اعشاریہ قدرس پیٹھ چُھ مبنی۔ اتھ گژھہِ ییتہِ نافذ گژھُن: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"اگر سٹرنگ s چُھ خٲلی تہٕ فنکشن گژھہٕ خٲلی لسٹ واپس۔ نوٹ: توہہ ہیکہِ یہٕ فرض کٔرِتھ زِ ان پٹ سٹرنگ چِھ صرف لیٹرز تہٕ سپیسز۔ مثالہٕ: select_words \"مارۍ ٲس اکھ لَچھِٹ بٲڈ\" 4) ==> [\" لَچھِٹ\"] select_words \"مارۍ ٲس اکھ لَچھِٹ بٲڈ\" 3) ==> [\"مارۍ\"، \"بٲڈ\"] select_words \"سادہ سفید جگہ\" 2) ==> [] select_words \"ہیلو ورلڈ\"، 4) ==> [\" ورلڈ\"] select_words \"آنکل سیم\"، 3) ==> [\"آنکل\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"توہیہ چھ اکھ لفظ دنہ آمت۔ توہیہ چھوہ اکھ وۅل آواز ژھانڈنہ یُس دۅن مصمتن درمیان دۅن لفظن ہنز دچھنہ طرفہ پیٹھہ کھڑا چھ (case sensitive) ۔ شروع تہٕ اختتامس منز وۅل آواز چھنہ شمار کرنہ یوان۔ اگر توہیہ کنہ وۅل آواز نہ ژھانڈنہ آمژہ اگر توہیہ ہیر کُن شرط پورہ کر۔ توہیہ ہیکہِ یہ فرض کٔرتھ زِ دِنہ آمت سٹرنگس منز چھہ صرف انگریزی حرف۔ مثال: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''توہیہ چھہِ دۅن سٹرنگن ہنز اکھ لسٹ دِنہ آمژ، دۅن سٹرنگن منز چھہِ صرف اوپن parentheses '(' یا بند parentheses ') '۔ توہیہ چھہِ یہ چیک کرن کہ کیاہ چھہِ ممکن زِ دۅن سٹرنگن گژھہِ کنہِ ترتیبس منز جوڑنہ، تاکہ نتیجہِ سٹرنگ آسہِ اصل۔ اکھ سٹرنگ S چھہِ صرف تہِ اصل زِ اگر S منز تمام parentheses آسن متوازن۔ مثالہ: سٹرنگ '((()) ' چھہِ اصل، ییلہ زن سٹرنگ '()) ' چھہِ نہ۔ اگر اکھ اصل سٹرنگ بناونک طریقہ آسہِ، تہِ دوٚپ 'ہ'۔ بییہِ دوٚپ 'نہ'۔ مثالہ: match_parens[('() ، ') ']) == 'ہاں' match_parens[(') ، ') ']) == 'نہ' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"صفہٕ arr یُس عددن پیٹھ مشتمل چُھ تہٕ اکھ مثبت عدد k یُس آر آر منٛز زیادٕ کھوتہٕ زیادٕ k نمبرن سۭتۍ چُھ، اکھ ترتیب شدٕ فہرست چُھ واپس کران۔ مثال1: ان پٹ: arr = [-3، -4، 5]، k = 3 آؤٹ پٹ: [-4، -3، 5] مثال2: ان پٹ: arr = [-4، -4، 4]، k = 2 آؤٹ پٹ: [-4، 4] مثال3: ان پٹ: arr = [-3، 2، 1، 2، 1، 2]، k = 1 آؤٹ پٹ: [2] نوٹ: 1. صفہٕ ہنٛد لمبائی چِھ [1، 1000] کس حدس منٛز آسان۔ 2. صفہٕ منٛز عناصر چِھ [-1000، 1000] کس حدس منٛز آسان۔ 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"انٹیجرزن ہنز اکھ غٲر خالی فہرست دیتھ، تمام عجیب عناصرن ہند مجموعہ چُھ واپس کران یم برابر پوزیشنن پیٹھ چِھ۔ مثال حل (([5, 8, 7, 1]) ==> 12 حل (([3, 3, 3, 3, 3]) ==> 9 حل (([30, 13, 24, 321]) ==>0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"آر آر تہٕ اکھ انٹیجر k ہنٛد غٲر خٲلی صفہٕ دینہٕ آمت، آر آر کس گۄڈنکس k عناصرن منٛز زیادٕ کھوتہٕ زیادٕ دوٛن ہندسن سۭتۍ عناصرن ہیند مجموعہٕ چُھ واپس کران۔ مثال: ان پٹ: arr = [111,21,3,4000,5,6,7,8,9], k = 4 آؤٹ پٹ: 24 # 21 + 3 سُند مجموعہٕ پابند: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) \"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"مثبت عدد n دنہٕ آمت، اکھ ترتیب شدٕ فہرست واپس ییتھ منٛز کالٹز ترتیبس منٛز عجیب نمبر چِھ آسان۔ کولٹز قیاس چِھ ریاضی منٛز اکھ قیاس یُس اکس ترتیبس سۭتۍ متعلق چُھ یمک تعریف ییتھ کیٛن چِھ کرنہٕ یوان: کنہہ تہٕ مثبت عدد n سۭتۍ شروع کرو۔ پتہٕ پرتھ اصطلاح چِھ پٔتِمہٕ اصطلاح سۭتۍ ییتھ کیٛن پٔٹھۍ حأصل کرنہٕ یوان: اگر پٔتِمہٕ اصطلاح چِھ برابر، تیلہٕ چِھ ینہٕ وٲل اصطلاح پچھلی اصطلاحس منٛز اکھ۔ اگر پٔتِمہٕ اصطلاح عجیب چِھ، تیلہٕ چِھ ینہٕ وٲل اصطلاح پچھلی اصطلاحس منٛز اکھ۔ اگر پچھلی اصطلاح عجیب چِھ، تیلہٕ چِھ اگلی اصطلاح 3 گنا پچھلی اصطلاح جمع 1۔ قیاس چُھ یہٕ کہ n ہنٛد کنہہ تہٕ قدر آسہٕ نہٕ، ترتیب چِھ ہمیشہ 1 تام واتان۔ نوٹ: 1. کولٹز(1) چُھ [1] ۔\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"توہیہ چھِ اکھ فنکشن لیکھان یُس دِنہٕ آمتِس تاریخس درست کران چھِ تہٕ اگر تاریخ درست چِھ تیلہٕ چِھ درست واپس کران۔ غلط۔ تاریخ چِھ درست اگر یم تمام قواعد پورٕ گژھن: 1. تاریخچ تار چِھ نہٕ خٲلی۔ 2. مہینن خاطرٕ چِھ دنن ہنٛد تعداد 1 کھوتہٕ کم یا 31 دنن کھوتہٕ زیادٕ۔ تہٕ مہینن خاطرٕ چِھ دنن ہنٛد تعداد 1 کھوتہٕ کم یا 30 دنن کھوتہٕ زیادٕ۔ 4,6,9,11۔ تہٕ، مہینن خاطرٕ چِھ دنن ہنٛد تعداد 1 کھوتہٕ کم یا 29 کھوتہٕ زیادٕ نہٕ۔ 2. مہینن ہنٛد تعداد گژھ نہٕ 1 کھوتہٕ کم یا 12 کھوتہٕ زیادٕ گژھت۔ 4. تاریخ گژھ فارمیٹس منٛز آسن۔ مثلن: valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-01-2040') => false_ valid_date (('06-04-2020') => valid_date (date (('06/04/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''لفظن ہندس تارس دیتتھ، سفیدس پیٹھ تقسیم گژھن وألن لفظن ہنٛز اکھ فہرست واپس کرُن، اگر متنس منٛز سفیدس پیٹھ کنہہ تہٕ جایہٕ چُھ نہٕ آسان تہٕ توہیہ گژھہٕ کما ' پیٹھ تقسیم گژھت، اگر کنہہ تہٕ کما موجود چُھ نہٕ تیلہٕ توہیہ گژھہٕ الفباہس منٛز عجیب ترتیب سۭتۍ لوئر کیس حروفن ہنٛز تعداد واپس کرُن، ord{\"a\") = 0، ord{\"b\") = 1، ... ord{\"z\") = 25 مثالہٕ split_words{\"ہیلو ورلڈ!\") â -> [\"ہیلو\"، \"دنیا!\"] split_words{\"ہیلو، دنیا!\") â -> [\"ہیلو\"، \"دنیا!\" split_words{\"abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''اعدادن ہنز فہرست دنہٕ آمت، ییہٕ واپس کرنہٕ اگر تم چِھ بڑھون ترتیبس منٛز ترتیب دینہٕ آمت۔ اگر فہرستس منٛز اکس کھوتہٕ زیادٕ نمبر چِھ آسان، تیلہٕ چُھ غلط واپس کرنہٕ آمت۔ منفی نمبر نہٕ تہٕ صرف عدد۔ مثالہٕ چِھ ترتیب دینہٕ آمت۔ [1]) -> سچ چُھ ترتیب دینہٕ آمت [ 1، 2، 3، 4، 5]) -> سچ چُھ ترتیب دینہٕ آمت [ 1، 2، 3، 4، 5]) -> غلط چُھ ترتیب دینہٕ آمت [ 1، 2، 3، 5، 6]) -> سچ چُھ ترتیب دینہٕ آمت [ 1، 2، 3، 4، 5، 7]) -> غلط چُھ ترتیب دینہٕ آمت [ 1، 3، 2، 4، 5، 6] -> غلط چُھ ترتیب دینہٕ آمت [ 1، 2، 2، 3، 4] -> غلط چُھ ترتیب دینہٕ آمت [ 1، 2، 2، 3، 4]'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"توہہ چھہ دۅن وقفہ دنہ آمت، یتہ پرٛیٚتھ وقفہ چھہ پورٕ عدد۔ مثلن، وقفہ = (شروع، اختتام) = (1, 2) ۔ دنہ آمت وقفہ چھہ بند، امہ کنۍ زِ وقفہ (شروع، اختتام) چھہ شروع تہٕ اختتام دۄنوے شٲمل۔ پرٛیٚتھ وقفہ خٲطر، یہ فرض چھہ یوان کرنہٕ ز امک آغاز چھہ امہ کس اختتامس برابر یا امہ کس اختتامس کم۔ تہند کٲم چھہ یہ دٔریافت کرن زِ یمن دۄن وقفن ہنٛد ارکھ چھہ اکھ پرائم نمبر۔ مثال، وقفن ہنٛد ارکھ (1, 3), (2, 4) چھہ (2, 3) یمک لمبٲئی 1 چھہ، یُس نہٕ اکھ پرائم نمبر چھہ۔ اگر ارکھ چھہ اکھ پرائم نمبر، تہٕ دوٚپ \"YES\"، ورنہٕ دوٚپ \"NO\"۔ اگر زٕ وقفہ چھہ نہ ارکھ، تہٕ دوٚپ \"NO\"۔[input/output] نمونے: intersection[(((1, 2، 2، ==]) (2، 3) \"NO\">\" intersection[intersection-1, {{((1، 4) \"NO\" ===0, - 5، 5، ==============(5, YES-3, \"YES\"\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"توہیہ چُھ پورٕ عددن ہنز اکھ صف دینہٕ آمژ تہٕ توہیہ چُھ پورٕ عددن ہنز مقدارُک مجموعہ صفس منز ہر عدد کہ تمام نشانن ہند پروڈکٹہٕ سٕتۍ ضرب کرنٕچ ضرورت، یمچ نمائندگی 1، -1 یا 0 چِھ کران۔ نوٹ: خالی صفہٕ خٲطرٕہ چُھ نمبر نون واپس کران۔ مثال: >>> prod_signs([1, 2, 2, -4]) == -9 >>> prod_signs([0, 1]) == 0 >>> prod_signs([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N صفن تہٕ N کالمن (N >= 2) تہٕ اکھ مثبت انٹیجر k سۭتۍ اکھ گرڈ دینہٕ آمت، گرڈک پرتھ سیل چُھ اکھ قدر آسان۔ رینجچ ہر انٹیجر چُھ گرڈک سیلن پیٹھ بالکل اکہٕ لٹہٕ ظأہر گژھان۔ توہہٕ چُھ گرڈس منٛز لمبائی k ہنٛد کم کھوتہٕ کم وتھ ژھانٛڈن یُن۔ توہہٕ ہیکہٕ کُنہٕ تہٕ سیل سۭتۍ شروع کرتھ، تہٕ پرتھ مرحلس منٛز ہیکہٕ توہہٕ ہمسایہٕ سیلن منٛز گژھتھ، بیین لفظن منٛز، توہہٕ ہیکہٕ کونہٕ تہٕ سیل منٛز گژھتھ یُس تہند کنہٕ کنہٕ کنہٕ سۭتۍ چُھ آسان۔ براہ کرم نوٹ کٔرو کہ k لمبائی ہنٛد پاتھ چُھ مطلب بالکل k سیلن ہنٛد دورٕ کرن (ضروری طور پٲن چُھ نہٕ الگ) ۔ توہہٕ ہیکہٕ نہٕ گرڈس نیبَر گژھتھ۔ A (لمب k) چُھ B (لمب k) کھوتہٕ کم پاتھ سمجھنہٕ ییلہٕ اگر A تہٕ B (آوٛم چُھ یمن منٛز قدرن ترتیب دینہٕ آمتچ ترتیب فہرست بناونہٕ پتہٕ (یتھ l_st تہٕ l_st تہٕ l_st_A تہٕ l_st_B تہٕ l_B) ، l_B j_B، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، l_، [، [، 1، j_، [، 1، 1، 1، j_، [، 1، 1، 1، [، 1، j_، 1، [، 1، 1، 1، 1، j_\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"فبونیکی ترتیب چِھ ساروی کھوتہٕ زیادٕ مشہور، ریاضی دانو چُھ امچ گہری مطالعہٕ کرمُت۔ تاہم، یُس لوکھ چِھ نہٕ زانان چُھ ٹریبونیکی ترتیب۔ ٹریبونیکی ترتیبچ تعریف چِھ تکرارس سۭتۍ کرنہٕ یوان: tri(1) = 3 tri(n) = 1 + n / 2 ، اگر n چُھ برابر۔ tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) ، اگر n چُھ عجیب۔ مثلن: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 اگر توہیہ چُھ اکھ غأر منفی عدد n دنہٕ آمت، توہیہ چِھ ٹریبونیکی ترتیبچ گوڑنچ n + 1 نمبرن ہنٛز فہرست واپس کرن۔ مثال: tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"اکھ مثبت عدد n دنہٕ آمت، عجیب ہندسن ہند پیداوار واپس ییہٕ دنہٕ۔ 0 ییہٕ واپس ییہٕ دنہٕ اگر تمام ہندسہٕ چِھ یکساں۔ مثلن: ہندسہٕ ((1) == 1 ہندسہٕ ((4) == 0 ہندسہٕ ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''اکھ فنکشن تخلیق کرُن یُس صرف مربع بریکٹس پیٹھ مشتمل تارس بطور ان پٹ چُھ نوان۔ فنکشن گژھہٕ ٹرو واپس کرن اگر تہٕ صرف اگر بریکٹسچ اکھ درست ذیلی ترتیب آسہٕ یتھ منٛز کم کھوتہٕ کم اکھ بریکٹ چُھ نیسٹڈ۔ is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested'[[]][[') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"توہہ چھ نمبرن ہنز اکھ فہرست دنہ آمژ۔ توہہ چھ ضرورت دوان دتی آمژ فہرستس منز مربع نمبرن ہند رقم واپس کرن، فہرستس منز پرتھ عنصرس گوڈٕ پیٹھہٕ پیٹھہٕ گرد کرُن۔ مثال: lst = [1,2,3] آؤٹ پٹ گژھہِ 14 lst = [1,4,9] آؤٹ پٹ گژھہِ 98 lst = [1,3,5,7] آؤٹ پٹ گژھہِ 84 lst = [1.4,4.2,0] آؤٹ پٹ گژھہِ 29 lst = [-2.4,1,1] آؤٹ پٹ گژھہِ 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''اکھ فنکشن بنٲوِتھ یُس ٹرٕ واپس چھِ گژھان اگر دِنہٕ آمتِس سٹرنگس ہند ٲخری کردار چُھ اکھ حروف تہجی ہند کردار تہٕ چُھ نہٕ کنٛہہ لفظُک حصہ تہٕ بییہٕ چُھ غلط۔ نوٹ: \"ورڈ\" چُھ حروفن ہند اکھ گروپ یوس اسپیسس سٕتۍ چُھ الگ گژھان۔ مثالہٕ: check_if_last_char_is_a_letter\"{\"apple pie\") -> False check_if_last_char_is_a_letter\"{\"apple pi e\") -> True check_if_last_char_is_a_letter\"{\"apple pi e\") -> False check_if_last_char_is_a_letter\"{\"apple pi e\")'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"اکھ فنکشن بنٲوِتھ یُس کُنہِ عنصرک ساروی کھوتہٕ بوٕڑ انڈیکس چُھ رٹان یُس ایمہٕ برونٹھم عنصرس کھوتہٕ بوٕڑ یا مسٲوی آسہٕ نہٕ۔ اگر نہٕ کنٛہہ تیوتھ عنصرس موجود چُھ تیلہٕ چُھ واپسی -1۔ دِنہٕ آمُت صفس منز چُھ نہٕ نقلین اقدارن ہنز گنجائش آسان۔ مثالہٕ: can_arrange{1,2,4,3,5]) = 3 can_arrange{1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''اکھ فنکشن بنٲوِتھ یُس ٹپل (a، b) لٲگِتھ، یتہِ 'a' منفی عددن منز ساروی کھوتہٕ بوٕڑ چُھ، تہٕ 'b' چُھ فہرستس منز مثبت عددن منز ساروی کھوتہٕ لوکٹ۔ اگر نہٕ منفی تہٕ نہٕ مثبت عدد آسہِ، تہٕ توٲی چُھ اتھ None کِس طورس پیٹھ لٲگِتھ۔ مثال: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"اکھ فنکشن بنٲوِتھ یُس انٹیجر، فلوٹس، یا سٹرنگس چُھ ننان یوس حقیقی نمبرن ہنز نمائندگی کران چُھ، تہٕ چُھ بڑٕے متغیرس اتھِچ دیژ مٕژ متغیر ٹائپس منز واپس کران۔ اگر ویلیو برابر آسن تہٕ چُھ نون واپس کران۔ نوٹ: اگر اکھ حقیقی نمبر چُھ سٹرنگ کہِ طورس پیٹھ پیش کرنہٕ یوان، فلوٹنگ پوائنٹ ہیکہِ ٲسٕتۍ . یا ، compare_one{1,2,5} -> 2.5{1,2,3}) -> \"2,3\"{1,5,1}، \"6\") -> \"6\"{1,1}، 1) -> نون \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"تشخیص کٔرو زِ کیا دِنہٕ آمت نمبر n ہیکو بالکل 4 پازِٹو Even نمبرن ہندس مجموعس طورس پیٹھ لیکھتھ۔ مثال is_equal_to_sum_even ({\\displaystyle is_equal_to_sum_even ({\\displaystyle is_equal_to_sum_even ({\\displaystyle is_equal_to_sum_even ({\\displaystyle is_equal_to_sum_even ({\\displaystyle is_equal_to_sum_even ({\\displaystyle is_equal_to_sum_even)) == سچ \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"برازیلی فیکٹریئل چُھ یتھ کٔنۍ بیان کرنہٕ آمت: برازیلی_فیکٹریئل ((n) = n! * (n-1)! * (n-2)! * ... * 1! یتین n > 0 مثلن: >>> خصوصی_فیکٹریئل ((4) 288 فنکشن ان پٹ کس طورس پیٹھ چُھ اکھ انٹیجر حٲصل کران تہٕ اتھ انٹیجرس سٔتۍ گژھہٕ خصوصی فیکٹریئل واپس گژھت۔ \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_مثالہٕ-3ٕ آمت، اتھ منٛز موجود تمام خالی جگہوں چِھ زیر نشان سۭتۍ تبدیل کرن، تہٕ اگر سٹرنگس منٛز 2 کھوتہٕ زیادٕ لگاتار خالی جگہوں چِھ آسان، تیلہٕ تمام لگاتار خالی جگہوں چِھ تبدیل کرن - fix_spaces{\"مثلاً\"} == \"مثلاً\" fix_spaces{\"مثلاً1\") == \"مثلاً1\" fix_spaces{\"مثلاً2\") == \"مثلاً2\" fix_spaces{\"مثلاً3\") == \"مثلاً3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"اکھ فنکشن بنٲوِتھ یُس اکھ سٹرنگ چُھ نوان یوس فائلُک ناوٕچ نمائندگی کران چُھ، تہٕ اگر فائلُک ناو چُھ درست تہٕ بییہٕ چُھ 'نہٕ' واپس کران۔ اکھ فائلُک ناو چُھ درست سمجِنہٕ یوان اگر تہٕ صرف اگر تمام درج ذیل حالات پورٕ گژھِ: - فائلُک ناو گژھِ نہٕ تریو کھوتہٕ زیادٕ ہندسن سٕتۍ آسن ('0'-'9') ۔ - فائلُک ناو چُھ بالکل اکھ ڈاٹ '.' - ڈاٹ برونٹھ ذیلی سٹرنگ گژھِ نہٕ خٲلی گژھُن، تہٕ یہٕ گژھہِ نہٕ ڈاٹ ('a'-'z' تہٕ 'A'Z'-) ہند اکھ حرفہٕ سٕتۍ شروع گژھُن۔ - ڈاٹ پتہٕ ذیلی سٹرنگ گژھہِ یمن منزٕ اکھ آسن: ['txt', 'exe', 'lld'] مثالہٕ: file_name_check\"{example.txt} # => 'yes'name_file_check\"{example.txt1} #' => 'ن' (نام گژھہِہِہٕ ڈاٹ ناوُن شروع گژھُن لاطینی الفاٹ حرفہٕ سٕ سٕ سٕ سٕتۍ)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"یہٕ فنکشن چُھ انٹیجرزن ہندس اِنٹریس اکھ لسٹ نوان۔ لسٹس منز گژھہِ تمام اندراجات خٲطرٕہ پورٕ عددی اندراج کُن مربع کرُن اگر ایمِچ انڈیکس 3 ہند ضرب چُھ تہٕ اگر ایمِچ انڈیکس 4 ہند ضرب چُھ تہٕ نہٕ زٕ ضرب چُھ 3 ۔ یہٕ فنکشن چُھ نہٕ لسٹس منز ایمِچ اندراجات تبدیل کران یمیوک انڈیکس 3 یا 4 ہند ضرب چُھ نہٕ ۔ فنکشن چُھ پتہٕ تمام اندراجاتُک مجموعہ واپس کران۔ مثالہٕ: lst = [1,2,3] خٲطرٕہ پٹ گژھہِ 6 lst = [] خٲطرٕہ پٹ گژھہِ 0 lst = [-1,-5,2,-1,-5] خٲطرٕہ پٹ گژھہِ -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"توہیہ چھہ اکھ جملہ پیش کرنہ آمت، جملس منز چھہ کینہہ لفظ یس پرایس سٹیج سیتۍ الگ چھہ، تہ توہیہ چھہ اکھ جملہ واپس کرنۍ یمہ منز اصل جملک لفظ آسہ، یمچ لمبائی پرائم نمبر آسہ، نٔوِس سٹرنگس منز لفظن ہنز ترتیب گژھہِ اصلی ہندس ترتیبس برابر آسن۔ مثال1: ان پٹ: جملہ = \"یہ چھیہ اکھ ٹیسٹ\" آؤٹ پٹ: \"یہ چھیہ\" مثال2: ان پٹ: جملہ = \"چھہِ سوئمنگہِ خٲطرٕ\" آؤٹ پٹ: \"go for\" پابند: * 1 <= len(sentence) <= 100 * جملہ چھہ صرف حرفن ہند \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"توہیہند کٲم چھ اکھ فنکشن لاگو کرن یُس اظہار x * n آسان بناوٕ۔ یہٕ فنکشن چھ True واپس کران اگر x * n چُھ اکھ پورٕ نمبر تہٕ بییہٕ False۔ x تہٕ n، چھ اکھ فریکشنچ سٹرنگ نمائندگی، تہٕ یمن منٛز چُھ یہٕ فارمیٹ، <numerator>/<denominator> ییتھ منٛز ننیومنٹر تہٕ ڈینومینٹر دۄنوے مثبت پورٕ نمبر چِھ۔ توہیہ ہیکو یہٕ فرض کرتھ زِ x، تہٕ n چِھ درست فریکشن، تہٕ ڈینومینٹر چُھ نہٕ صفر۔ آسان بناوُن ({\"1/5\"، \"5/1\") = True آسان بناوُن ({\"1/6\"، \"2/1\") = False آسان بناوُن ({\"7/10\"، \"10/2\") = False)\"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"اکھ فنکشن لیوکھو یس انٹیجرزن ہٕنٛز دٲیِنہٕ آمٕژ لسٹ چھ زیٛادٕ کھۄتہٕ زیٛادٕ ترتیب سۭتۍ تہنٛدیٚن ہندسن ہٕنٛدس مجموعس مطٲبق ترتیب دوان۔ نوٹ: اگر واریاہ چیز چھ یمن ہندسن ہٕنٛدۍ مماثل مجموعہٕ، تہٕ تمن ہٕنٛز ترتیب چھ اصل فہرستس منٛز تہنٛدس انڈیکسس پیٚٹھ مبنی۔ مثال: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"اکھ فنکشن لیوکھو یس نمبرن ہندس صفس بطور ان پٹ چُھ نیوان تہٕ صفس منٛز عناصرک تعداد چُھ واپس کران یم 10 کھوتہٕ زیادٕ چِھ تہٕ نمبرن ہنٛد گۄڈنیک تہٕ ٲخری ہندسہٕ چِھ عجیب (1, 3, 5, 7, 9) ۔ مثلن: specialFilter{\\displaystyle {\\displaystyle {\\displaystyle {\\displaystyle {\\mathbf {1}}} ، -73, 14, -15}) => 1 specialFilter{\\displaystyle {\\displaystyle {\\mathbf {1}}} ، -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"توہہٕ چِھ اکھ مثبت عدد n یوان دنہٕ۔ توہہٕ چِھ لمبائی n ہند اکھ عدد صف بناون۔ ہر i (1 ‰¤ i ‰¤ n) خاطرٕ ، a[i] = i * i - i + 1 ہنٛز قدر۔ a) a یچ تریپلچ تعداد واپس کرو ییتہٕ i < j < k، تہٕ a[i] + a[j] + a[k] چُھ 3 ہنٛد ضرب۔ مثال: ان پٹ: n = 5 آؤٹ پٹ: 1 وضاحت: a = [1، 3، 7، 13، 21] واحد درست ٹرپل چُھ (1، 7، 13) ۔\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''شمسی نظامس منز چِھ آٹھ سیارٕ: آفتابس قریب ترین سیارٕ چُھ مرکری، برونٹھم سیارٕ چُھ ونیوس، تہٕ پتہٕ زمین، مریخ، مشتری، زحل، یورینس، نیپچون۔ اکھ فنکشن لیوکھو یوس زٕ سیارن ہند ناو چُھ سیارٕ1 تہٕ سیارٕ2 کِس سٹرنگس منز نوان۔ فنکشنس گژھہِ اکھ ٹپل واپس انِن یوس تمام سیارن ہند مدار چُھ سیارٕ1 تہٕ سیارٕ2 کِس مدارس درمیان واقع، آفتاب کہِ قربت کہِ لحاظہٕ ترتیب دِنہٕ آمُت۔ اگر سیارٕ1 یا سیارٕ2 چِھ نہٕ سیارن ہند صحیح ناو کینٛہہ تہٕ فنکشن گژھہِ خٲلی ٹپل واپس انِن۔ مثال bf\"(جوبائٹر\"، \"نیپچون\") ==> (\"زحل\"، \"یورینس\") bf((\"زمین\"، \"میرکری\") ==> (\"زیور\"، \"زمین\"، \"مریخ\"، \"جوبائٹر\"، \"شمس\") }}'''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"اکھ فنکشن لیوکھو یس پیرامیٹر کس طورس پیٚٹھ تارن ہٕنٛز اکھ فہرست قبول کران چھ، تمن تارن ہٕنٛز حذف کران یمن ہٕنٛز لمبٲیی عجیب چھ، تہٕ ترتیب شدٕ فہرست واپس کران چھ، یہ فہرست چھ ہمیشہ تارن ہٕنٛز فہرست آسان تہٕ نہٕ زانٛہہ اعدادن ہٕنٛز اکھ صف، تہٕ اتھ منٛز ہیٚکہ نقلٕ آستھ۔ فہرست چہ ترتیب گژھہ پرٛیٚتھ لفظن ہٕنٛز لمبٲیی سۭتۍ زیٛادٕ زیٛادٕ گژھتھ، تہٕ توٚہہ گژھہ اتھ قٲلس مطٲبق ترتیب شدٕ فہرست واپس کرنہٕ ین۔ اگر دۄن لفظن ہٕنٛز لمبٲیی یکساں چھ، تہٕ لیوکھو الفبٲیی ترتیب سۭتۍ فہرست واپس۔ فنکشن گژھہ ترتیب شدٕ ترتیب سۭتۍ تارن ہٕنٛز فہرست واپس کرنہٕ ین۔ توٚہہ ہیٚکہ یہ فرض کٔرتھ ز تمام لفظن ہٕنٛز لمبٲیی یکساں آسہ۔ مثال: assert_list_sort[\"aa\", \"a\", \"aaa\"]) => assert_list_sort[\"ab\", [\"a\", \"aaa\", \"cd\" => \"cd\")\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"اکھ سادٕ پروگرام یُس xچ قدر یلہٕ واپس گژھٕ اگر n چُھ اکھ پرائم نمبر تہٕ یلہٕ گژھہٕ yچ قدر یلہٕ واپس گژھٕ۔ مثالہٕ: x_or_y{\\displaystyle x_or_y{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\displaystyle y}{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\}}{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\displaystyle x_{\\displaystyle y}{\\frac {\\frac {\\frac {\\frac {\\frac {\\frac {\\frac {1}}}{1}}}،3}}} ،4}} ،5}} == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''اعدادن ہنز اکھ فہرست دیتھ، فہرستس منز اعدادن ہند مربعُک مجموعہ واپس یُس عجیب چُھ۔ منفی اعداد یا نہٕ عدد نظر انداز۔ double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 اگر ان پٹ لسٹ چِھ خٲلی، توہہٕ چُھ 0 واپس کران۔ '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"میہ چُھ سونچ زِ ییلہٕ کنہہ طویل انتظارک نتیجہ چُھ أخٕرکار معلوم گژان تہٕ تمن احساسن تہٕ خیالاتن یُس تٔمۍ اتھ وقتس منٛز چِھ آسان تم چِھ یقینی طور پانٹھ نوٹ کرنچ تہٕ موازنہٕ کرنک قأبل۔ تہند کٲم چُھ یہٕ طے کرُن کہ اگر کنہہ شخص چُھ اکس عددن ہنٛد نتائج صحیح اندازٕ لگاون۔ توہیہ چِھ دِنہٕ آمت سکور تہٕ اندازن ہنٛد زٕ صفہٕ برابر لمبائی سۭتۍ، یتن پرتھ انڈیکس چُھ اکھ میچچچ ظأہر کران۔ اکہٕ ہیوٕ لمبائی ہنٛد اکھ صفہٕ واپس یمہٕ سۭتۍ یہٕ ظأہر چُھ گژان کہ پرتھ اندازٕ کتھ حدس تام اوس۔ اگر تمو صحیح اندازٕ لگاونہٕ، ویلیو چُھ 0، تہٕ اگر نہٕ، ویلیو چُھ اندازٕ تہٕ اسکورس درمیان مطلق فرق۔ مثال: ((([1,2,3,4,5,1]،[2,3,4,4,4,2,2]،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"توہیہ آیہ کلاسک ناو (اکھ سٹرنگ) تہٕ توسیعک اکھ فہرست دنہٕ۔ توسیعہٕ آیہٕ کلاسس منٛز اضٲفی کلاسہٕ لوڈ کرنہٕ خاطرٕ استعمال کرنہٕ۔ توسیعچ طاقت چِھ یتھہٕ: CAP ییہٕ توسیع کس ناوس منٛز بڑے حرفن ہنٛد تعداد، تہٕ SM ییہٕ توسیع کس ناوس منٛز لوکاسٹرس ہنٛد تعداد، طاقت چِھ کسر CAP - SM سۭتۍ دنہٕ آمژ۔ توہیہ گژھ مضبوط ترین توسیع تلاش کرتھ تہٕ امہٕ شکلہٕ منٛز سٹرنگ واپس ییہٕ دنہٕ: ClassName.StrongestExtensionName۔ اگر اکسی طاقتک زٕ یا زیادٕ توسیعہٕ چِھ، توہیہ گژھ فہرستس منٛز گۄڈنچ گژھن وول منتخب کرتھ۔ مثلن، اگر توہیہ چُھ \"سلائسز\" کلاس تہٕ توسیعچ فہرست کس طورس پیٹھ دنہٕ آمت: ['SEviviNGliSliCCes'، 'Cheese'، 'StuFfed'] تہٕ توہیہ گژھ توہیہ 'Slices.SviNGliCliSliCes.SEviCliSliCliCliSliCliSliCliSliCliSliCliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliCSE' پیٹھہٕ توسیعہٕ پیٹھ واپس ییہٕ دنہٕ ییہٕ، توسیعچ تعداد یتھہٕ توسیعک طاقت چِ کس کس کس کس کس ناوس منٛز دیہٕ کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس کس\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"توہیہ چِھ 2 لفظ دنہٕ آمت۔ توہیہ چُھ ضرورت True ییلہِ دویم لفظ یا امچ کنہٕ تہٕ گردش گوڈنِکہِ لفظس منز چِھ سبسٹرینگ۔ cycpattern_check{\"abcd\",\"abd\") => False cycpattern_check{\"hello\",\"ell\") => True cycpattern_check{\"whassup\",\"psus\") => False cycpattern_check{\"abab\",\"baa\") => True cycpattern_check{\"efef\",\"eeff\") => False cycpattern_check{\"hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"اکھ انٹیجر دنہٕ آمت۔ اکھ ٹپل واپس ییتھ منٛز بالترتیب برابر تہٕ عجیب ہندسن ہند تعداد آسہٕ۔ مثال: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"اکھ مثبت انٹیجر دینہٕ آمت، امک رومن ہندسہٕ مساوی تارک پانٹھ حٲصل کرُن، تہٕ لوئر کیسٹس منٛز واپس کرُن۔ پابندیاں: 1 <= num <= 1000 مثالہٕ: >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''مثلثن ہند تریو اطرافن ہنز لمبائی دِنہٕ آمٕژ۔ اگر تریو اطراف اکھ مستحکم مثلث چِھ بناوان تہٕ اگر نہٕ تیلہٕ غلط چُھ واپس ییہٕ کرنہٕ۔ مستحکم مثلث چِھ اکھ مثلث ییتھ منٛز اکھ زاویہ چُھ سیدھ زاویہ یا 90 ڈگری۔ مثال: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"اکھ فنکشن لیوکھو یس سٹرنگن ہنز فہرست چھ قبول کران۔ لسٹس منٛز چھ مختلف الفاظ۔ لفظ چھ زیادہ سے زیادہ منفرد کردارن سۭتۍ واپس کران۔ اگر کنہہ سٹرنگن منٛز چھ زیادہ سے زیادہ منفرد کردارن ہنٛد تعداد، تہٕ چھ سُہٕ واپس کران یس لغوی ترتیبس منٛز گوڑنتھ چُھ یوان۔\"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"توہہ چھہِ اکھ بھوک وول خرگوش، تہ توہہ چھہِ گارٹین ہنز اکھ مخصوص تعداد کھٲوممت، مگر از چھہِ توہہ دنہک کھین مکمل کرنہ خاطرہ مزید گارٹین کھینچ ضرورت۔ توہہ پزِ [ کھینس پتہ گارٹین ہنز کل تعداد، کھینس پتہ گارٹین ہنز تعداد ] اکھ صف واپس کرُن اگر نہٕ پورہ گارٹین روزِ، توہہ گژھہِ پورہ گارٹین روزِ، مگر توہہ گژھہِ وُنہِ بھوک۔ مثال: * کھینُن (۵، ۶، ۱۰) -> [1، ۴] * کھینُن (۴، ۸، ۹) -> [1، ۱] * کھینُن (۱، ۱۰) -> [1، ۱۰] * کھینُن (۱، ۱۰) -> [1، ۰] * کھینُن (۲، ۱۱، ۵) -> [۷، ۰] متغیر: @number: انٹیجر: گارٹین ہنز تعداد یوس توہہ کھٲومتۍ چھہ۔ @need: گارٹین ہنز تعداد: انٹیجر: @number: انٹیجر: گارٹین ہنز تعداد یوس توہہ روزِ کھٲومُن چُن چُک ضرورت چُہ۔ @ne: @need: انٹی: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیجر: انٹیک انٹیجر: انٹیک انٹیک انٹیک انٹیک\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"دوٛن فہرستن منٛز چھ آپریٹر، تہٕ آپریڈنڈ۔ گۄڈنچ فہرست چِھ بنیٲدی الجبرا آپریشنہٕ، تہٕ دوٚیم فہرست چِھ انٹیجرزن ہینز فہرست۔ الجبرا اظہارٕ بناونہٕ تہٕ اتھ اظہارٕچ تشخیص واپس کرنہٕ خٲطرٕ دوٛن دیمن فہرستن ہنٛد استعمال کٔرو۔ بنیادی الجبرا آپریشن: جمع (+) گھٹاؤ (-)) ضرب (*) فلور ڈویژن (//) ایکسپوننشن (**) مثال: آپریٹر['+'، '*'، '-'] سرنی = [2, 3, 4, 5] نتیجہ = 2 + 3 * 4 - 5 => نتیجہ = 9 نوٹ: آپریٹرن ہینز فہرستچ لمبائی چِھ آپریٹرن ہینز فہرست کس لمبائی برابر منفی اکھ۔ آپریٹرس منٛز چِھ کم کھوتہٕ کم اکھ آپریٹر، تہٕ آپریٹرس منٛز چِھ کم کھوتہٕ کم زٕ آپریٹرن۔ \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"اگر s[i] چُھ اکھ حرف، تہٕ توہیہ چِھ اتھ پیٹھ پنن کیس تبدیل کرُن، یا بییہٕ ییہٕ برقرار تھاوُن۔ اگر سٹرنگس منٛز چُھنہٕ کنہہ حرف، سٹرنگس تبدیل کرُن۔ فنکشن گژھ نتیجہٕ سٹرنگ واپس کرُن۔ مثال حل کریں (((\"1234\") = \"4321\" حل کریں (((\"ab\") = \"AB\" حل کریں (((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"اگر اکھ سٹرنگ 'ٹیکسٹ' چُھ دِنہٕ آمُت، تہٕ ایم ڈی 5 ہیش مساوی سٹرنگ چُھ واپس کران۔ اگر 'ٹیکسٹ' اکھ خٲلی سٹرنگ چُھ، تہٕ چُھ واپس نون۔ >>> string_to_md5('ہیلو ورلڈ') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "kas_Arab",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"دۄن مثبت انٹیجرزن a تہٕ b دنہٕ آمت، a تہٕ b کہ درمیان چُھ ہندسن ہند تعداد بڑھنہٕ کہِ ترتیبس منز واپس کران۔ مثال کہِ طورس پیٹھ: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]