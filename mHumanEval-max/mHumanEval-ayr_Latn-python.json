[
    {
        "task_id": "HumanEval/0",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Uñakipt'ama, kuna jakhunakas aka jakhunakanxa, kuna jakhunakas aka jakhunakat sipanx juk'amp jak'ankapxaspa. Ejemplo: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Falso >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Verdadero \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Aka phuqachirixa mä cadenawa walja tama paréntesis anilla ukanaka. Aka wakichäwix uka tama yaqha cadenanakaruw jaljaña ukatx uka listaruw kut'ayaña. Sapa tamax mayj mayj uñakipatarakiwa (sapa paréntesis jist'arataskiwa) ukatx janiw mayj mayj anillax utjkanti. Jani kuna espacios ukanakas utjkanti. Ejemplo: >>> separate_paren_groups' ((( ) (() (()))))) ['() ', '(()) ', '(() ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"Mä suma jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu\"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"Aka pankaxa mä listawa churata mayt'awinaka ukatxa mayt'awinaka mä cuenta bancaria ukana, ukaxa qalltiwa ch'usa suma suma suma. Aka lurawixa uñakipawa kunapachatixa aka cuenta balanza ukaxa ch'usa suma juk'aru puri ukjaxa, ukjamata uka funciónxa chiqapa kut'aniñapa. Jan ukaxa k'ariwa kut'aniñapa. Ejemplo: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä lista ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mä ukanxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäxa, mäx mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx, mäx,\"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Sapa pä jakhu taypin mä jakhu \"delimitator\" uchma. `numbers' >>> intersperse (([], 4) [] >>> intersperse (([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Aka phuqachirixa mä cadenawa, walja tamachatanaka uñachayata, paréntesis anillt'ata, espacios ukanakampi jaljtayata. Sapa tamachata, anillt'axa wali manqharu anillt'ata paréntesis ukanaka. Ejemplo: (() (()) pä nivel ukch'akipuniw anillt'ata, ukjamipansti ((())) kimsawa. >>> parse_nested_parens (('((()) ((())) () ((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filtrar una lista de entrada de cadenas solo para las que contienen una subcadena determinada >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Mä lista de enteros ukan mä suma ukat mä producto de todos los enteros de una lista. Suma q'alax 0 ukjamakïñapawa ukat producto q'alax 1 ukjamarakïñapawa. >>> suma_product (([]) (0, 1) >>> suma_product (([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"Mä lista de enteros ukanxa, mä lista de elementos de máximo rolling ukanaka jikxataña mä momento de la secuencia ukakama. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"Aka algoritmo ukax jasakiwa: - Aka string ukax wali jaya postfix ukax palindromo ukjamarakispawa. - Aka string ukax prefijo de cadena ukax palindromo ukjamarakispawa.\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Uka k ' añaskunakax palindromo ukjamapini janicha uk yant ' apxaña.\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input ukax pä cadenas a ukat b ukankiwa, 1 ukat 0 ukanaka. Binario XOR ukamp aka input ukanakan lurasaxa, mä cadena ukjamarakiw kutt'ayata.\"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Listatx, k'achat k'achat k'achat kutt'ayma. Nayrïr k'achat kutt'ayma may may k'achat k'achat k'achat utjatap layku. Janiwa kutt'ayamti kunawsatix listanx ch'usax utjchixa. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Paypach jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani suma jakhuñani\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Taqi prefijos ukanak kutt'ayma, juk'a jisk'at jach'akamax kuna string de entrada >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"Mayt'äwix mä k'ata k'ata jakhunakamp uñstayañatakiwa.\"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"Mä cadena churata, qawqhanis yaqhachata chimpunaka (jan yaqhachaña) ukax utjatapa yatxataña >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Aka function ukar mantki ukax mä cadenas musical ukamp uñstayatakiski mä formato especial ASCII. Jumax listanx cadenas de enteros ukanak uñakipt'añamawa, ukax walxa beats ukanakamp kikipatawa. Akanx mä leyendaw utji: 'o' nota, qhipax pusi beats 'o' - 1/2 nota, qhipax pä beats '- quater nota, qhipax mä beat >>> parse_music. 'o' .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"Kunapachati mä sapa sapa k'añaskux qallta k'añasku taypin jikjataspa uk yatxataña. Yant'a t'aqanuqawinaka jakhuña. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input ukax mä cadena de números espaciales delimitados 'cero' a 'nueve'. 'cero', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho' y 'nueve' ukanakaw chiqapa. //aqanchayaña, jakhunakamp jisk'at jach'akama wakichata, uka jakhunakamp kutt'ayata >>> sort_numbers ((('quimsa maya phisqha') 'mayni kimsa phisqha' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"Mä lista ukan jakhunaka (mayni pä jakhu) ukata, ajllisim ukat kutt'ayma pä jakhunaka, kawkiritix juk'amp jak'ankki ukata ukat kutt'ayma (mayni jakhu, juk'amp jach'a jakhu). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Mä lista jakhunaka (niyarux pä elementonakatwa), mä transformación lineal uka lista ukar apkatama, ukhamatwa juk'a jakhunakax 0 ukjamäni, ukatx jach'a jakhunakax 1 ukjamarakïni >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter list of any python values only for integers >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"Aruskipäwinaka:\"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"Mä n jakhunak uñakipañataki, n jakhunak payar jaljtayir jach'a jakhu uñakipañataki, n ukhat juk'a >>> jach'a_taqiri (largest_divisor) 15 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Kunapachati mä jakhux jakhuñ qalltixa, jakhux jakhuñ qalltañaparakiwa. Sapa jakhux jakhuñ qalltañaparakiwa.\"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"Maysatx maysar uñstki uka jakhunak apsusiña. Jakañ chiqanakanx maysar uñstki uka jakhunakx pachpak jaytaña. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"Mä k'ata k'ata, jisk'a qillqatanak jach'a qillqatanakaruw uchma, jach'a qillqatanak jisk'a qillqatanakaruw uchma. >>> flip_case ((('Hello') 'HELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string >>> concatenate (([]) '' >>> concatenate ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqiyañanaka: Jisk'a ch'uqañanaka: Jisk'a ch'uchañanaka: Jisk'a ch'uchañanaka: Jisk'u ch'u ch'u ch'uchañanaka: Jisk'u ch'u ch'u ch'u ch'uchañanaka: Jisk'u ch'u ch'u ch'u ch'u ch'u ch'u ch'u ch'uchañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañañaña\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Uka listax positivos ukak kutt'ayi. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Maysatx chiqap kutt'ayma, mä jakhux primario ukch'akix, ukatx k'arix yaqhax. >>> is_prime(6) K'ariwa >>> is_prime(101) Chiqawa >>> is_prime(11) Chiqawa >>> is_prime(13441) Chiqawa >>> is_prime(61) Chiqawa >>> is_prime(4) K'ariwa >>> is_prime(1) K'ariwa \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs ukax polinomio ukan coeficientes ukaniwa. find_zero ukax x ukjamat poly ((x) = 0. find_zero ukax 0 ukak kutt'ayi, waljax utjchi ukasa. Ukhamarus, find_zero ukax mä listax xs ukampikiw apti, ukax coeficientes pares ukampikiw utji, ukatx janiw 0 uka jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhüw jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jakhü jak\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"Polinomio ukax coefficientes xs ukanakanx uñjatakiwa. kutt'ayxama xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"Aka phuqachirixa mä lista l ukatxa mä lista l' khaysa l' ukax l ukamp kikipakiwa indices ukanxa janiw kimsampi jaljtayaskaspati, ukampirus valoras ukanakaxa kimsa indices ukanxa jaljtayaspawa valoras ukanakaxa kikiparaki indices de l, ukampirus ordenadas. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"(sorted unique elements in a list >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123]) ukar kutt'ayma.\"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Uka listatx mayïr elemento kutt'ayani. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"N ukch'a jisk'a jakhunakan 7 jakhu uñstayaña, 11 jan ukax 13 jaljtayirjama.\"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"Aka phuqachirixa mä lista l ukatxa mä lista l' khaysa l' ukampi kikipaki l uka indices impares ukanakana, ukampirusa uka valoranakapaxa indices pares ukanakanxa, uka valoranakapaxa l uka indices pares ukanakanxa kikipakiwa, ukampirusa ordenada. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\" janiw mä arux utjkiti, janiw mä arux utjkiti.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"Kimsa k'ata k'ata k'ata qillqatanaka.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib n-ïr jakhuw kutt'ayani ukax Fibonacci jakhuwa, ukatx primas ukjamarakiwa. >>> prime_fib ((1) 2) >>> prime_fib ((2) 3) >>> prime_fib ((3) 5) >>> prime_fib ((4) 13) >>> prime_fib ((5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero ukax mä lista de enteros ukjamwa katuqi. Chiqapaxa kimsa elementonakanikïchi ukaxa, sumax janiw chiqäkiti, ukatxa k'ariwa. >>> triples_sum_to_zero([1, 3, 5, 0]) K'ariwa >>> triples_sum_to_zero[(1, 3, -2, 1]) Chiqawa >>> triples_sum_to_zero([1, 2, 3, 7]) K'ariwa >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) Chiqawa >>> triples_sum_to_zero[1]) K'ariwa \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"Mä thakhix wali suma chiqaki, wali jayawa. n k'añaskunakaw ch'iqäxat kupi tuqir sarasipki; ukakipkarakiw yaqha k'añaskunakax ch'iqäxat ch'iqäxar sarasipki. Pä k'añaskunakax wali jayankapxiwa. Taqpach k'añaskunakax mä kipkarakiw sarasipki. Pä k'añaskunakax ch'iqäxat kupi tuqir sariri k'añaskux ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat k'añaskux ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat ch'iqäxat. Aka k'añaskux uka k'añaskunak jan ch'axwañankapkaspjamaw saraskapxi.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Listat kutt'ayata, 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero ukax mä lista de enteros ukjamwa katuqi. Ukax True ukjamarakiwa, kunalaykutix pä elementox listanx sumax janiw utjkiti, ukatx False ukjamarakiwa. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Qhiphirxamax base. //a.a Qhiphirxamax base. //a.a Qhiphirxamax base. //a.a Qhiphirxamax base. //a.a Qhiphirxamax base. //a.a Qhiphirxamax base. //a.\"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Mä thiyanakamp mä jach'a kutikipstawiw mä kimsa tuqit uñsti. >>> triangle_area (5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 jakhu jakhux Fibbonacci jakhu jakhuwjamarakiwa, akjam uñt'atawa: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Jan recursión apnaqamti. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"Listanx l. >>> mediana [3, 1, 2, 4, 5]) 3 >>> mediana [-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"Uñakipawixa churatatapa sixa palindromowa >>> is_palindromowa ((')) Chiqapa >>> is_palindromowa (('aba') Chiqapa >>> is_palindromowa (('aaaaa') Chiqapa >>> is_palindromowa (('zbcd') K'ariwa \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Kutt'ayapxama 2^n modulo p (jan jakhunaka uñt'añataki). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\" aruruxa, mä k'añasku katxaruña, mä k'añasku katxaruña, mä k'añasku katxaruña, mä k'añasku katxaruña, mä k'añasku katxaruña, mä k'añasku katxaruña.\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"(src) =\"s2.3\"> Ukax mä cadena codificada ukaruw kutt ' ayi , alfabet ukanx sapa k ' añaskunakax 5 ukjaw turkakipatatapa .\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels ukax mä funciónwa, ukax cuerda ukatx cuerda jan vocalanak kutt'ayi. >>> remove_vowels (('') ' ' >>> remove_vowels ((\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') ' 'B' >>> remove_vowels (('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Uraqiru kut'ayaña chiqapa, l listan taqpach jakhunakax t t'aqa manqhankiwa. >>> below_threshold (([1, 2, 4, 10], 100) chiqapa >>> below_threshold (([1, 20, 4, 10], 5) k'ariwa \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Sumax pä jakhunakx y y, sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y) sumax (x, y)\"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"Uñakipt'ama pä arunx kikipakiw qillqatanakax utjiti. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Chiqapa >>> same_chars (('abcd', 'dddddddddabc') Chiqapa >>> same_chars (('dddddddabc', 'abcd') Chiqapa >>> same_chars (('eabcd', 'dddddddddabc') K'ari >>> same_chars (('abcdd', 'dddddddabddce') K'ari >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') K'ari \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"N-ïr Fibonacci jakhu kutt'ayma. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ukax mä cadenawa \"<\" ukat \">\". return True ukax sapa paréntesis de apertura ukax mä paréntesis de cierre ukamp chikachi. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Paypach listanakana mayacht'ata mayja uñstawinakapa. >>> mayja ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> mayja ([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"N uka jach'a primario uka kut'ayma. N > 1 ukatx janiw primario ukäkiti. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ukax mä funciónwa, 1 ukat n ukch'a jakhunak sumti. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ukax mä cadenawa \"(\" ukat \")\". return True si cada paréntesis de apertura tiene un paréntesis de cierre correspondiente. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs ukax mä polinomio ukan coeficientes ukjam uñt'ayatawa. xs[0] + xs[1] * x + xs[2] * x^2 + .... Uka polinomio ukan derivadax kikpaki uñstayaña. >>> derivada (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivada[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib jakhu jakhux Fibbonacci jakhu jakhuwjamarakiwa, akjam uñt'atawa: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Akjam qillqt'ama: mä wakichäwi, n-ïr jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jak\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"Akax mä función vowels_count ukaniwa, uka funciónx mä cadena de vocales ukaruw mantayi, ukatx uka cadena ukan vocales ukan jakhupatak kut'ayi. Akax 'a', 'e', 'i', 'o', 'u' ukanakan vocales ukanakawa. Akhanx 'y' ukax mä vocale ukarakikiwa, ukampirus mä arun tukuyankiwa. Ejemplo: >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"Juk'amp yant'añanakamp yapxataña.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift ukax x jakhun jakhunakaruw jakhu, ukatx jakhunakx kupir jakhu ukatx mä cadena ukjam kutt'ayani. shift > jakhunak jakhu, jakhunak kutt'ayani. >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"Kunatix mä función qillqaña ukax mä cadena ukar mantasinx sumpach uñstayaña, ukasti ASCII uksanx may maya jach'a qillqatanakaruw uñstayaña.\"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"Aka lurawinxa, mä cadena churapxätam, ukax uñachayiw qawqha manzanas ukat naranjas mä canasta achuyatanak uka canastax uñachayiw manzanas, naranjas ukat manzanas. Uka cadena uñachayataxa, taqpach naranjas ukat manzanas ukanaka, ukatx mä entero uñachayataxa, taqpach fruta canasta ukanakan achunakap kut'ayma. Ejemplo: fruit_distribution\"5(manzanas y 6 naranjas\", 19) ->19 - 5 - 6 = 8 fruit_distribution\"0 manzanas y 1 naranjas\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 manzanas y 3 naranjas\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 manzanas y 1 naranjas\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"Mä array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. Plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. Plucked node should be returned in a list, [small_value, its index], If there are no even values or the given array is empty, return []. Example1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index. Example2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest even index. Example3: Input: [] Output: [4:] Input: [5, 3, 4, 2] Output: [0, 0] Explanation: 1 node that has smallest index. P'iqicht'ata node: [small_value, its index] P'iqicht'ata nodexata nodex listaruw kutt'ayatañapa, [small_value, index] Sintikipt'ata array ukax ch'ataxiwa, jan ukax ch'usawa, jan ukax janiskiwa, mä array ukax ch'aqawa, mäkiptawa. Ejemplo: Input: [1, Input: [4,2,3] Input: [4,2,3] Output: [2,3] Explanation: [2,3] Explanation: [2, 1] Explanation: 2nd: 2nd: 2ndis, 2ndis, 2ndis, 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 2nd: 1st: 2nd: 1st: 2nd: 1st: 2nd: 1st: 1st:\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''Kuna pachatixa mä jakhuxa walja jakhu jakhunaka uñsti, ukjamaraki walja jakhu jakhunaka uñsti, ukjamaraki walja jakhu jakhunaka uñsti, ukjamaraki walja jakhu jakhunaka uñsti, ukjamaraki walja jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jak'''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''Kunapachatixa mä lista de enteros, lista de retornos en orden extraño. Sortamiento extraño, ukaxa kunapachatixa qalltaxa valor mínimo, ukjamatxa máximo de los enteros restantes, ukjamatxa mínimo, ukatxa ukhama. Ejemplos: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''Kimsa thiyanakanx kimsa thiyanakanx kimsa thiyanakaw utji. Kimsa thiyanakatix mä chiqpach kimsa thiyanak utjchi ukhax uka kimsa thiyanakanx pä decimal ukjaruw puri. Jan ukhamäkchi ukasti, -1 ukjaruw kutt ' ayani. Kimsa thiyanakax mä chiqpach kimsa thiyanak utjchi ukhax paypach thiyanakan sumax kimsïr thiyat sipanx juk ' ampwa.'''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''Q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q'arax q''''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"Mä array array de enteros, mä array palindromo uk lurañatakix mä qawqha elementos ukx mayjt'ayañawa. Mä array palindromo ukax mä array ukjamawa, nayraru qhipäxarusa. Mä mayjt'äwimpisti, mä elemento ukx yaqha elementorakiw mayjt'ayarakisma. Amuyt'añataki: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''Mä función qillqaña, ukax pä listanakana qillqatanakapa katuqi, ukatx mä lista khaysa listan qillqatanakapaxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaruxa mayjaru'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Kunatix mä phuqachirixa chiqaparu kutt'ayani, ukjamata mä jakhu jakhu 3 jakhunaka mayampi jaljtayasa, ukatx k'ariwa.\"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Kuna lurañamas utji ukax qillqañawa, ukax chiqaparu kutt'ayani, mä jakhux n mä ch'amanchawiwa, ukatx k'arix yaqha tuqinakanwa. x ukax n mä ch'amanchawiwa, n**int=x Amuyt'añataki: is_simple_power ((1, 4) => chiqapapunïwa is_simple_power ((2, 2) => chiqapunïwa is_simple_power ((8, 2) => chiqapunïwa is_simple_power ((3, 2) => k'ariwa is_simple_power ((3, 1) k'ariwa => is_simple_power ((5, 3) => k'ariwa \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''Mä phuqachiri qillqaña, ukax mä entero a ukat True ukaruw kutt'ayi, aka ingeger ukax mä cubo de algún número entero. Ak uñt'ayama: input ukax chiqapunïwa. Ejemplos: iscube (a) ==> True (b) ==> False (c) ==-1) ==> True (d) ==> True (e) ==> True (f) ==> True (g) ==> True (g) ==> True (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) ==> False (g) === false (g) ==> False (g) === false (g) ==> false (g) ==> false (g) ==) === false (g) ==> false (g) ==) === false (g) ==) === false (g) === false (g) ==) === false (x) === false (x)'''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"Jumax mä función qillqañama, ukax mä cadena de números hexadecimal ukjam katuqi, ukatx primos ukjamak uka cifras hexadecimales ukjamar jakhthapi (un número primo, ukax mä número natural mayor que 1 ukatx janiw mä producto de dos números naturales menores). Números hexadecimales ukanakax 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Números primos ukanakax 2, 3, 5, 7, 11, 13, 17,... Ukatx aknirinakat mä jakhuw jikxatañama: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13) Amuyasiñataki: maysatsti, mantawix chiqapunïwa jan ukax ch'usawa, ukatx símbolos A,B,C,D,E,F, ukanakax jach'a qillqatanakakiwa. Ejemplos: \"num\" = AB, ukatx num = 1. \"num\" = 1077E, ukatx num = 2. \"num\" = AB331ED, ukatx num = 4. \"num\" = \"num\" = 4. \"BC\" = 6.01234567D, \"num\" = 6.0 \"num\" = \"2020EF\"\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"Akax decimal uksan mä jakhuw churata, ukatx binario ukaruw jaqukiptaña. Función ukax mä cadena ukaruw kut'ayani, sapa k'añaskux binario ukaruw uñstayani. Sapa k'añaskux \"0\" jan ukax \"1\" ukaniwa. Uka k'añasku qalltanx ukat tukuyanx juk'amp k'añaskunakaw utjani \"db\". Uka k'añaskunakax formato ukaruw yanapt'i. Ejemplos: decimal_to_binary ((15) # devuelve \"db1111db\" decimal_to_binary32) # devuelve \"db100000db\" \"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"Jumax mä k'achat s katuqasma. Jumax k'achatx k'uchïchi janicha ukx uñakipañamawa. Mä k'achatx k'uchïchi ukjax 3 ukjax 3 qillqatanakaw utji, ukatx sapa 3 qillqatanakax mayj mayjawa. Akjam amuyt'añäni: is_happy (a) => False is_happy (a) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"Akax qhipa semestrunawa, ukatx yatichirix yatiqirinakarux yaticht'añapawa. Yatichirix algoritmo de calificación lurataynawa. Jan walt'äwix, jupax uka código de calificación uk apt'awayi. Jupax mä lista de GPAs yaqhip yatiqirinakat churapxama, ukatx mä función qillqt'apxañamawa, uka lista de calificaciones de letras ukjamat apsuñataki aka tabla: GPA. Letra grado 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"Mä función qillqaña, ukax mä cadena ukatx True ukaruw kutt'ayi, ukax mä número primo ukch'akiwa, jan ukax False ukch'akirakiwa. Ejemplos prime_length{\"Hello\") == True prime_length{\"abcdcba\") == True prime_length{\"kittens\") == True prime_length{\"orange\") == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"Mä suma n jakhunaka churasa, n jakhunaka suma 1 jakhunakampi qalltaña, tukuyaña.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"Mä suma entero N, taqpach jakhupanak mayachthapit kutt'ayma. N = 1000, jakhupanak mayachthapitapax 1 ukhanwa, ukatx \"1\" ukhanwa. N = 150 ukhanx jakhupanak mayachthapitapax 6 ukhanwa, ukatx \"110\" ukhanwa. N = 147 ukhanx jakhupanak mayachthapitapax 12 ukhanwa, ukatx \"1100\" ukhanwa. Jamuqanakapa: @N entero Constraints: 0 â‰¤ N â‰¤ 10000. Jamuqa: mä cadena de números binarios \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"Mä lista de enteros jan ch'usax utjkipanx lst. uka pachpankir elementos ukanakx indices impares uksanakanx yapxatma. Ejemplos: sumar ([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"Akax mä wakichäwiwa, kunawsatix mä arunakax may mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata mayata\"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"Kunawsatix mä matrices ukar uñtasit mä listax uñstayi, mä matrices ukjamax, sapa siqix mä qawqha columnas ukankaspawa. lst, ukatx mä entero x, uka listanx x jakhu, ukatx tuples ukanakan listap kutt'ayanxa, [(x1, y1), (x2, y2) ...] ukhamata sapa tuplax mä coordenada - (rúa, columnas), 0 ukamp qalltasa. Coordenadas ordenar inicialmente por filas en orden ascendente. Ukhamarakiw ordenar coordenadas de la fila por columnas en orden descendente. Ejemplos: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0), get_((1), [] == [_[[arrow [1], [1, 2], 3]], == [2, 2]] \"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"Mä array de enteros no negativos, mä copia de la matriz ukat kutt'ayma, ukjamat jaljtaykasinx, uka array ukx orden ascendente ukjam jaljtayaña, sumax (nayrïr valor index, qhipa valor index) impar si, jan ukax orden descendente ukjam jaljtayaña, sumax (nayrïr valor index, qhipa valor index) pares si. Amuyt'ama: * jan mayjt'ayamti. Ejemplos: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"Aka function encrypt ukax mä argumento ukjam mä cadena ukatx mä cadena encriptada ukar kutt'ayanirakiwa, alfabeto ukar turkatasa. alfabetox ukar turkatatapaxa, akjamatwa letras ukanakax pä pachanakaruw kutt'ayata. Amuyt'añataki: encrypt ((hi) ukax 'lm' ukar kutt'ayanirakiwa encrypt ((asdfghjkl) ukax 'ewhjklnop' ukar kutt'ayanirakiwa encrypt ((gf)) ukax 'kj' ukar kutt'ayanirakiwa encrypt ((et)) ukax 'ix' ukar kutt'ayanirakiwa.\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"Maynix mä lista de enteros churata. next_smallest () uka phuqachirixa, payïr jisk'a elemento listatxa kutt'ayaniniwa.\"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"Mä t'aqhisiñax mä sentenciawa, \"I\" arump qallti. Sentencias ukanakax '.', '?' o '! ' ukanakampiw jaljatarakiwa. Amuyt'añataki: >>> is_bored ((\"Hola mundo\") 0 >>> is_bored ((\"Alaxpachax ch'iyarakiwa. Intix sum k'ajtiwa. Aka pachax wali sumapuniwa\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''Akax mä función ukaniwa, ukax 3 jakhunak apti. Mayni jakhunakatix paypach jakhunakamp chikachataxa, ukax chiqap jakhunak churani, ukatx taqpach jakhunakax phuqhat jakhunakaniwa. Mayni jakhunakax k'ari jakhunak churani.'''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"Mä función qillqaña, uka funciónx mä yatiyäw katuqi, ukatx mä código ukjam luraraki, uka yatiyäwinx taqi letras ukanx may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may may\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"Jumax mä lista de enteros. Jumax wali jach'a valor primo uk jikxatañamawa ukatx suma jakhupanak kutt'ayaña. Ejemplos: Para lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], la salida debe ser 10 Para lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1], la salida debe ser 25 Para lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], la salida debe ser 13 Para lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6], la salida debe ser 11 Para lst = [0,81,12,31,21], la salida debe ser 3 Para lst = [0,1,8,1,2,1,7] la salida debe ser 7\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"Mä diccionario churataxa, True kutt'ayani, kunapachati taqpach teclas ukanakaxa cadenas ukanakaxa jisk'a qillqatanakaki, jan ukax taqpach teclas ukanakaxa cadenas ukanakaxa jach'a qillqatanakaki, ukatx False kutt'ayani. Función ukax False kutt'ayani, aka diccionario ukax ch'usawa. Ejemplos: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) debe devolver True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) debe devolver False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) debe devolver False. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"} False debe devolver check_dict_case{\"NC\"STATE\", \"Z\":\"IP\"}) debe devolver True.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"Mä función ukamp phuqachma, ukax mä jan negativos jakhunak apti, ukatx mä matriz n nayrïr jakhunak kutt'ayi, ukanakax primos jakhunakawa ukatx n ukhat juk'amp jisk'akiwa. Sañäni: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"Aka phuqachirixa pä jakhu jakhunaka katxasina maya jakhu jakhunaka jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"Aka string s, uka jach'a qillqatanak jakhthapim, uka pachparakiw index ukanakanxa. Amuyt'añataki: count_upper (('aBCdEf') kutt'ayanirakiwa 1 count_upper (('abcdefg') kutt'ayanirakiwa 0 count_upper (('dBBE') kutt'ayanirakiwa 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''Mä función lurma, ukax mä valor ( cadena) mä jakhu uñstayañataki ukatx jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"Mä suma n jakhu uñjatatxa, n jacha qalanakaruw mä pirqa luraña. Nayrïr pirqax n qalanakaniwa. Qhiphir pirqanx qalanakan jakhupax akhamäniwa: - qhipïr k'ata jakhu, n ukax k'atachiwa - qhipïr k'ata jakhu, n ukax ch'iqawa. Sapa pirqanx qalanakan jakhupax mä listar uñjatäniwa, ukanx i uka k'ata jakhux pirqanx qalanakan jakhupawa (i+1). Ejemplos: >>> make_a_pile (i+1) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"Akax mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'uqiwa, mä ch'u, mä ch'uqiwa, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä ch'u, mä\"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"Aka phuqachirixa pä suma jakhunaka katjaraki x y ukatxa kutt'ayanirakiwa kawkiri jach'a jakhu jakhu jakhuxa, kawkirixa jakhu taypinkiwa [x, y] ukankiwa. jani utjkanti ukaxa, phuqachirixa kutt'ayanirakiwa -1. sañäni: choose_num (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x), (x) (x), (x) (x), (x), (x) (x), (x) (x), (x) (x), (x) (x) (x), (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x) (x)\"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"Pä k'ullk'u n ukat m, ukatx n ukat m ukch'a jakhunak taypin jakhuñaw lurañama (n ukat m ukamp chikt'ata). N jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu\"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"Mä listax suma jakhu jakhunaka x. mä listax mayt'ata kutt'ayata taqi jan jakhu jakhu jakhunaka. Amtaña: List ukax mayt'ataxa juk'at juk'at mayt'atañapawa. Amuyt'añataki: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"Mä tama jakhunaka, 1 ukat 9 ukch'a jakhunaka, ukjamaraki uka jakhunaka, ukatxa uka jakhunaka maysar kutkatasa, ukatxa sapa jakhunaka maysar kutkatasa, ukatxa sapa jakhunaka sutipa maysar kutkatasa, \"Mayni\", \"Pä, Kimsa\", \"Pusanuqa\", \"Puxqa\", \"Patak\", \"Punkqa\", \"Pusanuqa\", \"Patak\", \"Pusanuqa\", \"Patak\", \"Patak\". Amuyt'añataki: arr = [2, 1, 1, 1, 4, 5, 8, 2, 3] -> tamachaña arr -> [1, 1, 2, 3, 4, 5, 8] -> tamachaña arr -> [8, 5, 4, 3, 2, 1, 1] kutt'ayma [\"Pusanuqa\", \"Pusanuqa\", \"Pä\", \"Pä\", \"Pä\", \"Pä\", \"Pä\", \"Pä\", \"Mä\", \"Mä\"] Jani ch'usa jakhunaka, mä tamachaña: arr = [] kutt'ayma [] Janichi jakhunaka utjatapachax jan yäqata: arr = [1, -1 , 55] -> arr -> [1, 1], [55 -> [1, 55] -> tamachaña arr = [51] - ['a jakhuqa jakhu: 1 - maysaru kutkatamachaña: ['a jakhu]\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"F () uka phuqachirixa n ukjamaraki n ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukjamaraki mä lista ukatxa\"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"Mä suma entero n churata, mä tupla kutt'ayma, uka tuplax jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jakhuw jak\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"qillqaña mä función count_nums uka katuri mä matriz de enteros ukat kutt'ayanxa kunjamati jakhunaka sumaxa > 0. mä jakhuxa negativowa, ukjamatwa nayriri chimpu chimpuxa negativo ukjamaraki: ej. -123 chimpu chimpux -1, 2, ukat 3 ukjamarakiniwa. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"Aka array 'arr' ukax N enteros ukanakaniwa arr[1], arr[2], ..., arr[N]. Aka array ukan jakhunakax aleatoriamente ordenados ukhamäniwa. Aka lurawix amuyt'añatakiwa, mä array ordenado orden no decreciente uk jikxatañataki, akjam lurawimpi: Mayja kutiw mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayja kutix mayjax mayjax mayjax mayjax mayjax mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja mayja\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"Aka jan walt'äwinxa, mä función ukampiw phuqhatani, ukax pä lista de números ukaruw apti, ukatx uñakipt'i kunjams lst1 uka taypinx mä intercambio de elementos uk luraspa, ukhamat lst1 ukax mä lista de números pares ukjamakispa. Janiw kuna limt'awis utjiti, kunjams lst1 ukat lst2 uka taypinx elementos intercambiables ukx utjaraki. Lst1 ukat lst2 uka taypinx elementos intercambiables ukx utjchi, ukhamat lst1 ukan taqpach elementos pares ukjamakispa, \"SI\" ukaruw kutt'aytanxa. Jan ukhamäkchi ukasti, \"NO\" ukaruw kutt'aytanxa. Amuyt'añataki: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" Akax amuyatawa, listanakax janiw ch'usaxiti. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"Mä cadenat mä jisk'a qillqatanakamp yaqhachata ch'usawjax mä diccionario uka qillqatanakamp kutt'ayani, kawkir qillqatanakatix juk'amp kut'atäki ukanakamp chika. Mä qawqha qillqatanakatix mayjakix utjix taqpach kutt'ayani. Ejemplo: histograma ((a b c) == {'a': 1, 'b': 1, 'c': 1} histograma ((a b b a') == {'a': 2, 'b': 2} histograma ((a b c a b') == {'a': 2, 'b': 2} histograma ((b b a') == {'b 4}: histograma (('a b') == {'b 4} } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Kunatix lurañaxa, s uksanx s ukat c uka paypach qillqatanakaruw chhaqtayta, ukatx uñakipt'añaw wakisxi, ukatx uñakipt'añaw wakisxi, ukatx uñakipt'añaw wakisxi. Mä k'anchax palindromo ukjamakïchi ukjamakïchi ukjamakïchi ukjamakïchi. Uñakipt'añatakix mä tupla ukanx uñakipt'añaw wakisxi ukatx True/False ukjamakïchi ukjamakïchi. Amuyt'añataki: s = \"abcde\", c = \"ae\", ukatx ('bcd', False) S = \"abcdef\", c = \"b\" ukatx ('acdef', False) S = \"abcdedcba\", c = \"ab\", ukatx ('cdedc', True)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"Mä lista de cadenas ukanxa, kawkiritixa sapa cadena ukax jakhunakampikïchi, mä lista kutt'ayma. Sapa elemento i de la salida debe ser \"el número de elementos impares en la cadena i de la entrada\". ukanxa taqi i ukanakaxa sustituyen por el número de dígitos impares en la i'a cadena de la entrada. >>> odd_count['1234567']) [\"jach'a elementos 4n la str4ng 4 de la 4nput.\"] >>> odd_count['3',\"111111\"]) [\"jach'a elementos 1n la str1ng 1 de la 1nput.\", \"jach'a elementos 8n la str8ng 8 de la 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"Mayni array de enteros n, sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax sumax\"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"Jumax mä cuadrilla rectangular de pozos. Sapa siqixa mä sapa pozot uñachayi, ukat sapa 1 siqinxa mä sapa unidad de agua uñachayi. Sapa pozotx mä cubetaw utji, ukax uma apsuriw yanapt'i, ukatx taqpach cubetas ukanakax mä kipkarakiwa. Jumax cubetas ukampiw uka pozos ch'usaqtayaña. Qhipürutx kunapachati kawkir cubetas ukx jalaqtayta ukx qillqantma. Ejemplo1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 6 Ejemplo2: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Output: 5 Ejemplo3: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Outputn",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"Aka Kata, jumanaxa mä tamawa jan negativos enteros ukjama kunjamati mayaki ukanaka uñstayaña binario ukana, ukjamata sartasiri ukjama. Ukjamaraki mayaki ukanaka, ukjamata decimal ukjamaraki. Ukaxa akjamata phuqhayatañapawa: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"Mä k ' at'a s ukat mä n natural ukjamat mä función ukamp phuqhayata, ukax k ' at 'at s ukankir taqpach arunak mä listaruw kutt 'ayi, ukanx n consonant ukanakaw utji, ukhamat uka arunakax k ' at 'an s ukan uñstañapataki. S k ' at 'ax ch ' usüchi ukhax k ' at 'ax ch ' usüñapawa. Amtañamawa: inas k ' at 'anx qillqatanakamp ch ' usukïchi. Ejemplos: select_words \"Maríax mä jisk'a oveja awatiyäna\", 4) ==> [\" jisk'a\"] select_words \"Maríax mä jisk'a oveja awatiyäna\", 3) ==> [\"Maríax\", \"uka oveja awatiyäna\"] select_words \"simple white space\", 2) ==> [] select_words \"Hello world\", 4) ==> [\"world\"] select_words \"Uncle sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"Mä aru churapxsma. Lurañamax aka aru jak'ankiri vocalanak jikxatañawa, akax pä consonantanak taypina, aka aru jak'ankiri vocalanak jikxatañawa (case sensitive). Qalltanki, tukuykani uka vocalanakax janiw jakhthapiti. Ch'usa k'ata k'ata kut'ayma, janitix vocalanakax jikxatañjamakchi ukaxa. Aka k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k'ata k' k'ata k' k'ata' k' k'ata' k' k'ata' k' k'ata' k' k'ata' k' k'ata' k' k'ata' k' k'ata k' k'ata k' k'ata k' k'ata k' k' k'ata k' k'ata k' k'ata k' k' k'ata k' k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k'a k\"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''Akax mä listawa pä cadenanakataki, paypach cadenanakax jist ' at paréntesis ' (((' jan ukax jist ' at paréntesis ') ' ukampikiwa. Lurañamax akhamawa: akax pä cadenanak mä ordenar ch ' amancht ' añatakïchi, ukatx kuna cadenas utjkan ukax sumawa. S string ukax wali sumapuniwa, ukatx S ukanx taqi paréntesis ukanakaw suma. Amuyt ' añataki: akax ' (((()))) ' sumawa, ukampirus akax ' ((()) ' janiw waliki. Maysatx 'Yes' ukaruw kutt ' ayana, jan ukhamäkchi ukhax 'No' ukaruw kutt ' ayana. Ejemplos: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"Mä array arr ukat k k'ilikïw mä k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'achat k'\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"Mä lista de enteros jan ch'usax utjkipanx, taqpach elementos impares ukanakan sumax kutt'ayatawa. Ejemplos de solución: ([5, 8, 7, 1]) ==> 12 solución ([3, 3, 3, 3, 3]) ==> 9 solución ([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"Mä array de enteros arr ukat k ukax janiw ch'usaxiti, ukatx k ukax entero ukjamarakiwa, ukatx k k k uka nayrïr k elementonakatx pä digitonakaw kutt'ayata. Ejemplo: Entrada: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Salida: 24 # suma de 21 + 3 Restricciones: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) \"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"Mä suma n jakhu uñjatatxa, mä suma listaruw kut'ayma, ukanx n jakhunakax jan kikipakiw collatz arkata. Collatz amuyux matemática ukan mä amuyuwa, akjam uñt'at arkata: kuna suma n jakhu uñjatat qalltaña. Ukatsti sapa jakhux nayrïr jakhupat akjam uñjatarakiwa: nayrïr jakhux ch'usawa, qhipïr jakhux nayrïr jakhux chikatankiwa. Nayra jakhux ch'iqawa, qhipïr jakhux 3 kuti nayrïr jakhux ch'iqawa, juk'ampirus 1.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"Mä función qillqañawa, ukax mä cadena de fecha uksan chiqapapapuni ukjamarus chiqapuni ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamarus k'ari ukjamaraki ukjamarus k'ari ukjamaraki ukjamarus ukjamarus ukjamarus ukjamarus ukjamarus ukjamarus ukjamaraki ukjamarus ukjamaraki ukjam ukjamarus ukjamaraki ukjamarus ukjam ukjam ukjamaraki ukjamarus ukjamaraki ukjamaraki ukjamaraki ukjamaraki ukjamaraki ukjamaraki ukjamaraki ukjamaraki ukjampi ukjampi ukjampi ukjampi ukjampi ukjam ukjampi\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''Mä arunaka qillqataxa, mä arunaka qillqata kutt'ayma, ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa ch'usa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa chusa'''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''Mä lista jakhunaka churata, kutt'ayma janit uka jakhunakax ascendente ukjamat wakt'ayata. Mä listax mä sapa jakhunakatx juk'amp utjchi ukaxa, k'ariw kutt'ayma. Jan kuna k'ari jakhunaka ukatx enteros ukakiw utjchi. Ejemplos is_sorted (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ( (), (), (), (), (), (), ( (), (), (), ( (), (), (), ( (), (), ( (), (), (), (), ( (), (), (), (), (), (), (), ( (), (), (), (), (), (), (), (), (), (), ( (), (), ( (), (), (), (), ( (), (), (), (), (), (), (), (), (), (), (), (), (), ( (), ( (), (), (), (), ( (), ( (), (), (), ( ( (), (), (), (), ( (), (), (), (), (), (), (), (), (), ( (), (), (), (), (), (), ( (),'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"Akax pä jaljtawinakawa, sapa jaljtawinxa pä jakhu jakhunakawa. Sañäni, jaljtawi = ( qallta, tukuya) = (1, 2). Uka jaljtawinakaxa jist'antatawa, ukasti sañ muniwa jaljtawixa ( qallta, tukuya) qallta, tukuya ukanakawa. Sapa jaljtawi taypinxa, qalltapax juk'ampiwa jan ukax tukuyaruxa. Aka lurawix amuyt'añatakiwa, aka pä jaljtawinakana jaljtawipax mä jakhu jakhucha janicha. Sañäni, jaljtawinakan jaljtawipax (1, 3), (2, 4) (2, 3) ukjamarak 1 ukjamarak jan mä jakhu jakhu. Uka jaljtawin jaljtawipax mä jakhu jakhucha ukjamarakchi ukhax \"JISTA\" ukjamar kutt'ayma, jan ukhamakipansti \"JAI\" ukjamar kutt'ayma. Uka pä jaljtawinakax jan jaljtaykchi ukhax \"JAI\" ukjamar kutt'ayma. [input/output] samples: jaljtawi (i) (2, 2 (i), 2 (ii) ==> \"juntawi (i), (i) ==juntawi (i), (i) ==junta (i), (i) ==junta (i), (i) ==junta (i), ==junta (i), ==junta (i), ==junta (i), ==junta (i), ==i)\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"Mayt'ataxa mä tama qutu jakhunaka, ukatxa mayt'ataxa suma jakhunaka, ukata jilt'ataxa, uka qutu jakhunakanxa, sapa jakhunaka, 1, -1 ukatxa 0 ukanaka.\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"Qawqha k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'anchanaka k'\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"Taqiniw Fibonacci uka jakhu yatxapxi, aka jakhux matemáticos jupanakaw qhipa pä patak maranakan yatxatapxatayna. Ukampirus, kunatix jaqinakax janiw yatipkiti ukax Tribonacci uka jakhuwa. Tribonacci uka jakhux akhamarjamaw uñt'ata: tri(1) = 3 tri(n) = 1 + n / 2, n ukax ch'usawa. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n ukax ch'usawa. Amuyt'añataki: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Nïmax mä jan k'ari jakhu n churataxa, ukatx n + 1 jakhuw Tribonacci jakhux kutt'ayata. Amuyt'añataki: tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"Mayni suma jakhu n, k'ata jakhu n jakhu jakhunaka kuttayma. 0 kutt'ayma, taqpach jakhu jakhunaka purinipxchi ukaxa. Amuyt'añataki: jakhu (x) == 1 jakhu (x) == 0 jakhu (x) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''Aka phuqachirixa chiqaparu kuttayani, kunapachati mä chiqaparu maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru maya chiqanakaru'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"Jumax mä lista de números churata. Jumax suma jakthapiña cuadrados uka lista ukanxa, sapa elemento uka lista uksanxa, nayraqatax int superior ukaruw muytaña. Ejemplos: Para lst = [1,2,3] uka mistutaxa 14 Para lst = [1,4,9] uka mistutaxa 98 Para lst = [1,3,5,7] uka mistutaxa 84 Para lst = [1.4,4.2,0] uka mistutaxa 29 Para lst = [-2.4,1,1] uka mistutaxa 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''Aka phuqachirixa mayt'askiwa chiqapa mayt'asiri, mayt'askiwa chiqapa mayt'asiri, mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'askiwa chiqapa mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'a mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'x mayt'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"Akax mä funciónwa, uka mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mä mayt'äwix mayt'äwix mayt'äwix mayt'äwix mayt'äwix mayt'äwix mayt'äwix mayt'äwix mayt'äwix mayt'awa mayt'awa mayt'awa mayt'awa mayt'awa mayt'wa mayt'wa mayt'wa mayt'wa mayt'wa mayt'a mayt'wa mayt'aytayta'aytayta'ay mayt'ay mayt'aytayta'ay mayt'aytayta'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay'ay\"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''Mä función lurma, ukax mä tupula (a, b) khaysa 'a' ukax mayja jach'a k'ullk'u jakhunakawa, ukat 'b' ukax mayja jisk'a k'ullk'u jakhunakawa mä listana. Janitix mayja k'ullk'u jakhunakas utjkan ukaxa, khaysa None ukjam khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa khaysa kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh kh'''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"Aka phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachirixa phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqachiri phuqxapa phuqxapa phuqachiri phuqxapa phuqachiri phuqachiri phuqachiri phuqxapa phuqachiri phuqachiri phuqachiri phuqachiri phuqxapa\"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Qhanächi uka n jakhux suma 4 suma jakhunak suma qillqasispa uk amuyt'añataki. Amuyt'äwi: es_igual_a_suma_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_par_a_a_par_a_par_a_a_par_a_par_a_a_par_a_a_par_a_a_a_par_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a\"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"Brasil markan factorial ukax akham uñt'atawa: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! kawkhanti n > 0 Ejemplo: >>> special_factorial ((4) 288 Aka phuqachirixa mä entero ukjam katuqaña ukatx factorial especial uka jak'at kutt'ayaña. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_Primero-3qax utjkipanx, taqi ch'usawjanakaruw k'achat qillqañanakamp turkakiptaña, ukat mä k'achatx 2 juk'amp ch'usawjanakaw utjix, ukhax taqi ch'usawjanakaruw turkakiptaña - fix_spaces ((\"Example\") == \"Example\" fix_spaces ((\"Example1\") == \"Example_1\" fix_spaces ((\"Example2\") == \"_Example_2\" fix_spaces ((\"Example 3\") == \"_Example-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Mä función lurma, ukax mä cadena ukat mä archivo sutinak apti, ukatx 'sí' ukaruw kutt'ayi, ukjamatix uka archivo sutinakax chiqakchi ukhax 'no' ukaruw kutt'ayi. Mä archivo sutinakax chiqakchi ukjamarjamaw uñjatäni, ukjamatix aka mayt'äwinakax phuqhatakchi ukjamarjama: - Janiw kimsa jakhunakat juk'amp utjkaspati ('0'-'9') uka archivo sutinakanxa. - Archivo sutinakax mä puntutakiw qallti '.' - Substring uka puntut nayrx janiw ch'usaxiti, ukatx mä letra latina alfabetot qallti ('a'-'z' ukat 'A''-Z'). - Substring uka puntut qhipx akïrinakat mayaw utjañapa: ['txt', 'exe', 'lld'] Ejemplos: file_name_check\"{example.txt.txt\") # => 'sí' nombre de archivo_check\"{example.dll1} => 'no' (suti sutix mä letra latina alfabetot qalltañapawa) #\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" Aka phuqachirixa mä lista de enteros enteros. Taqinitaki lista ukanxa, phuqachirixa cuadratapxañapa entero entero ukaxa, uka index ukax 3 ukatx multiplo ukjamakchi, ukatxa cubratapxañapa entero entero ukaxa, uka index ukax 4 ukatx multiplo ukjamakchi ukatx janiw 3 ukatx 4 uka multiplo ukjamakchi. Función ukax janiw mayjt'aykaniti enteros ukanaka lista ukanxa, uka enteros ukan index ukax janiw 3 ukatx 4 uka multiplo ukjamakchi. Función ukax kutt'ayaniwa enteros ukanaka suma. Ejemplos: Para lst = [1,2,3] la salida debe ser 6 Para lst = [] la salida debe ser 0 Para lst = [-1,-5,2,-1,-5] la salida debe ser -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"Maynix mä ch'uqiw churata, uka ch'uqix mä qawqha arunakaniwa, mä espaciomp jaljtataraki, ukatx mä ch'uqiw kutt'ayata, uka ch'uqix nayrïr ch'uqi arunakaniwa, ukjamarak nayrïr ch'uqi arunakas nayrïr ch'uqi arunakjamarakïñapawa. Ejemplo1: Input: sentence = \"This is a test\" Output: \"is\" Ejemplo2: Input: sentence = \"let's go for swimming\" Output: \"go for\" Restrictions: * 1 <= len(sentence) <= 100 * sentence contains only letters \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"Kuna lurañamas utji ukax mä función ukar jaysañawa, ukax mä suma jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jak\"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"Akax mä phuqachir qillqatawa, ukax jakhu jakhunak sumacht'ataparjamaw jakhu jakhunak taypinx jaljtayi. Ak uñt'ayama: mayja jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu jakhu\"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"Mä función qillqaña, ukax mä matriz de números ukjamar mantata ukatx 10 ukat juk'amp jach'a matriz ukan jakhunak kutt'ayani, ukatx nayrïr ukat qhipa jakhunakax jan kikipaki (1, 3, 5, 7, 9). Ejemplo: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"Maynix mä suma entero n ukaniwa. Maynix mä array entero a ukaniwa, n ukaniwa. Sapa i (1 ‰¤ i ‰¤ n), a[i] = i * i - i + 1. a ukanx i < j < k, ukat a[i] + a[j] + a[k] ukax 3 jakhunakaniwa. Ejemplo: Entrada: n = 5 Salida: 1 Explicación: a = [1, 3, 7, 13, 21] El único triple válido es (1, 7, 13).\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''Aka sistema solar uksanx kimsaqallqu planetanakaniwa: Inti jak'ankirix Mercurio, qhipïrx Venus, ukatx Tierra, Marte, Júpiter, Saturno, Urano, Neptuno. Mä función qillqaña, uka función ukax pä planetan sutinakaruw cadenas planet1 ukat planet2 ukjam apani. Uka función ukax mä tupla ukaruw kut'ayanxa, ukanx taqi planetas ukan orbitapax 1 ukat 2 planetanak taypinkiwa, ukatx inti jak'ankatapjam jaljatarakiwa. Uka función ukax mä tupla ch'usaw kut'ayanxa, planet1 ukat planet2 ukax jan chiqap planetan sutinakapakchi ukhax. Ejemplos: bf \"(Jupiter\", \"Neptuno\") ==> (\"Saturno\", \"Uranus\") bf ((\"Terra\", \"Mercurio\") ==> (\"Venus\") bf (\"Mercurio\", \"Uranus\") ==> (\"Venus\", \"Terra\", \"Marte\", \"Jupiter\", \"Saturno\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Mä función qillqaña, uka listanx mä parámetro ukjamarakiw mä lista de cadenas ukanakaxa, ukatx jan mayja jallukipki ukanaka chhaqtayasa, ukatx mä orden ordenado uka listar kut'ayasa. Uka listax mä lista de cadenas ukjamarakwa, janiw mä array de números ukhamakaspati, ukatx inas pä arur uñtasit utjchispa. Uka ordenanx sapa arur jayst'asaw uñstayaña, ukat uka kamachimpix uka listax uñstayatarakispawa. Pä arux mä pachpakïchi ukhax aka listarux alfabeticamente uñstayaña. Uka funciónx mä lista de cadenas ordenadas ukjam uñstayañapawa. Akham amuyt'añataki: list_sort[\"aa\", \"a\", \"aaa\"]) => list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"ab\", \"cd ])\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"Mä programax mä n jakhunakx mä valor primor ukjamakxarux kutt'ayaspa, ukatx mä y jakhunakx kutt'ayarakispawa.\"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''Mä lista jakhunaka churata, listan jakhunaka cuadratunakap suma kut'ayma. Jan walt'ayiri jan ukax jan taqpach jakhunaka jani yäqasa. payaru_jankhu_jankhu_jankhu (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 payaru_jankhu_jankhu_jankhu (([-1, -2, 0]) == 0 payaru_jankhu_jankhu (([9, -2]) == 81 payaru_jankhu_jankhu_jankhu_jankhu]] == 0 Input list ukax ch'usawa, 0 kutt'ayma. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"Akax mä aski amuyt'äwiwa, kunapachati mä jaqix mä qawqha kutiw chiqpach amuyki uk yatixa. Akax mä aski amuyt'äwiwa, kunapachati mä jaqix mä qawqha kutiw chiqpach amuyki uk yatixa. Akax pä kasta uñanchäwinakawa, sapa uñanchäwix mä kikpak uñanchäwi. Maysatx mä kasta uñanchäwinakawa, kunapachati sapa uñanchäwix chiqpach amuyki uk yatixa. Maysatx mä kasta uñanchäwinakawa, kunapachati sapa uñanchäwix chiqpach amuyki uk yatixa. Maysatx mä uñanchäwinkiwa, mä uñanchäwinx 0 ukjam uñanchäwi, ukatx mä uñanchäwinx 0 ukjam uñanchäwi ukjam uñanchäwi.\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"Mä jach'a mayachäwin sutipa (string) ukatx mä lista de extensiones ukanakaw churata. Uka extensiones ukanakaxa yaqha jach'a mayachäwinaka uka jach'a mayachäwiru apkatañatakiwa. Uka extensión ukan ch'amanchäwipax akhamawa: CAP ukax jach'a mayachäwinakan sutinakapaspan, SM ukax jisk'a mayachäwinakan sutinakapaspan, uka ch'amanchäwix CAP - SM uka jisk'a mayachäwimpiw churata. Jumax wali ch'aman mayachäw jikxatañamaxa ukat mä cadena aka formato uksan kutt'ayañama: ClassName.StrongestExtensionName. Mayni jan ukax juk'amp mayachäwinakax mä ch'amanchäwimpix utjchi ukaxa, listat nayrïr uñstki ukaruw ajllisma. Amuyt'añataki, mä \"Slices\" uka jach'a mayachäwimpix mä lista de extensiones ukanakaw churata: ['SEviviSliNGCes', 'Cheese', 'StuFfed' ukjamaraki 'Slices.SliviSliNG.SEviSliNGCes' 'SliviSliNGCes' (my) ukax wali ch'aman mayachäwimpix utjatapuniwa. Akax aka ex.: 'AA_Beast_class' (Extension_class_Beast'), akax) uka ch'amanchäwinakañchäwinaka ch'amanchäwimpiwimpiw utjatakipawa.\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"2 arunak churapxsma. Mayïr arux mayïr arux mä sapa k'achachawiwa, ukhax True ukaruw kutt'ayañama cycpattern_check (((\"abcd\",\"abd\") => False cycpattern_check (((\"hello\",\"ell\") => True cycpattern_check (((\"whassup\",\"psus\") => False cycpattern_check (((\"abab\",\"baa\") => True cycpattern_check (((\"efef\",\"eeff\") => False cycpattern_check (((hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"Mä entero churata. mä tupula khaysa par y impar dígitos ukampi. Ejemplo: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"Mä suma jakhu jakhu uñjatana, romanos jakhunakamp kikipata mä cadena ukjamar tukuyaña, ukatx jisk'a qillqatanakamp kutt'ayaña.\"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''Kimsa thiyanakan anchurapa mä trío ukana. Chiqapa kutt'ayma kimsa thiyanakax mä triángulo rectángulo ukjamakchi ukjaxa, k'ariwa. Mä triángulo rectángulo ukax mä trío uksanx mä angulo ukax 90 grados ukjamarakiwa. Ejemplo: right_angle_triangle ((3, 4, 5) == Chiqapa rectángulo_triángulo ((1, 2, 3) == K'ariwa '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"Mä función qillqaña, ukax mä lista de cadenas ukamp chikachasispa. Uka listax kunayman arunakaniwa. Ukax mä sapa arurakiw kutt'ayani. Mayni sapa k'atanakatix walja k'atanak utjchixa, nayrïr k'atanak kutt'ayani.\"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"Jumax mä manq'at awtjat chiwchtawa, ukatx niyaw mä qawqha carrots manq'anttaxa, ukampirus jichhaxa juk'amp carrots manq'añamaxa, ukhamat urun manq'añax tukuyañataki. mä array [ manq'at manq'at taqpach carrots manq'aña, manq'at qhiparir carrots ] ukar kutt'ayañama, janitï juk'a carrots utjkan ukax, taqpach carrots manq'antäta, ukampirus manq'at awtjatakïskätawa. Ejemplo: * manq'aña (5, 6, 10) -> [11, 4] * manq'aña (4, 8, 9) -> [12, 1] * manq'aña (1, 10, 10) -> [11, 0] * manq'aña (2, 11, 5) -> [7, 0] Variables: @number: jakhüwi jakhu: manq'at carrots jakhu. @need: jakhüwi jakhu: jakhüwi jakhu: manq'at jakhu. @remaining: jakhüwi jakhu: jakhüwi jakhu: jakhüwi carrots jakhu.\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"Pä operador, operando ukanakaw utji. Nayrïr listanx operativos básicos de álgebra ukanakaw utji, payïr listasti enteros ukanakaw utji. Uka pä listanakamp yanapt'asisinsti, algebra ukanx mä expresión ukaruw apst'asma ukat uka expresiónx mä valor ukaruw kut'ayarakisma. Operativos básicos de álgebra ukanakaw utji: Sumachata (+) Sumachata (-)) Sumachata (*) Sumachata (-)) Sumachata (-)) Sumachata (-)) Sumachata (-)) Sumachata (-)) Sumachata (-)) Sumachata (-)) Sumachata (-)) Sumachata (-)) Sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), sumachata (-), suma (-), suma (-), suma (-), suma (-), suma (-), suma (-), suma (-), suma (-), suma (-,-) suma (-, suma (-,-) suma (-, suma (-,-) suma (-, suma-), suma (-, suma-), suma-), suma- (-, suma-), suma- (-, suma-), suma- (-, suma-), suma- (-, suma-), suma-), suma- (-, suma-), suma- (-, suma-), suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- , suma- ,-\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"Ukax mä cadena s s. Ukax mä letrawa, s[i] ukax mä letrawa, ukax k'achat k'achat k'achat uñakipatäñapawa, jan ukax k'achat k'achat uñakipatäñapawa, jan ukast ukhamak qhiparpan. Ukax jan kuna letras ukankchi ukhax k'achat k'achat uñakipatäñapawa. Ukax k'achat k'achat uñakipatäñapawa. Ejemplos resolver ((\"1234\") = \"4321\" resolver ((\"ab\") = \"AB\" resolver ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"Mä k ' añaskun ch ' amapax churatawa, md5 hash uka k ' añaskun ch ' amapax kutt ' ayatawa. Mä k ' añaskun ch ' amapax ch ' aqaskchi ukaxa, janiw kutt ' ayatakiti. >>> string_to_md5 (('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "ayr_Latn",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"Pä suma jakhu a ukat b churata, a ukat b uka taypin jakhu jakhu jakhunak kutt'ayma, sartaskirjama. Amuyt'añataki: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]