[{"task_id":"HumanEval_0","nl":"gle_Latn","pl":"ts","prompt":"\/\/\/\/Seiceáil má i sraith áirithe de uimhreacha, tá aon dhá uimhreacha níos gaire dá chéile ná \/\/ >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\/\/ false\n\/\/ >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\/\/ true\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n","canonical_solution":"function has_close_elements(numbers: number[], threshold: number): boolean {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"},{"task_id":"HumanEval_1","nl":"gle_Latn","pl":"ts","prompt":"\/\/Ná déan dearmad ar aon spásanna sa shreang ionchuir. \/\/Tá grúpaí ar leithligh cothrom (tá gach brace oscailte dúnta i gceart) agus ní bhíonn siad neadaithe laistigh dá chéile \/\/na grúpaí sin a scartha i sraitheanna ar leithligh agus an tairm sin a thabhairt ar ais. \/\/Is sraith sreinge é ionchur an fheidhm seo ina bhfuil grúpaí il na bprátais snáthaithe. Is é do sprioc \/\/ >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n\/\/ [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string: string): string[] {\n","canonical_solution":"function separate_paren_groups(paren_string: string): string[] {\n    const result: string[] = [];\n    let currentGroup: string = \"\";\n    let balance: number = 0;\n\n    for (let char of paren_string) {\n        if (char === ' ') {\n            continue; \/\/ Ignore spaces\n        }\n        \n        currentGroup += char;\n\n        if (char === '(') {\n            balance++;\n        } else if (char === ')') {\n            balance--;\n        }\n\n        if (balance === 0 && currentGroup.length > 0) {\n            result.push(currentGroup);\n            currentGroup = \"\";\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"},{"task_id":"HumanEval_2","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir an chuid dheicheálach den uimhir ar ais. \/\/(is lú i gcónaí ná 1 an chuid iarsma).\/\/agus cuid iomlán (an t-ionad iomlán is mó níos lú ná an uimhir a thugtar) agus deichiméil \/\/Le líon dearfach pointí gluaiseachta, is féidir é a dhoilliú ina \/\/ >>> truncate_number(3.5)\n\/\/ 0.5\nfunction truncate_number(number: number): number {\n","canonical_solution":"function truncate_number(number: number): number {\n    const integerPart = Math.floor(number);\n    return number - integerPart;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"},{"task_id":"HumanEval_3","nl":"gle_Latn","pl":"ts","prompt":"\/\/ag an bpointe sin ba chóir go dtiocfadh feidhm fíor. Seachas sin ba cheart go dtiocfadh sé bréagach. \/\/Is é do chuspóir a bhrath má thiteann cothrom an chuntas faoi bhun nialas ag pointe ar bith, agus \/\/Tá tú a thabhairt ar an sraith de taisce agus aistarraingt oibríochtaí ar chuntas bainc a thosaíonn le \/\/ >>> below_zero([1, 2, 3])\n\/\/ false\n\/\/ >>> below_zero([1, 2, -4, 5])\n\/\/ true\nfunction below_zero(operations: number[]): boolean {\n","canonical_solution":"function below_zero(operations: number[]): boolean {\n    let balance = 0;\n    \n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    \n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"},{"task_id":"HumanEval_4","nl":"gle_Latn","pl":"ts","prompt":"\/\/MAD = meán. x - x_mean. \/\/gné agus pointe lár (meán sa chás seo): \/\/Is é Mean Absolute Deviation an meán difríocht absoliúid idir gach \/\/Tá an t-am ar fad ag an mbliain seo caite.\/\/I gcás sraith áirithe de uimhreacha ionchuir, ríomh Mean Absolute Deviation \/\/ >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\/\/ 1.0\nfunction mean_absolute_deviation(numbers: number[]): number {\n","canonical_solution":"function mean_absolute_deviation(numbers: number[]): number {\n    const mean = numbers.reduce((acc, num) => acc + num, 0) \/ numbers.length;\n    const absoluteDifferences = numbers.map(num => Math.abs(num - mean));\n    const mad = absoluteDifferences.reduce((acc, diff) => acc + diff, 0) \/ numbers.length;\n    return mad;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0, 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();"},{"task_id":"HumanEval_5","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir uimhir 'delimiter' isteach idir dhá eilimint as a chéile de shraith ionchuir ∀uimhreacha' \/\/ >>> intersperse([], 4)\n\/\/ []\n\/\/ >>> intersperse([1, 2, 3], 4)\n\/\/ [1, 4, 2, 4, 3]\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n","canonical_solution":"function intersperse(numbers: number[], delimeter: number): number[] {\n    if (numbers.length === 0) {\n        return [];\n    }\n\n    let result: number[] = [];\n\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i < numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"},{"task_id":"HumanEval_6","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla, tá dhá leibhéal uasta neadaíochta ag (() (()) agus tá trí leibhéal uasta neadaíochta ag ((()). \/\/I gcás gach ceann den ghrúpa, cuir amach an leibhéal is doimhne de na parentheses a bheith suite. \/\/Is sraith sreinge é ionchur an fheidhm seo a léiríonn grúpaí iomadúla do phraenlaigh snáthaithe a scarann spásanna. \/\/ >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n\/\/ [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n","canonical_solution":"function parse_nested_parens(paren_string: string): number[] {\n    return paren_string.split(' ').map(group => {\n        let maxDepth = 0;\n        let currentDepth = 0;\n\n        for (const char of group) {\n            if (char === '(') {\n                currentDepth++;\n                if (currentDepth > maxDepth) {\n                    maxDepth = currentDepth;\n                }\n            } else if (char === ')') {\n                currentDepth--;\n            }\n        }\n\n        return maxDepth;\n    });\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"},{"task_id":"HumanEval_7","nl":"gle_Latn","pl":"ts","prompt":"\/\/Filter a bhfuil sraith ionchuir de shreangáin ann ach amháin dóibh siúd a bhfuil fo-shreangán áirithe acu \/\/ >>> filter_by_substring([], \"a\")\n\/\/ []\n\/\/ >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\/\/ [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n","canonical_solution":"function filter_by_substring(strings: string[], substring: string): string[] {\n    return strings.filter(s => s.includes(substring));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"},{"task_id":"HumanEval_8","nl":"gle_Latn","pl":"ts","prompt":"\/\/Ba chóir go mbeadh suim folamh comhionann le 0 agus ba cheart go mbeadh táirge folamh comhionann le 1. \/\/Chun sraith de líon iomlán a thabhairt, sraith a thabhairt ar ais ina bhfuil suim agus táirge de na huimhreacha iomlána go léir i sraith. \/\/ >>> sum_product([])\n\/\/ [0, 1]\n\/\/ >>> sum_product([1, 2, 3, 4])\n\/\/ [10, 24]\nfunction sum_product(numbers: number[]): [number, number] {\n","canonical_solution":"function sum_product(numbers: number[]): [number, number] {\n    const sum = numbers.reduce((acc, curr) => acc + curr, 0);\n    const product = numbers.reduce((acc, curr) => acc * curr, 1);\n    return [sum, product];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"},{"task_id":"HumanEval_9","nl":"gle_Latn","pl":"ts","prompt":"\/\/sa seicheamh. \/\/Ó shraith ar leith de na hionadaithe iomlána, a ghiniúint sraith de rollta is mó eilimint a fuarthas go dtí nóiméad ar leith \/\/ >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n\/\/ [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]): number[] {\n","canonical_solution":"function rolling_max(numbers: number[]): number[] {\n    let maxArray: number[] = [];\n    let currentMax: number = Number.NEGATIVE_INFINITY;\n    \n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n        }\n        maxArray.push(currentMax);\n    }\n\n    return maxArray;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\ntest();"},{"task_id":"HumanEval_10","nl":"gle_Latn","pl":"ts","prompt":"\/\/- Cuir isteach ag deireadh an shraith a mhalairt de réamhtheachtacht shraith a thagann roimh an bhfís palindróim. \/\/- Faigh an postfix is faide de shreang a sholáthraítear atá ina palindrome. \/\/Is é an smaoineamh algartam simplí: \/\/Faigh an palindrome is giorra a thosaíonn le sraith soláthair. \/\/ >>> make_palindrome(\"\")\n\/\/ \"\"\n\/\/ >>> make_palindrome(\"cat\")\n\/\/ \"catac\"\n\/\/ >>> make_palindrome(\"cata\")\n\/\/ \"catac\"\nfunction make_palindrome(string: string): string {\n","canonical_solution":"function make_palindrome(string: string): string {\n    function isPalindrome(s: string): boolean {\n        let left = 0;\n        let right = s.length - 1;\n        while (left < right) {\n            if (s[left] !== s[right]) return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    const n = string.length;\n    let longestPalindromicPostfixIndex = n;\n\n    for (let i = 0; i < n; i++) {\n        if (isPalindrome(string.substring(i))) {\n            longestPalindromicPostfixIndex = i;\n            break;\n        }\n    }\n\n    const prefix = string.substring(0, longestPalindromicPostfixIndex);\n    const reversedPrefix = prefix.split('').reverse().join('');\n    return string + reversedPrefix;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\ntest();"},{"task_id":"HumanEval_11","nl":"gle_Latn","pl":"ts","prompt":"\/\/Déan XOR dénártha ar na hionchuir seo agus toradh a thabhairt ar ais mar shraith freisin. \/\/Is ionchur dhá shraith a agus b nach bhfuil ach 1s agus 0s. \/\/ >>> string_xor(\"010\", \"110\")\n\/\/ \"100\"\nfunction string_xor(a: string, b: string): string {\n","canonical_solution":"function string_xor(a: string, b: string): string {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i] ? '0' : '1');\n    }\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"},{"task_id":"HumanEval_12","nl":"gle_Latn","pl":"ts","prompt":"\/\/strings den fhad céanna. Ní dhéantar é a aisíoc i gcás go bhfuil an tsraith ionchuir folamh. \/\/As sraith sreanganna, cuir ar ais an ceann is faide. Cuir ar ais an chéad cheann i gcás go bhfuil go leor \/\/ >>> longest([])\n\/\/ undefined\n\/\/ >>> longest([\"a\", \"b\", \"c\"])\n\/\/ \"a\"\n\/\/ >>> longest([\"a\", \"bb\", \"ccc\"])\n\/\/ \"ccc\"\nfunction longest(strings: string[]): string | undefined {\n","canonical_solution":"function longest(strings: string[]): string | undefined {\n    if (strings.length === 0) {\n        return undefined;\n    }\n\n    let longestString = strings[0];\n\n    for (const str of strings) {\n        if (str.length > longestString.length) {\n            longestString = str;\n        }\n    }\n\n    return longestString;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"},{"task_id":"HumanEval_13","nl":"gle_Latn","pl":"ts","prompt":"\/\/Fill ar ais an comhdhíoltóir is mó a dhá líon iomlán a agus b \/\/ >>> greatest_common_divisor(3, 5)\n\/\/ 1\n\/\/ >>> greatest_common_divisor(25, 15)\n\/\/ 5\nfunction greatest_common_divisor(a: number, b: number): number {\n","canonical_solution":"function greatest_common_divisor(a: number, b: number): number {\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"},{"task_id":"HumanEval_14","nl":"gle_Latn","pl":"ts","prompt":"\/\/Arís sraith de na réamhtheachtaí go léir ó is giorra go dtí is faide den shreang ionchuir \/\/ >>> all_prefixes(\"abc\")\n\/\/ [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string: string): string[] {\n","canonical_solution":"function all_prefixes(string: string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"},{"task_id":"HumanEval_15","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir sreang ina bhfuil uimhreacha spáis-delimited ag tosú ó 0 go n san áireamh ar ais. \/\/ >>> string_sequence(0)\n\/\/ \"0\"\n\/\/ >>> string_sequence(5)\n\/\/ \"0 1 2 3 4 5\"\nfunction string_sequence(n: number): string {\n","canonical_solution":"function string_sequence(n: number): string {\n    let result: string[] = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i.toString());\n    }\n    return result.join(' ');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();"},{"task_id":"HumanEval_16","nl":"gle_Latn","pl":"ts","prompt":"\/\/Ar shraith a thabhairt, faigh amach cé mhéad carachtar ar leith (gan aird ar chás) a bhfuil sé comhdhéanta de \/\/ >>> count_distinct_characters(\"xyzXYZ\")\n\/\/ 3\n\/\/ >>> count_distinct_characters(\"Jerry\")\n\/\/ 4\nfunction count_distinct_characters(string: string): number {\n","canonical_solution":"function count_distinct_characters(inputString: string): number {\n    const lowerCasedString = inputString.toLowerCase();\n    const distinctCharacters = new Set<string>();\n\n    for (const char of lowerCasedString) {\n        distinctCharacters.add(char);\n    }\n\n    return distinctCharacters.size;\n}\n\n\/\/ Example usage:\nconsole.log(count_distinct_characters(\"xyzXYZ\")); \/\/ Output: 3\nconsole.log(count_distinct_characters(\"Jerry\"));  \/\/ Output: 4","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"},{"task_id":"HumanEval_17","nl":"gle_Latn","pl":"ts","prompt":"\/\/'Sé' - nóta ceathrú, maireann an t-am amháin.\/\/'o \"d\" - leath nóta, maireann sé dhá bhualadh \/\/'O' - nóta iomlán, maireann ceithre thráth \/\/Seo an finscéal: \/\/ní dheireanach. \/\/Is é do tasc a parse an sreang seo agus ar ais sraith de na hionadóirí a fhreagraíonn do cé mhéad buille a dhéanann gach \/\/Is é an t-ionchur a chuirtear isteach sa fheidhm seo ná sreang a léiríonn nótaí ceoil i bhformáid speisialta ASCII. \/\/ >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n\/\/ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string: string): number[] {\n","canonical_solution":"function parse_music(music_string: string): number[] {\n    const notes = music_string.split(' ');\n    return notes.map(note => {\n        switch (note) {\n            case 'o':\n                return 4;\n            case 'o|':\n                return 2;\n            case '.|':\n                return 1;\n            default:\n                return 0;\n        }\n    });\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"},{"task_id":"HumanEval_18","nl":"gle_Latn","pl":"ts","prompt":"\/\/Faigh amach cé mhéad uair is féidir fo-shreang a fháil sa shreang bunaidh. Coinnigh cásanna a bhíonn ag dul thar a chéile. \/\/ >>> how_many_times(\"\", \"a\")\n\/\/ 0\n\/\/ >>> how_many_times(\"aaa\", \"a\")\n\/\/ 3\n\/\/ >>> how_many_times(\"aaaa\", \"aa\")\n\/\/ 3\nfunction how_many_times(string: string, substring: string): number {\n","canonical_solution":"function how_many_times(string: string, substring: string): number {\n    if (substring.length === 0) return 0;\n    let count = 0;\n    for (let i = 0; i <= string.length - substring.length; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\/\/ Example usage:\n\/\/ console.log(how_many_times(\"aaa\", \"a\")); \/\/ Output: 3\n\/\/ console.log(how_many_times(\"aaaa\", \"aa\")); \/\/ Output: 3\n\/\/ console.log(how_many_times(\"\", \"a\")); \/\/ Output: 0","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"},{"task_id":"HumanEval_19","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir an sreang ar ais le huimhreacha arna n-eagrú ó is lú go dtí is mó \/\/Is iad na roghanna bailí 'null', 'aon', 'dhá', 'trí', 'ceithre', 'cúigear', 'seisear', 'seacht', 'ochd' agus 'naoi'. \/\/Is sraith uimhreacha delimitáilte spás ó 'null' go 'naoi' an ionchur. \/\/ >>> sort_numbers(\"three one five\")\n\/\/ \"one three five\"\nfunction sort_numbers(numbers: string): string {\n","canonical_solution":"function sort_numbers(numbers: string): string {\n    const numberWords = [\n        'zero', 'one', 'two', 'three', 'four', \n        'five', 'six', 'seven', 'eight', 'nine'\n    ];\n    \n    \/\/ Split the input string into an array of words\n    const wordsArray = numbers.split(' ');\n\n    \/\/ Sort the wordsArray based on the index of each word in numberWords\n    wordsArray.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));\n\n    \/\/ Join the sorted array back into a space-delimited string and return\n    return wordsArray.join(' ');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"},{"task_id":"HumanEval_20","nl":"gle_Latn","pl":"ts","prompt":"\/\/aistrithe agus aistrithe eile agus iad a thabhairt ar ais in ord (uimhir níos lú, uimhir níos mó).\/\/Ó shraith de uimhreacha a sholáthraítear (de dhá uimhreacha ar a laghad) roghnaigh agus tabhair ar ais an dá uimhreacha is gaire do gach ceann \/\/ >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\/\/ [2.0, 2.2]\n\/\/ >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\/\/ [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n","canonical_solution":"function find_closest_elements(numbers: number[]): [number, number] {\n    if (numbers.length < 2) {\n        throw new Error(\"Array must contain at least two numbers\");\n    }\n\n    \/\/ Sort the array so that we can check consecutive elements\n    numbers.sort((a, b) => a - b);\n\n    let closestPair: [number, number] = [numbers[0], numbers[1]];\n    let minDifference = Math.abs(numbers[1] - numbers[0]);\n\n    for (let i = 1; i < numbers.length - 1; i++) {\n        let currentDifference = Math.abs(numbers[i + 1] - numbers[i]);\n        if (currentDifference < minDifference) {\n            minDifference = currentDifference;\n            closestPair = [numbers[i], numbers[i + 1]];\n        }\n    }\n\n    return closestPair;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"},{"task_id":"HumanEval_21","nl":"gle_Latn","pl":"ts","prompt":"\/\/mar sin go mbeidh an uimhir is lú a bheith 0 agus beidh an ceann is mó a bheith 1 \/\/Ar shraith uimhreacha (de dhá eilimint ar a laghad) a thabhairt, déan trasfhoirmiú líneach a chur i bhfeidhm ar an sraith sin, \/\/ >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\/\/ [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n","canonical_solution":"function rescale_to_unit(numbers: number[]): number[] {\n    if (numbers.length < 2) {\n        throw new Error(\"Array must contain at least two elements\");\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n\n    if (range === 0) {\n        throw new Error(\"All numbers are the same; rescale not possible\");\n    }\n\n    return numbers.map(num => (num - min) \/ range);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"},{"task_id":"HumanEval_22","nl":"gle_Latn","pl":"ts","prompt":"\/\/Filter array ar bith tsthon luachanna a thabhairt ach amháin do inteachers \/\/ >>> filter_integers([\"a\", 3.14, 5])\n\/\/ [5]\n\/\/ >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n\/\/ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n","canonical_solution":"function filter_integers(values: any[]): number[] {\n    return values.filter(value => Number.isInteger(value));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_23","nl":"gle_Latn","pl":"ts","prompt":"\/\/Téann sé ar ais ar fhad na sreinge ar leith \/\/ >>> strlen(\"\")\n\/\/ 0\n\/\/ >>> strlen(\"abc\")\n\/\/ 3\nfunction strlen(string: string): number {\n","canonical_solution":"function strlen(string: string): number {\n    return string.length;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"),9);\n}\n\ntest();"},{"task_id":"HumanEval_24","nl":"gle_Latn","pl":"ts","prompt":"\/\/Le haghaidh uimhir n, faigh an uimhir is mó a roinn n go cothrom, níos lú ná n \/\/ >>> largest_divisor(15)\n\/\/ 5\nfunction largest_divisor(n: number): number {\n","canonical_solution":"function largest_divisor(n: number): number {\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return 1; \/\/ By mathematical definition, 1 is a divisor of any integer.\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n  assert.deepEqual(candidate(49),7);\n}\n\ntest();"},{"task_id":"HumanEval_25","nl":"gle_Latn","pl":"ts","prompt":"\/\/Ba chóir go mbeadh uimhir ionchuir comhionann le táirge na ngnéithe go léir \/\/Ba cheart gach ceann de na tosca a ordú líon uaireanta a fhreagraíonn do na hamanna a thagann sé i bhféinteáil. \/\/Arís sraith de fhachtóirí príomh de líon iomlán ar leith in ord ón is lú go dtí an ceann is mó. \/\/ >>> factorize(8)\n\/\/ [2, 2, 2]\n\/\/ >>> factorize(25)\n\/\/ [5, 5]\n\/\/ >>> factorize(70)\n\/\/ [2, 5, 7]\nfunction factorize(n: number): number[] {\n","canonical_solution":"function factorize(n: number): number[] {\n    const factors: number[] = [];\n    let divisor = 2;\n    \n    while (n >= 2) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n \/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n\n    return factors;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_26","nl":"gle_Latn","pl":"ts","prompt":"\/\/Coinnigh ord na n-eilimintí ar chlé mar an gcéanna leis an ionchur. \/\/Ó shraith de líon iomlán, a bhaint as gach eilimint a tharlaíonn níos mó ná uair amháin. \/\/ >>> remove_duplicates([1, 2, 3, 2, 4])\n\/\/ [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[] {\n","canonical_solution":"function remove_duplicates(numbers: number[]): number[] {\n    const frequencyMap: Map<number, number> = new Map();\n\n    \/\/ Count the occurrences of each number\n    for (const num of numbers) {\n        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);\n    }\n\n    \/\/ Filter out the numbers occurring more than once\n    return numbers.filter(num => frequencyMap.get(num) === 1);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"},{"task_id":"HumanEval_27","nl":"gle_Latn","pl":"ts","prompt":"\/\/I gcás sreang ar leith, cas carachtair bheag go mór agus mór go mion. \/\/ >>> flip_case(\"Hello\")\n\/\/ \"hELLO\"\nfunction flip_case(string: string): string {\n","canonical_solution":"function flip_case(str: string): string {\n    let flipped = '';\n    for (let char of str) {\n        if (char === char.toUpperCase()) {\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n\n\/\/ Example usage:\nconsole.log(flip_case(\"Hello\")); \/\/ Output: \"hELLO\"","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n\ntest();"},{"task_id":"HumanEval_28","nl":"gle_Latn","pl":"ts","prompt":"\/\/Réim shreangáin a chomhcheangal i sraith shreangáin amháin \/\/ >>> concatenate([])\n\/\/ \"\"\n\/\/ >>> concatenate([\"a\", \"b\", \"c\"])\n\/\/ \"abc\"\nfunction concatenate(strings: string[]): string {\n","canonical_solution":"function concatenate(strings: string[]): string {\n    return strings.join('');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = concatenate;\n  assert.deepEqual(candidate([]),\"\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"xyz\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\");\n}\n\ntest();"},{"task_id":"HumanEval_29","nl":"gle_Latn","pl":"ts","prompt":"\/\/Filter a bhfuil sraith ionchuir de shreangáin ach amháin dóibh siúd a thosaíonn le réamhtheachtaire ar leith. \/\/ >>> filter_by_prefix([], \"a\")\n\/\/ []\n\/\/ >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n\/\/ [\"abc\", \"array\"]\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n","canonical_solution":"function filter_by_prefix(strings: string[], prefix: string): string[] {\n    return strings.filter(str => str.startsWith(prefix));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"},{"task_id":"HumanEval_30","nl":"gle_Latn","pl":"ts","prompt":"\/\/Ní thugann sé ach uimhreacha dearfacha sa tsraith ar ais. \/\/ >>> get_positive([-1, 2, -4, 5, 6])\n\/\/ [2, 5, 6]\n\/\/ >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\/\/ [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[] {\n","canonical_solution":"function get_positive(l: number[]): number[] {\n    return l.filter(num => num > 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_31","nl":"gle_Latn","pl":"ts","prompt":"\/\/Fill ar ais fíor má tá uimhir ar leith réime, agus bréagach ar shlí eile. \/\/ >>> is_prime(6)\n\/\/ false\n\/\/ >>> is_prime(101)\n\/\/ true\n\/\/ >>> is_prime(11)\n\/\/ true\n\/\/ >>> is_prime(13441)\n\/\/ true\n\/\/ >>> is_prime(61)\n\/\/ true\n\/\/ >>> is_prime(4)\n\/\/ false\n\/\/ >>> is_prime(1)\n\/\/ false\nfunction is_prime(n: number): boolean {\n","canonical_solution":"function is_prime(n: number): boolean {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"},{"task_id":"HumanEval_33","nl":"gle_Latn","pl":"ts","prompt":"\/\/na luachanna de na táscairí comhfhreagracha de l, ach a shocrú. \/\/Tá l' comhionann le l sna tásca nach bhfuil inroinnte trí, agus tá a luachanna sna tásca atá inroinnte trí comhionann \/\/Glacann an fheidhm seo sraith l agus cuireann sé sraith l' ar ais ar nós go bhfuil \/\/ >>> sort_third([1, 2, 3])\n\/\/ [1, 2, 3]\n\/\/ >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n\/\/ [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l: number[]): number[] {\n","canonical_solution":"function sort_third(l: number[]): number[] {\n    const indicesDivByThree = l.map((_, i) => i).filter(i => i % 3 === 0);\n    const valuesDivByThree = indicesDivByThree.map(i => l[i]).sort((a, b) => a - b);\n\n    const result = l.slice();\n    for (let i = 0; i < indicesDivByThree.length; i++) {\n        result[indicesDivByThree[i]] = valuesDivByThree[i];\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_third;\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);\n  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);\n  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_34","nl":"gle_Latn","pl":"ts","prompt":"\/\/Eileamaint uathúil ordáilte a thabhairt ar ais i sraith \/\/ >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\/\/ [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[] {\n","canonical_solution":"function unique(l: number[]): number[] {\n    const uniqueSet = new Set(l);\n    const uniqueArray = Array.from(uniqueSet);\n    uniqueArray.sort((a, b) => a - b);\n    return uniqueArray;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();"},{"task_id":"HumanEval_35","nl":"gle_Latn","pl":"ts","prompt":"\/\/Deisigh an eilimint is mó sa tsraith. \/\/ >>> max_element([1, 2, 3])\n\/\/ 3\n\/\/ >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\/\/ 123\nfunction max_element(l: number[]): number {\n","canonical_solution":"function max_element(l: number[]): number {\n    if (l.length === 0) {\n        throw new Error(\"Array is empty\");\n    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"},{"task_id":"HumanEval_36","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir ar ais líon na n-uaireanna a thagann an uimhir 7 i n-uimhreacha iomlána níos lú ná n atá inrochtana le 11 nó 13. \/\/ >>> fizz_buzz(50)\n\/\/ 0\n\/\/ >>> fizz_buzz(78)\n\/\/ 2\n\/\/ >>> fizz_buzz(79)\n\/\/ 3\nfunction fizz_buzz(n: number): number {\n","canonical_solution":"function fizz_buzz(n: number): number {\n    let count = 0;\n\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let numString = i.toString();\n            for (let char of numString) {\n                if (char === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"},{"task_id":"HumanEval_37","nl":"gle_Latn","pl":"ts","prompt":"\/\/i gcás na n-eisínithe comhaimseartha, ach a shocraíodh. \/\/Tá l' comhionann le l sna táscairí neamhghnácha, agus tá a luachanna ag na táscairí páirle comhionann \/\/Glacann an fheidhm seo sraith l agus cuireann sé sraith l' ar ais ar nós go bhfuil \/\/ >>> sort_even([1, 2, 3])\n\/\/ [1, 2, 3]\n\/\/ >>> sort_even([5, 6, 3, 4])\n\/\/ [3, 6, 5, 4]\nfunction sort_even(l: number[]): number[] {\n","canonical_solution":"function sort_even(l: number[]): number[] {\n    const evenIndices: number[] = [];\n    const result: number[] = [...l];\n\n    \/\/ Collect values at even indices\n    for (let i = 0; i < l.length; i += 2) {\n        evenIndices.push(l[i]);\n    }\n\n    \/\/ Sort the collected even indices values\n    evenIndices.sort((a, b) => a - b);\n\n    \/\/ Place the sorted values back in their original even indices\n    for (let i = 0; i < l.length; i += 2) {\n        result[i] = evenIndices.shift()!;\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_even;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n\ntest();"},{"task_id":"HumanEval_39","nl":"gle_Latn","pl":"ts","prompt":"\/\/prime_fib a aisíocann n-ú uimhir go bhfuil uimhir Fibonacci agus tá sé chomh maith leis an príomh. \/\/ >>> prime_fib(1)\n\/\/ 2\n\/\/ >>> prime_fib(2)\n\/\/ 3\n\/\/ >>> prime_fib(3)\n\/\/ 5\n\/\/ >>> prime_fib(4)\n\/\/ 13\n\/\/ >>> prime_fib(5)\n\/\/ 89\nfunction prime_fib(n: number): number {\n","canonical_solution":"function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction* fibonacciGenerator(): Generator<number, void, unknown> {\n    let a = 0, b = 1;\n    while (true) {\n        let current = a;\n        a = b;\n        b = current + b;\n        yield current;\n    }\n}\n\nfunction prime_fib(n: number): number {\n    const fibGen = fibonacciGenerator();\n    let primeFibs: number[] = [];\n    let i = 0;\n    while (primeFibs.length < n) {\n        const fibNum = fibGen.next().value;\n        if (isPrime(fibNum)) {\n            primeFibs.push(fibNum);\n        }\n    }\n    return primeFibs[n - 1];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"},{"task_id":"HumanEval_40","nl":"gle_Latn","pl":"ts","prompt":"\/\/suim go nialas, agus bréagach ar shlí eile. \/\/a aisíocann sé fíor má tá trí eilimint dhifriúla sa tsraith go \/\/glacann triples_sum_to_zero sraith de líon iomlán mar ionchur. \/\/ >>> triples_sum_to_zero([1, 3, 5, 0])\n\/\/ false\n\/\/ >>> triples_sum_to_zero([1, 3, -2, 1])\n\/\/ true\n\/\/ >>> triples_sum_to_zero([1, 2, 3, 7])\n\/\/ false\n\/\/ >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\/\/ true\n\/\/ >>> triples_sum_to_zero([1])\n\/\/ false\nfunction triples_sum_to_zero(l: number[]): boolean {\n","canonical_solution":"function triples_sum_to_zero(l: number[]): boolean {\n    if (l.length < 3) {\n        return false;\n    }\n\n    \/\/ Sort the array\n    l.sort((a, b) => a - b);\n\n    \/\/ Iterate through the array\n    for (let i = 0; i < l.length - 2; i++) {\n        let left = i + 1;\n        let right = l.length - 1;\n\n        \/\/ Use two pointers to find a pair that makes the sum zero with l[i]\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1, 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3, 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\ntest();"},{"task_id":"HumanEval_41","nl":"gle_Latn","pl":"ts","prompt":"\/\/Tá an fheidhm seo ag cur amach líon na gcollúis den sórt sin. \/\/ina threocht amhail is dá mba nach raibh siad bualadh. \/\/Mar sin féin, tá na gluaisteáin go hiomlán láidir agus láidir; mar thoradh air sin, leanann siad ag gluaiseacht \/\/nuair a ghluaiseann carr atá ag bogadh ar chlé go ceart buaileann carr atá ag bogadh ar dheis go dtí an chlé.\/\/gach carr ag gluaiseacht ag an luas céanna.\/\/Tá an dá sheirbhísí carr ag tosú ag a bheith an-fhada ó \/\/Tá n-charr ag tiomáint ó chlé go ceart; ag an am céanna, sraith difriúil de n-charr \/\/Samhlaigh bóthar atá díreach go foirfe líne gan teorainn fada.function car_race_collision(n: number): number {\n","canonical_solution":"function car_race_collision(n: number): number {\n    \/\/ Since the cars move at the same speed and are infinitely strong,\n    \/\/ each pair of a left-to-right car and a right-to-left car will \"collide\" at some point.\n    \/\/ Therefore, every pair of cars from different sets will collide exactly once.\n    \n    \/\/ We need to find the number of such pairs, which is simply n * n.\n    return n * n;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n}\n\ntest();"},{"task_id":"HumanEval_42","nl":"gle_Latn","pl":"ts","prompt":"\/\/Arís sraith le heilimintí a mhéadú le 1. \/\/ >>> incr_list([1, 2, 3])\n\/\/ [2, 3, 4]\n\/\/ >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\/\/ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n","canonical_solution":"function incr_list(l: number[]): number[] {\n    return l.map(num => num + 1);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"},{"task_id":"HumanEval_43","nl":"gle_Latn","pl":"ts","prompt":"\/\/suim go nialas, agus bréagach ar shlí eile. \/\/a aisíocann sé fíor má tá dhá eilimint dhifriúla sa tsraith go \/\/Glacann pairs_sum_to_zero sraith de líon iomlán mar ionchur. \/\/ >>> pairs_sum_to_zero([1, 3, 5, 0])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([1, 3, -2, 1])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([1, 2, 3, 7])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n\/\/ true\n\/\/ >>> pairs_sum_to_zero([1])\n\/\/ false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n","canonical_solution":"function pairs_sum_to_zero(l: number[]): boolean {\n    const seen = new Set<number>();\n\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n\n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);\n}\n\ntest();"},{"task_id":"HumanEval_44","nl":"gle_Latn","pl":"ts","prompt":"\/\/tá uimhreacha bonn níos lú ná 10. \/\/léargas sreang ar ais tar éis an tiontaithe. \/\/Athraigh bunús uimhriúil an uimhir ionchuir x go bunús. \/\/ >>> change_base(8, 3)\n\/\/ \"22\"\n\/\/ >>> change_base(8, 2)\n\/\/ \"1000\"\n\/\/ >>> change_base(7, 2)\n\/\/ \"111\"\nfunction change_base(x: number, base: number): string {\n","canonical_solution":"function change_base(x: number, base: number): string {\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9 inclusive\");\n    }\n    \n    if (x === 0) return \"0\";\n\n    let result: string = \"\";\n    let number: number = x;\n\n    while (number > 0) {\n        const remainder = number % base;\n        result = remainder.toString() + result;\n        number = Math.floor(number \/ base);\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"},{"task_id":"HumanEval_45","nl":"gle_Latn","pl":"ts","prompt":"\/\/Le fadacht taobh agus ard-réitigh a thabhairt do thriantán.\/\/ >>> triangle_area(5, 3)\n\/\/ 7.5\nfunction triangle_area(a: number, h: number): number {\n","canonical_solution":"function triangle_area(a: number, h: number): number {\n    return 0.5 * a * h;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n  assert.deepEqual(candidate(2, 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n}\n\ntest();"},{"task_id":"HumanEval_46","nl":"gle_Latn","pl":"ts","prompt":"\/\/Scríobh feidhm le do thoil chun an n-ú eilimint den ordú uimhreacha fib4 a ríomh go héifeachtach. Ná húsáid athfhillteach. \/\/Tá an t-ábhar seo ag cur le chéile le haghaidh an t-ábhar a úsáidtear chun an t-ábhar a chur le chéile.\/\/fib4(3) -> 0 \/\/fib4 ((2) -> 2 \/\/fib4(1) -> 0 \/\/fib4 ((0) -> 0 \/\/Is é an sreang uimhreacha Fib4 sreang cosúil leis an sreang Fibbonacci a shainmhínítear mar seo a leanas: \/\/ >>> fib4(5)\n\/\/ 4\n\/\/ >>> fib4(6)\n\/\/ 8\n\/\/ >>> fib4(7)\n\/\/ 14\nfunction fib4(n: number): number {\n","canonical_solution":"function fib4(n: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    let fibNumbers = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        const nextFib = fibNumbers[3] + fibNumbers[2] + fibNumbers[1] + fibNumbers[0];\n        fibNumbers.shift();\n        fibNumbers.push(nextFib);\n    }\n    return fibNumbers[3];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n}\n\ntest();"},{"task_id":"HumanEval_47","nl":"gle_Latn","pl":"ts","prompt":"\/\/Teorainn aisghabhála eilimintí sa mhaighnéad l. \/\/ >>> median([3, 1, 2, 4, 5])\n\/\/ 3\n\/\/ >>> median([-10, 4, 6, 1000, 10, 20])\n\/\/ 15.0\nfunction median(l: number[]): number {\n","canonical_solution":"function median(l: number[]): number {\n    const sorted = l.slice().sort((a, b) => a - b);\n    const len = sorted.length;\n    \n    if (len % 2 === 0) {\n        return (sorted[len \/ 2 - 1] + sorted[len \/ 2]) \/ 2;\n    } else {\n        return sorted[Math.floor(len \/ 2)];\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"},{"task_id":"HumanEval_48","nl":"gle_Latn","pl":"ts","prompt":"\/\/Seiceálann sé an bhfuil sraith shraith ar leith ina palindrome \/\/ >>> is_palindrome(\"\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aba\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aaaaa\")\n\/\/ true\n\/\/ >>> is_palindrome(\"zbcd\")\n\/\/ false\nfunction is_palindrome(text: string): boolean {\n","canonical_solution":"function is_palindrome(text: string): boolean {\n    return text === text.split('').reverse().join('');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_49","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir 2^n modulo p ar ais (bíodh a fhios agat faoi uimhreacha).\/\/ >>> modp(3, 5)\n\/\/ 3\n\/\/ >>> modp(1101, 101)\n\/\/ 2\n\/\/ >>> modp(0, 101)\n\/\/ 1\n\/\/ >>> modp(3, 11)\n\/\/ 8\n\/\/ >>> modp(100, 101)\n\/\/ 1\nfunction modp(n: number, p: number): number {\n","canonical_solution":"function modp(n: number, p: number): number {\n    if (n === 0) return 1 % p;\n    let result = 1;\n    let base = 2;\n    \n    while (n > 0) {\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = Math.floor(n \/ 2);\n    }\n    \n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"},{"task_id":"HumanEval_51","nl":"gle_Latn","pl":"ts","prompt":"\/\/remove_vowels is feidhm é a ghlacann sraith agus a thugann sraith ar ais gan vuálaigh. \/\/ >>> remove_vowels(\"\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"abcdef\")\n\/\/ \"bcdf\"\n\/\/ >>> remove_vowels(\"aaaaa\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"aaBAA\")\n\/\/ \"B\"\n\/\/ >>> remove_vowels(\"zbcd\")\n\/\/ \"zbcd\"\nfunction remove_vowels(text: string): string {\n","canonical_solution":"function remove_vowels(text: string): string {\n    return text.replace(\/[aeiouAEIOU]\/g, '');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_vowels;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"abcdef\\nghijklm\"),\"bcdf\\nghjklm\");\n  assert.deepEqual(candidate(\"fedcba\"),\"fdcb\");\n  assert.deepEqual(candidate(\"eeeee\"),\"\");\n  assert.deepEqual(candidate(\"acBAA\"),\"cB\");\n  assert.deepEqual(candidate(\"EcBOO\"),\"cB\");\n  assert.deepEqual(candidate(\"ybcd\"),\"ybcd\");\n}\n\ntest();"},{"task_id":"HumanEval_52","nl":"gle_Latn","pl":"ts","prompt":"\/\/Fill ar ais go fíor má tá na huimhreacha go léir sa mhadra l faoi bhun an tairseach t. \/\/ >>> below_threshold([1, 2, 4, 10], 100)\n\/\/ true\n\/\/ >>> below_threshold([1, 20, 4, 10], 5)\n\/\/ false\nfunction below_threshold(l: number[], t: number): boolean {\n","canonical_solution":"function below_threshold(l: number[], t: number): boolean {\n    return l.every(num => num < t);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_threshold;\n  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);\n  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);\n}\n\ntest();"},{"task_id":"HumanEval_53","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir dhá uimhir x agus y \/\/ >>> add(2, 3)\n\/\/ 5\n\/\/ >>> add(5, 7)\n\/\/ 12\nfunction add(x: number, y: number): number {\n","canonical_solution":"function add(x: number, y: number): number {\n    return x + y;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate(0, 1),1);\n  assert.deepEqual(candidate(1, 0),1);\n  assert.deepEqual(candidate(2, 3),5);\n  assert.deepEqual(candidate(5, 7),12);\n  assert.deepEqual(candidate(7, 5),12);\n}\n\ntest();"},{"task_id":"HumanEval_54","nl":"gle_Latn","pl":"ts","prompt":"\/\/Seiceáil an bhfuil na carachtair chéanna ag dhá fhocal. \/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"abcd\", \"dddddddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"dddddddabc\", \"abcd\")\n\/\/ true\n\/\/ >>> same_chars(\"eabcd\", \"dddddddabc\")\n\/\/ false\n\/\/ >>> same_chars(\"abcd\", \"dddddddabce\")\n\/\/ false\n\/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n\/\/ false\nfunction same_chars(s0: string, s1: string): boolean {\n","canonical_solution":"function same_chars(s0: string, s1: string): boolean {\n    const charSet0: Set<string> = new Set(s0);\n    const charSet1: Set<string> = new Set(s1);\n\n    if (charSet0.size !== charSet1.size) {\n        return false;\n    }\n\n    for (const char of charSet0) {\n        if (!charSet1.has(char)) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\", \"aaccc\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_55","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir an n-ú uimhir Fibonacci ar ais. \/\/ >>> fib(10)\n\/\/ 55\n\/\/ >>> fib(1)\n\/\/ 1\n\/\/ >>> fib(8)\n\/\/ 21\nfunction fib(n: number): number {\n","canonical_solution":"function fib(n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Input should be a positive integer.\");\n    }\n    if (n === 1) return 1;\n    if (n === 2) return 1;\n\n    let a = 1, b = 1;\n    for (let i = 3; i <= n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n\/\/ Example usage:\nconsole.log(fib(10)); \/\/ 55\nconsole.log(fib(1));  \/\/ 1\nconsole.log(fib(8));  \/\/ 21","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n}\n\ntest();"},{"task_id":"HumanEval_56","nl":"gle_Latn","pl":"ts","prompt":"\/\/return true má tá braicéad dúnta comhfhreagrach ag gach braicéad oscailte. \/\/brackets tá sraith de \"<\" agus \">\". \/\/ >>> correct_bracketing(\"<\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"<>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"<<><>>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"><<>\")\n\/\/ false\nfunction correct_bracketing(brackets: string): boolean {\n","canonical_solution":"function correct_bracketing(brackets: string): boolean {\n    let balance = 0;\n    for (let char of brackets) {\n        if (char === '<') {\n            balance++;\n        } else if (char === '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance === 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_57","nl":"gle_Latn","pl":"ts","prompt":"\/\/Fill ar ais go fíor má tá eilimintí sraithe ag méadú nó ag laghdú go monotonically. \/\/ >>> monotonic([1, 2, 4, 20])\n\/\/ true\n\/\/ >>> monotonic([1, 20, 4, 10])\n\/\/ false\n\/\/ >>> monotonic([4, 1, 0, -10])\n\/\/ true\nfunction monotonic(l: number[]): boolean {\n","canonical_solution":"function monotonic(l: number[]): boolean {\n    if (l.length <= 1) return true;\n    \n    let increasing = true;\n    let decreasing = true;\n    \n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) decreasing = false;\n        if (l[i] < l[i - 1]) increasing = false;\n        \n        if (!increasing && !decreasing) return false;\n    }\n    \n    return increasing || decreasing;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"},{"task_id":"HumanEval_58","nl":"gle_Latn","pl":"ts","prompt":"\/\/Deisigh eilimintí coitianta uathúla seolta do dhá shraith. \/\/ >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\/\/ [1, 5, 653]\n\/\/ >>> common([5, 3, 2, 8], [3, 2])\n\/\/ [2, 3]\nfunction common(l1: number[], l2: number[]): number[] {\n","canonical_solution":"function common(l1: number[], l2: number[]): number[] {\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    const commonElements = Array.from(set1).filter(item => set2.has(item));\n    return commonElements.sort((a, b) => a - b);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"},{"task_id":"HumanEval_59","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir an fachtóir príomh is mó de n ar ais. Glac le n > 1 agus ní príomhfhocal é. \/\/ >>> largest_prime_factor(13195)\n\/\/ 29\n\/\/ >>> largest_prime_factor(2048)\n\/\/ 2\nfunction largest_prime_factor(n: number): number {\n","canonical_solution":"function largest_prime_factor(n: number): number {\n    let largestFactor = 1;\n\n    \/\/ Divide n by 2 until it becomes odd\n    while (n % 2 === 0) {\n        largestFactor = 2;\n        n \/= 2;\n    }\n\n    \/\/ Check for odd factors from 3 upwards\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            largestFactor = i;\n            n \/= i;\n        }\n    }\n\n    \/\/ If n becomes a prime number greater than 2\n    if (n > 2) {\n        largestFactor = n;\n    }\n\n    return largestFactor;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"},{"task_id":"HumanEval_60","nl":"gle_Latn","pl":"ts","prompt":"\/\/Is feidhm é sum_to_n a sholann uimhreacha ó 1 go n. \/\/ >>> sum_to_n(30)\n\/\/ 465\n\/\/ >>> sum_to_n(100)\n\/\/ 5050\n\/\/ >>> sum_to_n(5)\n\/\/ 15\n\/\/ >>> sum_to_n(10)\n\/\/ 55\n\/\/ >>> sum_to_n(1)\n\/\/ 1\nfunction sum_to_n(n: number): number {\n","canonical_solution":"function sum_to_n(n: number): number {\n    return n * (n + 1) \/ 2;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(6),21);\n  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n  assert.deepEqual(candidate(100),5050);\n}\n\ntest();"},{"task_id":"HumanEval_61","nl":"gle_Latn","pl":"ts","prompt":"\/\/return true má tá braicéad dúnta comhfhreagrach ag gach braicéad oscailte. \/\/brackets is sraith de \"(\" agus \")\". \/\/ >>> correct_bracketing(\"(\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"()\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"(()())\")\n\/\/ true\n\/\/ >>> correct_bracketing(\")(()\")\n\/\/ false\nfunction correct_bracketing(brackets: string): boolean {\n","canonical_solution":"function correct_bracketing(brackets: string): boolean {\n    let balance = 0;\n\n    for (let char of brackets) {\n        if (char === '(') {\n            balance++;\n        } else if (char === ')') {\n            balance--;\n        }\n\n        \/\/ If balance goes negative, there's a closing bracket without a matching opening one\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    \/\/ If balance is zero, all opening brackets have matching closing brackets\n    return balance === 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_62","nl":"gle_Latn","pl":"ts","prompt":"\/\/Cuir díorthaigh an ilchomhphointe seo ar ais sa fhoirm chéanna. \/\/xs[0] + xs[1] * x + xs[2] * x^2 + .... \/\/Léiríonn xs comhéifeachtaí polynomial. \/\/ >>> derivative([3, 1, 2, 4, 5])\n\/\/ [1, 4, 12, 20]\n\/\/ >>> derivative([1, 2, 3])\n\/\/ [2, 6]\nfunction derivative(xs: number[]): number[] {\n","canonical_solution":"function derivative(xs: number[]): number[] {\n    return xs.slice(1).map((coef, index) => coef * (index + 1));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_63","nl":"gle_Latn","pl":"ts","prompt":"\/\/Scríobh feidhm le do thoil chun an n-ú eilimint den ordú uimhreacha fibfib a ríomh go héifeachtach. \/\/fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). \/\/fibfib ((2) == 1 \/\/fibhfibh ((1) == 0 \/\/fibfib ((0) == 0 \/\/Is é an sreang uimhreacha FibFib sreang cosúil leis an Fibbonacci sequece a shainmhínítear mar seo a leanas: \/\/ >>> fibfib(1)\n\/\/ 0\n\/\/ >>> fibfib(5)\n\/\/ 4\n\/\/ >>> fibfib(8)\n\/\/ 24\nfunction fibfib(n: number): number {\n","canonical_solution":"function fibfib(n: number): number {\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 1;\n\n    let a = 0;\n    let b = 0;\n    let c = 1;\n\n    for (let i = 3; i <= n; i++) {\n        let next = a + b + c;\n        a = b;\n        b = c;\n        c = next;\n    }\n\n    return c;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n}\n\ntest();"},{"task_id":"HumanEval_64","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/vowel, ach amháin nuair a bhíonn sé ag deireadh an fhocail ar leith. \/\/Is iad na huacála sa chás seo 'a', 'e', 'i', 'o', 'u'. Anseo, is é 'y' a \/\/focal mar ionchur agus a thugann ar ais an líon na vowels sa shraith. \/\/Scríobh feidhm vowels_count a ghlacann sraith a léiríonn \/\/ >>> vowels_count(\"abcde\")\n\/\/ 2\n\/\/ >>> vowels_count(\"ACEDY\")\n\/\/ 3\nfunction vowels_count(s: string): number {\n","canonical_solution":"function vowels_count(s: string): number {\n    let count = 0;\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    const lowerCaseString = s.toLowerCase();\n\n    for (let i = 0; i < lowerCaseString.length; i++) {\n        if (vowels.has(lowerCaseString[i])) {\n            count++;\n        }\n        if (i === lowerCaseString.length - 1 && lowerCaseString[i] === 'y') {\n            count++;\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"ACEDY\"),3);\n}\n\ntest();"},{"task_id":"HumanEval_65","nl":"gle_Latn","pl":"ts","prompt":"\/\/Má tá aistriú > líon na n-aicmí, déantar na digiteach ar ais. \/\/agus an toradh a thabhairt ar ais mar shreang. \/\/Siúlóid ciorclach na digiteach an t-ionad iomlán x, a aistriú na digiteach ceart ag aistriú \/\/ >>> circular_shift(12, 1)\n\/\/ \"21\"\n\/\/ >>> circular_shift(12, 2)\n\/\/ \"12\"\nfunction circular_shift(x: number, shift: number): string {\n","canonical_solution":"function circular_shift(x: number, shift: number): string {\n    const strNum = x.toString();\n    const length = strNum.length;\n    if (shift >= length) {\n        return strNum.split('').reverse().join('');\n    }\n    const normalizedShift = shift % length;\n    const splitIndex = length - normalizedShift;\n    return strNum.slice(splitIndex) + strNum.slice(0, splitIndex);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();"},{"task_id":"HumanEval_66","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Códanna ASCII. \/\/Scríobh feidhm a ghlacann sraith sreinge mar ionchur agus a thugann suim na gcarachtair uachtaracha amháin ar ais' \/\/Tasc \/\/ >>> digitSum(\"\")\n\/\/ 0\n\/\/ >>> digitSum(\"abAB\")\n\/\/ 131\n\/\/ >>> digitSum(\"abcCd\")\n\/\/ 67\n\/\/ >>> digitSum(\"helloE\")\n\/\/ 69\n\/\/ >>> digitSum(\"woArBld\")\n\/\/ 131\n\/\/ >>> digitSum(\"aAaaaXa\")\n\/\/ 153\nfunction digitSum(s: string): number {\n","canonical_solution":"function digitSum(s: string): number {\n    let sum = 0;\n    for (const char of s) {\n        if (char >= 'A' && char <= 'Z') {\n            sum += char.charCodeAt(0);\n        }\n    }\n    return sum;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\" How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n}\n\ntest();"},{"task_id":"HumanEval_67","nl":"gle_Latn","pl":"ts","prompt":"\/\/don examble: \/\/sa charr, cuir isteach líon na nglasraí mango sa charr. \/\/na huirlisí agus na huirlisí agus líon iomlán a léiríonn líon iomlán na dtorthaí \/\/Tá sé seo ar an gcineál is mó de na torthaí a bhfuil an líon iomlán de \/\/a dháileadh i gcorcaí torthaí ina bhfuil an córsaí seo \/\/Sa tasc seo, tabharfar sreang duit a léiríonn líon úll agus oráiste \/\/ >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n\/\/ 8\n\/\/ >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n\/\/ 2\n\/\/ >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n\/\/ 95\n\/\/ >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\/\/ 19\nfunction fruit_distribution(s: string, n: number): number {\n","canonical_solution":"function fruit_distribution(s: string, n: number): number {\n    const regex = \/(\\d+) apples and (\\d+) oranges\/;\n    const match = s.match(regex);\n    \n    if (!match) {\n        throw new Error(\"Invalid input format\");\n    }\n    \n    const apples = parseInt(match[1], 10);\n    const oranges = parseInt(match[2], 10);\n    \n    const totalApplesAndOranges = apples + oranges;\n    return n - totalApplesAndOranges;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n}\n\ntest();"},{"task_id":"HumanEval_68","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla 1: \/\/Mura bhfuil aon luachanna pá ann nó má tá an tairbhí ar fáil folamh, cuir [] ar ais. \/\/Ba cheart an nód plucked a thabhairt ar ais i sraith, [small_value, a innéacs], \/\/Má fhaightear go leor nóid leis an luach pá is lú céanna, cuir ar ais an nóid a bhfuil an t-innéacs is lú aige. \/\/Ba cheart go mbeadh an nóid a chuirtear ar an mbarr leis an luach pá is lú. \/\/Is é do tasc a pluck ceann de na nóid agus é a thabhairt ar ais. \/\/\"Ar a dtugtar sraith a léiríonn brainse de chrann a bhfuil nóid iomlán neamh-diúltach \/\/ >>> pluck([4, 2, 3])\n\/\/ [2, 1]\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 2:\n\/\/ >>> pluck([1, 2, 3])\n\/\/ [2, 1]\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 3:\n\/\/ >>> pluck([])\n\/\/ []\n\/\/ Example 4:\n\/\/ >>> pluck([5, 0, 3, 0, 4, 2])\n\/\/ [0, 1]\n\/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n\/\/ so we will choose the first zero, which has the smallest index.\n\/\/ Constraints:\n\/\/ * 1 <= nodes.length <= 10000\n\/\/ * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n","canonical_solution":"function pluck(arr: number[]): number[] {\n    let minEvenValue: number | null = null;\n    let minIndex: number | null = null;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) { \/\/ Check if the number is even\n            if (minEvenValue === null || arr[i] < minEvenValue) {\n                minEvenValue = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n\n    if (minEvenValue !== null && minIndex !== null) {\n        return [minEvenValue, minIndex];\n    } else {\n        return [];\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_69","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Mura bhfuil aon luach den sórt sin ann, déan -1 a thabhairt ar ais. \/\/Is é minicíocht iomlán an líon uaireanta a thagann sé chun cinn sa tsraith. \/\/nialach, agus tá minicíocht níos mó ná nó comhionann le luach an iomláin féin. \/\/Tá tú a thabhairt ar an sreabhadh neamh-folamh de intíreanna dearfacha. Fill ar ais ar an integer is mó atá níos mó ná \/\/ >>> search([4, 1, 2, 2, 3, 1])\n\/\/ 2\n\/\/ >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n\/\/ 3\n\/\/ >>> search([5, 5, 4, 4, 4])\n\/\/ -1\nfunction search(lst: number[]): number {\n","canonical_solution":"function search(lst: number[]): number {\n    const frequencyMap: Map<number, number> = new Map();\n\n    \/\/ Count frequencies of each integer in the array\n    for (const num of lst) {\n        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);\n    }\n\n    let result = -1;\n\n    \/\/ Determine the greatest integer that meets the condition\n    for (const [num, freq] of frequencyMap.entries()) {\n        if (freq >= num && num > result) {\n            result = num;\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_70","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/ansin uasmhéid na n-iontáirimh iomlána atá fágtha, ansin íosmhéid agus mar sin de. \/\/Is é an t-earráid aisteach, nuair a thosaíonn tú leis an luach íosta, \/\/Arís iomlán ar leith, arís a thabhairt ar ais in ord aisteach.\/\/ >>> strange_sort_list([1, 2, 3, 4])\n\/\/ [1, 4, 2, 3]\n\/\/ >>> strange_sort_list([5, 5, 5, 5])\n\/\/ [5, 5, 5, 5]\n\/\/ >>> strange_sort_list([])\n\/\/ []\nfunction strange_sort_list(lst: number[]): number[] {\n","canonical_solution":"function strange_sort_list(lst: number[]): number[] {\n    const sorted = [...lst].sort((a, b) => a - b);\n    const result: number[] = [];\n    let left = 0;\n    let right = sorted.length - 1;\n\n    while (left <= right) {\n        if (left === right) {\n            result.push(sorted[left]);\n        } else {\n            result.push(sorted[left]);\n            result.push(sorted[right]);\n        }\n        left++;\n        right--;\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"},{"task_id":"HumanEval_71","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/ná an tríú taobh. \/\/Déantar trí thaobh trí chearnóg bailí nuair a bhíonn suim dhá thaobh ar bith níos mó .\/\/Seachas sin, filleadh ar -1 \/\/an triantán cruinnithe go 2 phointe deisceach má tá na trí thaobh de thriantán bailí. \/\/Ag tabhairt na fadanna de na trí thaobh de thriantán. Fill ar ais ar an limistéar de \/\/ >>> triangle_area(3, 4, 5)\n\/\/ 6.0\n\/\/ >>> triangle_area(1, 2, 10)\n\/\/ -1\nfunction triangle_area(a: number, b: number, c: number): number {\n","canonical_solution":"function triangle_area(a: number, b: number, c: number): number {\n    \/\/ Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        \/\/ Calculate the semi-perimeter\n        const s = (a + b + c) \/ 2;\n        \/\/ Calculate the area using Heron's formula\n        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \/\/ Return the area rounded to 2 decimal places\n        return Math.round(area * 100) \/ 100;\n    }\n    \/\/ Return -1 if the sides do not form a valid triangle\n    return -1;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4, 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4, 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1, 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2, 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2, 2, 10),-1);\n}\n\ntest();"},{"task_id":"HumanEval_72","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/Beidh an réad q ag eitilt má tá sé cothrom (is sraith palindromic é) agus má tá suim a chuid eilimintí níos lú ná nó comhionann leis an uasmhéid is féidir a w.\/\/Scríobh feidhm a thugann fíor ar ais má eitleann an réad q, agus bréagach ar shlí eile. \/\/ >>> will_it_fly([1, 2], 5)\n\/\/ false\n\/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\/\/ >>> will_it_fly([3, 2, 3], 1)\n\/\/ false\n\/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\/\/ >>> will_it_fly([3, 2, 3], 9)\n\/\/ true\n\/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\/\/ >>> will_it_fly([3], 5)\n\/\/ true\n\/\/ # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n","canonical_solution":"function will_it_fly(q: number[], w: number): boolean {\n    \/\/ Check if the array is balanced (palindromic)\n    const isBalanced = (arr: number[]): boolean => {\n        for (let i = 0; i < arr.length \/ 2; i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    \/\/ Calculate the sum of the elements in the array\n    const sumElements = q.reduce((acc, curr) => acc + curr, 0);\n\n    \/\/ Check both conditions: balanced array and sum less than or equal to max weight\n    return isBalanced(q) && sumElements <= w;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"},{"task_id":"HumanEval_73","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Is féidir leat aon eilimint a athrú go haon eilimint eile le hathrú amháin. \/\/Ní mór é a athrú chun an sraith a dhéanamh palindromic. Is sraith é sraith palindromic go \/\/Ar a dtugtar sraith de na hionad iomlán, faigh an líon íosta eilimintí a \/\/ >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\/\/ 4\n\/\/ >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n\/\/ 1\n\/\/ >>> smallest_change([1, 2, 3, 2, 1])\n\/\/ 0\nfunction smallest_change(arr: number[]): number {\n","canonical_solution":"function smallest_change(arr: number[]): number {\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left < right) {\n        if (arr[left] !== arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();"},{"task_id":"HumanEval_74","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí \/\/má tá an uimhir chárta céanna ag an dá shraith, cuir an chéad shraith ar ais.\/\/líon iomlán na gcártaí i ngach sreang den array níos lú ná an array eile. \/\/Scríobh feidhm a ghlacann le dhá shraith shreangáin agus a thugann ar ais an shraith a bhfuil \/\/ >>> total_match([], [])\n\/\/ []\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\/\/ [\"hI\", \"Hi\"]\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n\/\/ [\"hi\", \"admin\"]\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n\/\/ [\"hI\", \"hi\", \"hi\"]\n\/\/ >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n\/\/ [\"4\"]\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n","canonical_solution":"function total_match(lst1: string[], lst2: string[]): string[] {\n    const getTotalChars = (arr: string[]): number => {\n        return arr.reduce((acc, str) => acc + str.length, 0);\n    };\n\n    const totalChars1 = getTotalChars(lst1);\n    const totalChars2 = getTotalChars(lst2);\n\n    if (totalChars1 < totalChars2) {\n        return lst1;\n    } else if (totalChars2 < totalChars1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"},{"task_id":"HumanEval_75","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/Ag a fhios go bhfuil (a) níos lú ná 100. \/\/agus bréagach ar shlí eile. \/\/Scríobh feidhm a thugann fíor má tá an uimhir a tugadh mar iolrú 3 n-uimhreacha príomhúla \/\/ >>> is_multiply_prime(30)\n\/\/ true\n\/\/ 30 = 2 * 3 * 5\nfunction is_multiply_prime(a: number): boolean {\n","canonical_solution":"function is_multiply_prime(a: number): boolean {\n    \/\/ Helper function to check if a number is prime\n    function isPrime(n: number): boolean {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 === 0 || n % 3 === 0) return false;\n        for (let i = 5; i * i <= n; i += 6) {\n            if (n % i === 0 || n % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    \/\/ Generate a list of primes less than 100\n    const primes: number[] = [];\n    for (let i = 2; i < 100; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n\n    \/\/ Check if a can be expressed as a product of 3 distinct primes\n    const primeCount = primes.length;\n    for (let i = 0; i < primeCount - 2; i++) {\n        for (let j = i + 1; j < primeCount - 1; j++) {\n            for (let k = j + 1; k < primeCount; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"},{"task_id":"HumanEval_76","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Is cumhacht simplí de n é x má n**int=x \/\/cumhacht n agus bréagach i gcásanna eile. \/\/Is é do tasc a scríobh feidhm a thugann fíor má tá uimhir x simplí \/\/ >>> is_simple_power(1, 4)\n\/\/ true\n\/\/ >>> is_simple_power(2, 2)\n\/\/ true\n\/\/ >>> is_simple_power(8, 2)\n\/\/ true\n\/\/ >>> is_simple_power(3, 2)\n\/\/ false\n\/\/ >>> is_simple_power(3, 1)\n\/\/ false\n\/\/ >>> is_simple_power(5, 3)\n\/\/ false\nfunction is_simple_power(x: number, n: number): boolean {\n","canonical_solution":"function is_simple_power(x: number, n: number): boolean {\n    if (x < 1 || n < 1) return false;\n    if (x === 1) return true; \/\/ n^0 is 1 for any n\n\n    let power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    \n    return power === x;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"},{"task_id":"HumanEval_77","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Nóta: is féidir leat a mheas go bhfuil an ionchur bailí i gcónaí. \/\/má tá an ingeger seo ina chiúb de roinnt uimhir iomláin. \/\/Scríobh feidhm a ghlacann le hidirmheánach a agus a thugann fíor ar ais .\/\/ >>> iscube(1)\n\/\/ true\n\/\/ >>> iscube(2)\n\/\/ false\n\/\/ >>> iscube(-1)\n\/\/ true\n\/\/ >>> iscube(64)\n\/\/ true\n\/\/ >>> iscube(0)\n\/\/ true\n\/\/ >>> iscube(180)\n\/\/ false\nfunction iscube(a: number): boolean {\n","canonical_solution":"function iscube(a: number): boolean {\n    \/\/ Calculate the cube root of the absolute value of a\n    const cubeRoot = Math.cbrt(Math.abs(a));\n    \/\/ Check if the cube root is an integer\n    return cubeRoot === Math.round(cubeRoot);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"},{"task_id":"HumanEval_78","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/agus tá na siombailí A,B,C,D,E,F i gcónaí i gcaipitil mhóra. \/\/Nóta: is féidir leat a ghlacadh go bhfuil an ionchur i gcónaí ceart nó earra folamh, \/\/B (= déagmhír 11), D (= déagmhír 13). \/\/Mar sin ní mór duit a chinneadh ar roinnt de na digits seo a leanas: 2, 3, 5, 7, \/\/Is iad na huimhreacha príomha 2, 3, 5, 7, 11, 13, 17,... \/\/Is iad na huimhreacha heicdeagósacha 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \/\/níos mó ná 1 nach táirge de dhá uimhir nádúrtha níos lú é). \/\/digits atá primes (príomh-uimhir, nó príomh, is uimhir nádúrtha \/\/uimhir heicseachadóir mar shraith agus comhaontaíonn sé líon na n-uimhreacha heicseachadóir \/\/Tá tú a bheith tasked a scríobh feidhm a fhaigheann \/\/ >>> hex_key(\"AB\")\n\/\/ 1\n\/\/ >>> hex_key(\"1077E\")\n\/\/ 2\n\/\/ >>> hex_key(\"ABED1A33\")\n\/\/ 4\n\/\/ >>> hex_key(\"123456789ABCDEF0\")\n\/\/ 6\n\/\/ >>> hex_key(\"2020\")\n\/\/ 2\nfunction hex_key(num: string): number {\n","canonical_solution":"function hex_key(num: string): number {\n    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);\n    let count = 0;\n\n    for (let digit of num) {\n        if (primeHexDigits.has(digit)) {\n            count++;\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"},{"task_id":"HumanEval_79","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Tá na carachtair bhreise ann chun cuidiú leis an bhformáid. \/\/Beidh cúpla carachtar breise 'db' ag tús agus ag deireadh an shreang. \/\/Beidh gach carachtar sa shreang '0' nó '1'.\/\/formáid dhánach. Ba cheart don fheidhm sreang a thabhairt ar ais, agus gach carachtar a léiríonn dhánach \/\/Tabharfar uimhir duit i bhfoirm dheichiméil agus is é do tasc é a thiontú go \/\/ >>> decimal_to_binary(15)\n\/\/ \"db1111db\"\n\/\/ >>> decimal_to_binary(32)\n\/\/ \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n","canonical_solution":"function decimal_to_binary(decimal: number): string {\n    const binaryString = decimal.toString(2);\n    return `db${binaryString}db`;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"},{"task_id":"HumanEval_80","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Tá sreang haptaí má tá a fhad 3 ar a laghad agus má tá gach 3 litir as a chéile ar leithligh \/\/Is é do tasc a sheiceáil má tá an sreang hapts nó nach bhfuil. \/\/Tugtar sraith s duit. \/\/ >>> is_happy(\"a\")\n\/\/ false\n\/\/ >>> is_happy(\"aa\")\n\/\/ false\n\/\/ >>> is_happy(\"abcd\")\n\/\/ true\n\/\/ >>> is_happy(\"aabb\")\n\/\/ false\n\/\/ >>> is_happy(\"adb\")\n\/\/ true\n\/\/ >>> is_happy(\"xyy\")\n\/\/ false\nfunction is_happy(s: string): boolean {\n","canonical_solution":"function is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n\n    for (let i = 0; i <= s.length - 3; i++) {\n        const set = new Set(s.substring(i, i + 3));\n        if (set.size !== 3) {\n            return false;\n        }\n    }\n    \n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_81","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/0.0 E \/\/> 0.0 D- \/\/> 0.7 D \/\/> 1.0 D+ \/\/> 1.3 C- \/\/> 1.7 C \/\/> 2.0 C+ \/\/> 2.3 B- \/\/> 2.7 B \/\/> 3.0 B+ \/\/> 3.3 A- \/\/> 3.7 A \/\/4.0 A+ \/\/GPA. Grád Litreacha.\/\/feidhm a fhéadfaidh sraith de ghrád litreacha a aschur ag baint úsáide as an tábla seo a leanas: \/\/Tá sé a thug tú sraith de GPAanna do roinnt mic léinn agus tá tú a scríobh .\/\/Is é an t-aon fhadhb ná, tá an cód a d'úsáid sí chun grádú a chailleadh.\/\/Tá an múinteoir ag déanamh a halgartaim féin le haghaidh grádú. \/\/Tá sé an tseachtain dheireanach den séimeastar agus tá an múinteoir a thabhairt ar na gráid \/\/ >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\/\/ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n","canonical_solution":"function numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return \"A+\";\n        if (gpa > 3.7) return \"A\";\n        if (gpa > 3.3) return \"A-\";\n        if (gpa > 3.0) return \"B+\";\n        if (gpa > 2.7) return \"B\";\n        if (gpa > 2.3) return \"B-\";\n        if (gpa > 2.0) return \"C+\";\n        if (gpa > 1.7) return \"C\";\n        if (gpa > 1.3) return \"C-\";\n        if (gpa > 1.0) return \"D+\";\n        if (gpa > 0.7) return \"D\";\n        if (gpa > 0.0) return \"D-\";\n        return \"E\";\n    });\n}\n\n\/\/ Example usage:\n\/\/ console.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); \/\/ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"},{"task_id":"HumanEval_82","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí \/\/Is uimhir phraiticiúil é length nó bréagach é ar shlí eile \/\/Scríobh feidhm a ghlacann le sraith shraith agus a thugann fíor ar ais má tá an sraith shraith \/\/ >>> prime_length(\"Hello\")\n\/\/ true\n\/\/ >>> prime_length(\"abcdcba\")\n\/\/ true\n\/\/ >>> prime_length(\"kittens\")\n\/\/ true\n\/\/ >>> prime_length(\"orange\")\n\/\/ false\nfunction prime_length(string: string): boolean {\n","canonical_solution":"function prime_length(string: string): boolean {\n    const length = string.length;\n\n    if (length < 2) return false;\n\n    for (let i = 2; i * i <= length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    \n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_length;\n  assert.deepEqual(candidate(\"Hello\"),true);\n  assert.deepEqual(candidate(\"abcdcba\"),true);\n  assert.deepEqual(candidate(\"kittens\"),true);\n  assert.deepEqual(candidate(\"orange\"),false);\n  assert.deepEqual(candidate(\"wow\"),true);\n  assert.deepEqual(candidate(\"world\"),true);\n  assert.deepEqual(candidate(\"MadaM\"),true);\n  assert.deepEqual(candidate(\"Wow\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"HI\"),true);\n  assert.deepEqual(candidate(\"go\"),true);\n  assert.deepEqual(candidate(\"gogo\"),false);\n  assert.deepEqual(candidate(\"aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"Madam\"),true);\n  assert.deepEqual(candidate(\"M\"),false);\n  assert.deepEqual(candidate(\"0\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_83","nl":"gle_Latn","pl":"ts","prompt":"\/\/ionchasacha a thosaíonn nó a chríochnaíonn le 1. \/\/Ag tabhairt iomlán-uimhreacha dearfacha n, cuir an líon na n-sifréanna ar ais function starts_one_ends(n: number): number {\n","canonical_solution":"function starts_one_ends(n: number): number {\n    if (n === 1) {\n        return 1; \/\/ The number '1' is the only 1-digit number starting or ending with '1'\n    }\n\n    const totalNumbers = Math.pow(10, n - 1); \/\/ Total n-digit numbers starting with any digit from 1 to 9\n    const startingWithOne = Math.pow(10, n - 1); \/\/ The n-digit numbers starting with '1'\n    const endingWithOne = Math.pow(10, n - 1); \/\/ The n-digit numbers ending with '1'\n    const startingAndEndingWithOne = Math.pow(10, n - 2); \/\/ The n-digit numbers starting and ending with '1' \n\n    \/\/ To find numbers that start or end with 1, add those starting with 1 \n    \/\/ and those ending with 1, then subtract the overlap (those both starting and ending with 1).\n    return startingWithOne + endingWithOne - startingAndEndingWithOne;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n}\n\ntest();"},{"task_id":"HumanEval_84","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla \/\/Ag tabhairt iomlán-uimhreacha dearfacha N, cuir suim iomlán a dhigití ar ais i mbinéar. \/\/ >>> solve(1000)\n\/\/ \"1\"\n\/\/ >>> solve(150)\n\/\/ \"110\"\n\/\/ >>> solve(147)\n\/\/ \"1100\"\n\/\/ Variables:\n\/\/ @N integer\n\/\/ Constraints: 0 ≤ N ≤ 10000.\n\/\/ Output:\n\/\/ a string of binary number\nfunction solve(N: number): string {\n","canonical_solution":"function solve(N: number): string {\n    let sumOfDigits = 0;\n    while (N > 0) {\n        sumOfDigits += N % 10;\n        N = Math.floor(N \/ 10);\n    }\n    return sumOfDigits.toString(2);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"},{"task_id":"HumanEval_85","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Ar mhaithe le sraith neamh-folamh de líon iomlán, cuir leis na heilimintí pá atá ag innéacsanna gan chontae .. \/\/ >>> add([4, 2, 6, 7])\n\/\/ 2\nfunction add(lst: number[]): number {\n","canonical_solution":"function add(lst: number[]): number {\n    return lst.reduce((sum, num, index) => {\n        if (index % 2 === 1 && num % 2 === 0) {\n            return sum + num;\n        }\n        return sum;\n    }, 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"},{"task_id":"HumanEval_86","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Nóta: Ba cheart duit ord na bhfocal agus na spásanna folamh sa abairt a choinneáil. \/\/ord ardú bunaithe ar luach ascii. \/\/cuirtear focal nua ina bhfuil na carachtair go léir socraithe i \/\/Is sraith ordú de shreang, shreang ina bhfuil gach focal (each a scaradh le spás) \/\/Scríobh feidhm a ghlacann sraith agus a thugann leagan ordáilte de. \/\/ >>> anti_shuffle(\"Hi\")\n\/\/ \"Hi\"\n\/\/ >>> anti_shuffle(\"hello\")\n\/\/ \"ehllo\"\n\/\/ >>> anti_shuffle(\"Hello World!!!\")\n\/\/ \"Hello !!!Wdlor\"\nfunction anti_shuffle(s: string): string {\n","canonical_solution":"function anti_shuffle(s: string): string {\n  return s.split(' ').map(word =>\n    word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')\n  ).join(' ');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"},{"task_id":"HumanEval_87","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Chomh maith leis sin, ordú comhordanáidí an tsraith de réir colún in ord ag titim. \/\/Déan comhordanáidí a shocrú ar dtús de réir línte in ord ardú. \/\/tá comhordan - (réim, colúin) ag gach sraith, ag tosú le 0. \/\/agus array arrays a thabhairt ar ais, [(x1, y1), (x2, y2) ...] mar sin go \/\/Ar an ábhar lst, agus iomláine x, a fháil iomláine x sa tsraith, \/\/Féadfaidh líon difriúil colún a bheith i ngach líne. \/\/atá cosúil le mátrix, áfach, murab ionann agus mátraí, \/\/Tugtar sonraí 2 thomhais duit, mar shraith neadaithe, \/\/ >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n\/\/ [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\/\/ >>> get_row([], 1)\n\/\/ []\n\/\/ >>> get_row([[], [1], [1, 2, 3]], 3)\n\/\/ [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][] {\n","canonical_solution":"function get_row(lst: number[][], x: number): [number, number][] {\n    const coordinates: [number, number][] = [];\n\n    \/\/ Traverse the data matrix\n    lst.forEach((row, rowIndex) => {\n        row.forEach((value, colIndex) => {\n            if (value === x) {\n                coordinates.push([rowIndex, colIndex]);\n            }\n        });\n    });\n\n    \/\/ Sort the coordinates\n    coordinates.sort(([row1, col1], [row2, col2]) => {\n        if (row1 === row2) {\n            \/\/ Sort by columns in descending order\n            return col2 - col1;\n        }\n        \/\/ Sort by rows in ascending order\n        return row1 - row2;\n    });\n\n    return coordinates;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"},{"task_id":"HumanEval_88","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/* ná athraigh an tsraith a tugadh. \/\/Nóta: \/\/nó é a shocrú in ord ag titim má tá an suim ((first index value, last index value) fiú. \/\/déanfaidh tú an tsraith a chuirtear ar fáil a shocrú in ord ardú má tá an suim ((first index value, last index value) gan chomhionannas, \/\/Ar mhaithe le sraith de na hionad iomlán neamh-diúltach, a thabhairt ar ais cots an sraith a tugadh tar éis a ordú, \/\/ >>> sort_array([])\n\/\/ []\n\/\/ >>> sort_array([5])\n\/\/ [5]\n\/\/ >>> sort_array([2, 4, 3, 0, 1, 5])\n\/\/ [0, 1, 2, 3, 4, 5]\n\/\/ >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n\/\/ [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]): number[] {\n","canonical_solution":"function sort_array(array: number[]): number[] {\n    if (array.length === 0) {\n        return [];\n    }\n\n    const firstValue = array[0];\n    const lastValue = array[array.length - 1];\n    const sum = firstValue + lastValue;\n\n    const sortedArray = [...array].sort((a, b) => a - b);\n\n    if (sum % 2 === 0) {\n        return sortedArray.reverse();\n    } else {\n        return sortedArray;\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"},{"task_id":"HumanEval_89","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/athrú síos trí dhá iolrú go dhá áit. \/\/Ba cheart an aibítir a rothlú ar bhealach a fhágann go bhfuil na litreacha \/\/cuireann sé sreang criptithe ar ais leis an aibítir á rothlú. \/\/Cliceáil ar fheidhm a thógann sraith mar argóint agus \/\/ >>> encrypt(\"hi\")\n\/\/ \"lm\"\n\/\/ >>> encrypt(\"asdfghjkl\")\n\/\/ \"ewhjklnop\"\n\/\/ >>> encrypt(\"gf\")\n\/\/ \"kj\"\n\/\/ >>> encrypt(\"et\")\n\/\/ \"ix\"\nfunction encrypt(s: string): string {\n","canonical_solution":"function encrypt(s: string): string {\n    const shift = 2 * 2; \/\/ Shift by 4 places\n    const alphabetSize = 26;\n    \n    return s.split('').map(char => {\n        const charCode = char.charCodeAt(0);\n        \n        \/\/ Check if the character is a lowercase letter\n        if (charCode >= 97 && charCode <= 122) {\n            let newCharCode = charCode + shift;\n            \n            \/\/ Wrap around if it goes past 'z'\n            if (newCharCode > 122) {\n                newCharCode = (newCharCode - 97) % alphabetSize + 97;\n            }\n            \n            return String.fromCharCode(newCharCode);\n        }\n\n        \/\/ Return the character unchanged if it's not a lowercase letter\n        return char;\n    }).join('');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();"},{"task_id":"HumanEval_90","nl":"gle_Latn","pl":"ts","prompt":"\/\/Fill ar ais undefined mura bhfuil aon eilimint den sórt sin ann. \/\/Scríobh feidhm next_smallest ({}) a thugann ar ais an dara eilimint is lú den earráid. \/\/Tá tú a thabhairt ar an sraith de na hionadóirí.\/\/ >>> next_smallest([1, 2, 3, 4, 5])\n\/\/ 2\n\/\/ >>> next_smallest([5, 1, 4, 3, 2])\n\/\/ 2\n\/\/ >>> next_smallest([])\n\/\/ undefined\n\/\/ >>> next_smallest([1, 1])\n\/\/ undefined\nfunction next_smallest(lst: number[]): number | undefined {\n","canonical_solution":"function next_smallest(lst: number[]): number | undefined {\n    if (lst.length < 2) {\n        return undefined;\n    }\n    \n    let first: number | undefined = undefined;\n    let second: number | undefined = undefined;\n    \n    for (let num of lst) {\n        if (first === undefined || num < first) {\n            second = first;\n            first = num;\n        } else if (num > first && (second === undefined || num < second)) {\n            second = num;\n        }\n    }\n\n    return second;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);\n}\n\ntest();"},{"task_id":"HumanEval_91","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Tá '.', '?' nó '!' ag teorainn na bpreasaí. \/\/Is é an t-easpa suime abairt a thosaíonn leis an bhfocal \"I\".\/\/Beidh tú a thabhairt sreang de na focail, agus do tasc a chomhaireamh an líon \/\/ >>> is_bored(\"Hello world\")\n\/\/ 0\n\/\/ >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\/\/ 1\nfunction is_bored(S: string): number {\n","canonical_solution":"function is_bored(S: string): number {\n    \/\/ Split the string into sentences using '.', '?' or '!' as delimiters\n    const sentences = S.split(\/[.!?]\/);\n\n    \/\/ Filter sentences that start with \"I\" and count them\n    const boredomCount = sentences.filter(sentence => sentence.trim().startsWith('I')).length;\n\n    return boredomCount;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a walk\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_92","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí \/\/Deisíonn sé bréagach i gcásanna eile. \/\/Tugann sé fíor ar ais má tá ceann de na huimhreacha comhionann le suim an dá cheann eile, agus má tá na huimhreacha go léir ina n-intéir. \/\/Cruthaigh feidhm a ghlacann 3 uimhir. \/\/ >>> any_int(5, 2, 7)\n\/\/ true\n\/\/ >>> any_int(3, 2, 2)\n\/\/ false\n\/\/ >>> any_int(3, -2, 1)\n\/\/ true\n\/\/ >>> any_int(3.6, -2.2, 2)\n\/\/ false\nfunction any_int(x: number, y: number, z: number): boolean {\n","canonical_solution":"function any_int(x: number, y: number, z: number): boolean {\n    \/\/ Check if all numbers are integers\n    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n        return false;\n    }\n    \/\/ Check if one of the numbers is the sum of the other two\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"},{"task_id":"HumanEval_93","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Ní ghlacfaidh sé ach le litreacha. \/\/vowel sa aibítir Béarla. \/\/an teachtaireacht leis an litir a thagann 2 áit os comhair sin \/\/ar bhealach go swaps sé cás de gach litir, a chur in ionad gach vowels i \/\/Scríobh feidhm a ghlacann teachtaireacht, agus a chódáil i a leithéid de \/\/ >>> encode(\"test\")\n\/\/ \"TGST\"\n\/\/ >>> encode(\"This is a message\")\n\/\/ \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n","canonical_solution":"function encode(message: string): string {\n    const swapCase = (char: string): string => {\n        if (char === char.toLowerCase()) {\n            return char.toUpperCase();\n        } else {\n            return char.toLowerCase();\n        }\n    };\n\n    const replaceVowel = (char: string): string => {\n        const vowels = 'aeiou';\n        const nextVowels = 'cgkqw';\n        const index = vowels.indexOf(char.toLowerCase());\n        if (index !== -1) {\n            return char === char.toLowerCase() \n                ? nextVowels[index] \n                : nextVowels[index].toUpperCase();\n        }\n        return char;\n    };\n\n    return message\n        .split('')\n        .map(char => swapCase(replaceVowel(char)))\n        .join('');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"},{"task_id":"HumanEval_94","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Ní mór duit a fháil ar an luach príomha is mó agus ar ais an suim dá dhigití. \/\/Tá tú a thabhairt ar an sraith de na hionadóirí.\/\/ >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\/\/ 10\n\/\/ >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\/\/ 25\n\/\/ >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\/\/ 13\n\/\/ >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n\/\/ 11\n\/\/ >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n\/\/ 3\n\/\/ >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n\/\/ 7\nfunction skjkasdkd(lst: number[]): number {\n","canonical_solution":"function isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction sumOfDigits(n: number): number {\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n \/ 10);\n    }\n    return sum;\n}\n\nfunction skjkasdkd(lst: number[]): number {\n    let maxPrime = -1;\n\n    for (const num of lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n\n    return maxPrime === -1 ? 0 : sumOfDigits(maxPrime);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\ntest();"},{"task_id":"HumanEval_95","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Ba chóir go dtiocfadh an fheidhm ar ais bréagach má tá an réad ar fáil folamh. \/\/case nó tá na eochair go léir ina shreangáin i gcás mór, eile filleadh ar bréagach. \/\/Ag tabhairt réad, filleadh fíor má tá gach eochair sreangaí i níos ísle \/\/ >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n\/\/ true\n\/\/ >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n\/\/ true\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n","canonical_solution":"function check_dict_case(dict: { [key: string]: string }): boolean {\n    const keys = Object.keys(dict);\n    if (keys.length === 0) return false;\n\n    const allLowerCase = keys.every(key => key === key.toLowerCase());\n    const allUpperCase = keys.every(key => key === key.toUpperCase());\n\n    return allLowerCase || allUpperCase;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n}\n\ntest();"},{"task_id":"HumanEval_96","nl":"gle_Latn","pl":"ts","prompt":"\/\/mar shampla: \/\/líon iomlán atá ina n-uimhreacha príomh agus níos lú ná n. \/\/Feidhm a chur i bhfeidhm a ghlacann le hionad iomlán neamh-diúltach agus a thugann sraith den chéad n ar ais \/\/ >>> count_up_to(5)\n\/\/ [2, 3]\n\/\/ >>> count_up_to(11)\n\/\/ [2, 3, 5, 7]\n\/\/ >>> count_up_to(0)\n\/\/ []\n\/\/ >>> count_up_to(20)\n\/\/ [2, 3, 5, 7, 11, 13, 17, 19]\n\/\/ >>> count_up_to(1)\n\/\/ []\n\/\/ >>> count_up_to(18)\n\/\/ [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n: number): number[] {\n","canonical_solution":"function count_up_to(n: number): number[] {\n    function isPrime(num: number): boolean {\n        if (num < 2) return false;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    const primes: number[] = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n\n    return primes;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_up_to;\n  assert.deepEqual(candidate(5),[2, 3]);\n  assert.deepEqual(candidate(6),[2, 3, 5]);\n  assert.deepEqual(candidate(7),[2, 3, 5]);\n  assert.deepEqual(candidate(10),[2, 3, 5, 7]);\n  assert.deepEqual(candidate(0),[]);\n  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);\n  assert.deepEqual(candidate(1),[]);\n  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n\ntest();"},{"task_id":"HumanEval_97","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Glac leis go bhfuil an ionchur bailí i gcónaí. \/\/an táirge a n-aimhreacha aonad. \/\/Críochnaigh an fheidhm a thógann dhá uimhir iomlán agus a thugann ar ais \/\/ >>> multiply(148, 412)\n\/\/ 16\n\/\/ >>> multiply(19, 28)\n\/\/ 72\n\/\/ >>> multiply(2020, 1851)\n\/\/ 0\n\/\/ >>> multiply(14, -15)\n\/\/ 20\nfunction multiply(a: number, b: number): number {\n","canonical_solution":"function multiply(a: number, b: number): number {\n    const unitDigitA = Math.abs(a) % 10;\n    const unitDigitB = Math.abs(b) % 10;\n    return unitDigitA * unitDigitB;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();"},{"task_id":"HumanEval_98","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Le snáithín a thabhairt, déan líon na vuálach mhóra a chomhaireamh i n-ínseacha pá. \/\/ >>> count_upper(\"aBCdEf\")\n\/\/ 1\n\/\/ >>> count_upper(\"abcdefg\")\n\/\/ 0\n\/\/ >>> count_upper(\"dBBE\")\n\/\/ 0\nfunction count_upper(s: string): number {\n","canonical_solution":"function count_upper(s: string): number {\n    const uppercaseVowels = new Set(['A', 'E', 'I', 'O', 'U']);\n    let count = 0;\n    \n    for (let i = 0; i < s.length; i += 2) {\n        if (uppercaseVowels.has(s[i])) {\n            count++;\n        }\n    }\n    \n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"},{"task_id":"HumanEval_99","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí \/\/ó dhá líon iomlán, a thiomáint ar shiúl ó nialas.\/\/agus a aisíocann an líon iomlán is gaire dó. Má tá an líon equidistant \/\/Funcún a chruthú a ghlacann luach (string) a léiríonn uimhir \/\/ >>> closest_integer(\"10\")\n\/\/ 10\n\/\/ >>> closest_integer(\"15.3\")\n\/\/ 15\n\/\/ Note:\n\/\/ Rounding away from zero means that if the given number is equidistant\n\/\/ from two integers, the one you should return is the one that is the\n\/\/ farthest from zero. For example closest_integer(\"14.5\") should\n\/\/ return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n","canonical_solution":"function closest_integer(value: string): number {\n  const num = parseFloat(value);\n  if (num > 0) {\n    return Math.floor(num + 0.5);\n  } else {\n    return Math.ceil(num - 0.5);\n  }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_100","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/i léiríonn líon na gcloch sa leibhéal (i+1). \/\/Cuirfidh sé líon na gcloch i ngach leibhéal i sraith, áit a bhfuil eilimint ag innéacs \/\/- an chéad uimhir chomhair má tá n comhar. \/\/- an chéad uimhir gan chomhréireacht eile má tá n gan chomhréireacht. \/\/Is é líon na gcloch sa chéad leibhéal eile: \/\/Tá n chloch sa chéad leibhéal. \/\/Ar an ábhar sin, tá sé riachtanach go mbeadh an t-am ar fad a chaithfear a chur ar an gcúpla de na leibhéil n de na clocha.\/\/ >>> make_a_pile(3)\n\/\/ [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\n","canonical_solution":"function make_a_pile(n: number): number[] {\n    const result: number[] = [];\n    let currentStones = n;\n    for (let i = 0; i < n; i++) {\n        result.push(currentStones);\n        if (currentStones % 2 === 0) {\n            currentStones += 2; \/\/ next even number\n        } else {\n            currentStones += 2; \/\/ next odd number\n        }\n    }\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();"},{"task_id":"HumanEval_101","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/chun an sreang a roinnt ina focail agus sraith de na focail a thabhairt ar ais. \/\/Tabharfar sreang focal duit a bheidh scartha le coimhde nó le spásanna. Is é do thasc \/\/ >>> words_string(\"Hi, my name is John\")\n\/\/ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\/\/ >>> words_string(\"One, two, three, four, five, six\")\n\/\/ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s: string): string[] {\n","canonical_solution":"function words_string(s: string): string[] {\n    return s.split(\/[\\s,]+\/).filter(word => word.length > 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]);\n}\n\ntest();"},{"task_id":"HumanEval_102","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/níl aon uimhir den sórt sin, ansin ba chóir an fheidhm a thabhairt ar ais -1.\/\/is mó uimhir iomlán fiú atá sa raon [x, y] san áireamh. Má \/\/Glacann an fheidhm seo dhá uimhir dhearfach x agus y agus déanann sí an \/\/ >>> choose_num(12, 15)\n\/\/ 14\n\/\/ >>> choose_num(13, 12)\n\/\/ -1\nfunction choose_num(x: number, y: number): number {\n","canonical_solution":"function choose_num(x: number, y: number): number {\n    \/\/ Ensure x is less than or equal to y for proper range searching\n    if (x > y) {\n        [x, y] = [y, x];\n    }\n    \n    \/\/ Start looking from the upper bound of the range\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n    \n    \/\/ If no even number is found in the range\n    return -1;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6, 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7, 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();"},{"task_id":"HumanEval_103","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/Má tá n níos mó ná m, filleadh ar -1. \/\/Cuardaigh an freagra go dtí an líon iomlán is gaire agus é a thiontú go dénártha.\/\/meán na n-ionad iomlán ó n go m (lena n agus m san áireamh). \/\/Tá tú dhá intíre dearfacha n agus m, agus is é do tasc a ríomh an \/\/ >>> rounded_avg(1, 5)\n\/\/ \"0b11\"\n\/\/ >>> rounded_avg(7, 5)\n\/\/ -1\n\/\/ >>> rounded_avg(10, 20)\n\/\/ \"0b1111\"\n\/\/ >>> rounded_avg(20, 33)\n\/\/ \"0b11010\"\nfunction rounded_avg(n: number, m: number): string | number {\n","canonical_solution":"function rounded_avg(n: number, m: number): string | number {\n    if (n > m) {\n        return -1;\n    }\n\n    const count = m - n + 1;\n    let sum = 0;\n    \n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    const avg = sum \/ count;\n    const roundedAvg = Math.round(avg);\n    return \"0b\" + roundedAvg.toString(2);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"},{"task_id":"HumanEval_104","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Nóta: Ba cheart an tsraith a aisíoc a shocrú in ord méadaithe. \/\/eilimintí nach bhfuil aon digit fiú. \/\/Ar mhaithe le sraith de na hionad iomlán dearfacha x. sraith sordaithe de gach \/\/ >>> unique_digits([15, 33, 1422, 1])\n\/\/ [1, 15, 33]\n\/\/ >>> unique_digits([152, 323, 1422, 10])\n\/\/ []\nfunction unique_digits(x: number[]): number[] {\n","canonical_solution":"function unique_digits(x: number[]): number[] {\n    \/\/ Helper function to check if a number has any even digit\n    const hasEvenDigit = (num: number): boolean => {\n        while (num > 0) {\n            const digit = num % 10;\n            if (digit % 2 === 0) return true;\n            num = Math.floor(num \/ 10);\n        }\n        return false;\n    };\n\n    \/\/ Filter out numbers without even digits and sort them\n    return x.filter(num => !hasEvenDigit(num)).sort((a, b) => a - b);\n}\n\n\/\/ Example usage:\nconsole.log(unique_digits([15, 33, 1422, 1])); \/\/ [1, 15, 33]\nconsole.log(unique_digits([152, 323, 1422, 10])); \/\/ []","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"},{"task_id":"HumanEval_105","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/\"Aon\", \"Dhá\", \"Trí\", \"Ceithre\", \"Cúig\", \"Seisear\", \"Seacht\", \"Ocht\", \"Noi\". \/\/an t-aighneacht a thagann as a ais, agus ansin gach digit a chur in ionad a ainm comhfhreagrach ó \/\/Ar mhaithe le sraith de na hionad iomlán, a ordú na hionad iomlán atá idir 1 agus 9 san áireamh, \/\/ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\/\/ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\/\/ If the array is empty, return an empty array:\n\/\/ >>> by_length([])\n\/\/ []\n\/\/ If the array has any strange number ignore it:\n\/\/ >>> by_length([1, -1, 55])\n\/\/ [\"One\"]\nfunction by_length(arr: number[]): string[] {\n","canonical_solution":"function by_length(arr: number[]): string[] {\n    const numberNames: { [key: number]: string } = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    };\n\n    return arr\n        .filter(num => num >= 1 && num <= 9)\n        .sort((a, b) => b - a)\n        .map(num => numberNames[num]);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"},{"task_id":"HumanEval_106","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/Is é factorial i ná amhríocht na n-uimhreacha ó 1 go i (1 * 2 * ... * i). \/\/i tosaíonn sé ó 1. \/\/nó suim na n-uimhreacha ó 1 go i ar shlí eile. \/\/agus ar ais sraith de mhéid n, ar nós go bhfuil luach an eilimint ag innéacs i an factorial de i má tá i fiú \/\/Cuir an fheidhm f a ghlacann n mar pharaiméadar i bhfeidhm, \/\/ >>> f(5)\n\/\/ [1, 2, 6, 24, 15]\nfunction f(n: number): number[] {\n","canonical_solution":"function f(n: number): number[] {\n    const result: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            \/\/ Calculate factorial for even i\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            \/\/ Calculate sum for odd i\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);\n  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);\n  assert.deepEqual(candidate(1),[1]);\n  assert.deepEqual(candidate(3),[1, 2, 6]);\n}\n\ntest();"},{"task_id":"HumanEval_107","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla 1: \/\/palindróimí iomlána a thagann laistigh den raon ((1, n), lena n-áirítear. \/\/Ag tabhairt iomlán dearfach n, filleadh ar shraith a bhfuil líon na fiú agus gan leith \/\/ >>> even_odd_palindrome(3)\n\/\/ [1, 2]\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\/\/ Example 2:\n\/\/ >>> even_odd_palindrome(12)\n\/\/ [4, 6]\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\/\/ Note:\n\/\/ 1. 1 <= n <= 10^3\n\/\/ 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number): [number, number] {\n","canonical_solution":"function isPalindrome(num: number): boolean {\n    const str = num.toString();\n    return str === str.split('').reverse().join('');\n}\n\nfunction even_odd_palindrome(n: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_108","nl":"gle_Latn","pl":"ts","prompt":"\/\/e.g. -123 tá síniú digits -1, 2, agus 3. \/\/Má tá uimhir diúltach, ansin beidh a chéad dhigit sínithe diúltach: \/\/líon na n-eilimintí a bhfuil suim na n-aicmí > 0 iontu. \/\/Scríobh feidhm count_nums a ghlacann sraith de líon iomlán agus a thugann ar ais \/\/ >>> count_nums([])\n\/\/ 0\n\/\/ >>> count_nums([-1, 11, -11])\n\/\/ 1\n\/\/ >>> count_nums([1, 1, 2])\n\/\/ 3\nfunction count_nums(arr: number[]): number {\n","canonical_solution":"function count_nums(arr: number[]): number {\n    function sumOfDigits(num: number): number {\n        let sum = 0;\n        let str = num.toString();\n        for (let i = 0; i < str.length; i++) {\n            let digit = parseInt(str[i]);\n            if (i === 0 && str[i] === '-') {\n                digit = -parseInt(str[i+1]);\n                i++;\n            }\n            sum += digit;\n        }\n        return sum;\n    }\n\n    let count = 0;\n    for (const num of arr) {\n        if (sumOfDigits(num) > 0) {\n            count++;\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"},{"task_id":"HumanEval_109","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Nóta: Tá sé ráthaithe go mbeidh eilimintí uathúla ag an array ar leith. \/\/Má tá an tacar ar fáil folamh ansin filleadh fíor. \/\/then return true else return false. \/\/Má tá sé indéanta an tsraith shocraithe a fháil trí na hoibríochtaí thuasluaite a dhéanamh \/\/an seasamh tosaigh sa ghréasáin i.e. 0ú innéacs. \/\/an t-eileamh deireanach den array a bhogadh go \/\/Ciallaíonn oibríocht aistriú ceart go bhfuil gach eilimint den earráid á aistriú ag ceann amháin.\/\/Tá cead agat oibríocht a dhéanamh ar shiúl ar dheis aon líon uaireanta. \/\/an oibríocht seo a leanas ar an array ar leith: \/\/is féidir sraith a sheiceáil in ord neamh-imní trí \/\/Beidh uimhreacha sa sraith ordú randamach. Is é do tasc a chinneadh má \/\/Tá sraith 'arr' againn de N intéir ag arr[1], arr[2], ..., arr[N].\/\/ >>> move_one_ball([3, 4, 5, 1, 2])\n\/\/ true\n\/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n\/\/ be achieved for the given array.\n\/\/ >>> move_one_ball([3, 5, 4, 1, 2])\n\/\/ false\n\/\/ Explanation:It is not possible to get non-decreasing order for the given\n\/\/ array by performing any number of right shift operations.\nfunction move_one_ball(arr: number[]): boolean {\n","canonical_solution":"function move_one_ball(arr: number[]): boolean {\n    if (arr.length === 0) return true;\n\n    let countDecreases = 0;\n    const n = arr.length;\n\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            countDecreases++;\n        }\n        if (countDecreases > 1) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_one_ball;\n  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);\n  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);\n  assert.deepEqual(candidate([4, 3, 1, 2]),false);\n  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);\n  assert.deepEqual(candidate([]),true);\n}\n\ntest();"},{"task_id":"HumanEval_110","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Seachas sin, cuir \"NÍL\" ar ais. \/\/go bhfuil na heilimintí go léir de lst1 fiú, filleadh ar \"YES\". \/\/Má tá sé indéanta eilimintí a mhalartú idir an lst1 agus an lst2 chun \/\/Níl aon teorainn ar líon na n-eilimintí a mhalartú idir lst1 agus lst2. \/\/idir iad a dhéanamh ar LST1 sraith de uimhreacha fiú amháin. \/\/agus cinntíonn sé an féidir malartú eilimintí a dhéanamh \/\/Sa fhadhb seo, beidh tú a chur i bhfeidhm ar fheidhm a thógann dhá arrays de uimhreacha, \/\/ >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\/\/ \"YES\"\n\/\/ >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\/\/ \"NO\"\n\/\/ It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1: number[], lst2: number[]): string {\n","canonical_solution":"function exchange(lst1: number[], lst2: number[]): string {\n    const isEven = (num: number) => num % 2 === 0;\n    \n    \/\/ Count the odd numbers in lst1\n    const oddCountInLst1 = lst1.reduce((count, num) => count + (isEven(num) ? 0 : 1), 0);\n\n    \/\/ Count the even numbers in lst2\n    const evenCountInLst2 = lst2.reduce((count, num) => count + (isEven(num) ? 1 : 0), 0);\n\n    \/\/ Check if number of odd numbers in lst1 can be matched by even numbers in lst2\n    return oddCountInLst1 <= evenCountInLst2 ? \"YES\" : \"NO\";\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();"},{"task_id":"HumanEval_111","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/Má tharlaíonn an rud céanna i roinnt litreacha, cuir ar ais iad go léir. \/\/an litir is mó a athdhéantar agus a bhfuil an líon comhfhreagrach ann. \/\/Ag tabhairt sreang a léiríonn litreacha beaga scaradh spás, téama a thabhairt ar ais \/\/ >>> histogram(\"a b c\")\n\/\/ {\"a\": 1, \"b\": 1, \"c\": 1}\n\/\/ >>> histogram(\"a b b a\")\n\/\/ {\"a\": 2, \"b\": 2}\n\/\/ >>> histogram(\"a b c a b\")\n\/\/ {\"a\": 2, \"b\": 2}\n\/\/ >>> histogram(\"b b b b a\")\n\/\/ {\"b\": 4}\n\/\/ >>> histogram(\"\")\n\/\/ {}\nfunction histogram(test: string): {[key: string]: number} {\n","canonical_solution":"function histogram(test: string): { [key: string]: number } {\n    if (test.trim() === \"\") {\n        return {};\n    }\n\n    const letters = test.split(\" \");\n    const counts: { [key: string]: number } = {};\n\n    for (const letter of letters) {\n        if (letter in counts) {\n            counts[letter]++;\n        } else {\n            counts[letter] = 1;\n        }\n    }\n\n    let maxCount = 0;\n    for (const count of Object.values(counts)) {\n        if (count > maxCount) {\n            maxCount = count;\n        }\n    }\n\n    const result: { [key: string]: number } = {};\n    for (const [letter, count] of Object.entries(counts)) {\n        if (count === maxCount) {\n            result[letter] = count;\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"},{"task_id":"HumanEval_112","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla \/\/Ba cheart duit sraith a thabhairt ar ais ina bhfuil an sreang toradh agus fíor\/fíor chun an seiceáil a dhéanamh. \/\/Tugtar palindrome ar shraith má léitear an méid céanna siar agus ar aghaidh. \/\/ansin seiceáil an bhfuil an sreang toradh palindrome. \/\/Tá dhá shraith s agus c againn, ní mór duit na carachtair go léir i s a scriosadh atá comhionann le carachtar ar bith i c \/\/Tasc \/\/ >>> reverse_delete(\"abcde\", \"ae\")\n\/\/ [\"bcd\", false]\n\/\/ >>> reverse_delete(\"abcdef\", \"b\")\n\/\/ [\"acdef\", false]\n\/\/ >>> reverse_delete(\"abcdedcba\", \"ab\")\n\/\/ [\"cdedc\", true]\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n","canonical_solution":"function reverse_delete(s: string, c: string): [string, boolean] {\n    \/\/ Create a Set of characters to delete for faster lookup\n    const charsToDelete = new Set(c);\n\n    \/\/ Filter out characters in 's' that are in 'c'\n    const filteredString = s.split('').filter(char => !charsToDelete.has(char)).join('');\n\n    \/\/ Check if the filtered string is a palindrome\n    const isPalindrome = filteredString === filteredString.split('').reverse().join('');\n\n    return [filteredString, isPalindrome];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"},{"task_id":"HumanEval_113","nl":"gle_Latn","pl":"ts","prompt":"\/\/de dhigití neamhghnácha sa i'th sraith de na ionchur. \/\/string i den ionchur. \" áit ar chóir an uimhir  a chur in ionad na ianna go léir.\/\/Ba cheart go mbeadh gach eilimint i den aschur \"an líon eilimintí gan leithreas sa \/\/Ar a dtugtar sraith sreanganna, áit nach bhfuil ach digiteach ag gach sreang, tabhair sraith ar ais. \/\/ >>> odd_count([\"1234567\"])\n\/\/ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\/\/ >>> odd_count([\"3\", \"11111111\"])\n\/\/ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst: string[]): string[] {\n","canonical_solution":"function odd_count(lst: string[]): string[] {\n    return lst.map(str => {\n        \/\/ Count the number of odd digits in the string\n        let oddCount = Array.from(str).reduce((count, char) => {\n            let digit = parseInt(char, 10);\n            return digit % 2 !== 0 ? count + 1 : count;\n        }, 0);\n\n        \/\/ Construct the result string\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = odd_count;\n  assert.deepEqual(candidate([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();"},{"task_id":"HumanEval_114","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla \/\/na n-uimhreacha. \/\/Ar mhaithe le sraith de n-ionad iomlán, faigh suim íosta aon fho-sreang nach bhfuil fo-fhíor \/\/ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\/\/ 1\n\/\/ >>> minSubArraySum([-1, -2, -3])\n\/\/ -6\nfunction minSubArraySum(nums: number[]): number {\n","canonical_solution":"function minSubArraySum(nums: number[]): number {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(nums[i], currentSum + nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n\/\/ Example usage:\n\/\/ console.log(minSubArraySum([2, 3, 4, 1, 2, 4])); \/\/ Output: 1\n\/\/ console.log(minSubArraySum([-1, -2, -3])); \/\/ Output: -6","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_115","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla 1: \/\/Cuir amach an líon uaireanta is gá duit na buicéid a ísliú. \/\/Is é do tasc na buicéid a úsáid chun na tobar a ghlanadh. \/\/agus tá an cumas céanna ag na buicéid go léir. \/\/Tá buidéal comhfhreagrach ag gach tobar ar féidir é a úsáid chun uisce a bhaint as, \/\/agus tá gach 1 i sraith ina ionadaí ar aonad amháin uisce. \/\/Tá rás ceartchúiseach de phoill agat.\/\/ >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\/\/ 6\n\/\/ Example 2:\n\/\/ >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n\/\/ 5\n\/\/ Example 3:\n\/\/ >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n\/\/ 0\n\/\/ Constraints:\n\/\/ * all wells have the same length\n\/\/ * 1 <= grid.length <= 10^2\n\/\/ * 1 <= grid[:,1].length <= 10^2\n\/\/ * grid[i][j] -> 0 | 1\n\/\/ * 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number): number {\n","canonical_solution":"function max_fill(grid: number[][], capacity: number): number {\n    let totalBuckets = 0;\n\n    for (let row of grid) {\n        let waterUnits = row.reduce((sum, cell) => sum + cell, 0);\n        totalBuckets += Math.ceil(waterUnits \/ capacity);\n    }\n\n    return totalBuckets;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"},{"task_id":"HumanEval_116","nl":"gle_Latn","pl":"ts","prompt":"\/\/Ní mór é a chur i bhfeidhm mar seo: \/\/I gcás líon comhchosúil daoine, sraith bunaithe ar luach deichiméil. \/\/líon na n-aonad ina léiriú dénártha in ord ag ardú. \/\/Sa Kata seo, caithfidh tú sraith de na hionad iomlán neamh-diúltach a shocrú de réir \/\/ >>> sort_array([1, 5, 2, 3, 4])\n\/\/ [1, 2, 3, 4, 5]\n\/\/ >>> sort_array([-2, -3, -4, -5, -6])\n\/\/ [-6, -5, -4, -3, -2]\n\/\/ >>> sort_array([1, 0, 2, 3, 4])\n\/\/ [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n","canonical_solution":"function sort_array(arr: number[]): number[] {\n    return arr.sort((a, b) => {\n        const countOnes = (n: number) => n.toString(2).replace(\/0\/g, \"\").length;\n        const numOnesA = countOnes(a);\n        const numOnesB = countOnes(b);\n\n        if (numOnesA !== numOnesB) {\n            return numOnesA - numOnesB;\n        } else {\n            return a - b;\n        }\n    });\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"},{"task_id":"HumanEval_117","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Nóta: is féidir leat a mheas nach bhfuil sa shreang ionchuir ach litreacha agus spásanna. \/\/Má tá an snáithín folamh ansin ba chóir don fheidhm sraith folamh a thabhairt ar ais. \/\/n comhfhocal, sa tsraith a bhfuil na focail seo le feiceáil sa snáithín. \/\/feidhm a thugann sraith de na focail go léir ó shreang s a bhfuil go díreach \/\/Ar shreang s agus uimhir nádúrtha n a thabhairt, tá sé de chúram ort \/\/ >>> select_words(\"Mary had a little lamb\", 4)\n\/\/ [\"little\"]\n\/\/ >>> select_words(\"Mary had a little lamb\", 3)\n\/\/ [\"Mary\", \"lamb\"]\n\/\/ >>> select_words(\"simple white space\", 2)\n\/\/ []\n\/\/ >>> select_words(\"Hello world\", 4)\n\/\/ [\"world\"]\n\/\/ >>> select_words(\"Uncle sam\", 3)\n\/\/ [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n","canonical_solution":"function select_words(s: string, n: number): string[] {\n    const isConsonant = (char: string): boolean => {\n        const vowels = 'aeiouAEIOU';\n        return !vowels.includes(char) && \/[a-zA-Z]\/.test(char);\n    };\n\n    const words = s.split(' ');\n    const result: string[] = [];\n\n    for (const word of words) {\n        const consonantCount = [...word].filter(isConsonant).length;\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"},{"task_id":"HumanEval_118","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/Is féidir leat a mheas go bhfuil an sreang a thugtar litir Béarla amháin. \/\/Faigh aon fhuaimín a chomhlíonann an coinníoll thuas. \/\/Ní chomhaireamhann na huacailí ag tús agus ag deireadh.\/\/dhá chomhlánta ó thaobh na láimhe deise den fhocal (soiléiriú ar chás). \/\/Tugtar focal duit. Is é do thasc an vowel is gaire a aimsiú atá idir \/\/ >>> get_closest_vowel(\"yogurt\")\n\/\/ \"u\"\n\/\/ >>> get_closest_vowel(\"FULL\")\n\/\/ \"U\"\n\/\/ >>> get_closest_vowel(\"quick\")\n\/\/ \"\"\n\/\/ >>> get_closest_vowel(\"ab\")\n\/\/ \"\"\nfunction get_closest_vowel(word: string): string {\n","canonical_solution":"function get_closest_vowel(word: string): string {\n    const vowels = new Set<string>(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.has(word[i]) && !vowels.has(word[i - 1]) && !vowels.has(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return '';\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"},{"task_id":"HumanEval_119","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Fill ar ais 'Yes' má tá bealach ann chun sreang maith a dhéanamh, agus fille ar 'No' ar shlí eile. \/\/\" (()) \" ní. \/\/Tá an tsraith '(((() ' dea-bhéasach, agus tá an tsraith \/\/Meastar go bhfuil sraith S maith má tá agus amháin má tá gach parentheses i S \/\/roinnt ord, go mbeidh an sreang a eascraíonn a bheith go maith. \/\/Is é do phost a sheiceáil má tá sé indéanta a concatenate an dá shraith i \/\/na parentheses \" ((\" nó na parentheses dlúth \")) \" amháin. \/\/Tá tú a thabhairt ar an sraith de dhá shraith, tá an dá shraith ar oscailt.\/\/ >>> match_parens([\"()(\", \")\"])\n\/\/ \"Yes\"\n\/\/ >>> match_parens([\")\", \")\"])\n\/\/ \"No\"\nfunction match_parens(lst: string[]): string {\n","canonical_solution":"function match_parens(lst: string[]): string {\n    const canFormGoodString = (s1: string, s2: string): boolean => {\n        let balance = 0;\n\n        \/\/ Check s1 followed by s2\n        for (const char of s1 + s2) {\n            if (char === '(') balance++;\n            else if (char === ')') balance--;\n\n            if (balance < 0) return false; \/\/ More closing than opening\n        }\n        if (balance === 0) return true; \/\/ Balanced\n\n        balance = 0;\n        \/\/ Check s2 followed by s1\n        for (const char of s2 + s1) {\n            if (char === '(') balance++;\n            else if (char === ')') balance--;\n\n            if (balance < 0) return false; \/\/ More closing than opening\n        }\n\n        return balance === 0; \/\/ Balanced\n    };\n\n    return canFormGoodString(lst[0], lst[1]) ? 'Yes' : 'No';\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();"},{"task_id":"HumanEval_120","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla 1: \/\/de fhad k leis an uasmhéid k uimhreacha i arr. \/\/Ar array de intíoranna agus k intíor dearfach a thabhairt, tabhair array sordaithe ar ais \/\/ >>> maximum([-3, -4, 5], 3)\n\/\/ [-4, -3, 5]\n\/\/ Example 2:\n\/\/ >>> maximum([4, -4, 4], 2)\n\/\/ [4, 4]\n\/\/ Example 3:\n\/\/ >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\/\/ [2]\n\/\/ Note:\n\/\/ 1. The length of the array will be in the range of [1, 1000].\n\/\/ 2. The elements in the array will be in the range of [-1000, 1000].\n\/\/ 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n","canonical_solution":"function maximum(arr: number[], k: number): number[] {\n    \/\/ Sort the array in descending order and then take the first k elements\n    const sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k).sort((a, b) => a - b);\n}\n\n\/\/ Example usage:\n\/\/ console.log(maximum([-3, -4, 5], 3)); \/\/ Output: [-4, -3, 5]\n\/\/ console.log(maximum([4, -4, 4], 2)); \/\/ Output: [4, 4]\n\/\/ console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); \/\/ Output: [2]","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"},{"task_id":"HumanEval_121","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí \/\/Ar mhaithe le sraith neamhfhada de na hionad iomlán, cuir suim na n-eilimintí gan aon cheann atá i suíomhanna fiú ar ais. \/\/ >>> solution([5, 8, 7, 1])\n\/\/ 12\n\/\/ >>> solution([3, 3, 3, 3, 3])\n\/\/ 9\n\/\/ >>> solution([30, 13, 24, 321])\n\/\/ 0\nfunction solution(lst: number[]): number {\n","canonical_solution":"function solution(lst: number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length; i += 2) {  \/\/ Traverse even indices\n        if (lst[i] % 2 !== 0) {  \/\/ Check if the element is odd\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"},{"task_id":"HumanEval_122","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/an suim na n-eilimintí a bhfuil dhá dhigit acu ar a mhéad ó na chéad k eilimint de arr. \/\/Ar mhaithe le sraith neamh-folamh de na hionad iomlán arr agus líon iomlán k, filleadh \/\/ >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\/\/ 24\n\/\/ Constraints:\n\/\/ 1. 1 <= len(arr) <= 100\n\/\/ 2. 1 <= k <= len(arr)\nfunction add_elements(arr: number[], k: number): number {\n","canonical_solution":"function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"},{"task_id":"HumanEval_123","nl":"gle_Latn","pl":"ts","prompt":"\/\/get_odd_collatz(5) a aisíocann [1, 5] # Is é an seicheamh collatz do 5 [5, 16, 8, 4, 2, 1], mar sin níl na huimhreacha gan leithleach ach 1, agus 5. \/\/Mar shampla: \/\/2. array ar ais a shocrú in ord méadaithe. \/\/1. Collatz ((1) is [1]. \/\/Nóta: \/\/Is é an tuairimíocht ná is cuma cén luach de n, go sroichfidh an seicheamh 1. \/\/an téarma roimhe seo. Má tá an téarma roimhe seo neamhghnácha, an téarma eile is é 3 huaire an téarma roimhe seo \/\/téarma roimhe seo mar seo a leanas: má tá an téarma roimhe seo fiú, is é an téarma eile leath de \/\/mar seo a leanas: tosú le haon iomlán-uimhreacha dearfacha n. Ansin gheobhaidh gach téarma ón \/\/Is tuairimíocht i matamaitic é tuairimíocht Collatz a bhaineann le seicheamh sainithe \/\/Ag tabhairt iomlán-uimhreacha dearfacha n, tabhair ais sraith shocraithe ina bhfuil na huimhreacha gan chomhionann i seoladh collatz. \/\/ >>> get_odd_collatz(5)\n\/\/ [1, 5]\nfunction get_odd_collatz(n: number): number[] {\n","canonical_solution":"function get_odd_collatz(n: number): number[] {\n    const collatzSequence: number[] = [];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatzSequence.push(n);\n        }\n        if (n % 2 === 0) {\n            n = n \/ 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \/\/ Include 1 in the sequence if it's odd, as per standard collatz sequence\n    collatzSequence.push(1);\n    return collatzSequence.sort((a, b) => a - b);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_odd_collatz;\n  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(5),[1, 5]);\n  assert.deepEqual(candidate(12),[1, 3, 5]);\n  assert.deepEqual(candidate(1),[1]);\n}\n\ntest();"},{"task_id":"HumanEval_124","nl":"gle_Latn","pl":"ts","prompt":"\/\/4. Ba cheart an dáta a bheith sa fhormáid: mm-dd-yyyy \/\/3. Níor chóir go mbeadh na míonna níos lú ná 1 agus níos airde ná 12. \/\/2. Níl an líon laethanta níos lú ná 1 nó níos airde ná 31 lá do mhí 1,3,5,7,8,10,12. Agus níl an líon laethanta níos lú ná 1 nó níos airde ná 30 lá do mhí 4,6,9,11. Agus, níl an líon laethanta níos lú ná 1 nó níos airde ná 29 don mhí 2. \/\/1. Níl an tsraith dáta folamh. \/\/Tá an dáta bailí má chomhlíontar na rialacha seo a leanas go léir: \/\/a aisíoc fíor má tá an dáta bailí ar shlí eile bréagach. \/\/Ní mór duit a scríobh feidhm a bhailíonn sraith dáta ar leith agus \/\/ >>> valid_date(\"03-11-2000\")\n\/\/ true\n\/\/ >>> valid_date(\"15-01-2012\")\n\/\/ false\n\/\/ >>> valid_date(\"04-0-2040\")\n\/\/ false\n\/\/ >>> valid_date(\"06-04-2020\")\n\/\/ true\n\/\/ >>> valid_date(\"06\/04\/2020\")\n\/\/ false\nfunction valid_date(date: string): boolean {\n","canonical_solution":"function valid_date(date: string): boolean {\n    \/\/ Check if the date is empty\n    if (date.trim() === \"\") return false;\n\n    \/\/ Split the date string into components\n    const dateParts = date.split(\"-\");\n    if (dateParts.length !== 3) return false;\n\n    const [monthStr, dayStr, yearStr] = dateParts;\n\n    \/\/ Validate each part of the date\n    const month = parseInt(monthStr, 10);\n    const day = parseInt(dayStr, 10);\n    const year = parseInt(yearStr, 10);\n\n    \/\/ Check if all parts are valid numbers\n    if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n\n    \/\/ Check the month range\n    if (month < 1 || month > 12) return false;\n\n    \/\/ Check the day range based on the month\n    if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {\n        if (day < 1 || day > 31) return false;\n    } else if ([4, 6, 9, 11].includes(month)) {\n        if (day < 1 || day > 30) return false;\n    } else if (month === 2) {\n        if (day < 1 || day > 29) return false;\n    }\n\n    \/\/ All checks passed\n    return true;\n}\n\n\/\/ Example usage\nconsole.log(valid_date(\"03-11-2000\")); \/\/ true\nconsole.log(valid_date(\"15-01-2012\")); \/\/ false\nconsole.log(valid_date(\"04-0-2040\"));  \/\/ false\nconsole.log(valid_date(\"06-04-2020\")); \/\/ true\nconsole.log(valid_date(\"06\/04\/2020\")); \/\/ false","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_125","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí \/\/alphabet, ord (a') = 0, ord (b') = 1, ... ord (z') = 25 \/\/Ba cheart go mbeadh sé scoilte ar choimaí ',' mura bhfuil aon choimaí ann ba cheart duit líon na litreacha beaga a thabhairt ar ais le horduithe neamhghnácha sa \/\/Ag tabhairt sreang focal, filleadh ar shraith focal a roinnte ar spás bán, mura bhfuil aon spás bán ann sa téacs a roghnaíonn tú \/\/ >>> split_words(\"Hello world!\")\n\/\/ [\"Hello\", \"world!\"]\n\/\/ >>> split_words(\"Hello,world!\")\n\/\/ [\"Hello\", \"world!\"]\n\/\/ >>> split_words(\"abcdef\")\n\/\/ 3\nfunction split_words(txt: string): string[] | number {\n","canonical_solution":"function split_words(txt: string): string[] | number {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    }\n    if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    }\n    const oddOrderCount = [...txt].reduce((count, char) => {\n        const charCode = char.charCodeAt(0) - 'a'.charCodeAt(0);\n        if (char === char.toLowerCase() && charCode % 2 === 1) {\n            return count + 1;\n        }\n        return count;\n    }, 0);\n\n    return oddOrderCount;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_126","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí \/\/number, return false. Ná glacadh le huimhreacha diúltacha agus gan ach uimhreacha iomlána. \/\/má tá níos mó ná dúbailte amháin den tsraith céanna \/\/Ar mhaithe le sraith de uimhreacha, a thabhairt ar ais cibé acu a bhfuil siad a ordú nó nach bhfuil.\/\/ >>> is_sorted([5])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 3, 4, 5])\n\/\/ true\n\/\/ >>> is_sorted([1, 3, 2, 4, 5])\n\/\/ false\n\/\/ >>> is_sorted([1, 2, 3, 4, 5, 6])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n\/\/ true\n\/\/ >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n\/\/ false\n\/\/ >>> is_sorted([1, 2, 2, 3, 3, 4])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 2, 2, 3, 4])\n\/\/ false\nfunction is_sorted(lst: number[]): boolean {\n","canonical_solution":"function is_sorted(lst: number[]): boolean {\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        if (lst[i] === lst[i + 1]) {\n            let count = 1;\n            while (lst[i + count] === lst[i]) {\n                count++;\n                if (count > 2) return false;\n            }\n        }\n    }\n    return true;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"},{"task_id":"HumanEval_127","nl":"gle_Latn","pl":"ts","prompt":"\/\/[ionchur\/ionchur] samplaí: \/\/Mura ndéanann an dá earraigh trasnacht, cuir \"NÍL\" ar ais. \/\/Seachas sin, cuir \"NÍL\" ar ais. \/\/Má tá fad an earraigh ina uimhir phríomh, cuir \"YES\" ar ais, \/\/a bhfuil a fhad 1, nach bhfuil uimhir phríomh. \/\/Sampla, is é an t-idirghabhála na n-eatramh (1, 3), (2, 4) (2, 3) \/\/Is uimhir phraiticiúil é idirthréimhse. \/\/Is é do tasc a chinneadh an bhfuil an fad idirchruinniú de na dhá \/\/I gcás gach earra áirithe, meastar go bhfuil a thús níos lú ná nó comhionann lena dheireadh. \/\/Áirítear tús agus deireadh leis. \/\/Tá na hidirthréimhsí a thugtar dúnta, rud a chiallaíonn go bhfuil an t-idirthréimhsí (tús, deireadh) \/\/áit a bhfuil gach earra páir de líon iomlán. Mar shampla, earra = (tús, deireadh) = (1, 2). \/\/Tá dhá earraigh tugtha duit, \/\/ >>> intersection([1, 2], [2, 3])\n\/\/ \"NO\"\n\/\/ >>> intersection([-1, 1], [0, 4])\n\/\/ \"NO\"\n\/\/ >>> intersection([-3, -1], [-5, 5])\n\/\/ \"YES\"\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n","canonical_solution":"function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true; \/\/ 2 and 3 are prime numbers\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n    const start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    const length = end - start;\n\n    return isPrime(length) ? \"YES\" : \"NO\";\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"},{"task_id":"HumanEval_128","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/Nóta: ní dhéantar an tuairisceán a shainiú le haghaidh arr folamh. \/\/de gach uimhir sa sraith, a léirítear le 1, -1 nó 0. \/\/suim mhéideanna na n-ionad iomlán a iolrú le táirge na gcomharthaí go léir \/\/Tá tú a thabhairt ar array arr de na hionadóirí agus ní mór duit a thabhairt ar ais \/\/ >>> prod_signs([1, 2, 2, -4])\n\/\/ 9\n\/\/ >>> prod_signs([0, 1])\n\/\/ 0\n\/\/ >>> prod_signs([])\n\/\/ undefined\nfunction prod_signs(arr: number[]): number | undefined {\n","canonical_solution":"function prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n\n    let sumOfMagnitudes = 0;\n    let productOfSigns = 1;\n\n    for (const num of arr) {\n        sumOfMagnitudes += Math.abs(num);\n        productOfSigns *= Math.sign(num);\n    }\n\n    return sumOfMagnitudes * productOfSigns;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();"},{"task_id":"HumanEval_129","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Cuir array ordáilte de na luachanna ar na cill a théann an cosán íosta tríd ar ais. \/\/Tá sé ráthaithe go bhfuil an freagra uathúil. \/\/lst_A[j] = lst_B[j]. \/\/mar sin go bhfuil lst_A[i] < lst_B[i] agus le haghaidh aon j (1 <= j < i) tá \/\/ná lst_B, i bhfocail eile, tá innéacs iomlánach i (1 <= i <= k) ann \/\/trí (léimis iad a ghlaoch lst_A agus lst_B), is lú lst_A go léasaicografach \/\/tar éis na sraitheanna ordnaithe de na luachanna ar na cill a théann A agus B a dhéanamh \/\/Meastar go bhfuil cosán A (de fhad k) níos lú ná cosán B (de fhad k) má \/\/NÍ FÉIDIR duit dul amach as an ngréasán. \/\/(a bhfuil a leithéidí de theangaí ann).\/\/Tabhair faoi deara le do thoil go gciallaíonn cosán de fhad k cuairt a thabhairt ar chill k go díreach (ní \/\/cell. \/\/i bhfocail eile, is féidir leat dul go cill a roinnt imeall le tú reatha \/\/ó aon chill, agus i ngach céim is féidir leat bogadh go dtí aon cheann de na cealla comharsana, \/\/Ní mór duit a fháil ar an cosán íosta de fhad k sa ghréasán. Is féidir leat tosú \/\/Tá an t-ainm \"inclusive\" le feiceáil uair amháin ar na cill sa ghréasán. \/\/Tá luach i ngach cill den ghréasáin. Gach uimhir iomlán sa raon [1, N * N] \/\/Le grille le sraitheanna N agus colúin N (N >= 2) agus le hidirghníomhach dearfach k, \/\/ >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n\/\/ [1, 2, 1]\n\/\/ >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n\/\/ [1]\nfunction minPath(grid: number[][], k: number): number[] {\n","canonical_solution":"function minPath(grid: number[][], k: number): number[] {\n    const N = grid.length;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n    \n    type State = {path: number[], x: number, y: number, len: number};\n    \n    \/\/ Compare two paths lexicographically\n    const isLess = (a: number[], b: number[]): boolean => {\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) return a[i] < b[i];\n        }\n        return false;\n    };\n\n    let bestPath: number[] = new Array(k).fill(Number.MAX_VALUE);\n    \n    \/\/ DFS function to explore paths of length k\n    function dfs(x: number, y: number, path: number[], len: number): void {\n        if (len === k) {\n            if (isLess(path, bestPath)) {\n                bestPath = [...path];\n            }\n            return;\n        }\n        \n        for (const [dx, dy] of directions) {\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                dfs(nx, ny, [...path, grid[nx][ny]], len + 1);\n            }\n        }\n    }\n    \n    \/\/ Try starting from each cell\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            dfs(i, j, [grid[i][j]], 1);\n        }\n    }\n    \n    return bestPath;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minPath;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);\n  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);\n  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_130","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/na chéad n + 1 uimhreacha de shraith Tribonacci. \/\/Tá tú a thabhairt ar neamh-diúltach n uimhir iomlán, tá tú a ar ais ar sraith de na \/\/= 2 + 3 + 3 = 8 \/\/tri(3) = tri(2) + tri(1) + tri(4) \/\/tri(4) = 3 \/\/tri(2) = 1 + (2 \/ 2) = 2 \/\/Mar shampla: \/\/tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), má tá n neamhghnácha. \/\/tri (n) = 1 + n \/ 2, má tá n fiú. \/\/tri(1) = 3 \/\/Sainmhínítear seicheamh Tribonacci leis an athrá: \/\/Mar sin féin, cad nach bhfuil daoine a fhios is é an Tribonacci seicheamh.\/\/Tá a fhios ag gach duine de shraith Fibonacci, bhí staidéar go domhain ag matamaiticeoirí i \/\/ >>> tri(3)\n\/\/ [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n","canonical_solution":"function tri(n: number): number[] {\n    const tribonacci: number[] = [1, 3]; \/\/ Initialize with first two definite values\n\n    function calculateTribonacci(index: number): number {\n        if (index < tribonacci.length) {\n            return tribonacci[index];\n        }\n\n        let result: number;\n        if (index % 2 === 0) {\n            result = 1 + index \/ 2;\n        } else {\n            result = calculateTribonacci(index - 1) + calculateTribonacci(index - 2) + calculateTribonacci(index + 1);\n        }\n\n        tribonacci[index] = result; \/\/ Memoize the result\n        return result;\n    }\n\n    for (let i = 0; i <= n; i++) {\n        calculateTribonacci(i);\n    }\n\n    return tribonacci.slice(0, n + 1);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_131","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Cuir 0 ar ais má tá na huimhreacha go léir páirteach. \/\/Ag tabhairt iomlán-uimhreacha dearfacha n, déan toradh na n-uimhreacha neamhghnácha a aisíoc. \/\/ >>> digits(1)\n\/\/ 1\n\/\/ >>> digits(4)\n\/\/ 0\n\/\/ >>> digits(235)\n\/\/ 15\nfunction digits(n: number): number {\n","canonical_solution":"function digits(n: number): number {\n    let product = 1;\n    let hasOdd = false;\n    \n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n \/ 10);\n    }\n\n    return hasOdd ? product : 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"},{"task_id":"HumanEval_132","nl":"gle_Latn","pl":"ts","prompt":"\/\/i gcás ina bhfuil braicéad amháin ar a laghad sa fho-sreath snáthaithe. \/\/Ba cheart go dtiocfadh an fheidhm fíor má tá fo-sreath bailí braicéid ann agus amháin má tá .\/\/Funcún a chruthú a ghlacann sraith mar ionchur nach bhfuil ann ach braicéid chearnacha. \/\/ >>> is_nested(\"[[]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[]]]]]]][[[[[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[][]\")\n\/\/ false\n\/\/ >>> is_nested(\"[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[[][]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[[]][[\")\n\/\/ true\nfunction is_nested(string: string): boolean {\n","canonical_solution":"function is_nested(string: string): boolean {\n    let depth = 0;\n    let hasNesting = false;\n\n    for (let char of string) {\n        if (char === '[') {\n            depth++;\n            if (depth > 1) {\n                hasNesting = true;\n            }\n        } else if (char === ']') {\n            if (depth > 0) {\n                depth--;\n            } else {\n                \/\/ More closing brackets than opening\n                return false;\n            }\n        }\n    }\n\n    \/\/ Return true if there was at least one nested bracket and all brackets are matched\n    return hasNesting && depth === 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_133","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/cuardaigh an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas a bhfuil an t-eolas.\/\/Ní mór duit a thabhairt ar ais an suim de na huimhreacha cearnach sa réimse a thugtar, \/\/Tá tú a thabhairt ar an raon de uimhreacha. \/\/ >>> lst([1.0, 2.0, 3.0])\n\/\/ 14\n\/\/ >>> lst([1.0, 4.0, 9.0])\n\/\/ 98\n\/\/ >>> lst([1.0, 3.0, 5.0, 7.0])\n\/\/ 84\n\/\/ >>> lst([1.4, 4.2, 0.0])\n\/\/ 29\n\/\/ >>> lst([-2.4, 1.0, 1.0])\n\/\/ 6\nfunction sum_squares(lst: number[]): number {\n","canonical_solution":"function sum_squares(lst: number[]): number {\n    return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);\n}\n\n\/\/ Example usage:\n\/\/ console.log(sum_squares([1.0, 2.0, 3.0])); \/\/ Output: 14\n\/\/ console.log(sum_squares([1.0, 4.0, 9.0])); \/\/ Output: 98\n\/\/ console.log(sum_squares([1.0, 3.0, 5.0, 7.0])); \/\/ Output: 84\n\/\/ console.log(sum_squares([1.4, 4.2, 0.0])); \/\/ Output: 29\n\/\/ console.log(sum_squares([-2.4, 1.0, 1.0])); \/\/ Output: 6","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"},{"task_id":"HumanEval_134","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Nóta: Is grúpa carachtair é \"word\" a scartha le spás. \/\/cuid de fhocal, agus bréagach ar shlí eile. \/\/de shraith ar leith is carachtar aibítre agus ní \/\/Funcas a chruthú a thugann fíor ar ais má tá an carachtar deireanach \/\/ >>> check_if_last_char_is_a_letter(\"apple pie\")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e\")\n\/\/ true\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e \")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"\")\n\/\/ false\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n","canonical_solution":"function check_if_last_char_is_a_letter(txt: string): boolean {\n    if (txt.trim() === \"\") return false; \/\/ Handle empty or whitespace strings\n\n    \/\/ Trim the string to remove any trailing spaces\n    txt = txt.trim();\n\n    \/\/ Check if the last character is an alphabetical letter and ensure there's a space before it\n    const lastChar = txt.charAt(txt.length - 1);\n    const isAlpha = \/[a-zA-Z]\/.test(lastChar);\n\n    return isAlpha && txt.lastIndexOf(' ') === txt.length - 2;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_if_last_char_is_a_letter;\n  assert.deepEqual(candidate(\"apple\"),false);\n  assert.deepEqual(candidate(\"apple pi e\"),true);\n  assert.deepEqual(candidate(\"eeeee\"),false);\n  assert.deepEqual(candidate(\"A\"),true);\n  assert.deepEqual(candidate(\"Pumpkin pie \"),false);\n  assert.deepEqual(candidate(\"Pumpkin pie 1\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"eeeee e \"),false);\n  assert.deepEqual(candidate(\"apple pie\"),false);\n  assert.deepEqual(candidate(\"apple pi e \"),false);\n}\n\ntest();"},{"task_id":"HumanEval_135","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/luachanna dúbailte. \/\/níl aon eilimint den sórt sin ann ansin filleadh -1. Ní bheidh  sa tsraith a thugtar.\/\/ní mó ná nó comhionann leis an eilimint atá díreach roimh é. Má \/\/Funcúntas a chruthú a thugann an t-eindéacs is mó d' eilimint a \/\/ >>> can_arrange([1, 2, 4, 3, 5])\n\/\/ 3\n\/\/ >>> can_arrange([1, 2, 3])\n\/\/ -1\nfunction can_arrange(arr: number[]): number {\n","canonical_solution":"function can_arrange(arr: number[]): number {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_136","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Mura bhfuil aon intéir dhiúltach nó dearfach ann, cuir iad ar ais mar neamhshainithe. \/\/de na hionad iomlán dearfacha i sraith. \/\/Is é an ceann is mó de na hionad iomlán diúltacha, agus 'b' an ceann is lú \/\/Creach feidhm a thugann sreang (a, b) ar ais, áit a bhfuil 'a' \/\/ >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n\/\/ [undefined, 1]\n\/\/ >>> largest_smallest_integers([])\n\/\/ [undefined, undefined]\n\/\/ >>> largest_smallest_integers([0])\n\/\/ [undefined, undefined]\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n","canonical_solution":"function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (largestNegative === undefined || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === undefined || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_138","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla \/\/Déan meastóireacht ar an féidir an uimhir a tugadh n a scríobh mar shúim de 4 uimhir shocraithe dearfacha díreach.\/\/ >>> is_equal_to_sum_even(4)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(6)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(8)\n\/\/ true\nfunction is_equal_to_sum_even(n: number): boolean {\n","canonical_solution":"function is_equal_to_sum_even(n: number): boolean {\n    \/\/ The sum of 4 positive even numbers is always even and 8 is the smallest such sum (2 + 2 + 2 + 2).\n    \/\/ Hence, if n is greater than or equal to 8 and even, n can be expressed as the sum of 4 positive even numbers.\n    return (n >= 8) && (n % 2 === 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_equal_to_sum_even;\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),true);\n  assert.deepEqual(candidate(11),false);\n  assert.deepEqual(candidate(12),true);\n  assert.deepEqual(candidate(13),false);\n  assert.deepEqual(candidate(16),true);\n}\n\ntest();"},{"task_id":"HumanEval_139","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/áit a bhfuil n > 0 \/\/brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! \/\/Sainmhínítear an fhachtóir Bhrasaíl mar: \/\/ >>> special_factorial(4)\n\/\/ 288\n\/\/ The function will receive an integer as input and should return the special\n\/\/ factorial of this integer.\nfunction special_factorial(n: number): number {\n","canonical_solution":"function factorial(n: number): number {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nfunction special_factorial(n: number): number {\n    if (n <= 0) throw new Error(\"Input must be a positive integer\");\n    \n    let result = 1;\n    for (let i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    \n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n}\n\ntest();"},{"task_id":"HumanEval_140","nl":"gle_Latn","pl":"ts","prompt":"\/\/ansin cuir -  in ionad gach spás ina dhiaidh sin\/\/agus má tá níos mó ná 2 spás ina dhiaidh sin ag sraith, \/\/Le sreang téacs a thabhairt, cuir na spásanna go léir ina ionad le fo-chomharthaí, \/\/ >>> fix_spaces(\" Example\")\n\/\/ \"Example\"\n\/\/ >>> fix_spaces(\" Example 1\")\n\/\/ \"Example_1\"\n\/\/ >>> fix_spaces(\" Example 2\")\n\/\/ \"_Example_2\"\n\/\/ >>> fix_spaces(\" Example 3\")\n\/\/ \"_Example-3\"\nfunction fix_spaces(text: string): string {\n","canonical_solution":"function fix_spaces(text: string): string {\n    \/\/ Trim leading and trailing spaces\n    let trimmedText = text.trim();\n\n    \/\/ Use a regular expression to replace all sequences of two or more spaces with \"-\"\n    let replacedText = trimmedText.replace(\/ {2,}\/g, '-');\n\n    \/\/ Replace remaining single spaces with underscores\n    replacedText = replacedText.replace(\/ \/g, '_');\n\n    return replacedText;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"},{"task_id":"HumanEval_141","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/- Ba chóir go mbeadh an fo-shraith tar éis an phointe ar cheann de na cinn seo: ['txt', 'exe', 'dll'] \/\/an aibítir Laidineach ('a'-'z' agus 'A'-'Z'). \/\/- Níor chóir go mbeadh an fho-shraith roimh an ponc folamh, agus tosaíonn sé le litir ó \/\/- Tá an t-ainm comhaid díreach pointe amháin '.' \/\/- Níor cheart go mbeadh níos mó ná trí dhigit ('0'-'9') i ainm an chomhaid. \/\/comhlíontar: \/\/Meastar go bhfuil ainm comhaid bailí má chomhlíonann na coinníollacha seo a leanas go léir agus amháin má chomhlíonann siad sin.\/\/'Yes' má tá ainm an chomhaid bailí, agus 'No' a aisíoc ar shlí eile. \/\/Cruthaigh feidhm a ghlacann sraith sreinge a léiríonn ainm comhad, agus a thugann ar ais \/\/ >>> file_name_check(\"example.txt\")\n\/\/ \"Yes\"\n\/\/ >>> file_name_check(\"1example.dll\")\n\/\/ \"No\"\nfunction file_name_check(file_name: string): string {\n","canonical_solution":"function file_name_check(file_name: string): string {\n    \/\/ Split the file name into name and extension based on the dot\n    const parts = file_name.split('.');\n    \n    \/\/ Check if there's exactly one dot\n    if (parts.length !== 2) {\n        return 'No';\n    }\n    \n    const [name, extension] = parts;\n    \n    \/\/ Check if the substring before the dot is not empty and starts with a latin letter\n    if (name.length === 0 || !\/^[a-zA-Z]\/.test(name)) {\n        return 'No';\n    }\n    \n    \/\/ Check if the number of digits in the name is not more than three\n    const digitCount = (name.match(\/\\d\/g) || []).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n    \n    \/\/ Check if the extension is one of the valid options\n    const validExtensions = ['txt', 'exe', 'dll'];\n    if (!validExtensions.includes(extension)) {\n        return 'No';\n    }\n    \n    \/\/ All conditions are met, the file name is valid\n    return 'Yes';\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\/this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\");\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"_f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"},{"task_id":"HumanEval_142","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/athraíonn na hiontrálacha sa tsraith nach bhfuil a n-innéacsanna ina n-iolrú 3 nó 4. Déanfaidh an fheidhm suim na n-iontrálacha go léir a thabhairt ar ais ansin. \/\/is é an t-iontráil iomlánach a bheidh i gcúba má tá a innéacs i gcúba de 4 agus ní i gcúba de 3. Ní bheidh an fheidhm \/\/Glacfaidh an fheidhm seo sraith de líon iomlán. Maidir le hiontrálacha uile sa sraith, cuirfidh an fheidhm an iontráil iomlán ar cheathrú má tá a innéacs \/\/\" \/\/ >>> lst\n\/\/ [1, 2, 3]\n\/\/ >>> lst\n\/\/ []\n\/\/ >>> lst\n\/\/ [-1, -5, 2, -1, -5]\nfunction sum_squares(lst: number[]): number {\n","canonical_solution":"function sum_squares(lst: number[]): number {\n    return lst.reduce((sum, value, index) => {\n        if (index % 3 === 0) {\n            return sum + (value * value);\n        } else if (index % 4 === 0) {\n            return sum + (value * value * value);\n        } else {\n            return sum + value;\n        }\n    }, 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1, 2, 3]),6);\n  assert.deepEqual(candidate([1, 4, 9]),14);\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);\n  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);\n  assert.deepEqual(candidate([0]),0);\n  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);\n  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);\n  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);\n  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);\n  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);\n}\n\ntest();"},{"task_id":"HumanEval_143","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla 1: \/\/ba cheart ord na bhfocal sa shreang nua a bheith mar an gcéanna leis an ord bunaidh. \/\/a bhfuil a fhad uimhreacha príomh, \/\/agus caithfidh tú sreang a thabhairt ar ais ina bhfuil na focail ón abairt bhunaidh, \/\/tá focail áirithe sa abairt a bhfuil spás idir na focail sin, \/\/Tugtar sreang duit a léiríonn abairt, \/\/ >>> words_in_sentence(\"This is a test\")\n\/\/ \"is\"\n\/\/ Example 2:\n\/\/ >>> words_in_sentence(\"lets go for swimming\")\n\/\/ \"go for\"\n\/\/ Constraints:\n\/\/ * 1 <= len(sentence) <= 100\n\/\/ * sentence contains only letters\nfunction words_in_sentence(sentence: string): string {\n","canonical_solution":"function isPrime(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction words_in_sentence(sentence: string): string {\n    return sentence\n        .split(' ')\n        .filter(word => isPrime(word.length))\n        .join(' ');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\");\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"here is\"),\"is\");\n}\n\ntest();"},{"task_id":"HumanEval_144","nl":"gle_Latn","pl":"ts","prompt":"\/\/Is féidir leat a mheas go bhfuil x, agus n is earráidí bailí, agus nach bhfuil 0 mar ainmníocht. \/\/<numerator>\/<denominator> i gcás ina bhfuil an t-uimhir iomlán dearfach ag an nimheoir agus ag an ainmneoir araon. \/\/ar shlí eile. Is ionadaíocht shraith de bhristeán iad x agus n araon, agus tá an fhormáid seo a leanas acu, \/\/x * n. Déantar an fheidhm a aisíoc fíor má mheastar go bhfuil x * n ina líon iomlán agus bréagach \/\/Is é do tasc feidhm a chur i bhfeidhm a shimpliúfaidh an abairt \/\/ >>> simplify(\"1\/5\", \"5\/1\")\n\/\/ true\n\/\/ >>> simplify(\"1\/6\", \"2\/1\")\n\/\/ false\n\/\/ >>> simplify(\"7\/10\", \"10\/2\")\n\/\/ false\nfunction simplify(x: string, n: string): boolean {\n","canonical_solution":"function simplify(x: string, n: string): boolean {\n    const parseFraction = (fraction: string): [number, number] => {\n        const [numerator, denominator] = fraction.split('\/').map(Number);\n        return [numerator, denominator];\n    };\n\n    const [xNumerator, xDenominator] = parseFraction(x);\n    const [nNumerator, nDenominator] = parseFraction(n);\n\n    \/\/ Multiply the fractions: (a\/b) * (c\/d) = (a*c) \/ (b*d)\n    const resultNumerator = xNumerator * nNumerator;\n    const resultDenominator = xDenominator * nDenominator;\n\n    \/\/ A product of fractions is a whole number if its numerator divided by denominator is an integer.\n    return resultNumerator % resultDenominator === 0;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = simplify;\n  assert.deepEqual(candidate(\"1\/5\", \"5\/1\"),true);\n  assert.deepEqual(candidate(\"1\/6\", \"2\/1\"),false);\n  assert.deepEqual(candidate(\"5\/1\", \"3\/1\"),true);\n  assert.deepEqual(candidate(\"7\/10\", \"10\/2\"),false);\n  assert.deepEqual(candidate(\"2\/10\", \"50\/10\"),true);\n  assert.deepEqual(candidate(\"7\/2\", \"4\/2\"),true);\n  assert.deepEqual(candidate(\"11\/6\", \"6\/1\"),true);\n  assert.deepEqual(candidate(\"2\/3\", \"5\/2\"),false);\n  assert.deepEqual(candidate(\"5\/2\", \"3\/5\"),false);\n  assert.deepEqual(candidate(\"2\/4\", \"8\/4\"),true);\n  assert.deepEqual(candidate(\"2\/4\", \"4\/2\"),true);\n  assert.deepEqual(candidate(\"1\/5\", \"5\/1\"),true);\n  assert.deepEqual(candidate(\"1\/5\", \"1\/5\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_145","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/ordú iad bunaithe ar a n-innéacs i sraith bunaidh. \/\/Nóta: má tá roinnt earraí ann a bhfuil suim den chineál céanna dá n-ailt, \/\/i dtríú ord ag ardú de réir suim a n-aicmí. \/\/Scríobh feidhm a chuirtear an tacar iomlán a thugtar ar fáil ar ordú \/\/ >>> order_by_points([1, 11, -1, -11, -12])\n\/\/ [-1, -11, 1, -12, 11]\n\/\/ >>> order_by_points([])\n\/\/ []\nfunction order_by_points(nums: number[]): number[] {\n","canonical_solution":"function order_by_points(nums: number[]): number[] {\n    const digitSum = (num: number): number => {\n        let sum = 0;\n        let value = Math.abs(num);\n        while (value > 0) {\n            sum += value % 10;\n            value = Math.floor(value \/ 10);\n        }\n        return sum;\n    };\n\n    return nums\n        .map((num, index) => ({ num, index, sumOfDigits: digitSum(num) }))\n        .sort((a, b) => {\n            if (a.sumOfDigits === b.sumOfDigits) {\n                return a.index - b.index;\n            }\n            return a.sumOfDigits - b.sumOfDigits;\n        })\n        .map(item => item.num);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"},{"task_id":"HumanEval_146","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/tá an chéad agus an dara digit de uimhir gan leith (1, 3, 5, 7, 9). \/\/líon na n-eilimintí sa tsraith atá níos mó ná 10 agus an dá \/\/Scríobh feidhm a ghlacann sraith de uimhreacha mar ionchur agus a thugann ar ais \/\/ >>> specialFilter([15, -73, 14, -15])\n\/\/ 1\n\/\/ >>> specialFilter([33, -2, -3, 45, 21, 109])\n\/\/ 2\nfunction specialFilter(nums: number[]): number {\n","canonical_solution":"function specialFilter(nums: number[]): number {\n    const isOdd = (digit: number): boolean => digit % 2 !== 0;\n\n    return nums.reduce((count, num) => {\n        const absNumStr = Math.abs(num).toString();\n        const firstDigit = parseInt(absNumStr[0]);\n        const lastDigit = parseInt(absNumStr[absNumStr.length - 1]);\n\n        if (num > 10 && isOdd(firstDigit) && isOdd(lastDigit)) {\n            return count + 1;\n        }\n\n        return count;\n    }, 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2, 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([]),0);\n}\n\ntest();"},{"task_id":"HumanEval_147","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/agus a [i] + a [j] + a [k] Is é a ilroinnt de 3. \/\/Cuir ar ais líon na dtríúile (a[i], a[j], a[k]) de a áit i < j < k, \/\/I gcás gach i (1 ≤ i ≤ n), luach a[i] = i * i - i + 1. \/\/Tugtar líon iomlán dearfach n duit. Caithfidh tú sraith iomlán a a fhad n a chruthú. \/\/ >>> get_max_triples(5)\n\/\/ 1\n\/\/ Explanation: \n\/\/ a = [1, 3, 7, 13, 21]\n\/\/ The only valid triple is (1, 7, 13).\nfunction get_max_triples(n: number): number {\n","canonical_solution":"function get_max_triples(n: number): number {\n    const a: number[] = [];\n\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    let count = 0;\n\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"},{"task_id":"HumanEval_149","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/Féadfaidh tú a mheas go mbeidh an fad céanna ag na focail go léir. \/\/Ba cheart don fheidhm sraith sreangacha a thabhairt ar ais in ord ordáilte. \/\/Má tá dhá fhocal den fhad céanna, ordú an sreang go aibítreach. \/\/Ba cheart an tacair a ordú leis an riail sin a thabhairt ar ais. \/\/Ba chóir go mbeadh ord an array ag ardú de réir fad gach focal, agus tú \/\/agus d'fhéadfadh dúbailtí a bheith ann. \/\/Is é an array i gcónaí ar ardán de shreangáin agus riamh ar ardán de uimhreacha, \/\/agus a aisíocann an t-earráid mar thoradh le ord ordáilte, \/\/scriosann sé na sreangacha a bhfuil fad neamhghnácha uaidh, \/\/Scríobh feidhm a ghlacann le sraith sreanga mar pharaiméadar, \/\/ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n\/\/ [\"aa\"]\n\/\/ >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n\/\/ [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[] {\n","canonical_solution":"function sorted_list_sum(lst: string[]): string[] {\n    \/\/ Filter out strings with odd lengths\n    const filtered = lst.filter(str => str.length % 2 === 0);\n    \/\/ Sort the array by length, then alphabetically\n    const sorted = filtered.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n    return sorted;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"},{"task_id":"HumanEval_150","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/a uimhir phríomh agus ba chóir go dtiocfadh luach y ar shlí eile. \/\/Clár simplí a d'fhéadfadh luach x a thabhairt ar ais má tá n \/\/ >>> x_or_y(7, 34, 12)\n\/\/ 34\n\/\/ >>> x_or_y(15, 8, 5)\n\/\/ 5\nfunction x_or_y(n: number, x: number, y: number): number {\n","canonical_solution":"function x_or_y(n: number, x: number, y: number): number {\n    function isPrime(num: number): boolean {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        \n        if (num % 2 === 0 || num % 3 === 0) return false;\n        \n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        \n        return true;\n    }\n\n    return isPrime(n) ? x : y;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = x_or_y;\n  assert.deepEqual(candidate(7, 34, 12),34);\n  assert.deepEqual(candidate(15, 8, 5),5);\n  assert.deepEqual(candidate(3, 33, 5212),33);\n  assert.deepEqual(candidate(1259, 3, 52),3);\n  assert.deepEqual(candidate(7919, -1, 12),-1);\n  assert.deepEqual(candidate(3609, 1245, 583),583);\n  assert.deepEqual(candidate(91, 56, 129),129);\n  assert.deepEqual(candidate(6, 34, 1234),1234);\n  assert.deepEqual(candidate(1, 2, 0),0);\n  assert.deepEqual(candidate(2, 2, 0),2);\n}\n\ntest();"},{"task_id":"HumanEval_151","nl":"gle_Latn","pl":"ts","prompt":"\/\/i an tacar atá neamhghnách. Ignore uimhreacha atá diúltach nó nach bhfuil integers. \/\/Ar mhaithe le sraith de uimhreacha, cuir suim chearnaigh na n-uimhreacha ar ais \/\/ >>> double_the_difference([1, 3, 2, 0])\n\/\/ 10\n\/\/ >>> double_the_difference([-1, -2, 0])\n\/\/ 0\n\/\/ >>> double_the_difference([9, -2])\n\/\/ 81\n\/\/ >>> double_the_difference([0])\n\/\/ 0\n\/\/ If the input array is empty, return 0.\nfunction double_the_difference(lst: number[]): number {\n","canonical_solution":"function double_the_difference(lst: number[]): number {\n    return lst\n        .filter(num => Number.isInteger(num) && num > 0 && num % 2 !== 0)\n        .reduce((sum, num) => sum + num * num, 0);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"},{"task_id":"HumanEval_152","nl":"gle_Latn","pl":"ts","prompt":"\/\/sampla: \/\/Is é an luach 0 agus mura bhfuil, is é an luach an difríocht abhlóideach idir an buille agus an scór. \/\/Fill ar ais ar array den fhad céanna a léiríonn cé chomh fada amach gach buille faoi thuairim a bhí. Má tá siad buille faoi thuairim go ceart, \/\/Tugtar dhá shraith scóir agus tuairimí de fhad comhionann duit, áit a léiríonn gach innéacs comhoiriúnú. \/\/Is é do tasc a chinneadh má tá duine guessed go ceart na torthaí de roinnt cluichí. \/\/Is cinnte gur fiú é a thabhairt faoi deara agus a chur i gcomparáid. \/\/Tá an t-eagrán seo ar fáil i dteangacha eile.\/\/Sílim go gcuimhneoimid go léir ar an mothú sin nuair a bhíonn toradh ar roinnt fada-an-fhantais\/\/ >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\/\/ [0, 0, 0, 0, 3, 3]\n\/\/ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\/\/ [4, 4, 1, 0, 0, 6]\nfunction compare(game: number[], guess: number[]): number[] {\n","canonical_solution":"function compare(game: number[], guess: number[]): number[] {\n    return game.map((score, index) => Math.abs(score - guess[index]));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_153","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/(tá a neart -1). \/\/return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is é an síneadh is láidre \/\/Tá an t-eispéireas seo ar fáil i ngach tír.\/\/Mar shampla, má tá tú a thabhairt \"Sliceanna\" mar an rang agus sraith de na \/\/roghnaigh an ceann a thagann ar dtús sa réimse. \/\/Má tá dhá leathnú nó níos mó ann a bhfuil an neart céanna acu, ba cheart duit \/\/format: ClassName.StrongestExtensionName. \/\/Ba chóir duit an síneadh is láidre a aimsiú agus sreang a thabhairt ar ais sa \/\/i ainm an fhorleathnaithe, tugtar an neart ag an gcroí CAP - SM. \/\/litricí i ainm an fhorleathnaithe, agus a ligean SM a bheith ar an líon na litreacha beaga \/\/Tá neart an leathnaithe mar seo a leanas: Lig CAP a bheith mar uimhir an chaipitil mhóra \/\/Is iad na síneadh a úsáid chun aicmí breise a uaslódáil chuig an rang.\/\/Tabharfar ainm rang (string) agus sraith de shíneachtaí duit. \/\/ >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\/\/ \"my_class.AA\"\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n","canonical_solution":"function Strongest_Extension(class_name: string, extensions: string[]): string {\n    let strongestExtension = '';\n    let maxStrength = -Infinity;\n\n    extensions.forEach(extension => {\n        const capCount = extension.split('').filter(char => char >= 'A' && char <= 'Z').length;\n        const smCount = extension.split('').filter(char => char >= 'a' && char <= 'z').length;\n        const strength = capCount - smCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    });\n\n    return `${class_name}.${strongestExtension}`;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\");\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\");\n}\n\ntest();"},{"task_id":"HumanEval_154","nl":"gle_Latn","pl":"ts","prompt":"\/\/Tá 2 fhocal tugtha duit. Ní mór duit fíor a thabhairt ar ais má tá an dara focal nó aon cheann dá rothaí ina fho-shraith sa chéad fhocal \/\/ >>> cycpattern_check(\"abcd\", \"abd\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"hello\", \"ell\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"whassup\", \"psus\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"abab\", \"baa\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"efef\", \"eeff\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"himenss\", \"simen\")\n\/\/ true\nfunction cycpattern_check(a: string, b: string): boolean {\n","canonical_solution":"function cycpattern_check(a: string, b: string): boolean {\n    for (let i = 0; i < b.length; i++) {\n        const rotation = b.slice(i) + b.slice(0, i);\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\/\/ Test cases\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); \/\/ false\nconsole.log(cycpattern_check(\"hello\", \"ell\")); \/\/ true\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); \/\/ false\nconsole.log(cycpattern_check(\"abab\", \"baa\")); \/\/ true\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); \/\/ false\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); \/\/ true","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cycpattern_check;\n  assert.deepEqual(candidate(\"xyzw\", \"xyw\"),false);\n  assert.deepEqual(candidate(\"yello\", \"ell\"),true);\n  assert.deepEqual(candidate(\"whattup\", \"ptut\"),false);\n  assert.deepEqual(candidate(\"efef\", \"fee\"),true);\n  assert.deepEqual(candidate(\"abab\", \"aabb\"),false);\n  assert.deepEqual(candidate(\"winemtt\", \"tinem\"),true);\n}\n\ntest();"},{"task_id":"HumanEval_155","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/Ag tabhairt iomlán, cuir array ar ais a bhfuil líon na n-aicmí páir agus neamhphéireacha aige faoi seach. \/\/ >>> even_odd_count(-12)\n\/\/ [1, 1]\n\/\/ >>> even_odd_count(123)\n\/\/ [1, 2]\nfunction even_odd_count(num: number): [number, number] {\n","canonical_solution":"function even_odd_count(num: number): [number, number] {\n    const numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let char of numStr) {\n        const digit = parseInt(char);\n        if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    return [evenCount, oddCount];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();"},{"task_id":"HumanEval_156","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí: \/\/Tairseacha: 1 <= num <= 1000 \/\/agus é a thabhairt ar ais i litreacha beaga. \/\/Ag tabhairt iomlán dhearfach, faigh a chomhfhreagras uimhreacha Rómhánacha mar shraith, \/\/ >>> int_to_mini_roman(19)\n\/\/ \"xix\"\n\/\/ >>> int_to_mini_roman(152)\n\/\/ \"clii\"\n\/\/ >>> int_to_mini_roman(426)\n\/\/ \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n","canonical_solution":"function int_to_mini_roman(number: number): string {\n    const romanNumerals: { [key: number]: string } = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',\n        5: 'v', 4: 'iv', 1: 'i'\n    };\n    \n    let result = '';\n    for (const value of Object.keys(romanNumerals).map(Number).sort((a, b) => b - a)) {\n        while (number >= value) {\n            result += romanNumerals[value];\n            number -= value;\n        }\n    }\n    \n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"},{"task_id":"HumanEval_157","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/90 céim. \/\/Is éard atá i dtríthiomán ceart-uillinn triantán ina bhfuil uillinn amháin ceart-uillinn nó \/\/Is é an t-am is mó a chaitear an t-am is mó a chaitear an t-am is mó.\/\/Ar a dtugtar na fadanna de na trí thaobh de thriantán. Fill ar ais fíor má tá an trí \/\/ >>> right_angle_triangle(3, 4, 5)\n\/\/ true\n\/\/ >>> right_angle_triangle(1, 2, 3)\n\/\/ false\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n","canonical_solution":"function right_angle_triangle(a: number, b: number, c: number): boolean {\n    const sides = [a, b, c].sort((x, y) => x - y);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"},{"task_id":"HumanEval_158","nl":"gle_Latn","pl":"ts","prompt":"\/\/charachtair, cuir ar ais an ceann a thagann ar dtús in ord léirscagrafach. \/\/Má tá líon uasta carachtair uathúla ag sraitheanna éagsúla, tá \/\/Tá focail éagsúla sa tsraith. Cuir an focal ar ais leis an líon uasta \/\/Scríobh feidhm a ghlacann le sraith sreanganna. \/\/ >>> find_max([\"name\", \"of\", \"string\"])\n\/\/ \"string\"\n\/\/ >>> find_max([\"name\", \"enam\", \"game\"])\n\/\/ \"enam\"\n\/\/ >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\/\/ \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n","canonical_solution":"function find_max(words: string[]): string {\n    function uniqueCharacterCount(word: string): number {\n        const uniqueChars = new Set(word);\n        return uniqueChars.size;\n    }\n\n    let maxWord = words[0];\n    let maxUniqueCount = uniqueCharacterCount(maxWord);\n\n    for (let i = 1; i < words.length; i++) {\n        const currentUniqueCount = uniqueCharacterCount(words[i]);\n        if (\n            currentUniqueCount > maxUniqueCount ||\n            (currentUniqueCount === maxUniqueCount && words[i] < maxWord)\n        ) {\n            maxWord = words[i];\n            maxUniqueCount = currentUniqueCount;\n        }\n    }\n\n    return maxWord;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"},{"task_id":"HumanEval_159","nl":"gle_Latn","pl":"ts","prompt":"\/\/Sampla: \/\/mura bhfuil go leor carróidí fágtha, itheann tú na carróidí fágtha go léir, ach beidh ocras ort fós. \/\/líon na gcarróit a bhí fágtha tar éis do bhia ] \/\/ba cheart duit sraith de [ líon iomlán na gcarróidí a itheadh tar éis do bhia a thabhairt ar ais, \/\/ach anois ní mór duit níos mó carróit a ithe chun béilí an lae a chomhlánú. \/\/Tá tú ar coileach ocras, agus tá tú ag ithe cheana féin ar líon áirithe de carróg, \/\/ >>> eat(5, 6, 10)\n\/\/ [11, 4]\n\/\/ >>> eat(4, 8, 9)\n\/\/ [12, 1]\n\/\/ >>> eat(1, 10, 10)\n\/\/ [11, 0]\n\/\/ >>> eat(2, 11, 5)\n\/\/ [7, 0]\n\/\/ Variables:\n\/\/ @number : integer\n\/\/ the number of carrots that you have eaten.\n\/\/ @need : integer\n\/\/ the number of carrots that you need to eat.\n\/\/ @remaining : integer\n\/\/ the number of remaining carrots thet exist in stock\n\/\/ Constrain:\n\/\/ * 0 <= number <= 1000\n\/\/ * 0 <= need <= 1000\n\/\/ * 0 <= remaining <= 1000\n\/\/ Have fun :)\nfunction eat(number: number, need: number, remaining: number): number[] {\n","canonical_solution":"function eat(number: number, need: number, remaining: number): number[] {\n    const totalEaten = number + Math.min(need, remaining);\n    const carrotsLeft = Math.max(remaining - need, 0);\n    return [totalEaten, carrotsLeft];\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4, 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2, 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4, 5, 1),[5, 0]);\n}\n\ntest();"},{"task_id":"HumanEval_160","nl":"gle_Latn","pl":"ts","prompt":"\/\/Tá oibreoir amháin ar a laghad ag sraith oibreoir, agus tá dhá oibríocht ar a laghad ag sraith oibríocht. \/\/Is sraith de na n-intéir neamh-diúltach é an oibríocht. \/\/Tá fad an tsraith oibríochtí cothrom le fad an tsraith oibríochtí mínus ceann. \/\/Nóta: \/\/=> toradh = 9 \/\/toradh = 2 + 3 * 4 - 5 \/\/array = [2, 3, 4, 5] \/\/oibreoir['+', '*', '-'] \/\/Sampla: \/\/Exponentiation (**) \/\/Roinnte ar an urlár ( \/\/) \/\/Iolrú ( *) \/\/Tarraingt ( - ) \/\/Cuir ( +) \/\/Na hoibríochtaí algebra bunúsacha: \/\/an abairt agus meastóireacht an abairt seo a thabhairt ar ais. \/\/Is é an dara sraith sraith de líon iomlán. Úsáid an dá sraith a thugtar chun an algebra a thógáil \/\/Ar an gcéad sraith tá oibríochtaí algebra bunúsacha, agus function do_algebra(operator: string[], operand: number[]): number {\n","canonical_solution":"function do_algebra(operator: string[], operand: number[]): number {\n    let expression = operand[0].toString();\n\n    for (let i = 0; i < operator.length; i++) {\n        expression += ` ${operator[i]} ${operand[i + 1]}`;\n    }\n\n    return Math.floor(eval(expression));\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"\/\/\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"},{"task_id":"HumanEval_161","nl":"gle_Latn","pl":"ts","prompt":"\/\/Samplaí \/\/Ba cheart don fheidhm an sreang a tháinig as a aisíoc. \/\/Mura bhfuil aon litreacha sa shraith, cas an shraith. \/\/Seachas sin é a choinneáil mar atá. \/\/má litir é s[i], a chúrsa a aisiompú ó íos go barr nó vice versa, \/\/Tugtar sraith s duit. \/\/ >>> solve(\"1234\")\n\/\/ \"4321\"\n\/\/ >>> solve(\"ab\")\n\/\/ \"AB\"\n\/\/ >>> solve(\"#a@C\")\n\/\/ \"#A@c\"\nfunction solve(s: string): string {\n","canonical_solution":"function solve(s: string): string {\n    let hasLetter = \/[a-zA-Z]\/.test(s);\n    if (hasLetter) {\n        return s.split('').map(char => {\n            if (\/[a-z]\/.test(char)) {\n                return char.toUpperCase();\n            } else if (\/[A-Z]\/.test(char)) {\n                return char.toLowerCase();\n            } else {\n                return char;\n            }\n        }).join('');\n    } else {\n        return s.split('').reverse().join('');\n    }\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();"},{"task_id":"HumanEval_162","nl":"gle_Latn","pl":"ts","prompt":"\/\/Má tá 'téacs' ina shreang folamh, filleadh ar undefined. \/\/Ag tabhairt sreang 'téacs', cuir a sreang comhionann hash md5 ar ais. \/\/ >>> string_to_md5(\"Hello world\")\n\/\/ \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text: string): string | undefined {\n","canonical_solution":"import * as crypto from 'crypto';\n\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();"},{"task_id":"HumanEval_163","nl":"gle_Latn","pl":"ts","prompt":"\/\/Mar shampla: \/\/agus b, in ord ag ardú. \/\/Ar fáil dhá intíre dearfach a agus b, a thabhairt ar ais an fiú digits idir a \/\/ >>> generate_integers(2, 8)\n\/\/ [2, 4, 6, 8]\n\/\/ >>> generate_integers(8, 2)\n\/\/ [2, 4, 6, 8]\n\/\/ >>> generate_integers(10, 14)\n\/\/ []\nfunction generate_integers(a: number, b: number): number[] {\n","canonical_solution":"function generate_integers(a: number, b: number): number[] {\n    let result: number[] = [];\n    \n    \/\/ Get starting and ending points in sorted order\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    \n    \/\/ Loop through the range\n    for (let i = start; i <= end; i++) {\n        if (i % 2 === 0) {  \/\/ Check if the digit is even\n            result.push(i);\n        }\n    }\n    \n    return result;\n}","tests":"declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = generate_integers;\n  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(17, 89),[]);\n}\n\ntest();"}]