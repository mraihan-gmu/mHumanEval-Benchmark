task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,knc_Arab,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""تَفَقَّدْ إِنْ كَانَ فِي قَائِمَةِ الأَرْقَامِ، أَيُّ رَقْمَيْنِ أَقْرَبُ مِنْ بَعْضِهِمَا مِنْ الْعُتْقِ. مِثَال: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) كَذِبَ >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) صَحِيحٌ """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,knc_Arab,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""إِدْخَالُ هَذِهِ الْمُدَّةِ سِلْسِلَةٌ مُتَكَوِّنَةٌ مِنْ جُمُوعٍ مُتَعَلِّقَةٍ مِنْ قُرْبَانٍ مُتَعَلِّقَةٍ. وَيَجِبُ أَنْ تُفَرِّقَ تِلْكَ الْجُمُوعَ فِي سِلْسِلَةٍ مُتَفَرِّقَةٍ وَتُرْجِعَ بِهَا قِيمَتَهَا. وَتَتَمَيَّزُ الْجُمُوعُ (كُلُّ قُرْبَانٍ مُتَعَلِّقٍ مُغَلَّقٌ) وَلَا تُعَلِّقُ بَيْنَهَا.""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,knc_Arab,python,"

def truncate_number(number: float) -> float:
    """"""دَعْ نَصْبَ عَدَدِ الْمُتَغَيِّرِ الْمُوجِبِ، فَيَجُوزُ تَحْلِيلُهُ إِلَى وَجْهِ الْكَمِيلِ (أَكْبَرُ كَمِيلٍ أَصْغَرُ مِنْ الْعَدَدِ الْمَعْطُوفِ) وَالْعُشْرِيَّةِ (الْبَاقِيَةُ أَصْغَرُ مِنْ 1). رُدُّ الْعُشْرِيَّةَ مِنْ الْعَدَدِ.""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,knc_Arab,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""تَعْطَى لَكَ قِيَاسَةُ أَدَايَةِ وَسَحْبِ عَمَلٍ فِي حَسَبِ بَنَكٍ يَبْدَأُ بِصِفَرِ رَصِيدٍ. مَهْمَلَتُكَ هِيَ أَنْ تَكْشِفَ إِذَا كَانَ رَصِيدُ الْحَسَبِ دُونَ الصِفَرِ فِي أَيِّ نَوْبٍ، وَفِي تِلْكَ النَّوْبِ يَجِبُ أَنْ تَرُدَّ صَحِيحًا. وَإِلَّا فَيَجِبُ أَنْ تَرُدَّ كَذِبًا. مِثْلُ: >>> below_zero([1, 2, -4, 5])""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,knc_Arab,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""لِلِسْتِدَاخِلِ أَرْبَعَةِ أَلْفَ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَفِ أَلْفِ أَلْفِ""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,knc_Arab,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""إدْخُلْ عَدَدَ ""مُقَيِّدٍ"" بَيْنَ كُلِّ عَنْصَرَيْنِ مُتَتَابِعَيْنِ مِنْ قِيمَةِ الْمَدْخُولِ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,knc_Arab,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""دَخَلَتْ هَذِهِ الْمُدَّةُ سِلْسِلَةً مُمَثَّلَةً بِجَمَاعَاتٍ لِلْقُفُوفِ الْمُقَرَّعَةِ مُفَارَقَةً بِالْفُرُوجِ. لِكُلِّ جَمَاعَةٍ، أَخْرِجْ أَعْمَقَ دَرَجَةِ الْقُفُوفِ. مِثْلُ (() (()) لَهُ دَرَجَتَانِ كُلَّمَا عَلَى الْأَكْثَرِ وَلِ ((())) لَهُ ثَلَاثَةٌ.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,knc_Arab,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""تَفْتِيلُ قِيَامَةَ إِدْخَالِ السُّلُولِ لِمَنْ يَتَضَمَّنُ سُلُولَ مَعْطُوفَةٍ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,knc_Arab,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""لِلْمَدْفُوعِ لِلْأَعْدَادِ، رُدَّ مَوْضُوعًا مِنْ جُمْلَةٍ وَنَاتِجٍ لِجَمِيعِ الأَعْدَادِ فِي الْمَدْفُوعِ. الْجُمْلَةُ الْفَارِغَةُ تَكُونُ سِوَى 0 وَالنَّاتِجُ الْفَارِغُ تَكُونُ سِوَى 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,knc_Arab,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""مِنْ قِيمَةِ سَمْعِيَّةِ، تَخْرُجُ قِيمَةُ أَكْثَرِ مَا يُوجَدُ فِي الْمُتَتَابَعَةِ. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,knc_Arab,python,"

def is_palindrome(string: str) -> bool:
    """"""اِجْعَلْ اَلْأَقْصَرَ بَالِنْدُومَ يَبْدَأُ بِالْخَطِّ الْمَوْجُودِ. اَلْخُطَّةُ مُبَسَّطَةٌ: اِجْعَلْ اَلْأَطْوَلَ بَعْدَ الْخَطِّ الْمَوْجُودِ الَّذِي هُوَ بَالِنْدُومٌ. اِضْمَمْ إِلَى آخِرِ الْخَطِّ عَكْسَ بَابِ الْخَطِّ الَّذِي يَأْتِي قَبْلَ الْخَبَرِ الْمَوْجُودِ.""""""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""تَجَرَّبْ إِنْ كَانَتْ السِّلْسِلَةُ عَلَيْهَا""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,knc_Arab,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""دَخَلْنَا سِلْسِلَتَيْنِ a و b مَعْ 1 و 0 فَيَكُونُ النَّتِيجَةُ عَلَى خُطَاتِ الْخُطَاتِ أَيْضًا سِلْسِلَةً.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,knc_Arab,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""مِنْ لَسْطِ السَّلاَلِ، ارْجِعْ أَطْوَلَهُ. ارْجِعْ أَوَّلَهُ فِي حَالِ سَلاَلٍ مُتَعَدِّدِينَ مِنْ طُولٍ وَاحِدٍ. ارْجِعْ لاَ شَيْءَ فِي حَالِ إِنْتِزَالِ الْمُدْخَلِ. >>> أَطْوَلُ (([]) >>> أَطْوَلُ ((['a'', 'b', 'c']) 'أَطْوَلُ ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,knc_Arab,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""يَرُدُّ أَكْبَرَ مُقَسِّمٍ مُشْتَرَكٍ لِعَدَدَيْنِ مِنْ أَعْدَادِ الْكُلِّ أَوْ بِالْكُلِّ أَوْ بِالْكُلِّ أَوْ بِالْكُلِّ أَوْ بِالْكُلِّ أَوْ بِالْكُلِّ أَوْ بِالْكُلِّ أَوْ بِالْكُلِّ""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,knc_Arab,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""يَعُودُ لِسَمَاءَ كُلِّ أَوَّلَاتِ الْمُدَخَّلِ مِنْ أَقْصَرِهَا إِلَى أَطْوَلِهَا >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,knc_Arab,python,"

def string_sequence(n: int) -> str:
    """"""يَعُودُ سِلْسِلَةً مَوْضُوعَةً بِأَرْضِ أَرْقَامٍ مُبْتَدَأَةً مِنْ 0 إِلَى n مَشْمُولَةً.""""""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,knc_Arab,python,"

def count_distinct_characters(string: str) -> int:
    """"""مَنْطِقٌ، تَبَيَّنْ كَمْ حَرْفٍ مُتَمَيِّزٍ (بِغَيْرِ حَالٍ) هُوَ مِنْ >>> count_distinct_characters ((('xyzXYZ') 3 >>> count_distinct_characters ((('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,knc_Arab,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""دَخَلَتْ هَذِهِ الوَظِيفَةُ سِلْسِلَةً تَمْثِيلُ النُّوتَاتِ المُوسِيقِيَّةِ في صُورَةٍ مُتَمَيِّزَةٍ. مُهمَتُكَ أن تُحَلِّلَ قِطَاعَ سِلْسِلَةِ الأَعْدَادِ المُتَوافِقَةِ لِكَثْرَةِ الضَّرَبَاتِ. هُنَا أسْطِلَةٌ: 'o' - note, lasts beats 'o' - بِرَبْعَةِ ضَرَبَاتٍ. 'o' - بِنَصٍّ. 'o' - بِنَصٍّ. 'o' - بِنَصٍّ. 'o' - بِنَصٍّ. 'o' - بِنَصٍّ. 'o' - بِنَصٍّ. 'o' - بِنَصٍّ. 'o' - بِنَصٍّ. 'o' - بِنَصِنْتٌ.""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,knc_Arab,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""تَجِدْ كَمْ مَرَّةٍ يُوجَدُ سُلْطَانٌ مُعَيَّنٌ فِي السُّلْطَانِ الْأَصْلِيِّ. عُدَّ الْمَوَاقِعَ الْمُتَتَعَاوِنَةَ. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,knc_Arab,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""إِدْخَالُ سِلْسِلَةٍ مُحَدَّدَةٍ بِفَسْحِ الْأَرْقَامِ مِنْ ""صَفْرٍ"" إِلَى ""تِسْعٍ"". الْخِيَارُ الصَّحِيحُ ""صَفْرٌ""، ""وَاحِدٌ""، ""اثْنَانِ""، ""ثَلَاثَةٌ""، ""أَرْبَعَةٌ""، ""خَمْسَةٌ""، ""سِتَّةٌ""، ""سَبْعَةٌ""، ""ثَمَانٍ"" وَ ""تِسْعٌ"". رُدُّ السِّلْسِلَةَ بِأَرْقَامٍ مُنْتَقَطَةٍ مِنْ أَصْغَرِهَا إِلَى أَكْبَرِهَا >>> sort_numbers ((ثَلَاثَةٌ وَاحِنْمَةٌخَخَمْسَةٌخَخَخَمْسَةٌ""""""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,knc_Arab,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""مِنْ قِيمَةِ أَرْبَعِ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ أَرْبَعِينَ""""""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,knc_Arab,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""دَعْ لِسْمَةْ أَرَامِيْ (مِنْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْدَمْ عَنْ عَنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْنْن""""""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,knc_Arab,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""فِلْتَرْ مَنْ أَيْقَاتِ بَيْثُونَ لِلْأَصْحَابِ فَقَطْ >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,knc_Arab,python,"

def strlen(string: str) -> int:
    """"""رَجَعَ طُولُ السِّلْسِلَةِ المَوْصُوفَةِ >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,knc_Arab,python,"

def largest_divisor(n: int) -> int:
    """"""لِعَدَدٍ مَعْطُوْدٍ n، اعْلَمْ أَكْبَرَ عَدَدٍ يَقْسِمُ n بِنَظَمٍ، أَصْغَرَ مِنْ n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,knc_Arab,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""رَجَعَ لِسْمُ العَوَازِرِ الأُولَى لِكُلِّ عَدَدٍ مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى مُسَمَّى""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,knc_Arab,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""مِنْ قِسمَةِ الأَعدادِ الصحِيَّةِ، أَزِلْ كُلَّ العِنَادِيْنِ الْوَاقِعِيْنَ أكثر مِنْ مَرَّةٍ. اِحْفَظْ تَرْتِيبَ العِنَادِيْنِ بِمَا فِي الإِدْخَالِ. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,knc_Arab,python,"

def flip_case(string: str) -> str:
    """"""لِسِلْسِلَةٍ مَعْطُوفَةٍ، تَقَلَّبْ حُرُوفَ حَرْفٍ صَغِيرٍ إِلَى حَرْفٍ كَبِيرٍ وَحَرْفٍ كَبِيرٍ إِلَى حَرْفٍ صَغِيرٍ. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,knc_Arab,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> مُتَرَابِطُ (([]) ' ' >>> مُتَرَابِطُ ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,knc_Arab,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""تَفْتِيلُ قِيَاسَةَ السُّلُولِ الْمُدْخَلَةِ لِلْمُبْتَدَأَاتِ بِالْمَبْدَأِ. >>> تَفْتِيلُ_بِالْمَبْدَأِ (([], 'a') [] >>> تَفْتِيلُ_بِالْمَبْدَأِ ((['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,knc_Arab,python,"

def get_positive(l: list):
    """"""رُدَّ فَقَطْ أَرْكَانَ الْجِنْسِ الْمُوجِبَةَ فِي الْقَائِمَةِ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,knc_Arab,python,"

def is_prime(n):
    """"""رُدَّ صَحِيحًا إِنْ كَانَ عَدَدٌ مُعَيَّنًا أَوَّلًا، وَكَذِبًا إِلَّا. >>> is_prime(6) كَذِبٌ >>> is_prime(101) صَحِيحٌ >>> is_prime(11) صَحِيحٌ >>> is_prime(13441) صَحِيحٌ >>> is_prime(61) صَحِيحٌ >>> is_prime(4) كَذِبٌ >>> is_prime(1) كَذِبٌ """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,knc_Arab,python,"import math


def poly(xs: list, x: float):
    """"""xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. وَأَيْضًا، find_zero يَأْخُذُ الْقَائِمَةَ xs بِعَدَدِ الْمُعَدِّلَاتِ وَأَكْبَرِ الْمُعَدِّلَاتِ غَيْرِ الصَّفْرِ وَهُوَ يَضْمَنُ حَلًّا. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""يَتَقَوَّمُ كَثُرَيْنِيَّةً بِمُعَدِّدِي xs فِي النُّقْصَةِ x. يَرُدُّ xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,knc_Arab,python,"

def sort_third(l: list):
    """"""تَأْخُذُ هَذِهِ الْمَنْفَعَةُ قِطَاعَةً لِيَرُدَّهَا بِمِثْلِهَا فِي الْمَعَانِي الَّتِي لَا تَقْسَمُ بِثَلَاثَةٍ، وَتَكُونُ قِيَامُهَا فِي الْمَعَانِي الَّتِي تَقْسَمُ بِثَلَاثَةٍ مُسَاوِيَةً لِقِيَامِ الْمُتَعَانِيَاتِ لِلْمَعَانِي، وَتَكُونُ مُنْتَقَمَةً. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,knc_Arab,python,"

def unique(l: list):
    """"""يَعُودُ مُصَنَّفَةً فَرْدَةً فِي الْقَائِمَةِ >>> فَرْدَةً (([5, 3, 5, 2, 3, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,knc_Arab,python,"

def max_element(l: list):
    """"""يَرُدُّ الْعَلَى الْعَلَى فِي الْقَائِمَةِ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,knc_Arab,python,"

def fizz_buzz(n: int):
    """"""يَعُودُ عَدَدَ مَرَّاتِ الْعَدَدِ 7 يَظْهَرُ فِي أَعْدَادٍ سَمِيَّةٍ أَقَلَّ مِنْ n تَقْسَمُ بِ 11 أَوْ 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,knc_Arab,python,"

def sort_even(l: list):
    """"""تَأْخُذُ هَذِهِ الْمَنْطِقَةُ قِطَاعَةً لِيَرُدَّهَا بِمِثْلِهَا فِي الْمَوَاضِعِ الْعَدِيدَةِ، وَتَكُونُ قِيمَتُهَا فِي الْمَوَاضِعِ الزَّوَائِدِ مِثْلَ قِيمَةِ الْمَوَاضِعِ الزَّوَائِدِ لِلْمَوَاضِعِ الْعَدِيدَةِ، وَتَكُونُ مُنَقَّبَةً.""""""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,knc_Arab,python,"

def encode_cyclic(s: str):
    """"""يَأْخُذُ كَسِلْطَةِ إِدْخَالٍ مُشَفَّرَةٍ بِمَنْطِقِ encode_cyclic. يَرُدُّ سِلْطَةً مُشَفَّرَةً.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""يَعُودُ سِلْسِلَةً مُشَفَّرَةً بِجَمَاعَاتِ تَدَوُّرٍ مِنْ ثَلَاثِ أَحْرُفٍ.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,knc_Arab,python,"

def prime_fib(n: int):
    """"""prime_fib يَرُدُّ عَدَدَ نَوْمِيَّةٍ هُوَ عَدَدُ فِبُونَاتْكِي وَهُوَ أَيْضًا أَوَّلُ. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,knc_Arab,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero يَأْخُذُ لِسَانَ أَعْدَادٍ كَدَخْلٍ. يَرُدُّ صَحِيحًا إِذَا كَانَ فِي الْلِسَانِ ثَلَاثَةُ أَعْدَادٍ مُتَمَيِّزَةٍ تَجْمَعُ إِلَى الصَّفْرِ، وَيَرُدُّ كَذِبًا إِلَّا. >>> triples_sum_to_zero([1, 3, -2, 1]) كَذِبًا >>> triples_sum_to_zero([1, 3, -2, 1]) صَحِيحًا >>> triples_sum_to_zero([1, 2, 3, 7]) كَذِبًا >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) صَحِيحًا >>> triples_sum_to_zero""""""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,knc_Arab,python,"

def car_race_collision(n: int):
    """"""تَخَيَّلْ سَبِيلًا مُسْتَقِيمًا بِطُولِهِ بِلَا حَدٍّ. نَوْرَاتٌ تَسِيرُ مِنْ شِمَالٍ إِلَى يَمِينٍ; فِي نَفْسِ الْوَقْتِ، نَوْرَاتٌ مُخْتَلِفَةٌ مِنْ نَوْرَاتٍ تَسِيرُ مِنْ يَمِينٍ إِلَى شِمَالٍ. يَبْدَأُ النَّوْرَانِ مِنْ بَعِيدٍ عَنْ بَعْضِهِمَا. تَسِيرُ كُلُّهُمَا بِسُرْعَةٍ مُتَسَاوِيَةٍ. قَالَ النَّوْرَانِ يَصْطَعَانِ.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,knc_Arab,python,"

def incr_list(l: list):
    """"""رَجَعَ الْقَائِمَةُ بِالْعَنَاصِرِ الْمُتَزَايِدَةِ بِ1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,knc_Arab,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero يَأْخُذُ لِسَانَ أَعْدَادٍ كَدَخْلٍ. يَرُدُّ صَحِيحًا إِذَا كَانَ فِي الْلِسَانِ عَنْهُ عَنْصَرَانِ مُتَمَيِّزَانِ يَجْمَعَانِ إِلَى الصَّفْرِ، وَيَرُدُّ كَذِبًا إِلَّا. >>> pairs_sum_to_zero([1, 3, -2, 1]) كَذِبًا >>> pairs_sum_to_zero([1, 3, -2, 1]) كَذِبًا >>> pairs_sum_to_zero([1, 2, 3, 7]) كَذِبًا >>> pairs_sum_to_zero(([2, 4, -5, 3, 5, 7]) صَحِيحًا >>> pairs_sum_to_zero""""""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,knc_Arab,python,"

def change_base(x: int, base: int):
    """"""تَغَيَّرْ قَاعِدَةَ العَدَدِ لِلْمَدْخُولِ عَدَدَ x لِلْقَاعِدَةِ. رُدَّ التَّمْثِيلَ لِلْخَطِّ بَعْدَ التَّحْوِيلِ. أَرْكَانُ القَاعِدَةِ اِلَى 10. >>> تَغَيُّرْ_قَاعِدَةِ{8}، 3) '22' >>> تَغَيُّرْ_قَاعِدَةِ{8}، 2) '1000' >>> تَغَيُّرْ_قَاعِدَةِ{7}، 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,knc_Arab,python,"

def triangle_area(a, h):
    """"""مُعَطَى طُولِ جَانِبٍ وَعَالِيَةُ مَوْضِعِ عَوْدٍ لِمُثَلَّثٍ. >>> مُثَلَّثٌ_مَوْضِعُ ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,knc_Arab,python,"

def fib4(n: int):
    """"""فَبَابُ أَرْبَعِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنَ وَثَلَاثِيْنِيْنَ وَاَرْنِيْنَ وَاَ وَرْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنْنْنْنْنْنْنْنْنْنْنْنْنْ""""""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,knc_Arab,python,"

def median(l: list):
    """"""رَجَعَتْ وَسَطَ العَنَوَاتِ فِي القَائِمَةِ ل. >>> وَسَطَ (([3, 1, 2, 4, 5]) 3 >>> وَسَطَ (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,knc_Arab,python,"

def is_palindrome(text: str):
    """"""يَتَفَقَّدُ إِنْ كَانَتْ سِلْسِلَةً مُعَيَّنَةً عَلَى عَدَدِ الْمُتَعَيِّنَاتِ >>> is_palindrome ((')) True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,knc_Arab,python,"

def modp(n: int, p: int):
    """"""عُودْ 2^n مودِلُو p (تَعَرَّفْ بِالأَرْقَامِ). >>> مودِلُو p ({3}، 5} 3 >>> مودِلُو p ({1101، 101) 2 >>> مودِلُو p ({0}، 101) 1 >>> مودِلُو p ({3}، 11) 8 >>> مودِلُو p ({100، 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,knc_Arab,python,"

def encode_shift(s: str):
    """"""يَأْخُذُ كَسِلْطِ إِدْخَالٍ مُشَفَّرٍ بِمَنْطِقِ encode_shift. يَرُدُّ سِلْطَ مُشَفَّرٍ.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""يَعُودُ سِلْطَةً مُشَفَّرَةً بِتَحْوِيلِ كُلِّ حَرْفٍ بِخَمْسٍ فِي الْأَلِفِ.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,knc_Arab,python,"

def remove_vowels(text):
    """"""remove_vowels عَمَلٌ يَأْخُذُ السِّلْسِلَةَ وَيَرُدُّ السِّلْسِلَةَ بِغَيْرِ حُرُوفٍ. >>> remove_vowels ((('') ' ' >>> remove_vowels ((('abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,knc_Arab,python,"

def below_threshold(l: list, t: int):
    """"""يَعُودُ صَحِيحًا إِنْ كَانَ كُلُّ الأَرْقَامِ فِي الْقَائِمَةِ لَا تَتَعَدَّى الْعَتَبَةَ t. >>> below_threshold (([1, 2, 4, 10], 100) صَحِيحٌ >>> below_threshold (([1, 20, 4, 10], 5) كَذِبٌ """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,knc_Arab,python,"

def add(x: int, y: int):
    """"""أَضِفْ عَدَدَيْنِ x و y >>> أَضِفْ ((2, 3) 5 >>> أَضِفْ ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,knc_Arab,python,"

def same_chars(s0: str, s1: str):
    """"""تَحَقَّقْ إِنْ كَانَ لِكَلِمَتَيْنِ حَرْفَانِ مُتَشَابِهَانِ. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddddabc') True >>> same_chars (('dddddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars ((('abcdd', 'dddddddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,knc_Arab,python,"

def fib(n: int):
    """"""يَعُودُ نَوْمُ فِبُونَاتْكِي. >>> فِبُونَاتْكِي10) 55 >>> فِبُونَاتْكِي1) 1 >>> فِبُونَاتْكِي8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,knc_Arab,python,"

def correct_bracketing(brackets: str):
    """"""brackets is a string of ""<"" and "">"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,knc_Arab,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> مُونُوتُونِيٌّ (([1, 2, 4, 20]) True >>> مُونُوتُونِيٌّ (([1, 20, 4, 10]) False >>> مُونُوتُونِيٌّ (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,knc_Arab,python,"

def common(l1: list, l2: list):
    """"""رَجَعَ مُنْتَقَطَةً فَرْدَةً مُشْتَرَكَةً لِلْقَوْمِ. >>> مُشْتَرَكَةً (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> مُشْتَرَكَةً (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,knc_Arab,python,"

def largest_prime_factor(n: int):
    """"""رُدَّ أَكْبَرَ عَدَدِ أَوَّلِ نَوْمٍ مِنْ نَوْمٍ.""""""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,knc_Arab,python,"

def sum_to_n(n: int):
    """"""sum_to_n عِلْمٌ يُجَمِّعُ الأَرْقَامَ مِنْ 1 إلى n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,knc_Arab,python,"

def correct_bracketing(brackets: str):
    """"""brackets is a string of ""("" and "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,knc_Arab,python,"

def derivative(xs: list):
    """"""xs يَمْثِلُ كَافِيَاتِ كَثُرَيْتٍ. xs[0] + xs[1] * x + xs[2] * x^2 + .... رُدُّ مُشتَقَّةَ هَذَا الْكَثُرَيْتِ فِي نَفْسِ الشَّكْلِ. >>> مُشتَقَّةُ ((([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> مُشتَقَّةُ (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,knc_Arab,python,"

def fibfib(n: int):
    """"""فَبَبَبْبَبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْبْ""""""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,knc_Arab,python,"
FIX = """"""اِكْتُبْ فَعْلَةَ vowels_count الَّتِي تَأْخُذُ سِلْسِلَةً تَمْثُلُ كَلِمَةً كَدَخْلٍ وَتَرُدُّ عَدَدَ الْوَاوِي فِي السِّلْسِلَةِ. الْوَاوَي فِي هَذِهِ الْحَالِ هُمْ 'a', 'e', 'i', 'o', 'u'. هُنَا, 'y' هُوَ وَاوٌ أَيْضًا, وَلَكِنْ فَقَطْ إِذَا كَانَ فِي آخِرِ الْكَلِمَةِ. مِثَال: >>> vowels_count (((""abcde"") 2 >>> vowels_count (((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""أَضِفْ مَحَالَةَ الْمِحَنِ""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,knc_Arab,python,"
def circular_shift(x, shift):
    """"""دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ دَوَرْ""""""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,knc_Arab,python,"
def digitSum(s):
    """"""تَمْرَةُ اِكْتِتَابِ دَرَجَةٍ تَتَّخِذُ سِلْسِلَةً كَدَخْلٍ وَتَرُدُّ جَمْعَ الْحُرُوفِ الْعُلْيَا فَقَطْ كُدُوْدَ أَسْكِيْ. مَثَلُ: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,knc_Arab,python,"
def fruit_distribution(s,n):
    """"""فِي هَذِهِ المَسَائِلِ، سَتُعْطَى سِلْسِلَةً تَمْثِلُ عَدَدَ التُّفَّاحِ وَ البَتَانِجِ الْمُوزَعَةِ فِي سَلَّةٍ مِنْ فَاكِهَةٍ تَتَضَمَّنُ التُّفَّاحَ وَ البَتَانِجَ وَ الفَاكِهَةَ الْمَنْجُوْسَ. مُعْطَى السِّلْسِلَةُ الَّتِي تَمْثِلُ إجْمَاعَ العَدَدِ لِلْبَتَانِجِ وَ التُّفَّاحِ وَ العَدَدِ الأَكْمَلِ الَّذِي يَمْثِلُ إجْمَاعَ العَدَدِ لِلَّةِ فِي السَّةِ، عَدَدَدَدُ الفَاكِيْرِيْ""""""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,knc_Arab,python,"
def pluck(arr):
    """"""""إِذَا أَنَّ مَصْفَرًا يَمْثُلُ فَرْعًا مِنْ شَجَرَةٍ لَهَا عُقُودُ سَمْعٍ غَيْرُ سَبِيلِيَّةٍ فَمُهِمَّةٌ فَالْمَصْفَرُ الْمَقْبُولُ يَجِبُ أَنْ يَكُونَ الْعُقُودُ الْمَقْبُولُ الْأَصْغَرُ وَيَكُونُ الْعُقُودُ الْأَصْغَرُ وَيَكُونُ الْعُقُودُ الْأَصْغَرُ وَيَكُونُ الْعُقُودُ الْأَصْغَرُ وَيَكُونُ الْأَصْغَرُ وَيْرُ وَكُونُ وَيَكُونُونُ وَيْنَا وَا وَاَاَ وَاَيْ وَاَاَ وَاَاَ وَاَاَ وَاَاَ وَاَ وَاَاَ وَاَ وَاَ وَاَاَ وَاَ وَاَاَ وَاَ وَ وَاَاَ وَ وَاَ وَاَاَ وَ وَاَ وَاَ وَاَ وَ وَاَ وَاَ وَ وَ وَاَاَ وَ وَاَ وَ وَ وَاَاَ وَ وَ وَاَ وَاَ وَ وَ وَ وَ وَ وَاَ وَ وَ وَ وَ وَ وَاَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ وَ و""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,knc_Arab,python,"
def search(lst):
    '''تُعْطَى لِسْمَةٌ غَيْرُ فَارِغَةٍ مِنْ أَعْدَادِ الْأَعْدَادِ الْمُوجِبَةِ. رُدَّ أَعْظَمَ عَدَدٍ أَكْبَرَ مِنْ الصَّفْرِ وَلَهُ تَكَاثُرٌ أَكْبَرُ مِنْ أَوْ يُسَاوِي قِيمَةَ الْعَدَدِ الْأَعْدَادِيِّ نَفْسِهِ. تَكَاثُرُ عَدَدِ الْأَعْدَادِ عَدَدُ الْمَرَّاتِ الَّتِي يَظْهَرُ فِي الْلِسْمَةِ. إِنْ لَمْ تَكُنْ قِيمَةٌ مِثْرَةٌ.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,knc_Arab,python,"
def strange_sort_list(lst):
    '''فَإِنْ أَخَذْتَ فِي الْمَسْأَلَةِ فَأَنْتَ مُسْتَقِيمٌ. فَإِنْ أَخَذْتَ فِي الْمَسْأَلَةِ فَأَنْتَ مُسْتَقِيمٌ. فَإِنْ أَخَذْتَ فِي الْمَسْأَلَةِ فَأَنْتَ مُسْتَقِيمٌ. فَإِنْ أَخَذْتَ فِي الْمَسْأَلَةِ فَأَنْتَ مُسْتَقِيمٌ.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,knc_Arab,python,"
def triangle_area(a, b, c):
    '''مَعْطُوفٌ بِطُولِ الْجَانِبَيْنِ مِنْ ثُلُثٍ. رُدُّوا مَسْطَحَ الثُّلُثِ مُدَوَّرًا إِلَى 2 دَسَمَلٍ إِذَا كَانَ الْجَانِبَانِ ثُلُثًا صَحِيحًا. وَإِلَّا رُدُّوا -1 ثَلَاثَةُ جَانِبَيْنِ يَصْنَعَانِ ثُلُثًا صَحِيحًا إِذَا كَانَتْ جُمْلَةُ أَيِّ جَانِبَيْنِ أَكْبَرَ مِنْ جَانِبِ الثُّلُثِ.'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,knc_Arab,python,"
def will_it_fly(q,w):
    '''اِكْتُبْ دَلِيلًا يَرُدُّ صَحِيحًا إِنْ كَانَ الْكَائِنُ قَدْ يَطِيرُ وَكَذِبًا إِلَّا. الْكَائِنُ قَدْ يَطِيرُ إِنْ كَانَ مُتَوَازِنًا (هِيَ قِيمَةٌ مُتَوَازِنَةٌ) وَجُمْلَةُ أَلْفَ عَضُدِهِ أَقَلُّ مِنْ أَوْ يُسَاوِي أَكْثَرَ وَزْنٍ مُمْكِنٍ وَمِثْلُهُ. مِثْلُ: will_it_fly (([1, 2], 5) â -> كَذِبٌ # 1+2 أَقَلُّ مِنْ أَكْثَرَ وَلْ وَزْنٍ وَهُ مُتَوَازِنٌ.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,knc_Arab,python,"
def smallest_change(arr):
    """"""أَلْفَ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَلْفِ أَفِ أَلْفِ أَلْفِ""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,knc_Arab,python,"
def total_match(lst1, lst2):
    '''اِكْتُبْ فَعْلَةً تَقْبَلُ قَوْمَيْنِ مِنْ سُلُوكٍ وَتَرُدُّ الْقَائِمَ الَّذِي لَهُ جَمِيعُ الْأَحْرُفِ فِي جَمِيعِ سُلُوكِ الْقَائِمَةِ أَقَلُّ مِنْ الْقَائِمَةِ الْأُخْرَى. إِذَا كَانَ لِلْقَائِمَيْنِ عَدَدُ الْأَحْرُفِ مُتَسَاوِيًا رُدَّ الْقَائِمَةَ الْأُولَى. مِثْلُ: total_match ((([]، []) â -> [] total_match ((['hi'], 'admin'], ['hI', 'admin'], ['admin']) â -> ['hi''''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,knc_Arab,python,"
def is_multiply_prime(a):
    """"""اُكْتُبْ دَلِيلًا يَرُدُّ الصَّحِيحَ إِنْ كَانَ الْعَدَدُ مُعْطَى ضِعْفَ 3 أَعْدَادٍ رُبَّمَا وَيَكُونُ كَاذِبًا إِلَّا. عَالِمًا أَنَّ (أ) أَقَلُّ مِنْ 100. مَثَلٌ: is_multiply_prime(30) == صَحِيحٌ 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,knc_Arab,python,"
def is_simple_power(x, n):
    """"""مَسْئُولَتُكَ تَكْتُبُ دَلِيلًا يَرُدُّ صَحِيحًا إِذَا كَانَ عَدَدٌ x قُوَّةً بَسِيطَةً لِ n وَكَذِبًا فِي الْحَالَاتِ الْأُخْرَى. x قُوَّةٌ بَسِيطَةٌ لِ n إِذَا كَانَ n**int=x مَثَلًا: is_simple_power ((1, 4) => true is_simple_power ((2, 2) => true is_simple_power ((8, 2) => true is_simple_power ((3, 2) => false is_simple_power ((3, 1) => false is_simple_power ((5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,knc_Arab,python,"
def iscube(a):
    '''اِكْتُبْ فَعْلَةً تَأْخُذُ كُلَّ عَدَدٍ وَتَرُدُّ صَحِيحًا إِذَا كَانَ هَذَا الْمُكَافَأَةُ مِنْ كُلِّ عَدَدٍ. تَعَالَى: تَحْتَمِلُ أَنْ يَكُونَ الْمُدْخَلُ صَحِيحًا دَائِمًا. مَثَلُ: إِسْكُوبُ ((1) ==> صَحِيحُ إِسْكُوبٍ ((2) ==> كَذِبُ إِسْكُوبٍ ((-1) ==> صَحِيحُ إِسْكُوبٍ ((64) ==> صَحِيحُ إِسْكُوبٍ ((0) ==> كَذِبٌ '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,knc_Arab,python,"
def hex_key(num):
    """"""تَكَلَّفْتَ أَنْ تَكْتُبَ دَلِيلًا يَتَلَقَّى عَدَدَ أَعْدَادٍ سِتَّةِ عَشْرَةٍ كَسِلْسِلَةٍ وَيَعُدُّ عَدَدَ أَعْدَادٍ سِتَّةِ عَشْرَةٍ أَوْرَادٍ أَوْرَادٍ (عَدَدٌ أَوْرَادٌ عَدَدٌ نَفْسِيٌّ أَكْبَرُ مِنْ 1 لَيْسَ بِنَاتِجٍ مِنْ أَعْدَادٍ أَصْغَرَيْنِ) أَعْدَادُ سِتَّةٍ هُمْ: 0، 1، 2، 3، 4، 5، 6، 7، 7، 7، 7، 8، 9، أَيْسِلْسِلَةٌ وَيَا، سِلْسِلْلَةٌ وَاْ، سِلْمٌ وَاْلْمٌ وَاْلْمٌوْنْنْدٌوْنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌنْدٌن""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,knc_Arab,python,"
def decimal_to_binary(decimal):
    """"""سَتُعْطَى عَدَدٌ فِي شَكْلِ عَشَرِيٍّ وَمُهِمَّتُكَ تَحْوِيلُهُ إِلَى شَكْلِ ثَنِيٍّ. يَجِبُ أَنْ تَرُدَّ الْمُدَّةَ سِلْسِلَةً، وَكُلُّ حَرْفٍ يَمْثُلُ عَدَدًا ثَنِيًّا. كُلُّ حَرْفٍ فِي السِّلْسِلَةِ سَيَكُونُ '0' أَوْ '1'. سَيَكُونُ بَعْضُ حَرْفَيْ 'db' فِي بَدْءِ السِّلْسِلَةِ وَفِي آخِرِهَا. الْحَرْفُ الْفَظُ لِ التَّرْقِ.""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,knc_Arab,python,"
def is_happy(s):
    """"""تُعْطَى سِلْسِلَةٌ s. مُهِمَّتُكَ تَحْقِيقُهَا هَلْ هِيَ سَعِيدَةٌ أَمْ لَا. سِلْسِلَةٌ سَعِيدَةٌ إِذَا كَانَ طُولُهَا ثَلَاثَةً أَوْ أَقَلَّ وَكُلُّ ثَلَاثَةِ حُرُوفٍ مُتَتَابِعَةٍ مُتَمَيِّزَةٌ. مَثَلٌ: is_happy (a) => False is_happy (aa) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,knc_Arab,python,"
def numerical_letter_grade(grades):
    """"""وَهُوَ أَخِيرُ أُسْبُوعِ الْفُصُولِ وَالْمُعَلِّمُ يَجِبُ أَنْ يُعْطِيَ الْفُلَانَ الْعُمُودَ لِلْمُتَعَلِّمِ. وَالْمُعَلِّمُ يَصْنَعُ الْخُطَبَ لِلْعُمُودَةِ. وَالْمُشْكِلُ أَنَّهُ فَقَدْ فَقَدَ الْكُودَ الَّذِي يُعْطِي الْعُمُودَ لِلْعُمُودَةِ. وَقَدْ أَعْطَاكَ قِيَاسَ الْمُتَعَلِّمِينَ وَيَجِبُ أَنْ تَكْتُبَ دَلِيلًا يُخْرِئِدُ الْ مِنْ.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,knc_Arab,python,"
def prime_length(string):
    """"""اِكْتُبْ فَعْلَةً تَأْخُذُ سِلْسِلَةً وَتَرُدُّ صَحِيحَةً إِنْ كَانَ طُولُ السِّلْسِلَةِ عَدَدًا أَوْ كَذِبًا إِلَّا مَثَلُ prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,knc_Arab,python,"
def starts_one_ends(n):
    """"""دَعْ نَصِيبَ عَدَدِ نَصِيبِ نَصِيبِ نَصِيبِ نَصِيبِ نَصِيبِ نَصِيبِ يَبْدَأُ أَوْ يَنْتَهِي بِ 1""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,knc_Arab,python,"
def solve(N):
    """"""مَعْطِيَةٌ نَصِيبَةٌ كُلَّمَاءُ نَ، رُدَّ جُمْلَةَ أَشْعَارِهَا بِالْبَانِيَةِ. مَثَلٌ لِن = 1000، جُمْلَةُ أَشْعَارِهَا 1 وَالْخَارِجُ ""1"". لِن = 150، جُمْلَةُ أَشْعَارِهَا 6 وَالْخَارِجُ ""110"". لِن = 147، جُمْلَةُ أَشْعَارِهَا 12 وَالْخَارِجُ ""1100"". مُتَغَيِّرَاتٌ: @ن نَصِيبُ قَيَدَاتٍ: 0 â‰¤ ن â‰¤ 10000. خَارِجٌ: سِلْسِلَةُ أَشْعَارِهَا """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,knc_Arab,python,"
def add(lst):
    """"""مَنْ أَعْطَى لِسَانَ لَيْسَ فَارِغَاً مِنْ أَعْدَادِ الْأَعْدَادِ أَضِفْ أَعْدَادَ الْأَعْدَادِ الْمُتَعَدِّدَةِ مَعَ الْعَدَدِ الْمُتَعَدِّدِ مَعَ الْعَدَدِ الْمُتَعَدِّدِ مَعَ الْعَدَدِ الْمُتَعَدِّدِ مَعَ الْعَدَدِ الْمُتَعَدِّدِ مَعَ الْعَدَدِ الْمُتَعَدِّدِ مَعَ الْعَدَدِ الْمُتَعَدِّدِ""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,knc_Arab,python,"
def anti_shuffle(s):
    """"""اِكْتُبْ فَعْلَةً تَأْخُذُ سِلْسِلَةً وَتَرُدُّ نُسْخَةً مُتَّصِفَةً مِنْهَا. نُسْخَةٌ مُتَّصِفَةٌ مِنْ سِلْسِلَةٍ، هِيَ سِلْسِلَةٌ تُبْدَلُ فِيهَا كُلُّ الْكَلِمَاتِ (مُفَرَّقَةٌ بِفَرْضٍ) بِكَلِمَةٍ جَدِيدَةٍ تُرَتَّبُ فِيهَا كُلُّ الْحُرُوفِ بِتَرْتِيبٍ مُصْعَدٍ بِنَاءً عَلَى قِيمَةِ الْمُتَّصِفِ.""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,knc_Arab,python,"
def get_row(lst, x):
    """"""تُعْطَى مَعْرُوفَاتٌ ثَنِيَّةٌ كَقُرَيْشٍ مُتَعَدِّدٍ، وَهِيَ مُشْبِهَةٌ لِلْمَتْرَسِ، وَلَكِنْ خِلَافًا لِلْمَتْرَسِ، فَكُلُّ صَفٍّ يَجُوزُ أَنْ يَكُونَ لَهُ عَدَدٌ مُخْتَلِفٌ مِنَ الْأَعْمُدِ. وَإِذَا أُعْطِيَتْ لَسْتَ وَكُلُّ عَدَدٍ مِنَ الْأَعْمُدِ، فَاحْتَرِزْ الْأَعْمُدَيْنِ فِي الْقَائِمَةِ، وَارْجُدْ بِيَةً مُخْتَرَدِيَّةً.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,knc_Arab,python,"
def sort_array(array):
    """"""مَعْطِيَةٌ مِنْ أَنْوَاعِ الْكُلِّيَّاتِ الْغَيْرِ السَّابِيَةِ، ارْجِعْ نُسْخَةً مِنْ الْمَجْمُوعِ الْمَعْطُوفِ بَعْدَ الْمُنَقِّطِ، تُنَقِّطُ الْمَجْمُوعَ الْمَعْطُوفَ بِالتَّرْتِيبِ الصَّاعِدِ إِذَا كَانَتِ الْجُمْلَةُ ((أَوَّلُ قِيمَةِ الْمُؤَنَّثِ، آخِرُ قِيمَةِ الْمُؤَنَّثِ)) فَرْدَةً، أَوْ تُنَقِّطُهُ بِالتَّرْتِيبِ الْهَابِيِّ إِذَا كَانَ: * sort_array[((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,knc_Arab,python,"
def encrypt(s):
    """"""تَخْلُقُ دَلِيلَ encrypt يَأْخُذُ سِلْسِلَةً كَدَلِيلٍ وَيَرُدُّ سِلْسِلَةً مُشَفَّرَةً بِتَدَوُّرِ الْأَلِفِ. يَجِبُ تَدَوُّرُ الْأَلِفِ بِطَرِيقَةٍ تَنْقَلِبُ الْحُرُوفُ إِلَى الْأَسْفَلِ مُكَثَّرَةً بِاثْنَيْنِ. مِثْلُ: encrypt (('hi') يَرُدُّ 'lm' encrypt (('asdfghjkl') يَرُدُّ 'ewhjklnop' encrypt (('gf') يَرُدُّ 'kj' encrypt (('et') يَرُدُّ 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,knc_Arab,python,"
def next_smallest(lst):
    """"""تَعْطَى لَكَ قِيمَةٌ مِنْ أَعْدَادٍ. اِكْتُبْ فَعْلَةَ next_smallest ((() تَرُدُّ ثَانِيَ أَصْغَرَ عَنْصَرٍ مِنْ الْقِيمَةِ. رُدُّ None إِنْ لَمْ يَكُنْ هَذَا عَنْصَرٌ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,knc_Arab,python,"
def is_bored(S):
    """"""سَتُعْطَى سِلْسِلَةَ كَلِمَاتٍ، وَمُهِمَّتُكَ عَدَدُ الْمَلَلَاتِ. الْمَلَلُ جُمْلَةٌ تَبْدَأُ بِكَلِمَةِ ""أَنَا"". تُحَدُّ الْجُمْلَاتُ بِ""وَ""وَ""أَوْ""وَ"". مِثَالًا: >>> is_bored (((""سَلَامٌ لِلْعَالَمِ"") 0 >>> is_bored ((""السَّمَاءُ أَزْرَقُ. الشَّمْسُ تَشْرِقُ. أُحِبُّ هَذَا الطَّرْفَ"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,knc_Arab,python,"
def any_int(x, y, z):
    '''تَخْلُقُ دَلِيلَةً تَتَّخِذُ ثَلَاثَةَ أَرْقَامٍ. تَرُدُّ صَحِيحًا إِذَا كَانَ أَحَدُ الأَرْقَامِ مِثْلَ جُمْلَةِ الأَرْقَامِ الأُخْرَى، وَكُلُّ الأَرْقَامِ أَعْدَادٌ. تَرُدُّ كَاذِبًا فِي كُلِّ حَالٍ أُخْرَى. مَثَلُ: أَيُّ_مُدَلَّدٍ{5}، 2، 7}'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,knc_Arab,python,"
def encode(message):
    """"""اِكْتُبْ دَلِيْلَةً تَأْخُذُ رِسَالَةً، وَتُشَفِّرُ بِطَرِيْقٍ تَبْدِلُ كَلِمَاتِ كُلِّ حُرُوْفٍ، وَتُحَوِّلُ كُلَّ حُرُوْفٍ فِي الرِّسَالَةِ بِحَرْفٍ يَظْهَرُ مُقَدَّمَاً عَلَى حُرُوْفٍ فِي الْأَلِفِ.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,knc_Arab,python,"

def skjkasdkd(lst):
    """"""تُعْطَى قِيمَةُ أَعْظَمِ أَعْدَادٍ وَتَرُدُّ جُمْلَةَ أَعْدَادِهَا. مَثَلٌ: لِلْأَوَّلِ = [0,3,2,1,3,5,7,4,5,5,5,5,2,181,32,4,32,3,2,32,32,324,4,3] يَكُونُ الْخَارِجُ 10 لِلْأَوَّلِ = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] يَكُونُ الْخَارِجُ 25 لِلْأَوَّلِ = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] يَكُونُ الْخَارِجُ 13 لِلْأَوَّلِ = [0,724,32,71,99,32,60,91,83,85,6] يَكُونُ الْخَارِجُ 11 لِلْأَوَّلِ = [0,1,1,2,7,71,8,1,71] يَكُونُ الْ""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,knc_Arab,python,"
def check_dict_case(dict):
    """"""مَعْطُوفٌ عَلَى قَامُوسٍ، رُدَّ صَحِيحًا إِنْ كَانَتْ كُلُّ الْمَفَاتِيحِ سِلْسِلَةً مُكَبَّرَةً، وَإِلَّا رُدَّ كَذِبًا. وَيَجِبُ أَنْ تَرُدَّ الْمَنْطِقُ كَذِبًا إِذَا كَانَ الْقَامُوسُ فَارِغًا. مَثَلٌ: check_dict_case{""a"":""apple"", ""b"":""banana""}) رُدَّ صَحِيحًا. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) رُدَّ كَذِبًا. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) رُدَّ كَذِبًا.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,knc_Arab,python,"
def count_up_to(n):
    """"""تَنْفِذُ دَلِيلَةً تَأْخُذُ كُلَّ عَدَدٍ غَيْرَ سَبِيْبٍ وَتَرُدُّ مَصْفَرَةً مِنْ أَوَّلِ نَوْمِ عَدَدٍ أَوَّلٍ وَأَقَلَّ مِنْ نَوْمٍ مَثَلًا: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,knc_Arab,python,"
def multiply(a, b):
    """"""تَمْلَأُ الْمُدَوَّنَةَ الَّتِي تَأْخُذُ عَدَدَيْنِ مِنْ الْأَعْدَادِ وَتَرُدُّ حَاصِلَ أَعْدَادِهِمَا. تَأْخُذُ الْمُدَوَّنَةَ دَائِمًا صَحِيحَةً. مَثَلٌ: ضَرْبُ ((148) و (412) يَرُدُّ (16) ضَرْبُ ((19، 28) يَرُدُّ (72) ضَرْبُ ((2020، 1851) يَرُدُّ 0 ضَرْبُ ((14،-15) يَرُدُّ (20) """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,knc_Arab,python,"
def count_upper(s):
    """"""مَعْطِيَةٌ سِلْسِلَةٌ s، عُدَّ عَدَدَ الحُرُوفِ الكبرى في المؤشراتِ الزَّوَائِجِيَّةِ. مَثَلًا: count_upper (('aBCdEf') يَرُدُّ 1 count_upper (('abcdefg') يَرُدُّ 0 count_upper (('dBBE') يَرُدُّ 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,knc_Arab,python,"
def closest_integer(value):
    '''تَخْلُقُ دَلِيلَةً تَأْخُذُ قِيمَةً (خَطَّةً) تُمَثِّلُ عَدَدًا وَتَرُدُّ أَقْرَبَ عَدَدٍ كُلِّيٍّ إِلَيْهِ. إِذَا كَانَ الْعَدَدُ مُتَسَاوِيًا مِنْ عَدَدَيْنِ، فَأَدْرُسْهُ بِالْقَدْرِ. مَثَلَاتُ >>> closest_integer (((""10"") 10 >>> closest_integer ((""15.3"") 15 تَعْلِيقٌ: إِذَا كَانَ الْعَدَدُ مُتَسَاوِيًا مِنْ عَدَدَيْنِ، فَالْمُرَدُّ هُوَ الْأَبْعَدُ مِنْهُ.'''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,knc_Arab,python,"
def make_a_pile(n):
    """"""إِذَا أُعْطِيَ عَدَدٌ كَامِلٌ نَافِعٌ، فَلَكَ أَنْ تَصْنَعَ كَوْمَةً مِنْ نَوَابِلِ حِجَارَةٍ. الْمَسَطَةُ الْأُولَى مِنْ نَوَابِلِ حِجَارَةٍ. عَدَدُ الْحِجَارَةِ فِي الْمَسَطَةِ الْأُخْرَى: - الْعَدَدُ الْفَرْدُ الْأَوَّلُ إِذَا كَانَ نَوَابِلُ - الْعَدَدُ الزَّوَائِدُ الْأَوَّلُ إِذَا كَانَ نَوَابِلُ. رُدَّ عَدَدَ الْ حِجَارَةٍ فِيْ (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,knc_Arab,python,"
def words_string(s):
    """"""تُعْطَى سِلْكَةُ كَلِمَاتٍ مُفَرَّقَةٌ بِالْفُتُوحِ أَوِ الْبَيَانِ. وَمُهِمَّتُكَ تَقْسِيمُ السِّلْكَةِ عَلَى كَلِمَاتٍ وَرَدُّ مَصْفَرَةٍ مِنَ الْكَلِمَاتِ. مِثْلًا: words_string (((""سَلَامٌ، اسْمِي يَحْيَى"") == [""سَلَامٌ""، ""اسْمِي""، ""اسْمِي""، ""يَحْيَى""] words_string (((""وَاحِدٌ، اثْنَانِ، ثَلَاثَانِ، أَرْبَعَانِ، خَمْسَانِ، سِتَّانِ"") ==""""""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,knc_Arab,python,"
def choose_num(x, y):
    """"""هَذِهِ الْمَصْدَرَةُ تَأْخُذُ رَجْمَيْنِ مُوجِبَيْنِ x و y وَتَرُدُّ أَكْبَرَ عَدَدٍ مُجَرَّدٍ مُتَوَسِّطٍ فِي مَوْضِعِ [x, y] مَعًا. إِنْ لَمْ يَكُنْ هَذَا الْعَدَدُ فَالْمَصْدَرُ يَرُدُّ -1. مَثَلًا: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,knc_Arab,python,"
def rounded_avg(n, m):
    """"""تَعْطَيْتَ اثْنَيْنِ مُوجِبَيْنِ، وَمُهِمَّتُكَ حِسَابُ مُتَسَاوِي الْأَعْدَادِ مِنْ نَحْوِ مِنْ (بِمَعْنَى ن و م). قُرْبُلْ الْجَوَابَ إِلَى أَقْرَبِ كُلِّيٍّ وَحُوِّلْهُ إِلَى ثَنِيٍّ. إِذَا كَانَ ن أَكْبَرَ مِنْ م، رُدُّ -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,knc_Arab,python,"
def unique_digits(x):
    """"""مَعْطَى قِيمَةِ أَصْلِيَّاتِ الْمُوجِبَاتِ x. رُدَّ قِيمَةَ أَصْلِيَّاتِ الْمُوجِبَاتِ الَّتِي لَيْسَ فِيهَا أَصْلٌ مُجَرَّدٌ. تَعَالَى: يَجِبُ رُدُّ الْقِيمَةِ بِتَرْتِيبٍ مُتَزَايِدٍ. مِثْلُ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,knc_Arab,python,"
def by_length(arr):
    """"""مُعْطَى مَصْفَرَةٍ مِنْ أَعْدَادٍ، جَزِّمْ الأَعْدَادَ الَّتِي بَيْنَ 1 و 9 مَشْمُولَةً، وَعَكِّرْ المَصْفَرَ النَّاتِجَ، ثُمَّ بَدِّلْ كُلَّ عَدَدٍ بِاسْمِهِ المُتَوافِقِ مِنْ ""وَاحِدٍ""، ""اثْنَيْنِ""، ""ثَلَاثَةٍ""، ""أَرْبَعَةٍ""، ""خَمْسَةٍ""، ""سِتَّةٍ""، ""سَبْعَةٍ""، ""تِسْعَةٍ"". مَثَلًا: arr = [2, 1, 1, 1, 4, 5, 8, 2, 3] -> جَزِّمْ arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> عَكِّرْ arr -> [8, 5, 5, 5, 5] return [""ثَمَةٌ""، ""ثَلَلَاً""، ""ثَلًا""، ""ثَلًا""، ""وَانِيْنَا""، ""وَا""، ""وَ""""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,knc_Arab,python,"
def f(n):
    """"""تَنْفِذُ الدَّالَةَ f الَّتِي تَتَّخِذُ n كَالْمُعَدَّلَةِ، وَتَرُدُّ قَائِمَةً مِنْ حَجَرِ n، بِمِثْلِ قِيمَةِ الْعَنَصِ فِي الْمُؤَنَّثِ i فَهِيَ فَاكْتَارِيَّةُ i إِذَا كَانَ i زَوْجَيْنِ أَوْ جُمْلَةُ أَرْقَامٍ مِنْ 1 إِلَى i إِلَّا. i تَبْدَأُ مِنْ 1. فَكَتَارِيَّةُ i هِيَ ضِعْفُ أَرْقَامٍ مِنْ 1 إِلَى i (1 * 2 * ... * i).""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,knc_Arab,python,"
def even_odd_palindrome(n):
    """"""مُعْطَى عَدَدٌ كُلٌّ مُوجِبٌ نَ، رَدَّ مُضَارَبَةً لَهَا عَدَدُ الْكُلِّيَّاتِ الْمُجَرَّدَةِ وَالْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْمُتَعَدَّدَةِ الْ الْمُتَدَّةِ الْ الْمُتَدَّةِ الْ الْ الْمُتَدَّةِ الْ الْ""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,knc_Arab,python,"
def count_nums(arr):
    """"""اِكْتُبْ عَمَلَ count_nums يَأْخُذُ مَصْفَرَةَ أَعْدَادٍ وَيَرُدُّ عَدَدَ العَوَانِي الَّتِي لَهَا جُمْلَةُ أَعْدَادٍ > 0. إِذَا كَانَ عَدَدٌ سَيِّئًا فَأَوَّلُ عَدَدِهِ سَيَكُونُ سَيِّئًا: مِثْلًا -123 لَهُ أَعْدَادٌ -1, 2, و 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums (([1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,knc_Arab,python,"
def move_one_ball(arr):
    """"""نَحْنُ نَعِدُ مَصْفَرَةً مِنْ نَوْمِ أَعْدَادٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَمَّاةٍ مُسَةٍ مُسَةٍ مُسَةٍ مُسَةٍ مُسَةٌ مُسَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَةٌ مَ""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,knc_Arab,python,"
def exchange(lst1, lst2):
    """"""فِي هَذِهِ المَسْأَلَةِ، سَتُنَفِّذُ دَلِيلًا يَأْخُذُ قَوْمَيْنِ مِنْ أَرْقَامٍ، وَيَقِيسُ هَلْ يُمْكِنُ تَبَادُلُ العُنُودِ بَيْنَهُمَا لِيَكُونَ lst1 قَوْمَ أَرْقَامٍ زَوَائِدَ. لَيْسَ لِلْعُنُودِ مَنْ يُبَادِلُهَا بَيْنَ lst1 و lst2. إِنْ كَانَ يُمْكِنُ تَبَادُلُ العُنُودِ بَيْنَ lst1 و lst2 لِيَكُونَ كُلُّ عُنُونِ lst1 زَوَائِدَ، رُدْ ""نَا"". وَلاًا، رُدْ ""لاًا"" => ""نَا"" => ""نَا""""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,knc_Arab,python,"
def histogram(test):
    """"""مَعْطِيَةٌ سِلْطَةٌ تَمْثِيلُ حُرُوفًا مُفَرَّقَةً بِبَيْنِ الْفُرُوجِ، رُدَّ قَامُوسَ حَرْفٍ بِأَكْثَرِ تَكْرَارٍ وَمَعَهُ الْعَدَدُ الْمُتَعَلِّقُ. إِذَا كَانَ لِبَعْضِ حُرُوفٍ وُجُودٌ وَاحِدٌ، رُدَّهُمْ جَمِيعًا. مِثَالٌ: هِسْتُوْرَمْ ((('a b c') == {'a': 1, 'b': 1, 'c': 1} هِسْتُوْرَمْ ((('a b b a') == {'a': 2, 'b': 2} هِسْتُوْرَمْ (((')) == {} }""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,knc_Arab,python,"
def reverse_delete(s,c):
    """"""وَلَكِنْ لَا يَجُوزُ أَنْ يَكُونَ الْمُتَعَدِّدُ مُتَعَدِّدًا. وَلَا يَجُوزُ أَنْ يَكُونَ الْمُتَعَدِّدُ مُتَعَدِّدًا. وَلَا يَجُوزُ أَنْ يَكُونَ الْمُتَعَدِّدُ مُتَعَدِّدًا. وَلَا يَجُوزُ أَنْ يَكُونَ الْمُتَعَدِّدُ مُتَعَدِّدًا. وَلَا يَجُوزُ أَنْ يَكُونَ الْمُتَعَدِّدُ مُتَعَدِّدًا. وَلَا يَجُوزُ أَنْ يَكُونَ الْمُتَعَدِّدَّ مُ مُتَعَدِّدًّا.""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,knc_Arab,python,"
def odd_count(lst):
    """"""مَنْ يَعْطِي لِسَلْسُلَةٍ، وَكُلُّ سَلْسُلَةٍ مِنْهَا مَوْضُوعَةٌ مِنْ أَرْبَعِ أَعْدَادٍ، يَرُدُّ لِسَلْسُلَةٍ. كُلُّ عَنْصَرٍ i مِنْ الْخَارِجِ يَجِبُ أَنْ يَكُونَ ""عَدَدَ الْعَنَاصِرِ الْعَجَمِيَّةِ فِي سَلْسُلَةِ i مِنْ الْمَدْخُولِ"". وَيَجِبُ أَنْ تُبَدَّلَ كُلُّ i بِعَدَدِ الْعَنَاصِرِ الْعَجَمِيَّةِ فِي سَلْسُلَةِ 4 مِنْ 4 مِنْطَارِيَّةِ الْ.""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,knc_Arab,python,"
def minSubArraySum(nums):
    """"""مَنْطِقٌ مِنْ أَعْدَادِ أَعْدَادٍ، وَجَدْ أَقَلَّ مَجْمُوعِ أَيِّ أَعْدَادٍ مِنْ أَعْدَادٍ لَيْسَتْ فَارِغَةً. مِثَال minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,knc_Arab,python,"
def max_fill(grid, capacity):
    import math
    """"""تُعْطَى شَبَكَةٌ مُقَوَّمَةٌ مِنْ الْبِئْرِ. يَمْثُلُ كُلُّ صَفٍّ بِئْرًا وَاحِدَةً، وَكُلُّ وَاحِدٍ فِي الصَّفِّ يَمْثُلُ وَاحِدَةً مِنْ مَاءٍ. لِكُلِّ بِئْرٍ دَلْوٌ يُمْكِنُ أَنْ يُسْتَخْرَجَ مِنْهُ الْمَاءُ، وَلِكُلِّ دَلْوٍ سَمْعٌ وَاحِدٌ. مَهْمَا تَعْمَلُهُ فَتَخْرِيجُ الْبِئْرِ. اُخْرُجُ عَدَدَ الْدَدَدِ الْيَدِ الْيَدِيْدِ. اُخْرُجُ: اُخْرُجُ: اُخْجُجُ: اُخْجُجُ: اُجُجُجُ: اُجُجُ: اُجُجُجُ: اُجُجُ: اُجُجُجُ: اُجُجُ: اُجُجُ: اُجُجُ: اُجُجُ: اُجُجُ: اُجُجُجُ""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,knc_Arab,python,"
def sort_array(arr):
    """"""فَيَجِبُ أَنْ تُصَنِّفَ مَصْفَرَةً مِنْ أَعْدَادٍ لَيْسَتْ سُبُلًا بِحَسَبِ عَدَدِ الْوَاحِدَاتِ فِي تَصْوِيرِهَا بِالتَّصَاعِدِ. لِمِثْلِ عَدَدِ الْوَاحِدَاتِ، تُصَنِّفُ بِالْعَشْرِيَّةِ. وَيَجِبُ أَنْ تُنَفِّذَهَا بِمِثْلِهَا: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,knc_Arab,python,"
def select_words(s, n):
    """"""وَأَمَّا الْمُتَعَدِّدُ فَيَكُونُ مُتَعَدِّدًا لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْمُتَعَدِّدِ لِلْ لِلْمُتَ مُتَعَدِّدِّدِ لِلِ لِلِ""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,knc_Arab,python,"
def get_closest_vowel(word):
    """"""تُعْطَى كَلِمَةٌ. وَمُهِمَّتُكَ أَنْ تَجِدَ أَقْرَبَ وَاوٍ بَيْنَ وَاوَيْنِ مِنْ جَانِبِ الْكَلِمَةِ الْأَيْمَنِ (حَسِيبُ الْكَبَائِرِ). وَالْوَاوَانِ فِي الْبَدْءِ وَالْمُنْتَهَى لَا تُعْتَبَرَانِ. رُدَّ السَّلَالَةَ الْفَارِغَةَ إِنْ لَمْ تَجِدْ وَاوًا يَتَحَقَّقُ بِالشَّرْطِ الْمَذْكُورِ. وَتَحْتَمِلُ أَنَّ السَّلَالَةَ الْمُدَوْنِيَّةَ.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,knc_Arab,python,"
def match_parens(lst):
    '''تُعْطَى قِيمَةٌ مِنْ سَلْسَلَتَيْنِ، كُلُّهُمَا مَوْضُوعٌ مِنْ قُرْبَيْنِ مَفْتُوحَيْنِ '(' أَوْ قُرْبَيْنِ مَغْلُوبَيْنِ ') '. وَعَمَلُكَ التَّحْقِيقُ إِنْ كَانَ مُمْكِنَ التَّرْتِيبُ مِنْهُمَا فِي سَلْسَلَتَيْنِ بِمَوْضُوعٍ، وَيَكُونُ الْحَبْلُ الْحَسَنُ. سَلْسَلَةٌ S تُحْسَبُ حَسَنَةً إِنْ وَإِنْ تَكُونَتْ كُلْسَانًا حَسَنَتْتْ.'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,knc_Arab,python,"
def maximum(arr, k):
    """"""مَعْطِيَّةٌ مَجْمُوعَةٌ مِنْ أَعْدَادٍ كُلِّيَّةٍ وَمُوجِبَةٌ كُلِّيَّةٌ ك، رُدَّ مُصَنَّفَةَ قَائِمَةٍ مُطَوَّلَةٍ ك بِأَكْثَرِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ أَرْبَعِ""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,knc_Arab,python,"
def solution(lst):
    """"""مَنْ أَعْطَى لِسَانَ لَيْسَ فَارِغَ مِنْ الْأَعْدَادِ، رُدَّ جَمْعَ كُلِّ الْعَنَاصِرِ الْعَجَمِيَّةِ الْمُتَوَاضِعَةِ. مَثَلُ حَلٍّ (([5, 8, 7, 1]) ==> حَلٍّ 12 (([3, 3, 3, 3, 3]) ==> حَلٍّ 9 (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,knc_Arab,python,"
def add_elements(arr, k):
    """"""مَنْطِقٌ غَيْرُ خَالِي مِنْ أَعْدَادٍ كُلِّيَّةٍ arr وَكُلِّيَّةٍ k، ارْجِعْ بِجَمْعِ الْعُنَوَاتِ بِأَكْثَرَ مِنْ عُنَوَاتِ الْأَوَّلِينَ k مِنْ أَعْدَادِ arr. مَثَلٌ: إِدْخَالٌ: arr = [111,21,3,4000,5,6,7,8,9], k = 4 خَارِجٌ: 24 # جَمْعُ 21 + 3 قَيَدَاتٌ: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,knc_Arab,python,"
def get_odd_collatz(n):
    """"""إِذَا أُعْطِيَ عَدَدٌ كَامِلٌ نَافِعٌ، رُدَّ قَائِمًا مُنَقَّطًا فِيهِ أَعْدَادٌ فُرَادِسَةٌ فِي تَرْتِيبِ كُولَاتَزَ. تَخْمِيمُ كُولَاتَزَ هُوَ تَخْمِيمٌ فِي الْمَالِكِ يَتَعَلَّقُ بِتَرْتِيبٍ مُعَرَّفٍ بِالْمَعْنَى التَّالِي: ابْدَأْ بِأَيِّ عَدَدٍ كَامِلٍ نَافِعٍ نَافِعٍ نَفْسُهُ. ثُمَّ تُحْصَلُ كُلُّ مُتْبَعٍ مِنَ الْمُتْبَعِ مِنْهُ بِمْدَا أَا وَا.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,knc_Arab,python,"
def valid_date(date):
    """"""تَكْتُبُ دَلِيلًا يُصَدِّقُ خَطَّ تَارِيخٍ مُعَيَّنٍ وَيَرُدُّ صَحِيحًا إِذَا كَانَ التَّارِيخُ صَحِيحًا وَإِلَّا فَكَذِبًا. يَصِحُّ التَّارِيخُ إِذَا تَمَّتْ كُلُّ الْقَوَاعِدِ التَّالِيَةِ: 1. خَطَّ تَارِيخٍ لَيْسَ فَارِغًا. 2. عَدَدُ الْأَيَّامِ لَا يَكُونُ أَقَلَّ مِنْ 1 أَوْ أَكْثَرَ مِنْ 31 يَوْمًا لِلشُّهُورِ 1,3,5,7,8,10,12. وَعَدَدُ الْأَيَّامِ لَا يَكُونَ أَا أَقَرَّ مِنْ 29 يَوْمًا لِ الشَّهَرِ.""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,knc_Arab,python,"
def split_words(txt):
    '''مُعْطَى سِلْطَةِ كَلِمَاتٍ، رُدَّ قِيمَةَ كَلِمَاتٍ مُقَسَّمَةٍ عَلَى فَرَاغٍ، إِنْ لَمْ تَكُنْ فَرَاغٌ فِي النَّصِّ فَيَجِبُ أَنْ تُقَسِّمَ عَلَى فُرُوجٍ '، إِنْ لَمْ تَكُنْ فُرُوجٌ فَيَجِبُ أَنْ تُرَدِّدَ عَدَدَ حُرُوفِ الْحَرْفِ الصَّغِيرَةِ بِتَرْتِيبٍ عَدْدَدِيٍّ فِي الْأَلِفِ، أُرْدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُدُ'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,knc_Arab,python,"
def is_sorted(lst):
    '''إِذَا أُعْطِيَتْ قِيمَةُ أَرْكَانٍ فَارْجِعْ أَوْ لَا فِي تَرْتِيبٍ مُصْعَدٍ. إِذَا كَانَتْ قِيمَةُ أَرْكَانٍ مُتَشَابِهَةٍ فَارْجِعْ False. لا تَتَّخِذْ أَرْكَانًا سَلبِيَّةً وَأَرْكَانًا كُلِّيَّةً. مَثَلٌ is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> True is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,knc_Arab,python,"
def intersection(interval1, interval2):
    """"""وَمَا أَنْتَ بِمُتَعَلِّقٍ بِهِ مِنْ أَمْرٍ إِلَّا أَنْ تَكُونَ مُتَعَلِّقَةً بِمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا فِي الْأَرْضِ وَمَا مِنْهُمَا وَمَا مِنْهُمَا""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,knc_Arab,python,"
def prod_signs(arr):
    """"""تَعْطَيْتَ مَصْفَرَ مِنْ أَعْدَادٍ وَيَجِبُ أَنْ تَرُدَّ جَمْعَ مَقَادِيرِ الأَعْدَادِ مُضَاعَفَةً بِجَمِيعِ أَشْرَاطِ كُلِّ عَدَدٍ فِي الْمَصْفَرِ، مُمَثَّلَةً بِ 1، -1 أَوْ 0. تَعْرِفُ: لاَ يَرُدُّ لِمَصْفَرٍ فَارِغٍ. مِثَال: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == لاَ """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,knc_Arab,python,"
def minPath(grid, k):
    """"""وَلَكِنْ لَا تَنْتَقِلُ مِنْ الْمُتَقَدِّمِينَ. وَلَا تَنْتَقِلُ مِنْ الْمُتَقَدِّمِينَ. وَلَا تَنْتَقِلُ مِنْ الْمُتَقَدِّمِينَ. وَلَا تَنْتَقِلُ مِنْ الْمُتَقَدِّمِينَ. وَلَا تَنْتَقِلُ مِنْ الْمُتَقَدِّمِينَ. وَلَا تَنْتَقِلُ مِنْ الْمُتَقَدِّمِينَ. وَلَا تَنْتَقِلُ مِنْ الْمُتَقَدِّمِينَ. وَلَا تَنْتَقِلُ مِلْنَا. وَا تَلْتَ مِلْنَا تَ مِ الْتَا تَقَلْنِي.""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,knc_Arab,python,"
def tri(n):
    """"""فَمَا يَعْرِفُهُ النَّاسُ مِنْ تَتَابُعِ فِبُونَاتِي، وَقَدْ تَعَمَّدَهُ الْمَالِكُونَ فِي الْقُرُونِ الْأَخِيرَةِ. وَلَكِنْ مَا لَا يَعْرِفُهُ النَّاسُ هُوَ تَتَابُعُ تَرْبُونَاتِي. تَتَابُعُ تَرْبُونَاتِي تُعَرَّفُ بِالتَّكَرُّرِ: تِرْبُونَاتِي (1) = تِرْبُونَاتِي (1) = 1 + ن / 2 ، إِذَا كَانَ نَصْبُ نَصْبٍ. تِرْبُونَاتِي = تِرْبُونَاتِي (1) = تِرْبُونَاتِي (2) = تِرْبُونَاتِي (3)""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,knc_Arab,python,"
def digits(n):
    """"""مُعَطَى عَدَدٌ كُلٌّ مُوجِبٌ، رُدَّ بِهِ نَاتِجَ الْأَعْدَادِ الْعَدَدِيَّةِ. رُدَّ 0 إِنْ كَانَتْ كُلُّ الْأَعْدَادِ زَوَائِجَ. مَثَلًا: أَعْدَادُ ((1) == 1 أَعْدَادُ ((4) == 0 أَعْدَادُ ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,knc_Arab,python,"
def is_nested(string):
    '''تَخْلُقُ دَلِيلَةً تَتَّخِذُ سِلْسِلَةً كَدَخْلٍ تَتَضَمَّنُ قُفَّاتٍ مُرَبَّعَةً فَقَطْ. يَجِبُ أَنْ تَرُدَّ صَحِيحًا إِنْ وَإِنْ وَجَدَتْ تَتَابُعَ قُفَّاتٍ صَحِيحَةً تَتَعَلَّقُ بِهَا قُفَّةٌ وَاحِدَةٌ أَوْ أَقَلُّ. is_nested'[[]]') â -> True is_nested'[[]]]]]]]] â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,knc_Arab,python,"

def sum_squares(lst):
    """"""تُعْطَى قِيمَةُ أَرْبَابٍ. تَجِبُ عَلَيْكَ إِرْجَاعُ جُمْلَةِ رُبُوعِ الأَرْبَابِ فِي الْقِيمَةِ، وَتَقْرِيبُ كُلِّ عَنْدَمٍ فِي الْقِيمَةِ إِلَى الْأَعْلَى. مِثَالُ: لِلْمَبْدَأِ = [1,2,3] يَكُونُ الْخَارِجُ 14 لِلْمَبْدَأِ = [1,4,9] يَكُونُ الْخَارِجُ 98 لِلْمَبْدَأِ = [1,3,5,7] يَكُونُ الْخَارِجُ 84 لِلْمَبْدَأِ = [1,4,4,2,0] يَكُونُ الْخَارِجُ 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,knc_Arab,python,"
def check_if_last_char_is_a_letter(txt):
    '''تَخْلِيقُ دَلِيلٍ يَرُدُّ صَحِيحًا إِنْ كَانَ آخِرُ حَرْفٍ مِنْ سِلْطَةٍ مَعْطُوفَةٍ حَرْفًا أَلِفِيًّا وَلَيْسَ جُزْءًا مِنْ كَلِمَةٍ، وَكَذِبًا إِلَّا. تَذْكِرُوا: ""كَلِمَةٌ"" جَمْعُ حَرَفٍ مُفَرَّقَةٍ بِفَرْقَةٍ. مِثْلُ: check_if_last_char_is_a_letter""{""تَفْتَاحُ كَعْكَةٍ""} -> False check_if_last_char_is_a_letter""{""تَفْتَاحُ كَعْكَةٍ""} -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,knc_Arab,python,"
def can_arrange(arr):
    """"""تَخْلُقُ دَلِيلَةً تَرُدُّ أَكْبَرَ فَهْمٍ لِلْعَنْصَرِ الَّذِي لَيْسَ أَكْبَرَ أَوْ سَوَاءً مِنْ الْعَنْصَرِ الْمُتَقَدِّمِ فَإِنْ لَمْ يَكُنْ هَذَا الْعَنْصَرُ فَرُدُّ -1. لَا يَكُونُ فِي الْمُصَنَّفِ قِيَمٌ مُثَنَّاةٌ. مَثَلٌ: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,knc_Arab,python,"
def largest_smallest_integers(lst):
    '''تَخْلِيقُ دَلِيلٍ يَرُدُّ تَوْبَةً (أ، ب) ، حَيْثُ 'أ' هُوَ الْأَكْبَرُ مِنْ الْأَعْدَادِ السَّابِقَةِ، وَ 'ب' هُوَ الْأَصْغَرُ مِنْ الْأَعْدَادِ الْإِيجَابِيَّةِ فِي الْقَائِمَةِ. إِنْ لَمْ يَكُنْ أَعْدَادٌ سَابِقَةٌ أَوْ سَابِقَةٌ، رُدُّوهُمْ بِلَا. مَثَلٌ: أَكْبَرُ_أَصْغَرُ_الْأَعْدَادِ[2, 4, 1, 3, 5, 7]) == (لَا، لَا)'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,knc_Arab,python,"
def compare_one(a, b):
    """"""تَخْلِيقِ دَلِيلٍ يَأْخُذُ الْكُلِّيَّاتِ، الْعَوَامِلِ، أَوْ الْأَسْلَاسِ الْمُمَثِّلَةِ لِلْأَحْيَاءِ، وَيَرُدُّ الْمُتَغَيِّرَ الْأَكْبَرَ فِي نَوْعِهِ الْمُتَغَيِّرِ الْمُعَيَّنِ. يَرُدُّ نَاقِصَةً إِذَا كَانَتْ الْقِيَمُ مُسَاوِيَةً. تَذْكِرْ: إِذَا كَانَتْ نَاقِصَةً، فَالْعَوَامِلُ الْمُتَغَيِّرَةُ تَكُونُ: أَوْ أَوْ أَوْ أَوْ أَوْ أَوْ أَوْ أَوْ أَوْ أَوْ أَ""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,knc_Arab,python,"
def is_equal_to_sum_even(n):
    """"""تَقَوَّمْ هَلْ يُمْكِنُ أَنْ يُكْتَبَ الرَّقْمُ n كَجَمْعِ 4 أَصْلِيَّةٍ مُجَرَّدَةٍ مُجَرَّدَةٍ مَثَلُ is_equal_to_sum_even ((4) == كَذِبٌ is_equal_to_sum_even ((6) == كَذِبٌ is_equal_to_sum_even ((8) == صَحِيحٌ """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,knc_Arab,python,"
def special_factorial(n):
    """"""فَيَتَعَرَّفُ فَاكْتَارُ البَرازِيلِيِّ كَ: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! حَيْثُ n > 0 مَثَلًا: >>> special_factorial ((4) 288 فَتَتَلَقَّى الوَظِيفَةُ عَدَدًا كَمَدْخُولٍ وَيَجِبُ أَنْ تَرُدَّ فَاكْتَارَهُ الْمُخَصَّصَ مِنْ هَذَا العَدَدِ. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,knc_Arab,python,"
def fix_spaces(text):
    """"""_مِثَالْ-3ى، فَاحْلِفْ كُلَّ الْفُرُوجِ بِالْخَفَائِضِ، وَإِنْ كَانَتْ فِي الْخَطِّ أَكْثَرُ مِنْ فُرُوجٍ مُتَتَابِعَةٍ، فَاحْلِفْ كُلَّ الْفُرُوجِ مُتَتَابِعَةً بِ - fix_spaces (((""مَثَلٌ"") == ""مَثَلٌ"" fix_spaces (((""مَثَلٌ1"") == ""مَثَلٌ1"" fix_spaces (((""مَثَلٌ2"") == ""مَثَلٌ2"" fix_spaces (((""مَثَلٌ 3"") == ""مَثَلٌ-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,knc_Arab,python,"
def file_name_check(file_name):
    """"""تَخْلِيقُ دَلِيلَةٍ تَأْخُذُ سِلْسِلَةً تُمَثِّلُ اسْمَ مَسْجِدٍ، وَتَرُدُّ ""نَعَمْ"" إِذَا كَانَ اسْمُ الْمَسْجِدِ صَحِيحًا، وَتَرُدُّ ""لَا"" إِذَا كَانَ غَيْرَ ذَلِكَ. يُعْتَبَرُ اسْمُ مَسْجِدٍ صَحِيحًا إِذَا وَإِنْ تَمَّتْ كُلُّ الشُّرُوطِ التَّالِيَةِ: - لاَ يَجِبُ أَنْ يَكُونَ فِي اسْمِ الْمَسْجِدِ أَكْثَرُ مِنْ ثَلَاثَةِ أَرْبْعَةِ أَرَةِ أَرْبْبْعَةِ أَةِ أَةِ أَةِ أَةِ أَةِمْرْ""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,knc_Arab,python,"


def sum_squares(lst):
    """""""" هَذِهِ الْمَدِينَةُ تَأْخُذُ قِيمَةَ أَعْدَادٍ. لِكُلِّ الْمَدَائِنِ فِي الْقِيمَةِ، تُرَبِّعُ الْمَدِينَةَ الْكَامِلَةَ إِذَا كَانَتْ مُكَاثَرَةً لِثَلَاثٍ وَتُكَوِّنُ الْمَدِينَةَ الْكَامِلَةَ إِذَا كَانَتْ مُكَاثَرَةً لِأَرْبَعٍ وَلَيْسَتْ مُكَاثَرَةً لِثَلَاثٍ. لَا تُغَيِّرُ الْمَدَائِنَ الْمَدِينَةُ الَّتِي لَا تُكَوِّنُ مُهَا.""""""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,knc_Arab,python,"
def words_in_sentence(sentence):
    """"""تَعْطَى سِلْطَةً تَمْثُلُ جُمْلَةً، وَالْجُمْلَةُ تَحْتَوِي بَعْضَ الْكَلِمَاتِ مُفَرَّقَةً بِبَيْنِ الْفَرَائِضِ، وَيَجِبُ أَنْ تَرُدَّ سِلْطَةً تَحْتَوِي كَلِمَاتِ الْجُمْلَةِ الْأُولَى، وَأَطْوَالُهَا أَعْدَادٌ أَوْجُهٌ أَوْجُهٌ، وَيَجِبُ أَنْ يَكُونَ تَرْتِيبُ الْكَلِمَاتِ فِي السِّلْطَةِ الْجَدِيدَةِ كَمَا = = = لِلْحَةٌ = لِلْحَةٌ = لِحَجَجَجَجَجَجَ""""""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,knc_Arab,python,"
def simplify(x, n):
    """"""تَكُونُ مُسَاوِيَةً لِلْعَدَدِ الْمُتَعَدِّدِ، وَتَكُونُ مُسَاوِيَةً لِلْعَدَدِ الْمُتَعَدِّدِ، وَتَكُونُ مُسَاوِيَةً لِلْعَدَدِ الْمُتَعَدِّدِ الْمُتَعَدِّدِ الْمُتَعَدِّدِ، وَتَكُونُ مُسَاوِيَةً لِلْعَدَدِ الْمُتَعَدِّدِ الْمُتَعَدِّدِ الْمُتَعَدِّدِ الْمُتَعَدِّدِ الْمُتَعَدِّدِ الْمُتَعَدِّدِ الْمُتَعَدِّدِ الْ الْمُتَدِّدِ الْ الْمُ الْ الْمُتَدِّدِّ الْ الْ الْمُ الْ الْمُ الْمُ الْمُ الْمُ الْ""""""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,knc_Arab,python,"
def order_by_points(nums):
    """"""اِكْتُبْ فَعْلَةً تُصَنِّفُ الْمَوْضُوعَ مِنْ الْأَعْدَادِ فِي تَرْتِيبٍ مُصْعَدٍ بِحَسَبِ جُمْلَةِ أَعْدَادِهَا. اُنْظُرْ: إِنْ كَانَتْ عِدَّةُ أَنْوَاعٍ مُتَشَابِهَةٍ بِجُمْلَةِ أَعْدَادِهَا فَصَنِّفْهَا بِحَسَبِ مُؤَنَّسِهَا فِي الْمَوْضُوعِ الْأَصْلِيِّ. مِثْلُ: >>> order_by_points (([1, 11, -1, -11, -12]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,knc_Arab,python,"
def specialFilter(nums):
    """"""اِكْتُبْ فَعْلَةً تَأْخُذُ مَصْفَرَةَ أَرْقَامٍ كَدَخْلٍ وَتَرُدُّ عَدَدَ الْعَنَاصِرِ فِي الْمَصْفَرِ الَّتِي هِيَ أَكْبَرُ مِنْ 10 وَكُلُّ أَوَّلِ وَآخِرِ أَلْفَاظِ عَدَدٍ فُرَادِيَّةٌ (1, 3, 5, 7, 9). مَثَلًا: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,knc_Arab,python,"
def get_max_triples(n):
    """"""تَنَالُ عَدَدَ الثَّلَاثَاتِ (أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَيْ: أَ: أَيْ: أَيْ: أَ: أَيْ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ: أَ:""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,knc_Arab,python,"
def bf(planet1, planet2):
    '''ثَمَانِيَةُ كَوَاكِبَ فِي نَظْمِنَا الشَّمْسِ: الأَقْرَبُ إِلَى الشَّمْسِ هُوَ الْعُمْرُودُ، وَالْمُتَابِعُ هُوَ الْجُنُبُ، ثُمَّ الْأَرْضُ وَالْمَرْسُ وَالْجُبُورُ وَزَهْرُونُ وَأُورُنُسُ وَنَبْتُونُ. اُكْتُبْ دَلِيلًا يَأْخُذُ اسْمَيْ كَوْكَبَيْنِ كَسِلَالَةً كَوْكَبِيْنِ وَكَوْكَبِيْنِ. يَجِبُ أَنْ يَرْجِعَ دَلِيلًا فَيْنِيْدًا فَيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْنِيْن'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,knc_Arab,python,"
def sorted_list_sum(lst):
    """"""اِكْتُبْ فَعْلَةً تَقْبَلُ قِيَامَةَ سُلُوطٍ كَمُعَدَّدٍ، تَحْذِفُ السُّلُوطَ الَّتِي لَهَا طُولٌ غَرِيبٌ، وَتَرُدُّ الْقِيَامَةَ الْمُتَنَوِّجَةَ بِتَرْتِيبٍ مُنَوَّجٍ، فَالْقِيَامَةُ دَائِمًا قِيَامَةُ سُلُوطٍ وَلَا مَصْفَرَةُ أَرْقَامٍ، وَقَدْ تَتَضَمَّنُ تَكْثِيرًا. يَجِبُ أَنْ يَكُونَ تَرْتِيبُ الْقِيَامَةِ مُرَادًا بِطُ كُلِّ كَمْلِ.""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,knc_Arab,python,"
def x_or_y(n, x, y):
    """"""سَبِيلٌ بَسِيطٌ يَرُدُّ قِيمَةَ x إِنْ كَانَ n عَدَدًا أَوَّلًا وَيَرُدُّ قِيمَةَ y إِلَّا. مَثَلٌ: لِـ x_or_y{7}، 34، 12} == 34 لِـ x_or_y{15}، 8، 5} == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,knc_Arab,python,"
def double_the_difference(lst):
    '''دَفْعُ دَفْعِ الْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ لِلْأَرْضِ'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,knc_Arab,python,"
def compare(game,guess):
    """"""أَظُنُّ أَنَّنَا نَتَذَكَّرُ كُلَّ ذَلِكَ الشَّعْرِ عِنْدَمَا تُعْلَمُ نِتَاجُ حَدَثٍ طَوِيلِ الْمُنْتَظَرِ. الْأَحْسَاسُ وَالْأَفْكَارُ الَّتِي تَكُونُ فِي تِلْكَ اللَّحْظَةِ تَسْتَحِقُّ الْإِسْنَادَ وَالتَّقْرِينَ. مَشْغَلُكَ هُوَ تَحْدِيدُ أَنْ يَخْتَبِرَ الْمُتَقَابِلُ نِتَاجَ عِدَّةٍ مِنْ الْمُتَقَابِلَاتِ. تُعْطَبُ لَكَ مَ مَصْفَرَةُ الْ أَقْرَبِ مِينَ.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,knc_Arab,python,"
def Strongest_Extension(class_name, extensions):
    """"""سَتُعْطَى اسْمُ فِرْقَةٍ (خَطّ) وَقِيَاسُ مَوَاسِطَ. تُسْتَعْمَلُ الْمَوَاسِطُ لِتَحْمِلَ فِرَقًا إضَافِيَّةً إِلَى الْفِرْقَةِ. قِيَاسُ الْمَوَاسِطِ هَكَذَا: لِيَكُنْ كَبِيرَةُ الْحُرُوفِ الْكَبِيرَةُ فِي اسْمِ الْمَوَاسِطِ، وَصَغِيرَةُ الْحُرُوفِ الصَّغِيرَةُ فِي اسْمِ الْمَوَاسِطِ، وَقِيَاسُهَا هَكَذَا: لِيَكُنْ بِ الْأَقْوَى الْلَبِ وَ الْمَوَوَاءُ فِيْنَ الْنَوَاءُ.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,knc_Arab,python,"
def cycpattern_check(a , b):
    """"""تَعْطَيْتَ كَلِمَتَيْنِ. تَحْتَاجُ إِلَى إِعَادَةِ صَحِيحٍ إِنْ كَانَتِ الكَلِمَةُ الثَّانِيَةُ أَوْ أَيُّ تَدَارُكَاتِهَا خَطٌّ دَاخِلٌ فِي الكَلِمَةِ الأُولَى cycpattern_check (((""abcd"",""abd"") => كَذِبٌ cycpattern_check (((""hello"",""ell"") => صَحِيحٌ cycpattern_check (((""whassup"",""psus"") => صَحِيحٌ cycpattern_check (((""abab"",""baa"") => صَحِيحٌ cycpattern_check (((""efef"",""eeff"") => صَحِيحٌ cycpattern_check (((hims"",""simen"") => صَحِيحٌ """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,knc_Arab,python,"
def even_odd_count(num):
    """"""مُعَطَى عَدَدٌ كُلُّهُ. يَرُدُّ تَوْبَةً لَهَا عَدَدُ أَعْدَادِ الْجَوَانِبِ وَالْعَدَدِ الْفَرْدِيِّ. مِثَال: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,knc_Arab,python,"
def int_to_mini_roman(number):
    """"""مَنْ أَعْطَى عَدَدَاً مُوجِبَاً، فَاحْصُلْ عَدَدَهُ الْرُومَانِيَّ كَسِلْطَةٍ، وَارْجِعْهُ بِحُرُوفٍ صَغِيرَةٍ. قَيَدَات: 1 <= num <= 1000 مَثَلَات: >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,knc_Arab,python,"
def right_angle_triangle(a, b, c):
    '''مَعْطُوفٌ بِطُولِ الْجَانِبَيْنِ مِنْ ثَلَاثَةِ أَطْرَافٍ. يَرُدُّ الصَّحِيحَ إِذَا كَانَ الْجَانِبَانِ ثَلَاثَةَ أَطْرَافٍ مُسْتَقِيمَةٍ، وَإِلَّا فَالْكَذِبُ. ثَلَاثَةُ أَطْرَافٍ مُسْتَقِيمَةٌ هِيَ ثَلَاثَةٌ فِيهَا زَاوِيَةٌ مُسْتَقِيمَةٌ أَوْ 90 دَرَجَةً. مِثَال: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,knc_Arab,python,"
def find_max(words):
    """"""اِكْتُبْ فَعْلَةً تَقْبَلُ قِيَاسَ خُطَاتٍ. الْقِيَاسُ يَقْتَضِي كَلِمَاتٍ مُخْتَلِفَةً. رُدَّ الْكَلِمَةَ بِأَكْثَرِ عَدَدِ الْحُرُوفِ الْمُخْتَلِفَةِ. إِذَا كَانَتْ خُطَاتٌ مُتَعَدِّدَةٌ فَرُدَّ الَّتِي تَأْتِي أَوَّلَهَا بِالتَّرْتِيبِ الْمَعْجُومِ.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,knc_Arab,python,"
def eat(number, need, remaining):
    """"""أَنْتَ أَرَنْبِلٌ جَائِعٌ، وَقَدْ أَكَلْتَ عَدَدًا مُعَيَّنًا مِنَ الْجُزُورِ، وَلَكِنَّكَ الآنَ تَحْتَاجُ أَكْلَ عَدَدٍ أَكْثَرَ مِنَ الْجُزُورِ لِتُكَمِّلَ وَقْتَ الْيَوْمِ. يَجِبُ أَنْ تَرُدَّ مَضْمُونَ [مُجَمَّلُ عَدَدِ الْجُزُورِ الْمَأْكُولَةِ بَعْدَ وَقْتِ الْمَأْكُولَةِ، وَعَدَدُ الْجُزُورِ الْمَتْرُورَةِ بَ الْمَأْكُولَةِ بَ الْمَتْرُورَةِ:""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,knc_Arab,python,"
def do_algebra(operator, operand):
    """"""وَمَا أَنْتُمْ بِمُتَعَلِّقِينَ بِهِ مِنْ أَمْرٍ إِلَّا أَنْ تَعْمَلُوا بِهِ وَمَا أَنْتُمْ بِمُتَعَلِّقِينَ بِهِ إِلَّا أَنْ تَعْمَلُوا بِهِ وَمَا أَنْتُمْ بِمُتَعَلِّقِينَ بِهِ إِلَّا أَنْ تَعْمَلُوا بِهِ وَمَا أَنْتُمْ بِمُتَعَلِّقِينَ بِهِ إِلَّا أَنْ تَعْمَلُوا بِهِ وَمَا أَنْتُمْ بِمُتَعَلِّقِينَ بِهِ إِلَّا أَنْ تَعْمَلُوا بِهِ""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,knc_Arab,python,"
def solve(s):
    """"""تُعْطَى سِلْكَةٌ s. إِنْ كَانَتْ s[i] حَرْفًا، فَعَكِّسْ حَالَهَا مِنْ أَسْفَلَ إِلَى أَعْلَى أَوْ عَكْسًا، وَإِلَّا فَاحْفَظْهَا كَمَا هِيَ. إِنْ كَانَتْ السِّلْكَةُ لَا حُرُوفَ فَعَكِّسِ السِّلْكَةَ. يَجِبُ أَنْ تَرُدَّ الْوَجْهَ الْمُحْصَلَ. مِثَالُ solve{""1234"") = ""4321""{""ab"") = ""AB""{""a#C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,knc_Arab,python,"
def string_to_md5(text):
    """"""مَنْ دَفَعَ سِلْسِلَةً 'text', رَدَّ مِثْلَهَا md5. إِنْ كَانَ 'text' سِلْسِلَةً فَارِغَةً, رَدَّ None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,knc_Arab,python,"
def generate_integers(a, b):
    """"""مَعْطِيَةَ اثْنَيْنِ مُوجِبَيْنِ أَوْجَدَيْنِ أَوْجَدَيْنِ، رُدَّ أَوْجَدَيْنِ بَيْنَ أَوْجَدَيْنِ، فِي تَرْتِيبٍ مُصْعَدٍ. مَثَلًا: جَبِّرْ_الْأَوْجَدَيْنِ ((2, 8) => [2, 4, 6, 8] جَبِّرْ_الْأَوْجَدَيْنِ ((8, 2) => [2, 4, 6, 8] جَبِّرْ_الْأَوْجَدَيْنِ ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
