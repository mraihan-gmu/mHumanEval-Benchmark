[
    {
        "task_id": "HumanEval/0",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"यदि कस्यचित् द्वयोः संख्यायाः समीपस्थः अस्ति चेत्, सः अनुक्रमणिकायाः अनुक्रमणिकायाः समीपस्थः अस्ति वा न। उदाहरणम्: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"अत्र इदम् फलनम् अस्ति यत् इदम् फलनम् अनेकेषु समूहेषु अन्तर्बद्धं कण्ठं युक्तं शृङ्खलं भवति । भवता लक्ष्यम् एतत् समूहं पृथक्-पृथक् शृङ्खलायां विभक्तम् कर्तुम् च तेषां सूचीम् प्रतिपादयितुम् अस्ति । पृथक्-पृथक् समूहः समतोलः भवति (प्रत्येक उघडे कण्ठः उचितं समाहितः भवति) न च परस्परम् अन्तर्बद्धः भवति । इदम् फलनम् अस्ति यत् इदम् प्रविष्टं शृङ्खलं पृथक्-पृथक्_पारेण_ग्रुप्स् ({\\displaystyle \\scriptstyle {\\paren_groups }) इति विभज्यताम् । उदाहरणम्: >>> पृथक्_पारेण_ग्रुप्स् ({\\displaystyle \\scriptstyle {\\scriptstyle {\\scriptstyle {\\scriptstyle }) } ['} , '{\\scriptstyle {} , '} , '{\\scriptstyle {} } } ') इति विभज्यताम् ।\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"यदि एकं धनात्मकं फ्लोटिंग पोंट् संख्या अस्ति, तर्हि सः पूर्णाङ्कः (प्रदत्त संख्यायाः अधिकं पूर्णाङ्कः) एवं दशमलवसंख्याः (अतिरिक्तं संख्यायाः अधिकं भागः) इति विभज्य विभज्य भवति । अतः दशमलवसंख्यायाः भागः परावर्त्तितव्यम् । उदाहरणम्: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"यदि भवता निक्षेप-उपकर्षण-कार्यक्रमः शून्य-समानतया आरभ्यते, तर्हि भवता कार्यम् अस्ति यत् यदि कस्यचित् स्थाने खाता शेषः शून्य-समानतया घटते, तर्हि फलनम् True प्रतिफलयति । अन्यथा False प्रतिफलयति । उदाहरणम्: >>> below_zero([१,२,३]) False >>> below_zero([१,२,४,५]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"आगतसंख्यासु दीयते सूची, अतः अस्य डाटासेटस्य माध्यमे एव माध्यमे पूर्णविचलनं गणनाय। माध्यमे पूर्णविचलनं प्रत्येकं तत्वं केन्द्रबिन्दु च (एतस्मिन् प्रकरणे माध्यमः) मध्यमे पूर्णविचलनं भवति: MAD = average । x - x_mean । उदाहरणः >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"आगतसूचीषु प्रत्येकयोः क्रमेण अवयवयोः मध्ये संख्यायाः 'अन्तरालम्' प्रविष्टं कुरुत `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"अत्र अन्तर्भावः बहुविधः समूहः भवति, यस्मिन् अन्तर्भावः अन्तर्भावः अस्ति। प्रत्येकं समूहः अन्तर्भावः अस्ति। उदाहरणार्थः (() (()) अन्तर्भावः अस्ति, यस्मिन् अन्तर्भावः अस्ति, यस्मिन् अन्तर्भावः अस्ति।\"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"अङ्गीकृतसूत्रेषु केवलम् उपसूत्रं समाहितं फिल्टर् कराः >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"पूर्णाङ्काणां सूचीः, एकं ट्यूप्लः प्रतिपादयतु, यस्मिन् एकं योगं, एकं गुणं च अस्ति, यस्मिन् सूचीः अन्तर्गतस्य सर्वेषां पूर्णाङ्काणां गुणः अस्ति । रिक्तः योगः शून्यः, रिक्तः गुणः च १. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) ।\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"दिग्विधायकानां सूचिनाम् अनुक्रमस्य दिग्विधायकानां सूचिनाम् उत्पद्यते। >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\"पलिन्द्रोम\" इत्यस्य दीर्घतमं पदं ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य दीर्घतमं पदं ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्। \"पलिन्द्रोम\" इत्यस्य पूर्वपदम् ज्ञातव्यम्।\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"यदि दीयते तर्हि प्रत्ययस्य पालिन्द्रोमस्य परीक्षणं कुरुत।\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"इतः अनन्तरं, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च, इत्थं च।\"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"अङ्गस्य दीर्घतमं प्रत्ययपत्रं प्रतिपादयतु। यदि समं दीर्घं बहुव्रीहिः अस्ति तर्हि प्रथमं प्रत्ययपत्रं प्रतिपादयतु। यदि आगतपत्रं रिक्तं अस्ति तर्हि न प्रतिपादयतु। >>> दीर्घतमम् (([]) >>> दीर्घतमम् ((['a', 'b', 'c']) 'a' >>> दीर्घतमम् ((['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"a, b द्वयोः पूर्णाङ्गुलयोः सर्वाधिकः सामान्यविभाजकः परतः प्राप्नोति >>> सर्वाधिकः सामान्यविभाजकः ((3, 5) 1 >>> सर्वाधिकः सामान्यविभाजकः ((25, 15) 5) ।\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"इतः परतः सर्वः पूर्वपदः लघतमात् दीर्घतमं यावत् प्रविष्टः string इत्यस्य पूर्वपदानां सूचीः भवति >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"अत्र शून्यात् आरभ्य एन-पर्यन्तं संख्यायाः स्थान-सीमित-संख्यायाः शृङ्गाः लभन्ते।\"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"यदि कस्यचित् अक्षरस्य संख्या दीयते, तर्हि सः कानिचित् वर्णानि (अपि विशेषणानि) प्राप्नोति?\"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"अत्र कूटशब्दः अस्ति: 'o' - note, lasts four beats 'o' - 1/2 note, lasts two beats ' - quater note, lasts one beat >>> parse_music. 'on",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"मूलसूत्रे कतिधा उपसूत्रं प्राप्नोति? अधोलिखितानि घटनाः गणयन्तु. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"'शून्य' इत्यतः 'नौ' इत्यतः 'शून्य' इत्यतः 'नौ' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'नौ' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः 'शून्य' इत्यतः' इत्यतः 'शून्य' इत्यतः 'शून्य'\"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"अत्र द्वयोः संख्यायाः (अन्यतम द्वयोः संख्यायाः) सूचीः दीयते, अतः द्वयोः संख्यायाः चयनं कृत्वा, द्वयोः समीपे स्थितौ द्वयोः संख्यायाः क्रमात् (अल्पसंख्या, बृहत्संख्या) पुनः प्राप्तिः क्रियते। >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"संख्यायाः सूची (अन्यतम द्वयोः तत्वानां), तत् सूचीं प्रति रेखागतपरिवर्तनं क्रियते, येन लघुतमः संख्याः 0 भवति, बृहत् संख्याः च 1 भवति >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] ।\"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"केवलम् पूर्णाङ्कं यानि च पायथन-मूल्यानि सन्ति, तेषां सूचीं फिल्टर् कराः >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"<string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string><string>><string>><string>>\"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"दिदृक्ष् संख्या n, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-संख्येय-विभाजनं करोति, n-विभाजनं करोति।\"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"अतः प्रत्येकं गुणकं कारकविभाजनं कृत्वा, तस्य गुणानां संख्याः यथा, --> गुणनिरूपणम् (२,२,२) --> गुणनिरूपणम् (२५) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (२,५) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (८) --> गुणनिरूपणम् (२,२,२) --> गुणनिरूपणम् (२५) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (८) --> गुणनिरूपणम् (८) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) --> गुणनिरूपणम् (७०) ।\"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णाङ्काणां सूचीभ्यः, सर्वेभ्यः तत्वान् निष्कासयतु ये एकाधिकवारम् आगतवन्तः सन्ति। आद्युत्पादने यथाक्रमं स्थापयतु। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"दिशन्त्य्-अङ्गुली-अक्षर-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली-अङ्गुली\"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"एकस्मिन् सूत्रे श्लोकानां सूची समन्वितं कुरुत >>> समन्वितम् ({}) ' ' >>> समन्वितम् ({'a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"अङ्गीकृतः पूर्वपदः -> filter_by_prefix ((([], 'a') [] >>> filter_by_prefix ((['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array']\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"अत्र केवलं धनात्मकं संख्यां प्रति लभ्यते। >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1]\"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"यदि दिशति तर्हि TRUE इत्यस्य प्रत्ययस्य प्रत्ययान्तं प्रतिपादयतु। अन्यथा TRUE इत्यस्य प्रत्ययान्तं प्रतिपादयतु।\"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs बहुपदस्य गुणाङ्कः अस्ति। find_zero find x such that poly(x) = 0. find_zero इत्यनेन बहुव्रीहिः शून्यमात्रं विन्दुम् एव प्रतिपादयति, यदि बहुव्रीहिः अपि अस्ति तर्हि। find_zero इत्यनेन केवलम् xs इत्यस्य सूचीं गृह्णाति, यस्मिन् समसंख्याः गुणाङ्काः सन्ति, एवं बृहत् शून्य-असङ्ख्यक गुणाङ्कः अपि अस्ति, यतो हि सः हलः प्रतिपादयति। >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"बहुपदं बहुलम् (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x) = (x)\"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"इदम् फलनम् सूची l लभते तथा सूची l' इत्यनेन लभते यत् l' इत्यस्य सूचकः l इत्यनेन सह समानः भवति यत् सूचकः l त्रयाणां विभक्त्यर्थे न भवति, तथा च तस्य मूल्यम् सूचकः l इत्यस्य समानाधिकः सूचकः l इत्यनेन विभक्त्यर्थे भवति, परन्तु क्रमबद्धः भवति. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"<string name=\"recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_recent_cent_recent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent_cent\"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद\"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"11 वा 13 इत्यनेन विभाज्य संख्यायां 7 इत्यस्य संख्यां प्रतिपादयतु।\"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"इदम् फलनम् सूची l लभते तथा सूची l' इत्यनेन लभते यत् l' इत्यस्य मूल्यम् l-समानम् अस्ति, यदा l-प्रत्ययः इक्-प्रत्ययेषु भवति, तदा l-प्रत्ययेषु तस्य मूल्यम् l-प्रत्ययेषु भवति, किन्तु क्रमबद्धम् भवति. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"encode_cyclic इत्यनेन कूटबद्धं सूत्रं प्रविष्टं भवति।\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"त्रिवर्णानां चक्रवर्ती समूहानां द्वारा सङ्केतः स्ट्रिंगः प्रतिपादयति ।\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib इत्यनेन n-अङ्कं प्रतिपादयति यत् फिबोनाची-संख्या अस्ति, सः अपि च अङ्कः अस्ति। >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero इत्यनेन पूर्णाङ्काणां सूची प्राप्ता भवति। यदि सूचीमध्ये त्रिविधः पूर्णाङ्कः शून्यम् भवति तर्हि सः सत्यं प्रति लभते, अन्यथा मिथ्याम् । >>> triples_sum_to_zero (([१, ३, ५, ०]) मिथ्या >>> triples_sum_to_zero (([१, ३, -२, १]) सत्यम् >>> triples_sum_to_zero (([१, २, ३, ७]) मिथ्या >>> triples_sum_to_zero (([२, ४, -५, ३, ९, ७]) सत्यम् >>> triples_sum_to_zero (([१]) मिथ्या \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"कल्पना करोतु यत् एकं मार्गम् पूर्णतया सरलं असीमतः दीर्घं रेखा अस्ति। n कारः वामतः दक्षिणतः गच्छन्ति; समन्तात्, n कारानां भिन्नं समूहं दक्षिणतः वामतः गच्छन्ति। कारानां द्वयोः समूहः एक-अर्काद् अति दूरे एव गच्छन्ति। सर्वे कारः समानं गच्छति। द्वयोः कारयोः टकरावम् भवति यदा वामतः दक्षिणतः गच्छती कारः दक्षिणतः वामतः गच्छती कारं टकरायते। तथापि, कारः असीमतः दृढः बलवान् च भवति; अतः ते यथा न टकरावन्ति तथैव स्वं प्रक्षेपमार्गं गच्छन्ति। अयं फलनम् एतेन टकरावानां सङ्ख्यां निर्गच्छति।\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"पुनः प्राप्ते सूचीः, यस्मिन् तत्वेषु १ः वृद्धिः भवति। >>> incr_list (([१,२,३]) [२,३,४] >>> incr_list (([५,३,५,२,३,९,०,१२३)) [६,४,६,३,४,४,१०,१२४]\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero इत्यनेन पूर्णाङ्काणां सूची प्राप्ता भवति। यदि सूचीमध्ये द्वौ भिन्नौ तत्वौ शून्यसंख्यौ भवन्ति तर्हि सः सत्यं प्रति लभते, अन्यथा मिथ्याम् । >>> pairs_sum_to_zero (([१, ३, ५, ०]) मिथ्या >>> pairs_sum_to_zero (([१, ३, -२, १]) मिथ्या >>> pairs_sum_to_zero (([१, २, ३, ७]) मिथ्या >>> pairs_sum_to_zero (([२, ४, -५, ३, ५, ७]) सत्य >>> pairs_sum_to_zero (([१]) मिथ्या \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"आगतसंख्या x-स्य संख्यात्मकं आधारं आधारं प्रति परिवर्तय। रूपांतरणानन्तरं स्ट्रिंग् प्रतिपादने परावर्त्तनं कुरुत। आधारसंख्याः १०-भ्यः कानिचित् न्यूनानि सन्ति। >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"त्रिकोणस्य पार्श्वस्य दीर्घत्वं, उच्चतरं पुनरागमनक्षेत्रं च दत्त्वा. >>> triangle_area(5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 क्रमाङ्कः Fibbonacci क्रमानुसारं क्रमेण भवति, यत् निम्नलिखितप्रकारेण परिभाष्यते: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया fib4 क्रमाङ्कः क्रमेण n-तमः अवयवस्य गणनाय एकं फलनं लिखत। पुनरावृत्तिः न प्रयुक्ताः। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"सूचीषु विद्यमानानां तत्वानां मध्यमाङ्कः पुनः प्राप्तः भवति l. >>> मध्यमाङ्कः (([३,१,२,४,५]) 3 >>> मध्यमाङ्कः (([१०,४,६,१००,१०,२०]) १५.० \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"यदि दीयते तर्हि जाँचयति यदि दीयते स्ट्रिंग् एकं पालिन्द्रोम् अस्ति >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n modulo p (numerics) इत्यस्य अवतारं कुरुत। >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"इङ्कोड_शिफ्टः फलनम् अन्तर्निहितं प्रविष्टिकरणं गृह्णाति। डिकोडं प्राप्तं शृङ्खलं प्रति लभते।\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"अक्षरं प्रति ५-गुणं प्रतिस्थापयित्वा कूटबद्धं स्ट्रिंगं प्रतिपादयति ।\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels इति कार्यम् अस्ति यत् अण्-प्रत्ययस्य शृङ्गे स्वरं न लभते। >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"यदि सूची l-अन्तर्गतं सर्वम् संख्याः सीमा t-अन्तर्गतं भवति तर्हि TRUE इत्यस्य परावर्तनं कुरुत। >>> below_threshold (([1, 2, 4, 10], 100) TRUE >>> below_threshold (([1, 20, 4, 10], 5) FALSE ।\"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"द्वौ संख्याः x तथा y समाहितौ, तदा एते द्वौ संख्याः समाहितः भवन्ति, अतः एते द्वौ संख्याः समाहितः भवन्ति।\"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"यदि द्वयोः शब्दयोः समानं वर्णः अस्ति चेत् निरीक्षणीयम्। >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddddabc') True >>> same_chars (('abcd', 'dddddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars (('abcdd', 'dddddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') False \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-वां फिबोनाची संख्याः परावर्त्तते. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets इत्यस्य \"<\" तथा \">\" इत्यस्य स्ट्रिंग् अस्ति. यदि प्रत्येकं उद्घाटनं ब्रैकेटस्य अनुकूलं समापनं ब्रैकेटं भवति तर्हि return True. >>> correct_bracketing (((\"<\") False >>> correct_bracketing (((\"<>\") True >>> correct_bracketing (((\"<><>\") True >>> correct_bracketing (((\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([१,२,४,२०]) True >>> monotonic (([१,२०,४,१०]) False >>> monotonic (([४,१,०,१०]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"द्वयोः सूत्राणां कृते एकं विशिष्टं सामान्यं तत्वं प्रतिपादयति। >>> सामान्यं (([१,४,३,३४,६५३,२,५], [५,७,१,५,९,६५३,१२१)) [१,५,६५३] >>> सामान्यं (([५,३,२,८], [३,२]) [२,३] ।\"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n इत्यस्य प्रधानं कारकम् प्रतिपाद्यताम्। n > 1 इति गृहीत्वा सः प्रधानं न भवति। >>> largest_prime_factor ((१३१९५) २९ >>> largest_prime_factor ((२०४८) २ \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n इत्यस्य फलनम् अस्ति यत् 1 तः n पर्यन्तं संख्यायाः योगं करोति। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets इत्यस्य \"(\" तथा \"\") इत्यस्य स्ट्रिंग् भवति। यदि प्रत्येकं उद्घाटनं ब्रैकेटस्य अनुकूलं समापनं ब्रैकेटं भवति तर्हि TRUE इत्यस्य रिटर्नं भवति। >>> correct_bracketing (((\"(\") False >>> correct_bracketing (((\")) TRUE >>> correct_bracketing (((() TRUE >>> correct_bracketing (((()) TRUE >>> correct_bracketing (((()) TRUE False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs इत्यनेन बहुपदस्य गुणाङ्कः भवति। xs[0] + xs[1] * x + xs[2] * x^2 + .... इत्यनेन बहुपदस्य व्युत्पादकः पुनः प्राप्नोति। >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib संख्याक्रमः Fibbonacci अनुक्रमस्य सदृशः अनुक्रमः अस्ति यत् निम्नलिखितप्रकारेण परिभाष्यते: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। कृपया एकं फलनं लिखत यत् fibfib संख्याक्रमस्य n-तमः तत्वं कुशलतया गणनाय शक्नोति। >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"अत्र 'y' अपि स्वरः अस्ति, किन्तु केवलं यदा सः उक्तशब्देन अन्ते भवति। उदाहरणम्: >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"अधिकं परीक्षणं कुरुत।\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"यदि shift > number of digits, return digits reversed. >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"कार्यम् एकं फलनं लिखत यत् आगतं वर्णमाला भवति, तथा च केवलम् ऊर्ध्वं वर्णानां योगं ASCII-कोडं प्रति लभते। उदाहरणम्: digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"अत्र अङ्गुष्ठं, अङ्गुष्ठं, मङ्गुलम् च सन्ति। अङ्गुष्ठं, मङ्गुलस्य च सङ्ख्यां दर्शयति। अङ्गुष्ठं, मङ्गुलस्य च सङ्ख्यां दर्शयति। अङ्गुष्ठं, मङ्गुलस्य च सङ्ख्यां दर्शयति। अतः अङ्गुष्ठस्य फलानां सङ्ख्यां प्रति लभ्यते। उदाहरणार्थः fruit_distribution\"5अङ्गुष्ठं च 6अङ्गुलम् च\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0अङ्गुष्ठं च 1अङ्गुलम् च\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2अङ्गुष्ठं च 3अङ्गुलम् च\",100) -> 100 - 2 - 3 = 95 fruit_distribution\"100अङ्गुष्ठं च 1अङ्गुलम् च\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"अत्र अङ्गुष्ठस्य शाखायाः प्रतिपादकः एरण्डः अस्ति, तस्मिन् न नकारात्मकः पूर्णाङ्कः अस्ति, अतः भवता एकः नोडः प्राप्तः, अतः सः पुनः प्राप्तः भवेत् । यदि बहुषु नोडस् मध्ये समानः लघुतमः लघुतमः मानः अस्ति, तर्हि सः नोडः प्राप्तः, अतः सः लघुतमः सूचकः अस्ति । यदि न कोऽपि लघुतमः मानः अस्ति अथवा एरण्डः रिक्तः अस्ति, तर्हि सः पुनः प्राप्तः भवेत् । उदाहरणः १ः इनपुटः [४,२,३] आउटपुटः [२,१] स्पष्टीकरणः २ः लघुतमः लघुतमः लघुतमः मानः अस्ति, २ः लघुतमः सूचकः अस्ति । उदाहरणः २ः इनपुटः [१,२,३] आउटपुटः [२,१] स्पष्टीकरणः २ः लघुतमः मानः अस्ति, २ः लघुतमः लघुतमः सूचकः अस्ति । उदाहरणः ३ः इनपुटः [४] आउटपुटः [५,३,४] इनपुटः [०,४] आउटपुटः १ः लघुतमः मानः अस्ति, अतः प्रथमः नोडः लघुतमः शून्यः अस्ति, अतः तस्य सूचकः शून्यः अस्ति । उदाहरणः १ः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः शून्यः\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''यदि इदम् संख्या अस्ति, तर्हि इदम् संख्याः पुनः प्राप्तः भवति। यदि इदम् संख्याः न अस्ति, तर्हि इदम् संख्याः पुनः प्राप्तः भवति -1. उदाहरणम्: search (([4, 1, 2, 2, 3, 1]) == 2 search (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search (([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''पूर्णाङ्काणां सूचीः, विचित्र क्रमेण सूचीः प्रतिपादयति। विचित्र क्रमः, यदा भवन्तः न्यूनतमं मूल्यम् आरभन्ति, तदा शेषानां पूर्णाङ्काणां अधिकतमं, ततः न्यूनतमं च। उदाहरणम्: strange_sort_list (([१,२,३,४]) == [१,४,२,३] strange_sort_list (([५,५,५,५]) == [५,५,५,५] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''त्रिकोणस्य त्रिपक्षस्य दीर्घत्वं ददाति। यदि त्रयो पक्षः त्रिकोणं भवति तर्हि त्रिकोणस्य क्षेत्रं द्विदशमलङ्कं प्रति लप्स्यते। अन्यथा -1 इत्यनेन त्रयः पक्षः त्रिकोणं भवति यदि द्वयोः पक्षयोः योगः तृतीयपक्षस्य दीर्घः भवति। उदाहरणम्: त्रिकोणः क्षेत्रः (३, ४, ५) == ६.०० त्रिकोणः क्षेत्रः (१, २, १०) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''यदि वस्तु q उड्डीयते, तर्हि True, अन्यथा False इति फलनम् लिखत। यदि वस्तु q सन्तुलितं भवति (तदर्थम् इयं एकं पालिन्द्रोमिकम् सूची) तथा तस्य तत्वानां योगः अधिकतमसम्भाव्य भारं w यावत् वा न्यूनः भवति तर्हि सः True इति फलनम् लिखत। उदाहरणम्: will_it_fly (([१,२], ५) -> False # १+२ अधिकतमसम्भाव्य भारं न्यूनं भवति, किन्तु असंतुलितं भवति। will_it_fly (([३,२,३], १) -> False # सन्तुलितं भवति, किन्तु ३+२+३ अधिकतमसम्भाव्य भारं अधिकं भवति। will_it_fly (([३,२,३], ९) -> True # ३+२३ अधिकतमसम्भाव्य भारं न्यूनं भवति, अतः सः सन्तुलितः भवति। will_it_fly ((([3], 5) -> True # ३ अधिकतमसम्भाव्य भारं न्यूनं भवति, अतः सः संतुलितः भवति।'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"पूर्णाङ्काणां एकं सरणीं प्राप्ते, सरणीं पालिन्द्रोमिकं कर्तुं किञ्चित् घटकं परिवर्तयितुम् आवश्यकं भवति । पालिन्द्रोमिकं सरणीं एकं सरणीं भवति यत् समानं पठेत् , एकस्मिन् परिवर्त्तने, एकं घटकं अन्यं घटकं परिवर्तयितुं शक्यते । उदाहरणाय: smallest_change (([१,२,३,५,४,७,९,६]) == ४ smallest_change (([१,२,३,४,३,२,२]) == १ smallest_change (([१,२,३,२,१]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''यदि द्वयोः सूचीषु समानसंख्याः वर्णः अस्ति, तर्हि प्रथमं सूची प्रति लभेत। उदाहरणम् total_match ([], []) -> [] total_match (['hi', 'admin'], ['hI', 'Hi']) -> ['hI', 'Hi'] total_match (['hi', 'admin'], ['hi', 'admin', 'project']) -> ['hi', 'admin'] total_match (['hi', 'admin'], ['hi', 'admin', 'project']) -> ['hi', 'admin'] total_match (['hi', 'admin'], ['I', 'hi', 'hi']) -> ['hi', 'hi'] total_match (['hi', 'admin'], ['hi', 'hi', 'hi']) -> ['hi', 'hi', 'hi'] total_match (['4', ['1', '2', '3', '4', '5', ['4]) -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"यदि दीयते संख्या त्रिः अभाज्यसंख्यायाः गुणनफलम् अस्ति, तर्हि फलितं फलं लिखत। अन्यथा फलितं भवति। (a) 100 इत्यपेक्षा भवति इति ज्ञात्वा उदाहरणम्: is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"भवद्भिः कार्यम् अस्ति यत्, यदि संख्याः x, n-स् य साधारणः शक्तिः अस्ति, तदा सः फलनम् प्रतिपादयति, यदि n**int=x, तदा सः फलनम् प्रतिपादयति। उदाहरणम्: is_simple_power (१, ४) => true is_simple_power (२, २) => true is_simple_power (८, २) => true is_simple_power (३, २) => false is_simple_power (३, १) => false is_simple_power (५, ३) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''यदि इङ्गेर् इङ्गेर् इति पूर्णाङ्कः अस्ति, तर्हि इङ्गेर् इति पूर्णाङ्कः कस्यचित् पूर्णाङ्कः कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित्'''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्कः = अङ्\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"दशमलवसंख्यकस्य रूपं ददाति, तस्य द्विवचनसंख्यकरूपं परिवर्तयितुम् कर्तव्यम् । कार्यस्य कृते एकं अक्षरसङ्ख्यां प्रतिपादयतु, यस्मिन् प्रत्येकं अक्षरं द्विवचनसंख्यकं प्रतिपादयतु । अक्षरसङ्ख्यायाः प्रत्येकं अक्षरं '0' अथवा '1' भवति । अक्षरसङ्ख्यायाः आरम्भे तथा अन्ते अतिरिक्तं 'db' वर्णं भवति । अतिरिक्तं अक्षरं स्वरूपस्य सहाय्यं कर्तुम् अस्ति । उदाहरणम् - decimal_to_binary (१५) # returns \"db1111db\" decimal_to_binary (३२) # returns \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"यदि कस्यचित् अक्षरस्य दीर्घः ३ वा अधिकः अस्ति, तदा सः अक्षरः \"सन्निहितः\" भवति। उदाहरणम्: is_happy (a) => false (false) is_happy (a) => false (false) is_happy (a) => true (true) is_happy (a) => false (false) is_happy (adb) => true (true) is_happy (adb) => true (true) is_happy (xyy) => false (false) ।\"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"अतः सः छात्राः पत्राणि पठन्ति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति, अतः सः छात्राः पत्राणि पठति ।\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"यदि string-लम्बाः अभाज्यसंख्याः सन्ति तर्हि True या False इत्यस्य फलनम् लिखत । अन्यथा prime_length ({'हेल्लो') == true prime_length ({'अब्कडक्बा') == true prime_length ({'किट्टन्स्') == true prime_length ({'अर्जन्') == False इति फलनम् लिखत ।\"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"यदि धनात्मकं पूर्णाङ्कं n प्राप्नोति, तर्हि 1 इति आरभ्यते वा समाप्तं भवति इति धनात्मकं पूर्णाङ्कं n-अङ्कं प्रतिपद्यते।\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"उदाहरणम्: यदि N = 1000, तर्हि तस्य अङ्गुलानां योगः 1 भवेत्, अतः \"1\" इति निर्गमः भवेत्। यदि N = 150, तर्हि तस्य अङ्गुलानां योगः 6 भवेत्, अतः \"110\" इति निर्गमः भवेत्। यदि N = 147, तर्हि तस्य अङ्गुलानां योगः 12 भवेत्, अतः \"1100\" इति निर्गमः भवेत्। चरः: @N पूर्णाङ्कः Constraints: 0 â‰¤ N â‰¤ 10000. आउटपुटः द्विआधारी संख्यायाः शृङ्खला \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"पूर्णाङ्काणां सूचीः अस्ति, अतः अतः अतः पूर्णाङ्काणां सूचीः न भवति। अतः अतः अतः पूर्णाङ्काणां सूचीः न भवति। अतः अतः पूर्णाङ्काणां सूचीः न भवति। अतः पूर्णाङ्काणां सूचीः न भवति। अतः पूर्णाङ्काणां सूचीः न भवति। अतः पूर्णाङ्काणां सूचीः न भवति।\"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"अङ्गस्य आदेशित संस्करणं, एकं अङ्गं भवति यत्र सर्वे शब्दाः (अङ्गं विभक्तम्) नूतनशब्देन प्रतिस्थापितः भवन्ति यत्र सर्वे वर्णः आस्की-मूल्यस्य आधारतः आरोहणीयक्रमेण विहितः भवति। ध्यानाकर्षणम्: वाक्यस्य शब्दानां रिक्तस्थानानां च क्रमं भवद्भिः रक्षणीयम्। उदाहरणार्थः anti_shuffle ((('Hi') इत्यनेन 'Hi' इति प्रतिगमनं करोति 'Hi' anti_shuffle ((('hello') इत्यनेन 'ehllo' anti_shuffle (('Hello World!!!') इत्यनेन 'Hello !!!Wdlor' इति प्रतिगमनं करोति।\"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"अत्र द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्विमितीयसूत्रं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयं भवति, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन् द्वितीयः, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, यस्मिन्, य\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"यदि न-ऋणात्मकं पूर्णाङ्कं अस्ति, तर्हि अस्य पदान्तस्य प्रतिलिपिं पुनः प्राप्ताः, यदि योगः (प्रथमः सूचिका-मूल्यं, अन्तिमः सूचिका-मूल्यं) विषमः अस्ति, तर्हि अस्य पदान्तस्य क्रमः आरोहति, यदि योगः (प्रथमः सूचिका-मूल्यं, अन्तिमः सूचिका-मूल्यं) समः अस्ति तर्हि घटोन्मुखः भवति।\"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"एकं फलनम् encrypt निर्मातु यत् एकं स्ट्रिंगं तर्करूपेण गृहीत्वा वर्णमालायाः परिक्रमणैः सह एकं सङ्केतं स्ट्रिंगं प्रति लभते। वर्णमालायाः परिक्रमणम् एतादृशम् भवेत् यत् अक्षरं द्विगुणं द्विगुणं गच्छति। उदाहरणार्थः encrypt (('hi') return 'lm' encrypt (('asdfghjkl') return 'ewhjklnop' encrypt (('gf') return 'kj' encrypt (('et') return 'ix' ।\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"भवद्भिः पूर्णाङ्काणां सूची दीयते। भवद्भिः एकं फलनं लिखत यत् सूचीयाः द्वितीयं लघुतमं तत्वं प्रतिपादयति। यदि एतत् तत्वं न अस्ति तर्हि न प्रतिपादयति।\"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"\"I\" शब्दात् आरभ्यते वाक्यानां अन्तः \"I\" वा \"I\" इति भवति। उदाहरणार्थः >>> is_bored (उदाहरणार्थः \"हेलो वर्ल्ड\") 0 >>> is_bored (उदाहरणार्थः \"स्वर्गः नीलः अस्ति। सूर्यः प्रकाशयति। अहं इदं वातं मन्ये\") 1 ।\"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''३ संख्याः गृहीत्वा कार्यम् निर्मातुं प्रयतते। यदि एकः संख्या अन्ययोः योगे भवति, तदा सः सत्यं प्रतिफलयति, यदि सर्वे संख्याः पूर्णाङ्काः भवन्ति, अन्यत्रं मिथ्या प्रतिफलयति। उदाहरणम् any_int{\\displaystyle any_int{\\displaystyle any_int{\\displaystyle any_{\\displaystyle any_{\\displaystyle {\\displaystyle {\\mathbf {5}}} , 2, 7) । any_int{\\displaystyle any_{\\displaystyle any_{\\mathbf {3}}} , 2, 2) । any_int{\\displaystyle any_{\\mathbf {3}}} , -२, 1) । any_int{\\displaystyle any_{\\mathbf {3}}} , -२, 2) । any_int{\\mathbf {3}}} , -२, 1) ।'''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"एकं फलनम् लिखत यत् संदेशं गृहीत्वा, एतद् एव रूपेण सङ्केतं करोति यत् सः सर्वेषां अक्षरानां लकारं परिवर्त्य, सन्देशस्य सर्व्व-अक्षरान् आङ्ग्ल-वर्णमालायां तत्-अक्षरात् पूर्वं द्वौ स्थानानि उपलभ्यन्ते। केवलं अक्षरं गृहीत्वा लिखत। उदाहरणम्: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"अत्र पूर्णाङ्काणां सूची अस्ति, अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः अतः\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"यदि सर्व कुञ्जयः लघु-अक्षरयुक्ताः सन्ति अथवा सर्व कुञ्जयः बृहत्-अक्षरयुक्ताः सन्ति तर्हि True प्रतिपादितं भवेत् अन्यथा False प्रतिपादितं भवेत् । यदि दीयते शब्दकोशः रिक्तः अस्ति तर्हि फलनम् False प्रतिपादितं भवेत् । उदाहरणम्: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) True प्रतिपादितं भवेत् । check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) False प्रतिपादितं भवेत् । check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) False प्रतिपादितं भवेत् । check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) False प्रतिपादितं भवेत् । check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) True प्रतिपादितं भवेत् ।\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"न-ऋणात्मकं पूर्णाङ्कं गृहीत्वा प्रथमं एन पूर्णाङ्कं, एन-संख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येयसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख्येसंख\"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"अतः इदम् फलनम् पूर्णं भवेत् यत् द्वौ पूर्णाङ्कं गृहीत्वा तेषां एकाधिकसंख्यायाः गुणं लभते। अतः इदम् आगतं फलं सदैव मान्यम् अस्ति इति गृहीत्वा उदाहरणम्: गुणनम् (१४८, ४१२) इत्यनेन १६ लभते। गुणनम् (१९, २८) इत्यनेन ७२ लभते। गुणनम् (२०, १८५१) इत्यनेन ० लभते। गुणनम् (१४, १५) इत्यनेन २० लभते।\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"string s इत्यस्य कृते, समसूत्रेषु अपरकेस स्वरानाम् सङ्ख्यां गणयतु। उदाहरणार्थः count_upper{\\displaystyle \\mathrm {aBCdEf} } इत्यनेन 1 count_upper{\\displaystyle \\mathrm {aBCdEf} } इत्यनेन 0 count_upper{\\displaystyle \\mathrm {aBCdEf} } इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0 इत्यनेन 0\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''यदि संख्या द्वयोः समीपे अस्ति, तदा सः शून्यात् दूरम् आगच्छति। उदाहरणम् >>> closest_integer ((१०)) १० >>> closest_integer ((१५.३)) १५ टिप्पणीः शून्यात् दूरम् आगच्छति, अतः यदि दत्ता संख्या द्वयोः समीपे अस्ति, तर्हि सः शून्यात् दूरः आगच्छति। उदाहरणार्थः closest_integer ((१४.५)) इत्यनेन १५, closest_integer ((१४.५)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५) इत्यनेन १५, closest_integer ((१५.३)) इत्यनेन १५) इत्यनेन १५ इत्यनेन १५ इत्यनेन १५ इत्यनेन १५ इत्यनेन शून्यात् दूरं प्रतिफलम् आगच्छति।'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"यदि एकं धनात्मकं पूर्णांकम् n अस्ति, तर्हि भवता n स्तरीयानां पाषाणानां समूहः निर्मातुं शक्यते। प्रथमः स्तरः n पाषाणैः युक्तः अस्ति। अग्रे स्तरे पाषाणानां सङ्ख्या अस्ति - अग्रे विषमसंख्या यदि n विषमम् अस्ति, अग्रे समसंख्या यदि n समम् अस्ति। सूचीमध्ये प्रत्येकं स्तरं पाषाणानां सङ्ख्यां प्रतिपादयतु, यत्र इन्द्रेषु i इत्यस्य तत्वस्य सङ्ख्या स्तरे (i+1) अस्ति। उदाहरणम्: >>> make_a_pile ((3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"अत्र कम्पायाः वा रिक्तस्थानानां द्वारा विभक्तः शब्दः प्रदत्तः अस्ति। भवतः कार्यम् अस्ति यत् शब्दानां मध्ये विभक्तः शब्दः पुनः लभेत। उदाहरणार्थः words_string (शब्दः) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string (शब्दः) == [\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"यदि इदम् संख्या नास्ति, तर्हि इदम् फलनम् -1 इत्यस्य प्रतिफलम् ददाति। उदाहरणार्थः choose_num (१२,१५) = १४ choose_num (१३,१२) = -1 ।\"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"यदि n इत्यनेन बहुव्रीहिः अस्ति, तर्हि -१ इत्यस्य उत्तरं ददातु। उदाहरणम्: rounded_avg (१, ५) => \"0b11\" rounded_avg (७, ५) => -1 rounded_avg (१०), => \"0b11\" rounded_avg (२०), => \"0b11010\"\"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"धनात्मकानां पूर्णाङ्काणां सूची प्राप्ते, x इत्यनेन समसंख्यायाम् अङ्गानां सूची पुनः प्राप्ते। नोटः: पुनः प्राप्ता सूची वृद्धिशील क्रमेण विसर्जिते। उदाहरणार्थः >>> unique_digits (([१५, ३३, १४२२, १]) [१, १५, ३३] >>> unique_digits (([१५२, ३२३, १४२२, १०]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"यदि इमे सर्वे संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः संख्यायाः\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"f इत्यस्य फलनम् क्रियताम्, यत् n इत्यस्य परिमाणं गृहीत्वा n इत्यस्य सूचिं प्रति लभते, अतः यदि i इत्यस्य गुणः अस्ति तर्हि i इत्यस्य गुणः भवति, अन्यथा i इत्यस्य गुणः भवति। i इत्यस्य गुणः अस्ति 1 इत्यस्य गुणः अस्ति (1 * 2 * ... * i) । उदाहरणम्: f (((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"धनात्मकं पूर्णाङ्कं n लभ्यते, अतः एकं ट्यूप्लं प्रति लभ्यते, यत्र संख्यायाः सम-अविशिष्टं पूर्णाङ्कं भवति, यानि अन्तर्-विभागे अन्तर्भवन्ति। उदाहरणः: आगतः 3 निर्गतः (1, 2) स्पष्टीकरणः पूर्णाङ्कं पालिन्द्रोमः 1, 2, 3. एकं समं, द्वौ च विषमम् अस्ति। उदाहरणः 2: आगतः 12 निर्गतः (4, 6) स्पष्टीकरणः पूर्णाङ्कं पालिन्द्रोमः 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. चतुर्णां समं, षट् च विषमम् अस्ति। नोटः 1. 1 <= n <= 10^3 2. ट्यूप्लः क्रमशः सम-अविशिष्टं पूर्णाङ्कं पालिन्द्रोमं प्रति लभते। \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"count_nums इत्यस्य फलनम् लिखत, यस्मिन् पूर्णाङ्काणां सरणी भवति, अतः अतः अङ्केषु कस्यापि सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः\"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"अस्मिन् एरे 'arr' इत्यस्मिन् N पूर्णाङ्काः सन्ति arr[1], arr[2], ..., arr[N]। एरेः संख्याः अनियमितरूपेण क्रमेण भवन्ति। भवतः कार्यम् एतत् निश्चितम् अस्ति यत् एरेः क्रमेण न घटत इति निश्चितं कर्तुम् शक्यते, यदि एरेः कृते अधोलिखितं कार्यं कुरुः: भवतः दास्य्-अवस्थायाः क्रमेण कर्तुम् अनुमतम् अस्ति। एकः दास्य्-अवस्थायाः क्रमः अर्थः एरेः सर्वेषां अङ्गानां दास्य्-अवस्थायाः प्रतिस्थापनम् दास्य्-अवस्थायाः प्रतिस्थापनम्। एरेः अन्तिमः अङ्गः एरेः प्रारम्भिक-अवस्थायां अर्थात् ०-अवस्थायां प्रतिस्थापनम् भवति। यदि उपरोक्तं कार्यं कर्तुं शक्यम् अस्ति, तर्हि पुनः प्राप्तिः True अन्यथा False। यदि एरे रिक्तः अस्ति तर्हि पुनः प्राप्तिः True भवति। नोटः दत्ता सूची अनन्य-अवस्थायाः निश्चितं भवति। उदाहरणेन: move_one_{(ball_[४, ३, ४, ५, २]True Explan: Performin 2 right operation, non-decreasing order is possible for the array.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"अत्र एकं फलनम् अस्ति यत् द्वयोः संख्यासूत्राणां मध्ये आदान-प्रदानं कर्तुम् शक्नोति, येन lst1 इत्यस्य संख्याः समः भवेत् । lst1 तथा lst2 इत्ययोः मध्ये आदान-प्रदानस्य संख्यायाः किमपि सीमा नास्ति । यदि lst1 तथा lst2 इत्ययोः मध्ये आदान-प्रदानं कर्तुम् शक्नोति, तर्हि \"YES\" इत्यस्य उत्तरं ददातु । अन्यथा \"NO\" इत्यस्य उत्तरं ददातु । उदाहरणार्थः exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" इति आदान-प्रदानसूत्राणि न रिक्तानि भवन्तीति गृहीतः ।\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"यदि कानिचित् अक्षरानि एकस्मिन् स्थाने सन्ति, तर्हि सर्वेषां अक्षरानां संख्यां प्रति लभेत। उदाहरणम्: हिस्टोग्रामः (a, b, c, 1), हिस्टोग्रामः (a, b, a, b, c, b, c, b, b, c, d, e, f, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"कार्यम् अस्मिन् सूत्रे द्वौ वर्णसूत्रेषु s तथा c दत्ताः सन्ति, भवन्तः s इत्यस्मिन् विद्यमानानि वर्णानि विलोप्य c इत्यस्मिन् विद्यमानानि वर्णान् विलोप्य परिणामाणि प्राप्तुं प्रयतन्ते, ततः परिणामाणि प्राप्तुं प्रयतन्ते, यदि पूर्ववत् पूर्ववत् च समं पठ्यते तर्हि परिणामाणि प्राप्तुं प्रयतन्ते। यदि तु परिणामाणि प्राप्तुं प्रयतन्ते, तर्हि परिणामाणि प्राप्तुं प्रयतन्ते, यदि तु पूर्ववत् च पठन्ति तर्हि परिणामाणि प्राप्तुं प्रयतन्ते। उदाहरणार्थम् s = \"abcde\", c = \"ae\", परिणामाणि प्राप्तुं प्रयतन्ते ('bcd', False) यदि s = \"abcdef\", c = \"b\" परिणामाणि प्राप्तुं प्रयतन्ते ('acdef', False) यदि s = \"abcdedcba\", c = \"ab\", परिणामाणि प्राप्तुं प्रयतन्ते ('cdedc', True) ।\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"यदि कस्यचित् सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्यायाः सङ्ख्या\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"पूर्णाङ्काणां सरणीं प्राप्ते, नपुंसकानां कस्यचित् न-रिक्तस्य उप-सरणीयाः न्यूनतमं योगं ज्ञातव्यम्। उदाहरणम् minSubArraySum (([२,३,४,१,२,४]) == १ minSubArraySum (([१,२,३]) == -६ \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"भवद्भिः कुण्डानां चतुर्भुजः ग्रिडः प्रदत्तः। प्रत्येकं पंक्तिः एकं कुण्डं प्रतिपादयति, प्रत्येकं पंक्तिः एकं जल-विभागं प्रतिपादयति। प्रत्येकं कुण्डं एकं बक्टेन युक्तं भवति, यस्मिन् जलम् उत्कर्षयितुं शक्यते, सर्वेषां बक्टेन च एकं क्षमता अस्ति। भवद्भिः कुण्डानां उपयोगं कुण्डं निर्जनं कर्तुम् कर्तव्यम्। कुण्डं निपातनाय आवश्यकं संख्या निर्गन्तुं भवद्भिः कर्तव्यम्। उदाहरणः १ः आगतः ग्रिडः: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: १ निर्गन्तुः ६ः आगतः ग्रिडः: [[0,0,1,1], [0,0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: २ निर्गन्तुः ५ः आगतः: [[0,0,0], [0,0,0]] bucket_capacity: ५ निर्गन्तुः ०n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"अत्र अकारान्ताः संख्याः क्रमशः वर्धन्ते, अतः दशमलवसंख्यकानाम् संख्यायाः आधारः दशमलवसंख्यकानाम् संख्यायाः आधारः भवति ।\"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"यदि string s रिक्तः अस्ति तर्हि फलनम् रिक्तं सूचीम् प्रति लप्स्यते। नोटः: भवन्तः अनुमानं करिष्यन्ति यत् आगतस्य string-स्य अन्तर्गतं केवलं अक्षरं च अन्तरालानि सन्ति। उदाहरणम्: select_words (\"मरीयायाः कोमलम् आसीत्\", 4) ==> [\"कोमलम्\"] select_words (\"मरीयायाः कोमलम् आसीत्\", 3) ==> [\"मरीया\", \"कोमलम्\"] select_words (\"साध्याः श्वेतस्थानः\", 2) ==> [] select_words (\"नमस्ते संसारः\", 4) ==> [\"विश्वः\"] select_words (\"अंकलः समः\", 3) ==> [\"अंकलः\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"भवद्भिः शब्दः प्रदत्तः। भवद्भिः कार्यम् अस्ति यत् शब्दस्य दक्षिणपार्श्वे द्वयोः व्यञ्जनानां मध्ये स्थितं निकटतमं स्वरं (अक्षरसंवेदी) प्राप्नुत। आरम्भे अन्ते च स्वरः न गण्यते। यदि भवद्भिः उपरोक्तः शर्तः पूर्णाः स्वरः न लब्धः तर्हि रिक्तः शब्दः प्रत्यादाय। भवद्भिः अनुमानं कर्तुं शक्यते यत् उक्तः शब्दः केवलं आङ्ग्ल-अक्षरैः युक्तः अस्ति। उदाहरणम्: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''यदि भवता द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तदा द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति। यदि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति, तर्हि द्वौ सूत्रेषु '{}' इति सूत्रं दत्ता भवति।'''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"आरेः पूर्णाङ्काः, धनात्मकः पूर्णाङ्कः च अस्ति, अतः आरेः अधिकतमः k संख्याः अस्ति । उदाहरणः १ः आरेः इण्टः = [-३, -४, ५], क = ३ निर्गतः [-४, -३, ५] उदाहरणः २ः आरेः इण्टः = [-४, -४, ४], क = २ निर्गतः [-४, ४] उदाहरणः ३ः आरेः इण्टः = [-३, २, १, -१, -२, १], क = १ निर्गतः [२] नोटः १. आरेः लम्बाई [१, १०००] अन्तर्गतम् अस्ति । २. आरेः तत्वानि [-१, १०००] अन्तर्गतम् सन्ति । ३. ० <= k <= len ((arr) ।\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"न च रिक्तसूचीयाम् पूर्णाङ्काणां समानाम् गुणानाम् योगः परतः प्राप्नोति । उदाहरणम् हलः ([५, ८, ७, १]) ==> १२ हलः ([३, ३, ३, ३, ३]) ==> ९ हलः ([३०, १३, २४, ३२१]) ==> ० ।\"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"पूर्णाङ्कः k, पूर्णाङ्कः arr, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, पूर्णाङ्कः k, लप्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्प्\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"यदि कोल्त्स् प्रत्ययः अस्ति, तर्हि सः अनुक्रमः पूर्ववत् अनुक्रमः भवति । यदि पूर्ववत् अनुक्रमः समः अस्ति, तर्हि अग्रे अवयवः पूर्ववत् अवयवः अर्धं भवति । यदि पूर्ववत् अवयवः विषमः अस्ति, तर्हि अग्रे अवयवः पूर्ववत् अवयवः 3 गुणाः अङ्कः 1 इति भवति । अतः कोल्त्स् प्रत्ययः सदैव 1 इति भवति ।\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"यदि तिथिः वैधः अस्ति, तर्हि भवता एकं फलनम् लिखत, यदि तिथिः वैधः अस्ति, तर्हि सत्यम् लभते अन्यथा असत्यम् । यदि अधोलिखितानि नियमाणि सन्ति तर्हि तिथिः वैधः भवति: 1. तिथिः वैधः अस्ति । 2. मासानां 1,3,5,7,8,10,12 कृते दिनेषु संख्याः 1 वा अधिकं 31 दिनं न भवेत् । मासानां 4,6,9,11 कृते दिनेषु संख्याः 1 वा अधिकं 30 दिनं न भवेत् । मासानां 2. 3. मासानां संख्याः 1 वा अधिकं न भवेत् । 12.4 कृते दिनाङ्कः MM-DD-yyyy-रूपेण भवितव्यम् यथा valid_date (उदाहरणार्थः valid_date) (१०३-१-२०००) => valid_date (१५-०१-२०१२) => false valid_date (valid_date) (१०४-०४०) => false_date (valid_date) (१०६-०४-२०२०) => true (valid_date (date) (१०६-०४-२०२०) => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''यदि कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां कम्पायां क'''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''यदि संख्याः क्रमात् वर्धन्ते, तदा संख्याः क्रमात् वर्धन्ते, यदि संख्याः एकात् अधिकः अस्ति, तदा False इत्युत्तरं ददातु। यदि संख्याः एकात् अधिकः अस्ति, तर्हि False इत्युत्तरं ददातु। यदि संख्याः एकात् अधिकः अस्ति, तर्हि False इत्युत्तरं ददातु। यदि संख्याः एकात् अधिकः अस्ति, तर्हि False इत्युत्तरं ददातु।'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"यदि अन्तरालः अङ्गुल्यः अस्ति, तर्हि \"अतः\" प्रत्ययः, अन्यथा \"न\" प्रत्ययः, यदि अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तरालयोः अन्तःःः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः अन्तः\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"भवद्भिः पूर्णाङ्काणां सरणी प्राप्ता अस्ति, अतः भवद्भिः पूर्णाङ्काणां परिमाणानां योगं, सरणीयाः प्रत्येकं सङ्ख्यायाः गुणनफलम्, यं १, -१, अथवा ० इत्यनेन प्रतिपादयन्ति, प्रतिपादयितुम् आवश्यकाः सन्ति।\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"यदि कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्यचित् कस्य\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्यतिसंख्याकस्य त्रिविंशतिसंख्याकस्यतिसंख्याकस्यतिसंख्याकस्यतिसंख्याकस्य त्रिष्वपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपिपि\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"यदि सर्वेषां संख्यायाः संख्याः समः अस्ति, तदा 0 इत्यस्य गुणः प्राप्नोति। उदाहरणार्थः संख्याः ((1) == 1 संख्याः ((4) == 0 संख्याः ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''इत्थं सूत्रं विहितं भवति यत्, यदि कस्यचित् सूत्रस्य अन्तःकरणं भवति, तदा सः सूत्रः सत्यम् एव प्रतिपादयति। यदि कस्यचित् सूत्रस्य अन्तःकरणं भवति, तदा सः सूत्रः सत्यम् एव प्रतिपादयति।'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"अत्र संख्यायाः सूची दीयते। अत्र दीयते संख्यायाः वर्गस्य योगः, अतः प्रथमतः सूचीयाः प्रत्येकं तत्वं उपरिस्थ इण्ट्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अन्तर्-अ\"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''यदि क्तस्य अन्तिमः अक्षरः अक्षरसूत्रे अस्ति, तथा शब्दस्य भागः नास्ति, तर्हि फलकम् True प्रतिपादयतु। अन्यथा फलकम् False प्रतिपादयतु। \"शब्दः\" इत्यत्र वर्णानां समूहः अस्ति, यानि स्थानद्वारा पृथक्कृतानि सन्ति। उदाहरणम्: check_if_last_char_is_a_letter ({\"apple pie\") -> False check_if_last_char_is_a_letter ({\"apple pi e\") -> True check_if_last_char_is_a_letter ({\"apple pi e\") -> False check_if_last_char_is_a_letter ({\"apple pi e\") -> False check_if_last_char_is_a_letter ({\"apple pi e\")'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"यदि न अस्ति तर्हि पुनः प्राप्तिः -१ भवति। दत्ताः सरणीः न द्वित्वं प्राप्नोति। उदाहरणम्: can_arrange (१,२,४,३,५) = ३ can_arrange (१,२,३) = -१\"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    ''''a' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'a' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b' इत्यत्र 'b''''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"यदि कस्यचित् वास्तविकसंख्येः कस्यचित् अकारस्य रूपे निरूपणं क्रियते, तदा सः अकारः न प्राप्नोति । यदि कस्यचित् वास्तविकसंख्येः अकारस्य रूपे निरूपणं क्रियते, तदा सः अकारः न प्राप्नोति ।\"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"यदि n इत्यस्य संख्यायाः योगः अस्ति, तर्हि तस्य संख्यायाः परिमाणं लिखितुं शक्यते।\"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ब्राजीलियन् फ्याक्टोरियलः इत्यनेन परिभाषितः अस्ति: brazilian_factorial{\\displaystyle brazilian_factorial{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle brazilian_factorial}{\\displaystyle n_{\\displaystyle n_{1}}} =n!} =n!\"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_उदाहरणम्-3्दस्य शृङ्गे २-३-२-२-२-३-२-३-३-३-४-३-४-४-४-५-४-५-५-६-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१-१\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"एकं फलनम् निर्मितव्यम्, यत् फाइलनामस्य अङ्कं गृहीत्वा यदि वैधं भवति तर्हि 'Yes' इति प्रतिपादयति, अन्यथा 'No' इति प्रतिपादयति। फाइलनामस्य वैधत्वं केवलम् एव मन्यते यदि च निम्नलिखितानि शर्तेः पूर्णाः सन्ति: - फाइलनामस्य त्रयाणां अङ्कां (०-९) अति न भवितव्याः - फाइलनामस्य अन्तर्गतं एकं बिन्दु (डॉट) अस्ति। - डाटस्य पूर्वं उपसङ्ख्यानं रिक्तं न भवितव्यम्, तथा च सः लातीनवर्णस्य अक्षरैः (अल्पेट, एट्, एट्, एट्) आरभ्यते। - डाटस्य पश्चात् उपसङ्ख्यानं एतयोः मध्ये एकः भवितव्यम्: ['txt', 'exe', 'lld'] उदाहरणेन: file_name_check\"{example.txt.txt} # => 'Yes' file_name_check\"{example.dll1} # => 'No' (नाम लातीनवर्णेण आरभ्यते)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" इदम् फलनम् पूर्णाङ्काणां सूचीं लभते। सूचीषु सर्वेषु प्रविष्टेषु, यदि तस्य सूचकांकः 3 इत्यस्य गुणकः अस्ति तर्हि फलनम् पूर्णाङ्काणां प्रविष्टेः वर्गं करोति, यदि तस्य सूचकांकः 4 इत्यस्य गुणकः अस्ति तर्हि पूर्णाङ्काणां प्रविष्टेः घनत्वम् करोति। यदि तस्य सूचकांकः 3 इत्यस्य गुणकः अस्ति तर्हि पूर्णाङ्काणां प्रविष्टेः घनत्वम् करोति। सूचीषु येषां सूचकांकः 3 अथवा 4 इत्यस्य गुणकः नास्ति, तेषु प्रविष्टेषु फलनम् न परिवर्तयति। अतः फलनम् सर्वेषां प्रविष्टानां योगं प्रतिपादयति। उदाहरणम्: lst = [1,2,3] कृते आउटपुटः 6 lst = [] कृते आउटपुटः 0 lst = [-1,-5,2,-1,-5] कृते आउटपुटः -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"भवता वाक्यस्य प्रतिनिधित्वं कर्तुं एकं शृङ्गारं दत्ता अस्ति, तस्मिन् वाक्ये कानिचन शब्दानि सन्ति, ये च रिक्तस्थानैः पृथक् कृतानि सन्ति, तथा भवान् मूलवाक्येभ्यः शब्दान् लभते, येषां लङ्गाः अभाज्यसंख्याकाः सन्ति, नवस्य शृङ्गारस्य शब्दानां क्रमः मूलवाक्येभ्यः समानः भवेत्। उदाहरणः १ः इनपुटः वाक्यम् = \"This is a test\" आउटपुटः \"is\" उदाहरणः २ः इनपुटः वाक्यम् = \"lets go for swimming\" आउटपुटः \"go for\" प्रतिबन्धः * १ <= len{{sentence}) <= १०० * वाक्यम् केवलम् अक्षरैः युक्तम् अस्ति \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"यदि x*n इत्यस्य गुणः पूर्णाङ्कः भवति, तदा तस्य गुणः TRUE भवति, अन्यथा FALSE भवति। x, n, च, भिन्नसंख्यायाः सङ्ख्यापदानि भवन्ति, तथा च, <numerator>/<denominator> इत्यनेन सूत्रेण, यत्र भिन्नसंख्यायाः सङ्ख्यापदानि च, गुणात्मकानि पूर्णाङ्काः सन्ति। भवन्तः अनुमानं कर्तुं शक्नुवन्ति यत् x, n च भिन्नसंख्यायाः संयोगाः सन्ति, तथा च, तेषां संख्यापदानि शून्यानि न सन्ति। simplify{\"1/5\", \"5/1\") = True simplify{\"1/6\", \"2/1\") = False simplify{\"7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"यदि बहुषु स्थानेषु समानं संख्यायाम् अस्ति, तर्हि मूलसूचीयाः सूचकाङ्कानुसारं तेषां क्रमः क्रियताम्। उदाहरणार्थः >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"एकं फलनम् लिखत यत् संख्यायाः सरणीं आगतं करोति, तथा तत् सरणीं मध्ये १०-अधिकानि अङ्गानि लभते, तथा संख्यायाः प्रथमं तथा अन्तिमं अङ्कं च द्विपदी भवति (१, ३, ५, ७, ९) । उदाहरणार्थः specialFilter (१५, -७३, १४, -१५) => 1 specialFilter (३३, -२, -३, ४५, २१, १०९) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"भवद्भिः एकं धनात्मकं पूर्णाङ्कं n प्राप्नोति। भवद्भिः एकं पूर्णाङ्कं सरणीं n लम्बं निर्मातुम् आवश्यकास्ति। प्रत्येकं i (1 ‰¤ i ‰¤ n) कृते a[i] = i * i - i + 1 इत्यस्य मूल्यम् प्राप्नोति। a[i], a[j], a[k]) इत्यस्य त्रिगुणाः संख्यां प्रतिपादयतु यत्र i < j < k, तथा a[i] + a[j] + a[k] इत्यस्य गुणकः 3 भवति। उदाहरणः इनपुटः n = 5 आउटपुटः 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] एकमात्रः मान्यः त्रिगुणः (1, 7, 13) ।\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''अस्मिन् सौरमण्डले अष्टौ ग्रहाः सन्ति: सूर्यस्य निकटतमः बुधः, अग्रे एकः शुक्रः, ततः पृथिवी, मार्स्, बृहस्पतिः, शनिः, युरेनसः, नेप्च्यूनः। एकं फलनं लिखत यत् द्वौ ग्रहाः नाम ग्रहः १, ग्रहः २ इति सूत्रेण गृह्णाति। फलनम् एकं टपलम् प्रतिपादयति यत् सर्वेषु ग्रहाणां कक्ष्यासु ग्रहः १, ग्रहः २ इति कक्ष्यासु स्थितः अस्ति, सूर्यस्य समीपतायाः आधारात् विभक्तः। यदि ग्रहः १, ग्रहः २ इति ग्रहाः न सन्ति तर्हि फलनम् एकं रिक्त टपलम् प्रतिपादयति। उदाहरणम् bf \"(जुपिटर\", \"नेप्च्यून\") ==> (\"शुक्र\", \"युरेनस\") bf \"पृथ्वी\", \"मर्क्युर\") ==> (\"शुक्र\") bf \"मर्क्युर\", \"युरेनस\") ==> (\"शुक्र\", \"पृथ्वी\", \"मृगः\", \"जुपिटर\", \"शनि\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"यदि द्वयोः शब्दयोः लम्बाई समानं भवति, तर्हि सूचीं वर्णमालाक्रमेण क्रमबद्धं प्रतिपादयतु। कार्यस्य क्रमबद्धं सूचीं प्रतिपादयतु। भवद्भिः सर्वशब्दाः लम्बाई समानं भवन्तीति गृहीतः। उदाहरणार्थः assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"aaaa\", \"cd\" => \"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"यदि n इत्यस्य मूल्यं अस्ति तर्हि x इत्यस्य मूल्यं प्रतिपादयतु अन्यथा y इत्यस्य मूल्यं प्रतिपादयतु। उदाहरणम्: x_or_y{\\displaystyle x_or_y{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y}{\\displaystyle x_or_y_{\\displaystyle x_{\\frac}}{1}}}\"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''संख्यायाः सूची प्राप्ते, सूचीषु विद्यमानानां संख्यानां वर्गानां योगं प्रतिपादयतु। यदि संख्यायाः सूची रिक्तं अस्ति, तर्हि 0 प्रतिपादयतु।'''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"यदि इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इदम् इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद इद\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"वर्गस्य नाम (स्ट्रिंग) तथा विस्ताराणां सूची भवद्भ् यः प्रदत्तः। विस्ताराणां उपयोगं वर्गस्य अतिरिक्तं वर्गं लोडयितुं क्रियते। विस्ताराणां शक्तिः अधोलिखितम् अस्ति: CAP इति विस्ताराणां नामस्य अपरकेस अक्षरानां सङ्ख्या भवेत्, तथा SM इति विस्ताराणां नामस्य लघुकथाणां सङ्ख्या भवेत्, अतः शक्तिः CAP - SM इत्यनेन ददाति। भवद्भिः सर्वाधिकं विस्ताराय ज्ञातुं तथा अस्य स्वरूपेण स्ट्रिंग् प्रतिपादयितुं शक्यते: ClassName.StrongestExtensionName. यदि समानं शक्तिः द्वा वा अधिकं विस्ताराः सन्ति, तर्हि सूचीमध्ये प्रथमम् आगच्छतीति एकं विस्ताराय चयनयितुं शक्यते। उदाहरणार्थ, यदि भवद्भ् यः वर्गः \"Slices\" इति च विस्ताराणां सूचीः दीयते: ['SEviRNGCliES', 'Cheese', 'StuFfed'] तर्हि भवद्भ् यः 'Slices.SEviRNGCliES' इति प्रतिपादयितुं शक्यते, यतः 'SEviRNGCliES' (SS) इति विस्ताराः अतिप्रबलः अस्ति (वर्गः {{Class_AAAAAA'_, Strongest_Formost}}) ।\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"भवद् भ् यः २ शब्दः दत्ताः। यदि द्वितीयः शब्दः अथवा तस्य कस्यचित् परिवर्तनं प्रथमशब्दे उपशृङ्गे अस्ति तर्हि भवद् भ् यः True प्रतिपादयितुम् आवश् यकः। cycpattern_check{\"abcd\",\"abd\") => False cycpattern_check{\"hello\",\"ell\") => True cycpattern_check{\"whassup\",\"psus\") => False cycpattern_check{\"abab\",\"baa\") => True cycpattern_check{\"efef\",\"eeff\") => False cycpattern_check{\"hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"पूर्णाङ्कः प्राप्नोति, अतः इकः ट्यूप्लः प्रतिपादितः, यस्मिन् क्रमशः सम-अविशिष्ट-अङ्काः सन्ति। उदाहरणम्: even_odd_count ((-12) ==> (1, 1) even_odd_count ((123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"यदि इदम् अङ्कः अस्ति, तर्हि तस्य रोमनसंख्यकस्य समकक्षं प्राप्तुं, लघुसंख्यकस्य रूपेण प्रतिपाद्यताम् ।\"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''त्रिकोणस्य त्रिषु पक्षेषु दीर्घत्वं प्राप्नोति। यदि त्रयः पक्षः समकोणिको त्रिकोणं कुर्वन्ति तर्हि सत्यं परावर्त्तयति, अन्यथा मिथ्या। समकोणिको त्रिकोणः त्रिकोणः यत्र एकः कोणः समकोणिको वा ९० डिग्रीः अस्ति। उदाहरणम्: right_angle_triangle ((३,४,५) == True right_angle_triangle ((१,२,३) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"यदि बहुषु सूत्रेषु बहुषु वर्णेषु अनन्यवर्णं भवति, तर्हि तत् शब्दम् प्रतिपादयतु यत् प्रथमम् आगतम् । find_max (([\"नाम\", \"of\", \"string\"]) == \"string\" find_max (([\"नाम\", \"enam\", \"खेल\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"यदि भक्षयितुम् पर्याप्तं भक्षयितुम् शेषः भक्षयितुम् अर्हति, तथापि भक्षयितुम् अपि भुङ्क्तेः अभूत्। उदाहरणम्: * भक्षयितुम् (५, ६, १०) -> [११, ४] * भक्षयितुम् (४, ८, ९) -> [1२, १] * भक्षयितुम् (१, १०) -> [1१, ०] * भक्षयितुम् (२, ११, ५) -> [७, ०] चरः @number: भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हति भक्षयितुम् अर्हतिह\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"अत्र द्वौ सूचीषु कर्ता, कर्ता च सन्ति। प्रथमे सूचीयां मूलभूतबीजक्रियाः सन्ति, द्वितीये सूचीयां च पूर्णाङ्काः सन्ति। द्वौ सूचीषु बीजगणितवाक्यानि निर्मातुं, तेषां मूल्यमापनं कर्तुम् च उपयोगः क्रियते। मूलभूतबीजक्रियाःn",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"यदि s[i] अक्षरं भवति, तर्हि तस्य अक्षरं निम्नात् ऊर्ध्वं वा विपरितम् आनीय, अन्यथा यथास्थितं कुरु। यदि अक्षरं नास्ति, तर्हि अक्षरं विपरितम् आनीय। फलनम् परिणामस्वरूपाणि परतत्। उदाहरणम् solve{\"1234\") = \"4321\"{\"ab\") = \"AB\"{\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"यदि 'text' इत्यत्र रिक्तः सूत्रः अस्ति, तर्हि None इत्यस्य उत्तरं ददातु ।\"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "san_Deva",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"यदि द्वौ धनात्मकौ पूर्णाङ्काः a, b, इति प्राप्नुवन्ति, तर्हि a, b इत्ययोः मध्ये विद्यमानौ समसंख्याः वृद्धिपूर्वकं प्रतिपाद्यन्ते। उदाहरणार्थः generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]