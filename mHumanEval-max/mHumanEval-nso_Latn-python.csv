task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,nso_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Lebelela ge eba ka gare ga lenaneo le le filwego la dinomoro, go na le dinomoro tše pedi tše di lego kgauswi le tše dingwe go feta tekanyetšo ye e filwego. Mohlala: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Maaka >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Therešo """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,nso_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Ka go tsenya go mošomo wo ke thaetlele yeo e nago le dihlopha tše dintši tša dikokwane tše di lego ka gare. Maikemišetšo a gago ke go aroganya dihlopha tšeo ka go dikokwane tša go ikemela gomme o buše lenane la tšeo. Dihlopha tša go ikemela di a lekalekana (mokgothaletšo wo mongwe le wo mongwe o tswaletšwe ka tshwanelo) gomme ga di a tsenywa ka gare ga tše dingwe Hlokomologa diphatlalatši tše di lego ka go thaetlele ya go tsenya. Mohlala: >>> separate_paren_groups' ((( ) (() (()))))))) ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,nso_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Ge go filwe nomoro ya go sepela ya go ba le poelo, e ka hlophiwa ka go ba karolo ya palomoka (palomoka ye kgolo e ka tlase ga nomoro ye e filwego) le ya go ba le palo ya lesome (karolo ya go šala e dula e le ye nnyane go feta 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,nso_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""O fiwa lenaneo la dipeeletšo le ditirišo tša go ntšha tšhelete ka akhaonteng ya panka yeo e thomago ka go se be le tšhelete. Mošomo wa gago ke go lemoga ge eba ka nako ye nngwe le ye nngwe palantši ya akhaonte e wela ka tlase ga lefela, gomme ka nako yeo, mošomo o swanetše go bušetša Nnete. Go sego bjalo o swanetše go bušetša Maaka. Mohlala: >>> below_zero([1, 2, 3]) Maaka >>> below_zero([1, 2, -4, 5]) Nnete """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,nso_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Go lenaneo le le filwego la dinomoro tša go tsena, bala Mean Absolute Deviation go dikologa mean ya dataset ye. Mean Absolute Deviation ke palogare ya phapano magareng ga elemente ye nngwe le ye nngwe le ntlha ya bogare (mean mo tabeng ye): MAD = average  x - x_mean  Mohlala: >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,nso_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Tsenya nomoro ya 'go kgaoganya' magareng ga dikarolo tše pedi tše di latelanago tša lenane la go tsenya `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,nso_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Ka go tsenya go mošomo wo ke thaetlele e emetšwe dihlopha tše mmalwa tša dikokwane tše di lego ka gare ga dikgoba tšeo di arogantšwego ke dikgoba. Bakeng sa sehlopha se sengwe le se sengwe, tšweletša maemo a ka fase a go hloma dikokwane. Mohlala (() (()) e na le maemo a mabedi a go hloma dikokwane mola ((())) e na le a mararo. >>> parse_nested_parens (('((()) ((())) () (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,nso_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filtara lenane la go tsenya la dinolofatši go tšeo di nago le lenane la go faela >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,nso_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Go lenaneo le le filwego la dipalo tša go felela, bušetša tuple yeo e bopšago ke palomoka le poelo ya dipalo ka moka tša go felela ka gare ga lenaneo. Palomoka ya go se be le selo e swanetše go lekana le 0 gomme poelo ya go se be le selo e swanetše go lekana le 1. >>> palomoka_ya poelo ([]) (0, 1) >>> palomoka_ya poelo ([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,nso_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Go tšwa lenaneong le le filwego la dipalo tša go felela, tšweletša lenaneo la go dikologa la go fihla go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya go ya""""""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,nso_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Hwetša palindrome ye kopana yeo e thomago ka thapo yeo e filwego. Kgopolo ya algorithm e bonolo: - Hwetša postfix ye telele ya thapo yeo e filwego yeo e lego palindrome. - Tsenya mafelelong a thapo ya go bušetša morago ya sethifikhe sa thapo yeo e tlago pele ga sethifikhe sa palindrome. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Hlahloba ge e ba thaetlele yeo e filwego ke palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,nso_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Go tsenya ke dinomoro tše pedi tša dinomoro a le b tšeo di nago le 1 le 0 fela. Dira XOR ya bobedi go dinomoro tše gomme o buše gape e le mothaladi.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,nso_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Go tšwa lenaneong la dinolofatši, bušetša le letelele kudu. Bušetša la mathomo ge go na le dinolofatši tše dintši tša botelele bjo bo swanago. Bušetša None ge e le gore lenane la go tsenya ga le na selo. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,nso_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Boela go karogano ya go swana ya go feta ya dipalo tše pedi tša go felela a le b >>> karogano ya go swana ya go feta ya go swana ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go feta ya go ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya ya""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,nso_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Letlakala la go bušetša la dikokwane ka moka go tloga go tše kopana go ya go tše telele tša mothaladi wa go tsenya >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,nso_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Boela lelokelelo la dinomoro tša go kgaoganywa ka sekgoba go thoma ka 0 go fihla go n go akaretšwa.""""""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,nso_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Ge go filwe thaetlele, hwetša gore ke ditlhaka tše kae tše di fapanego (go sa šetšwe gore ke ya mohuta ofe) tšeo di nago le >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,nso_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Ka go tsenya go mošomo wo ke thaetlele yeo e emelago dinoto tša mmino ka mokgwa wa ASCII. Mošomo wa gago ke go sekaseka lenaneo la thaetlele ya dinoto tša palogare yeo e sepelelanago le dipalo tše dintši. Mo ke tlhalošo: 'o' - notši, e betha tše nne tša mafelelo 'o' - seripa sa notši, e betha tše pedi tša mafelelo 'o' - quater ya notši, e betha e tee ya mafelelo >>> parse_music. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,nso_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Hwetša gore ke makga a makae ao a filwego a ka hwetšwago ka go thaetlele ya mathomo. Bala ditiragalo tša go ikarola. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,nso_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Go tsenya ke thaetlele ya dinomoro tša go tšwa go 'zero' go ya go 'senyane'. Dikgetho tše di nepagetšego ke 'zero', 'tee', 'pedi', 'tharo', 'nne', 'hlano', 'tshela', 'šupa', 'seswai' le 'senyane'. E bušetša thaetlele ka dinomoro tše di rulagantšwego go tloga go tše nnyane go ya go tše kgolo >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,nso_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Go tšwa lenaneong la dinomoro (tša botelele bja bonnyane tše pedi) kgetha le go bušetša tše pedi tšeo di lego kgauswi le tše dingwe gomme o di bušetše ka tatelano (nomoro ye nnyane, nomoro ye kgolo). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,nso_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Ge o filwe lenane la dinomoro (tša bonnyane dilo tše pedi), diriša phetogo ya go ya go ya go ya lenane leo, e le gore nomoro e nyenyane e be 0 gomme e kgolo e be 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,nso_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter e filwe lenane la mehola ya Python ya palomoka fela >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,nso_Latn,python,"

def strlen(string: str) -> int:
    """"""Botelele bja go bušetša bja thaetlele yeo e filwego >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,nso_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Bakeng sa palo e itšego n, hwetša palo e kgolo yeo e arolago n ka go lekana, e nyenyane go feta n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,nso_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Boela lenane la dipalo tša mathomo tša palomoka yeo e filwego go tloga go ye nnyane go ya go ye kgolo. Palo ya go tsenya e swanetše go lekana le poelo ya dipalo ka moka tša dipalo tša go fapana >>> factorise ((8) [2, 2, 2] >>> factorise ((25) [5, 5] >>> factorise ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,nso_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Go tšwa lenaneong la dipalo tša go felela, tloša dilo ka moka tšeo di tšwelelago go feta gatee. Boloka tatelano ya dilo tše di tlogetšwego e swana le ya go tsenya. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,nso_Latn,python,"

def flip_case(string: str) -> str:
    """"""Bakeng sa thaetlele yeo e filwego, fetolela ditlhaka tša ditlhaka tše nnyane go ya go tše kgolo le tše kgolo go ya go tše nnyane. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,nso_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Ngwala lelokelelo la dinomoro tša go ba lelokelelo le tee la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la dinomoro tša go ba lelokelelo la go ba lelokelelo la go ba lelokelelo la go ba lelokelelo la""""""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,nso_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Tsenya lenane la diteng tša go tsena go tšeo di thomago ka pelepele yeo e filwego. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,nso_Latn,python,"

def get_positive(l: list):
    """"""Boela morago dinomoro tša go ba le dipoelo feela ka gare ga lenaneo. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,nso_Latn,python,"

def is_prime(n):
    """"""Boela go therešo ge e le gore nomoro ye e filwego ke ya mathomo, gomme e le maaka ka tsela ye nngwe. >>> ke ya mathomo ((6) Maaka >>> ke ya mathomo ((101) Therešo >>> ke ya mathomo ((11) Therešo >>> ke ya mathomo ((13441) Therešo >>> ke ya mathomo ((61) Therešo >>> ke ya mathomo ((4) Maaka >>> ke ya mathomo ((1) Maaka """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,nso_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ke dielo tša polynomial. find_zero hwetša x bjalo ka gore poly ((x) = 0. find_zero e bušetša fela ntlha ya lefela, le ge e le gore go na le tše dintši. Godimo ga moo, find_zero e tšea fela lenane la xs le le nago le palo ya dielo le seelo se se golo go feta lefela ka ge e tiišetša tharollo. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""E sekaseka polynomial ka dikelo xs ka ntlha x. e bušetša xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,nso_Latn,python,"

def sort_third(l: list):
    """"""Mošomo wo o tšea lenane l gomme o bušetša lenane l' ka mokgwa wo l' e swanago le l ka di-indices tšeo di sa aroganego ka tharo, mola dikelo tša yona ka di-indices tšeo di aroganego ka tharo di lekana le dikelo tša di-indices tša go swana tša l, eupša di beakantšwe. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,nso_Latn,python,"

def unique(l: list):
    """"""Boela go dilo tše di kgethilwego tša moswananoši ka gare ga lenaneo >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,nso_Latn,python,"

def max_element(l: list):
    """"""Boela go sehlongwa sa max_element ka gare ga lenaneo. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,nso_Latn,python,"

def fizz_buzz(n: int):
    """"""Boela palo ya makga a digit 7 e tšwelelago ka dipalo tša go feta n tšeo di aroganego ka 11 goba 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,nso_Latn,python,"

def sort_even(l: list):
    """"""Mošomo wo o tšea lenane l gomme o bušetša lenane l' ka mokgwa wo l' e swanago le l ka di-indices tša go se lekane, mola dikelo tša yona ka di-indices tša go lekana di lekana le dikelo tša di-indices tša go lekana tša l, eupša di rulagantšwe. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,nso_Latn,python,"

def encode_cyclic(s: str):
    """"""e tšea bjalo ka ketane ya go tsenya e tsentšhitšwego ka encode_cyclic function. E bušetša ketane ya go hlatholla. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""e bušetša thaetlele yeo e tsentšwego dikhoutu ka dihlopha tša go dikologa tša ditlhaka tše tharo. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,nso_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib e bušetša palo ya n yeo e lego palo ya Fibonacci gomme le yona ke ya mathomo. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,nso_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero e tšea lenane la dipalo tša go felela bjalo ka input. e bušetša True ge e le gore go na le dilo tše tharo tše di fapanego lenaneong tšeo di lekanago go lefela, gomme False ka tsela ye nngwe. >>> triples_sum_to_zero (([1, 3, 5, 0]) False >>> triples_sum_to_zero (([1, 3, -2, 1]) True >>> triples_sum_to_zero (([1, 2, 3, 7]) False >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,nso_Latn,python,"

def car_race_collision(n: int):
    """"""Akanya tsela yeo e lego molokoloko wo o se nago magomo wa go otlologa. Dikoloi tše n di sepela go tloga go le letshadi go ya go le letona; ka nako e tee, sehlopha se se fapanego sa dikoloi tše n di sepela go tloga go le letona go ya go le letshadi. Dihlopha tše pedi tša dikoloi di thoma di le kgole kudu. Dikoloi ka moka di sepela ka lebelo le le swanago. Dikoloi tše pedi di bolelwa gore di thulana ge koloi yeo e sepelago go tloga go le letshadi go ya go le letona e thulana le koloi yeo e sepelago go tloga go le letona go ya go le letshadi. Lega go le bjalo, dikoloi di tiile ka mo go sa felego; ka lebaka leo, di tšwela pele go sepela tseleng ya tšona bjalo ka ge eka ga se tša thulana. Fokšene ye e tšweletša palo ya dithulano tše bjalo. """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,nso_Latn,python,"

def incr_list(l: list):
    """"""Lelokelelo la go bušetša le le nago le dielemente tšeo di okeditšwego ka 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,nso_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero e tšea lenaneo la dipalo tša go felela bjalo ka input. e bušetša True ge go na le dilo tše pedi tše di fapanego lenaneong tšeo di lekanago go lefela, le False ka tsela ye nngwe. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,nso_Latn,python,"

def change_base(x: int, base: int):
    """"""Fetoša motheo wa dinomoro tša go tsena tša nomoro x go ya go motheo. bušetša moemedi wa thaetlele ka morago ga phetogo. dinomoro tša motheo di ka tlase ga 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,nso_Latn,python,"

def triangle_area(a, h):
    """"""Ge go neilwe botelele bja lehlakore le lefelo la go bulega kudu la khutlotharo. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,nso_Latn,python,"

def fib4(n: int):
    """"""Mothaladi wa Fib4 ke mothaladi wo o swanago le wa Fibbonacci wo o hlalošwago ka tsela ye e latelago: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Ka kgopelo ngwala mošomo wa go bala ka bokgoni sehlongwa sa n-th sa mothaladi wa fib4. O se ke wa diriša poeletšo. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,nso_Latn,python,"

def median(l: list):
    """"""Boikgokaganyo bja go bušetšwa bja dikarolo tša lenaneong l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,nso_Latn,python,"

def is_palindrome(text: str):
    """"""E hlahloba ge e ba thaetlele yeo e filwego ke palindrome >>> is_palindrome (('') Ke therešo >>> is_palindrome (('aba') Ke therešo >>> is_palindrome (('aaaaa') Ke therešo >>> is_palindrome (('zbcd') Ke maaka """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,nso_Latn,python,"

def modp(n: int, p: int):
    """"""Boela 2^n modulo p (ela hloko dipalo). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,nso_Latn,python,"

def encode_shift(s: str):
    """"""e tšea bjalo ka ketane ya go tsenya e tsentšwe ka encode_shift function. E bušetša ketane ya go hlatholla. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""e bušetša thaetlele e nago le dikhoutu ka go šuthiša tlhaka e nngwe le e nngwe ka 5 ka alfabeteng. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,nso_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ke mošomo wo o tšeago thaetlele gomme wa bušetša thaetlele ka ntle le ditumanoši. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,nso_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Boela go Nnete ge e le gore dinomoro ka moka tša lenane la l di ka tlase ga tekanyetšo t. >>> below_threshold (([1, 2, 4, 10], 100) Nnete >>> below_threshold (([1, 20, 4, 10], 5) Maaka """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,nso_Latn,python,"

def add(x: int, y: int):
    """"""Kgetha dinomoro tše pedi x le y >>> oketša ((2, 3) 5 >>> oketša ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,nso_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Hlahloba ge e ba mantšu a mabedi a na le ditlhaka tše di swanago. >>> same_chars (('eabcdzzzz', 'dddzzzzzddeddabc') Ke therešo >>> same_chars (('abcd', 'dddddddabc') Ke therešo >>> same_chars (('dddddddabc', 'abcd') Ke therešo >>> same_chars (('eabcd', 'dddddddddabc') Ke maaka >>> same_chars ((('abcd', 'dddddddabddce') Ke maaka >>> same_chars (((abcdzzzz', 'dddzzzzzzzddabddc') Ke maaka """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,nso_Latn,python,"

def fib(n: int):
    """"""Boela morago nomoro ya Fibonacci ya n-th. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,nso_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ke thaetlele ya ""<"" le "">"". return True ge eba bracket e nngwe le e nngwe ya go bula e na le bracket ya go tswalela yeo e sepelelanago le yona. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,nso_Latn,python,"

def monotonic(l: list):
    """"""Boela go Nnete ke gore dilo tša lelokelelo di oketšega goba di fokotšega ka go swana. >>> monotonic (([1, 2, 4, 20]) Nnete >>> monotonic (([1, 20, 4, 10]) Maaka >>> monotonic (([4, 1, 0, -10]) Nnete """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,nso_Latn,python,"

def common(l1: list, l2: list):
    """"""Boela morago dilo tše di tlwaelegilego tše di arogantšwego tša moswananoši tša mananeo a mabedi. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,nso_Latn,python,"

def largest_prime_factor(n: int):
    """"""Boela go palogare ya mathomo ya n. Go tšea gore n > 1 gomme ga se palogare. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,nso_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ke tiro yeo e kgoboketšago dinomoro go tloga go 1 go ya go n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,nso_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ke thaetlele ya ""("" le "")"". return True ge eba bracket e nngwe le e nngwe ya go bula e na le bracket ya go tswalela yeo e sepelelanago le yona. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing(""() False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,nso_Latn,python,"

def derivative(xs: list):
    """"""xs e emela dikelo tša polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Boela go tšwa ga polynomial ye ka sebopego se se swanago. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,nso_Latn,python,"

def fibfib(n: int):
    """"""Mothaladi wa FibFib ke mothaladi wo o swanago le wa Fibbonacci wo o hlalošwago ka tsela ye e latelago: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Ka kgopelo ngwala mošomo wa go bala ka bokgoni sehlongwa sa n-th sa mothaladi wa Fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,nso_Latn,python,"
FIX = """"""Ngwala taodišo ya go bitšwa vowels_count yeo e tšeago mothaladi wo o emelago lentšu bjalo ka input gomme e bušetša palo ya ditumammogo tša mothalading. Ditumammogo mo tabeng ye ke 'a', 'e', 'i', 'o', 'u'. Mo, 'y' le yona ke tumammogo, eupša ge e le mafelelong a lentšu leo le filwego. Mohlala: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Tsenya dikelo tše dingwe tša go dira diteko. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,nso_Latn,python,"
def circular_shift(x, shift):
    """"""Go dikologa šuthiša dinomoro tša palomoka x, šuthiša dinomoro go ya go le letona ka go šuthiša gomme o buše sephetho bjalo ka thaetlele. Ge e le gore šuthiša > palo ya dinomoro, bušetša dinomoro ka go di fetola. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,nso_Latn,python,"
def digitSum(s):
    """"""Mošomo Ngwala mošomo wo o tšeago thaetlele bjalo ka input gomme o bušetša palomoka ya ditlhaka tša ka godimo fela' dikhoutu tša ASCII. Mehlala: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,nso_Latn,python,"
def fruit_distribution(s,n):
    """"""Mo go mošomo wo, o tla fiwa thapo yeo e emelago palo ya diapola le dinamune tšeo di abjago ka serotong sa dienywa seroto se se na le diapola, dinamune le dienywa tša manko. Ge go filwe thapo yeo e emelago palomoka ya dienywa tša dinamune le tša dinamune le palomoka ya dienywa ka serotong bušetša palo ya dienywa tša manko ka serotong. mohlala: fruit_distribution""5(diapola le dinamune tše 6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 diapola le dinamune tše 1"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 diapola le dinamune tše 3"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 diapola le dinamune tše 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,nso_Latn,python,"
def pluck(arr):
    """"""""Ka go fa mokgobo wa go emela lekala la mohlare wo o nago le dikhoutu tša palomoka yeo e sego ya go se be le mohola mošomo wa gago ke go ntšha e tee ya dikhoutu le go e bušetša. Khoutu yeo e ntšhitšwego e swanetše go ba khoutu yeo e nago le mohola wo monnyane wa go lekana. Ge dikhoutu tše mmalwa tše nago le mohola wo monnyane wa go lekana di hwetšwa bušetša khoutu yeo e nago le tšhupetšo ye nnyane. Khoutu yeo e ntšhitšwego e swanetše go bušetšwa ka gare ga lenaneo, [smallest_value, tšhupetšo ya yona] Ge go se na mehola ya go lekana goba mokgobo wo o filwego o se na selo, bušetša []. Mohlala 1: Go tsenya: [4,2,3] Go ntšha: [2, 1] Tlhaloso: 2 e na le mohola o monnyane wa go lekana, gomme 2 e na le tšhupetšo ya go lekana. Mohlala 2: Go tsenya: [1,2,3] Go ntšha: [2, 1] Tlhaloso: 2 e na le mohola wo monnyane wa go lekana, gomme 2 e na le tšhupetšo ya go lekana. Mohlala 3: Go ntšha: [] Go ntšha: [4: [5, 3] Go ntšha: [0, 4] Go ntšha: 1 Go ntšha: 0 Kho: 1 kgetho ya dikho ya dikho yeo e nago le tšhupetšo e nnyane, eupša go na le tšhupetšo ya go lekana le tše pedi, mohlala: * * go na le tše nnyane kudu ke tše nnyane kudu, eupša go na le tše nnyane kudu ke tše nnyane kudu.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,nso_Latn,python,"
def search(lst):
    '''O fiwa lenaneo la dipalo tša go se be le selo. Boela morago palo ya go feta ye kgolo ya go feta lefela, le go ba le go ba le go ba le go ba le go lekana le boleng bja palomoka ka boyona. Palo ya go ba le palomoka ke palo ya makga ao e tšwelelago ka gare ga lenaneo. Ge go se na boleng bjo bjalo, bušetša -1. Mehlala: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,nso_Latn,python,"
def strange_sort_list(lst):
    '''Ka go fa lenane la dipalo tša go se tlwaelege, o bušetša lenane ka tatelano ya go se tlwaelege. Go hlopha ka go se tlwaelege, ke ge o thoma ka mohola wa bonnyane, ka morago o kaonafatša wa dipalo tša go se tlwaelege tše di šetšego, ka morago o kaonafatša le tše dingwe. Mehlala: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,nso_Latn,python,"
def triangle_area(a, b, c):
    '''Ge go filwe botelele bja mahlakore a mararo a khutlotharo. Boela le lefelo la khutlotharo e dikolotšwe go 2 dinomoro tša go ya ka morago ga lesometee ge mahlakore a mararo a bopa khutlotharo ya maleba. Go sego bjalo bušetša -1 Mahlakore a mararo a dira khutlotharo ya maleba ge palomoka ya mahlakore afe goba afe a mabedi e le a magolo go feta lehlakore la boraro. Mohlala: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,nso_Latn,python,"
def will_it_fly(q,w):
    '''Ngwala taodišo yeo e bušetšago Nnete ge e le gore selo sa q se tla fofa, le Maaka ka tsela ye nngwe. Selo sa q se tla fofa ge e le gore se lekalekane (ke lenaneo la palindromic) le palomoka ya dikarolo tša sona e ka tlase goba e lekana le boima bja ka godimo bjo bo kgonegago w. Mohlala: will_it_fly (([1, 2], 5) â -> Maaka # 1+2 e ka tlase ga boima bja ka godimo bjo bo kgonegago, eupša ga se ya lekalekanywa. will_it_fly (([3, 2, 3], 1) â -> Maaka # e lekalekane, eupša 3+2+3 e feta boima bja ka godimo bjo bo kgonegago. will_it_fly (([3, 2, 3], 9) â -> Nnete # 3+23 e ka tlase ga boima bja ka godimo bjo bo kgonegago, gomme e lekalekane. will_it_fly ((([3], 5) â -> Nnete # 3 e ka tlase ga boima bja ka godimo bjo bo kgonegago, gomme e lekalekane '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,nso_Latn,python,"
def smallest_change(arr):
    """"""Go fiwa mothaladi wa dinomoro tša go felela, hwetša palo ya bonnyane ya dielemente tšeo di swanetšego go fetolwa go dira gore mothaladi e be palindromic. mothaladi wa palindromic ke mothaladi wo o balwago ka go swana go ya pele le morago. Phetogong e tee, o ka fetola elethente e tee go ya go elethente efe goba efe. Mohlala: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,nso_Latn,python,"
def total_match(lst1, lst2):
    '''Ngwala taodišo yeo e amogelago mananeo a mabedi a dinolo gomme e bušetša lenane leo le nago le palomoka ya dinomoro tša dinomoro tša dinomoro tša lenane ka moka tša lenane leo le lego ka tlase ga lenane le lengwe. ge mananeo a mabedi a na le palo ya dinomoro tša go lekana, bušetša lenane la pele. Mehlala total_match([], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['4', ['1', '2', '3', '4', '5', ['4]) -> ['4'] ]]'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,nso_Latn,python,"
def is_multiply_prime(a):
    """"""Ngwala taodišo yeo e bušetšago nnete ge e le gore palo yeo e filwego ke katološo ya dinomoro tša pele tše 3 gomme e le maaka ka tsela ye nngwe.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,nso_Latn,python,"
def is_simple_power(x, n):
    """"""Mošomo wa gago ke go ngwala mošomo wo o bušetšago therešo ge e le gore nomoro x ke matla a n gomme e le maaka mabakeng a mangwe. x ke matla a n ge e le gore n**int=x Mohlala: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,nso_Latn,python,"
def iscube(a):
    '''Ngwala taodišo yeo e tšeago palomoka ya a gomme e bušetša Nnete ge e le gore e na le dikhubiki tša palomoka ya dinomoro. Ela hloko: o ka no tšea gore taodišo e dula e le ya nnete. Mehlala: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,nso_Latn,python,"
def hex_key(num):
    """"""O filwe mošomo wa go ngwala mošomo wo o amogelago nomoro ya bosometshela bjalo ka thaetlele gomme o bala palo ya dinomoro tša bosometshela tšeo e lego dinomoro tša mathomo (nomoro ya mathomo, goba ya mathomo, ke nomoro ya tlhago ye e fetago 1 yeo e sego poelo ya dinomoro tše pedi tše nnyane tša tlhago). Dinomoro tša bosometshela ke 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Dinomoro tša bosometshela ke 2, 3, 5, 7, 11, 13, 17,... Ka gona o swanetše go hwetša palo ya dinomoro tše di latelago: 2, 3, 5, 7, B (= desimale 11), D (= desimale 13). Ela hloko: o ka no tšea gore tshedimošo e dula e nepagetše goba e se na selo, gomme maswao A,B,C,D,E,F a dula a le ka ditlhaka tše dikgolo. Mehlala: Bakeng sa num ""AB"" tshedimošo e swanetše go ba num = 1. Bakeng sa ""1077E"" tshedimošo e swanetše go ba 2. Bakeng sa num ""AB"" = 331ED ""A"" tshedimošo e swanetše go ba 4. ""ABC"" = 6.0891234567D ""EF"" bakeng sa ""2020"" tshedimošo e swanetše go ba 2.0 ""2020""""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,nso_Latn,python,"
def decimal_to_binary(decimal):
    """"""O tla fiwa nomoro ka sebopego sa desimale gomme mošomo wa gago ke go e fetolela go sebopego sa binary. Fankse e swanetše go bušetša thaetlele, ka tlhalo ye nngwe le ye nngwe e emetše nomoro ya binary. Tlhalo ye nngwe le ye nngwe ka go thaetlele e tla ba '0' goba '1'. Go tla ba le ditlhaka tše pedi tša tlaleletšo 'db' mathomong le mafelelong a thaetlele. Ditlhaka tša tlaleletšo di gona go thuša ka sebopego. Mehlala: decimal_to_binary ((15) # e bušetša ""db1111db"" decimal_to_binary32) # e bušetša ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,nso_Latn,python,"
def is_happy(s):
    """"""O fiwa thaetlele s. Mošomo wa gago ke go lekola ge e le gore thaetlele e thabile goba aowa. Thaetlele e thabile ge e le gore botelele bja yona ke bonnyane 3 le ditlhaka tše dingwe le tše dingwe tše 3 tša go latelana di a fapana Mohlala: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,nso_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ke beke ya mafelelo ya sehla gomme morutiši o swanetše go fa baithuti meputso. Morutiši o be a dira algorithm ya gagwe ya go bala. Bothata ke gore o lahlegetšwe ke khoutu yeo a e dirišitšego go bala. O go file lenaneo la GPA ya baithuti ba bangwe gomme o swanetše go ngwala mošomo wo o ka tšweletšago lenaneo la meputso ya ditlhaka o diriša tafole ye e latelago: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,nso_Latn,python,"
def prime_length(string):
    """"""Ngwala taodišo yeo e tšeago thaetlele gomme e bušetša Nnete ge e le gore botelele bja thaetlele ke nomoro ya mathomo goba Maaka go sego bjalo Mehlala prime_length{'Hello') == Nnete prime_length{'abcdcba') == Nnete prime_length{'kittens') == Nnete prime_length{'orange') == Maaka """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,nso_Latn,python,"
def starts_one_ends(n):
    """"""Ka lebaka la palomoka ya n, bušetša palo ya dinomoro tša dinomoro tša n tša palomoka ya n tšeo di thomago goba di felago ka 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,nso_Latn,python,"
def solve(N):
    """"""Ge go filwe palomoka ya dipalo tše di nepagetšego N, bušetša palomoka ya dipalo tša yona ka sebopego sa bobedi. Mohlala Go N = 1000, palomoka ya dipalo e tla ba 1 poelo e swanetše go ba ""1"". Go N = 150, palomoka ya dipalo e tla ba 6 poelo e swanetše go ba ""110"". Go N = 147, palomoka ya dipalo e tla ba 12 poelo e swanetše go ba ""1100"".""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,nso_Latn,python,"
def add(lst):
    """"""Ka go fiwa lenane la dipalo tše di se nago selo lst. oketša ka dikarolo tša go ba le dinomoro tša go se be le dinomoro. Mehlala: oketša (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,nso_Latn,python,"
def anti_shuffle(s):
    """"""Ngwala taodišo yeo e tšeago thaetlele gomme e bušetša phetolelo ya yona yeo e beakantšwego. Phetolelo yeo e beakantšwego ya thaetlele, ke thaetlele yeo go yona mantšu ka moka (a arogantšwego ka sekgoba) a tšewago sebaka ke lentšu le lefsa moo ditlhaka ka moka di beakantšwego ka tatelano ya go hlatloga go ya ka boleng bja ascii. Ela hloko: O swanetše go boloka tatelano ya mantšu le sekgoba sa go se be le selo ka molatong. Mohlala: anti_shuffle ((('Hi') e bušetša 'Hi' anti_shuffle ((('hello') e bušetša 'ehllo' anti_shuffle (('Hello World!!!') e bušetša 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,nso_Latn,python,"
def get_row(lst, x):
    """"""O fiwa dintlha tša dimensional tše pedi, bjalo ka mananeo a go hlangwa, ao a swanago le matrix, le ge go le bjalo, go fapana le matrix, mothaladi o mongwe le o mongwe o ka ba le palo ya go fapana ya dikholomo. Ge go filwe lst, le palomoka x, hwetša dipalo tša go felela x ka gare ga lenaneo, gomme o buše lenane la dipalo tša go lekana, [(x1, y1), (x2, y2) ...] ka mokgwa wo e lego gore tuple ye nngwe le ye nngwe ke khuduthamaga - (molala, dikholomo), go thoma ka 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,nso_Latn,python,"
def sort_array(array):
    """"""Ka go fiwa mothaladi wa dipalo tša go se be le bosodi, bušetša khopi ya mothaladi wo o filwego ka morago ga go hlopha, o tla hlopha mothaladi wo o filwego ka tatelano ya go ya godimo ge e le gore palomoka ya ((thekgethakga ya mathomo, thekgethakga ya mafelelo) ke ya go se tlwaelege, goba o o hlophise ka tatelano ya go ya fase ge e le gore palomoka ya ((thekgethakga ya mathomo, thekgethakga ya mafelelo) ke ya go lekana. Ela hloko: * o se ke wa fetola mothaladi wo o filwego. Mehlala: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,nso_Latn,python,"
def encrypt(s):
    """"""Hlama mošomo wa encrypt wo o tšeago thaetlele bjalo ka polelwana gomme wa bušetša thaetlele yeo e tsentšwego ka go dikologa alfabete. Alfabete e swanetše go dikologa ka tsela yeo ditlhaka di sepelago fase ka bobedi di atišwa ka mafelo a mabedi. Mohlala: encrypt (('hi') e bušetša 'lm' encrypt (('asdfghjkl') e bušetša 'ewhjklnop' encrypt (('gf') e bušetša 'kj' encrypt (('et') e bušetša 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,nso_Latn,python,"
def next_smallest(lst):
    """"""O filwe lenaneo la dipalo tša go felela. Ngwala mošomo wa next_smallest (() wo o bušetšago sehlongwa sa bobedi se se nnyane go feta ka moka sa lenaneo. Bušetša None ge go se na sehlongwa sa go swana le seo. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,nso_Latn,python,"
def is_bored(S):
    """"""O tla fiwa mothaladi wa mantšu, gomme mošomo wa gago ke go bala palo ya go lewa ke bodutu. Go lewa ke bodutu ke polelo yeo e thomago ka lentšu ""I"". Dipolelo di arogantšwe ke '.', '?' goba '!'. Mohlala: >>> is_bored(""Hello world"") 0 >>> is_bored(""Legodimo le botalalerata. Letšatši le a phadima. Ke rata boemo bjo bja leratadima"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,nso_Latn,python,"
def any_int(x, y, z):
    '''Hlama tiro yeo e tšeago dinomoro tše 3. E tla bušetša nnete ge e le gore e nngwe ya dinomoro e lekana le palomoka ya tše dingwe tše pedi, gomme dinomoro ka moka ke dinomoro tša go felela. E tla bušetša maaka mabakeng a mangwe. Mehlala any_int{5, 2, 7} â -> True any_int{3, 2, 2} â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,nso_Latn,python,"
def encode(message):
    """"""Ngwala taodišo yeo e tšeago molaetša, gomme e o tsenya ka tsela yeo e fetošago ditlhaka ka moka, e tsenya dinoko ka moka ka go molaetša ka go lengwalo leo le tšwelelago mafelong a 2 pele ga dinoko tšeo ka go alfabete ya Seisemane. Tšea fela ditlhaka. Mehlala: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,nso_Latn,python,"

def skjkasdkd(lst):
    """"""O fiwa lenaneo la dinomoro tša go felela. O swanetše go hwetša boleng bja pele bjo bogolo gomme o bušetše palomoka ya dinomoro tša yona. Mehlala: Bakeng sa lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], poelo e swanetše go ba 10 Bakeng sa lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1], poelo e swanetše go ba 25 Bakeng sa lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], poelo e swanetše go ba 13 Bakeng sa lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6], poelo e swanetše go ba 11 Bakeng sa lst = [0,81,12,31,21], poelo e swanetše go ba 3 Bakeng sa lst = [1,0,8,1,2,1,7], poelo e swanetše go ba 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,nso_Latn,python,"
def check_dict_case(dict):
    """"""Ge go filwe pukuntšu, bušetša Nnete ge dinotlelo ka moka e le dinotlelo ka ditlhaka tše nnyane goba dinotlelo ka moka e le dinotlelo ka ditlhaka tše kgolo, go sego bjalo bušetša Maaka. Mošomo o swanetše go bušetša Maaka ge pukuntšu ye e filwego e le lešo. Mehlala: check_dict_case{""a"":""apple"", ""b"":""banana""}) e swanetše go bušetša Nnete. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) e swanetše go bušetša Maaka. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) e swanetše go bušetša Maaka. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) e swanetše go bušetša Maaka. check_dict_case{""NC"":""STATE"", ""Z"":""IP""} e swanetše go bušetša Nnete.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,nso_Latn,python,"
def count_up_to(n):
    """"""Tsenya tirišo yeo e tšeago palomoka yeo e sego ya maswanedi gomme e bušetša mothaladi wa palomoka ya mathomo ya n yeo e lego dinomoro tša mathomo le ka tlase ga n. mohlala: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,nso_Latn,python,"
def multiply(a, b):
    """"""Fihlelela tiro yeo e tšeago dipalo tše pedi tša go felela gomme e bušetše poelo ya dipalo tša yuniti ya tšona. Go tšea gore tshedimošo e dula e le maleba. Mehlala: katološa ((148, 412) e swanetše go bušetša 16. katološa ((19, 28) e swanetše go bušetša 72. katološa ((2020, 1851) e swanetše go bušetša 0. katološa ((14,-15) e swanetše go bušetša 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,nso_Latn,python,"
def count_upper(s):
    """"""Ge go filwe thaetlele s, bala palo ya ditumanoši tša ditlhaka tše kgolo ka di-indices tša go lekana. Mohlala: count_upper (('aBCdEf') e bušetša 1 count_upper (('abcdefg') e bušetša 0 count_upper (('dBBE') e bušetša 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,nso_Latn,python,"
def closest_integer(value):
    '''Hlama mošomo wo o tšeago boleng (string) bjo bo emelago nomoro gomme o bušetša palomoka ya kgauswi le yona. Ge e le gore nomoro e kgole le palomoka ya pedi, e dikološe go tloga go lefela. Mehlala >>> nearest_integer ((""10"") 10 >>> nearest_integer ((""15.3"") 15 Hlokomela: Go dikološa go tloga go lefela go ra gore ge e le gore nomoro ye e filwego e kgole le palomoka ya pedi, yeo o swanetšego go e bušetša ke yeo e lego kgole le lefela. Mohlala nearest_integer "" ((14.5"") e swanetše go bušetša 15 gomme nearest_integer "" ((-14.5"") e swanetše go bušetša -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,nso_Latn,python,"
def make_a_pile(n):
    """"""Ge o filwe palomoka ya n, o swanetše go dira mokgobo wa mafsika a n. Mokgobo wa mathomo o na le mafsika a n. Palo ya mafsika a legato le le latelago ke: - nomoro ya go se lekane ye e latelago ge n e le ya go se lekane. - nomoro ya go lekana ye e latelago ge n e le ya go lekana. Boela palo ya mafsika legatong le lengwe le le lengwe ka gare ga lenaneo, moo elemente ya ka go index i e emetšego palo ya mafsika a legato (i+1). Mehlala: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,nso_Latn,python,"
def words_string(s):
    """"""O tla fiwa mothaladi wa mantšu ao a arogantšwego ke dikoma goba dikgoba. Mošomo wa gago ke go arola mothaladi ka mantšu le go bušetša mothaladi wa mantšu. Mohlala: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,nso_Latn,python,"
def choose_num(x, y):
    """"""Mošomo wo o tšea dinomoro tše pedi tše botse x le y gomme o bušetša nomoro ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le palogare ya go ba le tee.""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,nso_Latn,python,"
def rounded_avg(n, m):
    """"""O fiwa dipalo tše pedi tša go tšwa go n le m, gomme mošomo wa gago ke go bala palogare ya dipalo tša go tloga go n go ya go m (go akaretšwa n le m). Kgomarela karabo go ya go palogare ya kgauswi gomme o e fetole go ya go ya bobedi. Ge n e le ye kgolo go feta m, bušetša -1. Mohlala: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,nso_Latn,python,"
def unique_digits(x):
    """"""Ge go filwe lenane la dipalo tše di feletšego tše botse x. bušetša lenaneo le le rulagantšwego la dilo ka moka tšeo di se nago le dinomoro tša go lekana. Ela hloko: Lenaneo le le bušeditšwego le swanetše go hlophiwa ka tatelano ya go oketšega. Mohlala: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,nso_Latn,python,"
def by_length(arr):
    """"""Ge o filwe mothaladi wa dinomoro tša go felela, hlopha dinomoro tša go felela tšeo di lego magareng ga 1 le 9 go akaretšwa, o fetole mothaladi wo o tšweletšwago, gomme o bee nomoro ye nngwe le ye nngwe legatong la yona ka leina la yona la go swana le ""E tee"", ""Bobedi"", ""Tharo"", ""Bane"", ""Tsehlano"", ""Setshela"", ""Supa"", ""Seswai"", ""Senyane"". Mohlala: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> hlopha arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> hlopha arr -> [8, 5, 4, 3, 2, 2, 1, 1] bušetša [""Seswai"", ""Tharo"", ""Bobedi"", ""Bobedi"", ""Bobedi"", ""Bobedi"", ""Bobedi"", ""Bobedi"", ""Bobedi"", ""Bongwe"", ""Bongwe""] Ge mothaladi o se na selo, o bušetša mothaladi: arr = [] bušetša [] Ge mothaladi o na le nomoro ye e sa tlwaelegago o hlokomologe: arr = [1, -1 , 55] -> arr - [1, 1], 55 -> [1, 55] -> reverse arr = [51] - ['One' return 1,' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,nso_Latn,python,"
def f(n):
    """"""Diriša mošomo f yeo e tšeago n bjalo ka paramethara, gomme e bušetša lenane la bogolo n, ka tsela yeo boleng bja elemente ka go index i ke factorial ya i ge e le gore ke le tee goba palomoka ya dinomoro go tloga go 1 go ya go i ka tsela ye nngwe. i e thoma go 1. factorial ya i ke katološo ya dinomoro go tloga go 1 go ya go i (1 * 2 * ... * i). Mohlala: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,nso_Latn,python,"
def even_odd_palindrome(n):
    """"""Ka go fiwa palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palindrome ya palind""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,nso_Latn,python,"
def count_nums(arr):
    """"""Ngwala mošomo wa count_nums wo o tšeago matlakala a dipalo tša go felela gomme wa bušetša palo ya dielemente tšeo di nago le palomoka ya dinomoro > 0. Ge e le gore nomoro ke e mpe, gona dinomoro tša yona tša mathomo tšeo di saennwego e tla ba tše mpe: mohlala, -123 e na le dinomoro tša go saenwa -1, 2, le 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,nso_Latn,python,"
def move_one_ball(arr):
    """"""Re na le 'arr' ya dinomoro tša N tša go ba le dipalo tše di feletšego arr[1], arr[2], ..., arr[N].Dipalo tša go ba le dipalo di tla be di beakantšwe ka go se kgethe. Mošomo wa gago ke go tseba ge e ba go kgonega go hwetša dipalo tše di rulagantšwego ka tatelano yeo e sa fokotšegego ka go dira tiro ye e latelago go dipalo tšeo di filwego: O dumeletšwe go dira tiro ya go šuthišetša ka go le letona ka makga a mantši. Tirelo e tee ya go šuthišetša ka go le letona e ra go šuthiša dielemente ka moka tša dipalo ka go le letona ka go le lengwe ka lehlakoreng la go le letona. Elemente ya mafelelo ya dipalo e tla šuthišetšwa go le lengwe la go thoma ka dipalo tšeo di filwego, ke gore 0th. Ge e le gore go a kgonega go hwetša dipalo tše di rulagantšwego ka go dira tiro ya ka godimo, ka morago go tla bušetšwa True, ka morago e tla bušetšwa False. Tlhokomedišo: Lenaneo le le filwego le kgonthišeditšwe go ba le dielemente tše di kgethegilego. Mohlala: move_one_ball[[3, 4, 5, 4, 5, 1] == 1, 2> Tlhaloso ya nnete: Ka go ka go dira ditiro tša go le letona, go le letona, go se fokotšego go ka fihlelwa go ba le go se fokotšego tatelano yeo e lego gona go dipalo tša dipalo tša dipalo tšeo di filwego go le letona.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,nso_Latn,python,"
def exchange(lst1, lst2):
    """"""Mo go bothata bjo, o tla tsenya tirišong mošomo wo o tšeago mananeo a mabedi a dinomoro, le go laetša ge eba go a kgonega go dira phapanyetsano ya dielemente magareng ga tšona go dira lst1 lenane la dinomoro tša go lekana fela. Ga go na lepheko la palo ya dielemente tše di fetošitšwego magareng ga lst1 le lst2. Ge e le gore go a kgonega go fapanyetsanya dielemente magareng ga lst1 le lst2 go dira gore dielemente ka moka tša lst1 di be tša go lekana, bušetša ""EE"". Go sego bjalo, bušetša ""AOWA"". Mohlala: phapanyetsano [(1, 2, 3, 4], [1, 2, 3, 4]) => ""EE"" phapanyetsano [(1, 2, 3, 4], [1, 5, 3, 4]) => ""AOWA"" Go akanywa gore mananeo a go tsena a tla ba a se nago selo. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,nso_Latn,python,"
def histogram(test):
    """"""Ge go filwe thaetlele yeo e emelago ditlhaka tša ditlhaka tše nnyane tšeo di arogantšwego ke sekgoba, bušetša pukuntšu ya tlhaka yeo e nago le poeletšo e ntši gomme e na le palo ya go swana. Ge ditlhaka tše mmalwa di na le tiragalo e tee, bušetša ka moka ga tšona. Mohlala: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4}: histogram (('a') == {} } } } } } } } } } } } } } } } } } } } } } } } } } } } } }                                                                                                                                                 """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,nso_Latn,python,"
def reverse_delete(s,c):
    """"""Mošomo Re filwe diketane tše pedi s le c, o swanetše go phumola ditlhaka ka moka ka s tšeo di lekanago le tlhaka efe goba efe ka c gomme o lekole ge eba mogala wa mafelelo ke palindrome. Mogala o bitšwa palindrome ge e ba o bala ka go swana go ya pele le morago. O swanetše go bušetša tuple yeo e nago le mogala wa mafelelo le Nnete/Mefoswana bakeng sa go lekola. Mohlala Bakeng sa s = ""abcde"", c = ""ae"", mafelelo e swanetše go ba ('bcd',False) Bakeng sa s = ""abcdef"", c = ""b"" mafelelo e swanetše go ba ('acdef',False) Bakeng sa s = ""abcdedcba"", c = ""ab"", mafelelo e swanetše go ba ('cdedc',True) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,nso_Latn,python,"
def odd_count(lst):
    """"""Ge o filwe lenane la dinomoro tša dinomoro, moo dinomoro tša dinomoro tša dinomoro tša dinomoro di lego gona, bušetša lenane. Elemente ye nngwe le ye nngwe i ya tšweletšo e swanetše go ba ""palo ya dinomoro tša go se tlwaelege ka go thaetlele i ya go tsenya"". moo dinomoro ka moka tša i di swanetšego go tšeelwa legato ke palo ya dinomoro tša go se tlwaelege ka go thaetlele ya go tsena. >>> odd_count['1234567']) [""palo ya dinomoro tša go se tlwaelege 4n ya str4ng 4 ya 4nput.""] >>> odd_count['3',""111111""]) [""palo ya dinomoro tša go se tlwaelege 1n ya str1ng 1 ya 1nput."", ""palo ya dinomoro tša go se tlwaelege 8n ya str8ng 8 ya 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,nso_Latn,python,"
def minSubArraySum(nums):
    """"""Ka go fiwa matlakala a dipalo tša go felela, hwetša palomoka ya bonnyane bja matlakala a go se be le selo a go se be le selo. Mohlala minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,nso_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""O fiwa keriti ya dikhutlo tše nne ya didiba. Molokoloko wo mongwe le wo mongwe o emela sediba se tee, gomme 1 ye nngwe le ye nngwe molokelong e emela yuniti e tee ya meetse. Sediba se sengwe le se sengwe se na le bakete yeo e ka dirišwago go ntšha meetse go sona, gomme bakete ka moka ba na le bokgoni bjo bo swanago. Mošomo wa gago ke go diriša bakete go ntšha dikele. Tšweletša palo ya makga ao o hlokago go theoša dikele. Mohlala 1: Tseno: keriti: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Ditšweletšo: 6 Mohlala 2: Tseno: keriti: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 Ditšweletšo: 5 Mohlala 3: Tseno: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Ditšweletšo
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,nso_Latn,python,"
def sort_array(arr):
    """"""Ka go Kata ye, o swanetše go hlopha matlakala a dipalo tša go se be le maswanedi go ya ka palo ya tše di lego ka go boemedi bja tšona bja binary ka tatelano ya go hlatloga. Bakeng sa palo ya tše di swanago, hlopha go ya ka boleng bja desimale. E swanetše go phethagatšwa ka tsela ye: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,nso_Latn,python,"
def select_words(s, n):
    """"""Ge go filwe thaetlele s le nomoro ya tlhago n, o filwe mošomo wa go phethagatša mošomo wo o bušetšago lenane la mantšu ka moka go tšwa thaetlele s ao a nago le ditumammogo tše n ka go nepa, gore mantšu a a bonale thaetlele s. Ge thaetlele s e le lešo, gona mošomo o swanetše go bušetša lenane le le se nago selo. Ela hloko: o ka no tšea gore thaetlele ya go tsenya e na le ditlhaka le dikgoba fela. Mehlala: select_words (((""Mary had a little lamb"", 4) ==> [""little""] select_words (((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words (((""Hello world"", 4) ==> [""world""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,nso_Latn,python,"
def get_closest_vowel(word):
    """"""O fiwa lentšu. Mošomo wa gago ke go hwetša segalo sa kgauswi se se emego magareng ga ditumammogo tše pedi go tšwa ka lehlakoreng la go ja la lentšu (case sensitive). Ditumammogo tša mathomong le mafelelong ga di balwe. Bušetša thapo ya lefela ge o sa hwetša segalo se se sepelelanago le maemo a ka godimo. O ka akanya gore thapo ye e filwego e na le ditlhaka tša Seisimane fela. Mohlala: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,nso_Latn,python,"
def match_parens(lst):
    '''O fiwa lenane la dinolo tše pedi, dinolo ka bobedi di na le dikgoba tša go bulega '(' goba dikgoba tša go tswalela ') ' fela. Mošomo wa gago ke go lekola ge e le gore go a kgonega go kopanya dinolo tše pedi ka tatelano, gore thapo yeo e tšweletšwago e tla ba ye botse. Thapo S e tšewa e le ye botse ge e le gore dikgoba ka moka ka go S di a lekalekana. Mohlala: thapo '((()) ' e botse, mola thapo '()) ' e se bjalo. Fetoša 'Ee' ge e le gore go na le tsela ya go dira thapo ye botse, gomme o buše 'Aowa' ge go se bjalo. Mehlala: match_parens[('() ', ') ']) == 'Ee' match_parens[(') ', ') ']) == 'Aowa' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,nso_Latn,python,"
def maximum(arr, k):
    """"""Go filwe lenane la dinomoro tša go felela le k ya go ba le palo ya godimo ya dinomoro tša go felela ka go arr. Mohlala1: Go tsenya: arr = [-3, -4, 5], k = 3 Go ntšha: [-4, -3, 5] Mohlala2: Go tsenya: arr = [4, -4, 4], k = 2 Go ntšha: [4, 4] Mohlala3: Go tsenya: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Go ntšha: [2] Ela hloko: 1. Botelele bja lenane bo tla ba ka gare ga [1, 1000]. 2. Dikarolo tša lenane di tla ba ka gare ga [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,nso_Latn,python,"
def solution(lst):
    """"""Ka go fiwa lenane la go se be le selo la dinomoro tša go felela, bušetša palomoka ya dinomoro tša go se lekane tšeo di lego maemong a go lekana. Mehlala ya tharollo (([5, 8, 7, 1]) ==> 12 tharollo (([3, 3, 3, 3, 3]) ==> 9 tharollo (([30, 13, 24, 321]) ==>0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,nso_Latn,python,"
def add_elements(arr, k):
    """"""Ka go fiwa mothaladi wa go se be le selo wa dinomoro tša go felela arr le nomoro ya go felela k, bušetša palomoka ya dikarolo tša go ba le dinomoro tše pedi go tloga go dinomoro tša mathomo tša k tša arr. Mohlala: Kaonafatšo: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Kaonafatšo: 24 # palomoka ya 21 + 3 Dithibelo: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,nso_Latn,python,"
def get_odd_collatz(n):
    """"""Ge o filwe palomoka ya n, bušetša lenaneo leo le rulagantšwego leo le nago le dinomoro tša go se lekane ka tatelano ya collatz. Kgopolo ya Collatz ke kgopolo ka go dipalo yeo e amanago le tatelano yeo e hlalošitšwego ka tsela ye: thoma ka palomoka ya n. Gomme karolo ye nngwe le ye nngwe e hwetšwa go tšwa go karolo ya pele ka tsela ye: ge e le gore karolo ya pele ke ya go lekana, karolo ye e latelago ke seripa sa karolo ya pele. Ge e le gore karolo ya pele ke ya go se lekane, karolo ye e latelago ke 3 ka go lekana le karolo ya pele go tlaleletša 1. Kgopolo ke gore go sa šetšwe gore ke boleng bofe bja n, tatelano e tla fihla go 1. Ela hloko: 1. Collatz(1) ke [1]. 2. Lenaneo leo le bušeditšwego le rulagantšwe ka tatelano ya go oketšega. Mohlala: get_odd_collatz(5) e bušetša [1, 5] # Tatelano ya collatz ya 5 ke [5, 8, 16, 4, 2, 1], ka fao dinomoro tša go se lekane ke 1 le 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,nso_Latn,python,"
def valid_date(date):
    """"""O swanetše go ngwala mošomo wo o netefatšago thaetlele ya letšatšikgwedi le le itšego gomme o bušetša Nnete ge e le gore letšatšikgwedi le a šoma go se bjalo e tla ba Maaka. Letšatšikgwedi le tla šoma ge e le gore melao ka moka ye e latelago e kgotsofaditšwe: 1. Thaetlele ya letšatšikgwedi ga se ya selela. 2. Palo ya matšatši ga se ya ka tlase ga 1 goba ya feta 31 ya matšatši bakeng sa dikgwedi 1,3,5,7,8,10,12. Le palo ya matšatši ga se ya ka tlase ga 1 goba ya feta 30 ya matšatši bakeng sa dikgwedi 4,6,9,11. Le, palo ya matšatši ga se ya ka tlase ga 1 goba ya feta 29 ya matšatši bakeng sa kgwedi 2. 3. Dikgwedi ga se tša swanela go ba ka tlase ga 1 goba tša feta 12. 4. Letšatšikgwedi le swanetše go ba ka sebopego sa: mm-dd-yyyy mohlala: valid_date('03-11-2000') => True_date('15-01-2012') => False_date ((('04-01-2040') => False_date ((('06-04-2020') => True_date ((('06/04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,nso_Latn,python,"
def split_words(txt):
    '''Ge go filwe mothaladi wa mantšu, bušetša lenaneo la mantšu ao a arogantšwego ka sekgoba, ge e le gore ga go na sekgoba seo se lego gona ka gare ga sengwalwa o swanetše go aroganya ka dikoma ',' ge e le gore ga go na dikoma o swanetše go bušetša palo ya ditlhaka tša ditlhaka tše nnyane ka tatelano ya go se swane ka gare ga alfabete, ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 Mehlala ya mantšu ao a arogantšwego ka go fapana (split_words) â ""Hello world!"") â -> [""Hello"", ""world!""] split_words'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,nso_Latn,python,"
def is_sorted(lst):
    '''Ge o filwe lenaneo la dinomoro, bušetša ge eba di hlophilwe ka tatelano ya go hlatloga. Ge lenaneo le na le go feta 1 ya go swana le yona, bušetša FALSE. Tšea gore ga go na dinomoro tša go se be le mohola le dinomoro tša go felela. Mehlala ke: is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,nso_Latn,python,"
def intersection(interval1, interval2):
    """"""O fiwa dipaka tše pedi, moo e nngwe le e nngwe ya dipaka e lego dipara tša dipalo tša palogare. Ka mohlala, dipaka = (mathomo, mafelelo) = (1, 2). Dipaka tše di filwego di tswaletšwe seo se rago gore sebaka (mathomo, mafelelo) se akaretša bobedi mathomo le mafelelo. Bakeng sa sebaka se sengwe le se sengwe se se filwego, go akanywa gore mathomo a sona ke a mannyane go feta goba a lekana le mafelelo a sona. Mošomo wa gago ke go tseba ge e ba botelele bja phapano ya dipaka tše pedi ke nomoro ya mathomo. Mohlala, phapano ya dipaka (1, 3), (2, 4) ke (2, 3) yeo botelele bja yona e lego 1, yeo e sego nomoro ya mathomo. Ge e le gore botelele bja phapano ke nomoro ya mathomo, bušetša ""EE"", go sego bjalo, bušetša ""AOWA"". Ge dipaka tše pedi di sa kgaogane, bušetša ""AOWA"". [input/output] mehlala: phapano ya (2, 2, 3) ==> ""gapano"", ""gapano-1, 1), ""gapano"", ""gapano"", ""gap"", ""gap"", ""gap"", ""gap"", ""gap"", ""gap"", ""gap"", ""-5"", ""gap"", ""gap"", "" (-3), ""YES"", """"""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,nso_Latn,python,"
def prod_signs(arr):
    """"""O filwe matlakala a dinomoro tša go felela gomme o swanetše go bušetša palomoka ya bogolo bja dinomoro tša go felela di atišitšwe ka poelo ya maswao ka moka a nomoro ye nngwe le ye nngwe ka matlakaleng, ao a emelwago ke 1, -1 goba 0. Hlokomela: bušetša Ga go na selo bakeng sa matlakala a go se be le selo Mohlala: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Ga go na selo """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,nso_Latn,python,"
def minPath(grid, k):
    """"""Ka go fa keriti ya methaladi le dikholomo tša N (N >= 2) le k ya botelele bja go ba le mohola, sele ye nngwe le ye nngwe ya keriti e na le mohola. Palo ye nngwe le ye nngwe ya botelele bja [1, N * N] go akaretšwa e tšwelela gatee ka go disele tša keriti. O swanetše go hwetša tsela ya botelele bja k ka gare ga keriti. O ka thoma go tšwa sele efe goba efe, gomme mo kgatong ye nngwe le ye nngwe o ka ya diseleng tša kgauswi, ka mantšu a mangwe, o ka ya diseleng tšeo di abelanago le wena ka thoko ya sele ya bjale. Ka kgopelo lemoga gore tsela ya botelele bja k e ra gore o etela disele tša k (ga se gore di a fapana). O KA SE kgone go tšwa ka keriting. Tsela ya A (ya botelele bja k) e tšewa e le e nnyane go feta tsela ya B (ya botelele bja k) ge e le gore ka morago ga go dira mananeo a go laetšwa a mehola ka diseleng tša A le B (a re di bitše l_st le l_j_stA), l_stB ka go ya go ba lexikographically ke ye nnyane go feta l_stB, ka mantšu a mangwe, ka gare ga keriti o ka hwetša tsela ya botelele ya botelele bja k. O ka gare ga e ka thoma go tšwa seleng efe, gomme mo kgatong ye nngwe le ye nngwe o ka kgona go ya sele ya go ya sele ya kgauswi, ka go ya sele efe ya go ka go swana le ya bjale, ka mantšu a mangwe, ka gore o ka kgona go ya sele efe ya sele ya bjale, ka gare ya bjale, ka gare, ka gare ya sele ya bjale, ka gare, ka gare, ka gare, ka gare ga, ka gare ga, ka gare ga, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare, ka gare,""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,nso_Latn,python,"
def tri(n):
    """"""Ka moka re tseba tatelano ya Fibonacci, e ile ya ithutwa ka mo go tseneletšego ke boradipalo mengwagakgolong e mebedi ya go feta. Le ge go le bjalo, seo batho ba sa se tsebego ke tatelano ya Tribonacci. Tatelano ya Tribonacci e hlalošwa ke poeletšo: tri(1) = 3 tri(n) = 1 + n / 2, ge n e le palogare. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ge n e le palogare. Mohlala: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 O filwe nomoro ya go se be le bosodi ya palogare ya n, o swanetše go bušetša lenaneo la dinomoro tša mathomo tša n + 1 tša tatelano ya Tribonacci. Mehlala: tri(3) = [1, 3, 2, 8] """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,nso_Latn,python,"
def digits(n):
    """"""Ge go filwe nomoro ya go felela ya go ba le poelo n, bušetša poelo ya dipalo tša go se be le palogare. Bušetša 0 ge e le gore dipalo ka moka ke tša go lekana. Mohlala: dipalo (di) == 1 dipalo (di) == 0 dipalo (di) == 235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,nso_Latn,python,"
def is_nested(string):
    '''Hlama mošomo wo o tšeago thaetlele bjalo ka input yeo e nago le dikhonkrese tša sekwere fela. Mošomo o swanetše go bušetša Nnete ge e le gore go na le tatelano ya dikhonkrese yeo e lego ya maleba moo bonnyane go nago le khonkrese e tee ka go tatelano. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese. ke_khonkrese.'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,nso_Latn,python,"

def sum_squares(lst):
    """"""O fiwa lenaneo la dinomoro. O swanetše go bušetša palomoka ya dinomoro tša sekwere ka gare ga lenaneo leo le filwego, o dikološe sehlongwa se sengwe le se sengwe ka gare ga lenaneo go ya go int ya ka godimo ((Lefelo la godimo) pele. Mehlala: Bakeng sa lst = [1,2,3] poelo e swanetše go ba 14 Bakeng sa lst = [1,4,9] poelo e swanetše go ba 98 Bakeng sa lst = [1,3,5,7] poelo e swanetše go ba 84 Bakeng sa lst = [1.4,4.2,0] poelo e swanetše go ba 29 Bakeng sa lst = [-2.4,1,1] poelo e swanetše go ba 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,nso_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Hlama mošomo wo o bušetšago Nnete ge e le gore tlhalošo ya mafelelo ya thaetlele ye e filwego ke tlhalošo ya alfabete gomme ga se karolo ya lentšu, le Maaka ka tsela ye nngwe. Ela hloko: ""lentšu"" ke sehlopha sa ditlhaka tšeo di arogantšwego ke sekgoba. Mehlala: check_if_last_char_is_a_letter""{""apple pie"") â -> False check_if_last_char_is_a_letter""{""apple pi e"") â -> True check_if_last_char_is_a_letter""{""apple pi e"") â -> False check_if_last_char_is_a_letter""{""}""{""}'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,nso_Latn,python,"
def can_arrange(arr):
    """"""Hlama tiro yeo e bušetšago nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba le nomoro ya go ba nomoro ya go ba nomoro ya go ba nomoro ya go ba""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,nso_Latn,python,"
def largest_smallest_integers(lst):
    '''Hlama tiro yeo e bušetšago tuple (a, b), moo 'a' e lego ye kgolo ya dipalo tša go se be le mohola, gomme 'b' ke ye nnyane ya dipalo tša go ba le mohola ka go lenaneo. Ge go se na dipalo tša go se be le mohola goba tše di nago le mohola, di bušetše bjalo ka None. Mehlala: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,nso_Latn,python,"
def compare_one(a, b):
    """"""Tšweletša mošomo wo o tšeago dipalo tša go tlala, tša go sepela, goba dinomoro tša go emela dinomoro tša nnete, gomme o bušetša go go fetoga go go kgolo ka mohuta wa go fetoga wa yona wo o filwego. Bušetša Null ge e le gore dikelo di a lekana. Ela hloko: Ge e le gore nomoro ya nnete e emelwa bjalo ka thapo, ntlha ya go sepela e ka ba . goba , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,nso_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Hlahloba ge e ba palo yeo e filwego n e ka ngwalwa e le palomoka ya dinomoro tše 4 tša go lekana tše di nepagetšego Mohlala is_equal_to_sum_even ((4) == Maaka is_equal_to_sum_even ((6) == Maaka is_equal_to_sum_even ((8) == Therešo """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,nso_Latn,python,"
def special_factorial(n):
    """"""Faktori ya Brazil e hlalošwa bjalo ka: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! moo n > 0 Mohlala: >>> special_factorial ((4) 288 Mošomo o tla amogela palomoka bjalo ka input gomme o swanetše go bušetša palomoka ya palomoka ya palomoka ye. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,nso_Latn,python,"
def fix_spaces(text):
    """"""_Mohlala-3tlele ya mongwalo, bea sekgala ka moka ka gare ka dikhutlo tša ka fase, gomme ge thaetlele e na le dikgoba tša go feta 2 tša go latelana, gona bea sekgala ka moka sa go latelana ka - fix_spaces (((""Mohlala"") == ""Mohlala"" fix_spaces (((""Mohlala1"") == ""Mohlala_1"" fix_spaces (((""Mohlala2"") == ""_Mohlala_2"" fix_spaces (((""Mohlala 3"") == ""_Mohlala-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,nso_Latn,python,"
def file_name_check(file_name):
    """"""Hlama mošomo wo o tšeago thaetlele yeo e emelago leina la faele, gomme o bušetša 'Ee' ge e le gore leina la faele le a šoma, gomme o bušetša 'Aowa' ge e le gore ga go bjalo. Leina la faele le tšewa le šoma ge e le gore le kgotsofatša mabaka a a latelago: - Ga go a swanela go ba le dinomoro tša go feta tše tharo ('0'-'9') ka go leina la faele. - Leina la faele le na le ntlha e tee ka go nepa. - Thaetlele ya ka tlase pele ga ntlha ga se ya swanela go ba e se na selo, gomme e thoma ka tlhaka ya alfabete ya selatiniki ('a'-'z' le 'A'Z'). - Thaetlele ya ka tlase ka morago ga ntlha e swanetše go ba ye nngwe ya tše: ['txt', 'exe', 'lld'] Mehlala: file_name_check""{example.txt. #"") => 'Ee'file_name_check""{example.dll1"") => 'Aowa' (leina le swanetše go thoma ka tlhaka ya selatiniki)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,nso_Latn,python,"


def sum_squares(lst):
    """""""" Mošomo wo o tla tšea lenaneo la dinomoro tša go felela. Go diteng ka moka mo lenaneong, mošomo o tla dira sekwere sa diteng tša go felela ge e le gore inethese ya yona ke makga a 3 gomme o tla dira dikhubiki tša diteng tša go felela ge e le gore inethese ya yona ke makga a 4 e sego makga a 3. Mošomo o ka se fetoše diteng mo lenaneong tšeo di nago le di-index tšeo e sego makga a 3 goba 4. Mošomo o tla bušetša palomoka ya diteng ka moka. Mehlala: Go lst = [1,2,3] tšweletšo e swanetše go ba 6 Go lst = [] tšweletšo e swanetše go ba 0 Go lst = [-1,-5,2,-1,-5] tšweletšo e swanetše go ba -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,nso_Latn,python,"
def words_in_sentence(sentence):
    """"""O fiwa thaetlele yeo e emelago polelo, polelo e na le mantšu a mangwe ao a arogantšwego ke sekgoba, gomme o swanetše go bušetša thaetlele yeo e nago le mantšu go tšwa polelong ya mathomo, yeo botelele bja yona e lego dinomoro tša mathomo, tatelano ya mantšu a thaetlele e mpsha e swanetše go swana le ya mathomo. Mohlala1: Kakaretšo: polelo = ""Se ke teko"" Kakaretšo: ""ke"" Kakaretšo2: Kakaretšo: polelo = ""a re ye go rutha"" Kakaretšo: ""go for"" Dikgaoletšo: * 1 <= len(sentence) <= 100 * polelo e na le ditlhaka fela """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,nso_Latn,python,"
def simplify(x, n):
    """"""Mošomo wa gago ke go tsenya tirišong mošomo wo o tla nolofatšago polelwana x * n. Mošomo o tla bušetša Nnete ge e le gore x * n e lekanyetša go palo ya go felela gomme Maaka go se bjalo. Bobedi x le n, ke taetši ya boemedi bja seripa, gomme di na le sebopego se se latelago, <numerator>/<denominator> moo bobedi nomerator le denominator e lego dinomoro tša go felela tše botse. O ka akanya gore x, le n ke dikarolwana tše di nepagetšego, gomme ga di na lefela bjalo ka denominator. nolofatša ""1/5"", ""5/1"") = Nnete nolofatša ""1/6"", ""2/1"") = Maaka nolofatša ""7/10"", ""10/2"") = Maaka """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,nso_Latn,python,"
def order_by_points(nums):
    """"""Ngwala taodišo yeo e beakanyago lenane la dinomoro tša go felela ka tatelano ya go hlatloga go ya ka palomoka ya dinomoro tša tšona. Ela hloko: ge go na le dilo tše mmalwa tšeo di nago le palomoka ya dinomoro tša tšona, di beakanye go ya ka di-index tša tšona ka gare ga lenaneo la mathomo. Mohlala: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,nso_Latn,python,"
def specialFilter(nums):
    """"""Ngwala mošomo wo o tšeago matlakala a dinomoro bjalo ka input gomme wa bušetša palo ya dielemente ka matlakaleng tšeo di lego ka godimo ga 10 le bobedi dinomoro tša mathomo le tša mafelelo tša nomoro ke tša go se tlwaelege (1, 3, 5, 7, 9). Mohlala: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,nso_Latn,python,"
def get_max_triples(n):
    """"""O fiwa palomoka ya n. O swanetše go hlama palomoka ya matlakala a botelele bja n. Go i e nngwe le e nngwe (1 ‰¤ i ‰¤ n), mohola wa a[i] = i * i - i + 1. Boela palo ya makga a mararo (a[i], a[j], a[k]) a mo i < j < k, le a[i] + a[j] + a[k] ke makga a 3. Mohlala: Kakaretšo: n = 5 Kakaretšo: 1 Tlhaloso: a = [1, 3, 7, 13, 21] Kakaretšo ya boraro e nnoši e nepagetšego ke (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,nso_Latn,python,"
def bf(planet1, planet2):
    '''Go na le dipolanete tše seswai ka gare ga tshepedišo ya rena ya letšatši: ye e lego kgauswi le letšatši ke Mercury, ye e latelago ke Venus, ke moka ya latelwa ke Lefase, Mars, Jupiter, Saturn, Uranus, Neptune. Ngwala mošomo wo o tšeago maina a dipolanete tše pedi bjalo ka dinomoro planet1 le planet2. Mošomo o swanetše go bušetša tuple yeo e nago le dipolanete ka moka tšeo di dikologago di le magareng ga tsela ya polanete1 le tsela ya polanete2, di hlophilwe ka go ba kgauswi le letšatši. Mošomo o swanetše go bušetša tuple ye e se nago selo ge e le gore planete1 goba planet2 ga se maina a maleba a dipolanete. Mehlala bf ""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf (((""Lefase"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Lefase"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,nso_Latn,python,"
def sorted_list_sum(lst):
    """"""Ngwala mošomo wo o amogelago lenane la dinolo bjalo ka pharamitha, o phumula dinolo tšeo di nago le botelele bja go se lekane go tšwa go lona, gomme o bušetša lenaneo leo le tšweleditšwego ka tatelano yeo e rulagantšwego. Lenaneo ka mehla ke lenane la dinolo e sego lelokelelo la dinomoro, gomme le ka ba le dikopi. Tatelano ya lenaneo e swanetše go ba ya go hlatloga ka botelele bja lentšu le lengwe le le lengwe, gomme o swanetše go bušetša lenaneo leo le rulagantšwego ka molao woo. Ge mantšu a mabedi a na le botelele bjo bo swanago, o swanetše go hlopha lenaneo ka tatelano ya ditlhaka. Mošomo o swanetše go bušetša lenaneo la dinolo ka tatelano yeo e rulagantšwego. O ka nagana gore mantšu ka moka a tla ba le botelele bjo bo swanago. Mohlala: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,nso_Latn,python,"
def x_or_y(n, x, y):
    """"""Lenaneo le bonolo leo le swanetšego go bušetša boleng bja x ge n e le palogare ya mathomo gomme le swanetše go bušetša boleng bja y ka ntle le moo. Mehlala: bakeng sa x_or_y(7, 34, 12) == 34 bakeng sa x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,nso_Latn,python,"
def double_the_difference(lst):
    '''Ge o filwe lenaneo la dinomoro, bušetša palomoka ya dikwere tša dinomoro tša lenane tšeo di sego tša lekana. O se ke wa ela hloko dinomoro tšeo e lego tše di sego tša lekana goba tšeo e sego tša palomoka. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Ge lenane la ka gare le se na selo, bušetša 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,nso_Latn,python,"
def compare(game,guess):
    """"""Ke nagana gore ka moka ga rena re gopola gore go kwa bohloko ge mafelelo a tiragalo ye e bego e letetšwe nako e telele mafelelong a tsebja. Maikutlo le dikgopolo tšeo o nago le tšona ka nako yeo di tloga di swanelwa ke go ngwalwa le go bapišwa. Mošomo wa gago ke go bona ge eba motho o hlagantše dipoelo tša palo ya dipapadi ka tshwanelo. O fiwa dipalo tše pedi tša dipalo le dikakanyo tša botelele bjo bo lekanago, moo tšhupetšo ye nngwe le ye nngwe e bontšhago go swana. Bušetša palo ya botelele bjo bo swanago e laetša gore go be go le kgole gakae ka go šišinya. Ge ba šišintše ka tshwanelo, boleng ke 0, gomme ge e le gore ga se bjalo, boleng ke phapano ya go se fetoge magareng ga go šišinya le poelo. mohlala: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,0,4],[4,1,0,2,4]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,nso_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""O tla fiwa leina la sehlopha (mohala) le lenaneo la ditlaleletšo. Ditlaleletšo di tla šomišwa go tsenya dihlopha tša tlaleletšo go sehlopha. Matla a katološo ke a a latelago: E re CAP e be palo ya ditlhaka tše kgolo ka go leina la katološo, gomme e re SM e be palo ya ditlhaka tše nnyane ka go leina la katološo, maatla a fiwa ke karolwana ya CAP - SM. O swanetše go hwetša katološo ya go tia gomme o bušetše molokoloko ka mokgwa wo: ClassName.StrongestExtensionName. Ge go na le ditlaleletšo tše pedi goba go feta ka maatla a go swana, o swanetše go kgetha yeo e tlago pele ka go lenaneo. Ka mohlala, ge o fiwa ""Slices"" bjalo ka sehlopha le lenaneo la ditlaleletšo: ['SEviviSliNGCes', 'Cheese', 'StufedF'] o swanetše go bušetša 'Slices.SEviSliNGCes' ka ge 'SviviSliNGCes' e le 'mySviSliNGCes' (mySliNGCes') ke katološo ya go tia (mohalalošo: 'AA_'), Mohlala: 'AA' ke 'Beast_class' matla a katološo.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,nso_Latn,python,"
def cycpattern_check(a , b):
    """"""O fiwa mantšu a 2. O swanetše go bušetša Nnete ge e le gore lentšu la bobedi goba le lengwe la dikhutlo tša lona ke mothaladi wa ka tlase wa lentšu la mathomo cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => Nnete cycpattern_check(""whassup"",""psus"") => Nnete cycpattern_check""(abab"",""baa"") => Nnete cycpattern_check(""efef"",""eeff"") => Nnete cycpattern_check""(hims"",""simen"") => Nnete """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,nso_Latn,python,"
def even_odd_count(num):
    """"""Ge go filwe palomoka ya dinomoro, e bušetša tuple yeo e nago le palo ya dinomoro tša go lekana le tša go se lekane ka go latelana. Mohlala: le_le_lekane_palo ((-12) ==> (1, 1) le_le_lekane_palo ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,nso_Latn,python,"
def int_to_mini_roman(number):
    """"""Ge o filwe palomoka ya go loka, hwetša nomoro ya yona ya go lekana ya roman ka go ba thaetlele, gomme o e bušetše ka ditlhaka tše nnyane.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,nso_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Ge go filwe botelele bja mahlakore a mararo a khutlotharo. Boa go Nnete ge mahlakore a mararo a bopa khutlotharo ya sekwere se se nepagetšego, Go se be le Nnete ge e le gore ga se a dira bjalo.'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,nso_Latn,python,"
def find_max(words):
    """"""Ngwala taodišo yeo e amogelago lenane la dinomoro. Lenane le na le mantšu a go fapana. Boela lentšu leo le nago le palo ya godimo ya ditlhaka tša go fapana. Ge dinomoro tša go fapana di na le palo ya godimo ya ditlhaka tša go fapana, boela yeo e tlago pele ka tatelano ya thutapolelo.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,nso_Latn,python,"
def eat(number, need, remaining):
    """"""O mmutla wa go swarwa ke tlala, gomme o šetše o jele palo ye e itšego ya dikherotse, eupša bjale o swanetše go ja dikherotse tše dingwe go feleletša dijo tša letšatši. o swanetše go bušetša mothaladi wa [palokakaretšo ya dikherotse tše di jewago ka morago ga dijo tša gago, palo ya dikherotse tše di šetšego ka morago ga dijo tša gago ] ge go se na dikherotse tše di šetšego tše di lekanego, o tla ja dikherotse ka moka tše di šetšego, eupša o sa dutše o tla swarwa ke tlala. Mohlala: * ja ((5, 6, 10) -> [11, 4] * ja ((4, 8, 9) -> [12, 1] * ja ((1, 10, 10) -> [11, 0] * ja ((2, 11, 5) -> [7, 0] Diphetogo: @nomoro: palomoka ya dikherotse tšeo o di jelego. @nyakega: palomoka ya dikherotse tšeo o swanetšego go di ja. @tšeo di šetšego: palomoka ya dikherotse tše di šetšego ka setokong.""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,nso_Latn,python,"
def do_algebra(operator, operand):
    """"""Ka go fa mananeo a mabedi a opareitara, le operand. Lenaneo la pele le na le ditiro tša motheo tša algebra, gomme lenane la bobedi ke lenaneo la dinomoro tša go se be le bosodi. Diriša mananeo a mabedi ao a filwego go aga polelwana ya algebra le go bušetša kelo ya polelwana ye. Ditiro tša motheo tša algebra: Koketšo ( + ) Kelo ( - ) Kelo ( * ) Karo ya fase ( // ) Kelo ya ka godimo ( ** Mohlala): opareitara['+', '*', '-'] matlakala = [2, 3, 4, 5] sephetho = 2 + 3 * 4 - 5 => sephetho = 9 Hlokomela: Botelele bja lenane la opareitara bo lekana le botelele bja lenane la operand la go se be le bosodi. Operand ke lenaneo la dinomoro tša go se be le bosodi. Operator e na le bonnyane leopareitara o tee, gomme lenane la opareitara le na le bonnyane diopereita tše pedi. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,nso_Latn,python,"
def solve(s):
    """"""O fiwa thaetlele s. ge s[i] e le tlhaka, fetola dikhaese tša yona go tloga ka fase go ya ka godimo goba vice versa, go sego bjalo e tlogele bjalo ka ge e le ka gona. Ge thaetlele e se na ditlhaka, fetola thaetlele. Fono e swanetše go bušetša thaetlele yeo e tšweletšego. Mehlala solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,nso_Latn,python,"
def string_to_md5(text):
    """"""Ge go filwe thaetlele 'text', bušetša thaetlele ya yona ya md5 ya hash ya go lekana. Ge 'text' e le thaetlele ya go se be le selo, bušetša None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,nso_Latn,python,"
def generate_integers(a, b):
    """"""Ka go fiwa dinomoro tše pedi tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba le dipoelo tša go ba di le dipoelo tša go ba di le dipoelo tša go di le dipoelo tša go di le go di le go di le lesome.""""""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
