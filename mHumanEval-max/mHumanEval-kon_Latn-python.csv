task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,kon_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Tala kana na lisiti ya ntalu, kele na ntalu zole ya kele pene-pene ya mosi na ya nkaka kuluta ntalu ya bo me pesa.""""""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,kon_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Na kati ya ba fonction yai kele na ba fonction ya nkaka yina kele na kati ya ba parenthèse ya bo me kangisa na ba groupe ya nkaka. Lukanu na nge kele ya kukabula ba groupe ya nkaka na ba groupe ya nkaka mpi kuvutula lisiti ya ba groupe ya nkaka. Ba groupe ya nkaka kele na kati ya ba groupe ya nkaka.""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,kon_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Kana beto me pesa ntalu ya pozisio ya ke balukaka na ndambu, beto lenda kukabula yo na ndambu ya mvimba (ya nene ya mvimba ya kuluta fioti ya ntalu yina bo me pesa) mpi na ndambu ya kumi (ya me bikala ya kuluta fioti ya ntalu yina bo me pesa).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,kon_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Nge me pesa lisiti ya bisalu ya kutula mbongo na konti ya banki yina ke yantika ti salde ya mpamba. Kisalu na nge kele ya kuzaba kana na konso ntangu salde ya konti me kulumuka na nsi ya zero, mpi na ntangu yina, kisalu fwete vutula Kieleka. Kana ve yo fwete vutula Luvunu.""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,kon_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Sambu na lisiti ya ntalu ya ba input, baka Mwayene ya Kukatuka ya ya mvimba na kati ya ntalu ya kimvuka ya bansangu yai. Mwayene ya Kukatuka ya ya mvimba kele kiteso ya luswaswanu ya nene na kati ya konso kima ti kisika ya kati (na mbandu yai: MAD = mwayene. x - x_mwayene. Mbandu: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,kon_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Tula ntalu mosi na kati ya bima zole ya kulandana ya lisiti ya mambu ya bo ke kotisaka `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,kon_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Na kati ya konso kimvuka, pesa ntalu ya ba parenthèses ya kele na kati ya ba parenthèses. Mu mbandu, (() (()) kele ti ba parenthèses ya kele na kati ya ba parenthèses zole, mpi ((())) kele ti ba parenthèses tatu.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,kon_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filtrela lisiti ya ba string ya ke na kati kaka na ba string yina kele na substring ya bo me pesa >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,kon_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Sambu na lisiti ya ba integres, vutula tuple yina kele na ntalu ya ntalu ya ntalu yonso ya kele na lisiti. Ntalu ya mpamba fwete vanda 0 mpi ntalu ya mpamba fwete vanda 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,kon_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Na lisiti ya ba integres, baka lisiti ya ba élément ya kuluta nene ya bo me mona tii na ntangu ya bo me pesa na ndonga. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,kon_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Sosa palindrome ya nkufi yina ke yantika na ndonga ya bo me pesa. Ngindu ya algorithme kele pete: - Sosa postfix ya nda ya ndonga ya bo me pesa yina kele palindrome. - Songa na nsuka ya ndonga ya balweka ya lutiti ya ndonga yina ke kwisa na ntwala ya suffixe palindromique. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Tala kana mutambu ya bo me pesa kele palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,kon_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Bazina ya ba ""string"" kele kaka 1 ti 0. Sala XOR na ba ""string"" yai mpi vutula mvutu na mutindu ya ""string"". >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,kon_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Na kati ya lisiti ya ba ndinga, vutula yina ya kuluta nda. Vutula yina ya ntete kana kele na ba ndinga mingi ya nda mosi. Vutula ve ata mosi kana lisiti ya kukota kele mpamba. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,kon_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Vutula ntalu ya nene ya ke kabulaka ntalu zole ya mvimba a ti b >>> ntalu ya nene ya ke kabulaka ntalu ya bantu yonso ((3, 5) 1 >>> ntalu ya nene ya ke kabulaka ntalu ya bantu yonso ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,kon_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Na nima, beto ta vutula lisiti ya ba préfixe yonso ya kele na ndonga ya ndonga ya ntete mpi ya nsuka ya ndonga ya ntete >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,kon_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Vutula ndonga ya ntalu ya me katuka na 0 tii na n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,kon_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Na kati ya bisono ya kele na ndonga, sosa kuzaba ntalu ya bisono yina kele na kati ya bisono yango.""""""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,kon_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Na kati ya baverse yai, beto me tubila mutindu ya kusadila bangogo yai ya bo me sadila na Biblia: ""Mfumu Nzambi, nge kele Nzambi ya kieleka, nge kele Nzambi ya moyo, nge kele Nzambi ya moyo"".""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,kon_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Tala mbala ikwa beto lenda mona nsinga ya fioti na nsinga ya kisina. Tadila ba cas yina ke lutana. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,kon_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input kele na kati ya ntalu ya ntalu ya me katuka na 'zero' tii na 'nine'. Ba nsola ya mbote kele 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' ti 'nine'. vutula ntalu ya ntalu ya me katuka na ntalu ya fioti tii na ntalu ya nene >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,kon_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Na kati ya lisiti ya ntalu (ya kele na nda kiteso ya zole) pona mpi vutula ntalu zole yina kele pene-pene na konso ntalu mpi vutula yo na ndonga (ntalu ya fioti, ntalu ya nene). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,kon_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Kana bo me pesa nge lisiti ya ntalu (ya kele ti bitini zole to kuluta), sadila mutindu mosi ya kubalula sambu ntalu ya kuluta fioti kukuma 0 mpi ntalu ya kuluta nene kukuma 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,kon_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filtre ya me pesama lisiti ya ba valeur ya Python kaka sambu na ba integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,kon_Latn,python,"

def strlen(string: str) -> int:
    """"""Bo me pesa beto ntalu ya nsinga ya bo me pesa beto >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,kon_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Sambu na ntalu ya me pesama n, sosa ntalu ya kuluta nene yina ke kabulaka n na kiteso ya kiteso, ya kuluta fioti n >>> ya kuluta nene_na kukabisa ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,kon_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Na nima ya kutanga ntalu ya ntete, beto fwete vutula ntalu ya ntete ya konso ntalu ya mvimba na ndonga yina ke katuka na ntalu ya fioti tii na ntalu ya nene.""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,kon_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Katula bima yonso yina kele na lisiti ya ntalu ya mvimba, katula bima yonso yina kele na lisiti ya ntalu ya mvimba.""""""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,kon_Latn,python,"

def flip_case(string: str) -> str:
    """"""Sambu na ndinga mosi ya bo me pesa, balula bisono ya fioti na bisono ya nene mpi ya nene na bisono ya fioti. >>> flip_case ((('Bonjour') 'Bonjour' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,kon_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Kuwakana ya ndonga ya bisono na ndonga mosi >>> kuwakana ya ndonga mosi (([]) '' >>> kuwakana ya ndonga mosi ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,kon_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filtrela lisiti ya ba string ya ke na kati ya ba string yina ke yantika na titre ya bo me pesa. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,kon_Latn,python,"

def get_positive(l: list):
    """"""Pesa kaka ntalu ya mbote na lisiti. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,kon_Latn,python,"

def is_prime(n):
    """"""Vutula kieleka kana ntalu ya me pesama kele ya ntete, mpi ya luvunu kana ve. >>> kele ya ntete (_) 6) Luvunu >>> kele ya ntete (_) 101) Kieleka >>> kele ya ntete (_) 11) Kieleka >>> kele ya ntete (_) 13441) Kieleka >>> kele ya ntete (_) 61) Kieleka >>> kele ya ntete (_) 4) Luvunu >>> kele ya ntete (_) 1) Luvunu """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,kon_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs kele coefficients ya polynôme. find_zero zwa x mutindu yina poly(x) = 0. find_zero ke vutula kaka kaka zero point, ata kana yo kele mingi. Diaka, find_zero ke baka kaka lisiti ya xs yina kele ti ntalu ya ba coefficients mpi coefficient ya kuluta nene yina kele zero ve sambu yo ke ndimisa mvutu. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Ke tadilaka polynôme na ba coefficient xs na kisika x. vutula xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,kon_Latn,python,"

def sort_third(l: list):
    """"""Kisalu yai ke baka lisiti l mpi ke vutula lisiti l' na mpila nde l' kele kiteso mosi ti l na ba indices yina lenda kabwana ve na tatu, na ntangu ba valeur na yo na ba indices yina lenda kabwana na tatu kele kiteso mosi ti ba valeur ya ba indices ya l, kansi ya me tula na ndonga. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,kon_Latn,python,"

def unique(l: list):
    """"""Vutula bima ya kuswaswana ya bo me tula na ndonga na lisiti mosi >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,kon_Latn,python,"

def max_element(l: list):
    """"""Pesa ntalu ya kuluta nene ya elemene na lisiti. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,kon_Latn,python,"

def fizz_buzz(n: int):
    """"""Pesa ntalu ya bambala yina ntalu 7 ke monana na kati ya ntalu ya mvimba yina kele na nsi ya n yina bo lenda kabula na 11 to 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,kon_Latn,python,"

def sort_even(l: list):
    """"""Kisalu yai ke baka lisiti mosi l mpi ke vutula lisiti mosi l' na mpila nde l' kele kiteso mosi ti l na ba indices ya mpambampamba, na ntangu ba indices ya ndambu kele kiteso mosi ti ba indices ya ndambu ya l, kansi bo me tula yo na ndonga. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,kon_Latn,python,"

def encode_cyclic(s: str):
    """"""ke baka bonso ndinga ya kukota yina bo me tula na encode_cyclic. Ke vutula ndinga ya bo me tula na encode. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""ke vutulaka ntalu ya bisono na ba cyclo ya bisono tatu. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,kon_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib ke vutula ntalu ya n-th yina kele ntalu ya Fibonacci mpi yo kele mpi ntalu ya ntete. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,kon_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero ke baka lisiti ya ba integers bonso entré. yo ke vutulaka True kana kele na ba élément tatu ya kuswaswana na lisiti yina ke sala somma ya zero, mpi False kana ve. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,kon_Latn,python,"

def car_race_collision(n: int):
    """"""Yindula nzila mosi ya kele ya kusungama ya nda kibeni. ba kamio n ke kwenda na diboko ya kimama na diboko ya kibakala; na ntangu mosi, kimvuka ya ba kamio n ke kwenda na diboko ya kibakala na diboko ya kimama. ba kamio zole ke yantika ntama kibeni. ba kamio yonso ke tambulaka na vitesi mosi. ba kamio zole ke tutanaka ntangu kamio mosi ke kwenda na diboko ya kimama na diboko ya kitata ke tutana ti kamio mosi ke kwenda na diboko ya kitata na diboko ya kimama. kansi, ba kamio kele ngolo kibeni; yo yina, bo ke landaka kutambula na nzila na bo bonso nde bo tutanaka ve. kisalu yai ke pesa ntalu ya ba kututana ya mutindu yina.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,kon_Latn,python,"

def incr_list(l: list):
    """"""[2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,kon_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero ke baka lisiti ya ba integers bonso entré. yo ke vutulaka True kana kele na ba élément zole ya kuswaswana na lisiti yina ke sala somma ya zero, mpi False kana ve. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,kon_Latn,python,"

def change_base(x: int, base: int):
    """"""Sadila baverse yai sambu na kubalula ntalu ya base ya nimero x na base. Na nima ya kubalula nimero yai, balula yo na ntalu ya base.""""""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,kon_Latn,python,"

def triangle_area(a, h):
    """"""Bo me pesa beto kitini ya lweka mpi kitini ya nene ya triangle. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,kon_Latn,python,"

def fib4(n: int):
    """"""Ndonga ya ntalu ya Fib4 kele ndonga ya mutindu mosi ti ndonga ya Fibbonacci yina kele na mutindu yayi: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). sonika kisalu mosi sambu na kuzaba mbote ndonga ya ntalu ya fib4. sadila ve recirculation. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,kon_Latn,python,"

def median(l: list):
    """"""Yo ke monisa nde bo me balula ve mambu ya nkaka ya Biblia na mutindu yina bo vandaka kuyindula.""""""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,kon_Latn,python,"

def is_palindrome(text: str):
    """"""Ke tala kana mutambu ya bo me pesa kele palindrome >>> is_palindrome (('') Ya kieleka >>> is_palindrome (('aba') Ya kieleka >>> is_palindrome (('aaaaa') Ya kieleka >>> is_palindrome (('zbcd') Ya luvunu """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,kon_Latn,python,"

def modp(n: int, p: int):
    """"""Beno vutula 2^n modulo p (zaba ntalu). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,kon_Latn,python,"

def encode_shift(s: str):
    """"""ke baka bonso ndinga ya kukota yina bo me tula na encode_shift. Ke vutula ndinga ya bo me tula na encode. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""ke vutulaka ntalu ya bisono na kusoba konso kisono na 5 na alfabe.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,kon_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels kele kisalu ya ke bakaka ndonga ya bavocale mpi ke vutulaka ndonga ya bavocale ve. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,kon_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Vutula Kieleka kana ntalu yonso na lisiti l kele na nsi ya ndilu t. >>> na nsi ya_ndilu (([1, 2, 4, 10], 100) Kieleka >>> na nsi ya_ndilu (([1, 20, 4, 10], 5) Luvunu """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,kon_Latn,python,"

def add(x: int, y: int):
    """"""Yidika ntalu zole x mpi y >>> yika ((2, 3) 5 >>> yika ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,kon_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Tala kana bangogo zole kele ti bisono ya mutindu mosi. >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') Ya kieleka >>> same_chars('abcd', 'dddddddabc') Ya kieleka >>> same_chars('dddddddabc', 'abcd') Ya kieleka >>> same_chars('eabcd', 'dddddddabc') Ya luvunu >>> same_chars('abcd', 'dddddddabddce') Ya luvunu >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') Ya luvunu """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,kon_Latn,python,"

def fib(n: int):
    """"""Pesa ntalu ya Fibonacci ya n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,kon_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets kele ndonga ya ""<"" mpi "">"". return True kana konso bracket ya ke kangula kele ti bracket ya ke kangaka. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,kon_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,kon_Latn,python,"

def common(l1: list, l2: list):
    """"""Yo ke vutula bima ya kuswaswana ya bo me yidika na lisiti ya bantu zole. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,kon_Latn,python,"

def largest_prime_factor(n: int):
    """"""Pesa ntalu ya ntete ya n. Yindula nde n kele nene kuluta 1 mpi yo kele ve ntalu ya ntete. >>> ntalu ya ntete ya kuluta nene ya n ((13195) 29 >>> ntalu ya ntete ya kuluta nene ya n ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,kon_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n kele kisalu yina ke vukisaka ntalu ya me katuka na 1 tii na n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,kon_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets kele ndonga ya ""("" mpi "")"". return True kana konso bracket ya ke kangula kele ti bracket ya ke kangaka. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""())) True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,kon_Latn,python,"

def derivative(xs: list):
    """"""xs kele ntalu ya ba coefficient ya polynôme mosi. xs[0] + xs[1] * x + xs[2] * x^2 + .... vutula derivate ya polynôme yai na mutindu mosi. >>> derivate (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivate[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,kon_Latn,python,"

def fibfib(n: int):
    """"""Ndonga ya ntalu ya FibFib kele ndonga ya mefwanana na ndonga ya Fibbonacci yina kele na ntendula ya mutindu yai: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). sonika funu ya kusala na mpila ya mbote na n-th elemene ya ndonga ya ntalu ya fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,kon_Latn,python,"
FIX = """"""Sonika kisalu mosi ya ke na ndinga ya bo ke bingaka vowels_count yina ke bakaka ndinga mosi ya ke monisa ngogo mosi bonso kima ya bo ke kotisaka mpi ke vutulaka ntalu ya ba vowel na ndinga yina. Ba vowel na diambu yai kele 'a', 'e', 'i', 'o', 'u'. Awa, 'y' kele mpi vowel, kansi kaka kana yo kele na nsuka ya ngogo yina bo me pesa.""""""

def vowels_count(s):
    """"""Yika mambu ya nkaka ya nge lenda sadila. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,kon_Latn,python,"
def circular_shift(x, shift):
    """"""Na nima ya kusala circulaire, balusa ntalu ya mvimba x, balusa ntalu ya mvimba na diboko ya kibakala na nima balusa ntalu ya mvimba na diboko ya kinkento.""""""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,kon_Latn,python,"
def digitSum(s):
    """"""Kisalu Sonika kisalu yina ke baka ndonga ya bisono bonso kima ya kukota mpi ke vutula ntalu ya bisono ya zulu kaka na ba kod ASCII. Bambandu: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,kon_Latn,python,"
def fruit_distribution(s,n):
    """"""Na kisalu yayi, nge ta baka nsinga yina ke monisa ntalu ya ba pomme ti ba oranges yina bo me kabula na kati ya kitunga ya bambuma ya kele na kati ya kitunga yai kele ti ba pomme, ba oranges, ti bambuma ya mango. Na nima ya kupesa nsinga yina ke monisa ntalu ya ba pomme ti ba pomme yonso ti ntalu ya mvimba yina ke monisa ntalu ya bambuma yonso ya kele na kati ya kitunga, vutula ntalu ya bambuma ya mango na kati ya kitunga. Mu mbandu: fruit_distribution""5(ba pomme ti ba oranges 6"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 ba pomme ti ba oranges 1"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 ba pomme ti ba oranges 3"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 ba pomme ti ba oranges 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,kon_Latn,python,"
def pluck(arr):
    """"""""Na kutadila ndonga ya ke monisa lutangu ya nti yina kele na ba node ya ntalu ya mvimba ya kele ve ya kufuta, kisalu na nge kele ya kukatula mosi na kati ya ba node mpi kuvutula yo. Nodo ya bo me katula fwete vanda yina kele ti ntalu ya fioti kibeni ya kele ata. Kana bo me mona ba node mingi yina kele ti ntalu ya fioti kibeni ya kele ata, kuvutula node yina kele ti ntalu ya fioti kibeni ya kele ata. Nodo ya bo me katula fwete vutulama na lisiti, [smallest_value, index na yo] Kana kele ve ti ntalu ya kele ata to ndonga ya bo me pesa kele mpamba, kuvutula []. Mbandu 1: Input: [4,2,3] Output: [2, 1] Ntendula: 2 kele ti ntalu ya fioti kibeni ya kele ata, mpi 2 kele ti ntalu ya fioti kibeni ya kele ata. Mbandu 2: Input: [1,2,3] Output: [2, 1] Ntendula: 2 kele ti ntalu ya fioti kibeni ya kele ata, mpi 2 kele ti ntalu ya kele ata. Mbandu 3: Input: [] Output: [4: [5, 3, 4, 2] Input: [0, 0] Output: 1 Ntendula: 0 kele ti ntalu ya kele ata fioti kibeni ya kele ata, kansi ntalu ya kele zero. Mbandu ya ntete kele na kati ya kele na kati ya ba node zole, yo kele mpi kele na nsi ya zole.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,kon_Latn,python,"
def search(lst):
    '''Na nima ya kutanga ntalu ya mvimba, beto ta vutula ntalu ya mvimba ya kuluta nene yina kele nene kuluta zero, mpi yina kele ti ntalu ya kuluta mingi to ya me fwanana ti ntalu ya mvimba. Ntalu ya mvimba kele ntalu ya ntalu ya ntalu yina kele na kati ya lisiti. Kana ntalu ya ntalu yina kele ve, beto ta vutula -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,kon_Latn,python,"
def strange_sort_list(lst):
    '''Na nima ya kutanga ntalu ya mvimba, nge ta vutula ntalu ya mvimba na ndonga ya mbi. Kuyilama ya mbi, kele ntangu nge ke yantika na ntalu ya fioti, na nima ntalu ya nene ya ntalu ya mvimba yina me bikala, na nima ntalu ya fioti mpi mutindu yina.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,kon_Latn,python,"
def triangle_area(a, b, c):
    '''Na nima ya kupesa nda ya bandambu tatu ya triangle mosi. vutula arie ya triangle ya me zengana na ba point 2 ya ba décimal kana bandambu tatu me sala triangle mosi ya mbote. kana ve vutula -1 Bandambu tatu ke sala triangle ya mbote kana ntalu ya bandambu zole ya konso ndambu me luta ya ndambu ya tatu. mbandu: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,kon_Latn,python,"
def will_it_fly(q,w):
    '''Sonika funu yina ke vutula kieleka kana kima q ta pumbuka, mpi luvunu kana kima q kele na ndilu (yo kele lisiti ya kele ti mambu mingi) mpi ntalu ya bima na yo kele fioti to kiteso mosi ti kilo ya kuluta nene yina bo lenda pesa. Mu mbandu: will_it_fly([1, 2], 5) â -> Luvunu # 1+2 kele fioti kuluta kilo ya kuluta nene yina bo lenda pesa, kansi yo kele ve na ndilu. will_it_fly([3, 2, 3], 1) â -> Luvunu # yo kele na ndilu, kansi 3+2+3 kele mingi kuluta kilo ya kuluta nene yina bo lenda pesa. will_it_fly[3, 2, 3], 9) â -> Kieleka # 3+23 kele fioti kuluta kilo ya kuluta nene yina bo lenda pesa, mpi yo kele na ndilu. will_it_fly([3], â 5) -> Kieleka # 3 kele fioti kuluta kilo ya kuluta nene yina bo lenda pesa, mpi yo kele na ndilu. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,kon_Latn,python,"
def smallest_change(arr):
    """"""Na nima ya kutanga ndonga ya ntalu ya mvimba, sosa ntalu ya fioti ya bima yina nge fwete soba sambu ndonga kuvanda ya mpila mosi. Ndonga ya mpila mosi kele ndonga yina bo ke tangaka mutindu mosi na ntwala mpi na nima. Na nsoba mosi, nge lenda soba kima mosi na kima ya nkaka. Mu mbandu: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,kon_Latn,python,"
def total_match(lst1, lst2):
    '''Sonika funu yina ke ndima lisiti ya bisono zole mpi ke vutula lisiti yina kele ti ntalu ya bisono na kati ya bisono yonso ya lisiti yina kele na nsi ya lisiti ya nkaka. kana lisiti ya bisono zole kele ti ntalu ya mutindu mosi ya bisono, vutula lisiti ya ntete. Mu mbandu total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', '4]) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,kon_Latn,python,"
def is_multiply_prime(a):
    """"""Sonika funu yina ke vutula kieleka kana ntalu yina bo me pesa kele mbala ya ntalu ya ntete 3 mpi ya luvunu kana ve.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,kon_Latn,python,"
def is_simple_power(x, n):
    """"""Kisalu na nge kele ya kusonika fonga yina ke vutula kieleka kana ntalu x kele ngolo ya n mpi ya luvunu na mambu ya nkaka. x kele ngolo ya n kana n**int=x Mu mbandu: is_simple_power(1, 4) => kieleka is_simple_power(2, 2) => kieleka is_simple_power(8, 2) => kieleka is_simple_power(3, 2) => luvunu is_simple_power(3, 1) luvunu => kele_simple_power(5, 3) => luvunu """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,kon_Latn,python,"
def iscube(a):
    '''Sonika funu yina ke baka nimero ya mvimba a mpi ke vutula kieleka kana nimero yai kele kibende ya nimero ya mvimba.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,kon_Latn,python,"
def hex_key(num):
    """"""Bo me lomba nge na kusonika fonga mosi yina ke yamba ntalu ya ba hexadecimal bonso ndonga ya ntalu mpi ke tanga ntalu ya ba hexadecimal yina kele ntalu ya ntete (ntalu ya ntete, to ntalu ya ntete, kele ntalu ya kieleka ya kuluta 1 yina kele ve mbuma ya ntalu zole ya fioti ya kieleka). Ba nimero ya hexadecimal kele 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Ba nimero ya ntete kele 2, 3, 5, 7, 11, 13, 17,... Yo yina nge fwete zaba ntalu ya ba nimero yai ya me landa: 2, 3, 5, 7, B (= nimero ya ba décimal 11), D (= nimero ya ba décimal 13).""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,kon_Latn,python,"
def decimal_to_binary(decimal):
    """"""Na nima ya kusala mutindu yina, bo ta pesa nge ntalu mosi na mutindu ya dikumi mpi kisalu na nge ta vanda ya kubalula yo na mutindu ya binere. Kisalu fwete vutula ndonga, ti konso kidimbu ke monisa ntalu ya binere. Konso kidimbu na ndonga ta vanda '0' to '1'. Bo ta yika diaka bidimbu 'db' na luyantiku mpi na nsuka ya ndonga.""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,kon_Latn,python,"
def is_happy(s):
    """"""Bo me pesa nge nsinga s. Kisalu na nge kele ya kutala kana nsinga yango kele ya kiese to ve. Nsinga kele ya kiese kana nda na yo kele 3 mpi konso bisono 3 ya ke landa kele ya kuswaswana Mu mbandu: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,kon_Latn,python,"
def numerical_letter_grade(grades):
    """"""Yo kele mposo ya nsuka ya semestre mpi longi fwete pesa bana nzo-nkanda matonsi. Longi me sala algorithme na yandi mosi sambu na kupesa matonsi. Kaka mpasi kele nde yandi me vidisa kod yina yandi vandaka kusadila sambu na kupesa matonsi. Yandi me pesa nge lisiti ya ba GPA ya bana nzo-nkanda ya nkaka mpi nge fwete sonika funu ya lenda pesa nge lisiti ya ba grade ya ba lettre na nsadisa ya tablo yai: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,kon_Latn,python,"
def prime_length(string):
    """"""Sonika kisalu yina ke baka ndonga ya bisono mpi ke vutula Kieleka kana nda ya ndonga kele ntalu ya ntete to Luvunu kana ve Bambandu prime_length('Bonjour') == True prime_length('abcdcba') == True prime_length('kittens') == True prime_length('orange') == Luvunu """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,kon_Latn,python,"
def starts_one_ends(n):
    """"""Pesa ntalu ya mvimba ya mbote n, vutula ntalu ya ntalu ya mvimba ya mbote ya ntalu n yina ke yantika to ke sukaka na 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,kon_Latn,python,"
def solve(N):
    """"""Pesa ntalu ya mvimba ya mbote N, vutula ntalu ya mvimba ya ba digit na binere. mbandu sambu na N = 1000, ntalu ya ba digit ta vanda 1 ntalu ya kubasika fwete vanda ""1"". sambu na N = 150, ntalu ya ba digit ta vanda 6 ntalu ya kubasika fwete vanda ""110"". sambu na N = 147, ntalu ya ba digit ta vanda 12 ntalu ya kubasika fwete vanda ""1100"".""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,kon_Latn,python,"
def add(lst):
    """"""Na lisiti ya ntalu ya mvimba yina kele ve ya mpamba, yika ntalu ya ntalu ya ntalu ya ndambu yina kele na ntalu ya ndambu.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,kon_Latn,python,"
def anti_shuffle(s):
    """"""Sonika kisalu mosi yina ke baka ndonga ya bisono mpi ke vutula yo na ndonga. Ndonga ya bisono ya ndonga, kele ndonga yina bangogo yonso (ya kukabulama na kitini) ke yingamaka na ngogo ya mpa yina bisono yonso me vanda na ndonga ya ke tombuka na kutadila ntalu ya ascii.""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,kon_Latn,python,"
def get_row(lst, x):
    """"""Na nima ya kutanga mambu yonso ya kele na kati ya lisiti, nge ta mona nde yo kele ti bitini zole ya mutindu mosi, bonso lisiti ya kele ti mambu mingi ya ke wakana, yina kele bonso matrices, kansi yo kele ve bonso matrices, konso ndonga lenda vanda ti ntalu ya kuswaswana ya makunzi. Kana nge me pesa lst, mpi ntalu ya mvimba x, sosa ntalu ya mvimba x na lisiti, mpi vutula lisiti ya bitini ya fioti-fioti, [(x1, y1), (x2, y2) ...] na mpila nde konso tuple kele kimvuka ya bitini ya ndonga - (ndonga, makunzi), yantika na 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,kon_Latn,python,"
def sort_array(array):
    """"""Na nima ya kupona ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,kon_Latn,python,"
def encrypt(s):
    """"""Sala kisalu ya encrypt yina ke baka ndonga bonso argument mpi ke vutula ndonga ya encrypt ti ba alfabet ya ke baluka. Ba alfabet fwete baluka na mpila nde ba lettre ke kulumuka na nsi na ba milangi zole. Mu mbandu: encrypt('hi') me vutula 'lm' encrypt('asdfghjkl') me vutula 'ewhjklnop' encrypt('gf') me vutula 'kj' encrypt('et') me vutula 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,kon_Latn,python,"
def next_smallest(lst):
    """"""Bo me pesa nge lisiti ya ba nimero ya mvimba. Sonika kisalu next_smallest() yina ke vutula elemene ya zole ya fioti na lisiti. Vutula None kana kele ve ti elemene ya mutindu yina. next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == None next_smallest([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,kon_Latn,python,"
def is_bored(S):
    """"""Nge ta baka ndonga ya bangogo, mpi kisalu na nge ta vanda ya kutanga ntalu ya bangogo yina nge ke mona nde yo ke lembisa nge. Kulemba kele nsa yina ke yantika ti ngogo ""mono"". Baverse ke vandaka ti '.', '?' to '!'. Mu mbandu: >>> is_bored(""Bonjour monde"") 0 >>> is_bored(""Le ciel est bleu. Le soleil brille. J'aime ce temps"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,kon_Latn,python,"
def any_int(x, y, z):
    '''Sala kisalu yina ke baka ba nimero tatu. Yo ke vutula kieleka kana mosi na kati ya ba nimero kele kiteso mosi ti ntalu ya ba nimero zole ya nkaka, mpi ba nimero yonso kele ba integers. Yo ke vutula luvunu na ba cas ya nkaka. Mu mbandu any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,kon_Latn,python,"
def encode(message):
    """"""Sonika kisalu mosi yina ke baka nsangu, mpi ke sonika yo na mpila nde yo balula ba case ya bisono yonso, mpi yo balula ba voyelle yonso na nsangu ti kisono yina ke monana bisika 2 na ntwala ya voyelle yina na alfabete ya Kingelesi. Baka kaka bisono.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,kon_Latn,python,"

def skjkasdkd(lst):
    """"""Nge me pesa lisiti ya ba ntalu ya mvimba. Nge fwete sosa ntalu ya ntete ya kuluta nene mpi kuvutula ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,kon_Latn,python,"
def check_dict_case(dict):
    """"""Na diksionere, vutula Kieleka kana ba fungula yonso kele ba singa na ba mindele to ba fungula yonso kele ba singa na ba mindele, kana ve vutula Luvunu. Kisalu fwete vutula Luvunu kele diksionere ya me pesama kele mpamba. Bambandu: check_dict_case{""a"":""apple"", ""b"":""banana""}) fwete vutula Kieleka. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) fwete vutula Luvunu. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) fwete vutula Luvunu. check_dict_case{""Nom:""John"", ""Age:""36"", ""City:""Houston""}) fwete vutula Luvunu. check_dict_case{""NC:""STATE"", ""ZIP:""12345""}) fwete vutula Kieleka.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,kon_Latn,python,"
def count_up_to(n):
    """"""Sala kisalu mosi yina ke baka ntalu ya mvimba ya kele ve ya kufuta mpi ke vutula ndonga ya ntalu ya ntete ya mvimba yina kele ntalu ya ntete mpi ya kele na nsi ya n. Mu mbandu: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,kon_Latn,python,"
def multiply(a, b):
    """"""Na nima ya kutanga mambu yonso, beto ta baka mvutu ya me fwana. Mu mbandu: fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa fwanikisa""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,kon_Latn,python,"
def count_upper(s):
    """"""Pesa beto nsinga s, tanga ntalu ya ba vowels ya nene na ba indices ya mutindu mosi. Mu mbandu: count_upper (('aBCdEf') me vutula 1 count_upper (('abcdefg') me vutula 0 count_upper (('dBBE') me vutula 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,kon_Latn,python,"
def closest_integer(value):
    '''Sala kisalu mosi yina ke baka ntalu (nsinga) ya ke monisa ntalu mosi mpi ke vutula ntalu ya mvimba yina kele pene-pene na yo. Kana ntalu kele ntama ti ntalu ya mvimba zole, zangula yo ntama ti zero. Bambandu >>> pene-pene ya ntalu ya mvimba (((""10"") 10 >>> pene-pene ya ntalu ya mvimba (((""15.3"") 15 Simba: Kuzangula ntama ti zero ke tendula nde kana ntalu yina bo me pesa kele ntama ti ntalu ya mvimba zole, yina nge fwete vutula kele yina kele ntama ti zero. Mu mbandu pene-pene ya ntalu ya mvimba (""(14.5"") fwete vutula 15 mpi pene-pene ya ntalu ya mvimba (""(-14.5"") fwete vutula -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,kon_Latn,python,"
def make_a_pile(n):
    """"""Na nima ya kupesa ntalu ya mvimba ya mbote n, nge fwete sala dibulu ya matadi ya ba nivo n. Dibulu ya ntete kele na matadi n. Ntalu ya matadi na ba nivo ya kelanda kele: - ntalu ya nkaka ya me landa kana n kele ntalu ya nkaka. - ntalu ya nkaka ya me landa kana n kele ntalu ya nkaka. Vutula ntalu ya matadi na konso nivo na lisiti, kisika elemene na index i ke monisa ntalu ya matadi na ba nivo (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,kon_Latn,python,"
def words_string(s):
    """"""Na nima ya kusala mutindu yina, bo ta pesa nge bangogo yina bo me kabulaka na mwa-diambu mosi, mpi nge ta vutula yo na ndonga mosi. Mu mbandu: words_string ((""Bonjour, mon nom est John"") == [""Bonjour"", ""mon"", ""nom"", ""est"", ""John""] words_string ((""Un, deux, trois, quatre, cinq, six"") == [""Un"", ""deux"", ""trois"", ""quatre"", ""cinq"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,kon_Latn,python,"
def choose_num(x, y):
    """"""Kisalu yai ke baka ntalu zole ya mbote x ti y mpi ke vutula ntalu ya mvimba ya kuluta nene yina kele na ndonga [x, y] ata mosi ve. Kana ntalu ya mutindu yai kele ve, kisalu yai fwete vutula -1. Mu mbandu: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,kon_Latn,python,"
def rounded_avg(n, m):
    """"""Nge me pesa nge ba integers ya mbote n ti m, kisalu na nge kele ya kutanga ntalu ya kati ya ba integers ya n ti m (ti n ti m). Zinga mvutu na ntalu ya mvimba ya kele pene-pene mpi balula yo na binere. Kana n kele nene kuluta m, vutula -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,kon_Latn,python,"
def unique_digits(x):
    """"""Na nima ya kupesa lisiti ya ba integres ya mbote x. vutula lisiti ya bima yonso yina kele na kati ya lisiti yina kele ve ti ntalu ya ndonga.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,kon_Latn,python,"
def by_length(arr):
    """"""Na nima ya kupesa lisiti ya ntalu ya mvimba, tula ntalu ya mvimba yina kele na kati ya 1 ti 9 yonso, balula lisiti yina nge me baka, mpi na nima, tula ntalu yonso na kisika ya zina na yo yina me fwana na kati ya "" Mosi"", "" Zole"", "" Tatu"", "" Iya"", "" Tanu"", "" Sambanu"", "" Nsambwadi"", "" Nana"", "" Bosi"". Mu mbandu: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> tula na ndonga arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> balula arr -> [8, 5, 4, 3, 2, 2, 1, 1] vutuka ["" Nana"", "" tanu"", "" tatu"", "" zole"", "" zole"", "" mosi "", "" mosi""] Kana lisiti kele mpamba, vutula ntalu ya mpamba: arr = [ ] vutuka [] Kana lisiti kele ti ntalu ya mbi, buya yo: arr = [1, 1 , 1 ] -> arr -> 55 -> arr -> [1, 1 , 1 ] -> arr -> 55 -> [55, 1 ] - vutula [' mosi '] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,kon_Latn,python,"
def f(n):
    """"""Sadila f yina ke baka n bonso paramètre, mpi ke vutula lisiti ya nene n, na mpila nde ntalu ya kima na index i kele factoriel ya i kana i kele ata to ntalu ya ntalu ya 1 tii na i kana ve. i ke yantika na 1. factoriel ya i kele kubula ya ntalu ya 1 tii na i (1 * 2 * ... * i).""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,kon_Latn,python,"
def even_odd_palindrome(n):
    """"""Na nima ya kupesa ntalu ya mvimba ya mbote n, vutula tuple yina kele na ntalu ya ba palindrome ya ntalu ya mvimba ya mutindu mosi mpi ya mutindu mosi ve yina kele na kati ya ndonga ((1, n), ti ya nkaka. Mbandu1: Input: 3 Output: (1, 2) Ntendula: Palindrome ya ntalu ya mvimba kele 1, 2, 3. mosi na kati na bo kele ya mutindu mosi, mpi zole na kati na bo kele ya mutindu mosi ve. Mbandu2: Input: 12 Output: (4, 6) Ntendula: Palindrome ya ntalu ya mvimba kele 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. iya na kati na bo kele ya mutindu mosi, mpi sambanu na kati na bo kele ya mutindu mosi ve.""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,kon_Latn,python,"
def count_nums(arr):
    """"""Sonika kisalu count_nums yina ke baka ndonga ya ba integers mpi ke vutula ntalu ya ba élément yina kele na ntalu ya ba chiffres > 0. Kana ntalu kele ya kufuta, ba chiffre na yo ya ntete yina kele na kidimbu ta vanda ya kufuta: mu mbandu -123 kele na kidimbu ya ba chiffres -1, 2, mpi 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,kon_Latn,python,"
def move_one_ball(arr):
    """"""Beto kele na ndonga 'arr' ya ba integers N arr[1], arr[2], ..., arr[N].ba nimero na ndonga ta vanda na ndonga ya mpamba. kisalu na nge kele ya kuzaba kana yo kele mbote na kubaka ndonga ya me kulumuka ve na kusalaka kisalu yai na ndonga: nge kele na nswa ya kusala kisalu ya kuvutula na diboko ya kibakala mbala mingi. kisalu mosi ya kuvutula na diboko ya kibakala ke tendula kuvutula bima yonso ya ndonga na kisika mosi na nzila ya mbote. kima ya nsuka ya ndonga ta baluka na kisika ya luyantiku na ndonga, disongidila na index ya 0. kana yo kele mbote na kubaka ndonga ya me kulumuka na kusalaka kisalu yai na zulu, kuvutula ya kieleka, kuvutula ya luvunu. kana ndonga ya me pesama kele ya mpamba, kuvutula ya kieleka.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,kon_Latn,python,"
def exchange(lst1, lst2):
    """"""Na kati ya mambu ya beto ke sala awa, beto ta sadila kisalu mosi ya ke baka lisiti ya ntalu zole, mpi ta tala kana mpila kele ya kusala exchange ya ba élément na kati na bo sambu na kusala lst1 lisiti ya ntalu ya ndonga kaka. kele na kima ve na ntalu ya ba élément yina bo lenda pesa na lst1 ti lst2. kana mpila kele ya kupesa na lst1 ti lst2 sambu na kupesa na ba élément yonso ya lst1 yina kele na ndonga, vutula ""YES"". kana ve, vutula ""NO"". Mu mbandu: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Beto ke yindula nde ba élément ya bo me pesa na lisiti kele ve ya mpamba. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,kon_Latn,python,"
def histogram(test):
    """"""Na nima ya kupesa mutambu yina ke monisa bisono ya fioti-fioti ya me kabwana ti bisono ya nkaka, vutula diksionere ya kisono yina ke vutukila mbala mingi mpi yina kele ti ntalu ya bisono yina ke wakana. Kana bisono mingi ke vutukila mutindu mosi, vutula yo yonso.""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,kon_Latn,python,"
def reverse_delete(s,c):
    """"""Kisalu Beto me pesa beto ba ndinga zole s ti c, nge fwete katula bisono yonso na s yina kele kiteso mosi ti bisono yonso na c, na nima tala kana ndinga yina nge me baka kele palindrome. Bo ke bingaka ndinga palindrome kana yo ke tanga mutindu mosi na nima ti na ntwala. Nge fwete vutula tuple yina kele ti ndinga yina nge me baka mpi Kieleka/Mambu ya luvunu sambu na kutala. Mu mbandu sambu na s = ""abcde"", c = ""ae"", mbuma fwete vanda ('bcd',Mambu ya luvunu) Sambu na s = ""abcdef"", c = ""b"" mbuma fwete vanda ('acdef',Mambu ya luvunu) Sambu na s = ""abcdedcba"", c = ""ab"", mbuma fwete vanda ('cdedc',Mambu ya kieleka)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,kon_Latn,python,"
def odd_count(lst):
    """"""Na ntangu nge me pesa lisiti ya ba ndonga, konso ndonga kele kaka ti batitre, vutula lisiti. Konso kitini i ya mambu yina nge me basisa fwete vanda ""ntalu ya bitini ya kukonda ntalu na ndonga i ya mambu yina nge me kotisa"". kisika i yonso fwete vanda na kisika ya ntalu ya bitini ya kukonda ntalu na ndonga ya i ya mambu yina nge me kotisa. >>> odd_count['1234567']) [""ntalu ya bitini ya kukonda ntalu 4n ya str4ng 4 ya 4nput.""] >>> odd_count['3',""111111""]) [""ntalu ya bitini ya kukonda ntalu 1n ya str1ng 1 ya 1nput."", ""ntalu ya bitini ya kukonda ntalu 8n ya str8ng 8 ya 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,kon_Latn,python,"
def minSubArraySum(nums):
    """"""Pesa beto lisiti ya ntalu ya mvimba, sosa ntalu ya fioti ya lisiti ya ntalu yina kele ve ya mpamba.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,kon_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Konso mulongo kele ti dibungu mosi yina bo lenda sadila sambu na kubaka masa, mpi mabungu yonso kele ti ngolo ya kiteso mosi. Kisalu na nge kele ya kusadila mabungu sambu na kukatula masa na mabulu. Pesa ntalu ya bambala yina nge fwete kulosa mabulu.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,kon_Latn,python,"
def sort_array(arr):
    """"""Na kati ya mukanda yai, nge fwete tula ndonga ya ntalu ya ba integres ya kele ve ya kufuta na kutadila ntalu ya mosi na kati ya binere na kulandana ya ke tombuka. Sambu na ntalu ya mosi, tula ndonga na kutadila ntalu ya dikumi. Yo fwete salama mutindu yai: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,kon_Latn,python,"
def select_words(s, n):
    """"""Kana beto me pesa beto nsinga s ti ntalu ya kieleka n, beto me lomba nge na kusadila kisalu mosi yina ta vutula lisiti ya bangogo yonso ya kele na nsinga s yina kele ti bisono ya kulandana n, sambu bangogo yai kumonana na nsinga s. Kana nsinga s kele mpamba, kisalu yango fwete vutula lisiti ya mpamba.""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,kon_Latn,python,"
def get_closest_vowel(word):
    """"""Bo me pesa nge ngogo. Kisalu na nge kele ya kuzwa kisongi-diambu yina kele pene-pene ya kisongi-diambu yina kele na kati ya bisongi-diambu zole ya kele na ndambu ya diboko ya kitata ya ngogo (kisongi-diambu yina ke simbama na bisongi-diambu ya nene ti ya fioti). Bisongi-diambu yina kele na luyantiku ti na nsuka ke tangamaka ve. Vutula ndonga ya mpamba kana nge me mona ve kisongi-diambu mosi yina me lungisa mambu yina kele na zulu. Nge lenda yindula nde kisongi-diambu yina kele kaka ti kisongi-diambu ya Kingelesi.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,kon_Latn,python,"
def match_parens(lst):
    '''Nge me pesa lisiti ya ba ndonga zole, ba ndonga yonso zole kele kaka ti ba parentheze ya kukangula '(' to ba parentheze ya kukangisa ') '. Kisalu na nge kele ya kutala kana yo kele mbote na kuvukisa ba ndonga zole na ndonga mosi, nde ndonga yina nge me baka ta vanda mbote. Bo ke monaka ndonga S bonso ya mbote kana mpi kaka kana ba parentheze yonso ya S kele na ndonga mosi. Mu mbandu: ndonga '((())') kele mbote, kansi ndonga '())' kele ve. Vutula 'Ee' kana mpila kele ya kusala ndonga ya mbote, mpi vutula 'Ve' kana mpila kele ve.'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,kon_Latn,python,"
def maximum(arr, k):
    """"""Na mpila ya ba integers ti ya k, vutula lisiti ya longueur k ti ntalu ya k ya kuluta mingi na arr. Mbandu1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Mbandu2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Mbandu3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,kon_Latn,python,"
def solution(lst):
    """"""Pesa lisiti ya ntalu ya mvimba ya kele ve mpamba, vutula ntalu ya bima yonso ya kele na bisika ya mutindu mosi.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,kon_Latn,python,"
def add_elements(arr, k):
    """"""Na mpila ya ba integers arr ti k, vutula ntalu ya ba élément ti ba digit zole ya ntete ya arr. Mbandu: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,kon_Latn,python,"
def get_odd_collatz(n):
    """"""Na nima, konso ngogo ke katuka na ngogo yina me luta mutindu yai: kana ngogo yina me luta kele ya zenga, ngogo yina ke landa kele ndambu mosi ya ngogo yina me luta. Kana ngogo yina me luta kele ya mbi, ngogo yina ke landa kele mbala 3 ya ngogo yina me luta, yika 1. Ngogo yina ke songa nde ata ntalu ya n kele nki mutindu, ndonga ta kuma ntangu yonso 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,kon_Latn,python,"
def valid_date(date):
    """"""Nge fwete sonika kisalu yina ke ndimisa ndonga ya bilumbu yina bo me pesa mpi yo ta vutula Kieleka kana dati yango kele ya mbote, kana ve Luvunu. Dati yango ta vanda ya mbote kana mambu yai yonso me lungana: 1. Ndonga ya bilumbu kele ve ya mpamba. 2. Ntalu ya bilumbu kele ve na nsi ya 1 to na zulu ya bilumbu 31 sambu na bangonda 1,3,5,7,8,10,12. Ntalu ya bilumbu kele ve na nsi ya 1 to na zulu ya bilumbu 30 sambu na bangonda 4,6,9,11. Ntalu ya bilumbu kele ve na nsi ya 1 to na zulu ya bilumbu 29 sambu na ngonda 2. 3. Bangonda fwete vanda ve na nsi ya 1 to na zulu ya 12. 4. Dati fwete vanda na mutindu yai: mm-dd-yyyy, mu mbandu: valid_date (<int>'03-11-2000') => True (<int>'15-01-2012') => False (<int>'04-040-20') => False (<int>'06-04-2020') => True (<int>'06-04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,kon_Latn,python,"
def split_words(txt):
    '''Na nima ya kupesa yandi ndonga ya bangogo, vutula lisiti ya bangogo ya kukabisa na zulu ya bisika ya mpembe, kana bisika ya mpembe kele ve na kati ya masonama nge fwete kabula na zulu ya bima ya kuvukisila ',' kana bima ya kuvukisila kele ve nge fwete vutula ntalu ya bisono ya fioti-fioti ti ndonga ya mbi na alfabete, ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 Bambandu split_words(""Bonjour monde!"") â -> [""Bonjour"", ""monde!""] split_words(""Bonjour, monde!"") â -> [""Bonjour"", ""monde!"" split_words(""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,kon_Latn,python,"
def is_sorted(lst):
    '''Na nima ya kupesa lisiti ya ba ntalu, vutula ata bo me tula yo na ndonga ya ke tombuka. Kana lisiti kele ti ba ntalu ya mutindu mosi kuluta 1, vutula Luvunu. Baka ve ba ntalu ya mbi kansi kaka ba ntalu ya mvimba. Bambandu is_sorted ((([5]) â -> Kieleka is_sorted (([1, 2, 3, 4, 5]) â -> Kieleka is_sorted (([1, 3, 2, 4, 5, 6]) â -> Luvunu is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Kieleka is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Luvunu is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Luvunu is_sorted (([1, 2, 2, 2, 3, 3, 4]) â -> Luvunu is_sorted (([1, 2, 2, 3, 4 -> Luvunu ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,kon_Latn,python,"
def intersection(interval1, interval2):
    """"""Na mbandu, ntangu beto ke pesa nge ba intervalle zole, konso intervalle kele na ntalu ya mvimba. Mu mbandu, intervalle = (luyantiku, nsuka) = (1, 2). Ba intervalle yina kele ya kukanga, disongidila intervalle (luyantiku, nsuka) kele ti luyantiku mpi nsuka. Sambu na konso intervalle, beto ke yindula nde luyantiku na yo kele fioti to kiteso mosi ti nsuka na yo. Kisalu na nge kele ya kuzaba kana nda ya intervalle yina kele ntalu ya ntete. Mu mbandu, intervalle ya ba intervalle (1, 3), (2, 4) kele (2, 3) yina nda na yo kele 1, yina kele ve ntalu ya ntete. Kana nda ya intervalle kele ntalu ya ntete, vutula ""EE"", kana ve vutula ""NE"". Kana ba intervalle zole ke zengana ve, vutula ""NE"". [input/output] samples: intersection (((1, 2), (2, 3) ==> ""intersection ((-1, 1) ""NO"") ==> intersection ((1), 4) ==> ""intersection ("", - ((5, 5), ==> ""ES"" (-),""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,kon_Latn,python,"
def prod_signs(arr):
    """"""Nge me pesa nge lisiti ya ntalu ya mvimba mpi nge fwete vutula ntalu ya ntalu ya mvimba yina bo me vukisa ti kidimbu ya konso ntalu yina kele na lisiti, yina bo ke monisaka na 1, -1 to 0.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,kon_Latn,python,"
def minPath(grid, k):
    """"""Na kutadila grille yina kele na ba rang ya N ti ba colon ya N (N >= 2) ti k ya ntalu ya mvimba ya mbote, konso cellule ya grille kele na ntalu mosi. Konso ntalu ya mvimba na ndonga [1, N * N] ya mvimba kemonana kaka mbala mosi na ba cellule ya grille. Nge fwete sosa nzila ya fioti ya nda k na grille. Nge lenda yantika na konso cellule, mpi na konso kitambi nge lenda kwenda na ba cellule ya pembeni, na kutuba ya nkaka, nge lenda kwenda na ba cellule yina ke na lweka mosi ti nge na cellule ya ntangu yai. Simba nde nzila ya nda k ke tendula kukwenda na ba cellule ya k (yo kele ve kaka ya kuswaswana). Nge LENGA ve na grille. Nzila A (ya nda k) ke monana fioti kuluta nzila B (ya nda k) kana na nima ya kusala lisiti ya ntalu ya ba cellule yina A ti B ke luta (beto binga yo l_A ti l_A), l_A kele na ndonga ya fioti na lexicographique, na bangogo ya nkaka, na k ya ntalu ya mvimba, na konso cellule yina kele na lweka mosi ti nge. [A, k, k, k, k, k] [4, k, k, k, k, k, k, k, k, k, k kele na kati ya nkaka, k, k kele na kati ya nkaka, k kele na kati ya mpila nde beto me zaba nde nzila ya mpamba kele na grille kele na kati ya ba cellule kele na ndonga ya mpila yina kele: [A, k, k, k, k, k, k, k, k, k, k, k, j[i, k, k, k, k, k, k, k] [4, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, i, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k,""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,kon_Latn,python,"
def tri(n):
    """"""Bantu yonso ke zabaka ndonga ya Fibonacci, bantu ya matematike longukaka yo mbote-mbote na bamvu-nkama zole ya me luta. Kansi, bantu ke zabaka ve ndonga ya Tribonacci. Bo ke bingaka yo nde ndonga ya Tribonacci sambu yo ke vutukaka mbala na mbala: tri(1) = 3 tri(n) = 1 + n / 2, kana n kele difunda. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), kana n kele difunda. Mu mbandu: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Bo me pesa nge ntalu ya mvimba n, yina kele ve ndonga ya mbi, nge fwete vutula lisiti ya ntalu ya ntete n + 1 ya ndonga ya Tribonacci.""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,kon_Latn,python,"
def digits(n):
    """"""Pesa ntalu ya mvimba ya mbote n, vutula ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,kon_Latn,python,"
def is_nested(string):
    '''Sala kisalu yina ke baka ndonga ya ba brackets ya ba square kaka. Kisalu fwete vutula kaka na True kana kele na ba bracket ya mbote ya kele na kati ya ba bracket. is_nested'[[]]') â -> True is_nested'[[]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]] â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,kon_Latn,python,"

def sum_squares(lst):
    """"""Nge me pesa lisiti ya ba nimero. Nge fwete vutula ntalu ya ba nimero ya me tula na kartie na lisiti yina bo me pesa, kuzenga konso kima na lisiti na kati ya int ya zulu ((Couverture) ntete. Bambandu: Sambu na lst = [1,2,3], ntalu fwete vanda 14 Sambu na lst = [1,4,9] ntalu fwete vanda 98 Sambu na lst = [1,3,5,7] ntalu fwete vanda 84 Sambu na lst = [1.4,4.2,0] ntalu fwete vanda 29 Sambu na lst = [-2.4,1,1] ntalu fwete vanda 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,kon_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Sala kisalu yina ke vutula Kieleka kana kidimbu ya nsuka ya ndonga ya bangogo kele kidimbu ya alfabe mpi yo kele ve kitini ya ngogo, mpi Luvunu kana ve. Simba nde: ""ngogo"" kele kimvuka ya bisono ya me kabwana ti kisono. Bambandu: check_if_last_char_is_a_letter (((""apple pie"") â -> False check_if_last_char_is_a_letter (((""apple pi e"") â -> True check_if_last_char_is_a_letter (((""apple pi e "") â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,kon_Latn,python,"
def can_arrange(arr):
    """"""Sala kisalu yina ke vutula index ya nene ya elemene yina kele nene ve to ya kufwana ve na elemene yina kele na ntwala na yo. Kana elemene ya mutindu yina kele ve, vutula -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,kon_Latn,python,"
def largest_smallest_integers(lst):
    '''Sala kisalu mosi yina ke vutula tuple (a, b), kisika 'a' kele ntalu ya nene ya ba integers ya ke pesa ve ba nimero, mpi 'b' kele ntalu ya fioti ya ba integers ya ke pesa ba nimero. Kana kele ve na ba integers ya ke pesa ba nimero ve, vutula yo na mpila yayi: None.'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,kon_Latn,python,"
def compare_one(a, b):
    """"""Sala kisalu yina ke baka ba integers, floats, to ba string yina ke monisa ba numero ya kieleka, mpi ke vutula variable ya nene na mutindu ya variable yina bo me pesa. vutula None kana ba valeur kele kiteso mosi.""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,kon_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Tadila kana ntalu ya bo me pesa lenda sonama bonso ntalu ya ntalu ya ba nimero ya mbote 4 ya kele na ntalu ya mutindu mosi.""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,kon_Latn,python,"
def special_factorial(n):
    """"""Ntalu ya bantu ya Brésil kele: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! kisika n > 0 Mu mbandu: >>> special_factorial(4) 288 Kisalu yai ta baka ntalu ya mvimba bonso kima ya bo ke kotisa mpi yo fwete vutula ntalu ya bantu ya mvimba ya mfunu ya ntalu yai. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,kon_Latn,python,"
def fix_spaces(text):
    """"""_Mbandu-3a nge kisono ya ndonga, soba bisika yonso na kati na yo na ba souligneurs, mpi kana kisono kele na bisika mingi ya kulandana, soba bisika yonso ya kulandana na - fix_spaces ((""Kisalu"") == ""Kisalu"" fix_spaces ((""Kisalu1"") == ""Kisalu_1"" fix_spaces (((""Kisalu2"") == ""_Kisalu_2"" fix_spaces ((""Kisalu 3"") == ""_Kisalu-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,kon_Latn,python,"
def file_name_check(file_name):
    """"""Sala kisalu yina ke baka ndonga ya ke monisa zina ya fiote, mpi ke vutula 'Ee' kana zina ya fiote kele mbote, mpi ke vutula 'Ve' kana yo kele ve. Zina ya fiote ke vuanda mbote kana mambu yai yonso me lungana: - Zina ya fiote fwete vanda ve ti ba digit tatu ('0'-'9') na zina ya fiote. - Zina ya fiote fwete vanda ti dot mosi '.' - Sub-ndonga na ntwala ya dot fwete vanda ve ya mpamba, mpi yo fwete yantika ti kisono ya alfabe ya latin ('a'-'z' mpi 'A''-Z'). - Sub-ndonga na nima ya dot fwete vanda mosi na kati ya bisono yai: ['txt', 'exe', 'lld'] Mbandu: file_name_check""{example.txt. #"") => 'Ee' file_name_check""{example.dll1"") => 'Ve' (zina ya fiote fwete yantika ti kisono ya alfabe ya latin)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,kon_Latn,python,"


def sum_squares(lst):
    """""""" Kisalu yai ta baka lisiti ya ba nimero ya mvimba. Sambu na ba entrées yonso na lisiti, kisalu ta tula na kare entrées ya nimero ya mvimba kana index na yo kele mingi ya 3 mpi ta fwansa entrées ya nimero ya mvimba kana index na yo kele mingi ya 4 mpi ve mingi ya 3. Kisalu ta soba ve ba entrées na lisiti yina ba index na yo kele mingi ya 3 to 4. Kisalu ta vutula ntalu ya entrées yonso. Bambandu: Sambu na lst = [1,2,3], mambu ya kubasika fwete vanda 6 Sambu na lst = [] mambu ya kubasika fwete vanda 0 Sambu na lst = [-1,-5,2,-1,-5] mambu ya kubasika fwete vanda -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,kon_Latn,python,"
def words_in_sentence(sentence):
    """"""Nge me pesa nge nsinga mosi ya ke monisa nsa mosi, nsinga yango kele ti bangogo ya nkaka yina bo me kabulaka ti kisono, mpi nge fwete vutula nsinga yina kele ti bangogo ya nsa ya kisina, yina nda na yo kele ntalu-bumbidi, ndonga ya bangogo ya nsinga ya mpa fwete vanda mutindu mosi ti ya kisina. Mbandu1: Input: phrase = ""This is a test"" Output: ""is"" Mbandu2: Input: sentence = ""lets go for swimming"" Output: ""go for"" Bansinga: * 1 <= len(sentence) <= 100 * sentence contains only letters """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,kon_Latn,python,"
def simplify(x, n):
    """"""Kisalu na nge kele ya kusala kisalu yina ta kumisa pete bangogo x * n. Kisalu ta vutula Kieleka kana x * n kele ntalu ya mvimba mpi ya luvunu kana ve. x ti n, kele bisono ya ke monisa ntalu ya ntalu ya fioti, mpi yo kele ti mutindu yai: <numerator>/<denominator>, kisika ntalu mpi zina kele ntalu ya mvimba ya mbote. Nge lenda yindula nde x, mpi n kele bitini ya fioti ya mbote, mpi yo kele ve ti zero bonso zina. simplify ""1/5"", ""5/1"") = Kieleka simplify ""1/6"", ""2/1"") = Luvunu simplify ""7/10"", ""10/2"") = Luvunu """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,kon_Latn,python,"
def order_by_points(nums):
    """"""Sonika kisalu mosi yina ke balula ntalu ya ba nimero ya mvimba na ndonga ya ke tombuka na kutadila ntalu ya ba nimero na yo.""""""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,kon_Latn,python,"
def specialFilter(nums):
    """"""Sonika funu yina ke baka nimero ya ntalu bonso kima ya ke pesa yo mpi ke pesa ntalu ya bima yina kele na nimero yina kele nene kuluta 10 mpi ntalu ya ntete ti ya nsuka ya nimero kele ya kuswaswana (1, 3, 5, 7, 9). Mu mbandu: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,kon_Latn,python,"
def get_max_triples(n):
    """"""Nge me pesa nge ntalu ya mvimba ya mbote n. Nge fwete sala ntalu ya mvimba ya ndilu ya n. Sambu na konso i (1 ‰¤ i ‰¤ n), ntalu ya a[i] = i * i - i + 1. Vutula ntalu ya ba triple (a[i], a[j], a[k]) ya a kisika i < j < k, mpi a[i] + a[j] + a[k] kele mingi ya 3. Mbandu: Input: n = 5 Output: 1 Ntendula: a = [1, 3, 7, 13, 21] Mpamba ya mbote kele triple (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,kon_Latn,python,"
def bf(planet1, planet2):
    '''Kele na baplanete nana na kati ya système solaire na beto: ya kele pene na ntangu kele Mercure, ya ke landa kele Vénus, na nima ntoto, Mars, Jupiter, Saturne, Uranus, Neptune. Sonika kisalu mosi yina ke baka bazina ya baplanete zole bonso ba singa planete1 ti planete2. Kisalu fwete vutula tuple yina kele na baplanete yonso yina ba orbite na yo kele na kati ya orbite ya planete1 ti orbite ya planete2, ya me kabwana na mpila ya pene-pene na ntangu. Kisalu fwete vutula tuple ya mpamba kana planete1 to planete2 kele ve bazina ya mbote ya baplanete.'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,kon_Latn,python,"
def sorted_list_sum(lst):
    """"""Sonika kisalu yina ke ndima lisiti ya ba ndinga bonso paramètre, ke katula ba ndinga yina kele na nda ya mpila mosi ve, mpi ke vutula lisiti yina me basika na ndonga ya me salama na ndonga. Lisiti kele ntangu yonso lisiti ya ba ndinga kansi ve ndonga ya ba ntalu, mpi yo lenda vanda ti ba ntalu ya me fwanana. Ndonga ya lisiti fwete tombuka na nda ya konso ngogo, mpi nge fwete vutula lisiti ya me salama na ndonga ya nsiku yina. Kana ba ngogo zole kele na nda ya mutindu mosi, tula ndonga na ndonga ya kisono. Kisalu fwete vutula lisiti ya ba ndinga na ndonga ya me salama na ndonga. Nge lenda yindula nde ba ngogo yonso ta vanda na nda ya mutindu mosi. Mu mbandu: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""aaaa"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,kon_Latn,python,"
def x_or_y(n, x, y):
    """"""Programe mosi ya pete yina fwete vutula ntalu ya x kana n kele ntalu ya ntete mpi yina fwete vutula ntalu ya y kana ve.""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,kon_Latn,python,"
def double_the_difference(lst):
    '''Pesa lisiti ya ntalu, vutula ntalu ya ba square ya ntalu ya lisiti yina kele ya mpamba. Buya ntalu yina kele ya mpamba to ya kele ntalu ya mvimba ve. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Kana lisiti ya nge me pesa kele mpamba, vutula 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,kon_Latn,python,"
def compare(game,guess):
    """"""Mu ke yindula nde beto yonso ke yibukaka mutindu beto ke kudiwaka ntangu beto ke zabaka nsuka-nsuka mambu yina beto vandaka kuvingila tuka ntama. Mambu yina nge ke waka mpi ke yindulaka na ntangu yina kele mfunu mingi. Kisalu na nge kele ya kuzaba kana muntu mosi yindulaka mbote-mbote mambu yina me salama na ba match mingi. Bo me pesa nge ba score mpi ba hypothèse ya nda ya kiteso mosi, kisika konso index ke monisa kuwakana. Vutula ba score ya nda ya kiteso mosi sambu na kumonisa nde konso hypothèse me konda. Kana bo yindulaka mbote, ntalu kele 0, mpi kana ve, ntalu kele luswaswanu ya nene na kati ya hypothèse ti score.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,kon_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Nge ta baka zina ya kimvuka (nsinga) ti lisiti ya ba extensions. Ba extensions ta sadila sambu na kutula ba classes ya nkaka na kimvuka. Ngolo ya extension kele mutindu yai: Bika CAP kuvanda ntalu ya ba lettre ya nene na zina ya extension, mpi bika SM kuvanda ntalu ya ba lettre ya fioti na zina ya extension, ngolo me pesama na fraction CAP - SM. Nge fwete sosa ba extension ya kuluta ngolo mpi kuvutula string na format yai: ClassName.StrongestExtensionName. Kana ba extensions kele zole to mingi ti ngolo ya mutindu mosi, nge fwete pona yina ke kwisa na ntwala na liste. Mu mbandu, kana bo me pesa nge ""Slices"" bonso classe ti lisiti ya ba extensions: ['SEviviNGliSCes', 'Cheese', 'StuFfed'] nge fwete vutula 'Slices.SEviNGliSCes' sambu 'SviviNGliSCes' kele extension ya kuluta ngolo (exemple: 'AA_Beats'), 'AA_Class' kele ngolo ya kuluta ngolo.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,kon_Latn,python,"
def cycpattern_check(a , b):
    """"""Nge me pesa nge bangogo zole. Nge fwete vutula Kieleka kana ngogo ya zole to konso ngogo ya ke baluka kele nsinga ya nsi ya ngogo ya ntete cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,kon_Latn,python,"
def even_odd_count(num):
    """"""Pesa ntalu ya mvimba. vutula ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu ya ntalu""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,kon_Latn,python,"
def int_to_mini_roman(number):
    """"""Pesa ntalu ya mvimba ya mbote, baka ntalu ya ntalu ya Roma ya kele kiteso mosi ti ntalu ya ntalu ya Roma, mpi vutula yo na kisono ya fioti.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,kon_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Na nima ya kupesa nda ya baluse tatu ya triangle. vutula kieleka kana baluse tatu kele triangle ya kusungama, luvunu kana ve. triangle ya kusungama kele triangle yina kele na angle ya kusungama to 90 degrés. mbandu: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == Luvunu '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,kon_Latn,python,"
def find_max(words):
    """"""Sonika funu yina ke ndima lisiti ya ba ndinga. Lisiti kele na bangogo ya kuswaswana. Vutula ngogo yina kele ti ntalu ya kuluta mingi ya bisono ya kuswaswana. Kana ba ndinga mingi kele ti ntalu ya kuluta mingi ya bisono ya kuswaswana, vutula yina ke kwisa na kisika ya ntete na ndonga ya baverse.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,kon_Latn,python,"
def eat(number, need, remaining):
    """"""Nge kele mpembe ya nzala, nge me dia dezia bambuma ya nkaka ya bangombe, kansi ntangu yai nge fwete dia diaka bambuma ya nkaka sambu na kumanisa madia ya kilumbu. nge fwete vutula ntalu ya bangombe yina me bikala. kana bambuma ya nkaka me bikala ve, nge ta dia bambuma yonso ya nkaka, kansi nge ta vanda kaka na nzala. Mu mbandu: * kudia ((5, 6, 10) -> [11, 4] * kudia ((4, 8, 9) -> [12, 1] * kudia ((1, 10, 10) -> [11, 0] * kudia ((2, 11, 5) -> [7, 0] Bavariable: @number: integer the number of carrots that you have eaten. @need : integer the number of carrots that you need to eat. @remaining: integer the number of remaining carrots that exist in stock Constrain: * 0= <= 0 * 1000 <= 0 * 0 need <= 1000 <= 1000 Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,kon_Latn,python,"
def do_algebra(operator, operand):
    """"""Na ba lisiti zole ya ntete, beto ke mona ba operateur ti ba operand. Lisiti ya ntete kele ti ba opération ya base ya algebre, mpi lisiti ya zole kele lisiti ya ba nombre entier. Beto ke sadila ba liste zole ya beto me pesa sambu na kusala ba expression ya algébrique mpi kuvutula ba évaluation ya expression yai. Ba opération ya base ya algebre: Adition (+) Soustraction ( - ) Multiplication ( *) Floor division ( // ) Exponentiation ( ** Exemple): operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Note: La longueur de la liste des opérateurs est égale à la longueur de la liste des opérand moins un. L'opérand est une liste d'entiers non négatifs. L'opérateur a au moins un opérateur, et la liste des opérand a au moins deux opérands. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,kon_Latn,python,"
def solve(s):
    """"""Kana nge me pesa nge nsinga s. kana s[i] kele kisono, balula yo na zulu to na nsi, kana ve bika yo mutindu yo kele. Kana nsinga kele ve ti bisono, balula nsinga. Kisalu fwete vutula nsinga yina me basika.""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,kon_Latn,python,"
def string_to_md5(text):
    """"""Na kupesa nsinga 'text', vutula nsinga ya md5 ya kele na kati ya baverse. Kana 'text' kele nsinga ya mpamba, vutula None. >>> string_to_md5('Bonso ke mbote na ntoto') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,kon_Latn,python,"
def generate_integers(a, b):
    """"""Pesa beto ba nimero ya mvimba ya mbote a ti b, vutula ntalu ya ntalu ya kati ya a ti b, na kulandana ya ke tombuka. Mu mbandu: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
