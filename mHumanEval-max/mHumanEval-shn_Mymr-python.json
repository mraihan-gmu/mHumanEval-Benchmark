[
    {
        "task_id": "HumanEval/0",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"တူၺ်းတူၺ်းဝႃႈ ၼႂ်းသဵၼ်ႈမၢႆတူဝ်ၼပ်ႉ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တူဝ်ၼပ်ႉဢၼ်မီးၸမ်ၵၼ်တင်းသွင်ဢၼ်ၼၼ်ႉ မီးႁိုဝ်ၼႆလႄႈ။ တူဝ်ယၢင်ႇ: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) လႅၼ်ႊၽိတ်း >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) မၢၼ်ႇမႅၼ်ႈ \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"တူဝ်ယၢင်ႇ: >>> separate_paren_groups' ((()) (() ) ) ) ) ) ] ['() ', '(()) ', '(() ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ၶၢႆႉလၢႆႈလႆႈၼၼ်ႉ ၸၢင်ႈၸႅၵ်ႇပဵၼ် တူဝ်ၼပ်ႉတဵမ် (တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ဢၼ်လဵၵ်ႉလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉ) လႄႈ တူဝ်ၼပ်ႉၸုတ်ႉ (တူဝ်ၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်း) ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉၸုတ်ႉၼၼ်ႉမႃး တူဝ်ယၢင်ႇ: >>> truncate_number(3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"ပေႃးဝႃႈႁဝ်းႁၼ်ဝႃႈ ပၢတ်ႉၵျႅတ်ႉႁဝ်းၼႆႉ ဢမ်ႇမီးလွင်ႈၽဵင်ႇပဵင်းၼႆ ႁဝ်းတေလႆႈဢဝ်ပၢတ်ႉၵျႅတ်ႉႁဝ်းၼၼ်ႉ ပေႃႉသႂ်ႇပၼ်တီႈၼႂ်းၽူင်းႁဝ်း\"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ထတ်းသၢင်ႈ Mean Absolute Deviation ႁိမ်းႁွမ်း လမ်ႉၵတ်ႉၶွင် dataset ဢၼ်ၼႆႉ။ Mean Absolute Deviation ၼႆႉပဵၼ် လမ်ႉၵတ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ဢၼ်မီးၼႂ်းၵႄႈ တူဝ်ထပ်ႈႁူဝ်ၵူႈဢၼ်လႄႈ တီႈၵၢင် (ဢၼ်မီးၼႂ်းလွင်ႈၼႆႉ) MAD = average  x - x_mean  တူဝ်ယၢင်ႇ: >>> mean_absolute_deviation  [1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"သႂ်ႇပၼ်တူဝ်ၼပ်ႉ \"delimeter\" ၼႂ်းၵႄႈတူဝ်ၼပ်ႉ သွင်ဢၼ်ဢၼ်သိုပ်ႇၵၼ်မႃး ၼႂ်းသဵၼ်ႈမၢႆၶေႃႈၶဝ်ႈ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"တူဝ်ယၢင်ႇမၼ်း (() (()) ၼႆႉ မီးဝႆႉ ၸၼ်ႉဢၼ်သုင်သုတ်း သွင်ၸၼ်ႉသေ ((())) ၼႆႉ မီးဝႆႉ သၢမ်ၸၼ်ႉ။ >>> parse_nested_parens('((()) ((())) (((()) (((()) [2, 3, 1, 3]\"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"ၸၢၵ်ႈၸၢၵ်ႈဢၼ်တေဢဝ် သဵၼ်ႈမၢႆ သဵၼ်ႈမၢႆ ဢၼ်တေၶဝ်ႈၸူးၼၼ်ႉ ၸွပ်ႇတူၺ်း တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ ဢၼ်ပႃး သဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉၵူၺ်း >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်လေႃး လႄႈ တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉတဵမ်တင်းမူတ်း ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉသေ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉၼၼ်ႉ ၶိုၼ်းဢဝ်မႃး။ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉၼၼ်ႉ ထုၵ်ႇလီပဵၼ် 0 လႄႈ တူဝ်ၵုၼ်းဢၼ်ဢမ်ႇမီး တူဝ်ၵုၼ်းၼၼ်ႉ ထုၵ်ႇလီပဵၼ် 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ဢဝ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ႁဵတ်းဢွၵ်ႇမႃး သဵၼ်ႈမၢႆ ဢၼ်လႆႈႁၼ် တေႃႇထိုင် ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉ ၼႂ်းလွင်ႈၶပ်ႉၶိုင်ၼၼ်ႉယဝ်ႉ။ >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"သွၵ်ႈႁႃ palindrome ဢၼ်တိုၵ်ႉသုတ်း ဢၼ်တႄႇလူၺ်ႈ သၢႆထႅဝ်ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။ ပၢႆးဝူၼ်ႉ algorithm ၼႆႉ ငၢႆႈငၢႆႈၼႃႇ- သွၵ်ႈႁႃ postfix ဢၼ်ယၢဝ်းသေပိူၼ်ႈ ၶွင်သၢႆထႅဝ်ဢၼ်ပၼ်ဝႆႉ ဢၼ်ပဵၼ် palindrome- သႂ်ႇပၼ်တီႈသုတ်း သၢႆထႅဝ် ဢၼ်ၶိုၼ်းတၢင် သၢႆထႅဝ် ဢၼ်မႃးၼႃႈ palindromic suffix။ >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"လွင်ႈထတ်းသၢင်ႈ သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် palindrome \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input ၼႆႉပဵၼ် သွင်တူဝ်ၼပ်ႉ a လႄႈ b ဢၼ်ပႃးဝႆႉ တူဝ်ၼပ်ႉ 1 လႄႈ 0 ၵူၺ်း။ ႁဵတ်းသၢင်ႈ binary XOR တီႈတူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈဝႆႉၸိူဝ်းၼႆႉသေ ၶိုၼ်းဢဝ် ၶေႃႈတွပ်ႇမႃးၶိုၼ်း မိူၼ်ၼင်ႇ string ၼၼ်ႉၼင်ႇၵဝ်ႇ။ >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"ၼႂ်းသဵၼ်ႈမၢႆ သဵၼ်ႈမၢႆဢၼ်ယၢဝ်းသေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ်ဢၼ်ယၢဝ်းသေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ်ဢၼ်ဢွၼ်တၢင်းသုတ်းၼၼ်ႉ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ၼႂ်းလွင်ႈဢၼ် သဵၼ်ႈမၢႆဢၼ်ယၢဝ်းမိူၼ်ၵၼ်ၼၼ်ႉ မီးၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ်ဢၼ်ဢမ်ႇမီးသင်ၶိုၼ်း ၼႂ်းလွင်ႈဢၼ် သဵၼ်ႈမၢႆဢၼ်ၶဝ်ႈၼၼ်ႉ ပဵၼ်ဢၼ်ဢိတ်ႇႁၢႆဝႆႉၼၼ်ႉ >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇၽႄဢၼ်ၵႆႉပဵၼ်ဢၼ်ယႂ်ႇသုတ်းၶွင် တူဝ်ၼပ်ႉတဵမ် a လႄႈ b >>> ဢၼ်ၸႅၵ်ႇၽႄဢၼ်ၵႆႉပဵၼ်ဢၼ်ယႂ်ႇသုတ်း (greatest_common_divisor) ((3, 5) 1) >>> ဢၼ်ၸႅၵ်ႇၽႄဢၼ်ၵႆႉပဵၼ်ဢၼ်ယႂ်ႇသုတ်း (greatest_common_divisor) ((25, 15) 5) ၼၼ်ႉၶိုၼ်း\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ prefix တင်းမူတ်း ဢၼ်လုၵ်ႉတီႈ ဢၼ်ယၢဝ်းသေပိူၼ်ႈ တေႃႇထိုင် ဢၼ်ပွတ်းသေပိူၼ်ႈ ၼႂ်း string ဢၼ်ၶဝ်ႈမႃးၼၼ်ႉ >>> all_prefixes (('abc') ['a', 'ab', 'abc']\"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"ၶိုၼ်းဢဝ် string ဢၼ်ပႃး တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈ တႄႇတီႈ 0 တေႃႇထိုင် n ႁူမ်ႈပႃးၼၼ်ႉ လၢႆႈပၼ်။ >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ် string ၼႆ ႁဝ်းတေႁႃလႆႈ တူဝ်လိၵ်ႈဢၼ်ဢမ်ႇမိူၼ်ၵၼ် (ဢမ်ႇဝႃႈတူဝ်ယႂ်ႇလႄႈတူဝ်ယၢဝ်း) မၼ်းတေမီးလၢႆတူဝ်ယူႇၶႃႈႁႃႉ?\"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format. ၼႃႈၵၢၼ်သူၼႆႉ ပဵၼ်တႃႇၸႅၵ်ႇၽႄ သဵၼ်ႈမၢႆ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း သဵင်ဢၼ်တႅၵ်ႇလႅင်းလီၼၼ်ႉ မီးဝႆႉ သီႇဢၼ်၊ သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သီႇဢၼ်၊ သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သီႇဢၼ်၊ သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သီႇဢၼ်၊ သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သီႇဢၼ်၊ သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သီႇဢၼ်၊ သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သီႇဢၼ်၊ သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သီႇဢၼ်၊ သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သဵၼ်ႈမၢႆဢၼ်သုတ်း ပဵၼ် သဵၼ်ႈမၢႆဢၼ်သုတ်း >>> parse_music '(' o o o .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"ၶူၼ်ႉႁႃတူၺ်းဝႃႈ ၸႅၼ်ႇထႅဝ်ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တေၸၢင်ႈႁၼ်လႆႈလၢႆၵမ်း ၼႂ်းၸႅၼ်ႇထႅဝ်ငဝ်ႈမၼ်းၼၼ်ႉ။ မၢႆပၼ်လွင်ႈဢၼ်ၶပ်ႉၶိုင်ၵၼ်ဝႆႉၼၼ်ႉ။ >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ဢၼ်ၶဝ်ႈၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇမၼ်းပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇဝႆႉတီႈၵႂၢင်ႈမၼ်း တႄႇတီႈ 'သုၼ်' တေႃႇထိုင် 'သိပ်း' ဢၼ်လိူၵ်ႈလႆႈဢၼ်ထုၵ်ႇမႅၼ်ႈတႄႉပဵၼ် 'သုၼ်'၊ 'ၼိုင်ႈ'၊ 'သွင်'၊ 'သၢမ်'၊ 'သီႇ'၊ 'ႁႃႈ'၊ 'ႁူၵ်း'၊ 'ၸဵတ်း'၊ 'ဢဵတ်း' လႄႈ 'သိပ်း' ၸိူဝ်းၼၼ်ႉ။ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇဝႆႉတီႈလဵၵ်ႉသုတ်း တေႃႇထိုင် ဢၼ်ယႂ်ႇသုတ်းသေ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇဝႆႉတီႈၵႂၢင်ႈသုတ်းၼၼ်ႉ လၢႆႈပၼ်တီႈ string ၼၼ်ႉ >>> sort_numbers ((('သၢမ် ၼိုင်ႈ ႁႃႈ') 'ၼိုင်ႈ သၢမ် ႁႃႈ' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ (တၢင်းယၢဝ်းမၼ်းဢမ်ႇယွမ်း 2 တူဝ်) လိူၵ်ႈဢဝ်သေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ဢၼ်ၸမ်ၵၼ်သေပိူၼ်ႈၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်းၸွမ်းၼင်ႇပိူင်မၼ်း (တူဝ်ၼပ်ႉလဵၵ်ႉသုတ်း၊ တူဝ်ၼပ်ႉယႂ်ႇသုတ်း) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉ (ဢၼ်ဢမ်ႇယွမ်း 2 တူဝ်) ၼႆၸိုင် ဢဝ်တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ် 0 သေ ဢဝ်တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ် 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"လွင်ႈၸႅၵ်ႇၽႄ ဢၼ်ပၼ်ဝႆႉ သဵၼ်ႈမၢႆၶွင် တူဝ်ၼပ်ႉဢၼ်မီးလွင်ႈထၢင်ႇၸႅင်ႈဢၼ်လႂ်ဢၼ်ဝႃႈၼၼ်ႉ တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉတဵမ်ၵူၺ်း >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"လွင်ႈၶိုၼ်းဢဝ်တၢင်းယၢဝ်း string >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉ n ၼၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ဢၼ်ၸႅၵ်ႇ n ႁ်ႂႈပဵၼ်ဢၼ်ၽဵင်ႇပဵင်းၼၼ်ႉ၊ ဢၼ်လဵၵ်ႉလိူဝ် n >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"လွင်ႈပၼ်ၶိုၼ်း သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ၶွင် တူဝ်ၼပ်ႉတဵမ်ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တင်ႈတႄႇ တူဝ်ၼပ်ႉလဵၵ်ႉသုတ်း တေႃႇထိုင် တူဝ်ၼပ်ႉယႂ်ႇသုတ်း။ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်းၼႆႉ ထုၵ်ႇလီပၼ်ဝႆႉ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း တေႃႇထိုင် တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်း။ တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈၼႆႉ ထုၵ်ႇလီမိူၼ်ၵၼ်တင်း တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၵုၼ်းတင်းမူတ်း >>> factorization (လွင်ႈတႅၵ်ႈတူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ဢၼ်ပဵၼ် တူဝ်ဢၼ်ပဵၼ် တူဝ်ဢၼ်ပဵၼ် တူဝ်ဢၼ်ပဵၼ် တူဝ်ဢၼ်ပဵၼ်\"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"ဢဝ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢွၵ်ႇမႃးတီႈ သဵၼ်ႈမၢႆၼၼ်ႉသေ ထွၼ်ပႅတ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃး ၼမ်လိူဝ်ၼိုင်ႈပွၵ်ႈ။ ထွၼ်ပႅတ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃး ၸွမ်းၼင်ႇပိူင်ထၢၼ်ႈ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။ >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ဢဝ်တူဝ်လိၵ်ႈတူဝ်လဵၵ်ႉသေ လႅၵ်ႈပဵၼ် တူဝ်ယႂ်ႇသေ လႅၵ်ႈပဵၼ်တူဝ်လဵၵ်ႉ။ >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc'  ၵွင်ႉၵၢႆႇပၼ် သဵၼ်ႈမၢႆ string ဢၼ်လႆႈပဵၼ်မႃး သဵၼ်ႈမၢႆ string ဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉ\"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ၸၢၵ်ႈၸၢၵ်ႈဢၼ်တေဢဝ် သဵၼ်ႈမၢႆ သဵၼ်ႈမၢႆ ဢၼ်တေဢဝ် တူဝ်ၸီႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ၸၢၵ်ႈၸၢၵ်ႈၸၢၵ်ႈဢၼ်တေဢဝ် တူဝ်ၸီႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ၸၢၵ်ႈၸၢၵ်ႈၸၢၵ်ႈ။ >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်မီးလွင်ႈထၢင်ႇၸႅင်ႈ ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉၵူၺ်း။ >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် prime လႄႈ false တၢင်ႇၸိူဝ်းၼၼ်ႉ။ >>> is_prime (သၢမ်) false >>> is_prime (သိပ်း) true >>> is_prime (သိပ်းႁႃႈ) true >>> is_prime (သိပ်းႁႃႈ) true >>> is_prime (သိပ်းသၢမ်) true >>> is_prime (သိပ်းႁႃႈ) true true >>> is_prime (သိပ်းႁႃႈ) true true >>> is_prime (သိပ်းႁႃႈ) true true >>> is_prime (သိပ်းသၢမ်) false >>> is_prime (သိပ်းႁႃႈ) false false \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"find_zero ၼႆႉ မၼ်းဢဝ် တူဝ်ၼပ်ႉ x ဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇၸႂ်ႈသုၼ်ၼၼ်ႉသေ မၢႆပၼ်ၶိုၼ်း၊ မၼ်းတေပၼ်ၶေႃႈတွပ်ႇမၼ်းယူႇယဝ်ႉ။ >>> round (((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round (((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"ထတ်းသၢင်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်း ဢၼ်မီး တူဝ်ၵုၼ်း xs တီႈ တီႈ x ၼၼ်ႉသေ ၶိုၼ်းဢဝ် xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼႆႉ ဢဝ်သဵၼ်ႈမၢႆ l လႄႈ ၶိုၼ်းပၼ်သဵၼ်ႈမၢႆ l' ၼင်ႇဢၼ် l' မိူၼ်ၵၼ်တၢင်း l တီႈၼႂ်း index ဢၼ်ဢမ်ႇၸႅၵ်ႇလႆႈ သၢမ်ဢၼ်ၼၼ်ႉသေ ၵႃႈၶၼ်မၼ်းတီႈ index ဢၼ်ၸႅၵ်ႇလႆႈ သၢမ်ဢၼ်ၼၼ်ႉ မိူၼ်ၵၼ်တၢင်းၵႃႈၶၼ်ၶွင် index ဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တၢင်း l ၼၼ်ႉသေတႃႉၵေႃႈ ၸႅၵ်ႇဝႆႉ။ >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ၶိုၼ်းဢဝ် လွင်ႈၸႅၵ်ႇမႅင်ႇ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်လႆႈၸႅၵ်ႇဝႆႉၼႂ်းသဵၼ်ႈမၢႆ >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ လၢႆႈပၼ်။ >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ 7 ဢၼ်ဢွၵ်ႇမႃးတီႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်လဵၵ်ႉလိူဝ် n ဢၼ်ၸႅၵ်ႇလႆႈ 11 ဢမ်ႇၼၼ် 13 ၼၼ်ႉ လွၵ်ႈလႃးၶိုၼ်း\"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼႆႉ ဢဝ်သဵၼ်ႈမၢႆ l လႄႈ ၶိုၼ်းပၼ်သဵၼ်ႈမၢႆ l' ၼင်ႇဢၼ် l' မိူၼ်ၵၼ်တၢင်း l တီႈၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉသေ ၵႃႈၶၼ်မၼ်းတီႈတူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉ မိူၼ်ၵၼ်တၢင်းၵႃႈၶၼ်တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၶွင် l ၵူၺ်းၵႃႊ ၸႅၵ်ႇဝႆႉပၼ်ဝႆႉ။ >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"ဢဝ် encode_cyclic function ဢၼ်လႆႈထုၵ်ႇၶူတ်ႉဝႆႉၼၼ်ႉသေ ဢဝ်ပဵၼ် ၶႅပ်းထႅဝ်ၶဝ်ႈ လႄႈ ၶိုၼ်းဢဝ် ၶႅပ်းထႅဝ်ဢၼ်လႆႈထုၵ်ႇၶူတ်ႉဢွၵ်ႇၼၼ်ႉမႃး\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ သၢမ်တူဝ် ဢၼ်ပႃးဝႆႉ တီႈၼႂ်း သဵၼ်ႈမၢႆၼၼ်ႉ ၶိုၼ်းဢဝ်မႃး။\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ n-th ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉ Fibonacci လႄႈ မၼ်းပဵၼ် prime ၵေႃႈလႆႈ။ >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero ဢဝ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ပဵၼ်ၶေႃႈၶဝ်ႈမၼ်းသေ မၼ်းၶိုၼ်းပၼ် True သင်ဝႃႈမီးတူဝ်ၼပ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ်သၢမ်ဢၼ် ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပဵင်းၵၼ်တင်းသုၼ် လႄႈ False သင်ဢမ်ႇၼၼ် >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero ([1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ပေႃးႁဝ်းဝူၼ်ႉတူၺ်း သဵၼ်ႈတၢင်း ဢၼ်ၽဵင်ႇပဵင်းလီလီၼၼ်ႉ မၼ်းမီးတၢင်းယၢဝ်း ဢမ်ႇမီးတီႈသုတ်း (infinitely long line) ၊ ၵႃး n လမ်းၼႆႉ ၶီႇၵႂႃႇၽၢႆႇသၢႆႉၸူး ၽၢႆႇၶႂႃ၊ ၵႃး n လမ်း တၢင်ႇဢၼ်ၵေႃႈ ၶီႇၵႂႃႇၽၢႆႇသၢႆႉၸူး ၽၢႆႇၶႂႃ။ ၵႃး သွင်လမ်းၼႆႉ တႄႇၵႂႃႇတီႈၵႆၵၼ်ဝႆႉ။ ၵႃး တင်းမူတ်းၼႆႉ ၶီႇတၢင်းဝႆးမိူၼ်ၵၼ်။ ၵႃး သွင်လမ်းၼႆႉ ပေႃးၵႃး ဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇသၢႆႉၸူး ၽၢႆႇၶႂႃ မႃးၽႃႇၺႃး ၵႃး ဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇသၢႆႉၸူး ၽၢႆႇသၢႆႉၼႆ ၵႃး သွင်လမ်းၼႆႉ တေၶီႇၵၼ်လႆႈယူႇယဝ်ႉ။ ၵူၺ်းၵႃႈ ၵႃး သွင်လမ်းၼႆႉ မီးႁႅင်းၼႃႇ၊ ယွၼ်ႉၼၼ် ၶဝ်တိုၵ်ႉသိုပ်ႇၶၢႆႉၵႂႃႇၸွမ်း သဵၼ်ႈတၢင်း မိူၼ်တင်း ဢမ်ႇလႆႈၶီႇၵၼ်ၼႆယဝ်ႉ။ ဢၼ်ၼႆႉ မၼ်းတေၼႄပၼ်ဝႃႈ ၵႃးဢၼ်ၶီႇၵၼ် တင်းသွင်လမ်းၼႆႉ မီးၵႃႈႁိုဝ်ၼႆယဝ်ႉ။\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"ၶိုၼ်းဢဝ် ထႅမ်းပလဵၵ်ႉ ဢၼ်ပႃး တူဝ်ၼပ်ႉ ဢၼ်လႆႈထုၵ်ႇ ၶိုပ်ႈၼႃႈမႃး လူၺ်ႈ 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero ဢဝ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ပဵၼ်ၶေႃႈၶဝ်ႈမၼ်းသေ မၼ်းၶိုၼ်းပၼ် True သင်ဝႃႈမီးတူဝ်ၼပ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ်သွင်ဢၼ် ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပဵင်းၵၼ်တင်း zero လႄႈ False သင်ဢမ်ႇၼၼ် >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"လႅၵ်ႈလၢႆႈ တူဝ်ၼပ်ႉငဝ်ႈငႃႇ တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈ x ၼၼ်ႉပဵၼ် တူဝ်ငဝ်ႈငႃႇ။ လႅၵ်ႈလၢႆႈ တူဝ်တႅၼ်းသဵၼ်ႈသၢႆမၢႆ ဢၼ်ၶိုၼ်းမႃး ဝၢႆးသေ လႅၵ်ႈလၢႆႈယဝ်ႉ တူဝ်ငဝ်ႈငႃႇမၼ်းတေမီးဢေႇလိူဝ်သေ 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ပေႃးဢဝ်တၢင်းယၢဝ်းၽၢႆႇလႄႈ ၼႃႈလိၼ်ဢၼ်လႆႈၶိုၼ်းသုင်သုတ်း တွၼ်ႈတႃႇသၢမ်ၸဵင်ႇၼၼ်ႉဝႃႈၼႆ။ >>> triangle_area(5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"တူဝ်ၼပ်ႉ Fib4 ၼႆႉ မၼ်းမိူၼ်ၵၼ်တင်း တူဝ်ၼပ်ႉ Fibbonacci ဢၼ်မၵ်းမၼ်ႈဝႆႉၼင်ႇၼႆ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). ၶႅၼ်းတေႃႈ တႅမ်ႈပၼ် တူဝ်ၼပ်ႉဢၼ်တေၼပ်ႉသွၼ်ႇလႆႈ တူဝ်ၼပ်ႉ n-th ၶွင် တူဝ်ၼပ်ႉ fib4 ၼၼ်ႉၶႃႈလႄႈ။ ယႃႇပေၸႂ်ႉတိုဝ်း လွင်ႈၶိုၼ်းတႄႇ။ >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"ၶိုၼ်းဢဝ် သဵၼ်ႈတၢင်းဢၼ်မီးဝႆႉ ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉသေ လၢႆႈပၼ်။\"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ၵူတ်ႇထတ်းတူၺ်းဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"ၶိုၼ်းဢဝ် 2^n modulo p (ႁႂ်ႈလႆႈႁူႉလွင်ႈ တူဝ်ၼပ်ႉ) >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1\"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"ဢဝ်ၸွမ်းၼင်ႇ သဵၼ်ႈမၢႆ ဢၼ်သႂ်ႇဝႆႉၸွမ်း encode_shift function ၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း သဵၼ်ႈမၢႆ ဢၼ်တႅၵ်ႈဝႆႉၼၼ်ႉ။\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈဢၼ်မီးဝႆႉတီႈ တူဝ်လိၵ်ႈၸီႉၼၼ်ႉ ၶၢႆႉၵႂႃႇ 5 ၵမ်းသေ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈၸီႉၼၼ်ႉ ၶိုၼ်းမႃး။\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် သရ ဢၼ်ဢမ်ႇမီး သရၼၼ်ႉသေ ၶိုၼ်းဢဝ် သရမႃးၼၼ်ႉ။ >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"ၶိုၼ်းဢဝ် True မႃးၶိုၼ်း သင်ဝႃႈ တူဝ်ၼပ်ႉတင်းမူတ်း ၼႂ်းသဵၼ်ႈမၢႆ l ၼႆႉ မီးတႂ်ႈ threshold t ၼၼ်ႉၼႆ။ >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"ထႅမ်သႂ်ႇတူဝ်ၼပ်ႉ x လႄႈ y သွင်တူဝ် ထႅမ်သႂ်ႇထႅင်ႈ 2၊ 3၊ 5 ထႅမ်သႂ်ႇထႅင်ႈ 5၊ 7၊ 12\"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"ၵူတ်ႇထတ်းတူၺ်းဝႃႈ ၶေႃႈၵႂၢမ်းသွင်ၶေႃႈၼႆႉ မီးတူဝ်လိၵ်ႈမိူၼ်ၵၼ်ႁႃႉ >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') မၢၼ်ႇမႅၼ်ႈ >>> same_chars('abcd', 'dddddddddabc') မၢၼ်ႇမႅၼ်ႈ >>> same_chars('dddddddabc', 'abcd') မၢၼ်ႇမႅၼ်ႈ >>> same_chars('eabcd', 'dddddddddabc') ၽိတ်း >>> same_chars('abcd', 'dddddddabddce') ၽိတ်း >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') ၽိတ်း \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ Fibonacci ဢၼ်ၼိူင်ႈမႃး။ >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ၼႆႉပဵၼ် string ဢၼ် \"<\" လႄႈ \">\" ၼၼ်ႉ။ return True သင်ဝႃႈ bracket ဢၼ်ပိုတ်ႇၼၼ်ႉ မီး bracket ဢၼ်ဢိုတ်းၼၼ်ႉၼႆ။ >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"ၶိုၼ်းဢဝ် လွင်ႈမၵ်းမၼ်ႈ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်လႆႈၸႅၵ်ႇဝႆႉ တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆသွင်ဢၼ်။ >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈ ၶွင်တူဝ်ၼပ်ႉ n ၼၼ်ႉၶိုၼ်း။ ဝူၼ်ႉဝႃႈ n > 1 လႄႈ မၼ်းဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇ။ >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ပဵၼ်တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉ 1 တေႃႇ n မႃးႁူမ်ႈၵၼ်။ >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ၼႆႉပဵၼ် string ၶွင် \"(\" လႄႈ \")\". return True သင်ဝႃႈ bracket ဢၼ်ပိုတ်ႇၼၼ်ႉ မီး bracket ဢၼ်ဢိုတ်းၼၼ်ႉၼႆ. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() \") True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ဢၼ်ၵဵဝ်ႇလူၺ်ႈ polynomial ၼၼ်ႉယဝ်ႉ။ xs[0] + xs[1] * x + xs[2] * x^2 + .... ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ polynomial ဢၼ်ၼႆႉ ၶိုၼ်းမႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈ တူဝ်ဢၼ်မႃးတီႈ တူဝ်ဢၼ်မႃးတီႈ တူဝ်ဢၼ်မႃးတီႈ တူဝ်ဢၼ်မႃးတီႈ တူဝ်ဢၼ်မႃးတီႈ တူဝ်ဢၼ်မႃးတီႈ တူဝ်ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈ ဢၼ်မႃးတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈတီႈ\"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"တူဝ်ၼပ်ႉ FibFib ၼႆႉ မၼ်းမိူၼ်ၵၼ်တင်း တူဝ်ၼပ်ႉ Fibbonacci ဢၼ်မၵ်းမၼ်ႈဝႆႉၼင်ႇၼႆ: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3 ၶႅၼ်းတေႃႈ တႅမ်ႈပၼ် တူဝ်ၼပ်ႉဢၼ်တေၼပ်ႉသွၼ်ႇလႆႈ တူဝ်ၼပ်ႉ n-th ၶွင် တူဝ်ၼပ်ႉ fibfib ၼၼ်ႉၶႃႈလႄႈ။ >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"တႅမ်ႈပၼ်ၾွၼ်ႉ vowels_count ဢၼ်ဢဝ် သရ ဢၼ်တႅၼ်းတၢင်ၶေႃႈၵႂၢမ်းပဵၼ်ၶေႃႈၶဝ်ႈ လႄႈ မိူဝ်းၶိုၼ်း တူဝ်ၼပ်ႉ သရ ၼႂ်းသရၼၼ်ႉ။ တူဝ်လိၵ်ႈတူဝ်လိၵ်ႈ ၼႂ်းလွင်ႈၼႆႉပဵၼ် 'a', 'e', 'i', 'o', 'u'။ တီႈၼႆႈ 'y' ၵေႃႈပဵၼ်တူဝ်လိၵ်ႈတူဝ်လိၵ်ႈ ၵူၺ်းၵႃႈ မၼ်းမီးတီႈသုတ်းၶေႃႈၵႂၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉၵူၺ်း။ တူဝ်ယၢင်ႇ: >>> vowels_count (((\"abcde\") 2 >>> vowels_count (((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"ထႅမ်သႂ်ႇလွင်ႈၸၢမ်းတူၺ်းထႅင်ႈ။ \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"ပေႃးဝႃႈ shift > တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉၼႆၸိုင် ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၽၢႆႇလင်မၼ်းသေ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၽၢႆႇလင်ၼၼ်ႉ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း။\"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"ၵၢၼ်တႅမ်ႈၽွၼ်ႉ ဢၼ်ဢဝ် သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉပဵၼ် ၶေႃႈၶဝ်ႈ လႄႈ မိူဝ်းၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်တဵမ်တူဝ်လိၵ်ႈ ASCII ၵူၺ်း တူဝ်ယၢင်ႇ: digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ၼႂ်းၵၢၼ်ၼႆႉ ၸဝ်ႈၵဝ်ႇတေလႆႈပၼ် string ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉ apples လႄႈ oranges ဢၼ်ၸႅၵ်ႇဝႆႉၼႂ်းၵၢတ်ႇၼမ်ႉၵတ်ႉ ဢၼ်ၵၢတ်ႇၼမ်ႉၵတ်ႉၼႆႉ မီး apples, oranges လႄႈ mango မၢၵ်ႇမႆႉ။ ပေႃးပၼ် string ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉ apples လႄႈ apples တင်းမူတ်းလႄႈ တူဝ်ၼပ်ႉဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉတင်းမူတ်း မၢၵ်ႇမႆႉၼႂ်းၵၢတ်ႇၼမ်ႉၵတ်ႉ ၶိုၼ်းပၼ်တူဝ်ၼပ်ႉ မၢၵ်ႇမႆႉၼႂ်းၵၢတ်ႇၼမ်ႉၵတ်ႉ။ တူဝ်ယၢင်ႇ: fruit_distribution\"5(apples လႄႈ 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 apples လႄႈ 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples လႄႈ 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples လႄႈ 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"ပေႃးဝႃႈႁဝ်းမီးဝႆႉ array ဢၼ်တၢင်တူဝ် branch ၶွင် tree ဢၼ်မီး non-negative integer nodes ၼၼ်ႉ ၼႃႈၵၢၼ်ႁဝ်းၼႆႉ တေလႆႈဢဝ် node ဢၼ်ၼိုင်ႈသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း၊ node ဢၼ်လႆႈဢဝ်မႃးၼၼ်ႉ တေလႆႈပဵၼ် node ဢၼ်မီး တူဝ်ၼပ်ႉ even ဢေႇသုတ်းသုတ်း၊ သင်ဝႃႈလႆႈႁၼ် တူဝ်ၼပ်ႉ even ဢေႇသုတ်းဢၼ်မိူၼ်ၵၼ်တင်း node ဢၼ်လႆႈဢဝ်မႃးၼၼ်ႉ တေလႆႈၶိုၼ်း node ဢၼ်မီး index ဢေႇသုတ်း၊ node ဢၼ်လႆႈဢဝ်မႃးၼၼ်ႉ တေလႆႈၶိုၼ်းၼႂ်းသဵၼ်ႈမၢႆ၊ [smallest_value၊ its index]၊ သင်ဝႃႈဢမ်ႇမီး တူဝ်ၼပ်ႉ even ဢမ်ႇၼၼ် array ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ တေလႆႈၶိုၼ်း []. တူဝ်ယၢင်ႇ 1: Input: [4,2,3] Output: [2, 1] ၶေႃႈသပ်းလႅင်း: 2 ၼႆႉပဵၼ် တူဝ်ၼပ်ႉ even ဢေႇသုတ်းလႄႈ 2 ၼႆႉပဵၼ် တူဝ်ၼပ်ႉ index ဢေႇသုတ်း။ တူဝ်ယၢင်ႇ 2: Input: [1,2,3] Output: [2, 1] ၶေႃႈသပ်းလႅင်း: 2 ၼႆႉပဵၼ် တူဝ်ၼပ်ႉ even ဢေႇသုတ်းလႄႈ 2 ၼႆႉပဵၼ် တူဝ်ၼပ်ႉ index ဢေႇသုတ်း။ တူဝ်ယၢင်ႇ 3: Input: [] Output: [4:] Input: [5, 3, 4, 2] [0, 0 ၶေႃႈသပ်းလႅင်း: 0 ၶေႃႈသပ်းလႅင်း: 1 ဢၼ်လႆႈလႆႈဢဝ်မႃးၼၼ်ႉ တေလႆႈၶိုၼ်း node ဢၼ် index ဢေႇသုတ်း၊ ၵူၺ်းၵႃႈ တူဝ်ၼပ်ႉ index ဢေႇသုတ်းမၼ်းမီး သွင်ဢၼ်ၼၼ်ႉ တေလႆႈလိူၵ်ႈ တူဝ်ယၢင်ႇ 1 ဢၼ်လဵၵ်ႉသုတ်းမၼ်းမီး 0=1 တူဝ်ယၢင်ႇ: တူဝ်ယၢင်ႇ 1 ဢၼ်ႁဝ်းတေလႆႈလိူၵ်ႈ တူဝ်ၼပ်ႉ ဢၼ်လဵၵ်ႉသုတ်းမၼ်းမီး 0=0 ဢၼ်လဵၵ်ႉသုတ်းမၼ်းမီး 0\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇပဵၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉတဵမ် ဢၼ်ယႂ်ႇလိူဝ်သေ သုၼ် ဢၼ်မီးလွင်ႈၽႄႈတိူၼ်းၼမ်လိူဝ်သေ ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တၢင်း တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း။ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၽႄႈတိူၼ်းမၼ်းၼမ်လိူဝ် ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တၢင်း တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ သင်ဢမ်ႇမီး တူဝ်ၼပ်ႉတဵမ်ၼႆ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း -1. တူဝ်ယၢင်ႇ: သွၵ်ႈႁႃ (([4, 1, 2, 2, 3, 1]) == 2 သွၵ်ႈႁႃ ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 သွၵ်ႈႁႃ ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ပေႃးဝႃႈ သၢမ်ၽၢႆႇပဵၼ်သၢမ်ၸဵင်ႇဢၼ်ထုၵ်ႇမႅၼ်ႈၼႆ တေလႆႈၶိုၼ်း ၼႃႈလိၼ်သၢမ်ၸဵင်ႇ ဢၼ်လႆႈဢဝ် တူဝ်ၼပ်ႉသႅၼ်မၼ်း သွင်တီႈသေ မၵ်းမၼ်ႈဝႆႉ၊ ပေႃးဢမ်ႇၼၼ် တေလႆႈၶိုၼ်း -1 သၢမ်ၽၢႆႇၼႆႉ ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်ထုၵ်ႇမႅၼ်ႈ မိူဝ်ႈဢၼ် သွင်ၽၢႆႇၽဵင်ႇပဵင်းၵၼ်ၼၼ်ႉ ၼမ်လိူဝ်သေ သၢမ်ၽၢႆႇၼၼ်ႉ တူဝ်ယၢင်ႇ: triangle_area (,,) == 6.00 triangle_area (,,) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''တႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်မၵ်းမၼ်ႈဝႃႈ True ပေႃးတူဝ်ၼပ်ႉ q တေပၢႆႈၵႂႃႇလႄႈ False ပေႃးတူဝ်ၼပ်ႉ q တေပၢႆႈၵႂႃႇလႄႈ တူဝ်ၼပ်ႉတင်းမူတ်းမၼ်းပႆႇတဵမ်ထူၼ်ႈလႄႈ တူဝ်ယၢင်ႇမၼ်းတေပဵၼ် will_it_fly ((1, 2), 5) â -> False # 1+2 ၼႆႉဢေႇလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇပဵင်းပေႃးလႆႈလႄႈ မၼ်းဢမ်ႇပဵင်းပေႃး။ will_it_fly ((3, 2, 3), 1) â -> False # မၼ်းပဵင်းပေႃး၊ ၵူၺ်းၵႃႈ 3+2+3 ၼႆႉၼမ်လိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇပဵင်းပေႃးလႄႈ မၼ်းပဵင်းပေႃး။ will_it_fly ((3, 2, 3), 9) â -> True # 3+23 ၼႆႉဢေႇလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇပဵင်းပေႃးလႄႈ မၼ်းပဵင်းပေႃး။ will_it_fly ((([3], 5) â -> True # 3 ၼႆႉဢေႇလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇပဵင်းပေႃးလႄႈ မၼ်းပဵင်းပေႃး '''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ၼိူင်ႈဢၼ်ၼႆၸိုင် ၶူၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်လူဝ်ႇလႅၵ်ႈလၢႆႈ ႁႂ်ႈမၼ်းပဵၼ် palindromic။ တူဝ်ၼပ်ႉ palindromic ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်လႆႈလူတူၺ်းမိူၼ်ၵၼ်တၢင်းလင်လႄႈတၢင်းၼႃႈ။ ပေႃးလႅၵ်ႈလၢႆႈဢၼ်ၼိူင်ႈယဝ်ႉၸိုင် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼႆႉ လႅၵ်ႈလၢႆႈလႆႈတီႈ တူဝ်ၼပ်ႉတၢင်ႇဢၼ်။ တူဝ်ယၢင်ႇမၼ်း: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''တႅမ်ႈပၼ် function ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆ သွင်ဢၼ်သေ ၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ဢၼ်မီး တူဝ်ၼပ်ႉ တင်းမူတ်း တီႈ သဵၼ်ႈမၢႆ တင်းမူတ်းၼၼ်ႉ ၼမ်လိူဝ်သေ သဵၼ်ႈမၢႆ တၢင်ႇဢၼ်ၼၼ်ႉ။ သင်ဝႃႈ သဵၼ်ႈမၢႆ သွင်ဢၼ်မီး တူဝ်ၼပ်ႉ မိူၼ်ၵၼ်ၼႆ ၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ဢၼ်ၼိူင်ႈ။ တူဝ်ယၢင်ႇ total_match ((([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', â '4]) -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"တႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်မၢၼ်ႇမႅၼ်ႈယူႇ သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၵုၼ်း တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ 3 တူဝ် လႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆ မၼ်းတေပဵၼ်ၽိတ်း။ ပေႃးႁူႉဝႃႈ (a) ၼႆႉဢေႇလိူဝ် 100 တူဝ်ယၢင်ႇ: is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉပဵၼ်တႃႇတႅမ်ႈ တူဝ်ဢိင်ဢၼ်ၶိုၼ်းပၼ် true သင်တူဝ်ၼပ်ႉ x ပဵၼ်တူဝ်ထပ်ႈႁူဝ်ဢၼ်ငၢႆႈၶွင် n လႄႈ false ၼႂ်းလွင်ႈတၢင်းတၢင်ႇဢၼ်။ x ပဵၼ်တူဝ်ထပ်ႈႁူဝ်ဢၼ်ငၢႆႈၶွင် n သင် n**int=x တူဝ်ယၢင်ႇမၼ်း: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ် a သေ ၶိုၼ်းမိူဝ်းၶိုၼ်း True သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼႆႉ ပဵၼ် တူဝ်ၼပ်ႉတဵမ် တူဝ်ၼပ်ႉသၢမ်တူဝ်ၼႆယဝ်ႉ။ ၶေႃႈတွင်း: ၸဝ်ႈၵဝ်ႇ ၸၢင်ႈထၢင်ႇဝႃႈ ၶေႃႈသႂ်ႇၼႆႉ မၢၼ်ႇမႅၼ်ႈယူႇ တႃႇသေႇ။ တူဝ်ယၢင်ႇ: iscube ({1}) ==> True ({2}) ==> False ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> False ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> True ({3}- 1) ==> False)'''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"တူဝ်ၼပ်ႉသႅၼ်ၼႆႉပဵၼ် 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. တူဝ်ၼပ်ႉသႅၼ်ၼႆႉပဵၼ် 2, 3, 5, 7, 11, 13, 17,... ယွၼ်ႉၼၼ်လႄႈ တေလႆႈမၵ်းမၼ်ႈ တူဝ်ၼပ်ႉဢၼ်မီးတီႈတႂ်ႈၼႆႉ: 2, 3, 5, 7, B (=သႅၼ် 11), D (=သႅၼ် 13) ၶေႃႈတွင်း: တူဝ်ၶဝ်ႈၼႆႉတေပဵၼ်ဢၼ်ထုၵ်ႇမႅၼ်ႈ ဢမ်ႇၼၼ် ပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ၊ တူဝ်လိၵ်ႈ A,B,C,D,E,F ၼႆႉတေပဵၼ်တူဝ်လိၵ်ႈယႂ်ႇယူႇတႃႇသေႇ။ တူဝ်ယၢင်ႇ: တွၼ်ႈတႃႇ num = \"AB\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် num = 1. တွၼ်ႈတႃႇ \"1077E\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် 2. တွၼ်ႈတႃႇ num = \"AB33\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"AED\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"ABC\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"A\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"A\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"A\" ဢၼ်ဢွၵ်ႇၼႆႉတေပဵၼ် \"A\" ဢၼ်ဢွၵ်ႇပဵၼ် \"A\" ဢၼ်ဢွၵ်ႇၼၼ်ႉတေပဵၼ် \"A\"\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသႅၼ်ၼႆႉ တေလႆႈဢဝ် တူဝ်ၼပ်ႉသႅၼ်သေ လႅၵ်ႈလၢႆႈပဵၼ် တူဝ်ၼပ်ႉသႅၼ်ယဝ်ႉ။ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသႅၼ်ၼႆႉ တေလႆႈဢဝ် တူဝ်ၼပ်ႉသႅၼ်သေ လႅၵ်ႈလၢႆႈပဵၼ် တူဝ်ၼပ်ႉသႅၼ်ယဝ်ႉ။ တူဝ်ၼပ်ႉသႅၼ်ၼႆႉ တေလႆႈပဵၼ် \"0\" ဢမ်ႇၼၼ် \"1\" ယဝ်ႉ။ တူဝ်ၼပ်ႉသႅၼ်ၼႆႉ တေလႆႈမီး တူဝ်ၼပ်ႉသႅၼ်ဢၼ်ပဵၼ် \"db\" တီႈတႄႇမၼ်းလႄႈ တီႈသုတ်းမၼ်း။ တူဝ်ၼပ်ႉသႅၼ်ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသႅၼ်ၼႆႉ တေလႆႈၸႂ်ႉတိုဝ်း တူဝ်ၼပ်ႉသႅၼ်ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသႅၼ်ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသႅၼ်ဢၼ်ၼၼ်ႉယဝ်ႉ။ တူဝ်ယၢင်ႇ: decimal_to_binary(15) # လႅၵ်ႈလၢႆႈပဵၼ် \"db1111db\" decimal_to_binary32) # လႅၵ်ႈလၢႆႈပဵၼ် \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"ပေႃးဝႃႈႁဝ်းလႆႈပၼ် string s ၼႆၸိုင် ႁဝ်းတေလႆႈထတ်းတူၺ်းဝႃႈ string ၼႆႉ ပဵၼ်သႅၼ်းဢၼ်သိူဝ်းၸႂ်ႁိုဝ်ဢမ်ႇၸႂ်ႈ၊ string ၼႆႉ ပဵၼ်သႅၼ်းဢၼ်သိူဝ်းၸႂ် သင်ဝႃႈ တၢင်းယၢဝ်းမၼ်းမီး 3 တူဝ် လႄႈ တူဝ်လိၵ်ႈ 3 တူဝ်ၼႆႉ ပႅၵ်ႇပိူင်ႈၵၼ် တူဝ်ယၢင်ႇမၼ်း: is_happy (a) => false (x) => false (a) => true (a) => false (b) => false (a) => true (a) => false (b) => true (adb) => true (x) => false (x) => false (a) => false (a) => false (a) => true (a) => true (a) => false (a) => false (a) => false (a) => false (a) => false (a) => false (a) => false (a) => false (a) => false (a) => false (a) => false (a) => false (a) => false (b) => false (a) => false (a) => false (a)\"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"မိူဝ်ႈၼႆႉ ပဵၼ်ဝူင်ႈလိုၼ်းသုတ်း ၼႂ်းသႅပ်ႇထႅမ်ႇပႃႇလႄႈ ၶူးသွၼ်ၶဝ် လႆႈပၼ် မၢႆလပ်ႉ လုၵ်ႈႁဵၼ်းၶဝ်ယဝ်ႉ။ ၶူးသွၼ်ၶဝ် လႆႈႁဵတ်းဢွၵ်ႇ လွၵ်းလၢႆးမၼ်း တႃႇပၼ် မၢႆလပ်ႉၶဝ်ယဝ်ႉ။ ပၼ်ႁႃဢၼ်လဵဝ် ဢၼ်လႆႈလူႉလႅဝ်ၵႂႃႇၼၼ်ႉ ပဵၼ် မၢႆလပ်ႉ ဢၼ်မၼ်းၸႂ်ႉတိုဝ်း တႃႇပၼ် မၢႆလပ်ႉၶဝ်ယဝ်ႉ။ မၼ်းပၼ် သဵၼ်ႈမၢႆ GPA လုၵ်ႈႁဵၼ်းၶဝ် လႄႈ တေလႆႈတႅမ်ႈပၼ် ၽွၼ်ႉ ဢၼ်တေဢွၵ်ႇပၼ် မၢႆလပ်ႉ မၢႆလပ်ႉ ဢၼ်ၸႂ်ႉတိုဝ်း လွၵ်းလၢႆး GPA ဢၼ်ၼႆႉယဝ်ႉ။ GPA  Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ True သင်ဝႃႈ တၢင်းယၢဝ်း တူဝ်ၼပ်ႉၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉ ပရမ်ႇ ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉ False သင်ဢမ်ႇၸႂ်ႈ prime_length ({'Hello') == True prime_length ({'abcdcba') == True prime_length ({'kittens') == True prime_length ({'orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းၼပ်ႉဢၢၼ်ႇ တူဝ်ၼပ်ႉတဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တႄႇ ဢမ်ႇၼၼ် သုတ်းသုတ်းလူၺ်ႈ 1.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"တူဝ်ယၢင်ႇ တႃႇ N = 1000 ၼၼ်ႉ တူဝ်ၼပ်ႉတင်းမူတ်းၼႆႉ တေလႆႈပဵၼ် 1 ယဝ်ႉ တေလႆႈပဵၼ် \"1\" ပေႃး N = 150 ၼၼ်ႉ တူဝ်ၼပ်ႉတင်းမူတ်းၼႆႉ တေလႆႈပဵၼ် 6 ယဝ်ႉ တေလႆႈပဵၼ် \"110\" ပေႃး N = 147 ၼၼ်ႉ တူဝ်ၼပ်ႉတင်းမူတ်းၼႆႉ တေလႆႈပဵၼ် 12 ယဝ်ႉ တေလႆႈပဵၼ် \"1100\" တူဝ်ၼပ်ႉဢၼ်လႅၵ်ႈလၢႆႈလႆႈ: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Output: a string of binary number \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇသုမ်းၼၼ်ႉၼႆ ထႅမ်သႂ်ႇ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၸိူဝ်းဢၼ်မီးတီႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ။ တူဝ်ယၢင်ႇမၼ်းတႄႉ ထႅမ်သႂ်ႇ (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် သၢႆထႅဝ် လႄႈ ၶိုၼ်းပၼ် တူဝ်ဢၼ်ၶပ်ႉဝႆႉၼၼ်ႉ။ တူဝ်ဢၼ်ၶပ်ႉဝႆႉၼၼ်ႉ ပဵၼ် သၢႆထႅဝ် ဢၼ်ဢဝ် ၶေႃႈၵႂၢမ်း (ဢၼ်ၽႄဝႆႉလူၺ်ႈ ၶႅပ်းၵၢင်ၸႂ်) ၼၼ်ႉ လႅၵ်ႈလၢႆႈပၼ် ၶေႃႈၵႂၢမ်းမႂ်ႇ ဢၼ်ဢဝ် တူဝ်လိၵ်ႈတင်းသဵင်ႈ ၶပ်ႉဝႆႉ ၸွမ်းၼင်ႇ ၶၵ်ႉတွၼ်ႈ ဢၼ်ၶိုၼ်ႈမႃး ဢိင်ၼိူဝ် ၵႃႈၶၼ် ascii ၼၼ်ႉ။ ၶေႃႈတွင်း: တေလႆႈထိင်းသိမ်းဝႆႉ လွင်ႈၶပ်ႉဝႆႉ ၶေႃႈၵႂၢမ်း လႄႈ ၶႅပ်းၵၢင်ၸႂ် ဢၼ်ဢမ်ႇမီး တီႈပွင်ႇ ၼႂ်းၶေႃႈၵႂၢမ်းၼၼ်ႉ။ တူဝ်ယၢင်ႇ: anti_shuffle ((('Hi') ၶိုၼ်းပၼ် 'Hi' anti_shuffle ((('hello') ၶိုၼ်းပၼ် 'ehllo' anti_shuffle (('Hello World!!!') ၶိုၼ်းပၼ် 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"ပေႃးႁဝ်းပၼ်ၶေႃႈမုၼ်း 2 ထႅဝ်၊ မိူၼ်ၼင်ႇ သဵၼ်ႈမၢႆဢၼ်မီးႁိမ်းႁွမ်းၵၼ်၊ ဢၼ်မိူၼ်ၵၼ်တင်း matrix၊ ၵူၺ်းၵႃႈ ဢမ်ႇမိူၼ်ၼင်ႇ matrix၊ သဵၼ်ႈမၢႆၵူႈဢၼ်ၼႆႉ ၸၢင်ႈမီးဝႆႉ ၸၼ်ႉထၢၼ်ႈဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ်။ ပေႃးပၼ် lst လႄႈ တူဝ်ၼပ်ႉတဵမ် x၊ သွၵ်ႈႁႃ တူဝ်ၼပ်ႉတဵမ် x ၼႂ်းသဵၼ်ႈမၢႆ၊ လႄႈ ၶိုၼ်းပၼ်သဵၼ်ႈမၢႆ ၶွင် tuples၊ [(x1, y1), (x2, y2) ...] ၼင်ႇႁိုဝ် tuple ၵူႈဢၼ်တေပဵၼ် coordinate - (row, columns) ၊ တႄႇတီႈ 0. ၸႅၵ်ႇပၼ် coordinates ဢွၼ်တၢင်း လူၺ်ႈ row ၼႂ်းလွင်ႈၶိုၼ်ႈမႃး။ ယဝ်ႉၵေႃႈ ၸႅၵ်ႇပၼ် coordinates ၶွင် row လူၺ်ႈ columns ၼႂ်းလွင်ႈလူင်းမႃး။ တူဝ်ယၢင်ႇ: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_((1), 1) [] == [[ၸႄႈဝႅပ်ႇ 1, 2, 3, 2, 3]], []] == 2, 2 , ]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ဢမ်ႇမီး တူဝ်ထွၼ်ၼႆ၊ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ဝၢႆးသေ ၸႅၵ်ႇၽႄယဝ်ႉၼႆ၊ ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် တူဝ်ထွၼ်ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် (တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် တူဝ်ထွၼ်ဢၼ်ထွၼ်ဢွၵ်ႇ) ၼႆၸိုင် ၸႅၵ်ႇၽႄပၼ်မၼ်း ႁႂ်ႈပဵၼ် တူဝ်ထွၼ်ဢၼ်ၶိုၼ်ႈမႃး ဢမ်ႇၼၼ် ၸႅၵ်ႇၽႄပၼ် ႁႂ်ႈပဵၼ် တူဝ်ထွၼ်ဢၼ်လူင်းမႃး ပေႃးဝႃႈ တူဝ်ထွၼ်ဢၼ်ထွၼ်ဢွၵ်ႇၼၼ်ႉ ပဵၼ် တူဝ်ထွၼ်ဢၼ်ၽဵင်ႇပဵင်းၼႆယဝ်ႉ။ ၶေႃႈတွင်း: * ယႃႇပေဢဝ် တူဝ်ထွၼ်ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ လႅၵ်ႈလၢႆႈ။ တူဝ်ယၢင်ႇ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"ႁဵတ်းသၢင်ႈၵၢၼ် encrypt ဢၼ်ဢဝ် string ပဵၼ် arguments သေ ၶိုၼ်းဢဝ် string ဢၼ်ဢဝ် တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈ လႅၵ်ႈလၢႆႈဝႆႉၼၼ်ႉ။ တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈၼႆႉ ထုၵ်ႇလီ လႅၵ်ႈလၢႆႈဝႆႉ ၼင်ႇႁိုဝ် တူဝ်လိၵ်ႈတေလႅၵ်ႈလၢႆႈလူင်းၵႂႃႇ သွင်ဢၼ်သေ ၶိုၼ်းဢဝ်ၵႂႃႇတီႈ သွင်ဢၼ်။ တူဝ်ယၢင်ႇမၼ်း: encrypt ((('hi') ၶိုၼ်းဢဝ် 'lm' encrypt ((('asdfghjkl') ၶိုၼ်းဢဝ် 'ewhjklnop' encrypt ((('gf') ၶိုၼ်းဢဝ် 'kj' encrypt ((('et') ၶိုၼ်းဢဝ် 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"သင်ဝႃႈႁဝ်းလႆႈပၼ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ၼႆ တႅမ်ႈပၼ် တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းဢၼ်ၼိူင်ႈ (next_smallest) ဢၼ်တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းထူၼ်ႈသွင် ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉသေ သင်ဝႃႈဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းၼႆ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉၼၼ်ႉ လွၵ်ႈပၼ်\"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"ပေႃးႁဝ်းမႃးတူၺ်းတီႈၼႂ်းပွင်ႈၵႂၢမ်းၼႆႉ ႁဝ်းတေလႆႈႁၼ်ဝႃႈ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းၼႆႉ မၼ်းပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၵႂၢမ်းႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းမႃးတႃႇသေႇ၊ ၶေႃႈၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းဢၼ်ႁဝ်းၸႂ်ႉတိုဝ်းႁဝ်းၸႂ်ႉတိုဝ်းႁဝ်းၸႂ်ႉတိုဝ်းႁဝ်းၸႂ်ႉတိုဝ်းႁဝ်းၸႂ်ႉတိုဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းၸႂ်ႉတိုဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်းႁဝ်း\"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''ႁဵတ်းပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉ 3 တူဝ်ၼၼ်ႉ။ ၶိုၼ်းမိူဝ်း true သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ၼိူင်ႈလႄႈ တူဝ်ၼပ်ႉတင်းမူတ်းၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ်ၼႆယဝ်ႉ။ ၶိုၼ်းမိူဝ်း false ၼႂ်းလွင်ႈတၢင်ႇဢၼ်ဢၼ်ဢၼ်ၼိူင်ႈ။ တူဝ်ယၢင်ႇ any_int{5, 2, 7) â -> True any_int{3, 2, 2) â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ်ၶေႃႈၶၢဝ်ႇသေ သႂ်ႇမၢႆလပ်ႉမၼ်း ႁႂ်ႈမၼ်းလႅၵ်ႈလၢႆႈ တူဝ်လိၵ်ႈၵူႈတူဝ်၊ သႂ်ႇတူဝ်လိၵ်ႈ တူဝ်ၸဵင်ၵူႈတူဝ် ၼႂ်းၶေႃႈၶၢဝ်ႇၼၼ်ႉ ႁႂ်ႈပဵၼ်တူဝ်လိၵ်ႈ ဢၼ်ဢွၵ်ႇဝႆႉ တီႈၼႃႈတူဝ်ၸဵင်ၼၼ်ႉ သွင်တူဝ် ၼႂ်းတူဝ်လိၵ်ႈ ဢင်းၵိတ်ႉ။ ဢဝ်တူဝ်လိၵ်ႈၵူၺ်း။ တူဝ်ယၢင်ႇ: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်းတႄႉ ပေႃးတူဝ်ၼပ်ႉ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ၼႆၸိုင် တေလႆႈဢွၵ်ႇ 10 တူဝ် ပေႃးတူဝ်ၼပ်ႉ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ၼႆၸိုင် တေလႆႈဢွၵ်ႇ 25 တူဝ် ပေႃးတူဝ်ၼပ်ႉ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ၼႆၸိုင် တေလႆႈဢွၵ်ႇ 13 တူဝ် ပေႃးတူဝ်ၼပ်ႉ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ၼႆၸိုင် တေလႆႈဢွၵ်ႇ 11 တူဝ် ပေႃးတူဝ်ၼပ်ႉ lst = [0,81,12,3,21,21] ၼႆၸိုင် တေလႆႈဢွၵ်ႇ 3 တူဝ် ပေႃးတူဝ်ၼပ်ႉ lst = [1,8,1,2,1,7] ၼႆၸိုင် တေလႆႈဢွၵ်ႇ 7 တူဝ် ပေႃးတူဝ်ၼပ်ႉ lst = [1,8,1,2,7] ၼႆၸိုင် တေလႆႈဢွၵ်ႇ 10 တူဝ် ပေႃးတူဝ်ၼပ်ႉ lst = [1,1,8,2,1,7] ၼႆၸိုင် တေလႆႈဢွၵ်ႇ 10 တူဝ် ပေႃးတူဝ်ၼပ်ႉ lst = [1,1,2,2,2,3,3,3,3,7,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"တူဝ်ယၢင်ႇ: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) တေလႆႈၶိုၼ်း True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) တေလႆႈၶိုၼ်း False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) တေလႆႈၶိုၼ်း False. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) တေလႆႈၶိုၼ်း False. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"}) တေလႆႈၶိုၼ်း False.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ႁဵတ်းသၢင်ႈၼႃႈၵၢၼ် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ်သေ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉတဵမ် n ဢၼ်ဢွၼ်တၢင်းသုတ်း ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ လႄႈ ဢေႇလိူဝ် n ၼၼ်ႉမႃး မိူၼ်ၼင်ႇ count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် multiply ((148, 412) ၼႆႉ တေလႆႈၶိုၼ်း 16 တူဝ်၊ multiply ((19, 28) ၼႆႉ တေလႆႈၶိုၼ်း 72 တူဝ်၊ multiply ((2020, 1851) ၼႆႉ တေလႆႈၶိုၼ်း 0 တူဝ်၊ multiply ((14,-15) ၼႆႉ တေလႆႈၶိုၼ်း 20 တူဝ်၊ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် multiply ((148, 412) ၼႆႉ တေလႆႈၶိုၼ်း 16 တူဝ်၊ multiply ((19, 28) ၼႆႉ တေလႆႈၶိုၼ်း 72 တူဝ်၊ multiply ((2020, 1851) ၼႆႉ တေလႆႈၶိုၼ်း 0 တူဝ်၊ multiply ((14,-15) ၼႆႉ တေလႆႈၶိုၼ်း 20 တူဝ်၊ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် multiply ((148, 412) ၼႆႉ တေလႆႈၶိုၼ်း 16 တူဝ်၊ multiply ((19, 28) ၼႆႉ တေလႆႈၶိုၼ်း 72 တူဝ်၊ multiply ((2020, 1851) ၼႆႉ တေလႆႈၶိုၼ်း 0 တူဝ်၊ multiply ((14,-15) ၼႆႉ တေလႆႈၶိုၼ်း 20 တူဝ်၊ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် multiply ((14,-15) ၼႆႉ တေလႆႈၶိုၼ်း 20 တူဝ်၊ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် multiply ((14,-15) ၼႆႉ တေလႆႈၶိုၼ်း 20 တူဝ်၊ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် multiply ((14,-15) ၼႆႉ တေလႆႈၶိုၼ်း 20 တူဝ်၊ တူဝ်ယၢင်ႇမၼ်းတႄႉ မၼ်းတေၶိုၼ်းၶိုၼ်းၶိုၼ်းမႃးၶိုၼ်း၊ တူဝ်ယၢင်ႇမၼ်းတႄႉ မၼ်းတေၶိုၼ်းမႃးၶိုၼ်းမႃးၶိုၼ်း၊ တူဝ်ယၢင်ႇမၼ်းတႄႉ မၼ်းတေၶိုၼ်းမႃးၶိုၼ်းမႃးၶိုၼ်း၊ တူဝ်ယၢင်ႇမၼ်းမၼ်းမၼ်းတေၶိုၼ်းမႃးၶိုၼ်းမႃးၶိုၼ်းမႃးၶိုၼ်း၊ တူဝ်ယၢင်ႇမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်းမၼ်း\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ် string s ၼႆၸိုင် ၵဵပ်းဢဝ် တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈတူဝ်ယႂ်ႇ ဢၼ်ပႃး တူဝ်ၼပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉသွၼ်ႇ တူဝ်ယၢင်ႇမၼ်း: count_upper (('aBCdEf') ၶိုၼ်းပၼ် 1 count_upper (('abcdefg') ၶိုၼ်းပၼ် 0 count_upper (('dBBE') ၶိုၼ်းပၼ် 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''ႁဵတ်းပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် ၵႃႈၶၼ် (string) ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၸမ်သုတ်းၼၼ်ႉ။ သင်ဝႃႈ တူဝ်ၼပ်ႉၼၼ်ႉ မီးတၢင်းၵႆမိူၼ်ၵၼ်တင်း တူဝ်ၼပ်ႉတဵမ်သွင်ဢၼ်ၼႆၸိုင် ဢဝ်မၼ်းၸီႉၸမ်ႈၵႂႃႇ တီႈသုၼ်။ တူဝ်ယၢင်ႇ >>> closest_integer (((\"10\") 10 >>> closest_integer (((\"15.3\") 15 ၶေႃႈတွင်း: လွင်ႈဢဝ်မၼ်းၸီႉၸမ်ႈၵႂႃႇတီႈ သုၼ်ၼႆႉ ပွင်ႇဝႃႈ သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ မီးတၢင်းၵႆမိူၼ်ၵၼ်တင်း တူဝ်ၼပ်ႉတဵမ်သွင်ဢၼ်ၼႆ ဢၼ်ထုၵ်ႇလီၶိုၼ်းပၼ်ၼၼ်ႉ ပဵၼ်ဢၼ်ဢၼ်ၵႆသုတ်းတီႈ သုၼ်ၼၼ်ႉယဝ်ႉ။ တွၼ်ႈတႃႇ တူဝ်ယၢင်ႇဢၼ်ၼိူင်ႈ တူဝ်ၼပ်ႉဢၼ်ၸမ်သုတ်း (string) ၼၼ်ႉ ထုၵ်ႇလီၶိုၼ်းပၼ် 15 လႄႈ တူဝ်ၼပ်ႉဢၼ်ၸမ်သုတ်း (integer) ၼၼ်ႉ ထုၵ်ႇလီၶိုၼ်းပၼ် -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ပေႃးဝႃႈႁဝ်းမီး တူဝ်ၼပ်ႉတဵမ်ဢၼ်ပဵၼ်တၢင်းလီ n ၼႆၸိုင် ႁဝ်းတေလႆႈႁဵတ်းႁုၼ်ႇႁၢင်ႈႁိၼ် ဢၼ်မီးၸၼ်ႉထၢၼ်ႈ n တီႈၸၼ်ႉထၢၼ်ႈဢွၼ်တၢင်းသုတ်းၼၼ်ႉ မီးႁုၼ်ႇႁၢင်ႈႁိၼ် n တီႈၸၼ်ႉထၢၼ်ႈၸမ်သုတ်းၼၼ်ႉ တေမီးႁုၼ်ႇႁၢင်ႈႁိၼ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ပေႃး n ပဵၼ်တူဝ်ထၢၼ်ႈၸမ်သုတ်းၼႆ တေမီးႁုၼ်ႇႁၢင်ႈႁိၼ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ပေႃး n ပဵၼ်တူဝ်ထၢၼ်ႈၸမ်သုတ်းၼႆ တေမီးႁုၼ်ႇႁၢင်ႈႁိၼ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ပေႃး n ပဵၼ်တူဝ်ထၢၼ်ႈၸမ်သုတ်းၼႆ တေမီးႁုၼ်ႇႁၢင်ႈႁိၼ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ပေႃး n ပဵၼ်တူဝ်ထၢၼ်ႈၸမ်သုတ်းၼႆ တေမီးႁုၼ်ႇႁၢင်ႈႁိၼ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ် တူဝ်ၼပ်ႉဢမ်ႇမိူၼ်ၵၼ်\"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်း မိူၼ်ၼင်ႇ words_string ((\"မႂ်းၸိုဝ်ႈၵဝ်ႁွင်ႉဝႃႈ John\") == [\"မႂ်းၸိုဝ်ႈၵဝ်ႁွင်ႉဝႃႈ John\"] words_string ((\"ၼိုင်ႈ သွင် သၢမ် သီႇ ႁႃႈ ႁူၵ်း\") == [\"ၼိုင်ႈ သွင် သၢမ် သီႇ ႁႃႈ ႁူၵ်း\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"တူဝ်ၼပ်ႉဢၼ်ၼႆႉ မၼ်းဢဝ် တူဝ်ၼပ်ႉသုတ်ႉဢၼ်ယႂ်ႇသုတ်း ဢၼ်ပႃးတူဝ်ၼပ်ႉၸုမ်ႇ ဢၼ်ယႂ်ႇသုတ်း ၼႂ်းၵႄႈ [x, y] လႄႈ y ၼၼ်ႉသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ဢၼ်ပႃးတူဝ်ၼပ်ႉၸုမ်ႇ ဢၼ်ပႃးတူဝ်ၼပ်ႉၸုမ်ႇ ဢၼ်ယႂ်ႇသုတ်း ၼႂ်းၵႄႈ [x, y] လႄႈ y ၼၼ်ႉယဝ်ႉ။ သင်ဝႃႈ ဢမ်ႇမီး တူဝ်ၼပ်ႉ ၸုမ်ႇၼႆ တူဝ်ၼပ်ႉဢၼ်ၼႆႉ မၼ်းတေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ - 1 တူဝ်ယၢင်ႇမၼ်း:\"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"ပေႃးဝႃႈႁဝ်းလႆႈ တူဝ်ၼပ်ႉတဵမ် n လႄႈ m သွင်တူဝ်ၼႆ ႁဝ်းတေလႆႈၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉတဵမ် n တေႃႇ m ၼႆႉသေ ပေႃးတူဝ်ၼပ်ႉ n ၼႆႉယႂ်ႇလိူဝ် m ၼႆ ႁဝ်းတေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉ - 1 မႃးၼႆယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပေႃးတူဝ်ၼပ်ႉ n ၼႆႉယႂ်ႇလိူဝ် m ၼႆ ႁဝ်းတေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ - 1 မႃးယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပေႃးတူဝ်ၼပ်ႉ n ၼႆႉယႂ်ႇလိူဝ် m ၼႆ ႁဝ်းတေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ - 1 မႃးယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပေႃးတူဝ်ၼပ်ႉ n ၼႆႉယႂ်ႇလိူဝ် m ၼႆ ႁဝ်းတေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ - 1 မႃးယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပေႃးတူဝ်ၼပ်ႉ n ၼႆႉယႂ်ႇလိူဝ် m ၼႆ ႁဝ်းတေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ - 1 မႃးယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပေႃးတူဝ်ၼပ်ႉ n ၼႆႉယႂ်ႇလိူဝ် m ၼႆ ႁဝ်းတေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ - 1 မႃးယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပေႃးတူဝ်ၼပ်ႉ n ၼႆႉယႂ်ႇလိူဝ် m ၼႆ ႁဝ်းတေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ - 1 မႃးယဝ်ႉ။\"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"ပေႃးဝႃႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ x ၼႆ မၼ်းတေၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉ ဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉ ဢၼ်ၸႅၵ်ႇဝႆႉၼၼ်ႉၼႆယဝ်ႉ။ ၶေႃႈတွင်း: သဵၼ်ႈမၢႆ ဢၼ်လႆႈၶိုၼ်းၼၼ်ႉ ထုၵ်ႇလီၸႅၵ်ႇဝႆႉ ၸွမ်းၼင်ႇ လွင်ႈတိူဝ်းၼမ်မႃးၼၼ်ႉယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်း: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"ပေႃးဝႃႈႁဝ်းလႆႈပၼ် တူဝ်ၼပ်ႉတဵမ်တင်းၼမ်ၼႆ ႁဝ်းတေၸႅၵ်ႇပၼ် တူဝ်ၼပ်ႉတဵမ်ဢၼ်မီးၼႂ်းၵႄႈ 1 လႄႈ 9 သေယဝ်ႉ ၶိုၼ်းပိၼ်ႇဝၢႆႇပၼ် တူဝ်ၼပ်ႉဢၼ်လႆႈမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပၼ်တီႈ တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉ မိူၼ်ၼင်ႇ arr = [1,1,1,1,4,5,8,2,3] -> sort arr -> [1,1,1,2,2,3,4,5,8] -> reverse arr -> [8,5,4,3,2,2,1,1] return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] ပေႃးဝႃႈတူဝ်ၼပ်ႉတဵမ်ဝႆႉၼႆၸိုင် ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပၼ်: arr = [] return [] ပေႃးတူဝ်ၼပ်ႉတဵမ်ဝႆႉၼၼ်ႉ မီးတူဝ်ၼပ်ႉၽိတ်းၼႆ ထွၼ်ပႅတ်ႈမၼ်းသေ ၸႅၵ်ႇပၼ် arr = [1,1,1, -1, 55] -> arr -> [1,1, 55] -> reverse arr = [55,1] return - ['One' 1,']\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် တူဝ်ၼပ်ႉဢၼ်တႄႇတီႈ 1 သေ တိူဝ်းမႃးထႅင်ႈ တူဝ်ၼပ်ႉဢၼ်တႄႇတီႈ 1 တေႃႇထိုင် i ၼၼ်ႉၼႆယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်းတႄႉ ပဵၼ် f (n) == [1, 2, 6, 24, 15]\"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"တူဝ်ယၢင်ႇ1: Input: 3 Output: (1, 2) Explanation: Integer palindromes are 1, 2, 3. ဢၼ်ၼိူင်ႈပဵၼ် even လႄႈ ဢၼ်ၼိူင်ႈပဵၼ် odd။ တူဝ်ယၢင်ႇ2: Input: 12 Output: (4, 6) Explanation: Integer palindromes are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ဢၼ်ၼိူင်ႈပဵၼ် even လႄႈ ဢၼ်ၼိူင်ႈပဵၼ် odd။ ၶေႃႈတွင်း: 1. 1 <= n <= 10^3 2. tuple ဢၼ်လႆႈၶိုၼ်း တူဝ်ၼပ်ႉ palindromes ဢၼ်ၼိူင်ႈပဵၼ် even လႄႈ ဢၼ်ၼိူင်ႈပဵၼ် odd။ \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"တႅမ်ႈပၼ် တူဝ်ၼပ်ႉ count_nums ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ်သေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ်ဝႆႉၼၼ်ႉ ပေႃးတူဝ်ၼပ်ႉမၼ်းပဵၼ် တူဝ်ၼပ်ႉထွၼ်ၼႆ တူဝ်ၼပ်ႉဢၼ်ပႃးတူဝ်မႄႈလိၵ်ႈမၢႆတွင်းမၼ်းဢွၼ်တၢင်းသုတ်းၼၼ်ႉၵေႃႈ တေပဵၼ် တူဝ်မႄႈလိၵ်ႈမၢႆတွင်းမၼ်းၼင်ႇၼႆ။ တူဝ်ယၢင်ႇမၼ်း -123 ၼႆႉ မီးတူဝ်မႄႈလိၵ်ႈမၢႆတွင်း -1, 2, လႄႈ 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"ပေႃးဝႃႈႁဝ်းမီး array 'arr' ဢၼ်ပႃးတူဝ်ၼပ်ႉတဵမ် N တူဝ်ၼၼ်ႉၼႆ တူဝ်ၼပ်ႉဢၼ်မီးၼႂ်း array ၼၼ်ႉ တေထုၵ်ႇလႆႈၶပ်ႉဝႆႉၸွမ်းၼင်ႇလွင်ႈဢမ်ႇပဵၼ်မႃးၼၼ်ႉ။ ၼႃႈၵၢၼ်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတေတႅပ်းတတ်းဝႃႈ မၼ်းပဵၼ်လႆႈတႃႇတေဢဝ် array ၶပ်ႉဝႆႉၸွမ်းၼင်ႇလွင်ႈဢမ်ႇယွမ်းလူင်း လူၺ်ႈလွင်ႈႁဵတ်းသၢင်ႈဢၼ်ပၼ်ဝႆႉၼိူဝ် array ၼၼ်ႉ။ ႁဝ်းမီးသုၼ်ႇႁဵတ်းသၢင်ႈ right shift operation လၢႆပွၵ်ႈယူႇယဝ်ႉ။ လွင်ႈႁဵတ်းသၢင်ႈ right shift operation ဢၼ်ၼိုင်ႈၼႆႉ ပွင်ႇဝႃႈ လွင်ႈၶၢႆႉတူဝ်ၼပ်ႉတင်းမူတ်း ၼႂ်း array လူၺ်ႈလွင်ႈၶၢႆႉတီႈၼိုင်ႈ ၼႂ်းတၢင်းၸဵင်ႇၶႂႃ။ တူဝ်ၼပ်ႉဢၼ်သုတ်း ၼႂ်း array ၼၼ်ႉ တေၶၢႆႉၵႂႃႇတီႈတီႈတႄႇမၼ်း ၼႂ်း array ၼၼ်ႉ မိူၼ်ၼင်ႇ 0th index။ ပေႃးဝႃႈမၼ်းပဵၼ်လႆႈတႃႇတေဢဝ် array ၶပ်ႉဝႆႉၼၼ်ႉသေ ႁဵတ်းသၢင်ႈၼိူဝ်ၼၼ်ႉၼႆ ၶိုၼ်းဢဝ် True မႃးၶိုၼ်း ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းဢဝ် False မႃးၶိုၼ်း ပေႃး array ၼၼ်ႉပဵၼ်ဢၼ်ဢမ်ႇမီးတူဝ်ၼႆ ၶိုၼ်းဢဝ် True မႃးၶိုၼ်း။ ၶေႃႈတွင်းပွင်ႈၵႂၢမ်း: သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ မၼ်းတေမီးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ယူႇယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်း: move_one_(ball[4,5,4,==5, 2> True Explanation: By performin 2 right operation, non-decreasing order can be achieved for the array.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"တီႈၼႂ်းပွင်ႈၵႂၢမ်းၼႆႉ မၼ်းတေဢဝ် တူဝ်ၼပ်ႉဢၼ်မီးၼႂ်းသဵၼ်ႈမၢႆသွင်ဢၼ်သေ တႅပ်းတတ်းဝႃႈ မၼ်းတေၸၢင်ႈလႅၵ်ႈလၢႆႈ တူဝ်ၼပ်ႉဢၼ်မီးၼႂ်းသဵၼ်ႈမၢႆ lst1 ႁႂ်ႈပဵၼ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ၽဵင်ႇပဵင်းၵူၺ်းႁိုဝ်ၼႆယဝ်ႉ။ မၼ်းဢမ်ႇမီးလွင်ႈမၵ်းၶၢၼ်း ၼိူဝ် တူဝ်ၼပ်ႉဢၼ်လႅၵ်ႈလၢႆႈ ၼႂ်းၵႄႈ lst1 လႄႈ lst2 သင်ဝႃႈ မၼ်းလႅၵ်ႈလၢႆႈလႆႈ တူဝ်ၼပ်ႉၼႂ်းၵႄႈ lst1 လႄႈ lst2 ႁႂ်ႈတူဝ်ၼပ်ႉဢၼ်မီးၼႂ်း lst1 တင်းမူတ်းပဵၼ်ၽဵင်ႇပဵင်းၼႆၸိုင် ၶိုၼ်းပၼ် \"YES\" ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် \"NO\" တူဝ်ယၢင်ႇမၼ်း မိူၼ်ၼင်ႇ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" မၼ်းတေထၢင်ႇဝႃႈ သဵၼ်ႈမၢႆဢၼ်ၶဝ်ႈမႃးၼၼ်ႉ တေဢမ်ႇပဵၼ်ဢၼ်ဢမ်ႇမီးလွင်ႈၽိတ်းၼႆယဝ်ႉ။\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"ပေႃးဝႃႈ လႆႈပၼ် string ဢၼ်တႅၼ်းတၢင် တူဝ်လိၵ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉ တီႈၵႄႈ ၶွင်ႈၵႄႈ ၶွင်ႈၼၼ်ႉၼႆ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ဢၼ်ပႃးဝႆႉ တီႈၼႂ်း ပပ်ႉသႅၼ်သမ်ႇၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈၸိူဝ်းဢၼ်လႆႈႁၼ်ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈၸိူဝ်းၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈၸိူဝ်းၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈၸိူဝ်းၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈၸိူဝ်းၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈၸိူဝ်းၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်ၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်ၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်ၼၼ်ႉ ၶိုၼ်းဢဝ် တူဝ်ၼၼ်ႉ ၶိုၼ်းဢဝ်ၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းၶိုၼ်းတဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်တဵမ်\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"ၼႃႈၵၢၼ် ႁဝ်းလႆႈပၼ် သွင်တူဝ်လိၵ်ႈ s လႄႈ c ႁဝ်းလူဝ်ႇမွတ်ႇပႅတ်ႈ တူဝ်လိၵ်ႈၼႂ်း s ဢၼ်ၽဵင်ႇပဵင်းၵၼ်တင်း တူဝ်လိၵ်ႈၼႂ်း c ယဝ်ႉၵေႃႈထတ်းတူၺ်းဝႃႈ တူဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇမႃးၼၼ်ႉ ပဵၼ် palindrome ႁွင်ႉဝႃႈ palindrome သင်မၼ်းမီးလွင်ႈလူလိၵ်ႈမိူၼ်ၵၼ်တၢင်းၼႃႈလႄႈ တၢင်းလင် ႁဝ်းထုၵ်ႇလီၶိုၼ်းမႃး tuple ဢၼ်ပႃးတူဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇမႃးလႄႈ True/False တွၼ်ႈတႃႇထတ်းတူၺ်း တူဝ်ယၢင်ႇ တွၼ်ႈတႃႇ s = \"abcde\", c = \"ae\" တူဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇမႃးတေပဵၼ် ('bcd',False) တွၼ်ႈတႃႇ s = \"abcdef\", c = \"b\" တူဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇမႃးတေပဵၼ် ('acdef',False) တွၼ်ႈတႃႇ s = \"abcdedcba\", c = \"ab\", တူဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇမႃးတေပဵၼ် ('cdedc',True)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ်သဵၼ်ႈမၢႆ string ဢၼ် string ၵူႊဢၼ်ၼၼ်ႉ မီးတူဝ်ၼပ်ႉၵူၺ်းၼႆ ႁဝ်းတေၶိုၼ်းပၼ်သဵၼ်ႈမၢႆမၼ်း။ တူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃးၼၼ်ႉ တေလႆႈပဵၼ် \"တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၼႂ်း string i ၶွင် input\" တီႈ i တင်းမူတ်းၼၼ်ႉ တေလႆႈဢဝ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၼႂ်း string i ၶွင် input ၼၼ်ႉ လႅၵ်ႈလၢႆႈပၼ်။ >>> odd_count['1234567']) [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် n ၼႆၸိုင်ႁႃ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇပႃးတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇပႃးတူဝ်ၼပ်ႉၼၼ်ႉသေ သွၵ်ႈႁႃတူၺ်း တူဝ်ယၢင်ႇမၼ်း minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"တူဝ်ယၢင်ႇ 1: Input: grid: [[0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1]] bucket_capacity: 2 Output: 53: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 53: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 * 0 * 0 * 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 0 * 1 * 1 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 11 * 11 * 11 * 11 * 11 * 11 * 11 * 11 * 11 * 12 * 11 * 12 * 13 * 14 * 15 * 15 * 16 * 16 * 17 * 19 * 19 * 19 * 19 * 19 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 21 * 21 * 21 * 21 * 21 * 22 * 22 * 22 * 22 * 22 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ၼႂ်း Kata ၼႆႉ တေလႆႈၸႅၵ်ႇဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ် ၸွမ်းၼင်ႇ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသွင် ဢၼ်ၼိူင်ႈၼၼ်ႉ ႁႂ်ႈတိူဝ်းၶိုၼ်ႈမႃး၊ ပေႃးတူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉ ၸႅၵ်ႇဝႆႉ ၸွမ်းၼင်ႇ တူဝ်ၼပ်ႉသႅၼ်မၼ်းၼႆ တေလႆႈႁဵတ်းမိူၼ်ၼင်ႇ: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ် string s လႄႈ natural number n ၼႆၸိုင် ႁဝ်းတေလႆႈႁဵတ်းၵၢၼ်ဢၼ်ၼိုင်ႈ ဢၼ်တေၶိုၼ်းပၼ် သဵၼ်ႈမၢႆၶေႃႈၵႂၢမ်းတင်းသဵင်ႈ တီႈ string s ဢၼ်ပႃးတူဝ်လေႃးၵီႇ n ၼၼ်ႉ ႁႂ်ႈၶေႃႈၵႂၢမ်းၸိူဝ်းၼႆႉ လႆႈႁၼ်ၼႂ်း string s ၼၼ်ႉ ပေႃး string s ၼၼ်ႉ လပ်းၼႆၸိုင် မၼ်းတေလႆႈၶိုၼ်းပၼ် သဵၼ်ႈမၢႆဢၼ်ဢမ်ႇပႃးတူဝ်လေႃးၵီႇသင်ၼႆယဝ်ႉ။ ၶေႃႈတွင်း: ႁဝ်းတေလႆႈဝူၼ်ႉဝႃႈ input string ၼၼ်ႉ ပႃးတူဝ်လိၵ်ႈလႄႈ တူဝ်ၵိုတ်းၵိုတ်းၵိုတ်းၵိုတ်းၵူၺ်း။ တူဝ်ယၢင်ႇ: select_words (((\"Mary had a little lamb\", 4) ==> [\"little\"] select_words (((\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] select_words\" (((simple white space\", 2) ==> [] select_words (((\"Hello world\", 4) ==> [\"world\"] select_words (((\"Uncle sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"သင်ဝႃႈႁဝ်းလႆႈၶေႃႈၵႂၢမ်းၼႆ ၼႃႈၵၢၼ်ႁဝ်းၼႆႉ တေလႆႈႁႃ တူဝ်လိၵ်ႈတူဝ်ၸဝ်ႉ ဢၼ်ၸမ်သုတ်း ဢၼ်ယူႇၼႂ်းၵႄႈ တူဝ်သွၼ်ႉ သွင်တူဝ် ၽၢႆႇၶႂႃ ၶေႃႈၵႂၢမ်း (တူဝ်ဢၼ်ၸမ်သုတ်း) တူဝ်လိၵ်ႈတူဝ်ၸဝ်ႉ တီႈတႄႇလႄႈ တူဝ်ဢၼ်ၸမ်သုတ်း ဢမ်ႇလႆႈၼပ်ႉသွၼ်ႇ သင်ဝႃႈႁဝ်းဢမ်ႇလႆႈ တူဝ်လိၵ်ႈတူဝ်ၸဝ်ႉ ဢၼ်လႆႈမၵ်းမၼ်ႈဝႆႉၽၢႆႇၼိူဝ်ၼႆ တေလႆႈၶိုၼ်း တူဝ်လိၵ်ႈဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉၼႆ တူဝ်ယၢင်ႇ: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''ပေႃးႁဝ်းဢဝ် သဵၼ်ႈမၢႆ သွင်ဢၼ် ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပိုတ်ႇဝႆႉၼၼ်ႉသေ '(' ဢမ်ႇၼၼ် သဵၼ်ႈမၢႆ ဢၼ်ဢိုတ်းဝႆႉၼၼ်ႉ ') 'ၼႆၸိုင် ၼႃႈၵၢၼ်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတေထတ်းတူၺ်းဝႃႈ သဵၼ်ႈမၢႆ သွင်ဢၼ်ၼႆႉ ၸွင်ႇတေၸၢင်ႈ ဢဝ်မႃးလေႃးၵၼ်လႆႈ ၸွင်ႇသဵၼ်ႈမၢႆ ဢၼ်ဢွၵ်ႇမႃးၼၼ်ႉ တေပဵၼ်ဢၼ်လီၼႆၼၼ်ႉ။ သဵၼ်ႈမၢႆ S ၼႆႉ ပေႃးဝႃႈ သဵၼ်ႈမၢႆ သွင်ဢၼ် ဢၼ်ပႃးဝႆႉၼၼ်ႉ ၽဵင်ႇပဵင်းၵၼ်ၼႆၸိုင် မၼ်းတေပဵၼ်ဢၼ်လီၼႆယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်း: သဵၼ်ႈမၢႆ '((()) ' ၼႆႉ ပဵၼ်ဢၼ်လီ၊ မိူဝ်ႈသဵၼ်ႈမၢႆ '()) ' ၼၼ်ႉ ဢမ်ႇၸႂ်ႈၼင်ႇၼၼ်။ ပေႃးမီးလၢႆးႁဵတ်း သဵၼ်ႈမၢႆ ဢၼ်လီၼႆ ၶိုၼ်းဢဝ် 'Yes' သေ ၶိုၼ်းဢဝ် 'No' သေ ၶိုၼ်းဢဝ်မႃး။ တူဝ်ယၢင်ႇ: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"တူဝ်ယၢင်ႇ1: ထႅဝ်လိၵ်ႈဢၼ်ၶဝ်ႈဝႆႉ: arr = [-3, -4, 5], k = 3 ထႅဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇဝႆႉ: [-4, -3, 5] တူဝ်ယၢင်ႇ2: ထႅဝ်လိၵ်ႈဢၼ်ၶဝ်ႈဝႆႉ: arr = [4, -4, 4], k = 2 ထႅဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇဝႆႉ: [4, 4] တူဝ်ယၢင်ႇ3: ထႅဝ်လိၵ်ႈဢၼ်ၶဝ်ႈဝႆႉ: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ထႅဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇဝႆႉ: [2] ၶေႃႈတွင်းမၢႆ: 1. တၢင်းယၢဝ်းၶွင် ထႅဝ်လိၵ်ႈၼႆႉ တေမီးၼႂ်းၵႄႈ [1, 1000] 2. တူဝ်ၼပ်ႉၼႂ်းထႅဝ်လိၵ်ႈၼႆႉ တေမီးၼႂ်းၵႄႈ [-1000, 1000] 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉၼႆ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်မီးတီႈယူႇမိူၼ်ၵၼ်ၼၼ်ႉ ၶိုၼ်းမႃးပၼ် တူဝ်ယၢင်ႇမၼ်း။ တူဝ်ယၢင်ႇတွၼ်ႈတႃႇ ၶေႃႈၵႄႈလိတ်ႈ (([5, 8, 7, 1]) ==> ၶေႃႈၵႄႈလိတ်ႈ 12 (([3, 3, 3, 3, 3]) ==> ၶေႃႈၵႄႈလိတ်ႈ 9 (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"ပေႃးဝႃႈႁဝ်းလႆႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ဢမ်ႇၸႂ်ႈတူဝ်ဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉယဝ်ႉၼႆ ႁဝ်းတေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉသွင်တူဝ်ၼၼ်ႉမႃး တူဝ်ယၢင်ႇမၼ်း: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"ပေႃးဝႃႈႁဝ်းလႆႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းဢဝ်မႃး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၸိူဝ်းဢၼ်မီးဝႆႉ တီႈၼႂ်းၸႄႈတွၼ်ႈ collatz ၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း။ တူဝ်ၼပ်ႉ Collatz ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်လႆႈမႃးတီႈ ၸႄႈတွၼ်ႈ ဢၼ်မၵ်းမၼ်ႈဝႆႉ ၼင်ႇပႃႈတႂ်ႈၼႆႉယဝ်ႉ။ ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈၼၼ်ႉ ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်ၼိူင်ႈၼႆၸိုင် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼႆႉ တေလႆႈဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း၊ ပေႃးတူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼႆႉ တေလႆႈဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း၊ ပေႃးတူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼႆႉ တေလႆႈဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း၊ ပေႃးတူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼႆႉ တေလႆႈဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း၊ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼႆႉ တေလႆႈဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း၊ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼၼ်ႉ တေလႆႈဢဝ်မႃးၶိုၼ်း၊ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼၼ်ႉ တေလႆႈဢဝ်မႃးၶိုၼ်း၊ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃးၼၼ်ႉ တေလႆႈဢဝ်မႃး၊ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃး၊ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸႄႈတွၼ်ႈ ဢၼ်တေမႃး၊ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်တေပဵၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊ ဢၼ်၊\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"တေလႆႈတႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်တေမၵ်းမၼ်ႈပၼ် ဝၼ်းထီႉ လႄႈ ၶိုၼ်းမိူဝ်း True သင်ဝႃႈ ဝၼ်းထီႉၼၼ်ႉ မၢၼ်ႇမႅၼ်ႈ ပေႃးဢမ်ႇၼၼ် False ဝၼ်းထီႉၼၼ်ႉ မၢၼ်ႇမႅၼ်ႈ သင်ဝႃႈ ပၵ်းပိူင်ဢၼ်ၸွမ်းမႃးၼႆႉ ၵုမ်ႇထူၼ်ႈဝႆႉ: 1. ဝၼ်းထီႉၼၼ်ႉ ဢမ်ႇလႆႈပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ 2. ဝၼ်းထီႉၼႆႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 31 ဝၼ်း တွၼ်ႈတႃႇ လိူၼ် 1,3,5,7,8,10,12 လႄႈ ဝၼ်းထီႉၼႆႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 30 ဝၼ်း တွၼ်ႈတႃႇ လိူၼ် 4,6,9,11 လႄႈ ဝၼ်းထီႉၼႆႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 29 တွၼ်ႈတႃႇ လိူၼ် 2. လိူၼ်ထီႉၼႆႉ ဢမ်ႇထုၵ်ႇလီပဵၼ် 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 12. ဝၼ်းထီႉၼႆႉ ထုၵ်ႇလီမီးဝႆႉၼႂ်း ပိူင်ၾၢင်: mm-dd-yyyy မိူၼ်ၼင်ႇ: valid_date (('03-11-2000') => true_date (('15-01-2012') => false_date (('04-01-2040') => false_date (('06-04-2020') => true_date (('06/04/2020')\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''ပေႃးဝႃႈႁဝ်းလႆႈၶေႃႈၵႂၢမ်းတင်းၼမ်ၼႆ ႁဝ်းတေလႆႈၶိုၼ်းၶေႃႈၵႂၢမ်းဢၼ်ၸႅၵ်ႇဝႆႉတီႈၼႂ်းႁၢင်လိၵ်ႈ၊ ပေႃးဢမ်ႇမီးႁၢင်လိၵ်ႈၸိုင် ႁဝ်းတေလႆႈၸႅၵ်ႇဝႆႉတီႈၼႂ်းႁၢင်လိၵ်ႈ၊ ပေႃးဢမ်ႇမီးႁၢင်လိၵ်ႈၸိုင် ႁဝ်းတေလႆႈၶိုၼ်း တူဝ်လိၵ်ႈတူဝ်လဵၵ်ႉ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႂ်းတူဝ်လိၵ်ႈ၊ ord (a) = 0, ord (b) = 1, ... ord (z) = 25 တူဝ်ယၢင်ႇမၼ်း ပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ၸႅၵ်ႇဝႆႉတီႈၼႂ်းႁၢင်လိၵ်ႈ (Hello world) -> (Hello world) -> (Hello world)'''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''ပေႃးဝႃႈပၼ်ဝႆႉသဵၼ်ႈမၢႆတူဝ်ၼပ်ႉၼႆ ၶိုၼ်းဢဝ်မႃးၸွမ်းၼင်ႇ လွင်ႈၶပ်ႉၶိုင်ဝႆႉၼၼ်ႉသေတႃႉ ပေႃးဝႃႈသဵၼ်ႈမၢႆမၼ်းမီးတူဝ်ၼပ်ႉမိူၼ်ၵၼ် ၼမ်လိူဝ် 1 တူဝ်ၼႆ ၶိုၼ်းဢဝ်မႃးၸွမ်းၼင်ႇ False (ၽိတ်း) ၼႆသေတႃႉ ပေႃးဢမ်ႇမီးတူဝ်ၼပ်ႉထွၼ် လႄႈ တူဝ်ၼပ်ႉတဵမ်ၵူၺ်းၼႆၸိုင် တူဝ်ယၢင်ႇမၼ်း is_sorted (ဢမ်ႇမီးတူဝ်ၼပ်ႉထွၼ်) [1] â -> True is_sorted ([1, 2, 3, 4, 5]) â -> True is_sorted ([1, 3, 2, 4, 5, 6]) â -> False is_sorted ([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted ([1, 2, 3, 4, 5, 6, 7]) â -> False is_sorted ([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted ([1, 2, 2, 3, 3, 4]) â -> True is_sorted ([1, 2, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်း ပေႃးဝႃႈႁဝ်းလႆႈပၼ်ဝႆႉ ၶၢဝ်းယၢမ်းသွင်ဢၼ်ၼႆ ၶၢဝ်းယၢမ်းဢၼ်လႂ်ဢၼ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ်သွင်တူဝ်ၼႆယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်း ၶၢဝ်းယၢမ်း = (တႄႇ၊ သုတ်း) = (1, 2) ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢိုတ်းဝႆႉ ဢၼ်ပွင်ႇဝႃႈ ၶၢဝ်းယၢမ်း (တႄႇ၊ သုတ်း) ၼႆႉ ၶဝ်ႈပႃးဝႆႉ တီႈတႄႇလႄႈ တီႈသုတ်းၼၼ်ႉယဝ်ႉ။ တႃႇ ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ မၼ်းတေလႆႈႁပ်ႉႁၼ်ဝႃႈ တႄႇမၼ်းၼႆႉ ယွမ်းလိူဝ် ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တင်း တီႈသုတ်းမၼ်းၼႆယဝ်ႉ။ ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတႅပ်းတတ်းဝႃႈ တၢင်းယၢဝ်းဢၼ်ၶတ်းၵၼ် ၶၢဝ်းယၢမ်းသွင်ဢၼ်ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉ ပရမ်ႇႁႃႉၼႆႁႃႉၼႆၼၼ်ႉယဝ်ႉ။ တူဝ်ယၢင်ႇမၼ်း ၶၢဝ်းယၢမ်း (1, 3), (2, 4) ၼႆႉ ပဵၼ် (2, 3) ဢၼ်တၢင်းယၢဝ်းမၼ်းပဵၼ် 1 ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉ ပရမ်ႇႁႃႉၼႆယဝ်ႉ။ ပေႃးဝႃႈ တၢင်းယၢဝ်းၶွင် ၶၢဝ်းယၢမ်းဢၼ်ၶတ်းၵၼ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉ ပရမ်ႇႁႃႉၼႆ ၶိုၼ်းဢဝ် \"YES\"၊ ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းဢဝ် \"NO\"။ ပေႃးဝႃႈ ၶၢဝ်းယၢမ်းသွင်ဢၼ်ၼႆႉ ဢမ်ႇၶတ်းၵၼ်ၼႆ ၶိုၼ်းဢဝ် \"NO\" လိူၵ်ႈတူၺ်း တူဝ်ယၢင်ႇမၼ်း: ၶၢဝ်းယၢမ်း (input/output) = (((((1, 2), (2, == 3) \"NO\"> ၶၢဝ်းယၢမ်းဢၼ်ၶတ်းၵၼ်-1, (((1), ၶၢဝ်းယၢမ်းဢၼ်ၶတ်းၵၼ် (inter) = (0, 4) \"NO\" = (((5, 5), \"==================================================================================================================================================================================================================================================================================================================================================================================================\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်းပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉသေ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉ တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉၶိုၼ်း။ တူဝ်ယၢင်ႇမၼ်းပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉ တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉၶိုၼ်း။ တူဝ်ယၢင်ႇမၼ်းပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉ တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉၶိုၼ်း။ တူဝ်ယၢင်ႇမၼ်းပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉ တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉၶိုၼ်း။ တူဝ်ယၢင်ႇမၼ်းပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉ တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉၶိုၼ်း။ တူဝ်ယၢင်ႇမၼ်းပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉ တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉၶိုၼ်း။ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉ တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉၼၼ်ႉၶိုၼ်း။\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"ပေႃးမီးဝႆႉ grid ဢၼ်ၼိူင်ႈဢၼ် ဢၼ်မီး row လႄႈ column N (N >= 2) လႄႈ တူဝ်ၼပ်ႉတဵမ် k ဢၼ်လီၼႆၸိုင် တီႈၼႂ်း grid ၼၼ်ႉ ၵူႈတူဝ်ၼပ်ႉဢၼ်မီးတီႈၼႂ်း range [1, N * N] ၼၼ်ႉ တေမီးဝႆႉ ၵႃႈၶၼ်ဢၼ်ၼိူင်ႈယူႇယဝ်ႉ။ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁႃ သဵၼ်ႈတၢင်းဢၼ်ယၢဝ်း k တီႈဢေႇသုတ်းမၼ်း၊ တီႈၼႂ်း cell သေဢၼ်ဢၼ်ၼၼ်ႉၵေႃႈ တႄႇဢဝ် cell သေဢၼ်ဢၼ်သေ ၶၢႆႉၵႂႃႇတီႈ cells ဢၼ်မီးႁိမ်းႁွမ်းမၼ်း၊ ပေႃးလၢတ်ႈထႅင်ႈၽၢႆႇၼိုင်ႈၵေႃႈ သဵၼ်ႈတၢင်းဢၼ်ယၢဝ်း k ၼၼ်ႉ ပွင်ႇဝႃႈ သဵၼ်ႈတၢင်းဢၼ်ယၢဝ်း k ၼၼ်ႉ တေလႆႈၵႂႃႇတီႈ cells (ဢမ်ႇၸႅၵ်ႇၽႄၵၼ်လႆႈ) k ၼၼ်ႉၼႆယဝ်ႉ။ တီႈၼႂ်း grid ၼၼ်ႉ သင်ၸိူဝ်ႉဝႃႈ သဵၼ်ႈတၢင်း A (တၢင်းယၢဝ်း k) ၼၼ်ႉ ယၢဝ်းလိူဝ်သေ path B (တၢင်းယၢဝ်း k) ၼႆၸိုင် ပေႃးဝႃႈ သဵၼ်ႈတၢင်းဢၼ်ၶိုၼ်းမၵ်းမၼ်ႈဝႆႉပၼ်ၵႃႈၶၼ် တီႈၼႂ်း cells A လႄႈ B (ႁဝ်းႁွင်ႉၶဝ်ဝႃႈ l_stA လႄႈ l_stB) ၼႆၸိုင် တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် တူဝ်ၼပ်ႉဢၼ်ယၢဝ်းမၼ်း ယၢဝ်းလိူဝ်သေ l_stA၊ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် တူဝ်ၼပ်ႉဢၼ်ယၢဝ်းမၼ်း ယၢဝ်းလိူဝ်သေ l_stB၊ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် တူဝ်ၼပ်ႉဢၼ်ယၢဝ်းမၼ်း ယၢဝ်းလိူဝ်သေ l_stB၊ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် တူဝ်ၼပ်ႉဢၼ်ယၢဝ်းမၼ်း ယၢဝ်းလိူဝ်သေ k၊ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် တူဝ်ၼပ်ႉဢၼ်ယၢဝ်းမၼ်းမီးဝႆႉတီႈ l_stA လႄႈ k၊ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် တူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမၼ်းမီးဝႆႉ k၊ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် k၊ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် k၊ တီႈၼႂ်း တူဝ်ယၢဝ်းမၼ်းမီး၊ တီႈၼႂ်း grid ၼၼ်ႉ တေလႆႈႁၼ် k၊ တီႈၼႂ်း၊ တီႈၼႂ်း၊ တီႈၼႂ်း grid ၼၼ်ႉမီး၊ တီႈၼိူင်ႈမၼ်းမီး၊ တီႈၼိူင်ႈမၼ်းမီး၊ တီႈၼိူင်ႈမၼ်းမီး၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ တီႈၼိူင်ႈ တီႈၼိူင်ႈ တီႈၼိူင်ႈ တီႈၼိူင်ႈ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ တီႈၼိူင်ႈ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊ တီႈၼိူင်ႈ၊\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ၵူၼ်းၵူႈၵေႃႉႁူႉၸၵ်း Fibonacci sequence ဢၼ်ၽူႈလူင်ႉလႅၼ်ႇပၢႆးၼပ်ႉၶဝ် လဵပ်ႈႁဵၼ်းဝႆႉႁိုင်မႃးလၢႆပၢၵ်ႇပီႊၼၼ်ႉယူႇ၊ ၵူၺ်းၵႃႈ ဢၼ်ၵူၼ်းႁဝ်းဢမ်ႇႁူႉၸၵ်းတႄႉပဵၼ် Tribonacci sequence ဢၼ်မၵ်းမၼ်ႈလူၺ်ႈ လွင်ႈၶိုၼ်းပဵၼ်မႃး: tri(1) = 3 tri(n) = 1 + n / 2၊ သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸႅၵ်ႇၸၵ်း\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ပေႃးဝႃႈပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ n ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ၶိုၼ်းဢဝ် 0 မႃးၶိုၼ်း ပေႃးတူဝ်ၼပ်ႉတင်းမူတ်း ပဵၼ်တူဝ်ၼပ်ႉၸႅၵ်ႈ တူဝ်ယၢင်ႇမၼ်း တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict) == တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ (dict)\"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''ႁဵတ်းပၼ် function ဢၼ်ဢဝ် string ဢၼ်ပႃး square brackets ၼၼ်ႉသေ သႂ်ႇပၼ်ၼႆ မၼ်းတေလႆႈၶိုၼ်း true သင်ဝႃႈ မၼ်းမီးဝႆႉ brackets ဢၼ်ၶဝ်ႈၵၼ်ဝႆႉ တီႈဢေႇသုတ်းမၼ်း တီႈဢၼ်ၼိုင်ႈၼႆ မၼ်းတေလႆႈၶိုၼ်း true'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်း: တွၼ်ႈတႃႇ lst = [1,2,3] ဢၼ်ဢွၵ်ႇမၼ်းတေလႆႈပဵၼ် 14 တွၼ်ႈတႃႇ lst = [1,4,9] ဢၼ်ဢွၵ်ႇမၼ်းတေလႆႈပဵၼ် 98 တွၼ်ႈတႃႇ lst = [1,3,5,7] ဢၼ်ဢွၵ်ႇမၼ်းတေလႆႈပဵၼ် 84 တွၼ်ႈတႃႇ lst = [1.4,4.2,0] ဢၼ်ဢွၵ်ႇမၼ်းတေလႆႈပဵၼ် 29 တွၼ်ႈတႃႇ lst = [-2.4,1,1] ဢၼ်ဢွၵ်ႇမၼ်းတေလႆႈပဵၼ် 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''ႁဵတ်းပၼ် function ဢၼ်ၶိုၼ်းပၼ် True သင်တူဝ်လိၵ်ႈလိုၼ်းသုတ်းၶွင် string ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်လိၵ်ႈတူဝ်လိၵ်ႈ လႄႈ ဢမ်ႇၸႂ်ႈတွၼ်ႈၶွင် ၶေႃႈၵႂၢမ်း လႄႈ False ပေႃးဢမ်ႇၼၼ်။ ၶေႃႈတွင်း: \"ၶေႃႈၵႂၢမ်း\" ၼႆႉပဵၼ်ၸုမ်းတူဝ်လိၵ်ႈ ဢၼ်ၽႄဝႆႉလူၺ်ႈႁၢင်ႁၢင်ႁၢင်ႁၢင်။ တူဝ်ယၢင်ႇ: check_if_last_char_is_a_letter\" \"apple pie\") â -> False check_if_last_char_is_a_letter\" \"apple pi e\") â -> True check_if_last_char_is_a_letter\" \"apple pi e\") â -> False check_if_last_char_is_a_letter\" \"apple pi e\") â -> False check_if_last_char_is_a_letter\" \"'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ဢမ်ႇမီးၼႆၸိုင် ၶိုၼ်းဢဝ် - 1 ၶိုၼ်းမႃးပၼ်။ တူဝ်ယၢင်ႇမၼ်းတႄႉ can_arrange ([1,2,4,3,5]) = 3 can_arrange ([1,2,3]) = -1\"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ႁဵတ်းပၼ် တူဝ်ဢိင် ဢၼ်ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ဢၼ်ဢၼ်ဢမ်ႇမီး တူဝ်ဢၼ်ဢၼ်ဢၼ်ဢမ်ႇ တူဝ်ဢၼ် ဢၼ်ဢမ်ႇမီး တူဝ်ဢၼ် ဢၼ်ဢမ်ႇမီး တူဝ်ဢၼ် ဢၼ်ဢမ်ႇမီး တူဝ်ဢၼ် ဢၼ်ဢမ်ႇမီး တူဝ်ဢၼ် ဢၼ်ဢမ်ႇမီး တူဝ်ဢၼ် ဢၼ်ဢမ်ႇမီး တူဝ်ဢၼ် ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး ဢၼ်ဢမ်ႇမီး'''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"ႁဵတ်းပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ်၊ တူဝ်ၼပ်ႉဢၼ်လႆ ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸၢၵ်ႈဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉဢၼ်မီးတႄႉသေ မိူဝ်းၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇလိူဝ် ၼႂ်းတူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။ မိူဝ်းၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး သင်ၵႃႈၶၼ်မၼ်းၽဵင်ႇပဵင်းၵၼ်။ မၢႆတွင်း: သင်တူဝ်ၼပ်ႉဢၼ်မီးတႄႉၼၼ်ႉ မိူဝ်းၶိုၼ်းမိူၼ်ၼင်ႇ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸၢၵ်ႈဢၼ်လႆၼႆ တူဝ်ၼပ်ႉဢၼ်လႆတေပဵၼ် . ဢမ်ႇၼၼ် , compare_one{1,2,5} -> 2.5 compare_one{1,2,3}) -> \"2,3\" compare_one{5,1}\", \"6\") -> \"6\" compare_one{1}\", 1) -> None \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"လၢမ်းၶၢတ်ႈတူၺ်းဝႃႈ တူဝ်ၼပ်ႉ n ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ၸွင်ႇတေတႅမ်ႈလႆႈမိူၼ်ၼင်ႇ တူဝ်လေႃး တူဝ်ၼပ်ႉသီႇတူဝ် ဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉ ၸွင်ႇတေလႆႈ တူဝ်ယၢင်ႇမၼ်းပဵၼ် တူဝ်ၼပ်ႉသီႇတူဝ်ၼၼ်ႉႁိုဝ်ၼႆ\"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်းပဵၼ်: >>> special_factorial(4) 288 တူဝ်ဢိင်ၼႆႉတေလႆႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၶဝ်ႈမႃးလႄႈ တေလႆႈၶိုၼ်း တူဝ်ဢိင်ဢၼ်ၶိုၵ်ႉတွၼ်း တူဝ်ၼပ်ႉတဵမ်ၼႆႉယဝ်ႉ။\"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ ပိူင်ယၢင်ႇ-3းလိၵ်ႈဢၼ်ပဵၼ်ၸၢၵ်ႈလိၵ်ႈၼႆ ဢဝ်တူဝ်လိၵ်ႈဢၼ်ပဵၼ်ၸၢၵ်ႈလိၵ်ႈၼၼ်ႉသေ လႅၵ်ႈလၢႆႈပဵၼ် တူဝ်လိၵ်ႈဢၼ်မီးၸၢၵ်ႈလိၵ်ႈၼၼ်ႉလႄႈ သင်ဝႃႈမီးၸၢၵ်ႈလိၵ်ႈဢၼ်မီးၸၢၵ်ႈလိၵ်ႈ 2 ဢၼ်လိူဝ်လိူဝ်ၼႆ ဢဝ်တူဝ်လိၵ်ႈဢၼ်ပဵၼ်ၸၢၵ်ႈလိၵ်ႈၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ် - fix_spaces (((\"Example\") == \"Example\" fix_spaces (((\"Example1\") == \"Example_1\" fix_spaces (((\"Example2\") == \"_Example_2\" fix_spaces (((\"Example 3\") == \"_Example-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ႁဵတ်းပၼ် function ဢၼ်ဢဝ် string ဢၼ်တၢင်တူဝ်ၸိုဝ်ႈ file သေ ၶိုၼ်းဢဝ် 'Yes' သင်ၸိုဝ်ႈ file မၼ်းထုၵ်ႇမႅၼ်ႈလႄႈ သင်ဢမ်ႇထုၵ်ႇမႅၼ်ႈ ၶိုၼ်းဢဝ် 'No'။ ၸိုဝ်ႈ file မၼ်းထုၵ်ႇမႅၼ်ႈ သင်လႄႈ သင်ဝႃႈ မီးလွင်ႈမၵ်းမၼ်ႈဢၼ်ၸွမ်းၼင်ႇတႂ်ႈၼႆႉၵူၺ်း: - ၸိုဝ်ႈ file မၼ်းတေဢမ်ႇလႆႈမီးတူဝ်ၼပ်ႉလိူဝ်သေသၢမ်တူဝ် ('0'-'9') ၼႂ်းၸိုဝ်ႈ file မၼ်းတေလႆႈမီးဝႆႉ ဢၼ်လဵဝ်ဢၼ်ပဵၼ် dot '.' - substring ဢၼ်တႄႇၼႃႈ dot ၼၼ်ႉတေဢမ်ႇလႆႈပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈၼွၼ်း၊ မၼ်းတေလႆႈတႄႇလူၺ်ႈ တူဝ်လိၵ်ႈ တူဝ်လိၵ်ႈ Latin ('a'-'z' လႄႈ 'A'Z'). - substring ဢၼ်တႄႇၼႃႈ dot ၼၼ်ႉတေလႆႈပဵၼ်ဢၼ်ၼိူင်ႈၼႂ်းဢၼ်ၼႆႉ: ['txt', 'exe', 'lld'] တူဝ်ယၢင်ႇ: file_name_check\"{example.txt.txt} # => 'yes'name_file_check\"{example.txt.txt.txt.txt.txt.txt.txt} => 'yes' => 'file_name_check'{example.txt.txt.txt.txt.txt.txt} # => 'no' (ၸိုဝ်ႈ file ၼၼ်ႉတေလႆႈတႄႇၼႃႈ တူဝ်လိၵ်ႈ Latin alpha)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ပိူင်ဢၼ်ၼႆႉ တေဢဝ် တူဝ်ၼပ်ႉတဵမ်တင်းမူတ်း ဢၼ်ပႃးၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉသေ ႁဵတ်းပဵၼ် တူဝ်ၵႂၢင်ႈ တူဝ်ၼပ်ႉတဵမ် သင်ၸိူဝ်ႉဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပႃးၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ၼမ်လိူဝ် 3 လႄႈ တေႁဵတ်းပဵၼ် တူဝ်ၵႂၢင်ႈ တူဝ်ၼပ်ႉဢၼ်ပႃးၼႂ်းသဵၼ်ႈမၢႆ သင်ၸိူဝ်ႉဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပႃးၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ၼမ်လိူဝ် 4 လႄႈ ဢမ်ႇၸႂ်ႈတူဝ်ၼပ်ႉ ဢၼ်ၼမ်လိူဝ် 3 ၼႆၸိုင် ပိူင်ဢၼ်ၼႆႉ တေဢမ်ႇလႅၵ်ႈလၢႆႈ တူဝ်ၼပ်ႉဢၼ်ပႃးၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉ ဢၼ်ၼမ်လိူဝ် 3 ဢမ်ႇၼၼ် 4 ၼၼ်ႉသေယဝ်ႉ ပိူင်ဢၼ်ၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပႃးၼႂ်းသဵၼ်ႈမၢႆတင်းမူတ်း တူဝ်ယၢင်ႇမၼ်း မိူၼ်ၼင်ႇ: တွၼ်ႈတႃႇ lst = [1,2,3] ဢၼ်ဢွၵ်ႇမၼ်းတေပဵၼ် 6 တွၼ်ႈတႃႇ lst = [] ဢၼ်ဢွၵ်ႇမၼ်းတေပဵၼ် 0 တွၼ်ႈတႃႇ lst = [-1,-5,2,-1,-5] ဢၼ်ဢွၵ်ႇမၼ်းတေပဵၼ် -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"တူဝ်ယၢင်ႇ1: Input: sentence = \"this is a test\" Output: \"is\" တူဝ်ယၢင်ႇ2: Input: sentence = \"let go for swimming\" Output: \"go for\" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"လွင်ႈႁဵတ်းသၢင်ႈဢၼ်တေႁဵတ်းႁႂ်ႈ တူဝ်ၼပ်ႉ x * n ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ငၢႆႈၼၼ်ႉ ပဵၼ်လွင်ႈႁဵတ်းသၢင်ႈဢၼ်တေႁဵတ်းႁႂ်ႈ တူဝ်ၼပ်ႉ x * n ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉ ပဵၼ်လွင်ႈႁဵတ်းသၢင်ႈဢၼ်တေႁဵတ်းႁႂ်ႈ တူဝ်ၼပ်ႉဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉ ပဵၼ် True လႄႈ တူဝ်ၼပ်ႉဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉ ပဵၼ် False။ တူဝ်ၼပ်ႉ x လႄႈ n ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ ဢၼ်လႆႈထူၼ်ႈ\"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ၸႅၵ်ႇပၼ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ၸွမ်းၼင်ႇ လွင်ႈၸႅၵ်ႇၽႄ တူဝ်ၼပ်ႉၶဝ်ၼၼ်ႉ။ ပေႃးမီး တူဝ်ၼပ်ႉတင်းၼမ် ဢၼ်မိူၼ်ၵၼ်ၼႆ ၸႅၵ်ႇၽႄပၼ် ၸွမ်းၼင်ႇ သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇၽႄဝႆႉၼၼ်ႉ။ တူဝ်ယၢင်ႇမၼ်း: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတင်းၼမ်သေ ႁဵတ်းပဵၼ် တူဝ်ၶဝ်ႈမၼ်းသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇလိူဝ် 10 လႄႈ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢွၼ်တၢင်းသုတ်းလႄႈ တူဝ်ၼပ်ႉလိုၼ်းသုတ်းတင်းသွင်ဢၼ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် (1, 3, 5, 7, 9) တူဝ်ယၢင်ႇမၼ်း specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ယဝ်ႉ။ တေလႆႈႁဵတ်း တူဝ်ၼပ်ႉတဵမ်ထူၼ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်မၵ်းမၼ်ႈဝႆႉ တီႈတၢင်းယၢဝ်းမၼ်းပဵၼ် n ၼၼ်ႉယူႇယဝ်ႉ။ တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉ i (1 ‰¤ i ‰¤ n) ၵူႈဢၼ်ၼၼ်ႉ ၵႃႈၶၼ် a[i] = i * i - i + 1 ၼၼ်ႉ တေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်တဵမ်ထူၼ်ႈ (a[i], a[j], a[k]) ၶွင် a တီႈဢၼ် i < j < k လႄႈ a[i] + a[j] + a[k] ၼႆႉပဵၼ် တူဝ်ၼပ်ႉ ဢၼ်တဵမ်ထူၼ်ႈ 3 ၼၼ်ႉယူႇယဝ်ႉ။ တူဝ်ယၢင်ႇ: Input: n = 5 Output: 1 Explanation: a = [1, 3, 7, 13, 21] ဢၼ်တဵမ်ထူၼ်ႈဢၼ်လဵဝ်ၼႆႉ ပဵၼ် (1, 7, 13) \"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''ၼႂ်းပိူင်လႅတ်ႇႁဝ်းၼႆႉ မီးၵျူဝ်ႇ 8 လုၵ်ႈ၊ ဢၼ်ၸမ်သေပိူၼ်ႈတီႈလႅတ်ႇၼၼ်ႉ ပဵၼ်ၵျူဝ်ႇရူဝ်ႇ၊ ဢၼ်ၸမ်သေပိူၼ်ႈၼၼ်ႉ ပဵၼ်ၵျူဝ်ႇရူဝ်ႇ၊ ပေႃးယဝ်ႉ ပဵၼ်ၵျူဝ်ႇရူဝ်ႇ၊ ပေႃးယဝ်ႉ ပဵၼ်ၵျူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇရူဝ်ႇ၊ ၵျ'''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆ တူဝ်ထႅဝ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉသေ လုတ်ႇပႅတ်ႈသေ ၶိုၼ်းဢဝ် တူဝ်ထႅဝ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း၊ သဵၼ်ႈမၢႆ ဢၼ်လႆႈမႃးၼၼ်ႉၵေႃႈ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ၸွမ်းၼင်ႇ ပိူင်ထၢၼ်ႈမၼ်းၼၼ်ႉသေ။ သဵၼ်ႈမၢႆၼႆႉ ပဵၼ်သဵၼ်ႈမၢႆ တူဝ်ထႅဝ်ၵူၺ်းသေ ဢမ်ႇလႆႈပဵၼ် တူဝ်ၼပ်ႉ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ လႄႈ မၼ်းတေၸၢင်ႈပႃး တူဝ်ၼပ်ႉ ဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။ ပိူင်ထၢၼ်ႈ သဵၼ်ႈမၢႆၼႆႉ ထုၵ်ႇလီပဵၼ် ၸွမ်းၼင်ႇ တၢင်းယၢဝ်း ၶေႃႈၵႂၢမ်းဢၼ်ၼိူင်ႈဢၼ်ၼၼ်ႉသေလႄႈ တေလႆႈၶိုၼ်း သဵၼ်ႈမၢႆ ဢၼ်လႆႈ ၸႅၵ်ႇဝႆႉ ၸွမ်းၼင်ႇ ပိူင်ထၢၼ်ႈၼၼ်ႉယဝ်ႉ။ ပေႃးၶေႃႈၵႂၢမ်း သွင်ၶေႃႈၼႆႉ တၢင်းယၢဝ်းမၼ်း မိူၼ်ၵၼ်ၼႆၸိုင် တေလႆႈ ၸႅၵ်ႇပၼ် သဵၼ်ႈမၢႆၼၼ်ႉ ၸွမ်းၼင်ႇ တူဝ်လိၵ်ႈ တူဝ်လိၵ်ႈယဝ်ႉ။ တူဝ်ဢိင်ၼႆႉ ထုၵ်ႇလီၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ တူဝ်ထႅဝ် ဢၼ်လႆႈ ၸႅၵ်ႇဝႆႉၼၼ်ႉၼႆယဝ်ႉ။ တေလႆႈ ထၢင်ႇဝႃႈ ၶေႃႈၵႂၢမ်းတင်းသဵင်ႈၼႆႉ တၢင်းယၢဝ်းမၼ်း မိူၼ်ၵၼ်ၼႆယူႇ။ တူဝ်ယၢင်ႇမၼ်း: assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert_sort[\"ab\", \"aaaa\", \"cd\" => \"cd\")\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"ပိူင်ၵၢၼ်ဢၼ်ငၢႆႈ ဢၼ်တေလႆႈၶိုၼ်း ၵႃႈၶၼ်ၶွင် x သင်ဝႃႈ n ၼႆႉပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ လႄႈ တေလႆႈၶိုၼ်း ၵႃႈၶၼ်ၶွင် y သင်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ။ တူဝ်ယၢင်ႇ: တွၼ်ႈတႃႇ x_or_y(7, 34, 12) == 34 တွၼ်ႈတႃႇ x_or_y(15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''ပေႃးဝႃႈႁဝ်းလႆႈပၼ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉၼႆ ႁဝ်းတေလႆႈၶိုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၸိူဝ်းၼၼ်ႉၶိုၼ်းမႃး။ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢမ်ႇၼၼ် ဢမ်ႇပဵၼ် တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉၵေႃႈ ႁဝ်းတေဢမ်ႇလႆႈႁဵတ်း။ double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 သင်ဝႃႈသဵၼ်ႈမၢႆဢၼ်သႂ်ႇဝႆႉၼၼ်ႉ ဢမ်ႇမီးသင်ၼႆ ႁဝ်းတေလႆႈၶိုၼ်းၶိုၼ်း 0. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉ ပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈၶူၼ်ႉႁႃတူၺ်း လွင်ႈဢၼ်ႁဝ်းလႆႈႁၼ်မႃးၼၼ်ႉသေယဝ်ႉ တေလႆႈႁၼ်ဝႃႈ မၼ်းပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈဢၼ်ၼႆႉပဵၼ်လွင်ႈႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉ ပဵၼ်လွင်ႈႁဝ်းလႆႈႁူႉဝႆႉၼၼ်ႉယဝ်ႉ ဢၼ်ၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈၼႆႉပဵၼ်လွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈလွင်ႈ\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ပေႃးဝႃႈႁဝ်းလႆႈပၼ်ၸိုဝ်ႈ class (string) လႄႈ သဵၼ်ႈမၢႆ extension မၼ်းၼႆၸိုင် တေလႆႈၸႂ်ႉ extension မၼ်းသေ တၢင်ႇပၼ် class တၢင်ႇဢၼ်။ ႁႅင်း extension မၼ်းၼႆႉ တေလႆႈမိူၼ်ၼင်ႇ CAP ပဵၼ်တူဝ်လိၵ်ႈ တူဝ်ယႂ်ႇ ၼႂ်းၸိုဝ်ႈ extension မၼ်းလႄႈ SM ပဵၼ်တူဝ်လိၵ်ႈ တူဝ်လဵၵ်ႉ ၼႂ်းၸိုဝ်ႈ extension မၼ်းၼႆ တေလႆႈၸႂ်ႉ တူဝ်ၸႅၵ်ႇ CAP - SM သေ တၢင်ႇပၼ်။ တေလႆႈႁႃ တူဝ်ၸႅၵ်ႇဢၼ်ႁႅင်းသေပိူၼ်ႈသေ ၶိုၼ်းဢဝ် string ဢၼ်မိူၼ်ၼင်ႇ ClassName.StrongestExtensionName ၼႆႉသေ တၢင်ႇပၼ်။ ပေႃးဝႃႈ မီးတူဝ်ၸႅၵ်ႇဢၼ်ႁႅင်းမိူၼ်ၵၼ် သွင်ဢၼ်ၼႆ တေလႆႈလိူၵ်ႈ တူဝ်ၸႅၵ်ႇဢၼ်ဢွၵ်ႇမႃး ဢွၼ်တၢင်းသုတ်း ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ။ တူဝ်ယၢင်ႇမၼ်း သင်ဝႃႈႁဝ်းလႆႈပၼ် \"Slices\" မိူၼ်ၼင်ႇ class လႄႈ သဵၼ်ႈမၢႆ extension: ['SEviviRNGSliCes', 'Cheese', 'StuFfed'] ၼႆ တေလႆႈၶိုၼ်းဢဝ် 'Slices.SEviRNGSliCes' ယွၼ်ႉဝႃႈ တူဝ်ၸႅၵ်ႇဢၼ်ႁႅင်းသေပိူၼ်ႈၼႆႉ ပဵၼ် 'SviRNGSliCes' လႄႈ 'SviRNGSliCes' ၼႆႉ ပဵၼ် 'SviRNGSliCes' (My) ၼႆယဝ်ႉ၊ တူဝ်ယၢင်ႇမၼ်း 'AA'_StrongestExtension' = 'AA' (for 'Strongest_class'); တူဝ်ယၢင်ႇမၼ်း 'AA'_Strongest' = 'Class'_Extension');\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"သင်ဝႃႈ ၶေႃႈၵႂၢမ်းသွင်ဢၼ် ဢမ်ႇၼၼ် လွင်ႈလႅၵ်ႈလၢႆႈမၼ်းပဵၼ် တူဝ်ထႅဝ်လိၵ်ႈ တီႈၶေႃႈၵႂၢမ်းဢွၼ်တၢင်းသုတ်း cycpattern_check{\"abcd\",\"abd\") => false cycpattern_check{\"hello\",\"ell\") => true cycpattern_check{\"whassup\",\"psus\") => false cycpattern_check{\"abab\",\"baa\") => true cycpattern_check{\"efef\",\"eeff\") => false cycpattern_check{\"himens\",\"simen\") => true \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"တူဝ်ယၢင်ႇ: even_odd_count (-1) ==> (1, 1) even_odd_count (-12) ==> (1, 2)\"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"ပေႃးဝႃႈပၼ်တူဝ်ၼပ်ႉတဵမ်ဢၼ်မီးလွင်ႈသမ်းယဵၼ်ၼႆ ဢဝ်တူဝ်ၼပ်ႉရေႃးမ ဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉပဵၼ် string သေ ဢဝ်တူဝ်လိၵ်ႈလဵၵ်ႉသေ ၶိုၼ်းပၼ်။ လွင်ႈမၵ်းမၼ်ႈ: 1 <= num <= 1000 တူဝ်ယၢင်ႇ: >>> int_to_mini_roman(19) == 'xix' >>> int_to_mini_roman(152) == 'clii' >>> int_to_mini_roman(426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ပေႃးဝႃႈသၢမ်ၽၢႆႇ ပဵၼ်သၢမ်ၸဵင်ႇၵႅၼ်ၵႅၼ်ၼႆ တေလႆႈၶိုၼ်း True၊ ပေႃးဢမ်ႇၼၼ် တေလႆႈၶိုၼ်း False။ သၢမ်ၸဵင်ႇၵႅၼ်ၵႅၼ်ၵႅၼ်ၼႆႉ ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မီးၸဵင်ႇဢၼ်သိုဝ်ႈ ဢမ်ႇၼၼ် 90 တီႇၵရီႇ။ တူဝ်ယၢင်ႇ: right_angle_triangle ((3, 4, 5) == true right_angle_triangle ((1, 2, 3) == false '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"တႅမ်ႈပၼ် function ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆ string ဢၼ်ၼိုင်ႈ။ သဵၼ်ႈမၢႆၼႆႉ ပႃးဝႆႉ ၶေႃႈၵႂၢမ်းဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ်။ ၶိုၼ်းဢဝ် ၶေႃႈၵႂၢမ်းဢၼ်မီး တူဝ်လိၵ်ႈဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၼမ်သေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ်။ ပေႃးဝႃႈ သဵၼ်ႈမၢႆမၼ်း မီးၼမ်သေပိူၼ်ႈၼႆ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈဢၼ်မႃးတီႈ ဢွၼ်တၢင်းသုတ်း ၸွမ်းၼင်ႇ ပိူင်ၶပ်ႉၵႂၢမ်းၼၼ်ႉ ၶိုၼ်းဢဝ်။ find_max ((([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"တူဝ်ယၢင်ႇမၼ်း: * ၵိၼ်(5, 6, 10) -> [11, 4] * ၵိၼ်(4, 8, 9) -> [12, 1] * ၵိၼ်(1, 10, 10) -> [11, 0] * ၵိၼ်(2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need: integer the number of carrots that you need to eat. @remaining: integer the number of remaining carrots in stock Constrain: * 0= <= 0 * 1000 <= 0 * 0 = <= 1000 ပႆႇလႆႈၵိၼ်ၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵႆႇၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵၵ\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"လွင်ႈႁဵတ်းသၢင်ႈ algebra ဢၼ်လမ်ႇလွင်ႈတႄႉ ပဵၼ် လွင်ႈထႅမ်သႂ်ႇ (+) လွင်ႈထွၼ် (-)) လွင်ႈၵုၼ်း (*) လွင်ႈၸႅၵ်ႇၽႄ (/) လွင်ႈတႅၵ်ႈ တူဝ်တႅၼ်း (**) တူဝ်ယၢင်ႇ: လွင်ႈႁဵတ်းသၢင်ႈ operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 ၶေႃႈတွင်း: တၢင်းယၢဝ်း list of operator ၼႆႉ မိူၼ်တၢင်းယၢဝ်း list of operand minus one ဢၼ်ႁဵတ်းသၢင်ႈ list ၼႆႉ ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်း ဢၼ်ႁဵတ်းသၢင်ႈ list ၼၼ်ႉ မီး operator ၼိုင်ႈၵေႃႉ တီႈဢေႇသုတ်း လႄႈ list of operand ၼၼ်ႉ မီး operands သွင်ၵေႃႉ တီႈဢေႇသုတ်း\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"သင်ဝႃႈ s[i] ပဵၼ်တူဝ်လိၵ်ႈၼႆ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ် ဢမ်ႇၼၼ် လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉသေ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်ၼၼ်ႉလႄႈ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်တူဝ်ၼၼ်ႉလႄႈ ဢဝ်တူဝ်ဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်ဢၼ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ်ၵႂႃႇ\"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"သင်ဝႃႈ လႆႈပၼ် string 'text' ၼႆၸိုင် ၶိုၼ်းဢဝ် md5 hash equivalent string မၼ်းၼၼ်ႉ ၶိုၼ်းဢဝ်မႃး။ သင်ဝႃႈ 'text' ၼႆႉ ပဵၼ် string ဢၼ်ဢမ်ႇမီး တူဝ်ၼၼ်ႉၼႆ ၶိုၼ်းဢဝ် None ၼၼ်ႉမႃး။ >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "shn_Mymr",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"ပေႃးဝႃႈႁဝ်းပၼ်တူဝ်ၼပ်ႉတဵမ် a လႄႈ b သွင်တူဝ်ၼႆ ႁဝ်းတေၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇပဵင်း ၼႂ်းၵႄႈ a လႄႈ b ၼၼ်ႉမႃးၸွမ်းၼင်ႇပိူင်ဢၼ်ၶိုၼ်ႈမႃး တူဝ်ယၢင်ႇမၼ်း: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]