[
    {
        "task_id": "HumanEval/0",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཀྱི་བེ་ཀཊར་འདི་ནང་ ཨང་གྲངས་གཉིས་རེ་འདི་ བྱིན་ཡོད་པའི་ཚད་གཞི་ལས་ སྦོ་ལོགས་ཁར་ཡོད་ག་མེད་བལྟ་། >>> has_close_elements{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}{n}}{n}}{n}{n}}{n}{n}}{n}{n}{n}}}{n}{n}}{n}{n}}}{n}{n}}}{n}}}}{n}{n}}}{n}}{n}}{n}}}{n}}}{n}{n}}}{n}}}}}{n}}{n}}}}}}}{n}}}}}}}}}}}}}{n}}}}}}}}}}}}\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n",
        "canonical_solutions": "bool has_close_elements(std::vector<float> numbers, float threshold) {\n    std::sort(numbers.begin(), numbers.end());  // Sort the numbers in ascending order\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (std::abs(numbers[i] - numbers[i - 1]) < threshold) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = has_close_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/1",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་ལས་འགན་ནང་ ནང་ཐིག་འདི་ ནང་ཐིག་ནང་ཡོད་པའི་ཁྱད་ཚབ་སྡེ་ཚན་ལེ་ཤ་ཡོད་པའི་ཐིག་ཁྲམ་ཨིན། ཁྱོད་ཀྱི་དམིགས་ཡུལ་འདི་ སྡེ་ཚན་དེ་སོ་སོར་སྦེ་ སྐུད་པ་སོ་སོར་སྦེ་ དབྱེ་བ་ཕྱེ་ནི་དང་ འདི་ཚུ་གི་ ཝེ་ཊར་ལོག་གཏང་ནི་དེ་ཨིན། སྡེ་ཚན་སོ་སོར་འདི་ ཚད་ལྡན་ (སྒོ་སྒྲིག་རེ་རེ་གི་སྒོ་སྒྲིག་འདི་ ལེགས་ཤོམ་སྦེ་བསྡམ་ཡོདཔ་) དང་ གཅིག་གིས་གཅིག་ལུ་ ནང་ཐིག་ནང་མ་སྡམ་པར་བཞག་། ནང་ཐིག་ནང་ས་སྟོང་ཡོད་མེད་བལྟ་། >>> separate_paren_groups (((\"( ) (() (()))))))) (std::vector<std::string> (((((std::string) \")\", ((((())\", (std::string) \"((()))))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n",
        "canonical_solutions": "std::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> groups;\n    std::string current_group;\n    int balance = 0;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') continue;  // Ignore spaces\n\n        current_group += ch;\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n            if (balance == 0) {  // Found a balanced group\n                groups.push_back(current_group);\n                current_group.clear();\n            }\n        }\n    }\n\n    return groups;\n}",
        "test": "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"(()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/2",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འོག་ལུ་ཡོད་པའི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་སྦེ་ཁ་ཕྱེ་ཚུགས། (ཨང་གྲངས་འདི་ཨང་གྲངས་ལས་ སྦོམ་ཤོས་ཅིག་སྦེ་) དེ་ལས་ ཨང་གྲངས་བཅུ་ཆ་སྦེ་ཁ་ཕྱེ་ཚུགས། (ལྷག་ལུས་ཆ་ཤས་འདི་ ༡ ལས་ ཆུང་ཤོས་ཅིག་སྦེ་) ཨང་གྲངས་ཀྱི་ཨང་གྲངས་བཅུ་ཆ་འདི་སླར་ལོག་འབདཝ་ཨིན།\nfloat truncate_number(float number) {\n",
        "canonical_solutions": "float truncate_number(float number) {\n    return number - std::floor(number);\n}",
        "test": "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5f)) == (0.5f));\n    assert(candidate((1.25f)) == (0.25f));\n    assert(candidate((123.0f)) == (0.0f));\n}\n"
    },
    {
        "task_id": "HumanEval/3",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་དངུལ་ཁང་གི་རྩིས་ཁྲ་ནང་ དངུལ་བཙུགས་དང་བཏོན་པའི་ལཱ་གི་ ཝི་ཅཊར་ཅིག་ཐོབ་སྟེ་ འདི་ཡང་ ༠་གི་གནས་གོང་ལས་ འགོ་བཙུགས་འོང་། ཁྱོད་ཀྱི་ལཱ་འགན་འདི་ ཝི་ཅཊར་དེ་ ༠་ལས་མར་བབས་སོང་ཡོདཔ་དང་ དེ་བསྒང་ལས་ལས་ལས་འགན་འདི་བདེན་པ་སྦེ་ལོག་འོང་དགོཔ་ཨིན། དེ་མེན་པ་ཅིན་དེ་རྫུས་མ་སྦེ་ལོག་འོང་དགོཔ་ཨིན། >>> below_zero(((std::vector<long>({long) 1, (long) 2, (long) 3}))) (རྫུས་མ་) >>> below_zero((std::vector<long>({long) 1, (long) 2, (long) -4, (long) 5} (true))\nbool below_zero(std::vector<long> operations) {\n",
        "canonical_solutions": "bool below_zero(std::vector<long> operations) {\n    long balance = 0;\n    for (long op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/4",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ནང་བསྐྱོད་ཨང་གྲངས་ཀྱི་ ཝི་ཅཊ་ཅིག་ལུ་ གནས་གོང་གི་བར་མཚམས་ཀྱི་མཐའ་འཁོར་ལུ་ Mean Absolute Deviation རྩིས་སྟོནམ་ཨིན། Mean Absolute Deviation འདི་ དབྱེ་བ་རེ་དང་ལྟེ་བ་ (གནས་གོང་འདི་ནང་ལུ་) གི་བར་མཚམས་ཀྱི་བར་མཚམས་ཁྱད་པར་ཨིན། MAD = average ཨིན། x - x_mean ཨིན། >>> mean_absolute_deviation (((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n",
        "canonical_solutions": "float mean_absolute_deviation(std::vector<float> numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) / numbers.size();\n    float mad = std::accumulate(numbers.begin(), numbers.end(), 0.0f, \n                                [mean](float sum, float x) { return sum + std::abs(x - mean); }) \n                / numbers.size();\n    return mad;\n}",
        "test": "}\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n}\n"
    },
    {
        "task_id": "HumanEval/5",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ནང་བསྐྱོད་བེ་ཊར་གྱི་རིམ་པ་གཉིས་ཆ་རའི་བར་ནའི་ཨང་གྲངས་ 'delimeter'འདི་བཙུགས་ `numbers' >>> intersperse((std::vector<long>()), (4)) (std::vector<long>()) >>> intersperse((std::vector<long>({long) 1, (long) 2, (long) 3})), (4)) (std::vector<long>({long) 1, (long) 4, (long) 2, (long) 4, (long) 3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n",
        "canonical_solutions": "std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n    if (numbers.empty()) return numbers;\n\n    std::vector<long> result;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));\n}\n"
    },
    {
        "task_id": "HumanEval/6",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་ལས་འགན་འདི་ནང་ ནང་ཐིག་གི་སྡེ་ཚན་ལེ་ཤ་ཅིག་ཡོད་པའི་ ནང་ཐིག་ནང་ཡོད་པའི་ ཕར་ནེཊི་སི་ཚུ་ བར་སྟོང་གིས་སོ་སོར་འབད་ཡོདཔ་ཨིན། སྡེ་ཚན་རེ་རེ་བཞིན་དུ་ལུ་ ནང་ཐིག་ནང་ཡོད་པའི་ ཕར་ནེཊི་སི་གི་གནས་ཚད་འདི་འཐོན་འོང་། དཔེར་ན་ (() (()) ནང་ མཐོ་ཤོས་རང་ ཌི་བི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌི་ཌ\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n",
        "canonical_solutions": "std::vector<long> parse_nested_parens(std::string paren_string) {\n    std::vector<long> depths;\n    long current_depth = 0, max_depth = 0;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') {\n            if (max_depth > 0) {\n                depths.push_back(max_depth);\n                max_depth = 0;\n            }\n            current_depth = 0;\n        } else if (ch == '(') {\n            current_depth++;\n            max_depth = std::max(max_depth, current_depth);\n        } else if (ch == ')') {\n            current_depth--;\n        }\n    }\n\n    if (max_depth > 0) {\n        depths.push_back(max_depth);\n    }\n\n    return depths;\n}",
        "test": "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
    },
    {
        "task_id": "HumanEval/7",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string གི་ནང་འདྲེན་གྱི་བེ་ཊར་འདི་ string གི་འོག་གི་ string ཚུ་ནང་རྐྱངམ་ཅིག་བཙུགས། >>> filter_by_substring((std::vector<std::string>()), (\"a\")) (std::vector<std::string>()) >>> filter_by_substring(((std::vector<std::string>({(std::string) \"abc\", (std::string) \"bacd\", (std::string) \"cde\", (std::string) \"array\"})), (\"a\") (std::vector<std::string>(({(std::string) abc\", (std::string) \"bacd\", (std::string) \"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n",
        "canonical_solutions": "std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n    std::vector<std::string> result;\n    for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"prune\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/8",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་བུའི་ ཝི་ཅཊ་ཅིག་གི་དོན་ལུ་ ཨང་གྲངས་ཧྲིལ་བུའི་བསྡོམས་དང་ དབྱེ་གཞི་འདི་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་ཧྲིལ་བུའི་བསྡོམས་དེ་ ༠ དང་ དབྱེ་གཞི་སྟོང་པ་འདི་ ༡ སྦེ་ཆ་མཉམ་ཨིན། >>> sum_product (((std::vector<long> ((((((std::make_tuple ((0, 1)) >>> sum_product (((std::vector<long> (((long) 1, (long) 2, (long) 3, (long) 4)) (std::make_tuple (((10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);\n    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());\n    return std::make_tuple(sum, product);\n}",
        "test": "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));\n}\n"
    },
    {
        "task_id": "HumanEval/9",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་བུའི་ ཝི་ཅཊཱརཅིག་ལས་ ཚུད་དེ་ཡོད་པའི་ ཝི་ཅཊཱརཅིག་ཐོན་འོང་། >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2}))) (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long> result;\n    long max_so_far = LONG_MIN;\n\n    for (long num : numbers) {\n        max_so_far = std::max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n}\n"
    },
    {
        "task_id": "HumanEval/10",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གྲུབ་འབྲས་འདི་འཇམ་ཏོང་ཏོ་ཨིན། - གྲུབ་འབྲས་འདི་ palindrome སྦེ་ཡོད་པའི་ string གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། - གྲུབ་འབྲས་འདི་ palindrome གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། - གྲུབ་འབྲས་འདི་ palindromic གི་ཤུལ་མ་གི་མིང་འདི་ string གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། >>> make_palindrome (((\"\")) (\"\") >>> make_palindrome (((\"cat\")) (\"catac\") >>> make_palindrome (((\"cata\")) (\"catac\")\nstd::string make_palindrome(std::string string) {\n",
        "canonical_solutions": "std::string make_palindrome(std::string string) {\n    auto is_palindrome = [](const std::string &s) {\n        return std::equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());\n    };\n\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (is_palindrome(string.substr(i))) {\n            std::string prefix = string.substr(0, i);\n            std::reverse(prefix.begin(), prefix.end());\n            return string + prefix;\n        }\n    }\n\n    return string;\n}",
        "test": "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"jerry\")) == (\"jerryrrej\"));\n}\n"
    },
    {
        "task_id": "HumanEval/11",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ནང་བསྐྱོད་འདི་ string a དང་ b གཉིས་ཨིན་ འདི་ནང་ 1 དང་ 0 ཚུ་རྐྱངམ་ཅིག་ཡོདཔ་ཨིན། འ་ནི་ནང་བསྐྱོད་ནང་ binary XOR འདི་འབད་ཞིནམ་ལས་ string སྦེ་ལོག་འབདཝ་ཨིན།\nstd::string string_xor(std::string a, std::string b) {\n",
        "canonical_solutions": "std::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
    },
    {
        "task_id": "HumanEval/12",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string གི་བེ་ཀཊར་ནང་ལས་ ཚེ་རིང་ཤོས་དེ་སླར་ལོག་འབད། ཚེ་རིང་འདྲ་མཉམ་གྱི་བེ་ཀཊར་ལེ་ཤ་ཡོད་པ་ཅིན་ དང་པ་དེ་སླར་ལོག་འབད། ནང་བསྐྱོད་བེ་ཀཊར་སྟོངམ་ཡོད་པ་ཅིན་ ག་ནི་ཡང་སླར་ལོག་མི་འབད་ >>> longest(((std::vector<std::string>())) std::nullopt >>> longest((std::vector<std::string>{(std::string) \"a\", (std::string) \"b\", (std::string) \"c\"}))) \"a\" >>> longest(((std::vector<std::string>({(std::string) \"a\", (std::string) \"bb\", (stdstring) \"ccc\"}))) \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n",
        "canonical_solutions": "std::optional<std::string> longest(std::vector<std::string> strings) {\n    if (strings.empty()) return std::nullopt;\n\n    return *std::max_element(strings.begin(), strings.end(), \n                             [](const std::string& a, const std::string& b) {\n                                 return a.size() < b.size();\n                             });\n}",
        "test": "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
    },
    {
        "task_id": "HumanEval/13",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་པོ་གཉིས་ a དང་ b གི་སྤྱིར་བཏང་ཆ་བགོས་སྦོམ་ཤོས་འདི་སླར་ལོག་འབདཝ་ཨིན། >>> greatest_common_divisor (((3), (5)) (1) >>> greatest_common_divisor (((25), (15)) (5)\nlong greatest_common_divisor(long a, long b) {\n",
        "canonical_solutions": "long greatest_common_divisor(long a, long b) {\n    return std::gcd(a, b);\n}",
        "test": "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/14",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ནང་བསྐྱོད་ཐིག་གི་སྔོན་འཇུག་ག་ར་ལས་ ཆུང་ཤོས་ལས་ སྦོམ་ཤོས་ཚུན་གྱི་སྔོན་འཇུག་གི་བེ་ཊར་སླར་ལོག་འབདཝ་ཨིན། (all_prefixes) (std::vector<std::string>({(std::string) \"a\", (std::string) \"ab\", (std::string) \"abc\"})\nstd::vector<std::string> all_prefixes(std::string string) {\n",
        "canonical_solutions": "std::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 1; i <= string.size(); ++i) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return prefixes;\n}",
        "test": "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/15",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ༠ ལས་འགོ་བཙུགས་ཏེ་ n ཚུན་གྱི་བར་ནའི་ས་སྒོ་ནང་ཐིག་ཁྲམ་ཡོད་པའི་ string སླར་ལོག་འབདཝ་ཨིན། >>> string_sequence((0)) (\"0\") >>> string_sequence((5)) (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\n",
        "canonical_solutions": "std::string string_sequence(long n) {\n    std::ostringstream oss;\n    for (long i = 0; i <= n; ++i) {\n        if (i > 0) oss << \" \";\n        oss << i;\n    }\n    return oss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
    },
    {
        "task_id": "HumanEval/16",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string ཅིག་བྱིན་པ་ཅིན་ འདི་ནང་ལུ་ཁྱད་པར་ཅན་ཡིག་འབྲུ་ག་དེ་ཅིག་ཡོདཔ་ཨིན་ན་འཚོལ་ (ཡིག་འབྲུ་ཆེ་ཆུང་དང་ཆུང་ཆུང་ག་དེ་ཅིག་ཨིན་རུང་) >>> count_distinct_characters (((\"xyzXYZ\")) (3) >>> count_distinct_characters (((\"Jerry\")) (4)\nlong count_distinct_characters(std::string string) {\n",
        "canonical_solutions": "long count_distinct_characters(std::string string) {\n    std::unordered_set<char> distinct_chars;\n    for (char ch : string) {\n        distinct_chars.insert(std::tolower(ch));\n    }\n    return distinct_chars.size();\n}",
        "test": "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
    },
    {
        "task_id": "HumanEval/17",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་ལས་འགན་འདི་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་རྣམ་པ་ནང་ལུ་ སྒྲ་དབྱངས་ཀྱི་ས་ཐག་འདི་བཙུགསཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཨེས་སི་ཀི་ཨའི་རྣམ་པ་ནང་ལུ་ ཨེགསི་ཨའི་གི་ས་ཐག་གི་ ཝེ་ཀཊར་འདི་ བཀྲམ་སྟོན་འབད་དགོཔ་ཨིན། འདི་ནང་ལུ་ མན་ངག་འདི་ཡོདཔ་ཨིན། 'o' note, lasts four beats 'o. 256' - lasts half note, lasts two beats 'o. 256' - quater note, lasts one beat >>> parse_music.\nstd::vector<long> parse_music(std::string music_string) {\n",
        "canonical_solutions": "std::vector<long> parse_music(std::string music_string) {\n    std::vector<long> beats;\n    std::istringstream iss(music_string);\n    std::string note;\n    \n    while (iss >> note) {\n        if (note == \"o\") beats.push_back(4);\n        else if (note == \"o|\") beats.push_back(2);\n        else if (note == \".|\") beats.push_back(1);\n    }\n\n    return beats;\n}",
        "test": "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n"
    },
    {
        "task_id": "HumanEval/18",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གཞི་རྟེན་ཐིག་ཁྲམ་ནང་ལུ་ ཚར་ག་དེ་ཅིག་རང་ འོག་ཐིག་ཅིག་ཐོབ་ཚུགས་ག་འཚོལ་གི། མཉམ་སྡེབ་ཀྱི་གནད་དོན་ཚུ་རྩིས་གི། >>> how_many_times((\"\"), (\"a\")) (0) >>> how_many_times(\"aaa\"), (\"a\")) (3) >>> how_many_times(\"aaaa\"), (\"aa\") (3)\nlong how_many_times(std::string string, std::string substring) {\n",
        "canonical_solutions": "long how_many_times(std::string string, std::string substring) {\n    if (substring.empty()) return 0;\n    \n    long count = 0;\n    size_t pos = 0;\n    \n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n        pos++;  // Move one position forward to count overlapping occurrences\n    }\n    \n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/19",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ནང་བསྐྱོད་འདི་ ས་སྒོ་ནང་ཐིག་ཁྲམ་ཡོད་པའི་ ཨང་གྲངས་ཐིག་ཁྲམ་ཅིག་ཨིན་ ' ༠' ལས་ ' ༩' ཚུན་ཨིན། གདམ་ཁ་ཚུ་ ' ༠ ' ༡ ' ༢ ' ༣ ' ༤ ' ༥ ' ༦ ' ༧ ' ༨ ' ༩ 'ཨིན། ཨང་གྲངས་ཚུ་ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ལུ་རིམ་སྒྲིག་འབད་ཡོད་པའི་ཐིག་ཁྲམ་དེ་སླར་ལོག་འབདཝ་ཨིན། >>> sort_numbers((\"three one five\")) (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\n",
        "canonical_solutions": "std::string sort_numbers(std::string numbers) {\n    std::unordered_map<std::string, int> num_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    std::unordered_map<int, std::string> rev_map = {\n        {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"},\n        {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}\n    };\n\n    std::istringstream iss(numbers);\n    std::vector<int> num_list;\n    std::string word;\n\n    while (iss >> word) {\n        num_list.push_back(num_map[word]);\n    }\n\n    std::sort(num_list.begin(), num_list.end());\n\n    std::ostringstream oss;\n    for (size_t i = 0; i < num_list.size(); ++i) {\n        if (i > 0) oss << \" \";\n        oss << rev_map[num_list[i]];\n    }\n\n    return oss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
    },
    {
        "task_id": "HumanEval/20",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཚུ་ (ཉུང་ཤོས་ཨང་གྲངས་གཉིས་ལས་བརྒལ་མི་) གི་ ཝི་ཅཊ་ཅིག་ལས་ གཅིག་དང་གཅིག་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་པའི་ ཨང་གྲངས་གཉིས་གདམ་ཁ་རྐྱབ་སྟེ་ ལོག་གཏང་ནི་དང་ འདི་ཚུ་རིམ་པ་བཞིན་དུ་ལོག་གཏང་ (ཨང་གྲངས་ཆུང་ཤོས་དང་སྦོམ་ཤོས་) ། >>> find_closest_elements (_f) (float) 2.0f, (float) 3.0f, (float) 4.0f, (float) 5.0f, (float) 2.2f)) (std::make_tuple (_f) 2.0f, 2.2f)) >>> find_closest_elements (_f) (std::vector (_f) 2.0f, (float) 2.0f, (float) 3.0f, (float) 4.0f, (float) 5.0f, (float) 2.0f)) (std::make_tuple (_f) 2.0f, (float) 2.0)\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n",
        "canonical_solutions": "std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float num1 = 0, num2 = 0;\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            num1 = numbers[i - 1];\n            num2 = numbers[i];\n        }\n    }\n\n    return std::make_tuple(num1, num2);\n}",
        "test": "}\nint main() {\n    auto candidate = find_closest_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));\n}\n"
    },
    {
        "task_id": "HumanEval/21",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཀྱི་བེ་ཊར་ (ཉུང་ཤོས་རང་ ཨེ་རེ་གཉིས་ལས་) བྱིན་ཡོད་པ་ཅིན་ བེ་ཊར་དེ་ནང་ལུ་ ཐིག་ཁྲམ་འགྱུར་བཅོས་ཅིག་ལག་ལེན་འཐབ་སྟེ་ ཨང་གྲངས་ཆུང་ཤོས་དེ་ ༠ དང་སྦོམ་ཤོས་དེ་ ༡ ལུ་འགྱུར་བཅོས་འབདཝ་ཨིན།\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n",
        "canonical_solutions": "std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n\n    if (min_val == max_val) {\n        std::fill(numbers.begin(), numbers.end(), 0.0f);\n        return numbers;\n    }\n\n    for (float &num : numbers) {\n        num = (num - min_val) / (max_val - min_val);\n    }\n\n    return numbers;\n}",
        "test": "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n}\n"
    },
    {
        "task_id": "HumanEval/22",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཕིལཊར་འདི་ནང་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་དོན་ལུ་རྐྱངམ་གཅིག་ cppthon གནས་གོང་ཚུ་བཙུགསཔ་ཨིན། >>> filter_integers((std::vector<std::any>({(std::string) \"a\", (std::string)3.14f, (std::string)5}))) (std::vector<long>({(long)5})) >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::<long,map>), std::vector<long>(()))) (std::vector<long>({(long) 1, (long) 2, (long) 3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n",
        "canonical_solutions": "std::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (const auto& val : values) {\n        if (val.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(val));\n        } else if (val.type() == typeid(int)) {\n            result.push_back(std::any_cast<int>(val));\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/23",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string_length (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_)\nlong string_length(std::string string) {\n",
        "canonical_solutions": "long string_length(std::string string) {\n    return string.length();\n}",
        "test": "}\nint main() {\n    auto candidate = string_length;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"asdasnakj\")) == (9));\n}\n"
    },
    {
        "task_id": "HumanEval/24",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ n ཅིག་ལུ་ ཨང་གྲངས་སྦོམ་ཤོས་ཅིག་ n ལུ་ཆ་བགོས་འབད་ཡོད་པའི་ཨང་གྲངས་ཆུང་ཤོས་འདི་འཚོལ་ག >>> largest_divisor ((((15)) (5)\nlong largest_divisor(long n) {\n",
        "canonical_solutions": "long largest_divisor(long n) {\n    for (long i = n / 2; i > 0; --i) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}",
        "test": "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
    },
    {
        "task_id": "HumanEval/25",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་མཐའ་དག་གི་གཞི་གྲངས་ཚུ་ ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ཀྱི་རིམ་པ་ལུ་ལོག་གཏང་། ཆ་ཤས་རེ་རེ་ལུ་ ཆ་ཤས་ཉུང་ཤོས་ནང་ ཚར་ག་དེ་མང་འོང་ག་དང་བསྟུན་པའི་གྱངས་ཁ་འདི་ ཕྱོགས་སྒྲིག་འབད་དགོཔ་ཨིན། ཨང་གྲངས་ནང་ཐོ་བཀོད་འབད་མི་དེ་ ཆ་ཤས་ཆ་ཤས་ཆ་ཤས་ག་ར་གི་གྱངས་ཁ་དང་འདྲན་འདྲ་དགོཔ་ཨིན།\nstd::vector<long> factorize(long n) {\n",
        "canonical_solutions": "std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}",
        "test": "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/26",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཊ་ནང་ལས་ ཚར་གཅིག་ལས་ལྷག་སྟེ་ འབྱུང་མི་ཆ་མཉམ་བཏོན་གཏང་། ཨང་གྲངས་ཚུ་ནང་འཇུག་པའི་རིམ་པ་གཅིག་སྦེ་བཞག་། >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4}))) (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n",
        "canonical_solutions": "std::vector<long> remove_duplicates(std::vector<long> numbers) {\n    std::unordered_map<long, int> freq;\n    for (long num : numbers) {\n        freq[num]++;\n    }\n\n    std::vector<long> result;\n    for (long num : numbers) {\n        if (freq[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n}\n"
    },
    {
        "task_id": "HumanEval/27",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string ཅིག་ལུ་ཡིག་འབྲུ་ཆུང་བ་འདི་ཡིག་འབྲུ་སྦོམ་དང་ ཆུང་བ་འདི་ཡིག་འབྲུ་སྦོམ་སྦེ་བསྒྱུར་གཏང་། >>> flip_case ((((\"Hello\")) (\"hELLO\")\nstd::string flip_case(std::string string) {\n",
        "canonical_solutions": "std::string flip_case(std::string string) {\n    for (char &ch : string) {\n        if (std::islower(ch)) {\n            ch = std::toupper(ch);\n        } else if (std::isupper(ch)) {\n            ch = std::tolower(ch);\n        }\n    }\n    return string;\n}",
        "test": "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
    },
    {
        "task_id": "HumanEval/28",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string གི་ ཝེ་ཀཊར་ཚུ་ string གཅིག་ལུ་བསྡོམས་ >>> ཝེ་ཀཊར་ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std::string> ཚུ་<std:string> ཚུ་<std:string> ཚུ་<std:string> ཚུ་<std:> ཚུ་<std:> ཚུ་<std:> ཚུ་>\nstd::string concatenate(std::vector<std::string> strings) {\n",
        "canonical_solutions": "std::string concatenate(std::vector<std::string> strings) {\n    std::string result;\n    for (const auto& str : strings) {\n        result += str;\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"k\"}))) == (\"xyzwk\"));\n}\n"
    },
    {
        "task_id": "HumanEval/29",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ནང་བསྐྱོད་འབད་ཡོད་པའི་ string གི་ vector འདི་ནང་ སྔོན་སྒྲིག་ཅིག་ལས་འགོ་བཙུགས་ཏེ་ འགོ་བཙུགས་མི་ཚུ་རྐྱངམ་ཅིག་སེལ་འཐུ་འབད།. >>> filter_by_prefix((std::vector<std::string>()), (\"a\")) (std::vector<std::string>()) >>> filter_by_prefix((std::vector<std::string>({(std::string) \"abc\", (std::string) \"bcd\", (std::string)::\"cde\", (stdstring) \"array\"})), (\"a\") (std::vector<std::string>({(std::string) \"abc\", (std::string) \"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n",
        "canonical_solutions": "std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n    std::vector<std::string> result;\n    for (const auto& str : strings) {\n        if (str.rfind(prefix, 0) == 0) {  // Check if 'str' starts with 'prefix'\n            result.push_back(str);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/30",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཝི་ཅཱཊ་ནང་ ནུས་ཅན་ཨང་ཚུ་རྐྱངམ་ཅིག་ལོག་གཏང་། >>> get_positive((std::vector<long>({long)-1, (long) 2, (long)-4, (long) 5, (long) 6}))) (std::vector<long>({long) 2, (long) 5, (long) 6})) >>> get_positive((std::vector<long>({long) 5, (long) 3, (long)-5, (long) 2, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) 10}))) (std::vector<long>{(long) 5, (long) 3, (long) 2, (long) 3, (long) 9, (long) 123, (long) 1}))\nstd::vector<long> get_positive(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for (long num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/31",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་དེ་ ཨང་གྲངས་ངོ་མ་ཨིན་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། >>> is_prime((6)) (false) >>> is_prime((101)) (true) >>> is_prime((11) (true) >>> is_prime((13441)) (true) >>> is_prime(61)) (true) >>> is_prime(4)) (false) >>> is_prime(1) (false)\nbool is_prime(long n) {\n",
        "canonical_solutions": "bool is_prime(long n) {\n    if (n < 2) return false;\n    if (n < 4) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/33",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་ལས་འགན་འདི་གིས་ ཝི་ཅཊ་ l དང་ ཝི་ཅཊ་ l' འདི་བཟུམ་ཅིག་སྦེ་ལོག་གཏང་ནི་ཨིན་པ་ཅིན་ ཝི་ཅཊ་ l འདི་ ༣ ལུ་ཆ་མི་བཏུབ་པའི་ ཝི་ཅཊ་ཚུ་ནང་དང་གཅིག་མཚུངས་ཨིན་པའི་ཁར་ ཝི་ཅཊ་ l འདི་ ༣ ལུ་ཆ་མི་བཏུབ་པའི་ ཝི་ཅཊ་ཚུ་ནང་ཡོད་པའི་གནས་གོང་ཚུ་ ཝི་ཅཊ་ l གི་གནས་གོང་ཚུ་དང་འདྲན་འདྲ་ཨིན་ དེ་འབདཝ་ད་ དབྱེ་བ་ཕྱེ་ཡོདཔ་ཨིན།\nstd::vector<long> sort_third(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> sort_third(std::vector<long> l) {\n    std::vector<long> third_indices;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        third_indices.push_back(l[i]);\n    }\n    std::sort(third_indices.begin(), third_indices.end());\n    \n    size_t idx = 0;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        l[i] = third_indices[idx++];\n    }\n    \n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/34",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཝེ་ཀཊར་ནང་དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཁྱད་ཆོས་ཅན་གྱི་ཆ་ཤས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། >>> unique((std::vector<long>({(long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 0, (long) 2, (long) 3, (long) 5, (long) 9, (long) 123}))\nstd::vector<long> unique(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
    },
    {
        "task_id": "HumanEval/35",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཝེཀཊར་ནང་ ཚད་ལྡན་ཆ་ཤས་ལོག་གཏང་། >>> max_element((std::vector<long>({long) 1, (long) 2, (long) 3}))) (3) >>> max_element((std::vector<long>({long) 5, (long) 3, (long)-5, (long) 2, (long)-3, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) -10}))) (123)\nlong max_element(std::vector<long> l) {\n",
        "canonical_solutions": "long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(), l.end());\n}",
        "test": "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n}\n"
    },
    {
        "task_id": "HumanEval/36",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ 7འདི་ 11 དང་ 13 ལུ་ཆ་བགོས་འབད་མི་ ཨང་གྲངས་ཧྲིལ་ཨང་ n ལས་ཆུང་བ་ནང་ལུ་ ཚར་གྲངས་ག་དེམ་ཅིག་ལོག་འོང་ནི་ཨིན་ནའི་གྱངས་ཁ་སླར་ལོག་འབདཝ་ཨིན། >>> fizz_buzz((50)) (0) >>> fizz_buzz((78)) (2) >>> fizz_buzz((79) (3)\nlong fizz_buzz(long n) {\n",
        "canonical_solutions": "long fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) count++;\n                temp /= 10;\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
    },
    {
        "task_id": "HumanEval/37",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་ལས་འགན་འདི་གིས་ ཝེ་ཀཊར་ l དང་ ཝེ་ཀཊར་ l' འདི་སླར་ལོག་འབདཝ་ཨིན། འདི་ཡང་ ཝེ་ཀཊར་ l འདི་ ཌེ་པེརཌི་ཨེན་ཌིསི་ནང་ལུ་ l དང་འདྲ་མཉམ་སྦེ་ཡོདཔ་དང་ ཝེ་ཀཊར་ l འདི་ ཌེ་པེརཌི་ཨེན་ཌིསི་ནང་ལུ་ ཝེ་ཀཊར་ l གི་གནས་གོང་ཚུ་ འདྲན་འདྲ་སྦེ་ཡོད་རུང་ དབྱེ་བ་ཕྱེ་ཡོདཔ་ཨིན།\nstd::vector<long> sort_even(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> sort_even(std::vector<long> l) {\n    std::vector<long> even_indices;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n    std::sort(even_indices.begin(), even_indices.end());\n    \n    size_t idx = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        l[i] = even_indices[idx++];\n    }\n    \n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));\n}\n"
    },
    {
        "task_id": "HumanEval/39",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib གིས་ ཨང་གྲངས་ n-th སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་དེ་ Fibonacci གྱི་ཨང་གྲངས་ཅིག་ཨིནམ་དང་ ཨང་གྲངས་དེ་ཡང་ ཨང་གྲངས་ཨང་དང་པ་ཨིན། >>> prime_fib((1)) (2) >>> prime_fib(2)) (3) >>> prime_fib(3)) (5) >>> prime_fib(4)) (13) >>> prime_fib(5) (89)\nlong prime_fib(long n) {\n",
        "canonical_solutions": "bool is_prime(long num) {\n    if (num < 2) return false;\n    if (num < 4) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (long i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nlong prime_fib(long n) {\n    std::vector<long> prime_fibs;\n    long a = 1, b = 1;\n    while (prime_fibs.size() < n) {\n        long next = a + b;\n        a = b;\n        b = next;\n        if (is_prime(next)) {\n            prime_fibs.push_back(next);\n        }\n    }\n    return prime_fibs[n - 1];\n}",
        "test": "}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n"
    },
    {
        "task_id": "HumanEval/40",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཊ་ཅིག་ཨེབ་གཏང་འབདཝ་ཨིན་ དེ་གིས་ ཆ་མཉམ་འདི་ ༠ ལུ་བསྡོམས་ཏེ་ཡོད་པའི་ཁྱད་པར་ཅན་ཡན་ལག་གསུམ་ཡོད་པ་ཅིན་བདེན་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། >>> triples_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> triples_sum_to_zero(std::vector<long>({long) 1, (long) 3, (long) 2, (long) 1} >>> (true) triples_sum_to_zero(std::vector<long>(({long) 1, (long) 2, (long) 3, (long) 7}))) (se) >>> triples_to_zero_(std::vector<long>{long) 2, (long) 4, (long) 5, (long) 3, (long) 9, (long) 7))) (true) >>> triples_sum_to_zero_long))) (long) >>> (long_long)\nbool triples_sum_to_zero(std::vector<long> l) {\n",
        "canonical_solutions": "bool triples_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    size_t n = l.size();\n    \n    for (size_t i = 0; i < n - 2; i++) {\n        size_t left = i + 1, right = n - 1;\n        while (left < right) {\n            long sum = l[i] + l[left] + l[right];\n            if (sum == 0) return true;\n            else if (sum < 0) left++;\n            else right--;\n        }\n    }\n    \n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/41",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཐད་ཀར་དུ་ཕྲང་ཡོད་པའི་མཐའ་མེད་པའི་ཐིག་ཁྲམ་ཅིག་ཡོད་པའི་ལམ་འདི་ ཧ་གོ་དགོ། སྣུམ་འཁོར་ n གིས་གཡོན་ལས་གཡས་ཁ་ཐུག་ལུ་འགྱོ་དོ་ཡོདཔ་དང་ དེ་བསྒང་ སྣུམ་འཁོར་ n གི་སྡེ་ཚན་གཞན་ཅིག་གིས་གཡས་ལས་གཡོན་ཁ་ཐུག་ལུ་འགྱོ་དོ་ཡོདཔ་ཨིན། སྣུམ་འཁོར་སྡེ་ཚན་གཉིས་འདི་ གཅིག་ལས་ཐག་རིང་ས་ཅིག་ལས་ འགོ་བཙུགས་ཏེ་ སྣུམ་འཁོར་ཆ་མཉམ་རང་ མགྱོགས་ཚད་གཅིག་སྦེ་འགྱོ་དོ་ཡོདཔ་ཨིན། སྣུམ་འཁོར་གཉིས་ཅིག་གིས་ ཐད་ཀར་དུ་ཕྲང་ཡོད་པའི་ལམ་འདི་ གཡས་ལས་གཡོན་ཁ་ཐུག་ལུ་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་གིས་ གཡས་ལས་གཡོན་ཁ་ཐུག་ལུ་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་ལུ་ཕོག་པའི་སྐབས་ སྣུམ་འཁོར་གཉིས་ཅིག་ ཐུག་དོ་ཡོདཔ་སྦེ་སླབ་ཨིན། ཨིན་རུང་ སྣུམ་འཁོར་ཚུ་ཚད་མེད་བརྟན་ཏོག་ཏོ་དང་སྒྲིང་སྒྲི་ཨིནམ་ལས་ དེ་གིས་ སྣུམ་འཁོར་ཚུ་ ཐུག་མ་མྱོང་དོ་བཟུམ་སྦེ་རང་ སྣུམ་འཁོར་གྱི་ལམ་བདའ་སྟེ་འགྱོ་དོ་ཡོདཔ་ཨིན། འ་ནི་ལས་འགན་གིས་ འདི་བཟུམ་མའི་ ཐུག་རྐྱེན་གྱི་གྱངས་ཁ་འདི་བཏོན་ཡོདཔ་ཨིན།\nlong car_race_collision(long n) {\n",
        "canonical_solutions": "long car_race_collision(long n) {\n    return n * n;\n}",
        "test": "}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
    },
    {
        "task_id": "HumanEval/42",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཝེ་ཀཊར་འདི་སླར་ལོག་འབདཝ་ཨིན། དབྱེ་བ་ཚུ་ ༡ ལུ་ཡར་སེང་འབད་ཡོདཔ་ཨིན། >>> incr_list((std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<long>({long) 2, (long) 3, (long) 4})) >>> incr_list((std::vector<long>({long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>({long) 6, (long) 4, (long) 6, (long) 3, (long) 4, (long) 4, (long) 10, (long) 1, (long) 124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n",
        "canonical_solutions": "std::vector<long> incr_list(std::vector<long> l) {\n    for (long &num : l) {\n        num++;\n    }\n    return l;\n}",
        "test": "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n}\n"
    },
    {
        "task_id": "HumanEval/43",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཱཊ་ཅིག་ཨེབ་གཏང་འབདཝ་ཨིན་ དེ་གིས་ ཆ་མཉམ་འདི་ ༠ ལུ་བསྡོམས་ཏེ་ཡོད་པའི་ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གཉིས་ཡོད་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ false སླར་ལོག་འབདཝ་ཨིན། >>> pairs_sum_to_zero (_) std::vector<long> (_) long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> pairs_sum_to_zero (_) std::vector<long> (_) long) 1, (long) 3, (long) 2, (long) 1} >>> (false) pairs_sum_to_zero (_) std::vector<long> (_) 1, (long) 2, (long) 3, (long) 7}))) (false) >>> pairs_sum_to_zero (_) std::vector<long> (_) 2 (long) 4, (long) 5, (long) 3, (long) 5, (long) 7))) (true) >>> pairs_sum_to_zero (_) std:long_long))) (long_long) >>> (long_long_vector) >>>\nbool pairs_sum_to_zero(std::vector<long> l) {\n",
        "canonical_solutions": "bool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long> seen;\n    for (long num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/44",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ནང་བསྐྱོད་ཨང་གྲངས་ x གི་ཨང་གྲངས་གཞི་རྟེན་གཞི་རྟེན་ལུ་བསྒྱུར་བཅོས་འབདཝ་ཨིན། བསྒྱུར་བཅོས་འབད་བའི་ཤུལ་ལས་ string ངོ་ཚབ་ལོག་འབདཝ་ཨིན། གཞི་རྟེན་ཨང་གྲངས་ཚུ་ ༡༠ ལས་ཉུང་ཨིན། >>> change_base((8), (3)) (\"22\") >>> change_base(8), (2)) (\"1000\") >>> change_base((7), (2)) (\"111\")\nstd::string change_base(long x, long base) {\n",
        "canonical_solutions": "std::string change_base(long x, long base) {\n    if (x == 0) return \"0\";\n    \n    std::string result;\n    while (x > 0) {\n        result += std::to_string(x % base);\n        x /= base;\n    }\n    \n    std::reverse(result.begin(), result.end());\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
    },
    {
        "task_id": "HumanEval/45",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གཡོན་དང་མཐོ་ཚད་ལོག་འོང་སའི་ས་སྒོ་འདི་གསུམ་ཟུར་ཅིག་ལུ་བྱིན་ཏེ་ཡོདཔ་ཨིན། >>> triangle_area((5), (3)) (7.5f)\nfloat triangle_area(long a, long h) {\n",
        "canonical_solutions": "float triangle_area(long a, long h) {\n    return 0.5f * a * h;\n}",
        "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5), (3)) == (7.5f));\n    assert(candidate((2), (2)) == (2.0f));\n    assert(candidate((10), (8)) == (40.0f));\n}\n"
    },
    {
        "task_id": "HumanEval/46",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Fib4 གི་ཨང་རིམ་དེ་ Fibbonacci གི་རིམ་པ་བཟུམ་ཅིག་ཨིནམ་ད་ འདི་ཚུ་ནང་ འོག་གི་དོན་ཚན་ཚུ་བཀོད་དེ་འདུག fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 གི་ཨང་རིམ་གྱི་ཆ་ཤས་ཨང་གྲངས་ n པ་རྩིས་སྟོན་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་འབྲི་གནང་། ལོག་ལོག་རྩིས་སྟོན་མ་ལག་ལེན་འཐབ་། >>> fib4((5)) (4) >>> fib4(6)) (8) >>> fib4(7)) (14)\nlong fib4(long n) {\n",
        "canonical_solutions": "long fib4(long n) {\n    if (n == 0 || n == 1 || n == 3) return 0;\n    if (n == 2) return 2;\n\n    std::vector<long> dp(n + 1, 0);\n    dp[2] = 2;\n\n    for (long i = 4; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n    }\n\n    return dp[n];\n}",
        "test": "}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
    },
    {
        "task_id": "HumanEval/47",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཝེ་ཀཊར་ l ནང་གི་ཆ་ཤས་ཚུ་གི་བར་མཚམས་སླར་ལོག་འབདཝ་ཨིན། >>> ཝེ་ཀཊར་ (long) 3, (long) 1, (long) 2, (long) 4, (long) 5))) (float) >>> ཝེ་ཀཊར་ (long) -10, (long) 4, (long) 6, (long) 1000, (long) 10, (long) 20))) (15.0f)\nfloat median(std::vector<long> l) {\n",
        "canonical_solutions": "float median(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    size_t n = l.size();\n    \n    if (n % 2 == 1) {\n        return static_cast<float>(l[n / 2]);\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));\n    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
    },
    {
        "task_id": "HumanEval/48",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string འདི་ palindrome ཨིན་ན་བརྟག་དཔྱད་འབདཝ་ཨིན། >>> is_palindrome (((\"\")) (true) >>> is_palindrome (((\"aba\")) (true) >>> is_palindrome (((\"aaaaa\")) (true) >>> is_palindrome (((\"zbcd\")) (false)\nbool is_palindrome(std::string text) {\n",
        "canonical_solutions": "bool is_palindrome(std::string text) {\n    return std::equal(text.begin(), text.begin() + text.size() / 2, text.rbegin());\n}",
        "test": "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/49",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// བསྒྱུར་བཅོས་ ༢^n modulo p (ཨང་གྲངས་ཚུ་ཤེས་དགོ) ། >>> modp(((3), (5)) (3) >>> modp((1101), (101)) (2) >>> modp((0), (101)) (1) >>> modp((3), (11)) (8) >>> modp((100), (101)) (1)\nlong modp(long n, long p) {\n",
        "canonical_solutions": "long modp(long n, long p) {\n    return std::pow(2, n) % p;\n}",
        "test": "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/51",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels འདི་ལས་ string དང་ vowels ཚུ་མེད་པར་ string སླར་ལོག་འབདཝ་ཨིན། >>> remove_vowels((\"\")) (\"\") >>> remove_vowels((\"abcdef\")) (\"bcdf\") >>> remove_vowels((\"aaaaa\")) (\"\") >>> remove_vowels(\"aaBAA\")) (\"B\") >>> remove_vowels((\"zbcd\")) (\"zbcd\")\nstd::string remove_vowels(std::string text) {\n",
        "canonical_solutions": "std::string remove_vowels(std::string text) {\n    std::string result;\n    std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    for (char ch : text) {\n        if (vowels.find(ch) == vowels.end()) {\n            result += ch;\n        }\n    }\n    \n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"
    },
    {
        "task_id": "HumanEval/52",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཝེ་ཀཊར་ l ནང་གི་ཨང་གྲངས་ཚུ་ ཆ་ཚད་ t གི་འོག་ལུ་ཡོད་པ་ཅིན་བདེན་པ་སླར་ལོག་འབདཝ་ཨིན། >>> below_threshold((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 10})), (100)) (true) >>> below_threshold((std::vector<long>({(long) 1, (long) 20, (long) 4, (long) 10})), (5)) (false)\nbool below_threshold(std::vector<long> l, long t) {\n",
        "canonical_solutions": "bool below_threshold(std::vector<long> l, long t) {\n    return std::all_of(l.begin(), l.end(), [t](long num) { return num < t; });\n}",
        "test": "}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/53",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ x དང་ y གཉིས་བསྡོམས་དེ་nlong add(long x, long y) {\n",
        "canonical_solutions": "long add(long x, long y) {\n    return x + y;\n}",
        "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((0), (1)) == (1));\n    assert(candidate((1), (0)) == (1));\n    assert(candidate((2), (3)) == (5));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (5)) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/54",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཚིག་གཉིས་ལུ་ཡིག་འབྲུ་འདྲ་མཉམ་ཡོད་མེད་བརྟག་དཔྱད་འབད། >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) (true) >>> same_chars((\"abcd\"), (\"dddddddabc\")) (true) >>> same_chars(\"dddddddabc\"), (\"abcd\") (true) >>> same_chars((\"eabcd\"), (\"dddddddabc\")) (false) >>> same_chars >>>\"(abcd\"), (\"dddddddddabce\") (false) >>> same_chars((\"eabcd\"), (\"ddddzzzzzdzzdddabc\") (false)\nbool same_chars(std::string s0, std::string s1) {\n",
        "canonical_solutions": "bool same_chars(std::string s0, std::string s1) {\n    std::unordered_set<char> set0(s0.begin(), s0.end());\n    std::unordered_set<char> set1(s1.begin(), s1.end());\n    return set0 == set1;\n}",
        "test": "}\nint main() {\n    auto candidate = same_chars;\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(candidate((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(candidate((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(candidate((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(candidate((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(candidate((\"aabb\"), (\"aaccc\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/55",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཕི་བཱོན་ནེཤི་ཨང་གྲངས་ nth སླར་ལོག་འབདཝ་ཨིན། >>> fib((10)) (55) >>> fib((1)) (1) >>> fib((8)) (21)\nlong fib(long n) {\n",
        "canonical_solutions": "long fib(long n) {\n    if (n <= 1) return n;\n    \n    long a = 0, b = 1, c;\n    for (long i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    \n    return b;\n}",
        "test": "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
    },
    {
        "task_id": "HumanEval/56",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets འདི་ \"<\" དང་ \">\" འབད་མི་ཐིག་ཁྲམ་ཨིན། སྒོ་སྒྲིག་ནང་ཡོད་པའི་ bracket ཚུ་གུ་ མཇུག་གི་ bracket ཅིག་ཡོད་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། >>> correct_bracketing((\"<\")) (false) >>> correct_bracketing(\"<>\")) (true) >>> correct_bracketing(\"<><>>\")) (true) >>> correct_bracketing(\">(<>\") (false)\nbool correct_bracketing(std::string brackets) {\n",
        "canonical_solutions": "bool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') balance++;\n        else if (ch == '>') balance--;\n        if (balance < 0) return false;\n    }\n    return balance == 0;\n}",
        "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/57",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// return true is vector elements are monotonically increasing or decreasing. >>> monotonic (long) 1, (long) 2, (long) 4, (long) 20))) (true) >>> monotonic (long) 20, (long) 4, (long) 10))) (false) >>> monotonic (long) 4, (long) 1, (long) 0, (long) 10))) (true)\nbool monotonic(std::vector<long> l) {\n",
        "canonical_solutions": "bool monotonic(std::vector<long> l) {\n    bool increasing = true, decreasing = true;\n    \n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) decreasing = false;\n        if (l[i] < l[i - 1]) increasing = false;\n    }\n    \n    return increasing || decreasing;\n}",
        "test": "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/58",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཝེཀཊར་གཉིས་གི་དོན་ལུ་ དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཁྱད་ཆོས་ཅན་གྱི་མཉམ་འབྲེལ་གྱི་ཆ་ཤས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝེཀཊར་ (_) = ཝེཀཊར་) = ཝ\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n",
        "canonical_solutions": "std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::unordered_set<long> set1(l1.begin(), l1.end());\n    std::unordered_set<long> result_set;\n    \n    for (long num : l2) {\n        if (set1.count(num)) {\n            result_set.insert(num);\n        }\n    }\n    \n    std::vector<long> result(result_set.begin(), result_set.end());\n    std::sort(result.begin(), result.end());\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/59",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n གི་གལ་ཆེ་ཤོས་གཞི་གྲངས་སླར་ལོག་འབདཝ་ཨིན། n > 1 དང་གལ་ཆེ་ཤོས་གཞི་གྲངས་མེན་པ་ཅིན་། >>> largest_prime_factor (((13195)) (29) >>> largest_prime_factor (((2048)) (2)\nlong largest_prime_factor(long n) {\n",
        "canonical_solutions": "long largest_prime_factor(long n) {\n    long largest = -1;\n    \n    while (n % 2 == 0) {\n        largest = 2;\n        n /= 2;\n    }\n    \n    for (long i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n    }\n    \n    if (n > 1) largest = n;\n    \n    return largest;\n}",
        "test": "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n"
    },
    {
        "task_id": "HumanEval/60",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n འདི་ལས་ 1 ལས་ n ཚུན་གྱི་ཨང་གྲངས་ཚུ་བསྡོམས་འབདཝ་ཨིན། >>> sum_to_n((30)) (465) >>> sum_to_n(100)) (5050) >>> sum_to_n((5)) (15) >>> sum_to_n(10)) (55) >>> sum_to_n(1) (1)\nlong sum_to_n(long n) {\n",
        "canonical_solutions": "long sum_to_n(long n) {\n    return n * (n + 1) / 2;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_to_n;\n    assert(candidate((1)) == (1));\n    assert(candidate((6)) == (21));\n    assert(candidate((11)) == (66));\n    assert(candidate((30)) == (465));\n    assert(candidate((100)) == (5050));\n}\n"
    },
    {
        "task_id": "HumanEval/61",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets འདི་ \"(\" དང་ \"\") གི་ཐིག་ཁྲམ་ཨིན། སྒོ་སྒྲིག་འབད་ཡོད་པའི་ bracket ཚུ་ནང་ མཇུག་བསྡུ་ཡོད་པའི་ bracket ཚུ་ཡོད་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། >>> correct_bracketing (((\"(\")) (false) >>> correct_bracketing (((\"())) (true) >>> correct_bracketing (((\"(()))) (true) >>> correct_bracketing (((\") ((()) (false)\nbool correct_bracketing(std::string brackets) {\n",
        "canonical_solutions": "bool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') balance++;\n        else if (ch == ')') balance--;\n        if (balance < 0) return false;\n    }\n    return balance == 0;\n}",
        "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/62",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// xs འདི་ polynomial གི་གནས་གོང་ཚུ་ཨིན། xs[0] + xs[1] * x + xs[2] * x^2 + .... འ་ནི་ polynomial གི་འབྱུང་ཁུངས་འདི་ འ་ནི་རྣམ་པ་ནང་རང་སླར་ལོག་འབདཝ་ཨིན། >>> derivative((std::vector<long>({long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (std::vector<long>{(long) 1, (long) 4, (long) 12, (long) 20})) >>> derivative::std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<(long>{(long) 2, (long) 6}))\nstd::vector<long> derivative(std::vector<long> xs) {\n",
        "canonical_solutions": "std::vector<long> derivative(std::vector<long> xs) {\n    std::vector<long> result;\n    for (size_t i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/63",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// FibFib ཨང་རིམ་འདི་ Fibbonacci གི་རིམ་པ་བཟུམ་ཅིག་ཨིན་ འདི་ཡང་ འོག་གི་སྦེ་གསལ་བཀོད་འབདཝ་ཨིན། fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ཨིན་པ་ཅིན་ ཨང་རིམ་གྱི་ n-th གི་ཆ་ཤས་འདི་ ཕྲ་རིང་སྦེ་རྩིས་སྟོན་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་འབྲི་གནང་། >>> fibfib((1)) (0) >>> fib((5)) (4) >>> fib(8)) (24)\nlong fibfib(long n) {\n",
        "canonical_solutions": "long fibfib(long n) {\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n\n    std::vector<long> dp(n + 1, 0);\n    dp[2] = 1;\n\n    for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\n    return dp[n];\n}",
        "test": "}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n}\n"
    },
    {
        "task_id": "HumanEval/64",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན།\nlong vowels_count(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong vowels_count(std::string s) {\n  long count = 0;\n  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  for (char c : s) {\n    if (vowels.count(c)) {\n      count++;\n    }\n  }\n  if (!s.empty() && (s.back() == 'y' || s.back() == 'Y')) {\n    count++;\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"ACEDY\")) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/65",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གྱངས་ཁ་ཚུའི་ཨང་གྲངས་ x གི་ཨང་གྲངས་ཚུ་ འཁོར་ལམ་གྱི་ཐོག་ལས་སོར་གཏང་ དེ་ལས་ཨང་གྲངས་ཚུ་གཡས་ཁ་ཐུག་སོར་གཏང་ཞིནམ་ལས་ གྲུབ་འབྲས་དེ་ string སྦེ་ལོག་གཏང་། གལ་སྲིད་ shift > ཨང་གྲངས་ཚུ་ཨིན་པ་ཅིན་ ཨང་གྲངས་ཚུ་ཁ་བསྒྱུར་གཏང་། >>> circular_shift (((12), (1)) (\"21\") >>> circular_shift (((12), (2)) (\"12\")\nstd::string circular_shift(long x, long shift) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n  long n = s.length();\n  if (n == 0) {\n    return \"\";\n  }\n  shift %= n;\n  if (shift < 0) {\n    shift += n;\n  }\n  if (shift == 0) {\n    return s;\n  }\n  if (shift > n) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::string shifted_s = s.substr(n - shift) + s.substr(0, n - shift);\n  return shifted_s;\n}",
        "test": "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
    },
    {
        "task_id": "HumanEval/66",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ལཱ་འགན་ ཨང་གྲངས་ཐིག་ཁྲམ་ཅིག་ནང་བཙུགས་སྦེ་ལེན་ཏེ་ ཨང་གྲངས་མཐོ་སའི་ཡིག་འབྲུ་ཚུ་རྐྱངམ་ཅིག་བསྡོམས་ཏེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> digitSum((\"\")) (0) >>> digitSum((\"abAB\")) (131) >>> digitSum(\"abcCd\")) (67) >>> digitSum((\"helloE\")) (69) >>> digitSum((\"woArBld\")) (131) >>> digitSum((\"aAXaaaa\") (153)\nlong digitSum(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong digitSum(std::string s) {\n  long sum = 0;\n  for (char c : s) {\n    if (isupper(c)) {\n      sum += static_cast<long>(c);\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
    },
    {
        "task_id": "HumanEval/67",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་ལཱ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཐིག་ཁྲམ་ཅིག་སྦེ་བཙུགསཔ་ཨིན། ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཨེབ་གཏང་འབད་ཨེབ་གཏང་འབད་ཨེབ་གཏང་འབད་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨེབ་གཏང་ཨཨཨཨཨཨེབ་གཏང་ཨཨཨ\nlong fruit_distribution(std::string s, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong fruit_distribution(std::string s, long n) {\n  long apples = 0;\n  long oranges = 0;\n  size_t apples_pos = s.find(\"apples\");\n  if (apples_pos != std::string::npos) {\n    size_t start = 0;\n    while (!isdigit(s[start])) {\n      start++;\n    }\n    apples = std::stoll(s.substr(start, apples_pos - start));\n  }\n  size_t oranges_pos = s.find(\"oranges\");\n  if (oranges_pos != std::string::npos) {\n    size_t and_pos = s.find(\"and\");\n    size_t start = and_pos + 3;\n    while (!isdigit(s[start])) {\n      start++;\n    }\n    oranges = std::stoll(s.substr(start, oranges_pos - start));\n  }\n  return n - apples - oranges;\n}",
        "test": "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100 oranges\"), (120)) == (19));\n}\n"
    },
    {
        "task_id": "HumanEval/68",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ ཚད་འཛིན་འབད་ཡོད་པའི་ལྡེ་མིག་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ ཚད་འཛིན་འབད་ཡོད་པའི་ལྡེ་མིག་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ ཚད་འཛིན་འབད་ཡོད་པའི་ལྡེ་མིག་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་འདི་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀཊར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝེ་ཀར་དེ་ནང་བཙུགས་ཏེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་བཙུགས།\nstd::vector<long> pluck(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> pluck(std::vector<long> arr) {\n  if (arr.empty()) {\n    return {};\n  }\n  long min_even = -1;\n  long min_index = -1;\n  for (long i = 0; i < arr.size(); ++i) {\n    if (arr[i] % 2 == 0) {\n      if (min_even == -1 || arr[i] < min_even) {\n        min_even = arr[i];\n        min_index = i;\n      }\n    }\n  }\n  if (min_even == -1) {\n    return {};\n  }\n  return {min_even, min_index};\n}",
        "test": "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/69",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཀྱི་ ཝི་ཅཊ་མེན་པའི་ཧིང་སྟོང་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཨང་གྲངས་ཆ་མཉམ་ལས་སྦོམ་ཤོས་དེ་ ༠ ལས་སྦོམ་དང་ ཨང་གྲངས་ཆ་མཉམ་གྱི་གནས་གོང་དང་འདྲན་འདྲ་འབད་ཡོད་པའི་ཧིང་སྟོང་དེ་སླར་ལོག་འབད། ཨང་གྲངས་ཆ་མཉམ་གྱི་གནས་གོང་དེ་ ཝི་ཅཊ་ནང་མཐོང་མི་གྱངས་ཁ་དེ་ཨིན། གལ་སྲིད་ གནས་གོང་འདི་མེད་པ་ཅིན་ -༡ སླར་ལོག་འབད། དཔེ་གཞི་: >>> search:{(std::vector<long>{(long) 4, (long) 1, (long) 2, (long) 3, (long) 1}))) (2) >>> search:{(std::vector<(long>1, (long) 2, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4, (long) 4} (3)))) >>> >>> search:{(std::vector<(long>5, (long) 5, (long) 4, (long) 4, (long) 4}-1 (long)))\nlong search(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong search(std::vector<long> lst) {\n  std::map<long, long> counts;\n  for (long x : lst) {\n    counts[x]++;\n  }\n  long result = -1;\n  for (auto const& [value, count] : counts) {\n    if (value > 0 && count >= value) {\n      result = std::max(result, value);\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/70",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་མཐའ་དག་གི་ ཝི་ཅཊར་འདི་བྱིན་པ་ཅིན་ ཨང་གྲངས་མཐའ་དག་ཚུ་ ཝང་གི་རིམ་པ་ལས་ལོག་གཏང་འོང་། ཨང་གྲངས་མཐའ་དག་གི་རིམ་པ་འདི་ ཁྱོད་ཀྱིས་ཉུང་མཐའི་གནས་གོང་ལས་འགོ་བཙུགས་ཏེ་ དེ་ལས་ལྷག་ལུས་ཨང་གྲངས་མཐའ་དག་གི་ གནས་གོང་ལས་འགོ་བཙུགས་ཏེ་ དེ་ལས་ཉུང་མཐའི་གནས་གོང་ལས་འགོ་བཙུགས་ཏེ་ཨིན། དཔེར་ན་: >>> strange_sort_list{((((std::vector<long>((((long) 1, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 4, (long) 2, (long) 3})) >>> strange_sort_list<(((std::vector<(long>{(long) 5, (long) 5, (long) 5}))) (std::vector<(long>{(long) 5, (long) 5, (long) 5})) >>> strange_sort_list<(((((((long)) (std::vector<(long))\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.empty()) {\n    return {};\n  }\n  std::sort(lst.begin(), lst.end());\n  std::vector<long> result;\n  long left = 0;\n  long right = lst.size() - 1;\n  bool take_min = true;\n  while (left <= right) {\n    if (take_min) {\n      result.push_back(lst[left++]);\n    } else {\n      result.push_back(lst[right--]);\n    }\n    take_min = !take_min;\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));\n}\n"
    },
    {
        "task_id": "HumanEval/71",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཚུ་བྱིན་ཏེ་ ། ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་ས་སྒོ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཨང་བཅུ་ཆ་གཉིས་ལུ་བསྡུ་སྟེ་སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ -1 སླར་ལོག་འབདཝ་ཨིན། ཟུར་གསུམ་གྱི་ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཕྱོགས་གཉིས་ཆ་མཉམ་བསྡོམས་དེ་ ཕྱོགས་གསུམ་པ་ལས་སྦོམ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> triangle_area((3), (4), (5)) (6.0f) >>> triangle_area((1), (2), (10)) (float-1())\nfloat triangle_area(long a, long b, long c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat triangle_area(long a, long b, long c) {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1.0f;\n  }\n  double s = static_cast<double>(a + b + c) / 2.0;\n  double area = std::sqrt(s * (s - a) * (s - b) * (s - c));\n  std::stringstream ss;\n  ss << std::fixed << std::setprecision(2) << area;\n  return std::stof(ss.str());\n}",
        "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0f));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18f));\n    assert(candidate((2), (2), (2)) == (1.73f));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25f));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43f));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n"
    },
    {
        "task_id": "HumanEval/72",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// དངོས་པོ་ q འདི་འཕུར་འགྱོ་བ་ཅིན་ བདེན་པ་སྦེ་ལོག་འོང་པའི་ལས་འགན་ཅིག་འབྲི་ དེ་ལས་གཞན་འདི་རྫུས་མ་སྦེ་ལོག་འོང་ དངོས་པོ་ q འདི་ཚད་ལྡན་ཨིན་པ་ཅིན་ (འདི་ palindromic vector) དང་ འདི་གི་ཆ་ཤས་ཚུ་གི་བསྡོམས་དེ་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་ཆུང་བ་ ཡང་ན་ ཚད་མཐོའི་ནུས་ཤུགས་དང་འདྲན་འདྲ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> will_it_fly((std::vector<long>({long) 1, (long) 2}), (5)) (false) # 1+2 འདི་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་ཆུང་བ་ཨིན་རུང་འདི་ཚད་ལྡན་མེན་པས། >>> will_it_fly((std::vector<long>(long>{long>3, (long) 2, (long) 3}) (1)) (རྫུས་མ་) # འདི་ཚད་ལྡན་ཨིན་རུང་ 3+2+3 འདི་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་མང་བ་ཨིན། >>> will_it_fly(std::vector<long>{(long>3, (long) 2, (long) 3} (9) (true) # 3+2 འདི་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་ཆུང་བ་ཨིན་རུང་འདི་ཚད་ལྡན་མེན་པས། དེ་ལས་ (5) (true) # 3+3 འདི་ ཚད་མཐོའི་ནུས་ཤུགས་ལས་ཆུང་བ་ཨིན་རུང་འདི་ཚད་ལྡན་མེན་པས། >>> will_long_vector (long) དང་ (5) (true)\nbool will_it_fly(std::vector<long> q, long w) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool will_it_fly(std::vector<long> q, long w) {\n  std::vector<long> reversed_q = q;\n  std::reverse(reversed_q.begin(), reversed_q.end());\n  if (q != reversed_q) {\n    return false;\n  }\n  long sum = 0;\n  for (long val : q) {\n    sum += val;\n  }\n  return sum <= w;\n}",
        "test": "}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/73",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཝེཀཊར་ཨར་ཨར་ ཨེན་ཇི་ཇི་ཚུ་བྱིན་པ་ཅིན་ ཝེཀཊར་དེ་ ཚད་ལྡན་བཟོ་ནིའི་དོན་ལུ་ བསྒྱུར་བཅོས་འབད་དགོཔ་ཨིན་པའི་ ཨེ་རེ་ཉུང་ཤོས་དེ་འཚོལ་དགོ། ཚད་ལྡན་ ཝེཀཊར་འདི་ ཝེཀཊར་ཅིག་ཨིན་པའི་ཁར་ བསྒྱུར་བཅོས་དེ་ ཕྱོགས་གཅིག་ལས་ཚུར་དང་ ཕྱོགས་གཞན་ལུ་ བསྒྱུར་བཅོས་འབདཝ་ཨིན། དཔེར་ན་: >>> smallest_change(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 5, (long) 4, (long) 7, (long) 9, (long) 6}))) (4) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 2} (1) >>> smallest_change(std::vector<long>{long) 1, (long) 2, (long) 3, (long) 1, (long) (0))))\nlong smallest_change(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong smallest_change(std::vector<long> arr) {\n  long n = arr.size();\n  long changes = 0;\n  for (long i = 0; i < n / 2; ++i) {\n    if (arr[i] != arr[n - 1 - i]) {\n      changes++;\n    }\n  }\n  return changes;\n}",
        "test": "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/74",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཕྲ་རིང་གི་ཕྲ་རིང་གཉིས་ཆ་ར་ལུ་ ཕྲ་རིང་གི་གྱངས་ཁ་ཉུང་སུ་སྦེ་ཡོད་མི་འདི་སླར་ལོག་འབདཝ་ཨིན། ཕྲ་རིང་གཉིས་ཆ་ར་ལུ་ ཕྲ་རིང་གི་གྱངས་ཁ་ཉུང་སུ་ཅིག་ཡོད་པ་ཅིན་ ཕྲ་རིང་དང་པ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་ >>> total_match (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_) vector (_ (_) vector (_) vector (_) vector (_ (_) vector (_) (_) (_ (_) (_) (_) (_ (_) (_) (_) (_) (_ (_) (_) (_) (_) (_) (_) (_) (_ (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_\"\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n  long count1 = 0;\n  for (const std::string& s : lst1) {\n    count1 += s.length();\n  }\n  long count2 = 0;\n  for (const std::string& s : lst2) {\n    count2 += s.length();\n  }\n  if (count1 <= count2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>())) == (std::vector<std::string>()));\n}\n"
    },
    {
        "task_id": "HumanEval/75",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་འདི་ ཨང་གྲངས་ངོ་མ་༣ གྱི་གྱངས་ཁ་དང་ ཨང་གྲངས་གཞན་ཚུ་ཤོམ་པ་ཅིན་ ཨིན་པའི་འགན་ཡིག་ཅིག་འབྲི་དགོ། (a) འདི་ ༡༠༠ ལས་ཉུང་ཨིནམ་ཤེས་པ་ཅིན་ དཔེར་ན་: >>> is_multiply_prime((30)) (true) 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_multiply_prime(long a) {\n  if (a <= 0) {\n    return false;\n  }\n  std::vector<int> primes;\n  std::vector<bool> is_prime(100, true);\n  is_prime[0] = is_prime[1] = false;\n  for (int p = 2; p * p < 100; p++) {\n    if (is_prime[p]) {\n      for (int i = p * p; i < 100; i += p)\n        is_prime[i] = false;\n    }\n  }\n  for (int p = 2; p < 100; p++) {\n    if (is_prime[p]) {\n      primes.push_back(p);\n    }\n  }\n  int count = 0;\n  for (int p1 : primes) {\n    if (a % p1 == 0) {\n      count++;\n      int rem = a / p1;\n      for (int p2 : primes) {\n        if (rem % p2 == 0) {\n          count++;\n          int rem2 = rem / p2;\n          for (int p3 : primes) {\n            if (rem2 == p3) {\n              count++;\n              if (count == 3) {\n                return true;\n              }\n              count--;\n            }\n          }\n          count--;\n        }\n      }\n      count--;\n    }\n  }\n  return false;\n}",
        "test": "}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/76",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱི་ལཱ་འདི་ གྲངས་སུ་ཅིག་ x འདི་ n གི་དབང་ཤུགས་ཅིག་ཨིན་པ་ཅིན་ true དང་ གཞན་གནས་སྟངས་གཞན་ནང་ལུ་ false སླར་ལོག་འབད་ནིའི་འགན་ཁུར་འདི་ཨིན། x འདི་ n གི་དབང་ཤུགས་ཅིག་ཨིན་པ་ཅིན་ n**int=x དཔེར་ན་: >>> is_simple_power((1), (4)) (true) >>> is_simple_power(2), (2)) (true) >>> is_simple_power(8), (2)) (true) >>> is_simple_power(3), (2)) (false) >>> is_simple_power(3), (1)) (false) >>> is_simple_power(5), (3)) (false)\nbool is_simple_power(long x, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_simple_power(long x, long n) {\n  if (x == n) return true;\n  if (n == 1) return x == 1;\n  if (n == 0) return x == 0;\n  if (x == 0) return false;\n  if (x == 1) return true;\n  long power = n;\n  while (power < x) {\n    if (x % n != 0) return false;\n    if (power > x / n) return false;\n    power *= n;\n  }\n  return power == x;\n}",
        "test": "}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/77",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་ཨང་ a དང་ སླར་ལོག་འབད་ཡོད་པའི་གནས་གོང་དེ་ ཨིན་པ་ཅིན་ གནས་གོང་ཧྲིལ་ཨང་ a འདི་ཡང་ ཨིན་པ་ཅིན་ གནས་གོང་ཧྲིལ་ཨང་ a གི་ ཀུ་བིཀ་ཅིག་སྦེ་འཐོན་འོང་། དཔེར་ན་: >>> iscube (((1)) (true) >>> iscube (((2)) (false) >>> iscube (((-1)) (true) >>> iscube (((64)) (true) >>> iscube (((0)) (true) >>> iscube (((180)) (false)\nbool iscube(long a) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool iscube(long a) {\n  if (a == 0) return true;\n  long abs_a = std::abs(a);\n  long root = round(std::cbrt(abs_a));\n  return root * root * root == abs_a;\n}",
        "test": "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/78",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་ ཀེར་ཐིག་སྦེ་ལེན་ཏེ་ ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་རྩིས་སྟོན་འབད་ནིའི་འགན་ཁུར་ཐོབ་ཡོདཔ་ཨིན། (ཀེར་ཐིག་ཨང་གྲངས་འདི་ ༡ ལས་སྦོམ་པའི་རང་བྱུང་ཨང་གྲངས་ཅིག་ཨིན་ དེ་ ཆུང་ཤོས་ཨང་གྲངས་གཉིས་ལས་ཐོན་མི་གྲངས་ཨིན།) ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་ ༠, ༡, ༢, ༣, ༤, ༥, ༦, ༧, ༨, ༩, A, B, C, D, E, F ཨིན་པས། ཀེར་ཐིག་ཨང་གྲངས་ཚུ་ ༢, ༣, ༥, ༧, ༡༡, ༡༣, ༡༧,... ཨིན་པས། ཁྱོད་ཀྱིས་ འོག་གི་ཨང་གྲངས་ཚུ་ངེས་འཛིན་འབད་དགོཔ་ཨིན། ༢, ༣, ༥, ༧, B (=ཀེར་ཐིག་ ༡༡), D (=ཀེར་ཐིག་ ༡༣) ། དྲན་གསོ། ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་གཏན་འཇགས་ ཡང་ན་ སྟོངམ་ཨིནམ་སྦེ་བཟོཝ་ཨིན། དེ་ལས་ བརྡ་མཚན་ A,B,C,D,E,F འདི་ཨ་རྟག་ར་ཡིག་འབྲུ་སྦོམ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> hex_((AB\"key\") (1) >>> hex_(((10\") >>> hex_(77\") (2) hex_(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nlong hex_key(std::string num) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong hex_key(std::string num) {\n  long count = 0;\n  std::unordered_set<char> prime_hex = {'2', '3', '5', '7', 'B', 'D'};\n  for (char c : num) {\n    if (prime_hex.count(c)) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/79",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་ ཨང་གྲངས་བཅུ་པའི་ཐོག་ལས་བཟོ་སྟེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་ གཉིས་ལྡན་གྱི་ཐོག་ལས་བཟོ་དགོ། ལས་འགན་འདི་གིས་ ཀེར་ཐིག་གཅིག་སླར་ལོག་འབད་དགོཔ་ཨིན་ ཀེར་ཐིག་རེ་རེ་གིས་ གཉིས་ལྡན་གྱི་ཨང་གྲངས་ངོ་ཚབ་འབདཝ་ཨིན། ཀེར་ཐིག་རེ་རེ་ནང་ ཀེར་ཐིག་རེ་རེ་འདི་ ༠ ཡང་ན་ ༡ ཨིན། ཀེར་ཐིག་གི་འགོ་དང་མཇུག་ལུ་ ཀེར་ཐིག་གཉིས་ཆ་ར་ 'db' སྦེ་འོང་། ཀེར་ཐིག་གཉིས་ཆ་ར་ལུ་ ཀེར་ཐིག་བཟོ་རྣམ་ལུ་ཕན་ཐོགས་ཡོདཔ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> decimal_to_binary (((15)) (\"db1111db\") >>> decimal_to_binary (((32)) (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string decimal_to_binary(long decimal) {\n  if (decimal == 0) {\n    return \"db0db\";\n  }\n  std::string binaryString = \"\";\n  long temp = std::abs(decimal);\n  while (temp > 0) {\n    binaryString = (temp % 2 == 0 ? \"0\" : \"1\") + binaryString;\n    temp /= 2;\n  }\n  return \"db\" + binaryString + \"db\";\n}",
        "test": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
    },
    {
        "task_id": "HumanEval/80",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ string sཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ stringའདི་ happcppཨིན་ན་མེན་ན་བརྟག་དཔྱད་འབད་དགོ འདི་ཡང་ stringའདི་ ཡུན་རིང་དེ་ ༣ དང་ཤུལ་མམ་གྱི་ཡིག་འབྲུ་ ༣ པོ་ཆ་ར་སོ་སོ་སྦེ་ཡོད་པ་ཅིན་དེ་དེ་ hapcppཨིན། དཔེར་ན་: >>> is_happy(\"a\")) (false) >>> is_happy(\"aa\")) (false) >>> is_happy(\"abcd\")) (true) >>> is_happy(\"aabb\")) (false) >>> is_happy\"adb\")) (true) >>> is_happy\"xyy\") (false)\nbool is_happy(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_happy(std::string s) {\n  if (s.length() < 3) {\n    return false;\n  }\n  for (size_t i = 0; i <= s.length() - 3; ++i) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/81",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// སློབ་རིམ་མཇུག་གི་ བདུན་ཕྲག་འདི་ཨིནམ་ལས་ སློབ་དཔོན་གྱིས་ སློབ་ཕྲུག་ཚུ་ལུ་ ཨང་བཏགས་དགོ་པའི་སྐབས་ སློབ་དཔོན་གྱིས་ ཨང་བཏགས་ནིའི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་ཐངས་ཀྱི་ ཨང་བཏགས་པའི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཀྱི་ ཨང་བཏགས་ཨང་བཏགས་\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n  std::vector<std::string> letter_grades;\n  for (float gpa : grades) {\n    if (gpa == 4.0f) {\n      letter_grades.push_back(\"A+\");\n    } else if (gpa > 3.7f) {\n      letter_grades.push_back(\"A\");\n    } else if (gpa > 3.3f) {\n      letter_grades.push_back(\"A-\");\n    } else if (gpa > 3.0f) {\n      letter_grades.push_back(\"B+\");\n    } else if (gpa > 2.7f) {\n      letter_grades.push_back(\"B\");\n    } else if (gpa > 2.3f) {\n      letter_grades.push_back(\"B-\");\n    } else if (gpa > 2.0f) {\n      letter_grades.push_back(\"C+\");\n    } else if (gpa > 1.7f) {\n      letter_grades.push_back(\"C\");\n    } else if (gpa > 1.3f) {\n      letter_grades.push_back(\"C-\");\n    } else if (gpa > 1.0f) {\n      letter_grades.push_back(\"D+\");\n    } else if (gpa > 0.7f) {\n      letter_grades.push_back(\"D\");\n    } else if (gpa > 0.0f) {\n      letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;\n}",
        "test": "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/82",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string དང་ string གི་རིང་ཚད་དེ་ prime number ཡང་ན་ false ཅིག་ཨིན་པ་ཅིན་ true སླར་ལོག་འབད་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོ། དཔེ་འབད་བ་ཅིན་ >>> prime_length (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_ (_) (_) (_) (_) (_ (_) (_) (_ (_) (_) (_) (_ (_)\nbool prime_length(std::string string) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(int n) {\n  if (n <= 1) return false;\n  for (int i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nbool prime_length(std::string string) {\n  return is_prime(string.length());\n}",
        "test": "}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/83",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ལས་ ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ལས་ ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ཚུ་སླར་ལོག་འབདཝ་ཨིན།\nlong starts_one_ends(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong starts_one_ends(long n) {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  long starts_with_one = std::pow(10, n - 1);\n  long ends_with_one = std::pow(10, n - 1);\n  long starts_and_ends_with_one = std::pow(10, n - 2);\n  return starts_with_one + ends_with_one - starts_and_ends_with_one;\n}",
        "test": "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
    },
    {
        "task_id": "HumanEval/84",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་བུམ་ཚུའི་དོན་ལས་ ནུས་ཅན་ཨང་གྲངས་ N ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཚུའི་རྩིས་གཞི་འདི་ གཉིས་ལྡན་སྦེ་ལོག་གཏང་། དཔེ་གཞི་ >>> solve((1000)) (\"1\") >>> solve((150)) (\"110\") >>> solve((147)) (\"1100\") བྱུང་འགྱུར་: @N ཨང་གྲངས་ཧྲིལ་བུམ་ཚུའི་དོན་ལས་: 0 ≤ N ≤ 10000. ཐོན་སྐྱེད་: གཉིས་ལྡན་ཨང་གྲངས་ཐིག་ཡིག་\nstd::string solve(long N) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string solve(long N) {\n  if (N < 0 || N > 10000) {\n    return \"\"; // Or handle invalid input as needed\n  }\n  long sum = 0;\n  std::string s = std::to_string(N);\n  for (char c : s) {\n    sum += c - '0';\n  }\n  if (sum == 0) {\n    return \"0\";\n  }\n  std::string binary_sum = \"\";\n  while (sum > 0) {\n    binary_sum = (sum % 2 == 0 ? \"0\" : \"1\") + binary_sum;\n    sum /= 2;\n  }\n  return binary_sum;\n}",
        "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
    },
    {
        "task_id": "HumanEval/85",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝེ་ཀཊར་སྟོངམ་མེན་པའི་ནང་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཆ་ཤས་ཆ་མཉམ་ཚུ་ ཨང་གྲངས་ཧྲིལ་བུམ་སྦེ་བསྡོམས་དགོ། དཔེ་འབད་བ་ཅིན་: >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7}))) (2)\nlong add(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong add(std::vector<long> lst) {\n  long sum = 0;\n  for (long i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));\n}\n"
    },
    {
        "task_id": "HumanEval/86",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string གི་རིམ་སྒྲིག་ཅན་གྱི་རྣམ་པ་འདི་ string གི་རིམ་སྒྲིག་ཅན་གྱི་རྣམ་པ་འདི་ཨིན། འདི་ནང་ལུ་ ཚིག་ཆ་མཉམ་ (བར་སྟོང་གིས་སོ་སོར་བཟོ་སྟེ་) འདི་ ཚིག་གསརཔ་གིས་ཚབ་བཙུགས་ཏེ་ཡོདཔ་དང་ འདི་ནང་ལུ་ཡིག་འབྲུ་ཆ་མཉམ་ ascii གནས་གོང་ལུ་གཞི་བཞག་སྟེ་ ཡར་སེང་རིམ་སྒྲིག་འབད་ཡོདཔ་ཨིན། དྲན་པ་བཟོ་དགོ: ཁྱོད་ཀྱིས་ཚིག་དང་བར་སྟོང་གི་རིམ་སྒྲིག་འདི་ ཚིག་ཡིག་ནང་ལུ་བཞག་དགོ། དཔེར་ན་: >>> anti_shuffle((\"Hi\")) (\"Hi\") >>> anti_shuffle((\"hello\")) (\"ehllo\") >>> anti_shuffle\"(Hello World!!!\")) (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string anti_shuffle(std::string s) {\n  std::string result = \"\";\n  std::string current_word = \"\";\n  for (char c : s) {\n    if (c == ' ') {\n      std::sort(current_word.begin(), current_word.end());\n      result += current_word;\n      result += c;\n      current_word = \"\";\n    } else {\n      current_word += c;\n    }\n  }\n  std::sort(current_word.begin(), current_word.end());\n  result += current_word;\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = anti_shuffle;\n    assert(candidate((\"Hi\")) == (\"Hi\"));\n    assert(candidate((\"hello\")) == (\"ehllo\"));\n    assert(candidate((\"number\")) == (\"bemnru\"));\n    assert(candidate((\"abcd\")) == (\"abcd\"));\n    assert(candidate((\"Hello World!!!\")) == (\"Hello !!!Wdlor\"));\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hi. My name is Mister Robot. How are you?\")) == (\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n"
    },
    {
        "task_id": "HumanEval/87",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ ཌི་ཨེམ་ཌི་ཌི་གི་ཨང་གྲངས་འདི་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་གཉིས་སྦེ་ཐོབ་ཨིན། འདི་ཡང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་གཉིས་སྦེ་ཐོབ་ཨིན། འདི་ཡང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་གཉིས་སྦེ་ཐོབ་ཨིན། འདི་ཡང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་ དེ་ལས་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་ དེ་ལས་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་གྲངས་ཚུ་ དེ་ལས་ ཌི་ཨེམ་ཌི་གི་ཨང་ཡིག་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨེམ་ཌི་གི་ཨང་ཚུ་དང་ ཌི་ཨང་ཚུ་དང་ ཌི་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་དང་ཨང་ཚུ་དང་ཨང་དང་ཨང་དང་ཨ\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n  std::vector<std::tuple<long, long>> coordinates;\n  for (long i = 0; i < lst.size(); ++i) {\n    std::vector<std::pair<long, long>> row_coords;\n    for (long j = 0; j < lst[i].size(); ++j) {\n      if (lst[i][j] == x) {\n        row_coords.push_back({j, i});\n      }\n    }\n    std::sort(row_coords.rbegin(), row_coords.rend());\n    for (const auto& coord_pair : row_coords) {\n      coordinates.emplace_back(coord_pair.second, coord_pair.first);\n    }\n  }\n  return coordinates;\n}",
        "test": "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));\n}\n"
    },
    {
        "task_id": "HumanEval/88",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཀྱི་ ཝི་ཅཊཱརཅིག་བྱིན་པ་ཅིན་ དབྱེ་བ་ཕྱེ་ཞིནམ་ལས་ ཝི་ཅཊཱརདེ་ཡར་འཕར་གྱི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་འོང་། ཁྱོད་ཀྱིས་ ཨང་གྲངས་དང་པའི་ཨང་གྲངས་དང་ མཇུག་གི་ཨང་གྲངས་ཚུ་ མ་འདྲཝ་ཨིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཨང་གྲངས་མར་འབབ་ཀྱི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་འོང་། དཔེར་ན་ ཁྱོད་ཀྱིས་ ཝི་ཅཊཱརདེ་ བསྒྱུར་མ་གཏང་། དཔེར་ན་: >>> sort_array (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)\nstd::vector<long> sort_array(std::vector<long> array) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> sort_array(std::vector<long> array) {\n  std::vector<long> sorted_array = array;\n  if (sorted_array.empty()) {\n    return sorted_array;\n  }\n  long first = 0;\n  long last = sorted_array.size() - 1;\n  if ((first + last) % 2 != 0) {\n    std::sort(sorted_array.begin(), sorted_array.end());\n  } else {\n    std::sort(sorted_array.rbegin(), sorted_array.rend());\n  }\n  return sorted_array;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));\n}\n"
    },
    {
        "task_id": "HumanEval/89",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨེ་རེ་འདི་ ཨེ་རེ་སྦེ་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ ཨེ་རེ་སྦེ་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨེ་རེ་འདི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་ཚུ་ཨེབ་གཏང་འབད་ཡོད་པའི་ཨེབ་གཏང་ཚུ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་ཨང་དེ་\nstd::string encrypt(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string encrypt(std::string s) {\n  std::string encrypted_s = \"\";\n  int shift = 2 * 2;\n  for (char c : s) {\n    if (isalpha(c)) {\n      char base = islower(c) ? 'a' : 'A';\n      encrypted_s += static_cast<char>((c - base + shift) % 26 + base);\n    } else {\n      encrypted_s += c;\n    }\n  }\n  return encrypted_s;\n}",
        "test": "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n"
    },
    {
        "task_id": "HumanEval/90",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཧྲིལ་ཨང་གི་བེ་ཀཊར་ཐོབ་ཡོདཔ་ཨིན། function next_smallest () འདི་བེ་ཀཊར་གྱི་བེ་ཀཊར་ཆུང་ཤོས་གཉིས་པ་སླར་ལོག་འབདཝ་ཨིན། དེ་བཟུམ་གྱི་བེ་ཀཊར་མེད་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། >>> next_smallest () འདི་བེ་ཀཊར་ཆུང་ཤོས་གཉིས་པ་སླར་ལོག་འབདཝ་ཨིན།\nstd::optional<long> next_smallest(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n\nstd::optional<long> next_smallest(std::vector<long> lst) {\n  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n  if (lst[0] == lst[1]) {\n    return std::nullopt;\n  }\n  return lst[1];\n}",
        "test": "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);\n}\n"
    },
    {
        "task_id": "HumanEval/91",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཐིག་ཅིག་ཐོབ་སྟེ་ ཁྱོད་ཀྱི་ལཱ་འདི་ བཀྲམ་སྟོན་འབད་ཡོད་པའི་གྱངས་ཁ་འདི་རྩིས་རྐྱབ་ནི་དེ་ཨིན། བཀྲམ་སྟོན་འབད་ཡོད་པའི་གྱངས་ཁ་འདི་ \"I\" ཟེར་ཚིག་འདི་ལས་ འགོ་བཙུགས་མི་ཚིག་ཡིག་ཅིག་ཨིན། ཚིག་ཡིག་འདི་ '.', '?' ཡང་ན་ '!' ཟེར་ས་སྒོ་ཕྱེ་ཨིན། དཔེར་ན་: >>> is_bored((\"Hello world\")) (0) >>> is_bored((\"གནམ་ཁ་འདི་ཧོནམོ་ཨིན། ཉིམ་ཤར་ཏེ་འདུག། ང་གནམ་གཤིས་འདི་དགའ་དོ་ཟེར་\")) (1)\nlong is_bored(std::string S) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong is_bored(std::string S) {\n  long boredom_count = 0;\n  std::string current_sentence = \"\";\n  for (char c : S) {\n    current_sentence += c;\n    if (c == '.' || c == '?' || c == '!') {\n      std::stringstream ss(current_sentence);\n      std::string first_word;\n      ss >> first_word;\n      if (first_word == \"I\") {\n        boredom_count++;\n      }\n      current_sentence = \"\";\n    }\n  }\n  return boredom_count;\n}",
        "test": "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/92",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་༣ལེན་མི་ལས་འགན་ཅིག་བཟོ་དགོ། ཨང་གྲངས་གཅིག་འདི་ གཞན་གཉིས་བསྡོམས་ཏེ་ཡོད་པ་ཅིན་བདེན་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་ཆ་མཉམ་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཨིན། གཞན་དོན་ཚན་ཚུ་ནང་རྫུས་མ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་ཚུ་ >>> any_int (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float)) (float) (float) (float)) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float (float) (float) (float (float)) (float) (float (float) (float (float) (float) (float (float) (float) (float (float) (float) (float (float) (float) (float (float) (float (float)) (float) (float (float)) (float) (float (float) (float) (float (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (\nbool any_int(float x, float y, float z) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool any_int(float x, float y, float z) {\n  if (std::floor(x) != x || std::floor(y) != y || std::floor(z) != z) {\n    return false;\n  }\n  long ix = static_cast<long>(x);\n  long iy = static_cast<long>(y);\n  long iz = static_cast<long>(z);\n  return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);\n}",
        "test": "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5f), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0f), (float(4)), (float(7))) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/93",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// བརྡ་འཕྲིན་ཅིག་ལེན་ཏེ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ནང་ལུ་ ཨང་བཏགས་ནི་ཡོད།\nstd::string encode(std::string message) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string encode(std::string message) {\n  std::string encoded_message = \"\";\n  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  std::map<char, char> vowel_map = {\n      {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'},\n      {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}};\n  for (char c : message) {\n    if (isalpha(c)) {\n      char swapped_case = islower(c) ? toupper(c) : tolower(c);\n      if (vowels.count(c)) {\n        encoded_message += vowel_map[c];\n      } else {\n        encoded_message += swapped_case;\n      }\n    } else {\n      encoded_message += c;\n    }\n  }\n  return encoded_message;\n}",
        "test": "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
    },
    {
        "task_id": "HumanEval/94",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཨང་གྲངས་ཧྲིལ་བུའི་ ཝི་ཅཊ་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱིས་སྦོམ་ཤོས་ཨང་གྲངས་ཨང་གྲངས་འཚོལ་དགོཔ་དང་ ཨང་གྲངས་ཚུ་བསྡོམས་དགོཔ་ཨིན། དཔེར་ན་: >>> skjkasdkd((std:: vector<long>((long) ༠, (long) ༣, (long) ༢, (long) ༡, (long) ༣, (long) ༥, (long) ༧, (long) ༨༡, (long) ༨༢, (long) ༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨༣, (long) ༨, (long) ༨༣, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨, (long) ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨ ༨\nlong skjkasdkd(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  for (long i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nlong sum_digits(long n) {\n  long sum = 0;\n  std::string s = std::to_string(n);\n  for (char c : s) {\n    sum += c - '0';\n  }\n  return sum;\n}\n\nlong skjkasdkd(std::vector<long> lst) {\n  long largest_prime = -1;\n  for (long num : lst) {\n    if (num > largest_prime && is_prime(num)) {\n      largest_prime = num;\n    }\n  }\n  if (largest_prime == -1) {\n    return 0;\n  }\n  return sum_digits(largest_prime);\n}",
        "test": "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191}))) == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));\n}\n"
    },
    {
        "task_id": "HumanEval/95",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// དཔེ་འབད་བ་ཅིན་: >>> check_dict_case{\"}\", \"apple\"}, {\"b\", \"banana\"}}))) (true) >>> check_dict_case{\"}, {\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"{\"}, \"}, \"{\"}, \"}, \"{\"}, \"}, \"{\"}, \"{\"}, \"}, \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \"\nbool check_dict_case(std::map<std::string,std::string> dict) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_dict_case(std::map<std::string,std::string> dict) {\n  if (dict.empty()) {\n    return false;\n  }\n  bool first_key_lower = false;\n  bool first_key_upper = false;\n  auto it = dict.begin();\n  if (!it->first.empty() && islower(it->first[0])) {\n    first_key_lower = true;\n  } else if (!it->first.empty() && isupper(it->first[0])) {\n    first_key_upper = true;\n  } else {\n    return false;\n  }\n  for (const auto& pair : dict) {\n    if (pair.first.empty()) {\n      return false;\n    }\n    bool current_lower = true;\n    bool current_upper = true;\n    for (char c : pair.first) {\n      if (!islower(c)) {\n        current_lower = false;\n      }\n      if (!isupper(c)) {\n        current_upper = false;\n      }\n    }\n    if (first_key_lower && !current_lower) {\n      return false;\n    }\n    if (first_key_upper && !current_upper) {\n      return false;\n    }\n    if (!first_key_lower && !first_key_upper) {\n        if (current_lower) first_key_lower = true;\n        else if (current_upper) first_key_upper = true;\n        else return false;\n    }\n  }\n  return first_key_lower || first_key_upper;\n}",
        "test": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/96",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// མན་ངག་འདི་ནང་ལུ་ ནུས་མེད་ཨང་གྲངས་ལེན་ཏེ་ ཨང་གྲངས་དང་པོ་ n གི་ ཝེ་ཀཊར་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> count_up_to((5)) (std::vector<long>({long) 2, (long) 3})) >>> count_up_to(11) (std::vector<long>({long) 2, (long) 3, (long) 5, (long) 7)) >>> count_up_to(0)) (std::vector<long>)) >>> count_up_to(20)) (std::vector<long>{(long) 2, (long) 3, (long) 5, (long) 7, (long) 11, (long) 13, (long) 17, (long) 19)) >>> count_up_1) (std::vector<long> >>> count_up_to(18) (std:vector<long>11, (long) 3, (long) 5, (long) 17)) (long) 1, (long) 2, (long)\nstd::vector<long> count_up_to(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long num) {\n  if (num <= 1) return false;\n  for (long i = 2; i * i <= num; ++i) {\n    if (num % i == 0) return false;\n  }\n  return true;\n}\n\nstd::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  if (n <= 2) {\n    return primes;\n  }\n  for (long i = 2; i < n; ++i) {\n    if (is_prime(i)) {\n      primes.push_back(i);\n    }\n  }\n  return primes;\n}",
        "test": "}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
    },
    {
        "task_id": "HumanEval/97",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཆ་མཉམ་གཉིས་ལེན་ཏེ་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཨང་གྲངས་ཚུ་སླར་ལོག་འབད་ནིའི་འགན་ཁུར་འདི་ཚངམ་སྦེ་བཀོལ་དགོ། ཨང་གྲངས་འདི་གཏན་འཇགས་སྦེ་ར་བཞག་དགོ། དཔེར་ན་: >>> མཉམ་པ་ (((148), (412)) (16) >>> མཉམ་པ་ (((19), (28)) (72) >>> མཉམ་པ་ (((2020), (1851)) (0) >>> མཉམ་པ་ (((14), (-15)) (20)\nlong multiply(long a, long b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong multiply(long a, long b) {\n  long unit_a = std::abs(a) % 10;\n  long unit_b = std::abs(b) % 10;\n  return unit_a * unit_b;\n}",
        "test": "}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/98",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string s ཅིག་བྱིན་པ་ཅིན་ གྱངས་ཁ་ཡང་ཆ་མཉམ་ནང་ཡིག་འབྲུ་སྦོམ་པའི་ཁ་སྐད་ཚུ་རྩིས་སྟོནམ་ཨིན། དཔེར་ན་: >>> count_upper (((\"aBCdEf\")) (1) >>> count_upper (((\"abcdefg\")) (0) >>> count_upper (((\"dBBE\")) (0)\nlong count_upper(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong count_upper(std::string s) {\n  long count = 0;\n  std::unordered_set<char> upper_vowels = {'A', 'E', 'I', 'O', 'U'};\n  for (long i = 0; i < s.length(); ++i) {\n    if (i % 2 == 0 && upper_vowels.count(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"EEEE\")) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/99",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཅིག་ལུ་ངོ་ཚབ་འབད་ཡོད་པའི་གནས་གོང་ (ཐིག་ཁྲམ་) དང་ དེ་དང་ཉེ་བའི་ཨང་གྲངས་ལོག་སྤྲོད་མི་ལས་འགན་ཅིག་བཟོ། ཨང་གྲངས་དེ་ ཨང་གྲངས་གཉིས་ལས་ རྒྱང་ཐག་འདྲ་མཉམ་ཡོད་པ་ཅིན་ ཨང་གྲངས་དེ་ ༠ ལས་ཕར་བསྡུ་འབད། དཔེ་གཞི་ཚུ་ >>> closest_integer(\"10\")) (10) >>> closest_integer(\"15.3\")) (15): ༠ ལས་ཕར་བསྡུ་འབད། འདི་ཡང་ ཁྱོད་ཀྱིས་ཨང་གྲངས་གཉིས་ལས་ རྒྱང་ཐག་འདྲ་མཉམ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ལོག་སྤྲོད་མི་དེ་ ༠ ལས་ཐག་རིང་ཤོས་དེ་ཨིན། དཔེར་ན་ closest_integer ((\"14.5\") གིས་ ༡༥ དང་ closest_integer ((-14.5\") གིས་ ༡༥ སླར་ལོག་འབདཝ་ཨིན།\nlong closest_integer(std::string value) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong closest_integer(std::string value) {\n  double num = std::stod(value);\n  if (num >= 0) {\n    if (num - std::floor(num) <= 0.5) {\n      return static_cast<long>(std::floor(num));\n    } else {\n      return static_cast<long>(std::ceil(num));\n    }\n  } else {\n    if (std::ceil(num) - num <= 0.5) {\n      return static_cast<long>(std::ceil(num));\n    } else {\n      return static_cast<long>(std::floor(num));\n    }\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/100",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ རྡོ་གི་གནས་ཚད་ n འབད་མི་རྡོ་བསྡམ་དགོཔ་ཨིན། གནས་ཚད་དང་པ་ལུ་ རྡོ་ n ཡོདཔ་ཨིན། གནས་ཚད་ཤུལ་མམ་གྱི་རྡོ་བསྡམ་ནི་དེ་: - n འདི་རྣམ་གྲངས་མེད་པ་ཅིན་ ཤུལ་མམ་གྱི་གྱངས་ཁ་འདི་ གྱངས་ཁ་མ་འདྲཝ་ཅིག་ཨིན་ - n འདི་ཉེར་མངམ་ཡོད་པ་ཅིན་ གྱངས་ཁ་ཉེར་མངམ་ཨིན། གནས་ཚད་རེ་རེའི་ནང་ རྡོ་གི་གྱངས་ཁ་སླར་ལོག་འབད་, གནས་ཚད་ (i+1) ནང་ལུ་ཡོད་པའི་ཆ་ཤས་ i གིས་ གནས་ཚད་ (i+1) ནང་ རྡོ་གི་གྱངས་ཁ་འདི་ངོ་ཚབ་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> make_a_pile((3)) (std::vector<long>{long) 3, (long) 5, (long) 7}))\nstd::vector<long> make_a_pile(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> pile;\n  long current_stones = n;\n  for (int i = 0; i < n; ++i) {\n    pile.push_back(current_stones);\n    if (current_stones % 2 != 0) {\n      current_stones += 2;\n    } else {\n      current_stones += 2;\n    }\n  }\n  return pile;\n}",
        "test": "}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n}\n"
    },
    {
        "task_id": "HumanEval/101",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཐིག་ཁྲམ་ཅིག་བྱིན་ནི་ཨིན་པ་ཅིན་ ཀམ་ཡང་ན་ བར་སྟོང་གིས་སོ་སོ་སྦེ་བཞག་འོང་། ཁྱོད་ཀྱི་ལཱ་འདི་ ཚིག་ཡིག་ཐིག་ཁྲམ་དེ་ ཚིག་ཁྲམ་སྦེ་ཁ་ཕྱེ་སྟེ་ ཚིག་ཡིག་གི་བེ་ཀཊར་ཅིག་ལོག་གཏང་ནི་དེ་ཨིན། དཔེར་ན་: >>> words_string (((\"Hi, my name is John\")) (std::vector<std::string>({(std::string) \"Hi\", (std::string) \"my\", (std::string) \"name\", (std::string) \"is\", (std::string) \"John\"}) >>> words_string (((\"གཅིག་,གཉིས་,གསུམ་,བཞི་,ལྔ་,དྲུག་\")) (std::vector<std::string>{(stdstring) \"གཅིག་\", (std::string) \"གཉིས་\", (std::string) \"གསུམ་\", (std::string) \"བཞི་\", (std::string) \"ལྔ་\", (std::string) \"དྲུག་\"})\nstd::vector<std::string> words_string(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> words_string(std::string s) {\n  std::vector<std::string> words;\n  std::string current_word;\n  for (char c : s) {\n    if (c == ',' || c == ' ') {\n      if (!current_word.empty()) {\n        words.push_back(current_word);\n        current_word = \"\";\n      }\n    } else {\n      current_word += c;\n    }\n  }\n  if (!current_word.empty()) {\n    words.push_back(current_word);\n  }\n  return words;\n}",
        "test": "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"gamal\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/102",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་ལས་འགན་འདི་ ནུས་ལྡན་ཨང་གྲངས་ x དང་ y གཉིས་ལེན་ཏེ་ [x, y] ནང་ཡོད་པའི་ཨང་གྲངས་ཆ་མཉམ་སྦོམ་ཤོས་དེ་སླར་ལོག་འབདཝ་ཨིན། ག་དེམ་ཅིག་སྦེ་ འདི་བཟུམ་གྱི་ཨང་གྲངས་མེད་པ་ཅིན་ ལས་འགན་འདི་གིས་ -1 སླར་ལོག་འབད་ནི་ཨིན། དཔེར་ན་: >>> choose_num((12), (15)) (14) >>> choose_num((13), (12)) (-1)\nlong choose_num(long x, long y) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong choose_num(long x, long y) {\n  if (x > y) {\n    return -1;\n  }\n  long end = y;\n  if (end % 2 != 0) {\n    end--;\n  }\n  if (end < x) {\n    return -1;\n  }\n  return end;\n}",
        "test": "}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
    },
    {
        "task_id": "HumanEval/103",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་གཉིས་ n དང་ m བྱིན་ཡོདཔ་ད་ ཁྱོད་ཀྱི་ལཱ་འདི་ ནུས་ལྡན་ཨང་གྲངས་ལས་ m ཚུན་གྱི་བར་ནའི་རྩིས་རྐྱབ་ནི་ཨིན། ཨང་གྲངས་ n དང་ m ཚུ་རྩིས་ཏེ་ཨིན། ཨང་གྲངས་འདི་ སྦོ་ལོགས་ཁར་ཡོད་པའི་ཨང་གྲངས་ལུ་བསྡུ་སྟེ་ གཉིས་ལྡན་ལུ་བསྒྱུར་དགོ། n འདི་ m ལས་སྦོམ་ཡོད་པ་ཅིན་ -1 སླར་ལོག་འབད། དཔེ་འབད་བ་ཅིན་: >>> rounded_avg((1), (5)) \"0b11\" >>> rounded_avg(7), (5)) -1 >>> rounded_avg(10), (20)) \"0b1111\" >>> rounded_avg(20), (33) \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;\n    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_string_long rounded_avg(long n, long m) {\n  if (n > m) {\n    return Union_std_string_long(-1);\n  }\n  double sum = 0;\n  for (long i = n; i <= m; ++i) {\n    sum += i;\n  }\n  double avg = sum / (m - n + 1);\n  long rounded_avg_long = std::round(avg);\n  if (rounded_avg_long == 0) {\n    return Union_std_string_long(\"0b0\");\n  }\n  std::string binary_string = \"\";\n  long temp = std::abs(rounded_avg_long);\n  while (temp > 0) {\n    binary_string = (temp % 2 == 0 ? \"0\" : \"1\") + binary_string;\n    temp /= 2;\n  }\n  return Union_std_string_long(\"0b\" + binary_string);\n}",
        "test": "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
    },
    {
        "task_id": "HumanEval/104",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཕྲང་སྒྲིག་ x གི་ ཕྲང་སྒྲིག་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཕྲང་སྒྲིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན། ཟུར་ཐོ་:སླར་ལོག་འབད་མི་ཕྲང་སྒྲིག་འདི་ ཡར་སེང་རིམ་སྒྲིག་ནང་བཞག་དགོ། དཔེར་ན་: >>> unique_digits(std::vector<long>({(long) 15, (long) 33, (long) 1422, (long) 1}))) (std::vector<long>{(long) 1, (long) 15, (long) 33})) >>> unique_digits(std::vector<long>{(long) 152, (long) 323, (long) 1422, (long) 10}))) (std::vector<long>(long))\nstd::vector<long> unique_digits(std::vector<long> x) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool has_even_digit(long n) {\n  std::string s = std::to_string(n);\n  for (char c : s) {\n    if ((c - '0') % 2 == 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nstd::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (long val : x) {\n    if (!has_even_digit(val)) {\n      result.push_back(val);\n    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n"
    },
    {
        "task_id": "HumanEval/105",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ ཝི་ཅཊ་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་དེ་ ༡ དང་ ༩ གི་བར་ན་ཡོད་པའི་ ཨང་གྲངས་ཚུ་དབྱེ་བ་ཕྱེ་ཞིནམ་ལས་ ཝི་ཅཊ་དེ་ བསྒྱུར་བཅོས་འབད་ཞིནམ་ལས་ ཨང་གྲངས་རེ་རེ་བཞིན་དུ་ འདི་གི་མིང་དང་བསྟུན་པའི་ \"གཅིག་\", \"གཉིས་\", \"གསུམ་\", \"བཞི་\", \"ལྔ་\", \"དྲུག་\", \"བདུན་\", \"བརྒྱད་\", \"དགུ་\" སྦེ་ཚབ་བཙུགས་ དཔེར་ན་: >>> by_length(std::vector<long>{long) 2, (long) 1, (long) 1, (long) 4, (long) 5, (long) 8, (long) 2, (long) 3}))) (std::vector<std::string>{(std::string) \"བརྒྱད་\", (std::string) \"ལྔ་\", (std::string) \"བཞི་\", (std::string) \"གསུམ་\", (std::string) \"གཉིས་\", (std::string) \"བཞི་\", \"ལྔ་\", (std::string) \"ལྔ་\", (std::string) \"ལྔ་\", (std::string) \"ལྔ་\", (std::string) \"ལྔ་\", (std::string) \"ལྔ་\", (string) \"ལྔ་\", (string) \"third\" (string) \"third\") (string) \"third\"string (string) \"string\") (string) \"string (string\") (string) \"string (string\") \"string (string\") \"string (string\") \"string (string\") \"string (string\") \"string (string\") \"string (string\") \"string (string\") \"string (string\") \"string (string\") \"string (string\") \"string (string) \"string\") \"string (string\") \"string (string) \"string (string\") \"string (string\") \"string (string) \"string (string\") \"string (string) \"string (th) \"string (string) \"string (string\") \"string (th) \"string (th) \"string (th) \"string (\nstd::vector<std::string> by_length(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> by_length(std::vector<long> arr) {\n  std::vector<long> valid_numbers;\n  std::vector<std::string> result;\n  std::map<long, std::string> number_names = {\n      {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"},\n      {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n  for (long num : arr) {\n    if (num >= 1 && num <= 9) {\n      valid_numbers.push_back(num);\n    }\n  }\n  std::sort(valid_numbers.begin(), valid_numbers.end());\n  std::reverse(valid_numbers.begin(), valid_numbers.end());\n  for (long num : valid_numbers) {\n    result.push_back(number_names[num]);\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"Eight\", (std::string)\"Four\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/106",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ལས་འགན་ f འདི་ n འདི་ཚད་འཛིན་སྦེ་ལེན་ཏེ་ ཚད་ n གི་བེ་ཊར་ཅིག་ལོག་བྱིན་ཏེ་ དེ་བཟུམ་འབད་བ་ཅིན་ གནས་གོང་ i འདི་ i གི་གནས་གོང་དང་ ཡང་ན་ i ལས་ 1 ལས་ i ཚུན་གྱི་གྲངས་ཚུ་བསྡོམས་པ་ཅིན་ i གི་གནས་གོང་དེ་ i གི་གནས་གོང་དང་ ཡང་ན་ i ལས་ 1 ལས་ i ཚུན་གྱི་གྲངས་ཚུ་བསྡོམས་པ་ཅིན་ i གི་གནས་གོང་དེ་ 1 ལས་འགོ་བཙུགསཔ་ཨིན། i གི་གནས་གོང་དེ་ 1 ལས་ i ཚུན་གྱི་གྲངས་ཚུ་སྤེལ་བ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> f((5)) (std::vector<long>{(long) 1, (long) 2, (long) 6, (long) 24, (long) 15})\nstd::vector<long> f(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(long n) {\n  std::vector<long> result;\n  for (long i = 1; i <= n; ++i) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (long j = 1; j <= i; ++j) {\n        factorial *= j;\n      }\n      result.push_back(factorial);\n    } else {\n      long sum = 0;\n      for (long j = 1; j <= i; ++j) {\n        sum += j;\n      }\n      result.push_back(sum);\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = f;\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));\n}\n"
    },
    {
        "task_id": "HumanEval/107",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཚངམ་ n བྱིན་པ་ཅིན་ ཨང་གྲངས་ཚངམ་དང་ཨང་གྲངས་ཆ་མེད་ palindromes གྱངས་ཁ་འདི་ ཚད་འཛིན་འབད་ཡོད་པའི་ཨང་གྲངས་ཚངམ་དང་ཨང་གྲངས་ཆ་མེད་ palindromes གྱངས་ཁ་འདི་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་ ༡: >>> even_odd_palindrome (((3)) (std::make_tuple ((1, 2)) འགྲེལ་བཤད་: ཨང་གྲངས་ཆ་མེད་ palindromes འདི་ ༡, ༢, ༣ ཨིན། འདི་གི་གྲལ་ལས་ གཅིག་འདི་ཆ་མཉམ་དང་ གཉིས་འདི་ཆ་མེད་ཨིན། དཔེ་གཞི་ ༢: >>> even_odd_palindrome (((12)) (std::make_tuple ((4, 6)) འགྲེལ་བཤད་: ཨང་གྲངས་ཆ་མེད་ palindromes འདི་ ༡, ༢, ༣, ༤, ༥, ༦, ༧, ༨, ༩, ༡༡ ། འདི་ཚུ་གི་གྲལ་ལས་བཞི་འདི་ཆ་མཉམ་དང་༦འདི་ཆ་མེད་ཨིན། དྲན་པ་: ༡. <= n= ༡༠^༣ <= ༡༠^༣ ༢ སླར་ལོག་འབད་ཡོད་པའི་ཨང་གྲངས་ཚངམ་དང་ཨང་གྲངས་ཆ་མེད་ palindromes གྱངས་ཁ་འདི་སོ་སོར་སྦེ་ཡོདཔ་ཨིན།\nstd::tuple<long, long> even_odd_palindrome(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_palindrome(long num) {\n  std::string s = std::to_string(num);\n  std::string reversed_s = s;\n  std::reverse(reversed_s.begin(), reversed_s.end());\n  return s == reversed_s;\n}\n\nstd::tuple<long, long> even_odd_palindrome(long n) {\n  long even_count = 0;\n  long odd_count = 0;\n  for (long i = 1; i <= n; ++i) {\n    if (is_palindrome(i)) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n  }\n  return std::make_tuple(even_count, odd_count);\n}",
        "test": "}\nint main() {\n    auto candidate = even_odd_palindrome;\n    assert(candidate((123)) == (std::make_tuple(8, 13)));\n    assert(candidate((12)) == (std::make_tuple(4, 6)));\n    assert(candidate((3)) == (std::make_tuple(1, 2)));\n    assert(candidate((63)) == (std::make_tuple(6, 8)));\n    assert(candidate((25)) == (std::make_tuple(5, 6)));\n    assert(candidate((19)) == (std::make_tuple(4, 6)));\n    assert(candidate((9)) == (std::make_tuple(4, 5)));\n    assert(candidate((1)) == (std::make_tuple(0, 1)));\n}\n"
    },
    {
        "task_id": "HumanEval/108",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གྲངས་རྩིས་_ཨང་གྲངས་འདི་ ཨང་གྲངས་ཆ་མཉམ་ལས་བརྒལ་ཏེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་འདི་ ནུས་པ་ཨིནམ་ལས་ ཨང་གྲངས་དང་པ་འདི་ ནུས་པ་འོང་ནི་ཨིན་མས། དཔེར་ན་ -༡༢༣ ལུ་ ཨང་གྲངས་ -༡,༢,༣ ཡོད་པའི་ནང་། >>> ཨང་གྲངས་_༡༠༣ ཚུ་ནང་།\nlong count_nums(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_digits_signed(long n) {\n  std::string s = std::to_string(n);\n  long sum = 0;\n  for (long i = 0; i < s.length(); ++i) {\n    if (i == 0 && s[i] == '-') {\n      if (s.length() > 1) {\n        sum -= (s[i + 1] - '0');\n        i++;\n      }\n    } else {\n      sum += (s[i] - '0');\n    }\n  }\n  return sum;\n}\n\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n  for (long num : arr) {\n    if (sum_digits_signed(num) > 0) {\n      count++;\n    }\n  }\n  return count;\n}",
        "test": "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/109",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ང་བཅས་ནང་ལུ་ ཝི་ཅཊ་ 'arr' འདི་ནང་ལུ་ ཨང་གྲངས་ N ཡོད་པའི་ཁར་ ཨང་གྲངས་ arr[1], arr[2], ..., arr[N] འདི་ ཝི་ཅཊ་ནང་ལུ་ཡོད་མི་ཚུ་ སྟབས་བདེ་དྲགས་སྦེ་རིམ་སྒྲིག་འབད་འོང་། ཁྱོད་ཀྱི་ལཱ་འདི་ ཝི་ཅཊ་འདི་ མར་འབབ་འགྱོ་ནི་མེད་པའི་རིམ་སྒྲིག་ནང་ དབྱེ་བ་ཕྱེ་ཚུགསཔ་ཨིན་ན་ ངེས་གཏན་བཟོ་ནི་དེ་ཨིན། ཁྱོད་ཀྱིས་ ཝི་ཅཊ་འདི་ནང་ལུ་ འོག་གི་ལཱ་ཚུ་འབད་ཐོག་ལས་ ཕྲང་ལམ་འགྱོ་སའི་ལཱ་ཚུ་ ཚར་ལེ་ཤ་འབད་ཚུགས། ཕྲང་ལམ་འགྱོ་སའི་ལཱ་ཅིག་གིས་ ཝི་ཅཊ་གི་ཆ་ཤས་ཆ་མཉམ་ལུ་ ཕྲང་ལམ་གྱི་ས་སྒོ་གཅིག་ལས་ སྤོ་བཤུད་འབད་ཚུགསཔ་ཨིན། ཝི་ཅཊ་གི་ཆ་ཤས་མཇུག་འདི་ ཝི་ཅཊ་ནང་ འགོ་བཙུགས་པའི་ས་སྒོ་ལུ་ སྤོ་བཤུད་འབད་འོང་། དཔེར་ན་ 0th index འདི་ཨིན། ག་དེམ་ཅིག་སྦེ་ དབྱེ་བ་ཕྱེ་མི་ཝི་ཅཊ་འདི་ གོང་གི་ལཱ་འབད་ཐོག་ལས་ཐོབ་ཚུགས་པ་ཅིན་ true སླར་ལོག་གཏང་པ་ཅིན་ false སླར་ལོག་གཏང་འོང་། ག་དེམ་ཅིག་སྦེ་ ཝི་ཅཊ་འདི་ སྟོངམ་ཡོད་པ་ཅིན་ true སླར་ལོག་གཏང་དགོ། དཔེར་ན་ >>>plan_one_ball_((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nbool move_one_ball(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool move_one_ball(std::vector<long> arr) {\n  if (arr.empty()) {\n    return true;\n  }\n  int n = arr.size();\n  std::vector<long> sorted_arr = arr;\n  std::sort(sorted_arr.begin(), sorted_arr.end());\n  for (int shift = 0; shift < n; ++shift) {\n    std::vector<long> shifted_arr(n);\n    for (int i = 0; i < n; ++i) {\n      shifted_arr[i] = arr[(i - shift + n) % n];\n    }\n    if (shifted_arr == sorted_arr) {\n      return true;\n    }\n  }\n  return false;\n}",
        "test": "}\nint main() {\n    auto candidate = move_one_ball;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/110",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་དཀའ་ངལ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་ལས་འགན་ཅིག་ལག་ལེན་འཐབ་ནི་ཨིན་པ་ཅིན་ ཨང་གྲངས་ཀྱི་བེ་ཊར་གཉིས་ལེན་ཏེ་ lst1འདི་ ཨང་གྲངས་ཆ་མཉམ་གྱི་བེ་ཊར་བཟོ་ནིའི་དོན་ལུ་ ཁོང་གཉིས་ཀྱི་བར་ན་ དབྱེ་བ་ཚུ་བརྗེ་སོར་འབད་ཚུགསཔ་ཨིན་ན་ ངེས་གཏན་བཟོ་འོང་། lst1 དང་ lst2གི་བར་ན་ དབྱེ་བ་བརྗེ་སོར་འབད་ཚུགསཔ་གི་ཚད་གཞི་མེད་ཨིན། lst1 དང་ lst2གི་བར་ན་ དབྱེ་བ་ཚུ་བརྗེ་སོར་འབད་ཚུགསཔ་ཨིན་པ་ཅིན་ lst1 གི་ཡན་ལག་ཆ་མཉམ་འདི་ཆ་མཉམ་སྦེ་བཟོ་སྟེ་ \"YES\" སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ \"NO\" སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> exchange((std::vector<>(long) {1, (long) 2, (long) 3, (long) 4})), (std::vector<>(long) {1, (long) 2, (long) 3, (long) 4}) (\"YES\") >>>((std::vector<>{1, (long) 2, (long) 3, (long) 4}), (std::vector<>(long) NO:<> (long) 5, (long) {ty) ཚུ་ནང་འདྲེན་འབད་འོང་ཟེར་མནོ་སྟེ་ ནང་བསྐྱོད་འོང་།\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n  long odd_count_lst1 = 0;\n  for (long num : lst1) {\n    if (num % 2 != 0) {\n      odd_count_lst1++;\n    }\n  }\n  long even_count_lst2 = 0;\n  for (long num : lst2) {\n    if (num % 2 == 0) {\n      even_count_lst2++;\n    }\n  }\n  if (even_count_lst2 >= odd_count_lst1) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = exchange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (\"YES\"));\n}\n"
    },
    {
        "task_id": "HumanEval/111",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གནས་གོང་འདི་ཡིག་འབྲུ་ཆུང་བ་ཚུ་ས་སྒོ་སོ་སོར་སྦེ་བཏོན་ཏེ་ཡོད་པའི་ཡིག་འབྲུ་དང་བསྟུན་ཏེ་སླར་ལོག་འབདཝ་ཨིན། ཡི་གུ་ལེ་ཤ་ཅིག་རང་ འབྱུང་པ་ཅིན་ དེ་ཚུ་ག་ར་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> histogram (((\"a b c\")) (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}})) >>> histogram (((\"a b a\")) (std::map<std::string,>({{\"a\", 2}, {\"b\", 2}})) >>> histogram (((\"a b c a b\")) (std::map<std::string,long>{{\"a\", 2}, {\"b\", 2}})) >>> histogram (b b a) (std::map<std::string,long>{{\"a\", 2}, {\"b\", 2}})) >>> histogram (b b b a\") (std::std::string, 4\") ({{\"b\", 1}}) >>> (std:string,long>) (https:string,long))\nstd::map<std::string,long> histogram(std::string test) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> histogram(std::string test) {\n  std::map<std::string, long> counts;\n  std::string current_word;\n  std::stringstream ss(test);\n  while (ss >> current_word) {\n    counts[current_word]++;\n  }\n  if (counts.empty()) {\n    return {};\n  }\n  long max_count = 0;\n  for (const auto& pair : counts) {\n    if (pair.second > max_count) {\n      max_count = pair.second;\n    }\n  }\n  std::map<std::string, long> result;\n  for (const auto& pair : counts) {\n    if (pair.second == max_count) {\n      result[pair.first] = pair.second;\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n"
    },
    {
        "task_id": "HumanEval/112",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ལས་འགན་ལུ་ ཀེར་ཐིག་ s དང་ c གཉིས་བྱིན་ཡོདཔ་ད་ ཁྱོད་ཀྱིས་ ཀེར་ཐིག་ s ནང་གི་ཡིག་འབྲུ་ཚུ་ཆ་མཉམ་འདི་ ཀེར་ཐིག་ c ནང་གི་ཡིག་འབྲུ་ཚུ་དང་འདྲན་འདྲ་སྦེ་སེལ་འཐུ་འབད་དགོ་ དེ་ལས་ གྲུབ་འབྲས་ ཀེར་ཐིག་དེ་ ཚད་ལྡན་ཨིནམ་སྦེ་བརྟག་དཔྱད་འབད་དགོ་ ཀེར་ཐིག་འདི་ ཚད་ལྡན་ཨིནམ་སྦེ་སླབ་པ་ཅིན་ ཤུལ་ལས་ལོག་འགྱོ་མི་དང་ ཧེ་མ་འགྱོ་མི་གཉིས་ཆ་ར་གཅིག་སྦེ་ལྷག་ཚུགས། ཁྱོད་ཀྱིས་ གྲུབ་འབྲས་ ཀེར་ཐིག་དང་བདེན་པ་/རྫུན་མ་ཡོད་མི་འདི་ལོག་གཏང་དགོ། དཔེ་འབད་བ་ཅིན་ >>> reverse_delete((\"abcde\"), (\"ae\")) (std::make_tuple\"bcd\", false)) >>> reverse_delete\"abcdef\", (\"b\") (std::make_tuple\"acdef\",)) >>> reverse_delete\"abcded\", false)) >>> reverse_delete\"abcded\", false\") (std::make_tuple\"abcded\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n  std::string result = \"\";\n  std::unordered_set<char> chars_to_delete(c.begin(), c.end());\n  for (char ch : s) {\n    if (chars_to_delete.find(ch) == chars_to_delete.end()) {\n      result += ch;\n    }\n  }\n  std::string reversed_result = result;\n  std::reverse(reversed_result.begin(), reversed_result.end());\n  return std::make_tuple(result, result == reversed_result);\n}",
        "test": "}\nint main() {\n    auto candidate = reverse_delete;\n    assert(candidate((\"abcde\"), (\"ae\")) == (std::make_tuple(\"bcd\", false)));\n    assert(candidate((\"abcdef\"), (\"b\")) == (std::make_tuple(\"acdef\", false)));\n    assert(candidate((\"abcdedcba\"), (\"ab\")) == (std::make_tuple(\"cdedc\", true)));\n    assert(candidate((\"dwik\"), (\"w\")) == (std::make_tuple(\"dik\", false)));\n    assert(candidate((\"a\"), (\"a\")) == (std::make_tuple(\"\", true)));\n    assert(candidate((\"abcdedcba\"), (\"\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"abcdedcba\"), (\"v\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"vabba\"), (\"v\")) == (std::make_tuple(\"abba\", true)));\n    assert(candidate((\"mamma\"), (\"mia\")) == (std::make_tuple(\"\", true)));\n}\n"
    },
    {
        "task_id": "HumanEval/113",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string གི་བེ་ཊར་ཅིག་བྱིནམ་ད་ string འདི་ནང་ཨང་ཡིག་རྐྱངམ་ཅིག་ཡོདཔ་ལས་ བེ་ཊར་ཅིག་ལོག་གཏང་། འཐོན་ཁུངས་ཀྱི་ཆ་ཤས་རེ་རེ་ i འདི་ \"ཨང་ཡིག་ i གི་ནང་ཐིག་གི་ཆ་ཤས་རྣམ་རྟོག་གི་གྱངས་ཁ་\" ཨིནམ་དང་ i ཚུ་ཆ་ཤས་ i པའི་ནང་ཐིག་གི་ཨང་ཡིག་རྣམ་རྟོག་གི་གྱངས་ཁ་གིས་ཚབ་བཙུགས་དགོ། >>> odd_count((std::vector<std::string>(({std::string) \"1234567\"}))) (std::vector<std::string>({stdstring)::\" 4n གི་ནང་ཐིག་གི་ཆ་ཤས་རྣམ་རྟོག་གི་གྱངས་ཁ་ 4n 4n 4n 4n. \")) >>> odd_count((stdvector<stdstring>::{(stdstring)::\"3n (string)::1111\"11\"))) (std vector<std::string::n) 1n: \"8n 1n: 1n: 8n) ཚུ་ནང་ཐིག་གི་ཆ་ཤས་རྣམ་རྟོག་གི་གྱངས་ཁ་ 1n 8n 8n. \" (string)\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n  std::vector<std::string> result;\n  for (const std::string& s : lst) {\n    int count = 0;\n    for (char c : s) {\n      if ((c - '0') % 2 != 0) {\n        count++;\n      }\n    }\n    std::string count_str = std::to_string(count);\n    std::string modified_s = s;\n    for (char& c : modified_s) {\n      if (isdigit(c) && (c - '0') % 2 != 0) {\n        c = count_str[0];\n      }\n    }\n    result.push_back(\"the number of odd elements \" + count_str + \"n the str\" + modified_s + \"ng \" + modified_s + \" of the \" + modified_s + \"nput.\");\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = odd_count;\n    assert(candidate((std::vector<std::string>({(std::string)\"1234567\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"271\", (std::string)\"137\", (std::string)\"314\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (std::string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/114",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་ཨང་ n གི་བེ་ཊར་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་ཨང་མེན་པའི་བེ་ཊར་ཆུང་ཤོས་ཅིག་གི་བསྡོམས་དེ་འཚོལ་དགོ། དཔེ་གཞི་ >>> minSubArraySum(((std::vector<long>({long) 2, (long) 3, (long) 4, (long) 1, (long) 2, (long) 4}))) (1) >>> minSubArraySum(std::vector<long>{(long) -1, (long) -2, (long) -3)))) (-6)\nlong minSubArraySum(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.empty()) {\n    throw std::invalid_argument(\"Input vector cannot be empty.\");\n  }\n  long min_so_far = nums[0];\n  long current_min = nums[0];\n  for (size_t i = 1; i < nums.size(); ++i) {\n    current_min = std::min(nums[i], current_min + nums[i]);\n    min_so_far = std::min(min_so_far, current_min);\n  }\n  return min_so_far;\n}",
        "test": "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10}))) == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/115",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཆུ་རྐ་གི་ཟུར་བཞི་འབད་མི་ཐིག་ཁྲམ་ཅིག་ཐོབ་ཨིན། ཐིག་ཁྲམ་རེ་ལུ་ཆུ་རྐ་གཅིག་ཡོདཔ་དང་ ཐིག་ཁྲམ་རེ་ལུ་ཆུ་གི་ཆ་ཤས་གཅིག་ཡོདཔ་ཨིན། ཆུ་རྐ་རེ་ལུ་ཆུ་བཏོན་ནིའི་དོན་ལུ་ ཆུ་རྫིང་རེ་ཡོདཔ་དང་ ཆུ་རྫིང་ག་ར་ནང་ཆུ་གི་ནུས་པ་གཅིག་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཆུ་རྫིང་ཚུ་ལག་ལེན་འཐབ་སྟེ་ ཆུ་རྐ་སྟོངམ་བཟོ་ནི་ཨིན། ཁྱོད་ཀྱིས་ཆུ་རྫིང་ཚུ་མར་ཕབ་འབད་དགོ་པའི་གྱངས་ཁ་འདི་ཨེབ་གཏང་འབད། དཔེ་ 1: >>> max_fill((std::vector<std::vector<long> (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long) vector (long vector (long) vector (long) vector (long vector) vector (long vector (long) vector (long vector) vector (long vector) (long vector) (long vector) vector (long vector (long vector) (long vector) (long vector) vector (long vector) (long vector) (long vector (long vector) (long vector) vector (long vector) (long vector) (long vector) (long vector)\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n  long bucket_lowering_count = 0;\n  for (const auto& row : grid) {\n    long water_in_well = 0;\n    for (long unit : row) {\n      water_in_well += unit;\n    }\n    bucket_lowering_count += (water_in_well + capacity - 1) / capacity;\n  }\n  return bucket_lowering_count;\n}",
        "test": "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/116",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// འ་ནི་ཀ་ཏ་ནང་ལུ་ ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཀྱི་ ཝི་ཅཱཊ་འདི་ གཉིས་ལྡན་གྱི་ཐོག་ལས་ཡར་སེང་གི་རིམ་པ་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ། ཨང་གྲངས་འདྲ་མཉམ་གྱི་དོན་ལུ་ ཨང་གྲངས་བཅུ་ཐམ་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ། འདི་བཟུམ་སྦེ་ལག་ལེན་འཐབ་དགོཔ་ཨིན།: >>> sort_array (long) 1, (long) 2, (long) 2, (long) 3, (long) 4, (long) 5 (long) 1, (long) 2, (long) 3, (long) 4, (long) 5 (long) 6 (long) (long) 3, (long) 2, (long) 3, (long) 4 (long) 6 (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (\nstd::vector<long> sort_array(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nint count_set_bits(long n) {\n  int count = 0;\n  if (n < 0) {\n    n = std::abs(n);\n  }\n  while (n > 0) {\n    n &= (n - 1);\n    count++;\n  }\n  return count;\n}\n\nbool compare(long a, long b) {\n  int bits_a = count_set_bits(a);\n  int bits_b = count_set_bits(b);\n  if (bits_a != bits_b) {\n    return bits_a < bits_b;\n  }\n  return a < b;\n}\n\nstd::vector<long> sort_array(std::vector<long> arr) {\n  std::sort(arr.begin(), arr.end(), compare);\n  return arr;\n}",
        "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n}\n"
    },
    {
        "task_id": "HumanEval/117",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string s དང་ རང་བཞིན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ string s ལས་ ཚིག་ཡིག་ཆ་མཉམ་ལས་ ཝེ་ཀཊར་ཅིག་ལོག་གཏང་མི་ལས་འགན་ཅིག་ལག་ལེན་འཐབ་སྟེ་ཡོད་ འདི་གི་ནང་ ཚིག་ཡིག་ཆ་མཉམ་ནང་ ཝེ་ཀཊར་ n ཡོད་མི་ལུ་བརྟེན་ ཚིག་ཡིག་ཚུ་ string s ནང་མཐོང་འོང་། string s དེ་སྟོངམ་ཨིན་པ་ཅིན་ ལས་འགན་གྱིས་ ཝེ་ཀཊར་སྟོངམ་ཅིག་ལོག་གཏང་དགོ། དཔེར་ན་: >>> select_words (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string>) (<string))\nstd::vector<std::string> select_words(std::string s, long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_consonant(char c) {\n  c = tolower(c);\n  return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n}\n\nstd::vector<std::string> select_words(std::string s, long n) {\n  std::vector<std::string> result;\n  std::string current_word;\n  for (char c : s) {\n    if (c == ' ') {\n      long consonant_count = 0;\n      for (char word_char : current_word) {\n        if (is_consonant(word_char)) {\n          consonant_count++;\n        }\n      }\n      if (consonant_count == n) {\n        result.push_back(current_word);\n      }\n      current_word = \"\";\n    } else {\n      current_word += c;\n    }\n  }\n  long consonant_count = 0;\n  for (char word_char : current_word) {\n    if (is_consonant(word_char)) {\n      consonant_count++;\n    }\n  }\n  if (consonant_count == n) {\n    result.push_back(current_word);\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/118",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཚིག་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཚིག་གི་གཡས་ཁ་ཐུག་ལས་ ཟུར་སྒྲོམ་གཉིས་ཀྱི་བར་ན་ཡོད་མི་ ཕྲ་རིང་འདི་འཚོལ་ནི་དེ་ཨིན། འགོ་བཙུགས་དང་མཇུག་གི་ཕྲ་རིང་ཚུ་རྩིས་མི་བཏུབ། ཁྱོད་ཀྱིས་ཕྲ་རིང་ཅིག་མ་ཐོབ་པ་ཅིན་ སྟོངམ་ཐིག་ཁྲམ་ཅིག་ལོག་གཏང་། ཁྱོད་ཀྱིས་བྱིན་ཡོད་པའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨིང་ལིཤ་ཡི་གུ་རྐྱངམ་གཅིག་ཡོད་ཟེར་ཆ་བཞག་ཚུགས། དཔེ་འབད་བ་ཅིན་: >>> get_closest_vowel (((\"yogurt\")) (\"u\") >>> get_closest_vowel (((\"FULL\")) (\"U\") >>> get_closest_vowel (((\"quick\")) (\"\") >>> get_closest_vowel (((ab\") (\"\")\nstd::string get_closest_vowel(std::string word) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_vowel(char c) {\n  c = tolower(c);\n  return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\n\nbool is_consonant(char c) {\n  return isalpha(c) && !is_vowel(c);\n}\n\nstd::string get_closest_vowel(std::string word) {\n  if (word.length() < 3) {\n    return \"\";\n  }\n  for (int i = word.length() - 2; i >= 1; --i) {\n    if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {\n      return std::string(1, word[i]);\n    }\n  }\n  return \"\";\n}",
        "test": "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
    },
    {
        "task_id": "HumanEval/119",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ string ཌའི་ལོག་གཉིས་ཐོབ་སྟེ་ཡོདཔ་ད་ string ཌའི་ལོག་གཉིས་ཆ་ར་ལུ་ སྒོ་སྒྲིག་ '(' ཡང་ན་ སྒོ་སྒྲིག་ ') 'རྐྱངམ་ཅིག་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ string ཌའི་ལོག་གཉིས་རིམ་པ་གཅིག་ནང་ལུ་མཐུད་དེ་ཡོད་པ་ཅིན་ གྲུབ་འབྲས་ string འདི་ལེགས་ཤོམ་འོང་ག་བརྟག་དཔྱད་འབད་དགོཔ་ཨིན། string S འདི་ལེགས་ཤོམ་སྦེ་བརྩི་བ་ཅིན་ S ནང་གི་ parentheses ག་ར་མཉམ་གནས་ཡོད་པ་ཅིན་རྐྱངམ་གཅིག་ལེགས་ཤོམ་ཨིན། དཔེར་ན་ string '(())) 'འདི་ལེགས་ཤོམ་ཨིན་ དེ་ལས་ string '()) 'འདི་ལེགས་ཤོམ་མེན་པ་ཅིན་ 'Yes' སླར་ལོག་འབད། string འདི་ལེགས་ཤོམ་བཟོ་ནིའི་ལམ་ཡོད་པ་ཅིན་ 'Yes' སླར་ལོག་འབད། དེ་ལས་གཞན་པ་ཅིན་ 'No' སླར་ལོག་འབད། དཔེ་འབད་བ་ཅིན་: >>> match_parens((std::vector<std::string>{((stdstring) \") \", ((std::string)))) \"} (\"Yes\") >>> match_parens<std::vector<std>{(std::string\") (\", ((std:string\") (\") (No\"))))\nstd::string match_parens(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_good(const std::string& s) {\n  int balance = 0;\n  for (char c : s) {\n    if (c == '(') {\n      balance++;\n    } else if (c == ')') {\n      balance--;\n    }\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return balance == 0;\n}\n\nstd::string match_parens(std::vector<std::string> lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  if (is_good(s1 + s2) || is_good(s2 + s1)) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
    },
    {
        "task_id": "HumanEval/120",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཕྲང་ལམ་ arr གི་ཨང་གྲངས་ཧྲིལ་བུམ་དང་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ k བྱིན་པ་ཅིན་ ཕྲང་ལམ་ k གི་རིང་ཚད་དང་ ཨང་གྲངས་ k གི་མཐོ་སའི་མཐའ་མཚམས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་ ༡: >>> maximum((std::vector<long>({long) -3, (long) -4, (long) -5,) (3)) (std::vector<long>({long) -4, (long) -3, (long) -5}) དཔེ་གཞི་ ༢: >>> maximum(std::vector<long>({long) 4, (long) -4, (long) 4})), (2)) (std::vector<long>{long) 4, (long) 4}) དཔེ་གཞི་ ༣: >>> maximum(std::vector<long>{long} -3, (long) 2, (long) 1, (long) 2, (long) -1, (long) -2, (long) 1}) (1) (std::vector<long>) ཕྲང་ལམ་: ༡. ཕྲང་ལམ་གྱི་རིང་ཚད་འདི་ ཕྲང་ལམ་གྱི་མཐའ་མཚམས་ནང་ཡོད་སའི་མཐའ་མཚམས་ནང་ཡོད་ནི་ཨིན། ཟུར་ཐིག་གི་རིང་ཚད་འདི་ ༡,༠༠༠ ལུ་ཡོད་འོང་། ཟུར་ཐིག་གི་མཐའ་མཚམས་ནང་ ཕྲང་ལམ་འདི་ ༣,༠,༡༠༠ ལུ་ཡོད་འོང་།\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n  std::sort(arr.rbegin(), arr.rend());\n  std::vector<long> result;\n  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {\n    result.push_back(arr[i]);\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n}\n"
    },
    {
        "task_id": "HumanEval/121",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཆ་མཉམ་ལས་མེད་མི་ ཝི་ཅཊར་ཅིག་བྱིན་པ་ཅིན་ གནས་རིམ་གཉིས་པ་ནང་ཡོད་པའི་ དབྱེ་བ་མེད་པའི་ཆ་ཤས་ག་ར་བསྡོམས་ཏེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་ཚུ་ >>> ཐབས་ལམ་((std::vector<long>({long) 5, (long) 8, (long) 7, (long) 1}))) (12) >>> ཐབས་ལམ་(((std::vector<long>({long) 3, (long) 3, (long) 3, (long) 3}))) (9) >>> ཐབས་ལམ་((std::vector<long>({long) 30, (long) 13, (long) 24, (long) 321}))) (0)\nlong solution(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong solution(std::vector<long> lst) {\n  long sum = 0;\n  for (long i = 0; i < lst.size(); i += 2) {\n    if (lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));\n}\n"
    },
    {
        "task_id": "HumanEval/122",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་བུམ་ arr དང་ ཨང་གྲངས་ཧྲིལ་བུམ་ k ཚུ་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་ k གི་ཨང་གྲངས་ཐོག་མ་ལས་ཨང་གྲངས་གཉིས་ལས་ལྷག་སྟེ་ཡོད་པའི་ ཨེ་རེ་ཚུ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> add_elements((std::vector<long>({long) 111, (long) 21, (long) 3, (long) 4000, (long) 5, (long) 6, (long) 7, (long) 8, (long) 9})), (4)) (24) ཚད་འཛིན་ཚུ་: ༡. ༡ <= len(arr) <= ༡༠༠ ༢. ༡ <= k <= lenarr)\nlong add_elements(std::vector<long> arr, long k) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {\n    if (arr[i] >= -99 && arr[i] <= 99) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/123",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གྲུབ་འབྲས་འདི་ ནུས་ལྡན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཨང་གྲངས་རྣམ་རྟོག་མེད་མི་ཚུ་ ཀོ་ལ་ཊ་ཛརིམ་པ་བཞིན་དུ་ཡོད་མི་ཚུ་ སླར་ལོག་འབདཝ་ཨིན། ཀོ་ལ་ཊ་ཛའཆར་གཞི་འདི་ རྩིས་ཀྱི་འཆར་གཞི་ཅིག་ཨིནམ་ད་ དེ་ཡང་ འོག་གི་བཟུམ་སྦེ་ དབྱེ་ཞིབ་འབད་ཡོད་པའི་རིམ་པ་ཅིག་ལས་འགོ་བཙུགས་ཏེ་ཨིན། དེ་ལས་རིམ་པ་རེ་རེ་བཞིན་དུ་ ཧེ་མའི་རིམ་པ་ལས་ འཐོབ་ནི་ཨིནམ་ད་ ཧེ་མའི་རིམ་པ་འདི་ཆ་སྙོམས་ཨིན་པ་ཅིན་ ཤུལ་མའི་རིམ་པ་འདི་ ཧེ་མའི་རིམ་པ་ཕྱེད་ཀ་ཨིན། ཧེ་མའི་རིམ་པ་འདི་ དབྱེ་བ་ཨིན་པ་ཅིན་ ཤུལ་མའི་རིམ་པ་འདི་ ཧེ་མའི་རིམ་པ་ལས་ ༣ ཚུན་དང་ ༡ སྦེ་བསྡོམས་འོང་། གྲུབ་འབྲས་འདི་ n གི་གནས་གོང་ག་དེ་ཅིག་ཨིན་རུང་རིམ་པ་འདི་ ཨ་རྟག་ར་ ༡ ལུ་ལྷོད་འོང་། དྲན་པ་: ༡ ཀོ་ལ་ཊ་ཛ (༡) འདི་ [1] ༢ སླར་ལོག་འབད་མི་བེ་ཊར་དེ་ ཡར་སེང་རིམ་པ་བཞིན་དུ་ སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: get_odd_collatz (༥) གིས་ [༥,༨,༡༦,༤,༢,༡] སླར་ལོག་འབད་ཡོད་པའི་བེ་ཊར་དེ་ ༥ དང་ ༥་ལས་བརྒལ་མེདཔ་ཨིན། >>>_collatz (༥) (st vector:d<< (long) (long) {(((1) }\nstd::vector<long> get_odd_collatz(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> get_odd_collatz(long n) {\n  std::vector<long> odd_numbers;\n  std::unordered_set<long> seen;\n  long current = n;\n  while (seen.find(current) == seen.end()) {\n    seen.insert(current);\n    if (current % 2 != 0) {\n      odd_numbers.push_back(current);\n    }\n    if (current == 1) {\n      break;\n    }\n    if (current % 2 == 0) {\n      current /= 2;\n    } else {\n      current = 3 * current + 1;\n    }\n  }\n  std::sort(odd_numbers.begin(), odd_numbers.end());\n  return odd_numbers;\n}",
        "test": "}\nint main() {\n    auto candidate = get_odd_collatz;\n    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));\n    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/124",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ལས་འགན་ཅིག་འབྲི་དགོཔ་ཨིན་ དེ་ཡང་ ཚེས་གྲངས་ཐིག་ཁྲམ་ཅིག་ལུ་ ཆ་གནས་འབད་ཞིནམ་ལས་ ཚེས་གྲངས་དེ་ ཆ་གནས་ཡོད་པ་ཅིན་བདེན་པ་སྦེ་ལོག་གཏང་ནི་དང་ དེ་མེན་པ་ཅིན་རྫུས་མ་སྦེ་ལོག་གཏང་དགོ། ཚེས་གྲངས་དེ་ ཆ་གནས་འབད་དགོཔ་ཨིན་པ་ཅིན་ འོག་གི་བཀོད་རྒྱ་ཚུ་ཆ་མཉམ་ར་ཆ་བཞག་དགོ། ཚེས་གྲངས་ཐིག་ཁྲམ་འདི་ སྟོངམ་མེདཔ་ཨིན། ཚེས་གྲངས་ཀྱི་གྱངས་ཁ་དེ་ ཟླཝ་ ༡,༣,༥,༧,༨,༡༠,༡༢ གི་དོན་ལུ་ ཉིན་གྲངས་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༡ ལས་མང་བ་མེན་པའི་ཁར་ ཟླཝ་ ༤,༦,༩,༡༡ གི་དོན་ལུ་ ཉིན་གྲངས་ཀྱི་གྱངས་ཁ་དེ་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༠ ལས་མང་བ་མེན་པའི་ཁར་ ཟླཝ་ ༢ གི་དོན་ལུ་ ཉིན་གྲངས་ཀྱི་གྱངས་ཁ་དེ་ ༡ ལས་ཉུང་ ཡང་ན་ ༢༩ ལས་མང་བ་མེན་པའི་ཁར་ ཟླཝ་ ༡ ལས་ཉུང་ ཡང་ན་ ༡ ལས་མང་བ་མེན་པའི་ཁར་ ཚེས་གྲངས་དེ་ ཐོ་བཀོད་ནང་བཀོད་ཡོད་པའི་ནང་དགོཔ་ཨིན།: mm-dd-yyyy >>> valid_(date((༡༠-༡-༢༠༠༠\")) (བདེན་པ་ >>> valid_date(༡༥-༠-༢༠༡༢༡-༢༠༠༡) (རྫུས་མ་) >>> valid_(༡-༠-༢༠༠-༢༠༠) (བདེན་པ་ >>> valid_༠-༠༦-༢༠༠)\nbool valid_date(std::string date) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool valid_date(std::string date) {\n  if (date.empty()) {\n    return false;\n  }\n  if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n    return false;\n  }\n  int month, day, year;\n  try {\n    month = std::stoi(date.substr(0, 2));\n    day = std::stoi(date.substr(3, 2));\n    year = std::stoi(date.substr(6, 4));\n  } catch (const std::invalid_argument& e) {\n    return false;\n  } catch (const std::out_of_range& e) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1) {\n    return false;\n  }\n  if (month == 2) {\n    if (day > 29) {\n      return false;\n    }\n  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > 30) {\n      return false;\n    }\n  } else {\n    if (day > 31) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/125",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// ཚིག་ཡིག་ཐིག་ཁྲམ་ཅིག་བྱིན་པ་ཅིན་ ཚིག་ཡིག་གི་བེ་ཀཊར་ཅིག་སླར་ལོག་འབད་དགོ་ ཁྱོད་ཀྱིས་དཀར་ཆག་ནང་དབྱེ་བ་ཅིན་ ཚིག་ཡིག་ནང་དཀར་ཆག་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ','ལུ་དབྱེ་དགོ་ ཁྱོད་ཀྱིས་ ཀམ་པ་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཨེབ་རྟ་ནང་ཡིག་འབྲུ་ཆུང་བའི་གྱངས་ཁ་འདི་ གྱངས་ཁ་མ་མཚུངས་པའི་རིམ་པ་གིས་སླར་ལོག་འབད་དགོ་ ord{\"a\") = 0, ord{\"b\") = 1, ... ord{\"z\") = 25 དཔེ་གཞི་ཚུ་ >>> split_words{\"Hello world!\")) std::vector<std::string>(({\"Hello world!\")) >>> split_words{\"Hello, world!\")) std::vector<std::string>{\"Hello\", (std::string) \"}) >>> split_words{\"def\") 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;\n    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_vector_std_string__long split_words(std::string txt) {\n  if (txt.find(' ') != std::string::npos) {\n    std::vector<std::string> words;\n    std::stringstream ss(txt);\n    std::string word;\n    while (ss >> word) {\n      words.push_back(word);\n    }\n    return Union_std_vector_std_string__long(words);\n  } else if (txt.find(',') != std::string::npos) {\n    std::vector<std::string> words;\n    std::string current_word;\n    for (char c : txt) {\n      if (c == ',') {\n        words.push_back(current_word);\n        current_word = \"\";\n      } else {\n        current_word += c;\n      }\n    }\n    words.push_back(current_word);\n    return Union_std_vector_std_string__long(words);\n  } else {\n    long odd_order_count = 0;\n    for (char c : txt) {\n      if (islower(c)) {\n        if ((c - 'a') % 2 != 0) {\n          odd_order_count++;\n        }\n      }\n    }\n    return Union_std_vector_std_string__long(odd_order_count);\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
    },
    {
        "task_id": "HumanEval/126",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཚུ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཡར་སེང་གི་རིམ་པ་ནང་དབྱེ་བ་ཕྱེ་རུང་ལོག་གཏང་། ཨང་གྲངས་གཅིག་ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ རྫུན་ལོག་གཏང་། ནེ་གེ་རེ་ཨང་གྲངས་དང་ ཨང་གྲངས་ཧྲིལ་བུམ་རྐྱངམ་ཅིག་ཨིན་པའི་ངེས་འཛིན་རྐྱབས། དཔེར་ན་ >>> is_sorted (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)\nbool is_sorted(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) {\n    return true;\n  }\n  std::map<long, int> counts;\n  for (long x : lst) {\n    counts[x]++;\n  }\n  for (auto const& [key, val] : counts) {\n    if (val > 2) {\n      return false;\n    }\n  }\n  for (size_t i = 0; i < lst.size() - 1; ++i) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/127",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་བར་སྟོང་གཉིས་ཐོབ་ཡོདཔ་དང་ འདི་ནང་ལུ་བར་སྟོང་རེ་རེ་འདི་ ཨང་གྲངས་ཆ་མཉམ་ཨིན། དཔེར་ན་ བར་སྟོང་ = (འགོ་བཙུགས་,མཇུག་) = (1, 2) ཟེར་ཡོདཔ་ཨིན། བར་སྟོང་འདི་བསྡམས་ཡོདཔ་ལས་ བར་སྟོང་ (འགོ་བཙུགས་,མཇུག་) འདི་ འགོ་བཙུགས་དང་མཇུག་གཉིས་ཆ་ར་ཚུད་དེ་ཡོདཔ་ཨིན། བར་སྟོང་རེ་རེ་ལུ་ འདི་གི་འགོ་འདི་ཉུང་བ་ ཡང་ན་མཇུག་དང་འདྲན་འདྲ་སྦེ་ར་ཆ་བཞག་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ བར་སྟོང་གཉིས་ཀྱི་བར་སྟོང་གི་ཕྲང་ཚད་དེ་ ཨང་གྲངས་ངོ་མ་ཨིན་ན་མེན་ན་འདི་གཏན་ཁེལ་འབད་དགོཨིན། དཔེར་ན་ བར་སྟོང་ (1, 3), (2, 4) གི་བར་སྟོང་གི་ཕྲང་ཚད་འདི་ (2, 3) འདི་ཡང་ བར་སྟོང་གི་ཕྲང་ཚད་དེ་ 1ཨིནམ་དང་དེ་ཡང་ བར་སྟོང་གི་ཕྲང་ཚད་མེན་ན། གལ་སྲིད་བར་སྟོང་གི་ཕྲང་ཚད་དེ་ ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ \"YES\"ལོག་གཏང་། དེ་མེན་པ་ཅིན་ \"NO\"ལོག་གཏང་། གལ་སྲིད་བར་སྟོང་གཉིས་དེ་ཅིག་ཁར་མ་བསྡོམས་པ་ཅིན་ \"NO\"ལོག་གཏང་། [input/output] དཔེ་གཞི་འདི་: >>> intersection::((dmake_tuple1,((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  for (long i = 2; i * i <= n; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n  long start1 = std::get(interval1);\n  long end1 = std::get(interval1);\n  long start2 = std::get(interval2);\n  long end2 = std::get(interval2);\n  long intersection_start = std::max(start1, start2);\n  long intersection_end = std::min(end1, end2);\n  long intersection_length = intersection_end - intersection_start + 1;\n  if (intersection_length <= 0) {\n    return \"NO\";\n  }\n  if (is_prime(intersection_length)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "test": "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
    },
    {
        "task_id": "HumanEval/128",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ ཝི་ཅཊར་ ཨེ་རེ་ཅིག་ཐོབ་སྟེ་ ཁྱོད་ཀྱིས་ ཝི་ཅཊར་ནང་ ཨང་གྲངས་རེ་རེ་ལུ་ རྟགས་མཚན་གྱི་འབྲས་བུ་ཚུ་དང་བསྡོམས་ཏེ་ ཨེ་རེ་ཆ་མཉམ་ལུ་ ཨང་གྲངས་ ༡ དང་ ༡ དང་ ༠ སྦེ་བཙུག་སྟེ་ལོག་གཏང་དགོ་པའི་དྲན་གསོ་: སྟོངམ་ཨིན་པའི་ཨེ་རེ་གི་དོན་ལུ་ལོག་གཏང་མི་མིན་འདུག དཔེར་ན་: >>> prod_signs(((std::vector<long>{(long) 1, (long) 2, (long) 2, (long) -4)))) 9 >>> prod_signs(std::vector<long>({(long) 0, (long) 1}))) 0 >>> prod_signs((std::vector<long>(())) std::nopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n\nstd::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum_magnitudes = 0;\n  long product_of_signs = 1;\n  for (long num : arr) {\n    sum_magnitudes += std::abs(num);\n    if (num > 0) {\n      product_of_signs *= 1;\n    } else if (num < 0) {\n      product_of_signs *= -1;\n    } else {\n      product_of_signs *= 0;\n    }\n  }\n  return sum_magnitudes * product_of_signs;\n}",
        "test": "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n"
    },
    {
        "task_id": "HumanEval/129",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གྲལ་ཐིག་ནང་གྲལ་ཐིག་དང་ཐིག་ཁྲམ་ (N >=2) དང་ ནུས་པ་ཅན་གྱི་ཧྲིལ་ཨང་ k ཡོད་པའི་སྐབས་ གྲལ་ཐིག་གི་སྒོ་སྒྲིག་རེ་རེ་ནང་ གནས་གོང་ཅིག་ཡོདཔ་ཨིན། [༡, N * N] ནང་ཡོད་པའི་ཧྲིལ་ཨང་རེ་རེ་ལུ་ གྲལ་ཐིག་གི་སྒོ་སྒྲིག་ནང་ལུ་ ཚར་གཅིག་རང་འོང་འོང་། ཁྱོད་ཀྱིས་ གྲལ་ཐིག་ནང་རིང་ཚད་ k གི་ཉུང་མཐའ་ལམ་འདི་འཚོལ་དགོཔ་ཨིན། ཁྱོད་ཀྱིས་སྒོ་སྒྲིག་གང་རུང་ལས་འགོ་བཙུགསཔ་ཨིན། དེ་ལས་རིམ་པ་རེ་ནང་ ཁྱོད་ཀྱིས་ སྦོ་ལོགས་ཁར་ཡོད་པའི་སྒོ་སྒྲིག་ཚུ་གང་རུང་ནང་འགྱོ་ཚུགས། གཞན་སྐད་ཅིག་ནང་འབད་བ་ཅིན་ ཁྱོད་ཀྱིས་ ཕྲང་ལམ་ k གི་རིང་ཚད་འདི་ ཀ་མིག་ (ཁྱད་པར་ཅན་མིན་འདུག་) ཚུ་ནང་འགྱོ་དགོཔ་ཨིན། ཁྱོད་ཀྱིས་ གྲལ་ཐིག་ནང་ལས་འཐོན་མི་ཚུགས། ལམ་རིམ་ A (རིང་ཚད་ k) འདི་ལམ་རིམ་ B (རིང་ཚད་ k) ལས་ཆུང་བ་སྦེ་བརྩི་ནི་ཨིན་པ་ཅིན་ A དང་ B (འ་ནཱི་ལུ་ l_stA དང་ l_stB) ཟེར་མིང་བཏགས་ཞིནམ་ལས་ ཕྲང་ལམ་འདི་ j_stAདང་ l_stBལས་ཆུང་བ་ཨིན། ཚིག་ཡིག་གི་ཐད་ལས་འབད་བ་ཅིན་ j_stBལས་ཆུང་བ་ཨིན། གཞན་སྐད་ཅིག་ནང་འབད་བ་ཅིན་ j_stB=i[A <=i] i=1 ཨིནམ་དང་ འདི་བཟུམ་མའི་ཨང་གྲངས་ཀྱི་མཐའ་བསྡོམས་རྟགས་འདི་ཡོད་མེད་མེད་མེད་པ་ཅིན་ གྲལ་ཐིག་ཁྲམ་ལས་ལོག་འགྱོ་མི་ཚུགས།\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n",
        "canonical_solutions": "#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n  int n = grid.size();\n  std::vector<long> min_path;\n\n  std::function<void(int, int, std::vector<long>)> dfs = \n    [&](int row, int col, std::vector<long> current_path) {\n    if (current_path.size() == k) {\n      if (min_path.empty() || current_path < min_path) {\n        min_path = current_path;\n      }\n      return;\n    }\n\n    current_path.push_back(grid[row][col]);\n\n    int dr= {-1, 1, 0, 0};\n    int dc= {0, 0, -1, 1};\n\n    for (int i = 0; i < 4; ++i) {\n      int next_row = row + dr[i];\n      int next_col = col + dc[i];\n      if (next_row >= 0 && next_row < n && next_col >= 0 && next_col < n) {\n        dfs(next_row, next_col, current_path);\n      }\n    }\n  };\n\n  for (int start_row = 0; start_row < n; ++start_row) {\n    for (int start_col = 0; start_col < n; ++start_col) {\n      dfs(start_row, start_col, {});\n    }\n  }\n\n  return min_path;\n}",
        "test": "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/130",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// རྩིས་རིག་པ་ཚུ་གིས་ དུས་རབས་གཉིས་དང་པའི་ནང་ ཚད་འཛིན་འབད་ཡོད་པའི་ ཕི་བོ་ན་ཅིའི་རིམ་པ་ཚུ་ ག་ར་གིས་ཤེས་དོ་ཡོདཔ་ད་ ཨིན་རུང་ མི་སེར་ཚུ་གིས་ མ་ཤེས་མི་དེ་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ཚུ་ཨིན། ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ཚུ་ ཤུལ་མམ་སྦེ་ར་ ངེས་འཛིན་འབད་དོ་ཡོདཔ་ད་ དཔེར་ན་: tri(1) = 3 tri(n) = 1 + n / 2 གལ་སྲིད་ n འདི་ཆ་སྙོམས་ཨིན་པ་ཅིན་ tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) གལ་སྲིད་ n འདི་ཆ་སྙོམས་ཨིན་པ་ཅིན་ དཔེར་ན་: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ཁྱོད་ལུ་ ནུས་མེད་ཨང་གྲངས་ཨང་གྲངས་ n ཅིག་བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ལས་ དང་པ་ n + 1 གི་ ཝི་ཅེཊར་ཅིག་ལོག་གཏང་དགོཔ་ཨིན། དཔེར་ན་: >>> tri(3) (dst vector long><<(({) (long1, (long3, (long2, long8})\nstd::vector<long> tri(long n) {\n",
        "canonical_solutions": "#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n  if (n >= 0) {\n    result.push_back(1);\n  }\n  if (n >= 1) {\n    result.push_back(3);\n  }\n  for (long i = 2; i <= n; ++i) {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      if (i - 1 >= 0 && i - 2 >= 0 && i + 1 <= n)\n      {\n          result.push_back(result[i-1] + result[i-2] + result[i]);\n      }\n      else if (i - 1 >= 0 && i - 2 >= 0)\n      {\n          result.push_back(result[i-1] + result[i-2]);\n      }\n      else if (i - 1 >= 0)\n      {\n          result.push_back(result[i-1]);\n      }\n      else\n      {\n          result.push_back(0);\n      }\n    }\n  }\n  return result;\n}",
        "test": "}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
    },
    {
        "task_id": "HumanEval/131",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཚངམ་ཅིག་ཐོབ་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་གྱི་གྱངས་ཁ་འདི་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་ཆ་མཉམ་འདི་ཆ་མཉམ་ཨིན་པ་ཅིན་ ༠ སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> ཨང་གྲངས་ཚུ་ (༡) (༡) >>> ཨང་གྲངས་ཚུ་ (༤) (༠) >>> ཨང་གྲངས་ཚུ་ (༢༣༥) (༡༥)\nlong digits(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong digits(long n) {\n  long product = 1;\n  std::string s = std::to_string(n);\n  bool has_odd = false;\n  for (char c : s) {\n    long digit = c - '0';\n    if (digit % 2 != 0) {\n      product *= digit;\n      has_odd = true;\n    }\n  }\n  if (!has_odd) {\n    return 0;\n  }\n  return product;\n}",
        "test": "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) == (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/132",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ནང་ཐིག་ནང་ ཀེར་ཐིག་གི་ལྡེ་མིག་རྐྱངམ་ཅིག་ཡོད་མི་ལུ་བརྟེན་ ཀེར་ཐིག་གི་ལྡེ་མིག་འདི་ནང་ཐིག་སྦེ་ལེན་པའི་ལས་འགན་ཅིག་བཟོ། ལས་འགན་འདི་བདེན་པའི་ལྡེ་མིག་འདི་ འཐོབ་དགོཔ་ཨིན། གལ་སྲིད་དང་རྐྱངམ་ཅིག་ འཐོབ་པ་ཅིན་ འཐོབ་ཐངས་ནང་ལྡེ་མིག་ཅིག་རང་ཡོད་པ་ཅིན་ཨིན། >>> is_nested((\"[[]]\")) (true) >>> is_nested((\"[]]]]]]]][[[[[]\")) (false) >>> is_nested(\"[][]\")) (false) >>> is_nested(\"[]\") (false) >>> is_nested\"[[]]]]\") (true) >>> is_nested(\"[[]]\") (true)\nbool is_nested(std::string string) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool is_nested(std::string string) {\n  int balance = 0;\n  bool nested = false;\n  for (char c : string) {\n    if (c == '[') {\n      balance++;\n    } else if (c == ']') {\n      if (balance > 1) {\n        nested = true;\n      }\n      balance--;\n      if (balance < 0) {\n        return false;\n      }\n    }\n  }\n  return balance == 0 && nested;\n}",
        "test": "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/133",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཨང་གྲངས་ཀྱི་བེ་ཀཊར་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱིས་བེ་ཀཊར་ནང་ཡོད་པའི་ཨང་གྲངས་གྲུ་བཞི་གི་བསྡོམས་ལོག་གཏང་དགོ་ དེ་ལས་བེ་ཀཊར་གྱི་ཆ་ཤས་རེ་རེ་ལུ་ཡར་མཐོ་སའི་ int{(Ceiling}ལུ་ཡར་འཁོར་གཏང་དགོ། དཔེ་གཞི་: >>> lst{((std::vector<float>{(float) 1.0f, (float) 2.0f, (float) 3.0f}))) (14) >>> lst{((std::vector<float>{(float) 1.0f, (float) 4.0f, (float) 9.0f}))) (98) lst{(std::vector<float>{(float) 1.0f, (float) 3.0f, (float) 5.0f, (float) 7.0f} (84) >>> lst{(std::vector<float>{{(float) 1.4f, (float) 2.4.0f, (float) 2.0.0f} (6) >>> lst{(((vector<float>{(float} (1.1.0f, (float) 2.4.0f)) (6)\nlong sum_squares(std::vector<float> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float num : lst) {\n    long rounded_up = std::ceil(num);\n    sum += rounded_up * rounded_up;\n  }\n  return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/134",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གྲལ་ཐིག་གི་མཇུག་གི་ཡིག་འབྲུ་འདི་ ཨེཕ་བི་གི་ཡིག་འབྲུ་ཅིག་ཨིན་པ་ཅིན་ true སླར་ལོག་འབད་ཞིནམ་ལས་ རྫུན་ཁ་བཟེད་དེ་གཏང་། དཔེར་ན་: >>> check_if_last_char_is_a_letter (((\"apple pie\")) (རྫུས་མ་) >>> check_if_last_char_is_a_letter ((\"apple pi e\") (བདེན་པ་) >>> check_if_last_char_is_a_letter ((\"apple pi e\") (རྫུས་མ་) >>> check_if_last_char_is_a_letter (((\"apple pi e\") (རྫུས་མ་)\nbool check_if_last_char_is_a_letter(std::string txt) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nbool check_if_last_char_is_a_letter(std::string txt) {\n  if (txt.empty()) {\n    return false;\n  }\n  if (!isalpha(txt.back())) {\n    return false;\n  }\n  if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {\n    return false;\n  }\n  return true;\n}",
        "test": "}\nint main() {\n    auto candidate = check_if_last_char_is_a_letter;\n    assert(candidate((\"apple\")) == (false));\n    assert(candidate((\"apple pi e\")) == (true));\n    assert(candidate((\"eeeee\")) == (false));\n    assert(candidate((\"A\")) == (true));\n    assert(candidate((\"Pumpkin pie \")) == (false));\n    assert(candidate((\"Pumpkin pie 1\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"eeeee e \")) == (false));\n    assert(candidate((\"apple pie\")) == (false));\n    assert(candidate((\"apple pi e \")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/135",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// རྩ་སྒྲིག་ཅིག་བཟོ་ཞིནམ་ལས་ དེ་གི་ཧེ་མར་ཡོད་པའི་ རྩ་སྒྲིག་འདི་དང་ སྦོམ་ཤོས་ ཡང་ན་ འདྲན་འདྲ་མེད་པའི་ རྩ་སྒྲིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན། རྩ་སྒྲིག་དེ་མེད་པ་ཅིན་ -༡ སླར་ལོག་འབདཝ་ཨིན། བྱིན་ཡོད་པའི་ ཝི་ཅཱཊ་འདི་གིས་ གནས་གོང་གཉིས་མི་འདྲ་བའི་གནས་གོང་ཚུ་མི་ཚུད་འོང་། དཔེ་འབད་བ་ཅིན་: >>> can_arrange(((std::vector<long>({long) 1, (long) 2, (long) 4, (long) 3, (long) 5}))) (3) >>> can_arrange((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (-1)\nlong can_arrange(std::vector<long> arr) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\nlong can_arrange(std::vector<long> arr) {\n  for (long i = 1; i < arr.size(); ++i) {\n    if (arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "test": "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n}\n"
    },
    {
        "task_id": "HumanEval/136",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 'a'འདི་ ནུས་མེད་ཨང་གྲངས་ཚུ་གི་གྲས་ལས་སྦོམ་ཤོས་དང་ 'b'འདི་ ཝེ་ཀཊར་ནང་གི་ ནུས་མེད་ཨང་གྲངས་ཚུ་གི་གྲས་ལས་ཆུང་ཤོས་ཨིནམ་ལས་ ཝེ་ཀཊར་ (a, b) ཚུ་སླར་ལོག་འབདཝ་ཨིན། ནུས་མེད་ཡང་ན་ ནུས་མེད་ཨང་གྲངས་ཚུ་མེད་པ་ཅིན་ ནུས་མེད་སྦེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> largest_smallest_integers(((std::vector<long>{long) 2, (long) 4, (long) 1, (long) 3, (long) 5, (long) 7))) std::make_tuplestd::optional<long>{long>), std::optional<long> (long) 1) >>> largest_smallest_integers((std::vector<long> (long)) std::vector<long> (long)\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n#include<tuple>\n#include<vector>\n\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n    std::optional<long> largest_negative = std::nullopt;\n    std::optional<long> smallest_positive = std::nullopt;\n    for (long num : lst) {\n        if (num < 0) {\n            if (!largest_negative.has_value() || num > largest_negative.value()) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            if (!smallest_positive.has_value() || num < smallest_positive.value()) {\n                smallest_positive = num;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative, smallest_positive);\n}",
        "test": "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n}\n"
    },
    {
        "task_id": "HumanEval/137",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// ལས་འགན་ཅིག་བཟོ་ཞིནམ་ལས་ ཨང་གྲངས་ཧྲིལ་བུམ་དང་ floats ཡང་ན་ string གིས་ཨང་གྲངས་ངོ་མ་འདི་ངོ་ཚབ་འབད་ཞིནམ་ལས་ སྦོམ་ཤོས་དེ་སླར་ལོག་འབདཝ་ཨིན། གནས་གོང་ཚུ་འདྲན་འདྲ་ཡོད་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། དྲན་པ་བཟོ་ནི། ཨང་གྲངས་ངོ་མ་ཅིག་ string སྦེ་ངོ་ཚབ་འབད་བ་ཅིན་ འཁྱིལ་འགྱོ་བའི་གནས་གོང་འདི་ . ཡང་ན་ , >>> compare_one(1, 2.5f) 2.5f >>> compare_one(1, \"2,3\") \"2,3\" >>> compare_one(\"5,1\", \"6\") \"6\" >>> compare_one(\"1\", 1) std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n#include<string>\n\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;\n    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }\n    bool operator==(float f) {\n        return f1 == f ;\n    }\n    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;\n    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }\n    bool operator==(float f) {\n        return f1 == f ;\n    }\n    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n\ndouble parse_real(const std::string& s) {\n    std::string temp = s;\n    std::replace(temp.begin(), temp.end(), ',', '.');\n    try {\n        return std::stod(temp);\n    } catch (const std::invalid_argument& e) {\n        return std::numeric_limits<double>::quiet_NaN();\n    } catch (const std::out_of_range& e) {\n        return std::numeric_limits<double>::quiet_NaN();\n    }\n}\n\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n    if (a.f2.empty() && b.f2.empty()) {\n        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {\n            if (a.f0 > b.f0) return Union_long_float_std_string_std_nullopt(a.f0);\n            if (b.f0 > a.f0) return Union_long_float_std_string_std_nullopt(b.f0);\n        } else if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {\n            if (a.f1 > b.f1) return Union_long_float_std_string_std_nullopt(a.f1);\n            if (b.f1 > a.f1) return Union_long_float_std_string_std_nullopt(b.f1);\n        } else if (typeid(a.f0) == typeid(long) && typeid(b.f1) == typeid(float)) {\n            if (static_cast<float>(a.f0) > b.f1) return Union_long_float_std_string_std_nullopt(a.f0);\n            if (b.f1 > static_cast<float>(a.f0)) return Union_long_float_std_string_std_nullopt(b.f1);\n        } else if (typeid(a.f1) == typeid(float) && typeid(b.f0) == typeid(long)) {\n            if (a.f1 > static_cast<float>(b.f0)) return Union_long_float_std_string_std_nullopt(a.f1);\n            if (static_cast<float>(b.f0) > a.f1) return Union_long_float_std_string_std_nullopt(b.f0);\n        }\n    } else {\n        double val_a, val_b;\n        if (!a.f2.empty()) val_a = parse_real(a.f2);\n        else if (typeid(a.f0) == typeid(long)) val_a = static_cast<double>(a.f0);\n        else val_a = static_cast<double>(a.f1);\n\n        if (!b.f2.empty()) val_b = parse_real(b.f2);\n        else if (typeid(b.f0) == typeid(long)) val_b = static_cast<double>(b.f0);\n        else val_b = static_cast<double>(b.f1);\n\n        if (!std::isnan(val_a) && !std::isnan(val_b)) {\n            if (val_a > val_b) return Union_long_float_std_string_std_nullopt(a);\n            if (val_b > val_a) return Union_long_float_std_string_std_nullopt(b);\n        }\n    }\n    return Union_long_float_std_string_std_nullopt(std::nullopt{});\n}",
        "test": "}\nint main() {\n    auto candidate = compare_one;\n    assert(candidate(1, 2) == 2);\n    assert(candidate(1, 2.5f) == 2.5f);\n    assert(candidate(2, 3) == 3);\n    assert(candidate(5, 6) == 6);\n    assert(candidate(1, \"2,3\") == \"2,3\");\n    assert(candidate(\"5,1\", \"6\") == \"6\");\n    assert(candidate(\"1\", \"2\") == \"2\");\n    assert(candidate(\"1\", 1) == std::nullopt);\n}\n"
    },
    {
        "task_id": "HumanEval/138",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// དཔེ་གཞི་འདི་ >>> is_equal_to_sum_even ((4)) (རྫུས་མ་) >>> is_equal_to_sum_even ((6)) (རྫུས་མ་) >>> is_equal_to_sum_even ((8) (བདེན་པ་)\nbool is_equal_to_sum_even(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_equal_to_sum_even(long n) {\n    if (n <= 6 || n % 2 != 0) {\n        return false;\n    }\n    return true;\n}",
        "test": "}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/139",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Brazil གི་གནས་གོང་འདི་ brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! འདི་ནང་ལུ་ n > 0 དཔེར་ན་: >>> special_factorial (((4)) (288) ལས་འགན་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་རྩིས་སྟོན་འབད་ཡོདཔ་དང་ འདི་ལུ་ གནས་གོང་འདི་ནང་གི་གནས་གོང་འདི་སླར་ལོག་འབད་དགོཔ་ཨིན།\nlong special_factorial(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong factorial(long k) {\n    long res = 1;\n    for (long i = 2; i <= k; ++i) {\n        res *= i;\n    }\n    return res;\n}\n\nlong special_factorial(long n) {\n    if (n <= 0) {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <= n; ++i) {\n        result *= factorial(i);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
    },
    {
        "task_id": "HumanEval/140",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཚིག་ཡིག་ཡིག་སྣོད་ཅིག་བྱིན་པ་ཅིན་ ནང་འཁོད་ས་སྒོ་ག་ར་ འོག་ལུ་ཡོད་མི་ཡིག་འབྲུ་ཚུ་དང་ཚབ་བཙུགས། དེ་ལས་ ཚིག་ཡིག་སྣོད་ཅིག་ནང་ ཤུལ་མམ་གྱི་ས་སྒོ་གཉིས་ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ ཤུལ་མམ་གྱི་ས་སྒོ་ག་ར་ - >>> fix_spaces (((\" Example\")) (\"Example\") >>> fix_spaces (((\"Example 1\")) (\"Example_1\") >>> fix_spaces (((\"Example 2\")) (\"_Example_2\") >>> fix_spaces (((\"Example 3\")) (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    int space_count = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            space_count++;\n        } else {\n            if (space_count == 1) {\n                result += '_';\n            } else if (space_count > 1) {\n                result += '-';\n            }\n            result += c;\n            space_count = 0;\n        }\n    }\n    if (space_count == 1 && !result.empty() && result.back() != '_') {\n        result += '_';\n    } else if (space_count > 1 && !result.empty() && result.back() != '-') {\n        result += '-';\n    } else if (space_count > 0 && result.empty()) {\n        if (space_count > 2) result += '-';\n        else if (space_count == 1) result += '_';\n    } else if (space_count == 1 && result.empty()) {\n        result += '_';\n    }\n\n    std::string trimmed_result = \"\";\n    bool non_space_found = false;\n    for (char c : result) {\n        if (c != ' ') {\n            non_space_found = true;\n            trimmed_result += c;\n        } else if (non_space_found) {\n            trimmed_result += c;\n        }\n    }\n\n    while (!trimmed_result.empty() && trimmed_result.front() == '_') {\n        trimmed_result.erase(trimmed_result.begin());\n    }\n    while (!trimmed_result.empty() && trimmed_result.back() == '_') {\n        trimmed_result.pop_back();\n    }\n     while (!trimmed_result.empty() && trimmed_result.front() == '-') {\n        trimmed_result.erase(trimmed_result.begin());\n    }\n    while (!trimmed_result.empty() && trimmed_result.back() == '-') {\n        trimmed_result.pop_back();\n    }\n\n    std::string final_result = \"\";\n    space_count = 0;\n    for (char c : trimmed_result) {\n        if (c == '_') {\n            space_count++;\n        } else {\n            if (space_count == 1) {\n                final_result += '_';\n            } else if (space_count > 1) {\n                final_result += '-';\n            }\n            final_result += c;\n            space_count = 0;\n        }\n    }\n    if (space_count == 1) {\n        final_result += '_';\n    } else if (space_count > 1) {\n        final_result += '-';\n    }\n\n    return final_result;\n}",
        "test": "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
    },
    {
        "task_id": "HumanEval/141",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཡིག་སྣོད་མིང་འདི་ འོས་ལྡན་ཨིན་པ་ཅིན་ ཡིག་སྣོད་མིང་འདི་ ལེན་ཞིནམ་ལས་ ལེན་གཏང་ནི་དང་ གཞན་འབད་བ་ཅིན་ ལེན་གཏང་མི་བཏུབ་ཟེར་ལོག་གཏང་མི་ལས་འགན་ཅིག་བཟོ་དགོ། ཡིག་སྣོད་མིང་འདི་ འོས་ལྡན་སྦེ་བརྩི་ནི་ཨིན་པ་ཅིན་ འོག་གི་གནས་སྟངས་ཚུ་ག་ར་གྲུབ་པ་ཅིན་རྐྱངམ་གཅིག་ ལེན་གཏང་དགོ། ཡིག་སྣོད་མིང་ནང་ ཨང་གྲངས་གསུམ་ལས་བརྒལ་མི་བཏུབ་ ('0'-'9') ཡིག་སྣོད་མིང་ནང་ གནད་སྡུད་གཅིག་རང་ཡོད་ '.' ཡིག་སྣོད་མིང་གི་ཧེ་མ་ཡོད་པའི་ཡིག་སྣོད་དེ་ སྟོངམ་མ་བཞག་དགོཔ་མ་ཚད་ ཨང་ཡིག་འདི་ ལཊི་ནའི་ཡིག་འབྲུ་ ('a'-'z' དང་ 'A'-Z') ཚུ་དང་ འགོ་བཙུགས་དགོ། གནད་སྡུད་མིང་གི་ཤུལ་ལས་ཡོད་པའི་ཡིག་སྣོད་འདི་ འོག་གི་ཡིག་འབྲུ་ཚུ་ནང་ལས་ གཅིག་འབད་དགོཔ་ཨིན། དཔེར་ན་: >>> file_name_check\"((example.txt\") (\"Yes\") >>> file_name_check\"(example.dll\" (\"No\")\nstd::string file_name_check(std::string file_name) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string file_name_check(std::string file_name) {\n    int digit_count = 0;\n    int dot_count = 0;\n    size_t dot_pos = std::string::npos;\n\n    for (size_t i = 0; i < file_name.length(); ++i) {\n        if (isdigit(file_name[i])) {\n            digit_count++;\n        } else if (file_name[i] == '.') {\n            dot_count++;\n            dot_pos = i;\n        }\n    }\n\n    if (digit_count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\n    if (dot_pos == 0 || dot_pos == file_name.length() - 1) {\n        return \"No\";\n    }\n\n    std::string name_part = file_name.substr(0, dot_pos);\n    std::string ext_part = file_name.substr(dot_pos + 1);\n\n    if (name_part.empty() || !isalpha(name_part[0])) {\n        return \"No\";\n    }\n\n    if (ext_part == \"txt\" || ext_part == \"exe\" || ext_part == \"dll\") {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
    },
    {
        "task_id": "HumanEval/142",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"འ་ནི་ལས་ཀ་འདི་གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་བེ་ཀཊར་ཅིག་ ལེན་འབདཝ་ཨིན། བེ་ཀཊར་ནང་གི་ནང་དོན་ག་ར་གི་དོན་ལུ་ ལས་འགན་གྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ནང་དོན་གྲུ་བཞི་བཟོ་དགོ། གལ་སྲིད་ ཨང་གྲངས་དེ་ ཨང་གྲངས་༣་གི་གྱངས་ཁ་དང་ཅིག་ཁར་ཨིན་པ་ཅིན་ ལས་འགན་གྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ནང་དོན་གྲུ་བཞི་བཟོ་འོང་། གལ་སྲིད་ ཨང་གྲངས་དེ་ ཨང་གྲངས་༤་གི་གྱངས་ཁ་དང་ཅིག་ཁར་ཨིན་པ་ཅིན་ ལས་འགན་གྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ནང་དོན་འདི་ བསྒྱུར་བཅོས་མི་འབད་འོང་། གལ་སྲིད་ ཨང་གྲངས་དེ་ ཨང་གྲངས་༣་དང་༤་གི་གྱངས་ཁ་དང་ཅིག་ཁར་ཨིན་པ་ཅིན་ ལས་འགན་གྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་བསྡོམས་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་: >>> lst (long({(long) 1, (long) 2, (long) 1, (long) 5})\nlong sum_squares(std::vector<long> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong sum_squares(std::vector<long> lst) {\n    long sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));\n    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));\n    assert(candidate((std::vector<long>({(long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));\n    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));\n    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));\n}\n"
    },
    {
        "task_id": "HumanEval/143",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཅིག་ངོ་ཚབ་འབད་ཡོད་པའི་ string ཅིག་ཐོབ་ཡོདཔ་ད་ ཚིག་ཡིག་དེ་ནང་ལུ་ བར་སྟོང་གིས་སོ་སོར་འབད་མི་ཚིག་ཚུ་ཡོདཔ་དང་ ཁྱོད་ཀྱིས་ ཚིག་ཡིག་འདི་ནང་ ཚིག་ཡིག་ཚུ་ཡོད་པའི་ string འདི་ལོག་གཏང་དགོཔ་ཨིན་ འདི་གི་རིང་ཚད་དེ་ prime number ཚུ་ཨིནམ་ད་ ཚིག་ཡིག་གི་རིམ་པ་འདི་ ཚིག་ཡིག་གསརཔ་ནང་ཡོད་པའི་ ཚིག་ཡིག་དང་མཚུངས་ཏེ་ཡོད་ དཔེ་གཞི་ ༡: >>> words_in_sentence (((\"This is a test\")) (\"is\") དཔེ་གཞི་ ༢: >>> words_in_sentence (((\"lets go for swimming\")) (\"go for\") བཀག་འཛིན་: * ༡ <= len ((sentence) <= ༡༠༠ * ཚིག་ཡིག་ནང་ཡིག་འབྲུ་རྐྱངམ་ཅིག་ཡོདཔ་ཨིན།\nstd::string words_in_sentence(std::string sentence) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstd::string words_in_sentence(std::string sentence) {\n    std::string result = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
    },
    {
        "task_id": "HumanEval/144",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱི་ལཱ་འདི་ x * n འདི་རྣམ་གྲངས་འཇམ་ཏོང་ཏོ་འབད་བཟོ་ནི་གི་འགན་ཁུར་ཨིན། འ་ནི་འགན་ཁུར་འདི་ x * n འདི་ཧྲིལ་ཨང་སྦེ་གྲུབ་པ་ཅིན་བདེན་པ་སྦེ་ལོག་བྱིན་ནི་ཨིནམ་དང་ དེ་མེན་པ་ཅིན་རྫུན་ཨིན། x དང་ n གཉིས་ཆ་ར་ལུ་ ཨང་གྲངས་ཀྱི་ཐིག་ཁྲམ་ངོ་ཚབ་སྦེ་བཙུགས་ཏེ་ འ་ནི་རྣམ་པ་འདི་ཡོདཔ་ཨིན། <numerator>/<denominator> འདི་ནང་ལུ་ ཨང་གྲངས་དང་མིང་བཏགས་གཉིས་ཆ་ར་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཆ་མཉམ་ཨིན། ཁྱོད་ཀྱིས་ x དང་ n འདི་ ཆ་གནས་ཅན་གྱི་ཨང་གྲངས་ཆ་ཤས་ཨིནམ་དང་ མིང་བཏགས་འདི་ ༠ སྦེ་མེདཔ་སྦེ་བཟོཝ་ཨིན། >>> simplify((\"1/5\"), (\"5/1\")) (true) >>> simplify((\"1/6\"), (\"2/1\") (false) >>> simplify((\"7/10\"), (\"10/2\") (false)\nbool simplify(std::string x, std::string n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong gcd(long a, long b) {\n    while (b) {\n        a %= b;\n        std::swap(a, b);\n    }\n    return a;\n}\n\nbool simplify(std::string x, std::string n) {\n    long x_num, x_den, n_num, n_den;\n    size_t slash_pos = x.find('/');\n    x_num = std::stol(x.substr(0, slash_pos));\n    x_den = std::stol(x.substr(slash_pos + 1));\n\n    slash_pos = n.find('/');\n    n_num = std::stol(n.substr(0, slash_pos));\n    n_den = std::stol(n.substr(slash_pos + 1));\n\n    long num = x_num * n_num;\n    long den = x_den * n_den;\n\n    long common_divisor = gcd(num, den);\n    den /= common_divisor;\n\n    return den == 1;\n}",
        "test": "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\")) == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/5\"), (\"1/5\")) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/145",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཚུའི་ཐད་ཁར་ ཨང་གྲངས་ཚུ་ཡར་སེང་འགྱོ་མི་རིམ་པ་ལུ་རིམ་པ་སྒྲིག་མི་ལས་འགན་ཅིག་འབྲི་དགོ། དྲན་པ་: ཨང་གྲངས་ཚུའི་ཐད་ཁར་ ཨང་གྲངས་འདྲ་མཉམ་ཡོད་པའི་ ཨང་གྲངས་ལེ་ཤ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཚུ་གཞི་རྟེན་གཞི་བསྟུན་ལུ་གཞི་བཞག་སྟེ་རིམ་པ་སྒྲིག་འབད། དཔེར་ན་: >>> order_by_points((std::vector<long>({long) 1, (long) 11, (long)-1, (long) - 11, (long) - 12}))) (std::vector<long>({long) - 1, (long) - 11, (long) 1, (long) - 12, (long) 11})) >>> order_by_points((std::vector<long>())) (std::vector<long>(long))\nstd::vector<long> order_by_points(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong sum_digits(long n) {\n    long sum = 0;\n    std::string s = std::to_string(std::abs(n));\n    for (char c : s) {\n        sum += c - '0';\n    }\n    return sum;\n}\n\nstd::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<std::pair<long, size_t>> indexed_nums;\n    for (size_t i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({nums[i], i});\n    }\n\n    std::sort(indexed_nums.begin(), indexed_nums.end(), [](const std::pair<long, size_t>& a, const std::pair<long, size_t>& b) {\n        long sum_a = sum_digits(a.first);\n        long sum_b = sum_digits(b.first);\n        if (sum_a != sum_b) {\n            return sum_a < sum_b;\n        }\n        return a.second < b.second;\n    });\n\n    std::vector<long> result;\n    for (const auto& pair : indexed_nums) {\n        result.push_back(pair.first);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
    },
    {
        "task_id": "HumanEval/146",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཀྱི་བེ་ཊར་ཅིག་ཨེབ་གཏང་སྦེ་ལེན་ཏེ་ བེ་ཊར་ནང་ཡོད་པའི་ཡན་ལག་གྲངས་སུ་ ༡༠ ལས་སྦོམ་སྦེ་ཨང་གྲངས་ཀྱི་ཨང་དང་པ་དང་ མཇུག་གི་ཨང་གཉིས་ཆ་ར་ལུ་ ཨང་གྲངས་དབྱེ་བ་མེདཔ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> specialFilter((std::vector<long>({(long) 15, (long) -73, (long) -14, (long) -15}))) (1) >>> specialFilter((std::vector<long>({(long) 33, (long) -2, (long) -3, (long) -45, (long) 21, (long) -109} (2))))\nlong specialFilter(std::vector<long> nums) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_odd_digit(char c) {\n    return (c == '1' || c == '3' || c == '5' || c == '7' || c == '9');\n}\n\nlong specialFilter(std::vector<long> nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (std::abs(num) > 10) {\n            std::string s = std::to_string(std::abs(num));\n            if (!s.empty() && is_odd_digit(s.front()) && is_odd_digit(s.back())) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
    },
    {
        "task_id": "HumanEval/147",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ nཐོབ་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཚེ་རིང་ n འབད་མི་ ཨང་གྲངས་ཧྲིལ་བུམ་ ཝེཀཊར་ a བཟོ་དགོཔ་ཨིན། i རེ་རེ་གི་དོན་ལུ་ (1 ≤ i ≤ n) a[i] = i * i - i + 1 གི་གནས་གོང་དེ་སླར་ལོག་འབདཝ་ཨིན། a གྱི་ triples (a[i], a[j], a[k]) ཚུ་གི་གྱངས་ཁ་དེ་སླར་ལོག་འབད་ཡོདཔ་ད་ i < j < k, དང་ a[i] + a[j] + a[k] འདི་ 3 གི་གྱངས་ཁ་ཨིན། དཔེ་གཞི་: >>> get_max_triples((5)) (1) འགྲེལ་བཤད་: a = [1, 3, 7, 13, 21] གསུམ་ཆ་གཅིག་གནས་གོང་དེ་ (1, 7, 13) ཨིན།\nlong get_max_triples(long n) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong get_max_triples(long n) {\n    if (n < 3) {\n        return 0;\n    }\n    std::vector<long> a(n);\n    for (long i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    long count = 0;\n    for (long i = 0; i < n; ++i) {\n        for (long j = i + 1; j < n; ++j) {\n            for (long k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "test": "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100)) == (53361));\n}\n"
    },
    {
        "task_id": "HumanEval/148",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཉིམ་ལུགས་ནང་ སྐར་མ་༨ ཡོད་པའི་ཁར་ ཉིམ་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་མི་ཅིག་འདི་ Mercury ཤུལ་མ་ཅིག་འདི་ Venus དེ་ལས་ Earth, Mars, Jupiter, Saturn, Uranus, Neptune ཨིན། ལས་འགན་འདི་ སྐར་མ་༢ ཀྱི་མིང་འདི་ སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་མིང་སྦེ་ལེན་ཏེ་ ཡིག་དཔར་རྐྱབས་དགོ། ལས་འགན་འདི་གིས་ སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་འཁོར་ལམ་གྱི་བར་ན་ཡོད་པའི་ སྐར་མ་ཚུ་ ཉིམ་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་ནི་དེ་གིས་ རིམ་སྒྲིག་འབད་ཡོད་པའི་ སྐར་མ་ཚུ་ཆ་མཉམ་ཡོད་པའི་ སྐར་མ་ཚུ་སླར་ལོག་འབདཝ་ཨིན། སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་མིང་འདི་ སྐར་མ་ཚུ་མེན་པ་ཅིན་ ལས་འགན་འདི་གིས་ སྟོང་པའི་ སྐར་མ་ཚུ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་འདི་ >>> bf((\"Jupiter\"), (\"Neptune\")) (std::vector<std::string>{(std::string) \"Saturn\", (std::string) \"Uranus\"} (std::string)) (Y) >>> bf (((((\"Earth\"), (\"Mercury\") (std::vector<std::string>) (Jupiter:Venus\") (std: \"Mars\") (string) (\",\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = std::find(planets.begin(), planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(), planet2);\n\n    if (it1 == planets.end() || it2 == planets.end()) {\n        return {};\n    }\n\n    int index1 = std::distance(planets.begin(), it1);\n    int index2 = std::distance(planets.begin(), it2);\n\n    if (index1 == index2) {\n        return {};\n    }\n\n    int start = std::min(index1, index2) + 1;\n    int end = std::max(index1, index2);\n\n    std::vector<std::string> result;\n    for (int i = start; i < end; ++i) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n"
    },
    {
        "task_id": "HumanEval/149",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཕྲང་ཡིག་གི་ཕྲང་ཡིག་འདི་ རྟག་བུ་སྦེ་ལེན་ཏེ་ ཚིག་ཡིག་གི་ཕྲང་ཡིག་འདི་ ཆ་ཚད་སྦེ་ལེན་ཏེ་ ཚིག་ཡིག་འདི་ལས་ ཚར་མ་རིངམོ་སྦེ་ཡོད་མི་ཚུ་ བཏོན་གཏང་ཞིནམ་ལས་ གྲུབ་འབྲས་ཕྲང་ཡིག་འདི་རིམ་སྒྲིག་སྦེ་ལོག་གཏང་། ཕྲང་ཡིག་འདི་ རྟག་བུ་སྦེ་ཕྲང་ཡིག་གི་ཕྲང་ཡིག་དང་ ཨང་གྲངས་ཀྱི་ཕྲང་ཡིག་མེན་པའི་ཕྲང་ཡིག་ཨིནམ་ལས་ དེ་ནང་གཉིས་ཆ་ར་ཡང་ འཐོབ་ནི་ཡོད།ཕྲང་ཡིག་གི་ཕྲང་ཡིག་གི་རིམ་སྒྲིག་འདི་ ཚིག་ཡིག་རེ་རེའི་ཕྲང་ཡིག་གི་ཕྲང་ཡིག་གི་ཕྲང་ཡིག་དང་བསྟུན་ཏེ་ལོག་གཏང་དགོ་ དེ་ལས་ཕྲང་ཡིག་འདི་རིམ་སྒྲིག་འབད་དགོཔ་ཨིན། ཚིག་ཡིག་གཉིས་ཆ་ར་ ཚིག་ཡིག་གཅིག་སྦེ་ཡོད་པ་ཅིན་ ཕྲང་ཡིག་དེ་ ཨང་ཡིག་གི་རིམ་སྒྲིག་ནང་ལོག་གཏང་། ལས་འགན་འདི་གིས་ ཕྲང་ཡིག་གི་ཕྲང་ཡིག་འདི་རིམ་སྒྲིག་སྦེ་ལོག་གཏང་དགོ། ཁྱོད་ཀྱིས་ཕྲང་ཡིག་ཆ་མཉམ་ནང་ ཚིག་ཡིག་གཅིག་སྦེ་ཡོད་འོང་ཟེར་ མནོ་བསམ་གཏང་འོང་། དཔེར་ན་: >>> list_sort{\"std\":string_string\"}<string_string_string_string_string_string_string_string_string_string_string (a) \" (a) (a) (a) (a) (c) (d (aaa) (d (d) (d) (d) (d (d) (d) (d) (d (d) (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d (d) (d (d) (d) (d (d) (d) (d) (d (d) (d) (d (d) (d) (d (d) (d) (d (d) (\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n    std::vector<std::string> even_length_strings;\n    for (const std::string& s : lst) {\n        if (s.length() % 2 == 0) {\n            even_length_strings.push_back(s);\n        }\n    }\n\n    std::sort(even_length_strings.begin(), even_length_strings.end(), [](const std::string& a, const std::string& b) {\n        if (a.length() != b.length()) {\n            return a.length() < b.length();\n        }\n        return a < b;\n    });\n\n    return even_length_strings;\n}",
        "test": "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\", (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n"
    },
    {
        "task_id": "HumanEval/150",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// གློག་རིམ་ཅིག་ཨིན་པའི་སྐབས་ x འདི་ prime ཨིན་པ་ཅིན་ x གི་གནས་གོང་ལོག་བྱིན་དགོཔ་ཨིན་པའི་ཁར་ y འདི་ཡང་ prime ཨིན་པ་ཅིན་ y གི་གནས་གོང་ལོག་བྱིན་དགོཔ་ཨིན། དཔེར་ན་: >>> x_or_y((7), (34), (12)) (34) >>> x_or_y(15), (8), (5) (5)\nlong x_or_y(long n, long x, long y) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    for (long i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nlong x_or_y(long n, long x, long y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}",
        "test": "}\nint main() {\n    auto candidate = x_or_y;\n    assert(candidate((7), (34), (12)) == (34));\n    assert(candidate((15), (8), (5)) == (5));\n    assert(candidate((3), (33), (5212)) == (33));\n    assert(candidate((1259), (3), (52)) == (3));\n    assert(candidate((7919), (-1), (12)) == (-1));\n    assert(candidate((3609), (1245), (583)) == (583));\n    assert(candidate((91), (56), (129)) == (129));\n    assert(candidate((6), (34), (1234)) == (1234));\n    assert(candidate((1), (2), (0)) == (0));\n    assert(candidate((2), (2), (0)) == (2));\n}\n"
    },
    {
        "task_id": "HumanEval/151",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཀྱི་བེ་ཀཊར་ཅིག་བྱིནམ་ད་ བེ་ཀཊར་ནང་གི་ཨང་གྲངས་ཚུ་ཆ་མཉམ་སྦེ་ཡོད་མི་ཚུ་གི་གྲུ་བཞི་བསྡོམས་དེ་ལོག་གཏང་། ནེ་གེ་རེ་དང་ཨང་གྲངས་མེན་པའི་ཨང་གྲངས་ཚུ་སྣང་མེད་སྦེ་བཞག་། >>> double_the_difference (_) std::vector<float> (_) (long) 1, (long) 3, (long) 2, (long) 0}))) (10) >>> double_the_difference (_) std::vector<float> (_) (long)-1, (long)-2, (long) 0}))) (0) >>> double_the_difference (_) std::vector<float> (_) (long) 9, (long) - 2}))) (81) >>> double_the_difference (_) std::vector<float> (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_)\nlong double_the_difference(std::vector<float> lst) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong double_the_difference(std::vector<float> lst) {\n    long sum_of_squares = 0;\n    for (float num : lst) {\n        if (num > 0 && static_cast<long>(num) == num && static_cast<long>(num) % 2 != 0) {\n            sum_of_squares += static_cast<long>(num) * static_cast<long>(num);\n        }\n    }\n    return sum_of_squares;\n}",
        "test": "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));\n}\n"
    },
    {
        "task_id": "HumanEval/152",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ང་བཅས་ག་ར་གིས་ དྲན་པ་ཡོད་རང་ཨིནམ་ད་ དེ་བསྒང་ལུ་ ང་བཅས་ག་ར་གིས་ བྱུང་རྐྱེན་ཚུ་ ཡུན་རིངམོ་སྦེ་སྒུག་སྡོད་ཡོདཔ་ལས་ འདི་གི་འབྲས་བུ་འདི་ མཐའ་མར་ཤེས་ནི་ཨིནམ་ལས་ དེ་བསྒང་ལུ་ ང་བཅས་རང་གི་སེམས་ཁར་བྱུང་མི་ཚོར་སྣང་དང་བསམ་བློ་ཚུ་ ཐད་རི་བ་རི་བཀོད་དེ་བསྡུར་འབད་དགོཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ མི་གཅིག་གིས་ མཉམ་བསྡོམས་ཀྱི་གྲུབ་འབྲས་ཚུ་ ལེགས་ཤོམ་སྦེ་ར་ ཧ་གོ་ཡོདཔ་ཨིན་ན་ཨིན་ན་ཨིན་ན་ཨིན་ན་འཚོལ་ནི་དེ་ཨིན། ཁྱོད་ལུ་ ཨང་གྲངས་དང་ ཚད་གཞི་འདྲ་མཉམ་སྦེ་ཡོད་པའི་ ཝི་ཅཱཊ་གཉིས་བྱིན་ཡོདཔ་དང་ འདི་ནང་ བརྡ་བཀོད་རེ་རེ་གི་ནང་ མཉམ་བསྡོམས་ཅིག་ཡང་ སྟོན་ཡོདཔ་ཨིན། ཨང་གྲངས་དེ་ཅིག་སྦེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་དེ་ ༠ དང་མེན་པ་ཅིན་ ཨང་གྲངས་དེ་ ཝི་ཅཱཊ་དང་ ཨང་གྲངས་ཀྱི་བར་ན་ ཁྱད་པར་ངོ་མ་ཨིན། དཔེར་ན་: >>>(longd::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5, (longd) 6, (longd) 1, (longd) 2, (longd) 3, (longd) 4, (longd) 0, (longd) 0, (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (longd) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n    std::vector<long> diff;\n    for (size_t i = 0; i < game.size(); ++i) {\n        diff.push_back(std::abs(game[i] - guess[i]));\n    }\n    return diff;\n}",
        "test": "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n"
    },
    {
        "task_id": "HumanEval/153",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་རིམ་པ་ (ཐིག་ཁྲམ་) དང་ ཁྱབ་ཚད་ཀྱི་ ཝི་ཅཱཊ་ཐོབ་འོང་། ཁྱབ་ཚད་ཚུ་རིམ་པ་ནང་ ཁ་སྐོང་སློབ་ཚན་ཚུ་ འབག་ནི་ལུ་ ལག་ལེན་འཐབ་འོང་། ཁྱབ་ཚད་ཀྱི་ཤུགས་འདི་ འོག་གི་བཟུམ་སྦེ་ཨིན། CAPདེ་ ཁྱབ་ཚད་ཀྱི་མིང་ནང་ལུ་ ཡི་གུ་སྦོམ་ཤོས་ཀྱི་གྱངས་ཁ་ཅིག་དང་ SMདེ་ ཁྱབ་ཚད་ཀྱི་མིང་ནང་ལུ་ ཡི་གུ་ཆུང་ཤོས་ཀྱི་གྱངས་ཁ་ཅིག་ཨིན་པ་ཅིན་ ཁྱབ་ཚད་དེ་ CAP - SM བཅའ་ཡིག་གིས་བྱིན་འོང་། ཁྱོད་ཀྱིས་ ཁྱབ་ཚད་ཤུགས་ཅན་ཅིག་འཚོལ་ཏེ་ string འདི་ནང་བཟོ་རྣམ་འདི་སླར་ལོག་འབད་དགོ། ClassName.StrongestExtensionName. ག་དེམ་ཅིག་སྦེ་ ཁྱབ་ཚད་འདྲ་མཉམ་ཡོད་མི་ ཁྱབ་ཚད་གཉིས་ཡང་ན་དེ་ལས་མང་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཝི་ཅཱཊ་ནང་ དང་པ་ཐོན་མི་གཅིག་གདམ་ཁ་རྐྱབ་དགོ། དཔེར་ན་ ཁྱོད་ཀྱིས་ \"Slices\"དེ་ ཁྱབ་ཚད་ཀྱི་རིམ་པ་དང་ ཁྱབ་ཚད་ཀྱི་ ཝི་ཅཱཊ་ཅིག་སྦེ་ཐོབ་པ་ཅིན་ ཁྱོད་ཀྱིས་ 'Slices.SEviviSliSCes' དང་ 'Cheese', 'StufedF' དེ་ལས་ 'SviSliSliCes.SEviSliCes' དང་ 'myst:::::::myst:::SviSliCes:myst:::myst:::SviSliC::myst:SliC::myst:SliC::myst:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nint calculate_strength(const std::string& extension) {\n    int cap_count = 0;\n    int sm_count = 0;\n    for (char c : extension) {\n        if (isupper(c)) {\n            cap_count++;\n        } else if (islower(c)) {\n            sm_count++;\n        }\n    }\n    return cap_count - sm_count;\n}\n\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n    if (extensions.empty()) {\n        return class_name;\n    }\n\n    std::string strongest_extension = extensions[0];\n    int max_strength = calculate_strength(extensions[0]);\n\n    for (size_t i = 1; i < extensions.size(); ++i) {\n        int current_strength = calculate_strength(extensions[i]);\n        if (current_strength > max_strength) {\n            max_strength = current_strength;\n            strongest_extension = extensions[i];\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}",
        "test": "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
    },
    {
        "task_id": "HumanEval/154",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ཚིག་གཉིས་ཐོབ་ཨིན། ཁྱོད་ཀྱིས་ཚིག་གཉིས་པ་ཡང་ན་ འདི་གི་འཁོར་ལོའི་གྲལ་རིམ་འདི་ ཚིག་དང་པའི་ནང་ཡིག་འབྲུ་ཆུང་བ་ཅིག་ཨིན་པ་ཅིན་ ཁྱོད་ཀྱིས་བདེན་པ་སྦེ་ལོག་གཏང་དགོ >>> cycpattern_check((\"abcd\"), (\"abd\")) (false) >>> cycpattern_check((\"hello\"), (\"ell\")) (true) >>> cycpattern_check((\"whassup\"), (\"psus\")) (false) >>> cycpattern_check((\"abab\"), (\"baa\")) (true) >>> cycpattern_(check\"efef\"), (\"eeff\") (false) >>> cycpattern_check((\"himens\"), (\"simen\") (true)\nbool cycpattern_check(std::string a, std::string b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool cycpattern_check(std::string a, std::string b) {\n    if (b.empty()) {\n        return true;\n    }\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (int i = 0; i < b.length(); ++i) {\n        std::rotate(b.begin(), b.begin() + 1, b.end());\n        if (a.find(b) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}",
        "test": "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) == (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) == (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n"
    },
    {
        "task_id": "HumanEval/155",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་དང་ཆ་མཉམ་མེད་པའི་ཨང་གྲངས་ཚུ་ཡོད་མིའི་ཨང་གྲངས་ལོག་གཏང་། དཔེ་འབད་བ་ཅིན་: >>> even_odd_count((-12)) (std::make_tuple(1, 1)) >>> even_odd_count((123)) (std::make_tuple(1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<tuple>\n\nstd::tuple<long, long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count = 0;\n    std::string s = std::to_string(std::abs(num));\n    for (char c : s) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return std::make_tuple(even_count, odd_count);\n}",
        "test": "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
    },
    {
        "task_id": "HumanEval/156",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཚངམ་སྦེ་ཐོབ་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ རོ་མཱན་ཨང་གྲངས་ནང་བཙུགས་ཏེ་ ཨང་གྲངས་ཆུང་ཡིག་སྦེ་ལོག་གཏང་།\nstd::string int_to_mini_roman(long number) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string int_to_mini_roman(long number) {\n    std::string roman = \"\";\n    std::vector<std::pair<int, std::string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\n    for (const auto& pair : roman_map) {\n        while (number >= pair.first) {\n            roman += pair.second;\n            number -= pair.first;\n        }\n    }\n    return roman;\n}",
        "test": "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19)) == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251)) == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500)) == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4)) == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90)) == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532)) == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994)) == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
    },
    {
        "task_id": "HumanEval/157",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཚུ་བྱིན་ཏེ་ཡོདཔ་ཨིན། ཟུར་གསུམ་ཆ་མཉམ་འདི་ ཟུར་གསུམ་ཕྲང་ཟུར་ཅིག་བཟོ་བ་ཅིན་བདེན་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། ཟུར་གསུམ་ཕྲང་ཟུར་འདི་ ཟུར་གསུམ་ཟུར་གཅིག་ཕྲང་ཟུར་ཡང་ན་ དབྱེ་ཁག་༩༠ འབད་མི་ ཟུར་གསུམ་ཅིག་ཨིན། དཔེར་ན་: >>> right_angle_triangle (((3), (4), (5)) (བདེན་པ་) >>> right_angle_triangle (((1), (2), (3)) (རྫུན་མ་)\nbool right_angle_triangle(long a, long b, long c) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nbool right_angle_triangle(long a, long b, long c) {\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n}",
        "test": "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"
    },
    {
        "task_id": "HumanEval/158",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཚིག་ཡིག་གི་ཐིག་ཁྲམ་ཅིག་ལུ་ ངོས་ལེན་འབད་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོ། ཚིག་ཁྲམ་དེ་ནང་ལུ་ ཚིག་ཚིག་མ་འདྲཝ་ཚུ་ཡོདཔ་ལས་ ཚིག་ཚིག་འདི་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་གཅིག་ནང་རང་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་རེ་ ཚར་\nstd::string find_max(std::vector<std::string> words) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nint count_unique_chars(const std::string& s) {\n    std::set<char> unique_chars;\n    for (char c : s) {\n        unique_chars.insert(c);\n    }\n    return unique_chars.size();\n}\n\nstd::string find_max(std::vector<std::string> words) {\n    if (words.empty()) {\n        return \"\";\n    }\n\n    std::string max_unique_word = words[0];\n    int max_unique_count = count_unique_chars(words[0]);\n\n    for (size_t i = 1; i < words.size(); ++i) {\n        int current_unique_count = count_unique_chars(words[i]);\n        if (current_unique_count > max_unique_count) {\n            max_unique_count = current_unique_count;\n            max_unique_word = words[i];\n        } else if (current_unique_count == max_unique_count && words[i] < max_unique_word) {\n            max_unique_word = words[i];\n        }\n    }\n    return max_unique_word;\n}",
        "test": "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
    },
    {
        "task_id": "HumanEval/159",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ལྟོ་མི་ཟ་བའི་བེ་ལུ་ཨིནམ་ལས་ ཁྱོད་ཀྱིས་ གུ་རུའི་གྱངས་ཁ་ཅིག་ལས་བརྒལ་ཟ་མ་དགོ་པར་ ད་རེས་ནངས་པར་ གུ་རུའི་གྱངས་ཁ་འདི་ལས་བརྒལ་ཟ་དགོ་པས་ ཁྱོད་ཀྱིས་ ཟས་བཅུད་ཀྱི་ཤུལ་ལས་ཟ་མི་ གུ་རུའི་གྱངས་ཁ་འདི་ ཟ་མ་བཏུབ་པ་ཅིན་ ལྷག་ལུས་གུ་རུའི་གྱངས་ཁ་དེ་ ཟ་ནི་དེ་ཨིན་རུང་ ལྟོཝ་བཀྱེས་སྡོད་འོང་། དཔེ་འབད་བ་ཅིན་: >>>ཟ་((5), (6), (10)) (std::vector<long>{()11, (long)4}) >>>ཟ་(4), (8), (9) (std::vector<long>{()12, ( (1})) >>>ཟ་(1), (10), (10) (std::vector<long>{()11, (long) >>>0)) >>>ཟ་(2), (5) (std::vector<long>{() 7, (long) V: int number of carrots you need to eat in the current stock: 1000: 0 = int number of remaining carrots you need to eat in the current stock: 1000: 0 * int number of carrots you need to eat in the current stock: 1000 * int number of carrots you need to eat: 0 = int number of carrots you need to eat in the current stock: 1000\nstd::vector<long> eat(long number, long need, long remaining) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> eat(long number, long need, long remaining) {\n    long eaten = 0;\n    long left = remaining;\n    long to_eat = need;\n\n    if (left >= to_eat) {\n        eaten = to_eat;\n        left -= to_eat;\n    } else {\n        eaten = left;\n        left = 0;\n    }\n\n    return {(long)number + eaten, left};\n}",
        "test": "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n"
    },
    {
        "task_id": "HumanEval/160",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨེཕ་རི་ཀིསི་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན། ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ ཨེལ་ཇི་བཱརཀ་གི་ལཱ་འདི་ཨིན།\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n    std::vector<long> current_operand = operand;\n    std::vector<std::string> current_operator = op;\n\n    auto apply_op = [&](long a, long b, const std::string& o) {\n        if (o == \"+\") return a + b;\n        if (o == \"-\") return a - b;\n        if (o == \"*\") return a * b;\n        if (o == \"//\") return a / b;\n        if (o == \"**\") return static_cast<long>(pow(a, b));\n        return 0L; // Should not happen\n    };\n\n    std::vector<std::string> precedence1 = {\"**\"};\n    std::vector<std::string> precedence2 = {\"*\", \"//\"};\n    std::vector<std::string> precedence3 = {\"+\", \"-\"};\n\n    auto evaluate = [&](const std::vector<std::string>& prec) {\n        size_t i = 0;\n        while (i < current_operator.size()) {\n            bool found = false;\n            for (const auto& o : prec) {\n                if (current_operator[i] == o) {\n                    current_operand[i] = apply_op(current_operand[i], current_operand[i + 1], current_operator[i]);\n                    current_operand.erase(current_operand.begin() + i + 1);\n                    current_operator.erase(current_operator.begin() + i);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                i++;\n            }\n        }\n    };\n\n    evaluate(precedence1);\n    evaluate(precedence2);\n    evaluate(precedence3);\n\n    return current_operand[0];\n}",
        "test": "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"//\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));\n}\n"
    },
    {
        "task_id": "HumanEval/161",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཁྱོད་ཀྱིས་ string s.ཐོབ་པ་ཅིན་ s[i]འདི་ཡིག་འབྲུ་ཅིག་ཨིན་པ་ཅིན་ དེའི་ཡིག་གཟུགས་འདི་ འོག་ལས་གོང་ལུ་ ཡང་ན་ ཕྱོགས་གཞན་ཁ་ལུ་བསྒྱུར་གཏང་། དེ་མེན་པ་ཅིན་ འདི་བཟུམ་སྦེ་རང་བཞག་དགོ། string འདི་ནང་ཡིག་འབྲུ་མེདཔ་ཨིན་པ་ཅིན་ string འདི་ཁ་བསྒྱུར་གཏང་། ལས་འགན་འདི་གིས་ string སླར་ལོག་འབད་དགོཔ་ཨིན། དཔེ་གཞི་ >>> solve((\"1234\")) (\"4321\") >>> solve((\"ab\")) (\"AB\") >>> solve(\"#a@C\")) (\"#A@c\")\nstd::string solve(std::string s) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string solve(std::string s) {\n    bool has_letter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            has_letter = true;\n            break;\n        }\n    }\n\n    if (has_letter) {\n        for (char& c : s) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else if (isupper(c)) {\n                c = tolower(c);\n            }\n        }\n    } else {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;\n}",
        "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
    },
    {
        "task_id": "HumanEval/162",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// string 'text' བྱིན་པ་ཅིན་ md5 ཧེཤི་ འདྲ་མཉམ་ string སླར་ལོག་འབདཝ་ཨིན། 'text' འདི་ སྟོངམ་ stringཨིན་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། >>> string_to_md5((\"Hello world\")) \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n#include <optional>\n\n#include <openssl/md5.h>\n#include <iomanip>\n#include <sstream>\n\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n\n    std::stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n    }\n    return ss.str();\n}",
        "test": "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n"
    },
    {
        "task_id": "HumanEval/163",
        "nl": "dzo_Tibt",
        "pl": "cpp",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// ཨང་གྲངས་ཆ་མཉམ་གཉིས་ཆ་མཉམ་ a དང་ b བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་ a དང་ b གི་བར་ན་ཡར་སེང་གི་རིམ་པ་ལུ་ལོག་གཏང་། དཔེར་ན་: >>> generate_integers((2), (8)) (std::vector<long>({(long)2, (long)4, (long)6, (long)8})) >>> generate_integers((8), (2)) (std::vector<long>({(long)2, (long)4, (long)6, (long)8})) >>> generate_integers(10), (14) (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\n",
        "canonical_solutions": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> generate_integers(long a, long b) {\n    std::vector<long> result;\n    long start = std::min(a, b);\n    long end = std::max(a, b);\n    for (long i = start; i <= end; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}",
        "test": "}\nint main() {\n    auto candidate = generate_integers;\n    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((17), (89)) == (std::vector<long>()));\n}\n"
    }
]