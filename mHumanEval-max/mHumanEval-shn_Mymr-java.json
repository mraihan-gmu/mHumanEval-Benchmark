[{"task_id":"HumanEval_0","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ လႆႈပၼ်ဝႆႉ။    \/ တူၺ်းတူၺ်းဝႃႈ ၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တူဝ်ၼပ်ႉဢၼ်မီးၸမ်ၵၼ်တင်းသွင်ဢၼ်ၼၼ်ႉ မီးၼမ်လိူဝ်သေ  ၼႆႉႁိုဝ်ၼႆ။    \/\/ >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    \/\/ (false)\n    \/\/ >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    \/\/ (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n        if(numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Float> numbers1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f));\n        System.out.println(hasCloseElements(numbers1, 0.5f)); \/\/ Output: false\n\n        ArrayList<Float> numbers2 = new ArrayList<>(Arrays.asList(1.0f, 2.8f, 3.0f, 4.0f, 5.0f, 2.0f));\n        System.out.println(hasCloseElements(numbers2, 0.3f)); \/\/ Output: true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));\n    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_1","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ဢမ်ႇလႆႈသႂ်ႇပၼ် တီႈၵိုတ်းဝႆႉ တီႈၼႂ်း သဵၼ်ႈမၢႆ ဢၼ်တေသႂ်ႇပၼ်ၼၼ်ႉ။    \/ ၸုမ်းဢၼ်ၽၢတ်ႇၵၼ်ဝႆႉၼၼ်ႉ ၽဵင်ႇပဵင်းၵၼ် (ႁွႆးဢၼ်ပိုတ်ႇဝႆႉဢၼ်လႂ်ဢၼ်ၼၼ်ႉ လႆႈထုၵ်ႇပိၵ်ႉဝႆႉလီလီ) လႄႈ ဢမ်ႇလႆႈဢဝ်သႂ်ႇၵၼ်ဝႆႉၼ်ႂးၵၼ်ၼၼ်ႉယဝ်ႉ။    \/ ၸႅၵ်ႇဢွၵ်ႇ ၸုမ်းၸိူဝ်းၼၼ်ႉ ႁႂ်ႈပဵၼ် သဵၼ်ႈမၢႆဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ်သေ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆဢၼ်ပဵၼ် သဵၼ်ႈမၢႆၶွင် ၸိူဝ်းၼၼ်ႉ ၶိုၼ်းမႃး။    \/ Input to this function is a string containing multiple groups of nested parentheses. ယိူင်းဢၢၼ်းၸဝ်ႈၵဝ်ႇၼႆႉပဵၼ်တႃႇ     \/\/ >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n        ArrayList<String> groups = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                balance--;\n                currentGroup.append(c);\n            }\n\n            if (balance == 0 && currentGroup.length() > 0) {\n                groups.add(currentGroup.toString());\n                currentGroup.setLength(0);\n            }\n        }\n\n        return groups;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> result = separateParenGroups(\"( ) (( )) (( )( ))\");\n        System.out.println(result); \/\/ Output: [\"()\", \"(())\", \"(()())\"]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\")))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_2","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ ဢၼ်ပႃး တူဝ်ၼပ်ႉႁူဝ်သိပ်းၼၼ်ႉမႃး။     \/ (တွၼ်ႈဢၼ်ၵိုတ်းဝႆႉၼၼ်ႉ ၵႆႉၵႆႉလဵၵ်ႉလိူဝ်သေ 1) ။    \/ လႄႈ တူဝ်ၼပ်ႉတဵမ် (တူဝ်ၼပ်ႉတဵမ် ဢၼ်ယႂ်ႇသုတ်း ဢၼ်လဵၵ်ႉလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉ) လႄႈ တူဝ်ၼပ်ႉၸုတ်ႉ     \/ ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၸီႉဢၼ်လႅၵ်ႈလၢႆႈလႆႈၼၼ်ႉၼႆ မၼ်းတေၸႅၵ်ႇဢွၵ်ႇလႆႈပဵၼ်     \/\/ >>> truncateNumber((3.5f))\n    \/\/ (0.5f)\n    public static float truncateNumber(float number) {\n","canonical_solution":"int integerPart = (int) number;\n        return number - integerPart;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_3","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တီႈၼၼ်ႈၼၼ်ႉ ၽွၼ်ႉၸေႃႇၵျီႇၼႆႉ တေလႆႈၶိုၼ်း true ယဝ်ႉ ပေႃးဢမ်ႇၼၼ် တေလႆႈၶိုၼ်း false    ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇတေသွၵ်ႈႁႃဝႃႈ တီႈၶၵ်ႉတွၼ်ႈလႂ်သေဢမ်ႇဝႃႈ လွင်ႈၵိုတ်းဝႆႉၶွင်ငိုၼ်းတွင်းၼၼ်ႉ တူၵ်းလူင်းတႂ်ႈ သုၼ်ၼႆလႄႈ    \/ သူတေလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ၸႅၼ်ႇဝႆႉ လွင်ႈသႂၢင်းငိုၼ်း လႄႈ လွင်ႈထွၼ်ငိုၼ်း တီႈၼႂ်းမၢႆတွင်းပၢၼ်ႇၵၢတ်ႉ ဢၼ်တႄႇလူၺ်ႈ     \/\/ >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (false)\n    \/\/ >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l))))\n    \/\/ (true)\n    public static boolean belowZero(ArrayList<Long> operations) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static boolean belowZero(ArrayList<Long> operations) {\n        long balance = 0;\n        for (Long operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> operations1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));\n        System.out.println(belowZero(operations1)); \/\/ false\n\n        ArrayList<Long> operations2 = new ArrayList<Long>(Arrays.asList(1L, 2L, -4L, 5L));\n        System.out.println(belowZero(operations2)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(belowZero((new ArrayList<Long>(Arrays.asList()))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-3l, (long)1l, (long)2l, (long)-3l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l, (long)6l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (false));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-5l)))) == (true));\n    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_4","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ MAD = average x - x_mean     \/ elements လႄႈ centerpoint (ဢၼ်ၼႆႉပဵၼ်ဢၼ်မီးတီႈပွင်ႇမၼ်း)    \/ Mean Absolute Deviation ၼႆႉပဵၼ် လၢႆႊၵႃႊဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ်တင်းမူတ်း ၼႂ်းၵႄႈ     \/ ၵဵဝ်ႇလူၺ်ႈလွင်ႈ ၶေႃႈမုၼ်းဢၼ်ၼႆႉၼႆႉ။    \/ တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇ ဢၼ်ပၼ်ဝႆႉ ဢၼ်ပႃး တူဝ်ၼပ်ႉၶဝ်ႈၼၼ်ႉ၊ ထတ်းသၢင်ႈ Mean Absolute Deviation ၼၼ်ႉ     \/\/ >>> meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\n    \/\/ (1.0f)\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ For a given array list of input numbers, calculate Mean Absolute Deviation\n    \/\/ around the mean of this dataset.\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list should not be null or empty\");\n        }\n        \n        \/\/ Calculate mean\n        float sum = 0.0f;\n        for (float num : numbers) {\n            sum += num;\n        }\n        float mean = sum \/ numbers.size();\n        \n        \/\/ Calculate Mean Absolute Deviation\n        float madSum = 0.0f;\n        for (float num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n        \n        return madSum \/ numbers.size();\n    }\n\n    \/\/ A main method to demonstrate functionality\n    public static void main(String[] args) {\n        ArrayList<Float> numbers = new ArrayList<Float>();\n        numbers.add(1.0f);\n        numbers.add(2.0f);\n        numbers.add(3.0f);\n        numbers.add(4.0f);\n\n        float mad = meanAbsoluteDeviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + mad);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));\n    }\n\n}\n"},{"task_id":"HumanEval_5","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ သႂ်ႇပၼ်တူဝ်ၼပ်ႉ 'delimeter' ၼႂ်းၵႄႈ တူဝ်ၼပ်ႉဢၼ်သိုပ်ႇၵၼ်မႃး သွင်ဢၼ် ၶွင် input array list `numbers'     \/\/ >>> intersperse((new ArrayList<Long>(Arrays.asList())), (4l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> intersperse((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Long> numbers1 = new ArrayList<>(Arrays.asList());\n        ArrayList<Long> result1 = intersperse(numbers1, 4L);\n        System.out.println(result1);\n\n        ArrayList<Long> numbers2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\n        ArrayList<Long> result2 = intersperse(numbers2, 4L);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intersperse((new ArrayList<Long>(Arrays.asList())), (7l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)2l))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)6l, (long)8l, (long)3l, (long)8l, (long)2l)))));\n    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)2l, (long)2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_6","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    တူဝ်ယၢင်ႇမၼ်း (() (()) ၼႆႉ မီးဝႆႉ သွင်ၸၼ်ႉ ဢၼ်တေႁဵတ်းႁွင်ႈၵေႃႇသၢင်ႈ ၽွင်းမိူဝ်ႈ ((())) ၼႆႉ မီးဝႆႉ သၢမ်ၸၼ်ႉ။    \/ တွၼ်ႈတႃႇၸုမ်းလႂ်ၸုမ်းၼၼ်ႉ၊ ဢွၵ်ႇပၼ် ထၢၼ်ႈဢၼ်လိုၵ်ႉသုတ်းၶွင် လွင်ႈဢဝ်ပႅတ်ႇၵႅၼ်ႇဢၼ်မီးတီႈၼႂ်းၵႄႈ parentheses ၼၼ်ႉ။    \/ Input to this function is a string represented multiple groups for nested parentheses separated by spaces. \/ ဢၼ်ၶဝ်ႈၸူးၼႂ်းၽွၼ်ႉၼႆႉ ပဵၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင်ဝႆႉ လၢႆလၢႆၸုမ်း တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆဢၼ်မီးဝႆႉ ႁင်းၶေႃ ဢၼ်ၽႄဝႆႉလူၺ်ႈ လွင်ႈပႅၵ်ႇပိူင်ႈၵၼ်ၼၼ်ႉယဝ်ႉ။    \/\/ >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        ArrayList<Long> depths = new ArrayList<>();\n\n        for (String group : groups) {\n            long currentDepth = 0;\n            long maxDepth = 0;\n\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth;\n                    }\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n\n            depths.add(maxDepth);\n        }\n\n        return depths;\n    }\n\n    public static void main(String[] args) {\n        String input = \"(()()) ((())) () ((())()())\";\n        System.out.println(parseNestedParens(input));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_7","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၸၢၵ်ႈၸႅၵ်ႉထရီႇ ဢၼ်ပႃးဝႆႉ သႅၼ်းၸႅၵ်ႉထရီႇ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉၵူၺ်း    \/\/ >>> filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n","canonical_solution":"public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n        return strings.stream()\n                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"prune\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_8","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ တေလႆႈပဵၼ် 0 လႄႈ တူဝ်ၵုၼ်းဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ တေလႆႈပဵၼ် 1    \/ တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ်ဝႆႉ တင်းမူတ်း လႄႈ တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉတဵမ်တင်းမူတ်း တီႈၼႂ်း တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။    \/\/ >>> sumProduct((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (Pair.with(0l, 1l))\n    \/\/ >>> sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (Pair.with(10l, 24l))\n    public static Pair<Long, Long> sumProduct(ArrayList<Long> numbers) {\n","canonical_solution":"long sum = 0L;\n        long product = 1L;\n        \n        for (Long number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        return Pair.with(sum, product);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList()))).equals((Pair.with(0l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((Pair.with(3l, 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)100l, (long)0l)))).equals((Pair.with(100l, 0l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))).equals((Pair.with(15l, 105l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)10l)))).equals((Pair.with(10l, 10l))));\n    }\n\n}\n"},{"task_id":"HumanEval_9","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၼႂ်းလွင်ႈၶပ်ႉၶိုင်။     \/ လုၵ်ႉတီႈ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ႁဵတ်းဢွၵ်ႇ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉ ဢၼ်တိူဝ်းလိူဝ်သေ ဢၼ်လႆႈႁၼ် တေႃႇထိုင် ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။    \/\/ >>> rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ From a given array list of integers, generate an array list of rolling maximum element found until given moment\n    \/\/ in the sequence.\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            return result;\n        }\n        long currentMax = Long.MIN_VALUE;\n        for (Long number : numbers) {\n            currentMax = Math.max(currentMax, number);\n            result.add(currentMax);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> numbers = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 3L, 4L, 2L));\n        ArrayList<Long> rollingMaxNumbers = rollingMax(numbers);\n        System.out.println(rollingMaxNumbers); \/\/ Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_10","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ - သႂ်ႇပၼ်တီႈသုတ်းၶွင် string reverse ၶွင် string prefix ဢၼ်မႃးၼႃႈ palindromic suffix ၼၼ်ႉ။    \/ - သွၵ်ႈႁႃ postfix ဢၼ်ယၢဝ်းသေပိူၼ်ႈ ၼႂ်းသဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ဢၼ်ပဵၼ် palindrome ၼၼ်ႉတႃႉ။     \/ ပၢႆးဝူၼ်ႉ ဢႄႇလ်ၵေႃးရီႇထမ်ႇၼႆႉ ငၢႆႈၼႃႇ:     \/ သွၵ်ႈႁႃ palindrome ဢၼ်တိုၵ်ႉသုတ်း ဢၼ်တႄႇလူၺ်ႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။     \/\/ >>> makePalindrome((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> makePalindrome((\"cat\"))\n    \/\/ (\"catac\")\n    \/\/ >>> makePalindrome((\"cata\"))\n    \/\/ (\"catac\")\n    public static String makePalindrome(String string) {\n","canonical_solution":"public static String makePalindrome(String string) {\n    if (string == null || string.length() <= 1) {\n        return string;\n    }\n\n    \/\/ Function to check if a given string is a palindrome\n    boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left++) != s.charAt(right--)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    \/\/ Find longest palindromic suffix\n    int n = string.length();\n    for (int i = n; i > 0; i--) {\n        if (isPalindrome(string.substring(0, i))) {\n            StringBuilder sb = new StringBuilder(string.substring(i));\n            sb.reverse();\n            return string + sb.toString();\n        }\n    }\n    \n    return string; \/\/ fallback should not be reached\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"},{"task_id":"HumanEval_11","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ႁဵတ်းသၢင်ႈ binary XOR တီႈၼႂ်းၶေႃႈၶဝ်ႈၸိူဝ်းၼႆႉသေ ၶိုၼ်းဢဝ် ၶေႃႈတွပ်ႇမၼ်းပဵၼ် string ၵေႃႈလႆႈ။    \/ Input ၼႆႉပဵၼ် သွင်တူဝ်ၼပ်ႉ a လႄႈ b ဢၼ်ပႃးဝႆႉ တူဝ်ၼပ်ႉ 1 လႄႈ 0 ၵူၺ်း။     \/\/ >>> stringXor((\"010\"), (\"110\"))\n    \/\/ (\"100\")\n    public static String stringXor(String a, String b) {\n","canonical_solution":"if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must have the same length.\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            \n            if (charA != '0' && charA != '1' || charB != '0' && charB != '1') {\n                throw new IllegalArgumentException(\"Input strings must consist only of '0' and '1'.\");\n            }\n            \n            \/\/ Perform XOR operation and append to the result\n            result.append(charA == charB ? '0' : '1');\n        }\n        \n        return result.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"},{"task_id":"HumanEval_12","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ strings ဢၼ်မီးတၢင်းယၢဝ်းမိူၼ်ၵၼ်ၼၼ်ႉ။ ပေႃးဝႃႈ သဵၼ်ႈမၢႆ array ဢၼ်ၶဝ်ႈဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈပွင်ႇၼႆ ၶိုၼ်းဢဝ် null ၼၼ်ႉၶိုၼ်း။    \/ ၼႂ်းသဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇၼၼ်ႉ ၶိုၼ်းဢဝ်ဢၼ်ယၢဝ်းသေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ်ဢၼ်ဢွၼ်တၢင်းသုတ်းၼၼ်ႉၶိုၼ်း ပေႃးပဵၼ်ဝႆႉ တူဝ်ၼပ်ႉၼမ်ထႅဝ်ၼႆ    \/\/ >>> longest((new ArrayList<String>(Arrays.asList())))\n    \/\/ Optional.empty()\n    \/\/ >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    \/\/ Optional.of(\"a\")\n    \/\/ >>> longest((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"bb\", (String)\"ccc\"))))\n    \/\/ Optional.of(\"ccc\")\n    public static Optional<String> longest(ArrayList<String> strings) {\n","canonical_solution":"if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length)\n                .thenComparing(Comparator.naturalOrder()));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"},{"task_id":"HumanEval_13","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇၽႄဢၼ်ၵဵဝ်ႇၵၼ်ဢၼ်ယ်ႂႇသေပိူၼ်ႈ ၶွင်တူဝ်ၼပ်ႉတဵမ် a လႄႈ b သွင်တူဝ်ၼၼ်ႉမႃး    \/\/ >>> greatestCommonDivisor((3l), (5l))\n    \/\/ (1l)\n    \/\/ >>> greatestCommonDivisor((25l), (15l))\n    \/\/ (5l)\n    public static long greatestCommonDivisor(long a, long b) {\n","canonical_solution":"if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_14","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ မေႃႇထႅမ်းပလဵၵ်ႉ ဢၼ်ပႃး တူဝ်ၸီႉတၢင်းမူတ်း ဢၼ်လုၵ်ႉတီႈ ဢၼ်ယၢဝ်းသေပိူၼ်ႈ တေႃႇထိုင် ဢၼ်ယၢဝ်းသေပိူၼ်ႈ ၶွင် ထႅမ်းပလဵၵ်ႉ ဢၼ်သႂ်ႇဝႆႉၼၼ်ႉ ၶိုၼ်းဢဝ်မႃး။    \/\/ >>> allPrefixes((\"abc\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))\n    public static ArrayList<String> allPrefixes(String string) {\n","canonical_solution":"ArrayList<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_15","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် string ဢၼ်ပႃး တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈသေ တူဝ်ၼပ်ႉတႄႇတီႈ 0 တေႃႇထိုင် n ႁူမ်ႈပႃးၼၼ်ႉမႃး    \/\/ >>> stringSequence((0l))\n    \/\/ (\"0\")\n    \/\/ >>> stringSequence((5l))\n    \/\/ (\"0 1 2 3 4 5\")\n    public static String stringSequence(long n) {\n","canonical_solution":"import java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\nclass Problem {\n    public static String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n)\n                         .mapToObj(Long::toString)\n                         .collect(Collectors.joining(\" \"));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"},{"task_id":"HumanEval_16","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပေႃးဝႃႈႁဝ်းပၼ် string ၼႆ ႁဝ်းတေႁႃတူဝ်လိၵ်ႈဢၼ်ဢမ်ႇမိူၼ်ၵၼ်မၼ်း (ဢမ်ႇဝႃႈ case) မၼ်းတေမီးလၢႆတူဝ်    \/\/ >>> countDistinctCharacters((\"xyzXYZ\"))\n    \/\/ (3l)\n    \/\/ >>> countDistinctCharacters((\"Jerry\"))\n    \/\/ (4l)\n    public static long countDistinctCharacters(String string) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Given a string, find out how many distinct characters (regardless of case) does it consist of\n    public static long countDistinctCharacters(String string) {\n        \/\/ Convert the string to lowercase to ensure case-insensitivity\n        String lowerCaseString = string.toLowerCase();\n        \/\/ Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        \/\/ Iterate over each character in the string and add it to the set\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        \/\/ Return the size of the set, i.e., the number of distinct characters\n        return uniqueChars.size();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n"},{"task_id":"HumanEval_17","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    ' 'မႆႉႁုင်း' - မႆႉႁုင်းသီႇဢၼ်၊ ယိုတ်းဝႆႉၶၢဝ်းယၢမ်းဢၼ်ၼိူင်ႈ     \/ 'oidiyeji' - ၶိုင်ႈၼူၵ်ႉ၊ ၸူဝ်ႈၶၢဝ်းသွင်ၵမ်း     \/ 'o' - ပဵၼ်မၢႆတွင်းဢၼ်တဵမ်ထူၼ်ႈ၊ ၸူဝ်ႈၶၢဝ်း 4 သဵင်။    \/ မီးလွင်ႈလၢၵ်ႇလၢႆးဢၼ်ၼိူင်ႈယူႇ:     \/ ဢမ်ႇပဵၼ်ပွၵ်ႈလိုၼ်းသုတ်း။    \/ ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇၸႅၵ်ႇထႅဝ်လိၵ်ႈဢၼ်ၼႆႉ လႄႈ မိူဝ်းၶိုၼ်း သဵၼ်ႈမၢႆ မေႃႇလီႇၶွင် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵပ်းၵၢႆႇလူၺ်ႈတင်း တၢင်းၼမ်ဢၼ်ႁဵတ်းဝႆႉ ၵူႈဢၼ်ၼၼ်ႉယဝ်ႉ။    \/ Input to this function is a string representing musical notes in a special ASCII format. ဢၼ်ၶဝ်ႈၸူးၼႂ်းၽွၼ်ႉၼႆႉ ပဵၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင် ၼေႃႇတႃႇၽဵင်းၵႂၢမ်း ၼႂ်းပိူင်ၾၢင် ASCII ဢၼ်ၶိုၵ်ႉတွၼ်း။    \/\/ >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static ArrayList<Long> parseMusic(String music_string) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> beats = new ArrayList<>();\n        String[] notes = music_string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4L);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2L);\n            } else if (note.equals(\".|\")) {\n                beats.add(1L);\n            }\n        }\n        \n        return beats;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_18","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ သွၵ်ႈႁႃဝႃႈ ၸႅၵ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တေၸၢင်ႈႁၼ်လႆႈလၢႆၵမ်း ၼႂ်းၸႅၵ်ႉငဝ်ႈမၼ်း။ မၢႆတွင်းလွင်ႈဢၼ်ၶပ်ႉၶိုင်ဝႆႉ။     \/\/ >>> howManyTimes((\"\"), (\"a\"))\n    \/\/ (0l)\n    \/\/ >>> howManyTimes((\"aaa\"), (\"a\"))\n    \/\/ (3l)\n    \/\/ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    \/\/ (3l)\n    public static long howManyTimes(String string, String substring) {\n","canonical_solution":"public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_19","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉတီႈလဵၵ်ႉသုတ်း တေႃႇထိုင် ဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉမႃး    \/ ဢၼ်တေလႆႈလိူၵ်ႈၼၼ်ႉပဵၼ် 'သုၼ်'၊ 'ၼိုင်ႈ'၊ 'သွင်'၊ 'သၢမ်'၊ 'သီႇ'၊ 'ႁႃႈ'၊ 'ႁူၵ်း'၊ 'ၸဵတ်း'၊ 'ဢဵတ်း' လႄႈ 'သိပ်း' ၸိူဝ်းၼႆႉယဝ်ႉ။    \/ Input ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉတီႈၵႄႈ တူဝ်ၼပ်ႉဢၼ်တႄႇတီႈ သုၼ် တေႃႇထိုင် တူဝ်ၼပ်ႉဢၼ်မီးတီႈၵႂၢင်ႈ 9 ၼၼ်ႉယဝ်ႉ။    \/\/ >>> sortNumbers((\"three one five\"))\n    \/\/ (\"one three five\")\n    public static String sortNumbers(String numbers) {\n","canonical_solution":"public static String sortNumbers(String numbers) {\n        List<String> numeralList = Arrays.asList(numbers.split(\" \"));\n        Map<String, Integer> numeralToValue = new HashMap<>();\n        numeralToValue.put(\"zero\", 0);\n        numeralToValue.put(\"one\", 1);\n        numeralToValue.put(\"two\", 2);\n        numeralToValue.put(\"three\", 3);\n        numeralToValue.put(\"four\", 4);\n        numeralToValue.put(\"five\", 5);\n        numeralToValue.put(\"six\", 6);\n        numeralToValue.put(\"seven\", 7);\n        numeralToValue.put(\"eight\", 8);\n        numeralToValue.put(\"nine\", 9);\n\n        numeralList.sort(Comparator.comparingInt(numeralToValue::get));\n\n        return String.join(\" \", numeralList);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"},{"task_id":"HumanEval_20","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တၢင်ႇၸိူဝ်းလႄႈ ၶိုၼ်းဢဝ်ၶဝ်မႃးၸွမ်းၼင်ႇပိူင် (တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉလိူဝ်၊ တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇလိူဝ်) ။    \/ တီႈၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ (တၢင်းယၢဝ်းမၼ်းဢမ်ႇယွမ်း 2 တူဝ်) လိူၵ်ႈဢဝ်သေ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉ ဢၼ်ၸမ်သုတ်းတင်းတူဝ်ၼပ်ႉဢၼ်လႂ်ၼၼ်ႉ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း     \/\/ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    \/\/ (Pair.with(2.0f, 2.2f))\n    \/\/ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    \/\/ (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two numbers.\");\n        }\n\n        Collections.sort(numbers);\n        float minDiff = Float.MAX_VALUE;\n        Pair<Float, Float> closestPair = null;\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float current = numbers.get(i);\n            float next = numbers.get(i + 1);\n            float diff = Math.abs(current - next);\n\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Pair.with(current, next);\n            }\n        }\n\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Float> list1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.2f));\n        ArrayList<Float> list2 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.0f));\n        \n        System.out.println(findClosestElements(list1)); \/\/ Output: (2.0, 2.2)\n        System.out.println(findClosestElements(list2)); \/\/ Output: (2.0, 2.0)\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(3.9f, 4.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f)))).equals((Pair.with(5.0f, 5.9f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(2.0f, 2.2f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f)))).equals((Pair.with(2.0f, 2.0f))));\n    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f)))).equals((Pair.with(2.2f, 3.1f))));\n    }\n\n}\n"},{"task_id":"HumanEval_21","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၼင်ႇႁိုဝ် တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉ တေပဵၼ် 0 လႄႈ တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉ တေပဵၼ် 1 ၼၼ်ႉယူႇယဝ်ႉ။    \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉ (ဢၼ်ပႃးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇယွမ်းသွင်ဢၼ်) ၼႆၸိုင် ဢဝ်လွင်ႈလႅၵ်ႈလၢႆႈ ထႅဝ်ၸႅတ်ႈထၢင်ႇသေ မႄးထတ်းသဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉၼၼ်ႉ၊    \/\/ >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n    \/\/ (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given array list of numbers (of at least two elements), apply a linear transform to that array list,\n    \/\/ such that the smallest number will become 0 and the largest will become 1\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two elements.\");\n        }\n        \n        float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n        \n        for (float num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        \n        ArrayList<Float> rescaled = new ArrayList<>(numbers.size());\n        for (float num : numbers) {\n            float normalized = (num - min) \/ (max - min);\n            rescaled.add(normalized);\n        }\n        \n        return rescaled;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Float> numbers = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f));\n        ArrayList<Float> normalizedNumbers = rescaleToUnit(numbers);\n        System.out.println(normalizedNumbers); \/\/ Output should be [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"},{"task_id":"HumanEval_22","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၸၢၵ်ႈၸႅၵ်ႉပၼ် သဵၼ်ႈမၢႆ မေႃႇရီႇ ၶွင်ၵႃႈၶၼ် javathon သေဢၼ်ဢၼ် တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉတဵမ်ၵူၺ်း    \/\/ >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)3.14f, (String)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    \/\/ >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Filter given array list of any javathon values only for integers\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                result.add((Long) value);\n            }\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, \"adasd\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l, \"c\", 3l, 3l, \"a\", \"b\")))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_23","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ်တၢင်းယၢဝ်း string ဢၼ်ပၼ်ဝႆႉၼၼ်ႉမႃး    \/\/ >>> stringLength((\"\"))\n    \/\/ (0l)\n    \/\/ >>> stringLength((\"abc\"))\n    \/\/ (3l)\n    public static long strlen(String string) {\n","canonical_solution":"\/\/ Check if the string is null\n        if (string == null) {\n            return 0L;\n        }\n        \/\/ Return the length of the string\n        return (long) string.length();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"},{"task_id":"HumanEval_24","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉ n ၼၼ်ႉႁႃ တူဝ်ၼပ်ႉ ဢၼ်ယႂ်ႇသုတ်း ဢၼ်ၸႅၵ်ႇ n ႁ်ႂႈပဵၼ်ဢၼ်ၽဵင်ႇပဵင်းၼၼ်ႉ၊ ဢၼ်လဵၵ်ႉလိူဝ် n ၼၼ်ႉ။    \/\/ >>> largestDivisor((15l))\n    \/\/ (5l)\n    public static long largestDivisor(long n) {\n","canonical_solution":"if (n <= 1) {\n            throw new IllegalArgumentException(\"n must be greater than 1\");\n        }\n        for (long i = n \/ 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; \/\/ This line is actually never reached if the function is used correctly\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"},{"task_id":"HumanEval_25","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ သၢႆမၢႆဢၼ်ၶဝ်ႈၼႆႉ တေလႆႈၽဵင်ႇပဵင်းၵၼ်တၢင်း တူဝ်ၵုၼ်းၶွင် တူဝ်ၼပ်ႉတင်းမူတ်း     \/ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈဢၼ်ၼႆႉ ထုၵ်ႇလီမီးဝႆႉၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တၢင်း တူဝ်ၼပ်ႉဢၼ်မၼ်းဢွၵ်ႇမႃး ၼႂ်းလွင်ႈတႅၵ်ႈတူဝ်ၼပ်ႉၼၼ်ႉယဝ်ႉ။    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်း တေႃႇထိုင် ဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉသေ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉ ၶိုၼ်းမႃး။    \/\/ >>> factorize((8l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n    \/\/ >>> factorize((25l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)))\n    \/\/ >>> factorize((70l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> factorize(long n) {\n        ArrayList<Long> factors = new ArrayList<>();\n        for (long factor = 2; factor * factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n \/= factor;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        \/\/ Example usage\n        System.out.println(factorize(8l));   \/\/ Output: [2, 2, 2]\n        System.out.println(factorize(25l));  \/\/ Output: [5, 5]\n        System.out.println(factorize(70l));  \/\/ Output: [2, 5, 7]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_26","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ႁႂ်ႈဝႆႉပိူင်ထၢၼ်ႈ ဢီႊလ်မေးႊၼႅတ်ႉ ဢၼ်ၵိုတ်းဝႆႉမိူၼ်ၵၼ်တင်း ဢၼ်သႂ်ႇဝႆႉၼၼ်ႉ    \/ တီႈၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် array array ၼၼ်ႉ ထွၼ်ပႅတ်ႈ တူဝ်ၼပ်ႉဢၼ်မီးမႃး ၼမ်လိူဝ်ၼိုင်ႈပွၵ်ႈ။    \/\/ >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l)))\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\n\npublic class Problem {\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n        \/\/ Create a HashSet to keep track of duplicates\n        HashSet<Long> seen = new HashSet<>();\n        \/\/ Create a list for results\n        ArrayList<Long> result = new ArrayList<>();\n        \/\/ Create a temporary HashSet to track elements that are counted more than once\n        HashSet<Long> duplicates = new HashSet<>();\n\n        for (Long number : numbers) {\n            if (seen.contains(number)) {\n                \/\/ If already seen and not added to duplicates, add to duplicates\n                duplicates.add(number);\n            } else {\n                \/\/ Mark this number as seen\n                seen.add(number);\n            }\n        }\n\n        for (Long number : numbers) {\n            \/\/ Add only those numbers to result which are not in duplicates\n            if (!duplicates.contains(number)) {\n                result.add(number);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> input = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 4L));\n        ArrayList<Long> output = removeDuplicates(input);\n        System.out.println(output);  \/\/ Output: [1, 3, 4]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_27","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ဢဝ်တူဝ်လိၵ်ႈတူဝ်လဵၵ်ႉသေ လႅၵ်ႈပဵၼ် တူဝ်လိၵ်ႈတူဝ်ယႂ်ႇ လႄႈ တူဝ်လိၵ်ႈတူဝ်ယႂ်ႇ လႅၵ်ႈပဵၼ်တူဝ်လဵၵ်ႉ။     \/\/ >>> flipCase((\"Hello\"))\n    \/\/ (\"hELLO\")\n    public static String flipCase(String string) {\n","canonical_solution":"StringBuilder flipped = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                flipped.append(Character.toUpperCase(c));\n            } else {\n                flipped.append(c);\n            }\n        }\n        return flipped.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"},{"task_id":"HumanEval_28","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Concatenate array list of strings into a single string  ၸၼ်ဢဝ် သဵၼ်ႈမၢႆ ထႅဝ်လိၵ်ႈ ဢၼ်ပႃး သဵၼ်ႈမၢႆ ထႅဝ်လိၵ်ႈ ဢၼ်လဵဝ်ၼၼ်ႉ    \/\/ >>> concatenate((new ArrayList<String>(Arrays.asList())))\n    \/\/ (\"\")\n    \/\/ >>> concatenate((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    \/\/ (\"abc\")\n    public static String concatenate(ArrayList<String> strings) {\n","canonical_solution":"return String.join(\"\", strings);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(concatenate((new ArrayList<String>(Arrays.asList()))).equals((\"\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals((\"xyz\")));\n    assert(concatenate((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\", (String)\"w\", (String)\"k\")))).equals((\"xyzwk\")));\n    }\n\n}\n"},{"task_id":"HumanEval_29","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၸၢၵ်ႈၸႅၵ်ႉသ်တႃႇ သဵၼ်ႈမၢႆ ထႅဝ်ထႅဝ်ဢၼ်ၶဝ်ႈၸူး တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆဢၼ်တႄႇလူၺ်ႈ တူဝ်ၸီႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉၵူၺ်း။     \/\/ >>> filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n","canonical_solution":"return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_30","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ ဢၼ်တဵမ်ထူၼ်ႈ တီႈၼႂ်းသဵၼ်ႈမၢႆ မေႃႇရီႇၼၼ်ႉၵူၺ်း။    \/\/ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l, (long)5l, (long)6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)6l)))\n    \/\/ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ Return only positive numbers in the array list.\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long> positives = new ArrayList<>();\n        for (Long number : l) {\n            if (number > 0) {\n                positives.add(number);\n            }\n        }\n        return positives;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_31","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ လႄႈ false ပေႃးဢမ်ႇၼၼ်။     \/\/ >>> isPrime((6l))\n    \/\/ (false)\n    \/\/ >>> isPrime((101l))\n    \/\/ (true)\n    \/\/ >>> isPrime((11l))\n    \/\/ (true)\n    \/\/ >>> isPrime((13441l))\n    \/\/ (true)\n    \/\/ >>> isPrime((61l))\n    \/\/ (true)\n    \/\/ >>> isPrime((4l))\n    \/\/ (false)\n    \/\/ >>> isPrime((1l))\n    \/\/ (false)\n    public static boolean isPrime(long n) {\n","canonical_solution":"if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_33","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တေႃႇ ၵႃႈၶၼ်ၶွင် index ဢၼ်ၵွင်ႉၵၢႆႇၵၼ်ၶွင် l၊ ၵူၺ်းၵႃႈ ၸႅၵ်ႇဝႆႉ။    \/ l' ၼႆႉမိူၼ်ၵၼ်တၢင်း l တီႈၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇၸႅၵ်ႇလႆႈ သၢမ်ဢၼ်ၼၼ်ႉသေ ၵႃႈၶၼ်မၼ်းတီႈတူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇလႆႈ သၢမ်ဢၼ်ၼၼ်ႉၵေႃႈ မိူၼ်ၵၼ်ယူႇယဝ်ႉ။    \/ ပိူင်ဢၼ်ၼႆႉ ဢဝ် array array list l သေ ၶိုၼ်းဢဝ် array array list l' ဢၼ်ၼႆႉမႃး    \/\/ >>> sortThird((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    \/\/ >>> sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n        \/\/ Create a new list to store elements at indices divisible by three\n        ArrayList<Long> extracted = new ArrayList<>();\n\n        \/\/ Extract the elements at indices divisible by three\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                extracted.add(l.get(i));\n            }\n        }\n\n        \/\/ Sort the extracted elements\n        Collections.sort(extracted);\n\n        \/\/ Create a new list to store the resultant elements\n        ArrayList<Long> result = new ArrayList<>(l);\n\n        \/\/ Replace the original elements at indices divisible by three with the sorted ones\n        int sortedIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, extracted.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));\n        ArrayList<Long> result1 = sortThird(list1);\n        System.out.println(result1);\n\n        ArrayList<Long> list2 = new ArrayList<Long>(Arrays.asList(5L, 6L, 3L, 4L, 8L, 9L, 2L));\n        ArrayList<Long> result2 = sortThird(list2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)5l)))));\n    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l, (long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_34","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ မႄးထတ်းပၼ် လွင်ႈထႅဝ်ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်ၸႅၵ်ႇဝႆႉၼႂ်း သဵၼ်ႈမၢႆ မေႃႇလီႇၵျူး    \/\/ >>> unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return sorted unique elements in an array array list\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n        return l.stream()\n                .distinct()\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> inputList = new ArrayList<>(Arrays.asList(5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L));\n        ArrayList<Long> uniqueSortedList = unique(inputList);\n        System.out.println(uniqueSortedList);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_35","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း တီႈၼႂ်းသဵၼ်ႈမၢႆ မေႃႇရီႇၼၼ်ႉမႃး    \/\/ >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (3l)\n    \/\/ >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    \/\/ (123l)\n    public static long maxElement(ArrayList<Long> l) {\n","canonical_solution":"public static long maxElement(ArrayList<Long> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        long max = Long.MIN_VALUE;\n        for (Long num : l) {\n            max = Math.max(max, num);\n        }\n        return max;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l)))) == (124l));\n    }\n\n}\n"},{"task_id":"HumanEval_36","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ 7 မႃးၶိုၼ်း ၼႂ်းတူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢေႇလိူဝ် n ဢၼ်ၸႅၵ်ႇလႆႈ 11 ဢမ်ႇၼၼ် 13 ၼၼ်ႉ။     \/\/ >>> fizzBuzz((50l))\n    \/\/ (0l)\n    \/\/ >>> fizzBuzz((78l))\n    \/\/ (2l)\n    \/\/ >>> fizzBuzz((79l))\n    \/\/ (3l)\n    public static long fizzBuzz(long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    public static long fizzBuzz(long n) {\n        long count = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private static int countSevens(long number) {\n        int count = 0;\n        while (number > 0) {\n            if (number % 10 == 7) {\n                count++;\n            }\n            number \/= 10;\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"},{"task_id":"HumanEval_37","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တေႃႇ ၵႃႈၶၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇပဵင်းၶွင် l၊ ၵူၺ်းၵႃႈ ၸႅၵ်ႇဝႆႉ။    \/l' ၼႆႉမိူၼ်ၵၼ်တၢင်း l တီႈတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ၊ ၵူၺ်းၵႃႈ ၵႃႈၶၼ်မၼ်းတီႈတူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉတႄႉ ပဵၼ်မိူၼ်ၵၼ်ယူႇယဝ်ႉ။    \/ ပိူင်ဢၼ်ၼႆႉ ဢဝ် array array list l သေ ၶိုၼ်းဢဝ် array array list l' ဢၼ်ၼႆႉမႃး    \/\/ >>> sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    \/\/ >>> sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)5l, (long)4l)))\n    public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n","canonical_solution":"public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n        ArrayList<Long> evenIndicesValues = new ArrayList<>();\n        \n        \/\/ Collect values from even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndicesValues.add(l.get(i));\n        }\n        \n        \/\/ Sort values collected from even indices\n        Collections.sort(evenIndicesValues);\n        \n        \/\/ Create an iterator for sorted even values\n        Iterator<Long> iterator = evenIndicesValues.iterator();\n        \n        \/\/ Form the result list by setting sorted even values and copying odd values\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                \/\/ Set sorted values at even indices\n                l.set(i, iterator.next());\n            }\n            \/\/ Values at odd indices remain the same\n        }\n        \n        return l;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)5l, (long)0l, (long)9l, (long)1l, (long)123l)))));\n    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)-12l, (long)4l, (long)23l, (long)2l, (long)3l, (long)11l, (long)12l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-12l, (long)8l, (long)3l, (long)4l, (long)5l, (long)2l, (long)12l, (long)11l, (long)23l, (long)-10l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_39","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ prime_fib ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ n-th ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉ Fibonacci လႄႈ မၼ်းပဵၼ် prime ၵေႃႈလႆႈ    \/\/ >>> primeFib((1l))\n    \/\/ (2l)\n    \/\/ >>> primeFib((2l))\n    \/\/ (3l)\n    \/\/ >>> primeFib((3l))\n    \/\/ (5l)\n    \/\/ >>> primeFib((4l))\n    \/\/ (13l)\n    \/\/ >>> primeFib((5l))\n    \/\/ (89l)\n    public static long primeFib(long n) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    \/\/ Function to check if a number is prime\n    public static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true; \/\/ 2 and 3 are prime\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (long i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    \/\/ Function to get the n-th Fibonacci number that is also prime\n    public static long primeFib(long n) {\n        long count = 0;\n        long a = 0;\n        long b = 1;\n        \n        while (true) {\n            long next = a + b;\n            a = b;\n            b = next;\n            \n            if (isPrime(next)) {\n                count++;\n                if (count == n) {\n                    return next;\n                }\n            }\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"},{"task_id":"HumanEval_40","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum to zero လႄႈ false ပေႃးဢမ်ႇၼၼ်    \/ မၼ်းတေၶိုၼ်းမွၵ်ႇ true ပေႃးဝႃႈမီးတူဝ်ၼပ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ် သၢမ်တူဝ် ၼႂ်းသဵၼ်ႈမၢႆ array ဢၼ်ဝႃႈ     \/triple_sum_to_zero ဢဝ် တူဝ်ၼပ်ႉတဵမ်တင်းၼမ် ဢၼ်ပႃးဝႆႉၼႂ်း array array list ၼၼ်ႉပဵၼ်ၶေႃႈၶဝ်ႈၸူးမၼ်းယဝ်ႉ။    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    \/\/ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1, right = n - 1;\n            while (left < right) {\n                long sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_41","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ဢၼ်ၼႆႉတေဢွၵ်ႇမႃးဝႃႈ လွင်ႈတုမ်ႉတိူဝ်ႉၵၼ်တင်းၼမ်ၼႆႉ ပဵၼ်ဢေႇႁိုဝ်။    \/ ၼႂ်းသဵၼ်ႈတၢင်းၶဝ် မိူၼ်ၼင်ႇဝႃႈ ၶဝ်ဢမ်ႇလႆႈတုမ်ႉတိူဝ်ႉၵၼ်။     ၵူၺ်းၵႃႈ လူတ်ႉၵႃးၼႆႉ ႁႅင်းယႂ်ႇလႄႈ ႁႅင်းၵႅၼ်ႇတႄႉတႄႉ ယွၼ်ႉၼၼ်လႄႈ ၶဝ်တိုၵ်ႉၶၢႆႉယူႇတိၵ်းတိၵ်းယဝ်ႉ။    \/ မိူဝ်ႈလူတ်ႉၶိူင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇသၢႆႉ ၽၢႆႇၶႂႃၼၼ်ႉ ႁေႃႈၽႃႇၺႃးလူတ်ႉၶိူင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇသၢႆႉ ၽၢႆႇၶႂႃၼၼ်ႉ။    ၵႃးၵူႈလမ်း ၶီႇတၢင်းဝႆးလဵဝ်ၵၼ် ၵႃးသွင်လမ်းၼႆႉ လၢတ်ႈဝႃႈ ၶီႇၵၼ်ၼႆယဝ်ႉ။    ၶိူင်ႈၵႃး သွင်ဢၼ်ၼႆႉ တႄႇမႃးတီႈ ဢၼ်ၵႆၵၼ်တၢင်း ၶိူင်ႈၵႃး သွင်ဢၼ်ၼၼ်ႉယဝ်ႉ။    \/n ၵႃးၼႆႉ ၶီႇၵႂႃႇၽၢႆႇသၢႆႉၽၢႆႇၶႂႃ၊ မိူဝ်ႈလဵဝ်ၵၼ်၊ ၵႃး n ဢၼ်ၼႆႉၵေႃႈ လႅၵ်ႈလၢႆႈဝႆႉယူႇယဝ်ႉ။    \/ ထၢင်ႇဝႃႈ သဵၼ်ႈတၢင်းၼႆႉ ပဵၼ်သဵၼ်ႈတၢင်းဢၼ်သုင်သုတ်း ဢၼ်သုင်သုတ်း ဢၼ်သိုဝ်ႈသိုဝ်ႈ။    public static long carRaceCollision(long n) {\n","canonical_solution":"public static long carRaceCollision(long n) {\n    \/\/ Each car moving left to right will collide with each car moving right to left\n    \/\/ as they are infinitely far apart initially and moving towards each other.\n    \/\/ Therefore, the total number of collisions will be n * n.\n    return n * n;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"},{"task_id":"HumanEval_42","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ မေႃႇရီႇ ဢၼ်ပႃး တူဝ်ၼပ်ႉ ဢၼ်တိူဝ်းလိူဝ်မႃး 1.    \/\/ >>> incrList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))\n    \/\/ >>> incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    \/\/ Return array list with elements incremented by 1.\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toCollection(ArrayList::new));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(incrList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l)))));\n    assert(incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)2l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)3l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_43","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum to zero လႄႈ false ပေႃးဢမ်ႇၼၼ်    \/ မၼ်းတေၶိုၼ်းမွၵ်ႇ true ပေႃးဝႃႈမီးတူဝ်ၼပ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ်သွင်ဢၼ် ၼႂ်းသဵၼ်ႈမၢႆ မေႃႇရီႇ ဢၼ်ဝႃႈ     \/ pairs_sum_to_zero ဢဝ် တူဝ်ၼပ်ႉတဵမ်တင်းၼမ် ဢၼ်ပႃးဝႆႉၼႂ်း array array list ၼၼ်ႉပဵၼ်ၶေႃႈၶဝ်ႈၸူးမၼ်းယဝ်ႉ။    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    \/\/ (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.HashSet;\n\nclass Problem {\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>();\n\n        for (Long num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        \n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)30l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)31l)))) == (true));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)30l)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)31l)))) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_44","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ၼပ်ႉငဝ်ႈမၼ်းၼႆႉ ဢေႇလိူဝ်သေ 10     \/ return string representation ဝၢႆးသေ လွင်ႈလႅၵ်ႈလၢႆႈၼၼ်ႉယဝ်ႉ    \/ လႅၵ်ႈလၢႆႈ တူဝ်ၼပ်ႉငဝ်ႈတႄႇ တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈ x ၼၼ်ႉပဵၼ် တူဝ်ၼပ်ႉငဝ်ႈတႄႇ။     \/\/ >>> changeBase((8l), (3l))\n    \/\/ (\"22\")\n    \/\/ >>> changeBase((8l), (2l))\n    \/\/ (\"1000\")\n    \/\/ >>> changeBase((7l), (2l))\n    \/\/ (\"111\")\n    public static String changeBase(long x, long base) {\n","canonical_solution":"StringBuilder result = new StringBuilder();\n    while (x > 0) {\n        result.append(x % base);\n        x \/= base;\n    }\n    return result.reverse().toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"},{"task_id":"HumanEval_45","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပေႃးဝႃႈႁဝ်းပၼ်တၢင်းယၢဝ်းၽၢႆႇၼိုင်ႈလႄႈ ၼႃႈလိၼ်ဢၼ်လႆႈၶိုၼ်းသုင်သုတ်း တွၼ်ႈတႃႇသၢမ်ၸဵင်ႇဢၼ်ၼိူင်ႈၼႆ    \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    public static float triangleArea(long a, long h) {\n","canonical_solution":"public class Problem {\n    \/\/ Given length of a side and height, return area for a triangle.\n    \/\/ >>> triangleArea((5l), (3l))\n    \/\/ (7.5f)\n    public static float triangleArea(long a, long h) {\n        return (a * h) \/ 2.0f;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(5l, 3l)); \/\/ Output: 7.5\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n"},{"task_id":"HumanEval_46","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶႅၼ်းတေႃႈ တႅမ်ႈပၼ် တူဝ်ဢိင် တႃႇတေၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉ n-th ၶွင် တူဝ်ၼပ်ႉ fib4 ၼၼ်ႉၵမ်းလဵဝ်။ ယႃႇပေၸႂ်ႉတိုဝ်း လွင်ႈၶိုၼ်းတႄႇ။     \/ fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)    \/ fib4(3) -> 0     \/ fib4(2) -> 2     \/ fib4(1) -> 0     \/ fib4(0) -> 0     \/ Fib4 ၼႆႉ မၼ်းမိူၼ်တင်း Fibbonacci sequence ဢၼ်မၵ်းမၼ်ႈဝႆႉ ၼင်ႇတႂ်ႈၼႆႉ    \/\/ >>> fib4((5l))\n    \/\/ (4l)\n    \/\/ >>> fib4((6l))\n    \/\/ (8l)\n    \/\/ >>> fib4((7l))\n    \/\/ (14l)\n    public static long fib4(long n) {\n","canonical_solution":"public static long fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"},{"task_id":"HumanEval_47","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် ထႅမ်းပလဵၵ်ႉဢၼ်မီးဝႆႉတီႈၼႂ်း သဵၼ်ႈမၢႆ မေႃႇရီႇၼၼ်ႉ ၶိုၼ်းမႃး။    \/\/ >>> median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (float)3l\n    \/\/ >>> median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))\n    \/\/ (15.0f)\n    public static float median(ArrayList<Long> l) {\n","canonical_solution":"Collections.sort(l);\n    int n = l.size();\n    if (n % 2 == 1) {\n        return l.get(n \/ 2);\n    } else {\n        return (float)(l.get(n \/ 2 - 1) + l.get(n \/ 2)) \/ 2;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"},{"task_id":"HumanEval_48","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၸႅတ်ႈတူၺ်းဝႃႈ သတၢႆႇဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် palindrome ႁႃႉ    \/\/ >>> isPalindrome((\"\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aba\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"aaaaa\"))\n    \/\/ (true)\n    \/\/ >>> isPalindrome((\"zbcd\"))\n    \/\/ (false)\n    public static boolean isPalindrome(String text) {\n","canonical_solution":"if (text == null) {\n            return false;\n        }\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_49","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းပၼ် 2^n modulo p (ဝႆႉၸႂ်ၼိူဝ် တူဝ်ၼပ်ႉ) ။    \/\/ >>> modp((3l), (5l))\n    \/\/ (3l)\n    \/\/ >>> modp((1101l), (101l))\n    \/\/ (2l)\n    \/\/ >>> modp((0l), (101l))\n    \/\/ (1l)\n    \/\/ >>> modp((3l), (11l))\n    \/\/ (8l)\n    \/\/ >>> modp((100l), (101l))\n    \/\/ (1l)\n    public static long modp(long n, long p) {\n","canonical_solution":"import java.math.BigInteger;\n\npublic class Problem {\n    \/\/ Return 2^n modulo p (be aware of numerics).\n    public static long modp(long n, long p) {\n        BigInteger base = BigInteger.valueOf(2);\n        BigInteger exponent = BigInteger.valueOf(n);\n        BigInteger modulo = BigInteger.valueOf(p);\n        \n        return base.modPow(exponent, modulo).longValue();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(modp(3L, 5L)); \/\/ Output: 3\n        System.out.println(modp(1101L, 101L)); \/\/ Output: 2\n        System.out.println(modp(0L, 101L)); \/\/ Output: 1\n        System.out.println(modp(3L, 11L)); \/\/ Output: 8\n        System.out.println(modp(100L, 101L)); \/\/ Output: 1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_51","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ remove_vowels ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ လႄႈ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ ဢၼ်ဢမ်ႇမီး တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ ၼၼ်ႉမႃး။    \/\/ >>> removeVowels((\"\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"abcdef\"))\n    \/\/ (\"bcdf\")\n    \/\/ >>> removeVowels((\"aaaaa\"))\n    \/\/ (\"\")\n    \/\/ >>> removeVowels((\"aaBAA\"))\n    \/\/ (\"B\")\n    \/\/ >>> removeVowels((\"zbcd\"))\n    \/\/ (\"zbcd\")\n    public static String removeVowels(String text) {\n","canonical_solution":"public static String removeVowels(String text) {\n        return text.replaceAll(\"(?i)[aeiou]\", \"\");\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"},{"task_id":"HumanEval_52","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ဝႃႈ တူဝ်ၼပ်ႉတင်းမူတ်း ၼႂ်းသဵၼ်ႈမၢႆ array l ၼႆႉ မီးတႂ်ႈ threshold t ၼၼ်ႉၼႆယဝ်ႉ။    \/\/ >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l))\n    \/\/ (true)\n    \/\/ >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l))\n    \/\/ (false)\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Return true if all numbers in the array list l are below threshold t.\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n        for (Long num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 2L, 4L, 10L)), 100L)); \/\/ true\n        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 20L, 4L, 10L)), 5L));  \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l)) == (false));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (21l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (22l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (11l)) == (true));\n    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_53","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ထႅမ်သႂ်ႇတူဝ်ၼပ်ႉသွင်တူဝ် x လႄႈ y     \/\/ >>> add((2l), (3l))\n    \/\/ (5l)\n    \/\/ >>> add((5l), (7l))\n    \/\/ (12l)\n    public static long add(long x, long y) {\n","canonical_solution":"return x + y;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(2L, 3L)); \/\/ Outputs: 5\n        System.out.println(add(5L, 7L)); \/\/ Outputs: 12\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_54","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူၺ်းတူၺ်းဝႃႈ ၶေႃႈၵႂၢမ်းသွင်ၶေႃႈၼႆႉ မီးတူဝ်လိၵ်ႈမိူၼ်ၵၼ်ႁိုဝ်ၼႆ။     \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    \/\/ (false)\n    \/\/ >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    \/\/ (false)\n    public static boolean sameChars(String s0, String s1) {\n","canonical_solution":"public static boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = s0.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());\n        Set<Character> set1 = s1.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); \/\/ true\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); \/\/ true\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); \/\/ true\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); \/\/ false\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); \/\/ false\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_55","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ Fibonacci n-th ၼၼ်ႉမႃး။     \/\/ >>> fib((10l))\n    \/\/ (55l)\n    \/\/ >>> fib((1l))\n    \/\/ (1l)\n    \/\/ >>> fib((8l))\n    \/\/ (21l)\n    public static long fib(long n) {\n","canonical_solution":"if (n <= 1) {\n            return n;\n        }\n        long a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"},{"task_id":"HumanEval_56","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ return true သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပိုတ်ႇဝႆႉၼၼ်ႉ မီးဝႆႉ သဵၼ်ႈမၢႆဢၼ်ဢိုတ်းဝႆႉဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/ brackets ၼႆႉပဵၼ် သဵၼ်ႈမၢႆတူဝ်လိၵ်ႈ \"<\" လႄႈ \">\" ယဝ်ႉ။    \/\/ >>> correctBracketing((\"<\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"<>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"<<><>>\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"><<>\"))\n    \/\/ (false)\n    public static boolean correctBracketing(String brackets) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n\n    public static boolean correctBracketing(String brackets) {\n        int balance = 0;\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                balance++;\n            } else if (ch == '>') {\n                balance--;\n                if (balance < 0) {\n                    return false;\n                }\n            }\n        }\n        return balance == 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_57","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Return true is array list elements are monotonically increasing or decreasing.  ဢၼ်ၶိုၼ်းမႄးပၼ် ပဵၼ်လွင်ႈဢၼ်ၸႅတ်ႈၸၢင်ႇတႄႉတႄႉ။    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))))\n    \/\/ (true)\n    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n    \/\/ (false)\n    \/\/ >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n    \/\/ (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    \/\/ Return true if array list elements are monotonically increasing or decreasing.\n    public static boolean monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return true;\n        }\n        \n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 20L));\n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 20L, 4L, 10L));\n        ArrayList<Long> list3 = new ArrayList<>(Arrays.asList(4L, 1L, 0L, -10L));\n\n        System.out.println(monotonic(list1)); \/\/ true\n        System.out.println(monotonic(list2)); \/\/ false\n        System.out.println(monotonic(list3)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_58","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် လွင်ႈၸႅၵ်ႇၽႄ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်လႆႈၸႅၵ်ႇဝႆႉ တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ မေႃႇလီႇယၢမ်ႇ သွင်ဢၼ်ၼၼ်ႉ။    \/\/ >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    \/\/ >>> common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n","canonical_solution":"import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    \/\/ Return sorted unique common elements for two array lists.\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        \n        \/\/ Retain only the elements in set1 that are contained in set2\n        set1.retainAll(set2);\n        \n        \/\/ Convert to list and sort\n        ArrayList<Long> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_59","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉ prime ၶွင် n ၼၼ်ႉမႃး    \/\/ >>> largestPrimeFactor((13195l))\n    \/\/ (29l)\n    \/\/ >>> largestPrimeFactor((2048l))\n    \/\/ (2l)\n    public static long largestPrimeFactor(long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long largestPrimeFactor(long n) {\n        long largestFactor = 1;\n        long factor = 2;\n        \n        \/\/ Test for number of 2s that divide n\n        while (n % factor == 0) {\n            largestFactor = factor;\n            n \/= factor;\n        }\n        \n        \/\/ n must be odd at this point, so a skip of 2 is used (i.e., 3, 5, 7, 9, ...)\n        factor = 3;\n        while (factor * factor <= n) {\n            while (n % factor == 0) {\n                largestFactor = factor;\n                n \/= factor;\n            }\n            factor += 2;\n        }\n        \n        \/\/ This condition checks if n is a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n        \n        return largestFactor;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"},{"task_id":"HumanEval_60","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ sum_to_n ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ၵဵပ်းတူဝ်ၼပ်ႉ 1 တေႃႇထိုင် n ၼၼ်ႉ။     \/\/ >>> sumToN((30l))\n    \/\/ (465l)\n    \/\/ >>> sumToN((100l))\n    \/\/ (5050l)\n    \/\/ >>> sumToN((5l))\n    \/\/ (15l)\n    \/\/ >>> sumToN((10l))\n    \/\/ (55l)\n    \/\/ >>> sumToN((1l))\n    \/\/ (1l)\n    public static long sumToN(long n) {\n","canonical_solution":"public static long sumToN(long n) {\n    return n * (n + 1) \/ 2;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n"},{"task_id":"HumanEval_61","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ return true သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပိုတ်ႇဝႆႉၼၼ်ႉ မီးဝႆႉ သဵၼ်ႈမၢႆဢၼ်ဢိုတ်းဝႆႉဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/ brackets ၼႆႉပဵၼ် သဵၼ်ႈမၢႆတူဝ်လိၵ်ႈ \"(\" လႄႈ \"\") ၼၼ်ႉယဝ်ႉ။    \/\/ >>> correctBracketing((\"(\"))\n    \/\/ (false)\n    \/\/ >>> correctBracketing((\"()\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\"(()())\"))\n    \/\/ (true)\n    \/\/ >>> correctBracketing((\")(()\"))\n    \/\/ (false)\n    public static boolean correctBracketing(String brackets) {\n","canonical_solution":"public static boolean correctBracketing(String brackets) {\n    int balance = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '(') {\n            balance++;\n        } else if (brackets.charAt(i) == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_62","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶိုၼ်းဢဝ် တူဝ်ဢိင် ဢၼ်လုၵ်ႉတီႈ polynomial ဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉမႃး။     \/ xs[0] + xs[1] * x + xs[2] * x^2 + ....     \/xs ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉၵုၼ်းၶွင် polynomial ၼၼ်ႉယဝ်ႉ။    \/\/ >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))\n    \/\/ >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    \/\/ xs represent coefficients of a polynomial.\n    \/\/ xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    \/\/ Return derivative of this polynomial in the same form.\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_63","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၶႅၼ်းတေႃႈ တႅမ်ႈပၼ် တူဝ်ဢိင် တႃႇတေၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉ n-th ၶွင် တူဝ်ၼပ်ႉ fibfib ဢၼ်ၸွမ်းၵၼ်ဝႆႉၼၼ်ႉ။     \/ fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ။    \/ fib fib (((2) == 1     \/ fib fib ((1) == 0     \/ fib fib ((0) == 0     \/ FibFib တူဝ်ၼပ်ႉဢၼ်ၸွမ်းၵၼ်ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်တၢင်း Fibbonacci sequence ဢၼ်မၵ်းမၼ်ႈဝႆႉမိူၼ်ၼင်ႇတႂ်ႈၼႆႉ:     \/\/ >>> fibfib((1l))\n    \/\/ (0l)\n    \/\/ >>> fibfib((5l))\n    \/\/ (4l)\n    \/\/ >>> fibfib((8l))\n    \/\/ (24l)\n    public static long fibfib(long n) {\n","canonical_solution":"public static long fibfib(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        \n        long[] fibfibSequence = new long[(int) n + 1];\n        fibfibSequence[0] = 0;\n        fibfibSequence[1] = 0;\n        fibfibSequence[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibSequence[i] = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];\n        }\n        \n        return fibfibSequence[(int) n];\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"},{"task_id":"HumanEval_64","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ vowel ၊ ၵူၺ်းၵႃႈ မၼ်းပဵၼ်တီႈသုတ်းၶေႃႈၵႂၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉၵူၺ်း။     \/ တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈ ၼႂ်းလွင်ႈၼႆႉပဵၼ် 'a', 'e', 'i', 'o', 'u'။ တီႈၼႆႈ 'y' ၵေႃႈပဵၼ် a     \/ a word ဢၼ်ဝႃႈၼၼ်ႉ ပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ၶဝ်ႈမႃး လႄႈ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ ႁိၵ်ႈသဵင် ၼႂ်း string ၼၼ်ႉယူႇယဝ်ႉ။    \/ တႅမ်ႈပၼ် တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈတူဝ်ထႅဝ် ဢၼ်ဢဝ် တူဝ်လိၵ်ႈတူဝ်ၼပ်ႉ သဵင်ဢွၵ်ႇ     \/\/ >>> vowelsCount((\"abcde\"))\n    \/\/ (2l)\n    \/\/ >>> vowelsCount((\"ACEDY\"))\n    \/\/ (3l)\n    public static long vowelsCount(String s) {\n","canonical_solution":"if (s == null || s.isEmpty()) {\n            return 0L;\n        }\n\n        s = s.toLowerCase();\n        long count = 0L;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (\"aeiou\".indexOf(c) >= 0) {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_65","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ သင် shift > တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉဢၼ်ၶိုၼ်းမႃးၼၼ်ႉ ၶိုၼ်းပိၼ်ႇဝၢႆႇၵႂႃႇ။    \/ လႄႈ ၶိုၼ်းဢဝ် ၶေႃႈတွပ်ႇမၼ်းပဵၼ် သတၢႆႇ (string) ၼၼ်ႉၶႃႈ။    \/ လွၵ်းဝူင်းၶၢႆႉတူဝ်ၼပ်ႉတူဝ်ၼပ်ႉတဵမ် x၊ ၶၢႆႉတူဝ်ၼပ်ႉၵႂႃႇၽၢႆႇၶႂႃ လူၺ်ႈလွင်ႈၶၢႆႉ။    \/\/ >>> circularShift((12l), (1l))\n    \/\/ (\"21\")\n    \/\/ >>> circularShift((12l), (2l))\n    \/\/ (\"12\")\n    public static String circularShift(long x, long shift) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static String circularShift(long x, long shift) {\n        String numStr = Long.toString(x);\n        int len = numStr.length();\n\n        \/\/ If shift is greater than or equal to the number of digits, reverse the digits.\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n\n        \/\/ Otherwise, perform a circular shift.\n        int actualShift = (int)(shift % len);\n        StringBuilder shifted = new StringBuilder();\n        shifted.append(numStr.substring(len - actualShift));\n        shifted.append(numStr.substring(0, len - actualShift));\n\n        return shifted.toString();\n    }\n\n    public static void main(String[] args) {\n        \/\/ Test cases\n        System.out.println(circularShift(12L, 1L));  \/\/ Output: \"21\"\n        System.out.println(circularShift(12L, 2L));  \/\/ Output: \"12\"\n        System.out.println(circularShift(12345L, 3L));  \/\/ Output: \"34512\"\n        System.out.println(circularShift(12345L, 5L));  \/\/ Output: \"54321\"\n        System.out.println(circularShift(12345L, 7L));  \/\/ Output: \"54321\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"},{"task_id":"HumanEval_66","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ASCII မၢႆလပ်ႉ    \/ တႅမ်ႈပၼ် function ဢၼ်ဢဝ် string ပဵၼ် input သေ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၽၢႆႇၼိူဝ်ၼၼ်ႉၵူၺ်း'     \/ ၵၢၼ်ငၢၼ်း     \/\/ >>> digitSum((\"\"))\n    \/\/ (0l)\n    \/\/ >>> digitSum((\"abAB\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"abcCd\"))\n    \/\/ (67l)\n    \/\/ >>> digitSum((\"helloE\"))\n    \/\/ (69l)\n    \/\/ >>> digitSum((\"woArBld\"))\n    \/\/ (131l)\n    \/\/ >>> digitSum((\"aAaaaXa\"))\n    \/\/ (153l)\n    public static long digitSum(String s) {\n","canonical_solution":"public static long digitSum(String s) {\n        long sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (long) c;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"},{"task_id":"HumanEval_67","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တွၼ်ႈတႃႇ examble:     \/ ၼႂ်းၵၢတ်ႇၼၼ်ႉ ၶိုၼ်းပၼ် မၢၵ်ႇမႆႉ မၢၵ်ႇဢူမ်ၼႂ်းၵၢတ်ႇၼၼ်ႉ ၼပ်ႉဢၢၼ်ႇ။    \/ မၢၵ်ႇဢႅပ်ႇပလီႇ လႄႈ မၢၵ်ႇဢႅပ်ႇပလီႇ လႄႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တၢင်တူဝ် မၢၵ်ႇဢႅပ်ႇပလီႇ တင်းမူတ်း     \/ ယိူဝ်ႈ၊ မၢၵ်ႇၶိူဝ်သူမ်ႈ၊ မၢၵ်ႇၽႃႈ ၸိူဝ်းၼႆႉ။ ပေႃးႁဝ်းဢဝ် string ဢၼ်တႅၼ်းတၢင် ႁူဝ်ၼပ်ႉ     \/ ဢၼ်လႆႈၸႅၵ်ႇၽႄဝႆႉၼႂ်း ၵၢတ်ႇၼမ်ႉ ဢၼ်ၵၢတ်ႇၼမ်ႉၼႆႉ ပႃးဝႆႉ     ၼႂ်းၵၢၼ်ၼႆႉ ၸဝ်ႈၵဝ်ႇတေလႆႈပၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင် မၢၵ်ႇဢူမ်လႄႈ မၢၵ်ႇၵႅမ်ႈၶွင်ႇ     \/\/ >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    \/\/ (8l)\n    \/\/ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    \/\/ (2l)\n    \/\/ >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    \/\/ (95l)\n    \/\/ >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    \/\/ (19l)\n    public static long fruitDistribution(String s, long n) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long fruitDistribution(String s, long n) {\n        String[] parts = s.split(\" \");\n        long apples = Long.parseLong(parts[0]);\n        long oranges = Long.parseLong(parts[3]);\n        long mangoes = n - (apples + oranges);\n        return mangoes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"},{"task_id":"HumanEval_68","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ 1:     \/ သင်ဝႃႈ ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ဢမ်ႇၼၼ် သဵၼ်ႈမၢႆ array array ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈယူႇၼႆ ၶိုၼ်းဢဝ် [] ၼၼ်ႉမႃး။    \/ တီႈဢၼ်လႆႈဢဝ်ဝႆႉၼၼ်ႉ ထုၵ်ႇလီၶိုၼ်းဢဝ်မႃးတီႈၼႂ်း သဵၼ်ႈမၢႆ array array ဢၼ်ၼိုင်ႈ၊ [smallest_value၊ its index]၊     \/ သင်ဝႃႈ လႆႈႁၼ် ၼေႃႇတႅၼ်းတင်းၼမ် ဢၼ်မီး ၵႃႈၶၼ်ဢၼ်လဵၵ်ႉသုတ်းဢၼ်မိူၼ်ၵၼ်ၼႆ ၶိုၼ်းဢဝ် ၼေႃႇတႅၼ်း ဢၼ်မီး ထႅဝ်ဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉ လွၵ်ႈမႃးၶိုၼ်း။    \/ တီႈဢၼ်ႁဝ်းဢဝ်ၵႂႃႇၼၼ်ႉ တေလႆႈပဵၼ် တီႈဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉယဝ်ႉ။    \/ ၼႃႈၵၢၼ်သူၼႆႉ ပဵၼ်တႃႇတေဢဝ် ၼူၵ်ႉဢၼ်ၼိုင်ႈသေ ၶိုၼ်းဢဝ်မၼ်းမႃးၶိုၼ်း။    \/ \"ပၼ်ဝႆႉ သဵၼ်ႈမၢႆ array array ဢၼ်တၢင်တူဝ် ၵိင်ႇၽႄၶွင် တူၼ်ႈမႆႉ ဢၼ်မီး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇမီး တူဝ်ထွၼ်ၼၼ်ႉယဝ်ႉ     \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 2:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    \/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \/\/ Example 3:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ Example 4:\n    \/\/ >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))\n    \/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n    \/\/ so we will choose the first zero, which has the smallest index.\n    \/\/ Constraints:\n    \/\/ * 1 <= nodes.length <= 10000\n    \/\/ * 0 <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n","canonical_solution":"public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n        int index = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEvenValue) {\n                smallestEvenValue = value;\n                index = i;\n            }\n        }\n\n        if (index != -1) {\n            result.add(smallestEvenValue);\n            result.add((long) index);\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_69","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ သင်ၸိူဝ်ႉဝႃႈ ဢမ်ႇမီးဝႆႉ ၵႃႈၶၼ်ဢၼ်ၼၼ်ႉၼႆၸိုင် ၶိုၼ်းဢဝ် - 1    \/ လွင်ႈၵႆႉပဵၼ်ၶွင် တူဝ်ၼပ်ႉတဵမ်ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်မၼ်းဢွၵ်ႇမႃးၼႂ်း သဵၼ်ႈမၢႆ မေႃႇရီႇၼၼ်ႉယဝ်ႉ။    \/ သုၼ် လႄႈ မီးလွင်ႈၵႆႉၼမ်လိူဝ် ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တၢင်းၵႃႈၶၼ် တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉႁင်းမၼ်းယဝ်ႉ။    \/ ပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတီႈသုတ်းၼၼ်ႉ။ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ယႂ်ႇသေပိူၼ်ႈ ဢၼ်ယႂ်ႇလိူဝ်သေ     \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    \/\/ (2l)\n    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    \/\/ (3l)\n    \/\/ >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l, (long)4l))))\n    \/\/ (-1l)\n    public static long search(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\n\nclass Problem {\n    public static long search(ArrayList<Long> lst) {\n        HashMap<Long, Integer> frequencyMap = new HashMap<>();\n\n        \/\/ Count frequencies of each number\n        for (Long num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        long result = -1;\n        \n        \/\/ Find the greatest integer that fulfills the condition\n        for (Long num : frequencyMap.keySet()) {\n            int frequency = frequencyMap.get(num);\n            if (frequency >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(4L, 1L, 2L, 2L, 3L, 1L)))); \/\/ 2L\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L)))); \/\/ 3L\n        System.out.println(search(new ArrayList<Long>(Arrays.asList(5L, 5L, 4L, 4L, 4L)))); \/\/ -1L\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l, (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l, (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l, (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l, (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l, (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l, (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) == (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l, (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l, (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l, (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l, (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l, (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l, (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l, (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l, (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l, (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l, (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l, (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l, (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l, (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l, (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l, (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l, (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l, (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l, (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l, (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l)))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_70","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ယဝ်ႉၵေႃႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵိုတ်းဝႆႉၼၼ်ႉ ၼမ်သုတ်း၊ ယဝ်ႉၵေႃႈ တီႈဢေႇသုတ်း လႄႈ တၢင်ႇၸိူဝ်း။    \/ လွင်ႈၸႅၵ်ႇၽႄဢၼ်ဢမ်ႇမိူၼ်ၵၼ်၊ ပဵၼ်မိူဝ်ႈဢၼ်ႁဝ်းတႄႇဢဝ် ၵႃႈၶၼ်ဢၼ်ဢေႇသုတ်း၊     \/ ပေႃးပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် array list ၼႆ ၶိုၼ်းဢဝ် array list ၼၼ်ႉမႃးၸွမ်းၼင်ႇပိူင်မၼ်းၼၼ်ႉ။    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    \/\/ >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        boolean flag = true; \/\/ true indicates minimum, false indicates maximum\n        \n        while (left <= right) {\n            if (flag) {\n                result.add(lst.get(left));\n                left++;\n            } else {\n                result.add(lst.get(right));\n                right--;\n            }\n            flag = !flag;\n        }\n        \n        return result;\n    }\n    \n    \/\/ Main method for test purposes\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        System.out.println(strangeSortList(list1)); \/\/ Outputs: [1, 4, 2, 3]\n        \n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(5L, 5L, 5L, 5L));\n        System.out.println(strangeSortList(list2)); \/\/ Outputs: [5, 5, 5, 5]\n        \n        ArrayList<Long> list3 = new ArrayList<>();\n        System.out.println(strangeSortList(list3)); \/\/ Outputs: []\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_71","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ လိူဝ်သေၽၢႆႇသၢမ်ၽၢႆႇ။    \/ သၢမ်ၽၢႆႇၼႆႉ ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်ထုၵ်ႇမႅၼ်ႈယူႇ ပေႃးဝႃႈ သွင်ၽၢႆႇဢၼ်လႂ်ၼၼ်ႉ ႁူမ်ႈၵၼ်ၼမ်လိူဝ်သေၼၼ်ႉယဝ်ႉ    \/ ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းဢဝ် -1     \/ သၢမ်ၸဵင်ႇၼႆႉ ပေႃးဝႃႈ သၢမ်ၽၢႆႇမၼ်း ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မၢၼ်ႇမႅၼ်ႈၼႆ မၼ်းတေလႆႈဢဝ် သွင်ၸဵင်ႇသေ မၵ်းမၼ်ႈယဝ်ႉ။    \/ ပေႃးႁဝ်းတူၺ်း တၢင်းယၢဝ်းသၢမ်ၽၢႆႇၶွင် သၢမ်ၸဵင်ႇၼႆ ၶိုၼ်းဢဝ် ၼႃႈလိၼ်ၶွင်  ၼၼ်ႉမႃး    \/\/ >>> triangleArea((3l), (4l), (5l))\n    \/\/ (6.0f)\n    \/\/ >>> triangleArea((1l), (2l), (10l))\n    \/\/ (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n","canonical_solution":"public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) \/ 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) \/ 100.0f;\n        } else {\n            return -1f;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); \/\/ Output: 6.0\n        System.out.println(triangleArea(1, 2, 10)); \/\/ Output: -1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == (float)-1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == (float)-1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == (float)-1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == (float)-1l);\n    }\n\n}\n"},{"task_id":"HumanEval_72","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     ၶူဝ်းၶွင် q ၼႆႉ ပေႃးမၼ်းၽဵင်ႇပဵင်း (မၼ်းပဵၼ် palindromic array list) လႄႈ တူဝ်ၼပ်ႉၶွင်မၼ်းၼၼ်ႉ ပေႃးဢေႇလိူဝ် ဢမ်ႇၼၼ် ပေႃးၽဵင်ႇပဵင်းၵၼ်တၢင်း တၢင်းၼၵ်းဢၼ်တိူဝ်းလိူဝ်သုတ်း w ၼၼ်ႉ မၼ်းတေပၢႆႈၵႂႃႇယူႇယဝ်ႉ။    \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်တေၶိုၼ်းပၼ် true သင်ၸိူဝ်ႉဝႃႈ ၶူဝ်းၶွင် q တေပၢႆႈၵႂႃႇလႄႈ false သင်ဢမ်ႇၼၼ်။     \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l))\n    \/\/ (false)\n    \/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))\n    \/\/ (false)\n    \/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))\n    \/\/ (true)\n    \/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \/\/ >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l))\n    \/\/ (true)\n    \/\/ # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n        if (!isPalindromic(q)) {\n            return false;\n        }\n        long sum = 0;\n        for (Long num : q) {\n            sum += num;\n        }\n        return sum <= w;\n    }\n\n    private static boolean isPalindromic(ArrayList<Long> q) {\n        int size = q.size();\n        for (int i = 0; i < size \/ 2; i++) {\n            if (!q.get(i).equals(q.get(size - i - 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(1L, 2L)), 5L)); \/\/ false\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 1L)); \/\/ false\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 9L)); \/\/ true\n        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L)), 5L)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))), (5l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_73","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ ၼႆႉတေလႆႈႁၼ်မိူၼ်ၵၼ်တင်းၽၢႆႇလင်လႄႈ ၽၢႆႇၼႃႈ။ ၼႂ်းလွင်ႈလႅၵ်ႈလၢႆႈဢၼ်လဵဝ်ၼၼ်ႉ ၸဝ်ႈၵဝ်ႇတေလႅၵ်ႈလၢႆႈလႆႈ ဢီႇလႅမ်ႇတိူဝ်ႇဢၼ်ၼိူင်ႈ ႁႂ်ႈပဵၼ် ဢီႇလႅမ်ႇတိူဝ်ႇတၢင်ႇဢၼ်ၼၼ်ႉယဝ်ႉ။    \/ တေလႆႈလႅၵ်ႈလၢႆႈ တွၼ်ႈတႃႇတေႁဵတ်းႁႂ်ႈ သဵၼ်ႈမၢႆ array array ပဵၼ် palindromic။ သဵၼ်ႈမၢႆ array array palindromic ၼႆႉပဵၼ် သဵၼ်ႈမၢႆ array array ဢၼ်ၼိူင်ႈ ဢၼ်     \/ ပေႃးပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်တင်းၼမ်ၼႆၸိုင် ၶူၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်ဢေႇသုတ်း ဢၼ်တေပဵၼ်     \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n    \/\/ (4l)\n    \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    \/\/ (1l)\n    \/\/ >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l))))\n    \/\/ (0l)\n    public static long smallestChange(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given an array list arr of integers, finds the minimum number of changes\n    \/\/ to make the list palindromic.\n    public static long smallestChange(ArrayList<Long> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        long changes = 0;\n        \n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n        return changes;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L)))); \/\/ 4\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 4L, 3L, 2L, 2L)))); \/\/ 1\n        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 2L, 1L)))); \/\/ 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_74","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ သင်ဝႃႈ သဵၼ်ႈမၢႆ မေႃႇရီႇသွင်ဢၼ်ၼႆႉ မီးတူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼႆၸိုင် ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ မေႃႇရီႇဢွၼ်တၢင်းသုတ်းၼၼ်ႉ ၶိုၼ်းဢဝ်မႃး။    \/ တူဝ်ၼပ်ႉဢၼ်မီးတီႈၼႂ်း သဵၼ်ႈမၢႆ မေႃႇရီႇၼၼ်ႉ ဢေႇလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်မီးတီႈ မေႃႇရီႇတၢင်ႇဢၼ်ၼၼ်ႉယဝ်ႉ။    \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉဢဝ် သွင်တူဝ်လိၵ်ႈ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆၼၼ်ႉ    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList())))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))\n    \/\/ >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"4\")))\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n","canonical_solution":"public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n        int charCount1 = lst1.stream().mapToInt(String::length).sum();\n        int charCount2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (charCount1 < charCount2) {\n            return lst1;\n        } else if (charCount2 < charCount1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_75","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ ပေႃးႁဝ်းႁူႉဝႃႈ (a) ၼႆႉဢေႇလိူဝ် 100 ၼႆၸိုင်    \/ လႄႈ ဢၼ်ၽိတ်းပိူင်ႈ။    \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်တေၶိုၼ်းပၼ် true သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၵုၼ်း prime 3 တူဝ်ၼႆယဝ်ႉ။    \/\/ >>> isMultiplyPrime((30l))\n    \/\/ (true)\n    \/\/ 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long a) {\n","canonical_solution":"if (a >= 2 && a < 8) return false;\n\n        List<Integer> primes = sieveOfEratosthenes(100);\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    long product = (long) primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true;\n                    }\n                    if (product > a) {\n                        break;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private static List<Integer> sieveOfEratosthenes(int limit) {\n        boolean[] isPrime = new boolean[limit + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n        for (int i = 2; i * i <= limit; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= limit; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= limit; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_76","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ x ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈဢၼ်ပဵၼ် တူဝ်ၼမ် ႁင်း n ပေႃး n**int=x ၼႆယူႇယဝ်ႉ။    \/ ႁႅင်းၶွင် n လႄႈ false ၼႂ်းလွင်ႈတၢင်းတၢင်ႇၸိူဝ်း။     \/ ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတႅမ်ႈ function ဢၼ်ၶိုၼ်းမႃး true သင်ဝႃႈ တူဝ်ၼပ်ႉ x ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ငၢႆႈ     \/\/ >>> isSimplePower((1l), (4l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((2l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((8l), (2l))\n    \/\/ (true)\n    \/\/ >>> isSimplePower((3l), (2l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((3l), (1l))\n    \/\/ (false)\n    \/\/ >>> isSimplePower((5l), (3l))\n    \/\/ (false)\n    public static boolean isSimplePower(long x, long n) {\n","canonical_solution":"public static boolean isSimplePower(long x, long n) {\n        if (x < 1 || n < 1) {\n            return false;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        long power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isSimplePower(1l, 4l)); \/\/ true\n        System.out.println(isSimplePower(2l, 2l)); \/\/ true\n        System.out.println(isSimplePower(8l, 2l)); \/\/ true\n        System.out.println(isSimplePower(3l, 2l)); \/\/ false\n        System.out.println(isSimplePower(3l, 1l)); \/\/ false\n        System.out.println(isSimplePower(5l, 3l)); \/\/ false\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_77","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ ၶေႃႈၶဝ်ႈၼႆႉ မၢၼ်ႇမႅၼ်ႈယူႇတႃႇသေႇ။     \/ သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉတဵမ်ဢၼ်ၼိူင်ႈၼၼ်ႉယဝ်ႉ။    \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ် a သေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ true    \/\/ >>> iscube((1l))\n    \/\/ (true)\n    \/\/ >>> iscube((2l))\n    \/\/ (false)\n    \/\/ >>> iscube((-1l))\n    \/\/ (true)\n    \/\/ >>> iscube((64l))\n    \/\/ (true)\n    \/\/ >>> iscube((0l))\n    \/\/ (true)\n    \/\/ >>> iscube((180l))\n    \/\/ (false)\n    public static boolean iscube(long a) {\n","canonical_solution":"public static boolean iscube(long a) {\n        if (a < 0) {\n            a = -a;\n        }\n        long cubeRoot = Math.round(Math.cbrt(a));\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_78","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     တူဝ်လိၵ်ႈ A,B,C,D,E,F ၼႆႉ ပဵၼ်တူဝ်လိၵ်ႈယႂ်ႇသေပိူၼ်ႈယဝ်ႉ။    \/ မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ ၶေႃႈၶဝ်ႈၼႆႉ မၢၼ်ႇမႅၼ်ႈယူႇတႃႇသေႇ ဢမ်ႇၼၼ် ပဵၼ် string ဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉယူႇ၊     \/ B (= သဵၼ်ႈမၢႆသိပ်းလပ်း 11), D (= သဵၼ်ႈမၢႆသိပ်းလပ်း 13)     \/ ၵွပ်ႈၼၼ်လႄႈ တေလႆႈမၵ်းမၼ်ႈ တူဝ်ၼပ်ႉဢၼ်မီးယူႇတီႈတႂ်ႈၼႆႉ 2, 3, 5, 7,     တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉၼႆႉပဵၼ် 2, 3, 5, 7, 11, 13, 17,...    \/ တူဝ်ၼပ်ႉသႅၼ်မၼ်းပဵၼ် 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.    \/ ဢၼ်ယႂ်ႇလိူဝ်သေ 1 ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉသၽႃႇဝ ဢၼ်လဵၵ်ႉလိူဝ်သေသွင်တူဝ်) ။    \/ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ (တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉသၽႃႇဝ     \/ တူဝ်ၼပ်ႉ hexadecimal ဢၼ်ၼိူင်ႈ မိူၼ်ၼင်ႇ သဵၼ်ႈသၢႆမၢႆ လႄႈ မၢႆၼပ်ႉ တူဝ်ၼပ်ႉ hexadecimal     \/ သူထုၵ်ႇလႆႈတႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်ႁပ်ႉဢဝ်     \/\/ >>> hexKey((\"AB\"))\n    \/\/ (1l)\n    \/\/ >>> hexKey((\"1077E\"))\n    \/\/ (2l)\n    \/\/ >>> hexKey((\"ABED1A33\"))\n    \/\/ (4l)\n    \/\/ >>> hexKey((\"123456789ABCDEF0\"))\n    \/\/ (6l)\n    \/\/ >>> hexKey((\"2020\"))\n    \/\/ (2l)\n    public static long hexKey(String num) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static long hexKey(String num) {\n        \/\/ Set of hexadecimal \"digits\" that are prime numbers.\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        \/\/ Count prime digits in the hexadecimal number.\n        long count = 0;\n        for (char ch : num.toCharArray()) {\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \/\/ You can include this main method for testing the function\n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\")); \/\/ Output: 1\n        System.out.println(hexKey(\"1077E\")); \/\/ Output: 2\n        System.out.println(hexKey(\"ABED1A33\")); \/\/ Output: 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); \/\/ Output: 6\n        System.out.println(hexKey(\"2020\")); \/\/ Output: 2\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_79","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ တူဝ်လိၵ်ႈဢၼ်လိူဝ်ၼႆႉ ပဵၼ်တႃႇတေၸွႆႈထႅမ် ပိူင်ၾၢင်မၼ်းၼၼ်ႉယဝ်ႉ။    \/ တေမီးတူဝ်လိၵ်ႈထႅင်ႈသွင်တူဝ် 'db' တီႈတႄႇလႄႈ တီႈသုတ်းၶွင် string ၼၼ်ႉယူႇယဝ်ႉ။    တူဝ်လိၵ်ႈၵူႈတူဝ် ၼႂ်းသတၢႆႇၼႆႉ တေပဵၼ် \"0\" ဢမ်ႇၼၼ် \"1\"    \/ binary format ဢၼ်ၼႆႉ မၼ်းတေလႆႈၶိုၼ်း string ဢၼ်တူဝ်လိၵ်ႈၵူႈတူဝ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉ binary     \/ သူတေလႆႈပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉႁူဝ်သိပ်းသေ ၼႃႈၵၢၼ်သူတေလႆႈလႅၵ်ႈလၢႆႈပဵၼ်     \/\/ >>> decimalToBinary((15l))\n    \/\/ (\"db1111db\")\n    \/\/ >>> decimalToBinary((32l))\n    \/\/ (\"db100000db\")\n    public static String decimalToBinary(long decimal) {\n","canonical_solution":"public static String decimalToBinary(long decimal) {\n        \/\/ Convert the decimal number to binary string\n        String binaryStr = Long.toBinaryString(decimal);\n        \/\/ Add 'db' at the beginning and the end of the binary string\n        return \"db\" + binaryStr + \"db\";\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"},{"task_id":"HumanEval_80","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ သဵၼ်ႈမၢႆတူဝ်လိၵ်ႈၼႆႉ ပဵၼ် hapjava သင်ဝႃႈ တၢင်းယၢဝ်းမၼ်းမီး 3 တူဝ် လႄႈ တူဝ်လိၵ်ႈ 3 တူဝ် ဢၼ်သိုပ်ႇၵၼ်ၼၼ်ႉ မီးလွင်ႈပႅၵ်ႇပိူင်ႈၵၼ်ယူႇၼႆၸိုင်     ၼႃႈၵၢၼ်ႁဝ်းၼႆႉတေႉ ပဵၼ်တႃႇတေထတ်းတူၺ်းဝႃႈ သဵၼ်ၼႆႉပဵၼ် hapjava ႁိုဝ်ဢမ်ႇၸႂ်ႈ။    \/ သူတေလႆႈပၼ် string s.     \/\/ >>> isHappy((\"a\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"aa\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"abcd\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"aabb\"))\n    \/\/ (false)\n    \/\/ >>> isHappy((\"adb\"))\n    \/\/ (true)\n    \/\/ >>> isHappy((\"xyy\"))\n    \/\/ (false)\n    public static boolean isHappy(String s) {\n","canonical_solution":"public static boolean isHappy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_81","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ 0.0 E     \/ > 0.0 D-     \/ > 0.7 D ႉ    \/ > 1.0 D+     \/ > 1.3 C- ႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉ    \/ > 1.7 C     \/ > 2.0 C+     \/ > 2.3 B- ႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉႉ    \/ > 2.7 B     \/ > 3.0 B+     \/ > 3.3 A-     \/ > 3.7 A     \/ 4.0 A+     GPA ၊ သရၽူႇလိၵ်ႈ     \/ ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ၸၢင်ႈဢွၵ်ႇပၼ် သဵၼ်ႈမၢႆ တူဝ်လိၵ်ႈ ဢၼ်ပႃးဝႆႉ တီႈၼႂ်း မေႃႇၵျူး ဢၼ်ၸႂ်ႉဝႆႉ ထႅဝ်လိၵ်ႈဢၼ်ၼႆႉ:     မၼ်းၼၢင်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ၵဵဝ်ႇလူၺ်ႈလွင်ႈ GPA တွၼ်ႈတႃႇလုၵ်ႈႁဵၼ်းၵမ်ႈၽွင်ႈလႄႈ သူတေလႆႈတႅမ်ႈဝႆႉ။    ပၼ်ႁႃဢၼ်လဵဝ်ၵူၺ်းတႄႉ မၼ်းၼၢင်းလႆႈလူႉလႅဝ် ပၵ်းပိူင်ဢၼ်မၼ်းၼၢင်းၸႂ်ႉတိုဝ်းတွၼ်ႈတႃႇ မၵ်းမၼ်ႈၼၼ်ႉယဝ်ႉ။    ၶူးသွၼ်ၶဝ် လႆႈႁဵတ်းဢွၵ်ႇမႃး လွၵ်းလၢႆးမၼ်း တႃႇတေပၼ်လႆႈ မၢႆမီႈၼၼ်ႉယဝ်ႉ။    \/ ပဵၼ်ဝူင်ႈလိုၼ်းသုတ်း ၼႂ်းသႅပ်ႇထႅမ်ႇပႃႇၼႆႉလႄႈ ၶူးသွၼ်ၶဝ်တေလႆႈပၼ် မၢႆၶပ်ႉမၼ်းယူႇ \/    \/\/ >>> gradeEquation((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n        ArrayList<String> letterGrades = new ArrayList<>();\n        for (Float gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else if (gpa == 0.0) {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<Float> gpas = new ArrayList<>();\n        gpas.add(4.0f);\n        gpas.add(3.0f);\n        gpas.add(1.7f);\n        gpas.add(2.0f);\n        gpas.add(3.5f);\n        ArrayList<String> grades = numericalLetterGrade(gpas);\n        System.out.println(grades);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D-\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)\"D\", (String)\"D-\", (String)\"C-\", (String)\"B\", (String)\"B+\")))));\n    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)\"E\", (String)\"D-\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_82","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ length ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ဢမ်ႇၼၼ် ဢမ်ႇၸိုဝ်ႈဢမ်ႇၸႂ်ႈ ပေႃးဢမ်ႇၼၼ်    \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်တႄႉ သင်ဝႃႈ တူဝ်ၼပ်ႉသဵၼ်ႈၼၼ်ႉ ပဵၼ်     \/\/ >>> primeLength((\"Hello\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"abcdcba\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"kittens\"))\n    \/\/ (true)\n    \/\/ >>> primeLength((\"orange\"))\n    \/\/ (false)\n    public static boolean primeLength(String string) {\n","canonical_solution":"public static boolean primeLength(String string) {\n    int length = string.length();\n    if (length <= 1) return false;\n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_83","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တႄႇ ဢမ်ႇၼၼ် သုတ်းတီႈ 1 ၼၼ်ႉ။     \/ ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ n ၼႆၸိုင် ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉ n ၼၼ်ႉၶိုၼ်း    public static long startsOneEnds(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ Given a positive integer n, return the count of the numbers of n-digit\n    \/\/ positive integers that start or end with 1.\n    public static long startsOneEnds(long n) {\n        if (n == 1) return 1; \/\/ Only the number '1' is a one-digit number that starts or ends with 1.\n\n        \/\/ Total numbers with n digits: 9 * (10^(n-1))\n        long totalNDigitNumbers = 9 * (long)Math.pow(10, n - 1);\n\n        \/\/ Numbers that start with 1 and are n-digits: 1 * (10^(n-1))\n        long startsWithOne = (long)Math.pow(10, n - 1);\n\n        \/\/ Numbers that end with 1: 9 * (10^(n-1))\/10\n        long endsWithOne = totalNDigitNumbers \/ 10;\n\n        \/\/ Since numbers starting and ending with 1 are counted twice, we subtract the overlap.\n        return startsWithOne + endsWithOne - 1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(startsOneEnds(1)); \/\/ Expected output: 1\n        System.out.println(startsOneEnds(2)); \/\/ Expected output: 19\n        System.out.println(startsOneEnds(3)); \/\/ Expected output: 190\n        System.out.println(startsOneEnds(4)); \/\/ Expected output: 1900\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"},{"task_id":"HumanEval_84","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ N ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသွင်တူဝ်ၼၼ်ႉ ၶိုၼ်းမႃးပၼ်။     \/\/ >>> solve((1000l))\n    \/\/ (\"1\")\n    \/\/ >>> solve((150l))\n    \/\/ (\"110\")\n    \/\/ >>> solve((147l))\n    \/\/ (\"1100\")\n    \/\/ Variables:\n    \/\/ @N integer\n    \/\/ Constraints: 0 ≤ N ≤ 10000.\n    \/\/ Output:\n    \/\/ a string of binary number\n    public static String solve(long N) {\n","canonical_solution":"public static String solve(long N) {\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N \/= 10;\n        }\n        return Long.toBinaryString(sum);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n"},{"task_id":"HumanEval_85","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတီႈပွင်ႇၼၼ်ႉၼႆ ဢွၼ်တၢင်းသုတ်း ထႅမ်သႂ်ႇ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ဢၼ်မီးတီႈတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ။    \/\/ >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))\n    \/\/ (2l)\n    public static long add(ArrayList<Long> lst) {\n","canonical_solution":"long sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)88l)))) == (88l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l, (long)8l)))) == (12l));\n    }\n\n}\n"},{"task_id":"HumanEval_86","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ မၢႆတွင်း: သူတေလႆႈထိင်းသိမ်းဝႆႉ လွင်ႈၶပ်ႉၶိုင်ၶွင်ၶေႃႈၵႂၢမ်းလႄႈ လွင်ႈပဝ်ႇႁၢင်ႇဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ ၼႂ်းၶေႃႈၵႂၢမ်းၼၼ်ႉ။     \/ ၶိုၼ်ႈၼိူဝ်ၶၵ်ႉဢိင်ၼိူဝ် ၵႃႈၶၼ် ascii။    \/ ၼႆႉ လႆႈထုၵ်ႇဢဝ် ၶေႃႈၵႂၢမ်းမႂ်ႇ ဢၼ်ပႃးတူဝ်လိၵ်ႈတင်းမူတ်း ဢၼ်ၶပ်ႉဝႆႉတီႈၼႂ်း  ၼၼ်ႉသေ ၵိုတ်းဝႆႉ။    \/ Ordered version of string, ၼႆႉပဵၼ် string ဢၼ်ၶေႃႈၵႂၢမ်းတင်းမူတ်း (ဢၼ်ၽႄဝႆႉလူၺ်ႈႁွင်ႈ)     \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်လိၵ်ႈသဵၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်လိၵ်ႈဢၼ်မီးပိူင်မၼ်းၼၼ်ႉ။     \/\/ >>> antiShuffle((\"Hi\"))\n    \/\/ (\"Hi\")\n    \/\/ >>> antiShuffle((\"hello\"))\n    \/\/ (\"ehllo\")\n    \/\/ >>> antiShuffle((\"Hello World!!!\"))\n    \/\/ (\"Hello !!!Wdlor\")\n    public static String antiShuffle(String s) {\n","canonical_solution":"public static String antiShuffle(String s) {\n    StringBuilder result = new StringBuilder();\n    String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\");\n    \n    for (String word : words) {\n        if (word.trim().isEmpty()) {\n            result.append(word);\n        } else {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n        }\n    }\n    \n    return result.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"},{"task_id":"HumanEval_87","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ယဝ်ႉၵေႃႈ ၸႅၵ်ႇမႅင်ႇ coordinates ၶွင် row ၸွမ်း column ၸွမ်းၼင်ႇ ၶၵ်ႉတွၼ်ႈဢၼ်ယွမ်းလူင်းမႃးၼၼ်ႉယဝ်ႉ။    \/ ၸႅၵ်ႇမႅင်ႇ coordinates ၸွမ်းၼင်ႇ ထႅဝ်ဢၼ်ၶိုၼ်ႈမႃးၼၼ်ႉယဝ်ႉ။    \/ ၵူႈသႅၼ်းၼႆႉ ပဵၼ် coordinate - (ထႅဝ်၊ ၵူဝ်ႇလမ်ႇ) ၊ တႄႇတီႈ 0 ၼၼ်ႉယဝ်ႉ။    \/ လႄႈ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇ ၶွင် တူဝ်ၼမ်းမၼ်းမႃး၊ [(x1, y1), (x2, y2) ...] ၼင်ႇႁိုဝ်     \/ ပေႃးႁဝ်းပၼ် lst လႄႈ တူဝ်ၼပ်ႉတဵမ် x ၼႆၸိုင် ႁႃတူဝ်ၼပ်ႉတဵမ် x တီႈၼႂ်းသဵၼ်ႈမၢႆ array ၼၼ်ႉ၊     \/ တီႈထႅဝ်ၼိူင်ႈဢၼ်ၼၼ်ႉ တေၸၢင်ႈမီးဝႆႉ ၸႅၼ်ႇဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/ ဢၼ်ငၢႆးၵၼ်တင်း matrix ၵူၺ်းဢမ်ႇမိူၼ်ၵၼ်တင်း matrix၊     \/ တေလႆႈပၼ်ၶေႃႈမုၼ်း 2 ထတ်း၊ မိူၼ်ၼင်ႇ သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇဢၼ်မီးဝႆႉ၊    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))\n    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList()))\n    \/\/ >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l))\n    \/\/ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n","canonical_solution":"public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n\n        for (long i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get((int)i);\n            for (long j = 0; j < row.size(); j++) {\n                if (row.get((int)j) == x) {\n                    result.add(Pair.with(i, j));\n                }\n            }\n        }\n\n        result.sort(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                int rowComparison = Long.compare(p1.getValue0(), p2.getValue0());\n                if (rowComparison != 0) {\n                    return rowComparison;\n                } else {\n                    return Long.compare(p2.getValue1(), p1.getValue1());  \/\/ Descending order by column\n                }\n            }\n        });\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l), (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n    }\n\n}\n"},{"task_id":"HumanEval_88","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ * ယႃႇပေမူၼ်ႉမႄးပၼ် သဵၼ်ႈမၢႆ မေႃႇမႆႉ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။    \/ မၢႆတွင်း:     \/ ဢမ်ႇၼၼ် ၸႅၵ်ႇမၼ်းၸွမ်းၼင်ႇၶၵ်ႉတွၼ်ႈဢၼ်ယွမ်းလူင်းမႃး သင်ဝႃႈ တူဝ်လေႃး ((ၵႃႈၶၼ် index ဢွၼ်တၢင်းသုတ်း၊ ၵႃႈၶၼ် index လိုၼ်းသုတ်း) ၼႆႉပဵၼ် even ယဝ်ႉ။     \/ တေၸႅၵ်ႇပၼ် သဵၼ်ႈမၢႆ မေႃႇလီႇယမ် မေႃႇလီႇယမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ် ((ၵႃႈၶၼ် index ဢွၼ်တၢင်းသုတ်း၊ ၵႃႈၶၼ် index လိုၼ်းသုတ်း) ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်၊     \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ မေႃႇရီႇ မေႃႇရီႇ ဢၼ်ပႃး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ်ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ cojava ဢၼ်ပႃးဝႆႉ မေႃႇရီႇ မေႃႇရီႇ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း၊    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>(array);\n        }\n\n        long firstValue = array.get(0);\n        long lastValue = array.get(array.size() - 1);\n        long sum = firstValue + lastValue;\n\n        ArrayList<Long> result = new ArrayList<>(array);\n        \n        if (sum % 2 == 0) {\n            \/\/ Sort in descending order\n            result.sort(Collections.reverseOrder());\n        } else {\n            \/\/ Sort in ascending order\n            Collections.sort(result);\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l, (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_89","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ shift လူင်းၵႂႃႇ 2 ပွၵ်ႈ ပွၵ်ႈသွင်။    \/ တူဝ်လိၵ်ႈၼႆႉ ထုၵ်ႇလီဢဝ် လႅၵ်ႈလၢႆႈဝႆႉ ၼင်ႇႁိုဝ် တူဝ်လိၵ်ႈ     \/ ၼႆႉ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ တူဝ်မႄႈလိၵ်ႈ ဢၼ်လႆႈထုၵ်ႇ လႅၵ်ႈလၢႆႈဝႆႉၼၼ်ႉ ၶိုၼ်းမႃးပၼ်ယဝ်ႉ။    \/ ႁဵတ်းၵၢၼ် encrypt ဢၼ်ဢဝ် string ပဵၼ် arguments လႄႈ     \/\/ >>> encrypt((\"hi\"))\n    \/\/ (\"lm\")\n    \/\/ >>> encrypt((\"asdfghjkl\"))\n    \/\/ (\"ewhjklnop\")\n    \/\/ >>> encrypt((\"gf\"))\n    \/\/ (\"kj\")\n    \/\/ >>> encrypt((\"et\"))\n    \/\/ (\"ix\")\n    public static String encrypt(String s) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Create a function encrypt that takes a string as an argument and returns\n    \/\/ a string encrypted with the alphabet being rotated by 2 * 2 = 4 places.\n    public static String encrypt(String s) {\n        StringBuilder encryptedString = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                char shifted = (char) ((c - 'a' + 4) % 26 + 'a');\n                encryptedString.append(shifted);\n            } else if (Character.isUpperCase(c)) {\n                char shifted = (char) ((c - 'A' + 4) % 26 + 'A');\n                encryptedString.append(shifted);\n            } else {\n                \/\/ If the character is not a letter, append it unchanged.\n                encryptedString.append(c);\n            }\n        }\n        return encryptedString.toString();\n    }\n\n    public static void main(String[] args) {\n        \/\/ Test examples\n        System.out.println(encrypt(\"hi\"));          \/\/ Output: lm\n        System.out.println(encrypt(\"asdfghjkl\"));   \/\/ Output: ewhjklnop\n        System.out.println(encrypt(\"gf\"));          \/\/ Output: kj\n        System.out.println(encrypt(\"et\"));          \/\/ Output: ix\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n"},{"task_id":"HumanEval_90","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပေႃးဢမ်ႇမီး တူဝ်ထီႉၼႆ ၶိုၼ်းဢဝ် null မႃးၶိုၼ်း။    \/ တႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်လဵၵ်ႉသုတ်း (next_smallest) ဢၼ်တေၶိုၼ်းပၼ် တူဝ်ဢိင်ဢၼ်လဵၵ်ႉသုတ်းထူၼ်ႈသွင် ၶွင်သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇ (array) ၼၼ်ႉ။     \/ သူတေလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်တင်းၼမ်။    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    \/\/ Optional.of(2l)\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))\n    \/\/ Optional.of(2l)\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Optional.empty()\n    \/\/ >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l))))\n    \/\/ Optional.empty()\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Set<Long> uniqueSet = new HashSet<>(lst);\n        List<Long> uniqueList = new ArrayList<>(uniqueSet);\n        if (uniqueList.size() < 2) {\n            return Optional.empty();\n        }\n\n        Collections.sort(uniqueList);\n        return Optional.of(uniqueList.get(1));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l)))).equals(Optional.of(2l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(1l)));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l, (long)34l, (long)12l, (long)-45l)))).equals(Optional.of(-35l)));\n    }\n\n}\n"},{"task_id":"HumanEval_91","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ ၶေႃႈၵႂၢမ်းၼႆႉ ဢဝ်တူဝ်လိၵ်ႈ '.', '?' ဢမ်ႇၼၼ် '!' သေ တႅၵ်ႈဢွၵ်ႇဝႆႉ။    လွင်ႈဢၼ်ယၢပ်ႇၸႂ်ၼႆႉ ပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်တႄႇတီႈ ၶေႃႈၵႂၢမ်း \"ၵဝ်\" ၼၼ်ႉယူႇယဝ်ႉ။    \/ သူတေလႆႈပၼ်ၶေႃႈၵႂၢမ်းဢၼ်ၼိူင်ႈသေ ၼႃႈၵၢၼ်သူတေလႆႈၼပ်ႉဢၢၼ်ႇမၼ်းယူႇ    \/\/ >>> isBored((\"Hello world\"))\n    \/\/ (0l)\n    \/\/ >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    \/\/ (1l)\n    public static long isBored(String S) {\n","canonical_solution":"long boredomCount = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_92","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ မႄးၶိုၼ်း false တီႈၼႂ်းလွင်ႈတၢင်းတၢင်ႇဢၼ်။     \/ ၶိုၼ်းမွၵ်ႇမႃး true သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼႆႉ ပဵၼ်ဢၼ်ၽဵင်ႇပဵင်းၵၼ်တၢင်း တူဝ်ၼပ်ႉသွင်ဢၼ်ၼၼ်ႉသေ တူဝ်ၼပ်ႉတင်းမူတ်းၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ်ၼႆယဝ်ႉ။    \/ ႁဵတ်းပၼ် function ဢၼ်ဢဝ်တူဝ်ၼပ်ႉ 3 တူဝ်    \/\/ >>> anyInt((float)5l, (float)2l, (float)7l)\n    \/\/ (true)\n    \/\/ >>> anyInt((float)3l, (float)2l, (float)2l)\n    \/\/ (false)\n    \/\/ >>> anyInt((float)3l, (float)-2l, (float)1l)\n    \/\/ (true)\n    \/\/ >>> anyInt((3.6f), (-2.2f), (float)2l)\n    \/\/ (false)\n    public static boolean anyInt(float x, float y, float z) {\n","canonical_solution":"public static boolean anyInt(float x, float y, float z) {\n        \/\/ Check if any of the numbers is the sum of the other two\n        \/\/ To ensure all are integers, they must be equal to their integer counterpart\n        if (x == (int) x && y == (int) y && z == (int) z) {\n            \/\/ Convert numbers to integers\n            int xi = (int) x;\n            int yi = (int) y;\n            int zi = (int) z;\n            return (xi == yi + zi) || (yi == xi + zi) || (zi == xi + yi);\n        }\n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(anyInt((float)2l, (float)3l, (float)1l) == (true));\n    assert(anyInt((2.5f), (float)2l, (float)3l) == (false));\n    assert(anyInt((1.5f), (float)5l, (3.5f)) == (false));\n    assert(anyInt((float)2l, (float)6l, (float)2l) == (false));\n    assert(anyInt((float)4l, (float)2l, (float)2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt((float)-4l, (float)6l, (float)2l) == (true));\n    assert(anyInt((float)2l, (float)1l, (float)1l) == (true));\n    assert(anyInt((float)3l, (float)4l, (float)7l) == (true));\n    assert(anyInt((3.0f), (float)4l, (float)7l) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_93","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ထၢင်ႇဝႃႈပဵၼ် တူဝ်လိၵ်ႈၵူၺ်း။    \/ vowel ၼႂ်းတူဝ်လိၵ်ႈဢင်းၵိတ်း။     \/ ၶေႃႈၵႂၢမ်းဢၼ်ပႃးတူဝ်လိၵ်ႈ ဢၼ်ဢွၵ်ႇမႃးတီႈၼႃႈ 2 တီႈၼၼ်ႉ     \/ မၼ်းလႅၵ်ႈလၢႆႈ တူဝ်လိၵ်ႈၵူႈတူဝ်၊ သႂ်ႇတူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈၵူႈတူဝ် ၼႂ်း     \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ်ၶေႃႈၶၢဝ်ႇသေ သႂ်ႇပၼ်ၼႂ်းတူဝ်လိၵ်ႈ     \/\/ >>> encode((\"test\"))\n    \/\/ (\"TGST\")\n    \/\/ >>> encode((\"This is a message\"))\n    \/\/ (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n","canonical_solution":"public static String encode(String message) {\n    StringBuilder encodedMessage = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLetter(c)) {\n            \/\/ Swap case\n            char swappedCaseChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\n            \/\/ Replace vowels\n            if (\"AEIOUaeiou\".indexOf(c) != -1) {\n                \/\/ Determine the offset for vowel replacement\n                char replacementChar = (char) (swappedCaseChar + 2);\n                encodedMessage.append(replacementChar);\n            } else {\n                encodedMessage.append(swappedCaseChar);\n            }\n        }\n    }\n    return encodedMessage.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"},{"task_id":"HumanEval_94","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ တေလႆႈႁႃ တူဝ်ၼပ်ႉ prime ဢၼ်ယႂ်ႇသေပိူၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉမၼ်းၼၼ်ႉၶိုၼ်း။     \/ သူတေလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်တင်းၼမ်။    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l))))\n    \/\/ (10l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l))))\n    \/\/ (25l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l))))\n    \/\/ (13l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l))))\n    \/\/ (11l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l))))\n    \/\/ (3l)\n    \/\/ >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l))))\n    \/\/ (7l)\n    public static long skjkasdkd(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static boolean isPrime(long n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    public static long sumOfDigits(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n \/= 10;\n        }\n        return sum;\n    }\n\n    public static long skjkasdkd(ArrayList<Long> lst) {\n        long largestPrime = -1;\n\n        for (long num : lst) {\n            if (isPrime(num)) {\n                largestPrime = Math.max(largestPrime, num);\n            }\n        }\n\n        return largestPrime != -1 ? sumOfDigits(largestPrime) : 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(skjkasdkd(new ArrayList<Long>(Arrays.asList(0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l)))) == (10l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l)))) == (25l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l)))) == (13l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l)))) == (11l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l)))) == (3l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l)))) == (7l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l, (long)123456l, (long)127l, (long)7l)))) == (19l));\n    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)127l, (long)97l, (long)8192l)))) == (10l));\n    }\n\n}\n"},{"task_id":"HumanEval_95","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ပေႃးဝႃႈ hash map ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးသင်ၼႆ ၽွၼ်ႉၼႆႉ တေလႆႈၶိုၼ်းပၼ် false ယဝ်ႉ။    \/ ၶဵၵ်ႉ ဢမ်ႇၼၼ် ၶဵၵ်ႉတင်းမူတ်းၼႆႉ ပဵၼ်တူဝ်လိၵ်ႈ ဢၼ်ပႃးတူဝ်ယႂ်ႇ၊ ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းဢဝ် false မႃးၶိုၼ်း။    \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ hash map ၼႆၸိုင် ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ၸိူဝ်ႉဝႃႈ ၶီးတၢင်းမူတ်းပဵၼ် string တီႈတႂ်ႈၼႆႉၼႆၸိုင်    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n    \/\/ (true)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n    \/\/ (false)\n    \/\/ >>> checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    \/\/ (true)\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n","canonical_solution":"import java.util.HashMap;\n\nclass Problem {\n    public static boolean checkDictCase(HashMap<String, String> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (String key : dict.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                allLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        HashMap<String, String> map1 = new HashMap<>(Map.of(\"a\", \"apple\", \"b\", \"banana\"));\n        HashMap<String, String> map2 = new HashMap<>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"));\n        HashMap<String, String> map3 = new HashMap<>(Map.of(\"a\", \"apple\", \"8\", \"banana\", \"A\", \"apple\"));\n        HashMap<String, String> map4 = new HashMap<>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"));\n        HashMap<String, String> map5 = new HashMap<>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"));\n\n        System.out.println(checkDictCase(map1)); \/\/ true\n        System.out.println(checkDictCase(map2)); \/\/ false\n        System.out.println(checkDictCase(map3)); \/\/ false\n        System.out.println(checkDictCase(map4)); \/\/ false\n        System.out.println(checkDictCase(map5)); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_96","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ မိူၼ်ၼင်ႇ:     \/ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၸႅတ်ႈၸၢင်ႇ လႄႈ ဢေႇလိူဝ် n ၼၼ်ႉ။     \/ ႁဵတ်းသၢင်ႈၼႃႈၵၢၼ် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းသေ ၶိုၼ်းဢဝ်မႃး တူဝ်ၼပ်ႉဢၼ်ပဵၼ် ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ်    \/\/ >>> countUpTo((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    \/\/ >>> countUpTo((11l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))\n    \/\/ >>> countUpTo((0l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> countUpTo((20l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))\n    \/\/ >>> countUpTo((1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    \/\/ >>> countUpTo((18l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))\n    public static ArrayList<Long> countUpTo(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    \n    public static ArrayList<Long> countUpTo(long n) {\n        ArrayList<Long> primes = new ArrayList<>();\n        for (long i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n    \n    private static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (long i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countUpTo((5l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n    assert(countUpTo((6l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((7l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));\n    assert(countUpTo((10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))));\n    assert(countUpTo((0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((22l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))));\n    assert(countUpTo((1l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(countUpTo((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(countUpTo((47l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l)))));\n    assert(countUpTo((101l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l, (long)47l, (long)53l, (long)59l, (long)61l, (long)67l, (long)71l, (long)73l, (long)79l, (long)83l, (long)89l, (long)97l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_97","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ထၢင်ႇဝႃႈ ၶေႃႈၶဝ်ႈၼႆႉ မၢၼ်ႇမႅၼ်ႈယူႇတႃႇသေႇ။     \/ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ၶွင်တူဝ်ၼပ်ႉၶဝ်ၼၼ်ႉ     \/ ယဝ်ႉတူဝ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ်သွင်တူဝ်သေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်     \/\/ >>> multiply((148l), (412l))\n    \/\/ (16l)\n    \/\/ >>> multiply((19l), (28l))\n    \/\/ (72l)\n    \/\/ >>> multiply((2020l), (1851l))\n    \/\/ (0l)\n    \/\/ >>> multiply((14l), (-15l))\n    \/\/ (20l)\n    public static long multiply(long a, long b) {\n","canonical_solution":"long unitDigitA = Math.abs(a % 10);\n        long unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_98","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ ပေႃးဝႃႈႁဝ်းပၼ် string s ၼႆၸိုင် ၵဵပ်းဢဝ် တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈတူဝ်ယႂ်ႇ ဢၼ်ပႃး တူဝ်ၼပ်ႉၸႅၼ်ႇတူဝ်ၼၼ်ႉသေ ၼပ်ႉတူၺ်း    \/\/ >>> countUpper((\"aBCdEf\"))\n    \/\/ (1l)\n    \/\/ >>> countUpper((\"abcdefg\"))\n    \/\/ (0l)\n    \/\/ >>> countUpper((\"dBBE\"))\n    \/\/ (0l)\n    public static long countUpper(String s) {\n","canonical_solution":"long count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (\"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_99","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ လုၵ်ႉတီႈ တူဝ်ၼပ်ႉတဵမ်သွင်တူဝ်ၼၼ်ႉသေ ဢဝ်မၼ်းၸုၵ်းၵႂႃႇတီႈ သုၼ်ၼၼ်ႉ။    ပေႃးဝႃႈ တူဝ်ၼပ်ႉၼႆႉ မီးတၢင်းၵႆၵၼ်ၽဵင်ႇပဵင်းၵၼ်ၼႆ    \/ ႁဵတ်းပၼ် function ဢၼ်ဢဝ် ၵႃႈၶၼ် (string) ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉၼၼ်ႉ    \/\/ >>> closestInteger((\"10\"))\n    \/\/ (10l)\n    \/\/ >>> closestInteger((\"15.3\"))\n    \/\/ (15l)\n    \/\/ Note:\n    \/\/ Rounding away from zero means that if the given number is equidistant\n    \/\/ from two integers, the one you should return is the one that is the\n    \/\/ farthest from zero. For example closest_integer(\"14.5\") should\n    \/\/ return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long closestInteger(String value) {\n","canonical_solution":"public static long closestInteger(String value) {\n        double number = Double.parseDouble(value);\n        long rounded = Math.round(number);\n        if (Math.abs(number - rounded) == 0.5) {\n            \/\/ Rounding away from zero\n            if (number > 0) {\n                return rounded + 1;\n            } else {\n                return rounded - 1;\n            }\n        }\n        return rounded;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));   \/\/ 10\n        System.out.println(closestInteger(\"15.3\")); \/\/ 15\n        System.out.println(closestInteger(\"14.5\")); \/\/ 15\n        System.out.println(closestInteger(\"-14.5\"));\/\/ -15\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_100","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/i ၼႆႉပဵၼ် တူဝ်ၼပ်ႉႁိၼ် ဢၼ်မီးတီႈၸၼ်ႉ (i+1) ၼၼ်ႉယဝ်ႉ။    \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉႁိၼ် တီႈၸၼ်ႉထၢၼ်ႈၵူႈဢၼ် ၼႂ်းသဵၼ်ႈမၢႆ array array ဢၼ်တူဝ်ၼပ်ႉဢၼ်မီးတီႈ index ၼၼ်ႉ     \/ - တူဝ်ၼပ်ႉဢၼ်ၸမ်သုတ်း သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼပ်ႉၸမ်သုတ်းၼႆယဝ်ႉ။    \/ - တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်မႃးၸွမ်းလင် သင်ဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆယဝ်ႉ။     \/ သဵၼ်ႈမၢႆမၢၵ်ႇႁိၼ် တီႈၸၼ်ႉထၢၼ်ႈဢၼ်ၼိူင်ႈၼၼ်ႉပဵၼ်:     \/ တီႈၸၼ်ႉဢွၼ်တၢင်းသုတ်းၼၼ်ႉ မီးမၢၵ်ႇႁိၼ် n တၼ်ႊ။    \/ ပေႃးဝႃႈႁဝ်းပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ႁဝ်းတေလႆႈႁဵတ်းႁုပ်ႈႁုၼ်ႈမၢၵ်ႇႁိၼ် n ၸၼ်ႉ။    \/\/ >>> makeAPile((3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))\n    public static ArrayList<Long> makeAPile(long n) {\n","canonical_solution":"public static ArrayList<Long> makeAPile(long n) {\n        ArrayList<Long> pile = new ArrayList<>();\n        long stones = n;\n        boolean isOdd = stones % 2 != 0;\n\n        for (int i = 0; i < n; i++) {\n            pile.add(stones);\n            if (isOdd) {\n                stones += 2; \/\/ Next odd number\n            } else {\n                stones += 2; \/\/ Next even number\n            }\n        }\n\n        return pile;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(makeAPile((3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))));\n    assert(makeAPile((4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)10l)))));\n    assert(makeAPile((5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)11l, (long)13l)))));\n    assert(makeAPile((6l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l)))));\n    assert(makeAPile((8l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)18l, (long)20l, (long)22l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_101","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ တွၼ်ႈတႃႇတေၸႅၵ်ႇဢွၵ်ႇ သဵင်ဢွၵ်ႇဢၼ်ပဵၼ် တူဝ်လိၵ်ႈသေ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ် တူဝ်လိၵ်ႈဢၼ်ပဵၼ်    \/ သူတေလႆႈပၼ်ၶေႃႈၵႂၢမ်းဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈ ၶူဝ်းမႄႈ ဢမ်ႇၼၼ် လွင်ႈပႅၵ်ႇပိူင်ႈ။ ၼႃႈၵၢၼ်သူတေပဵၼ်     \/\/ >>> wordsString((\"Hi, my name is John\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    \/\/ >>> wordsString((\"One, two, three, four, five, six\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.split(\"[,\\\\s]+\");\n        return new ArrayList<String>(Arrays.asList(words));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, my name is John\"));\n        System.out.println(wordsString(\"One, two, three, four, five, six\"));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(wordsString((\"Hi, my name is John\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"Hi, my name\")).equals((new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\")))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))));\n    assert(wordsString((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(wordsString((\"ahmed     , gamal\")).equals((new ArrayList<String>(Arrays.asList((String)\"ahmed\", (String)\"gamal\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_102","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ ဢမ်ႇမီး တူဝ်ၼပ်ႉၸိူင်ႉၼၼ်ၼႆၸိုင် တူဝ်ဢိင်ၼႆႉ တေလႆႈၶိုၼ်းပၼ် - 1    \/ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ယႂ်ႇသေပိူၼ်ႈ ဢၼ်ပႃးၼႂ်းၵႄႈ [x, y] ၼၼ်ႉ သင်ဝႃႈ     \/ Function ၼႆႉ ဢဝ်တူဝ်ၼပ်ႉသုတ်ႉ x လႄႈ y သွင်တူဝ်သေ ၶိုၼ်းပၼ်တူဝ်ၼပ်ႉ     \/\/ >>> chooseNum((12l), (15l))\n    \/\/ (14l)\n    \/\/ >>> chooseNum((13l), (12l))\n    \/\/ (-1l)\n    public static long chooseNum(long x, long y) {\n","canonical_solution":"if (x > y) {\n            return -1l;\n        }\n        \n        long maxEven = y % 2 == 0 ? y : y - 1;\n        if (maxEven >= x) {\n            return maxEven;\n        } else {\n            return -1l;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n"},{"task_id":"HumanEval_104","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ မၢႆတွင်း: သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇဢၼ်လႆႈၶိုၼ်းၼၼ်ႉ ထုၵ်ႇလီၸႅၵ်ႇဝႆႉၸွမ်းၼင်ႇ လွင်ႈၶိုၼ်ႈယႂ်ႇမႃးၼၼ်ႉယဝ်ႉ။    \/ elements ဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ်။     \/ ပေႃးပၼ်ဝႆႉ လွင်ႈၸႅၵ်ႇၽႄ array array list ၶွင် တူဝ်ၼပ်ႉတဵမ်တူဝ်မႄႈလိၵ်ႈလီ x. ၶိုၼ်းဢဝ် လွင်ႈၸႅၵ်ႇၽႄ array list ၶွင်တင်းမူတ်း     \/\/ >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))\n    \/\/ >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n","canonical_solution":"public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n        return x.stream()\n                .filter(num -> hasNoEvenDigits(num))\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static boolean hasNoEvenDigits(long num) {\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num \/= 10;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)12345l, (long)2033l, (long)111l, (long)151l)))).equals((new ArrayList<Long>(Arrays.asList((long)111l, (long)151l)))));\n    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)135l, (long)103l, (long)31l)))).equals((new ArrayList<Long>(Arrays.asList((long)31l, (long)135l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_105","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ \"ၼိုင်ႈ\" \"သွင်\" \"သၢမ်\" \"သီႇ\" \"ႁႃႈ\" \"ႁူၵ်း\" \"ၸဵတ်း\" \"ဢဵတ်း\" \"ႁူၵ်း\" \"ႁူၵ်း\"    \/ ၶိုၼ်းမႄးၶိုၼ်း တူဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်လႂ်ဢၼ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ် ၸိုဝ်ႈဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း     \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် array array list ၼႆၸိုင် ၸႅၵ်ႇပၼ်တူဝ်ၼပ်ႉတဵမ်ဢၼ်မီးၼႂ်းၵႄႈ 1 လႄႈ 9 ပႃးတင်း၊     \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))\n    \/\/ If the array array list is empty, return an empty array array list:\n    \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ If the array array list has any strange number ignore it:\n    \/\/ >>> byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"One\")))\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n        List<String> names = Arrays.asList(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        ArrayList<Long> filtered = new ArrayList<>();\n\n        \/\/ Filter the numbers between 1 and 9\n        for (Long num : arr) {\n            if (num >= 1 && num <= 9) {\n                filtered.add(num);\n            }\n        }\n\n        \/\/ Sort the filtered numbers\n        Collections.sort(filtered);\n\n        \/\/ Reverse the sorted list\n        Collections.reverse(filtered);\n\n        \/\/ Replace each number with its corresponding name\n        ArrayList<String> result = new ArrayList<>();\n        for (Long num : filtered) {\n            result.add(names.get(num.intValue()));\n        }\n\n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l)))).equals((new ArrayList<String>(Arrays.asList((String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)3l, (long)2l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Three\", (String)\"Two\", (String)\"One\")))));\n    assert(byLength((new ArrayList<Long>(Arrays.asList((long)9l, (long)4l, (long)8l)))).equals((new ArrayList<String>(Arrays.asList((String)\"Nine\", (String)\"Eight\", (String)\"Four\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_106","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းတူဝ်ၼပ်ႉတူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်တိူဝ်းလိူဝ်မႃးတီႈ တူဝ်ၼပ်ႉ 1 တေႃႇထိုင် i (1 * 2 * ... * i) ၼၼ်ႉယဝ်ႉ။    \/i တႄႇတီႈ 1.    \/ ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉဢၼ်တႄႇတီႈ 1 တေႃႇထိုင် i ၼၼ်ႉ ပေႃးဢမ်ႇၼၼ်။    \/ လႄႈ ၶိုၼ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ array array ဢၼ်ယႂ်ႇ n၊ မိူၼ်ၼင်ႇ ၵႃႈၶၼ်ၶွင် တူဝ်ဢိင်ဢၼ်မီးတီႈ index i ၼၼ်ႉ ပဵၼ် factorial ၶွင် i သင်ဝႃႈ i ၼႆႉပဵၼ် တူဝ်ၽဵင်ႇပဵင်း     \/ ႁဵတ်းသၢင်ႈၼႃႈၵၢၼ် f ဢၼ်ဢဝ် n ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တႅၵ်ႈ၊     \/\/ >>> f((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n","canonical_solution":"import java.util.ArrayList;\n\npublic class Problem {\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        \n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumUpTo(i));\n            }\n        }\n        \n        return result;\n    }\n\n    private static long factorial(long num) {\n        long result = 1;\n        for (long i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private static long sumUpTo(long num) {\n        return num * (num + 1) \/ 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(f(5));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(f((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))));\n    assert(f((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l, (long)720l, (long)28l)))));\n    assert(f((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(f((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_107","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ 1:     \/ တူဝ်ၼပ်ႉတဵမ် palindromes ဢၼ်ၶဝ်ႈပႃးၼႂ်း တၢင်းၵႂၢင်ႈပဵင်း ((1, n) ။    \/ ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ n ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၸႅၵ်ႈ လႄႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉမႃး    \/\/ >>> evenOddPalindrome((3l))\n    \/\/ (Pair.with(1l, 2l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    \/\/ Example 2:\n    \/\/ >>> evenOddPalindrome((12l))\n    \/\/ (Pair.with(4l, 6l))\n    \/\/ Explanation:\n    \/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    \/\/ Note:\n    \/\/ 1. 1 <= n <= 10^3\n    \/\/ 2. returned pair has the number of even and odd integer palindromes respectively.\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n    public static Pair<Long, Long> evenOddPalindrome(long n) {\n        long evenCount = 0;\n        long oddCount = 0;\n        \n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        return Pair.with(evenCount, oddCount);\n    }\n    \n    private static boolean isPalindrome(long number) {\n        long original = number;\n        long reversed = 0;\n        \n        while (number > 0) {\n            long digit = number % 10;\n            reversed = reversed * 10 + digit;\n            number \/= 10;\n        }\n        \n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddPalindrome(3));  \/\/ Output: (Pair.with(1l, 2l))\n        System.out.println(evenOddPalindrome(12)); \/\/ Output: (Pair.with(4l, 6l))\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(evenOddPalindrome((123l)).equals((Pair.with(8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals((Pair.with(1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals((Pair.with(6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals((Pair.with(5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals((Pair.with(4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals((Pair.with(0l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_108","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    တူဝ်ယၢင်ႇမၼ်း -123 ၼႆႉ မီးတူဝ်ၼပ်ႉ -1, 2, လႄႈ 3 ယဝ်ႉ။    \/ သင်ဝႃႈ တူဝ်ၼပ်ႉၼၼ်ႉပဵၼ် တူဝ်ထွၼ်ၼႆ တူဝ်ၼပ်ႉဢၼ်မီးမၢႆလပ်ႉဝႆႉဢွၼ်တၢင်းသုတ်းမၼ်းတေပဵၼ် တူဝ်ထွၼ်:     \/ တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ်ဝႆႉၼၼ်ႉ မီးဝႆႉၼမ်လိူဝ် 0 ယဝ်ႉ။    \/ တႅမ်ႈပၼ် တူဝ်ၼပ်ႉၼပ်ႉဢၼ်ၼပ်ႉသွၼ်ႇလႆႈ ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ်တင်းၼမ်သေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (0l)\n    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n    \/\/ (1l)\n    \/\/ >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l))))\n    \/\/ (3l)\n    public static long countNums(ArrayList<Long> arr) {\n","canonical_solution":"public static long countNums(ArrayList<Long> arr) {\n        return arr.stream().filter(num -> {\n            long sumOfDigits = 0;\n            long n = Math.abs(num);\n            while (n > 0) {\n                sumOfDigits += n % 10;\n                n \/= 10;\n            }\n            return (num < 0 ? sumOfDigits - 2 * (num % 10) : sumOfDigits) > 0;\n        }).count();\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> inputs1 = new ArrayList<Long>(Arrays.asList());\n        ArrayList<Long> inputs2 = new ArrayList<Long>(Arrays.asList(-1L, 11L, -11L));\n        ArrayList<Long> inputs3 = new ArrayList<Long>(Arrays.asList(1L, 1L, 2L));\n\n        System.out.println(countNums(inputs1)); \/\/ Output: 0\n        System.out.println(countNums(inputs2)); \/\/ Output: 1\n        System.out.println(countNums(inputs3)); \/\/ Output: 3\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_109","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇမၼ်း:     \/ မၢႆတွင်း: သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇဢၼ်ပၼ်ဝႆႉၼၼ်ႉ မၼ်းတေမီးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    \/ သင်ဝႃႈ သဵၼ်ႈမၢႆ array array ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးသင်ၼႆ ၶိုၼ်းဢဝ် true မႃးပၼ်။    \/ ပေႃးၼၼ် ၶိုၼ်းဢဝ် true ဢမ်ႇၼၼ် ၶိုၼ်းဢဝ် false။    \/ ပေႃးဝႃႈ မၼ်းပဵၼ်လႆႈ တႃႇတေလႆႈ လွင်ႈၸႅၵ်ႇမႅင်ႇ array array list လူၺ်ႈႁဵတ်းသၢင်ႈ တၢင်းၼိူဝ်ၼၼ်ႉၼႆၸိုင်    \/ တီႈတႄႇမၼ်း ၼႂ်းသဵၼ်ႈမၢႆ array array ဢၼ်ဝႃႈၼၼ်ႉ ပဵၼ် 0th index။    လွင်ႈတတ်းမၵ်း တူဝ်ၼပ်ႉလိုၼ်းသုတ်း ၶွင် သဵၼ်ႈမၢႆ array array ၼၼ်ႉ တေၶၢႆႉၵႂႃႇၸူး     \/ လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼိုင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇၶႂႃၼႆႉ ပွင်ႇဝႃႈ ၶၢႆႉဝႆႉ ဢီႇလႅမ်ႇတိူဝ်ႇတၢင်းမူတ်း ၶွင်သဵၼ်ႈမၢႆ ဢီႇလႅမ်ႇတိူဝ်ႇၶွင် မေႃႇလီႇယႃႇၼၼ်ႉ ၼိုင်ႈဢၼ်     \/ သူတေလႆႈႁဵတ်းၵၢၼ် shift တၢင်းၶႂႃလႆႈလၢႆၵမ်းယူႇ    \/ လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼႆႉ ၼိူဝ်သဵၼ်ႈမၢႆ array array ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ:     \/ မၼ်းတေပဵၼ်လႆႈတႃႇတေလႆႈ လွင်ႈၸႅၵ်ႇၽႄၶွင် array array list ဢၼ်ဢမ်ႇမီးလွင်ႈယွမ်းလူင်း လူၺ်ႈႁဵတ်းသၢင်ႈ     တူဝ်ၼပ်ႉၼႂ်းသဵၼ်ႈမၢႆ array arrays ၼႆႉ တေထုၵ်ႇၸႅၵ်ႇဝႆႉၸွမ်းလွင်ႈဢမ်ႇပဵၼ်လႆႈ။ ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတေတႅပ်းတတ်းဝႃႈ     \/ ႁဝ်းမီးဝႆႉ array array list 'arr' ၶွင်တူဝ်ၼပ်ႉတဵမ် N ဢၼ် arr[1], arr[2], ..., arr[N]။     \/\/ >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\n    \/\/ (true)\n    \/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n    \/\/ be achieved for the given array array list.\n    \/\/ >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))\n    \/\/ (false)\n    \/\/ Explanation:It is not possible to get non-decreasing order for the given\n    \/\/ array array list by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        \n        int n = arr.size();\n        \n        \/\/ Find the number of increasing points\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                count++;\n            }\n        }\n        \n        \/\/ Check the end and start to be a breaking point\n        if (arr.get(n - 1) > arr.get(0)) {\n            count++;\n        }\n        \n        \/\/ If there is at most one such transition, it can be rotated\n        return count <= 1;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));\n    assert(moveOneBall((new ArrayList<Long>(Arrays.asList()))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_110","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် \"ဢမ်ႇ\"။    \/ ၶူဝ်းၶွင် lst1 တင်းမူတ်းၼႆႉ ပဵၼ်ဢၼ်ၽဵင်ႇပဵင်းၵၼ်၊ ၶိုၼ်းပၼ်ၶေႃႈတွပ်ႇ \"YES\"    \/ ပေႃးဝႃႈမၼ်းပဵၼ်လႆႈ တႃႇလႅၵ်ႈလၢႆႈ ဢႄးလ်မိၼ်ႇတႃႇ ၼႂ်းၵႄႈ lst1 လႄႈ lst2 တႃႇႁဵတ်း     \/ ဢမ်ႇမီးလွင်ႈမၵ်းမၼ်ႈၼိူဝ် တူဝ်ၼပ်ႉၶွင် ဢၼ်လႅၵ်ႈလၢႆႈၵၼ်ၼ်ႂးၵႄႈ lst1 လႄႈ lst2 ၼၼ်ႉ။    \/ ၼႂ်းၵႄႈၶဝ် တႃႇႁဵတ်း lst1 array array list ၶွင် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၽဵင်ႇပဵင်းၵူၺ်း။    \/ လႄႈ တႅပ်းတတ်းဝႃႈ ၸွင်ႇတေၸၢင်ႈႁဵတ်းလႆႈ လွင်ႈလႅၵ်ႈလၢႆႈ ဢီႊလ်မႅၼ်ႇ (elements) ၼၼ်ႉႁိုဝ်ၼႆယူႇယဝ်ႉ။    ၼႂ်းပုစ္ဆာၼႆႉ ၸဝ်ႈၵဝ်ႇတေႁဵတ်းသၢင်ႈပၼ် တူဝ်ဢိင်ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတင်းၼမ်တင်းၼမ်မႃးပဵၼ် မေႃႇလီႇယမ်သွင်ဢၼ်၊    \/\/ >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (\"YES\")\n    \/\/ >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l))))\n    \/\/ (\"NO\")\n    \/\/ It is assumed that the input array lists will be non-empty.\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n        \/\/ Check if all elements in lst1 are already even\n        boolean allEvenInLst1 = lst1.stream().allMatch(num -> num % 2 == 0);\n        if (allEvenInLst1) {\n            return \"YES\";\n        }\n\n        \/\/ Check if there is at least one even number in lst2\n        boolean hasEvenInLst2 = lst2.stream().anyMatch(num -> num % 2 == 0);\n        if (hasEvenInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        ArrayList<Long> lst2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        System.out.println(exchange(lst1, lst2));  \/\/ Output: \"YES\"\n\n        lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));\n        lst2 = new ArrayList<>(Arrays.asList(1L, 5L, 3L, 4L));\n        System.out.println(exchange(lst1, lst2));  \/\/ Output: \"NO\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l)))).equals((\"YES\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)6l, (long)1l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)5l, (long)1l, (long)1l, (long)1l)))).equals((\"NO\")));\n    assert(exchange((new ArrayList<Long>(Arrays.asList((long)100l, (long)200l))), (new ArrayList<Long>(Arrays.asList((long)200l, (long)200l)))).equals((\"YES\")));\n    }\n\n}\n"},{"task_id":"HumanEval_111","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ သင်ဝႃႈ တူဝ်လိၵ်ႈတင်းၼမ် မီးလွင်ႈပဵၼ်မိူၼ်ၵၼ်ၼႆ ၶိုၼ်းဢဝ်တင်းမူတ်းၶိုၼ်း။    \/ ၶွင်တူဝ်လိၵ်ႈဢၼ်မီးလွင်ႈၽိုၼ်မိူၼ်ၼမ်သေလႄႈ ပႃးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ၵွင်ႉၵၢႆႇၵၼ်ၼၼ်ႉယဝ်ႉ။    \/ ပေႃးဝႃႈလႆႈပၼ် string ဢၼ်တႅၼ်းတၢင် တူဝ်လိၵ်ႈဢၼ်ၸႅၵ်ႇဝႆႉပဵၼ် space ဢၼ်လဵၵ်ႉၼၼ်ႉၼႆ ၶိုၼ်းဢဝ် hash map ၼၼ်ႉမႃးပၼ်     \/\/ >>> histogram((\"a b c\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l)))\n    \/\/ >>> histogram((\"a b b a\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    \/\/ >>> histogram((\"a b c a b\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    \/\/ >>> histogram((\"b b b b a\"))\n    \/\/ (new HashMap<String,Long>(Map.of(\"b\", 4l)))\n    \/\/ >>> histogram((\"\"))\n    \/\/ (new HashMap<String,Long>())\n    public static HashMap<String,Long> histogram(String test) {\n","canonical_solution":"import java.util.HashMap;\n\nclass Problem {\n    public static HashMap<String, Long> histogram(String test) {\n        HashMap<String, Long> countMap = new HashMap<>();\n        \n        if(test == null || test.isEmpty()) {\n            return countMap;\n        }\n        \n        String[] letters = test.split(\"\\\\s+\");\n        \n        long maxCount = 0;\n        \n        for(String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0L) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        HashMap<String, Long> result = new HashMap<>();\n        \n        for(Map.Entry<String, Long> entry : countMap.entrySet()) {\n            if(entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_112","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼမ်းဢၼ်ပႃး တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၶေႃႈတွပ်ႇ လႄႈ true\/false တွၼ်ႈတႃႇ လွင်ႈထတ်းသၢင်ႈ။    \/ သဵၼ်ႈသၢႆဢၼ်ၼိူင်ႈၼႆႉ ႁွင်ႉဝႃႈ palindrome (လွင်ႈဢၼ်မိူၼ်ၵၼ်) သင်ဝႃႈ မၼ်းလႆႈလူဢၢၼ်ႇၵႂႃႇၽၢႆႇလင်မိူၼ်ၵၼ်တင်း ၽၢႆႇၼႃႈၼၼ်ႉယဝ်ႉ။    \/ ယဝ်ႉၵေႃႈ တူၺ်းဝႃႈ တူဝ်ၵိုတ်းမၼ်းပဵၼ် palindrome ႁိုဝ်းၼႆ။     \/ ႁဝ်းလႆႈပၼ်ဝႆႉ သွင်တူဝ်ထႅဝ် s လႄႈ c ႁဝ်းတေလႆႈမွတ်ႇပႅတ်ႈ တူဝ်လိၵ်ႈတင်းမူတ်း ၼႂ်း s ဢၼ်ၽဵင်ႇပဵင်းၵၼ်တင်း တူဝ်လိၵ်ႈၼႂ်း c    \/ ၵၢၼ်ငၢၼ်း     \/\/ >>> reverseDelete((\"abcde\"), (\"ae\"))\n    \/\/ (Pair.with(\"bcd\", false))\n    \/\/ >>> reverseDelete((\"abcdef\"), (\"b\"))\n    \/\/ (Pair.with(\"acdef\", false))\n    \/\/ >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    \/\/ (Pair.with(\"cdedc\", true))\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        StringBuilder filteredString = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                filteredString.append(ch);\n            }\n        }\n        \n        String resultString = filteredString.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        return Pair.with(resultString, isPalindrome);\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals((Pair.with(\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals((Pair.with(\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals((Pair.with(\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals((Pair.with(\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals((Pair.with(\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals((Pair.with(\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals((Pair.with(\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals((Pair.with(\"\", true))));\n    }\n\n}\n"},{"task_id":"HumanEval_113","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တီႈတူဝ်ထႅဝ် i'th ၶွင်ၶေႃႈၶဝ်ႈ။     \/ string i ၶွင် input ၼၼ်ႉ။ တီႈၼႆႈ တူဝ်ၼပ်ႉ i တင်းမူတ်းၼႆႉ ထုၵ်ႇလီဢဝ် တူဝ်ၼပ်ႉ  ၼၼ်ႉသေ ၵေႃႇတႅၼ်းပၼ်။    \/ တူဝ်ထႅဝ်တူဝ်ၼပ်ႉ i ၶွင် output ၼႆႉ တေလႆႈပဵၼ် တူဝ်ၼပ်ႉ တူဝ်ထႅဝ်တူဝ်ၼပ်ႉ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၼႂ်းတူဝ်ၼပ်ႉ     \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ array array list of strings ဢၼ် string ၵူႊဢၼ်ၼႆႉ မၼ်းမီးတူဝ်ၼပ်ႉၵူၺ်းၼႆ ႁဝ်းတေၶိုၼ်းပၼ် array array list    \/\/ >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))\n    \/\/ >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n\n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    int digit = c - '0';\n                    if (digit % 2 != 0) {\n                        oddCount++;\n                    }\n                }\n            }\n\n            String output = \"the number of odd elements \" + oddCount +\n                            \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<String> input1 = new ArrayList<String>(Arrays.asList(\"1234567\"));\n        ArrayList<String> result1 = oddCount(input1);\n        System.out.println(result1);\n\n        ArrayList<String> input2 = new ArrayList<String>(Arrays.asList(\"3\", \"11111111\"));\n        ArrayList<String> result2 = oddCount(input2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))));\n    assert(oddCount((new ArrayList<String>(Arrays.asList((String)\"271\", (String)\"137\", (String)\"314\")))).equals((new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (String)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (String)\"the number of odd elements 2n the str2ng 2 of the 2nput.\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_114","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ ၶွင်တူဝ်ၼပ်ႉ     \/ ပေႃးပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် n တီႈၼႂ်းသဵၼ်ႈမၢႆ array array list ၼႆၸိုင် ၶူၼ်ႉႁႃတူၺ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇပႃး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇပႃး တူဝ်ၼပ်ႉဢၼ်ပႃးၼႂ်း sub-array list ၼၼ်ႉ ႁႂ်ႈလႆႈပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢေႇသုတ်းသုတ်း     \/\/ >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))\n    \/\/ (1l)\n    \/\/ >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    \/\/ (-6l)\n    public static long minSubArraySum(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"The input list cannot be null or empty\");\n        }\n\n        long minSum = Long.MAX_VALUE;\n        long currentSum = 0;\n\n        for (Long num : nums) {\n            currentSum = Math.min(currentSum + num, num);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(2L, 3L, 4L, 1L, 2L, 4L))));\n        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(-1L, -2L, -3L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l, (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l)))) == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l)))) == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l)))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_115","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ 1:     \/ ဢွၵ်ႇမႃးတီႈ တူဝ်ၼပ်ႉဢၼ်လူဝ်ႇတႃႇတေ လူင်းၵွၵ်းၸိူဝ်းၼၼ်ႉ။     \/ ၼႃႈၵၢၼ်သူၼႆႉ ပဵၼ်တႃႇၸႂ်ႉတိုဝ်း ၵွၵ်း တႃႇၽုတ်းဢွၵ်ႇ ၼမ်ႉႁူး။    \/ လႄႈ ၵူၺ်ႈၵူႈဢၼ်ၼႆႉ မီးၼမ်ႉၵတ်ႉဢၼ်လဵဝ်ၵၼ်ယူႇယဝ်ႉ။    \/ ၼမ်ႉႁူးၵူႈဢၼ်ၼႆႉ မီးဝႆႉ ၵူင်ဢၼ်ၵဵဝ်ႇၵၼ် ဢၼ်တေၸၢင်ႈၸႂ်ႉတိုဝ်းတွၼ်ႈတႃႇတေဢဝ်ၼမ်ႉဢွၵ်ႇမႃး၊     \/ လႄႈ 1 ၵူႈဢၼ်ဢၼ်ၼႆႉ ပဵၼ်တူဝ်တႅၼ်းၶွင် ၼမ်ႉဢၼ်လဵဝ်ၼၼ်ႉယဝ်ႉ။    သင်ဝႃႈႁဝ်းလႆႈပၼ်ဝႆႉ ႁွင်ႈၼမ်ႉဢၼ်မီးႁိမ်းႁွမ်းႁွင်ႇၼၼ်ႉၼႆ ၸၼ်ႉထၢၼ်ႈဢၼ်ၼိူင်ႈၼႆႉ တေတၢင်တူဝ်ႁွင်ႈၼမ်ႉဢၼ်ၼိူင်ႈၵူၺ်း၊    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\n    \/\/ (6l)\n    \/\/ Example 2:\n    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\n    \/\/ (5l)\n    \/\/ Example 3:\n    \/\/ >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))\n    \/\/ (0l)\n    \/\/ Constraints:\n    \/\/ * all wells have the same length\n    \/\/ * 1 <= grid.length <= 10^2\n    \/\/ * 1 <= grid[:,1].length <= 10^2\n    \/\/ * grid[i][j] -> 0 | 1\n    \/\/ * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n        long totalWater = 0;\n        \n        for (ArrayList<Long> row : grid) {\n            for (Long cell : row) {\n                totalWater += cell;\n            }\n        }\n\n        return (long)Math.ceil((double)totalWater \/ capacity);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 0L)),\n            new ArrayList<>(Arrays.asList(0L, 1L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L))\n        ));\n        System.out.println(maxFill(grid1, 1L)); \/\/ Output: 6\n\n        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 1L)),\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L)),\n            new ArrayList<>(Arrays.asList(0L, 1L, 1L, 1L))\n        ));\n        System.out.println(maxFill(grid2, 2L)); \/\/ Output: 5\n\n        ArrayList<ArrayList<Long>> grid3 = new ArrayList<>(Arrays.asList(\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L)),\n            new ArrayList<>(Arrays.asList(0L, 0L, 0L))\n        ));\n        System.out.println(maxFill(grid3, 5L)); \/\/ Output: 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l)) == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_116","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ မၼ်းတေလႆႈႁဵတ်းသၢင်ႈၵႂႃႇ ၼင်ႇၼႆ:     \/ တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၶွင် တူဝ်ၼပ်ႉ 1 ၼၼ်ႉ၊ ၸႅၵ်ႇၽႄၸွမ်း ၵႃႈၶၼ် တူဝ်ၼပ်ႉႁူဝ်သိပ်းၼၼ်ႉယဝ်ႉ။    \/ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ၼႂ်းတူဝ်တႅၼ်းတူဝ်ၼပ်ႉသွင်ဢၼ်ၶဝ်ၼၼ်ႉ ၸွမ်းၼင်ႇၶၵ်ႉတွၼ်ႈၶိုၼ်ႈမႃးၼၼ်ႉယဝ်ႉ။    ၼႂ်း Kata ၼႆႉ တေလႆႈၸႅၵ်ႇဝႆႉ မၢႆမီႈဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်း ၸွမ်းၼင်ႇ    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-6l, (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    \/\/ >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\nclass Problem {\n\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n        Collections.sort(arr, (a, b) -> {\n            int countOnesA = Long.bitCount(a);\n            int countOnesB = Long.bitCount(b);\n            \n            if (countOnesA != countOnesB) {\n                return countOnesA - countOnesB;\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        return arr;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 5L, 2L, 3L, 4L))));\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(-2L, -3L, -4L, -5L, -6L))));\n        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 0L, 2L, 3L, 4L))));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_117","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ သဵၼ်ႈမၢႆၶေႃႈမုၼ်းဢၼ်ၶဝ်ႈဝႆႉၼၼ်ႉ ပႃးတူဝ်လိၵ်ႈလႄႈ လွင်ႈပဝ်ႇႁၢင်ႇၵူၺ်း။     \/ သင်ဝႃႈ string s ၼႆႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးသင်ၼႆၸိုင် တူဝ်ဢိင်ၼႆႉ တေလႆႈၶိုၼ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးသင်ယဝ်ႉ။    \/n တူဝ်လေႃးၵၼ်၊ ႁႂ်ႈပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်ဢွၵ်ႇမႃးတီႈ string s ၼၼ်ႉ။     \/ ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ၶိုၼ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတင်းသဵင်ႈ တီႈၼႂ်း သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉ s ဢၼ်ပႃးဝႆႉ တူဝ်ၼပ်ႉ  ၼၼ်ႉယူႇယဝ်ႉ။    \/ ပေႃးဝႃႈႁဝ်းပၼ် string s လႄႈ တူဝ်ၼပ်ႉသၽႃႇဝ n ၼႆၸိုင် ႁဝ်းတေလႆႈဢဝ် တူဝ်ၼပ်ႉသၽႃႇဝ n ၼႆႉသေ ႁဵတ်းသၢင်ႈၵႂႃႇ    \/\/ >>> selectWords((\"Mary had a little lamb\"), (4l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"little\")))\n    \/\/ >>> selectWords((\"Mary had a little lamb\"), (3l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n    \/\/ >>> selectWords((\"simple white space\"), (2l))\n    \/\/ (new ArrayList<String>(Arrays.asList()))\n    \/\/ >>> selectWords((\"Hello world\"), (4l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"world\")))\n    \/\/ >>> selectWords((\"Uncle sam\"), (3l))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null || s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        for (String word : words) {\n            long consonantCount = countConsonants(word);\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private static long countConsonants(String word) {\n        long count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private static boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_118","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ သူတေၸၢင်ႈထၢင်ႇဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပႃးတူဝ်လိၵ်ႈ ဢင်းၵိတ်ႉၵူၺ်း။    \/ သွၵ်ႈႁႃ တူဝ်မႄႈလိၵ်ႈ ဢၼ်လႆႈထုၵ်ႇမႅၼ်ႈၸွမ်း ၶေႃႈမၵ်းမၼ်ႈၽၢႆႇၼိူဝ်ၼႆႉ။     \/ တူဝ်လိၵ်ႈတူဝ်ၸွမ် ဢၼ်တႄႇလႄႈ ဢၼ်သုတ်းၼၼ်ႉ ဢမ်ႇၼပ်ႉသွၼ်ႇ သင်ဢမ်ႇၼပ်ႉသွၼ်ႇၼႆ ၶိုၼ်းဢဝ်ၶိုၼ်း တူဝ်ၸွမ် ဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ    \/ သွင်တူဝ်လေႃးၵၼ် ဢၼ်လုၵ်ႉတီႈၽၢႆႇၶႂႃ ၶေႃႈၵႂၢမ်း ( case sensitive) ။     ၶေႃႈၵႂၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်မီး တူဝ်ၸီႉဢၼ်ၸမ်သုတ်း ဢၼ်ယူႇၼႂ်းၵႄႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ ႄလႈ    \/\/ >>> getClosestVowel((\"yogurt\"))\n    \/\/ (\"u\")\n    \/\/ >>> getClosestVowel((\"FULL\"))\n    \/\/ (\"U\")\n    \/\/ >>> getClosestVowel((\"quick\"))\n    \/\/ (\"\")\n    \/\/ >>> getClosestVowel((\"ab\"))\n    \/\/ (\"\")\n    public static String getClosestVowel(String word) {\n","canonical_solution":"public static String getClosestVowel(String word) {\n    String vowels = \"AEIOUaeiou\";\n    int len = word.length();\n    if (len < 3) {\n        return \"\";\n    }\n    \n    for (int i = len - 2; i > 0; i--) {\n        char currentChar = word.charAt(i);\n        if (vowels.indexOf(currentChar) != -1) {\n            char prevChar = word.charAt(i - 1);\n            char nextChar = word.charAt(i + 1);\n            if (vowels.indexOf(prevChar) == -1 && vowels.indexOf(nextChar) == -1) {\n                return String.valueOf(currentChar);\n            }\n        }\n    }\n    \n    return \"\";\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"},{"task_id":"HumanEval_119","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ပေႃးဝႃႈမီးလၢႆးႁဵတ်း သဵၼ်ႈမၢႆဢၼ်လီၼႆ ၶိုၼ်းပၼ် 'Yes' လႄႈ သင်ဢမ်ႇမီးလၢႆးႁဵတ်း သဵၼ်ႈမၢႆဢၼ်လီၼႆ ၶိုၼ်းပၼ် 'No'    \/ \"()) \" ၼႆႉဢမ်ႇၸႂ်ႈ။    တူဝ်ယၢင်ႇမၼ်း မိူၼ်ၼင်ႇ string '(())))' ၼႆႉ လီဝႆႉ၊ string  ၼႆႉသမ်ႉ လီဝႆႉ၊ string  ၼႆႉတႄႉ လီဝႆႉ၊ string  ၼႆႉတႄႉ လီဝႆႉ၊ string  ၼႆႉတႄႉ လီဝႆႉ၊ string  ၼႆႉတႄႉ လီဝႆႉ၊ string  ၼႆႉတႄႉ လီဝႆႉ၊ string  ၼႆႉတႄႉ လီဝႆႉ၊    \/ သဵၼ်ႈသၢႆ S ၼႆႉ ပေႃးဝႃႈ မၼ်းပဵၼ်ဢၼ်လီၼႆၸိုင် သင်ဝႃႈ သဵၼ်ႈသၢႆ S ၼႆႉ မီးဝႆႉ တူဝ်ၸုၵ်းၸွမ်တင်းသဵင်ႈၼႆၸိုင်    \/ လွင်ႈမၵ်းမၼ်ႈဢၼ်ၼိူင်ႈ၊ ဢၼ်လႆႈမႃးတီႈ သဵၼ်ႈသၢႆဢၼ်လီၼၼ်ႉ။    \/ ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇထတ်းတူၺ်းဝႃႈ ၸွင်ႇမၼ်းပဵၼ်လႆႈ တႃႇတေၵွင်ႉၵၢႆႇ သွင်ထႅဝ်ထႅဝ်ၼႆႉယူႇႁႃႉ    \/ ႁၢင်ႈႁိင်ႈ \"(\" ဢမ်ႇၼၼ် ႁၢင်ႈႁိင်ႈ \") \"ၵူၺ်း။    \/ လႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ array array ဢၼ်ပႃးဝႆႉ သွင်ထႅဝ်၊ သွင်ထႅဝ်ၼႆႉ ပဵၼ် open     \/\/ >>> matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\"))))\n    \/\/ (\"Yes\")\n    \/\/ >>> matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\"))))\n    \/\/ (\"No\")\n    public static String matchParens(ArrayList<String> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String matchParens(ArrayList<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n\n        \/\/ Check s1 + s2\n        if (isBalanced(s1 + s2)) {\n            return \"Yes\";\n        }\n\n        \/\/ Check s2 + s1\n        if (isBalanced(s2 + s1)) {\n            return \"Yes\";\n        }\n\n        \/\/ None are balanced\n        return \"No\";\n    }\n    \n    private static boolean isBalanced(String str) {\n        int balance = 0;\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) { \n                return false; \n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> test1 = new ArrayList<>(Arrays.asList(\"()(\", \")\"));\n        System.out.println(matchParens(test1)); \/\/ Output: Yes\n\n        ArrayList<String> test2 = new ArrayList<>(Arrays.asList(\")\", \")\"));\n        System.out.println(matchParens(test2)); \/\/ Output: No\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"(\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"},{"task_id":"HumanEval_120","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ 1:     \/ တၢင်းယၢဝ်း k တင်းတူဝ်ၼပ်ႉ k ဢၼ်ၼမ်သုတ်း ၼႂ်း arr။     \/ ပေႃးဝႃႈပၼ်ဝႆႉ array array list arr ၶွင်တူဝ်ၼပ်ႉတဵမ် လႄႈ တူဝ်ၼပ်ႉတဵမ် k ဢၼ်ၽဵင်ႇပဵင်းၼႆ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း list array ဢၼ်ၸႅၵ်ႇဝႆႉၼၼ်ႉ     \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))\n    \/\/ Example 2:\n    \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))\n    \/\/ Example 3:\n    \/\/ >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    \/\/ Note:\n    \/\/ 1. The length of the array array list will be in the range of [1, 1000].\n    \/\/ 2. The elements in the array array list will be in the range of [-1000, 1000].\n    \/\/ 3. 0 <= k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n        \/\/ Sort the array list in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        \/\/ Prepare the result list to store the maximum k elements\n        ArrayList<Long> result = new ArrayList<Long>();\n\n        \/\/ Add the first k elements to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        \/\/ Sort the result in ascending order as per the problem statement\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        \/\/ Example 1\n        ArrayList<Long> example1 = new ArrayList<Long>();\n        Collections.addAll(example1, -3L, -4L, 5L);\n        System.out.println(maximum(example1, 3));\n\n        \/\/ Example 2\n        ArrayList<Long> example2 = new ArrayList<Long>();\n        Collections.addAll(example2, 4L, -4L, 4L);\n        System.out.println(maximum(example2, 2));\n\n        \/\/ Example 3\n        ArrayList<Long> example3 = new ArrayList<Long>();\n        Collections.addAll(example3, -3L, 2L, 1L, 2L, -1L, -2L, 1L);\n        System.out.println(maximum(example3, 1));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l, (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_121","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတီႈပွင်ႇၼၼ်ႉၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်မီးတီႈယူႇၽဵင်ႇပဵင်းၼၼ်ႉ မႃးသႂ်ႇပၼ်    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))\n    \/\/ (12l)\n    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l))))\n    \/\/ (9l)\n    \/\/ >>> solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))\n    \/\/ (0l)\n    public static long solution(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.\n    public static long solution(ArrayList<Long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) { \/\/ Iterate over even indices (0-based)\n            long num = lst.get(i);\n            if (num % 2 != 0) { \/\/ Check if the element is odd\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    \/\/ Test the solution method\n    public static void main(String[] args) {\n        System.out.println(solution(new ArrayList<>(Arrays.asList(5L, 8L, 7L, 1L)))); \/\/ Expected output: 12\n        System.out.println(solution(new ArrayList<>(Arrays.asList(3L, 3L, 3L, 3L, 3L)))); \/\/ Expected output: 9\n        System.out.println(solution(new ArrayList<>(Arrays.asList(30L, 13L, 24L, 321L)))); \/\/ Expected output: 0\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l)))) == (9l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l)))) == (5l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)23l, (long)32l)))) == (23l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)13l, (long)2l, (long)9l)))) == (3l));\n    }\n\n}\n"},{"task_id":"HumanEval_122","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉသွင်တူဝ် တီႈသုတ်း ဢၼ်လုၵ်ႉတီႈ တူဝ်ၼပ်ႉ k ဢၼ်ဢွၼ်တၢင်းသုတ်းၶွင် arr ၼၼ်ႉသေ ႁူမ်ႈၵၼ်ဝႆႉၼၼ်ႉယဝ်ႉ။    \/ ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ဢမ်ႇၸႂ်ႈတူဝ်ဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ ဢၼ်ပဵၼ် array array list ၶွင်တူဝ်ၼပ်ႉတဵမ် arr လႄႈ တူဝ်ၼပ်ႉတဵမ် k ၼႆၸိုင် ၶိုၼ်းဢဝ်     \/\/ >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    \/\/ (24l)\n    \/\/ Constraints:\n    \/\/ 1. 1 <= len(arr) <= 100\n    \/\/ 2. 1 <= k <= len(arr)\n    public static long addElements(ArrayList<Long> arr, long k) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long addElements(ArrayList<Long> arr, long k) {\n        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            long element = arr.get(i);\n            if (element < 100) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))), (1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_123","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ get_odd_collatz(5) ၶိုၼ်းပၼ် [1, 5] # လွင်ႈၶပ်ႉၸႅၼ်ႇ collatz တႃႇ 5 ၼႆႉပဵၼ် [5, 16, 8, 4, 2, 1], ၵွပ်ႈၼၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ပဵၼ် 1 လႄႈ 5 ၵူၺ်းယဝ်ႉ။     \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ 2. ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ မေႃႇရီႇ ဢၼ်ၸႅၵ်ႇဝႆႉ ၸွမ်းၼင်ႇ ၶၵ်ႉတွၼ်ႈ ဢၼ်တိူဝ်းၶိုၼ်ႈမႃးၼၼ်ႉ။    Collatz ((1) ၼႆႉပဵၼ် [1] ယဝ်ႉ။    \/ မၢႆတွင်း:     \/ ထႅမ်းပလဵၵ်ႉ ႁူမ်ႈ 1. လွင်ႈလၢမ်းၶၢတ်ႈမၼ်းတႄႉ ပဵၼ်ဝႃႈ ဢမ်ႇဝႃႈ ၵႃႈၶၼ်ၶွင် n ၼႆႉပဵၼ်သင်၊ လွင်ႈၶပ်ႉၸႅၼ်ႇၼႆႉ တေႁွတ်ႈထိုင် 1 တႃႇသေႇယဝ်ႉ။    ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်မႃးဝႆးလင်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆ တူဝ်ၼပ်ႉဢၼ်မႃးဝႆးလင်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တိူဝ်းတူဝ်ၼပ်ႉဢၼ်မႃးဝႆးလင်ၼၼ်ႉ 3 ပုၼ်ႈၼႆယဝ်ႉ။    \/ ထႅမ်းပလဵၵ်ႉဢၼ်ပူၼ်ႉမႃး မိူၼ်ၼင်ႇတႂ်ႈၼႆႉ ပေႃးထႅမ်းပလဵၵ်ႉဢၼ်ပူၼ်ႉမႃးၼၼ်ႉ ပဵၼ်ဢၼ်ၽဵင်ႇပဵင်းၼႆ ထႅမ်းပလဵၵ်ႉဢၼ်မႃးၸွမ်းၼၼ်ႉ ပဵၼ်ၶိုင်ႈၼိူင်ႈ ၶွင်     \/ မိူၼ်ၼင်ႇ: တႄႇဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်မၼ်ႈၵိုမ်း n သေဢၼ်ဢၼ်။ ပေႃးၼၼ် တူဝ်ၼပ်ႉဢၼ်လႂ်သေဢမ်ႇဝႃႈ တေဢဝ်မႃးတီႈ တူဝ်ၼပ်ႉ  ၼၼ်ႉယဝ်ႉ။    \/ လွင်ႈလၢမ်းၶၢတ်ႈ Collatz ၼႆႉ ပဵၼ်လွင်ႈလၢမ်းၶၢတ်ႈ ၼႂ်းပၢႆးၼပ်ႉ ဢၼ်ၵဵဝ်ႇလူၺ်ႈ လွင်ႈမၵ်းမၼ်ႈဝႆႉ လွင်ႈၶပ်ႉၶိုင်ဝႆႉၼၼ်ႉယူႇ     \/ ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉ ဢၼ်ပႃး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တီႈၼႂ်း လွင်ႈၶပ်ႉၸႅၼ်ႇ collatz ၼၼ်ႉၶိုၼ်း။    \/\/ >>> getOddCollatz((5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))\n    public static ArrayList<Long> getOddCollatz(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> getOddCollatz(long n) {\n        TreeSet<Long> oddNumbers = new TreeSet<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n \/ 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1L); \/\/ Adding 1 as it is always included in the sequence\n        return new ArrayList<>(oddNumbers);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(getOddCollatz(5)); \/\/ Example usage\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getOddCollatz((14l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));\n    assert(getOddCollatz((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))));\n    assert(getOddCollatz((12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));\n    assert(getOddCollatz((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_124","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ 4. ဝၼ်းတေလႆႈမီးၼႂ်းပိူင်ၾၢင်: mm-dd-yyyy     လိူၼ်ဢၼ်ဢမ်ႇထုၵ်ႇလီပဵၼ်ဢေႇလိူဝ် 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 12 လႅမ်ႈ။    ဝၼ်းဢၼ်ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 31 ဝၼ်း တွၼ်ႈတႃႇလိူၼ် 1,3,5,7,8,10,12 လႄႈ ဝၼ်းဢၼ်ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 30 ဝၼ်း တွၼ်ႈတႃႇလိူၼ် 4,6,9,11 လႄႈ ဝၼ်းဢၼ်ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 29 တွၼ်ႈတႃႇလိူၼ် 2။    \/ 1. သဵၼ်ႈမၢႆဝၼ်းထီႉၼႆႉ ဢမ်ႇလႆႈဢိုတ်းဝႆႉ။    \/ ဝၼ်းၼၼ်ႉ မၢၼ်ႇမႅၼ်ႈယူႇ သင်ဝႃႈ ပၵ်းပိူင်ဢၼ်ၸွမ်းမႃးတင်းမူတ်းၼႆႉ လႆႈထုၵ်ႇၸွမ်းၸွမ်းၸွမ်းၼႆ:     \/ ၶိုၼ်းမွၵ်ႇ true ပေႃးဝႃႈ ဝၼ်းၼၼ်ႉ မၢၼ်ႇမႅၼ်ႈ ပေႃးဢမ်ႇၼၼ် false။     \/ တေလႆႈတႅမ်ႈ function ဢၼ်တေမၵ်းမၼ်ႈပၼ်ဝႆႉ ဝၼ်းထီႉ လႄႈ     \/\/ >>> validDate((\"03-11-2000\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"15-01-2012\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"04-0-2040\"))\n    \/\/ (false)\n    \/\/ >>> validDate((\"06-04-2020\"))\n    \/\/ (true)\n    \/\/ >>> validDate((\"06\/04\/2020\"))\n    \/\/ (false)\n    public static boolean validDate(String date) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean validDate(String date) {\n        if (date == null || date.isEmpty() || date.length() != 10) {\n            return false;\n        }\n\n        \/\/ Check if format is mm-dd-yyyy\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n\n        try {\n            int month = Integer.parseInt(date.substring(0, 2));\n            int day = Integer.parseInt(date.substring(3, 5));\n            int year = Integer.parseInt(date.substring(6, 10));\n            \n            if (month < 1 || month > 12) {\n                return false;\n            }\n\n            boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n            int[] daysInMonth = {0, 31, (isLeapYear ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            \n            if (day < 1 || day > daysInMonth[month]) {\n                return false;\n            }\n            \n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_126","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ number, return false မၵ်းမၼ်ႈဝႃႈ ဢမ်ႇမီး တူဝ်ၼပ်ႉ ဢၼ်ဢမ်ႇလီ လႄႈ တူဝ်ၼပ်ႉတဵမ်ၵူၺ်း    ပေႃးဝႃႈ array list မီးၼမ်လိူဝ် 1 ဢၼ်ၼႆၸိုင်    \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် array array list ၼႆၵေႃႈ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ဢၼ်ၶဝ်ၸႅၵ်ႇဝႆႉၼၼ်ႉယူႇႁိုဝ်ဢမ်ႇယူႇႁိုဝ်ၼႆ    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n    \/\/ (false)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    \/\/ (false)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    \/\/ (true)\n    \/\/ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))\n    \/\/ (false)\n    public static boolean isSorted(ArrayList<Long> lst) {\n","canonical_solution":"public static boolean isSorted(ArrayList<Long> lst) {\n        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n        int duplicateCount = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                duplicateCount++;\n                if (duplicateCount > 1) {\n                    return false;\n                }\n            } else {\n                duplicateCount = 0;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_127","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ [input\/output] samples:  ၸၢမ်းတူၺ်းတူၺ်း တူဝ်ယၢင်ႇ ဢၼ်ဢွၵ်ႇမႃး    \/ သင်ဝႃႈ သွင်ဢၼ်ၼႆႉ ဢမ်ႇၶွပ်ႇၵၼ်ၼႆ ၶိုၼ်းပၼ် \"NO\"    \/ ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် \"NO\"    \/ သင်ဝႃႈ တၢင်းယၢဝ်းၶွင် လွင်ႈၶွပ်ႇၵၼ်ၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉၼႆ ၶိုၼ်းပၼ်ၶေႃႈတွပ်ႇ \"YES\"    \/ ဢၼ်တၢင်းယၢဝ်းမၼ်းပဵၼ် 1 ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ။    တူဝ်ယၢင်ႇမၼ်း လွင်ႈၸတ်းတွၼ်ႈၶွင် ၶၢဝ်းယၢမ်း (1,3) ၊ (2,4) ၼႆႉပဵၼ် (2,3)     \/ intervals ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈယဝ်ႉ။    \/ ၼႃႈၵၢၼ်သူၼႆႉ ပဵၼ်တႃႇတေတႅပ်းတတ်းဝႃႈ တၢင်းယၢဝ်းဢၼ်ၶွပ်ႇၵၼ်သွင်ဢၼ်ၼႆႉ     \/ တွၼ်ႈတႃႇ ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ မၼ်းထုၵ်ႇလီဝူၼ်ႉဝႃႈ လွင်ႈတႄႇမၼ်းၼႆႉ လဵၵ်ႉလိူဝ် ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တၢင်းသုတ်းမၼ်းၼၼ်ႉယဝ်ႉ။    \/ မၼ်းၶဝ်ႈပႃးဝႆႉ တီႈတႄႇလႄႈ တီႈသုတ်းၼၼ်ႉယဝ်ႉ။    \/ ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ လႆႈဢိုတ်းဝႆႉယဝ်ႉ ပွင်ႇဝႃႈ ၶၢဝ်းယၢမ်း (တႄႇ၊ သုတ်း)     တူဝ်ယၢင်ႇမၼ်း မိူၼ်ၼင်ႇ interval = (တႄႇ၊ သုတ်း) = (1, 2)    \/ သူတေလႆႈပၼ်ၶၢဝ်းယၢမ်း သွင်ပွၵ်ႈ၊    \/\/ >>> intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l)))\n    \/\/ (\"NO\")\n    \/\/ >>> intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l)))\n    \/\/ (\"YES\")\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n","canonical_solution":"import org.javatuples.Pair;\n\npublic class Problem {\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {\n        long start1 = interval1.getValue0();\n        long end1 = interval1.getValue1();\n        long start2 = interval2.getValue0();\n        long end2 = interval2.getValue1();\n\n        long startIntersection = Math.max(start1, start2);\n        long endIntersection = Math.min(end1, end2);\n\n        if (startIntersection > endIntersection) {\n            return \"NO\";\n        }\n\n        long intersectionLength = endIntersection - startIntersection;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private static boolean isPrime(long n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intersection(Pair.with(1L, 2L), Pair.with(2L, 3L))); \/\/ \"NO\"\n        System.out.println(intersection(Pair.with(-1L, 1L), Pair.with(0L, 4L))); \/\/ \"NO\"\n        System.out.println(intersection(Pair.with(-3L, -1L), Pair.with(-5L, 5L))); \/\/ \"YES\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"},{"task_id":"HumanEval_128","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ မၢႆတွင်း: ၶိုၼ်းဢဝ် null တွၼ်ႈတႃႇ empty arr.     \/ တူဝ်ၼပ်ႉၵူႈဢၼ် ၼႂ်းသဵၼ်ႈမၢႆ array array ဢၼ်တႅၼ်းတၢင်လူၺ်ႈ 1, -1 ဢမ်ႇၼၼ် 0.    \/ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵုၼ်းလူၺ်ႈ တူဝ်ၵုၼ်းၶွင် တူဝ်ယၢင်ႇတင်းမူတ်းၼၼ်ႉ    \/ လႆႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်တင်းၼမ်လႄႈ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉတဵမ်တင်းၼမ်ၼၼ်ႉယူႇယဝ်ႉ    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l))))\n    \/\/ Optional.of(9l)\n    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l))))\n    \/\/ Optional.of(0l)\n    \/\/ >>> prodSigns((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Optional.empty()\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        long sumOfMagnitudes = 0;\n        long productOfSigns = 1;\n\n        for (Long num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            if (num < 0) {\n                productOfSigns *= -1;\n            } else if (num == 0) {\n                productOfSigns = 0;\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n    \n    public static void main(String[] args) {\n        \/\/ Test cases\n        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, -4L)))); \/\/ Optional[9]\n        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(0L, 1L)))); \/\/ Optional[0]\n        System.out.println(prodSigns(new ArrayList<Long>())); \/\/ Optional.empty\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l, (long)1l)))).equals(Optional.of(4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n    }\n\n}\n"},{"task_id":"HumanEval_129","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်မီးတီႈၼိူဝ် သႄး (လ်) ဢၼ်သဵၼ်ႈတၢင်းဢၼ်ဢေႇသုတ်းမၼ်း လတ်းမႃးၼၼ်ႉသေ မၢႆပၼ်ဝႆႉပဵၼ် ပိူင်ထၢၼ်ႈ။     \/ မၼ်းလႆႈႁပ်ႉႁွင်းဝႆႉဝႃႈ ၶေႃႈတွပ်ႇမၼ်းၼႆႉ ပဵၼ်ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်။     \/ lst_A[j] = lst_B[j]။    \/ ၼင်ႇ lst_A[i] < lst_B[i] လႄႈ တွၼ်ႈတႃႇ j (1 <= j < i) ႁဝ်းမီး     \/ လိူဝ်သေ lst_B၊ ပေႃးဢဝ်ၶေႃႈၵႂၢမ်းတၢင်ႇဢၼ်ဝႃႈၼႆ မၼ်းမီးဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ပဵၼ် index i (1 <= i <= k)     \/ ၸွမ်းၼင်ႇ (ႁဝ်းႁွင်ႉၶဝ် lst_A လႄႈ lst_B) ၊ lst_A ၼႆႉ ပဵၼ်လွင်ႈဢၼ်ဢေႇလိူဝ်သေၼႂ်းပွင်ႈၵႂၢမ်း။    \/ ဝၢႆးသေႁဵတ်းဝႆႉ လွင်ႈၸႅၵ်ႇမႅင်ႇဢၼ်မီးပိူင်ဝႆႉၼၼ်ႉယဝ်ႉ မၼ်းတေၼႄပၼ်ၵႃႈၶၼ် တီႈၼႂ်းသႄး (လ်) ဢၼ် A လႄႈ B ၵႂႃႇယူႇၼၼ်ႉယူႇယဝ်ႉ။    \/ သဵၼ်ႈတၢင်း A (တၢင်းယၢဝ်း k) ၼႆႉ ပေႃးဝႃႈ     \/ သူဢမ်ႇၸၢင်ႈဢွၵ်ႇပႅတ်ႈတီႈၼႂ်းၶွပ်ႇ။    \/ ဢမ်ႇလူဝ်ႇပႅၵ်ႇပိူင်ႈၵၼ်) ။    \/ ၶႅၼ်းတေႃႈမၢႆတွင်းဝႆႉဝႃႈ သဵၼ်ႈတၢင်းတၢင်းဢၼ်ယၢဝ်း k ၼၼ်ႉ ပွင်ႇဝႃႈ လႅၵ်ႈလၢႆႈတီႈ သႄးလ် k (ဢမ်ႇၸႂ်ႈ     \/ သႄး (လ်)    ပေႃးလၢတ်ႈထႅင်ႈလၢႆးၼိုင်ႈ၊ သူတေၵႂႃႇတီႈ သႄး (လ်) ဢၼ်လႆႈၽႄဝႆႉၶၢင်ႈတၢင်းဢၼ်မီးလွင်ႈၸၼ်ၵၼ်ဝႆႉၼၼ်ႉယူႇယဝ်ႉ။    \/ တီႈၼႂ်းသႄးလ်ဢၼ်လႂ်သေဢမ်ႇဝႃႈ လႄႈ တီႈသႄးလ်ဢၼ်လႂ်သေဢမ်ႇဝႃႈၼၼ်ႉ သူတေၶၢႆႉၵႂႃႇတီႈသႄးလ်ဢၼ်မီးႁိမ်းႁွမ်းၼၼ်ႉသေဢမ်ႇဝႃႈ၊    တေလႆႈႁႃ သဵၼ်ႈတၢင်းဢၼ်ယၢဝ်း k တီႈၼႂ်းၵွင်ႉၼၼ်ႉ။    \/ inclusive ၼႆႉ တေဢွၵ်ႇမႃးၵမ်းလဵဝ် တီႈၼႂ်းၶွပ်ႇၶွင် ၶွပ်ႇၼၼ်ႉယူႇယဝ်ႉ။    \/ တီႈၼႂ်းၵွၵ်းၼႆႉ မၼ်းမီးဝႆႉ ၵႃႈၶၼ် ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ    \/ ပေႃးဝႃႈမီးဝႆႉ grid ဢၼ်ၼိူင်ႈဢၼ်ဢၼ်မီး ထႅဝ် N လႄႈ ၵႅၼ် N (N >= 2) လႄႈ တူဝ်ၼပ်ႉတဵမ် k ဢၼ်ၽဵင်ႇပဵင်းၼၼ်ႉၼႆ     \/\/ >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))\n    \/\/ >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l)))\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.PriorityQueue;\n\nclass Problem {\n\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n        int n = grid.size();\n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n\n        PriorityQueue<Path> pq = new PriorityQueue<>();\n        \/\/ Start from each cell and try to find the minimum path\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.add(new Path(i, j, k, grid.get(i).get(j)));\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            Path current = pq.poll();\n            if (current.k == 1) {\n                return current.path;\n            }\n            for (int dir = 0; dir < 4; dir++) {\n                int ni = current.x + dx[dir];\n                int nj = current.y + dy[dir];\n                if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n                    ArrayList<Long> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(ni).get(nj));\n                    pq.add(new Path(ni, nj, current.k - 1, newPath));\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    static class Path implements Comparable<Path> {\n        int x, y;\n        long k;\n        ArrayList<Long> path;\n\n        Path(int x, int y, long k, long value) {\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = new ArrayList<>();\n            this.path.add(value);\n        }\n\n        Path(int x, int y, long k, ArrayList<Long> path) {\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = path;\n        }\n\n        @Override\n        public int compareTo(Path other) {\n            for (int i = 0; i < this.path.size(); i++) {\n                int comparison = Long.compare(this.path.get(i), other.path.get(i));\n                if (comparison != 0) {\n                    return comparison;\n                }\n            }\n            return 0;\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>();\n        grid1.add(new ArrayList<>(Arrays.asList(1L, 2L, 3L)));\n        grid1.add(new ArrayList<>(Arrays.asList(4L, 5L, 6L)));\n        grid1.add(new ArrayList<>(Arrays.asList(7L, 8L, 9L)));\n        System.out.println(minPath(grid1, 3L));\n\n        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>();\n        grid2.add(new ArrayList<>(Arrays.asList(5L, 9L, 3L)));\n        grid2.add(new ArrayList<>(Arrays.asList(4L, 1L, 6L)));\n        grid2.add(new ArrayList<>(Arrays.asList(7L, 8L, 2L)));\n        System.out.println(minPath(grid2, 1L));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l, (long)10l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l, (long)7l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_130","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ တူဝ်ၼပ်ႉ n + 1 ဢၼ်ဢွၼ်တၢင်းသုတ်း ၶွင်လွင်ႈၶပ်ႉၸႅၼ်ႇ Tribonacci။     \/ ပေႃးႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်း n ၼႆ ႁဝ်းတေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်    \/ = 2 + 3 + 3 = 8    \/tri(3) = tri(2) + tri(1) + tri(4)     \/tri(4) = 3     \/tri(2) = 1 + (2 \/ 2) = 2     \/ ပိူင်တႅၵ်ႈမၼ်း:     \/tri(n) =tri(n - 1) +tri(n - 2) +tri(n + 1) သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼိူင်ႈၼႆယဝ်ႉ။    \/tri(n) = 1 + n \/ 2 သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၸႅၵ်ႈၼႆယဝ်ႉ။    \/tri(1) = 3     \/ လွင်ႈၸႅၵ်ႇၽႄၸႆႉႁေႇ Tribonacci ၼႆႉ မၵ်းမၼ်ႈလူၺ်ႈ လွင်ႈပဵၼ်မႃးၶိုၼ်း:     ၵူၺ်းၵႃႈ ဢၼ်ၵူၼ်းႁဝ်းဢမ်ႇႁူႉၼၼ်ႉတႄႉ ပဵၼ်လွင်ႈၸႅၵ်ႇမႅင်ႇ Tribonacci sequence ၼၼ်ႉယဝ်ႉ။    ၵူၼ်းၵူႈၵေႃႉႁူႉၸၵ်း Fibonacci sequence မၼ်းလႆႈထုၵ်ႇလဵပ်ႈႁဵၼ်းဝႆႉႁၢဝ်ႈႁႅင်း လူၺ်ႈၽူႈလူင်ႉလႅၼ်ႇပၢႆးၼပ်ႉ ၼႂ်း     \/\/ >>> tri((3l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Problem {\n    public static ArrayList<Long> tri(long n) {\n        \/\/ Return empty list if n is negative\n        if (n < 0) {\n            return new ArrayList<>();\n        }\n        \n        \/\/ Create an ArrayList to store the Tribonacci sequence\n        ArrayList<Long> tribonacci = new ArrayList<>();\n        \n        \/\/ Define the base cases\n        if (n >= 0) {\n            tribonacci.add(1L);  \/\/ tri(0)\n        }\n        if (n >= 1) {\n            tribonacci.add(3L);  \/\/ tri(1)\n        }\n        \n        \/\/ Calculate the values for the sequence from tri(2) to tri(n)\n        for (long i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i \/ 2);\n            } else {\n                long value = tribonacci.get((int)(i - 1)) \n                           + tribonacci.get((int)(i - 2)) \n                           + tribonacci.get((int)(i + 1 - 2)); \/\/ i+1-2 = i-1 (next i is processed)\n                tribonacci.add(value);\n            }\n        }\n        \n        return tribonacci;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(tri(3)); \/\/ Outputs: [1, 3, 2, 8]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_131","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ ၶိုၼ်းပၼ် 0 သင်ဝႃႈ တူဝ်ၼပ်ႉတင်းမူတ်းပဵၼ်တူဝ်ၸႅၵ်ႇၵၼ်ၼႆ။     \/ ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ n ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉသေ ပၼ်ႇၶွပ်ႈပၼ်။     \/\/ >>> digits((1l))\n    \/\/ (1l)\n    \/\/ >>> digits((4l))\n    \/\/ (0l)\n    \/\/ >>> digits((235l))\n    \/\/ (15l)\n    public static long digits(long n) {\n","canonical_solution":"public static long digits(long n) {\n        long product = 1;\n        boolean hasOddDigit = false;\n        \n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n \/= 10;\n        }\n        \n        return hasOddDigit ? product : 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_132","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တီႈဢေႇသုတ်းမၼ်း သဵၼ်ႈမၢႆဢၼ်ၼိုင်ႈ ၼႂ်းၸႄႈတွၼ်ႈၼၼ်ႉ လႆႈထုၵ်ႇသႂ်ႇဝႆႉတီႈၼႂ်းၵွင်ႉမၼ်းဝႆႉယူႇယဝ်ႉ။    \/ Function ၼႆႉ တေလႆႈၶိုၼ်း true သင်ၸိူဝ်ႉဝႃႈ မၼ်းမီးဝႆႉ brackets ဢၼ်ထုၵ်ႇမႅၼ်ႈၼႆၵူၺ်း    \/ ႁဵတ်းပၼ် function ဢၼ်ဢဝ် string ဢၼ်ပႃး square brackets ၼၼ်ႉသေ သႂ်ႇပၼ်။    \/\/ >>> isNested((\"[[]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[]]]]]]][[[[[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[][]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[]\"))\n    \/\/ (false)\n    \/\/ >>> isNested((\"[[][]]\"))\n    \/\/ (true)\n    \/\/ >>> isNested((\"[[]][[\"))\n    \/\/ (true)\n    public static boolean isNested(String string) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static boolean isNested(String string) {\n        int openCount = 0;\n        boolean hasNested = false;\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                openCount++;\n            } else if (c == ']') {\n                if (openCount > 0) {\n                    openCount--;\n                    \/\/ If we find a pair and there was an unmatched '[' before this ']'\n                    \/\/ it means there was nesting.\n                    hasNested = true;\n                }\n                \n                if (openCount < 0) {\n                    \/\/ If at any point we have more closing brackets than opening ones,\n                    \/\/ it's invalid, so reset openCount.\n                    openCount = 0;\n                }\n            }\n        }\n        \n        return hasNested;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); \/\/ true\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); \/\/ false\n        System.out.println(isNested(\"[][]\")); \/\/ false\n        System.out.println(isNested(\"[]\")); \/\/ false\n        System.out.println(isNested(\"[[][]]\")); \/\/ true\n        System.out.println(isNested(\"[[]][[\")); \/\/ true\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_133","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ သဵၼ်ႈမၢႆဢၼ်မီးဝႆႉတီႈၼႂ်း array list ၼၼ်ႉ ႁႂ်ႈပဵၼ်ဢၼ်ၶိုၵ်ႉတွၼ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်းသုတ်း    \/ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်တဵမ်ထူၼ်ႈ တီႈၼႂ်းသဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊     \/ သူတေလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉ ဢၼ်ပႃးဝႆႉတီႈၼႂ်း array array ၼၼ်ႉယူႇယဝ်ႉ။    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n    \/\/ (14l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f, (float)9.0f))))\n    \/\/ (98l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f))))\n    \/\/ (84l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n    \/\/ (29l)\n    \/\/ >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f))))\n    \/\/ (6l)\n    public static long sumSquares(ArrayList<Float> lst) {\n","canonical_solution":"public static long sumSquares(ArrayList<Float> lst) {\n        return lst.stream()\n                  .mapToInt(f -> (int) Math.ceil(f))\n                  .map(i -> i * i)\n                  .sum();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f, (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_134","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ မၢႆတွင်း: \"ၶေႃႈၵႂၢမ်း\" ၼႆႉ ပဵၼ်ၸုမ်းတူဝ်လိၵ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈႁွင်ႈ။    \/ ပဵၼ်ပွတ်းတွၼ်ႈၶွင် ၶေႃႈၵႂၢမ်းဢၼ်ၼိူင်ႈ လႄႈ ဢမ်ႇၸိုဝ်ႈၸႂ်ႈ ပေႃးဢမ်ႇၼၼ်။    \/ ၶွင် string ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်လိၵ်ႈ တူဝ်လိၵ်ႈ လႄႈ ဢမ်ႇၸႂ်ႈဝႃႈ ပဵၼ်     \/ ႁဵတ်းပၼ် function ဢၼ်ၶိုၼ်းပၼ် true သင်ၸိူဝ်ႉဝႃႈ တူဝ်လိၵ်ႈလိုၼ်းသုတ်း     \/\/ >>> checkIfLastCharIsALetter((\"apple pie\"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    \/\/ (true)\n    \/\/ >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    \/\/ (false)\n    \/\/ >>> checkIfLastCharIsALetter((\"\"))\n    \/\/ (false)\n    public static boolean checkIfLastCharIsALetter(String txt) {\n","canonical_solution":"public static boolean checkIfLastCharIsALetter(String txt) {\n    txt = txt.trim();\n    if (txt.isEmpty()) {\n        return false;\n    }\n    String[] words = txt.split(\" \");\n    String lastWord = words[words.length - 1];\n    if (lastWord.isEmpty()) {\n        return false;\n    }\n    char lastChar = lastWord.charAt(lastWord.length() - 1);\n    return Character.isLetter(lastChar);\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_135","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ ၵႃႈၶၼ်ဢၼ်မိူၼ်ၵၼ်။    \/ ဢမ်ႇမီး တူဝ်ထႅဝ်ဢၼ်ၼၼ်ႉၼႆၵေႃႈ ၶိုၼ်းဢဝ် - 1 မႃး။ သဵၼ်ႈမၢႆ array array ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တေဢမ်ႇပႃး     \/ ၼႆႉဢမ်ႇယႂ်ႇလိူဝ် ဢမ်ႇၼၼ် ဢမ်ႇၽဵင်ႇပဵင်းၵၼ်တၢင်း တူဝ်ၼပ်ႉဢၼ်မီးဝႆႉၸမ်မၼ်းၼၼ်ႉ သင်ဝႃႈ    \/ ႁဵတ်းပၼ် function ဢၼ်တေၶိုၼ်းပၼ် index ဢၼ်ယႂ်ႇသုတ်းၶွင် ၶူဝ်းၶွင်ဢၼ်ဢၼ်     \/\/ >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\n    \/\/ (3l)\n    \/\/ >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    \/\/ (-1l)\n    public static long canArrange(ArrayList<Long> arr) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    \/\/ Create a function which returns the largest index of an element which\n    \/\/ is not greater than or equal to the element immediately preceding it.\n    \/\/ If no such element exists then return -1. The given array list will not\n    \/\/ contain duplicate values.\n\n    public static long canArrange(ArrayList<Long> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 3L, 5L));\n        System.out.println(canArrange(list1)); \/\/ Output: 3\n        \n        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\n        System.out.println(canArrange(list2)); \/\/ Output: -1\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"},{"task_id":"HumanEval_136","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ သင်ဢမ်ႇမီး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇမီးလွင်ႈထွၼ် ဢမ်ႇၼၼ် ဢၼ်မီးလွင်ႈထွၼ်ၼႆ ၶိုၼ်းဢဝ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးလွင်ႈထွၼ်ၼၼ်ႉၶိုၼ်း။    \/ ၶွင်တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ ၼႂ်းသဵၼ်ႈမၢႆ array array။     \/ ဢၼ်ယႂ်ႇသုတ်း ၼႂ်းတူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇတဵမ်ၼၼ်ႉ လႄႈ 'b' ၼႆႉ ပဵၼ်ဢၼ်လဵၵ်ႉသုတ်း     \/ ႁဵတ်းပၼ် function ဢၼ်ၶိုၼ်းပၼ်ပၼ် pair (a, b) တီႈဢၼ် 'a' ပဵၼ်     \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l))))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(1l))\n    \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList())))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    \/\/ >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l))))\n    \/\/ Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long> smallestPositive = Optional.empty();\n\n        for (Long num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n        \n        return Pair.with(largestNegative, smallestPositive);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Optional.of(Pair.with(-2l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Optional.of(Pair.with(-7l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Optional.of(Pair.with(-9l, 2l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));\n    }\n\n}\n"},{"task_id":"HumanEval_138","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ တႅၵ်ႈတူၺ်းဝႃႈ တူဝ်ၼပ်ႉ n ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ၸွင်ႇတေတႅမ်ႈလႆႈမိူၼ်ၼင်ႇ တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ်ဝႆႉ 4 တူဝ်ထပ်ႈႁူဝ် ဢၼ်ၸမ်ၵၼ်ၼၼ်ႉႁႃႉၼႆၼၼ်ႉ    \/\/ >>> isEqualToSumEven((4l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((6l))\n    \/\/ (false)\n    \/\/ >>> isEqualToSumEven((8l))\n    \/\/ (true)\n    public static boolean isEqualToSumEven(long n) {\n","canonical_solution":"\/\/ Check if the number n is at least 8 since the smallest sum of 4 positive even numbers is 2+2+2+2=8\n        if (n < 8) {\n            return false;\n        }\n\n        \/\/ If n is divisible by 2 and n\/2 is even, then n can be expressed as the sum of 4 positive even numbers\n        return n % 2 == 0;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_139","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ တီႈဢၼ် n > 0     \/ brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!     \/ Brazil ၼႆႉ မၼ်းလႆႈမၵ်းမၼ်ႈဝႆႉဝႃႈ:     \/\/ >>> specialFactorial((4l))\n    \/\/ (288l)\n    \/\/ The function will receive an integer as input and should return the special\n    \/\/ factorial of this integer.\n    public static long specialFactorial(long n) {\n","canonical_solution":"import java.util.stream.LongStream;\n\npublic class Problem {\n    \/\/ The Brazilian factorial is defined as:\n    \/\/ brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    \/\/ where n > 0\n\n    public static long specialFactorial(long n) {\n        return LongStream.rangeClosed(1, n)\n                .map(Problem::factorial)\n                .reduce(1, (a, b) -> a * b);\n    }\n\n    private static long factorial(long num) {\n        return LongStream.rangeClosed(1, num)\n                .reduce(1, (a, b) -> a * b);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4)); \/\/ Output: 288\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"},{"task_id":"HumanEval_140","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ယဝ်ႉၵေႃႈ ဢဝ်တူဝ် -  သႂ်ႇတီႈၼႂ်းႁွင်ႈဢၼ်ၵိုတ်းဝႆႉယူႇၵူႈဢၼ်ၼၼ်ႉ    \/ လႄႈ သင်ဝႃႈ သဵၼ်ႈမၢႆမၼ်းမီးဝႆႉ တူဝ်ဢၼ်ဢမ်ႇၵိုတ်းၵၼ် 2 တူဝ်လိူဝ်ၼၼ်ႉၼႆၸိုင်    \/ ပေႃးဝႃႈႁဝ်းလႆႈပၼ်လိၵ်ႈဢၼ်ပဵၼ် သၢႆထႅဝ်လိၵ်ႈၼႆ ဢဝ်တူဝ်လိၵ်ႈဢၼ်ၸီႉဝႆႉတႂ်ႈသုတ်းသေ တႅၼ်းတၢင်ပၼ် တီႈၵိုတ်းဝႆႉတင်းသဵင်ႈ၊    \/\/ >>> fixSpaces((\" Example\"))\n    \/\/ (\"Example\")\n    \/\/ >>> fixSpaces((\" Example 1\"))\n    \/\/ (\"Example_1\")\n    \/\/ >>> fixSpaces((\" Example 2\"))\n    \/\/ (\"_Example_2\")\n    \/\/ >>> fixSpaces((\" Example 3\"))\n    \/\/ (\"_Example-3\")\n    public static String fixSpaces(String text) {\n","canonical_solution":"if (text == null || text.isEmpty()) {\n        return text;\n    }\n    \n    StringBuilder result = new StringBuilder();\n    int spaceCount = 0;\n    for (char c : text.toCharArray()) {\n        if (c == ' ') {\n            spaceCount++;\n        } else {\n            if (spaceCount == 1) {\n                result.append('_');\n            } else if (spaceCount > 1) {\n                result.append('-');\n            }\n            result.append(c);\n            spaceCount = 0;\n        }\n    }\n    \n    \/\/ Handle trailing spaces\n    if (spaceCount == 1) {\n        result.append('_');\n    } else if (spaceCount > 1) {\n        result.append('-');\n    }\n    \n    return result.toString();\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"},{"task_id":"HumanEval_141","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ - သၢႆထႅဝ်ဢၼ်ယူႇၽၢႆႇလင် dot ၼၼ်ႉ ထုၵ်ႇလီပဵၼ်ဢၼ်ၼိူင်ႈၼႂ်းဢၼ်ၼႆႉ: ['txt', 'exe', 'dll']     \/ တူဝ်လိၵ်ႈ လႅတ်ႇတိၼ်ႇ (Latin) ('a'-'z' and 'A'-'Z')     \/ - တူဝ်လိၵ်ႈဢၼ်မီးၽၢႆႇလင်သုတ်းၼၼ်ႉ ဢမ်ႇထုၵ်ႇလီပဵၼ် တူဝ်ဢၼ်ဢမ်ႇမီးတီႈသုတ်း လႄႈ မၼ်းတေတႄႇလူၺ်ႈ တူဝ်လိၵ်ႈဢၼ်ပဵၼ်     \/ - ၸိုဝ်ႈၾၢႆႇဢၼ်ၼႆႉ မၼ်းမီးဝႆႉ ထႅဝ်ဢၼ်လဵဝ်ၵူၺ်း '.'     \/ - တီႈၸိုဝ်ႈၾၢႆႇဢၼ်ၼႆႉ ဢမ်ႇထုၵ်ႇလီမီးတူဝ်ၼပ်ႉလိူဝ်သေသၢမ်တူဝ် (0-9) ။    \/ လႆႈႁူပ်ႉထူပ်းၵၼ်     \/ ၸိုဝ်ႈၾၢႆႇဢၼ်ၼိုင်ႈၼႆႉ တေလႆႈဝႃႈပဵၼ်ၸိုဝ်ႈဢၼ်ထုၵ်ႇမႅၼ်ႈယူႇ သင်ဝႃႈ မီးဝႆႉ ၶေႃႈမၵ်းမၼ်ႈတၢင်းမူတ်းၼႆႉယဝ်ႉ     \/ 'Yes' သင်ဝႃႈ ၸိုဝ်ႈၾၢႆႇဢၼ်ၼႆႉ မၢၼ်ႇမႅၼ်ႈၼႆ လႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆ ၶိုၼ်းပၼ်ၶေႃႈၵႂၢမ်း 'No'    \/ ႁဵတ်းပၼ် function ဢၼ်ဢဝ် string ဢၼ်တၢင်တူဝ်ၸိုဝ်ႈ file သေ ၶိုၼ်းပၼ်ၶိုၼ်း     \/\/ >>> fileNameCheck((\"example.txt\"))\n    \/\/ (\"Yes\")\n    \/\/ >>> fileNameCheck((\"1example.dll\"))\n    \/\/ (\"No\")\n    public static String fileNameCheck(String file_name) {\n","canonical_solution":"if (file_name == null || file_name.isEmpty()) {\n        return \"No\";\n    }\n    \n    \/\/ Split the file name into two parts: before and after the dot.\n    String[] parts = file_name.split(\"\\\\.\");\n    \n    \/\/ Check for exactly one dot and non-empty parts.\n    if (parts.length != 2 || parts[0].isEmpty() || parts[1].isEmpty()) {\n        return \"No\";\n    }\n    \n    \/\/ Check the extension validity.\n    Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n    if (!validExtensions.contains(parts[1])) {\n        return \"No\";\n    }\n\n    \/\/ Check that the first character before the dot is a letter.\n    if (!Character.isLetter(parts[0].charAt(0))) {\n        return \"No\";\n    }\n\n    \/\/ Count the number of digits in the part before the dot.\n    int digitCount = 0;\n    for (char c : parts[0].toCharArray()) {\n        if (Character.isDigit(c)) {\n            digitCount++;\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n    }\n\n    \/\/ All conditions are satisfied, return \"Yes\".\n    return \"Yes\";\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"},{"task_id":"HumanEval_142","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ တေလႅၵ်ႈလၢႆႈ တူဝ်ၼပ်ႉၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ၼမ်လိူဝ် 3 ဢမ်ႇၼၼ် 4 ၼၼ်ႉသေယဝ်ႉ တေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉတင်းမူတ်း ဢၼ်လႆႈသႂ်ႇဝႆႉၼၼ်ႉ။    \/ ဢၼ်ၼမ်လိူဝ် 3 လႄႈ တေဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၶဝ်ႈမႃးၼၼ်ႉ ႁဵတ်းပဵၼ် တူဝ်ၼပ်ႉသၢမ်တူဝ် သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈမႃးၼၼ်ႉ ပဵၼ်တူဝ်ၼမ်လိူဝ် 4 လႄႈ ဢမ်ႇၸႂ်ႈတူဝ်ၼမ်လိူဝ် 3 ၼႆၸိုင် ၽွၼ်ႉၸေႃႇၵျီႇၼႆႉ တေဢမ်ႇႁဵတ်းႁႂ်ႈ     \/ တူဝ်ဢိင်ဢၼ်ၼႆႉ တေဢဝ် တူဝ်ၼပ်ႉတဵမ်တင်းၼမ် ဢၼ်ပႃးၼႂ်း array array list ၼၼ်ႉသေ ႁဵတ်းပဵၼ် square တူဝ်ၼပ်ႉတဵမ်တင်းမူတ်း ဢၼ်ပႃးၼႂ်း array list ၼၼ်ႉ သင်ဝႃႈ တူဝ်ဢိင်မၼ်းပဵၼ် a     \/ \"     \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))\n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList())\n    \/\/ >>> lst\n    \/\/ (long)new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l))\n    public static long sumSquares(ArrayList<Long> lst) {\n","canonical_solution":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumSquares(ArrayList<Long> lst) {\n        long sum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            Long number = lst.get(i);\n            if (i % 3 == 0) {\n                sum += Math.pow(number, 2);\n            } else if (i % 4 == 0) {\n                sum += Math.pow(number, 3);\n            } else {\n                sum += number;\n            }\n        }\n\n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l)))) == (14l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))) == (9l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l)))) == (-3l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)0l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l)))) == (-126l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-56l, (long)-99l, (long)1l, (long)0l, (long)-2l)))) == (3030l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)-1l)))) == (0l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-16l, (long)-9l, (long)-2l, (long)36l, (long)36l, (long)26l, (long)-20l, (long)25l, (long)-40l, (long)20l, (long)-4l, (long)12l, (long)-26l, (long)35l, (long)37l)))) == (-14196l));\n    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)17l, (long)-1l, (long)-15l, (long)13l, (long)-1l, (long)14l, (long)-14l, (long)-12l, (long)-5l, (long)14l, (long)-14l, (long)6l, (long)13l, (long)11l, (long)16l, (long)16l, (long)4l, (long)10l)))) == (-1448l));\n    }\n\n}\n"},{"task_id":"HumanEval_143","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ 1:     \/ လွင်ႈၶပ်ႉၶိုင် ၶေႃႈၵႂၢမ်း ၼႂ်းသဵၼ်ႈလိၵ်ႈမႂ်ႇၼႆႉ ထုၵ်ႇလီမိူၼ်ၵၼ်တင်း ၶေႃႈၵႂၢမ်းငဝ်ႈမၼ်း။    \/ ဢၼ်တၢင်းယၢဝ်းမၼ်းပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ၊     \/ လႄႈ တေလႆႈၶိုၼ်းဢဝ် string ဢၼ်ပႃးၶေႃႈၵႂၢမ်း တီႈၼႂ်းၶေႃႈၵႂၢမ်းငဝ်ႈမၼ်းၼၼ်ႉ၊    \/ ၼႂ်းၶေႃႈၵႂၢမ်းၼၼ်ႉ မီးၶေႃႈၵႂၢမ်းဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈႁွင်ႈၵိုတ်း၊     \/ သူတေလႆႈပၼ် string ဢၼ်တႅၼ်းတၢင်ၶေႃႈၵႂၢမ်း၊     \/\/ >>> wordsInSentence((\"This is a test\"))\n    \/\/ (\"is\")\n    \/\/ Example 2:\n    \/\/ >>> wordsInSentence((\"lets go for swimming\"))\n    \/\/ (\"go for\")\n    \/\/ Constraints:\n    \/\/ * 1 <= len(sentence) <= 100\n    \/\/ * sentence contains only letters\n    public static String wordsInSentence(String sentence) {\n","canonical_solution":"public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        return String.join(\" \", primeLengthWords);\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"},{"task_id":"HumanEval_144","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ႁဝ်းၸၢင်ႈဝူၼ်ႉဝႃႈ x, လႄႈ n ၼႆႉပဵၼ် တူဝ်ၼပ်ႉပုၼ်ႈဢၼ်ထုၵ်ႇမႅၼ်ႈ လႄႈ ဢမ်ႇမီးသုၼ်ပဵၼ် တူဝ်ၼပ်ႉၸႅၵ်ႇ။     \/ <numerator>\/<denominator> တီႈဢၼ် numerator လႄႈ denominator တင်းသွင်ဢၼ် ပဵၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉယဝ်ႉ။    x လႄႈ n ၼႆႉ ပဵၼ်တူဝ်တႅၼ်း တူဝ်ၼပ်ႉသွၼ်ႇ ၶွင် တူဝ်ၼပ်ႉပုၼ်ႈသေ မီးပိူင်ၾၢင် ၼင်ႇတႂ်ႈၼႆႉယဝ်ႉ။    \/ x * n ၼႆႉ ပေႃးဝႃႈ x * n ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ် လႄႈ false ၼႆၸိုင် ၽွၼ်ႉၸေႃႇတႄႇမၼ်းတေၶိုၼ်းပဵၼ် true မႃးယူႇယဝ်ႉ။    \/ ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတေႁဵတ်းသၢင်ႈ တူဝ်ဢိင်ဢၼ်တေႁဵတ်းႁႂ်ႈ လွင်ႈလၢတ်ႈဢွၵ်ႇၼၼ်ႉ ငၢႆႈငၢႆႈ     \/\/ >>> simplify((\"1\/5\"), (\"5\/1\"))\n    \/\/ (true)\n    \/\/ >>> simplify((\"1\/6\"), (\"2\/1\"))\n    \/\/ (false)\n    \/\/ >>> simplify((\"7\/10\"), (\"10\/2\"))\n    \/\/ (false)\n    public static boolean simplify(String x, String n) {\n","canonical_solution":"public static boolean simplify(String x, String n) {\n    \/\/ Split the fractions into numerators and denominators\n    String[] fracX = x.split(\"\/\");\n    String[] fracN = n.split(\"\/\");\n    \n    \/\/ Parse numerators and denominators as integers\n    int numX = Integer.parseInt(fracX[0]);\n    int denX = Integer.parseInt(fracX[1]);\n    int numN = Integer.parseInt(fracN[0]);\n    int denN = Integer.parseInt(fracN[1]);\n\n    \/\/ Calculate the product of x * n\n    int productNumerator = numX * numN;\n    int productDenominator = denX * denN;\n\n    \/\/ Simplify the product fraction\n    int gcd = gcd(productNumerator, productDenominator);\n\n    \/\/ If the simplified denominator is 1, then it is a whole number\n    return productDenominator \/ gcd == 1;\n}\n\n\/\/ Helper method to calculate the greatest common divisor\nprivate static int gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/6\"), (\"2\/1\")) == (false));\n    assert(simplify((\"5\/1\"), (\"3\/1\")) == (true));\n    assert(simplify((\"7\/10\"), (\"10\/2\")) == (false));\n    assert(simplify((\"2\/10\"), (\"50\/10\")) == (true));\n    assert(simplify((\"7\/2\"), (\"4\/2\")) == (true));\n    assert(simplify((\"11\/6\"), (\"6\/1\")) == (true));\n    assert(simplify((\"2\/3\"), (\"5\/2\")) == (false));\n    assert(simplify((\"5\/2\"), (\"3\/5\")) == (false));\n    assert(simplify((\"2\/4\"), (\"8\/4\")) == (true));\n    assert(simplify((\"2\/4\"), (\"4\/2\")) == (true));\n    assert(simplify((\"1\/5\"), (\"5\/1\")) == (true));\n    assert(simplify((\"1\/5\"), (\"1\/5\")) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_145","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ ႁႂ်ႈမၼ်းၸႅၵ်ႇၽႄၵၼ် ၸွမ်းၼင်ႇ သဵၼ်ႈမၢႆ ဢၼ်ၶဝ်မီးဝႆႉ တီႈၼႂ်း သဵၼ်ႈမၢႆ မေႃႇရီႇ ဢၼ်ၵဝ်ႇၼၼ်ႉ။    \/ မၢႆတွင်း: သင်ဝႃႈမီးဝႆႉ ထႅမ်းပလဵၵ်ႉတၢင်းၼမ် ဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉ    \/ ၸွမ်းၼင်ႇ လွင်ႈၶပ်ႉၶိုင် ဢၼ်တိူဝ်းလိူဝ်မႃး ၸွမ်းၼင်ႇ တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉၶဝ်ၼၼ်ႉယဝ်ႉ။    \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ၸႅၵ်ႇပၼ်ဝႆႉ သဵၼ်ႈမၢႆ မေႃႇလီႇယမ် တူဝ်ၼပ်ႉတဵမ်     \/\/ >>> orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    \/\/ >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n        return nums.stream()\n            .sorted(Comparator.comparingLong(Problem::sumOfDigits).thenComparingLong(nums::indexOf))\n            .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static long sumOfDigits(Long num) {\n        num = Math.abs(num);\n        long sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num \/= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 11L, -1L, -11L, -12L));\n        ArrayList<Long> result1 = orderByPoints(list1);\n        System.out.println(result1);\n\n        ArrayList<Long> list2 = new ArrayList<>();\n        ArrayList<Long> result2 = orderByPoints(list2);\n        System.out.println(result2);\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_146","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢွၼ်တၢင်းသုတ်းလႄႈ တူဝ်ၼပ်ႉလိုၼ်းသုတ်း ၶွင်တူဝ်ၼပ်ႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် (1, 3, 5, 7, 9) ယဝ်ႉ။    \/ တူဝ်ၼပ်ႉၶွင် တူဝ်ၼပ်ႉဢၼ်မီးၼႂ်း သဵၼ်ႈမၢႆ array ဢၼ်ယႂ်ႇလိူဝ် 10 လႄႈ တင်းသွင်ဢၼ်     \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် ထႅဝ်ထႅဝ်ထႅဝ်ထႅဝ် ဢၼ်ပႃးဝႆႉ တူဝ်ၼပ်ႉၸိူဝ်းၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း    \/\/ >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l))))\n    \/\/ (1l)\n    \/\/ >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l))))\n    \/\/ (2l)\n    public static long specialFilter(ArrayList<Long> nums) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    \/\/ Function to check if a number has odd first and last digits\n    private static boolean hasOddFirstAndLastDigit(long num) {\n        num = Math.abs(num); \/\/ Consider absolute value to handle negative numbers\n\n        String numStr = Long.toString(num);\n\n        \/\/ Check first digit\n        char firstDigit = numStr.charAt(0);\n        if ((firstDigit - '0') % 2 == 0) {\n            return false;\n        }\n\n        \/\/ Check last digit\n        char lastDigit = numStr.charAt(numStr.length() - 1);\n        return (lastDigit - '0') % 2 != 0;\n    }\n\n    public static long specialFilter(ArrayList<Long> nums) {\n        return nums.stream()\n            .filter(num -> num > 10 && hasOddFirstAndLastDigit(num))\n            .count();\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> nums1 = new ArrayList<>(Arrays.asList(15L, -73L, 14L, -15L));\n        System.out.println(specialFilter(nums1)); \/\/ Output: 1\n\n        ArrayList<Long> nums2 = new ArrayList<>(Arrays.asList(33L, -2L, -3L, 45L, 21L, 109L));\n        System.out.println(specialFilter(nums2)); \/\/ Output: 2\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l, (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l, (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    }\n\n}\n"},{"task_id":"HumanEval_147","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ လႄႈ a[i] + a[j] + a[k] ၼႆႉပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ၵုၼ်းၵၼ်တင်း 3 ယဝ်ႉ။     \/ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် သၢမ်တူဝ် (a[i], a[j], a[k]) ၶွင် a တီႈ i < j < k,     \/ တွၼ်ႈတႃႇ i ၵူႈဢၼ် (1 ≤ i ≤ n) ၼၼ်ႉ ၵႃႈၶၼ်ၶွင် a[i] = i * i - i + 1 ၼၼ်ႉၼႆယဝ်ႉ။    \/ လႆႈပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ယဝ်ႉ တေလႆႈႁဵတ်း တူဝ်ၼပ်ႉတဵမ်ထူၼ်ႈ array array list a တၢင်းယၢဝ်း n    \/\/ >>> getMaxTriples((5l))\n    \/\/ (1l)\n    \/\/ Explanation: \n    \/\/ a = [1, 3, 7, 13, 21]\n    \/\/ The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static long getMaxTriples(long n) {\n        \/\/ Generate the array list a based on the given formula\n        int[] a = new int[(int) n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        \n        long count = 0;\n        \n        \/\/ Iterate through triple combinations and count those whose sum is a multiple of 3\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); \/\/ Example usage\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"},{"task_id":"HumanEval_148","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ ပဵၼ်ၸိုဝ်ႈၽႆၢႇလူၵ်ႈ ဢၼ်ဢမ်ႇထုၵ်ႇမႅၼ်ႈ။    \/ ပေႃးပဵၼ် planet1 ဢမ်ႇၼၼ် planet2 ၼႆ ၽွၼ်ႉၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼမ်းဢၼ်ဢမ်ႇမီးတူဝ်သင်    \/ လွင်ႈၸမ်ၸႂ်ၵၼ်တင်း လႅတ်ႇ။    \/ ဢၼ်မီးၼႂ်းၵႄႈ လွၵ်းလႆၢးလုမ်ႈၾႃႉ 1 လႄႈ လွၵ်းလႆၢးလုမ်ႈၾႃႉ 2 ၊ ၸႅၵ်ႇဝႆႉၸွမ်း     \/ မၼ်းတေလႆႈၶိုၼ်းပၼ် တူဝ်ၼမ်းဢၼ်ပႃး လၢဝ်ဢၼ်မီး လႅင်ႊလၢဝ်တင်းမူတ်းၼၼ်ႉ     \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ်ၸိုဝ်ႈ ၵျူဝ်ႇ 2 ဢၼ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉသဵၼ်ႈ planet1 လႄႈ planet2 ၼၼ်ႉၶႃႈ။     \/ ယူႇရၢၼ်ႇ၊ ၼႅပ်ႉပုၼ်ႇ။    \/ ပဵၼ် Mercury ၊ ဢၼ်မႃးထႅင်ႈၼၼ်ႉပဵၼ် Venus ၊ ပေႃးယဝ်ႉ Earth ၊ Mars ၊ Jupiter ၊ Saturn ၊     ၼႂ်းပိူင်လႅတ်ႇႁဝ်းၼႆႉ မီးၵျူဝ်ႇ 8 ဢၼ် ဢၼ် ဢၼ်ၸမ်သေပိူၼ်ႈတီႈလႅတ်ႇ။    \/\/ >>> bf((\"Jupiter\"), (\"Neptune\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    \/\/ >>> bf((\"Earth\"), (\"Mercury\"))\n    \/\/ (ArrayList<String>(\"Venus\"))\n    \/\/ >>> bf((\"Mercury\"), (\"Uranus\"))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n","canonical_solution":"import java.util.*;\nimport org.javatuples.*;\n\npublic class Problem {\n    \/\/ There are eight planets in our solar system arranged by distance from the Sun\n    private static final List<String> PLANETS = Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public static Pair<ArrayList<String>, ArrayList<String>> bf(String planet1, String planet2) {\n        \/\/ Validate planet names\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return new Pair<>(new ArrayList<>(), new ArrayList<>());\n        }\n\n        \/\/ Find indices of the planets\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        \/\/ Sort the indices\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        \/\/ Extract planets between the given two planets\n        ArrayList<String> planetsBetween = new ArrayList<>(PLANETS.subList(start + 1, end));\n\n        return new Pair<>(planetsBetween, new ArrayList<>());\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"},{"task_id":"HumanEval_149","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ သူတေထၢင်ႇဝႃႈ ၶေႃႈၵႂၢမ်းတင်းမူတ်းၼႆႉ တေမီးတၢင်းယၢဝ်းမိူၼ်ၵၼ်ယူႇၼႆယဝ်ႉ။    \/ မၼ်းတေလႆႈၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ မေႃႇလီႇယႃႇ ဢၼ်ၸႅၵ်ႇဝႆႉၸွမ်းပိူင်မၼ်းၼၼ်ႉယူႇယဝ်ႉ။    \/ သင်ဝႃႈ ၶေႃႈၵႂၢမ်းသွင်ၶေႃႈၼႆႉ တၢင်းယၢဝ်းမၼ်းမိူၼ်ၵၼ်ၼႆ ၸႅၵ်ႇပၼ် သဵၼ်ႈမၢႆ တူဝ်လိၵ်ႈၸွမ်းပိူင် တူဝ်လိၵ်ႈ။    \/ တေလႆႈၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ မေႃႇရီႇ ဢၼ်ၸႅၵ်ႇဝႆႉၸွမ်း ပၵ်းပိူင်ၼၼ်ႉ။     \/ လွင်ႈၸႅၼ်ႇၸႅၼ်ႇၶွင် သဵၼ်ႈမၢႆဢၼ်ၸႅၼ်ႇဝႆႉၼၼ်ႉ ထုၵ်ႇလီၶိုၼ်ႈမႃး ၸွမ်းၼင်ႇ တၢင်းယၢဝ်းၶေႃႈၵႂၢမ်းဢၼ်ၼိူင်ႈဢၼ်ၼၼ်ႉ လႄႈ သူတေလႆႈ     \/ လႄႈ မၼ်းတေပႃးဝႆႉ လွင်ႈၽိုၼ်မိူၼ်။    \/ သဵၼ်ႈမၢႆ array ၼႆႉ ပဵၼ်ဝႆႉ သဵၼ်ႈမၢႆ array array ၶွင် တူဝ်ၼပ်ႉ လႄႈ ဢမ်ႇတွၼ်ႉပဵၼ် သဵၼ်ႈမၢႆ array array ၶွင် တူဝ်ၼပ်ႉ၊    \/ လႄႈ ၶိုၼ်းဢဝ် တူဝ်ယၢင်ႇ ဢၼ်ဢွၵ်ႇမႃးၸွမ်း လွင်ႈၸႅၵ်ႇမႅင်ႇဝႆႉ၊     \/ ထွၼ်ဢွၵ်ႇပႅတ်ႈ သဵၼ်ႈသၢႆဢၼ်ဢမ်ႇမိူၼ်ၵၼ်တင်းမၼ်း၊     \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉႁွင်းဝႆႉ လွင်ႈၸႅၼ်ႇထႅဝ် array array list ၶွင် string မိူၼ်ၼင်ႇ ပႃႇရႃႇမီႇတႃႇ၊     \/\/ >>> listSort((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"aa\")))\n    \/\/ >>> listSort((new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"a\", (String)\"aaa\", (String)\"cd\"))))\n    \/\/ (new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"cd\")))\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n","canonical_solution":"import java.util.*;\n\nclass Problem {\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n        \/\/ Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n\n        \/\/ Sort the remaining strings first by length, then alphabetically\n        lst.sort(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));\n\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> test1 = new ArrayList<String>(Arrays.asList(\"aa\", \"a\", \"aaa\"));\n        ArrayList<String> test2 = new ArrayList<String>(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"));\n\n        System.out.println(sortedListSum(test1)); \/\/ Output: [aa]\n        System.out.println(sortedListSum(test2)); \/\/ Output: [ab, cd]\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\")))).equals((new ArrayList<String>(Arrays.asList((String)\"aa\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"school\", (String)\"AI\", (String)\"asdf\", (String)\"b\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"asdf\", (String)\"school\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"b\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"dcba\", (String)\"abcd\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"dcba\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))).equals((new ArrayList<String>(Arrays.asList((String)\"AI\", (String)\"ai\", (String)\"au\")))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\", (String)\"c\", (String)\"c\", (String)\"a\")))).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)\"aaaa\", (String)\"bbbb\", (String)\"dd\", (String)\"cc\")))).equals((new ArrayList<String>(Arrays.asList((String)\"cc\", (String)\"dd\", (String)\"aaaa\", (String)\"bbbb\")))));\n    }\n\n}\n"},{"task_id":"HumanEval_150","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ prime number လႄႈ တေလႆႈၶိုၼ်းပၼ် ၵႃႈၶၼ် y ပေႃးဢမ်ႇၼၼ်။     \/ ပရူဝ်ႇၵရမ်ႇဢၼ်ငၢႆႈ ဢၼ်တေလႆႈၶိုၼ်း ၵႃႈၶၼ်ၶွင် x သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်     \/\/ >>> xOrY((7l), (34l), (12l))\n    \/\/ (34l)\n    \/\/ >>> xOrY((15l), (8l), (5l))\n    \/\/ (5l)\n    public static long xOrY(long n, long x, long y) {\n","canonical_solution":"import java.math.BigInteger;\n\npublic class Problem {\n    public static long xOrY(long n, long x, long y) {\n        \/\/ Check if n is prime\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private static boolean isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0) return false;\n\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(xOrY(7L, 34L, 12L));  \/\/ Output: 34\n        System.out.println(xOrY(15L, 8L, 5L));  \/\/ Output: 5\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n"},{"task_id":"HumanEval_151","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ၼႂ်းသဵၼ်ႈမၢႆ array ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ။ ပႅတ်ႈပႅတ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉတဵမ် ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ။    \/ ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသဵၼ်ႈမၢႆၶွင် တူဝ်ၼပ်ႉသဵၼ်ႈမၢႆၼၼ်ႉၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈမၢႆ ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသဵၼ်ႈမၢႆၶွင် တူဝ်ၼပ်ႉၸိူဝ်းၼၼ်ႉသေ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈမၢႆၶွင် တူဝ်ၼပ်ႉသဵၼ်ႈမၢႆၸိူဝ်းၼၼ်ႉၶိုၼ်းမႃး    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)0l))))\n    \/\/ (10l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))\n    \/\/ (0l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))\n    \/\/ (81l)\n    \/\/ >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))\n    \/\/ (0l)\n    \/\/ If the input array list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n        long sum = 0;\n        \n        for (Float number : lst) {\n            if (number != null && number >= 0 && number % 1 == 0) {\n                long num = number.longValue();\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        \n        return sum;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList()))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f, (float)-20.0f, (float)-30.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) == (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f, (float)3.0f, (float)5.0f)))) == (34l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));\n    }\n\n}\n"},{"task_id":"HumanEval_152","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ ၵႃႈၶၼ်မၼ်းပဵၼ် 0 လႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆ ၵႃႈၶၼ်မၼ်းပဵၼ် လွင်ႈပႅၵ်ႇပိူင်ႈဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ ၼႂ်းၵႄႈ လွင်ႈလၢမ်းၶၢတ်ႈလႄႈ လွင်ႈလႆႈၶၢမ်ႇတွပ်ႇ။    \/ ၶိုၼ်းဢဝ် array array list ဢၼ်ယၢဝ်းမိူၼ်ၵၼ် ဢၼ်ၼႄပၼ်ဝႃႈ လွင်ႈလၢမ်းၶၢတ်ႈဢၼ်လႂ်ဢၼ်ၼၼ်ႉ မၼ်းၵႆၵႃႈႁိုဝ် ပေႃးၶဝ်လၢမ်းၶၢတ်ႈမႅၼ်ႈၼႆ     \/ တေလႆႈပၼ် သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆၼၼ်ႉ။    \/ ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇတႅပ်းတတ်းဝႃႈ ၵူၼ်းၵေႃႉၼိူင်ႈၵေႃႉၼၼ်ႉ ထၢင်ႇၸႅင်ႈလီ လွင်ႈလႆႈမႃးတီႈ တူဝ်ၼပ်ႉဢၼ်ပဵင်းၵၼ်ၼၼ်ႉႁိုဝ်ၼႆၼၼ်ႉယဝ်ႉ။    \/ တႄႉတေလႆႈၶူၼ်ႉၶႂႃႉတူၺ်းလႄႈ တႅၵ်ႈၼိူင်းတူၺ်းယူႇ    လွင်ႈဢၼ်ပဵၼ်မႃးၼၼ်ႉ ပဵၼ်ဢၼ်ႁူႉဝႆႉယဝ်ႉသေတႃႉ၊ တၢင်းဝူၼ်ႉလႄႈ လွင်ႈဢၼ်လႆႈမီးမႃး မိူဝ်ႈယၢမ်းၼၼ်ႉၼၼ်ႉ ပဵၼ်ဢၼ်ႁူႉဝႆႉယဝ်ႉ။    \/ ႁဝ်းၵူႈၵေႃႉၼႆႉ ၶုၵ်းၸႂ်လႆႈ လွင်ႈဢၼ်ႁဝ်းလႆႈၶၢမ်ႇတၢင်း ဢၼ်ႁဝ်းလႆႈပႂ်ႉမႃးႁိုင်ၼၢၼ်းၼၼ်ႉယူႇယဝ်ႉ    \/\/ >>> compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))\n    \/\/ >>> compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Problem {\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Long> game1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 5L, 1L));\n        ArrayList<Long> guess1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 2L, -2L));\n        System.out.println(compare(game1, guess1));\n\n        ArrayList<Long> game2 = new ArrayList<>(Arrays.asList(0L, 5L, 0L, 0L, 0L, 4L));\n        ArrayList<Long> guess2 = new ArrayList<>(Arrays.asList(4L, 1L, 1L, 0L, 0L, -2L));\n        System.out.println(compare(game2, guess2));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)0l, (long)1l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_153","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ (ဢဵၼ်ႁႅင်းမၼ်းပဵၼ် -1) ။    \/ return 'Slices.SErviNGSliCes' ယွၼ်ႉဝႃႈ 'SErviNGSliCes' ၼႆႉ ပဵၼ်လွင်ႈၶႂၢၵ်ႈဢၼ်ၶိုၵ်ႉၶႅမ်ႉသေပိူၼ်ႈ    \/ extension: ['SERVINGSliCes', 'Cheese', 'StuFfed'] ပေႃးၼၼ် ၸဝ်ႈၵဝ်ႇ ထုၵ်ႇလီ     တူဝ်ယၢင်ႇမၼ်း သင်ဝႃႈႁဝ်းလႆႈပၼ် \"Slices\" မိူၼ်ၼင်ႇ class လႄႈ array array list ၶွင်     \/ လိူၵ်ႈဢဝ် ဢၼ်မႃးတီႈၼႃႈသုတ်း ၼႂ်းသဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇၼၼ်ႉလႄႈ။    \/ သင်ဝႃႈ မီးလွင်ႈၶႂၢၵ်ႈဢၼ်မိူၼ်ၵၼ် သွင်ဢၼ်ဢမ်ႇၼၼ် ၼမ်လိူဝ်ၼၼ်ႉၼႆၸိုင်    \/ format: ClassName.StrongestExtensionName.  ၼႆႉပဵၼ်ၸိုဝ်ႈဢၼ်မီးလွင်ႈၵႅၼ်ႇၶႅင်သေပိူၼ်ႈ    \/ တေလႆႈႁႃလွင်ႈၶႂၢၵ်ႈဢၼ်ၶိုၵ်ႉၶႅမ်ႉသေပိူၼ်ႈသေ ၶိုၼ်းဢဝ် string ဢၼ်ၼႆႉမႃးၶိုၼ်း    \/ ၼႂ်းၸိုဝ်ႈလွင်ႈၶႂၢၵ်ႈၼႆႉ လွင်ႈၵႅၼ်ႇၶႅင်ၼႆႉ လႆႈထုၵ်ႇပၼ်ဝႆႉ လူၺ်ႈလွင်ႈၽေႈ CAP - SM ၼၼ်ႉယဝ်ႉ။    \/ တူဝ်လိၵ်ႈ ၼႂ်းၸိုဝ်ႈ extension လႄႈ SM ပဵၼ်တူဝ်လိၵ်ႈလဵၵ်ႉလဵၵ်ႉ    \/ ႁႅင်းၶွင်လွင်ႈၶႂၢၵ်ႈမၼ်းပဵၼ် ၼင်ႇတႂ်ႈၼႆႉ: ႁႂ်ႈ CAP ပဵၼ်တူဝ်ၼပ်ႉၶွင် တူဝ်လိၵ်ႈယႂ်ႇ     \/ Extensions ၼႆႉ ၸႂ်ႉတိုဝ်းတႃႇတၢင်ႇပၼ် ၶႅပ်းႁၢင်ႈတၢင်ႇဢၼ် တီႈၼႂ်း ၶႅပ်းႁၢင်ႈၼၼ်ႉ။    \/ တေပၼ်ၸိုဝ်ႈ class (string) လႄႈ သဵၼ်ႈမၢႆ array array of extensions။    \/\/ >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"CC\"))))\n    \/\/ (\"my_class.AA\")\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n","canonical_solution":"public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n        String strongestExtension = \"\";\n        double maxStrength = Double.NEGATIVE_INFINITY;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            double strength = capCount - smCount;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"},{"task_id":"HumanEval_154","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တေလႆႈပၼ်ၶေႃႈၵႂၢမ်း 2 ၶေႃႈ။ သင်ဝႃႈ ၶေႃႈၵႂၢမ်းၵမ်းသွင် ဢမ်ႇၼၼ် လွင်ႈလႅၵ်ႈလၢႆႈမၼ်း ပဵၼ် substring ၼႂ်းၶေႃႈၵႂၢမ်းၵမ်းဢွၼ်တၢင်းသုတ်းၼႆ တေလႆႈၶိုၼ်းပၼ် true    \/\/ >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    \/\/ (true)\n    \/\/ >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    \/\/ (false)\n    \/\/ >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    \/\/ (true)\n    public static boolean cycpatternCheck(String a, String b) {\n","canonical_solution":"public static boolean cycpatternCheck(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubledB = b + b;\n        \n        for (int i = 0; i < b.length(); i++) {\n            String rotation = doubledB.substring(i, i + b.length());\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n"},{"task_id":"HumanEval_155","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ ပေႃးဝႃႈပၼ်တူဝ်ၼပ်ႉတဵမ်ၼႆ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉၸႅၵ်ႈ လႄႈ တူဝ်ၼပ်ႉၸႅၵ်ႈမႃးၶိုၼ်း။    \/\/ >>> evenOddCount((-12l))\n    \/\/ (Pair.with(1l, 1l))\n    \/\/ >>> evenOddCount((123l))\n    \/\/ (Pair.with(1l, 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n","canonical_solution":"long evenCount = 0;\n        long oddCount = 0;\n        num = Math.abs(num); \/\/ Handle negative numbers by taking the absolute value\n\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num \/= 10;\n        }\n\n        return Pair.with(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12L)); \/\/ Output: (1, 1)\n        System.out.println(evenOddCount(123L)); \/\/ Output: (1, 2)\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"},{"task_id":"HumanEval_156","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ:     \/ လွင်ႈမၵ်းၶၢၼ်း: 1 <= num <= 1000     \/ လႄႈ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈဢွၼ်ႇသေ တႅမ်ႈၶိုၼ်း။    \/ ပေႃးဝႃႈပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇၼႆ ဢဝ်တူဝ်ၼပ်ႉ ရေႃးမ ဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉသေ ႁဵတ်းပဵၼ် တူဝ်ထႅဝ်၊     \/\/ >>> intToMiniRoman((19l))\n    \/\/ (\"xix\")\n    \/\/ >>> intToMiniRoman((152l))\n    \/\/ (\"clii\")\n    \/\/ >>> intToMiniRoman((426l))\n    \/\/ (\"cdxxvi\")\n    public static String intToMiniRoman(long number) {\n","canonical_solution":"String[] thousands = {\"\", \"m\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] units = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        \n        String roman = \"\";\n\n        roman += thousands[(int)(number \/ 1000)];\n        number %= 1000;\n        \n        roman += hundreds[(int)(number \/ 100)];\n        number %= 100;\n        \n        roman += tens[(int)(number \/ 10)];\n        number %= 10;\n        \n        roman += units[(int)(number)];\n        \n        return roman;\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n"},{"task_id":"HumanEval_157","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     \/ 90 တီႇၵရီႇ။    \/ သၢမ်ၸဵင်ႇဢၼ်မီးသဵၼ်ႈတႃသိုဝ်ႈၼႆႉ ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မီးသဵၼ်ႈတႃသိုဝ်ႈ ဢမ်ႇၼၼ်     \/ ၾၢႆႇမၼ်းပဵၼ်သၢမ်ၸဵင်ႇတဵမ်ထူၼ်ႈ၊ ပေႃးဢမ်ႇၼၼ်တႄႉ ၽိတ်း။     ပေႃးႁဝ်းတူၺ်း တၢင်းယၢဝ်းသၢမ်ၽၢႆႇၶွင် သၢမ်ၸဵင်ႇၼႆ ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ဝႃႈ သၢမ်ၽၢႆႇၼႆႉ ပဵၼ်သၢမ်ၸဵင်ႇၼႆၸိုင်    \/\/ >>> rightAngleTriangle((3l), (4l), (5l))\n    \/\/ (true)\n    \/\/ >>> rightAngleTriangle((1l), (2l), (3l))\n    \/\/ (false)\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n","canonical_solution":"public class Problem {\n    \/\/ Given the lengths of the three sides of a triangle. Return true if the three\n    \/\/ sides form a right-angled triangle, false otherwise.\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n        \/\/ Sort the sides so that c is always the largest one\n        long[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \/\/ Check the Pythagorean theorem: a^2 + b^2 == c^2\n        return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"},{"task_id":"HumanEval_158","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ characters, return the one which comes first in lexicographical order. တူဝ်လိၵ်ႈဢၼ်မႃးဢွၼ်တၢင်းသုတ်းၼၼ်ႉ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း။    \/ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် သင်ၸိူဝ်ႉဝႃႈ သဵၼ်ႈမၢႆမၼ်းမီးၼမ်လိူဝ်သုတ်းၼႆ    \/ သဵၼ်ႈမၢႆ array ၼၼ်ႉမီးဝႆႉ ၶေႃႈၵႂၢမ်းဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ်ဝႆႉ။ ၶိုၼ်းဢဝ် ၶေႃႈၵႂၢမ်းဢၼ်မီး တူဝ်ၼပ်ႉသုင်သုတ်းၼၼ်ႉ ၶိုၼ်းပၼ်။    \/ တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉလႆႈ တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်ပႃးဝႆႉ တူဝ်ၼပ်ႉသဵၼ်ႈ။    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"))))\n    \/\/ (\"string\")\n    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\"))))\n    \/\/ (\"enam\")\n    \/\/ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    \/\/ (\"aaaaaaa\")\n    public static String findMax(ArrayList<String> words) {\n","canonical_solution":"import java.util.*;\n\npublic class UniqueCharacterFinder {\n\n    public static String findMax(ArrayList<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            int uniqueCount = (int) word.chars().distinct().count();\n            if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\")))); \/\/ Output: \"string\"\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\")))); \/\/ Output: \"enam\"\n        System.out.println(findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\")))); \/\/ Output: \"aaaaaaa\"\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\")))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\", (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"},{"task_id":"HumanEval_159","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်ယၢင်ႇ:     ပေႃးဝႃႈ မၢၵ်ႇၶိူဝ်သူမ်ႈ ဢၼ်ၵိုတ်းဝႆႉၼၼ်ႉ ဢမ်ႇတဵမ်ထူၼ်ႈၼႆၸိုင် သူတေၵိၼ် မၢၵ်ႇၶိူဝ်သူမ်ႈ ဢၼ်ၵိုတ်းဝႆႉၼၼ်ႉသေတႃႉၵေႃႈ သူတိုၵ်ႉတေၵႂင်ယူႇယဝ်ႉ။    \/ ၵႃႊၶၼ်ၵႃႇရူဝ်ႇ (ၵရူဝ်ႇသ်) ဢၼ်ၵိုတ်းဝႆႉဝၢႆးသေၵိၼ်ၶဝ်ႈၶမ်ႈၼၼ်ႉ ]     \/ သူင်ႇပၼ်ဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ [ ႁူဝ်ၼပ်ႉ ၵရူဝ်ႇတိတ်ႉ ဢၼ်ၵိၼ်ယဝ်ႉ ၼ်ႂးၶၢဝ်းတၢင်း ၵိၼ်ၶဝ်ႈ၊     ၵူၺ်းၵႃႈ မိူဝ်ႈလဵဝ်ၼႆႉ သူလူဝ်ႇၵိၼ် မၢၵ်ႇၶိူဝ်သူမ်ႈၼမ်လိူဝ်ၼႆႉ တႃႇတေႁႂ်ႈၶဝ်ႈဝၼ်းတဵမ်ထူၼ်ႈ။    ၸဝ်ႈႁဝ်းၼႆႉ ပဵၼ်သၢင်ႇသီႈဢၼ်မႆႈၸႂ် ၵိၼ်ၶဝ်ႈယဝ်ႉသေယဝ်ႉ လႆႈၵိၼ်ၵႆႇၵမ်ႈၽွင်ႈယဝ်ႉ    \/\/ >>> eat((5l), (6l), (10l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))\n    \/\/ >>> eat((4l), (8l), (9l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))\n    \/\/ >>> eat((1l), (10l), (10l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))\n    \/\/ >>> eat((2l), (11l), (5l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))\n    \/\/ Variables:\n    \/\/ @number : integer\n    \/\/ the number of carrots that you have eaten.\n    \/\/ @need : integer\n    \/\/ the number of carrots that you need to eat.\n    \/\/ @remaining : integer\n    \/\/ the number of remaining carrots thet exist in stock\n    \/\/ Constrain:\n    \/\/ * 0 <= number <= 1000\n    \/\/ * 0 <= need <= 1000\n    \/\/ * 0 <= remaining <= 1000\n    \/\/ Have fun :)\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n","canonical_solution":"import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n        long totalEaten = number;\n        long carrotsToEat = Math.min(need, remaining);\n        totalEaten += carrotsToEat;\n        long carrotsLeft = remaining - carrotsToEat;\n        \n        return new ArrayList<Long>(Arrays.asList(totalEaten, carrotsLeft));\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l)))));\n    }\n\n}\n"},{"task_id":"HumanEval_160","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ Operator array list မီး operator တီႈဢေႇသုတ်း 1 ၵေႃႉ လႄႈ operand array list မီး 2 ၵေႃႉ တီႈဢေႇသုတ်း    \/ Operand ၼႆႉပဵၼ် မၢႆမီႈဢၼ်မၵ်းမၼ်ႈဝႆႉ လွင်ႈဢၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ်ၼၼ်ႉ။    \/ တၢင်းယၢဝ်းၶွင် operator array list ၼႆႉ ပဵၼ်တၢင်းယၢဝ်းၶွင် operand array list ဢၼ်ထုၵ်ႇပၢၵ်ႈပႅတ်ႈ 1.    \/ မၢႆတွင်း:     \/ => ၶေႃႈလႆႈၸႂ် = 9     \/ result = 2 + 3 * 4 - 5     \/ array array list = [2, 3, 4, 5]  ဢၼ်ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ၼိူင်ႈ    \/ operator['+', '*', '-']  ၸၼ်ဢဝ်တီႈလိင်ႉတႂ်ႈၼႆႉ    \/ ပိူင်ယၢင်ႇ:     \/ လွင်ႈၼႄပၼ် (**)     \/ ၽႄၽႄၸၼ်ႉ ( \/\/ )     \/ လွင်ႈၵုၼ်း (*)     \/ ထွၼ်ဢွၵ်ႇ ( - )     \/ ထႅမ်သႂ်ႇ (+ )     \/ လွင်ႈႁဵတ်းသၢင်ႈ algebra ဢၼ်လမ်ႇလွင်ႈ:     \/ expression လႄႈ ၶိုၼ်းဢဝ် လွင်ႈထတ်းသၢင်ႈ expression ၼႆႉမႃး။    \/ သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇသွင်ဢၼ်ၼႆႉ ပဵၼ်သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇ မေႃႇထၢၼ်ႇ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၸႂ်ႉတိုဝ်း သဵၼ်ႈမၢႆ မေႃႇထၢၼ်ႇသွင်ဢၼ်ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တွၼ်ႈတႃႇတေၵေႃႇသၢင်ႈ algebraic ၼၼ်ႉယဝ်ႉ။    \/ ပၼ်ဝႆႉ သွင်ဢၼ် ဢၼ်ပဵၼ် မေႃႇၵၢၼ် လႄႈ တူဝ်ၼပ်ႉ operand။ မေႃႇၵၢၼ်ဢွၼ်တၢင်းသုတ်းၼႆႉ မီးလွင်ႈႁဵတ်းသၢင်ႈ algebra ဢၼ်လမ်ႇလွင်ႈ လႄႈ     public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n","canonical_solution":"import java.util.ArrayList;\n\nclass Problem {\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (operand.isEmpty() || op.isEmpty() || operand.size() - 1 != op.size()) {\n            throw new IllegalArgumentException(\"Invalid input.\");\n        }\n\n        \/\/ Start with the first operand.\n        long result = operand.get(0);\n\n        \/\/ Apply the operators in sequence.\n        for (int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n            long nextOperand = operand.get(i + 1);\n\n            switch (operator) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"\/\/\":\n                    if (nextOperand == 0) {\n                        throw new ArithmeticException(\"Division by zero.\");\n                    }\n                    result \/= nextOperand;\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<String> operators = new ArrayList<>();\n        operators.add(\"+\");\n        operators.add(\"*\");\n        operators.add(\"-\");\n\n        ArrayList<Long> operands = new ArrayList<>();\n        operands.add(2L);\n        operands.add(3L);\n        operands.add(4L);\n        operands.add(5L);\n\n        System.out.println(doAlgebra(operators, operands));  \/\/ Output: 9\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\/\/\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n"},{"task_id":"HumanEval_161","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ တူဝ်ယၢင်ႇ     \/ ၽွၼ်ႉၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်လိၵ်ႈဢၼ်ဢွၵ်ႇမႃးၼၼ်ႉယဝ်ႉ။    \/ သင်ဝႃႈ string ဢမ်ႇမီးတူဝ်လိၵ်ႈသင်ၼႆ ၶၢႆႉၶိုၼ်း string ၼၼ်ႉၶႃႈ။    \/ ပေႃးဢမ်ႇၼၼ် ႁႂ်ႈမၼ်းဝႆႉမိူၼ်ၼင်ႇမၼ်းယူႇ    \/ သင်ဝႃႈ s[i] ပဵၼ်တူဝ်လိၵ်ႈၼႆ ၶၢႆႉတူဝ်လိၵ်ႈမၼ်း လုၵ်ႉတီႈတႂ်ႈၵႂႃႇၼိူဝ် ဢမ်ႇၼၼ် vice versa၊     \/ သူတေလႆႈပၼ် string s.     \/\/ >>> solve((\"1234\"))\n    \/\/ (\"4321\")\n    \/\/ >>> solve((\"ab\"))\n    \/\/ (\"AB\")\n    \/\/ >>> solve((\"#a@C\"))\n    \/\/ (\"#A@c\")\n    public static String solve(String s) {\n","canonical_solution":"public static String solve(String s) {\n        boolean hasLetters = false;\n        StringBuilder result = new StringBuilder();\n        \n        \/\/ Check if the string contains any letters and process the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        \/\/ If no letters are present, reverse the string\n        if (!hasLetters) {\n            result.reverse();\n        }\n        \n        return result.toString();\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"},{"task_id":"HumanEval_162","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ သင်ဝႃႈ 'text' ၼႆႉပဵၼ် ထႅဝ်လိၵ်ႈဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ ၶိုၼ်းဢဝ် null ၼၼ်ႉမႃး။    \/ ပေႃးဝႃႈလႆႈပၼ် string 'text' ၼႆၸိုင် ၶိုၼ်းဢဝ် md5 hash equivalent string မၼ်းၼၼ်ႉ လၢႆႈပၼ်။    \/\/ >>> stringToMd5((\"Hello world\"))\n    \/\/ Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    public static Optional<String> stringToMd5(String text) {\n","canonical_solution":"import java.security.*;\nimport java.util.*;\n\nclass Problem {\n    public static Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : messageDigest) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(Optional.of(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Optional.of(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n"},{"task_id":"HumanEval_163","nl":"shn_Mymr","pl":"java","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    \/ ပိူင်တႅၵ်ႈမၼ်း:     \/ လႄႈ b၊ ၶိုၼ်ႈမႃးၸွမ်းၶၵ်ႉတွၼ်ႈ။     \/ ပေႃးဝႃႈႁဝ်းပၼ်တူဝ်ၼပ်ႉတဵမ် a လႄႈ b သွင်တူဝ်ၼႆ ႁဝ်းတေၶိုၼ်းပၼ်တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ၼႂ်းၵႄႈ a     \/\/ >>> generateIntegers((2l), (8l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    \/\/ >>> generateIntegers((8l), (2l))\n    \/\/ (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))\n    \/\/ >>> generateIntegers((10l), (14l))\n    \/\/ (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n","canonical_solution":"import java.util.*;\n\npublic class Problem {\n    \/\/ Given two positive integers a and b, return the even digits between a\n    \/\/ and b, in ascending order.\n    public static ArrayList<Long> generateIntegers(long a, long b) {\n        ArrayList<Long> result = new ArrayList<>();\n\n        \/\/ Ensure a is the smaller number and b is the larger number\n        long start = Math.min(a, b);\n        long end = Math.max(a, b);\n\n        \/\/ Find and add even numbers in the range [start, end] to the result list\n        for (long i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); \/\/ [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); \/\/ [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); \/\/ []\n    }\n}","tests":"    }\n    public static void main(String[] args) {\n    assert(generateIntegers((2l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((10l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((132l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(generateIntegers((17l), (89l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"}]