task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,bod_Tibt,pl,"# ཚད་གཞི་གཏན་འབེབས་བྱས་ཡོད།# ཇི་ཡོད་གྲངས་སུ་གྲངས་གཉིས་ ཇི་ཡོད་གྲངས་སུ་ ཇི་ཡོད་གྲངས་སུ་ ཇི་ཡོད་གྲངས་སུ་ ཇི་ཡོད་གྲངས་སུ་ ཇི་ཡོད་གྲངས་སུ་ ཇི་ཡོད་གྲངས་སུ་ ཇི་ཡོད་གྲངས་སུ་ ཇི་ཡོད་གྲངས་སུ་ ཇི་ཡོད་གྲངས་སུ་# >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
# """"
# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
# 1
sub has_close_elements {
    my($numbers, $threshold) = @_;
","sub has_close_elements {
    my($numbers, $threshold) = @_;
    
    for my $i (0 .. @$numbers - 2) {
        for my $j ($i + 1 .. @$numbers - 1) {
            if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {
                return 1;
            }
        }
    }
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&has_close_elements;
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_1,bod_Tibt,pl,"# ནང་འཇུག་ཐིག་ནང་ཡོད་པའི་བར་སྟོང་ལ་དོ་སྣང་མ་བྱེད།# སྡེ་ཚན་སོ་སོར་ཆ་སྙོམ་ (སྒོ་ཕྱེས་པའི་རྒྱབ་ལག་རེ་རེ་བཞིན་ལེགས་པར་རྒྱབ་) བྱས་ཡོད་པ་དང་ཕན་ཚུན་དབར་སྦྲེལ་མེད་པ།# ཚོ་ཚོ་སོ་སོར་དབྱེ་ནས་ཚོ་ཚོ་ཚོ་གི་རིམ་པ་ཕྱིར་ལོག་བྱེད་པ།# ལས་འགན་འདི་ནང་ནང་འཇུག་བྱེད་དེ་ སྦྲེལ་ཡོད་པའི་སྒམ་ཚིགས་ཀྱི་སྡེ་ཚན་མང་པོ་བསྡུས་པའི་ཐིག་ཡིག་ཡིན། ཁྱོད་ཀྱི་དམིགས་ཡུལ་ནི་ # >>> separate_paren_groups(""( ) (( )) (( )( ))"")
# [""()"", ""(())"", ""(()())""]
sub separate_paren_groups {
    my($paren_string) = @_;
","sub separate_paren_groups {
    my ($paren_string) = @_;
    $paren_string =~ s/\s+//g;  # Remove all spaces
    my @groups;
    my $balance = 0;
    my $current_group = """";
    
    foreach my $char (split //, $paren_string) {
        if ($char eq '(') {
            $balance++;
        }
        if ($char eq ')') {
            $balance--;
        }
        $current_group .= $char;
        if ($balance == 0 && $current_group ne """") {
            push @groups, $current_group;
            $current_group = """";
        }
    }
    
    return \@groups;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&separate_paren_groups;
        if(eq_deeply($candidate->(""(()()) ((())) () ((())()())""),[""(()())"", ""((()))"", ""()"", ""((())()())""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""() (()) ((())) (((())))""),[""()"", ""(())"", ""((()))"", ""(((())))""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()(())((())))""),[""(()(())((())))""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""( ) (( )) (( )( ))""),[""()"", ""(())"", ""(()())""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_2,bod_Tibt,pl,"# གྲངས་ཀའི་བཅུ་ཆ་ཕྱིར་ལོག་བྱེད།# (ལྷག་ལུས་ཆ་ཤས་ནི་ 1 ལས་ཆུང་བ་རེད།)# གྲངས་ཆ་ཧྲིལ་པོ་ (གྲངས་ཆ་ཆེ་ཤོས་ནི་གྲངས་ཆ་ཉུང་བ་ལས་ཆུང་བ་) བཅུ་ཚིགས་ཀྱི་གྲངས་ཆ་ # ཤོག་གྲངས་ལྡོག་པའི་ཐིག་ཁྲམ་ནང་ ཤོག་གྲངས་ལྡོག་པའི་ཐིག་ཁྲམ་ནང་ # >>> truncate_number(3.5)
# 0.5
sub truncate_number {
    my($number) = @_;
","sub truncate_number {
    my($number) = @_;
    my $integer_part = int($number);
    my $decimal_part = $number - $integer_part;
    return $decimal_part;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&truncate_number;
        if(eq_deeply($candidate->(3.5),0.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1.25),0.25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(123.0),0.0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_3,bod_Tibt,pl,"# དེ་མིན་ function དེ་ཕྱིར་ལོག་བྱ་དགོས་ན། ' ' ཕྱིར་ལོག་བྱ་དགོས་# ཤོག་ངོས་འདི་ཡི་བཟོ་བཅོས་མཐའ་མ་༢༩ ལ་མཐའ་འབྲས་ཀྱི་འགྲེལ་བརྗོད་བྱས་འདུག# ཤོག་ངོས་འདི་ནང་ ""གླ་དངུལ་གྱི་ལག་ལེན་དང་དངུལ་ཁུག་ཕྱིར་འཐེན་གྱི་ལས་འགུལ་"" ཟེར་བའི་ཡི་གེ་ཡོད་པ་རེད།# >>> below_zero([1, 2, 3])
# """"
# >>> below_zero([1, 2, -4, 5])
# 1
sub below_zero {
    my($operations) = @_;
","sub below_zero {
    my ($operations) = @_;
    my $balance = 0;
    
    for my $operation (@$operations) {
        $balance += $operation;
        if ($balance < 0) {
            return 1;
        }
    }
    
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&below_zero;
        if(eq_deeply($candidate->([]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_4,bod_Tibt,pl,"# MAD = average ཟེར་བ་ཡིན། x - x_mean ཟེར་བ་ཡིན།# ཚད་གཞི་དང་བར་གྱི་ཆ་ཤས་ (གནས་འདི་ནང་གི་བར་གྱི་ཆ་ཤས་) དང་།# ཚད་ལྡན་བར་ཁྱད་པར་གྱི་བར་ཁྱད་པར་གྱི་ཚད་ནི་ ཚད་ལྡན་བར་ཁྱད་པར་གྱི་ཚད་ཡིན།# ཚད་གཞི་འདི་ནང་གི་བར་མའི་གྲངས་ ཀྱི་ཉེ་འཁོར་དུ་ཡོད།# ནང་འཇུག་གྲངས་ཀྱི་རིམ་པ་སྤྲོད་པའི་ཆེད་དུ་ Mean Absolute Deviation ཟེར་བ་དེ་རྩིས་པར་བྱའོ།# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
# 1.0
sub mean_absolute_deviation {
    my($numbers) = @_;
","sub mean_absolute_deviation {
    my ($numbers) = @_;
    my $n = scalar @$numbers;
    return 0 if $n == 0;

    # Calculate mean
    my $sum = 0;
    $sum += $_ for @$numbers;
    my $mean = $sum / $n;

    # Calculate mean absolute deviation
    my $total_deviation = 0;
    $total_deviation += abs($_ - $mean) for @$numbers;
    return $total_deviation / $n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&mean_absolute_deviation;
        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_5,bod_Tibt,pl,"# ནང་འཇུག་རིམ་པའི་རིམ་པ་གཉིས་བར་གྲངས་ ""ཚད་མཚམས་"" ཞིག་བཙུགས་དགོས།# >>> intersperse([], 4)
# []
# >>> intersperse([1, 2, 3], 4)
# [1, 4, 2, 4, 3]
sub intersperse {
    my($numbers, $delimeter) = @_;
","my @result;
    for (my $i = 0; $i < @$numbers; $i++) {
        push @result, $numbers->[$i];
        push @result, $delimeter if $i < @$numbers - 1;
    }
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&intersperse;
        if(eq_deeply($candidate->([], 7),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_6,bod_Tibt,pl,"# དཔེར་ན། (() (()) ནི་ཚང་གི་ཚད་གཉིས་ལས་མང་བ་མེད་ལ། ((())) ནི་ཚང་གི་ཚད་གསུམ་ལས་མང་བ་མེད་ལ།# སྡེ་ཚན་རེ་རེའི་ཆེད་དུ་ཚིགས་སུ་བསྡུར་བའི་ཚད་མཐོའི་ཚད་གཞི་ཕྱིར་འདོན་བྱ་དགོས།# ལས་འགན་འདི་ནང་ནང་འཇུག་བྱེད་པ་དེ་ནི་ སྦྲེལ་ཡོད་པའི་སྒམ་ཚིགས་ཀྱི་ཆེད་དུ་སྡེ་ཚན་མང་པོ་བཞིན་པའི་ string ཞིག་ཡིན།# >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
# [2, 3, 1, 3]
sub parse_nested_parens {
    my($paren_string) = @_;
","sub parse_nested_parens {
    my($paren_string) = @_;
    my @groups = split / /, $paren_string;
    my @depths;

    foreach my $group (@groups) {
        my $max_depth = 0;
        my $current_depth = 0;
        foreach my $char (split //, $group) {
            if ($char eq '(') {
                $current_depth++;
                if ($current_depth > $max_depth) {
                    $max_depth = $current_depth;
                }
            } elsif ($char eq ')') {
                $current_depth--;
            }
        }
        push @depths, $max_depth;
    }
    
    return \@depths;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&parse_nested_parens;
        if(eq_deeply($candidate->(""(()()) ((())) () ((())()())""),[2, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""() (()) ((())) (((())))""),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()(())((())))""),[4])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_7,bod_Tibt,pl,"# ནང་འཇུག་ཐིག་ནང་འཇུག་ཐིག་འོག་གི་ཐིག་ཚུའི་ནང་འཇུག་ཐིག་ ཞིག་ཡོད་ན་རྐྱང་པ་སེལ་འཐུ་འབད།# >>> filter_by_substring([], ""a"")
# []
# >>> filter_by_substring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
# [""abc"", ""bacd"", ""array""]
sub filter_by_substring {
    my($strings, $substring) = @_;
","sub filter_by_substring {
    my ($strings, $substring) = @_;
    my @filtered = grep { index($_, $substring) != -1 } @$strings;
    return \@filtered;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_by_substring;
        if(eq_deeply($candidate->([], ""john""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""),[""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""),[""grunt"", ""prune""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_8,bod_Tibt,pl,"# སྟོང་པའི་བསྡོམས་ནི་ 0 དང་སྟོང་པའི་ཐོན་རིམ་ནི་ 1 འདྲ་མཉམ་དགོས་པ་ཡིན།# ཨང་གྲངས་ཧྲིལ་པོ་གྲངས་ལྡན་གྱི་གཞི་རིམ་ཤིག་གི་ཆེད་དུ་གཞི་རིམ་ནང་གི་ཨང་གྲངས་ཧྲིལ་པོ་ཐམས་ཅད་ཀྱི་བསྡོམས་དང་འབྲས་བུ་ཡོད་པའི་གཞི་རིམ་ཤིག་ཕྱིར་ལོག་བྱེད་པ།# >>> sum_product([])
# [0, 1]
# >>> sum_product([1, 2, 3, 4])
# [10, 24]
sub sum_product {
    my($numbers) = @_;
","sub sum_product {
    my ($numbers) = @_;
    my $sum = 0;
    my $product = 1;
    
    foreach my $num (@$numbers) {
        $sum += $num;
        $product *= $num;
    }
    
    return [$sum, $product];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_product;
        if(eq_deeply($candidate->([]),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1]),[3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 0]),[100, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10]),[10, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_9,bod_Tibt,pl,"# རིམ་བཞིན་# ཇི་ཡོད་ཨང་གྲངས་ཀྱི་རིམ་པ་ནས་ ཇི་ཡོད་དུས་ཡུན་བར་ཐོབ་པའི་ ཚད་མཐོའི་རིམ་པ་ཐོན་པའི་རིམ་པ་ཐོན་དགོས།# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
# [1, 2, 3, 3, 3, 4, 4]
sub rolling_max {
    my($numbers) = @_;
","sub rolling_max {
    my ($numbers) = @_;
    my @result;
    my $max = $numbers->[0];
    
    for my $num (@$numbers) {
        $max = $num if $num > $max;
        push @result, $max;
    }
    
    return \@result;
}

# Example usage
my $result = rolling_max([1, 2, 3, 2, 3, 4, 2]);
print ""@$result\n"";  # Outputs: 1 2 3 3 3 4 4","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rolling_max;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_10,bod_Tibt,pl,"# - string reverse གི་མཇུག་ཏུ་ palindromic suffix གི་སྔོན་དུ་ string prefix ཞིག་སྣོན་དགོས།# - ཇི་འདྲ་ཡིན་ན་ palindrome ཡོད་པའི་ string གི་ postfix ཡི་རིང་ཤོས་འཚོལ་དགོས།# ཚད་འཛིན་གྱི་བསམ་ཚུལ་ནི་དྭངས་མ་ཡིན།# ཚད་ལྡན་ཡིག་འབྲུ་ནང་འཇུག་པའི་སྔོན་རྟགས་ཆུང་ཤོས་འཚོལ་དགོས།# >>> make_palindrome("""")
# """"
# >>> make_palindrome(""cat"")
# ""catac""
# >>> make_palindrome(""cata"")
# ""catac""
sub make_palindrome {
    my($string) = @_;
","sub make_palindrome {
    my($string) = @_;

    # Helper function to check if a substring is a palindrome
    sub is_palindrome {
        my ($sub) = @_;
        return $sub eq reverse $sub;
    }

    # If the whole string is a palindrome, return it
    if (is_palindrome($string)) {
        return $string;
    }

    # Check for the longest palindromic suffix
    my $length = length($string);
    for (my $i = $length; $i >= 0; $i--) {
        my $suffix = substr($string, $i);
        if (is_palindrome($suffix)) {
            my $prefix = substr($string, 0, $i);
            return $string . reverse($prefix);
        }
    }

    # If no palindromic suffix is found, append the reverse of entire string minus the first character
    return $string . reverse(substr($string, 1));
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&make_palindrome;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""x""),""x"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyz""),""xyzyx"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyx""),""xyx"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""jerry""),""jerryrrej"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_11,bod_Tibt,pl,"# ཌའི་ལོག་ནང་ binary XOR བྱེད་ནས་འབྲས་བུ་ཡང་ string གྱི་ཚུལ་དུ་ཕྱིར་ལོག་བྱེད་པ།# ནང་འཇུག་ནི་ a དང་ b གཉིས་ནི་ 1 དང་ 0 ཙམ་ལས་གྲུབ་པའི་ཡིག་འབྲུ་གཉིས་ཡིན།# >>> string_xor(""010"", ""110"")
# ""100""
sub string_xor {
    my($a, $b) = @_;
","my @a_bits = split //, $a;
    my @b_bits = split //, $b;
    my $result = '';

    for my $i (0 .. $#a_bits) {
        $result .= $a_bits[$i] ^ $b_bits[$i];
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_xor;
        if(eq_deeply($candidate->(""111000"", ""101010""),""010010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", ""1""),""0"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0101"", ""0000""),""0101"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_12,bod_Tibt,pl,"# ནང་འཇུག་ཐིག་སྟོང་ཡོད་ན་ undef སླར་ལོག་བྱེད།# ཚིག་ཡིག་གི་རིམ་པ་ལས་ ཚིག་ཡིག་རིང་ཤོས་ཕྱིར་ལོག་བྱེད། ཚིག་ཡིག་མང་པོ་ཡོད་ན་ ཚིག་ཡིག་དང་པོ་ཕྱིར་ལོག་བྱེད།# >>> longest([])
# undef
# >>> longest([""a"", ""b"", ""c""])
# ""a""
# >>> longest([""a"", ""bb"", ""ccc""])
# ""ccc""
sub longest {
    my($strings) = @_;
","sub longest {
    my ($strings) = @_;
    return undef if !@$strings;

    my $longest = $strings->[0];
    foreach my $string (@$strings) {
        if (length($string) > length($longest)) {
            $longest = $string;
        }
    }
    return $longest;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&longest;
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z""]),""x"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]),""zzzz"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_13,bod_Tibt,pl,"# གྲངས་ཆ་ a དང་ b གཉིས་ཀྱི་ཆེ་མཐོའི་སྤྱིར་བཏང་ཆ་བགོས་ཕྱིར་ལོག་བྱེད་པ།# >>> greatest_common_divisor(3, 5)
# 1
# >>> greatest_common_divisor(25, 15)
# 5
sub greatest_common_divisor {
    my($a, $b) = @_;
","sub greatest_common_divisor {
    my ($a, $b) = @_;
    while ($b != 0) {
        my $t = $b;
        $b = $a % $b;
        $a = $t;
    }
    return $a;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&greatest_common_divisor;
        if(eq_deeply($candidate->(3, 7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 15),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(49, 14),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(144, 60),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_14,bod_Tibt,pl,"# ནང་འཇུག་ཐིག་གི་སྔོན་འཇུག་ཚུའི་རིང་ཐུང་ནས་ཆུང་ཤོས་བར་གྱི་རིམ་པ་ཚང་མ་ཕྱིར་སློག་བྱེད།# >>> all_prefixes(""abc"")
# [""a"", ""ab"", ""abc""]
sub all_prefixes {
    my($string) = @_;
","my($string) = @_;
    my @prefixes;
    for my $i (1 .. length($string)) {
        push @prefixes, substr($string, 0, $i);
    }
    return @prefixes;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&all_prefixes;
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdfgh""),[""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""WWW""),[""W"", ""WW"", ""WWW""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_15,bod_Tibt,pl,"# 0 ནས་ n བར་གྱི་བར་གྱི་གོ་རིམ་བར་མཚམས་གྲངས་ཡོད་པའི་ string སླར་ལོག་བྱེད།# >>> string_sequence(0)
# ""0""
# >>> string_sequence(5)
# ""0 1 2 3 4 5""
sub string_sequence {
    my($n) = @_;
","sub string_sequence {
    my($n) = @_;
    return join ' ', 0..$n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_sequence;
        if(eq_deeply($candidate->(0),""0"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),""0 1 2 3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),""0 1 2 3 4 5 6 7 8 9 10"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_16,bod_Tibt,pl,"# string ཞིག་ཡོད་ན། དེའི་ནང་ཡིག་འབྲུ་ཁྱད་པར་ཅན་ཇི་ཙམ་ཡོད་མེད་འཚོལ་དགོས།# >>> count_distinct_characters(""xyzXYZ"")
# 3
# >>> count_distinct_characters(""Jerry"")
# 4
sub count_distinct_characters {
    my($string) = @_;
","sub count_distinct_characters {
    my($string) = @_;
    my %chars;
    $string = lc $string;  # Convert the string to lowercase
    $chars{$_} = 1 for split //, $string;  # Add each character to the hash
    return scalar keys %chars;  # Return the number of distinct keys
}

# Example usage:
print count_distinct_characters(""xyzXYZ""), ""\n"";  # Output: 3
print count_distinct_characters(""Jerry""), ""\n"";   # Output: 4","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_distinct_characters;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcde""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdecadeCADE""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaAAAAaaaa""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Jerry jERRY JeRRRY""),5)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_17,bod_Tibt,pl,"# ' ' ' ' ' ' ' ' ' ' ' ཟེར་བའི་སྒྲ་བཞི་ཅན་གྱི་སྒྲ་ཞིག་ལ།# 'o Sa Ra' - ཟློག་ཕྱེད་པ། ཐུབ་ཐེངས་གཉིས་པ།# 'o' - སྒྲ་ཆ་ཚང་ཞིག་ལ། སྒྲ་ཐེངས་བཞི་རིང་དུ་གནས་པ།# འདི་ལྟ་སྟེ།# མཐའ་མའི་དུས་མིན་རེད།# ཁྱོད་ཀྱི་ལས་འགན་ནི་ string འདི་ལ་དཔྱད་ཞིབ་བྱས་རྗེས་ ཇི་ཙམ་རེ་ཐེངས་རེ་འགོར་བ་དང་མཚུངས་པའི་གྲངས་ཐང་གི་རིམ་པ་ཕྱིར་ལོག་བྱེད་པ་ཡིན།# ལས་འགན་འདི་ལ་ཨེན་ཊི་ཨེས་སི་ཨི་ཨི་ (ASCII) གྱི་རྣམ་པ་སོ་སོར་སྒྲ་དབྱངས་ཀྱི་སྒྲ་དབྱངས་ཀྱི་སྒྲ་དབྱངས་ཀྱི་སྒྲ་དབྱངས་ཀྱི་སྒྲ་དབྱངས་ཤིག་རྩིས་སྤྲོད་བྱེད།# >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
sub parse_music {
    my($music_string) = @_;
","sub parse_music {
    my ($music_string) = @_;
    my @notes = split ' ', $music_string;
    my @beats;

    foreach my $note (@notes) {
        if ($note eq 'o') {
            push @beats, 4;
        } elsif ($note eq 'o|') {
            push @beats, 2;
        } elsif ($note eq '.|') {
            push @beats, 1;
        }
    }

    return @beats;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&parse_music;
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o o o o""),[4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("".| .| .| .|""),[1, 1, 1, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o| o| .| .| o o o o""),[2, 2, 1, 1, 4, 4, 4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""o| .| o| .| o o| o o|""),[2, 1, 2, 1, 4, 2, 4, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_18,bod_Tibt,pl,"# ཚད་གཞི་ཐོག་མའི་ནང་ནང་གཞི་གྲངས་ཇི་ཙམ་ཡོད་མེད་འཚོལ་བ། ཚད་གཞི་གཉིས་སུ་ཐབ་པའི་གྲངས་རྩིས་རྒྱག་པ།# >>> how_many_times("""", ""a"")
# 0
# >>> how_many_times(""aaa"", ""a"")
# 3
# >>> how_many_times(""aaaa"", ""aa"")
# 3
sub how_many_times {
    my($string, $substring) = @_;
","sub how_many_times {
    my ($string, $substring) = @_;
    return 0 if $substring eq '';
    my $count = 0;
    while ($string =~ /(?=$substring)/g) {
        $count++;
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&how_many_times;
        if(eq_deeply($candidate->("""", ""x""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyxyxyx"", ""x""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""cacacacac"", ""cac""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""john doe"", ""john""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_19,bod_Tibt,pl,"# ཆུང་ཤོས་ནས་ཆེ་བར་རིམ་སྒྲིག་བྱས་པའི་གྲངས་ཀྱི་ཐིག་ཡིག་སླར་ལོག་བྱེད།# འདྲ་མིན་གྱི་གདམ་ཁ་ནི། ༠། ༡། ༢། ༣། ༤། ༥། ༦། ༧། ༨། ༩ བཅས་ཡིན།# ནང་འཇུག་ནི་ས་སྟོང་གི་ཚད་མཚམས་ཡོད་པའི་གྲངས་ཀྱི་ཐིག་ལེ་ཞིག་ཡིན་ཏེ། ""ཟི་ལོ""ནས་ ""དགུ་""བར་ཡིན།# >>> sort_numbers(""three one five"")
# ""one three five""
sub sort_numbers {
    my($numbers) = @_;
","sub sort_numbers {
    my ($numbers) = @_;
    my %word_to_num = (
        'zero'  => 0,
        'one'   => 1,
        'two'   => 2,
        'three' => 3,
        'four'  => 4,
        'five'  => 5,
        'six'   => 6,
        'seven' => 7,
        'eight' => 8,
        'nine'  => 9,
    );
    my %num_to_word = reverse %word_to_num;
    my @sorted_numbers = 
        map { $num_to_word{$_} } 
        sort { $a <=> $b } 
        map { $word_to_num{$_} } 
        split ' ', $numbers;
    return join ' ', @sorted_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_numbers;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""three""),""three"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""three five nine""),""three five nine"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""five zero four seven nine eight""),""zero four five seven eight nine"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""six five four three two one zero""),""zero one two three four five six"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_20,bod_Tibt,pl,"# གཞན་དང་རིམ་བཞིན་ལོག་འཇུག་ (གྲངས་ཉུང་། གྲངས་མང་།)# ཤོག་གྲངས་གྲངས་ (ཉུང་མཐར་གཉིས་) ཡོད་པའི་གྲངས་ཐང་ནས་ཤོག་གྲངས་རེ་རེ་ལ་ཉེ་བའི་ཤོག་གྲངས་གཉིས་འདེམས་ནས་ཕྱིར་ལོག་བྱེད་པ།# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
# [2.0, 2.2]
# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
# [2.0, 2.0]
sub find_closest_elements {
    my($numbers) = @_;
","sub find_closest_elements {
    my ($numbers) = @_;
    my @sorted_numbers = sort { $a <=> $b } @$numbers;
    my $min_diff = undef;
    my @closest_pair;

    for my $i (0 .. $#sorted_numbers - 1) {
        my $diff = $sorted_numbers[$i + 1] - $sorted_numbers[$i];
        if (!defined($min_diff) || $diff < $min_diff) {
            $min_diff = $diff;
            @closest_pair = ($sorted_numbers[$i], $sorted_numbers[$i + 1]);
        }
    }

    return @closest_pair;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&find_closest_elements;
        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_21,bod_Tibt,pl,"# གྲངས་ཆུང་ཤོས་ནི་ 0 དང་གྲངས་ཆེ་བ་ནི་ 1 ཡིན་པའི་ངེས་པ་ཡོད།# གྲངས་ཀྱི་རིམ་པ་ (ཉུང་མཐར་ཆ་ཤས་གཉིས་) ཞིག་ཡོད་ན། གྲལ་གཞི་དེར་ཐིག་ལེ་སྒྱུར་བཅོས་བྱེད་པ།# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
# [0.0, 0.25, 0.5, 0.75, 1.0]
sub rescale_to_unit {
    my($numbers) = @_;
","sub rescale_to_unit {
    my($numbers) = @_;
    my $min = min(@$numbers);
    my $max = max(@$numbers);
    my @rescaled = map { ($_ - $min) / ($max - $min) } @$numbers;
    return \@rescaled;
}

sub min {
    my(@list) = @_;
    my $min = $list[0];
    foreach my $num (@list) {
        if ($num < $min) {
            $min = $num;
        }
    }
    return $min;
}

sub max {
    my(@list) = @_;
    my $max = $list[0];
    foreach my $num (@list) {
        if ($num > $max) {
            $max = $num;
        }
    }
    return $max;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rescale_to_unit;
        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_22,bod_Tibt,pl,"# ཨང་གྲངས་ཧྲིལ་པོ་ལ་རྐྱང་པའི་ plthon ཚད་ལྡན་གྱི་གྲངས་ཐང་གི་རིམ་པ་ངེས་ཅན་བཟོ་དགོས།# >>> filter_integers([""a"", 3.14, 5])
# [5]
# >>> filter_integers([1, 2, 3, ""abc"", {}, []])
# [1, 2, 3]
sub filter_integers {
    my($values) = @_;
","sub filter_integers {
    my ($values) = @_;
    return [grep { /^-?\d+$/ && !ref($_) } @$values];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_integers;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, ""adasd""]),[4, 9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, ""c"", 3, 3, ""a"", ""b""]),[3, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_23,bod_Tibt,pl,"# string གྱི་ཚད་གཞི་སླར་ལོག་བྱེད།# >>> strlen("""")
# 0
# >>> strlen(""abc"")
# 3
sub strlen {
    my($string) = @_;
","sub strlen {
    my($string) = @_;
    return length($string);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&strlen;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""x""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdasnakj""),9)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_24,bod_Tibt,pl,"# གྲངས་ n ཤིག་ཡོད་ན། n ལས་ཆུང་བའི་གྲངས་ཆེན་ཤོས་ n ཀྱིས་ཆ་བགོས་བྱེད་དེ་འཚོལ་དགོས།# >>> largest_divisor(15)
# 5
sub largest_divisor {
    my($n) = @_;
","sub largest_divisor {
    my($n) = @_;
    for (my $i = $n - 1; $i > 0; $i--) {
        if ($n % $i == 0) {
            return $i;
        }
    }
    return undef; # In case n is 1, there is no divisor less than n
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_divisor;
        if(eq_deeply($candidate->(3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),50)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(49),7)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_25,bod_Tibt,pl,"# ནང་འཇུག་གྲངས་ནི་གཞི་གྲངས་ཚང་མའི་འབྲས་བུ་དང་མཚུངས་པར་ངེས་པ་དགོས།# ཇི་འདྲ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་མང་བ་# ཆེ་ཆུང་ནས་ཆེ་ཆུང་བར་རིམ་བཞིན་གྲངས་ཀྱི་གྲངས་གཞི་གྲངས་དང་པོ་གྲངས་ཀྱི་རིམ་པ་སླར་ལོག་བྱེད།# >>> factorize(8)
# [2, 2, 2]
# >>> factorize(25)
# [5, 5]
# >>> factorize(70)
# [2, 5, 7]
sub factorize {
    my($n) = @_;
","sub factorize {
    my ($n) = @_;
    my @factors;
    for my $i (2 .. int(sqrt($n))) {
        while ($n % $i == 0) {
            push @factors, $i;
            $n /= $i;
        }
    }
    push @factors, $n if $n > 1;
    return @factors;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&factorize;
        if(eq_deeply($candidate->(2),[2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(57),[3, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3249),[3, 3, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(20577),[3, 19, 19, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(18),[2, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_26,bod_Tibt,pl,"# ནང་འཇུག་བྱ་ཡུལ་ནང་ཡོད་པའི་རིམ་པ་འདྲ་མཚུངས་རང་འཇོག་དགོས།# ཨང་གྲངས་ཧྲིལ་པོ་གི་རིམ་པ་ལས་ ཚར་གཅིག་ལས་མང་བ་བྱུང་བའི་ཆ་ཤས་ཚང་མ་ཕྱིར་འབུད་བྱེད།# >>> remove_duplicates([1, 2, 3, 2, 4])
# [1, 3, 4]
sub remove_duplicates {
    my($numbers) = @_;
","sub remove_duplicates {
    my ($numbers) = @_;
    my %count;
    $count{$_}++ for @$numbers;
    return [grep { $count{$_} == 1 } @$numbers];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&remove_duplicates;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_27,bod_Tibt,pl,"# ཚད་ལྡན་ཡིག་འབྲུ་ཚུའི་ནང་ཡིག་ཆུང་ཡིག་ཆུང་དང་ཡིག་ཆུང་ཡིག་ཆུང་ལ་བསྒྱུར་དགོས།# >>> flip_case(""Hello"")
# ""hELLO""
sub flip_case {
    my($string) = @_;
","sub flip_case {
    my($string) = @_;
    $string =~ tr/A-Za-z/a-zA-Z/;
    return $string;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&flip_case;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello!""),""hELLO!"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""These violent delights have violent ends""),""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_28,bod_Tibt,pl,"# string ཀྱི་རིམ་པ་གཅིག་ཏུ་བསྡོམས་པ།# >>> concatenate([])
# """"
# >>> concatenate([""a"", ""b"", ""c""])
# ""abc""
sub concatenate {
    my($strings) = @_;
","sub concatenate {
    my($strings) = @_;
    return join('', @$strings);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&concatenate;
        if(eq_deeply($candidate->([]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z""]),""xyz"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""x"", ""y"", ""z"", ""w"", ""k""]),""xyzwk"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_29,bod_Tibt,pl,"# ནང་འཇུག་ཐིག་གི་རིམ་པ་གཅིག་པུ་ནང་ prefix དང་འགོ་འཛུགས་ཀྱི་རིམ་པ་འདེམས་དགོས།# >>> filter_by_prefix([], ""a"")
# []
# >>> filter_by_prefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
# [""abc"", ""array""]
sub filter_by_prefix {
    my($strings, $prefix) = @_;
","sub filter_by_prefix {
    my ($strings, $prefix) = @_;
    return [grep { /^\Q$prefix\E/ } @$strings];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&filter_by_prefix;
        if(eq_deeply($candidate->([], ""john""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_30,bod_Tibt,pl,"# གྲལ་ཐིག་ནང་གྲངས་ཆ་མཐུན་པ་ཁོ་ན་ཕྱིར་ལོག་བྱེད་པ།# >>> get_positive([-1, 2, -4, 5, 6])
# [2, 5, 6]
# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# [5, 3, 2, 3, 9, 123, 1]
sub get_positive {
    my($l) = @_;
","sub get_positive {
    my($l) = @_;
    my @positive_numbers = grep { $_ > 0 } @$l;
    return \@positive_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_positive;
        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_31,bod_Tibt,pl,"# གྲངས་ཤིག་སྔོན་གྲངས་ཡིན་ན་ true སླར་ལོག་བྱེད། དེ་མིན་ན་ false སླར་ལོག་བྱེད།# >>> is_prime(6)
# """"
# >>> is_prime(101)
# 1
# >>> is_prime(11)
# 1
# >>> is_prime(13441)
# 1
# >>> is_prime(61)
# 1
# >>> is_prime(4)
# """"
# >>> is_prime(1)
# """"
sub is_prime {
    my($n) = @_;
","sub is_prime {
    my($n) = @_;
    return """" if $n <= 1;
    return 1 if $n == 2;
    return """" if $n % 2 == 0;
    for (my $i = 3; $i * $i <= $n; $i += 2) {
        return """" if $n % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_prime;
        if(eq_deeply($candidate->(6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13441),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(61),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(85),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(77),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(255379),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_33,bod_Tibt,pl,"# ཚད་གཞི་དང་མཚུངས་པའི་ཚད་གཞི་དང་མཚུངས་པ་རེད་ཀྱང་། ཚད་གཞི་སོ་སོར་དབྱེ་བ་བྱས་ཡོད།# l' ནི་ 3 ལ་བགོས་མི་ཐུབ་པའི་རྟགས་གྲངས་ནང་ l དང་མཚུངས་པ་དང་། དེའི་ཐང་ནི་ 3 ལ་བགོས་ཐུབ་པའི་རྟགས་གྲངས་ནང་འདྲ་མཉམ་ཡིན།# ལས་འགན་འདི་གིས་ array l དང་ array l' འདི་ལྟ་བུ་ཕྱིར་ལོག་བྱེད་དེ།# >>> sort_third([1, 2, 3])
# [1, 2, 3]
# >>> sort_third([5, 6, 3, 4, 8, 9, 2])
# [2, 6, 3, 4, 8, 9, 5]
sub sort_third {
    my($l) = @_;
","sub sort_third {
    my ($l) = @_;
    my @to_sort = map { $l->[$_] } grep { $_ % 3 == 0 } 0..$#$l;
    @to_sort = sort { $a <=> $b } @to_sort;
    my @result = @$l;
    my $index = 0;

    foreach my $i (0..$#{$l}) {
        if ($i % 3 == 0) {
            $result[$i] = $to_sort[$index++];
        }
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_third;
        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_34,bod_Tibt,pl,"# གྲལ་ཐིག་ནང་དབྱེ་བ་ཕྱེ་བའི་ཆ་ཤས་རྐྱང་པ་སླར་ལོག་བྱེད།# >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [0, 2, 3, 5, 9, 123]
sub unique {
    my($l) = @_;
","sub unique {
    my ($l) = @_;
    my %seen;
    my @unique_sorted = sort { $a <=> $b } grep { !$seen{$_}++ } @$l;
    return \@unique_sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&unique;
        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_35,bod_Tibt,pl,"# གྲལ་ཐིག་ནང་གི་ཆ་ཤས་ཆེ་ཆུང་ཕྱིར་ལོག་བྱེད།# >>> max_element([1, 2, 3])
# 3
# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
# 123
sub max_element {
    my($l) = @_;
","sub max_element {
    my($l) = @_;
    my $max = $l->[0];
    foreach my $value (@$l) {
        if ($value > $max) {
            $max = $value;
        }
    }
    return $max;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&max_element;
        if(eq_deeply($candidate->([1, 2, 3]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_36,bod_Tibt,pl,"# གྲངས་ 7 ནི་ 11 དང་ 13 ཀྱིས་ཆ་བགོས་ཐུབ་པའི་ n ལས་ཆུང་བའི་ཧྲིལ་གྲངས་ནང་ཐེངས་གྲངས་ཕྱིར་ལོག་བྱེད་པ།# >>> fizz_buzz(50)
# 0
# >>> fizz_buzz(78)
# 2
# >>> fizz_buzz(79)
# 3
sub fizz_buzz {
    my($n) = @_;
","sub fizz_buzz {
    my($n) = @_;
    my $count = 0;
    for my $i (1 .. $n-1) {
        if ($i % 11 == 0 || $i % 13 == 0) {
            $count++ if $i =~ /7/;
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fizz_buzz;
        if(eq_deeply($candidate->(50),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(78),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(79),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(200),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4000),192)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10000),639)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100000),8026)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_37,bod_Tibt,pl,"# ཚད་གཞི་དང་མཚུངས་པའི་གྲངས་ཀ་ཡིན་ཀྱང་། ཚད་གཞི་དང་མཚུངས་པའི་གྲངས་ཀ་ཡིན་ཀྱང་།# l' འདི་ l དང་མཚུངས་པ་ཉེར་མཁོ་ཅན་གྱི་གནས་ཚད་ནང་ཡིན་པའི་སྐབས་དང་ དེའི་གནས་ཚད་དེ་ཉེར་མཁོ་ཅན་གྱི་གནས་ཚད་ནང་འདྲ་མཉམ་ཡིན།# ལས་འགན་འདི་གིས་ array l དང་ array l' འདི་ལྟ་བུ་ཕྱིར་ལོག་བྱེད་དེ།# >>> sort_even([1, 2, 3])
# [1, 2, 3]
# >>> sort_even([5, 6, 3, 4])
# [3, 6, 5, 4]
sub sort_even {
    my($l) = @_;
","sub sort_even {
    my($l) = @_;
    my @even_indices;

    for (my $i = 0; $i < @$l; $i += 2) {
        push @even_indices, $l->[$i];
    }

    @even_indices = sort { $a <=> $b } @even_indices;

    my @result = @$l;
    
    for (my $i = 0; $i < @even_indices; $i++) {
        $result[$i * 2] = $even_indices[$i];
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_even;
        if(eq_deeply($candidate->([1, 2, 3]),[1, 2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_39,bod_Tibt,pl,"# prime_fib དེ་ནི་ཨང་གྲངས་ n-th དེ་ནི་ཕི་བྷོ་ན་ཅིའི་གྲངས་ཀ་ཞིག་ཡིན་པ་དང་དེ་ཡང་ཨང་གྲངས་ prime ཡིན་པ་ཕྱིར་སློག་བྱེད་པ་ཡིན།# >>> prime_fib(1)
# 2
# >>> prime_fib(2)
# 3
# >>> prime_fib(3)
# 5
# >>> prime_fib(4)
# 13
# >>> prime_fib(5)
# 89
sub prime_fib {
    my($n) = @_;
","sub is_prime {
    my($num) = @_;
    return 0 if $num < 2;
    for my $i (2 .. sqrt($num)) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub prime_fib {
    my($n) = @_;
    my ($a, $b) = (1, 1);
    my $count = 0;

    while (1) {
        my $fib = $a + $b;
        $a = $b;
        $b = $fib;
        if (is_prime($fib)) {
            $count++;
            return $fib if $count == $n;
        }
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prime_fib;
        if(eq_deeply($candidate->(1),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),13)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),89)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),233)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),1597)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),28657)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),514229)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),433494437)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_40,bod_Tibt,pl,"# འབོར་ཆ་ནི་ ༠ དང་གཞན་ན་# གལ་ཏེ་ array ནང་ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གསུམ་ཡོད་ན་ 1 སླར་ལོག་བྱེད།# triple_sum_to_zero ནང་འཇུག་ལྟར་ཨང་གྲངས་ཧྲིལ་པོ་གྲངས་ལྡན་ཞིག་ལེན་ཡོད།# >>> triples_sum_to_zero([1, 3, 5, 0])
# """"
# >>> triples_sum_to_zero([1, 3, -2, 1])
# 1
# >>> triples_sum_to_zero([1, 2, 3, 7])
# """"
# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
# 1
# >>> triples_sum_to_zero([1])
# """"
sub triples_sum_to_zero {
    my($l) = @_;
","sub triples_sum_to_zero {
    my($l) = @_;
    my $n = scalar @$l;
    for my $i (0 .. $n-3) {
        for my $j ($i+1 .. $n-2) {
            for my $k ($j+1 .. $n-1) {
                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {
                    return 1;
                }
            }
        }
    }
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triples_sum_to_zero;
        if(eq_deeply($candidate->([1, 3, 5, 0]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 5, -1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 5, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 5, -100]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 3, 5, -100]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_41,bod_Tibt,pl,"# ལས་འགན་འདི་ནས་གློག་རྡུལ་འདི་འདྲ་མང་པོ་བྱུང་བའི་གྲངས་ཐོར་ཐིག་བཏོན་ཡོད།# འདྲ་བ་དེ་དག་གིས་མ་བརྡུང་བར་རང་རང་གི་ལམ་དུ་འགྲོ་བ་རེད།# ཡིན་ན་ཡང་ཤིང་རྟ་ཚོ་ཧ་ཅང་བརྟན་པོ་དང་ཤུགས་ཆེན་པོ་ཡོད་སྟབས་དུས་རྒྱུན་དུ་འགྲོ་གི་འདུག# ཕྱོགས་གང་ནས་འགྲོ་བའི་ཤིང་རྟ་ཞིག་གཡས་གཡོན་ནས་འགྲོ་བའི་ཤིང་རྟ་ཞིག་དང་ཐུག་སྐབས།# སྣུམ་འཁོར་ཚང་མ་མྱུར་ཚད་གཅིག་མཚུངས་ལ་འགྲོ་གི་ཡོད། སྣུམ་འཁོར་གཉིས་བརྡབ་སྐྱོན་བྱུང་ཞེས་བརྗོད་ཀྱི་ཡོད།# ཕྱོགས་གཡས་གཡོན་ལ་འགྲོ་གི་འདུག སྣུམ་འཁོར་གཉིས་ཀ་འདི་ནས་ཧ་ཅང་ཐག་རིང་ནས་འགྲོ་གི་འདུག# ཕྱོགས་གཅིག་ཏུ་ n པོ་འཁོར་ལམ་གྱི་ཁ་ཕྱོགས་ནས་གཡོན་ཕྱོགས་སུ་འགྲོ་གི་ཡོད་པ་དང་། ཕྱོགས་གཅིག་ཏུ་ n པོ་འཁོར་ལམ་གྱི་ཁ་ཕྱོགས་ནས་ཁ་ཕྱོགས་ལ་འགྲོ་གི་ཡོད།# ཚད་མེད་རིང་བའི་ཕྲེང་བ་དྲང་པོ་ཞིག་ཡིན་པ་བསམ་བློ་བཏང་ཞིགsub car_race_collision {
    my($n) = @_;
","sub car_race_collision {
    my($n) = @_;
    return $n;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&car_race_collision;
        if(eq_deeply($candidate->(2),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),64)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),100)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_42,bod_Tibt,pl,"# ཚད་གཞི་ 1 ཀྱིས་ཡར་སེང་བྱས་པའི་ཆ་ཤས་ཡོད་པའི་རིམ་པ་ཕྱིར་ལོག་བྱེད།# >>> incr_list([1, 2, 3])
# [2, 3, 4]
# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
# [6, 4, 6, 3, 4, 4, 10, 1, 124]
sub incr_list {
    my($l) = @_;
","sub incr_list {
    my($l) = @_;
    return [map { $_ + 1 } @$l];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&incr_list;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_43,bod_Tibt,pl,"# འབོར་ཆ་ནི་ ༠ དང་གཞན་ན་# གལ་ཏེ་ array ནང་ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གཉིས་ཡོད་ན་ 1 སླར་ལོག་བྱེད།# pairs_sum_to_zero ནང་འཇུག་ལྟར་ཨང་གྲངས་ཧྲིལ་པོ་གྲངས་ལྡན་ཞིག་ལེན་པ།# >>> pairs_sum_to_zero([1, 3, 5, 0])
# """"
# >>> pairs_sum_to_zero([1, 3, -2, 1])
# """"
# >>> pairs_sum_to_zero([1, 2, 3, 7])
# """"
# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
# 1
# >>> pairs_sum_to_zero([1])
# """"
sub pairs_sum_to_zero {
    my($l) = @_;
","sub pairs_sum_to_zero {
    my ($l) = @_;
    my %seen;
    for my $num (@$l) {
        if ($seen{-1 * $num}) {
            return 1;
        }
        $seen{$num} = 1;
    }
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&pairs_sum_to_zero;
        if(eq_deeply($candidate->([1, 3, 5, 0]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, -2, 1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_44,bod_Tibt,pl,"# གཞི་གྲངས་ནི་ ༡༠ ལས་ཉུང་བ་རེད།# ཚད་གཞི་འདི་ནི་ ཚད་གཞི་འདི་ནི་ ཚད་གཞི་འདི་ནི་ ཚད་གཞི་འདི་ནི་ ཚད་གཞི་འདི་ནི་ ཚད་གཞི་འདི་ནི་ ཚད་གཞི་འདི་ནི་ ཚད་གཞི་འདི་ནི་# ནང་འཇུག་གྲངས་ x གི་གྲངས་གཞི་གཞི་བསྒྱུར་བ།# >>> change_base(8, 3)
# ""22""
# >>> change_base(8, 2)
# ""1000""
# >>> change_base(7, 2)
# ""111""
sub change_base {
    my($x, $base) = @_;
","sub change_base {
    my ($x, $base) = @_;
    my $result = '';
    
    if ($base < 2 || $base > 9) {
        die ""Base must be between 2 and 9"";
    }

    while ($x > 0) {
        my $remainder = $x % $base;
        $result = $remainder . $result;
        $x = int($x / $base);
    }

    return $result eq '' ? '0' : $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&change_base;
        if(eq_deeply($candidate->(8, 3),""22"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9, 3),""100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(234, 2),""11101010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16, 2),""10000"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8, 2),""1000"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 2),""111"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),""2"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 4),""3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5),""4"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 6),""5"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 7),""6"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 8),""7"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_45,bod_Tibt,pl,"# ཟུར་གསུམ་གྱི་རིང་ཚད་དང་མཐོ་ཚད་ཀྱི་ལོག་ཕྱོགས་ཀྱི་ས་ཆ་# >>> triangle_area(5, 3)
# 7.5
sub triangle_area {
    my($a, $h) = @_;
","sub triangle_area {
    my ($a, $h) = @_; 
    return 0.5 * $a * $h;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triangle_area;
        if(eq_deeply($candidate->(5, 3),7.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2),2.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 8),40.0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_46,bod_Tibt,pl,"# fib4གྲངས་རིམ་གྱི་ n-th ཆ་ཤས་ངེས་གཏན་ཆེད་ལས་འགན་ཞིག་བྲིས་རོགས་གནང་། སླར་ལོག་མི་འཇུག་རོགས་གནང་།# མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད། མཆིན་པ་ནད།# fib4(3) -> 0 # fib4 (((2) -> 2 # fib4(1) -> 0 # fib4 ((0)) -> 0 # Fib4 ནི་ Fibbonacci གི་རིམ་པ་དང་འདྲ་བའི་རིམ་པ་ཞིག་ཡིན་ཏེ། དེའི་འགྲེལ་བཤད་ནི་གཤམ་གསལ་ལྟར་ཡིན།# >>> fib4(5)
# 4
# >>> fib4(6)
# 8
# >>> fib4(7)
# 14
sub fib4 {
    my($n) = @_;
","sub fib4 {
    my ($n) = @_;
    return 0 if $n == 0 || $n == 1 || $n == 3;
    return 2 if $n == 2;
    
    my @fib4 = (0, 0, 2, 0);
    
    for my $i (4 .. $n) {
        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];
    }
    
    return $fib4[$n];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fib4;
        if(eq_deeply($candidate->(5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),28)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),104)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),386)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_47,bod_Tibt,pl,"# ཚད་གཞི་ནང་ཡོད་པའི་ཆ་ཤས་ཀྱི་བར་མཚམས་སླར་ལོག་འབད། l# >>> median([3, 1, 2, 4, 5])
# 3
# >>> median([-10, 4, 6, 1000, 10, 20])
# 15.0
sub median {
    my($l) = @_;
","sub median {
    my($l) = @_;
    my @sorted = sort { $a <=> $b } @$l;
    my $len = @sorted;
    if ($len % 2 == 1) {
        return $sorted[int($len/2)];
    } else {
        return ($sorted[$len/2 - 1] + $sorted[$len/2]) / 2;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&median;
        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 5]),5.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_48,bod_Tibt,pl,"# string དེ་ palindrome ཡིན་མིན་ལ་བརྟག་དཔྱད་བྱེད།# >>> is_palindrome("""")
# 1
# >>> is_palindrome(""aba"")
# 1
# >>> is_palindrome(""aaaaa"")
# 1
# >>> is_palindrome(""zbcd"")
# """"
sub is_palindrome {
    my($text) = @_;
","sub is_palindrome {
    my ($text) = @_;
    return $text eq reverse($text) ? 1 : """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_palindrome;
        if(eq_deeply($candidate->(""""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aba""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaa""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""zbcd""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywyx""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywyz""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xywzx""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_49,bod_Tibt,pl,"# ཕྱིར་ལོག་ 2^n modulo p (གྲངས་ཀ་ལ་དོ་སྣང་བྱ་དགོས།)# >>> modp(3, 5)
# 3
# >>> modp(1101, 101)
# 2
# >>> modp(0, 101)
# 1
# >>> modp(3, 11)
# 8
# >>> modp(100, 101)
# 1
sub modp {
    my($n, $p) = @_;
","sub modp {
    my($n, $p) = @_;
    return (2 ** $n) % $p;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&modp;
        if(eq_deeply($candidate->(3, 5),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1101, 101),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 11),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100, 101),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30, 5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(31, 5),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_51,bod_Tibt,pl,"# remove_vowels ནི་ལས་འགན་ཞིག་ཡིན་པས་ string དང་ vowels མེད་པའི་ string སླར་ལོག་བྱེད།# >>> remove_vowels("""")
# """"
# >>> remove_vowels(""abcdef"")
# ""bcdf""
# >>> remove_vowels(""aaaaa"")
# """"
# >>> remove_vowels(""aaBAA"")
# ""B""
# >>> remove_vowels(""zbcd"")
# ""zbcd""
sub remove_vowels {
    my($text) = @_;
","sub remove_vowels {
    my($text) = @_;
    $text =~ s/[aeiouAEIOU]//g;
    return $text;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&remove_vowels;
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef
ghijklm""),""bcdf
ghjklm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""fedcba""),""fdcb"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""acBAA""),""cB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""EcBOO""),""cB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ybcd""),""ybcd"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_52,bod_Tibt,pl,"# གྲངས་ཐང་ 1 སླར་ལོག་བྱེད། གལ་ཏེ་གྲངས་ཐང་ l ནང་གི་གྲངས་ཐང་ཚང་མ་ཚད་མཐར་ t ལས་དམའ་བ་ཡིན་ན།# >>> below_threshold([1, 2, 4, 10], 100)
# 1
# >>> below_threshold([1, 20, 4, 10], 5)
# """"
sub below_threshold {
    my($l, $t) = @_;
","sub below_threshold {
    my($l, $t) = @_;
    foreach my $num (@$l) {
        return """" if $num >= $t;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&below_threshold;
        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 8, 4, 10], 10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_53,bod_Tibt,pl,"# གྲངས་གཉིས་ x དང་ y བསྡུས་པ།# >>> add(2, 3)
# 5
# >>> add(5, 7)
# 12
sub add {
    my($x, $y) = @_;
","return $x + $y;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add;
        if(eq_deeply($candidate->(0, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 7),12)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 5),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_54,bod_Tibt,pl,"# ཚིག་གཉིས་ནང་ཡིག་འབྲུ་འདྲ་མཚུངས་ཡོད་མེད་བརྟག་དཔྱད་བྱེད་དགོས།# >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
# 1
# >>> same_chars(""abcd"", ""dddddddabc"")
# 1
# >>> same_chars(""dddddddabc"", ""abcd"")
# 1
# >>> same_chars(""eabcd"", ""dddddddabc"")
# """"
# >>> same_chars(""abcd"", ""dddddddabce"")
# """"
# >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
# """"
sub same_chars {
    my($s0, $s1) = @_;
","sub same_chars {
    my($s0, $s1) = @_;
    
    my %chars_s0 = map { $_ => 1 } split //, $s0;
    my %chars_s1 = map { $_ => 1 } split //, $s1;

    foreach my $char (keys %chars_s0) {
        return """" unless exists $chars_s1{$char};
    }

    foreach my $char (keys %chars_s1) {
        return """" unless exists $chars_s0{$char};
    }

    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&same_chars;
        if(eq_deeply($candidate->(""eabcdzzzz"", ""dddzzzzzzzddeddabc""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd"", ""dddddddabc""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dddddddabc"", ""abcd""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eabcd"", ""dddddddabc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd"", ""dddddddabcf""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eabcdzzzz"", ""dddzzzzzzzddddabc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aabb"", ""aaccc""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_55,bod_Tibt,pl,"# ཕི་བོ་ན་ཅིའི་གྲངས་ n སླར་ལོག་བྱ་དགོས།# >>> fib(10)
# 55
# >>> fib(1)
# 1
# >>> fib(8)
# 21
sub fib {
    my($n) = @_;
","sub fib {
    my ($n) = @_;
    return $n if $n <= 1;
    my ($a, $b) = (0, 1);
    for (2..$n) {
        ($a, $b) = ($b, $a + $b);
    }
    return $b;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fib;
        if(eq_deeply($candidate->(10),55)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),21)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),89)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),144)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_56,bod_Tibt,pl,"# ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ།# brackets ནི་ ""<"" དང་ "">"" ཀྱི་ཡིག་འབྲུ་ཡིན།# >>> correct_bracketing(""<"")
# """"
# >>> correct_bracketing(""<>"")
# 1
# >>> correct_bracketing(""<<><>>"")
# 1
# >>> correct_bracketing(""><<>"")
# """"
sub correct_bracketing {
    my($brackets) = @_;
","sub correct_bracketing {
    my($brackets) = @_;
    my $balance = 0;

    foreach my $char (split //, $brackets) {
        if ($char eq '<') {
            $balance++;
        } elsif ($char eq '>') {
            $balance--;
            if ($balance < 0) {
                return """";
            }
        }
    }
    
    return $balance == 0 ? 1 : """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&correct_bracketing;
        if(eq_deeply($candidate->(""<>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<><>>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<<><><>><>><<><><<>>>""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<<><>>>>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""><<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<<<""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("">""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>><<>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""<><><<><>><>>><>""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_57,bod_Tibt,pl,"# Return 1 ནི་གཞི་རིམ་གྱི་ཆ་ཤས་རྣམས་གཅིག་མཚུངས་དུ་ཡར་འཕར་བའམ་མར་ཕབ་བྱེད་སྟངས།# >>> monotonic([1, 2, 4, 20])
# 1
# >>> monotonic([1, 20, 4, 10])
# """"
# >>> monotonic([4, 1, 0, -10])
# 1
sub monotonic {
    my($l) = @_;
","sub monotonic {
    my($l) = @_;
    return 1 if @$l <= 1;
    
    my $increasing = 1;
    my $decreasing = 1;
    
    for my $i (1 .. $#$l) {
        if ($l->[$i] > $l->[$i - 1]) {
            $decreasing = 0;
        } elsif ($l->[$i] < $l->[$i - 1]) {
            $increasing = 0;
        }
    }
    
    return $increasing || $decreasing ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&monotonic;
        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 20, 4, 10]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_58,bod_Tibt,pl,"# གྲལ་ཐིག་གཉིས་སུ་དབྱེ་བ་བཏང་བའི་རང་བཞིན། དངོས་པོ་ལོག་འཇུག་བྱེད།# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
# [1, 5, 653]
# >>> common([5, 3, 2, 8], [3, 2])
# [2, 3]
sub common {
    my($l1, $l2) = @_;
","sub common {
    my($l1, $l2) = @_;
    my %count;
    $count{$_}++ for @$l1;
    $count{$_}++ for grep { exists $count{$_} } @$l2;
    return [ sort { $a <=> $b } grep { $count{$_} > 1 } keys %count ];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&common;
        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_59,bod_Tibt,pl,"# n གི་གྲངས་ཐང་ཆེ་ཤོས་ཕྱིར་ལོག་བྱེད་པ། n > 1 དང་གྲངས་ཐང་ཆེ་མིན་པའི་ངེས་ཚིག་ཡིན།# >>> largest_prime_factor(13195)
# 29
# >>> largest_prime_factor(2048)
# 2
sub largest_prime_factor {
    my($n) = @_;
","sub largest_prime_factor {
    my($n) = @_;
    my $largest_factor = 1;
    my $factor = 2;

    while ($n > 1) {
        if ($n % $factor == 0) {
            $largest_factor = $factor;
            $n /= $factor;
        } else {
            $factor++;
        }
    }
    
    return $largest_factor;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_prime_factor;
        if(eq_deeply($candidate->(15),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(27),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(63),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(330),11)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13195),29)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_60,bod_Tibt,pl,"# sum_to_n ནི་ 1 ནས་ n བར་གྱི་གྲངས་གྲངས་བསྡོམས་པའི་ལས་འགན་ཡིན།# >>> sum_to_n(30)
# 465
# >>> sum_to_n(100)
# 5050
# >>> sum_to_n(5)
# 15
# >>> sum_to_n(10)
# 55
# >>> sum_to_n(1)
# 1
sub sum_to_n {
    my($n) = @_;
","sub sum_to_n {
    my ($n) = @_;
    return $n * ($n + 1) / 2;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_to_n;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),21)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),66)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30),465)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),5050)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_61,bod_Tibt,pl,"# ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ། ཤོག་ངོས་དང་པོ།# brackets ནི་ ""("" དང་ """") ཀྱི་ཡིག་འབྲུ་ཡིན།# >>> correct_bracketing(""("")
# """"
# >>> correct_bracketing(""()"")
# 1
# >>> correct_bracketing(""(()())"")
# 1
# >>> correct_bracketing("")(()"")
# """"
sub correct_bracketing {
    my($brackets) = @_;
","sub correct_bracketing {
    my ($brackets) = @_;
    my $balance = 0;

    foreach my $char (split //, $brackets) {
        if ($char eq '(') {
            $balance++;
        } elsif ($char eq ')') {
            $balance--;
        }
        # If balance is negative, it means there's a closing bracket without a matching opening
        if ($balance < 0) {
            return '';
        }
    }

    # If balance is zero, all brackets are correctly matched
    return $balance == 0 ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&correct_bracketing;
        if(eq_deeply($candidate->(""()""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()())""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())()""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()((()()())())(()()(()))""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""((()())))""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("")(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""((((""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("")""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())())(()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""()()(()())()))()""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_62,bod_Tibt,pl,"# འདྲ་བའི་རྣམ་གྲངས་ཀྱི་ཟུར་གྲངས་ཕྱིར་ལོག་བྱེད་པ།# xs[0] + xs[1] * x + xs[2] * x^2 + .... # xs ནི་མང་ཚུའི་མཚོན་རྟགས་ཡིན་ཏེ།# >>> derivative([3, 1, 2, 4, 5])
# [1, 4, 12, 20]
# >>> derivative([1, 2, 3])
# [2, 6]
sub derivative {
    my($xs) = @_;
","sub derivative {
    my($xs) = @_;
    my @derivative;
    
    for my $i (1 .. $#{$xs}) {
        push @derivative, $xs->[$i] * $i;
    }
    
    return \@derivative;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&derivative;
        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3]),[2, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_63,bod_Tibt,pl,"# ཤོག་གྲངས་རིམ་པའི་ n-th ནང་གི་ཆ་ཤས་ལེགས་པར་རྩིས་ཐུབ་པའི་ལས་འགན་ཞིག་བྲིས་རོགས།# fib fib (n) == fib (n-1) + fib (n-2) + fib (n-3)# མཆིན་པ་གཉིས།# སྦྲེལ་རྟགས་:# fib fib    # FibFib ཨང་རིམ་ནི་ Fibbonacci sequence དང་འདྲ་བའི་རིམ་པ་ཞིག་ཡིན་ཏེ། དེའི་འགྲེལ་བཤད་ནི་གཤམ་གསལ་ལྟར་ཡིན།# >>> fibfib(1)
# 0
# >>> fibfib(5)
# 4
# >>> fibfib(8)
# 24
sub fibfib {
    my($n) = @_;
","sub fibfib {
    my($n) = @_;
    return 0 if $n == 0;
    return 0 if $n == 1;
    return 1 if $n == 2;

    my @fibfib = (0, 0, 1);
    for my $i (3..$n) {
        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];
    }
    return $fibfib[$n];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fibfib;
        if(eq_deeply($candidate->(2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),24)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),81)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),274)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(14),927)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_64,bod_Tibt,pl,"# དཔེ་ཆ། # vowel ཟེར་བ་འདི། འོན་ཀྱང་ཚིག་གི་མཐའ་མ་ལ་ཡོད་ན་ཁོ་ན་ཡིན།# འདིར་སྒྲ་དབྱངས་ཀྱི་རྣམ་པ་ནི་ ""a"", ""e"", ""i"", ""o"", ""u"" རྣམས་ཡིན། འདིར་ ""y"" ཀྱང་ a ཡིན་# ཚིག་ཡིག་འདི་ནི་ནང་འཇུག་བྱེད་སྟངས་དང་ string ནང་གི་སྒྲ་སྒྲ་གྲངས་ཕྱིར་ལོག་བྱེད་སྟངས་ཡིན།# ཤོག་གྲངས་ཀྱི་རྣམ་གྲངས་ལ་མཚོན་པའི་ཡིག་འབྲུ་ཞིག་བྲིས་ན།# >>> vowels_count(""abcde"")
# 2
# >>> vowels_count(""ACEDY"")
# 3
sub vowels_count {
    my($s) = @_;
","sub vowels_count {
    my($s) = @_;
    my $count = 0;
    my @chars = split //, lc $s;
    my $length = scalar @chars;

    for my $i (0..$#chars) {
        if ($chars[$i] =~ /[aeiou]/ || ($chars[$i] eq 'y' && $i == $length - 1)) {
            $count++;
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&vowels_count;
        if(eq_deeply($candidate->(""abcde""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Alone""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""key""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bye""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""keY""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bYe""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ACEDY""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_65,bod_Tibt,pl,"# shift > digits ཟེར་བ་ཡོད་ན་ return digits བསྒྱུར་ནས་ཨང་གྲངས་འདེམས་དགོས།# འབྲས་བུ་ནི་ string སྦེ་སླར་ལོག་འབདཝ་ཨིན།# འབོར་གྲངས་ x གི་ཨང་གྲངས་རྣམས་འཁོར་ལམ་དུ་སྤོ་བཤུད་བྱེད་པ། ཨང་གྲངས་རྣམས་གཡས་སུ་སྤོ་བཤུད་བྱེད་པ།# >>> circular_shift(12, 1)
# ""21""
# >>> circular_shift(12, 2)
# ""12""
sub circular_shift {
    my($x, $shift) = @_;
","sub circular_shift {
    my($x, $shift) = @_;
    my $digits = length($x);
    
    if ($shift > $digits) {
        return reverse $x;
    }
    
    $shift = $shift % $digits;
    my $shifted = substr($x, -$shift) . substr($x, 0, $digits - $shift);
    
    return $shifted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&circular_shift;
        if(eq_deeply($candidate->(100, 2),""001"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 2),""12"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(97, 8),""79"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 1),""21"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11, 101),""11"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_66,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཨཱ་སི་ཀི་ཨི་ཨང་ཀོཌ།# ནང་འཇུག་ལྟར་ string དང་སྟེང་གི་ཡིག་རྟགས་ཀྱི་བསྡོམས་གྲངས་ཕྱིར་ལོག་བྱེད་ function ཞིག་འབྲི་དགོས།# ལས་འགན་ # >>> digitSum("""")
# 0
# >>> digitSum(""abAB"")
# 131
# >>> digitSum(""abcCd"")
# 67
# >>> digitSum(""helloE"")
# 69
# >>> digitSum(""woArBld"")
# 131
# >>> digitSum(""aAaaaXa"")
# 153
sub digitSum {
    my($s) = @_;
","sub digitSum {
    my($s) = @_;
    my $sum = 0;
    foreach my $char (split //, $s) {
        if ($char =~ /[A-Z]/) {
            $sum += ord($char);
        }
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&digitSum;
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abAB""),131)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcCd""),67)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""helloE""),69)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""woArBld""),131)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aAaaaXa""),153)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("" How are yOu?""),151)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""You arE Very Smart""),327)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_67,bod_Tibt,pl,"# ཆེད་སྒྲིག# ཙེལ་པོ་ནང་ཡོད་པའི་མན་གྷོའི་འབྲས་བུ་གྲངས་ཕྱིར་ལོག་བྱེད་པ།# འབྲས་བུའི་གྲངས་ཐང་མཚོན་པའི་ཨང་གྲངས་ཧྲིལ་པོ་དང་ཁམ་བུ་དང་ཁམ་བུ་བཅས་ཡིན།# འབྲས་བུའི་གྲངས་རྩིས་ཀྱི་ཐིག་ཁྲམ་འདི་ལ།# འབྲས་བུ་ཡོད་པའི་ཙེལ་པོ་ཞིག་ལ་བགོས་པའི་ཤིང་འབྲས་ཡིན།# ལས་འགན་འདིའི་ནང་ཁྱོད་ཚོར་ apple དང་ orange གྱི་གྲངས་ཐང་མཚོན་པའི་ string ཞིག་ཐོབ་ངེས་ཡིན།# >>> fruit_distribution(""5 apples and 6 oranges"", 19)
# 8
# >>> fruit_distribution(""0 apples and 1 oranges"", 3)
# 2
# >>> fruit_distribution(""2 apples and 3 oranges"", 100)
# 95
# >>> fruit_distribution(""100 apples and 1 oranges"", 120)
# 19
sub fruit_distribution {
    my($s, $n) = @_;
","sub fruit_distribution {
    my($s, $n) = @_;
    
    # Extract numbers from the input string
    my ($apples, $oranges) = $s =~ /(\d+) apples and (\d+) oranges/;
    
    # Calculate total apples and oranges
    my $total_apples_oranges = $apples + $oranges;
    
    # Calculate number of mangoes
    my $mangoes = $n - $total_apples_oranges;
    
    return $mangoes;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fruit_distribution;
        if(eq_deeply($candidate->(""5 apples and 6 oranges"", 19),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5 apples and 6 oranges"", 21),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0 apples and 1 oranges"", 3),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1 apples and 0 oranges"", 3),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2 apples and 3 oranges"", 100),95)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2 apples and 3 oranges"", 5),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1 apples and 100 oranges"", 120),19)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_68,bod_Tibt,pl,"# དཔེ་གཞི་དང་པོ།# གལ་ཏེ་གྲངས་ཆ་མཚུངས་མེད་པའམ་གྲངས་ཐང་སྟོང་པ་ཡོད་ན་ return [] ཟེར་བ་འདེམས་དགོས།# ཕྱིར་བཏོན་པའི་ཨང་གྲངས་ནི་གཞི་རིམ་ནང་ཕྱིར་ལོག་བྱེད་པ། [smallest_value, its index], # གལ་ཏེ་ཕྲ་གྲངས་ཆུང་ཤོས་དང་ཕྲ་གྲངས་ཉུང་ཤོས་འདྲ་མཉམ་ཡོད་པའི་ཕྲ་གྲངས་མང་པོ་བསྡུས་ན་ཕྲ་གྲངས་ཆུང་ཤོས་ཡོད་པའི་ཕྲ་གྲངས་ཕྱིར་ལོག་བྱེད།# ཕྱིར་འཐེན་བྱས་པའི་ཨང་རྟགས་ནི་ཨང་རྟགས་ཆུང་ཤོས་དང་མཚུངས་པའི་ཨང་རྟགས་ཡིན་དགོས།# ཁྱོད་ཀྱི་ལས་འགན་ནི་ཨང་རྟགས་གཅིག་བཏོན་ནས་ཕྱིར་ལོག་བྱེད་རྒྱུ་དེ་ཡིན།# ""ཨེ་རེ་དེ་ཤིང་སྡོང་གི་ཡལ་ག་གང་ཞིག་ལ་མཚོན་ན་ འབྲས་བུ་མེད་པའི་ཧྲིལ་གྲངས་ཀྱི་ཨང་གྲངས་ཡོད་པ།# >>> pluck([4, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 2:
# >>> pluck([1, 2, 3])
# [2, 1]
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 3:
# >>> pluck([])
# []
# Example 4:
# >>> pluck([5, 0, 3, 0, 4, 2])
# [0, 1]
# Explanation: 0 is the smallest value, but  there are two zeros,
# so we will choose the first zero, which has the smallest index.
# Constraints:
# * 1 <= nodes.length <= 10000
# * 0 <= node.value
sub pluck {
    my($arr) = @_;
","sub pluck {
    my ($arr) = @_;
    my $min_even_value = undef;
    my $min_index = undef;

    for my $i (0 .. @$arr - 1) {
        my $value = $arr->[$i];
        if ($value % 2 == 0) {
            if (!defined($min_even_value) || $value < $min_even_value) {
                $min_even_value = $value;
                $min_index = $i;
            }
        }
    }

    return defined($min_even_value) ? [$min_even_value, $min_index] : [];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&pluck;
        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3]),[2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 9, 7, 1]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_69,bod_Tibt,pl,"# དཔེ་གཟིགས།# གལ་ཏེ་གོང་ཚད་དེ་མེད་ན་ -1 སླར་ལོག་བྱེད།# ཨང་གྲངས་ཧྲིལ་པོ་ཞིག་གི་འཕྲལ་ཆ། དེ་ནི་ཨང་གྲངས་ཧྲིལ་པོ་ཞིག་ཐིག་ཁྲམ་ནང་ཇི་ཙམ་ཐེངས་མངོན་པ་ཡིན།# ནུས་པ་ 0 དང་འཕྲལ་དུ་མང་བ་ཡང་ན་ འདྲ་མཉམ་གྲངས་ཆ་རང་གི་རིན་ཐང་དང་མཚུངས་པ་ཡོད།# ཁྱོད་ཀྱིས་ཁ་སྐོང་གྲངས་ཆ་མེད་ཀྱི་གྲངས་ཐང་མེད་པའི་གྲངས་ཐང་ཐོབ་ཡོད། ལས་མང་བའི་གྲངས་ཐང་ཆེན་ཤོས་ཕྱིར་ལོག་བྱོས།# >>> search([4, 1, 2, 2, 3, 1])
# 2
# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])
# 3
# >>> search([5, 5, 4, 4, 4])
# -1
sub search {
    my($lst) = @_;
","sub search {
    my($lst) = @_;
    my %frequency;

    foreach my $num (@$lst) {
        $frequency{$num}++;
    }

    my $result = -1;
    foreach my $num (keys %frequency) {
        if ($num > 0 && $frequency{$num} >= $num) {
            if ($num > $result) {
                $result = $num;
            }
        }
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&search;
        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 3]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 8, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_70,bod_Tibt,pl,"# དཔེ་གཟིགས།# དེའི་རྗེས་ལ་ལྷག་ལུས་ཧྲིལ་གྲངས་ཀྱི་ཆེ་མཐར། དེའི་རྗེས་ལ་ཉུང་མཐར། ཟེར་བ་ལྟ་བུ།# ཇི་ཙམ་གལ་ཆེ་བས་གལ་ཆེ་བ་ཡིན་པའི་ཚད་གཞི་ནས་འགོ་འཛུགས་པ།# ཇི་ཡོད་ཨང་གྲངས་ཀྱི་རིམ་པ་ཡོད་ན། རིམ་པ་དལ་འབྱོར་དུ་ལོག་དགོས།# >>> strange_sort_list([1, 2, 3, 4])
# [1, 4, 2, 3]
# >>> strange_sort_list([5, 5, 5, 5])
# [5, 5, 5, 5]
# >>> strange_sort_list([])
# []
sub strange_sort_list {
    my($lst) = @_;
","sub strange_sort_list {
    my($lst) = @_;
    my @result;
    my @sorted = sort {$a <=> $b} @$lst;
    
    while (@sorted) {
        push @result, shift @sorted;
        push @result, pop @sorted if @sorted;
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&strange_sort_list;
        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111111]),[111111])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_71,bod_Tibt,pl,"# དཔེ་ཆ། # ཤོག་ངོས་གསུམ་པ་ལས་ལྷག་པ་མེད།# གཡོན་པ་གསུམ་གྱིས་རྣམ་གསུམ་གྲུབ་པའི་སྐབས་ཀྱི་གྲངས་ཐང་ནི་གཞན་གྱི་ཟུར་པ་གཉིས་ལས་མང་བ་ཡིན་ཏེ།# དེ་མིན་ལོག་ -1 # ཕྱོགས་གསུམ་གྱི་རྣམ་པ་གསུམ་ལྡན་པ་ཞིག་ཡིན་ན། ཟུར་གསུམ་གྱི་མཐའ་འཁོར་གྱི་ཟུར་གྲངས་ནི་བཅུ་ཆ་གཉིས་སུ་བསྡུ་དགོས།# ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ལ་གཞི་བྱས་ན། གྱི་ཁྱབ་ཚད་ཕྱིར་ལོག་བྱེད་པ།# >>> triangle_area(3, 4, 5)
# 6.0
# >>> triangle_area(1, 2, 10)
# -1
sub triangle_area {
    my($a, $b, $c) = @_;
","sub triangle_area {
    my($a, $b, $c) = @_;
    
    # Check if the sides form a valid triangle
    unless ($a + $b > $c && $a + $c > $b && $b + $c > $a) {
        return -1;
    }
    
    # Calculate the semi-perimeter
    my $s = ($a + $b + $c) / 2;
    
    # Calculate the area using Heron's formula
    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));
    
    # Return the area rounded to 2 decimal points
    return sprintf(""%.2f"", $area);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&triangle_area;
        if(eq_deeply($candidate->(3, 4, 5),6.0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 8, 5),8.18)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 2),1.73)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 3),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 5, 7),16.25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 6, 3),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1, 1),0.43)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_72,bod_Tibt,pl,"# དཔེ་ཆ། # དངོས་པོ་ q དེ་ཚད་ལྡན་ཡིན་ན་འཕུར་ཐུབ། (དེ་ནི་པཱ་ལིན་ཌོ་མིག་ཨར་རི་ཡིན་) དེའི་ཆ་ཤས་ཀྱི་བསྡོམས་ནི་ནུས་ལྡན་ལྗིད་ཚད་ w ལས་ཆུང་བ་ཡང་ན་དེའི་འདྲ་མཉམ་ཡིན་ན།# དངོས་པོ་ q འཕུར་ནས་འགྲོ་ཐུབ་ན་ 1 སླར་ལོག་བྱེད་པ་དང་གཞན་ན་ '' སླར་ལོག་བྱེད་པའི་ལས་འགན་ཞིག་བྲིས་དགོས།# >>> will_it_fly([1, 2], 5)
# """"
# # 1+2 is less than the maximum possible weight, but it's unbalanced.
# >>> will_it_fly([3, 2, 3], 1)
# """"
# # it's balanced, but 3+2+3 is more than the maximum possible weight.
# >>> will_it_fly([3, 2, 3], 9)
# 1
# # 3+2+3 is less than the maximum possible weight, and it's balanced.
# >>> will_it_fly([3], 5)
# 1
# # 3 is less than the maximum possible weight, and it's balanced.
sub will_it_fly {
    my($q, $w) = @_;
","sub will_it_fly {
    my($q, $w) = @_;
    # Check if the array is palindromic
    my @reversed = reverse @$q;
    return '' unless ""@$q"" eq ""@reversed"";

    # Check if the sum of elements is within weight limit
    my $sum = 0;
    $sum += $_ for @$q;
    return $sum <= $w ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&will_it_fly;
        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], 5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3], 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 3], 1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3], 6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5], 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_73,bod_Tibt,pl,"# དཔེར་ན་: # ཕྱོགས་གཉིས་སུ་འདྲ་མཚུངས་ཀློག་ཐུབ། འགྱུར་བ་གཅིག་གི་ནང་ཁྱེད་རང་ཚོས་ཆ་ཤས་གཅིག་ལ་ཆ་ཤས་གཞན་ཞིག་ཏུ་བསྒྱུར་ཐུབ།# ཚད་ལྡན་རིམ་པ་ (palindromic array) ནི་རིམ་པ་ཞིག་ཡིན་ཏེ།# སྐར་མ་གྲངས་ཆ་མཉམ་གྱི་རིམ་པ་ arr ཞིག་ཡོད་ན། ཇི་འདྲ་ཡིན་པའི་ཉུང་མཐའི་གྲངས་ཀ་འཚོལ་དགོས།# >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])
# 4
# >>> smallest_change([1, 2, 3, 4, 3, 2, 2])
# 1
# >>> smallest_change([1, 2, 3, 2, 1])
# 0
sub smallest_change {
    my($arr) = @_;
","sub smallest_change {
    my($arr) = @_;
    my $count = 0;
    my $n = scalar @$arr;
    
    for my $i (0 .. int($n / 2) - 1) {
        if ($arr->[$i] != $arr->[$n - $i - 1]) {
            $count++;
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&smallest_change;
        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 4, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 1, 1, 3]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_74,bod_Tibt,pl,"# དཔེ་གཟིགས།# གལ་ཏེ་གཞི་གྲངས་གཉིས་ནང་ཡིག་རྟགས་གྲངས་འདྲ་མཚུངས་ཡོད་ན་གཞི་གྲངས་དང་པོ་ཕྱིར་ལོག་བྱེད་པ།# སྐར་མ་གྲངས་ནི་གཞན་སྐར་མ་ལས་ཉུང་བ་ཡིན།# ཚད་གཞི་གཉིས་དང་ཚད་གཞི་ཡོད་ཚད་ཕྱིར་ལོག་བྱེད་ནུས་པའི་ལས་འགན་ཞིག་བྲིས་ཤིག# >>> total_match([], [])
# []
# >>> total_match([""hi"", ""admin""], [""hI"", ""Hi""])
# [""hI"", ""Hi""]
# >>> total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
# [""hi"", ""admin""]
# >>> total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
# [""hI"", ""hi"", ""hi""]
# >>> total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
# [""4""]
sub total_match {
    my($lst1, $lst2) = @_;
","sub total_match {
    my ($lst1, $lst2) = @_;
    
    my $len1 = sum_chars($lst1);
    my $len2 = sum_chars($lst2);

    return $len1 <= $len2 ? $lst1 : $lst2;
}

sub sum_chars {
    my ($array) = @_;
    my $total = 0;
    foreach my $string (@$array) {
        $total += length($string);
    }
    return $total;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&total_match;
        if(eq_deeply($candidate->([], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hi"", ""hi""]),[""hi"", ""hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]),[""hi"", ""admin""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]),[""4""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""Hi""]),[""hI"", ""Hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]),[""hI"", ""hi"", ""hi""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]),[""hi"", ""admin""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([], [""this""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""this""], []),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_75,bod_Tibt,pl,"# དཔེ་ཆ། # (a) ནི་ 100 ལས་ཆུང་བ་ཡིན་པར་ཤེས་པ་དགོས།# འདྲ་མིན་ལ་རྫུན་བཤད་ཀྱི་ཡོད།# གྲངས་གཞི་གྲངས་ནི་ 3 ཀྱི་གྲངས་གཞི་གྲངས་དང་མཚུངས་པ་ཡིན་ན་ true སླར་ལོག་བྱ་བའི་ལས་འགན་ཞིག་བྲིས་ཤིག# >>> is_multiply_prime(30)
# 1
# 30 = 2 * 3 * 5
sub is_multiply_prime {
    my($a) = @_;
","sub is_multiply_prime {
    my($a) = @_;

    return 0 if $a >= 100;

    my @primes = grep { is_prime($_) } 2..int($a/2);

    for my $i (0..$#primes) {
        for my $j ($i..$#primes) {
            for my $k ($j..$#primes) {
                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {
                    return 1;
                }
            }
        }
    }
    return 0;
}

sub is_prime {
    my($n) = @_;
    return 0 if $n < 2;
    for my $i (2..sqrt($n)) {
        return 0 if $n % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_multiply_prime;
        if(eq_deeply($candidate->(5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(30),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(125),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(105),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(126),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(729),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(891),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1001),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_76,bod_Tibt,pl,"# དཔེར་ན་: # x ནི་ n གི་རྣམ་གྲངས་གཅིག་པུ་ཡིན་ན། n**int=x # ཤུགས་ n དང་ false གཞན་གྱི་གནས་སྟངས་ནང་# ཁྱོད་ཀྱི་ལས་འགན་ནི་གྲངས་ x ནི་གྲངས་རྐྱང་པ་ཡིན་ན་ true སླར་ལོག་བྱ་བའི་ལས་འགན་ཞིག་འབྲི་དགོས་པ་ཡིན།# >>> is_simple_power(1, 4)
# 1
# >>> is_simple_power(2, 2)
# 1
# >>> is_simple_power(8, 2)
# 1
# >>> is_simple_power(3, 2)
# """"
# >>> is_simple_power(3, 1)
# """"
# >>> is_simple_power(5, 3)
# """"
sub is_simple_power {
    my($x, $n) = @_;
","sub is_simple_power {
    my($x, $n) = @_;
    
    return 0 if $n <= 0;
    return """" if $x < 1;
    
    if ($x == 1) {
        return 1;
    }

    while ($x > 1) {
        if ($x % $n != 0) {
            return """";
        }
        $x /= $n;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_simple_power;
        if(eq_deeply($candidate->(16, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(143214, 16),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9, 3),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16, 4),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(24, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(128, 4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12, 6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 12),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_77,bod_Tibt,pl,"# དཔེ་གཟིགས།# Note: ཁྱོད་ཀྱིས་གཏན་ནས་གཏན་ལ་ཕབ་པའི་ངེས་དོན་གཏན་ལ་ཕབ་ཐུབ།# གལ་ཏེ་འདི་ནི་ཨེན་ཇི་ཇར་ནི་ཨང་གྲངས་ཧྲིལ་པོ་ཅིག་གི་གྲུ་བཞི་ཡིན་ན།# གྲངས་ཧྲིལ་ a དང་ 1 སླར་ལོག་བྱེད་པའི་ལས་འགན་ཞིག་བྲིས་ཤིག# >>> iscube(1)
# 1
# >>> iscube(2)
# """"
# >>> iscube(-1)
# 1
# >>> iscube(64)
# 1
# >>> iscube(0)
# 1
# >>> iscube(180)
# """"
sub iscube {
    my($a) = @_;
","sub iscube {
    my($a) = @_;
    my $cube_root = int($a ** (1/3));
    return 1 if $cube_root ** 3 == $a;
    return 1 if ($cube_root + 1) ** 3 == $a; # handle small floating-point errors
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&iscube;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(64),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(180),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1000),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1729),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_78,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཚོས་གཞི་ A,B,C,D,E,F འདི་ཚོ་རྒྱུན་དུ་ཡིག་ཆུང་ཡིན།# དྲན་གསོ། ཁྱོད་ཀྱིས་གཏན་ནས་ནང་འཇུག་དེ་བདེན་པའམ་སྟོང་པ་རེད་བསམ་ཐུབ།# B (= བཅུ་ཚིགས་ཀྱི་གྲངས་ཀ་ ༡༡) D (= བཅུ་ཚིགས་ཀྱི་གྲངས་ཀ་ ༡༣) ཡིན།# ཁྱོད་ཀྱིས་གཤམ་གསལ་ཨང་གྲངས་ཀྱི་གྲངས་ཀ་འདེམས་དགོས། ༢། ༣། ༥། ༧། # ཕྲ་གྲངས་ནི་ ༢། ༣། ༥། ༧། ༡༡། ༡༣། ༡༧། ...# ༦གོང་མའི་ཨང་གྲངས་ནི་ ༠། ༡། ༢། ༣། ༤། ༥། ༦། ༧། ༨། ༩། A། B། C། D། E། F།# 1ལས་མང་བ་འདི་ནི་གྲངས་ཆུང་བ་གཉིས་ལས་མང་བ་མ་ཡིན་)# གྲངས་ཆེན་ནི་རང་བྱུང་གྲངས་ཡིན།# ༦ ཕྲེང་གྲངས་ནི་ string དང་གྲངས་རྩིས་ཀྱི་གྲངས་ཀ་ཡིན།# ཁྱོད་ཚོར་ཐོབ་པའི་ལས་འགན་ཞིག་འབྲི་དགོས་པའི་འགན་ཁུར་སྤྲད་ཡོད།# >>> hex_key(""AB"")
# 1
# >>> hex_key(""1077E"")
# 2
# >>> hex_key(""ABED1A33"")
# 4
# >>> hex_key(""123456789ABCDEF0"")
# 6
# >>> hex_key(""2020"")
# 2
sub hex_key {
    my($num) = @_;
","sub hex_key {
    my($num) = @_;
    my %prime_hex_digits = map { $_ => 1 } ('2', '3', '5', '7', 'B', 'D');
    my $prime_count = 0;
    
    foreach my $char (split //, $num) {
        $prime_count++ if exists $prime_hex_digits{$char};
    }
    
    return $prime_count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&hex_key;
        if(eq_deeply($candidate->(""AB""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1077E""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ABED1A33""),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2020""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""123456789ABCDEF0""),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""112233445566778899AABBCCDDEEFF00""),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_79,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཤོག་གྲངས་ཁ་སྐོང་ནི་ཡིག་གཟུགས་སྒྲིག་སྟངས་ལ་ཕན་ཐོགས་ཀྱི་ཆེད་དུ་ཡིན།# string གི་ཐོག་དང་མཇུག་ཏུ་ 'db' ཡིག་རྟགས་གཉིས་རེ་ལྷག་ཡོད།# string ནང་གི་ཡིག་འབྲུ་རེ་རེར་ '0' ཡང་ན་ '1' ཟེར་བ་ཡོད།# binary format. function གྱིས་ string སླར་ལོག་བྱེད་དགོས། ཕྲེང་བ་རེ་རེས་ binary  ཟེར་བ་མཚོན་དགོས།# ཁྱོད་ཚོར་བཅུ་གྲངས་ཀྱི་རྣམ་པ་ནས་གྲངས་ཤིག་ཐོབ་རྒྱུ་དང་ཁྱོད་ཀྱི་ལས་འགན་ནི་དེ་ ལ་བསྒྱུར་རྒྱུ་དེ་ཡིན།# >>> decimal_to_binary(15)
# ""db1111db""
# >>> decimal_to_binary(32)
# ""db100000db""
sub decimal_to_binary {
    my($decimal) = @_;
","sub decimal_to_binary {
    my($decimal) = @_;
    my $binary = sprintf(""%b"", $decimal);
    return ""db"" . $binary . ""db"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&decimal_to_binary;
        if(eq_deeply($candidate->(0),""db0db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(32),""db100000db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(103),""db1100111db"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15),""db1111db"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_80,bod_Tibt,pl,"# དཔེར་ན་: # string དེ་ཉིས་ལྡོག་ཡིན་ན། དེའི་རིང་ཚད་ནི་ཉུང་མཐར་ 3 ཡིན། ཡང་ 3 ཡི་གེ་རེ་རེ་ནི་སོ་སོར་དབྱེ་བ་ཡོད།# ཁྱོད་ཀྱི་ལས་འགན་ནི་ string དེ་ happl ཡིན་མིན་ལ་བརྟག་དཔྱད་བྱ་རྒྱུ་རེད།# ཚད་གཞི་དེ་ཁྱོད་ལ་ཐོབ་ཡོད།# >>> is_happy(""a"")
# """"
# >>> is_happy(""aa"")
# """"
# >>> is_happy(""abcd"")
# 1
# >>> is_happy(""aabb"")
# """"
# >>> is_happy(""adb"")
# 1
# >>> is_happy(""xyy"")
# """"
sub is_happy {
    my($s) = @_;
","sub is_happy {
    my($s) = @_;
    return """" if length($s) < 3;
    for my $i (0 .. length($s) - 3) {
        my $substr = substr($s, $i, 3);
        my %chars;
        $chars{$_}++ for split //, $substr;
        return """" if keys(%chars) != 3;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_happy;
        if(eq_deeply($candidate->(""a""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aa""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aabb""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""adb""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""xyy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""iopaxpoi""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""iopaxioi""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_81,bod_Tibt,pl,"# དཔེ་ཆ། # 0.0 E # > 0.0 D- # > 0.7 D # > ༡.༠ D+ # > 1.3 C- # > 1.7 C # > 2.0 C+ # > 2.3 B- # > 2.7 B # > 3.0 B+ # > 3.3 A- # > 3.7 A # 4.0 A+ # GPA སྐུགས་ཚད་ཨང་གྲངས་# འོག་གི་ཐིག་ཁྲམ་འདི་ལག་ལེན་ཐོག་ཡིག་རྟགས་ཀྱི་ཚད་གཞི་ཕྱིར་ཐོན་བྱེད་ནུས་པའི་ function: # ཕྲུག་གི་སློབ་ཕྲུག་འགའ་ཤས་ཀྱི་ GPA ཚད་གཞི་མང་པོ་ཞིག་ཁྱོད་ལ་སྤྲད་ཡོད། ཁྱོད་ཀྱིས་དེ་བྲིས་དགོས་ཀྱི་འདུག# སྐྱོན་ནི་མོ་ལ་རྟགས་རྒྱག་སྐབས་བེད་སྤྱོད་བྱེད་པའི་ཡིག་རྟགས་དེ་ཤོར་སོང་བ་རེད།# སློབ་དཔོན་གྱིས་རང་རང་གི་ཚད་གཞི་བཟོ་བཞིན་ཡོད།# སློབ་དུས་ཀྱི་བདུན་ཕྲག་མཇུག་གི་ཉིན་མོ་ཡིན་པས་སློབ་དཔོན་གྱིས་སློབ་ཚན་གྱི་རྟགས་མ་སྤྲོད་དགོས་ཀྱི་འདུག# >>> grade_equation([4.0, 3, 1.7, 2, 3.5])
# [""A+"", ""B"", ""C-"", ""C"", ""A-""]
sub numerical_letter_grade {
    my($grades) = @_;
","sub numerical_letter_grade {
    my ($gpas) = @_;
    my @letters;

    foreach my $gpa (@$gpas) {
        if ($gpa == 4.0) {
            push @letters, 'A+';
        } elsif ($gpa > 3.7) {
            push @letters, 'A';
        } elsif ($gpa > 3.3) {
            push @letters, 'A-';
        } elsif ($gpa > 3.0) {
            push @letters, 'B+';
        } elsif ($gpa > 2.7) {
            push @letters, 'B';
        } elsif ($gpa > 2.3) {
            push @letters, 'B-';
        } elsif ($gpa > 2.0) {
            push @letters, 'C+';
        } elsif ($gpa > 1.7) {
            push @letters, 'C';
        } elsif ($gpa > 1.3) {
            push @letters, 'C-';
        } elsif ($gpa > 1.0) {
            push @letters, 'D+';
        } elsif ($gpa > 0.7) {
            push @letters, 'D';
        } elsif ($gpa > 0.0) {
            push @letters, 'D-';
        } else {
            push @letters, 'E';
        }
    }

    return \@letters;
}

my $gpas = [4.0, 3, 1.7, 2, 3.5];
my $letter_grades = numerical_letter_grade($gpas);
print join("", "", @$letter_grades);","use Test::Deep;


sub testhumaneval {
    my $candidate = \&numerical_letter_grade;
        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[""A+"", ""B"", ""C-"", ""C"", ""A-""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.2]),[""D+""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.5]),[""D-""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0]),[""E""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[""D"", ""D-"", ""C-"", ""B"", ""B+""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0, 0.7]),[""E"", ""D-""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_82,bod_Tibt,pl,"# དཔེ་གཟིགས།# length ནི་གྲངས་ཀ་དང་པོ་ཡིན་ན་ '' དེ་མིན་ཡིན་ན་ # string ཞིག་ལེན་ནས་ 1 སླར་ལོག་བྱེད་རྒྱུའི་ལས་འགན་ཞིག་བྲིས་ན།# >>> prime_length(""Hello"")
# 1
# >>> prime_length(""abcdcba"")
# 1
# >>> prime_length(""kittens"")
# 1
# >>> prime_length(""orange"")
# """"
sub prime_length {
    my($string) = @_;
","sub prime_length {
    my ($string) = @_;
    my $length = length($string);

    return '' if $length < 2;
    for my $i (2 .. sqrt($length)) {
        return '' if $length % $i == 0;
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prime_length;
        if(eq_deeply($candidate->(""Hello""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdcba""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""kittens""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""orange""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""wow""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""world""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""MadaM""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Wow""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""HI""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""go""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""gogo""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaaaaaaaaaaaaa""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Madam""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""M""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_83,bod_Tibt,pl,"# འབྲས་བུ་ནི་ 1 དང་འགོ་བཟུང་བའམ་མཇུག་བསྡོམས་པའི་ཧྲིལ་གྲངས་ཡིན།# འབྲས་བུ་ལྡན་གྲངས་ n ཞིག་ཡོད་ན། ཨང་གྲངས་ n-digit གྱི་གྲངས་རྩིས་ཕྱིར་ལོག་བྱོས།sub starts_one_ends {
    my($n) = @_;
","sub starts_one_ends {
    my($n) = @_;
    
    # If n is 1, the numbers are 1, 2, 3, ..., 9 (single digit numbers starting
    # or ending with 1), hence return 1 (only the number 1).
    return 1 if $n == 1;

    # Calculate the count of numbers starting with 1
    # Numbers from 1..9 (n-1 zeros) give us 10^(n-1) choices
    my $start_one_count = 10 ** ($n - 1);

    # Calculate the count of numbers ending with 1
    # Numbers from 10..10^(n-1) give us 10^(n-1) choices
    my $end_one_count = 10 ** ($n - 1);

    # However, numbers that both start and end with 1 (like 111...1)
    # are counted twice so we need to add them in only once.
    my $both_count = 1; # There's exactly one such number: 10^(n-1) + 1

    # Total unique count
    my $total_count = $start_one_count + $end_one_count - $both_count;

    return $total_count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&starts_one_ends;
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2),18)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),180)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),1800)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),18000)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_84,bod_Tibt,pl,"# དཔེ་གཟིགས།# འབྲས་བུ་ཆ་མཉམ་ N བྱིན་ནས་དེའི་ཨང་གྲངས་ཀྱི་བསྡོམས་གྲངས་ཉིས་ལྡན་དུ་ཕྱིར་ལོག་འབད།# >>> solve(1000)
# ""1""
# >>> solve(150)
# ""110""
# >>> solve(147)
# ""1100""
# Variables:
# @N integer
# Constraints: 0 ≤ N ≤ 10000.
# Output:
# a string of binary number
sub solve {
    my($N) = @_;
","sub solve {
    my($N) = @_;
    my $sum = 0;
    $sum += $_ for split //, $N;
    return sprintf(""%b"", $sum);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solve;
        if(eq_deeply($candidate->(1000),""1"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(150),""110"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(147),""1100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(333),""1001"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(963),""10010"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_85,bod_Tibt,pl,"# དཔེ་གཟིགས།# སྟོང་པ་མིན་པའི་གྲངས་ཐང་གི་རིམ་པ་ཡོད་ན། ཐོག་མར་གྲངས་ཐང་གི་ཆ་ཤས་གྲངས་ཐང་མིན་པའི་ཆ་ཤས་གྲངས་ཐང་དུ་རྩིས་དགོས།# >>> add([4, 2, 6, 7])
# 2
sub add {
    my($lst) = @_;
","sub add {
    my ($lst) = @_;
    my $sum = 0;

    for (my $i = 1; $i < @$lst; $i += 2) {
        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;
    }

    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add;
        if(eq_deeply($candidate->([4, 88]),88)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_86,bod_Tibt,pl,"# དཔེར་ན་: # དྲན་གསོ། ཁྱོད་ཀྱིས་ཚིག་དང་སྟོང་པ་རིམ་བཞིན་བཞག་དགོས་པ་ཡིན།# ཚད་གཞི་གཞི་ཐོག་ཡར་འགྲོ་གི་རིམ་པ་# ཀྱི་ནང་ཡོད་པའི་ཡིག་འབྲུ་ཚང་མ་འདེམས་པའི་ཚིག་གསར་པ་ཞིག་གིས་ཚབ་ཏུ་འཇུག་དགོས།# ordered version of string འདི་ནང་ཚིག་ཆ་ཚང་མ་ (བར་སྟོང་གིས་སོ་སོར་དབྱེ་) ཡོད་པའི་ string ཞིག་ཡིན།# ཚད་གཞི་ཅིག་ལེན་ཏེ་ དེའི་རིམ་པ་སྒྲིག་པའི་རྣམ་པ་ཅིག་སླར་ལོག་འབད་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོས།# >>> anti_shuffle(""Hi"")
# ""Hi""
# >>> anti_shuffle(""hello"")
# ""ehllo""
# >>> anti_shuffle(""Hello World!!!"")
# ""Hello !!!Wdlor""
sub anti_shuffle {
    my($s) = @_;
","sub anti_shuffle {
    my($s) = @_;
    $s =~ s/(\S+)/join('', sort split //, $1)/ge;
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&anti_shuffle;
        if(eq_deeply($candidate->(""Hi""),""Hi"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""hello""),""ehllo"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""number""),""bemnru"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcd""),""abcd"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello World!!!""),""Hello !!!Wdlor"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi. My name is Mister Robot. How are you?""),"".Hi My aemn is Meirst .Rboot How aer ?ouy"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_87,bod_Tibt,pl,"# དཔེ་གཟིགས།# དེ་མིན་གྲལ་རིམ་གྱི་གོ་རིམ་རིམ་རིམ་བཞིན་གྲལ་རིམ་གྱི་གོ་རིམ་རིམ་སྒྲིག་དགོས།# ཐོག་མར་གོ་རིམ་ཡར་རྒྱས་ཀྱི་རིམ་པ་བཞིན་གོ་རིམ་སྒྲིག་དགོས།# གྲལ་ཐིག་རེ་རེར་ 0 ནས་འགོ་ཚུགས་པའི་གོ་རིམ་ (row, columns) ཞིག་ཡོད།# ཚད་གཞི་ཀྱི་རིམ་པ་སླར་ལོག་བྱ་བ། [(x1, y1), (x2, y2) ...] འདི་ལྟར་ཡིན་ན། # lst དང་ཧྲིལ་གྲངས་ x ཡོད་པ་ཚེ། ཐིག་ཁྲམ་ནང་ཧྲིལ་གྲངས་ x འཚོལ་དགོས།# གྲལ་ཐིག་རེ་རེར་ཀ་བའི་གྲངས་མི་འདྲ་བ་ཡོད་སྲིད་དོ།# ཇི་ནི་མ་ཊི་རེས་དང་འདྲ་བ་ཞིག་ཡིན། མ་ཊི་རེས་དང་མི་འདྲ་བ་ཞིག་ཡིན།# ཁྱོད་ཚོར་ཚད་གཉིས་ཀྱི་ཡིག་ཆ་ཞིག་སྤྲོད་བཞིན་ཡོད། ཚད་གཉིས་ཀྱི་ཡིག་ཆ་ནི་སྦྲེལ་སྒྲིག་སྒྲིག་ (nested arrays) ཞིག་ཡིན།# >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
# >>> get_row([], 1)
# []
# >>> get_row([[], [1], [1, 2, 3]], 3)
# [[2, 2]]
sub get_row {
    my($lst, $x) = @_;
","sub get_row {
    my ($lst, $x) = @_;
    my @result;

    for my $i (0 .. @$lst - 1) {
        my @row_result;
        for my $j (0 .. @{$lst->[$i]} - 1) {
            if ($lst->[$i][$j] == $x) {
                push @row_result, [$i, $j];
            }
        }
        # Sort the coordinates of the row by columns in descending order
        @row_result = sort { $b->[1] <=> $a->[1] } @row_result;
        push @result, @row_result;
    }

    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_row;
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([], 1),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1]], 2),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[], [1], [1, 2, 3]], 3),[[2, 2]])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_88,bod_Tibt,pl,"# དཔེ་གཟིགས།# * ཚད་གཞི་འདི་བསྒྱུར་མི་དགོས།# དྲན་གསོ།# ཡང་ན་བསྡོམས་ ((སྔོན་མའི་ཚད་གཞི་གནས་གོང་དང་རྗེས་མའི་ཚད་གཞི་གནས་གོང་) རྣམས་ཆ་སྙོམས་ཡིན་ན་རིམ་པ་མར་བབས་ནས་དབྱེ་བ་བྱེད་དགོས།# ཁྱོད་ཀྱིས་གོ་རིམ་རིམ་བཞིན་གོ་རིམ་སྒྲིག་བྱེད་ན། སྐར་ཁུང་གི་གྲངས་ཐང་ནི་རྣམ་གྲངས་མེད་ན།# འབྲས་བུ་མེད་པའི་ཧྲིལ་གྲངས་ཀྱི་རིམ་པ་ཐོབ་ན། རིམ་པ་སྒྲིག་རྗེས་རིམ་པ་ཐོབ་པའི་ copl སླར་ལོག་བྱ་དགོས།# >>> sort_array([])
# []
# >>> sort_array([5])
# [5]
# >>> sort_array([2, 4, 3, 0, 1, 5])
# [0, 1, 2, 3, 4, 5]
# >>> sort_array([2, 4, 3, 0, 1, 5, 6])
# [6, 5, 4, 3, 2, 1, 0]
sub sort_array {
    my($array) = @_;
","sub sort_array {
    my ($array) = @_;
    return [] if !@$array;  # Return empty array if input is empty

    my $first = $array->[0];
    my $last = $array->[-1];
    my $sum = $first + $last;

    if ($sum % 2 == 0) {
        # Sort in descending order if the sum is even
        return [sort { $b <=> $a } @$array];
    } else {
        # Sort in ascending order if the sum is odd
        return [sort { $a <=> $b } @$array];
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_array;
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5]),[5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 1]),[1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_89,bod_Tibt,pl,"# དཔེར་ན་: # ཕྱོགས་གཉིས་སུ་སྤོ་དགོས།# ཤོག་ངོས་འདི་ཡི་བཟོ་བཅོས་མཐའ་མ་༢༩༩༩ལ་འགྲུབ།# ཕྱིར་ལོག་བྱེད་དེ་ཨང་ཡིག་བསྒྱུར་བའི་ནང་ཨང་ཡིག་སྦྲེལ་བ་ཞིག་ཡིན།# ལས་འགན་ཞིག་བཟོ་ནས་རྟགས་མཚན་ལྟར་ཐིག་ཡིག་ཅིག་ལེན་ནས་ # >>> encrypt(""hi"")
# ""lm""
# >>> encrypt(""asdfghjkl"")
# ""ewhjklnop""
# >>> encrypt(""gf"")
# ""kj""
# >>> encrypt(""et"")
# ""ix""
sub encrypt {
    my($s) = @_;
","sub encrypt {
    my($s) = @_;
    my $shift = 2 * 2;  # Alphabet shifted by two multiplied by two places (4 places)
    $s =~ tr/a-zA-Z/n-za-mN-ZA-M/;  # Perform a Caesar cipher with a shift of 13 places
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&encrypt;
        if(eq_deeply($candidate->(""hi""),""lm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""asdfghjkl""),""ewhjklnop"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""gf""),""kj"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""et""),""ix"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""faewfawefaewg""),""jeiajeaijeiak"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""hellomyfriend""),""lippsqcjvmirh"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""),""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a""),""e"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_90,bod_Tibt,pl,"# གལ་ཏེ་དངོས་པོ་དེ་མེད་ན་ undef སླར་ལོག་བྱེད།# ཕྲད་གྲངས་གཉིས་པ་ཆུང་ཤོས་ཕྱིར་ལོག་བྱེད་ next_smallest () ལས་འགན་འབྲི་དགོས།# ཁྱོད་ཚོར་ཧྲིལ་གྲངས་ཀྱི་རིམ་པ་ཐོབ་ཡོད།# >>> next_smallest([1, 2, 3, 4, 5])
# 2
# >>> next_smallest([5, 1, 4, 3, 2])
# 2
# >>> next_smallest([])
# undef
# >>> next_smallest([1, 1])
# undef
sub next_smallest {
    my($lst) = @_;
","sub next_smallest {
    my($lst) = @_;
    
    # Return undef if the list has less than two elements
    return undef unless @$lst >= 2;
    
    # Sort the unique elements of the list
    my @sorted_unique = sort { $a <=> $b } keys %{{ map { $_ => 1 } @$lst }};
    
    # If there is only one unique element, return undef, else return the second smallest
    return @sorted_unique >= 2 ? $sorted_unique[1] : undef;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&next_smallest;
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_91,bod_Tibt,pl,"# དཔེར་ན་: # ཚིག་ཡིག་ལ་མཐའ་མཚམས་སུ་ """", ""?"" ཡང་ན་ ""!"" ཟེར་བ་ཡོད།# རྒྱུད་ཀྱི་འདུ་ཤེས་ནི་ ""ང་"" ཟེར་ནས་འགོ་འཛུགས་པའི་ཚིག་ཡིན།# ཁྱོད་ཚོར་ཚིག་གྲངས་ཤིག་སྤྲད་ནས་ཁྱོད་རྣམས་ཀྱི་ལས་འགན་ནི་གྲངས་རྩིས་རྒྱག་རྒྱུ་རེད།# >>> is_bored(""Hello world"")
# 0
# >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
# 1
sub is_bored {
    my($S) = @_;
","my($S) = @_;
    my $count = 0;
    my @sentences = split /(?<=[.?!])\s*/, $S;
    foreach my $sentence (@sentences) {
        $sentence =~ s/^\s+|\s+$//g;
        $count++ if $sentence =~ /^I\b/i;
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_bored;
        if(eq_deeply($candidate->(""Hello world""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Is the sky blue?""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I love It !""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bIt""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I feel good today. I will be productive. will kill It""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""You and I are going for a walk""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_92,bod_Tibt,pl,"# དཔེ་གཟིགས།# གཞན་གནས་སྟངས་གང་རུང་དུ་ false སླར་ལོག་བྱེད།# གྲངས་ཆ་གཅིག་ནི་གཞན་གཉིས་གྱི་བསྡོམས་དང་མཚུངས་པ་ཡིན་ན་ true སླར་ལོག་བྱེད། གྲངས་ཆ་ཚང་མ་ནི་ཧྲིལ་པོ་ཡིན།# གྲངས་ 3 ཅན་གྱི་ལས་འགན་ཞིག་བཟོས་པ།# >>> any_int(5, 2, 7)
# 1
# >>> any_int(3, 2, 2)
# """"
# >>> any_int(3, -2, 1)
# 1
# >>> any_int(3.6, -2.2, 2)
# """"
sub any_int {
    my($x, $y, $z) = @_;
","sub any_int {
    my($x, $y, $z) = @_;
    
    # Check if all inputs are integers
    return """" unless defined $x && defined $y && defined $z;
    return """" unless $x =~ /^-?\d+$/ && $y =~ /^-?\d+$/ && $z =~ /^-?\d+$/;
    
    # Check if any number is the sum of the other two
    return 1 if $x == $y + $z;
    return 1 if $y == $x + $z;
    return 1 if $z == $x + $y;
    
    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&any_int;
        if(eq_deeply($candidate->(2, 3, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2.5, 2, 3),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1.5, 5, 3.5),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 6, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 2, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2.2, 2.2, 2.2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-4, 6, 2),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 1, 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 4, 7),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3.0, 4, 7),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_93,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཡིག་འབྲུ་ཙམ་གྱིས་འཛིན་དགོས།# ཨིང་ལིཤ་ཡི་གེ་ནང་གི་སྒྲ་སྒྲ་ཡིན།# ཤོག་ངོས་འདི་ཡི་བཟོ་བཅོས་མཐའ་མ་༢ ནང་ལ་སྔར་གྱི་ནང་དོན་གསལ།# ཀྱི་ནང་གི་སྒྲ་དབྱངས་ཚང་མ་བརྗེ་སྒྱུར་བྱེད་པ།# འདྲ་བའི་འཕྲིན་ཡིག་ཞིག་ལེན་ནས་དེའི་ནང་ཡིག་རྟགས་བཀོད་པའི་ function ཞིག་འབྲི་དགོས།# >>> encode(""test"")
# ""TGST""
# >>> encode(""This is a message"")
# ""tHKS KS C MGSSCGG""
sub encode {
    my($message) = @_;
","sub encode {
    my($message) = @_;
    $message =~ tr/A-Za-z/N-ZA-Mn-za-m/;
    $message =~ tr/aeiouAEIOU/cgkqwCGKQW/;
    return $message;
}

# Example usage
print encode(""test""), ""\n"";       # Output: TGST
print encode(""This is a message""), ""\n""; # Output: tHKS KS C MGSSCGG","use Test::Deep;


sub testhumaneval {
    my $candidate = \&encode;
        if(eq_deeply($candidate->(""TEST""),""tgst"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mudasir""),""mWDCSKR"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""YES""),""ygs"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""This is a message""),""tHKS KS C MGSSCGG"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I DoNt KnOw WhAt tO WrItE""),""k dQnT kNqW wHcT Tq wRkTg"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_94,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཁྱོད་ཀྱིས་ཆེ་མཐའི་སྔོན་གྲངས་འཚོལ་དགོས་པ་དང་དེའི་ཨང་གྲངས་ཀྱི་བསྡོམས་ཕྱིར་ལོག་དགོས།# ཁྱོད་ཚོར་ཧྲིལ་གྲངས་ཀྱི་རིམ་པ་ཐོབ་ཡོད།# >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
# 10
# >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
# 25
# >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
# 13
# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
# 11
# >>> skjkasdkd([0, 81, 12, 3, 1, 21])
# 3
# >>> skjkasdkd([0, 8, 1, 2, 1, 7])
# 7
sub skjkasdkd {
    my($lst) = @_;
","sub skjkasdkd {
    my ($lst) = @_;

    # Helper function to determine if a number is prime
    sub is_prime {
        my ($num) = @_;
        return 0 if $num < 2;
        for my $i (2 .. sqrt($num)) {
            return 0 if $num % $i == 0;
        }
        return 1;
    }

    # Find the largest prime in the array
    my $largest_prime = -1;
    foreach my $num (@$lst) {
        if (is_prime($num)) {
            $largest_prime = $num if $num > $largest_prime;
        }
    }

    # Return the sum of the digits of the largest prime
    if ($largest_prime > 0) {
        my $sum_of_digits = 0;
        $sum_of_digits += $_ for split //, $largest_prime;
        return $sum_of_digits;
    }

    return 0;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&skjkasdkd;
        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8191]),19)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([127, 97, 8192]),10)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_95,bod_Tibt,pl,"# དཔེ་གཟིགས།# ལས་འགན་འདི་སླར་ལོག་བྱ་དགོས་ '' འདི་ཡང་ hash ཟེར་བ་ནི་སྟོང་པ་རེད།# ཚད་ལྡན་ཡིག་རྟགས་དང་ལྡན། ཡང་ན་ཡིག་རྟགས་ཚང་མ་ཆེ་ཆུང་ཡིག་རྟགས་ཡིན་ན། """" སླར་ལོག་བྱེད།# གལ་ཏེ་ལྡེ་མིག་ཚང་མ་ lower  ནང་གི་ཡིག་འབྲུ་ཡིན་ན་ 1 སླར་ལོག་བྱེད།# >>> check_dict_case({""a"" => ""apple"", ""b"" => ""banana""})
# 1
# >>> check_dict_case({""a"" => ""apple"", ""A"" => ""banana"", ""B"" => ""banana""})
# """"
# >>> check_dict_case({""a"" => ""apple"", 8 => ""banana"", ""a"" => ""apple""})
# """"
# >>> check_dict_case({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""})
# """"
# >>> check_dict_case({""STATE"" => ""NC"", ""ZIP"" => ""12345""})
# 1
sub check_dict_case {
    my($dict) = @_;
","sub check_dict_case {
    my($dict) = @_;
    return '' unless %$dict;

    my $all_lower = 1;
    my $all_upper = 1;

    for my $key (keys %$dict) {
        if ($key !~ /^[a-z]+$/) {
            $all_lower = 0;
        }
        if ($key !~ /^[A-Z]+$/) {
            $all_upper = 0;
        }
    }
    
    return ($all_lower || $all_upper) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&check_dict_case;
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""b"" => ""banana""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""A"" => ""banana"", ""B"" => ""banana""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""p"" => ""pineapple"", ""5"" => ""banana"", ""a"" => ""apple""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""Name"" => ""John"", ""Age"" => ""36"", ""City"" => ""Houston""}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""STATE"" => ""NC"", ""ZIP"" => ""12345""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({""fruit"" => ""Orange"", ""taste"" => ""Sweet""}),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->({}),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_96,bod_Tibt,pl,"# དཔེར་ན་: # གྲངས་ཚོམ་དང་ n ལས་ཆུང་བ་དག་གི་གྲངས་ཚོམ་ཡིན།# འབྲས་བུ་མེད་པའི་གྲངས་ཀ་ཧྲིལ་པོ་ལེན་ནས་སྔོན་གྱི་གྲངས་ཀ་ n  ཡོད་པའི་གྲངས་ཀ་གཞི་བསྟུན་ཕྱིར་ལོག་བྱ་བའི་ལས་འགན་ཞིག་ལག་བསྟར་བྱ་དགོས།# >>> count_up_to(5)
# [2, 3]
# >>> count_up_to(11)
# [2, 3, 5, 7]
# >>> count_up_to(0)
# []
# >>> count_up_to(20)
# [2, 3, 5, 7, 11, 13, 17, 19]
# >>> count_up_to(1)
# []
# >>> count_up_to(18)
# [2, 3, 5, 7, 11, 13, 17]
sub count_up_to {
    my($n) = @_;
","sub count_up_to {
    my($n) = @_;
    my @primes;
    for my $num (2 .. $n - 1) {
        my $is_prime = 1;
        for my $div (2 .. sqrt($num)) {
            if ($num % $div == 0) {
                $is_prime = 0;
                last;
            }
        }
        push @primes, $num if $is_prime;
    }
    return @primes;
}

# Example usage:
# my @result = count_up_to(11);
# print ""@result\n"";  # Output: 2 3 5 7","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_up_to;
        if(eq_deeply($candidate->(5),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[2, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[2, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),[2, 3, 5, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_97,bod_Tibt,pl,"# དཔེ་གཟིགས།# ནང་འཇུག་གཏན་ལ་ཕབ་ནས་གཏན་ལ་ཕབ་དགོས།# ཚད་ལྡན་ཨང་གྲངས་ཀྱི་འབྲས་བུ་ཡིན།# འབྲས་བུ་གྲངས་ཆ་གཉིས་ལེན་པའི་ function ཆ་ཚང་སྒྲིལ་ནས་ཕྱིར་ལོག་བྱེད་པ།# >>> multiply(148, 412)
# 16
# >>> multiply(19, 28)
# 72
# >>> multiply(2020, 1851)
# 0
# >>> multiply(14, -15)
# 20
sub multiply {
    my($a, $b) = @_;
","sub multiply {
    my($a, $b) = @_;
    my $unit_digit_a = abs($a) % 10;
    my $unit_digit_b = abs($b) % 10;
    return $unit_digit_a * $unit_digit_b;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&multiply;
        if(eq_deeply($candidate->(148, 412),16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(19, 28),72)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2020, 1851),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(14, -15),20)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(76, 67),42)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17, 27),49)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 1),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0, 0),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_98,bod_Tibt,pl,"# དཔེར་ན་: # string s ཤིག་ཡོད་ན། ཆེ་ཆུང་གི་སྒྲ་སྒྲ་གྲངས་རྩིས་ཤིག# >>> count_upper(""aBCdEf"")
# 1
# >>> count_upper(""abcdefg"")
# 0
# >>> count_upper(""dBBE"")
# 0
sub count_upper {
    my($s) = @_;
","sub count_upper {
    my($s) = @_;
    my $count = 0;
    my @chars = split //, $s;
    
    for (my $i = 0; $i < @chars; $i += 2) {
        if ($chars[$i] =~ /[AEIOU]/) {
            $count++;
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_upper;
        if(eq_deeply($candidate->(""aBCdEf""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdefg""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dBBE""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""B""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""U""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""EEEE""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_99,bod_Tibt,pl,"# དཔེ་གཟིགས།# འབྲས་བུ་འདི་ནི་གྲངས་ཆ་གཉིས་ལས་ 0 ཀྱི་མཐའ་འཁོར་དུ་འཁོར་བ་ཡིན།# གྲངས་ཀ་ཉེར་མཁོ་ཡོད་ན་ ཚད་ལྡན་གྲངས་ཀ་ཉེར་མཁོ་ཡོད་ན་ ཚད་ལྡན་གྲངས་ཀ་ཉེར་མཁོ་ཡོད་ན་ ཚད་ལྡན་གྲངས་ཀ་ཉེར་མཁོ་ཡོད་ན་# གྲངས་ཐང་ (string) ཞིག་ངོས་འཛིན་བྱ་བའི་ལས་འགན་ཞིག་བཟོ།# >>> closest_integer(""10"")
# 10
# >>> closest_integer(""15.3"")
# 15
# Note:
# Rounding away from zero means that if the given number is equidistant
# from two integers, the one you should return is the one that is the
# farthest from zero. For example closest_integer(""14.5"") should
# return 15 and closest_integer(""-14.5"") should return -15.
sub closest_integer {
    my($value) = @_;
","sub closest_integer {
    my($value) = @_;
    
    # Convert the string value to a number
    my $number = 0 + $value;
    
    # Compute the floor and ceiling of the number
    my $floor = int($number);
    my $ceiling = $number > $floor ? $floor + 1 : $floor;
    
    # Determine the integer to round to
    if ($number < 0) {
        # For negative numbers, closer to zero means returning the lower number
        return ($number - $floor <= $ceiling - $number) ? $floor : $ceiling;
    } else {
        # For positive numbers, closer to zero means returning the lower number
        return ($ceiling - $number <= $number - $floor) ? $ceiling : $floor;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&closest_integer;
        if(eq_deeply($candidate->(""10""),10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""14.5""),15)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""-15.5""),-16)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""15.3""),15)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""0""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_100,bod_Tibt,pl,"# དཔེ་གཟིགས།# i ནི་ཚད་ (i+1) ནང་གི་རྡོ་གྲངས་མཚོན་པ་ཡིན།# ཚད་གཞི་ནང་ཡོད་པའི་རྡོའི་གྲངས་ཁ་སླར་ལོག་འབདཝ་ཨིན།# - རྗེས་སུ་ཡོད་པའི་གྲངས་ཆ་ཆ་ཡིན་ན། n ནི་ཆ་ཆ་ཡིན་ན།# - རྗེས་སུ་ཡོད་པའི་གྲངས་ཆ་རྐྱང་པ་ n ནི་གྲངས་ཆ་རྐྱང་པ་ཡིན་ན་# ཤུལ་མའི་གནས་ཚད་ནང་རྡོ་གྲངས་ནི་:# ཐོག་མར་རྡོ་ n ཡིན།# གྲངས་ཧྲིལ་པོ་ n ཞིག་ཡོད་ན། རྡོ་རིང་གི་ཚད་ n ཡི་རྡོ་བྲིས་དགོས།# >>> make_a_pile(3)
# [3, 5, 7]
sub make_a_pile {
    my($n) = @_;
","sub make_a_pile {
    my ($n) = @_;
    my @pile;
    my $current_stones = $n;
    
    for my $level (1..$n) {
        push @pile, $current_stones;
        if ($n % 2 == 0) {
            $current_stones += 2;  # Increment by next even number
        } else {
            $current_stones += 2;  # Increment by next odd number (which is also +2)
        }
    }
    
    return @pile;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&make_a_pile;
        if(eq_deeply($candidate->(3),[3, 5, 7])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[4, 6, 8, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_101,bod_Tibt,pl,"# དཔེར་ན་: # string འདི་ཚིག་གི་ཆ་ཤས་སུ་དབྱེ་ནས་ཚིག་གི་རིམ་པ་ཕྱིར་ལོག་བྱེད་པ།# ཁྱོད་ཚོར་ཚིག་ཡིག་གི་རིམ་པ་སྤྲོད་རྒྱུ་རེད། རྒྱུན་དང་བར་སྟོང་གིས་སོ་སོར་དབྱེ་དགོས། ཁྱོད་ཀྱི་ལས་འགན་ནི་# >>> words_string(""Hi, my name is John"")
# [""Hi"", ""my"", ""name"", ""is"", ""John""]
# >>> words_string(""One, two, three, four, five, six"")
# [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
sub words_string {
    my($s) = @_;
","sub words_string {
    my ($s) = @_;
    my @words = split /[,\s]+/, $s;
    return \@words;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&words_string;
        if(eq_deeply($candidate->(""Hi, my name is John""),[""Hi"", ""my"", ""name"", ""is"", ""John""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""One, two, three, four, five, six""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi, my name""),[""Hi"", ""my"", ""name""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""One,, two, three, four, five, six,""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ahmed     , gamal""),[""ahmed"", ""gamal""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_102,bod_Tibt,pl,"# དཔེར་ན་: # གྲངས་ཀ་དེ་མེད་ན་ function དེ་ -1 སླར་ལོག་བྱེད་དགོས།# ཚད་ [x, y] ནང་གི་གྲངས་ཆ་ཚག་གྲངས་ཆེ་ཤོས་ཡིན་ན།# ལས་འགན་འདི་ནི་གྲངས་ཆ་ལྡོག་པ་གཉིས་ x དང་ y དང་ཕྱིར་ལོག་བྱེད་གྲངས་ཐང་ཡིན།# >>> choose_num(12, 15)
# 14
# >>> choose_num(13, 12)
# -1
sub choose_num {
    my($x, $y) = @_;
","sub choose_num {
    my($x, $y) = @_;
    return -1 if $x > $y;
    
    # Swap x and y if x is greater than y
    ($x, $y) = ($y, $x) if $x > $y;
    
    for (my $i = $y; $i >= $x; $i--) {
        return $i if $i % 2 == 0;
    }
    return -1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&choose_num;
        if(eq_deeply($candidate->(12, 15),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13, 12),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(33, 12354),12354)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5234, 5233),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 29),28)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(27, 10),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 7),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(546, 546),546)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_103,bod_Tibt,pl,"# དཔེ་ཆ། # གལ་ཏེ་ n ནི་ m ལས་ཆེ་བ་ཡིན་ན་ -1 སླར་ལོག་བྱེད་དགོས།# དེའི་ལན་དེ་ཉེར་མཁོ་པའི་གྲངས་ཆ་ཆ་ཚང་དང་ཉེར་མཁོ་གྲངས་ཆ་གཉིས་སུ་བསྒྱུར་དགོས།# n ནས་ m བར་གྱི་གྲངས་ཐང་གི་བར་ནའི་བར་ནའི་གྲངས་ཐང་ (n དང་ m བཅས་ཀྱང་མཉམ་ཡོད།)# ཁྱོད་ཚོར་ n དང་ m ཟེར་བའི་གྲངས་ཆ་ཧྲིལ་པོ་གཉིས་ཐོབ་ཡོད། ཁྱོད་ཀྱི་ལས་འགན་ནི་ # >>> rounded_avg(1, 5)
# ""0b11""
# >>> rounded_avg(7, 5)
# -1
# >>> rounded_avg(10, 20)
# ""0b1111""
# >>> rounded_avg(20, 33)
# ""0b11010""
sub rounded_avg {
    my($n, $m) = @_;
","sub rounded_avg {
    my ($n, $m) = @_;
    
    return -1 if $n > $m;
    
    my $sum = 0;
    my $count = $m - $n + 1;
    
    for my $i ($n .. $m) {
        $sum += $i;
    }
    
    my $average = int(($sum / $count) + 0.5);
    return sprintf(""0b%b"", $average);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&rounded_avg;
        if(eq_deeply($candidate->(1, 5),""0b11"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 13),""0b1010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(964, 977),""0b1111001010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(996, 997),""0b1111100100"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(560, 851),""0b1011000010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(185, 546),""0b101101110"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(362, 496),""0b110101101"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(350, 902),""0b1001110010"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(197, 233),""0b11010111"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 5),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 1),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 5),""0b101"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_104,bod_Tibt,pl,"# དཔེར་ན་: # དྲན་གསོ། སླར་ལོག་བྱས་པའི་རིམ་པ་རིམ་བཞིན་རིམ་པ་སྒྲིག་དགོས།# ཇི་ཡོད་ཆ་ཤས་ལ་ཆ་སྙོམ་གྲངས་མེད་པ།# འབྲས་བུ་ཧྲིལ་གྲངས་ x གི་རིམ་པ་ཅན་གྱི་རིམ་པ་སླར་ལོག་བྱ་བ།# >>> unique_digits([15, 33, 1422, 1])
# [1, 15, 33]
# >>> unique_digits([152, 323, 1422, 10])
# []
sub unique_digits {
    my($x) = @_;
","sub unique_digits {
    my ($x) = @_;
    my @result;

    foreach my $num (@$x) {
        if ($num !~ /[02468]/) {
            push @result, $num;
        }
    }
    
    return sort { $a <=> $b } @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&unique_digits;
        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([135, 103, 31]),[31, 135])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_105,bod_Tibt,pl,"# དཔེར་ན་: # ༡། ༢། ༣། ༤། ༥། ༦། ༧། ༨། ༩།# འབྲས་བུ་ཐོན་པའི་རིམ་པ་རྒྱབ་སྒྱུར་བྱེད་ནས་ ཤོག་གྲངས་རེ་རེར་དེའི་མིང་དང་འབྲེལ་བའི་མིང་ཚབ་སྤྲོད་དགོས།# འདིར་གྲངས་ཆ་ཆ་ཚང་གྲངས་ཐང་ཞིག་ཡོད་ན། ༡ དང་ ༩ བར་གྱི་གྲངས་ཆ་ཚང་མ་དབྱེ་དགོས།# >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])
# [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
# If the array is empty, return an empty array:
# >>> by_length([])
# []
# If the array has any strange number ignore it:
# >>> by_length([1, -1, 55])
# [""One""]
sub by_length {
    my($arr) = @_;
","sub by_length {
    my ($arr) = @_;
    my @names = qw(Zero One Two Three Four Five Six Seven Eight Nine);
    
    my @filtered_sorted_reversed = reverse sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;
    my @result = map { $names[$_] } @filtered_sorted_reversed;
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&by_length;
        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 55]),[""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1, 3, 2]),[""Three"", ""Two"", ""One""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([9, 4, 8]),[""Nine"", ""Eight"", ""Four""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_106,bod_Tibt,pl,"# དཔེ་ཆ། # i གི་ཕྲེང་བ་ནི་ 1 ནས་ i བར་གྱི་གྲངས་ཀྱི་ལྡབ་གྲངས་ཡིན། (1 * 2 * ... * i)# i 1 ནས་འགོ་ཚུགས།# ཡང་ན་ 1 ནས་ i བར་གྱི་གྲངས་ཐང་གི་བསྡོམས་ཡིན་ན།# ཚད་ནི་ n ཡིན་པའི་གྲངས་ཐང་ཕྱིར་ལོག་བྱེད་ཅིང་། ཚད་གཞི་ i ནང་ཡོད་པའི་གྲངས་ཐང་ནི་ i གྱི་གྲངས་ཐང་ཡིན་པའི་ཆ་ཤས་ཡིན་པའི་ཆ་ཤས་ཡིན་པའི་ཆ་ཤས་ཡིན་པའི་ཆ་ཤས་ཡིན།# ཚད་གཞི་ n སྦེ་ལེན་པའི་ function f འདི་ལག་ལེན་བསྟར་དགོས།# >>> f(5)
# [1, 2, 6, 24, 15]
sub f {
    my($n) = @_;
","sub f {
    my($n) = @_;
    my @result;

    for my $i (1..$n) {
        if ($i % 2 == 0) {
            my $factorial = 1;
            $factorial *= $_ for 1..$i;
            push @result, $factorial;
        } else {
            my $sum = 0;
            $sum += $_ for 1..$i;
            push @result, $sum;
        }
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&f;
        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),[1, 2, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_107,bod_Tibt,pl,"# དཔེ་གཞི་དང་པོ།# སྐར་གྲངས་ཀྱི་ནང་པའི་ཧྲིལ་གྲངས་ཀྱི་ཚད་གཞི་ (n) དང་།# འབྲས་བུ་གྲངས་ཆ་ཚག་ n ཞིག་ཡོད་ན། གྲངས་ཆ་ཚག་དང་གྲངས་ཆ་ཆ་མི་ཚག་ ཡོད་པའི་གྲངས་གཞི་ཅིག་ཕྱིར་སློག་བྱ་དགོས།# >>> even_odd_palindrome(3)
# [1, 2]
# Explanation:
# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
# Example 2:
# >>> even_odd_palindrome(12)
# [4, 6]
# Explanation:
# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
# Note:
# 1. 1 <= n <= 10^3
# 2. returned array has the number of even and odd integer palindromes respectively.
sub even_odd_palindrome {
    my($n) = @_;
","sub even_odd_palindrome {
    my($n) = @_;
    my $even_count = 0;
    my $odd_count = 0;
    for my $i (1..$n) {
        if ($i == reverse $i) {
            if ($i % 2 == 0) {
                $even_count++;
            } else {
                $odd_count++;
            }
        }
    }
    return [$even_count, $odd_count];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&even_odd_palindrome;
        if(eq_deeply($candidate->(123),[8, 13])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),[4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3),[1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(63),[6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(25),[5, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(19),[4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),[4, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_108,bod_Tibt,pl,"# དཔེར་ན། -123 ནང་གི་ཨང་རྟགས་ནི་ -1, 2, 3 ཡིན།# གྲངས་ཆ་འདི་ཆ་མེད་ཡིན་ན། དེའི་སྔོན་གྱི་ཨང་རྟགས་ནི་ཆ་མེད་ཡིན་: # ཤོག་གྲངས་ཀྱི་གྲངས་ཐང་ནི་ 0 སྟེང་གི་ཨང་གྲངས་ཀྱི་བསྡོམས་གྲངས་ཡིན།# གྲངས་ཚིགས་གྲངས་ཐང་གི་རིམ་པ་ལེན་ནས་སླར་ལོག་བྱ་བའི་ལས་འགན་ count_nums ཡིག་སྒྱུར་བྱོས།# >>> count_nums([])
# 0
# >>> count_nums([-1, 11, -11])
# 1
# >>> count_nums([1, 1, 2])
# 3
sub count_nums {
    my($arr) = @_;
","sub count_nums {
    my($arr) = @_;
    my $count = 0;

    foreach my $num (@$arr) {
        my $sum_of_digits = 0;
        my @digits = split //, $num;
        $sum_of_digits += shift @digits; # add the signed digit
        $sum_of_digits += $_ for @digits;
        $count++ if $sum_of_digits > 0;
    }

    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&count_nums;
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, 0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 2, -2, 3, 4, 5]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 100, 98, -7, 1, -1]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_109,bod_Tibt,pl,"# དཔེ་མཚོན།: # Note: འདིར་བཀོད་པའི་གཞི་རིམ་ལ་ཆ་རྐྱེན་གཅིག་པུ་ཡོད་ངེས་གཏན་འདུག# གལ་ཏེ་ array འདིར་སྟོང་པ་ཡོད་ན་ 1 སླར་ལོག་བྱེད།# དེ་ནས་ return 1 else return ' ' བྱས་ན་སླར་ལོག་བྱ་དགོས།# གོང་གི་བྱ་རིམ་ལྟར་རིམ་སྒྲིག་བྱས་པའི་ཐིག་ཁྲམ་དེ་ཐོབ་ཐུབ་ན།# ཚད་གཞི་ 0 པའི་ནང་གཞི་རྟེན་གྱི་གནས་བབ་# ཚད་གཞི་མཐའ་མ་དེ་ ཕྱོགས་གང་སར་སྤོ་དགོས།# གཡས་ཕྱོགས་བསྐྱོད་བྱ་རིམ་གཅིག་གིས་ array གི་ཆ་ཤས་ཚང་མ་ 1 ཀྱིས་བསྐྱོད་པར་བྱེད།# ཁྱོད་ཀྱིས་གཡས་གཡོན་དུ་འགྲོ་བར་ཐེངས་ཇི་ཙམ་འགོར་རུང་།# ཇི་བཞིན་ལག་ལེན་འདི་བཞིན་ array ནང་འཇུག་བྱེད་པ།# བྱེད་ནུས་ཀྱིས་རིམ་པ་མི་ཉམས་པའི་རིམ་པ་བཞིན་རིམ་པ་སྒྲིག་ཐུབ་པ་ཡོད།# ཚད་གཞི་ནང་གི་གྲངས་ནི་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་ནས་གཏན་གཏན་གཏན་# འདིར་ 'arr' ཟེར་བའི་གྲངས་ཐང་ N ཡི་གྲངས་ཐང་ arr[1], arr[2], ..., arr[N] ཡོད་པ་རེད།# >>> move_one_ball([3, 4, 5, 1, 2])
# 1
# Explanation: By performin 2 right shift operations, non-decreasing order can
# be achieved for the given array.
# >>> move_one_ball([3, 5, 4, 1, 2])
# """"
# Explanation:It is not possible to get non-decreasing order for the given
# array by performing any number of right shift operations.
sub move_one_ball {
    my($arr) = @_;
","sub move_one_ball {
    my ($arr) = @_;
    my $n = scalar @$arr;
    return 1 if $n == 0;

    for my $i (0 .. $n - 1) {
        my @shifted = (@$arr[$i .. $n - 1], @$arr[0 .. $i - 1]);
        if (is_sorted(\@shifted)) {
            return 1;
        }
    }
    return '';
}

sub is_sorted {
    my ($arr) = @_;
    for my $i (0 .. $#$arr - 1) {
        return 0 if $arr->[$i] > $arr->[$i + 1];
    }
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&move_one_ball;
        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 3, 1, 2]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_110,bod_Tibt,pl,"# དཔེར་ན་: # དེ་མིན་ ""NO"" ཕྱིར་སློག་བྱོས།# lst1 ནང་གི་ཆ་ཤས་ཚང་མ་ཆ་སྙོམས་ཡིན་ན། ""YES"" སླར་ལོག་བྱེད་དགོས།# ཕྱོགས་མཚུངས་ཀྱི་ཆ་རྐྱེན་ཞིག་ཡིན་ན།# lst1 དང་ lst2 བར་བརྗེ་ལེན་བྱེད་རྒྱུའི་ཆ་ཤས་གྲངས་ཚད་མེད་ཡིན།# ཇི་འདྲ་ཡིན་ན། ཇི་འདྲ་ཡིན་རུང་།# འདྲ་པར་བརྗེ་ལེན་བྱེད་ཆོག་མིན་ལ་དཔྱད་པ།# འདིར་ཁྱེད་ཚོས་གྲངས་ཀྱི་རིམ་པ་གཉིས་ལེན་པའི་ལས་འགན་ཞིག་ལག་ལེན་བྱེད་རྒྱུ་ཡིན།# >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])
# ""YES""
# >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])
# ""NO""
# It is assumed that the input arrays will be non-empty.
sub exchange {
    my($lst1, $lst2) = @_;
","sub exchange {
    my ($lst1, $lst2) = @_;
    
    # Check if lst1 is already all-even
    my $all_even = 1;
    foreach my $num (@$lst1) {
        if ($num % 2 != 0) {
            $all_even = 0;
            last;
        }
    }
    return ""YES"" if $all_even;

    # Check if there is at least one even number in lst2
    my $can_exchange = 0;
    foreach my $num (@$lst2) {
        if ($num % 2 == 0) {
            $can_exchange = 1;
            last;
        }
    }

    # Calculate the count of odd numbers in lst1
    my $odd_count_lst1 = 0;
    foreach my $num (@$lst1) {
        $odd_count_lst1++ if ($num % 2 != 0);
    }

    # If there are even numbers in lst2 and odd numbers in lst1, we can exchange
    if ($can_exchange && $odd_count_lst1 > 0) {
        return ""YES"";
    }

    return ""NO"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&exchange;
        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, 200], [200, 200]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_111,bod_Tibt,pl,"# དཔེ་ཆ། # གལ་ཏེ་ཡིག་རྟགས་མང་པོ་ཞིག་འདྲ་མཚུངས་བྱུང་ན་ཡིག་རྟགས་ཚང་མ་ཕྱིར་སློག་བྱེད་དགོས།# ཤོག་གྲངས་གང་ཞིག་ལ་ཨང་གྲངས་མང་ཤོས་དང་དེའི་ནང་གྲངས་རྩིས་ཡོད་ན་དེའི་ནང་ཡིག་འབྲུ་གང་ཞིག་ཡོད་ན་དེའི་ནང་འཇུག་དགོས།# སྐར་ཁུང་གི་ཡིག་འབྲུ་ཆུང་ཆུང་གཉིས་སུ་དབྱེ་བའི་ཡིག་འབྲུ་ ཞིག་ཡོད་ན། ཧེཤ་ (hash) སླར་ལོག་བྱེད་དགོས།# >>> histogram(""a b c"")
# {""a"" => 1, ""b"" => 1, ""c"" => 1}
# >>> histogram(""a b b a"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram(""a b c a b"")
# {""a"" => 2, ""b"" => 2}
# >>> histogram(""b b b b a"")
# {""b"" => 4}
# >>> histogram("""")
# {}
sub histogram {
    my($test) = @_;
","sub histogram {
    my ($test) = @_;
    my %count;

    # Split the input string by spaces and count occurrences of each letter
    $count{$_}++ for split ' ', $test;

    # Determine the maximum count
    my $max_count = 0;
    $max_count = $count{$_} > $max_count ? $count{$_} : $max_count for keys %count;

    # Collect all letters with the maximum count
    my %result = map { $_ => $count{$_} } grep { $count{$_} == $max_count } keys %count;

    return \%result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&histogram;
        if(eq_deeply($candidate->(""a b b a""),{""a"" => 2, ""b"" => 2})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c a b""),{""a"" => 2, ""b"" => 2})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c d g""),{""a"" => 1, ""b"" => 1, ""c"" => 1, ""d"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""r t g""),{""r"" => 1, ""t"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""b b b b a""),{""b"" => 4})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""r t g""),{""r"" => 1, ""t"" => 1, ""g"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),{})) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a""),{""a"" => 1})) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_112,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཚོད་ལྟ་བྱེད་ཆེད་འབྲས་བུ་ string དང་ 1/' ཡོད་པའི་ array སླར་ལོག་བྱ་དགོས།# string འདི་ལ་ palindrome ཞེས་ཟེར་བ་ནི། ཕྱིར་དང་མདུན་གྱི་གོ་དོན་འདྲ་མཚུངས་ཡིན་ན།# འབྲས་བུ་ནི་ palindrome ཡིན་མིན་ལ་བརྟག་དཔྱད་བྱེད་དགོས།# འདིར་ s དང་ c གཉིས་ཀྱི་ཡིག་འབྲུ་གཉིས་ཡོད། ཁྱོད་ཀྱིས་ s ནང་གི་ཡིག་འབྲུ་གང་འདྲ་ཞིག་ c ནང་གི་ཡིག་འབྲུ་གང་འདྲ་ཞིག་དང་མཚུངས་པ་ཚང་མ་སེལ་དགོས།# ལས་འགན་ # >>> reverse_delete(""abcde"", ""ae"")
# [""bcd"", """"]
# >>> reverse_delete(""abcdef"", ""b"")
# [""acdef"", """"]
# >>> reverse_delete(""abcdedcba"", ""ab"")
# [""cdedc"", 1]
sub reverse_delete {
    my($s, $c) = @_;
","sub reverse_delete {
    my($s, $c) = @_;
    
    # Create a hash of characters to be deleted for quick lookup
    my %chars_to_delete = map { $_ => 1 } split //, $c;
    
    # Remove characters that need to be deleted
    $s =~ s/[$c]//g;
    
    # Check if the resulting string is a palindrome
    my $is_palindrome = ($s eq reverse $s) ? 1 : '';

    # Return the resulting string and palindrome check
    return [$s, $is_palindrome];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&reverse_delete;
        if(eq_deeply($candidate->(""abcde"", ""ae""),[""bcd"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef"", ""b""),[""acdef"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", ""ab""),[""cdedc"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""dwik"", ""w""),[""dik"", """"])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a"", ""a""),["""", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", """"),[""abcdedcba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdedcba"", ""v""),[""abcdedcba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""vabba"", ""v""),[""abba"", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""mamma"", ""mia""),["""", 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_113,bod_Tibt,pl,"# ཇི་ཇི་ཨང་གྲངས་ནང་ཐིག་གྲངས་གྲངས་ཀྱི་གྲངས་ཆ་མི་འདྲ་བ་ཡོད་ན།# ནང་འཇུག་གི་ string i ཟེར་བའི་ནང་ i ཚང་མ་གྲངས་ཀ་ ཀྱིས་ཚབ་ཏུ་འཇུག་དགོས།# ཕྱིར་ཐོན་གྱི་ཆ་ཤས་ i ཇི་ཡོད་ཆ་ཤས་གྲངས་ ཇི་ཡོད་ཆ་ཤས་གྲངས་ ཇི་ཡོད་ཆ་ཤས་གྲངས་ ཇི་ཡོད་ཆ་ཤས་གྲངས་ ཇི་ཡོད་ཆ་ཤས་གྲངས་ ཇི་ཡོད་ཆ་ཤས་གྲངས་ ཇི་ཡོད་ཆ་ཤས་གྲངས་ ཇི་ཡོད་ཆ་ཤས་གྲངས་# string ཀྱི་གྲངས་ཐང་ཡིན་པའི་ནང་ string ཚང་མ་ནི་ཨང་གྲངས་ཀྱི་གྲངས་ཐང་ཡིན་པའི་གོ་རིམ་དེ་སླར་ལོག་བྱ་དགོས།# >>> odd_count([""1234567""])
# [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
# >>> odd_count([""3"", ""11111111""])
# [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
sub odd_count {
    my($lst) = @_;
","sub odd_count {
    my ($lst) = @_;
    my @output;
    foreach my $str (@$lst) {
        my $odd_count = 0;
        $odd_count++ while $str =~ /[13579]/g;
        push @output, ""the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput."";
    }
    return \@output;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&odd_count;
        if(eq_deeply($candidate->([""1234567""]),[""the number of odd elements 4n the str4ng 4 of the 4nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""3"", ""11111111""]),[""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""271"", ""137"", ""314""]),[""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_114,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཀྱི་གྲངས་ཀ་ཡིན།# སྐར་གྲངས་ n གི་རིམ་པ་ཐོབ་ན། སྟོང་པ་མིན་པའི་རིམ་པ་ཆུང་ཤོས་ཀྱི་བསྡོམས་གྲངས་འཚོལ་དགོས།# >>> minSubArraySum([2, 3, 4, 1, 2, 4])
# 1
# >>> minSubArraySum([-1, -2, -3])
# -6
sub minSubArraySum {
    my($nums) = @_;
","sub minSubArraySum {
    my($nums) = @_;
    my $minSum = $nums->[0];
    my $currentSum = 0;
    
    foreach my $num (@$nums) {
        $currentSum += $num;
        if ($currentSum < $minSum) {
            $minSum = $currentSum;
        }
        if ($currentSum > 0) {
            $currentSum = 0;
        }
    }
    
    return $minSum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&minSubArraySum;
        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10]),-10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7]),7)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -1]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_115,bod_Tibt,pl,"# དཔེ་གཞི་དང་པོ།# སྦ་སྒོར་ཕབ་དགོས་པའི་དུས་གྲངས་འདེམས་དགོས།# ཁྱོད་ཚོར་ལས་འགན་ནི་ཆུ་མཛོད་རྣམས་ཆུ་ཟམ་ནས་ཆུ་བསྐོལ་བའི་ཆེད་དུ་སླ་པོ་རྣམས་བེད་སྤྱོད་བྱེད་རྒྱུ་དེ་ཡིན།# ཚང་མ་ཁོར་ཡུག་འདྲ་མཉམ་ཡོད།# ཆུ་དོང་རེ་རེར་ཆུ་རྫིང་རེ་ཡོད་དེ། ཆུ་དེ་ནས་ཆུ་བཏོན་པའི་ཆེད་དུ་བེད་སྤྱོད་བྱེད་ཆོག# ཤོག་ངོས་རེ་རེའི་ནང་ 1 ཟེར་བ་ནི་ཆུ་གི་ཆ་ཤས་གཅིག་ཡིན་པ་མཚོན་པ་ཡིན།# ཁྱོད་ཚོར་ཆུ་རྐ་གྲུ་བཞི་ཅན་གྱི་དྲ་རྒྱ་ཞིག་སྤྲོད་ཡོད། རེའུ་མིག་རེ་རེར་ཆུ་རྐ་གཅིག་རང་ཡོད།# >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
# 6
# Example 2:
# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
# 5
# Example 3:
# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)
# 0
# Constraints:
# * all wells have the same length
# * 1 <= grid.length <= 10^2
# * 1 <= grid[:,1].length <= 10^2
# * grid[i][j] -> 0 | 1
# * 1 <= capacity <= 10
sub max_fill {
    my($grid, $capacity) = @_;
","sub max_fill {
    my($grid, $capacity) = @_;
    my $total_water_units = 0;
    
    for my $row (@$grid) {
        for my $unit (@$row) {
            $total_water_units += $unit;
        }
    }
    
    my $bucket_uses = int(($total_water_units + $capacity - 1) / $capacity);
    return $bucket_uses;
}

# Examples
print max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) . ""\n""; # 6
print max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) . ""\n""; # 5
print max_fill([[0, 0, 0], [0, 0, 0]], 5) . ""\n""; # 0","use Test::Deep;


sub testhumaneval {
    my $candidate = \&max_fill;
        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_116,bod_Tibt,pl,"# འདྲ་བཤུས་འདི་བཞིན་ལག་ལེན་བྱ་དགོས།# འདྲ་མཉམ་གྲངས་སུ་གཅིག་ཡོད་ན། བཅུ་ཚིགས་ཀྱི་རིན་ཐང་ཐོག་ནས་དབྱེ་བ་དགོས།# ཤོག་གྲངས་གཉིས་པའི་ནང་གྲངས་གྲངས་ཡར་སེང་གི་རིམ་པ་བཞིན་ཡོད།# འདིར་ཁྱོད་ཀྱིས་ ཤོག་གྲངས་ སྐྱོན་མེད་ཀྱི་གྲངས་ཐང་ ཇི་འདྲ་ཡིན་མིན་ལ་དབྱེ་དགོས།# >>> sort_array([1, 5, 2, 3, 4])
# [1, 2, 3, 4, 5]
# >>> sort_array([-2, -3, -4, -5, -6])
# [-6, -5, -4, -3, -2]
# >>> sort_array([1, 0, 2, 3, 4])
# [0, 1, 2, 3, 4]
sub sort_array {
    my($arr) = @_;
","sub sort_array {
    my($arr) = @_;
    return [sort { sprintf(""%b"", $a) =~ tr/1// <=> sprintf(""%b"", $b) =~ tr/1// || $a <=> $b } @$arr];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sort_array;
        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_117,bod_Tibt,pl,"# དཔེ་གཟིགས།# Note: ཁྱོད་ཀྱིས་ནང་འཇུག་ string ནང་ཡིག་རྟགས་དང་བར་སྟོང་མ་གཏོགས་གཞན་མེད་ཟེར་ངེས་ཐུབ།# གལ་ཏེ་ string s ནི་སྟོང་པ་ཡིན་ན་ function ཀྱིས་སྟོང་པའི་ array སླར་ལོག་བྱ་དགོས།# n ཟུར་སྒྲ་རྣམས་རིམ་བཞིན་སོར་ལྡོག་བྱེད་ནས་ ཚིག་རྣམས་རིམ་བཞིན་སོར་ལྡོག་བྱེད་ནས་སོར་ལྡོག་བྱེད་ཡོད།# ཚད་ལྡན་ཚིག་ཡིག་ s ནང་གི་ཚིག་ཡིག་ཚང་མ་ཡོད་པའི་ཡིག་གཟུགས་ཤིག་ཕྱིར་ལོག་བྱེད་པ།# string s དང་ natural number n ཞིག་ཡོད་ན། ཁྱོད་ཚོར་ལག་ལེན་བྱེད་རྒྱུའི་འགན་ཁུར་ཡོད།# >>> select_words(""Mary had a little lamb"", 4)
# [""little""]
# >>> select_words(""Mary had a little lamb"", 3)
# [""Mary"", ""lamb""]
# >>> select_words(""simple white space"", 2)
# []
# >>> select_words(""Hello world"", 4)
# [""world""]
# >>> select_words(""Uncle sam"", 3)
# [""Uncle""]
sub select_words {
    my($s, $n) = @_;
","sub select_words {
    my($s, $n) = @_;
    return [] if $s eq '';
    
    my @words = split(/\s+/, $s);
    my @result;
    
    foreach my $word (@words) {
        my $consonant_count = () = $word =~ /[^aeiouAEIOU]/g;
        push @result, $word if $consonant_count == $n;
    }
    
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&select_words;
        if(eq_deeply($candidate->(""Mary had a little lamb"", 4),[""little""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mary had a little lamb"", 3),[""Mary"", ""lamb""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""simple white space"", 2),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello world"", 4),[""world""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Uncle sam"", 3),[""Uncle""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("""", 4),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""a b c d e f"", 1),[""b"", ""c"", ""d"", ""f""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_118,bod_Tibt,pl,"# དཔེ་ཆ། # ཁྱོད་ཀྱིས་བྱིན་ཡིག་ string ནང་དཔར་ཡིག་དབྱིན་ཡིག་ཁོ་ན་ཡོད་པར་ངེས་གཏན་བྱེད་དགོས།# སྟེང་གི་གནས་སྟངས་ལ་བསྟུན་པའི་སྒྲ་སྒྲ་གང་ཞིག་འཚོལ་དགོས།# ཐོག་དང་མཇུག་གི་སྒྲ་དབྱངས་ལ་རྩིས་མི་བྱེད། གལ་ཏེ་མེད་ན་སྟོང་པ་ཕྱིར་ལོག་བྱོས།# ཚིག་གི་གཡས་ཕྱོགས་ནས་སྒྲ་གཉིས་བཏགས་པ། (case sensitive)# ཁྱོད་ཚོར་ཚིག་ཅིག་སྤྲོད་ཡོད། ཁྱོད་ཀྱི་ལས་འགན་ནི་ ཇི་ཙམ་ཉེ་བར་ཡོད་པ་དང་དེའི་བར་གྱི་སྒྲ་དབྱངས་འཚོལ་རྒྱུ་དེ་ཡིན།# >>> get_closest_vowel(""yogurt"")
# ""u""
# >>> get_closest_vowel(""FULL"")
# ""U""
# >>> get_closest_vowel(""quick"")
# """"
# >>> get_closest_vowel(""ab"")
# """"
sub get_closest_vowel {
    my($word) = @_;
","sub get_closest_vowel {
    my($word) = @_;
    my @chars = split //, $word;
    my $vowel = '';
    my @vowels = qw(a e i o u A E I O U);
    my %vowel_hash = map { $_ => 1 } @vowels;

    for (my $i = $#chars - 1; $i > 0; $i--) {
        if ($vowel_hash{$chars[$i]} && !$vowel_hash{$chars[$i - 1]} && !$vowel_hash{$chars[$i + 1]}) {
            $vowel = $chars[$i];
            last;
        }
    }

    return $vowel;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_closest_vowel;
        if(eq_deeply($candidate->(""yogurt""),""u"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""full""),""u"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""easy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eAsy""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ali""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""bad""),""a"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""most""),""o"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ab""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ba""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""quick""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""anime""),""i"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Asia""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Above""),""o"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_119,bod_Tibt,pl,"# དཔེ་གཟིགས།# གལ་ཏེ་ string བཟོ་ཐབས་ཡོད་ན་ 'Yes' སླར་ལོག་བྱེད་དང་གཞན་ན་ 'No' སླར་ལོག་བྱེད་# "" ((()) ""མི་འདུག# ཚད་ལྡན་ཡིན་པའི་དཔེར་ན། string '(((() 'ནི་ལེགས་པོ་ཡིན་པ་དང་། string # string S འདི་ལེགས་པར་བརྩི་བའི་དོན་ནི་ S ནང་གི་ parentheses ཚང་མ་ལེགས་པ་ཡིན་ན་དེ་འདྲ་ཡིན་ན་མ་གཏོགས་གཞན་གང་ཡང་མེད།# ཚད་གཞི་འདི་ནི་རིམ་པ་གང་རུང་ཞིག་ཡིན་ན། འབྲས་བུ་ནི་ string ཡི་ལེགས་པ་ངེས་ཅན་ཞིག་ཡིན།# ཁྱོད་ཀྱི་ལས་འགན་ནི་ string གཉིས་ནང་འབྲེལ་མཐུད་བྱེད་ནུས་ཡོད་མེད་བརྟག་དཔྱད་བྱེད་རྒྱུ་རེད།# ནང་འཇུག་བྱེད་ཚིག་ཡིག་ནང་ "" (("") "" ཡང་ན་ "") "" ཟེར་བའི་ནང་འཇུག་བྱེད་ཚིག་ཡིག་དེ་མ་གཏོགས་གཞན་མེད།# ཁྱོད་ཚོར་ string གཉིས་ཀྱི་གྲངས་ཐང་ཞིག་ཐོབ་ཡོད། string གཉིས་ཀ་ open ཟེར་བ་ལས་གྲུབ་པ་ཡིན།# >>> match_parens([""()("", "")""])
# ""Yes""
# >>> match_parens(["")"", "")""])
# ""No""
sub match_parens {
    my($lst) = @_;
","sub match_parens {
    my($lst) = @_;
    my ($a, $b) = @$lst;
    
    # Helper to check if a string is good (i.e., parentheses balanced)
    sub is_good {
        my ($str) = @_;
        my $balance = 0;
        for my $ch (split //, $str) {
            $balance++ if $ch eq '(';
            $balance-- if $ch eq ')';
            return 0 if $balance < 0; # Too many closing parens
        }
        return $balance == 0; # Balanced if zero
    }
    
    # Check both combinations
    return ""Yes"" if is_good($a . $b) || is_good($b . $a);
    return ""No"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&match_parens;
        if(eq_deeply($candidate->([""()("", "")""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")"", "")""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(()(())"", ""())())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")())"", ""(()()(""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(())))"", ""(()())((""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""()"", ""())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(()("", ""()))()""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""(((("", ""((())""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")(()"", ""(()(""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")("", "")(""]),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""("", "")""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(["")"", ""(""]),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_120,bod_Tibt,pl,"# དཔེ་གཞི་དང་པོ།# ཚད་ k དང་གྲངས་ k ཡི་རིང་ཚད་ arr ནང་ཡོད།# སྐར་ཁུང་གི་དྲ་ངོས་ནས་ཨང་གྲངས་མཐའ་དག་དང་ k ཅན་གྲངས་མཐའ་དག་གི་རིམ་པ་སྒྲིག་པའི་རིམ་པ་སླར་ལོག་བྱེད།# >>> maximum([-3, -4, 5], 3)
# [-4, -3, 5]
# Example 2:
# >>> maximum([4, -4, 4], 2)
# [4, 4]
# Example 3:
# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)
# [2]
# Note:
# 1. The length of the array will be in the range of [1, 1000].
# 2. The elements in the array will be in the range of [-1000, 1000].
# 3. 0 <= k <= len(arr)
sub maximum {
    my($arr, $k) = @_;
","sub maximum {
    my($arr, $k) = @_;
    my @sorted = sort { $b <=> $a } @$arr;  # Sort in descending order
    my @result = sort { $a <=> $b } @sorted[0..$k-1];  # Take first k elements and sort them
    return \@result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&maximum;
        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_121,bod_Tibt,pl,"# དཔེ་གཟིགས།# སྟོང་པ་མིན་པའི་གྲངས་ཐང་གི་རིམ་པ་ཐོབ་ན། གྱ་གྲངས་ཆ་མཉམ་གྱི་ཆ་ཤས་ཆ་སྙོམས་ཕྱིར་ལོག་བྱེད་པ།# >>> solution([5, 8, 7, 1])
# 12
# >>> solution([3, 3, 3, 3, 3])
# 9
# >>> solution([30, 13, 24, 321])
# 0
sub solution {
    my($lst) = @_;
","sub solution {
    my($lst) = @_;
    my $sum = 0;
    for (my $i = 0; $i < @$lst; $i += 2) {
        $sum += $lst->[$i] if $lst->[$i] % 2 != 0;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solution;
        if(eq_deeply($candidate->([5, 8, 7, 1]),12)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([30, 13, 24, 321]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5, 9]),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 8]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([30, 13, 23, 32]),23)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 13, 2, 9]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_122,bod_Tibt,pl,"# དཔེ་ཆ། # arr ནང་གི་ཆ་ཤས་ k ཐོག་མའི་ཆ་ཤས་ནས་ཨང་གྲངས་གཉིས་ལས་མང་བ་མེད་པའི་ཆ་ཤས་ཀྱི་བསྡོམས་ཡིན།# ཨང་གྲངས་ཧྲིལ་པོ་ arr དང་ཨང་གྲངས་ཧྲིལ་པོ་ k ཡོད་པའི་སྟོང་པ་མིན་པའི་རིམ་པ་ཡོད་ན། return # >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
# 24
# Constraints:
# 1. 1 <= len(arr) <= 100
# 2. 1 <= k <= len(arr)
sub add_elements {
    my($arr, $k) = @_;
","sub add_elements {
    my ($arr, $k) = @_;
    my $sum = 0;
    for my $i (0..$k-1) {
        $sum += $arr->[$i] if $arr->[$i] >= -99 && $arr->[$i] <= 99;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&add_elements;
        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1], 1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_123,bod_Tibt,pl,"# get_odd_collatz(5) སླར་ལོག་བྱས་ [1, 5] # 5 གི་ collatz ཐིག་ཁྲམ་ནི་ [5, 16, 8, 4, 2, 1] ཡིན་པས་གྲངས་ཆ་རྐྱང་ནི་ 1 དང་ 5 ཙམ་ཡིན།# དཔེར་ན་: # 2. return array sorted in increasing order. ཕྱིར་ལོག་བྱས་པའི་རིམ་པ་རིམ་བཞིན་གོ་སྒྲིག་བྱས་ཡོད།# Collatz ((1) ནི་ [1]ཡིན།# དྲན་གསོ།# ཚིག་གྲངས་དང་ལྡན། 1 ཟེར་བ་དེའི་ནང་ n ཇི་འདྲ་ཡིན་རུང་རིམ་པ་ 1 ཏུ་ངེས་པ་རེད་འདུག# གལ་ཏེ་སྔོན་གྱི་གྲངས་ནི་རྣམ་རྟོག་ཡིན་ན། རྗེས་མའི་གྲངས་ནི་སྔོན་གྱི་གྲངས་ལས་ 3 ཙམ་ཡིན།# སྔོན་མའི་གྲངས་ནི་ཆ་སྙོམས་ཡིན་ན། རྗེས་མའི་གྲངས་ནི་ གྱི་ཕྱེད་ཀ་ཡིན།# ཇི་འདྲ་ཡིན་རུང་ཨང་གྲངས་ཧྲིལ་པོ་ n ལས་འགོ་འཛུགས་དགོས། དེ་ནས་རིམ་པ་རེ་རེར་ ལས་ཐོབ་ཡོད།# ཀོ་ལ་ཊི་ (Collaz) གི་རྣམ་གཞག་ནི་རྩིས་རིག་གི་རྣམ་གཞག་ཞིག་ཡིན་ཏེ། དེའི་ནང་གསལ་གྱི་རིམ་པ་ཞིག་ཡིན་ཏེ།# འབྲས་བུ་གྲངས་ཆ་མཉམ་ n ཞིག་ཡོད་ན། ཚད་ལྡན་ཨང་གྲངས་ Collatz ནང་ཡོད་པའི་རིམ་པ་སྒྲིག་པའི་གྲངས་ཐང་ཕྱིར་ལོག་འབད།# >>> get_odd_collatz(5)
# [1, 5]
sub get_odd_collatz {
    my($n) = @_;
","sub get_odd_collatz {
    my ($n) = @_;
    my %odd_numbers;
    
    while ($n != 1) {
        $odd_numbers{$n} = 1 if $n % 2 != 0;
        if ($n % 2 == 0) {
            $n = $n / 2;
        } else {
            $n = 3 * $n + 1;
        }
    }
    $odd_numbers{1} = 1;
    
    return sort { $a <=> $b } keys %odd_numbers;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_odd_collatz;
        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[1, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),[1, 3, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_124,bod_Tibt,pl,"# 4. ཚེས་གྲངས་ནི་ཨང་རིམ་:ཨེམ་ཨེམ་-དི་-ཡཡཡ། ནང་དུ་བཀོད་དགོས།# ཟླ་བ་ ༡ ལས་ཉུང་བ་མིན་པར་ ༡༢ ལས་མང་བ་མིན་པར་དགོས།# ཟླ་བ་ ༡། ༣། ༥། ༧། ༨། ༡༠། ༡༢ ཀྱི་ཉིན་གྲངས་ནི་ ༡ ལས་ཉུང་བ་མིན་པ་དང་ ༣༡ ལས་མང་བ་མིན་པ་དང་། ཟླ་བ་ ༤། ༦། ༩། ༡༡ གྱི་ཉིན་གྲངས་ནི་ ༡ ལས་ཉུང་བ་མིན་པ་དང་ ༣༠ ལས་མང་བ་མིན་པ་དང་། ཟླ་བ་ ༢ གྱི་ཉིན་གྲངས་ནི་ ༡ ལས་ཉུང་བ་མིན་པ་དང་ ༢༩ ལས་མང་བ་མིན་པ་བཅས་ཡིན།# 1. ཚེས་གྲངས་ཀྱི་ཐིག་ཡིག་ནི་སྟོང་པ་མིན་ནོ།།# ཚེས་གྲངས་དེ་གནས་ངེས་ཡིན་ན། འོག་གི་ཁྲིམས་ལུགས་ཚང་མ་སྲུང་དགོས།# ཚེས་གྲངས་ངེས་ཅན་ཡིན་ན་ 1 སླར་ལོག་བྱེད། དེ་མིན་ """".# ཁྱོད་ཀྱིས་དུས་གྲངས་ཀྱི་ཐིག་ཡིག་ལ་རྟགས་རྒྱག་པའི་ function ཞིག་འབྲི་དགོས།# >>> valid_date(""03-11-2000"")
# 1
# >>> valid_date(""15-01-2012"")
# """"
# >>> valid_date(""04-0-2040"")
# """"
# >>> valid_date(""06-04-2020"")
# 1
# >>> valid_date(""06/04/2020"")
# """"
sub valid_date {
    my($date) = @_;
","sub valid_date {
    my ($date) = @_;
    
    # Check if date is empty
    return '' if !$date;
    
    # Date pattern for mm-dd-yyyy
    if ($date =~ /^(\d{2})-(\d{2})-(\d{4})$/) {
        my ($month, $day, $year) = ($1, $2, $3);
        
        # Check month validity
        return '' if $month < 1 || $month > 12;
        
        # Check day validity based on the month
        my %days_in_month = (
            1 => 31, 2 => 29, 3 => 31, 4 => 30,
            5 => 31, 6 => 30, 7 => 31, 8 => 31,
            9 => 30, 10 => 31, 11 => 30, 12 => 31
        );
        
        return '' if $day < 1 || $day > $days_in_month{$month};
        
        # If all conditions are satisfied, return 1
        return 1;
    }
    
    # If date does not match the pattern, return ''
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&valid_date;
        if(eq_deeply($candidate->(""03-11-2000""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""15-01-2012""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-0-2040""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""06-04-2020""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""01-01-2007""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""03-32-2011""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-31-3000""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""06-06-2005""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""21-31-2000""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-12-2003""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04122003""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""20030412""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2003-04""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2003-04-12""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""04-2003""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_125,bod_Tibt,pl,"# དཔེ་གཟིགས།# དབྱེ་ཡིག་ ord (a) = 0 ord (b) = 1 ord (z) = 25# ཚད་མ་ནང་ཡིག་ཆུང་ཆུང་གི་གྲངས་དང་གོ་རིམ་རྣམ་རྟོག་མེད་པ།# ཚིག་ཡིག་གི་ཐིག་ཡིག་ཐོབ་ཡོད་ན། ཚིག་ཡིག་གི་གོ་རིམ་ནང་གོ་རིམ་མེད་ན་ ཡིག་འབྲུ་ནང་གོ་རིམ་མེད་ན་ སྟོང་པ་ཁ་ཕྱེ་ནས་གོ་རིམ་སྒྲིག་པའི་ཡིག་འབྲུ་སླར་ལོག་བྱེད།# >>> split_words(""Hello world!"")
# [""Hello"", ""world!""]
# >>> split_words(""Hello,world!"")
# [""Hello"", ""world!""]
# >>> split_words(""abcdef"")
# 3
sub split_words {
    my($txt) = @_;
","sub split_words {
    my($txt) = @_;
    
    # Check if whitespace exists in the string
    if ($txt =~ /\s/) {
        my @words = split(/\s+/, $txt);
        return \@words;
    }
    # If no whitespace, check for commas
    elsif ($txt =~ /,/) {
        my @words = split(/,/, $txt);
        return \@words;
    }
    # If neither whitespace nor commas exist, calculate odd ordered lowercase letters
    else {
        my @chars = split(//, $txt);
        my $count = 0;
        foreach my $char (@chars) {
            if ($char ge 'a' && $char le 'z' && (ord($char) - ord('a')) % 2 == 0) {
                $count++;
            }
        }
        return $count;
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&split_words;
        if(eq_deeply($candidate->(""Hello world!""),[""Hello"", ""world!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello,world!""),[""Hello"", ""world!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello world,!""),[""Hello"", ""world,!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hello,Hello,world !""),[""Hello,Hello,world"", ""!""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abcdef""),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaabb""),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""aaaBb""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_126,bod_Tibt,pl,"# དཔེ་གཟིགས།# གྲངས་ཆ་མེད་པ། གྲངས་ཆ་ཧྲིལ་པོ་ཁོ་ན་རེད་བསམ་དགོས།# གལ་ཏེ་ array ནང་འདྲ་མཚུངས་ 1 ལས་མང་བ་ཡོད་ན།# གྲངས་ཀྱི་རིམ་པ་ཐོབ་ནས་རིམ་པ་སྒྲིག་ཡོད་མེད་ཕྱིར་ལོག་འཇུག་དགོས།# >>> is_sorted([5])
# 1
# >>> is_sorted([1, 2, 3, 4, 5])
# 1
# >>> is_sorted([1, 3, 2, 4, 5])
# """"
# >>> is_sorted([1, 2, 3, 4, 5, 6])
# 1
# >>> is_sorted([1, 2, 3, 4, 5, 6, 7])
# 1
# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])
# """"
# >>> is_sorted([1, 2, 2, 3, 3, 4])
# 1
# >>> is_sorted([1, 2, 2, 2, 3, 4])
# """"
sub is_sorted {
    my($lst) = @_;
","sub is_sorted {
    my($lst) = @_;
    my %count;
    
    for (my $i = 0; $i < @$lst; $i++) {
        $count{$lst->[$i]}++;
        
        # Check for more than one duplicate
        if ($count{$lst->[$i]} > 2) {
            return '';
        }
        
        # Check if the array is not sorted
        if ($i > 0 && $lst->[$i] < $lst->[$i - 1]) {
            return '';
        }
    }
    
    return 1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_sorted;
        if(eq_deeply($candidate->([5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([3, 2, 1]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_127,bod_Tibt,pl,"# [input/output] དཔེ་གཟུགས།# གལ་ཏེ་བར་མཚམས་གཉིས་དེ་དང་མི་འདྲ་ན། ""NO"" སླར་ལོག་བྱེད།# དེ་མིན་ ""NO"" ཟེར་བ་ཕྱིར་ལོག་བྱོས།# གལ་ཏེ་ཕྲེང་བའི་རིང་ཚད་ནི་སྔོན་གྲངས་ཡིན་ན། ""YES"" ཕྱིར་སློག་བྱོས།# དེའི་རིང་ཚད་ནི་ 1 ཡིན་ལ། དེ་ནི་སྔོན་གྲངས་མིན་པ་ཡིན།# དཔེ་གཞི་འདི་ནི་བར་མཚམས་ (1, 3), (2, 4) གྱི་ཕྲ་རིང་ནི་ (2, 3) ཡིན།# བར་མཚམས་ནི་གྲངས་དང་པོ་ཡིན།# ཁྱོད་ཀྱི་ལས་འགན་ནི་འདི་གཉིས་ཀྱི་ཕྲད་ཚད་ ཇི་ཡིན་གཏན་འབེབས་བྱ་རྒྱུ་དེ་ཡིན།# ཚད་གཞི་སོ་སོར་ཆ་བཞག་ན་དུས་ཡུན་གྱི་འགོ་ནི་མཐའ་མ་ལས་ཆུང་བའམ་མཚུངས་པ་རེད་ཟེར།# ཀྱི་འགོ་དང་མཐའ་གཉིས་ཀ་ཚུད་ཡོད།# ཇི་ཡོད་བར་མཚམས་ནི་བསྡམས་པ་རེད་ཟེར། དེའི་དོན་ནི་བར་མཚམས་ (འགོ་འཛུགས་དང་མཇུག་བསྡུ་) ཟེར་བ་རེད།# ཚོད་མཚམས་རེ་རེ་ནི་གྲངས་ཆ་ཆ་ཚང་གཉིས་ཡིན། དཔེར་ན། ཚོད་མཚམས་ = (འགོ་འཛིན། མཇུག་) = (1, 2)# ཁྱོད་ཚོར་དུས་ཡུན་གཉིས་ཐོབ་ཡོད།# >>> intersection([1, 2], [2, 3])
# ""NO""
# >>> intersection([-1, 1], [0, 4])
# ""NO""
# >>> intersection([-3, -1], [-5, 5])
# ""YES""
sub intersection {
    my($interval1, $interval2) = @_;
","sub is_prime {
    my $num = shift;
    return 0 if $num <= 1;
    for my $i (2 .. sqrt($num)) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub intersection {
    my ($interval1, $interval2) = @_;

    my $start1 = $interval1->[0];
    my $end1 = $interval1->[1];
    my $start2 = $interval2->[0];
    my $end2 = $interval2->[1];

    my $intersection_start = ($start1 > $start2) ? $start1 : $start2;
    my $intersection_end = ($end1 < $end2) ? $end1 : $end2;

    if ($intersection_start <= $intersection_end) {
        my $intersection_length = $intersection_end - $intersection_start;
        return is_prime($intersection_length) ? ""YES"" : ""NO"";
    }

    return ""NO"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&intersection;
        if(eq_deeply($candidate->([1, 2], [2, 3]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1], [0, 4]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-3, -1], [-5, 5]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, 2], [-4, 0]),""YES"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-11, 2], [-1, -1]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], [3, 5]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2], [1, 2]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2, -2], [-3, -2]),""NO"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_128,bod_Tibt,pl,"# དཔེ་ཆ། # Note: empty arr གི་ཕྱིར་ undef སླར་ལོག་བྱེད།# ཚད་གཞི་ནང་ཡོད་པའི་གྲངས་རེ་རེ་ལ་ 1 དང་ -1 ཡང་ན་ 0 ཟེར་བ་ཡོད།# འབྲས་བུ་ནི་ཨང་གྲངས་ཧྲིལ་པོ་གི་ཆེ་ཆུང་དང་རྟགས་ཐམས་ཅད་ཀྱི་འབྲས་བུ་ལ་སོགས་པའི་གྲངས་ཀ་ཡིན།# ཁྱོད་ལ་ཧྲིལ་གྲངས་ཀྱི་རིམ་པ་ arr ཞིག་སྤྲད་ཡོད་པ་དང་ཁྱོད་ཀྱིས་ལོག་དགོས་པ་ཡིན།# >>> prod_signs([1, 2, 2, -4])
# 9
# >>> prod_signs([0, 1])
# 0
# >>> prod_signs([])
# undef
sub prod_signs {
    my($arr) = @_;
","sub prod_signs {
    my($arr) = @_;
    return undef if scalar(@$arr) == 0;

    my $sum_magnitudes = 0;
    my $product_signs = 1;

    for my $num (@$arr) {
        $sum_magnitudes += abs($num);
        
        if ($num > 0) {
            $product_signs *= 1;
        } elsif ($num < 0) {
            $product_signs *= -1;
        } else {
            $product_signs *= 0;
        }
    }

    return $sum_magnitudes * $product_signs;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&prod_signs;
        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_129,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཆུང་ཤོས་ཀྱི་ལམ་བརྒྱུད་པའི་ཐིག་ཁྲམ་ནང་འཇུག་པའི་གྲངས་ཐང་གི་རིམ་པ་སླར་ལོག་བྱེད།# ཇི་འདྲ་ཡིན་ན་ལན་གཅིག་ཡོད་ངེས་རེད།# lst_A[j] = lst_B[j] ཟེར་བ་ལྟ་བུ།# འདྲ་བའི་ lst_A[i] < lst_B[i] དང་ j (1 <= j < i) ཇི་ཡོད་ཀྱི་ཆེད་དུ་# འདྲ་མིན་གྱི་ཚིག་གཞན་ལ་ lst_B དང་བསྡུར་ན་གྲངས་ཚང་གི་གྲངས་ཐང་ i (1 <= i <= k) ཡོད་པ་རེད།# རྒྱུད་ནས་ (ང་ཚོས་དེ་དག་ལ་ lst_A དང་ lst_B ཞེས་འབོད།) lst_A ནི་ཚིག་མཛོད་རིག་པའི་ཐོག་ནས་ཉུང་བ་རེད།# སྐར་ཁུང་ A དང་ B ནང་གི་ཐང་རིམ་བཞིན་སྒྲིག་འཇུག་བྱས་རྗེས་འགྲོ་བཞིན་ཡོད།# ཕྲང་ལམ་ A (རིང་ཚད་ k) ནི་ཕྲང་ལམ་ B (རིང་ཚད་ k) ལས་ཆུང་བ་ཡིན་པར་རྩིས་ན།# ཁྱོད་ནི་གློག་ཀླད་ཀྱི་ལམ་ནས་འགྲོ་མི་ཐུབ།# འདྲ་མིན་གྱི་ཆ་རྐྱེན་ལ་བརྟེན་པ་མིན་ནམ།# ཚད་ k ཡོད་པའི་ལམ་གྱི་དོན་ནི་ k ཁང་མིག་ལ་ཐད་ཀར་འགྲོ་དགོས་ (མི་ #  cell  cell  cell  cell# གཞན་སྐད་དུ་བཤད་ན། ཁྱོད་མིག་མིག་ལ་འགྲོ་ཐུབ། ཇི་ཞིག་ལ་ཁྱོད་དང་འདེམས་པའི་མཚམས་ཡོད་པ།# ཇི་འདྲ་ཞིག་ནས་ཀྱང་ cell ཇི་འདྲ་ཞིག་ནས་ཀྱང་ step ཇི་འདྲ་ཞིག་ནས་ཀྱང་ neighbour cell ཇི་འདྲ་ཞིག་ནས་ཀྱང་ step ཇི་འདྲ་ཞིག་ནས་ཀྱང་ neighbour cell ཇི་འདྲ་ཞིག་ནས་ཀྱང་ step ཇི་འདྲ་ཞིག་ནས་ཀྱང་ neighbour cell ཇི་འདྲ་ཞིག་ནས་ཀྱང་ step ཇི་འདྲ་ཞིག་ནས་ཀྱང་ neighbour cell# ཁྱོད་ཀྱིས་དྲ་ལམ་ནང་གི་ཚད་ k ཡི་ཆུང་ཤོས་ཀྱི་ལམ་འཚོལ་དགོས། ཁྱོད་ཀྱིས་འགོ་ཚུགས་ཐུབ།# ཕྱོགས་མཚུངས་ནི་ཐིག་ཁྲམ་ནང་གི་ཚགས་པར་ནང་ཐེངས་གཅིག་རང་མངོན་པར་བྱེད།# ཕྲེང་བའི་སྒོ་མིག་རེ་རེར་ཐང་ཞིག་ཡོད། [1, N * N] ནང་གི་གྲངས་ཧྲིལ་པོ་རེ་རེ# གྲལ་ཐིག་དང་ཀ་བ་ N ཡོད་པའི་དྲ་རྒྱ་ཞིག་དང་ (N >= 2) དང་གྲངས་ཆ་ k ཅན་ཞིག་ཡོད་ན།# >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
# [1, 2, 1]
# >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
# [1]
sub minPath {
    my($grid, $k) = @_;
","sub minPath {
    my ($grid, $k) = @_;
    my $n = scalar @$grid;

    # Create direction vectors for up, down, left, right moves
    my @directions = ([0, 1], [1, 0], [0, -1], [-1, 0]);

    # Priority queue to store paths using a lexicographically ordered array
    my @queue;
    for my $i (0..$n-1) {
        for my $j (0..$n-1) {
            push @queue, [[$grid->[$i][$j]], $i, $j];
        }
    }

    # Sort the initial cells based on their values to start with minimum paths
    @queue = sort { $a->[0][0] <=> $b->[0][0] } @queue;

    # Implement a breadth-first search that continues until we have a path of length k
    while (@queue) {
        my $current = shift @queue;
        my ($path, $x, $y) = @$current;

        # Return the first path of length k since paths are checked in lexicographical order
        return @$path if scalar @$path == $k;

        # Explore neighboring cells
        for my $direction (@directions) {
            my ($dx, $dy) = @$direction;
            my ($nx, ny) = ($x + $dx, $y + $dy);
            
            # Check for valid cell
            if ($nx >= 0 && $nx < $n && $ny >= 0 && $ny < $n) {
                my @new_path = (@$path, $grid->[$nx][$ny]);
                push @queue, [\@new_path, $nx, $ny];
            }
        }
        # Keep the queue ordered by lexicographical order of paths
        @queue = sort { 
            my ($a_path, $b_path) = ($a->[0], $b->[0]);
            for my $i (0..$#$a_path) {
                return $a_path->[$i] <=> $b_path->[$i] if $a_path->[$i] != $b_path->[$i];
            }
        } @queue;
    }
}

# Example usage:
#print join("", "", minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)), ""\n"";  # [1, 2, 1]
#print join("", "", minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)), ""\n"";  # [1]","use Test::Deep;


sub testhumaneval {
    my $candidate = \&minPath;
        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_130,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཐོག་མའི་ n+1 ནི་ Tribonacci sequence གྱི་གྲངས་ཀ་ཡིན།# ཁྱོད་ཀྱིས་གྲངས་ཆ་མེད་མེད་གྲངས་ཆ་ n ཞིག་ཐོབ་ཡོད་ན། ཁྱོད་ཀྱིས་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་གྲངས་ཆ་མེད་# = 2 + 3 + 3 = 8# tri(3) = tri(2) + tri(1) + tri(4) # tri ((4) = 3 # tri ((2) = 1 + (2 / 2) = 2# དཔེར་ན་: # tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) ཡིན་ན། n ནི་གྲངས་ཆ་མ་ཡིན།# tri (n) = 1 + n / 2 ཡིན་ན། n ནི་ཆ་སྙོམས་ཡིན་ན།# tri ((1) = 3 # Tribonacci sequence འདི་ཡང་བསྐྱར་དུ་བྱུང་བའི་སྒོ་ནས་གསལ་བཤད་བྱེད་པ།# ཡིན་ན་ཡང་མི་ཚོས་མི་ཤེས་པ་ནི་ཏྲི་བོན་ཅེ་ (Tribonacci) གི་རིམ་པ་ཡིན།# མི་ཚང་མས་ཕི་བོ་ན་ཅིའི་རིམ་པ་ཤེས་ཀྱི་ཡོད། ཕི་བོ་ན་ཅིའི་རིམ་པ་ནི་ ༡༩༥༠ ལོར་རིག་རྩལ་མཁས་པ་རྣམས་ཀྱིས་ཞིབ་ཏུ་ཞིབ་འཇུག་བྱས་པ་ཡིན།# >>> tri(3)
# [1, 3, 2, 8]
sub tri {
    my($n) = @_;
","sub tri {
    my ($n) = @_;
    my @sequence = (3);  # starting with tri(1) = 3

    for my $i (1 .. $n) {
        if ($i % 2 == 0) {
            push @sequence, 1 + $i / 2;
        } else {
            my $val = $sequence[$i - 1] + $sequence[$i - 2] + ($i + 1 <= $n ? (1 + ($i + 1) / 2) : 0);
            push @sequence, $val;
        }
    }

    return @sequence;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&tri;
        if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),[1, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_131,bod_Tibt,pl,"# དཔེར་ན་: # གྲངས་ཀ་ཆ་མཉམ་ཉ་ན་ 0 སླར་ལོག་བྱེད།# འབྲས་བུ་འདི་ནི་ཨང་གྲངས་ཧྲིལ་པོ་ n ཞིག་ཡོད་ན། ཨང་གྲངས་ཉེར་མཁོ་ཅན་གྱི་འབྲས་བུ་ཕྱིར་སློག་བྱ་དགོས།# >>> digits(1)
# 1
# >>> digits(4)
# 0
# >>> digits(235)
# 15
sub digits {
    my($n) = @_;
","my @digits = split //, $n;
    my $product = 1;
    my $has_odd = 0;

    foreach my $digit (@digits) {
        if ($digit % 2 != 0) {
            $product *= $digit;
            $has_odd = 1;
        }
    }

    return $has_odd ? $product : 0;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&digits;
        if(eq_deeply($candidate->(5),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(54),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(120),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5014),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(98765),315)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5576543),2625)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2468),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_132,bod_Tibt,pl,"# ཤུལ་རིམ་གྱི་ནང་ལ་ཉུང་ཤོས་དྲ་མིག་གཅིག་རང་སྦྲེལ་ཡོད།# ལས་འགན་འདི་ནི་ 1 སླར་ལོག་བྱེད་དགོས་པ་གལ་ཏེ་དེ་ནང་ brackets ཀྱི་རིམ་པ་ངེས་ཅན་ཞིག་ཡོད་ན་མ་གཏོགས་གཞན་མེད།# ཤོག་གྲངས་ནང་ཡོད་པའི་ཟུར་ཟུར་གྱི་སྒམ་པང་གཅིག་པུ་ཡོད་པའི་ནང་འཇུག་གི་རིམ་པ་ལེན་པའི་ལས་འགན་ཞིག་བཟོ།# >>> is_nested(""[[]]"")
# 1
# >>> is_nested(""[]]]]]]][[[[[]"")
# """"
# >>> is_nested(""[][]"")
# """"
# >>> is_nested(""[]"")
# """"
# >>> is_nested(""[[][]]"")
# 1
# >>> is_nested(""[[]][["")
# 1
sub is_nested {
    my($string) = @_;
","sub is_nested {
    my ($string) = @_;
    my @stack;

    for my $char (split //, $string) {
        if ($char eq '[') {
            push @stack, $char;
        } elsif ($char eq ']') {
            if (@stack && $stack[-1] eq '[') {
                pop @stack;
                return 1 if @stack; # Check for nesting
            } else {
                return """"; # Unbalanced brackets
            }
        }
    }

    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_nested;
        if(eq_deeply($candidate->(""[[]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]]]]]][[[[[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[][]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[[[]]]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]]]]]]]]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[][][[]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[]][[""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[][]]""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""[[[[[[[[""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""]]]]]]]]""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_133,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཐིག་ཁྲམ་ནང་གི་ཆ་ཤས་རེ་རེར་ཐོག་མར་སྟེང་གི་ int ((Ceiling) སྟེང་གི་མཐའ་འཁོར་དུ་འཁོར་དགོས།# ཁྱོད་ཀྱིས་གྲངས་ཐང་གི་ཆ་སྙོམས་ལ་སླར་ལོག་བྱ་དགོས་ # ཁྱོད་ཚོར་གྲངས་ཀྱི་རིམ་པ་ཐོབ་ཡོད།# >>> lst([1.0, 2.0, 3.0])
# 14
# >>> lst([1.0, 4.0, 9.0])
# 98
# >>> lst([1.0, 3.0, 5.0, 7.0])
# 84
# >>> lst([1.4, 4.2, 0.0])
# 29
# >>> lst([-2.4, 1.0, 1.0])
# 6
sub sum_squares {
    my($lst) = @_;
","sub sum_squares {
    my($lst) = @_;
    my $sum = 0;
    foreach my $num (@$lst) {
        my $ceil_num = int($num) + ($num > int($num) ? 1 : 0);
        $sum += $ceil_num ** 2;
    }
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_squares;
        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_134,bod_Tibt,pl,"# དཔེ་གཟིགས།# Note: ""word"" ནི་ཡིག་འབྲུ་ཁག་གི་སྡེ་ཚན་ཞིག་ཡིན་ཏེ། དེའི་བར་ལ་སྟོང་པ་གཉིས་ཡོད།# མཆན་འགྲེལ་གཞན་ན་ "" ' ཟེར་བ་ལྟ་བུ།# string གྱི་ཡིག་འབྲུ་འདི་ alphabetical character ཡིན་པ་ལས་ མིན་པ་མཚོན་ཐུབ།# མཐའ་མའི་ཡིག་འབྲུ་འདི་ལ་ 1 སླར་ལོག་བྱེད་རྒྱུའི་ལས་འགན་ཞིག་བཟོ།# >>> check_if_last_char_is_a_letter(""apple pie"")
# """"
# >>> check_if_last_char_is_a_letter(""apple pi e"")
# 1
# >>> check_if_last_char_is_a_letter(""apple pi e "")
# """"
# >>> check_if_last_char_is_a_letter("""")
# """"
sub check_if_last_char_is_a_letter {
    my($txt) = @_;
","sub check_if_last_char_is_a_letter {
    my ($txt) = @_;
    $txt =~ s/\s+$//; # Trim trailing spaces
    return '' if $txt eq ''; 

    if ($txt =~ /([^a-zA-Z])([a-zA-Z])$/ && $1 eq ' ') {
        return 1;
    }
    
    return '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&check_if_last_char_is_a_letter;
        if(eq_deeply($candidate->(""apple""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pi e""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""A""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Pumpkin pie ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Pumpkin pie 1""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""eeeee e ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pie""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""apple pi e ""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_135,bod_Tibt,pl,"# དཔེ་གཟིགས།# འདྲ་མཚུངས་ཀྱི་ཚད་གཞི་# དེ་འདྲ་བའི་ཆ་ཤས་མེད་ན་ return - 1 སླར་ལོག་བྱེད། གྲལ་ཐིག་ནང་ ཡོད་པ་མི་འདུག# ཇི་འདྲ་ཞིག་ཡིན་རུང་དེ་སྔོན་གྱི་ཆ་ཤས་དང་འདྲན་པ་ཡང་ན་དེ་ལས་ཆེ་བ་མིན། གལ་ཏེ་# ཚད་གཞི་ ཆེ་ཆུང་གི་ཚད་གཞི་སླར་ལོག་བྱ་བའི་ལས་འགན་ཞིག་བཟོ་དགོས།# >>> can_arrange([1, 2, 4, 3, 5])
# 3
# >>> can_arrange([1, 2, 3])
# -1
sub can_arrange {
    my($arr) = @_;
","sub can_arrange {
    my ($arr) = @_;
    for my $i (1 .. $#$arr) {
        if ($arr->[$i] < $arr->[$i - 1]) {
            return $i;
        }
    }
    return -1;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&can_arrange;
        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 4, 5]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_136,bod_Tibt,pl,"# དཔེ་གཟིགས།# གལ་ཏེ་ནང་དོན་ནང་ཁ་བ་ཡང་ན་ཁ་བ་ཡོད་མེད་ན་ undef སྦེ་ཕྱིར་ལོག་བྱེད།# སྐར་ཁུང་ནང་ཡོད་ཆ་ཆ་ཚང་མ་ཨང་གྲངས་ཀྱི་གྲངས་སུ་བཀོད་ཡོད།# ཆུང་ཤོས་ནི་ b ཡིན་# 'a' ནི་ ཟེར་བའི་གནས་དེར་ array (a, b) སླར་ལོག་བྱེད་ function ཞིག་བཟོས་དགོས།# >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])
# [undef, 1]
# >>> largest_smallest_integers([])
# [undef, undef]
# >>> largest_smallest_integers([0])
# [undef, undef]
sub largest_smallest_integers {
    my($lst) = @_;
","sub largest_smallest_integers {
    my ($lst) = @_;
    my ($largest_neg, $smallest_pos);

    foreach my $num (@$lst) {
        if ($num < 0) {
            $largest_neg = $num if !defined($largest_neg) || $num > $largest_neg;
        } elsif ($num > 0) {
            $smallest_pos = $num if !defined($smallest_pos) || $num < $smallest_pos;
        }
    }
    
    return ($largest_neg, $smallest_pos);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&largest_smallest_integers;
        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[undef, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0]),[undef, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_137,bod_Tibt,pl,"# ཟུར་ཐོ་: གྲངས་ཆ་དངོས་ཡོད་ཅིག་ནི་ཐིག་ཡིག་ལྟར་མཚོན་ན། འཁྱགས་རིལ་གྱི་རྟགས་ནི་ . ཡང་ན་ , # ཚད་ལྡན་འདྲ་མཉམ་ཡིན་ན་ undef སླར་ལོག་བྱེད།# ཚད་ལྡན་གྲངས་སུ་འགྱུར་བའི་གྲངས་ཚད་ཆེན་པོའ ་ི ཚད་ལྡན་གྲངས་ཚད་ཀྱི་གྲངས་ཚད་སླར་ལོག་བྱེད།# འདྲ་བཤུས་གྲངས་ཐང་དང་ float ཡང་ན་ string ཟེར་བ་སོགས་ལེན་པའི་ལས་འགན་ཞིག་བཟོས་པ།# >>> compare_one(1, 2.5)
# 2.5
# >>> compare_one(1, ""2,3"")
# ""2,3""
# >>> compare_one(""5,1"", ""6"")
# ""6""
# >>> compare_one(""1"", 1)
# undef
sub compare_one {
    my($a, $b) = @_;
","sub compare_one {
    my ($a, $b) = @_;

    # Convert potential string numbers with ',' into float representation
    $a =~ s/,/./g if $a =~ /,/;
    $b =~ s/,/./g if $b =~ /,/;

    # Auto-detect type by checking if string has non-numeric parts
    my $a_is_num = $a =~ /^\d+(\.\d+)?$/;
    my $b_is_num = $b =~ /^\d+(\.\d+)?$/;

    if ($a_is_num && $b_is_num) {
        # Compare as numbers
        if ($a < $b) {
            return $b;
        } elsif ($a > $b) {
            return $a;
        } else {
            return undef;
        }
    } else {
        # Compare as strings
        if ($a lt $b) {
            return $b;
        } elsif ($a gt $b) {
            return $a;
        } else {
            return undef;
        }
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&compare_one;
        if(eq_deeply($candidate->(1, 2),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2.5),2.5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 3),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 6),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, ""2,3""),""2,3"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5,1"", ""6""),""6"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", ""2""),""2"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1"", 1),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_138,bod_Tibt,pl,"# དཔེ་གཟིགས།# གྲངས་ n འདི་གྲངས་ཆ་རྐྱང་ 4 གི་རྩིས་གཞི་ལྟར་བྲིས་ཐུབ་མིན་ལ་དཔྱད་པ།# >>> is_equal_to_sum_even(4)
# """"
# >>> is_equal_to_sum_even(6)
# """"
# >>> is_equal_to_sum_even(8)
# 1
sub is_equal_to_sum_even {
    my($n) = @_;
","sub is_equal_to_sum_even {
    my($n) = @_;

    # A number can be expressed as the sum of four positive even numbers
    # if and only if it is greater than or equal to 8 and is even
    if ($n >= 8 && $n % 2 == 0) {
        return 1;
    } else {
        return """";
    }
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&is_equal_to_sum_even;
        if(eq_deeply($candidate->(4),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(11),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(12),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(13),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(16),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_139,bod_Tibt,pl,"# དཔེར་ན་: # དེར་ n > 0 # brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! # བརཱ་ཛིལ་གྱི་གནས་ལུགས་ནི་གཤམ་གསལ་ལྟར་ངེས་གཏན་བྱས་ཡོད།# >>> special_factorial(4)
# 288
# The function will receive an integer as input and should return the special
# factorial of this integer.
sub special_factorial {
    my($n) = @_;
","sub special_factorial {
    my($n) = @_;
    my $result = 1;
    
    for my $i (1 .. $n) {
        $result *= factorial($i);
    }
    
    return $result;
}

sub factorial {
    my($num) = @_;
    my $fact = 1;

    for my $i (1 .. $num) {
        $fact *= $i;
    }

    return $fact;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&special_factorial;
        if(eq_deeply($candidate->(4),288)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5),34560)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7),125411328000)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_140,bod_Tibt,pl,"# དེ་ནས་རིམ་བཞིན་གྱི་བར་སྟོང་རྣམས་ -   ཀྱིས་བརྗེ་བ།# གལ་ཏེ་ string ནང་ space གཉིས་ལས་མང་བ་ཡོད་ན།# ཚིག་ཡིག་ཡིག་སྣོད་ཅིག་ཡོད་ན་ ནང་གི་བར་སྟོང་ཆ་ཚང་མ་འོག་ཡིག་དང་ཚབ་བཙུགས་དགོས།# >>> fix_spaces("" Example"")
# ""Example""
# >>> fix_spaces("" Example 1"")
# ""Example_1""
# >>> fix_spaces("" Example 2"")
# ""_Example_2""
# >>> fix_spaces("" Example 3"")
# ""_Example-3""
sub fix_spaces {
    my($text) = @_;
","sub fix_spaces {
    my($text) = @_;
    $text =~ s/ {3,}/-/g;   # Replace 3 or more spaces with a hyphen
    $text =~ s/ /_/g;       # Replace remaining spaces with underscores
    return $text;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&fix_spaces;
        if(eq_deeply($candidate->(""Example""),""Example"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mudasir Hanif ""),""Mudasir_Hanif_"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Yellow Yellow  Dirty  Fellow""),""Yellow_Yellow__Dirty__Fellow"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Exa   mple""),""Exa-mple"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""   Exa 1 2 2 mple""),""-Exa_1_2_2_mple"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_141,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཕྲེང་བ་རྗེས་ཀྱི་ཡིག་འབྲུ་ནི་གཤམ་གསལ་གྱི་གཅིག་རེད། ['txt', 'exe', 'dll']# ཤོག་གྲངས་ལ་དབྱིན་ཡིག་གི་ཡི་གེ་ (a-z, A-z) ཟེར་བ་ཡོད།# - ཕྲེང་བ་སྔོན་གྱི་ནང་དོན་ནི་སྟོང་པ་མི་དགོས། ཕྲེང་བ་དེའི་ནང་ཡི་གེ་    ནས་འགོ་འཛུགས་དགོས།# - ཡིག་སྣོད་མིང་གི་ནང་དོན་གཅིག་རང་ཡོད།# - ཡིག་སྣོད་མིང་དུ་ཨང་གྲངས་ ༣ ལས་ལྷག་མི་ཆོག (༠-༩)# ཚང་ཡོད་ན།# གལ་ཏེ་གཤམ་གསལ་གནས་སྟངས་ཚང་མ་ཡོད་ན་ཡིག་སྣོད་མིང་དེ་བདེན་པ་ཡིན་པར་བརྩི་དགོས།# གལ་ཏེ་ཡིག་སྣོད་མིང་གི་མིང་དེ་བདེན་པ་ཡིན་ན་ ""Yes"" དེ་ཡིན་ན་ ""No"" དེ་ཡིན་ན་ ""No"" ཟེར་བ་ཕྱིར་ལོག་བྱེད།# ཡིག་སྣོད་མིང་རྟགས་ཀྱི་ཐིག་ཡིག་ལེན་ནས་སླར་ལོག་བྱ་བའི་ལས་འགན་ཞིག་བཟོ།# >>> file_name_check(""example.txt"")
# ""Yes""
# >>> file_name_check(""1example.dll"")
# ""No""
sub file_name_check {
    my($file_name) = @_;
","sub file_name_check {
    my($file_name) = @_;
    
    # Check if there's exactly one dot and split the string
    my @parts = split(/\./, $file_name);
    return 'No' unless scalar(@parts) == 2;

    # Extract the name and the extension
    my ($name, $extension) = @parts;

    # Check if the extension is valid
    return 'No' unless $extension =~ /^(txt|exe|dll)$/;

    # Check if the name starts with a letter
    return 'No' unless $name =~ /^[a-zA-Z]/;

    # Check the number of digits in the name
    my $digit_count = () = $name =~ /[0-9]/g;
    return 'No' if $digit_count > 3;

    # If all conditions are met, return 'Yes'
    return 'Yes';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&file_name_check;
        if(eq_deeply($candidate->(""example.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1example.dll""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""s1sdf3.asd""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""K.dll""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""MY16FILE3.exe""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""His12FILE94.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_Y.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""?aREYA.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""/this_is_valid.dll""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.wow""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_valid.txtexe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#this2_i4s_5valid.ten""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""@this1_is6_valid.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""this_is_12valid.6exe4.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""all.exe.txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I563_No.exe""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Is3youfault.txt""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""no_one#knows.dll""),""Yes"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1I563_Yes3.exe""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""I563_Yes3.txtt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""final..txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""final132""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_f4indsartal132.""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->("".txt""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""s.""),""No"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_142,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཚད་གཞི་ནི་ 3 དང་ 4 གི་ལྡབ་གྲངས་མིན་པའི་ཨང་གྲངས་ཀྱི་ནང་ཐིག་བསྒྱུར་དགོས། དེ་ནས་ལས་འགན་གྱིས་ཨང་གྲངས་ཚང་མའི་བསྡོམས་གྲངས་ཕྱིར་ལོག་བྱེད་དགོས།# གྲངས་འབོར་ནི་ 3 ཀྱི་ལྡབ་གྲངས་ཡིན་པ་དང་དེའི་གཞི་གྲངས་ནི་ 4 ཀྱི་ལྡབ་གྲངས་ཡིན་ན་ ཧྲིལ་གྲངས་ཀྱི་གྲངས་འབོར་ནི་ 3 གྱི་ལྡབ་གྲངས་ཡིན་ན་ ཇི་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་ཡིན་# ལས་འགན་འདི་ནི་ཨང་གྲངས་ཧྲིལ་པོ་གྲངས་ལྡན་གྱི་རིམ་པ་ཞིག་ལེན་ངེས་ཡིན། གྲལ་ཐིག་ནང་གི་ནང་འཇུག་ཆ་མཉམ་གྱི་ཆེད་དུ་ལས་འགན་འདི་ནི་ཨང་གྲངས་ཧྲིལ་པོ་ནང་འཇུག་གི་རིམ་པ་གཉིས་སུ་རྩིས་དགོས་ན་དེའི་གཞི་གྲངས་ནི་ a ཡིན།# "" # >>> lst
# [1, 2, 3]
# >>> lst
# []
# >>> lst
# [-1, -5, 2, -1, -5]
sub sum_squares {
    my($lst) = @_;
","sub sum_squares {
    my ($lst) = @_;
    my $sum = 0;

    for my $i (0 .. @$lst - 1) {
        if ($i % 3 == 0) {
            $sum += $lst->[$i] ** 2;
        } elsif ($i % 4 == 0) {
            $sum += $lst->[$i] ** 3;
        } else {
            $sum += $lst->[$i];
        }
    }

    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sum_squares;
        if(eq_deeply($candidate->([1, 2, 3]),6)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 4, 9]),14)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_143,bod_Tibt,pl,"# དཔེ་གཞི་དང་པོ།# ཚིག་རིམ་གསར་པའི་ནང་ ཚིག་རིམ་སྔོན་མའི་ནང་ཡོད་པ་ལྟར་བྱ་དགོས།# དེའི་རིང་ཚད་ནི་སྔོན་གྲངས་ཡིན།# ཟེར་བའི་ཚིག་ཡིག་ཐོག་མ་དེ་ཡོད་པའི་ string སླར་ལོག་བྱ་དགོས།# ཚིག་ཡིག་དེའི་ནང་ཡིག་འབྲུ་འགའ་ཤས་ཡོད་པའི་ནང་བར་སྟོང་བཞག་ཡོད་ན།# ཇི་འདྲ་ཞིག་ཡིན་རུང་།# >>> words_in_sentence(""This is a test"")
# ""is""
# Example 2:
# >>> words_in_sentence(""lets go for swimming"")
# ""go for""
# Constraints:
# * 1 <= len(sentence) <= 100
# * sentence contains only letters
sub words_in_sentence {
    my($sentence) = @_;
","sub words_in_sentence {
    my($sentence) = @_;
    
    # Function to check if a number is prime
    sub is_prime {
        my $num = shift;
        return 0 if $num < 2;
        for (my $i = 2; $i * $i <= $num; ++$i) {
            return 0 if $num % $i == 0;
        }
        return 1;
    }
    
    my @words = split(' ', $sentence);
    my @prime_length_words;
    
    foreach my $word (@words) {
        my $length = length($word);
        if (is_prime($length)) {
            push(@prime_length_words, $word);
        }
    }
    
    return join(' ', @prime_length_words);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&words_in_sentence;
        if(eq_deeply($candidate->(""This is a test""),""is"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""lets go for swimming""),""go for"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""there is no place available here""),""there is no place"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Hi I am Hussein""),""Hi am Hussein"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""go for it""),""go for it"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""here""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""here is""),""is"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_144,bod_Tibt,pl,"# ཁྱོད་ཀྱིས་ x དང་ n ནི་ཆ་ཤས་ངེས་ཅན་ཡིན་པར་ངེས་ཤིང་། གྲངས་སུ་ 0 མེད་པར་ངེས་པ་ཡོད།# གྲངས་དང་གྲངས་འཛིན་གཉིས་ཆ་རང་ནི་ཧྲིལ་པོ་རྩིས་ལྡན་ཡིན།# x དང་ n གཉིས་ནི་ཕྲེང་བའི་རྩིས་རྟགས་ཡིན་ཏེ། འདྲ་བཤུས་འདི་འདྲ་ཡིན་ཏེ།# x*n གྲངས་ཀ་ཧྲིལ་པོ་ཡིན་པའི་ཚེ། ལས་འགན་ 1 སླར་ལོག་བྱེད།# ཁྱོད་ཀྱི་ལས་འགན་ནི་ function ཞིག་ལག་ལེན་དུ་འཇུག་ནས་ཚིག་བརྗོད་པ་དལ་བུར་བཟོ་བ།# >>> simplify(""1/5"", ""5/1"")
# 1
# >>> simplify(""1/6"", ""2/1"")
# """"
# >>> simplify(""7/10"", ""10/2"")
# """"
sub simplify {
    my($x, $n) = @_;
","sub simplify {
    my ($x, $n) = @_;
    
    # Parse the fractions
    my ($x_num, $x_den) = split('/', $x);
    my ($n_num, $n_den) = split('/', $n);
    
    # Cross-multiply to find the product of the fractions
    # x * n = (x_num * n_num) / (x_den * n_den)
    my $prod_num = $x_num * $n_num;
    my $prod_den = $x_den * $n_den;
    
    # Check if the product is a whole number
    return ($prod_num % $prod_den == 0) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&simplify;
        if(eq_deeply($candidate->(""1/5"", ""5/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/6"", ""2/1""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5/1"", ""3/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""7/10"", ""10/2""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/10"", ""50/10""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""7/2"", ""4/2""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""11/6"", ""6/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/3"", ""5/2""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""5/2"", ""3/5""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/4"", ""8/4""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""2/4"", ""4/2""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/5"", ""5/1""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1/5"", ""1/5""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_145,bod_Tibt,pl,"# དཔེར་ན་: # ཚོས་གཞི་ཐོག་གི་ནང་ཐིག་གཞི་བཟུང་ནས་རིམ་སྒྲིག་བྱེད་པ།# དྲན་གསོ། གལ་ཏེ་ནང་དོན་ཁ་ཤས་ཀྱི་ཨང་གྲངས་བསྡོམས་འདྲ་མཚུངས་ཡོད་ན།# ཤོག་གྲངས་ཀྱི་གོ་རིམ་ལྟར་ཡར་འཕར་གྱི་གོ་རིམ་ལྟར་ཡིན།# འབྲས་བུ་གྲངས་ཚང་གི་རིམ་པ་སྒྲིག་པའི་ལས་འགན་ཞིག་བྲིས་ཤིག# >>> order_by_points([1, 11, -1, -11, -12])
# [-1, -11, 1, -12, 11]
# >>> order_by_points([])
# []
sub order_by_points {
    my($nums) = @_;
","sub order_by_points {
    my ($nums) = @_;
    
    # Function to calculate the sum of the digits of a number
    sub digit_sum {
        my $num = shift;
        my $sum = 0;
        $sum += $_ for split //, abs($num);
        return $sum;
    }

    # Sort the array first by sum of digits, then by index for ties
    my @sorted = sort {
        digit_sum($a) <=> digit_sum($b) ||
        $a <=> $b
    } @$nums;

    return \@sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&order_by_points;
        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_146,bod_Tibt,pl,"# དཔེར་ན་: # གྲངས་ཀྱི་ཨང་གྲངས་དང་པོ་དང་མཐའ་མ་ནི་རྣམ་གྲངས་ཡིན། (1, 3, 5, 7, 9)# ཨང་གྲངས་དེ་ 10 ལས་མང་བ་ཡིན་པའི་ཨང་གྲངས་དང་གཉིས་ཀ་ཡིན།# གྲངས་རིམ་ཅིག་ནང་འཇུག་དང་ཕྱིར་ལོག་བྱེད་ function ཞིག་འབྲི་དགོས།# >>> specialFilter([15, -73, 14, -15])
# 1
# >>> specialFilter([33, -2, -3, 45, 21, 109])
# 2
sub specialFilter {
    my($nums) = @_;
","sub specialFilter {
    my($nums) = @_;
    my $count = 0;
    foreach my $num (@$nums) {
        if ($num > 10) {
            my $str_num = abs($num) . """";
            my $first_digit = substr($str_num, 0, 1);
            my $last_digit = substr($str_num, -1, 1);
            if ($first_digit % 2 != 0 && $last_digit % 2 != 0) {
                $count++;
            }
        }
    }
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&specialFilter;
        if(eq_deeply($candidate->([5, -2, 1, -5]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([15, -73, 14, -15]),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_147,bod_Tibt,pl,"# དཔེ་མཚོན།:# a[i] + a[j] + a[k] ནི་ 3 ཀྱི་ལྡབ་བའང་ཡིན།# ཕྱིར་ལོག་བྱེད་གྲངས་ནི་ a གི་ triples (a[i], a[j], a[k]) གྱི་གྲངས་ཡིན། དེར་ i < j < k, # i (1 ≤ i ≤ n) རེ་རེ་ལ་ a[i] = i * i - i + 1 གྱི་ཐང་ཡིན།# ཁྱོད་ཀྱིས་གྲངས་ཆ་ཚིམས་ n ཞིག་ཐོབ་ཡོད། ཁྱོད་ཀྱིས་གྲངས་ཆ་ཚིམས་ a ཡི་རིམ་པ་ n ཞིག་བཟོ་བཞིན་ཡོད།# >>> get_max_triples(5)
# 1
# Explanation: 
# a = [1, 3, 7, 13, 21]
# The only valid triple is (1, 7, 13).
sub get_max_triples {
    my($n) = @_;
","sub get_max_triples {
    my($n) = @_;
    my @a;
    
    # Generate the array a
    for my $i (1..$n) {
        $a[$i - 1] = $i * $i - $i + 1;
    }
    
    my $count = 0;
    
    # Check all triples (a[i], a[j], a[k]) where i < j < k
    for my $i (0..$n-3) {
        for my $j ($i+1..$n-2) {
            for my $k ($j+1..$n-1) {
                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {
                    $count++;
                }
            }
        }
    }
    
    return $count;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&get_max_triples;
        if(eq_deeply($candidate->(5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6),4)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10),36)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(100),53361)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_148,bod_Tibt,pl,"# དཔེ་གཟིགས།# སྐར་མ་མིང་ནི་དྲང་པོ་མིན་འདུག# ལས་འགན་འདི་ plan1 ཡང་ན་ plan2 ཡིན་ན་སྟོང་པའི་གཞི་རིམ་ཕྱིར་ལོག་བྱེད་དགོས།# ཉི་མའི་ཉེ་འགྲམ་ལ།# སྐར་ཆེན་1དང་སྐར་ཆེན་2ཀྱི་འཁོར་ལམ་བར་གྱི་ས་ཁུལ།# ལས་འགན་འདི་གིས་ སྐར་མ་ ཚང་མ་ཡོད་པའི་སྐར་མ་གཞི་རིམ་སླར་ལོག་བྱ་དགོས།# སྐར་མ་གཉིས་ཀྱི་མིང་ planet1 དང་ planet2 ཟེར་བའི་ཐིག་ཡིག་ནང་བཀོད་དགོས།# ཨུ་རུ་ནུ། ནེ་པྲུན་བཅས་ཡིན།# མུ་རུའི་སྟེང་གི་ས་བོན་ནི་ཝེ་ནེར་ཡིན། དེའི་རྗེས་ལ་འཛམ་གླིང་དང་། མཱར་སི་དང་། མུ་པི་ཊར་དང་། སཱ་ཏུར་ནེ།# ཉི་མའི་ལམ་ལུགས་ནང་སྐར་ཆེན་བརྒྱད་ཡོད་ཅིང་། ཉི་མའི་ཉེ་འགྲམ་ཆགས་པའི་སྐར་ཆེན་ཡིན།# >>> bf(""Jupiter"", ""Neptune"")
# [""Saturn"", ""Uranus""]
# >>> bf(""Earth"", ""Mercury"")
# ""Venus""
# >>> bf(""Mercury"", ""Uranus"")
# [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
sub bf {
    my($planet1, $planet2) = @_;
","sub bf {
    my ($planet1, $planet2) = @_;
    my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');

    my %planet_indices = map { $planets[$_] => $_ } (0..$#planets);

    return [] unless exists $planet_indices{$planet1} && exists $planet_indices{$planet2};

    my ($start, $end) = ($planet_indices{$planet1}, $planet_indices{$planet2});

    ($start, $end) = ($end, $start) if $start > $end;

    return [@planets[$start+1 .. $end-1]];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&bf;
        if(eq_deeply($candidate->(""Jupiter"", ""Neptune""),[""Saturn"", ""Uranus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Earth"", ""Mercury""),[""Venus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mercury"", ""Uranus""),[""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Neptune"", ""Venus""),[""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Earth"", ""Earth""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Mars"", ""Earth""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Jupiter"", ""Makemake""),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_149,bod_Tibt,pl,"# དཔེར་ན་: # ཁྱོད་ཀྱིས་ཚིག་ཐམས་ཅད་རིང་ཚད་གཅིག་མཚུངས་ཡིན་པར་བསམ་ཐུབ།# ལས་འགན་འདི་ནི་རིམ་བཞིན་རིམ་བཞིན་གྱི་ string ཀྱི་རིམ་པ་ཕྱིར་ལོག་བྱེད་དགོས།# ཚིག་གཉིས་རིང་ཚད་གཅིག་མཚུངས་ཡོད་ན་ array འདི་ alphabetically ནང་རིམ་སྒྲིག་དགོས།# ཚད་གཞི་དེ་ནས་རིམ་སྒྲིག་བྱས་པའི་གཞི་རིམ་སླར་ལོག་བྱ་དགོས།# ཚིག་རེ་རེ་བཞིན་གྱི་རིང་ཚད་དང་བསྟུན་པའི་རིམ་པ་ཡར་འཕོ་དགོས་ཏེ།# འདྲ་པར་གཉིས་པ་ཡང་ཡོད་སྲིད་ཀྱི་རེད།# ཨང་གྲངས་ཀྱི་རིམ་པ་གཏན་ནས་མ་ཡིན།# འབྲས་བུ་དེ་རིམ་བཞིན་ཕྱིར་ལོག་བྱ་བ།# ཚད་མ་རྣམ་གྲངས་ཡོད་པའི་ string རྣམས་འདེམས་ནས་སེལ་བ།# ཚད་གཞི་ལྟར་ string གི་རིམ་པ་ངོས་ལེན་བྱེད་པའི་ function ཞིག་འབྲི་དགོས།# >>> list_sort([""aa"", ""a"", ""aaa""])
# [""aa""]
# >>> list_sort([""ab"", ""a"", ""aaa"", ""cd""])
# [""ab"", ""cd""]
sub sorted_list_sum {
    my($lst) = @_;
","sub list_sort {
    my ($lst) = @_;

    # Filter out strings with odd length
    my @filtered = grep { length($_) % 2 == 0 } @$lst;

    # Sort strings first by length, then alphabetically
    my @sorted = sort { length($a) <=> length($b) || $a cmp $b } @filtered;

    return \@sorted;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&sorted_list_sum;
        if(eq_deeply($candidate->([""aa"", ""a"", ""aaa""]),[""aa""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""school"", ""AI"", ""asdf"", ""b""]),[""AI"", ""asdf"", ""school""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""d"", ""b"", ""c"", ""a""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""d"", ""dcba"", ""abcd"", ""a""]),[""abcd"", ""dcba""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""AI"", ""ai"", ""au""]),[""AI"", ""ai"", ""au""])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]),[])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""aaaa"", ""bbbb"", ""dd"", ""cc""]),[""cc"", ""dd"", ""aaaa"", ""bbbb""])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_150,bod_Tibt,pl,"# དཔེ་གཟིགས།# གྲངས་ཚིག དང་ y གི་ཐང་ལོག་འཇུག་དགོས།# གལ་ཏེ་ n ནི་ ཡིན་ན་ x གི་ཐང་ཕྱིར་ལོག་བྱ་རྒྱུའི་ལས་རིམ་དྭངས་མ་ཞིག་ཡིན།# >>> x_or_y(7, 34, 12)
# 34
# >>> x_or_y(15, 8, 5)
# 5
sub x_or_y {
    my($n, $x, $y) = @_;
","sub is_prime {
    my $num = shift;
    return 0 if $num < 2;
    for (my $i = 2; $i * $i <= $num; $i++) {
        return 0 if $num % $i == 0;
    }
    return 1;
}

sub x_or_y {
    my ($n, $x, $y) = @_;
    return is_prime($n) ? $x : $y;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&x_or_y;
        if(eq_deeply($candidate->(7, 34, 12),34)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15, 8, 5),5)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3, 33, 5212),33)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1259, 3, 52),3)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7919, -1, 12),-1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3609, 1245, 583),583)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(91, 56, 129),129)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(6, 34, 1234),1234)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 0),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 0),2)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_151,bod_Tibt,pl,"# ཚད་ལྡན་གྲངས་མེད་དང་གྲངས་ཆ་མེད་ལ་སྣང་མེད་བྱེད་ཅིག# གྲངས་ཀྱི་རིམ་པ་ཐོབ་ནས་གྲངས་ཀྱི་གྲུ་བཞི་གི་བསྡོམས་གྲངས་ཕྱིར་ལོག་བྱེད་པ།# >>> double_the_difference([1, 3, 2, 0])
# 10
# >>> double_the_difference([-1, -2, 0])
# 0
# >>> double_the_difference([9, -2])
# 81
# >>> double_the_difference([0])
# 0
# If the input array is empty, return 0.
sub double_the_difference {
    my($lst) = @_;
","sub double_the_difference {
    my ($lst) = @_;
    my $sum = 0;

    foreach my $num (@$lst) {
        if ($num =~ /^\d+$/ && $num % 2 != 0) {
            $sum += $num ** 2;
        }
    }
    
    return $sum;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&double_the_difference;
        if(eq_deeply($candidate->([]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([5.0, 4.0]),25)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_152,bod_Tibt,pl,"# དཔེ་ཆ། # ཚད་ནི་ 0 ཡིན་པ་དང་། གལ་ཏེ་དེ་ 0 ཡིན་ན་ཚད་ནི་དཔེར་བརྗོད་དང་ཐིག་ཁྲམ་གཉིས་ཀྱི་བར་གྱི་ཁྱད་པར་གཏན་ནས་ཡིན།# ཚད་མཚུངས་པའི་གྲངས་ཐང་ཕྱིར་ལོག་བྱེད། ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཙམ་ཡོད་ན་ཚོད་དཔག་གང་ཡོད་ན་ཚོད་དཔག་གང་ཡོད་ན་ཚོད་དཔག་གང་ཡོད་ན་ཚོད་དཔག་གང་ཡོད་ན་ཚོད་དཔག་དགོས།# ཁྱོད་ཚོར་ཚད་གཞི་དང་ཚོད་དཔག་ཚད་འདྲ་མཉམ་གྱི་ཚད་གཞི་གཉིས་ཐོབ་ཡོད། ཚད་གཞི་རེ་རེར་ཆ་མཐུན་གྱི་ཚད་གཞི་ཡོད།# ཁྱོད་ཀྱི་ལས་འགན་ནི་མི་ཞིག་གིས་འགྲན་བསྡུར་གྱི་གྲུབ་འབྲས་དེ་བདེན་པར་ཚོད་ལྟ་བྱས་ཡོད་མེད་ལ་བརྟག་དཔྱད་བྱེད་རྒྱུ་དེ་ཡིན།# འདྲ་བཤུས་དང་བསྡུར་བྱེད་འོས་པ་ཞིག་རེད།# བྱུང་རིམ་དེ་མཇུག་ཏུ་ཤེས་རྟོགས་བྱུང་ཡོད། དེ་དུས་ཁྱེད་རང་ཚོར་བའི་ཚོར་སྣང་དང་བསམ་བློ་རྣམས་# ཚང་མས་དུས་ཡུན་རིང་པོར་སྒུག་པའི་རྐྱེན་གྱི་ཚོར་བ་དེ་དྲན་གྱི་རེད།# >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
# [0, 0, 0, 0, 3, 3]
# >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
# [4, 4, 1, 0, 0, 6]
sub compare {
    my($game, $guess) = @_;
","sub compare {
    my($game, $guess) = @_;
    my @result;
    
    for my $i (0..$#$game) {
        my $difference = abs($game->[$i] - $guess->[$i]);
        push @result, $difference;
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&compare;
        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_153,bod_Tibt,pl,"# དཔེ་ཆ། # (དེའི་ཤུགས་ནི་ -༡) ཡིན།# return ""Slices.SErviNGSliCes"" since ""SErviNGSliCes"" is the strongest extension ཟེར་བ་འདི་ནི་ཁ་སྐོང་ཤུགས་ཆེ་ཤོས་ཡིན་པས་ཕྱིར་ལོག་བྱེད།# རྒྱས་འགྲེལ། ['SERVINGSliCes', 'Cheese', 'StuFfed'] བྱས་ན་ཁྱེད་ཀྱིས་ # དཔེར་ན་ ""Slices"" ཟེར་བའི་སློབ་ཚན་དང་ ཟེར་བའི་གཞི་རིམ་ཐོབ་ཡོད་ན།# ཚད་གཞི་ནང་ཐོག་མར་ཐོན་པ་འདེམས་དགོས།# གལ་ཏེ་ནུས་པ་གཅིག་མཚུངས་ཡོད་པའི་ extension གཉིས་སམ་དེ་ལས་མང་བ་ཡོད་ན།# format: ClassName.StrongestExtensionName.   ཚད་འཛིན་མིང་། ཚད་འཛིན་མིང་། ཚད་འཛིན་མིང་། ཚད་འཛིན་མིང་། ཚད་འཛིན་མིང་། ཚད་འཛིན་མིང་།# ཁྱོད་ཀྱིས་ཤུགས་ཆེ་ཤོས་ཀྱི་ extension འཚོལ་ནས་དེའི་ནང་ string སླར་ལོག་བྱེད་དགོས།# ཤུགས་ཚད་ནི་ CAP-SM ཀྱི་ཆ་ཤས་ཀྱིས་སྟོན་ཡོད།# ཡིག་འབྲུ་ཆུང་ཆུང་གི་མིང་དུ་ SM ཟེར་དགོས།# ཚད་འཛིན་གྱི་ནུས་པ་འདི་འདྲ་ཡིན། CAP ནི་ཡིག་འབྲུ་ཆེན་པོའི་གྲངས་ཀ་ཡིན་པར་བྱའོ།# རྒྱས་འགྲེལ། ཚད་མ་དེ་སློབ་ཚན་གྱི་ནང་འཇུག་བྱེད་ཆེད་བེད་སྤྱོད་བྱ་དགོས།# ཁྱོད་ཚོར་ class གི་མིང་ (string) དང་ extension གི་རིམ་པ་ཐོབ་ངེས་ཡིན།# >>> Strongest_Extension(""my_class"", [""AA"", ""Be"", ""CC""])
# ""my_class.AA""
sub Strongest_Extension {
    my($class_name, $extensions) = @_;
","sub Strongest_Extension {
    my ($class_name, $extensions) = @_;
    my $strongest = '';
    my $max_strength = -1e9;

    foreach my $extension (@$extensions) {
        my $cap = 0;
        my $sm = 0;

        foreach my $char (split //, $extension) {
            if ($char =~ /[A-Z]/) {
                $cap++;
            } elsif ($char =~ /[a-z]/) {
                $sm++;
            }
        }

        my $strength = $cap - $sm;
        
        if ($strength > $max_strength) {
            $max_strength = $strength;
            $strongest = $extension;
        }
    }

    return ""$class_name.$strongest"";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&Strongest_Extension;
        if(eq_deeply($candidate->(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]),""Watashi.eIGHt8OKe"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]),""Boku123.YEs.WeCaNe"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]),""__YESIMHERE.NuLl__"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]),""K.TAR"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]),""__HAHA.123"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]),""YameRore.okIWILL123"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]),""finNNalLLly.WoW"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""_"", [""Bb"", ""91245""]),""_.Bb"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""Sp"", [""671235"", ""Bb""]),""Sp.671235"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_154,bod_Tibt,pl,"# ཁྱོད་ཀྱིས་ཚིག་གཉིས་ཐོབ་ཡོད། གལ་ཏེ་ཚིག་གཉིས་པ་ཡང་ན་དེའི་འཁོར་བ་གང་ཞིག་ནི་ཚིག་དང་པོའི་ནང་གི་འོག་རིམ་ཡིན་ན་ཁྱོད་ཀྱིས་ 1 སླར་ལོག་བྱེད་དགོས་པ་ཡིན།# >>> cycpattern_check(""abcd"", ""abd"")
# """"
# >>> cycpattern_check(""hello"", ""ell"")
# 1
# >>> cycpattern_check(""whassup"", ""psus"")
# """"
# >>> cycpattern_check(""abab"", ""baa"")
# 1
# >>> cycpattern_check(""efef"", ""eeff"")
# """"
# >>> cycpattern_check(""himenss"", ""simen"")
# 1
sub cycpattern_check {
    my($a, $b) = @_;
","sub cycpattern_check {
    my($a, $b) = @_;
    my $len = length($b);

    for my $i (0 .. $len - 1) {
        my $rotation = substr($b, $i) . substr($b, 0, $i);
        return 1 if index($a, $rotation) != -1;
    }

    return """";
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&cycpattern_check;
        if(eq_deeply($candidate->(""xyzw"", ""xyw""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""yello"", ""ell""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""whattup"", ""ptut""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""efef"", ""fee""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""abab"", ""aabb""),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""winemtt"", ""tinem""),1)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_155,bod_Tibt,pl,"# དཔེ་ཆ། # ཨང་གྲངས་ཧྲིལ་པོ་ཡོད་ན། ཕྲེང་བ་དང་ཕྲེང་བ་མེད་པའི་ཨང་གྲངས་ཡོད་པའི་གྲངས་གཞི་ཅིག་ཕྱིར་སློག་བྱ་དགོས།# >>> even_odd_count(-12)
# [1, 1]
# >>> even_odd_count(123)
# [1, 2]
sub even_odd_count {
    my($num) = @_;
","my $evens = 0;
    my $odds = 0;
    $num = abs($num); # Handle negative numbers
    foreach my $digit (split //, $num) {
        if ($digit % 2 == 0) {
            $evens++;
        } else {
            $odds++;
        }
    }
    return [$evens, $odds];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&even_odd_count;
        if(eq_deeply($candidate->(7),[0, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-78),[1, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(3452),[2, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(346211),[3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-345821),[3, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-2),[1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(-45347),[2, 3])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(0),[1, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_156,bod_Tibt,pl,"# དཔེ་གཟིགས།# ཚད་འཛིན་: 1 <= num <= 1000# ཆེ་ཆུང་ཡིག་གཟུགས་ནང་ཕྱིར་ལོག་བྱེད་ཅིག# འབྲས་བུ་ལྡན་གྲངས་ཤིག་ཡོད་ན། རོམ་གྲངས་ཀྱི་འདྲ་མཚུངས་དེ་ཐིག་ཡིག་ལྟར་ལེན་དགོས།# >>> int_to_mini_roman(19)
# ""xix""
# >>> int_to_mini_roman(152)
# ""clii""
# >>> int_to_mini_roman(426)
# ""cdxxvi""
sub int_to_mini_roman {
    my($number) = @_;
","my @roman_numerals = (
        [1000, 'm'],
        [900, 'cm'],
        [500, 'd'],
        [400, 'cd'],
        [100, 'c'],
        [90, 'xc'],
        [50, 'l'],
        [40, 'xl'],
        [10, 'x'],
        [9, 'ix'],
        [5, 'v'],
        [4, 'iv'],
        [1, 'i'],
    );

    my $result = '';

    for my $pair (@roman_numerals) {
        my ($value, $roman) = @$pair;
        while ($number >= $value) {
            $result .= $roman;
            $number -= $value;
        }
    }

    return $result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&int_to_mini_roman;
        if(eq_deeply($candidate->(19),""xix"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(152),""clii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(251),""ccli"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(426),""cdxxvi"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(500),""d"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1),""i"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4),""iv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(43),""xliii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(90),""xc"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(94),""xciv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(532),""dxxxii"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(900),""cm"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(994),""cmxciv"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1000),""m"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_157,bod_Tibt,pl,"# དཔེ་ཆ། # ཚད་མ་ ༩༠ ཡོད་པ་རེད།# ཟུར་གསུམ་ཟུར་དྲང་པོ་ནི་ཟུར་གསུམ་གྱི་ཟུར་གཅིག་ཟུར་དྲང་པོ་ཡིན་པའམ། ཡང་ན་# ཕྱོགས་གཉིས་ནི་ཟུར་གསུམ་གྱི་ཟུར་དྲང་པོ་ཡིན་ན།# ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཡོད་ན། 1 སླར་ལོག་བྱེད།# >>> right_angle_triangle(3, 4, 5)
# 1
# >>> right_angle_triangle(1, 2, 3)
# """"
sub right_angle_triangle {
    my($a, $b, $c) = @_;
","sub right_angle_triangle {
    my($a, $b, $c) = @_;
    # Sort the sides to identify the potential hypotenuse
    my @sides = sort { $a <=> $b } ($a, $b, $c);
    # Check if the triangle satisfies Pythagorean theorem
    return ($sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2) ? 1 : '';
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&right_angle_triangle;
        if(eq_deeply($candidate->(3, 4, 5),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 2, 3),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 6, 8),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 2),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(7, 24, 25),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 5, 7),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(5, 12, 13),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(15, 8, 17),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(48, 55, 73),1)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 1, 1),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 2, 10),"""")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_158,bod_Tibt,pl,"# ཡིག་འབྲུ་ནང་ཚིག་མཛོད་ཀྱི་རིམ་པ་ཐོག་མར་ཐོན་པ་ཕྱིར་ལོག་བྱེད་པ།# གལ་ཏེ་ string མང་པོ་ཡོད་ན་ unique  གྱི་གྲངས་མང་ཤོས་ཡོད་ན་# གྲལ་ཐིག་ནང་ཚིག་ཚིག་མི་འདྲ་བ་ཡོད། ཚིག་ཚིག་མང་ཤོས་ཕྱིར་ལོག་བྱེད།# ཚད་གཞི་ (string) གྱི་རིམ་པ་ (array) ཞིག་ལེན་པའི་ལས་འགན་ཞིག་བྲིས་དགོས།# >>> find_max([""name"", ""of"", ""string""])
# ""string""
# >>> find_max([""name"", ""enam"", ""game""])
# ""enam""
# >>> find_max([""aaaaaaa"", ""bb"", ""cc""])
# ""aaaaaaa""
sub find_max {
    my($words) = @_;
","sub find_max {
    my ($words) = @_;
    my $max_word = '';
    my $max_unique_chars = 0;
    
    foreach my $word (@$words) {
        my %unique_chars = map { $_ => 1 } split //, $word;
        my $unique_count = keys %unique_chars;
        
        if ($unique_count > $max_unique_chars || ($unique_count == $max_unique_chars && $word lt $max_word)) {
            $max_word = $word;
            $max_unique_chars = $unique_count;
        }
    }
    
    return $max_word;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&find_max;
        if(eq_deeply($candidate->([""name"", ""of"", ""string""]),""string"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""name"", ""enam"", ""game""]),""enam"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""aaaaaaa"", ""bb"", ""cc""]),""aaaaaaa"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""abc"", ""cba""]),""abc"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""play"", ""this"", ""game"", ""of"", ""footbott""]),""footbott"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""we"", ""are"", ""gonna"", ""rock""]),""gonna"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""we"", ""are"", ""a"", ""mad"", ""nation""]),""nation"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""this"", ""is"", ""a"", ""prrk""]),""this"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""b""]),""b"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""play"", ""play"", ""play""]),""play"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_159,bod_Tibt,pl,"# དཔེ་ཆ། # གལ་ཏེ་མར་ཀེ་རོ་ཊི་ལྷག་མ་གངམ་མེད་ན། ཁྱོད་ཀྱིས་མར་ཀེ་རོ་ཊི་ལྷག་མ་ཚང་མ་ཟ་ནའང་མུ་གེས་ལུས་པར་འགྱུར།# ཟ་ཚར་རྗེས་ལྷག་པའི་ཀེ་རོ་ཊི་གྲངས་ ] # ཟ་ཚར་བའི་རྗེས་ལ་ཟ་ཚར་བའི་ཀེ་རོ་ཊི་གྲངས་ ༦༠ ཙམ་ཕྱིར་ལོག་བྱེད་ཆོག# ད་ལྟའི་ཟས་རེའི་ནང་ག་ག་མང་ཟ་དགོས་པ་རེད།# ཁྱོད་ནི་ལྟོ་བ་ཚ་བའི་བེའུ་ཞིག་རེད། ཁྱོད་ཀྱིས་ག་རེར་ག་རེར་ག་རེར་ཟ་ཚར་ཡོད།# >>> eat(5, 6, 10)
# [11, 4]
# >>> eat(4, 8, 9)
# [12, 1]
# >>> eat(1, 10, 10)
# [11, 0]
# >>> eat(2, 11, 5)
# [7, 0]
# Variables:
# @number : integer
# the number of carrots that you have eaten.
# @need : integer
# the number of carrots that you need to eat.
# @remaining : integer
# the number of remaining carrots thet exist in stock
# Constrain:
# * 0 <= number <= 1000
# * 0 <= need <= 1000
# * 0 <= remaining <= 1000
# Have fun :)
sub eat {
    my($number, $need, $remaining) = @_;
","sub eat {
    my($number, $need, $remaining) = @_;
    my $total_eaten = $number + $need;
    if ($remaining >= $need) {
        $remaining -= $need;
    } else {
        $total_eaten = $number + $remaining;
        $remaining = 0;
    }
    return [$total_eaten, $remaining];
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&eat;
        if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 8, 9),[12, 1])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(1, 10, 10),[11, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5, 7),[9, 2])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(4, 5, 1),[5, 0])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_160,bod_Tibt,pl,"# འབྲེལ་མཐུད་རིམ་པ་ཞིག་ལ་ཉུང་མཐར་འབྲེལ་མཐུད་རིམ་པ་གཅིག་དང་འབྲེལ་མཐུད་རིམ་པ་གཉིས་ཡོད་དགོས།# ཨོ་པེ་རན་ཌི་ནི་ ནེ་གེ་རེ་ཊི་མེད་པའི་ཧྲིལ་གྲངས་ཀྱི་རིམ་པ་ཡིན།# འབྲེལ་བའི་རིམ་པ་ཚུའི་རིང་ཚད་ནི་རིམ་པ་ཚུའི་རིང་ཚད་དང་མི་འདྲ་བ་གཅིག་ཡིན།# དྲན་གསོ།# = = གྲུབ་འབྲས་ = 9 # འབྲས་བུ་ནི་ 2 + 3 * 4 - 5 ཡིན།# array = [2, 3, 4, 5] ཟེར་བ་ལྟ་བུ།# ལས་འཛིན་པ་['+', '*', '-'] # དཔེ་ཆ། # ཚད་འཛིན་གྱི་རིམ་པ། (**) # གྱེན་གྱི་ཆ་ཤས་ (_ _) # བསྐྱར་ལྡན། (*) # ཕྱིར་བཏོན་ (--) བྱེད་པ།# བསྡུར་ཐེངས། (+) # ཚད་ལྡན་ཨང་རྩིས་ཀྱི་ལག་ལེན་ཚུ།# expression དང་ expression གི་མཐའ་འབྲས་སླར་ལོག་བྱེད།# ཐིག་ཁྲམ་གཉིས་པ་ནི་ཨང་གྲངས་ཧྲིལ་པོ་དག་གི་ཐིག་ཁྲམ་ཡིན། ཚད་ལྡན་ཨང་གྲངས་ཀྱི་ཐིག་ཁྲམ་གཉིས་བེད་སྤྱོད་བྱེད་ནས་ཨང་གྲངས་ཨང་གྲངས་ཨང་གྲངས་ཀྱི་ཐིག་ཁྲམ་བཟོ།# ཨེ་རེ་གཉིས་ལྡན་གྱི་ཨོ་པེ་ཊར་དང་ཨོ་པེ་རན་ཌ་གཉིས་ཡོད་ན། ཨེ་རེ་དང་པོ་ལ་ཨལ་ཇི་བིར་གྱི་གཞི་རྟེན་གྱི་སྤྱོད་སྤྱད་ཡོད།sub do_algebra {
    my($operator, $operand) = @_;
","sub do_algebra {
    my ($operator, $operand) = @_;
    my $expression = $operand->[0];
    
    for my $i (0 .. $#$operator) {
        my $op = $operator->[$i];
        my $num = $operand->[$i + 1];
        
        if ($op eq '//') {
            $expression = ""int($expression / $num)"";
        } else {
            $expression .= "" $op $num"";
        }
    }
    
    return eval $expression;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&do_algebra;
        if(eq_deeply($candidate->([""**"", ""*"", ""+""], [2, 3, 4, 5]),37)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""+"", ""*"", ""-""], [2, 3, 4, 5]),9)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->([""//"", ""*""], [7, 3, 4]),8)) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_161,bod_Tibt,pl,"# དཔེ་གཟིགས།# ལས་འགན་འདི་ནས་ཐིག་ལེ་ཐོན་པའི་འབྲས་བུ་ཕྱིར་ལོག་བྱ་དགོས།# string ནང་ཡི་གེ་མེད་ན་ string ཕྱིར་ལྡོག་དགོས།# དེ་མིན་དེ་འདྲ་བཞག་ན་ཡག་པོ་རེད།# གལ་ཏེ་ s[i]ནི་ཡི་གེ་ཡིན་ན། དེའི་ཡིག་གཟུགས་འོག་ནས་གོང་དུ་སྒྱུར་བའམ་རྒྱབ་ཕྱོགས་ལ་བསྒྱུར་བ།# ཚད་གཞི་དེ་ཁྱོད་ལ་ཐིག་ལེ་ s ཞིག་སྤྲད་ཡོད།# >>> solve(""1234"")
# ""4321""
# >>> solve(""ab"")
# ""AB""
# >>> solve(""#a@C"")
# ""#A@c""
sub solve {
    my($s) = @_;
","sub solve {
    my($s) = @_;
    if ($s =~ /[a-zA-Z]/) {
        $s =~ s/([a-z])|([A-Z])/defined $1 ? uc($1) : lc($2)/ge;
    } else {
        $s = reverse($s);
    }
    return $s;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&solve;
        if(eq_deeply($candidate->(""AsDf""),""aSdF"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""1234""),""4321"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""ab""),""AB"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#a@C""),""#A@c"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#AsdfW^45""),""#aSDFw^45"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#6@2""),""2@6#"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#$a^D""),""#$A^d"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""#ccc""),""#CCC"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_162,bod_Tibt,pl,"# གལ་ཏེ་ 'text' ནི་སྟོང་པའི་ཐིག་ཡིག་ཡིན་ན། undef སླར་ལོག་བྱེད།# string 'text' ཤིག་ཡོད་ན། md5 ཧེཤི་འདྲ་མཉམ་གྱི་ string དེ་ཕྱིར་སློག་དགོས།# >>> string_to_md5(""Hello world"")
# ""3e25960a79dbc69b674cd4ec67a72c62""
sub string_to_md5 {
    my($text) = @_;
","use Digest::MD5 qw(md5_hex);

    if ($text eq '') {
        return undef;
    }

    return md5_hex($text);
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&string_to_md5;
        if(eq_deeply($candidate->(""Hello world""),""3e25960a79dbc69b674cd4ec67a72c62"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""""),undef)) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""A B C""),""0ef78513b0cb8cef12743f5aeb35f888"")) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(""password""),""5f4dcc3b5aa765d61d8327deb882cf99"")) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
HumanEval_163,bod_Tibt,pl,"# དཔེར་ན་: # b ཡར་རྒྱས་ཀྱི་རིམ་པ་བཞིན་# འབྲས་བུ་ཆ་མཉམ་ a དང་ b གཉིས་ཡོད་ན། a དང་ b  གི་བར་གྱི་གྲངས་ཆ་ཆ་ཉེར་ལྡོག་ཕྱིར་ལོག་བྱོས།# >>> generate_integers(2, 8)
# [2, 4, 6, 8]
# >>> generate_integers(8, 2)
# [2, 4, 6, 8]
# >>> generate_integers(10, 14)
# []
sub generate_integers {
    my($a, $b) = @_;
","sub generate_integers {
    my($a, $b) = @_;
    my @result;
    my ($start, $end) = $a < $b ? ($a, $b) : ($b, $a);
    
    for my $i ($start..$end) {
        push @result, $i if $i % 2 == 0;
    }
    
    return @result;
}","use Test::Deep;


sub testhumaneval {
    my $candidate = \&generate_integers;
        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8])) {
        print ""ok!"" }else{
        exit 1;
        }
        if(eq_deeply($candidate->(17, 89),[])) {
        print ""ok!"" }else{
        exit 1;
        }
}

testhumaneval();"
