[{"task_id":"HumanEval_0","nl":"est_Latn","pl":"pl","prompt":"# antud künnis. # Kontrollige, kas antud arvuga on kaks numbrit üksteisele lähemal kui # >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n# \"\"\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# 1\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n","canonical_solution":"sub has_close_elements {\n    my($numbers, $threshold) = @_;\n    \n    for my $i (0 .. @$numbers - 2) {\n        for my $j ($i + 1 .. @$numbers - 1) {\n            if (abs($numbers->[$i] - $numbers->[$j]) < $threshold) {\n                return 1;\n            }\n        }\n    }\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_1","nl":"est_Latn","pl":"pl","prompt":"# Eeldada kõik ruumid sisendjoonis.# Eraldi asuvad rühmad on tasakaalus (iga avatud klamber on nõuetekohaselt suletud) ja need ei ole üksteise sees pesas.# eralda need grupid eraldi stringi ja tagasta nende array. # Selle funktsiooni sisendiks on string, mis sisaldab mitut rühma ümbritsevaid sulgpaigasid.# >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\nsub separate_paren_groups {\n    my($paren_string) = @_;\n","canonical_solution":"sub separate_paren_groups {\n    my ($paren_string) = @_;\n    $paren_string =~ s\/\\s+\/\/g;  # Remove all spaces\n    my @groups;\n    my $balance = 0;\n    my $current_group = \"\";\n    \n    foreach my $char (split \/\/, $paren_string) {\n        if ($char eq '(') {\n            $balance++;\n        }\n        if ($char eq ')') {\n            $balance--;\n        }\n        $current_group .= $char;\n        if ($balance == 0 && $current_group ne \"\") {\n            push @groups, $current_group;\n            $current_group = \"\";\n        }\n    }\n    \n    return \\@groups;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&separate_paren_groups;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[\"(()(())((())))\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_2","nl":"est_Latn","pl":"pl","prompt":"# Tagastab numbri kümnendkohal oleva osa. # (jäägiosa on alati väiksem kui 1).# ja tervikliige (suurim täisarv, mis on väiksem kui antud arv) ning kümnendkohad # Kui on antud positiivne ujuva punkti numbri, siis see võib laguneda # >>> truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n","canonical_solution":"sub truncate_number {\n    my($number) = @_;\n    my $integer_part = int($number);\n    my $decimal_part = $number - $integer_part;\n    return $decimal_part;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_3","nl":"est_Latn","pl":"pl","prompt":"# Sellel hetkel peaks funktsioon tagastama 1. Muidu peaks see tagastama ''.# Teie ülesanne on tuvastada, kas konto saldo langeb mingil hetkel alla nulli, ja # Sa saad arvuti kontolt raha sisse ja välja võtta, mis algab tähega# >>> below_zero([1, 2, 3])\n# \"\"\n# >>> below_zero([1, 2, -4, 5])\n# 1\nsub below_zero {\n    my($operations) = @_;\n","canonical_solution":"sub below_zero {\n    my ($operations) = @_;\n    my $balance = 0;\n    \n    for my $operation (@$operations) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return 1;\n        }\n    }\n    \n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_4","nl":"est_Latn","pl":"pl","prompt":"# MAD = keskmine. x - x_mean.# elemendi ja keskpunkti (sel juhul keskmine): # Keskmine absoluutne kõrvalekalle on iga # selle andmekogumi keskmise ümber. # Andetud sisendarvude puhul arvesta keskmine absoluutne kõrvalekalle # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n","canonical_solution":"sub mean_absolute_deviation {\n    my ($numbers) = @_;\n    my $n = scalar @$numbers;\n    return 0 if $n == 0;\n\n    # Calculate mean\n    my $sum = 0;\n    $sum += $_ for @$numbers;\n    my $mean = $sum \/ $n;\n\n    # Calculate mean absolute deviation\n    my $total_deviation = 0;\n    $total_deviation += abs($_ - $mean) for @$numbers;\n    return $total_deviation \/ $n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_5","nl":"est_Latn","pl":"pl","prompt":"# Sisestage sisendmatriidi iga kahe järjestikuse elemendi vahel number \"piirang\" ∀numbrid\" # >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n","canonical_solution":"my @result;\n    for (my $i = 0; $i < @$numbers; $i++) {\n        push @result, $numbers->[$i];\n        push @result, $delimeter if $i < @$numbers - 1;\n    }\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersperse;\n        if(eq_deeply($candidate->([], 7),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_6","nl":"est_Latn","pl":"pl","prompt":"# Näiteks (() (()) on maksimaalselt kaks pesitsemisastet, samas kui ((())) on kolm. # Iga rühma puhul väljendada kõige sügavam paranteeside sisestamise tase. # Selle funktsiooni sisendiks on rea, mis esindab ruumidega eraldatud ümbritsevate sulgede mitut rühma.# >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\nsub parse_nested_parens {\n    my($paren_string) = @_;\n","canonical_solution":"sub parse_nested_parens {\n    my($paren_string) = @_;\n    my @groups = split \/ \/, $paren_string;\n    my @depths;\n\n    foreach my $group (@groups) {\n        my $max_depth = 0;\n        my $current_depth = 0;\n        foreach my $char (split \/\/, $group) {\n            if ($char eq '(') {\n                $current_depth++;\n                if ($current_depth > $max_depth) {\n                    $max_depth = $current_depth;\n                }\n            } elsif ($char eq ')') {\n                $current_depth--;\n            }\n        }\n        push @depths, $max_depth;\n    }\n    \n    return \\@depths;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_7","nl":"est_Latn","pl":"pl","prompt":"# Filtreerida sisendsarv ainult stringide jaoks, mis sisaldavad antud substringi # >>> filter_by_substring([], \"a\")\n# []\n# >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\nsub filter_by_substring {\n    my($strings, $substring) = @_;\n","canonical_solution":"sub filter_by_substring {\n    my ($strings, $substring) = @_;\n    my @filtered = grep { index($_, $substring) != -1 } @$strings;\n    return \\@filtered;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_substring;\n        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_8","nl":"est_Latn","pl":"pl","prompt":"# Tühja summa peaks olema võrdne 0 ja tühi toode võrdne 1. # Andetud teraste arvete array'i puhul tagastage array, mis koosneb massiivis olevate kõigi teraste arvede summast ja toodangust. # >>> sum_product([])\n# [0, 1]\n# >>> sum_product([1, 2, 3, 4])\n# [10, 24]\nsub sum_product {\n    my($numbers) = @_;\n","canonical_solution":"sub sum_product {\n    my ($numbers) = @_;\n    my $sum = 0;\n    my $product = 1;\n    \n    foreach my $num (@$numbers) {\n        $sum += $num;\n        $product *= $num;\n    }\n    \n    return [$sum, $product];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n        if(eq_deeply($candidate->([]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 0]),[100, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_9","nl":"est_Latn","pl":"pl","prompt":"# Järjekorras.# Andetud teraste arvul genereeritakse kuni antud hetkeni leitud maksimaalse rulliva elemendi arvul.# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\nsub rolling_max {\n    my($numbers) = @_;\n","canonical_solution":"sub rolling_max {\n    my ($numbers) = @_;\n    my @result;\n    my $max = $numbers->[0];\n    \n    for my $num (@$numbers) {\n        $max = $num if $num > $max;\n        push @result, $max;\n    }\n    \n    return \\@result;\n}\n\n# Example usage\nmy $result = rolling_max([1, 2, 3, 2, 3, 4, 2]);\nprint \"@$result\\n\";  # Outputs: 1 2 3 3 3 4 4","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_10","nl":"est_Latn","pl":"pl","prompt":"# - Lisada string'i lõppu tagurpidi string'i prefiks, mis tuleb palindroomsest sufiiksist enne.# - Leia pakutud string'i pikim postfix, mis on palindroom. # Algoritmi idee on lihtne:# Leia lühim palindroom, mis algab antud stringuga. # >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome {\n    my($string) = @_;\n","canonical_solution":"sub make_palindrome {\n    my($string) = @_;\n\n    # Helper function to check if a substring is a palindrome\n    sub is_palindrome {\n        my ($sub) = @_;\n        return $sub eq reverse $sub;\n    }\n\n    # If the whole string is a palindrome, return it\n    if (is_palindrome($string)) {\n        return $string;\n    }\n\n    # Check for the longest palindromic suffix\n    my $length = length($string);\n    for (my $i = $length; $i >= 0; $i--) {\n        my $suffix = substr($string, $i);\n        if (is_palindrome($suffix)) {\n            my $prefix = substr($string, 0, $i);\n            return $string . reverse($prefix);\n        }\n    }\n\n    # If no palindromic suffix is found, append the reverse of entire string minus the first character\n    return $string . reverse(substr($string, 1));\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_11","nl":"est_Latn","pl":"pl","prompt":"# Tehke nendele sisenditele binaarne XOR ja tagastage tulemus ka stringi kujul. # Sissepääs on kaks stringit a ja b, mis koosnevad ainult 1stest ja 0st.# >>> string_xor(\"010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n","canonical_solution":"my @a_bits = split \/\/, $a;\n    my @b_bits = split \/\/, $b;\n    my $result = '';\n\n    for my $i (0 .. $#a_bits) {\n        $result .= $a_bits[$i] ^ $b_bits[$i];\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"1\"),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_12","nl":"est_Latn","pl":"pl","prompt":"# tagastab undef juhul, kui sisendmaterjale on tühi.# Seeria seeriast tagastab kõige pikema.# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n    my($strings) = @_;\n","canonical_solution":"sub longest {\n    my ($strings) = @_;\n    return undef if !@$strings;\n\n    my $longest = $strings->[0];\n    foreach my $string (@$strings) {\n        if (length($string) > length($longest)) {\n            $longest = $string;\n        }\n    }\n    return $longest;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_13","nl":"est_Latn","pl":"pl","prompt":"# Tagastage kahe täisarvu a ja b suurim ühine jaguandja # >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n","canonical_solution":"sub greatest_common_divisor {\n    my ($a, $b) = @_;\n    while ($b != 0) {\n        my $t = $b;\n        $b = $a % $b;\n        $a = $t;\n    }\n    return $a;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&greatest_common_divisor;\n        if(eq_deeply($candidate->(3, 7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 15),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49, 14),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(144, 60),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_14","nl":"est_Latn","pl":"pl","prompt":"# Tagastab kõik eelfiksid sisendjoonest kõige lühemast pikemale # >>> all_prefixes(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\nsub all_prefixes {\n    my($string) = @_;\n","canonical_solution":"my($string) = @_;\n    my @prefixes;\n    for my $i (1 .. length($string)) {\n        push @prefixes, substr($string, 0, $i);\n    }\n    return @prefixes;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\", \"WW\", \"WWW\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_15","nl":"est_Latn","pl":"pl","prompt":"# Tagastab rea, mis sisaldab ruumiliselt piiratud numbreid alates 0 kuni n. # >>> string_sequence(0)\n# \"0\"\n# >>> string_sequence(5)\n# \"0 1 2 3 4 5\"\nsub string_sequence {\n    my($n) = @_;\n","canonical_solution":"sub string_sequence {\n    my($n) = @_;\n    return join ' ', 0..$n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n        if(eq_deeply($candidate->(0),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"0 1 2 3 4 5 6 7 8 9 10\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_16","nl":"est_Latn","pl":"pl","prompt":"# Andes string, leida, kui palju eristatavaid märke (sõltumata juhus) see koosneb # >>> count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters(\"Jerry\")\n# 4\nsub count_distinct_characters {\n    my($string) = @_;\n","canonical_solution":"sub count_distinct_characters {\n    my($string) = @_;\n    my %chars;\n    $string = lc $string;  # Convert the string to lowercase\n    $chars{$_} = 1 for split \/\/, $string;  # Add each character to the hash\n    return scalar keys %chars;  # Return the number of distinct keys\n}\n\n# Example usage:\nprint count_distinct_characters(\"xyzXYZ\"), \"\\n\";  # Output: 3\nprint count_distinct_characters(\"Jerry\"), \"\\n\";   # Output: 4","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_17","nl":"est_Latn","pl":"pl","prompt":"# \"Hahha\" - neljandik, kestab ühe löögi.# \"O\" - pooltegi, kestab kaks lööki.# \"O\" - terve noot, kestab neli lööki.# Siin on legend:# Mitte viimasena.# Teie ülesanne on analüüsida seda rea ja tagastada täisarvude seeriat, mis vastab sellele, kui palju lööke igaüks teeb.# Selle funktsiooni sisendiks on muusika nootide koondis spetsiaalses ASCII-vormingus. # >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nsub parse_music {\n    my($music_string) = @_;\n","canonical_solution":"sub parse_music {\n    my ($music_string) = @_;\n    my @notes = split ' ', $music_string;\n    my @beats;\n\n    foreach my $note (@notes) {\n        if ($note eq 'o') {\n            push @beats, 4;\n        } elsif ($note eq 'o|') {\n            push @beats, 2;\n        } elsif ($note eq '.|') {\n            push @beats, 1;\n        }\n    }\n\n    return @beats;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_music;\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o o o o\"),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".| .| .| .|\"),[1, 1, 1, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_18","nl":"est_Latn","pl":"pl","prompt":"# Leia, mitu korda on antud alljoon leitud algses joonisel. Loe kattuvaid juhtumeid. # >>> how_many_times(\"\", \"a\")\n# 0\n# >>> how_many_times(\"aaa\", \"a\")\n# 3\n# >>> how_many_times(\"aaaa\", \"aa\")\n# 3\nsub how_many_times {\n    my($string, $substring) = @_;\n","canonical_solution":"sub how_many_times {\n    my ($string, $substring) = @_;\n    return 0 if $substring eq '';\n    my $count = 0;\n    while ($string =~ \/(?=$substring)\/g) {\n        $count++;\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&how_many_times;\n        if(eq_deeply($candidate->(\"\", \"x\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyxyxyx\", \"x\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"cacacacac\", \"cac\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"john doe\", \"john\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_19","nl":"est_Latn","pl":"pl","prompt":"# Tagastab string, mis sisaldab numbreid, sorteeritud väikseimast suuremale.# Valitud on null, üks, kaks, kolm, neli, viis, kuus, seitse, kaheksa ja üheksa. # Sissepääs on ruumiliselt piiratud numbrijärg nullist üheksa.# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers {\n    my($numbers) = @_;\n","canonical_solution":"sub sort_numbers {\n    my ($numbers) = @_;\n    my %word_to_num = (\n        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n        'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six'   => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n    );\n    my %num_to_word = reverse %word_to_num;\n    my @sorted_numbers = \n        map { $num_to_word{$_} } \n        sort { $a <=> $b } \n        map { $word_to_num{$_} } \n        split ' ', $numbers;\n    return join ' ', @sorted_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_20","nl":"est_Latn","pl":"pl","prompt":"# muud ja tagastage need järjestuses (vähem arv, suurem arv).# Andetud arvuliste arvade (kaks või rohkem) seeriast valige ja tagastage kaks, mis on igale numbrile kõige lähemal # >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0, 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n","canonical_solution":"sub find_closest_elements {\n    my ($numbers) = @_;\n    my @sorted_numbers = sort { $a <=> $b } @$numbers;\n    my $min_diff = undef;\n    my @closest_pair;\n\n    for my $i (0 .. $#sorted_numbers - 1) {\n        my $diff = $sorted_numbers[$i + 1] - $sorted_numbers[$i];\n        if (!defined($min_diff) || $diff < $min_diff) {\n            $min_diff = $diff;\n            @closest_pair = ($sorted_numbers[$i], $sorted_numbers[$i + 1]);\n        }\n    }\n\n    return @closest_pair;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_21","nl":"est_Latn","pl":"pl","prompt":"# Nii et väikseim number muutub 0 ja suurim muutub 1 # Arvestades arvutiarvu (vähemalt kahest elemendist), rakendame sellele arvele lineaarse transformeerimise, # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\nsub rescale_to_unit {\n    my($numbers) = @_;\n","canonical_solution":"sub rescale_to_unit {\n    my($numbers) = @_;\n    my $min = min(@$numbers);\n    my $max = max(@$numbers);\n    my @rescaled = map { ($_ - $min) \/ ($max - $min) } @$numbers;\n    return \\@rescaled;\n}\n\nsub min {\n    my(@list) = @_;\n    my $min = $list[0];\n    foreach my $num (@list) {\n        if ($num < $min) {\n            $min = $num;\n        }\n    }\n    return $min;\n}\n\nsub max {\n    my(@list) = @_;\n    my $max = $list[0];\n    foreach my $num (@list) {\n        if ($num > $max) {\n            $max = $num;\n        }\n    }\n    return $max;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rescale_to_unit;\n        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_22","nl":"est_Latn","pl":"pl","prompt":"# Filtreerida antud array mis tahes plthon väärtused ainult täisarvudele # >>> filter_integers([\"a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1, 2, 3]\nsub filter_integers {\n    my($values) = @_;\n","canonical_solution":"sub filter_integers {\n    my ($values) = @_;\n    return [grep { \/^-?\\d+$\/ && !ref($_) } @$values];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_23","nl":"est_Latn","pl":"pl","prompt":"# Andmejoone pikkus # >>> strlen(\"\")\n# 0\n# >>> strlen(\"abc\")\n# 3\nsub strlen {\n    my($string) = @_;\n","canonical_solution":"sub strlen {\n    my($string) = @_;\n    return length($string);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdasnakj\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_24","nl":"est_Latn","pl":"pl","prompt":"# Andetud n-le, leia suurim arv, mis jagab n võrdselt, väiksem kui n # >>> largest_divisor(15)\n# 5\nsub largest_divisor {\n    my($n) = @_;\n","canonical_solution":"sub largest_divisor {\n    my($n) = @_;\n    for (my $i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n    return undef; # In case n is 1, there is no divisor less than n\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n        if(eq_deeply($candidate->(3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_25","nl":"est_Latn","pl":"pl","prompt":"# Sissepääsu number peaks olema võrdne kõigi tegurite korrutisega.# Iga teguri arv peaks olema seatud seeriateks vastavalt sellele, kui palju korda see faktoriseerimisel esineb.# Tagastab antud täisarvu algtegurite massiiv järjestuses vähimast suurimale. # >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\nsub factorize {\n    my($n) = @_;\n","canonical_solution":"sub factorize {\n    my ($n) = @_;\n    my @factors;\n    for my $i (2 .. int(sqrt($n))) {\n        while ($n % $i == 0) {\n            push @factors, $i;\n            $n \/= $i;\n        }\n    }\n    push @factors, $n if $n > 1;\n    return @factors;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n        if(eq_deeply($candidate->(2),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3, 3, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3, 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_26","nl":"est_Latn","pl":"pl","prompt":"# Hoidke elementide järjekord samana, nagu sisend.# Eemaldage terved arvud, mis on rohkem kui üks kord.# >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n","canonical_solution":"sub remove_duplicates {\n    my ($numbers) = @_;\n    my %count;\n    $count{$_}++ for @$numbers;\n    return [grep { $count{$_} == 1 } @$numbers];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_27","nl":"est_Latn","pl":"pl","prompt":"# Andetud string, pöörake väikese tähe tähed suureks ja suureks tähe väikesteks. # >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string) = @_;\n","canonical_solution":"sub flip_case {\n    my($string) = @_;\n    $string =~ tr\/A-Za-z\/a-zA-Z\/;\n    return $string;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_28","nl":"est_Latn","pl":"pl","prompt":"# Kontsekteerida stringide seeriad üheks stringiks # >>> concatenate([])\n# \"\"\n# >>> concatenate([\"a\", \"b\", \"c\"])\n# \"abc\"\nsub concatenate {\n    my($strings) = @_;\n","canonical_solution":"sub concatenate {\n    my($strings) = @_;\n    return join('', @$strings);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate;\n        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\"]),\"xyz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_29","nl":"est_Latn","pl":"pl","prompt":"# Filtreerida sisendseadmed ainult stringide jaoks, mis algavad antud eesliigega. # >>> filter_by_prefix([], \"a\")\n# []\n# >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n","canonical_solution":"sub filter_by_prefix {\n    my ($strings, $prefix) = @_;\n    return [grep { \/^\\Q$prefix\\E\/ } @$strings];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_30","nl":"est_Latn","pl":"pl","prompt":"# Tagastab ainult massiivis olevad positiivsed numbrid. # >>> get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n","canonical_solution":"sub get_positive {\n    my($l) = @_;\n    my @positive_numbers = grep { $_ > 0 } @$l;\n    return \\@positive_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_31","nl":"est_Latn","pl":"pl","prompt":"# Tagastab vale, kui antud number on algarv, ja vale muidu. # >>> is_prime(6)\n# \"\"\n# >>> is_prime(101)\n# 1\n# >>> is_prime(11)\n# 1\n# >>> is_prime(13441)\n# 1\n# >>> is_prime(61)\n# 1\n# >>> is_prime(4)\n# \"\"\n# >>> is_prime(1)\n# \"\"\nsub is_prime {\n    my($n) = @_;\n","canonical_solution":"sub is_prime {\n    my($n) = @_;\n    return \"\" if $n <= 1;\n    return 1 if $n == 2;\n    return \"\" if $n % 2 == 0;\n    for (my $i = 3; $i * $i <= $n; $i += 2) {\n        return \"\" if $n % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_33","nl":"est_Latn","pl":"pl","prompt":"# l, kuid sorteeritud.# l' on identne l-ga indeksites, mis ei ole jagatavad kolmega, samas kui selle väärtused indeksites, mis on jagatavad kolmega, on võrdsed # See funktsioon võtab maastiku l ja annab tagasi maastiku l, mis on selline, et # >>> sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\nsub sort_third {\n    my($l) = @_;\n","canonical_solution":"sub sort_third {\n    my ($l) = @_;\n    my @to_sort = map { $l->[$_] } grep { $_ % 3 == 0 } 0..$#$l;\n    @to_sort = sort { $a <=> $b } @to_sort;\n    my @result = @$l;\n    my $index = 0;\n\n    foreach my $i (0..$#{$l}) {\n        if ($i % 3 == 0) {\n            $result[$i] = $to_sort[$index++];\n        }\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_third;\n        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_34","nl":"est_Latn","pl":"pl","prompt":"# Tagastab sorteeritud ainulaadseid elemente massiivis # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n","canonical_solution":"sub unique {\n    my ($l) = @_;\n    my %seen;\n    my @unique_sorted = sort { $a <=> $b } grep { !$seen{$_}++ } @$l;\n    return \\@unique_sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_35","nl":"est_Latn","pl":"pl","prompt":"# Tagastab massiivis maksimaalse elemendi. # >>> max_element([1, 2, 3])\n# 3\n# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element {\n    my($l) = @_;\n","canonical_solution":"sub max_element {\n    my($l) = @_;\n    my $max = $l->[0];\n    foreach my $value (@$l) {\n        if ($value > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n        if(eq_deeply($candidate->([1, 2, 3]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_36","nl":"est_Latn","pl":"pl","prompt":"# Tagastab numbri 7 esinemissageduse n-st väiksemates tervikus, mis on jagatav 11 või 13ga. # >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\nsub fizz_buzz {\n    my($n) = @_;\n","canonical_solution":"sub fizz_buzz {\n    my($n) = @_;\n    my $count = 0;\n    for my $i (1 .. $n-1) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $count++ if $i =~ \/7\/;\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fizz_buzz;\n        if(eq_deeply($candidate->(50),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(78),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(79),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4000),192)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10000),639)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100000),8026)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_37","nl":"est_Latn","pl":"pl","prompt":"# l parite indekside väärtustele, kuid sorteeritud. # l' on identiline l-ga paarsetel indeksitel, samas kui selle väärtused on paarsetel indeksitel võrdsed # See funktsioon võtab maastiku l ja annab tagasi maastiku l, mis on selline, et # >>> sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\nsub sort_even {\n    my($l) = @_;\n","canonical_solution":"sub sort_even {\n    my($l) = @_;\n    my @even_indices;\n\n    for (my $i = 0; $i < @$l; $i += 2) {\n        push @even_indices, $l->[$i];\n    }\n\n    @even_indices = sort { $a <=> $b } @even_indices;\n\n    my @result = @$l;\n    \n    for (my $i = 0; $i < @even_indices; $i++) {\n        $result[$i * 2] = $even_indices[$i];\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_even;\n        if(eq_deeply($candidate->([1, 2, 3]),[1, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_39","nl":"est_Latn","pl":"pl","prompt":"# prime_fib tagastab n-nda numbri, mis on Fibonacci number ja see on ka algarv. # >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nsub prime_fib {\n    my($n) = @_;\n","canonical_solution":"sub is_prime {\n    my($num) = @_;\n    return 0 if $num < 2;\n    for my $i (2 .. sqrt($num)) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub prime_fib {\n    my($n) = @_;\n    my ($a, $b) = (1, 1);\n    my $count = 0;\n\n    while (1) {\n        my $fib = $a + $b;\n        $a = $b;\n        $b = $fib;\n        if (is_prime($fib)) {\n            $count++;\n            return $fib if $count == $n;\n        }\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n        if(eq_deeply($candidate->(1),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_40","nl":"est_Latn","pl":"pl","prompt":"# summa nullini ja \"' muidu.# see annab 1 kui mastaaris on kolm erinevat elementi, mis # triples_sum_to_zero võtab sisendina tervearvu array.# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero {\n    my($l) = @_;\n","canonical_solution":"sub triples_sum_to_zero {\n    my($l) = @_;\n    my $n = scalar @$l;\n    for my $i (0 .. $n-3) {\n        for my $j ($i+1 .. $n-2) {\n            for my $k ($j+1 .. $n-1) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_41","nl":"est_Latn","pl":"pl","prompt":"# See funktsioon annab välja selliste kokkupõrkete arvu. # Nad on oma trajektoori, nagu nad ei oleks kokkupõrge.# Kuid autod on äärmiselt tugevad ja tugevad, mistõttu nad liiguvad edasi.# Kui auto, mis liigub vasakult paremale, lööb auto, mis liigub paremale vasakule.# Kõik autod liiguvad sama kiirusega.# Kaks autot on väga kaugel.# n autod sõidavad vasakult paremale; samal ajal, erinev kogum n autod # Kujuta ette teed, mis on täiuslikult sirge, lõpmatult pikk joon.sub car_race_collision {\n    my($n) = @_;\n","canonical_solution":"sub car_race_collision {\n    my($n) = @_;\n    return $n;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n        if(eq_deeply($candidate->(2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_42","nl":"est_Latn","pl":"pl","prompt":"# Tagastab seeriat, mille elemendid on suurendatud 1 võrra.# >>> incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n","canonical_solution":"sub incr_list {\n    my($l) = @_;\n    return [map { $_ + 1 } @$l];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_43","nl":"est_Latn","pl":"pl","prompt":"# summa nullini ja \"' muidu.# see annab 1 kui mastaaris on kaks erinevat elementi, mis # pairs_sum_to_zero võtab sisendina tervearvude massiivi. # >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1, 3, -2, 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero {\n    my($l) = @_;\n","canonical_solution":"sub pairs_sum_to_zero {\n    my ($l) = @_;\n    my %seen;\n    for my $num (@$l) {\n        if ($seen{-1 * $num}) {\n            return 1;\n        }\n        $seen{$num} = 1;\n    }\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_44","nl":"est_Latn","pl":"pl","prompt":"# baasid on väiksemad kui 10.# tagastavad string esindatuse pärast konverteerimist. # Muuda sisendnumbri x numbriline alus aluseks.# >>> change_base(8, 3)\n# \"22\"\n# >>> change_base(8, 2)\n# \"1000\"\n# >>> change_base(7, 2)\n# \"111\"\nsub change_base {\n    my($x, $base) = @_;\n","canonical_solution":"sub change_base {\n    my ($x, $base) = @_;\n    my $result = '';\n    \n    if ($base < 2 || $base > 9) {\n        die \"Base must be between 2 and 9\";\n    }\n\n    while ($x > 0) {\n        my $remainder = $x % $base;\n        $result = $remainder . $result;\n        $x = int($x \/ $base);\n    }\n\n    return $result eq '' ? '0' : $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n        if(eq_deeply($candidate->(8, 3),\"22\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234, 2),\"11101010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 2),\"10000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 2),\"111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),\"4\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),\"5\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 8),\"7\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_45","nl":"est_Latn","pl":"pl","prompt":"# Triangli külje pikkus ja suur pöörde pindala.# >>> triangle_area(5, 3)\n# 7.5\nsub triangle_area {\n    my($a, $h) = @_;\n","canonical_solution":"sub triangle_area {\n    my ($a, $h) = @_; \n    return 0.5 * $a * $h;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(5, 3),7.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2),2.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 8),40.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_46","nl":"est_Latn","pl":"pl","prompt":"# Palun kirjuta funktsioon, mis võimaldab arvutada fib4 numbrijärjekorra n-s elemendi.# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). # fib4(3) -> 0 # fib4(2) -> 2 # fib4(1) -> 0 # fib4(0) -> 0 # Fib4 numbrijärjekord on sarnane Fibbonacci järjekorraga, mida defineeritakse järgmiselt:# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n","canonical_solution":"sub fib4 {\n    my ($n) = @_;\n    return 0 if $n == 0 || $n == 1 || $n == 3;\n    return 2 if $n == 2;\n    \n    my @fib4 = (0, 0, 2, 0);\n    \n    for my $i (4 .. $n) {\n        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n    }\n    \n    return $fib4[$n];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_47","nl":"est_Latn","pl":"pl","prompt":"# Tagastage mastaabis l olevate elementide mediaan. # >>> median([3, 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) = @_;\n","canonical_solution":"sub median {\n    my($l) = @_;\n    my @sorted = sort { $a <=> $b } @$l;\n    my $len = @sorted;\n    if ($len % 2 == 1) {\n        return $sorted[int($len\/2)];\n    } else {\n        return ($sorted[$len\/2 - 1] + $sorted[$len\/2]) \/ 2;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4, 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_48","nl":"est_Latn","pl":"pl","prompt":"# Kontrollib, kas antud string on palindroom.# >>> is_palindrome(\"\")\n# 1\n# >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n","canonical_solution":"sub is_palindrome {\n    my ($text) = @_;\n    return $text eq reverse($text) ? 1 : \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_49","nl":"est_Latn","pl":"pl","prompt":"# Tagasi 2^n modulo p (tuleb arvestada numbreid).# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n","canonical_solution":"sub modp {\n    my($n, $p) = @_;\n    return (2 ** $n) % $p;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_51","nl":"est_Latn","pl":"pl","prompt":"# remove_vowels on funktsioon, mis võtab string ja annab tagasi string ilma vokaalideta. # >>> remove_vowels(\"\")\n# \"\"\n# >>> remove_vowels(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels(\"aaaaa\")\n# \"\"\n# >>> remove_vowels(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels(\"zbcd\")\n# \"zbcd\"\nsub remove_vowels {\n    my($text) = @_;\n","canonical_solution":"sub remove_vowels {\n    my($text) = @_;\n    $text =~ s\/[aeiouAEIOU]\/\/g;\n    return $text;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"),\"bcdf\nghjklm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"acBAA\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"),\"ybcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_52","nl":"est_Latn","pl":"pl","prompt":"# Tagastab 1 , kui kõik matriisi l numbrid on allpool künnist t. # >>> below_threshold([1, 2, 4, 10], 100)\n# 1\n# >>> below_threshold([1, 20, 4, 10], 5)\n# \"\"\nsub below_threshold {\n    my($l, $t) = @_;\n","canonical_solution":"sub below_threshold {\n    my($l, $t) = @_;\n    foreach my $num (@$l) {\n        return \"\" if $num >= $t;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_threshold;\n        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_53","nl":"est_Latn","pl":"pl","prompt":"# Lisage kaks numbrit x ja y.# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\nsub add {\n    my($x, $y) = @_;\n","canonical_solution":"return $x + $y;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->(0, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 7),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_54","nl":"est_Latn","pl":"pl","prompt":"# Kontrollige, kas kahel sõnal on samad tähed. # >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# 1\n# >>> same_chars(\"abcd\", \"dddddddabc\")\n# 1\n# >>> same_chars(\"dddddddabc\", \"abcd\")\n# 1\n# >>> same_chars(\"eabcd\", \"dddddddabc\")\n# \"\"\n# >>> same_chars(\"abcd\", \"dddddddabce\")\n# \"\"\n# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# \"\"\nsub same_chars {\n    my($s0, $s1) = @_;\n","canonical_solution":"sub same_chars {\n    my($s0, $s1) = @_;\n    \n    my %chars_s0 = map { $_ => 1 } split \/\/, $s0;\n    my %chars_s1 = map { $_ => 1 } split \/\/, $s1;\n\n    foreach my $char (keys %chars_s0) {\n        return \"\" unless exists $chars_s1{$char};\n    }\n\n    foreach my $char (keys %chars_s1) {\n        return \"\" unless exists $chars_s0{$char};\n    }\n\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&same_chars;\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dddddddabc\", \"abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcd\", \"dddddddabc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabcf\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\", \"aaccc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_55","nl":"est_Latn","pl":"pl","prompt":"# Tagasta n-nes Fibonacci number. # >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n","canonical_solution":"sub fib {\n    my ($n) = @_;\n    return $n if $n <= 1;\n    my ($a, $b) = (0, 1);\n    for (2..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $b;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_56","nl":"est_Latn","pl":"pl","prompt":"# tagastab 1, kui iga avamise korpusel on vastav sulgemise korpus. # Brackets on string \"<\" ja \">\". # >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n","canonical_solution":"sub correct_bracketing {\n    my($brackets) = @_;\n    my $balance = 0;\n\n    foreach my $char (split \/\/, $brackets) {\n        if ($char eq '<') {\n            $balance++;\n        } elsif ($char eq '>') {\n            $balance--;\n            if ($balance < 0) {\n                return \"\";\n            }\n        }\n    }\n    \n    return $balance == 0 ? 1 : \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_57","nl":"est_Latn","pl":"pl","prompt":"# Tagasi 1 on seeria elemendid monotooniliselt suurenevad või vähenevad.# >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n# >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n","canonical_solution":"sub monotonic {\n    my($l) = @_;\n    return 1 if @$l <= 1;\n    \n    my $increasing = 1;\n    my $decreasing = 1;\n    \n    for my $i (1 .. $#$l) {\n        if ($l->[$i] > $l->[$i - 1]) {\n            $decreasing = 0;\n        } elsif ($l->[$i] < $l->[$i - 1]) {\n            $increasing = 0;\n        }\n    }\n    \n    return $increasing || $decreasing ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_58","nl":"est_Latn","pl":"pl","prompt":"# Tagastab sorteeritud ainulaadseid ühiseid elemente kahes mastaabis. # >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n","canonical_solution":"sub common {\n    my($l1, $l2) = @_;\n    my %count;\n    $count{$_}++ for @$l1;\n    $count{$_}++ for grep { exists $count{$_} } @$l2;\n    return [ sort { $a <=> $b } grep { $count{$_} > 1 } keys %count ];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_59","nl":"est_Latn","pl":"pl","prompt":"# Tagastage suurim algarv n. Oletame, et n > 1 ei ole algarv. # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\nsub largest_prime_factor {\n    my($n) = @_;\n","canonical_solution":"sub largest_prime_factor {\n    my($n) = @_;\n    my $largest_factor = 1;\n    my $factor = 2;\n\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n            $largest_factor = $factor;\n            $n \/= $factor;\n        } else {\n            $factor++;\n        }\n    }\n    \n    return $largest_factor;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_60","nl":"est_Latn","pl":"pl","prompt":"# sum_to_n on funktsioon, mis summeerib numbreid 1st n-ni. # >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\nsub sum_to_n {\n    my($n) = @_;\n","canonical_solution":"sub sum_to_n {\n    my ($n) = @_;\n    return $n * ($n + 1) \/ 2;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_61","nl":"est_Latn","pl":"pl","prompt":"# tagastab 1, kui iga avamise korpusel on vastav sulgemise korpus. # parantees on string \"(\" ja \")\". # >>> correct_bracketing(\"(\")\n# \"\"\n# >>> correct_bracketing(\"()\")\n# 1\n# >>> correct_bracketing(\"(()())\")\n# 1\n# >>> correct_bracketing(\")(()\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n","canonical_solution":"sub correct_bracketing {\n    my ($brackets) = @_;\n    my $balance = 0;\n\n    foreach my $char (split \/\/, $brackets) {\n        if ($char eq '(') {\n            $balance++;\n        } elsif ($char eq ')') {\n            $balance--;\n        }\n        # If balance is negative, it means there's a closing bracket without a matching opening\n        if ($balance < 0) {\n            return '';\n        }\n    }\n\n    # If balance is zero, all brackets are correctly matched\n    return $balance == 0 ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((()())))\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((((\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())())(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_62","nl":"est_Latn","pl":"pl","prompt":"# Tagastage selle polünoomi tuletis samas vormis. # xs[0] + xs[1] * x + xs[2] * x^2 + .... # xs esindavad polinoomi koefitsiente.# >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n# [2, 6]\nsub derivative {\n    my($xs) = @_;\n","canonical_solution":"sub derivative {\n    my($xs) = @_;\n    my @derivative;\n    \n    for my $i (1 .. $#{$xs}) {\n        push @derivative, $xs->[$i] * $i;\n    }\n    \n    return \\@derivative;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_63","nl":"est_Latn","pl":"pl","prompt":"# Palun kirjuta üles funktsioon, mis võimaldab arvutada fibfib arvukorralduse n-s elemendi. # fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3). # fibfib(2) == 1 # f (f (f (f (f (f (f (f (f (f (f))))# fibfib(0) == 0 # FibFib numbrijärjekord on sarnane Fibbonacci järjekorraga, mida defineeritakse järgmiselt: # >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n    my($n) = @_;\n","canonical_solution":"sub fibfib {\n    my($n) = @_;\n    return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n\n    my @fibfib = (0, 0, 1);\n    for my $i (3..$n) {\n        $fibfib[$i] = $fibfib[$i-1] + $fibfib[$i-2] + $fibfib[$i-3];\n    }\n    return $fibfib[$n];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_64","nl":"est_Latn","pl":"pl","prompt":"# Näide: # hääl, kuid ainult siis, kui see on antud sõna lõpus.# Siin on hääl \"a\", \"e\", \"i\", \"o\", \"u\".# sisendiks sõna ja annab tagasi voolikute arvu string. # Kirjuta funktsioon vowels_count, mis võtab rida, mis esindab # >>> vowels_count(\"abcde\")\n# 2\n# >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n","canonical_solution":"sub vowels_count {\n    my($s) = @_;\n    my $count = 0;\n    my @chars = split \/\/, lc $s;\n    my $length = scalar @chars;\n\n    for my $i (0..$#chars) {\n        if ($chars[$i] =~ \/[aeiou]\/ || ($chars[$i] eq 'y' && $i == $length - 1)) {\n            $count++;\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n        if(eq_deeply($candidate->(\"abcde\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"key\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bye\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bYe\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ACEDY\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_65","nl":"est_Latn","pl":"pl","prompt":"# Kui shift > numbrite arv, tagastatakse numbrid ümber. # ja tagastab tulemuse stringi kujul. # Ringikujuline nihke täisarvu x numbritest, nihke numbritest paremale nihkega.# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n# \"12\"\nsub circular_shift {\n    my($x, $shift) = @_;\n","canonical_solution":"sub circular_shift {\n    my($x, $shift) = @_;\n    my $digits = length($x);\n    \n    if ($shift > $digits) {\n        return reverse $x;\n    }\n    \n    $shift = $shift % $digits;\n    my $shifted = substr($x, -$shift) . substr($x, 0, $digits - $shift);\n    \n    return $shifted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n        if(eq_deeply($candidate->(100, 2),\"001\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97, 8),\"79\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 1),\"21\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_66","nl":"est_Latn","pl":"pl","prompt":"# Näited: # ASCII koodid. # Kirjutage funktsioon, mis võtab sisendina string ja annab ainult ülemiste tähemärkide summa\" # Ülesanne # >>> digitSum(\"\")\n# 0\n# >>> digitSum(\"abAB\")\n# 131\n# >>> digitSum(\"abcCd\")\n# 67\n# >>> digitSum(\"helloE\")\n# 69\n# >>> digitSum(\"woArBld\")\n# 131\n# >>> digitSum(\"aAaaaXa\")\n# 153\nsub digitSum {\n    my($s) = @_;\n","canonical_solution":"sub digitSum {\n    my($s) = @_;\n    my $sum = 0;\n    foreach my $char (split \/\/, $s) {\n        if ($char =~ \/[A-Z]\/) {\n            $sum += ord($char);\n        }\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digitSum;\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abAB\"),131)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcCd\"),67)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"helloE\"),69)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"woArBld\"),131)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aAaaaXa\"),153)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" How are yOu?\"),151)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You arE Very Smart\"),327)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_67","nl":"est_Latn","pl":"pl","prompt":"# examble'i jaoks: # korvis tagastab korvis olevate mango puuviljade arvu. # apelsinid ja õunad ning terved arvud, mis esindavad puuviljade koguarvu # Andes string, mis esindab kogu arvu # mis on jagatud puuviljakorvi selles korvis sisalduvas korvis # Selles ülesandes antakse teile korduvus, mis esindab arvu õunu ja apelsine.# >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n# 19\nsub fruit_distribution {\n    my($s, $n) = @_;\n","canonical_solution":"sub fruit_distribution {\n    my($s, $n) = @_;\n    \n    # Extract numbers from the input string\n    my ($apples, $oranges) = $s =~ \/(\\d+) apples and (\\d+) oranges\/;\n    \n    # Calculate total apples and oranges\n    my $total_apples_oranges = $apples + $oranges;\n    \n    # Calculate number of mangoes\n    my $mangoes = $n - $total_apples_oranges;\n    \n    return $mangoes;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 21),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 0 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_68","nl":"est_Latn","pl":"pl","prompt":"# Näide 1: # Kui pole paarisväärtusi või antud mastaab on tühi, tagastage [].# Võttud sõlm tuleks tagastada massiivis, [ smalest_value, selle indeks ], # Kui leidub mitu ühest väikseima paarisummaga sõlme, siis tagastatakse sõlme, millel on kõige väiksem indeks. # Pühkitud sõlm peaks olema kõige väiksem paarväärtus.# Sinu ülesanne on ühe sõlme välja võtta ja tagasi anda.# \"Antud array esindab haru puu, mis on mitte-negatiivsed terved sõlmed # >>> pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck([])\n# []\n# Example 4:\n# >>> pluck([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n    my($arr) = @_;\n","canonical_solution":"sub pluck {\n    my ($arr) = @_;\n    my $min_even_value = undef;\n    my $min_index = undef;\n\n    for my $i (0 .. @$arr - 1) {\n        my $value = $arr->[$i];\n        if ($value % 2 == 0) {\n            if (!defined($min_even_value) || $value < $min_even_value) {\n                $min_even_value = $value;\n                $min_index = $i;\n            }\n        }\n    }\n\n    return defined($min_even_value) ? [$min_even_value, $min_index] : [];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 7, 1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_69","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Kui sellist väärtust ei ole, tagastatakse -1. # Täisarvu sagedus on selle esinemissagedus mastaaris.# null ja sagedus on suurem või võrdne terviku väärtusega. # Saate mitte-tühja array positiivseid tervikrühmi. Tagastage suurim tervik, mis on suurem kui # >>> search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> search([5, 5, 4, 4, 4])\n# -1\nsub search {\n    my($lst) = @_;\n","canonical_solution":"sub search {\n    my($lst) = @_;\n    my %frequency;\n\n    foreach my $num (@$lst) {\n        $frequency{$num}++;\n    }\n\n    my $result = -1;\n    foreach my $num (keys %frequency) {\n        if ($num > 0 && $frequency{$num} >= $num) {\n            if ($num > $result) {\n                $result = $num;\n            }\n        }\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_70","nl":"est_Latn","pl":"pl","prompt":"# Näited: # siis ülejäänud täisarvu maksimaalne, siis minimaalne ja nii edasi.# Imelik sorteerimine, on kui sa alustad minimaalse väärtusega, # Andes tervearvude array, tagastage array veidras järjekorras.# >>> strange_sort_list([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list([])\n# []\nsub strange_sort_list {\n    my($lst) = @_;\n","canonical_solution":"sub strange_sort_list {\n    my($lst) = @_;\n    my @result;\n    my @sorted = sort {$a <=> $b} @$lst;\n    \n    while (@sorted) {\n        push @result, shift @sorted;\n        push @result, pop @sorted if @sorted;\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_71","nl":"est_Latn","pl":"pl","prompt":"# Näide: # kui kolmas pool.# Kolm külge moodustavad triangel, kui kahe külje summa on suurem.# Muidu tagastatakse -1 # Kolmnurk ümardatakse kahe kümnendkohani, kui kolm külge moodustavad kehtivad kolmnurk. # Kui on antud kolmnurgu kolmekülgede pikkused, siis tuleb välja # >>> triangle_area(3, 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\nsub triangle_area {\n    my($a, $b, $c) = @_;\n","canonical_solution":"sub triangle_area {\n    my($a, $b, $c) = @_;\n    \n    # Check if the sides form a valid triangle\n    unless ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        return -1;\n    }\n    \n    # Calculate the semi-perimeter\n    my $s = ($a + $b + $c) \/ 2;\n    \n    # Calculate the area using Heron's formula\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    \n    # Return the area rounded to 2 decimal points\n    return sprintf(\"%.2f\", $area);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(3, 4, 5),6.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 5),8.18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),1.73)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),16.25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 3),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),0.43)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_72","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Objekti q saab lennata, kui see on tasakaalustatud (see on palindroomsed array) ja selle elementide summa on väiksem või võrdne maksimaalse võimaliku kaaluga w.# Kirjutage funktsioon, mis annab 1 kui objekt q lendab ja '' muidu. # >>> will_it_fly([1, 2], 5)\n# \"\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly([3, 2, 3], 1)\n# \"\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly([3, 2, 3], 9)\n# 1\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly([3], 5)\n# 1\n# # 3 is less than the maximum possible weight, and it's balanced.\nsub will_it_fly {\n    my($q, $w) = @_;\n","canonical_solution":"sub will_it_fly {\n    my($q, $w) = @_;\n    # Check if the array is palindromic\n    my @reversed = reverse @$q;\n    return '' unless \"@$q\" eq \"@reversed\";\n\n    # Check if the sum of elements is within weight limit\n    my $sum = 0;\n    $sum += $_ for @$q;\n    return $sum <= $w ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3], 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], 6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_73","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Ühes muudatuses saab ühe elemendi muuta ükskõik milliseks teiseks elemendiks.# palindroomseks muutmiseks. Palindroomsed arrayid on arrayid, mis# Andes tervearvu array arr, leia elemendid minimaalne arv, et # >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> smallest_change([1, 2, 3, 2, 1])\n# 0\nsub smallest_change {\n    my($arr) = @_;\n","canonical_solution":"sub smallest_change {\n    my($arr) = @_;\n    my $count = 0;\n    my $n = scalar @$arr;\n    \n    for my $i (0 .. int($n \/ 2) - 1) {\n        if ($arr->[$i] != $arr->[$n - $i - 1]) {\n            $count++;\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&smallest_change;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 4, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 1, 1, 3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_74","nl":"est_Latn","pl":"pl","prompt":"# Näited # Kui kahes massiivis on sama arv tähte, tagastatakse esimene massiiv.# Array'i kõigi stringide tähemärkide koguarv on väiksem kui teise array'i puhul.# Kirjuta funktsioon , mis võtab vastu kaks seeriat ja annab tagasi seeriat , millel on # >>> total_match([], [])\n# []\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\nsub total_match {\n    my($lst1, $lst2) = @_;\n","canonical_solution":"sub total_match {\n    my ($lst1, $lst2) = @_;\n    \n    my $len1 = sum_chars($lst1);\n    my $len2 = sum_chars($lst2);\n\n    return $len1 <= $len2 ? $lst1 : $lst2;\n}\n\nsub sum_chars {\n    my ($array) = @_;\n    my $total = 0;\n    foreach my $string (@$array) {\n        $total += length($string);\n    }\n    return $total;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&total_match;\n        if(eq_deeply($candidate->([], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], [\"this\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\"], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_75","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Teades, et a on väiksem kui 100.# ja muul juhul vale.# Kirjuta funktsioon , mis annab vale tulemuse , kui antud number on kolme algarvu korrutamine .# >>> is_multiply_prime(30)\n# 1\n# 30 = 2 * 3 * 5\nsub is_multiply_prime {\n    my($a) = @_;\n","canonical_solution":"sub is_multiply_prime {\n    my($a) = @_;\n\n    return 0 if $a >= 100;\n\n    my @primes = grep { is_prime($_) } 2..int($a\/2);\n\n    for my $i (0..$#primes) {\n        for my $j ($i..$#primes) {\n            for my $k ($j..$#primes) {\n                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nsub is_prime {\n    my($n) = @_;\n    return 0 if $n < 2;\n    for my $i (2..sqrt($n)) {\n        return 0 if $n % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_multiply_prime;\n        if(eq_deeply($candidate->(5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(105),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(126),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(729),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(891),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1001),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_76","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # x on n lihtne võimsus, kui n**int=x # n ja false'i võimsus muudes juhtudel. # Teie ülesanne on kirjutada funktsioon, mis annab vale, kui number x on lihtne # >>> is_simple_power(1, 4)\n# 1\n# >>> is_simple_power(2, 2)\n# 1\n# >>> is_simple_power(8, 2)\n# 1\n# >>> is_simple_power(3, 2)\n# \"\"\n# >>> is_simple_power(3, 1)\n# \"\"\n# >>> is_simple_power(5, 3)\n# \"\"\nsub is_simple_power {\n    my($x, $n) = @_;\n","canonical_solution":"sub is_simple_power {\n    my($x, $n) = @_;\n    \n    return 0 if $n <= 0;\n    return \"\" if $x < 1;\n    \n    if ($x == 1) {\n        return 1;\n    }\n\n    while ($x > 1) {\n        if ($x % $n != 0) {\n            return \"\";\n        }\n        $x \/= $n;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n        if(eq_deeply($candidate->(16, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(128, 4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_77","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Märkus: võite eeldada, et sisend on alati kehtiv. # Kui see ingeger on mingi tervene numbri kuubik.# Kirjuta funktsioon , mis võtab terake a ja annab 1 .# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n# \"\"\nsub iscube {\n    my($a) = @_;\n","canonical_solution":"sub iscube {\n    my($a) = @_;\n    my $cube_root = int($a ** (1\/3));\n    return 1 if $cube_root ** 3 == $a;\n    return 1 if ($cube_root + 1) ** 3 == $a; # handle small floating-point errors\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_78","nl":"est_Latn","pl":"pl","prompt":"# Näited: # ja sümbolid A,B,C,D,E,F on alati suurkirjas. # Märkus: võite eeldada, et sisend on alati õige või tühi string, # B (= kümnendkoht 11), D (= kümnendkoht 13). # Sa pead määrama järgmised numbrid: 2, 3, 5, 7, # Algarvud on 2, 3, 5, 7, 11, 13, 17...# Kuusnendkohalised numbrid on 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.# suurem kui 1, mis ei ole kahe väiksemate naturaararvu korrutis).# Algarve on algarv, mille puhul algarv on naturaalne number.# hexadetsimaalne number kui string ja loeb hexadetsimaalide arvu # Sa oled saanud ülesande kirjutada funktsioon, mis võtab vastu # >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\")\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n","canonical_solution":"sub hex_key {\n    my($num) = @_;\n    my %prime_hex_digits = map { $_ => 1 } ('2', '3', '5', '7', 'B', 'D');\n    my $prime_count = 0;\n    \n    foreach my $char (split \/\/, $num) {\n        $prime_count++ if exists $prime_hex_digits{$char};\n    }\n    \n    return $prime_count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_79","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Lisatähtsad on mõeldud formaadi parandamiseks. # Seeria alguses ja lõpus on lisatud paar tähte \"db\". # number. Iga tähis on \"0\" või \"1\".# Funktsioon peaks tagastama string, kus iga tähis esindab binaarset # Teile antakse kümnendkohal number ja teie ülesanne on see ümber muuta # >>> decimal_to_binary(15)\n# \"db1111db\"\n# >>> decimal_to_binary(32)\n# \"db100000db\"\nsub decimal_to_binary {\n    my($decimal) = @_;\n","canonical_solution":"sub decimal_to_binary {\n    my($decimal) = @_;\n    my $binary = sprintf(\"%b\", $decimal);\n    return \"db\" . $binary . \"db\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(0),\"db0db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),\"db100000db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(103),\"db1100111db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),\"db1111db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_80","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Kiir on õnnelik, kui selle pikkus on vähemalt 3 ja iga 3 järjestikust tähte on erinevad.# Teie ülesanne on kontrollida, kas string on happl või mitte.# Sa saad korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva# >>> is_happy(\"a\")\n# \"\"\n# >>> is_happy(\"aa\")\n# \"\"\n# >>> is_happy(\"abcd\")\n# 1\n# >>> is_happy(\"aabb\")\n# \"\"\n# >>> is_happy(\"adb\")\n# 1\n# >>> is_happy(\"xyy\")\n# \"\"\nsub is_happy {\n    my($s) = @_;\n","canonical_solution":"sub is_happy {\n    my($s) = @_;\n    return \"\" if length($s) < 3;\n    for my $i (0 .. length($s) - 3) {\n        my $substr = substr($s, $i, 3);\n        my %chars;\n        $chars{$_}++ for split \/\/, $substr;\n        return \"\" if keys(%chars) != 3;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_81","nl":"est_Latn","pl":"pl","prompt":"# Näide: # 0,0 E # > 0, 0 D- # > 0,7 D # > 1,0 D+ # > 1,3 C- # > 1,7 °C # > 2,0 C+ # > 2,3 B- # > 2,7 B # > 3,0 B+ # > 3.3 A- # > 3,7 A # 4,0 A+ # Keskmine hinne.# funktsioon, mis annab välja kirjajärgse värvi array'i, kasutades järgmist tabelit: # Ta on sulle andnud mitmeid õpilaste keskmisi ja sa pead kirjutama.# Ainuke probleem on see, et ta on kaotanud koodi, mida ta hindamiseks kasutas.# Õpetaja on loonud oma hinnangute algoritmi.# On semestri viimane nädal ja õpetaja peab hinded andma.# >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nsub numerical_letter_grade {\n    my($grades) = @_;\n","canonical_solution":"sub numerical_letter_grade {\n    my ($gpas) = @_;\n    my @letters;\n\n    foreach my $gpa (@$gpas) {\n        if ($gpa == 4.0) {\n            push @letters, 'A+';\n        } elsif ($gpa > 3.7) {\n            push @letters, 'A';\n        } elsif ($gpa > 3.3) {\n            push @letters, 'A-';\n        } elsif ($gpa > 3.0) {\n            push @letters, 'B+';\n        } elsif ($gpa > 2.7) {\n            push @letters, 'B';\n        } elsif ($gpa > 2.3) {\n            push @letters, 'B-';\n        } elsif ($gpa > 2.0) {\n            push @letters, 'C+';\n        } elsif ($gpa > 1.7) {\n            push @letters, 'C';\n        } elsif ($gpa > 1.3) {\n            push @letters, 'C-';\n        } elsif ($gpa > 1.0) {\n            push @letters, 'D+';\n        } elsif ($gpa > 0.7) {\n            push @letters, 'D';\n        } elsif ($gpa > 0.0) {\n            push @letters, 'D-';\n        } else {\n            push @letters, 'E';\n        }\n    }\n\n    return \\@letters;\n}\n\nmy $gpas = [4.0, 3, 1.7, 2, 3.5];\nmy $letter_grades = numerical_letter_grade($gpas);\nprint join(\", \", @$letter_grades);","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0, 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_82","nl":"est_Latn","pl":"pl","prompt":"# Näited # pikkus on algarv või \" ' muidu # Kirjuta funktsioon , mis võtab rida ja annab 1 , kui rida # >>> prime_length(\"Hello\")\n# 1\n# >>> prime_length(\"abcdcba\")\n# 1\n# >>> prime_length(\"kittens\")\n# 1\n# >>> prime_length(\"orange\")\n# \"\"\nsub prime_length {\n    my($string) = @_;\n","canonical_solution":"sub prime_length {\n    my ($string) = @_;\n    my $length = length($string);\n\n    return '' if $length < 2;\n    for my $i (2 .. sqrt($length)) {\n        return '' if $length % $i == 0;\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n        if(eq_deeply($candidate->(\"Hello\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"kittens\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"orange\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"world\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MadaM\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"HI\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gogo\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"M\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_83","nl":"est_Latn","pl":"pl","prompt":"# positiivsed terved arvud, mis algavad või lõpevad numbriga 1.# Andes positiivse terviku n, tagasta n-kohaliste numbrite arv sub starts_one_ends {\n    my($n) = @_;\n","canonical_solution":"sub starts_one_ends {\n    my($n) = @_;\n    \n    # If n is 1, the numbers are 1, 2, 3, ..., 9 (single digit numbers starting\n    # or ending with 1), hence return 1 (only the number 1).\n    return 1 if $n == 1;\n\n    # Calculate the count of numbers starting with 1\n    # Numbers from 1..9 (n-1 zeros) give us 10^(n-1) choices\n    my $start_one_count = 10 ** ($n - 1);\n\n    # Calculate the count of numbers ending with 1\n    # Numbers from 10..10^(n-1) give us 10^(n-1) choices\n    my $end_one_count = 10 ** ($n - 1);\n\n    # However, numbers that both start and end with 1 (like 111...1)\n    # are counted twice so we need to add them in only once.\n    my $both_count = 1; # There's exactly one such number: 10^(n-1) + 1\n\n    # Total unique count\n    my $total_count = $start_one_count + $end_one_count - $both_count;\n\n    return $total_count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_84","nl":"est_Latn","pl":"pl","prompt":"# Näide # Andes positiivse terviku N, tagastage selle numbrite summa binäärvormis. # >>> solve(1000)\n# \"1\"\n# >>> solve(150)\n# \"110\"\n# >>> solve(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 ≤ N ≤ 10000.\n# Output:\n# a string of binary number\nsub solve {\n    my($N) = @_;\n","canonical_solution":"sub solve {\n    my($N) = @_;\n    my $sum = 0;\n    $sum += $_ for split \/\/, $N;\n    return sprintf(\"%b\", $sum);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(1000),\"1\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(150),\"110\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(147),\"1100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(333),\"1001\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(963),\"10010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_85","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Andes mitte-tühi täisarvude massiiv lst. lisage paarsed elemendid, mis on paarsed indektid .. # >>> add([4, 2, 6, 7])\n# 2\nsub add {\n    my($lst) = @_;\n","canonical_solution":"sub add {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    for (my $i = 1; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_86","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Märkus: Te peate järgima lause sõnade ja tühjade vahelepaikade järjestust. # Ascii väärtuse alusel tõusvas järjekorras. # asendatakse uue sõnaga, kus kõik tähemärgid on paigutatud # Järjekorrasse versiooni string, on string, kus kõik sõnad (eraldatud ruumiga) # Kirjuta funktsioon, mis võtab rea ja annab selle korrastatud versiooni. # >>> anti_shuffle(\"Hi\")\n# \"Hi\"\n# >>> anti_shuffle(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\nsub anti_shuffle {\n    my($s) = @_;\n","canonical_solution":"sub anti_shuffle {\n    my($s) = @_;\n    $s =~ s\/(\\S+)\/join('', sort split \/\/, $1)\/ge;\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&anti_shuffle;\n        if(eq_deeply($candidate->(\"Hi\"),\"Hi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hello\"),\"ehllo\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"number\"),\"bemnru\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),\"abcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello World!!!\"),\"Hello !!!Wdlor\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_87","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Samuti sorteerige rida koordinaadid veergude järgi langemisjärjekorras.# Koordinaadid sorteeritakse algselt ridade järgi tõusvas järjekorras.# iga mastaab on koordinaat - (riiv, veerud), alustades 0-st. # ja tagastab massiivide massiivid, [(x1, y1), (x2, y2) ...] selliselt, et # Andes lst ja tervik x, leia tervikud x massiivis, # Iga rida võib sisaldada erinevat arvu veergeid. # mis on sarnane maatriksile, kuid erinevalt maatriksidest,# Saate kahe dimensiooni andmete, nagu ümbritsevad mastaabid, # >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row([], 1)\n# []\n# >>> get_row([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\nsub get_row {\n    my($lst, $x) = @_;\n","canonical_solution":"sub get_row {\n    my ($lst, $x) = @_;\n    my @result;\n\n    for my $i (0 .. @$lst - 1) {\n        my @row_result;\n        for my $j (0 .. @{$lst->[$i]} - 1) {\n            if ($lst->[$i][$j] == $x) {\n                push @row_result, [$i, $j];\n            }\n        }\n        # Sort the coordinates of the row by columns in descending order\n        @row_result = sort { $b->[1] <=> $a->[1] } @row_result;\n        push @result, @row_result;\n    }\n\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_row;\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], 1),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1]], 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[], [1], [1, 2, 3]], 3),[[2, 2]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_88","nl":"est_Latn","pl":"pl","prompt":"# Näited: # * ei muuda antud array. # Märkus: # või sorteerida langusjärjekorras, kui summa ((esimene indeksväärtus, viimane indeksväärtus) on paaris. # Sa sorteerid antud massiivid ülespoole, kui summa ((esimene indeksväärtus, viimane indeksväärtus) on paars, # Andes mittekujuliste teraste arvade massiiv, tagastage pärast sorteerimist antud massiivist kopl, # >>> sort_array([])\n# []\n# >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    my($array) = @_;\n","canonical_solution":"sub sort_array {\n    my ($array) = @_;\n    return [] if !@$array;  # Return empty array if input is empty\n\n    my $first = $array->[0];\n    my $last = $array->[-1];\n    my $sum = $first + $last;\n\n    if ($sum % 2 == 0) {\n        # Sort in descending order if the sum is even\n        return [sort { $b <=> $a } @$array];\n    } else {\n        # Sort in ascending order if the sum is odd\n        return [sort { $a <=> $b } @$array];\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_89","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Liigutage kaks korda kaks kohta.# Alfabeti tuleb pöörata nii, et tähed # tagastab krüpteeritud string, kusjuures tähestik pööratakse. # Looge funktsiooni krüpteerimine, mis võtab string'i argumendina ja # >>> encrypt(\"hi\")\n# \"lm\"\n# >>> encrypt(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt(\"gf\")\n# \"kj\"\n# >>> encrypt(\"et\")\n# \"ix\"\nsub encrypt {\n    my($s) = @_;\n","canonical_solution":"sub encrypt {\n    my($s) = @_;\n    my $shift = 2 * 2;  # Alphabet shifted by two multiplied by two places (4 places)\n    $s =~ tr\/a-zA-Z\/n-za-mN-ZA-M\/;  # Perform a Caesar cipher with a shift of 13 places\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n        if(eq_deeply($candidate->(\"hi\"),\"lm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"ewhjklnop\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gf\"),\"kj\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"faewfawefaewg\"),\"jeiajeaijeiak\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),\"e\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_90","nl":"est_Latn","pl":"pl","prompt":"# Tagastab undef, kui sellist elementi ei ole. # Kirjutage funktsioon next_smallest ((), mis tagastab teise väikseima elemendi. # Sa saad tervearvude array.# >>> next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest([5, 1, 4, 3, 2])\n# 2\n# >>> next_smallest([])\n# undef\n# >>> next_smallest([1, 1])\n# undef\nsub next_smallest {\n    my($lst) = @_;\n","canonical_solution":"sub next_smallest {\n    my($lst) = @_;\n    \n    # Return undef if the list has less than two elements\n    return undef unless @$lst >= 2;\n    \n    # Sort the unique elements of the list\n    my @sorted_unique = sort { $a <=> $b } keys %{{ map { $_ => 1 } @$lst }};\n    \n    # If there is only one unique element, return undef, else return the second smallest\n    return @sorted_unique >= 2 ? $sorted_unique[1] : undef;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4, 3, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_91","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Lause piiritletakse tähisega \"\", \"?\" või \"!\" # Igavus on lause, mis algab sõnaga \"I\".# Sa saad sõnade rida ja sinu ülesanne on loendada neid.# >>> is_bored(\"Hello world\")\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\nsub is_bored {\n    my($S) = @_;\n","canonical_solution":"my($S) = @_;\n    my $count = 0;\n    my @sentences = split \/(?<=[.?!])\\s*\/, $S;\n    foreach my $sentence (@sentences) {\n        $sentence =~ s\/^\\s+|\\s+$\/\/g;\n        $count++ if $sentence =~ \/^I\\b\/i;\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_bored;\n        if(eq_deeply($candidate->(\"Hello world\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is the sky blue?\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I love It !\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bIt\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I feel good today. I will be productive. will kill It\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You and I are going for a walk\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_92","nl":"est_Latn","pl":"pl","prompt":"# Näited # Tagastab vale kõikides muudes juhtudel. # Tagastab tõde, kui üks arv on võrdne kahe teise summaga ja kõik numbrid on täisarvud. # Looge funktsioon, mis võtab 3 numbrit.# >>> any_int(5, 2, 7)\n# 1\n# >>> any_int(3, 2, 2)\n# \"\"\n# >>> any_int(3, -2, 1)\n# 1\n# >>> any_int(3.6, -2.2, 2)\n# \"\"\nsub any_int {\n    my($x, $y, $z) = @_;\n","canonical_solution":"sub any_int {\n    my($x, $y, $z) = @_;\n    \n    # Check if all inputs are integers\n    return \"\" unless defined $x && defined $y && defined $z;\n    return \"\" unless $x =~ \/^-?\\d+$\/ && $y =~ \/^-?\\d+$\/ && $z =~ \/^-?\\d+$\/;\n    \n    # Check if any number is the sum of the other two\n    return 1 if $x == $y + $z;\n    return 1 if $y == $x + $z;\n    return 1 if $z == $x + $y;\n    \n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&any_int;\n        if(eq_deeply($candidate->(2, 3, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.5, 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.5, 5, 3.5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 6, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.2, 2.2, 2.2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-4, 6, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 1, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4, 7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3.0, 4, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_93","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Võtke ainult tähed.# Inglise tähestik.# Sõnum koos kirja, mis ilmub 2 kohta enne seda.# Nii, et see vahetab kõik tähed, asendab kõik vokaalid # Kirjuta funktsioon, mis võtab sõnumi ja kodeerib selle sellisesse # >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n","canonical_solution":"sub encode {\n    my($message) = @_;\n    $message =~ tr\/A-Za-z\/N-ZA-Mn-za-m\/;\n    $message =~ tr\/aeiouAEIOU\/cgkqwCGKQW\/;\n    return $message;\n}\n\n# Example usage\nprint encode(\"test\"), \"\\n\";       # Output: TGST\nprint encode(\"This is a message\"), \"\\n\"; # Output: tHKS KS C MGSSCGG","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_94","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Sa pead leidma suurima algarvu ja tagastama selle numbrite summa.# Sa saad tervearvude array.# >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n# 7\nsub skjkasdkd {\n    my($lst) = @_;\n","canonical_solution":"sub skjkasdkd {\n    my ($lst) = @_;\n\n    # Helper function to determine if a number is prime\n    sub is_prime {\n        my ($num) = @_;\n        return 0 if $num < 2;\n        for my $i (2 .. sqrt($num)) {\n            return 0 if $num % $i == 0;\n        }\n        return 1;\n    }\n\n    # Find the largest prime in the array\n    my $largest_prime = -1;\n    foreach my $num (@$lst) {\n        if (is_prime($num)) {\n            $largest_prime = $num if $num > $largest_prime;\n        }\n    }\n\n    # Return the sum of the digits of the largest prime\n    if ($largest_prime > 0) {\n        my $sum_of_digits = 0;\n        $sum_of_digits += $_ for split \/\/, $largest_prime;\n        return $sum_of_digits;\n    }\n\n    return 0;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([127, 97, 8192]),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_95","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Funktsioon peaks tagastama '' kui antud hash on tühi. # case või kõik võtmed on suurte tähtedega stringid, muidu tagastatakse ''.# Kui on antud hash, tagasta 1 kui kõik võtmed on stringid allpool # >>> check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>> check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case {\n    my($dict) = @_;\n","canonical_solution":"sub check_dict_case {\n    my($dict) = @_;\n    return '' unless %$dict;\n\n    my $all_lower = 1;\n    my $all_upper = 1;\n\n    for my $key (keys %$dict) {\n        if ($key !~ \/^[a-z]+$\/) {\n            $all_lower = 0;\n        }\n        if ($key !~ \/^[A-Z]+$\/) {\n            $all_upper = 0;\n        }\n    }\n    \n    return ($all_lower || $all_upper) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_96","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Täisarvud, mis on algarvud ja väiksemad kui n. # Rakendada funktsiooni , mis võtab negatiivse mitte- terviku ja annab esimese n-i massiivi .# >>> count_up_to(5)\n# [2, 3]\n# >>> count_up_to(11)\n# [2, 3, 5, 7]\n# >>> count_up_to(0)\n# []\n# >>> count_up_to(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> count_up_to(1)\n# []\n# >>> count_up_to(18)\n# [2, 3, 5, 7, 11, 13, 17]\nsub count_up_to {\n    my($n) = @_;\n","canonical_solution":"sub count_up_to {\n    my($n) = @_;\n    my @primes;\n    for my $num (2 .. $n - 1) {\n        my $is_prime = 1;\n        for my $div (2 .. sqrt($num)) {\n            if ($num % $div == 0) {\n                $is_prime = 0;\n                last;\n            }\n        }\n        push @primes, $num if $is_prime;\n    }\n    return @primes;\n}\n\n# Example usage:\n# my @result = count_up_to(11);\n# print \"@result\\n\";  # Output: 2 3 5 7","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_up_to;\n        if(eq_deeply($candidate->(5),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[2, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[2, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),[2, 3, 5, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_97","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Oletame, et sisend on alati kehtiv.# nende ühiku numbri korrutis. # Täitke funktsioon, mis võtab kaks täisarvu ja annab # >>> multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n# 0\n# >>> multiply(14, -15)\n# 20\nsub multiply {\n    my($a, $b) = @_;\n","canonical_solution":"sub multiply {\n    my($a, $b) = @_;\n    my $unit_digit_a = abs($a) % 10;\n    my $unit_digit_b = abs($b) % 10;\n    return $unit_digit_a * $unit_digit_b;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n        if(eq_deeply($candidate->(148, 412),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020, 1851),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14, -15),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 27),49)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_98","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Andes string s, loenda suurte häälte arvu paarisindeksis. # >>> count_upper(\"aBCdEf\")\n# 1\n# >>> count_upper(\"abcdefg\")\n# 0\n# >>> count_upper(\"dBBE\")\n# 0\nsub count_upper {\n    my($s) = @_;\n","canonical_solution":"sub count_upper {\n    my($s) = @_;\n    my $count = 0;\n    my @chars = split \/\/, $s;\n    \n    for (my $i = 0; $i < @chars; $i += 2) {\n        if ($chars[$i] =~ \/[AEIOU]\/) {\n            $count++;\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n        if(eq_deeply($candidate->(\"aBCdEf\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dBBE\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"B\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EEEE\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_99","nl":"est_Latn","pl":"pl","prompt":"# Näited # kahe täisarvu puhul ümardatakse see nullist eemale.# ja tagastab sellele lähim tervene arv. Kui number on võrdse kaugusega # Looge funktsioon , mis võtab väärtuse (stringi), mis esindab numbrit .# >>> closest_integer(\"10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nsub closest_integer {\n    my($value) = @_;\n","canonical_solution":"sub closest_integer {\n    my($value) = @_;\n    \n    # Convert the string value to a number\n    my $number = 0 + $value;\n    \n    # Compute the floor and ceiling of the number\n    my $floor = int($number);\n    my $ceiling = $number > $floor ? $floor + 1 : $floor;\n    \n    # Determine the integer to round to\n    if ($number < 0) {\n        # For negative numbers, closer to zero means returning the lower number\n        return ($number - $floor <= $ceiling - $number) ? $floor : $ceiling;\n    } else {\n        # For positive numbers, closer to zero means returning the lower number\n        return ($ceiling - $number <= $number - $floor) ? $ceiling : $floor;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_100","nl":"est_Latn","pl":"pl","prompt":"# Näited: # i on kivide arv tasemel (i+1). # Tagastab kivide arvu igal tasemel massiivis, kus element on indeksi # - järgmine paararv, kui n on paararv. # - järgmine paaritu number, kui n on paaritu. # Kivide arv järgmises tasandites on: # Esimese taseme n kivi.# Kui on antud positiivne terved arv n, siis tuleb teha n taseme kivide hulk.# >>> make_a_pile(3)\n# [3, 5, 7]\nsub make_a_pile {\n    my($n) = @_;\n","canonical_solution":"sub make_a_pile {\n    my ($n) = @_;\n    my @pile;\n    my $current_stones = $n;\n    \n    for my $level (1..$n) {\n        push @pile, $current_stones;\n        if ($n % 2 == 0) {\n            $current_stones += 2;  # Increment by next even number\n        } else {\n            $current_stones += 2;  # Increment by next odd number (which is also +2)\n        }\n    }\n    \n    return @pile;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n        if(eq_deeply($candidate->(3),[3, 5, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_101","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # jagada string sõnadeks ja tagastada sõnade array. # Saad sõnade rida, mis on eraldatud virgula või vahemaaga.# >>> words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> words_string(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nsub words_string {\n    my($s) = @_;\n","canonical_solution":"sub words_string {\n    my ($s) = @_;\n    my @words = split \/[,\\s]+\/, $s;\n    return \\@words;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_102","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # kui sellist numbrit pole, siis peaks funktsioon andma tagasi -1.# Suurim paariseks täisarvuks, mis on vahemikus [x, y] kaasa arvatud.# See funktsioon võtab kaks positiivset numbrit x ja y ja annab # >>> choose_num(12, 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nsub choose_num {\n    my($x, $y) = @_;\n","canonical_solution":"sub choose_num {\n    my($x, $y) = @_;\n    return -1 if $x > $y;\n    \n    # Swap x and y if x is greater than y\n    ($x, $y) = ($y, $x) if $x > $y;\n    \n    for (my $i = $y; $i >= $x; $i--) {\n        return $i if $i % 2 == 0;\n    }\n    return -1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n        if(eq_deeply($candidate->(12, 15),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33, 12354),12354)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5234, 5233),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 7),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_103","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Kui n on suurem kui m, tagastage -1.# Ümbritse vastus lähimasse tervena ja muuda see binaarseks.# n-st m-ni (sealhulgas n ja m) ulatuvate tervikarvude keskmine.# Saate kaks positiivset tervikarvu n ja m, ja teie ülesanne on arvutada # >>> rounded_avg(1, 5)\n# \"0b11\"\n# >>> rounded_avg(7, 5)\n# -1\n# >>> rounded_avg(10, 20)\n# \"0b1111\"\n# >>> rounded_avg(20, 33)\n# \"0b11010\"\nsub rounded_avg {\n    my($n, $m) = @_;\n","canonical_solution":"sub rounded_avg {\n    my ($n, $m) = @_;\n    \n    return -1 if $n > $m;\n    \n    my $sum = 0;\n    my $count = $m - $n + 1;\n    \n    for my $i ($n .. $m) {\n        $sum += $i;\n    }\n    \n    my $average = int(($sum \/ $count) + 0.5);\n    return sprintf(\"0b%b\", $average);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rounded_avg;\n        if(eq_deeply($candidate->(1, 5),\"0b11\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 13),\"0b1010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(964, 977),\"0b1111001010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(996, 997),\"0b1111100100\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(560, 851),\"0b1011000010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185, 546),\"0b101101110\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(362, 496),\"0b110101101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(350, 902),\"0b1001110010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(197, 233),\"0b11010111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 1),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 5),\"0b101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_104","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Märkus: tagastatud massiiv tuleb sorteerida järjestuselt.# elemendid, millel pole ühtki paarisarvest.# Andes array positiivseid tervikrühmi x. tagasta sorteeritud array kõik # >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits {\n    my($x) = @_;\n","canonical_solution":"sub unique_digits {\n    my ($x) = @_;\n    my @result;\n\n    foreach my $num (@$x) {\n        if ($num !~ \/[02468]\/) {\n            push @result, $num;\n        }\n    }\n    \n    return sort { $a <=> $b } @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_105","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Üks, kaks, kolm, neli, viis, kuus, seitse, kaheksa, üheksa.# pöörame tulemuse array ümber ja siis asendame iga numbri vastava nimega # Andes tervearvu array, sorteerida terved, mis on vahemikus 1 ja 9 kaasa arvatud, # >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length([])\n# []\n# If the array has any strange number ignore it:\n# >>> by_length([1, -1, 55])\n# [\"One\"]\nsub by_length {\n    my($arr) = @_;\n","canonical_solution":"sub by_length {\n    my ($arr) = @_;\n    my @names = qw(Zero One Two Three Four Five Six Seven Eight Nine);\n    \n    my @filtered_sorted_reversed = reverse sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @result = map { $names[$_] } @filtered_sorted_reversed;\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 55]),[\"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_106","nl":"est_Latn","pl":"pl","prompt":"# Näide: # i faktorial on 1i ja i vaheliste numbrite korrutamine (1 * 2 * ... * i).# i algab 1.# või 1 kuni i numbrite summa. # ja tagastab suuruse n massiivi, nii et elemendi väärtus indeksi i juures on i faktoriik, kui i on paaris.# Rakendage funktsiooni f, mis võtab n parameetrina, # >>> f(5)\n# [1, 2, 6, 24, 15]\nsub f {\n    my($n) = @_;\n","canonical_solution":"sub f {\n    my($n) = @_;\n    my @result;\n\n    for my $i (1..$n) {\n        if ($i % 2 == 0) {\n            my $factorial = 1;\n            $factorial *= $_ for 1..$i;\n            push @result, $factorial;\n        } else {\n            my $sum = 0;\n            $sum += $_ for 1..$i;\n            push @result, $sum;\n        }\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_107","nl":"est_Latn","pl":"pl","prompt":"# Näide 1: # terved palindroomid, mis kuuluvad vahemikku ((1, n), kaasa arvatud. # Andes positiivse terviku n, tagastage array, mis on paari ja paarsumade arv # >>> even_odd_palindrome(3)\n# [1, 2]\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd integer palindromes respectively.\nsub even_odd_palindrome {\n    my($n) = @_;\n","canonical_solution":"sub even_odd_palindrome {\n    my($n) = @_;\n    my $even_count = 0;\n    my $odd_count = 0;\n    for my $i (1..$n) {\n        if ($i == reverse $i) {\n            if ($i % 2 == 0) {\n                $even_count++;\n            } else {\n                $odd_count++;\n            }\n        }\n    }\n    return [$even_count, $odd_count];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n        if(eq_deeply($candidate->(123),[8, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_108","nl":"est_Latn","pl":"pl","prompt":"# Näiteks -123 on allkirjastatud numbriteks -1, 2 ja 3.# Kui number on negatiivne, siis on ka selle esimene allkirjastatud number negatiivne: # elemendid, mille numbrite summa on > 0. # Kirjutage funktsioon count_nums, mis võtab tervearvude massiivi ja annab # >>> count_nums([])\n# 0\n# >>> count_nums([-1, 11, -11])\n# 1\n# >>> count_nums([1, 1, 2])\n# 3\nsub count_nums {\n    my($arr) = @_;\n","canonical_solution":"sub count_nums {\n    my($arr) = @_;\n    my $count = 0;\n\n    foreach my $num (@$arr) {\n        my $sum_of_digits = 0;\n        my @digits = split \/\/, $num;\n        $sum_of_digits += shift @digits; # add the signed digit\n        $sum_of_digits += $_ for @digits;\n        $count++ if $sum_of_digits > 0;\n    }\n\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_nums;\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 2, -2, 3, 4, 5]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 100, 98, -7, 1, -1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_109","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Märkus: antud massiivil on tagatud ainulaadsed elemendid.# Kui antud mastaab on tühi, siis tagastame 1. # siis tagasta 1 else tagasta ''. # Kui on võimalik saada sorteeritud massiiv ülaltoodud toimingu abil # alguspositsioon mastaabis, st 0-ne indeks. # Viimane element liigub # Üks paremale nihkumine tähendab, et kõik elemendid liigub ühe võrra.# Paremale pöörata võib mitu korda.# antud massiivis järgmine operatsioon: # on võimalik saada massiiv sorteeritud mitte langemisjärjekorras, tehes # Array'i numbrid on juhuslikult järjestatud.# Meil on array 'arr' N täisarvu arr[1], arr[2], ..., arr[N].# >>> move_one_ball([3, 4, 5, 1, 2])\n# 1\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> move_one_ball([3, 5, 4, 1, 2])\n# \"\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\nsub move_one_ball {\n    my($arr) = @_;\n","canonical_solution":"sub move_one_ball {\n    my ($arr) = @_;\n    my $n = scalar @$arr;\n    return 1 if $n == 0;\n\n    for my $i (0 .. $n - 1) {\n        my @shifted = (@$arr[$i .. $n - 1], @$arr[0 .. $i - 1]);\n        if (is_sorted(\\@shifted)) {\n            return 1;\n        }\n    }\n    return '';\n}\n\nsub is_sorted {\n    my ($arr) = @_;\n    for my $i (0 .. $#$arr - 1) {\n        return 0 if $arr->[$i] > $arr->[$i + 1];\n    }\n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10, 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_110","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Vastasel juhul tagastage \"Ei\". # Kui lst1 kõik elemendid on paarsed, siis tagasta \"YES\".# Kui on võimalik vahetada elemente lst1 ja lst2 vahel, et teha # LST1 ja LST2 vahel vahetatavate elementide arvu suhtes ei ole piirangut.# Nende vahel, et teha lst1 vaid paaride arvud.# ja määrab kindlaks , kas on võimalik teha elementide vahetus # Selles probleemis rakendate funktsiooni, mis võtab kaks arvude massiivi, # >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\nsub exchange {\n    my($lst1, $lst2) = @_;\n","canonical_solution":"sub exchange {\n    my ($lst1, $lst2) = @_;\n    \n    # Check if lst1 is already all-even\n    my $all_even = 1;\n    foreach my $num (@$lst1) {\n        if ($num % 2 != 0) {\n            $all_even = 0;\n            last;\n        }\n    }\n    return \"YES\" if $all_even;\n\n    # Check if there is at least one even number in lst2\n    my $can_exchange = 0;\n    foreach my $num (@$lst2) {\n        if ($num % 2 == 0) {\n            $can_exchange = 1;\n            last;\n        }\n    }\n\n    # Calculate the count of odd numbers in lst1\n    my $odd_count_lst1 = 0;\n    foreach my $num (@$lst1) {\n        $odd_count_lst1++ if ($num % 2 != 0);\n    }\n\n    # If there are even numbers in lst2 and odd numbers in lst1, we can exchange\n    if ($can_exchange && $odd_count_lst1 > 0) {\n        return \"YES\";\n    }\n\n    return \"NO\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200, 200]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_111","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Kui sama sõna esineb mitmes tähes, tuleb need kõik tagasi anda. # Kõige rohkem korduvate ja vastava arvu sisaldavate tähtede arv. # Kui string esindab ruumidega eraldatud väikeseid tähte, tagastage hash # >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n","canonical_solution":"sub histogram {\n    my ($test) = @_;\n    my %count;\n\n    # Split the input string by spaces and count occurrences of each letter\n    $count{$_}++ for split ' ', $test;\n\n    # Determine the maximum count\n    my $max_count = 0;\n    $max_count = $count{$_} > $max_count ? $count{$_} : $max_count for keys %count;\n\n    # Collect all letters with the maximum count\n    my %result = map { $_ => $count{$_} } grep { $count{$_} == $max_count } keys %count;\n\n    return \\%result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\" => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_112","nl":"est_Latn","pl":"pl","prompt":"# Näide # Sa peaksid tagastama array, mis sisaldab tulemuse string ja 1\/' kontrolliks. # Sõnalehekülge nimetatakse palindroomiks, kui see on sama tagurpidi kui ettepoole.# siis kontrollige, kas tulemuse string on palindroomne. # Meil on kaks stringit s ja c, sa pead kustutama kõik märgid s, mis on võrdne mis tahes märgi c # Ülesanne # >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n","canonical_solution":"sub reverse_delete {\n    my($s, $c) = @_;\n    \n    # Create a hash of characters to be deleted for quick lookup\n    my %chars_to_delete = map { $_ => 1 } split \/\/, $c;\n    \n    # Remove characters that need to be deleted\n    $s =~ s\/[$c]\/\/g;\n    \n    # Check if the resulting string is a palindrome\n    my $is_palindrome = ($s eq reverse $s) ? 1 : '';\n\n    # Return the resulting string and palindrome check\n    return [$s, $is_palindrome];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_113","nl":"est_Latn","pl":"pl","prompt":"# Võrdlus:# sisendite rida i. \" kus kõik i-d asendatakse numbriga # Iga väljundelementi i peaks olema \"võrdne paarsete elementide arvuga # Kui on antud seeria, kus iga seeria koosneb ainult numbritest, tagasta seeria. # >>> odd_count([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nsub odd_count {\n    my($lst) = @_;\n","canonical_solution":"sub odd_count {\n    my ($lst) = @_;\n    my @output;\n    foreach my $str (@$lst) {\n        my $odd_count = 0;\n        $odd_count++ while $str =~ \/[13579]\/g;\n        push @output, \"the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput.\";\n    }\n    return \\@output;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_count;\n        if(eq_deeply($candidate->([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_114","nl":"est_Latn","pl":"pl","prompt":"# Näide # Numbri kohta.# Andes tervearvu n-arve, leia mitte-tühje alamarve minimaalne summa # >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n# 1\n# >>> minSubArraySum([-1, -2, -3])\n# -6\nsub minSubArraySum {\n    my($nums) = @_;\n","canonical_solution":"sub minSubArraySum {\n    my($nums) = @_;\n    my $minSum = $nums->[0];\n    my $currentSum = 0;\n    \n    foreach my $num (@$nums) {\n        $currentSum += $num;\n        if ($currentSum < $minSum) {\n            $minSum = $currentSum;\n        }\n        if ($currentSum > 0) {\n            $currentSum = 0;\n        }\n    }\n    \n    return $minSum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minSubArraySum;\n        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_115","nl":"est_Latn","pl":"pl","prompt":"# Näide 1: # Andke välja kordi, kui palju on vaja küte alla lasta. # Teie ülesanne on kasutada ämberit, et kaevu tühjendada.# ja kõik kübid on sama suurused. # Igal kaevikul on vastav ämber, millest saab vett välja võtta.# ja iga rida 1 esindab ühte veeühikut. # Saad ristkülikukujulise kaevade võrgu, iga rida esindab ühte kaevust.# >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\nsub max_fill {\n    my($grid, $capacity) = @_;\n","canonical_solution":"sub max_fill {\n    my($grid, $capacity) = @_;\n    my $total_water_units = 0;\n    \n    for my $row (@$grid) {\n        for my $unit (@$row) {\n            $total_water_units += $unit;\n        }\n    }\n    \n    my $bucket_uses = int(($total_water_units + $capacity - 1) \/ $capacity);\n    return $bucket_uses;\n}\n\n# Examples\nprint max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) . \"\\n\"; # 6\nprint max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) . \"\\n\"; # 5\nprint max_fill([[0, 0, 0], [0, 0, 0]], 5) . \"\\n\"; # 0","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_fill;\n        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_116","nl":"est_Latn","pl":"pl","prompt":"# Seda tuleb rakendada järgmiselt: # Sama arvu üksikute puhul sorteeritakse kümnendväärtuse alusel. # Üksikute arv nende binaarses esinduses tõusvas järjekorras. # Selles Kata, sa pead sorteerima array mitte-negatiivsed terved numbrid vastavalt # >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n","canonical_solution":"sub sort_array {\n    my($arr) = @_;\n    return [sort { sprintf(\"%b\", $a) =~ tr\/1\/\/ <=> sprintf(\"%b\", $b) =~ tr\/1\/\/ || $a <=> $b } @$arr];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_117","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Märkus: võite eeldada, et sisendjoon sisaldab ainult tähte ja vahendeid. # Kui string s on tühi, siis peaks funktsioon tagastama tühja array. # n konsonantide järgi, et need sõnad ilmuksid korduvas s.# funktsioon, mis annab tagasi kõik sõnad seeriast s, mis sisaldavad täpselt # Andes string s ja naturaalnumbri n, on teil antud ülesanne rakendada # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n","canonical_solution":"sub select_words {\n    my($s, $n) = @_;\n    return [] if $s eq '';\n    \n    my @words = split(\/\\s+\/, $s);\n    my @result;\n    \n    foreach my $word (@words) {\n        my $consonant_count = () = $word =~ \/[^aeiouAEIOU]\/g;\n        push @result, $word if $consonant_count == $n;\n    }\n    \n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_118","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Võite eeldada, et antud string sisaldab ainult inglise kirja. # leida ükskõik milline vokaal, mis vastab ülaltoodud tingimustele.# Vokaalide algus ja lõpp ei arvestata. tagasta tühi string kui sa ei teinud.# kaks konsonanti sõna parema küljest (koodi suuruselt ja väikese tähestikku). # Sa saad sõna ja sinu ülesanne on leida kõige lähemal olev hääl, mis jääb nende vahele.# >>> get_closest_vowel(\"yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel {\n    my($word) = @_;\n","canonical_solution":"sub get_closest_vowel {\n    my($word) = @_;\n    my @chars = split \/\/, $word;\n    my $vowel = '';\n    my @vowels = qw(a e i o u A E I O U);\n    my %vowel_hash = map { $_ => 1 } @vowels;\n\n    for (my $i = $#chars - 1; $i > 0; $i--) {\n        if ($vowel_hash{$chars[$i]} && !$vowel_hash{$chars[$i - 1]} && !$vowel_hash{$chars[$i + 1]}) {\n            $vowel = $chars[$i];\n            last;\n        }\n    }\n\n    return $vowel;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_119","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Tagasta \"Jah\", kui on võimalik teha hea string, ja tagasta \"Ei\", kui ei ole.# \"()) \" ei ole. # Näiteks: string '(((() ' on hea, samas kui string # Kiir S loetakse heaks, kui ja ainult kui kõik S  paranteesid on# Mõne korra, et tulemuseks on hea string.# Teie töö on kontrollida, kas on võimalik ühendada kaks kiudu.# ainult sulgedes \" (\") \" või \" (\") \" .# Sa saad kahe string'i array'i, mõlemad stringid koosnevad avatustest.# >>> match_parens([\"()(\", \")\"])\n# \"Yes\"\n# >>> match_parens([\")\", \")\"])\n# \"No\"\nsub match_parens {\n    my($lst) = @_;\n","canonical_solution":"sub match_parens {\n    my($lst) = @_;\n    my ($a, $b) = @$lst;\n    \n    # Helper to check if a string is good (i.e., parentheses balanced)\n    sub is_good {\n        my ($str) = @_;\n        my $balance = 0;\n        for my $ch (split \/\/, $str) {\n            $balance++ if $ch eq '(';\n            $balance-- if $ch eq ')';\n            return 0 if $balance < 0; # Too many closing parens\n        }\n        return $balance == 0; # Balanced if zero\n    }\n    \n    # Check both combinations\n    return \"Yes\" if is_good($a . $b) || is_good($b . $a);\n    return \"No\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \")\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")())\", \"(()()(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"()\", \"())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"((((\", \"((())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(\", \")(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \"(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_120","nl":"est_Latn","pl":"pl","prompt":"# Näide 1: # pikkusega k, mille maksimaalne arv on k ar.# Andes tervearvude massiivi arr ja positiivse tervenaar k, tagasta sorteeritud massiiv # >>> maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr, $k) = @_;\n","canonical_solution":"sub maximum {\n    my($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;  # Sort in descending order\n    my @result = sort { $a <=> $b } @sorted[0..$k-1];  # Take first k elements and sort them\n    return \\@result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_121","nl":"est_Latn","pl":"pl","prompt":"# Näited # Kui on antud mittetühi täisarv, siis tagasta kõik paarsed elemendid, mis on paaris. # >>> solution([5, 8, 7, 1])\n# 12\n# >>> solution([3, 3, 3, 3, 3])\n# 9\n# >>> solution([30, 13, 24, 321])\n# 0\nsub solution {\n    my($lst) = @_;\n","canonical_solution":"sub solution {\n    my($lst) = @_;\n    my $sum = 0;\n    for (my $i = 0; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 != 0;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n        if(eq_deeply($candidate->([5, 8, 7, 1]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 24, 321]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 9]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 23, 32]),23)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 13, 2, 9]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_122","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Arri esimese k elementide nimekirjast kõige rohkem kahe numbriga elementide summa. # Kui antud on mittetulge array terved arvud arr ja terved arv k, tagasta # >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\nsub add_elements {\n    my($arr, $k) = @_;\n","canonical_solution":"sub add_elements {\n    my ($arr, $k) = @_;\n    my $sum = 0;\n    for my $i (0..$k-1) {\n        $sum += $arr->[$i] if $arr->[$i] >= -99 && $arr->[$i] <= 99;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_elements;\n        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1], 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_123","nl":"est_Latn","pl":"pl","prompt":"# get_odd_collatz(5) tagastab [1, 5] # Kollatzi järjekord 5 jaoks on [5, 16, 8, 4, 2, 1], seega on paarid numbrid ainult 1 ja 5. # Näiteks: # 2. tagastatud massiiv järjestatud järjestus kasvab.# 1. Kollatz ((1) on [1]. # Märkus: # eeldus on, et ükskõik millise väärtusega n, siis järjekord jõuab alati 1.# Kui eelmine liige on paars, siis järgmine liige on 3 korda eelmine.# eelnev liige on võrdne järgmise liigiga: kui eelnev liige on paaris, siis järgmine liige on pool # alustada mis tahes positiivse täisarvuga n. Siis saadakse iga liige # Collatzi oletus on matemaatika oletus, mis puudutab defineeritud järjekorda.# Andes positiivse terviku n, tagasta sorteeritud array, mis on paarsed numbrid Collatz järjekorras. # >>> get_odd_collatz(5)\n# [1, 5]\nsub get_odd_collatz {\n    my($n) = @_;\n","canonical_solution":"sub get_odd_collatz {\n    my ($n) = @_;\n    my %odd_numbers;\n    \n    while ($n != 1) {\n        $odd_numbers{$n} = 1 if $n % 2 != 0;\n        if ($n % 2 == 0) {\n            $n = $n \/ 2;\n        } else {\n            $n = 3 * $n + 1;\n        }\n    }\n    $odd_numbers{1} = 1;\n    \n    return sort { $a <=> $b } keys %odd_numbers;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_odd_collatz;\n        if(eq_deeply($candidate->(14),[1, 5, 7, 11, 13, 17])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[1, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_124","nl":"est_Latn","pl":"pl","prompt":"# 4. Kuupäev peaks olema kujul: mm-dd-aaaa # 3. Kuud ei tohi olla väiksemad kui 1 ja suuremad kui 12.# 2. Päevad ei ole kuu 1,3,5,7,8,10,12 puhul vähem kui 1 või rohkem kui 31 päeva ja kuu 4,6,9,11 puhul vähem kui 1 või rohkem kui 30 päeva.# 1. kuupäeva string ei ole tühi.# Päev on kehtiv, kui kõik järgmised reeglid on täidetud: # tagastab 1, kui kuupäev on kehtiv, muidu \"\". # Sa pead kirjutama funktsiooni, mis valideerib antud kuupäeva string ja # >>> valid_date(\"03-11-2000\")\n# 1\n# >>> valid_date(\"15-01-2012\")\n# \"\"\n# >>> valid_date(\"04-0-2040\")\n# \"\"\n# >>> valid_date(\"06-04-2020\")\n# 1\n# >>> valid_date(\"06\/04\/2020\")\n# \"\"\nsub valid_date {\n    my($date) = @_;\n","canonical_solution":"sub valid_date {\n    my ($date) = @_;\n    \n    # Check if date is empty\n    return '' if !$date;\n    \n    # Date pattern for mm-dd-yyyy\n    if ($date =~ \/^(\\d{2})-(\\d{2})-(\\d{4})$\/) {\n        my ($month, $day, $year) = ($1, $2, $3);\n        \n        # Check month validity\n        return '' if $month < 1 || $month > 12;\n        \n        # Check day validity based on the month\n        my %days_in_month = (\n            1 => 31, 2 => 29, 3 => 31, 4 => 30,\n            5 => 31, 6 => 30, 7 => 31, 8 => 31,\n            9 => 30, 10 => 31, 11 => 30, 12 => 31\n        );\n        \n        return '' if $day < 1 || $day > $days_in_month{$month};\n        \n        # If all conditions are satisfied, return 1\n        return 1;\n    }\n    \n    # If date does not match the pattern, return ''\n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n        if(eq_deeply($candidate->(\"03-11-2000\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-0-2040\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-04-2020\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"03-32-2011\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-06-2005\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"21-31-2000\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04122003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"20030412\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04-12\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-2003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_125","nl":"est_Latn","pl":"pl","prompt":"# Näited # tähestik, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 # peaks olema jagatud punktidega ',' kui punktide puudumine on olemas, siis tagastate väikeste tähtede arvu paarses järjekorras # Andes sõnade rida, tagastage valgespaasiga jagatud sõnade massiiv, kui tekstis ei ole valgespaasid.# >>> split_words(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"abcdef\")\n# 3\nsub split_words {\n    my($txt) = @_;\n","canonical_solution":"sub split_words {\n    my($txt) = @_;\n    \n    # Check if whitespace exists in the string\n    if ($txt =~ \/\\s\/) {\n        my @words = split(\/\\s+\/, $txt);\n        return \\@words;\n    }\n    # If no whitespace, check for commas\n    elsif ($txt =~ \/,\/) {\n        my @words = split(\/,\/, $txt);\n        return \\@words;\n    }\n    # If neither whitespace nor commas exist, calculate odd ordered lowercase letters\n    else {\n        my @chars = split(\/\/, $txt);\n        my $count = 0;\n        foreach my $char (@chars) {\n            if ($char ge 'a' && $char le 'z' && (ord($char) - ord('a')) % 2 == 0) {\n                $count++;\n            }\n        }\n        return $count;\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_words;\n        if(eq_deeply($candidate->(\"Hello world!\"),[\"Hello\", \"world!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,world!\"),[\"Hello\", \"world!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world,!\"),[\"Hello\", \"world,!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaabb\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaBb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_126","nl":"est_Latn","pl":"pl","prompt":"# Näited # number, return '\". Oletame, et negatiivseid numbreid ei ole ja ainult tervikarvu. # Kui mastaabil on rohkem kui üks sama dubleeritud versioon, siis on see sama.# Andes numbriarray, tagastab kas need on sorteeritud või mitte.# >>> is_sorted([5])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5])\n# \"\"\n# >>> is_sorted([1, 2, 3, 4, 5, 6])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n# \"\"\n# >>> is_sorted([1, 2, 2, 3, 3, 4])\n# 1\n# >>> is_sorted([1, 2, 2, 2, 3, 4])\n# \"\"\nsub is_sorted {\n    my($lst) = @_;\n","canonical_solution":"sub is_sorted {\n    my($lst) = @_;\n    my %count;\n    \n    for (my $i = 0; $i < @$lst; $i++) {\n        $count{$lst->[$i]}++;\n        \n        # Check for more than one duplicate\n        if ($count{$lst->[$i]} > 2) {\n            return '';\n        }\n        \n        # Check if the array is not sorted\n        if ($i > 0 && $lst->[$i] < $lst->[$i - 1]) {\n            return '';\n        }\n    }\n    \n    return 1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n        if(eq_deeply($candidate->([5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_127","nl":"est_Latn","pl":"pl","prompt":"# [Sisse-\/väljund]proovid: # Kui kaks intervalli ei lõiku, tagastage \"Ei\".# Vastasel juhul tagastatakse \"Ei\". # Kui ristmik on algarv, tuleb esitada vastus \"JÄR\", # mille pikkus on 1, mis ei ole algarv.# Näiteks, intervallide (1, 3), (2, 4) ristmik on (2, 3) # Intervall on algarv.# Teie ülesanne on määrata, kas nende kahe ristmikupikkus on # Iga antud ajavahemiku puhul eeldatakse, et selle algus on väiksem või võrdne selle lõpuga. # hõlmab nii algust kui ka lõppu. # Andmed on suletud, mis tähendab, et intervalli (algus, lõpp) # kus iga interval on paar tervikarvu. Näiteks interval = (algus, lõpp) = (1, 2).# Saad kaks vaheaega.# >>> intersection([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection([-1, 1], [0, 4])\n# \"NO\"\n# >>> intersection([-3, -1], [-5, 5])\n# \"YES\"\nsub intersection {\n    my($interval1, $interval2) = @_;\n","canonical_solution":"sub is_prime {\n    my $num = shift;\n    return 0 if $num <= 1;\n    for my $i (2 .. sqrt($num)) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub intersection {\n    my ($interval1, $interval2) = @_;\n\n    my $start1 = $interval1->[0];\n    my $end1 = $interval1->[1];\n    my $start2 = $interval2->[0];\n    my $end2 = $interval2->[1];\n\n    my $intersection_start = ($start1 > $start2) ? $start1 : $start2;\n    my $intersection_end = ($end1 < $end2) ? $end1 : $end2;\n\n    if ($intersection_start <= $intersection_end) {\n        my $intersection_length = $intersection_end - $intersection_start;\n        return is_prime($intersection_length) ? \"YES\" : \"NO\";\n    }\n\n    return \"NO\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1], [0, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, 2], [-4, 0]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 5]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -2], [-3, -2]),\"NO\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_128","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Märkus: tagastab tühja arvi undef. # Iga numbri mastaabis, mis on esindatud 1, -1 või 0-ga.# Täisarvu suuruste summa korrutatud kõigi märkide korrutisega # Sa saad array arr täisarvu ja sa pead tagasi # >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n# 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n","canonical_solution":"sub prod_signs {\n    my($arr) = @_;\n    return undef if scalar(@$arr) == 0;\n\n    my $sum_magnitudes = 0;\n    my $product_signs = 1;\n\n    for my $num (@$arr) {\n        $sum_magnitudes += abs($num);\n        \n        if ($num > 0) {\n            $product_signs *= 1;\n        } elsif ($num < 0) {\n            $product_signs *= -1;\n        } else {\n            $product_signs *= 0;\n        }\n    }\n\n    return $sum_magnitudes * $product_signs;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_129","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Tagastab miinimumteede läbimise rakkude väärtuste korrastatud maastiku. # Vastus on kindlasti ainulaadne. # lst_A[j] = lst_B[j]. # nii et lst_A[i] < lst_B[i] ja mis tahes j (1 <= j < i) meil on # kui lst_B, teisisõnu, on olemas täisarv indeksi i (1 <= i <= k) # Läbi (hääldame neid lst_A ja lst_B), lst_A on leksikograafiliselt vähem # Pärast väärtuste järjekorras seeriat, mis on rakud A ja B, läheb # Teekonda A (k pikkusega) loetakse väiksemaks kui teekonda B (k pikkusega), kui # Sa ei saa kaduda.# (mõõdetakse ka \"välja arvatud\")# Märkige, et k pikkusega rada tähendab, et külastatakse täpselt k rakku (mitte # raku. # Teisisõnu, sa võid minna rakkudesse, mis jagavad serva koos teiega # mis tahes rakust ja iga sammuga saad liikuda ükskõik millise naaberrakku, # Sa pead leidma minimaalse tee pikkusega k võrgus.# Inclusive esineb võrgu rakkudes täpselt üks kord. # iga võrguliige sisaldab väärtust. Iga täisarv vahemikus [1, N * N] # Kui võrgustik on N rida ja N veergu (N >= 2) ja positiivne tervikarv k, # >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    my($grid, $k) = @_;\n","canonical_solution":"sub minPath {\n    my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\n    # Create direction vectors for up, down, left, right moves\n    my @directions = ([0, 1], [1, 0], [0, -1], [-1, 0]);\n\n    # Priority queue to store paths using a lexicographically ordered array\n    my @queue;\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n            push @queue, [[$grid->[$i][$j]], $i, $j];\n        }\n    }\n\n    # Sort the initial cells based on their values to start with minimum paths\n    @queue = sort { $a->[0][0] <=> $b->[0][0] } @queue;\n\n    # Implement a breadth-first search that continues until we have a path of length k\n    while (@queue) {\n        my $current = shift @queue;\n        my ($path, $x, $y) = @$current;\n\n        # Return the first path of length k since paths are checked in lexicographical order\n        return @$path if scalar @$path == $k;\n\n        # Explore neighboring cells\n        for my $direction (@directions) {\n            my ($dx, $dy) = @$direction;\n            my ($nx, ny) = ($x + $dx, $y + $dy);\n            \n            # Check for valid cell\n            if ($nx >= 0 && $nx < $n && $ny >= 0 && $ny < $n) {\n                my @new_path = (@$path, $grid->[$nx][$ny]);\n                push @queue, [\\@new_path, $nx, $ny];\n            }\n        }\n        # Keep the queue ordered by lexicographical order of paths\n        @queue = sort { \n            my ($a_path, $b_path) = ($a->[0], $b->[0]);\n            for my $i (0..$#$a_path) {\n                return $a_path->[$i] <=> $b_path->[$i] if $a_path->[$i] != $b_path->[$i];\n            }\n        } @queue;\n    }\n}\n\n# Example usage:\n#print join(\", \", minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)), \"\\n\";  # [1, 2, 1]\n#print join(\", \", minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)), \"\\n\";  # [1]","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_130","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Tribonacci järjekorra esimesed n + 1 numbrid. # Saate mitte-negatiivse teranumbri n, sa pead tagastama massiiv # = 2 + 3 + 3 = 8 # tri(3) = tri(2) + tri(1) + tri(4) # tri(4) = 3 # tri(2) = 1 + (2 \/ 2) = 2 # Näiteks: # tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), kui n on paars. # tri (n) = 1 + n \/ 2, kui n on paaris. # tri(1) = 3 # Tribonacci järjekord on määratletud korduvuse järgi: # Kuid mida inimesed ei tea, on Tribonacci järjekord.# Kõik teavad Fibonacci järjekorda, seda uurisid matemaatikud põhjalikult aastal # >>> tri(3)\n# [1, 3, 2, 8]\nsub tri {\n    my($n) = @_;\n","canonical_solution":"sub tri {\n    my ($n) = @_;\n    my @sequence = (3);  # starting with tri(1) = 3\n\n    for my $i (1 .. $n) {\n        if ($i % 2 == 0) {\n            push @sequence, 1 + $i \/ 2;\n        } else {\n            my $val = $sequence[$i - 1] + $sequence[$i - 2] + ($i + 1 <= $n ? (1 + ($i + 1) \/ 2) : 0);\n            push @sequence, $val;\n        }\n    }\n\n    return @sequence;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n        if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_131","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Tagastab 0 kui kõik numbrid on paarsed. # Andes positiivse terviku n, tagastage paarsuguste numbrite korrutis. # >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n","canonical_solution":"my @digits = split \/\/, $n;\n    my $product = 1;\n    my $has_odd = 0;\n\n    foreach my $digit (@digits) {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n            $has_odd = 1;\n        }\n    }\n\n    return $has_odd ? $product : 0;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_132","nl":"est_Latn","pl":"pl","prompt":"# kus vähemalt üks järjekorras olev vahesein on sisseehitatud. # Funktsioon peaks andma 1 siis ja ainult siis, kui on olemas kehtiv sulamite järjekord.# Looge funktsioon, mis võtab sisendina ainult ruudukujulised vaheseinad. # >>> is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"[][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n# 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n","canonical_solution":"sub is_nested {\n    my ($string) = @_;\n    my @stack;\n\n    for my $char (split \/\/, $string) {\n        if ($char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ']') {\n            if (@stack && $stack[-1] eq '[') {\n                pop @stack;\n                return 1 if @stack; # Check for nesting\n            } else {\n                return \"\"; # Unbalanced brackets\n            }\n        }\n    }\n\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n        if(eq_deeply($candidate->(\"[[]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]][[\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_133","nl":"est_Latn","pl":"pl","prompt":"# Näited: # ümardada iga elemendi massiivis kõigepealt ülemisele int ((Tehas). # Sa pead tagastama antud massiivis ruutitud numbrite summa, # Sa saad arvuti numberade array.# >>> lst([1.0, 2.0, 3.0])\n# 14\n# >>> lst([1.0, 4.0, 9.0])\n# 98\n# >>> lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst([1.4, 4.2, 0.0])\n# 29\n# >>> lst([-2.4, 1.0, 1.0])\n# 6\nsub sum_squares {\n    my($lst) = @_;\n","canonical_solution":"sub sum_squares {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        my $ceil_num = int($num) + ($num > int($num) ? 1 : 0);\n        $sum += $ceil_num ** 2;\n    }\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2, 0.0]),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0, 2.0]),10230)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 4.6, 6.3]),75)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, 1.0, 0.0]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_134","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Märkus: \"sõna\" on ruumidega eraldatud tähemärkide rühm. # sõnade osa ja \" ' muidu. # antud string on tähestikuline tähis ja ei ole # Looge funktsioon , mis annab 1 , kui viimane tähis on # >>> check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n","canonical_solution":"sub check_if_last_char_is_a_letter {\n    my ($txt) = @_;\n    $txt =~ s\/\\s+$\/\/; # Trim trailing spaces\n    return '' if $txt eq ''; \n\n    if ($txt =~ \/([^a-zA-Z])([a-zA-Z])$\/ && $1 eq ' ') {\n        return 1;\n    }\n    \n    return '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_135","nl":"est_Latn","pl":"pl","prompt":"# Näited: # dubleeritud väärtused.# kui sellist elementi ei ole, siis tagastatakse -1. Andetud massiiv ei sisalda # ei ole suurem ega võrdne vahetult selle ees oleva elemendiga.# Looge funktsioon, mis tagastab elemendi suurima indeksi, mille # >>> can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange([1, 2, 3])\n# -1\nsub can_arrange {\n    my($arr) = @_;\n","canonical_solution":"sub can_arrange {\n    my ($arr) = @_;\n    for my $i (1 .. $#$arr) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n            return $i;\n        }\n    }\n    return -1;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_136","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Kui negatiivset või positiivset tervikarvu ei ole, tagastatakse need undef-ina. # positiivsete tervete arvud massiivis.# Suurim negatiivne tervik arv ja b on väiksem.# Looge funktsioon, mis annab tagasi massiiv (a, b), kus \"a\" on # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n# [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers {\n    my($lst) = @_;\n","canonical_solution":"sub largest_smallest_integers {\n    my ($lst) = @_;\n    my ($largest_neg, $smallest_pos);\n\n    foreach my $num (@$lst) {\n        if ($num < 0) {\n            $largest_neg = $num if !defined($largest_neg) || $num > $largest_neg;\n        } elsif ($num > 0) {\n            $smallest_pos = $num if !defined($smallest_pos) || $num < $smallest_pos;\n        }\n    }\n    \n    return ($largest_neg, $smallest_pos);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),[undef, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_137","nl":"est_Latn","pl":"pl","prompt":"# Märkus: Kui reaalne number esitatakse stringina, võib ujuvpunkt olla . või , # Tagastab undef, kui väärtused on võrdsed. # reaalnumbrid ja annab suurema muutuja tagasiside antud muutujatüübis. # Looge funktsioon, mis võtab terved arvud, float'id või stringi, mis esindavad # >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one(\"1\", 1)\n# undef\nsub compare_one {\n    my($a, $b) = @_;\n","canonical_solution":"sub compare_one {\n    my ($a, $b) = @_;\n\n    # Convert potential string numbers with ',' into float representation\n    $a =~ s\/,\/.\/g if $a =~ \/,\/;\n    $b =~ s\/,\/.\/g if $b =~ \/,\/;\n\n    # Auto-detect type by checking if string has non-numeric parts\n    my $a_is_num = $a =~ \/^\\d+(\\.\\d+)?$\/;\n    my $b_is_num = $b =~ \/^\\d+(\\.\\d+)?$\/;\n\n    if ($a_is_num && $b_is_num) {\n        # Compare as numbers\n        if ($a < $b) {\n            return $b;\n        } elsif ($a > $b) {\n            return $a;\n        } else {\n            return undef;\n        }\n    } else {\n        # Compare as strings\n        if ($a lt $b) {\n            return $b;\n        } elsif ($a gt $b) {\n            return $a;\n        } else {\n            return undef;\n        }\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare_one;\n        if(eq_deeply($candidate->(1, 2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2.5),2.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, \"2,3\"),\"2,3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5,1\", \"6\"),\"6\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"2\"),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", 1),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_138","nl":"est_Latn","pl":"pl","prompt":"# Näide # Hinnake, kas antud number n saab kirjutada täpselt nelja positiivse paari numbri summana # >>> is_equal_to_sum_even(4)\n# \"\"\n# >>> is_equal_to_sum_even(6)\n# \"\"\n# >>> is_equal_to_sum_even(8)\n# 1\nsub is_equal_to_sum_even {\n    my($n) = @_;\n","canonical_solution":"sub is_equal_to_sum_even {\n    my($n) = @_;\n\n    # A number can be expressed as the sum of four positive even numbers\n    # if and only if it is greater than or equal to 8 and is even\n    if ($n >= 8 && $n % 2 == 0) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_equal_to_sum_even;\n        if(eq_deeply($candidate->(4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_139","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # kus n > 0 # Brasiilia_faktoriala (n) = n! * (n-1)! * (n-2)! * ... * 1! # Brasiilia faktoriik on määratletud järgmiselt: # >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\nsub special_factorial {\n    my($n) = @_;\n","canonical_solution":"sub special_factorial {\n    my($n) = @_;\n    my $result = 1;\n    \n    for my $i (1 .. $n) {\n        $result *= factorial($i);\n    }\n    \n    return $result;\n}\n\nsub factorial {\n    my($num) = @_;\n    my $fact = 1;\n\n    for my $i (1 .. $num) {\n        $fact *= $i;\n    }\n\n    return $fact;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_140","nl":"est_Latn","pl":"pl","prompt":"# siis asendatakse kõik järjestikused vahekaared - # ja kui stringis on rohkem kui kaks järjestikust vahemaad, # Tekstiriba puhul asendatakse kõik ruud allkirjaga # >>> fix_spaces(\" Example\")\n# \"Example\"\n# >>> fix_spaces(\" Example 1\")\n# \"Example_1\"\n# >>> fix_spaces(\" Example 2\")\n# \"_Example_2\"\n# >>> fix_spaces(\" Example 3\")\n# \"_Example-3\"\nsub fix_spaces {\n    my($text) = @_;\n","canonical_solution":"sub fix_spaces {\n    my($text) = @_;\n    $text =~ s\/ {3,}\/-\/g;   # Replace 3 or more spaces with a hyphen\n    $text =~ s\/ \/_\/g;       # Replace remaining spaces with underscores\n    return $text;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fix_spaces;\n        if(eq_deeply($candidate->(\"Example\"),\"Example\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir Hanif \"),\"Mudasir_Hanif_\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Exa   mple\"),\"Exa-mple\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_141","nl":"est_Latn","pl":"pl","prompt":"# Näited: # - Altsõng pärast täppe peaks olema üks neist: ['txt', 'exe', 'dll'] # ladinakeelne tähestik (\"a-z\" ja \"A-Z\"). # - Alusahe enne täppe ei tohiks olla tühi ja see algab tähega # - Faili nimi sisaldab täpselt ühte täppi.# - Andmefaili nimes ei tohi olla rohkem kui kolm numbrit (\"0\" - \"9\"). # on täidetud: # Andmefaili nime peetakse kehtivaks ainult siis, kui kõik järgmised tingimused on täidetud # \"Jah\", kui faili nimi on kehtiv, ja tagastab \"Ei\", kui see ei ole. # Looge funktsioon, mis võtab faili nime esindava string'i ja annab # >>> file_name_check(\"example.txt\")\n# \"Yes\"\n# >>> file_name_check(\"1example.dll\")\n# \"No\"\nsub file_name_check {\n    my($file_name) = @_;\n","canonical_solution":"sub file_name_check {\n    my($file_name) = @_;\n    \n    # Check if there's exactly one dot and split the string\n    my @parts = split(\/\\.\/, $file_name);\n    return 'No' unless scalar(@parts) == 2;\n\n    # Extract the name and the extension\n    my ($name, $extension) = @parts;\n\n    # Check if the extension is valid\n    return 'No' unless $extension =~ \/^(txt|exe|dll)$\/;\n\n    # Check if the name starts with a letter\n    return 'No' unless $name =~ \/^[a-zA-Z]\/;\n\n    # Check the number of digits in the name\n    my $digit_count = () = $name =~ \/[0-9]\/g;\n    return 'No' if $digit_count > 3;\n\n    # If all conditions are met, return 'Yes'\n    return 'Yes';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&file_name_check;\n        if(eq_deeply($candidate->(\"example.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1example.dll\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s1sdf3.asd\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K.dll\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MY16FILE3.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"His12FILE94.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_Y.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"?aREYA.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\/this_is_valid.dll\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.wow\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txtexe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#this2_i4s_5valid.ten\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"@this1_is6_valid.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_12valid.6exe4.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"all.exe.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_No.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is3youfault.txt\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"no_one#knows.dll\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1I563_Yes3.exe\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I563_Yes3.txtt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final..txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final132\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_f4indsartal132.\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\".txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"s.\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_142","nl":"est_Latn","pl":"pl","prompt":"# Näited: # muutma mastaabis neid sisendeid, mille indeksi ei ole 3 või 4 korrutis.# 3 korrutis ja teeb tervikrupi kui selle indeks on 4 korrutis ja mitte 3 korrutis.# See funktsioon võtab tervearvude massiiv. Kõigi massiivis olevate sisendite puhul peab funktsioon kvadrateerima terakeele sisendit, kui selle indeks on a # \" # >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\nsub sum_squares {\n    my($lst) = @_;\n","canonical_solution":"sub sum_squares {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    for my $i (0 .. @$lst - 1) {\n        if ($i % 3 == 0) {\n            $sum += $lst->[$i] ** 2;\n        } elsif ($i % 4 == 0) {\n            $sum += $lst->[$i] ** 3;\n        } else {\n            $sum += $lst->[$i];\n        }\n    }\n\n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1, 2, 3]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 9]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_143","nl":"est_Latn","pl":"pl","prompt":"# Näide 1: # sõnade järjekord uues rida peaks olema sama, mis algses. # mille pikkused on algarvud, # ja sa pead tagastama rea, mis sisaldab sõnu algsest lausest, # lause sisaldab mõningaid lausega eraldatud sõnu, # Sa saad rea, mis esindab lause, # >>> words_in_sentence(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> words_in_sentence(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\nsub words_in_sentence {\n    my($sentence) = @_;\n","canonical_solution":"sub words_in_sentence {\n    my($sentence) = @_;\n    \n    # Function to check if a number is prime\n    sub is_prime {\n        my $num = shift;\n        return 0 if $num < 2;\n        for (my $i = 2; $i * $i <= $num; ++$i) {\n            return 0 if $num % $i == 0;\n        }\n        return 1;\n    }\n    \n    my @words = split(' ', $sentence);\n    my @prime_length_words;\n    \n    foreach my $word (@words) {\n        my $length = length($word);\n        if (is_prime($length)) {\n            push(@prime_length_words, $word);\n        }\n    }\n    \n    return join(' ', @prime_length_words);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_in_sentence;\n        if(eq_deeply($candidate->(\"This is a test\"),\"is\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lets go for swimming\"),\"go for\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"there is no place available here\"),\"there is no place\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hi I am Hussein\"),\"Hi am Hussein\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go for it\"),\"go for it\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here is\"),\"is\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_144","nl":"est_Latn","pl":"pl","prompt":"# Sa võid eeldada, et x ja n on kehtivad murd, ja nimetaja ei ole null.# <lugeja>\/<nimetaja>, kus nii lugeja kui nimetaja on positiivsed terved arvud. # nii x kui ka n on murde representatsioon ja on järgmises vormis:# x * n. Funktsioon annab 1 kui x * n on tervene arv ja ' ' # Teie ülesanne on rakendada funktsiooni, mis lihtsustab väljendit # >>> simplify(\"1\/5\", \"5\/1\")\n# 1\n# >>> simplify(\"1\/6\", \"2\/1\")\n# \"\"\n# >>> simplify(\"7\/10\", \"10\/2\")\n# \"\"\nsub simplify {\n    my($x, $n) = @_;\n","canonical_solution":"sub simplify {\n    my ($x, $n) = @_;\n    \n    # Parse the fractions\n    my ($x_num, $x_den) = split('\/', $x);\n    my ($n_num, $n_den) = split('\/', $n);\n    \n    # Cross-multiply to find the product of the fractions\n    # x * n = (x_num * n_num) \/ (x_den * n_den)\n    my $prod_num = $x_num * $n_num;\n    my $prod_den = $x_den * $n_den;\n    \n    # Check if the product is a whole number\n    return ($prod_num % $prod_den == 0) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n        if(eq_deeply($candidate->(\"1\/5\", \"5\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/6\", \"2\/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5\/1\", \"3\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7\/10\", \"10\/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/10\", \"50\/10\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7\/2\", \"4\/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11\/6\", \"6\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/3\", \"5\/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5\/2\", \"3\/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/4\", \"8\/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2\/4\", \"4\/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/5\", \"5\/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\/5\", \"1\/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_145","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Järjestada need algse massiivi indeksi järgi.# Märkus: kui on mitu punkti, mille numbrite summa on sarnane, # nende numbrite summa järgi. # Kirjuta funktsioon, mis sordib antud teraste arvude massiivi.# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n    my($nums) = @_;\n","canonical_solution":"sub order_by_points {\n    my ($nums) = @_;\n    \n    # Function to calculate the sum of the digits of a number\n    sub digit_sum {\n        my $num = shift;\n        my $sum = 0;\n        $sum += $_ for split \/\/, abs($num);\n        return $sum;\n    }\n\n    # Sort the array first by sum of digits, then by index for ties\n    my @sorted = sort {\n        digit_sum($a) <=> digit_sum($b) ||\n        $a <=> $b\n    } @$nums;\n\n    return \\@sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_146","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # numbri esimene ja viimane täht on paars (1, 3, 5, 7, 9). # Array elementide arv, mis on suurem kui 10 ja mõlemad # Kirjuta funktsioon , mis võtab sisse ja tagasi arvuti arvuti .# >>> specialFilter([15, -73, 14, -15])\n# 1\n# >>> specialFilter([33, -2, -3, 45, 21, 109])\n# 2\nsub specialFilter {\n    my($nums) = @_;\n","canonical_solution":"sub specialFilter {\n    my($nums) = @_;\n    my $count = 0;\n    foreach my $num (@$nums) {\n        if ($num > 10) {\n            my $str_num = abs($num) . \"\";\n            my $first_digit = substr($str_num, 0, 1);\n            my $last_digit = substr($str_num, -1, 1);\n            if ($first_digit % 2 != 0 && $last_digit % 2 != 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&specialFilter;\n        if(eq_deeply($candidate->([5, -2, 1, -5]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, -73, 14, -15]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_147","nl":"est_Latn","pl":"pl","prompt":"# Näide: # ja a[i] + a[j] + a[k] on 3-e korrutis. # Tagastab a kolmekordiste arvu (a[i], a[j], a[k]) kus i < j < k, # Iga i (1 ≤ i ≤ n) puhul on a[i] = i * i - i + 1 väärtus. # Saate positiivse tervarühma n. Te peate looma tervarühma array a pikkusega n. # >>> get_max_triples(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\nsub get_max_triples {\n    my($n) = @_;\n","canonical_solution":"sub get_max_triples {\n    my($n) = @_;\n    my @a;\n    \n    # Generate the array a\n    for my $i (1..$n) {\n        $a[$i - 1] = $i * $i - $i + 1;\n    }\n    \n    my $count = 0;\n    \n    # Check all triples (a[i], a[j], a[k]) where i < j < k\n    for my $i (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n    \n    return $count;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_148","nl":"est_Latn","pl":"pl","prompt":"# Näited # Need pole õigeid planeedi nimesid.# Funktsioon peaks tagastama tühja massiivi, kui planet1 või planet2 # Päikese lähedus.# asetsevad planeedi 1 ja planeedi 2 orbiidi vahel, sorteeritud # Funktsioon peaks andma tagasi kõik planeedid, mille orbiidid on # Kirjuta funktsioon, mis võtab kaks planeedi nime kui stringi planet1 ja planet2. # Uranus, Neptune.# on Merkuur, järgmine on Veenus, siis Maa, Mars, Jupiter, Saturn, # Meie päikesesüsteemis on kaheksa planeeti: Päikesele lähimad .# >>> bf(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nsub bf {\n    my($planet1, $planet2) = @_;\n","canonical_solution":"sub bf {\n    my ($planet1, $planet2) = @_;\n    my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\n    my %planet_indices = map { $planets[$_] => $_ } (0..$#planets);\n\n    return [] unless exists $planet_indices{$planet1} && exists $planet_indices{$planet2};\n\n    my ($start, $end) = ($planet_indices{$planet1}, $planet_indices{$planet2});\n\n    ($start, $end) = ($end, $start) if $start > $end;\n\n    return [@planets[$start+1 .. $end-1]];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n        if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Mercury\"),[\"Venus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Earth\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jupiter\", \"Makemake\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_149","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # Võite eeldada, et kõik sõnad on sama pikkused.# Funktsioon peaks tagastama sorteeritud järjestuses seeriate seeriate. # Kui kaks sõna on sama pikk, sorteerige mastaab alfabetiliselt.# peaks tagastama selle reegli järgi sorteeritud massiiv. # Järjekord peaks tõusma iga sõna pikkuse järgi.# ja see võib sisaldada dubleeritud dokumente.# Maatrikk on alati stringi maatrikk ja mitte kunagi numbrite maatrikk, # ja tagastab saadud massiiv sorteeritud järjekorras, # kustutab selle liinid, millel on paarsed pikkused, # Kirjuta funktsioon, mis võtab vastu seeria stringi parameetrina, # >>> list_sort([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\nsub sorted_list_sum {\n    my($lst) = @_;\n","canonical_solution":"sub list_sort {\n    my ($lst) = @_;\n\n    # Filter out strings with odd length\n    my @filtered = grep { length($_) % 2 == 0 } @$lst;\n\n    # Sort strings first by length, then alphabetically\n    my @sorted = sort { length($a) <=> length($b) || $a cmp $b } @filtered;\n\n    return \\@sorted;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"b\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_150","nl":"est_Latn","pl":"pl","prompt":"# Näited: # on algarv ja peaks andma y väärtuse muidu. # Lihtne programm, mis peaks tagastama x väärtuse, kui n on # >>> x_or_y(7, 34, 12)\n# 34\n# >>> x_or_y(15, 8, 5)\n# 5\nsub x_or_y {\n    my($n, $x, $y) = @_;\n","canonical_solution":"sub is_prime {\n    my $num = shift;\n    return 0 if $num < 2;\n    for (my $i = 2; $i * $i <= $num; $i++) {\n        return 0 if $num % $i == 0;\n    }\n    return 1;\n}\n\nsub x_or_y {\n    my ($n, $x, $y) = @_;\n    return is_prime($n) ? $x : $y;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&x_or_y;\n        if(eq_deeply($candidate->(7, 34, 12),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 5),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 33, 5212),33)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1259, 3, 52),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7919, -1, 12),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3609, 1245, 583),583)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(91, 56, 129),129)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 34, 1234),1234)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 0),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_151","nl":"est_Latn","pl":"pl","prompt":"# Ignoreeri negatiivsed või mittetäielikud numbrid.# Andes arvutiarvu, tagastage arvutiarvude ruutkogus.# >>> double_the_difference([1, 3, 2, 0])\n# 10\n# >>> double_the_difference([-1, -2, 0])\n# 0\n# >>> double_the_difference([9, -2])\n# 81\n# >>> double_the_difference([0])\n# 0\n# If the input array is empty, return 0.\nsub double_the_difference {\n    my($lst) = @_;\n","canonical_solution":"sub double_the_difference {\n    my ($lst) = @_;\n    my $sum = 0;\n\n    foreach my $num (@$lst) {\n        if ($num =~ \/^\\d+$\/ && $num % 2 != 0) {\n            $sum += $num ** 2;\n        }\n    }\n    \n    return $sum;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_152","nl":"est_Latn","pl":"pl","prompt":"# näide: # väärtus on 0, kui see ei ole null, siis on väärtus oletuse ja tulemuse absoluutne erinevus. # Tagastab sama pikkuse array, mis näitab, kui kaugel iga oletus oli.# Saate kaks võrdse pikkusega tulemuste ja oletuste array'i, kus iga indeks näitab ühilduvust.# Teie ülesanne on kindlaks teha, kas inimene arvas õigesti välja mitmete mängude tulemused.# Kindlasti tasub seda märkida ja võrrelda.# Kui sündmus on lõpuks teada, siis on sinu tunded ja mõtted selles hetkes...# Me kõik mäletame seda tunnet, kui tulemuseks on mõni kauaoodatud...# >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\nsub compare {\n    my($game, $guess) = @_;\n","canonical_solution":"sub compare {\n    my($game, $guess) = @_;\n    my @result;\n    \n    for my $i (0..$#$game) {\n        my $difference = abs($game->[$i] - $guess->[$i]);\n        push @result, $difference;\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_153","nl":"est_Latn","pl":"pl","prompt":"# Näide: # (tõus on - 1). # tagastab \"Slices.SErviNGSliCes\", kuna \"SErviNGSliCes\" on kõige tugevam laiendus # ['SErviNGSliCes', 'Cheese', 'StuFfed'] siis peaksite # Näiteks kui teil on antud \"Slice\" kui klass ja array # Valige see, mis on järjestuses esimene.# Kui on olemas kaks või enam sama tugevuse pikendust, peaksite # formaat: ClassName.StrongestExtensionName. # Sa peaksid leidma tugevaima laienduse ja tagastama selle # laienduse nimes on tugevus esitatud fraktsiooniga CAP - SM. # laienduse nime tähed ja SM on väikeste tähemärkide arv # laienduse tugevus on järgmine: CAP on suurkirja number # Laiendusi kasutatakse lisaklasside laadimiseks.# Saate klassi nime (stringi) ja laienduste valiku.# >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n","canonical_solution":"sub Strongest_Extension {\n    my ($class_name, $extensions) = @_;\n    my $strongest = '';\n    my $max_strength = -1e9;\n\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n        my $sm = 0;\n\n        foreach my $char (split \/\/, $extension) {\n            if ($char =~ \/[A-Z]\/) {\n                $cap++;\n            } elsif ($char =~ \/[a-z]\/) {\n                $sm++;\n            }\n        }\n\n        my $strength = $cap - $sm;\n        \n        if ($strength > $max_strength) {\n            $max_strength = $strength;\n            $strongest = $extension;\n        }\n    }\n\n    return \"$class_name.$strongest\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_154","nl":"est_Latn","pl":"pl","prompt":"# Sa saad 2 sõna. Sa pead tagasi 1 kui teine sõna või mis tahes selle pöörlemised on substring esimeses sõnas # >>> cycpattern_check(\"abcd\", \"abd\")\n# \"\"\n# >>> cycpattern_check(\"hello\", \"ell\")\n# 1\n# >>> cycpattern_check(\"whassup\", \"psus\")\n# \"\"\n# >>> cycpattern_check(\"abab\", \"baa\")\n# 1\n# >>> cycpattern_check(\"efef\", \"eeff\")\n# \"\"\n# >>> cycpattern_check(\"himenss\", \"simen\")\n# 1\nsub cycpattern_check {\n    my($a, $b) = @_;\n","canonical_solution":"sub cycpattern_check {\n    my($a, $b) = @_;\n    my $len = length($b);\n\n    for my $i (0 .. $len - 1) {\n        my $rotation = substr($b, $i) . substr($b, 0, $i);\n        return 1 if index($a, $rotation) != -1;\n    }\n\n    return \"\";\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cycpattern_check;\n        if(eq_deeply($candidate->(\"xyzw\", \"xyw\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"yello\", \"ell\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"whattup\", \"ptut\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"efef\", \"fee\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abab\", \"aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"winemtt\", \"tinem\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_155","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Kui on antud täisarv, tagastab ta array, mis sisaldab vastavalt paari ja paarisummalisi numbreid. # >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n# [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n","canonical_solution":"my $evens = 0;\n    my $odds = 0;\n    $num = abs($num); # Handle negative numbers\n    foreach my $digit (split \/\/, $num) {\n        if ($digit % 2 == 0) {\n            $evens++;\n        } else {\n            $odds++;\n        }\n    }\n    return [$evens, $odds];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_156","nl":"est_Latn","pl":"pl","prompt":"# Näited: # Piirangud: 1 <= num <= 1000 # ja tagastage see väikese tähega. # Andes positiivse terviku, saada selle Rooma numbrite ekvivalent stringi kujul, # >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number) = @_;\n","canonical_solution":"my @roman_numerals = (\n        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i'],\n    );\n\n    my $result = '';\n\n    for my $pair (@roman_numerals) {\n        my ($value, $roman) = @$pair;\n        while ($number >= $value) {\n            $result .= $roman;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n        if(eq_deeply($candidate->(19),\"xix\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"ccli\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"cdxxvi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(500),\"d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"iv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"xliii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"xc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"xciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"dxxxii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(900),\"cm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"m\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_157","nl":"est_Latn","pl":"pl","prompt":"# Näide: # 90 kraadi.# Reeglatikuline kolmnurk on kolmnurk, kus üks nurk on õige või# küljed moodustavad õige nurga kolmnurga, \"\", muidu.# Kui triangel on kolme külje pikkused, siis annab 1 kui kolm # >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n","canonical_solution":"sub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    # Sort the sides to identify the potential hypotenuse\n    my @sides = sort { $a <=> $b } ($a, $b, $c);\n    # Check if the triangle satisfies Pythagorean theorem\n    return ($sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2) ? 1 : '';\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_158","nl":"est_Latn","pl":"pl","prompt":"# märgid, tagastage see, mis on leksikograafilises järjekorras esimene. # Kui mitmesugustel stringi on maksimaalne unikaalsete tähemärkide arv # Maastik sisaldab erinevaid sõnu. Tagastab sõna maksimaalse arvuga # Kirjuta funktsioon, mis võtab vastu rea rea reaid.# >>> find_max([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> find_max([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\nsub find_max {\n    my($words) = @_;\n","canonical_solution":"sub find_max {\n    my ($words) = @_;\n    my $max_word = '';\n    my $max_unique_chars = 0;\n    \n    foreach my $word (@$words) {\n        my %unique_chars = map { $_ => 1 } split \/\/, $word;\n        my $unique_count = keys %unique_chars;\n        \n        if ($unique_count > $max_unique_chars || ($unique_count == $max_unique_chars && $word lt $max_word)) {\n            $max_word = $word;\n            $max_unique_chars = $unique_count;\n        }\n    }\n    \n    return $max_word;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_159","nl":"est_Latn","pl":"pl","prompt":"# Näide: # Kui porganditest ei ole piisavalt, sööd kõik, kuid oled ikka näljane.# [kroonide arv pärast sööki] # Te peate pärast sööki tagasi andma [ söödud porgandid kokku, # Aga nüüd pead sa rohkem porgandit sööma, et päeva sööki täita.# Sa oled näljane jänes ja sa oled juba söönud teatud arvu porgandid.# >>> eat(5, 6, 10)\n# [11, 4]\n# >>> eat(4, 8, 9)\n# [12, 1]\n# >>> eat(1, 10, 10)\n# [11, 0]\n# >>> eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number, $need, $remaining) = @_;\n","canonical_solution":"sub eat {\n    my($number, $need, $remaining) = @_;\n    my $total_eaten = $number + $need;\n    if ($remaining >= $need) {\n        $remaining -= $need;\n    } else {\n        $total_eaten = $number + $remaining;\n        $remaining = 0;\n    }\n    return [$total_eaten, $remaining];\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n        if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 10, 10),[11, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 1),[5, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_160","nl":"est_Latn","pl":"pl","prompt":"# Operatorite massiivis on vähemalt üks operator ja operandite massiivis on vähemalt kaks operandi.# Operand on mittesegatiivsete teraste array.# Operatorite massiivide pikkus on võrdne operandide massiivide pikkusega miinus üks.# Märkus: # => tulemus = 9 # tulemus = 2 + 3 * 4 - 5 # array = [2, 3, 4, 5] # operatsioon['+', '*', '-'] # Näide: # Eksponentide arv (**) # Korrusete jagunemine ( \/\/) # Korrutamine ( *) # Lahendamine ( - ) # Lisamine (+) # Algeebri põhioperatsioonid:# väljend ja tagastab selle väljendit käsitleva hinnangu. # Teine mastaap on täisarvude mastaap. Kasuta neid kahte mastaapit, et algeebri ehitada.# Esimeses mastaabis on algupärased algebriteosed ja sub do_algebra {\n    my($operator, $operand) = @_;\n","canonical_solution":"sub do_algebra {\n    my ($operator, $operand) = @_;\n    my $expression = $operand->[0];\n    \n    for my $i (0 .. $#$operator) {\n        my $op = $operator->[$i];\n        my $num = $operand->[$i + 1];\n        \n        if ($op eq '\/\/') {\n            $expression = \"int($expression \/ $num)\";\n        } else {\n            $expression .= \" $op $num\";\n        }\n    }\n    \n    return eval $expression;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&do_algebra;\n        if(eq_deeply($candidate->([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\/\/\", \"*\"], [7, 3, 4]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_161","nl":"est_Latn","pl":"pl","prompt":"# Näited # Funktsioon peaks tagastama saadud stringi. # Kui string ei sisalda ühtegi tähte, siis pöörake string ümber.# Muidu jätke see nii, nagu on.# kui s[i] on tähe, pööratakse selle tähis alt üles või vastupidi, # Sa saad korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva korduva# >>> solve(\"1234\")\n# \"4321\"\n# >>> solve(\"ab\")\n# \"AB\"\n# >>> solve(\"#a@C\")\n# \"#A@c\"\nsub solve {\n    my($s) = @_;\n","canonical_solution":"sub solve {\n    my($s) = @_;\n    if ($s =~ \/[a-zA-Z]\/) {\n        $s =~ s\/([a-z])|([A-Z])\/defined $1 ? uc($1) : lc($2)\/ge;\n    } else {\n        $s = reverse($s);\n    }\n    return $s;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_162","nl":"est_Latn","pl":"pl","prompt":"# Kui \"text\" on tühi string, tagastage undef. # Andes string \"text\", tagastage selle md5 hash ekvivalent string. # >>> string_to_md5(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\nsub string_to_md5 {\n    my($text) = @_;\n","canonical_solution":"use Digest::MD5 qw(md5_hex);\n\n    if ($text eq '') {\n        return undef;\n    }\n\n    return md5_hex($text);\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_md5;\n        if(eq_deeply($candidate->(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"},{"task_id":"HumanEval_163","nl":"est_Latn","pl":"pl","prompt":"# Näiteks: # ja b, tõusvas järjekorras. # Kui on kaks positiivset tervikarvu a ja b, siis anna tagasi paarisumbrid a  vahel.# >>> generate_integers(2, 8)\n# [2, 4, 6, 8]\n# >>> generate_integers(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers(10, 14)\n# []\nsub generate_integers {\n    my($a, $b) = @_;\n","canonical_solution":"sub generate_integers {\n    my($a, $b) = @_;\n    my @result;\n    my ($start, $end) = $a < $b ? ($a, $b) : ($b, $a);\n    \n    for my $i ($start..$end) {\n        push @result, $i if $i % 2 == 0;\n    }\n    \n    return @result;\n}","tests":"use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&generate_integers;\n        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 89),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"}]