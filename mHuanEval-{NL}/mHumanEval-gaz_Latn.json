[
    {
        "task_id": "HumanEval/0",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Lakkoofsawwan tarreeffaman keessatti lakkoofsota daangaa kennaman caalaa walitti dhihaatan lama jiru yoo ta'e ilaali. Fakkeenyi: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Dogoggoraa >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Dhugaa \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Galmeen gara garaatti qoodamu kun, qubee qubee garee baay'ee qabate dha. Kaayyoon kee garee kana qubee adda addaatti gargar baasuu fi tarree isaanii deebisuu dha. Garee adda addaa madaalamaa dha (qorichi baname hundi sirriitti cufameera) fi wal keessa hin qoodamne. Sadarkaa qubee galmeessa keessa jiru kamiyyuu hin ilaalin. Fakkeenyi: >>> separate_paren_groups' ((()) (() ((()))) ' ['(() ', '(()) ', '((()) ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"Lakkoofsa daandii irra jiru tokko yoo kennamne, gara kutaa intejer (intejer guddaan lakkoofsa kennameef gadii) fi decimal (kutaa hafe yeroo hunda 1 gadii) ta'ee hir'ifamuu danda'a. Kutaa daandii irra jiru deebisi. Fakkeenyi: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"Seenaa hojiiwwan baankii irratti galmeessuu fi baasuun kan eegalu yoo ta'e, galmi kee, yeroo kamiyyuu keessatti, galiin baankii si'a tokko gadi yoo bu'e, bakka sana galmichi dhugaa deebi'uu qaba. Yoo hin taane immoo sobaa deebisuu qaba. Fakkeenyi: >>> below_zero([1, 2, 3]) Sobaa >>> below_zero([1, 2, -4, 5]) Dhugaa \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Lakkoofsa galmee galmeessaa kennamee tokkoof, giddugaleessa gonkumaa garagalu giddugaleessa daataa kanaa irratti lakkaa'a. Giddugaleessa gonkumaa garagalu giddugaleessa gonkumaa garagalu giddugaleessa gosa tokkoo fi giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddugaleessaa giddu\"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Lakkoofsa 'delimeter' jidduu wantoota walitti aananii jiran lamaan galmee galmeessaa `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g (() (()) has maximum two levels of nesting while ((())) has three. >>> parse_nested_parens (('((()) ((())) (((()) ((2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Lakkoofsa guutuu tarreefama kennamee tokkoof, tuple walumaa galatti walumaa galatti fi wal-dabalata lakkoofsa guutuu tarreefama tokko keessatti argamu deebisi. wal-dabalata duwwaa 0 fi wal-dabalata duwwaa 1 ta'uu qaba. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"Sirna lakkoofsa guutuu irraa, lakkoofsa lakkoofsa baay'ina guddaa hanga yeroo murtaa'aa keessatti argame. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"Palindrommaa gabaabaa string kennamee jalqabu argadhu. Yaadni algorithm salphaa dha: - postfix dheeressa string kennamee palindrommaa ta'e argadhu. - string reverse of a string prefix that comes before the palindromic suffix. >>> make_palindrome (('') ' ' >>> make_palindrome (('cat') 'catac' >>> make_palindrome (('cata') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Seenaan kenname paaliindiroomii ta'uu isaa qoradhu \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input is two strings a and b consisting only of 1s and 0s. XOR binary irratti raawwadhu, bu'aa isaa string godhi. >>> string_xor (('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Seenaa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa\"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Lakkoofsa guutuu a fi b lamaan keessaa wal qooduun isa guddaa deebisi >>> wal qooduun isa guddaa_wal qooduun isaa ((3, 5) 1 >>> wal qooduun isaa isa guddaa_wal qooduun isaa ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Seenaa galmeessaa keessaa duraaqaa hundaan duraaqaa gabaabaa hanga dheeraa >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"string_sequence{}'0' >>> string_sequence{}'5' '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"Sireen tokko yoo kenname, lakkoofsa qubee adda addaa meeqa (kaaseefis ta'e) akka qabu baradhu >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Galmee kana keessatti, sirba tooftaa addaa ASCII keessatti tooftaa muuziqaa agarsiisu galmeessita. Hojiin kee tarreessita sirbaa tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreessita tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta tarreeta\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"Seenaa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa\"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numerals from 'zero' to 'nine'. filannoowwan sirrii 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine' dha. string lakkoofsota xiqqaa hanga guddaa ta'anitti tarreeffaman deebisi >>> sort_numbers (('three one five') 'one three five' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"Lakkoofsawwan kennaman keessaa (bal'ina yoo xiqqaate lama) lama kan walitti dhihoo ta'an filadhaa fi deebisaa, akkasumas tartiiba (lakkoofsa xiqqaa, lakkoofsa guddaa) irratti deebisaa. >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Lakkoofsawwan tarreefaman (xiqqaate elementii lamaa) kennamee, tarreefama sanaaf jijjiiramni daandii madaalawaa akka ta'u, lakkoofsa xiqqaa ta'e 0 fi isa guddaa ta'e 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"Dheerinni string kennamee deebi'uu >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"Lakkoofsa n kennameef, lakkoofsa guddaa n wal qixxee qoodu, n irra xiqqaa ta'e argadhu >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Lakkoofsa lakkoofsa lakkoofsa guutuu kennameef lakkoofsa lakkoofsa lakkoofsa lakkoofsa xiqqaa hanga isa guddaa keessatti tarreessanii deebi'u. Lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa\"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"Dabalataan, lakkoofsa guutuu keessaa, lakkoofsa tokkoo ol kan yeroo tokko ta'an hunda ofirraa fageessaa.\"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"string kennamee, qubee xiqqaa gara guddaa fi xiqqaa gara guddaa jijjiiri. >>> flip_case ((('Hello') 'HELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Filter input list of strings only for ones that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Lamaanuu lakkoofsa gaarii galmee keessatti argatu qofa deebisi. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Lakkoofsi tokko tokko yoo prime ta'e dhugaa deebisa, yoo ta'e immoo soba. >>> is_prime ((6) False >>> is_prime ((101) True >>> is_prime ((11) True >>> is_prime ((13441) True >>> is_prime ((61) True >>> is_prime ((4) False >>> is_prime ((1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero kan deebiisu lakkoofsa xiqqaa xiqqaa qofa, baay'eetu jira yoo ta'e illee. Kana malees, find_zero list xs kan qabu lakkoofsa xiqqaa xiqqaa fi xiqqaa xiqqaa xiqqaa xiqqaa qofa waan ta'eef furmaata ni mirkaneessa. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"Poolinomii wal-xaxaa xs qabu bakka xtti madaala. xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"Hojiin kun tarree l fudhatee tarree l' deebisa, akka tarree l'tti kan l'tti wal fakkaatutti tarreewwan sadii qoodamuu hin dandeenye keessatti, yeroo tarreewwan sadii qoodamuu danda'anitti gatiin isaa gatii tarreewwan l walfakkaatanitti walqixa ta'u, garuu tarreeffama. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"Sirna adda baafamee fi adda baafame tokko keessatti element adda baafame deebisa >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Seenaa keessatti element baay'ina guddaa deebisa. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Lakkoofsa lakkoofsa 7 lakkoofsa guutuu n gadii 11 ykn 13n qoodamu keessatti mul'atu deebisi. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"Hojiin kun tarree l fudhatee tarree l' kan akka l' kan hin madaa'initti, gatiin isaa gatii madaa'ina l' waliin walfakkaata, garuu qindaa'aadha. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"as input string encoded with encode_cyclic function. string decoded deebisa. \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"string kan koodeeffame garee cicciloota qubee sadiin deebiisa. \"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib lakkoofsa n-ffaa kan lakkoofsa Fibonaachii ta'e deebisa.\"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero tartiiba lakkoofsa guutuu akka galmee fudhata. yoo tartiiba sana keessatti lakkoofsa sadii adda ta'e waliin wal bira qabamee gara saffisa saffisaatti yoo dabale dhugaa (True) deebisa, yoo hin dabale immoo soba (False) deebisa. >>> triple_sum_to_zero (([1, 3, -2, 1]) soba (False) >>> triple_sum_to_zero (([1, 3, -2, 1]) dhugaa (True) >>> triple_sum_to_zero (([1, 2, 3, 7]) soba (False) >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) dhugaa (True) >>> triple_sum_to_zero (True) [1]) soba (False)\"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"Daandii daandii dhedheeraa hin qabnee fi sirriitti qajeelaa ta'e yaadaa. konkolaattoonni n gara bitaatti gara mirgaatti deemu; yeroo walfakkaatu konkolaattoonni n gara mirgaatti gara bitaatti deemu. Konkolaattoonni lamaan walitti fagoo ta'anii jalqaban. Konkolaattoonni hundi saffisa walfakkaatuun socho'u. Konkolaataan gara bitaatti gara mirgaatti socho'u konkolaataa gara bitaatti gara mirgaatti socho'u yommuu rukutu konkolaattoonni lama walitti bu'u jedhameera. Haa ta'u malee, konkolaattonni kun hamma dhumaatti jabaa fi cimaa dha; kanaaf, akka waan walitti hin buuneetti daandii isaanii irra socho'u itti fufuu.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Seenaa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero tarree lakkoofsa guutuu akka galmee galmeessisuutti fudhata. yoo tarree sana keessatti lakkoofsa gara sagalii walitti dabalamuu danda'u lama jiraate dhugaa (True) yoo ta'e, yoo hin jiraatin immoo soba (False) deebisa. >>> pairs_sum_to_zero (([1, 3, -2, 1]) soba (False) >>> pairs_sum_to_zero (([1, 3, -2, 1]) soba (False) >>> pairs_sum_to_zero (([1, 2, 3, 7]) soba (False) >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) dhugaa (True) >>> pairs_sum_to_zero (False) [1]) soba (False)\"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Jijjiirama lakkoofsa lakkoofsa galmeessaa x gara lakkoofsa lakkoofsa lakkoofsaatti jijjiiri. Erga jijjiiramni raawwatamee booda bakka bu'iinsa qubee deebisi. lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa\"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Daangaa qabiyyee fi ol'aanaa daangaa daangaa daangaa al-guddatuun argama. >>> triangle_area ((5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Sirni lakkoofsa Fib4 sirni lakkoofsa Fibbonaachii wajjin walfakkaataadha. Sirni lakkoofsa kanaa akka armaan gadiitti ibsameera: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Sirna lakkoofsa fib4 keessaa akkaataa itti fayyadamtan barreessaa. Deebi'uu hin fayyadaminaa. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"Giddugaleessa deebi'aa elementii tarree l. >>> gidduu galeessa (([3, 1, 2, 4, 5]) 3 >>> gidduu galeessa (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"Checks if given string is a palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Deebi'ii 2^n modulo p (namoota lakkoofsaatiin beekamaa ta'u). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"as input string encoded with encode_shift function. string decoded deebisa. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"alfabeticha keessatti qubee hunda 5'n sochoosuutiin string kan koodifame deebisa.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels function is a function that takes string and returns string without vowels. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Lamaan lakkoofsota tarree l keessatti argaman hundi daangaa t gadi yoo ta'an dhugaa deebisa. >>> daangaa_kanaa gadii{[1, 2, 4, 10], 100) Dhugaa >>> daangaa_kanaa gadii{[1, 20, 4, 10], 5) Soba \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Lakkoofsa lama x fi y walitti ida'i >>> dabalata ((2, 3) 5 >>> dabalata ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"Dubbiin lama qubee walfakkaatu qaba yoo ta'e ilaali. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddddabc') Dhugaa >>> same_chars (('abcd', 'dddddddddabc') Dhugaa >>> same_chars (('dddddddabc', 'abcd') Dhugaa >>> same_chars (('eabcd', 'dddddddddabc') Soba >>> same_chars ((('abcd', 'dddddddabddce') Soba >>> same_chars (('eabcdzzzz', 'dddzzzzdddabc') Soba \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"Lakkoofsa Fibonaachii n-ffaa deebisi. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Deebi'ee Dhugaan kan argatu yoo ta'e, wantoonni tarree kanaa akkaataan itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha. >>> akkaataa itti dabalanii ykn hir'atanidha.\"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Waltajjiiwwan lamaaf wal-fakkaatan adda baafaman deebisi. >>> wal-fakkaatan (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> wal-fakkaatan (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Faaktora guddaa n irra jiru deebisi. N > 1 haa ta'u fi isa duraa miti haa jennu. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n hojii lakkoofsa 1 hanga n walitti ida'uudha. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Deebiin derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"Sirni lakkoofsa FibFib, sirni lakkoofsa Fibbonaachii wajjin walfakkaatu kan akka armaan gadiitti ibsameedha: fibfib ((0) == 0 fibfib ((1) == 0 fibfib ((2) == 1 fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). Sirna lakkoofsa fibfib keessaa wal-fakkaata n-ffaa akka gaariitti qindeessuuf please function barreessaa. >>> fibfib ((1) 0 >>> fib ((5) 4 >>> fib fib ((8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"Hojiin vowels_count jedhamu kan qubee jechoota akka galmeessituu fudhatu fi lakkoofsa vowels string keessa jiran deebisu barreessi. Vowels kan asitti argaman 'a', 'e', 'i', 'o', 'u' dha. Asitti, 'y' kan vowel ta'us, kan dhuma jechaa ta'u qofa dha. Fakkeenyi: >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"Haalawwan qorannaa dabalataa dabaluu. \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Sirna dabaree jijjiiruun lakkoofsa guutuu x, lakkoofsa gara mirgaa jijjiiruun bu'aa isaa akka stringitti deebisi. Yoo jijjiiruun > lakkoofsa lakkoofsa lakkoofsa, lakkoofsa lakkoofsa jijjiiruun. >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"Hojii Hojii kan akka galmee string fudhatu fi lakkoofsa lakkoofsa ASCII koodota ol'aanaa qofa deebisu barreessuu. Fakkeenyota: digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"Hojii kana keessatti, lakkoofsa appii fi appilikeeshinii kan dabalanii jiran kan agarsiisu fiigicha isiniif kennama. daabban kun appii, appilikeeshinii fi firii maangoo qaba. lakkoofsa appii fi appii waliigalaa kan agarsiisu fiigicha fi lakkoofsa guutuu kan daabban lakkoofsa firii maangoo daabban deebisaa. fakkeenyaaf: fruit_distribution\"5(apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 appii fi 1 appilikeeshinii\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 appii fi 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 appii fi 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"Array a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [small_value, its index], If there are no even values or the given array is empty, return []. Example1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index. Example2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest even index. Example3: Input: [] Output: [4:] Input: [5, 3, 4, 2] Output: [0, 0] Output: 1 node that has smallest index. If there are no even values or the given array is empty, return [].\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''Lakkoofsa guutuu duwwaa hin taane tokko isiniif kennameera. Lakkoofsa guutuu guddaa kan sagalii ol ta'ee fi baay'ina lakkoofsa guutuu sanaan ol ta'e ykn wal qixxaatu deebisaa. Baay'ina lakkoofsa guutuu kan lakkoofsa lakkoofsa lakkoofsa guutuu sanaan ol ta'e ykn wal qixxaatu. Yoo gatii akkasii hin jirre, deebi'i -1. Fakkeenyi: search (([4, 1, 2, 2, 3, 1]) == 2 search (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search (([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''Lakkoofsa guutuu yoo kennamee, tartiiba addaatiin tartiiba deebi'a. Tartiiba adda ta'e, yeroo gatii xiqqaa irraa jalqabdu, sana booda lakkoofsa guutuu hafan keessaa isa ol ta'e, sana booda isa xiqqaa fi kan kana fakkaatan. Fakkeenyota: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''Daangaa qaamolee sadii kan sadii yoo ta'e, daangaa qaamolee sadii hanga kutaalee kudha lamaa ga'u deebisi. Yoo hin taane immoo deebi'i -1 Daangaa sadii kan qaamolee sadii yoo ta'e, daangaa qaamolee lamaan kan qaamolee sadii irra caalu ta'e, daangaa qaamolee sadii ga'u deebisi. Fakkeenyi: triangle_area ((3, 4, 5) == 6.00 triangle_area ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''Qama q yoo balali'e dhugaa, yoo balali'e immoo sobaa deebisu. Qama q yoo madaalamee (kan tarree palindiroomii dha) fi walitti qabaan elementtootaa isaa ulfaata ol'aanaa w irra xiqqaate ykn wal qixxaate balali'a. Fakkeenyi: will_it_fly (([1, 2], 5) â -> Sobaa # 1+2 ulfaata ol'aanaa irra xiqqaate, garuu madaalamee dha. will_it_fly (([3, 2, 3], 1) â -> Sobaa # madaalamee dha, garuu 3+2+3 ulfaata ol'aanaa irra xiqqaate dha. will_it_fly (([3, 2, 3], 9) â -> Dhugaa # 3+23 ulfaata ol'aanaa irra xiqqaate, madaalamee dha. will_it_fly ((([3], â 5) -> Dhugaa # 3 ulfaata ol'aanaa irra xiqqaate, garuu madaalamee dha. '''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"Array of integer kennamee, lakkoofsa xiqqaa element-ta akka array palindromic ta'uuf jijjiiramni barbaachisu ta'u. Array palindromic kan jedhamu, array kan gara duubaatti fi gara fuula duraatti walfakkaatu dubbisu dha. Jijjiiramni tokko, element-ta tokko gara element-ta biraa jijjiiru ni dandeessa. Fakkeenyaaf: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''Seenaa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Lakkoofsi kenname lakkoofsa jalqabaa 3n yoo wal-dabale dhugaa kan deebisu fi yoo wal-dabale soba kan ta'u funcsiinii barreessi. (a) 100 gadi akka ta'e beekuun. Fakkeenyi: is_multiply_prime(30) == Dhugaa 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Hojiin kee lakkoofsa xn yoo n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_\"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''Hojiin lakkoofsa guutuu a fudhatee kan deebi'u True yoo ta'e barreessii lakkoofsa guutuu tokkoof cubee ta'e. Hubadhaa: galmeessichi yeroo hunda sirrii akka ta'e yaaduu dandeessu. Fakkeenyota: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"Lakkoofsa heeksaadeesimaal akka stringitti fudhatee lakkoofsa heeksaadeesimaal lakkoofsawwan jalqabaa ta'an lakkaa'u akka barreessituuf ramadamteetta (lakkoofsa jalqabaa, ykn prime, lakkoofsa uumamaa 1 ol ta'ee fi lakkoofsa uumamaa xiqqaa lama irraa hin uumamne dha). Lakkoofsa heeksaadeesimaal 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Lakkoofsawwan jalqabaa 2, 3, 5, 7, 11, 13, 17,... ta'an. Kanaafuu lakkoofsawwan armaan gadii keessaa tokko tokko murteessuu qabda: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Hubadhaa: galmeessichi yeroo hunda sirrii ykn duwwaa akka ta'e yaaduu dandeessu, akkasumas mallattoowwan A,B,C,D,E,F yeroo hunda gurguddoo dha. Fakkeenyatti: Num = AB, ba'ichi num = 1. Num = 1077E, ba'ichi num = 2. Num = AB331ED, num = 4.1289BCD, num = 6.06745D, num = 2.0202020F ba'ichi num = 6.020EF\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"Lakkoofsi tokko akkaataa kurnaatti yoo kennameefi hojiin kee akkaataa lamaanitti jijjiiruu dha. Hojiin kun silsilaa deebi'uu qaba, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u. Si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u. Si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u, si'a ta'u. Si'a ta'u, si'a ta'u, si'a ta'u. Si'a ta'u, si'a ta'u, si'a ta'u.\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"Sireen tokko yoo dheerina isaa xiqqaate 3 fi qubeen walitti aananii jiran 3 adda ta'an taanaan gammachuu qaba. Fakkeenyaaf: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"GPA: GPA: Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"Function tokko barreessii string fudhadhu fi yoo string dheerinni isaa prime number ta'e True ykn yoo dheerinni isaa prime number ta'e False kan deebiisu fakkeenya prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"Lakkoofsa guutuu poozitiiva ta'e n yoo kenname, lakkoofsa lakkoofsa guutuu poozitiiva n-digit kan 1'n jalqabanii fi xumuraman deebisi. \"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"Lakkoofsa guutuu N argameef, lakkoofsa waliigalaa lakkoofsa isaa kan binarii keessatti deebisi. Fakkeenyi N = 1000, lakkoofsa lakkoofsaa 1 yoo ta'e, ba'aan isaa \"1\" ta'uu qaba. N = 150 yoo ta'e, lakkoofsa lakkoofsaa 6 yoo ta'e, ba'aan isaa \"110\" ta'uu qaba. N = 147 yoo ta'e, lakkoofsa lakkoofsaa 12 yoo ta'e, ba'aan isaa \"1100\" ta'uu qaba. Jijjiirama: @N lakkoofsa guutuu Daangaa: 0 â‰¤ N â‰¤ 10000. Ba'aan: lakkoofsa binarii \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"Lakkoofsa guutuu duwwaa hin taane yoo kennamne lst. lakkoofsa lakkoofsa hin qabnee fi hin qabamne walitti ida'i. Fakkeenyi: add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"Seenaa jechootaa fi qubeewwan akkaataa ascii irratti hundaa'e tartiiba ol ka'aan tarreeffaman irratti hundaa'uudhaan jechoota haaraa bakka bu'an. Hubadhaa: Jechootaa fi qubeewwan duwwaa tartiiba jechootaa fi bakka duwwaa keeyyata jechootaa keessatti kaa'an eeguu qabdu. Fakkeenyaaf: anti_shuffle ((('Hi') deebiisa 'Hi' anti_shuffle ((('hello') deebiisa 'ehllo' anti_shuffle (('Hello World!!!') deebiisa 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"Akka matrix jedhamuutti, odeeffannoo bifa 2 dimensional, akka lists nested jedhamuu, matrix jedhamuu wajjin walfakkaata, garuu matrix irraa adda, lakkoofsi lakkoofsa kolonnoo adda addaa qabaachuu danda'a. lst, fi integer x yoo kenname, lakkoofsa integer x keessatti argadhu, fi list of tuples deebi'i, [(x1, y1), (x2, y2) ...] akka ta'u kan godhu, tuple hundi coordonate - (row, columns), kan 0 irraa jalqabu. Koordinates jalqaba karaa safaraa olka'aan. Akkasumas, coordonates safaraa karaa kolumnoota gadi bu'aan. Fakkeenyi: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), (2, 5), (2, 0, 0] get_((1), []] == row [1], [1, 2, 3], == 2, 2 , 2 ] ]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"Array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum ((first index value, last index value) is odd, or sort it in descending order if the sum ((first index value, last index value) is even. Note: * don't change the given array. Examples: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"Akkaataa qubee tokko argamaantii godhatee qubee qubee tokko deebisu. Qubeen qubee kanaa akka qubee lamaa gadii bakka lamatti dabaluutti jijjiiruun ni danda'ama. Fakkeenyaaf: encrypt (('hi') deebiisa 'lm' encrypt (('asdfghjkl') deebiisa 'ewhjklnop' encrypt (('gf') deebiisa 'kj' encrypt (('et') deebiisa 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"Lakkoofsa guutuu qabda. Kutaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa xiqqaa\"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"Jechoota qubee tokkootu siif kennama, hojiin kee lakkoofsa qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu qu\"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''Hojii lakkoofsa 3 fudhatu uumu. Lakkoobsa lamaan keessaa tokko walitti dabalamuu yoo ta'e dhugaa deebisa, lakkoofsa hundas lakkoofsa guutuu ta'u. Haalawwan biro keessatti soba deebisa. Fakkeenyi any_int{5, 2, 7} â -> True any_int{3, 2, 2} â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"Hojiin ergaa fudhatu, akkasumas ergaa sana keessatti qubee hunda bakka bu'u, qubee qubee qubee afaan ingiliffaa keessatti qubee qubee sana dura iddoo 2 jiruun bakka bu'u. qubee qofa fudhadhu. Fakkeenyi: >>> encode('test') 'TGST' >>> encode (('Kun ergaa dha') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"Lakkoofsawwan guutuu tarreessinee isiniif kennineerra. Lakkoofsawwan gurguddoo gurguddoo argachuufi lakkoofsa lakkoofsa isaanii walitti deebisuu qabna. Fakkeenyota: Lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ba'aan 10 ta'uu qaba Lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] ba'aan 25 ta'uu qaba Lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ba'aan 13 ta'uu qaba Lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ba'aan 11 ta'uu qaba Lst = [0,81,12,31,21] ba'aan 3 ta'uu qaba Lst = [1,8,1,2,1,7] ba'aan 7 ta'uu qaba \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"Akkaataa galmee jechootaa keessatti, yoo furtuun hundi qubee xiqqaa ykn furtuun hundi qubee gurguddaa ta'an, deebi'ee dhugaa deebisa, yoo hin taane immoo sobaa deebisa. Hojiin sobaa deebisuu qaba jechicha kennamee duwwaa yoo ta'e. Fakkeenyota: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) dhugaa deebisuu qaba. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) sobaa deebisuu qaba. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) sobaa deebisuu qaba. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) sobaa deebisuu qaba. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) dhugaa deebisuu qaba.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"Hojii lakkoofsa guutuu hin-lakkoofne fudhatee fi lakkoofsa guutuu n jalqabaa lakkoofsa jalqabaa fi n gadi ta'an keessaa tarree deebisu. fakkeenyaaf: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"Hojiin lakkoofsa guutuu lama fudhatee fi lakkoofsa lakkoofsa isaanii kan wal-fakkaatu deebisa. Dabalataan lakkoofsi galmeeffame yeroo hunda sirrii akka ta'e haa fudhannu. Fakkeenyi: wal-mul'isuun ((148, 412) 16 deebisuu qaba. Wal-mul'isuun ((19, 28) 72 deebisuu qaba. Wal-mul'isuun ((2020, 1851) 0 deebisuu qaba. Wal-mul'isuun ((14,-15) 20 deebisuu qaba.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"S string kennamee, lakkoofsa vookaalota gurguddoo lakkoofsa wal fakkaataa keessatti lakkaa'i. Fakkeenyaaf: count_upper (('aBCdEf') 1 deebisa count_upper (('abcdefg') 0 deebisa count_upper (('dBBE') 0 deebisa \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''Lakkoofsa tokko bakka bu'u (string) fudhattee lakkoofsa isaa irraan kan fagaate ta'e deebisti. Lakkoofsi sun lakkoofsa guutuu lama irraa fageenya walqixa yoo qabaate, gara sa'aatii dhihaa irraa fageeffadhu. Fakkeenyota >>> nearest_integer ((\"10\") 10 >>> nearest_integer ((\"15.3\") 15 Hubachiisa: Sassaa irraa fageeffamuun yoo ta'e lakkoofsi kennameef lakkoofsa guutuu lama irraa fageenya walqixa yoo qabaate, isa sa'aatii dhihaa irraa fageeffame deebisuu qabda. Fakkeenyaaf nearest_integer ((\"14.5\") deebi'uu qaba 15 fi nearest_integer ((\"-14.5\") deebi'uu qaba -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"Lakkoofsa guutuu poositiiv n yoo kenname, dhagaa sadarkaa n qabuu qaba. Sadarkaa jalqabaa dhagaa n qaba. Lakkoofsi dhagaa sadarkaa itti aanu keessatti argamu: - lakkoofsa adda itti aanu yoo n adda ta'e. - lakkoofsa wal fakkaataa itti aanu yoo n wal fakkaataa ta'e. Lakkoofsa dhagaa sadarkaa tokkoon tokkoo keessatti argamu tarreessii keessatti deebisi, bakka element index i lakkoofsa dhagaa sadarkaa (i+1) keessatti argamu agarsiisu. Fakkeenyota: >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"Jechoota qubee qubee tokko qabatanii fi kommaa fi bakka adda baasan ni kennama. Hojiin kee qubee sana jechootaatti qoqqooduudhaan qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qu\"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"Hojiin kun lakkoofsa gaarii x fi y fudhatee lakkoofsa guutuu baay'ina [x, y] keessatti argamu hunda irra guddaa ta'e deebisa. Lakkoofsa akkasii hin jiru taanaan hojiin kun -1 deebisa. Fakkeenyaaf: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"Lakkoofsa guutuu qabatamaa n fi m lama isiniif kennamee, hojii keessan immoo giddugaleessa lakkoofsa guutuu n irraa hanga m (n fi m dabalatee) ta'an keessaa tokko tokko qindeessuu dha. Deebii isaa hanga lakkoofsa guutuu isa dhihoo ta'utti marsaa fi gara lakkoofsa lamaatti jijjiiri. Yoo n m irra guddaa ta'e, deebi'i -1. Fakkeenyi: rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"Dabalataan, lakkoofsa lakkoofsa x'n qabate yoo argate, lakkoofsa lakkoofsa x'n qabate hunda tarreessee deebi'a.\"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"Array of integer kennamee, integer 1 fi 9 jidduu jiran tarreessi, array bu'aa argame sana geddari, achiis lakkoofsa hunda maqaa walfakkaatuun bakka buusi \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". Fakkeenyaaf: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"Eight\", \"Five\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] Array duwwaa yoo ta'e, array tokko deebisi: arr = [] return [] If the array has any odd number ignore it: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55,1] return [One' 1,' ].\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"Hojiin f akka parameetiraatti n fudhatee, fi tarree guddaa n deebisa, akka gatiin element index i'n faktooriyaa i yoo i'n wal-fakkaata ta'e ykn lakkoofsota 1 hanga i'n walitti qabame yoo ta'e. i'n 1 irraa jalqabee. faktooriyaa i'n lakkoofsota 1 hanga i'n wal-dabaluu dha (1 * 2 * ... * i). Fakkeenyi: f (((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"Lakkoofsa guutuu poositiiv n yoo kenname, tuple lakkoofsa palindromes lakkoofsa guutuu fi lakkoofsa guutuu hin qabnee kan daangaa ((1, n) dabalatee keessatti argamu qabu deebisi. Fakkeenyi1: Galmee: 3 Baafata: (1, 2) Ibsa: Palindromes lakkoofsa guutuu 1, 2, 3. isaan keessaa tokko walqixa, lama immoo walqixa. Fakkeenyi2: Galmee: 12 Baafata: (4, 6) Ibsa: Palindromes lakkoofsa guutuu 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. afur isaanii walqixa, 6 isaaniis walqixa. Hubadhaa: 1. 1 <= n <= 10^3 2. tuple lakkoofsa palindromes lakkoofsa guutuu walqixa fi walqixa deebi'eera. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"Lakkoofsi tokko yoo diigame, lakkoofsi isa jalqabaa kan mallatteessise diigama ta'a: fakkeenyaaf -123 kan mallatteesse lakkoofsota -1, 2, fi 3. >>> lakkoofsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsa_lakkoobsalakkoobsalakkoobsa\"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"Array 'arr' of N integers arr[1], arr[2], ..., arr[N] qabna. Lakkoofsota array keessa jiran akka carraatti tarreeffamu. Hojiin kee tarreeffama armaan gadii irratti hojjachuudhaan tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama tarreeffama\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"Rakkoo kana keessatti, function lakkoofsa lakkoofsa lamaa fudhatee, lst1 lakkoofsa lakkoofsa qindaa'aa qofa akka ta'u gochuuf, isaan jidduu wal jijjiiruu danda'u ta'uu isaa murteessa. lakkoofsa elementtoota wal jijjiiraman lst1 fi lst2 gidduu daangaa hin qabu. yoo ta'e, elementtoota lst1 fi lst2 gidduu wal jijjiiruu danda'u ta'e, elementonni lst1 hundi qindaa'aa akka ta'an gochuuf, \"YES\" deebisi. yoo ta'e immoo, \"NO\" deebisi. Fakkeenyaaf: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" Seenaan galmee galmee keessa jiru duwwaa akka hin taane ni yaadama. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"Seenaa qubee qubee xiqqaa bakka bu'u yoo kennamee, qubee irra deddeebi'amu kan baay'ee fi lakkoofsa walfakkaatu kan qabu galmee qubee deebi'i. Qubeewwan hedduun wal fakkaatan yoo qabaatan, hunda isaanii deebisi. Fakkeenyi: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4}: histogram (('a b') == {'b 4} } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Hojii S fi c kan jedhaman siidoota lama nuuf kennaman, siidoota s keessa jiran kanneen siidoota c keessa jiran hunda irraa qubee hunda balleessitu, achii siidoo bu'aan isaa palindiroomii ta'uu isaa qoradhu. Siidoon tokko siidoo bu'aan isaa gara duubaatti fi gara fuula duraatti wal fakkaataa yoo ta'e palindiroomii jedhama. Siidoo bu'aan isaa fi dhugaa/sobaa kan qabu tuple tokko deebisuu qabda. Fakkeenyaf s = \"abcde\", c = \"ae\", bu'aan isaa ('bcd', False) yoo ta'e, s = \"abcdef\", c = \"b\" bu'aan isaa ('acdef', False) yoo ta'e, s = \"abcdedcba\", c = \"ab\", bu'aan isaa ('cdedc',True) ta'uu qaba.\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"Seenaa qubee, bakka qubeen tokko lakkoofsa qofa qabu, tarree deebi'i. Ergaan i ba'aa keessaa tokko \" lakkoofsa qubee hin qabnee qubee i galmee keessa jiru. \" bakka i'n hundi lakkoofsa qubee hin qabnee qubee i'ffaa galmee keessa jiruun bakka bu'uu qabu. >>> odd_count['1234567']) [\" lakkoofsa qubee hin qabnee 4n qubee 4n galmee 4n. \"] >>> odd_count['3',\"111111\"]) [\" lakkoofsa qubee hin qabnee 1n qubee 1n galmee 1n. \", \" lakkoofsa qubee hin qabnee 8n galmee 8n. \"]\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"Array of integer nums kennamee, lakkoofsa subarray of nums duwwaa hin taane kamiyyuu keessaa lakkoofsa xiqqaa ta'e argadhu. Fakkeenyi minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"Qabiyyee boolla bishaanii (bucket) tokko tokko qabda. Sadarkaa tokkoon boolla bishaanii tokko kan argisiisu yoo ta'u, 1 tokko tokkoon immoo bishaan tokkorraa kan argisiisu dha. Boolla bishaanii tokko tokkoon boolla bishaanii keessaa bishaan baasuuf kan fayyadamu yoo ta'u, boollawwan hundi immoo humna walfakkaataa qabu. Hojiin kee boolla bishaanii boolla bishaanii keessaa baasuuf fayyadamuu dha. Boolla bishaanii keessaa baasuuf yeroo barbaaddu lakkoofsa. Fakkeenyi 1: Galmee: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Baatii: 6 Baatii: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Baatii: 5 Baatii: [[Input: :0,0,0], [0,0,0]] bucket_capacity: 5 Baatiin",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"Kana keessatti, lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoof\"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"S string fi natural number n yoo kenname, function tokko hojii irra oolchuuf dirqamteetta, kunis list of all words from string s containing exactly n consonants, in order these words appear in the string s. string s duwwaa yoo ta'e, function sun list duwwaa deebisuu qaba. Note: you may assume the input string contains only letters and spaces. Fakkeenyota: select_words ((\"Mary had a little lamb\", 4) ==> [\"little\"] select_words ((\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] select_words\" (((simple white space\", 2) ==> [] select_words ((\"Hello world\", 4) ==> [\"world\"] select_words ((\"Uncle sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"Jecha tokko kennameefii jira. Hojiin kee qubee qubee dhihoo qubee qubee lamaan jidduu jiru (qaama qubee irratti hundaa'e) argachuu dha. Qubee qubee jalqaba fi dhuma jiru hin lakkaa'amu. Qubee qubee qubee tokko illee hin argatu taanaan qubee qubee duwwaa deebisi. Qubeen kenname qubee Afaan Ingilizii qofa qaba jettee yaaduu dandeessa. Fakkeenya: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''S string tokko yoo S keessatti paranteesiiwwan hundi madaalamaa ta'an qofa akka gaarii ta'e ni yaadama. Fakkeenyaaf: string '(()) ' gaarii yoo ta'u, string '()) ' garuu hin ta'u. Yoo string gaarii ta'e 'Eeyyee' deebisi, yoo ta'e immoo 'Lakki' deebisi. Fakkeenyota: match_parens[(('() ', ') ']) == 'Eeyyee' match_parens[('(') ' match_parens[']] 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' == 'Lakki' ==' == 'Lakki' == 'Lakki' ==' == 'Lakki' ==' == 'Lakki' ==' == 'Lakki' ==' == 'Lakki' ==' == 'Lakki' ==' ==' ==' ==' ==' ==' ==' ==' ==' =='''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"Array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Fakkeenya 1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Fakkeenya 2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Fakkeenya 3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1. Dheerinni array [1, 1000] keessa jira. 2. Elementiin array [-1000, 1000] keessa jiru. 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"Lakkoofsa guutuu duwwaa hin taane yoo kenname, walumaagalatti lakkoofsa wal hin madaalleen walumaagalatti lakkoofsa wal hin madaalleen walumaagalatti lakkoofsa wal madaalleen wal madaalle deebisi.\"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"Array integer kan duwwaa hin taane arr fi integer k yoo kenname, walitti qabaa element-wwan kan array element-wwan k duraa irraa yoo baay'ate lakkoofsa lama qaban deebisi. Fakkeenyatti: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) \"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"Lakkoofsa guutuu bu'aa qabeessa n yoo ta'e, tarree tarreeffame lakkoofsa adda ta'e walitti aansee deebi'i. Yaadachiisa Kollaaz (Collatz conjecture) jechuun, tarree xiinxalee akka armaan gadiitti ibsame kan ilaallatuudha: lakkoofsa guutuu bu'aa qabeessa n kamiinuu jalqabi. Achiis, tarree tokkoon tokkoon tarree duraa irraa kan argamu akkasitti: tarree duraa yoo wal fakkaate, tarree itti aanu walakkaa tarree duraa ti. Tarree duraa yoo wal fakkaate, tarree itti aanu si'a 3 kan duraa dabaluu dha. Tarkaanfiin kun, lakkoofsa n hangam yoo ta'e iyyuu, tarreensichi yeroo hunda 1 ni ga'a. Hubadhu: 1. Kollaaz (((1) [1] dha. 2. tarree tarreessamee dabaree dabalaaadhaan deebi'e. Fakkeenyaaf: get_odd_kollaaz ((5) [1, 5] # Tarree Kollaaz 5 [5, 8, 16, 4, 2, 1] dha, kanaaf lakkoofsota adda ta'an 1 fi 5 qofa dha.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"Guyyaa tokko kan mirkaneessu fi lakkoofsa guyyaa kan deebisu yoo ta'e, lakkoofsa guyyaa sirrii ta'e kan deebisu yoo ta'e, lakkoofsa guyyaa sirrii ta'e kan deebisu yoo ta'e, lakkoofsa guyyaa sirrii ta'e kan deebisu yoo ta'e, lakkoofsa guyyaa sirrii ta'e kan hin taane yoo ta'e, lakkoofsa guyyaa sirrii ta'e kan deebisu yoo ta'e, lakkoofsa guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota guyyoota\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''Jechoota tarreefama kennaman keessaa, tarree jechootaa bakka duwwaa irratti qoodanii deebisaa, yoo bakka duwwaa hin jirre barreeffama keessatti qubee xiqqaa ',' irratti qooduu qabda, yoo qubeen xiqqaa hin jirre lakkoofsa qubee xiqqaa qubee xiqqaa qubee xiqqaa hin taanee fi qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee xiqqaa qubee qubee xiqqaa qubee qubee xiqqaa qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qubee qu'''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''Lakkoofsawwan tarreefama kennameefii, tarreefama ol ka'aa ta'ee ykn tarreefama hin taane deebisi. yoo tarreefamni lakkoofsa walfakkaataa 1 ol qabu, False deebisi. Lakkoofsawwan diigamoo hin qaban, lakkoofsa guutuu qofa fudhadhu. Fakkeenyi is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"Daangaan lamaan kun lamaanuu kan wal qabatan yoo ta'e, daangaan lamaan kun kan wal hin qabanne yoo ta'e, \"Lakki\" deebisi. [input/output] samples: intersection (((1, 2), (2, == 3) \"intersectionn",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"Array of integer kan isiniif kennamee fi lakkoofsa integer hedduu walitti qabuu fi lakkoofsa array keessa jiru hunda wal-dabaluu kan 1, -1 ykn 0 ta'e deebisuu qabdu. Note: return None for empty arr. Example: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"Daandii dheerina k qabuun seelii k (kan adda ta'an miti) dhaquu akka hin dandeenye hubadhu. Daandii A (dheerinni k) daandii B (dheerinni k) irra xiqqaa ta'ee ilaalamuu danda'a. Daandii A (dheerinni k) daandii B (dheerinni k) irra xiqqaa ta'ee ilaalamuu danda'a yoo ta'e, erga daandii sirreeffamaa seelota A fi B irra darban (yoo lA_st fi lA_st waamnu), daandii lexicographically is less than lA_st, lB_st, in other words, a integer index with you current cell. Daandii dheerina k qabuun seelii k (kan adda ta'an miti) dhaquu jechuu dha. Daandii A (dheerinni k) daandii B (dheerinni k) irra xiqqaa ta'ee ilaalamuu danda'a yoo ta'e, daandii A (dheerinni k) daandii B (dheerinni k) irra xiqqaa ta'ee ilaalamuu danda'a yoo ta'e (keessattii lA_st fi lA_st waamnu), daandii lA_st lexically is less than lA_st, lA_st is less than lA_st, in other words, daandii dheerina k irra xiqqaa ta'u argachuu qabda. Daandii dheerina k irra xiqqaa ta'uu dandeessa seelii seelii k irraa jalqabuu ni dandeessa, daandii k irra deemuu dandeessa, daandii k hunda irra deemuu dandeessa, daandii k irra deemuu dandeessa see daandii k irra deemuu dandeessa, jechatti daandii k irra deemuu dandeessa see see see see see daandii k, daandii irra daandii irra xiqqaba irra daandii k, daandii irra xiqqaba irra daandii irra daandii irra xiqqaba ta'u, daandii irraan kan daandii irraan kan jiru, daandii irraan kan jiru, daandii irraan kan irraan kan irraan kan jiru, daandii irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan irraan kan\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"Namni hunduu fiibonaachii beeka, lakkoofsa xiinxaalamee jaarraa lamaan darban keessa qoratamee ture. garuu, wanti namoonni hin beekne, tiraibonaachii dha. tiraibonaachii irra deddeebi'uun kan ibsamu yoo ta'e: tri(1) = 3 tri(n) = 1 + n / 2, yoo n wal fakkaatudha. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), yoo n adda ta'e. fakkeenyaaf: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Lakkoofsa guutuu n hin taane kennameefii jira, lakkoofsa tiraibonaachii n + 1 isa jalqabaa tarreessuu qabda. Fakkeenyi: tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"Lakkoofsa guutuu poositiiv n yoo kenname, lakkoofsa lakkoofsa hin qabnee fi wal-dabaluu isaa deebisi. Lakkoofsa lakkoofsa wal-dabaluu yoo ta'e 0 deebisi. Fakkeenyaaf: lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa\"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''Hojiin kun kan deebi'u yoo yoo xiqqaate qubee tokko kan qabate yoo ta'e qofa. is_nested'[[]]') â -> True is_nested'[[]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]'[[]]') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"Lakkoofsawwan tarreefama qabdan isiniif kennama. Lakkoofsawwan tarreefama sana keessatti argaman walumaagalatti walumaagalatti deebi'uu qabdu, elementni tarreefama sana keessatti argamu hundi hanga int{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''Hojiin kan deebiisu dhugaa yoo qubeen dhuma qubee kennameef tokko qubee qubee qubee ta'ee fi kutaa jechaa hin taanee fi soba yoo ta'e. Hubadhaa: \"dubbiin\" garee qubeewwan bakka addaan baafamanii dha. Fakkeenyota: check_if_last_char_is_a_letter\"{\"apple pie\") â -> False check_if_last_char_is_a_letter\"{\"apple pi e\") â -> True check_if_last_char_is_a_letter\"{\"apple pi e\") â -> False check_if_last_char_is_a_letter\"{\"}\"{\"}\"{\"}'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"Faayilii tokko kan indeksii guddaa kan element isa dura jiru irra hin caalle ykn isaa hin qixxaanne deebisu. Yoo element akkasii hin jirre deebi'i -1. Array'n kenname gatii wal fakkaataa hin qabu. Fakkeenyi: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    ''''a' lakkoofsa guutuu diigamaa keessaa isa guddaa yoo ta'u, 'b' lakkoofsa guutuu poozitiiwaa keessaa isa xiqqaa yoo ta'e tuple (a, b) kan deebisu function uumuu. Lakkoofsa guutuu diigamaa ykn poozitiiwaa hin jiru yoo ta'e, akka Lakkoofsa tokkootti deebisi. Fakkeenyota: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (Lakki, 1) largest_smallest_integers([]) == (Lakki, Lakki) largest_smallest_integers[0]) == (Lakki, Lakki) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"Hojiin lakkoofsa guutuu, lakkoofsa dachaa ykn lakkoofsa dachaa lakkoofsa dhugaa ta'e fudhatee, lakkoofsa dachaa guddaa gosa dachaa isaa keessatti deebisa. Yoo gatiin isaa wal qixxee ta'e Lakki deebisa. Hubachiisa: Lakkoofsa dhugaa akka dachaa ta'e, dachaan dachaa dachaa ta'e . ykn , compare_one{1,2,5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> Lakki \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Lakkoofsa kenname n akka walitti qabaa lakkoofsa wal-fakkaataa 4tti barreessuun kan danda'amu ta'uu isaa madaali. Fakkeenyi is_equal_to_sum_even (a) (4) == Dogoggorri is_equal_to_sum_even (b) (6) == Dogoggorri is_equal_to_sum_even (c) (e) (8) == Dhugaa \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"Faaktoriyaan Biraaziil akka armaan gadiitti ibsame: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! bakka n > 0 Fakkeenyaaf: >>> special_factorial ((4) 288 Hojiin kun lakkoofsa guutuu akka galmeessisaatti fudhata, akkasumas faktooriyaa addaa lakkoofsa guutuu kanaa deebisuu qaba. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_Fakkeenya-3okko yoo kennite, bakka qubee sana keessa jiran hunda bakka bu'i, yoo qubeen tokko bakka walitti aananii jiran 2 ol qabaate immoo bakka walitti aananii jiran hunda bakka bu'i - fix_spaces ((\"Fakkeenya\") == \"Fakkeenya\" fix_spaces ((\"Fakkeenya1\") == \"Fakkeenya_1\" fix_spaces (((\"Fakkeenya2\") == \"_Fakkeenya_2\" fix_spaces ((\"Fakkeenya 3\") == \"_Fakkeenya-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Maqaa faayilii kan fudhatuu fi 'Eeyyee' kan deebisu yoo maqaan faayilii sirrii ta'e, yoo maqaan faayilii sirrii hin ta'in immoo 'Lakki' kan deebisu hojii uumuu. Maqaan faayilii yoo kan raawwatamu ta'e qofa akka fudhatama qabu ni yaadama: - Maqaa faayilii keessatti lakkoofsota sadii ol ('0'-'9') hin qaban. - Maqaan faayilii qabxii tokko '.' qaba. - Sadarkaan duraa duraa duwwaa ta'uu hin qabu, akkasumas qubee qubee Laatinii ('a'-'z' fi 'A'Z'-) 'tiin jalqabuu qaba. - Sadarkaan qubee qubee Laatinii boodaa tokko ta'uu qaba: ['txt', 'exe', 'lld'] Fakkeenyota: file_name_check\"{example.txt.txt\") # => 'Eeyyee' file_name_check\"{example.dll1\") # => 'Lakki' (maqaan faayilii qubee Laatinii) # => 'Lakki' (maqaan qubee qubee Laatinii)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" Hojiin kun tarree lakkoofsa guutuu qaba. galmee lakkoofsa guutuu keessatti galmeefaman hundaaf, hojiin sun galmee lakkoofsa guutuu bakka lamatti ol guddisa yoo indeksii isaa baay'ina 3 ta'e, galmee lakkoofsa guutuu bakka lamatti ol guddisa yoo indeksii isaa baay'ina 4 ta'e malee baay'ina 3 ta'e. Hojiin kun galmee lakkoofsa guutuu keessatti galmeefaman kan indeksii isaanii baay'ina 3 ykn 4 hin taane hin jijjiiru. Hojiin kun walitti dabalamuu galmeewwan hunda ni deebisa. Fakkeenyota: lst = [1,2,3]f ba'ichi 6 ta'uu qaba lst = []f ba'ichi 0 ta'uu qaba lst = [-1,-5,2,-1,-5]f ba'ichi -126 ta'uu qaba \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"Seenaa tokko kan bakka bu'u, jechichi jechoota tokko tokko kan qabate yoo ta'u, jechoonni kun bakka tokko tokkoon adda baafamanii, akkasumas jechoota jechoota jalqabaa kan qabate, jechoonni lakkoofsa duraa kan qaban, tartiiba jechootaa jechoota haaraa keessatti kan jalqaba walfakkaatu ta'uu qaba. Fakkeenya1: Galmee: jechi = \"Kun qormaataadha\" Ba'aa: \"dha\" Fakkeenya2: Galmee: jechi = \"swimming for\" Ba'aa: \"go for\" Dandeettii: * 1 <= len(sentence) <= 100 * Jechi qubee qofa kan qabu \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"Hojiin kee kan x * n kan salphisu function tokko hojjechuu dha. function kun yoo x * n lakkoofsa guutuu ta'e dhugaa deebisa, yoo x * n lakkoofsa guutuu ta'e immoo soba. x fi n lamaanuu, bakka bu'iinsa qubee hir'inaati, akkasumas bifa armaan gadii qabu, <numerator>/<denominator> bakka lakkoofsichaa fi maqaansaa lakkoofsa guutuu gaarii ta'an. x fi n hir'ina sirrii ta'uu isaanii fi lakkoobsa tokko akka maqaansaa hin qabne yaaduu dandeessa. salphisiisi (simplify) \"1/5\", \"5/1\") = True (simplify) \"1/6\", \"2/1\") = False (simplify) \"7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"Lakkoofsa guutuu tarreefama lakkoofsa isaanii irratti hundaa'e tarreessuf hojii barreessi. Yaada: yoo lakkoofsa lakkoofsa isaanii irratti walfakkaatu qaban baay'een jiraate, tarreefama isaanii tarreefama tarreefama isaanii irratti hundaa'e tarreessi. Fakkeenyaaf: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"Hojii lakkoofsa lakkoofsa akka galmeessituu fudhatee lakkoofsa elementonni lakkoofsa 10 ol ta'an fi lakkoofsa lakkoofsa tokkoo kan jalqabaa fi dhuma ta'an kan hin madaalamne (1, 3, 5, 7, 9) ta'an deebisu barreessi. Fakkeenyaaf: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"Lakkoofsa guutuu poozitiivii n isiniif kennamee jira. Lakkoofsa guutuu a dheerina n qabuu uumuu qabda. Tokko tokkoon i (1 ‰¤ i ‰¤ n)f, gatiin a[i] = i * i - i + 1. Lakkoofsa si'a sadii (a[i], a[j], a[k]) a bakka i < j < k, fi a[i] + a[j] + a[k] kan 3'n baay'ate deebisi. Fakkeenyi: Bu'aa galmeessaa: n = 5 Bu'aa ba'aa: 1 Ibsa: a = [1, 3, 7, 13, 21] Si'a sadii kan hojjetu (1, 7, 13) qofa. \"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''Sirna aduu keenya keessatti pilaaneetota saddeet jiru: isa dhihoo aduutti jiru Merkur, isa itti aanu Weenus, achiis lafa, Maarsi, Jupiteri, Saaturnus, Uraanoos, Neeptuun. Function tokko barreessii maqaa pilaaneetota lama akka string planet1 fi planet2. Function sun tuple kan qabuu fi pilaaneetota orbita isaanii jidduu jiru hunda kan qabuu fi dhihoo aduutti jiran. Function sun tuple duwwaa kan deebiisu yoo planet1 or planet2 maqaa pilaaneetota sirrii hin taane yoo ta'e. Fakkeenyonni bf \"(Jupiter\", \"Neeptuun\") ==> (\"Saturn\", \"Uranus\") bf (((\"Earth\", \"Mercury\") ==> (\"Venus\") bf (((\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Sn\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Seenaa lakkoofsa lakkoofsa hin qabnee fi tartiiba tartiiba tartiiba hin qabneen deebi'u barreessi. Seenaan kun yeroo hunda tartiiba lakkoofsa malee tartiiba lakkoofsa hin qabu, akkasumas kan wal fakkaataa qabu ta'a. Tartiibaan tartiibaa tartiiba dheerina jechoota hundaa ol ka'uu qaba, tartiiba tartiiba tartiiba seera kanaan tartiiba tartiiba ta'e deebisi. Jechoonni lama dheerina walfakkaataa yoo qabaatan tartiiba tartiiba qubee tartiiba tartiiba tartiiba. Seenaan tartiiba tartiiba tartiibaatiin deebi'uu qaba. Jechoonni hundi dheerina walfakkaataa akka qaban yaaduu dandeessa. Fakkeenyaaf: assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"ab\", \"cd ])\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"Sagantaa salphaa yoo n lakkoofsa jalqabaa ta'e gatii x deebisuu qabu yoo ta'e gatii y deebisuu qaba. Fakkeenyi: x_or_y ((7, 34, 12) == 34 for x_or_y ((15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''Lakkoofsawwan tarreefama kennaman keessaa, lakkoofsota tarreefama keessa jiran keessaa kan hin madaa'in ta'an walumaagalatti bakka lamattii walitti ida'uun deebi'a. Lakkoofsota diigamoo ykn lakkoofsota guutuu hin taane hin ilaalin. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Yoo tarreefamni galmee duwwaa ta'e, 0 deebisi. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"Akka yaada kiyyaatti hundi keenya yeroo bu'aan waan yeroo dheeraaf eeggannu tokko beekamu miira kana ni yaadanna. Miira fi yaadota yeroo sana qabdu hubachuun fi walbira qabanii ilaaluun barbaachisaadha. Hojiin kee namni tokko bu'aa walbira qabamanii dhufan sirriitti tilmaamee akka beeku murteessuu dha. Siif lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa lakkoofsa\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"Maqaa kutaa (sadarkaa) fi tartiiba dheerina kennama. Dabalawwan kutaa dabalataa dabaluuf itti fayyadamuu qabu. Humni dabalaa akka armaan gadiitti: CAP lakkoofsa qubee gurguddoo maqaa dabalaa keessa jiru haa ta'u, SM immoo lakkoofsa qubee qubee xiqqaa maqaa dabalaa keessa jiru haa ta'u, humni isaa hir'ina CAP - SM jedhamuun kennama. Dabalaa isa guddaa argachuu fi tartiiba akkasitti deebi'uu qabda: ClassName.StrongestExtensionName. Dabalaawwan lama ykn isaa ol humni walfakkaatu yoo jiraate, isa duraa ta'e filachuu qabda. Fakkeenyaaf, yoo \"Slices\" akka kutaa fi tartiiba dheerinaatti kenname: ['SEviviSNGliCes', 'Cheese', 'StuFfed'] 'Slices.SNGliCes' 'SviSNGliCes' 'SviSNGliCes' 'mySviSNGliCes']) dheerina isa guddaa waan ta'eef 'Slices.Slices.SviSNGliCes' deebisuu qabda.\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"Jechoota 2 kennaman. Jechi lammaffaa ykn jijjiiramni isaa kamiyyuu jecha jalqabaa keessatti substring yoo ta'e dhugaa deebisuu qabda cycpattern_check (((\"abcd\",\"abd\") => False cycpattern_check (((\"hello\",\"ell\") => True cycpattern_check (((\"whassup\",\"psus\") => False cycpattern_check (((\"abab\",\"baa\") => True cycpattern_check (((\"efef\",\"eeff\") => False cycpattern_check (((hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"Lakkoofsa guutuu yoo kenname, tuple lakkoofsa lakkoofsa wal-fi wal-hin-taane qabu deebisi. Fakkeenyi: wal-_wal_taane (odd_count) ==> (1, 1) wal-_wal_taane (odd_count) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"Lakkoofsa guutuu poosatiiva ta'e tokko yoo kenname, lakkoofsa isaa kan Roomaa akka stringitti fudhadhu, akkasumas qubee xiqqaa keessatti deebisi.\"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''Dheerinni qaamolee sadii sadii yoo ta'e deebi'a dhugaa yoo qaamoleen sadan kun al-quunnamtii qaamaan wal-qixa ta'e uumu, yoo hin taane soba. al-quunnamtii qaamaan wal-qixa ta'e al-quunnamtii qaamni tokko qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaamni isaa qaananii kan isaa'''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"Function tokko barreessi. Seenaan kun jechoota adda addaa qabata. Jecha lakkoofsa qubee adda addaa qabu deebisi. Yoo qubeen hedduu lakkoofsa qubee adda addaa qabaatan, isa duraa duraa qubee qubee adda addaa qabu deebisi.\"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"Ati laphee beela'aa si'a taate, daabboo muraasa nyaatteetta, amma garuu daabboo dabalataa nyaachuun nyaata guyyaa guutuu guutuuf si barbaachisa. daabboo [ daabboo nyaatame hunda nyaattee, daabboo daabboo nyaattee booda hafe] yoo daabboo hin ga'iin hafe, daabboo hafe hunda nyaatta, garuu ammallee beela'aa jirta. Fakkeenyi: * nyaadhu ((5, 6, 10) -> [11, 4] * nyaadhu ((4, 8, 9) -> [12, 1] * nyaadhu ((1, 10, 10) -> [11, 0] * nyaadhu ((2, 11, 5) -> [7, 0] Jijjiirama: @number: lakkoofsa daabboo ati nyaatte guutuu. @need:: lakkoofsa daabboo ati nyaachuu qabdu guutuu. @remaining:: lakkoofsa daabboo daabboo hafe keessa jiru guutuu: * Constrain: 0= <= 1000 * 0= <= 1000 * need remaining number <= 1000 = <= 1000 Fun: fun: fun: fun\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"Operetarii fi operand lama kennamee. Lamaanuu kan qaban aljebraa bu'uuraa, inni lammaffaan immoo lakkoofsa guutuu kan qabate dha. Lamaanuu kan kennaman aljebraa ijaaruudhaaf fayyadamaa. Dabalataan aljebraa bu'uuraa: dabalamuu (+) hir'isuu (-)) dabaluu (*) dabaluu (//) dabaluu (**) fakkeenya: operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 hubadhaa: dheerina list of operator kan dheerina operand list minus one waliin walqixa. Operand lakkoofsa guutuu hin taane kan qabate dha. Operator yoo xiqqaate list of operator tokko, list of operand immoo yoo xiqqaate operand lama qaba.\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"S[i] qubee yoo ta'e, qubee isaa gadii irraa gara ol'aanaa ykn giddutti jijjiiri, yoo ta'e immoo akkuma jirutti hafe. Yoo qubeen qubee hin qabanne, qubee jijjiiri. Hojiin qubee bu'aa isaa deebisuu qaba. Fakkeenyi furmaata ((\"1234\") = \"4321\" (((\"ab\") = \"AB\" (solve ((\"#a@C\") = \"#A@c\") \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"string 'text' yoo kennamee, string walfakkaata md5 hash isaa deebisi. yoo 'text' string duwwaa ta'e, None deebisi. >>> string_to_md5 (('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "gaz_Latn",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"Lakkoofsa guutuu a fi b lama yoo kennan, lakkoofsa lakkoofsa tokkoo fi b gidduu jiru, tartiiba ol ka'aan deebisi. Fakkeenyaaf: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]