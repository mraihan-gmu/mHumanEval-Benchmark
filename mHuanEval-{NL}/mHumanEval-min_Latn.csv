task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,min_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Cek dalam daftar bilangan, ado duo bilangan nan labiah dakek dari nan lain dari ambang batas nan diagiah. Contoh: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Palsu >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Batua """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,min_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Input untuak fungsi ko adolah string nan manganduang banyak kalompok kurung nan tasuruak. Tujuan Sanak adolah untuak mamisahkan kalompok-kalompok tu manjadi string nan tapisah dan mangulihkan daftar dari kalompok-kalompok tu. Kalompok-kalompok tapisah adolah balanced (tiok kurung nan tabukak tapek ditutup) dan indak tasuruak dalam satu sama lain. Indak dicaliak ruang dalam string masukan. Contoh: >>> separate_paren_groups' ((( ) (() (()))))) ' ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,min_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Dicaliak suatu bilangan floating point positif, dapek diurai manjadi bagian bilangan bulat (bilangan bulat tagadang labiah ketek dari bilangan nan diagiah) jo desimal (bagian nan tasisa labiah ketek dari 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,min_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Sanak dibari daftar operasi deposit jo withdrawal pado akun bank nan dimulai jo saldo nol. Tugas Sanak adolah untuak mandeteksi apokoh pado suatu titik saldo akun jatuah di bawah nol, dan pado titik itu fungsi harus manguliah True. Kok indak, harus manguliah False. Contoh: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,min_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Untuak daftar nomor masukan nan diagiah, mangira-ngira Mean Absolute Deviation di sakitar mean dari dataset ko. Mean Absolute Deviation adolah parbedaan mutlak rata-rata antaro satiok elemen jo sabuah pusek (rata-rata dalam hal iko): MAD = rata-rata. x - x_mean. Contoh: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,min_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Masokkan angko 'delimiter' antaro satiok duo elemen barikuik dari daftar masukan `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,min_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Input untuak fungsi ko adolah string nan diwakili banyak kalompok untuak kurung nan tasuruak dipisahkan jo spasi. Untuak satiok kalompok, kaluaran tingkek nan paliang dalam dari kurung. Misalnyo (() (()) punyo maksimum duo tingkek kurung samantaro ((())) punyo tigo. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,min_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Saringan saringan masukan hanyo untuak saringan nan manganduang substring nan diagiah >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,min_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Untuak daftar bilangan bulat nan diagiah, baliakkan sabuah tuple nan tadiri dari jumlah jo hasil kali dari kasadonyo bilangan bulat dalam daftar. Jumlah kosong harus samo jo 0 dan hasil kali kosong harus samo jo 1. >>> jumlah_hasil ([]) (0, 1) >>> jumlah_hasil ([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,min_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Dari daftar bilangan bulat nan ado, mambuek daftar elemen maksimum nan ditamuan sampai saat nan ditunjuakan dalam urutan. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,min_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Cari palindrom nan paliang pendek nan dimulai jo string nan diagiah. Gagasan algoritma sederhana: - Cari postfix nan paliang panjang dari string nan diagiah nan marupoan palindrom. - Tambahkan ka akhia string reverse dari prefix string nan datang sabalun sufiks palindromik. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Uji kalau string nan diagiah adolah palindrom """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,min_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input adolah duo string a jo b nan tadiri dari 1 jo 0. Buek XOR biner pado input-input iko dan baliakkan hasilnyo juo sabagai string. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,min_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Dari daftar string, baliak nan paliang panjang. baliak nan patamo dalam kasus banyak string nan panjangnyo samo. baliak Indak ado dalam kasus daftar masukan kosong. >>> paliang panjang (([]) >>> paliang panjang ((['a', 'b', 'c']) 'a' >>> paliang panjang ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,min_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Kembalikan pambagi samo gadang dari duo bilangan bulat a jo b >>> pambagi samo gadang ((3, 5) 1 >>> pambagi samo gadang ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,min_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Kirimkan daftar kasado awalan dari nan paliang pendek ka nan paliang panjang dari string masukan >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,min_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Kito akan mandapekkan string nan manganduang angka nan dibatasi ruang nan dimulai dari 0 sampai n tamasuak. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,min_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Dicaliak string, cari mano karakter nan tapisah (indak paduli kasus) nan tadiri dari >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,min_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Input ke fungsi iko adolah string nan mawakili not musik dalam format khusus ASCII. Tugas awak adolah untuak ma-parse string list dari integer nan manyatokan banyak beat. Di siko ado legenda: 'o' note, lasts four beats 'o' dakek' - half note, lasts two beats 'o' - quater note, lasts one beat >>> parse_music. 'o' o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,min_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Cari bara kali substring nan ado dapek ditamukan dalam string asli. Hitung kasus nan tumpang tindih. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,min_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input adolah string angka nan dibatasi ruang dari 'nol' ka 'sia'. Pilihan nan sah adolah 'nol', 'satu', 'dua', 'tigo', 'ampek', 'limapua', 'anam', 'tujuh', 'lapan' jo 'sia'. Kadoli string jo angka nan disortir dari paliang ketek ka paliang gadang >>> sort_numbers (('tigo satu limo') 'satu tigo limo' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,min_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Dari daftar nomor nan diagiah (panjangnyo sakurang-kurangnyo duo) piliah dan baliakkan duo nan paliang dakek satu jo nan lain dan baliakkannyo dalam urutan (angka nan labiah ketek, angka nan labiah gadang). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,min_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Dicaliak daftar angko (indak kurang duo elemen), aplikasikan transformasi linier ka daftar tu, sahinggo angko paliang ketek manjadi 0 dan nan paliang gadang manjadi 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,min_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter dibari daftar nilai python hanyo untuak bilangan bulat >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,min_Latn,python,"

def strlen(string: str) -> int:
    """"""Panjang pabalih string nan diagiah >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,min_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Untuak suatu bilangan n, cari bilangan nan paliang gadang nan mambagi n sacaro basamo, labiah ketek dari n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,min_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Kadolah daftar faktor prima dari bilangan bulat nan diagiah dalam urutan dari nan paliang ketek ka nan paliang gadang. Satiok faktor harus dilatakan jumlah kali nan sasuai jo sabaraik kali munculnyo dalam faktorisasi. Angko masukan harus samo jo hasil kali dari sado faktor >>> faktorisasi(8) [2, 2, 2] >>> faktorisasi(25) [5, 5] >>> faktorisasi(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,min_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Dari daftar bilangan bulat, hapuslah sado elemen nan tajadi labiah dari sakali. Jaga urutan elemen nan tasiso samo jo nan ado di masukan. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,min_Latn,python,"

def flip_case(string: str) -> str:
    """"""Untuak string nan diagiah, pabaliaklah karakter huruf ketek ka huruf gadang jo huruf gadang ka huruf ketek. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,min_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate daftar string ka dalam string tunggal >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,min_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Saringan daftar input string hanyo untuak nan dimulai jo awalan nan diagiah. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,min_Latn,python,"

def get_positive(l: list):
    """"""Kito baliakkan hanyo angko positif dalam daftar. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,min_Latn,python,"

def is_prime(n):
    """"""Kito akan mambaleh true jikok suatu bilangan adolah prima, dan false kalau indak. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,min_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs adolah koefisien dari polinomial. find_zero manamuan x sainggo poly ((x) = 0. find_zero mangulihkan hanyo nol poin, walaupun ado banyak. Salain itu, find_zero hanyo maambiak daftar xs nan mamiliki bilangan koefisien nan ganjil jo koefisien nan indak nol nan paliang gadang dek inyo mangjamin suatu solusi. >>> bundaran (((find_zero[1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> bundaran ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Mancari polinomial jo koefisien xs pado titik x. mangembalikan xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,min_Latn,python,"

def sort_third(l: list):
    """"""Fungsi ko maambiak daftar l dan mambaleh daftar l' sahinggo l' identik jo l dalam indeks nan indak dapek dibagi jo tigo, samantaro nilai-nilai di indeks nan dapek dibagi jo tigo samo jo nilai-nilai indeks nan sasuai dari l, tapi disortir. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,min_Latn,python,"

def unique(l: list):
    """"""Kito balikan elemen unik nan tasusun dalam daftar >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,min_Latn,python,"

def max_element(l: list):
    """"""Keroleh elemen maksimum dalam daftar. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,min_Latn,python,"

def fizz_buzz(n: int):
    """"""Kado baliak jumlah kali digit 7 muncua dalam bilangan bulat nan kurang dari n nan dapek dibagi dek 11 atau 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,min_Latn,python,"

def sort_even(l: list):
    """"""Fungsi ko maambiak daftar l dan mambaok daftar l' sahinggo l' identik jo l dalam indeks ganjil, samantaro nilai-nilai di indeks genap samo jo nilai-nilai indeks genap dari l, tapi disortir. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,min_Latn,python,"

def encode_cyclic(s: str):
    """"""mangambiak sabagai input string nan dikodekan jo fungsi encode_cyclic. Maulihkan string nan alah dikodekan. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""mambali string nan dikodekan dek grup siklus dari tigo karakter.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,min_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib mambaleh angka nan-palo nan marupokan bilangan Fibonacci dan itu juo bilangan prima. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,min_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero maambiak daftar bilangan bulat sabagai input. inyo mambali True jikok ado tigo elemen nan babeda dalam daftar nan jumlahnyo ka nol, jo False kalau indak. >>> triples_sum_to_zero (([1, 3, 5, 0]) False >>> triples_sum_to_zero (([1, 3, -2, 1]) True >>> triples_sum_to_zero (([1, 2, 3, 7]) False >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,min_Latn,python,"

def car_race_collision(n: int):
    """"""Bayangkan sabuah jalan nan sapanjangnyo panjang indak bateh. n oto sadang bajalan dari kiri ka kanan; samantaro itu, satu kalompok nan lain dari n oto sadang bajalan dari kanan ka kiri. Kaduo kalompok oto ko muloi dari jauah satu jo nan lain. Kaduo oto ko bajalan jo kacepatan nan samo. Kaduo oto disabuik tabrakan katiko oto nan bajalan dari kiri ka kanan tabrak oto nan bajalan dari kanan ka kiri. Namun, oto-moto ko indak bateh dan kuat; akibaiknyo, inyo taruih bajalan di lintasanyo seolah-olah inyo indak tabrak. Fungsi ko mangaluakan jumlah tabrakan sarupo itu.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,min_Latn,python,"

def incr_list(l: list):
    """"""Daftar bulik jo elemen nan ditambah 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,min_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero maambiak daftar bilangan bulat sabagai input. inyo mambali True jikok ado duo elemen nan babeda dalam daftar nan jumlahnyo ka nol, jo False kalau indak. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,min_Latn,python,"

def change_base(x: int, base: int):
    """"""Ubah pangkalan numerik dari jumlah masukan x ka pangkalan. baliak representasi string sasudah konversi. angko pangkalan kurang dari 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,min_Latn,python,"

def triangle_area(a, h):
    """"""Dibari panjang dari ciek sisi jo tinggi wilayah pulang untuak sabuah segitiga. >>> segitiga_area""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,min_Latn,python,"

def fib4(n: int):
    """"""Urutan bilangan Fib4 adolah urutan nan sarupo jo urutan Fibbonacci nan diartian sarupo iko: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Silakan tulihkan fungsi untuak manghitung sacaro efisien elemen ke-n dari urutan bilangan fib4. Jan manggunokan rekursi. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,min_Latn,python,"

def median(l: list):
    """"""Pado mediaan pabaliak elemen dalam daftar l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,min_Latn,python,"

def is_palindrome(text: str):
    """"""Cek kalau string nan diagiah adolah palindrom >>> is_palindrom (('') True >>> is_palindrom (('aba') True >>> is_palindrom (('aaaaa') True >>> is_palindrom (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,min_Latn,python,"

def modp(n: int, p: int):
    """"""Kado 2^n modulo p (tawaspadaan jo angka). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,min_Latn,python,"

def encode_shift(s: str):
    """"""mangambiak sabagai string masukan nan dikodekan jo fungsi encode_shift. Mabaliak string nan alah dikodekan. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""mambali string nan dikodekan jo manggeser satiok karakter jo 5 dalam abjad.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,min_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels adolah fungsi nan maambiak string jo manguliah string tanpa vokal. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,min_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Mabalikan True jikok kasadonyo angko dalam daftar l barado di bawah ambang t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,min_Latn,python,"

def add(x: int, y: int):
    """"""Tambah duo bilangan x jo y >>> tambah ((2, 3) 5 >>> tambah ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,min_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Cek kok duo kato punyo karakter nan samo. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Benar >>> same_chars (('abcd', 'dddddddabc') Benar >>> same_chars (('dddddddabc', 'abcd') Benar >>> same_chars (('eabcd', 'dddddddabc') Palsu >>> same_chars ((('abcd', 'dddddddabddce') Palsu >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Palsu """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,min_Latn,python,"

def fib(n: int):
    """"""Kado baliak bilangan Fibonacci nan ka-n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,min_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket adolah string ""<"" jo "">"". return True jikok satiok bracket pambukaan punyo bracket panutuik nan sasuai. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,min_Latn,python,"

def monotonic(l: list):
    """"""Return True adolah elemen daftar nan monoton maningkek atau manurun. >>> monoton (([1, 2, 4, 20]) True >>> monoton (([1, 20, 4, 10]) False >>> monoton (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,min_Latn,python,"

def common(l1: list, l2: list):
    """"""Kito baliakkan unsur umum unik nan tasusun untuak duo daftar. >>> umum (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> umum (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,min_Latn,python,"

def largest_prime_factor(n: int):
    """"""Kembalikan faktor prima tagadang dari n. Anggap n > 1 dan bukan bilangan prima. >>> tagadang_faktor_prima ({13195) 29 >>> tagadang_faktor_prima ({2048) 2) """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,min_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n adolah fungsi nan manjumlahkan bilangan dari 1 sampai n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,min_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket adolah string ""("" jo "")"". return True jikok satiok bracket pambukaan punyo bracket panutuik nan sasuai. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,min_Latn,python,"

def derivative(xs: list):
    """"""xs marupokan koefisien dari sabuah polinomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Ma-ulihkan turunan dari polinomial ko dalam bantuak nan samo. >>> turunan (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> turunan (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,min_Latn,python,"

def fibfib(n: int):
    """"""Urutan bilangan FibFib adolah urutan nan sarupo jo urutan Fibbonacci nan didefinisi sabagai barikuik: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Silakan tulihkan suatu fungsi untuak manghitung sacaro efisien elemen ke-n dari urutan bilangan fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,min_Latn,python,"
FIX = """"""Suruik kato 'a' nan digunoan untuak manyatokan jumlah vokal dalam kato nan digunoan, kato 'y' digunoan untuak manyatokan jumlah vokal dalam kato nan digunoan.""""""

def vowels_count(s):
    """"""Tambah pulo ciek lai.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,min_Latn,python,"
def circular_shift(x, shift):
    """"""Mangubah digit dari bilangan bulat x sacaro sirkular, mangubah digit ka kanan sacaro mangubah dan mangulihkan hasil sabagai string. Kok mangubah > jumlah digit, mangulihkan digit nan babalikan. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,min_Latn,python,"
def digitSum(s):
    """"""Tugas Manulih fungsi nan maambiak string sabagai input jo mangulihkan jumlah karakter ateh sajo' kode ASCII. Contoh: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,min_Latn,python,"
def fruit_distribution(s,n):
    """"""Dalam tugas iko, awak akan dibari string nan mawakili jumlah apel jo jeruk nan didistribusikan dalam karanjang buah karanjang iko barisi apel, jeruk, jo buah mangga. Dibiakan string nan mawakili jumlah total apel jo jeruk jo bilangan bulat nan mawakili jumlah total buah di karanjang baliak jumlah buah mangga di karanjang. untuak contoh: fruit_distribution""5( apel jo 6 jeruk"", 19) -> 19 - 5 - 6 = 8 buah_distribusi""0 apel jo 1 jeruk"",3) -> 3 - 0 - 1 = 2 buah_distribusi""2 apel jo 3 jeruk"", 100) -> 100 - 2 - 3 = 95 buah_distribusi""100 apel jo 1 jeruk"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,min_Latn,python,"
def pluck(arr):
    """"""""Bagi array nan marupokan cabang dari sabuah batang nan punyo simpul bilangan bulat non-negatif tugas awak adolah untuak ma-angkat salah satu simpul tu jo mangulangnyo. simpul nan di-angkat haruslah simpul nan punyo nilai genap paliang ketek. Kok ado banyak simpul nan punyo nilai genap paliang ketek, mangulang simpul nan punyo indeks paliang ketek. Simpul nan di-angkat haruslah dibali dalam daftar, [smallest_value, indeksnyo] Kok indak ado nilai genap atau array nan diagiah kosong, mangulang [].Contoh: 1: Input: [4,2,3] Output: [2, 1] Penjelasan: 2 punyo nilai genap paliang ketek, jo 2 punyo indeks paliang ketek.Contoh: Input: [1,2,3] Output: [2, 1] Penjelasan: 2 punyo nilai terkecil, jo 2 punyo indeks genap paliang ketek.Contoh 3: Input: [] Output: [] Input: [4: [5, 3, 4, 2] Output: [0, 0] Nilai nol: 1 Output: simpul paliang ketek, nan punyo indeks paliang ketek, tapi ado duo nol. Contoh: * panjang: 2 = nol, tapi nilai nol = 1""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,min_Latn,python,"
def search(lst):
    '''Sanak dibari daftar bilangan bulat positif nan indak kosong. Kadolah bilangan bulat paliang gadang nan labiah gadang dari nol, dan mampunyoi frekuensi nan labiah gadang dari atau samo jo nilai bilangan bulat tu surang. Frekuensi suatu bilangan bulat adolah jumlah kali bilangan tu muncua dalam daftar. Kok indak ado nilai tasabuik, mako baliaklah -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,min_Latn,python,"
def strange_sort_list(lst):
    '''Dicaliak daftar bilangan bulat, daftar babaliak dalam urutan nan ganjie. Sorting ganjie, adolah katiko awak mamulai jo nilai minimum, kamudian maksimum dari bilangan bulat nan tasisa, kamudian minimum jo sataruihnyo. Contoh: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,min_Latn,python,"
def triangle_area(a, b, c):
    '''Dibari panjang tigo sisi segitiga. Mabalikan laweh segitiga nan dibuek ke 2 dekimal jikok tigo sisi mambantuak sabuah segitiga nan sah. Kok indak, mabalikan -1 Tigo sisi mambuek sabuah segitiga nan sah jikok jumlah duo sisi labiah gadang dari sisi katigo. Contoh: segitiga_area(3, 4, 5) == 6.00 segitiga_area(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,min_Latn,python,"
def will_it_fly(q,w):
    '''Tulisan fungsi nan manguliah True jikok objek q ka tabang, jo False kalau indak. Objek q ka tabang jikok inyo balancangkan (ia adolah daftar palindromik) jo jumlah unsurnyo kurang dari atau samo jo barek maksimum nan mungkin w. Contoh: will_it_fly (([1, 2], 5) â -> False # 1+2 kurang dari barek maksimum nan mungkin, tapi indak balancangkan. will_it_fly (([3, 2, 3], 1) â -> False # itu balancangkan, tapi 3+2+3 labiah dari barek maksimum nan mungkin. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 kurang dari barek maksimum nan mungkin, dan itu balancangkan. will_it_fly ((([3], 5) â -> True # 3 kurang dari barek maksimum nan mungkin, dan itu balancangkan. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,min_Latn,python,"
def smallest_change(arr):
    """"""Array nan dibantuak dari bilangan bulat, carilah jumlah minimal elemen nan paralu diubah untuak mambuek array ko palindromik. Array palindromik adolah array nan dibaco samo ka balakang jo ka muko. Dalam satu parubahan, awak dapek mangganti ciek elemen ka elemen lain. Misalnyo: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,min_Latn,python,"
def total_match(lst1, lst2):
    '''Suruiknyo, kalau duo daftar tu punyo jumlah karakter nan samo, baliakkan daftar nan partamo. Contoh total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hi', 'hi'], 'hi'] total_match ((['4'], ['1'', '2'', '3', '4', '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,min_Latn,python,"
def is_multiply_prime(a):
    """"""Tulisan fungsi nan manguliah kato nan bana jikok angko nan diagiah adolah pangkalian dari 3 bilangan prima dan kato nan indak bana kalau indak.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,min_Latn,python,"
def is_simple_power(x, n):
    """"""Tugas awak adolah untuak manulih fungsi nan mambaleh true jikok suatu bilangan x adolah pangkat sederhana dari n dan false dalam kasus lain. x adolah pangkat sederhana dari n jikok n**int=x Misalnyo: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,min_Latn,python,"
def iscube(a):
    '''Suruik kato lain, kato "" "" ' "" ' adolah kato nan digunoan untuak manyatokan suatu nilai nan digunoan untuak manggantikan suatu nilai.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,min_Latn,python,"
def hex_key(num):
    """"""Sanak lah ditugeh untuak manulih suatu fungsi nan manarimo suatu bilangan heksadesimal sabagai string dan mahitung jumlah digit heksadesimal nan adolah bilangan prima (angka prima, atau bilangan prima, adolah bilangan asli nan labiah gadang dari 1 nan indak marupoan hasil dari duo bilangan asli nan labiah ketek). Angko heksadesimal adolah 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Angko prima adolah 2, 3, 5, 7, 11, 13, 17,... Jadi Sanak harus manantukan jumlah digit barikuik: 2, 3, 5, 7, B (= desimal 11), D (= desimal 13). Catatan: Sanak dapek manganggap masukanan ko salalu bana atau kosong, dan simbol A,B,C,D,E,F, salalu huruf gadang. Contoh: Untuak num ""AB"" outputnyo harus num = 1. Untuak ""1077E"" outputnyo harus 2. Untuak num ""AB"" = 1 ""A"" = 333 ""AED"" num = 4. ""ABC"" = 6.089 ""A"" = 6.0123 ""DEF"" Untuak outputnyo harus num = 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,min_Latn,python,"
def decimal_to_binary(decimal):
    """"""Sanak akan dibari angka dalam bantuak desimal dan tugas Sanak adolah untuak maubahnyo ka format biner. Fungsi ko harus mangulihkan string, jo satiok karakter manggambarkan angka biner. Satiok karakter dalam string akan '0' atau '1'. Akan ado tambahan duo karakter 'db' di awal jo di akhia string. Karakter tambahan ado untuak mambantu jo format. Contoh: decimal_to_binary ((15) # mangulihkan ""db1111db"" decimal_to_binary32) # mangulihkan ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,min_Latn,python,"
def is_happy(s):
    """"""Suruiknyo, string ko happy jikok panjangnyo saindaknyo 3 dan satiok 3 huruf barikuiknyo babeda Misalnyo: is_happy (a) => False is_happy (aa) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,min_Latn,python,"
def numerical_letter_grade(grades):
    """"""Iko adolah minggu tarakhir semester dan guru harus mangaratian nilai-nilai untuak siswa. Guru alah mambuek algoritma untuak mangaratian. Satu-satunyo masalahnyo adolah, inyo alah malupokan kode nan inyo pakai untuak mangaratian. Inyo lah mambari daftar nilai GPA untuak babarapo siswa dan awak harus manulih suatu fungsi nan dapek mangaratian daftar nilai huruf jo manggunoan tabel barikuik: GPA. Nilai huruf 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 Contoh: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,min_Latn,python,"
def prime_length(string):
    """"""Tulisan fungsi nan maambiak string jo manguliah True jikok panjang string adolah bilangan prima atau False kalau indak Conto prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,min_Latn,python,"
def starts_one_ends(n):
    """"""Dibari bilangan bulat positif n, bulikkan jumlah bilangan bulat positif n-digit nan dimulai atau diakhiri jo 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,min_Latn,python,"
def solve(N):
    """"""Dibari suatu bilangan bulat positif N, baliakkan jumlah total digit-digitnyo dalam binari. Contoh Untuak N = 1000, jumlah digit-digitnyo adolah 1 outputnyo harus ""1"". Untuak N = 150, jumlah digit-digitnyo adolah 6 outputnyo harus ""110"". Untuak N = 147, jumlah digit-digitnyo adolah 12 outputnyo harus ""1100"". Variabel: @N bilangan bulat Keterbatasan: 0 â‰¤ N â‰¤ 10000. Output: string bilangan biner """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,min_Latn,python,"
def add(lst):
    """"""Dibari daftar bilangan bulat nan indak kosong lst. manambahkan elemen-elemen nan ganjil nan ado pado indeks ganjil..Contoh: manambahkan (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,min_Latn,python,"
def anti_shuffle(s):
    """"""Suruiknyo, kato nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan dibuek dalam kato nan indak ado, nan indak ado, nan indak ado nan indak ado, nan indak ado nan indak ado nan indak ado, nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak ado nan indak indak indak indak indak indak ado nan indak indak indak indak indak indak indak ado nan indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak indak""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,min_Latn,python,"
def get_row(lst, x):
    """"""Sanak dibari data 2 dimensi, sabagai daftar nan tasusun, nan sarupo jo matriks, namun, indak samo jo matriks, satiok baris dapek manganduang jumlah kolom nan babeda. Kalau dibari lst, jo bilangan bulat x, cari bilangan bulat x dalam daftar, jo babaliak daftar tuples, [(x1, y1), (x2, y2) ...] sahinggo satiok tuple adolah koordinat - (baris, kolom), dimulai jo 0. Susun koordinat awalnyo jo baris dalam urutan mandaki. Salain itu, susun koordinat baris jo kolom dalam urutan turun. Contoh: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), (2, 5), (2, 0), get_(1), [] == [[baris]], [1, 2, 3]], [2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,min_Latn,python,"
def sort_array(array):
    """"""Dibari suatu array bilangan bulat nan indak negatif, baliakkan salinan array nan diagiah sasudah mangurutkan, awak akan mangurutkan array nan diagiah dalam urutan maningkek jikok jumlahnyo (value indeks partamo, value indeks tarakhia) adolah ganjil, atau mangurutkan dalam urutan manurun jikok jumlahnyo (value indeks partamo, value indeks tarakhia) adolah genap. Catatan: * jan mangubah array nan diagiah. Contoh: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,min_Latn,python,"
def encrypt(s):
    """"""Buek fungsi encrypt nan maambiak string sabagai argumen dan mangulihkan string nan dienkripsi jo abjad nan sadang diputar. Abjad harus diputar dalam caro nan sahinggo huruf-hurufnyo turun duo kali duo tampek. Misalnyo: encrypt (('hi') mangulihkan 'lm' encrypt (('asdfghjkl') mangulihkan 'ewhjklnop' encrypt (('gf') mangulihkan 'kj' encrypt (('et') mangulihkan 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,min_Latn,python,"
def next_smallest(lst):
    """"""Sanak dibari daftar bilangan bulat. Suruikkan fungsi next_smallest (() nan mangulihkan elemen nan paliang ketek ka-2 dari daftar. Maulihkan None jikok indak ado elemen tasabuik. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,min_Latn,python,"
def is_bored(S):
    """"""Sanak akan dibari sajumlah kato, dan tugas awak adolah untuak mahitung jumlah nan dibosankan. Sanak dibosankan adolah kalimat nan dimulai jo kato ""I"". Kalimah-kalimah dibatas jo '.', '?' atau '!'. Cuntuak: >>> is_bored(""Halo dunia"") 0 >>> is_bored(""Langik biru. Matoari tabayang. Ambo suko jo cuaca ko"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,min_Latn,python,"
def any_int(x, y, z):
    '''Bueklah fungsi nan maambiak 3 bilangan. Mabalikan bacoan jikok salah satu bilangan samo jo jumlah duo nan lainnyo, dan kasadonyo bilangan adolah bilangan bulat. Mabalikan bacoan salah dalam kasus lainnyo. Contoh any_int ((5, 2, 7) â -> True any_int ((3, 2, 2) â -> False any_int ((3, -2, 1) â -> True any_int ((3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,min_Latn,python,"
def encode(message):
    """"""Suruiknyo, untuak mangganti huruf nan ado di dalam kato kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, digunoan kato nan ado di dalam kato, di dalam kato nan ado di dalam kato, di dalam kato nan ado di dalam kato, ado di dalam kato nan ado di dalam kato, ado nan ado di dalam kato nan ado, ado nan ado nan ado, ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado nan ado""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,min_Latn,python,"

def skjkasdkd(lst):
    """"""Sanak dibari daftar bilangan bulat. Sanak paralu mancari nilai prima nan paliang gadang dan mambaleh jumlah digitnyo. Contoh: Untuak lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] outputnyo harus 10 Untuak lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] outputnyo harus 25 Untuak lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] outputnyo harus 13 Untuak lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] outputnyo harus 11 Untuak lst = [0,81,12,31,21] outputnyo harus 3 Untuak lst = [0,1,8,2,1,7] outputnyo harus  7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,min_Latn,python,"
def check_dict_case(dict):
    """"""Dikatoan kamus, bulik True jikok kasadonyo kunci adolah string dalam huruf ketek atau kasadonyo kunci adolah string dalam huruf gadang, kalau indak bulik False. Fungsi harus bulik False adolah kamus nan diagiah kosong. Contoh: check_dict_case{""a"":""apple"", ""b"":""banana""}) harus bulik True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) harus bulik False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) harus bulik False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) harus bulik False. check_dict_case{""NC"":""STATE"", ""Z"":""IP""}) harus bulik True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,min_Latn,python,"
def count_up_to(n):
    """"""Manerapkan fungsi nan maambiak bilangan bulat non-negatif dan mambaleh array dari bilangan bulat nan partamo nan marupoan bilangan prima jo kurang dari n. misalnyo: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,min_Latn,python,"
def multiply(a, b):
    """"""Siapkan fungsi nan maambiak duo bilangan bulat dan mangulihkan hasil kali dari digit satuan. Anggap masukannyo salalu bahalal. Contoh: kalikan 148, 412) harus mangulihkan 16. kalikan 19 28 harus mangulihkan 72. kalikan 2020 1851 harus mangulihkan 0. kalikan 14 15 harus mangulihkan 20 """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,min_Latn,python,"
def count_upper(s):
    """"""Dicaliak string s, hitung jumlah vokal gadang dalam indeks pari. Misalnyo: count_upper (('aBCdEf') mambaok 1 count_upper (('abcdefg') mambaok 0 count_upper (('dBBE') mambaok 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,min_Latn,python,"
def closest_integer(value):
    '''Bueklah fungsi nan maambiak nilai (string) nan marupokan suatu bilangan dan mangulihkan bilangan bulat nan paliang dakek ka bilangan tu. Kok bilangan tu samo jauah dari duo bilangan bulat, bueklah bulat dari nol. Contoh >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Catatan: Buek bulat dari nol bararti jikok bilangan nan di agiahkan samo jauah dari duo bilangan bulat, nan harus awak pulangkan adolah nan paliang jauah dari nol. Contoh: closest_integer ((""14.5"") harus mangulihkan 15 dan closest_integer ((-14.5"") harus mangulihkan -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,min_Latn,python,"
def make_a_pile(n):
    """"""Dibari bilangan bulat positif n, awak harus mambuek tumpukan batu nan ado pado tingkek n. Tingkek partamo punyo n batu. Jumlah batu di tingkek salanjuiknyo adolah: - bilangan ganjil salanjuiknyo jikok n adolah ganjil. - bilangan genap salanjuiknyo jikok n adolah pasangan. Mabalikan jumlah batu di satiok tingkek dalam daftar, di mano elemen pado indeks i manunjuakan jumlah batu di tingkek (i+1). Contoh: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,min_Latn,python,"
def words_string(s):
    """"""Sanak akan dibari string kato nan dipisahkan dek koma atau ruang. Tugas Sanak adolah mambagi string tu manjadi kato-kato dan mambaleh array kato-kato. Misalnyo: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,min_Latn,python,"
def choose_num(x, y):
    """"""Fungsi ko maambiak duo bilangan positif x jo y dan mambali bilangan bulat paliang gadang nan ado dalam kisaran [x, y] tamasuak. Kok indak ado bilangan tasabuik, mako fungsi ko musti mambali -1. Misalnyo: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,min_Latn,python,"
def rounded_avg(n, m):
    """"""Sanak dibari duo bilangan bulat positif n jo m, dan tugasnyo adolah mangira-i rato-rato bilangan bulat dari n sampai m (tamasuak n jo m). Kotolah jawaban ka bilangan bulat tataruang jo maubahnyo ka bilangan biner. Kok n labiah gadang dari m, baliakkan -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,min_Latn,python,"
def unique_digits(x):
    """"""Dibari daftar bilangan bulat positif x. mangulihkan daftar tasusun dari sado elemen nan indak ado angka pari. Catatan: Daftar nan dibalehkan harus disusun dalam urutan maningkek. Misalnyo: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,min_Latn,python,"
def by_length(arr):
    """"""Dibari array bilangan bulat, susun bilangan bulat nan ado antaro 1 jo 9 tamasuak, balikan array nan barasil, dan ganti satiok digit jo namo nan sasuai dari ""Satu"", ""Duo"", ""Tigo"", ""Ampek"", ""Lima"", ""Sambuah"", ""Tujuh"", ""Lapan"", ""Sembilan"". Misalnyo: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> susun arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> balikan arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Tuwo"", ""Lima"", ""Tigo"", ""Duo"", ""Duo"", ""Satu"", ""Satu""] Jikok array kosong, buek return: arr = [] return [] Jikok array punyo nomor ganjil abaikan: arr = [1, -1 , 55] -> sort -> arr - 1 , 55 -> reverse arr = [55, return - 1] - ['One' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,min_Latn,python,"
def f(n):
    """"""Implementasikan fungsi f nan maambiak n sabagai parameter, dan mambaleh daftar ukuran n, sahinggo nilai elemen pado indeks i adolah faktoril dari i jikok i adolah pasangan atau jumlah bilangan dari 1 ka i kalau indak. i dimulai dari 1. faktoril dari i adolah pangkalian bilangan dari 1 ka i (1 * 2 * ... * i). Contoh: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,min_Latn,python,"
def even_odd_palindrome(n):
    """"""Dibari suatu bilangan bulat positif n, baliakkan sabuah tuple nan mamiliki jumlah palindrom bilangan bulat ganjil jo genap nan tagolong dalam rentang ((1, n), tamasuak. Contoh1: Input: 3 Output: (1, 2) Penjelasan: Palindrom bilangan bulat adolah 1, 2, 3. salah satu daripadonyo ganjil, dan duo di antaronyo ganjil. Contoh2: Input: 12 Output: (4, 6) Penjelasan: Palindrom bilangan bulat adolah 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ampek di antaronyo ganjil, dan 6 di antaronyo ganjil. Catatan: 1. 1 <= n <= 10^3 2. tuple baliakkan jumlah palindrom bilangan bulat ganjil jo genap. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,min_Latn,python,"
def count_nums(arr):
    """"""Tulisan fungsi count_nums nan maambiak array bilangan bulat dan mambaleh jumlah elemen nan punyo jumlah digit > 0. Jiko suatu bilangan adolah negatif, mako digit pertamonyo nan ditandatangani akan negatif: misalnyo -123 punyo digit nan ditandatangani -1, 2, jo 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,min_Latn,python,"
def move_one_ball(arr):
    """"""Urang punyo array 'arr' nan tadiri dari N bilangan bulat arr[1], arr[2], ..., arr[N].Angko-angko dalam array akan diurutkan sacaro acak. Tugas awak adolah untuak manantukan apokoh mungkin untuak mandapek array nan diurutkan dalam urutan indak turun jo mangarajoan operasi barikuik pado array nan diberikan: Awak buliah mangarajoan operasi shift kanan sajumlah kali. Satu operasi shift kanan aratinyo mangarajoan saluruah elemen array jo ciek posisi di arah nan tuo. Elemen tarakir dari array akan dipindah ka posisi pamulo dalam array yaitu 0th. Kok mungkin untuak mandapek array nan diurutkan jo mangarajoan operasi di ateh maka return True else return False. Kok array nan diberikan kosong maka return True. Catatan: Daftar nan diberikan dijamin punyo elemen unik. Misalnyo: move_one_{(ball_[3,4,5,1,2===True>Penjelasan: Jo performinasi kanan 2 operasi, urutan indak turun dapek dicapai untuak array nan digunoan. Get[[3,4,5,2=False]""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,min_Latn,python,"
def exchange(lst1, lst2):
    """"""Dalam masalah iko, awak akan mangimplementasikan fungsi nan maambiak duo daftar angka, dan manantukan apokoh mungkin untuak mangarajoan paubahan unsur antaro mareka untuak mambuek lst1 manjadi daftar angka nan samo. Indak ado bateh pado jumlah unsur nan di paubahan antaro lst1 jo lst2. Kok mungkin untuak paubahan unsur antaro lst1 jo lst2 untuak mambuek sado elemen dari lst1 manjadi genap, baliak ""YES"". Kok indak, baliak ""NO"". Misalnyo: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Dianggap baso daftar masukan indak akan kosong. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,min_Latn,python,"
def histogram(test):
    """"""Jikok ado string nan marupokan huruf ketek nan tapisah ruang, baliakkan kamus dari huruf nan paliang banyak diulang dan manganduang jumlah nan sasuai. Kok ado babarapo huruf nan bajadian samo, baliakkan kasadonyo. Contoh: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4}: histogram '(') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,min_Latn,python,"
def reverse_delete(s,c):
    """"""Tugas Dianjakkan duo string s jo c, awak harus mahapuih sado karakter dalam s nan samo jo karakter dalam c lalu cek kalau string hasilnyo adolah palindrom. String disabuik palindrom jikok dibaco samo ka balakang jo ka muko. Awak harus manguliah sabuah tuple nan manganduang string hasil jo True/False untuak cek. Contoh untuak s = ""abcde"", c = ""ae"", hasilnyo harus ('bcd',False) untuak s = ""abcdef"", c = ""b"" hasilnyo harus ('acdef',False) untuak s = ""abcdedcba"", c = ""ab"", hasilnyo harus ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,min_Latn,python,"
def odd_count(lst):
    """"""Dicaliak daftar string, di mano satiok string tadiri dari digit sajo, baliakkan daftar. Satiok elemen i dari output harus ""jumlah elemen ganjil dalam string i dari input"". di mano sado i harus diganti jo jumlah digit ganjil dalam string i'th dari input. >>> odd_count['1234567']) [""jumlah elemen ganjil 4n str4ng 4 dari 4nput.""] >>> odd_count['3',""111111""]) [""jumlah elemen ganjil 1n str1ng 1 dari 1nput."", ""jumlah elemen ganjil 8n str8ng 8 dari 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,min_Latn,python,"
def minSubArraySum(nums):
    """"""Dibari suatu susunan bilangan bulat n, carilah jumlah minimal dari sub-susunan bilangan nan indak kosong. Contoh minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,min_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Satiok barisan manyatokan ciek sumur, dan satiok 1 di dalam barisan manyatokan ciek unit aia. Satiok sumur punyo baldi nan sasuai nan dapek digunoan untuak maekstraksi aia dari sumur tu, dan sadonyo baldi punyo kapasitas nan samo. Tugas awak adolah manggunoan baldi untuak mangosongkan sumur. Kaluaran jumlah kali nan awak paralu untuak manurunkan baldi. Contoh1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 6 Example2: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Output: 5 Example3: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Output: 0 * Constraints: 1 * * * All lengths have the same length: 1 * * All lengths have the same length: 1 * * All lengths are <= 10 * * All lengths are <= 1 * All lengths are <= 10 * All lengths are <= 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All length: 1 * All: 1 * All: 1 * All: 1 * All: 1 * All: 1 * All: 1 * All: 1 * All: 1 * All: 1 * All: 1 * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * All: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,min_Latn,python,"
def sort_array(arr):
    """"""Dalam Kata ko, awak harus mangurutkan array bilangan bulat nan indak negatif manuruik jumlah satuan dalam representasi binernyo dalam urutan mandaki. untuak jumlah satuan nan sarupo, mangurutkan badasakan nilai desimal. harus diimplementasikan sarupo iko: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,min_Latn,python,"
def select_words(s, n):
    """"""Kalau ado string s jo bilangan asli n, awak di tugeh untuak mangimplementasikan fungsi nan mangulihkan daftar kasadonyo kato dari string s nan manganduang persis n konsonan, supayo kato-kato iko tampak dalam string s. Kok string s kosong, mako fungsi ko harus mangulihkan daftar kosong. Catatan: awak mungkin manganggap string masukan hanyo manganduang huruf jo ruang. Contoh: select_words ""Mary had a little lamb"", 4) ==> [""little""] select_words ""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,min_Latn,python,"
def get_closest_vowel(word):
    """"""Sanak dibari kato. Tugas Sanak adolah untuak mancari vokal nan paliang dakek nan tagak di antaro duo konsonan dari sisi kanan kato (case sensitive). Vokal di awal jo akhir indak dihitung. Kadoi string kosong jikok Sanak indak manamukan vokal nan mamanuhi syarat di ateh. Sanak dapek manganggap baso string nan dibari hanyo manganduang huruf bahaso Inggirih. Contoh: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,min_Latn,python,"
def match_parens(lst):
    '''S dianggap sabagai string nan baiak jikok dan hanyo jikok sado parentheses dalam S diimbangi. Misalnyo: string '(()) ' baiak, sadangkan string '()) ' indak. Balakiah 'Yes' jikok ado caro untuak mambuek string nan baiak, dan balakiah 'No' kalau indak. Contoh: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,min_Latn,python,"
def maximum(arr, k):
    """"""Dibari suatu array arr dari bilangan bulat jo bilangan bulat positif k, baliakkan daftar nan tasusun dari panjang k jo jumlah maksimum k di arr. Contoh1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Contoh2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Contoh3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Catatan: 1. panjang array akan dalam kisaran [1, 1000]. 2. unsur-unsur dalam array akan dalam kisaran [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,min_Latn,python,"
def solution(lst):
    """"""Dibari daftar bilangan bulat nan indak kosong, bulikkan jumlah dari sado elemen ganjil nan ado di posisi pari. Contoh solusi (([5, 8, 7, 1]) ==> 12 solusi (([3, 3, 3, 3]) ==> 9 solusi (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,min_Latn,python,"
def add_elements(arr, k):
    """"""Dibari suatu array nan indak kosong dari bilangan bulat arr jo bilangan bulat k, baliakkan jumlah elemen jo indak labiah dari duo digit dari elemen k partamo dari arr. Contoh: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # jumlah dari 21 + 3 Kestral: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,min_Latn,python,"
def get_odd_collatz(n):
    """"""Kok ado bilangan bulat positif n, bulikkan daftar nan tasusun nan mamiliki bilangan ganjil dalam urutan collatz. Dugaan Collatz adolah dugaan dalam matematika nan manganai urutan nan didefinisian sarupo iko: mulai jo bilangan bulat positif n. Kamudian satiok istilah didapek dari istilah sabalunnyo sarupo iko: jikok istilah sabalunnyo adolah pasangan, istilah salanjuiknyo adolah satangah dari istilah sabalunnyo. Kok istilah sabalunnyo ganjil, istilah salanjuiknyo adolah 3 kali istilah sabalunnyo ditambah 1. Dugaan adolah baso indak paduli nilai dari n, urutan akan salalu mancapai 1. Catatan: 1. Collatz (((1) adolah [1]. 2. Daftar nan dibaleh tasusun dalam urutan maningkek. Misalnyo: get_odd_collatz (((5) mambaleh [1, 5] # Urutan collatz untuak 5 adolah [5, 8, 16, 4, 2, 1], jadi bilangan ganjil hanyo 1, dan 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,min_Latn,python,"
def valid_date(date):
    """"""Sanak musti manulih fungsi nan mangvalidasi string tanggal nan diagiah dan mangulihkan True jikok tanggalnyo baleh. Kalau indak, False. Tanggalnyo baleh jikok kasado aturan barikuik tasadio: 1. string tanggal indak kosong. 2. jumlah ari indak kurang dari 1 atau labiah dari 31 ari untuak bulan 1,3,5,7,8,10,12. dan jumlah ari indak kurang dari 1 atau labiah dari 30 ari untuak bulan 4,6,9,11. dan, jumlah ari indak kurang dari 1 atau labiah dari 29 untuak bulan 2. 3. bulan indak buliah kurang dari 1 atau labiah dari 12. 4. tanggalnyo harus dalam format: mm-dd-yyyy misalnyo: valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-02040') => false_date (('06-04-2020') => true_date (('06/04/2020') => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,min_Latn,python,"
def split_words(txt):
    '''Dibari string kato, baliak daftar kato nan tabagi pado ruang putiah, jikok indak ado ruang putiah di teks awak harus tabagi pado koma ',' jikok indak ado koma awak harus baliak jumlah huruf ketek jo urutan ganjil dalam abjad, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Contoh split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words (((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,min_Latn,python,"
def is_sorted(lst):
    '''Dibari daftar angko, baliakkan apokoh angko-angko tu disusun dalam urutan maningkek. Kok daftar punyo labiah dari 1 duplikat angko nan samo, baliakkan Palsu. Anggap indak ado angko negatif dan hanyo bilangan bulat. Contoh is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 3, 2, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,min_Latn,python,"
def intersection(interval1, interval2):
    """"""Dianjaknyo, disangko nan dimuloi adolah labiah ketek atau samo jo nan diakhiri. Tugas awak adolah untuak manantukan apokoh panjang simpang duo interval ko adolah bilangan prima. Misalnyo, simpang (1, 3), (2, 4) adolah (2, 3) nan panjangnyo adolah 1, nan indak bilangan prima. Jikok panjang simpang adolah bilangan prima, pulangkan ""YES"", kalau indak, pulangkan ""NO"". Jikok duo interval tu indak basimpang, pulangkan ""NO"".""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,min_Latn,python,"
def prod_signs(arr):
    """"""Sanak dibari array bilangan bulat dan Sanak paralu mambaleh jumlah sagadang bilangan bulat nan dikali jo hasil kalimo dari sado tanda-tanda dari satiok bilangan dalam array, nan diwakili dek 1, -1 atau 0. Catatan: mambaleh None untuak ar kosong. Contoh: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,min_Latn,python,"
def minPath(grid, k):
    """"""Dicaliak dari grid jo N baris jo N kolom (N >= 2) dan sabuah bilangan bulat positif k, satiok sel dalam grid ko manganduang suatu nilai. Satiok bilangan bulat dalam range [1, N * N] tamasuak ado ciek nilai nan tampak di sel-sel dalam grid. Sanak harus mancari jalan minimal panjang k dalam grid. Sanak dapek mamulai dari sel apo pun, dan pado satiok langkah Sanak dapek pindah ka sel-sel tatangga, jo kato lain Sanak dapek manuju sel-sel nan samo pinggir jo sel Sanak. Satiok jalan panjang k artinyo manunjuak persis k sel (indak paralu jaleh). Sanak BANTU ADA KAN pai dari grid. Satiok jalan A (panjang k) dianggap labiah ketek dari jalan B (panjang k) jikok sasudah mambuek daftar nilai nan diurutkan pado sel-sel nan A jo B (biarlah disabuik l_stA jo l_stB), l_stA sacaro leksikal labiah ketek dari l_stB, jo kato lain, ado indeks bilangan bulat dalam grid nan samo, yaitu: [1, 2, 4, 4, 5, 6, 6, 7], [1, 2], [1, 2], [2, 1], [4, 6], [7, [8,] [9, [9,] [9, [9,] [9, [9,] [9, [9,]""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,min_Latn,python,"
def tri(n):
    """"""Satiok urang tahu urutan Fibonacci, inyo dipalajari sacaro dalam dek para matematikawan dalam duo abaik nan lalu. Namun, apo nan indak dikatahui urang adolah urutan Tribonacci. Urutan Tribonacci ditantuakan dek kamunculan: tri(1) = 3 tri(n) = 1 + n / 2, jikok n adolah pasangan. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), jikok n adolah ganjil. Misalnyo: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Sanak dibari bilangan bulat nan indak negatif, Sanak harus mambaleh daftar bilangan n + 1 dari urutan Tribonacci. Contoh: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,min_Latn,python,"
def digits(n):
    """"""Dibari suatu bilangan bulat positif n, baliakkan hasil kali dari digit ganjil. baliakkan 0 jikok kasadonyo digit adolah genap. misalnyo: digit(1) == 1 digit(4) == 0 digit(235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,min_Latn,python,"
def is_nested(string):
    '''Buek fungsi nan maambiak string sabagai input nan hanyo barisi kurung kuadrat. Fungsi ko harus manguliah True jikok jo hanyo jikok ado subsekuen kurung nan sah di mano sakurang-kurangnyo satu kurung dalam subsekuen tu dipasangan. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]' â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,min_Latn,python,"

def sum_squares(lst):
    """"""Sanak dibari daftar bilangan. Sanak paralu mambaleh jumlah bilangan kuadrat dalam daftar nan diagiah, mangurek-urekkan satiok elemen dalam daftar ka int ateh ((Patap) partamo. Contoh: Untuak lst = [1,2,3] outputnyo harus 14 Untuak lst = [1,4,9] outputnyo harus 98 Untuak lst = [1,3,5,7] outputnyo harus 84 Untuak lst = [1.4,4.2,0] outputnyo harus 29 Untuak lst = [-2.4,1,1] outputnyo harus 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,min_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Buek fungsi nan manguliah True jikok karakter tarakhia dari string nan diagiah adolah karakter alfabet dan bukan bagian dari kato, dan False kalau indak. Catatan: ""kato"" adolah kalompok karakter nan dipisahkan jo ruang. Contoh: check_if_last_char_is_a_letter"" "" "" apple pie"") â -> False check_if_last_char_is_a_letter"" ""apple pi e"") â -> True check_if_last_char_is_a_letter"" ""apple pi e"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,min_Latn,python,"
def can_arrange(arr):
    """"""Buek fungsi nan mangulihkan indeks tagadang dari suatu elemen nan indak labiah gadang dari atau samo jo elemen nan sabalunnyo. Kok indak ado elemen tasabuik mangulihkan -1. Array nan diagiah indak akan manganduang nilai duplikat. Contoh: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,min_Latn,python,"
def largest_smallest_integers(lst):
    '''Buek fungsi nan mangulihkan sabuah tuple (a, b), di mano 'a' adolah bilangan bulat negatif nan paliang gadang, dan 'b' adolah bilangan bulat positif nan paliang ketek dalam daftar. Kok indak ado bilangan bulat negatif atau positif, baliakkannyo jo None. Contoh: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,min_Latn,python,"
def compare_one(a, b):
    """"""Buek fungsi nan maambiak bilangan bulat, float, atau string nan marupokan bilangan riil, dan manguliah variabel nan labiah gadang dalam tipe variabel nan diagiah. Mauliah None jikok nilai-nilai tu samo. Catatan: Jikok bilangan riil diwakili sabagai string, floating point mungkin . atau , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,min_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Caliak apokoh bilangan nan diagiah n dapek ditulih sabagai jumlah dari 4 bilangan genap positif Cuntuak is_equal_to_sum_even ((4) == Palsu is_equal_to_sum_even ((6) == Palsu is_equal_to_sum_even ((8) == Batua """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,min_Latn,python,"
def special_factorial(n):
    """"""Faktorial Brasil didefinisiakan sabagai: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! dimano n > 0 Misalnyo: >>> special_factorial ((4) 288 Fungsi iko akan manarimo suatu bilangan bulat sabagai input dan harus mangulihkan faktoril khusus dari bilangan bulat ko. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,min_Latn,python,"
def fix_spaces(text):
    """"""_Contoh-3ring, gantilah kasadonyo ruang di dalamnyo jo tanda kurik, jo jikok string punyo labiah dari 2 ruang barikuik, lalu gantilah kasadonyo ruang barikuik jo - fix_spaces ((""Contoh"") == ""Contoh"" fix_spaces ((""Contoh1"") == ""Contoh_1"" fix_spaces ((""Contoh2"") == ""_Contoh_2"" fix_spaces ((""Contoh 3"") == ""_Contoh-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,min_Latn,python,"
def file_name_check(file_name):
    """"""Buek fungsi nan maambiak string nan marupokan namo file, dan mambali 'Yes' jikok namo file tu valid, dan mambali 'No' kok indak. Namo file dianggap valid jikok dan hanyo jikok kasado kondisi barikuik dipaso: - Indak buliah ado labiah dari tigo digit ('0'-'9') dalam namo file. - Namo file manganduang persis satu titik '.' - Substring sabalun titik indak buliah kosong, dan dimulai jo huruf dari alfabet latin ('a'-'z' jo 'A'Z'). - Substring sasudah titik harus salah satu dari iko: ['txt', 'exe', 'lld'] Contoh: file_name_check""(contoh.txt"") # => 'Yes' file_name_check""(contoh.dll1"") # => 'No' (namonyo harus dimulai jo huruf alfa latin)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,min_Latn,python,"


def sum_squares(lst):
    """""""" Fungsi ko akan maambiak daftar bilangan bulat. Untuak sadoalah entri dalam daftar, fungsi ko akan ma-kuadratkan entri bilangan bulat jikok indeksnyo adolah kelipatan dari 3 dan akan ma-kubuskan entri bilangan bulat jikok indeksnyo adolah kelipatan dari 4 dan bukan kelipatan dari 3. Fungsi ko indak akan maubah entri dalam daftar nan indeksnyo indak kelipatan dari 3 atau 4. Fungsi ko kamudian akan ma-balikan jumlah dari sadoalah entri. Contoh: Untuak lst = [1,2,3] outputnyo harus 6 Untuak lst = [] outputnyo harus 0 Untuak lst = [-1,-5,2,-1,-5] outputnyo harus -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,min_Latn,python,"
def words_in_sentence(sentence):
    """"""Sanak dibari string nan marupokan suatu kalimat, kalimat ko manganduang babarapo kato nan dipisahkan jo ruang, dan Sanak harus mangulihkan string nan manganduang kato-kato dari kalimat asali, nan panjangnyo adolah bilangan prima, urutan kato-kato dalam string baru harus samo jo nan asli. Contoh1: Input: kalimat = ""Ini adalah tes"" Output: ""is"" Contoh2: Input: kalimat = ""biarlah urang pai untuak manari"" Output: ""go for"" Keterbatasan: * 1 <= len(sentence) <= 100 * kalimat ko hanyo manganduang huruf """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,min_Latn,python,"
def simplify(x, n):
    """"""Tugas awak adolah untuak mangimplementasikan fungsi nan ka manyederhanokan ekspresi x * n. Fungsi ko mambaleh True jikok x * n mangevaluasi ka bilangan bulat dan False kalau indak. Kaduo x jo n, adolah representasi string dari sabuah pecahan, dan punyo format barikuik, <numerator>/<denominator> di mano kaduonyo pambilang jo namo adolah bilangan bulat positif. Sanak dapek mangasumsikan bahwa x, jo n adolah pecahan nan sah, dan indak punyo nol sabagai namo. simplisia "" 1/5"", ""5/1"") = True simplisia "" 1/6"", ""2/1"") = False simplisia "" 7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,min_Latn,python,"
def order_by_points(nums):
    """"""Suruik kato nan samo, kalau ado babarapo barang nan samo jumlah digitnyo, urutkan adonyo manuruik indeksnyo dalam daftar aslinyo. Misalnyo: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,min_Latn,python,"
def specialFilter(nums):
    """"""Suruik kato lain, kato "" "" '[[Special:SpecialFilter_SpecialFilter]] "" ' adolah kato nan digunoan untuak manggantikan kato nan indak tapek.""""""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,min_Latn,python,"
def get_max_triples(n):
    """"""Sanak dibari bilangan bulat positif n. Sanak harus mambuek array bilangan bulat a jo panjang n. Untuak satiok i (1 ‰¤ i ‰¤ n), nilai a[i] = i * i - i + 1. Kadoi jumlah triplek (a[i], a[j], a[k]) dari a di mano i < j < k, jo a[i] + a[j] + a[k] adolah kelipatan dari 3. Contoh: Input: n = 5 Output: 1 Penjelasan: a = [1, 3, 7, 13, 21] Satu-satunyo triplek nan valid adolah (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,min_Latn,python,"
def bf(planet1, planet2):
    '''Ado salapan planet dalam tata surya kito: nan paliang dakek ka Matohari adolah Merkurius, nan kaitu adolah Venus, kamudian Bumi, Mars, Yupiter, Saturnus, Uranus, Neptunus. Tulihkan fungsi nan maambiak duo namo planet sabagai string planet1 jo planet2. Fungsi ko harus mangulihkan sabuah tuple nan manganduang sado planet nan orbitnyo talatak antaro orbit planet1 jo orbit planet2, disusun manuruik jaraknyo ka Matohari. Fungsi ko harus mangulihkan sabuah tuple kosong jikok planet1 atau planet2 indak adolah namo planet nan tapek. Contoh bf""(Jupiter"", ""Neptunus"") ==> (""Saturn"", ""Uranus"") bf(""Bumi"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Bumi"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,min_Latn,python,"
def sorted_list_sum(lst):
    """"""Suruiknyo, untuak mambuek daftar ko, paralu digunoan aturan nan samo. Jikok duo kato nan panjangnyo samo, disusunlah daftar ko manuruik urutan abjad. Fungsi ko harus mambuek daftar ko manuruik urutan abjad. Sanak dapek manganggap baso kasadonyo kato nan ado di daftar ko punyo panjang nan samo. Misalnyo: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,min_Latn,python,"
def x_or_y(n, x, y):
    """"""Program sederhana nan harus mangulihkan nilai x jikok n adolah bilangan prima dan harus mangulihkan nilai y kalau indak. Contoh: untuak x_atau_y ((7, 34, 12) == 34 untuak x_atau_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,min_Latn,python,"
def double_the_difference(lst):
    '''Dicaliak daftar angko, baliakkan jumlah kuadrat angko-angko dalam daftar nan ganjil. Indak dicaliak angko-angko nan negatif atau indak bilangan bulat. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Kok daftar masukan kosong, baliakkan 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,min_Latn,python,"
def compare(game,guess):
    """"""Ambo sangko kito kasadonyo takana rasoan tu katiko hasil dari kajadian nan lah lamo di nanti-nantikan akhianyo dikatahui. parasaian jo pikiran nan kito punyo pado saat itu pasti patuik dicatat jo dibandiangkan. tugas kito adolah untuak manantukan apokoh urang nan batua maneka hasil dari babarapo patandingan. kito dibari duo array dari nilai jo dugaan nan panjangnyo samo, di mano satiok indeks manunjuakan patandingan. baliakkan array nan panjangnyo samo nan manandokan bara jauahnyo patamuan. jikok inyo alah maneka sacaro batua, nilai adolah 0, jo jikok indak, nilai adolah pabedaan mutlak antaro dugaan jo skor. contoh: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,min_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Iko adolah namo kelas (string) dan daftar ekstensi. Ekstensi ko digunoan untuak ma-load kelas tambahan ka kelas. Kuatan ekstensi adolah sarupo iko: Biasonyo CAP adolah jumlah huruf gadang dalam namo ekstensi, dan biasonyo SM adolah jumlah huruf ketek dalam namo ekstensi, kuatan iko di-agiah dek fraksi CAP - SM. Sanak musti mancari ekstensi nan paliang kuek dan mambaok string dalam format iko: ClassName.StrongestExtensionName. Kok ado duo atau labiah ekstensi nan kueknyo samo, Sanak musti mamiliah nan partamo dalam daftar. Misalnyo, jikok Sanak dibari ""Slices"" sabagai kelas jo daftar ekstensi: ['SEviRNGSliCes', 'Cheese', 'StuFfed'] mako Sanak musti mambaok 'Slices.SEviRNGSliCes' karano 'SviRNGSliCes' adolah ekstensi nan paliang kuek (contoh: 'AA_Beats' = 'Strongest_class'), 'AA_Extension' adolah ekstensi 'AA_class'""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,min_Latn,python,"
def cycpattern_check(a , b):
    """"""Sanak dibari 2 kato. Sanak paralu mambaleh True jikok kato kaduo atau salah satu rotasi nyo adolah substring dalam kato patamo cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check""(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,min_Latn,python,"
def even_odd_count(num):
    """"""Dibari suatu bilangan bulat. mangulihkan sabuah tuple nan mamiliki jumlah digit pari jo ganjil. Contoh: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,min_Latn,python,"
def int_to_mini_roman(number):
    """"""Dibari suatu bilangan bulat positif, ambiaklah bilangan roman nan sasuai sabagai string, dan baliakkan dalam huruf ketek.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,min_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Dibari panjang tigo sisi segitiga. Balakukan True jikok tigo sisi mambantuak segitiga sudut lansuang, False kalau indak. Segitiga sudut lansuang adolah segitiga nan ciek sudutnya adolah sudut lansuang atau 90 derajat. Contoh: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,min_Latn,python,"
def find_max(words):
    """"""Suruiknyo, kato nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak ado nan indak dapek dibali, nan indak dapek dibali, nan indak dapek dibali, nan indak dapek dibali, nan indak dapek dibali, nan indak dapek dibali, nan indak dapek, nan indak dapek, nan indak dapek, nan indak dapek, nan indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek indak dapek, indak dapek, indak dapek, indak dapek, indak dapek, indak dapek indak dapek, indak dapek, indak dapek indak dapek indak dapek, indak dapek indak dapek, indak dapek indak dapek indak dapek, indak dapek indak dapek, indak dapek indak dapek indak dapek, indak dapek indak dapek indak dapek""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,min_Latn,python,"
def eat(number, need, remaining):
    """"""Awak adolah kurcaci nan baparuik lapar, dan awak alah mamakan sajumlah wortel, tapi kini awak paralu mamakan labiah banyak wortel untuak malengkapi makanan sahari tu. awak harus mangulihkan array dari [ total jumlah wortel nan dimakannyo sasudah makan, jumlah wortel nan tasisa sasudah makan ] jikok indak ado cukup wortel nan tasisa, awak akan mamakan sado wortel nan tasisa, tapi masih akan baparuik lapar. Contoh: * makan ((5, 6, 10) -> [11, 4] * makan ((4, 8, 9) -> [12, 1] * makan ((1, 10, 10) -> [11, 0] * makan ((2, 11, 5) -> [7, 0] Variabel: @number: bilangan bulat jumlah wortel nan alah awak makan. @need: bilangan bulat jumlah wortel nan paralu awak makan. @remaining: bilangan bulat jumlah wortel nan tasisa dalam stok Constrain
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,min_Latn,python,"
def do_algebra(operator, operand):
    """"""Dibiakan duo daftar operator, jo operand. Daftar partamo punyo operasi aljabar dasar, jo daftar kaduo adolah daftar bilangan bulat. Gunakannyo duo daftar nan diagiah untuak mambangun ekspresi aljabar jo mangulihkan evaluasi ekspresi iko. Operasi aljabar dasar: Panambahan (+) Pangurangan (- ) Panambahan (*) Pembagian lantai (//) Eksponensi (**) Contoh: operator['+', '*', '-'] array = [2, 3, 4, 5] hasil = 2 + 3 * 4 - 5 => hasil = 9 Catatan: Panjang daftar operator samo jo panjang daftar operand dikurangi satu. Operand adolah daftar bilangan bulat nan indak negatif. Operator punyo saindaknyo ciek daftar operator, jo daftar operand punyo saindaknyo duo operand. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,min_Latn,python,"
def solve(s):
    """"""S[i] adolah huruf, baubah case dari bawah ka ateh atau sabaliknyo, kalau indak, simpanlah. Kok string indak ado huruf, baubah string. Fungsi ko harus mangulihkan string nan diolah. Contoh solve ((""1234"") = ""4321"" (((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,min_Latn,python,"
def string_to_md5(text):
    """"""Kalau ado string 'text', bulikkan string nan sasuai jo md5 hashnyo. Kok 'text' adolah string kosong, bulikkan None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,min_Latn,python,"
def generate_integers(a, b):
    """"""Dibari duo bilangan bulat positif a jo b, baliakkan digit pari antaro a jo b, dalam urutan maningkek. Misalnyo: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
